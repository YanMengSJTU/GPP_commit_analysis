diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index e8467c5da..f3479d148 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -3,62 +3,45 @@
     package="org.telegram"
     android:installLocation="auto">
 
-    <uses-feature
-        android:name="android.hardware.location.gps"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.location.network"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.location"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.LOCATION"
-        android:required="false" />
+    <uses-feature android:name="android.hardware.location.gps" android:required="false" />
+    <uses-feature android:name="android.hardware.location.network" android:required="false" />
+    <uses-feature android:name="android.hardware.location" android:required="false" />
+    <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
     <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" />
+    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
     <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
-    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" />
+    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
-    <permission
-        android:name="org.telegram.messenger.permission.MAPS_RECEIVE"
-        android:protectionLevel="signature" />
-    <permission
-        android:name="org.telegram.messenger.permission.C2D_MESSAGE"
-        android:protectionLevel="signature" />
+    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
+    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
 
     <application
-        android:name="org.telegram.messenger.ApplicationLoader"
         android:allowBackup="true"
-        android:hardwareAccelerated="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
-        android:largeHeap="true"
-        android:theme="@style/Theme.TMessages.Start">
+        android:theme="@style/Theme.TMessages.Start"
+        android:name="org.telegram.messenger.ApplicationLoader"
+        android:hardwareAccelerated="true"
+        android:largeHeap="true">
 
-        <meta-data
-            android:name="com.google.android.maps.v2.API_KEY"
-            android:value="AIzaSyCTNmNqbWovP9ETcAob98YlrfOQEAC0CJ4" />
+        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyCTNmNqbWovP9ETcAob98YlrfOQEAC0CJ4" />
 
         <activity android:name="net.hockeyapp.android.UpdateActivity" />
 
         <receiver
             android:name="org.telegram.android.GcmBroadcastReceiver"
-            android:permission="com.google.android.c2dm.permission.SEND">
+            android:permission="com.google.android.c2dm.permission.SEND" >
             <intent-filter>
                 <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                 <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-
                 <category android:name="org.telegram.messenger" />
             </intent-filter>
         </receiver>
 
-        <uses-library
-            android:name="com.google.android.maps"
-            android:required="false" />
+        <uses-library android:name="com.google.android.maps" android:required="false"/>
 
     </application>
 
diff --git a/TMessagesProj/config/foss/AndroidManifest.xml b/TMessagesProj/config/foss/AndroidManifest.xml
index 1c5845162..cdfb668a2 100644
--- a/TMessagesProj/config/foss/AndroidManifest.xml
+++ b/TMessagesProj/config/foss/AndroidManifest.xml
@@ -4,13 +4,13 @@
     android:installLocation="auto">
 
     <application
-        android:name="org.telegram.messenger.ApplicationLoader"
         android:allowBackup="true"
-        android:hardwareAccelerated="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
-        android:largeHeap="true"
-        android:theme="@style/Theme.TMessages.Start">
+        android:theme="@style/Theme.TMessages.Start"
+        android:name="org.telegram.messenger.ApplicationLoader"
+        android:hardwareAccelerated="true"
+        android:largeHeap="true">
 
     </application>
 
diff --git a/TMessagesProj/config/release/AndroidManifest.xml b/TMessagesProj/config/release/AndroidManifest.xml
index 1a1e5e006..89fe2cf9c 100644
--- a/TMessagesProj/config/release/AndroidManifest.xml
+++ b/TMessagesProj/config/release/AndroidManifest.xml
@@ -3,62 +3,45 @@
     package="org.telegram"
     android:installLocation="auto">
 
-    <uses-feature
-        android:name="android.hardware.location.gps"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.location.network"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.location"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.LOCATION"
-        android:required="false" />
+    <uses-feature android:name="android.hardware.location.gps" android:required="false" />
+    <uses-feature android:name="android.hardware.location.network" android:required="false" />
+    <uses-feature android:name="android.hardware.location" android:required="false" />
+    <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
     <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" />
+    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
     <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
-    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" />
+    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
-    <permission
-        android:name="org.telegram.messenger.permission.MAPS_RECEIVE"
-        android:protectionLevel="signature" />
-    <permission
-        android:name="org.telegram.messenger.permission.C2D_MESSAGE"
-        android:protectionLevel="signature" />
+    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
+    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
 
     <application
-        android:name="org.telegram.messenger.ApplicationLoader"
         android:allowBackup="true"
-        android:hardwareAccelerated="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
-        android:largeHeap="true"
-        android:theme="@style/Theme.TMessages.Start">
+        android:theme="@style/Theme.TMessages.Start"
+        android:name="org.telegram.messenger.ApplicationLoader"
+        android:hardwareAccelerated="true"
+        android:largeHeap="true">
 
-        <meta-data
-            android:name="com.google.android.maps.v2.API_KEY"
-            android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />
+        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />
 
         <activity android:name="net.hockeyapp.android.UpdateActivity" />
 
         <receiver
             android:name="org.telegram.android.GcmBroadcastReceiver"
-            android:permission="com.google.android.c2dm.permission.SEND">
+            android:permission="com.google.android.c2dm.permission.SEND" >
             <intent-filter>
                 <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                 <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-
                 <category android:name="org.telegram.messenger" />
             </intent-filter>
         </receiver>
 
-        <uses-library
-            android:name="com.google.android.maps"
-            android:required="false" />
+        <uses-library android:name="com.google.android.maps" android:required="false"/>
 
     </application>
 
diff --git a/TMessagesProj/libs/spotify-web-api-android-all-0.1.0.jar b/TMessagesProj/libs/spotify-web-api-android-all-0.1.0.jar
old mode 100755
new mode 100644
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 3de525b74..b2ac98f1a 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -3,35 +3,20 @@
     package="org.telegram"
     android:installLocation="auto">
 
-    <supports-screens
-        android:anyDensity="true"
-        android:largeScreens="true"
-        android:normalScreens="true"
-        android:resizeable="true"
-        android:smallScreens="true"
-        android:xlargeScreens="true" />
-
-    <uses-feature
-        android:glEsVersion="0x00020000"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.telephony"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.camera.autofocus"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.camera"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.wifi"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.screen.PORTRAIT"
-        android:required="false" />
-    <uses-feature
-        android:name="android.hardware.microphone"
-        android:required="false" />
+    <supports-screens android:anyDensity="true"
+                      android:largeScreens="true"
+                      android:normalScreens="true"
+                      android:resizeable="true"
+                      android:smallScreens="true"
+                      android:xlargeScreens="true"/>
+
+    <uses-feature android:glEsVersion="0x00020000" android:required="false"/>
+    <uses-feature android:name="android.hardware.telephony" android:required="false" />
+    <uses-feature android:name="android.hardware.camera.autofocus" android:required="false" />
+    <uses-feature android:name="android.hardware.camera" android:required="false" />
+    <uses-feature android:name="android.hardware.wifi" android:required="false" />
+    <uses-feature android:name="android.hardware.screen.PORTRAIT" android:required="false" />
+    <uses-feature android:name="android.hardware.microphone" android:required="false" />
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.RECORD_AUDIO" />
@@ -39,17 +24,17 @@
     <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
     <uses-permission android:name="android.permission.RECEIVE_SMS" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
     <uses-permission android:name="android.permission.CAMERA" />
     <uses-permission android:name="android.permission.GET_ACCOUNTS" />
     <uses-permission android:name="android.permission.READ_CONTACTS" />
     <uses-permission android:name="android.permission.WRITE_CONTACTS" />
-    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS" />
-    <uses-permission android:name="android.permission.READ_PROFILE" />
-    <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS" />
-    <uses-permission android:name="android.permission.READ_SYNC_SETTINGS" />
-    <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS" />
+    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS"/>
+    <uses-permission android:name="android.permission.READ_PROFILE"/>
+    <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS"/>
+    <uses-permission android:name="android.permission.READ_SYNC_SETTINGS"/>
+    <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS"/>
     <uses-permission android:name="android.permission.VIBRATE" />
     <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
@@ -72,72 +57,62 @@
             android:windowSoftInputMode="adjustPan">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
-
                 <category android:name="android.intent.category.LAUNCHER" />
                 <category android:name="android.intent.category.MULTIWINDOW_LAUNCHER" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="image/*" />
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="image/*"/>
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="video/*" />
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="video/*"/>
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND_MULTIPLE" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="image/*" />
+                <action android:name="android.intent.action.SEND_MULTIPLE"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="image/*"/>
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="text/plain" />
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="text/plain"/>
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="*/*" />
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="*/*"/>
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND_MULTIPLE" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="*/*" />
+                <action android:name="android.intent.action.SEND_MULTIPLE"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="*/*"/>
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.VIEW" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile" />
+                <action android:name="android.intent.action.VIEW"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile"/>
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.VIEW" />
-
+                <action android:name="android.intent.action.VIEW"/>
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
-
-                <data
-                    android:host="telegram.me"
-                    android:scheme="http" />
-                <data
-                    android:host="telegram.me"
-                    android:scheme="https" />
+                <data android:host="telegram.me" android:scheme="http" />
+                <data android:host="telegram.me" android:scheme="https" />
             </intent-filter>
-            <intent-filter
-                android:icon="@drawable/ic_launcher"
-                android:priority="1">
+            <intent-filter android:icon="@drawable/ic_launcher" android:priority="1">
                 <action android:name="android.intent.action.VIEW" />
-
                 <category android:name="android.intent.category.BROWSABLE" />
                 <category android:name="android.intent.category.DEFAULT" />
-
                 <data android:scheme="tg" />
             </intent-filter>
         </activity>
         <activity
             android:name="org.telegram.ui.IntroActivity"
-            android:configChanges="keyboard|keyboardHidden|orientation|screenSize"></activity>
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
         <activity
             android:name="org.telegram.ui.PopupNotificationActivity"
             android:configChanges="keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize"
@@ -145,10 +120,12 @@
             android:launchMode="singleTask"
             android:taskAffinity=""
             android:theme="@style/Theme.TMessages.PopupNotification"
-            android:windowSoftInputMode="adjustResize|stateHidden"></activity>
+            android:windowSoftInputMode="adjustResize|stateHidden">
+        </activity>
         <activity
             android:name="com.spotify.sdk.android.authentication.LoginActivity"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar"></activity>
+            android:theme="@android:style/Theme.Translucent.NoTitleBar">
+        </activity>
 
         <receiver android:name="org.telegram.android.SmsListener">
             <intent-filter>
@@ -156,74 +133,43 @@
             </intent-filter>
         </receiver>
 
-        <service
-            android:name="org.telegram.android.AuthenticatorService"
-            android:exported="true">
+        <service android:name="org.telegram.android.AuthenticatorService" android:exported="true">
             <intent-filter>
-                <action android:name="android.accounts.AccountAuthenticator" />
+                <action android:name="android.accounts.AccountAuthenticator"/>
             </intent-filter>
-            <meta-data
-                android:name="android.accounts.AccountAuthenticator"
-                android:resource="@xml/auth" />
+            <meta-data android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/auth"/>
         </service>
 
-        <service
-            android:name="org.telegram.android.ContactsSyncAdapterService"
-            android:exported="true">
+        <service android:name="org.telegram.android.ContactsSyncAdapterService" android:exported="true">
             <intent-filter>
                 <action android:name="android.content.SyncAdapter" />
             </intent-filter>
-
-            <meta-data
-                android:name="android.content.SyncAdapter"
+            <meta-data android:name="android.content.SyncAdapter"
                 android:resource="@xml/sync_contacts" />
-            <meta-data
-                android:name="android.provider.CONTACTS_STRUCTURE"
+            <meta-data android:name="android.provider.CONTACTS_STRUCTURE"
                 android:resource="@xml/contacts" />
         </service>
 
-        <service
-            android:name="org.telegram.android.NotificationsService"
-            android:enabled="true" />
-        <service
-            android:name="org.telegram.android.NotificationRepeat"
-            android:exported="false" />
-        <service
-            android:name="org.telegram.android.VideoEncodingService"
-            android:enabled="true" />
+        <service android:name="org.telegram.android.NotificationsService" android:enabled="true"/>
+        <service android:name="org.telegram.android.NotificationRepeat" android:exported="false"/>
+        <service android:name="org.telegram.android.VideoEncodingService" android:enabled="true"/>
 
-        <receiver
-            android:name="org.telegram.android.AppStartReceiver"
-            android:enabled="true">
+        <receiver android:name="org.telegram.android.AppStartReceiver" android:enabled="true">
             <intent-filter>
                 <action android:name="org.telegram.start" />
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
             </intent-filter>
         </receiver>
 
-        <receiver
-            android:name="org.telegram.android.WearReplyReceiver"
-            android:enabled="true" />
-
-        <uses-library
-            android:name="com.sec.android.app.multiwindow"
-            android:required="false" />
+        <receiver android:name="org.telegram.android.WearReplyReceiver" android:enabled="true"/>
 
-        <meta-data
-            android:name="com.sec.android.support.multiwindow"
-            android:value="true" />
-        <meta-data
-            android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W"
-            android:value="632dp" />
-        <meta-data
-            android:name="com.sec.android.multiwindow.DEFAULT_SIZE_H"
-            android:value="598dp" />
-        <meta-data
-            android:name="com.sec.android.multiwindow.MINIMUM_SIZE_W"
-            android:value="632dp" />
-        <meta-data
-            android:name="com.sec.android.multiwindow.MINIMUM_SIZE_H"
-            android:value="598dp" />
+        <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
+        <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
+        <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
+        <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_H" android:value="598dp" />
+        <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_W" android:value="632dp" />
+        <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_H" android:value="598dp" />
 
     </application>
 
diff --git a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java
index 5075b718d..1044c9c6e 100755
--- a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java
+++ b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java
@@ -39,20 +39,6 @@
     private final SelectionKey key;
 
     private final ByteStream outbound;
-    private final List<PyroClientListener> listeners;
-    private Object attachment;
-
-    //
-    private boolean doEagerWrite = false;
-urn this.outbound.hasData();
-    }
-
-l();
-            }
-
- }
-
-    private long timeou
 
     // called by PyroSelector.connect()
     PyroClient(PyroSelector selector, InetSocketAddress bind,
@@ -63,8 +49,6 @@
         ((SocketChannel) this.key.channel()).connect(host);
     }
 
-    //
-
     // called by PyroClient and PyroServer
     PyroClient(PyroSelector selector, SelectionKey key) {
         this.selector = selector;
@@ -78,42 +62,10 @@
         this.lastEventTime = System.currentTimeMillis();
     }
 
-                interested);
-    }
-
-    static SelectionKey bindAndConfigure(PyroSelector selector,
-            SocketChannel channel, InetSocketAddress bind) throws IOException {
-        selector.checkThread();
-
-        channel.socket().bind(bind);
-
-        return c
-
-re(selector, channel, true);
-    }
-
-    static SelectionKey configure(PyroSelector selector,
-            SocketChannel channel, boolean connect) throws IOException {
-        selector.checkThread();
-
-        channel.configureBlocking(false);
-        // channel.socket().setSoLinger(false, 0); // this will b0rk your
-        // connections
-        channel.socket().setSoLinger(true, 4);
-        channel.socket().setReuseAddress(false);
-        channel.socket().setKeepAlive(false);
-        channel.socket().setTcpNoDelay(true);
-        channel.socket().setReceiveBufferSize(PyroSelector.BUFFER_SIZE);
-        channel.socket().setSendBufferSize(PyroSelector.BUFFER_SIZE);
-
-        int ops = SelectionKey.OP_READ;
-        if (connect)
-            ops |= SelectionKey.OP_CONNECT;
-
-        retur
-
     //
 
+    private final List<PyroClientListener> listeners;
+
     public void addListener(PyroClientListener listener) {
         this.selector.checkThread();
 
@@ -126,8 +78,6 @@ public void removeListener(PyroClientListener listener) {
         this.listeners.remove(listener);
     }
 
-    //
-
     public void removeListeners() {
         this.selector.checkThread();
 
@@ -142,6 +92,10 @@ public PyroSelector selector() {
         return this.selector;
     }
 
+    //
+
+    private Object attachment;
+
     /**
      * Attach any object to a client, for example to store session information
      */
@@ -160,6 +114,8 @@ public void attach(Object attachment) {
         return (T) this.attachment;
     }
 
+    //
+
     /**
      * Returns the local socket address (host+port)
      */
@@ -169,14 +125,16 @@ public InetSocketAddress getLocalAddress() {
         return (InetSocketAddress) s.getLocalSocketAddress();
     }
 
-        /**
+    /**
      * Returns the remove socket address (host+port)
      */
 
     public InetSocketAddress getRemoteAddress() {
         Socket s = ((SocketChannel) key.channel()).socket();
         return (InetSocketAddress) s.getRemoteSocketAddress();
-    }p();
+    }
+
+    //
 
     public void setTimeout(int ms) throws IOException {
         this.selector.checkThread();
@@ -186,18 +144,22 @@ public void setTimeout(int ms) throws IOException {
         // prevent a call to setTimeout from immediately causing a timeout
         this.lastEventTime = System.currentTimeMillis();
         this.timeout = ms;
-    } retur
+    }
+
     public void setLinger(boolean enabled, int seconds) throws IOException {
         this.selector.checkThread();
 
         ((SocketChannel) key.channel()).socket().setSoLinger(enabled, seconds);
-    };
+    }
 
     public void setKeepAlive(boolean enabled) throws IOException {
         this.selector.checkThread();
 
         ((SocketChannel) key.channel()).socket().setKeepAlive(enabled);
-    }   ret
+    }
+
+    private boolean doEagerWrite = false;
+
     /**
      * If enabled, causes calls to write() to make an attempt to write the
      * bytes, without waiting for the selector to signal writable state.
@@ -206,15 +168,15 @@ public void setKeepAlive(boolean enabled) throws IOException {
     public void setEagerWrite(boolean enabled) {
         this.doEagerWrite = enabled;
     }
-    p
-/**
+
+    /**
      * Will enqueue the bytes to send them<br>
      * 1. when the selector is ready to write, if eagerWrite is disabled
      * (default)<br>
      * 2. immediately, if eagerWrite is enabled<br>
      * The ByteBuffer instance is kept, not copied, and thus should not be
      * modified
-     *
+     * 
      * @throws PyroException
      *             when shutdown() has been called.
      */
@@ -243,8 +205,8 @@ public void write(ByteBufferDesc data) throws PyroException {
                 key.cancel();
             }
         } else {
-            this.adjustWriteO  this
-       }
+            this.adjustWriteOp();
+        }
     }
 
     /**
@@ -270,13 +232,12 @@ public int flush() {
             total += written;
         }
 
-         this
-n total;
+        return total;
     }
 
     /**
      * Makes an attempt to write all outbound bytes, fails on failure.
-     *
+     * 
      * @throws PyroException
      *             on failure
      */
@@ -298,8 +259,8 @@ public int flushOrDie() throws PyroException {
                         + " bytes");
             }
 
-            total += writtenturn !this.key
-    }
+            total += written;
+        }
 
         return total;
     }
@@ -311,8 +272,10 @@ public int flushOrDie() throws PyroException {
     public boolean hasDataEnqueued() {
         this.selector.checkThread();
 
-     .cance
-rivate boolean doShutdown = false;
+        return this.outbound.hasData();
+    }
+
+    private boolean doShutdown = false;
 
     /**
      * Gracefully shuts down the connection. The connection is closed after the
@@ -326,9 +289,7 @@ public void shutdown() {
         this.doShutdown = true;
 
         if (!this.hasDataEnqueued()) {
-           }
-
-.dropConnection();
+            this.dropConnection();
         }
     }
 
@@ -360,8 +321,7 @@ public void run() {
 
         drop.run();
 
-      t = 0L
-.onConnectionError("local");
+        this.onConnectionError("local");
     }
 
     /**
@@ -371,8 +331,7 @@ public void run() {
     public boolean isDisconnected() {
         this.selector.checkThread();
 
-        rehis.la
-.channel().isOpen();
+        return !this.key.channel().isOpen();
     }
 
     //
@@ -390,14 +349,17 @@ void onInterestOp(long now) {
                     this.onReadyToWrite(now);
             } catch (Exception exc) {
                 this.onConnectionError(exc);
-                key   lis
-;
+                key.cancel();
+            }
+        }
+    }
+
+    private long timeout = 0L;
 
     private long lastEventTime;
 
     boolean didTimeout(long now) {
-        return this.timeout != 0 && (now - tstener
-stEventTime) > this.timeout;
+        return this.timeout != 0 && (now - this.lastEventTime) > this.timeout;
     }
 
     private void onReadyToConnect(long now) throws IOException {
@@ -408,9 +370,7 @@ private void onReadyToConnect(long now) throws IOException {
         boolean result = ((SocketChannel) key.channel()).finishConnect();
 
         for (PyroClientListener listener: this.listeners)
-         );
-
-tener.connectedClient(this);
+            listener.connectedClient(this);
     }
 
     private void onReadyToRead(long now) throws IOException {
@@ -429,8 +389,7 @@ private void onReadyToRead(long now) throws IOException {
         buffer.flip();
 
         for (PyroClientListener listener: this.listeners)
-            lilegal
-.receivedData(this, buffer);
+            listener.receivedData(this, buffer);
     }
 
     private int onReadyToWrite(long now) throws IOException {
@@ -461,8 +420,8 @@ private int onReadyToWrite(long now) throws IOException {
         this.adjustWriteOp();
 
         if (this.doShutdown && !this.outbound.hasData()) {
-            this.dropConnection(dressT
-     }
+            this.dropConnection();
+        }
 
         return sent;
     }
@@ -509,15 +468,12 @@ public void run() {
             for (PyroClientListener listener: this.listeners)
                 listener.droppedClient(this, null);
         } else {
-            throw new IllegalStateException("ilress() + "@" +
-cause: " + cause);
+            throw new IllegalStateException("illegal cause: " + cause);
         }
     }
 
     public String toString() {
-        return this.getClass().getSimpleName() + "[" + this.getAdRITE,
-
-ext()
+        return this.getClass().getSimpleName() + "[" + this.getAddressText()
                 + "]";
     }
 
@@ -529,8 +485,7 @@ private String getAddressText() {
         if (sockaddr == null)
             return "connecting";
         InetAddress inetaddr = sockaddr.getAddress();
-        return inetaddr.getHostAddonfigu
- sockaddr.getPort();
+        return inetaddr.getHostAddress() + "@" + sockaddr.getPort();
     }
 
     //
@@ -540,6 +495,37 @@ void adjustWriteOp() {
 
         boolean interested = this.outbound.hasData();
 
-        this.selector.adjustInterestOp(this.key, SelectionKey.OP_Wn selector.register(channel, ops);
+        this.selector.adjustInterestOp(this.key, SelectionKey.OP_WRITE,
+                interested);
+    }
+
+    static SelectionKey bindAndConfigure(PyroSelector selector,
+            SocketChannel channel, InetSocketAddress bind) throws IOException {
+        selector.checkThread();
+
+        channel.socket().bind(bind);
+
+        return configure(selector, channel, true);
+    }
+
+    static SelectionKey configure(PyroSelector selector,
+            SocketChannel channel, boolean connect) throws IOException {
+        selector.checkThread();
+
+        channel.configureBlocking(false);
+        // channel.socket().setSoLinger(false, 0); // this will b0rk your
+        // connections
+        channel.socket().setSoLinger(true, 4);
+        channel.socket().setReuseAddress(false);
+        channel.socket().setKeepAlive(false);
+        channel.socket().setTcpNoDelay(true);
+        channel.socket().setReceiveBufferSize(PyroSelector.BUFFER_SIZE);
+        channel.socket().setSendBufferSize(PyroSelector.BUFFER_SIZE);
+
+        int ops = SelectionKey.OP_READ;
+        if (connect)
+            ops |= SelectionKey.OP_CONNECT;
+
+        return selector.register(channel, ops);
     }
 }
diff --git a/TMessagesProj/src/main/java/jawnae/pyronet/PyroSelector.java b/TMessagesProj/src/main/java/jawnae/pyronet/PyroSelector.java
index 077296e66..ce89abcd2 100755
--- a/TMessagesProj/src/main/java/jawnae/pyronet/PyroSelector.java
+++ b/TMessagesProj/src/main/java/jawnae/pyronet/PyroSelector.java
@@ -32,14 +32,15 @@
 import java.util.concurrent.LinkedBlockingQueue;
 
 public class PyroSelector {
-    public static final int BUFFER_SIZE = 64 * 1024;
     public static boolean DO_NOT_CHECK_NETWORK_THREAD = true;
-    final Selector nioSelector;
-    final ByteBuffer networkBuffer;
+
+    public static final int BUFFER_SIZE = 64 * 1024;
+
     Thread networkThread;
-    private BlockingQueue<Runnable> tasks = new LinkedBlockingQueue<Runnable>();
 
-    //
+    final Selector nioSelector;
+
+    final ByteBuffer networkBuffer;
 
     public PyroSelector() {
         this.networkBuffer = ByteBuffer.allocateDirect(BUFFER_SIZE);
@@ -53,6 +54,8 @@ public PyroSelector() {
         this.networkThread = Thread.currentThread();
     }
 
+    //
+
     public final boolean isNetworkThread() {
         return DO_NOT_CHECK_NETWORK_THREAD || networkThread == Thread.currentThread();
     }
@@ -150,8 +153,6 @@ private void handleSocketTimeouts(long now) {
         }
     }
 
-    //
-
     public void spawnNetworkThread(final String name) {
         // now no thread can access this selector
         //
@@ -189,6 +190,10 @@ public void run() {
         }, name).start();
     }
 
+    //
+
+    private BlockingQueue<Runnable> tasks = new LinkedBlockingQueue<Runnable>();
+
     public void scheduleTask(Runnable task) {
         if (task == null) {
             throw new NullPointerException();
diff --git a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneFormat.java b/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneFormat.java
index 6bfc9e99f..a6dbff0ac 100644
--- a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneFormat.java
+++ b/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneFormat.java
@@ -35,8 +35,8 @@
 import java.util.Locale;
 
 public class PhoneFormat {
-    private static volatile PhoneFormat Instance = null;
     public byte[] data;
+    private boolean initialzed = false;
     public ByteBuffer buffer;
     public String defaultCountry;
     public String defaultCallingCode;
@@ -44,15 +44,8 @@
     public HashMap<String, ArrayList<String>> callingCodeCountries;
     public HashMap<String, CallingCodeInfo> callingCodeData;
     public HashMap<String, String> countryCallingCode;
-    private boolean initialzed = false;
-    public PhoneFormat() {
-        init(null);
-    }
-
-    public PhoneFormat(String countryCode) {
-        init(countryCode);
-    }
 
+    private static volatile PhoneFormat Instance = null;
     public static PhoneFormat getInstance() {
         PhoneFormat localInstance = Instance;
         if (localInstance == null) {
@@ -95,6 +88,14 @@ public static String stripExceptNumbers(String str) {
         return stripExceptNumbers(str, false);
     }
 
+    public PhoneFormat() {
+        init(null);
+    }
+
+    public PhoneFormat(String countryCode) {
+        init(countryCode);
+    }
+
     public void init(String countryCode) {
         try {
             InputStream stream = ApplicationLoader.applicationContext.getAssets().open("PhoneFormats.dat");
diff --git a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/RuleSet.java b/TMessagesProj/src/main/java/org/telegram/PhoneFormat/RuleSet.java
index d700849de..5b7ecacf1 100644
--- a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/RuleSet.java
+++ b/TMessagesProj/src/main/java/org/telegram/PhoneFormat/RuleSet.java
@@ -29,11 +29,11 @@
 import java.util.regex.Pattern;
 
 public class RuleSet {
-    public static Pattern pattern = Pattern.compile("[0-9]+");
     public int matchLen;
     public ArrayList<PhoneRule> rules = new ArrayList<PhoneRule>();
     public boolean hasRuleWithIntlPrefix;
     public boolean hasRuleWithTrunkPrefix;
+    public static Pattern pattern = Pattern.compile("[0-9]+");
 
     String format(String str, String intlPrefix, String trunkPrefix, boolean prefixRequired) {
         if (str.length() >= matchLen) {
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteCursor.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteCursor.java
index 2843b8608..48bd87778 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteCursor.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteCursor.java
@@ -14,48 +14,48 @@
 
 public class SQLiteCursor {
 
-    public static final int FIELD_TYPE_INT = 1;
-    public static final int FIELD_TYPE_FLOAT = 2;
-    public static final int FIELD_TYPE_STRING = 3;
-    public static final int FIELD_TYPE_BYTEARRAY = 4;
-    public static final int FIELD_TYPE_NULL = 5;
-
-    SQLitePreparedStatement preparedStatement;
-    boolean inRow = false;
-
-    public SQLiteCursor(SQLitePreparedStatement stmt) {
-        preparedStatement = stmt;
-    }
-
-    public boolean isNull(int columnIndex) throws SQLiteException {
-        checkRow();
-        return columnIsNull(preparedStatement.getStatementHandle(), columnIndex) == 1;
-    }
-
-    public int intValue(int columnIndex) throws SQLiteException {
-        checkRow();
-        return columnIntValue(preparedStatement.getStatementHandle(), columnIndex);
-    }
-
-    public double doubleValue(int columnIndex) throws SQLiteException {
-        checkRow();
-        return columnDoubleValue(preparedStatement.getStatementHandle(), columnIndex);
-    }
+	public static final int FIELD_TYPE_INT = 1;
+	public static final int FIELD_TYPE_FLOAT = 2;
+	public static final int FIELD_TYPE_STRING = 3;
+	public static final int FIELD_TYPE_BYTEARRAY = 4;
+	public static final int FIELD_TYPE_NULL = 5;
+
+	SQLitePreparedStatement preparedStatement;
+	boolean inRow = false;
+
+	public SQLiteCursor(SQLitePreparedStatement stmt) {
+		preparedStatement = stmt;
+	}
+
+	public boolean isNull(int columnIndex) throws SQLiteException {
+		checkRow();
+		return columnIsNull(preparedStatement.getStatementHandle(), columnIndex) == 1;
+	}
+
+	public int intValue(int columnIndex) throws SQLiteException {
+		checkRow();
+		return columnIntValue(preparedStatement.getStatementHandle(), columnIndex);
+	}
+
+	public double doubleValue(int columnIndex) throws SQLiteException {
+		checkRow();
+		return columnDoubleValue(preparedStatement.getStatementHandle(), columnIndex);
+	}
 
     public long longValue(int columnIndex) throws SQLiteException {
         checkRow();
         return columnLongValue(preparedStatement.getStatementHandle(), columnIndex);
     }
 
-    public String stringValue(int columnIndex) throws SQLiteException {
-        checkRow();
-        return columnStringValue(preparedStatement.getStatementHandle(), columnIndex);
-    }
+	public String stringValue(int columnIndex) throws SQLiteException {
+		checkRow();
+		return columnStringValue(preparedStatement.getStatementHandle(), columnIndex);
+	}
 
-    public byte[] byteArrayValue(int columnIndex) throws SQLiteException {
-        checkRow();
-        return columnByteArrayValue(preparedStatement.getStatementHandle(), columnIndex);
-    }
+	public byte[] byteArrayValue(int columnIndex) throws SQLiteException {
+		checkRow();
+		return columnByteArrayValue(preparedStatement.getStatementHandle(), columnIndex);
+	}
 
     public int byteArrayLength(int columnIndex) throws SQLiteException {
         checkRow();
@@ -67,14 +67,14 @@ public int byteBufferValue(int columnIndex, ByteBuffer buffer) throws SQLiteExce
         return columnByteBufferValue(preparedStatement.getStatementHandle(), columnIndex, buffer);
     }
 
-    public int getTypeOf(int columnIndex) throws SQLiteException {
-        checkRow();
-        return columnType(preparedStatement.getStatementHandle(), columnIndex);
-    }
+	public int getTypeOf(int columnIndex) throws SQLiteException {
+		checkRow();
+		return columnType(preparedStatement.getStatementHandle(), columnIndex);
+	}
 
-    public boolean next() throws SQLiteException {
-        int res = preparedStatement.step(preparedStatement.getStatementHandle());
-        if (res == -1) {
+	public boolean next() throws SQLiteException {
+		int res = preparedStatement.step(preparedStatement.getStatementHandle());
+		if(res == -1) {
             int repeatCount = 6;
             while (repeatCount-- != 0) {
                 try {
@@ -92,39 +92,31 @@ public boolean next() throws SQLiteException {
                 throw new SQLiteException("sqlite busy");
             }
         }
-        inRow = (res == 0);
-        return inRow;
-    }
-
-    public int getStatementHandle() {
-        return preparedStatement.getStatementHandle();
-    }
-
-    public void dispose() {
-        preparedStatement.dispose();
-    }
-
-    void checkRow() throws SQLiteException {
-        if (!inRow) {
-            throw new SQLiteException("You must call next before");
-        }
-    }
-
-    native int columnType(int statementHandle, int columnIndex);
-
-    native int columnIsNull(int statementHandle, int columnIndex);
-
-    native int columnIntValue(int statementHandle, int columnIndex);
-
+		inRow = (res == 0);
+		return inRow;
+	}
+
+	public int getStatementHandle() {
+		return preparedStatement.getStatementHandle();
+	}
+
+	public void dispose() {
+		preparedStatement.dispose();
+	}
+
+	void checkRow() throws SQLiteException {
+		if (!inRow) {
+			throw new SQLiteException("You must call next before");
+		}
+	}
+
+	native int columnType(int statementHandle, int columnIndex);
+	native int columnIsNull(int statementHandle, int columnIndex);
+	native int columnIntValue(int statementHandle, int columnIndex);
     native long columnLongValue(int statementHandle, int columnIndex);
-
-    native double columnDoubleValue(int statementHandle, int columnIndex);
-
-    native String columnStringValue(int statementHandle, int columnIndex);
-
-    native byte[] columnByteArrayValue(int statementHandle, int columnIndex);
-
+	native double columnDoubleValue(int statementHandle, int columnIndex);
+	native String columnStringValue(int statementHandle, int columnIndex);
+	native byte[] columnByteArrayValue(int statementHandle, int columnIndex);
     native int columnByteArrayLength(int statementHandle, int columnIndex);
-
     native int columnByteBufferValue(int statementHandle, int columnIndex, ByteBuffer buffer);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
index 5e0ca5e7d..0aecf4b23 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
@@ -8,76 +8,76 @@
 
 package org.telegram.SQLite;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ApplicationLoader;
 
 public class SQLiteDatabase {
-    private final int sqliteHandle;
+	private final int sqliteHandle;
 
-    private boolean isOpen = false;
+	private boolean isOpen = false;
     private boolean inTransaction = false;
-    private StackTraceElement[] temp;
 
-    public SQLiteDatabase(String fileName) throws SQLiteException {
-        sqliteHandle = opendb(fileName, ApplicationLoader.applicationContext.getFilesDir().getPath());
-        isOpen = true;
-    }
+	public int getSQLiteHandle() {
+		return sqliteHandle;
+	}
 
-    public int getSQLiteHandle() {
-        return sqliteHandle;
-    }
+	public SQLiteDatabase(String fileName) throws SQLiteException {
+		sqliteHandle = opendb(fileName, ApplicationLoader.applicationContext.getFilesDir().getPath());
+		isOpen = true;
+	}
 
-    public boolean tableExists(String tableName) throws SQLiteException {
-        checkOpened();
-        String s = "SELECT rowid FROM sqlite_master WHERE type='table' AND name=?;";
-        return executeInt(s, tableName) != null;
-    }
+	public boolean tableExists(String tableName) throws SQLiteException {
+		checkOpened();
+		String s = "SELECT rowid FROM sqlite_master WHERE type='table' AND name=?;";
+		return executeInt(s, tableName) != null;
+	}
 
     public SQLitePreparedStatement executeFast(String sql) throws SQLiteException {
         return new SQLitePreparedStatement(this, sql, true);
     }
 
-    public Integer executeInt(String sql, Object... args) throws SQLiteException {
-        checkOpened();
-        SQLiteCursor cursor = queryFinalized(sql, args);
-        try {
-            if (!cursor.next()) {
-                return null;
-            }
-            return cursor.intValue(0);
-        } finally {
-            cursor.dispose();
-        }
-    }
-
-    public SQLiteCursor queryFinalized(String sql, Object... args) throws SQLiteException {
-        checkOpened();
-        return new SQLitePreparedStatement(this, sql, true).query(args);
-    }
-
-    public void close() {
-        if (isOpen) {
-            try {
+	public Integer executeInt(String sql, Object... args) throws SQLiteException {
+		checkOpened();
+		SQLiteCursor cursor = queryFinalized(sql, args);
+		try {
+			if (!cursor.next()) {
+				return null;
+			}
+			return cursor.intValue(0);
+		} finally {
+			cursor.dispose();
+		}
+	}
+
+	public SQLiteCursor queryFinalized(String sql, Object... args) throws SQLiteException {
+		checkOpened();
+		return new SQLitePreparedStatement(this, sql, true).query(args);
+	}
+
+	public void close() {
+		if (isOpen) {
+			try {
                 commitTransaction();
-                closedb(sqliteHandle);
-            } catch (SQLiteException e) {
+				closedb(sqliteHandle);
+			} catch (SQLiteException e) {
                 FileLog.e("tmessages", e.getMessage(), e);
-            }
-            isOpen = false;
-        }
-    }
-
-    void checkOpened() throws SQLiteException {
-        if (!isOpen) {
-            throw new SQLiteException("Database closed");
-        }
-    }
-
-    public void finalize() throws Throwable {
+			}
+			isOpen = false;
+		}
+	}
+
+	void checkOpened() throws SQLiteException {
+		if (!isOpen) {
+			throw new SQLiteException("Database closed");
+		}
+	}
+
+	public void finalize() throws Throwable {
         super.finalize();
-        close();
-    }
+		close();
+	}
 
+    private StackTraceElement[] temp;
     public void beginTransaction() throws SQLiteException {
         if (inTransaction) {
             throw new SQLiteException("database already in transaction");
@@ -94,11 +94,8 @@ public void commitTransaction() {
         commitTransaction(sqliteHandle);
     }
 
-    native int opendb(String fileName, String tempDir) throws SQLiteException;
-
-    native void closedb(int sqliteHandle) throws SQLiteException;
-
+	native int opendb(String fileName, String tempDir) throws SQLiteException;
+	native void closedb(int sqliteHandle) throws SQLiteException;
     native void beginTransaction(int sqliteHandle);
-
     native void commitTransaction(int sqliteHandle);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteException.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteException.java
index 89e3d55fd..d27cfb6a0 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteException.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteException.java
@@ -9,19 +9,19 @@
 package org.telegram.SQLite;
 
 public class SQLiteException extends Exception {
-    private static final long serialVersionUID = -2398298479089615621L;
-    public final int errorCode;
+	private static final long serialVersionUID = -2398298479089615621L;
+	public final int errorCode;
+	
+	public SQLiteException(int errcode, String msg) {
+		super(msg);
+		errorCode = errcode;		
+	}
 
-    public SQLiteException(int errcode, String msg) {
-        super(msg);
-        errorCode = errcode;
-    }
+	public SQLiteException(String msg) {
+		this(0, msg);
+	}
 
-    public SQLiteException(String msg) {
-        this(0, msg);
-    }
-
-    public SQLiteException() {
-        errorCode = 0;
-    }
+	public SQLiteException() {
+		errorCode = 0;
+	}
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteNoRowException.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteNoRowException.java
index 885ff1d20..042f0070f 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteNoRowException.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteNoRowException.java
@@ -9,5 +9,5 @@
 package org.telegram.SQLite;
 
 public class SQLiteNoRowException extends Exception {
-    private static final long serialVersionUID = 4098095358028103112L;
+	private static final long serialVersionUID = 4098095358028103112L;
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
index 30dcef041..6335d93b8 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
@@ -13,20 +13,21 @@
 import java.nio.ByteBuffer;
 
 public class SQLitePreparedStatement {
-    private boolean isFinalized = false;
-    private int sqliteStatementHandle;
+	private boolean isFinalized = false;
+	private int sqliteStatementHandle;
 
-    private int queryArgsCount;
-    private boolean finalizeAfterQuery = false;
+	private int queryArgsCount;
+	private boolean finalizeAfterQuery = false;
 
-    public SQLitePreparedStatement(SQLiteDatabase db, String sql, boolean finalize) throws SQLiteException {
-        finalizeAfterQuery = finalize;
-        sqliteStatementHandle = prepare(db.getSQLiteHandle(), sql);
-    }
+	public int getStatementHandle() {
+		return sqliteStatementHandle;
+	}
+
+	public SQLitePreparedStatement(SQLiteDatabase db, String sql, boolean finalize) throws SQLiteException {
+		finalizeAfterQuery = finalize;
+		sqliteStatementHandle = prepare(db.getSQLiteHandle(), sql);
+	}
 
-    public int getStatementHandle() {
-        return sqliteStatementHandle;
-    }
 
     public SQLiteCursor query(Object[] args) throws SQLiteException {
         if (args == null || args.length != queryArgsCount) {
@@ -42,11 +43,11 @@ public SQLiteCursor query(Object[] args) throws SQLiteException {
             if (obj == null) {
                 bindNull(sqliteStatementHandle, i);
             } else if (obj instanceof Integer) {
-                bindInt(sqliteStatementHandle, i, (Integer) obj);
+                bindInt(sqliteStatementHandle, i, (Integer)obj);
             } else if (obj instanceof Double) {
-                bindDouble(sqliteStatementHandle, i, (Double) obj);
+                bindDouble(sqliteStatementHandle, i, (Double)obj);
             } else if (obj instanceof String) {
-                bindString(sqliteStatementHandle, i, (String) obj);
+                bindString(sqliteStatementHandle, i, (String)obj);
             } else {
                 throw new IllegalArgumentException();
             }
@@ -65,34 +66,34 @@ public SQLitePreparedStatement stepThis() throws SQLiteException {
         return this;
     }
 
-    public void requery() throws SQLiteException {
-        checkFinalized();
-        reset(sqliteStatementHandle);
-    }
+	public void requery() throws SQLiteException {
+		checkFinalized();
+		reset(sqliteStatementHandle);
+	}
 
-    public void dispose() {
-        if (finalizeAfterQuery) {
-            finalizeQuery();
-        }
-    }
+	public void dispose() {
+		if (finalizeAfterQuery) {
+			finalizeQuery();
+		}
+	}
 
-    void checkFinalized() throws SQLiteException {
-        if (isFinalized) {
-            throw new SQLiteException("Prepared query finalized");
-        }
-    }
+	void checkFinalized() throws SQLiteException {
+		if (isFinalized) {
+			throw new SQLiteException("Prepared query finalized");
+		}
+	}
 
-    public void finalizeQuery() {
+	public void finalizeQuery() {
         if (isFinalized) {
             return;
         }
-        try {
-            isFinalized = true;
-            finalize(sqliteStatementHandle);
-        } catch (SQLiteException e) {
+		try {
+			isFinalized = true;
+			finalize(sqliteStatementHandle);
+		} catch (SQLiteException e) {
             FileLog.e("tmessages", e.getMessage(), e);
-        }
-    }
+		}
+	}
 
     public void bindInteger(int index, int value) throws SQLiteException {
         bindInt(sqliteStatementHandle, index, value);
@@ -114,23 +115,14 @@ public void bindLong(int index, long value) throws SQLiteException {
         bindLong(sqliteStatementHandle, index, value);
     }
 
-    native void bindByteBuffer(int statementHandle, int index, ByteBuffer value, int length) throws SQLiteException;
-
-    native void bindString(int statementHandle, int index, String value) throws SQLiteException;
-
-    native void bindInt(int statementHandle, int index, int value) throws SQLiteException;
-
+	native void bindByteBuffer(int statementHandle, int index, ByteBuffer value, int length) throws SQLiteException;
+	native void bindString(int statementHandle, int index, String value) throws SQLiteException;
+	native void bindInt(int statementHandle, int index, int value) throws SQLiteException;
     native void bindLong(int statementHandle, int index, long value) throws SQLiteException;
-
-    native void bindDouble(int statementHandle, int index, double value) throws SQLiteException;
-
-    native void bindNull(int statementHandle, int index) throws SQLiteException;
-
-    native void reset(int statementHandle) throws SQLiteException;
-
-    native int prepare(int sqliteHandle, String sql) throws SQLiteException;
-
-    native void finalize(int statementHandle) throws SQLiteException;
-
+	native void bindDouble(int statementHandle, int index, double value) throws SQLiteException;
+	native void bindNull(int statementHandle, int index) throws SQLiteException;
+	native void reset(int statementHandle) throws SQLiteException;
+	native int prepare(int sqliteHandle, String sql) throws SQLiteException;
+	native void finalize(int statementHandle) throws SQLiteException;
     native int step(int statementHandle) throws SQLiteException;
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 202d23835..d2dcabd5e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -35,10 +35,10 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.R;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.Components.NumberPicker;
 import org.telegram.ui.Components.TypefaceSpan;
 
@@ -51,13 +51,14 @@
 public class AndroidUtilities {
 
     private static final Hashtable<String, Typeface> typefaceCache = new Hashtable<String, Typeface>();
+    private static int prevOrientation = -10;
+    private static boolean waitingForSms = false;
     private static final Object smsLock = new Object();
+
     public static int statusBarHeight = 0;
     public static float density = 1;
     public static Point displaySize = new Point();
     public static Integer photoSize = null;
-    private static int prevOrientation = -10;
-    private static boolean waitingForSms = false;
     private static Boolean isTablet = null;
 
     static {
@@ -71,7 +72,7 @@ public static void lockOrientation(Activity activity) {
         }
         try {
             prevOrientation = activity.getRequestedOrientation();
-            WindowManager manager = (WindowManager) activity.getSystemService(Activity.WINDOW_SERVICE);
+            WindowManager manager = (WindowManager)activity.getSystemService(Activity.WINDOW_SERVICE);
             if (manager != null && manager.getDefaultDisplay() != null) {
                 int rotation = manager.getDefaultDisplay().getRotation();
                 int orientation = activity.getResources().getConfiguration().orientation;
@@ -160,7 +161,7 @@ public static void showKeyboard(View view) {
         if (view == null) {
             return;
         }
-        InputMethodManager inputManager = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+        InputMethodManager inputManager = (InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
         inputManager.showSoftInput(view, InputMethodManager.SHOW_IMPLICIT);
 
         ((InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(view, 0);
@@ -208,7 +209,7 @@ public static File getCacheDir() {
     }
 
     public static int dp(float value) {
-        return (int) Math.ceil(density * value);
+        return (int)Math.ceil(density * value);
     }
 
     public static float dpf2(float value) {
@@ -217,11 +218,11 @@ public static float dpf2(float value) {
 
     public static void checkDisplaySize() {
         try {
-            WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
+            WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
             if (manager != null) {
                 Display display = manager.getDefaultDisplay();
                 if (display != null) {
-                    if (android.os.Build.VERSION.SDK_INT < 13) {
+                    if(android.os.Build.VERSION.SDK_INT < 13) {
                         displaySize.set(display.getWidth(), display.getHeight());
                     } else {
                         display.getSize(displaySize);
@@ -235,7 +236,7 @@ public static void checkDisplaySize() {
     }
 
     public static long makeBroadcastId(int id) {
-        return 0x0000000100000000L | ((long) id & 0x00000000FFFFFFFFL);
+        return 0x0000000100000000L | ((long)id & 0x00000000FFFFFFFFL);
     }
 
     public static int getMyLayerVersion(int layer) {
@@ -425,7 +426,7 @@ public static int getViewInset(View view) {
             if (mAttachInfo != null) {
                 Field mStableInsetsField = mAttachInfo.getClass().getDeclaredField("mStableInsets");
                 mStableInsetsField.setAccessible(true);
-                Rect insets = (Rect) mStableInsetsField.get(mAttachInfo);
+                Rect insets = (Rect)mStableInsetsField.get(mAttachInfo);
                 return insets.bottom;
             }
         } catch (Exception e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java b/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java
index dac2b4c52..1d9c4bdcc 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java
@@ -21,24 +21,6 @@
 
 public class AuthenticatorService extends Service {
 
-    private static Authenticator authenticator = null;
-
-    protected Authenticator getAuthenticator() {
-        if (authenticator == null) {
-            authenticator = new Authenticator(this);
-        }
-        return authenticator;
-    }
-
-    @Override
-    public IBinder onBind(Intent intent) {
-        if (intent.getAction().equals(AccountManager.ACTION_AUTHENTICATOR_INTENT)) {
-            return getAuthenticator().getIBinder();
-        } else {
-            return null;
-        }
-    }
-
     private static class Authenticator extends AbstractAccountAuthenticator {
         private final Context context;
 
@@ -93,4 +75,23 @@ public Bundle updateCredentials(AccountAuthenticatorResponse response, Account a
         }
 
     }
+
+    private static Authenticator authenticator = null;
+
+    protected Authenticator getAuthenticator() {
+        if (authenticator == null) {
+            authenticator = new Authenticator(this);
+        }
+        return authenticator;
+    }
+
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        if (intent.getAction().equals(AccountManager.ACTION_AUTHENTICATOR_INTENT)) {
+            return getAuthenticator().getIBinder();
+        } else {
+            return null;
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index 89e10a233..2237b506b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -22,16 +22,16 @@
 import android.util.SparseArray;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -42,31 +42,34 @@
 
 public class ContactsController {
 
-    private static final Object loadContactsSync = new Object();
-    private static volatile ContactsController Instance = null;
-    private final Object observerLock = new Object();
-    public boolean contactsLoaded = false;
-    public HashMap<Integer, Contact> contactsBook = new HashMap<Integer, Contact>();
-    public HashMap<String, Contact> contactsBookSPhones = new HashMap<String, Contact>();
-    public ArrayList<Contact> phoneBookContacts = new ArrayList<Contact>();
-    public ArrayList<TLRPC.TL_contact> contacts = new ArrayList<TLRPC.TL_contact>();
-    public SparseArray<TLRPC.TL_contact> contactsDict = new SparseArray<TLRPC.TL_contact>();
-    public HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = new HashMap<String, ArrayList<TLRPC.TL_contact>>();
-    public ArrayList<String> sortedUsersSectionsArray = new ArrayList<String>();
-    public HashMap<String, TLRPC.TL_contact> contactsByPhone = new HashMap<String, TLRPC.TL_contact>();
     private Account currentAccount;
     private boolean loadingContacts = false;
+    private static final Object loadContactsSync = new Object();
     private boolean ignoreChanges = false;
     private boolean contactsSyncInProgress = false;
+    private final Object observerLock = new Object();
+    public boolean contactsLoaded = false;
     private boolean contactsBookLoaded = false;
     private String lastContactsVersions = "";
     private ArrayList<Integer> delayedContactsUpdate = new ArrayList<Integer>();
     private String inviteText;
     private boolean updatingInviteText = false;
+
     private int loadingDeleteInfo = 0;
     private int deleteAccountTTL;
     private int loadingLastSeenInfo = 0;
     private ArrayList<TLRPC.PrivacyRule> privacyRules = null;
+
+    public static class Contact {
+        public int id;
+        public ArrayList<String> phones = new ArrayList<String>();
+        public ArrayList<String> phoneTypes = new ArrayList<String>();
+        public ArrayList<String> shortPhones = new ArrayList<String>();
+        public ArrayList<Integer> phoneDeleted = new ArrayList<Integer>();
+        public String first_name;
+        public String last_name;
+    }
+
     private String[] projectionPhones = {
         ContactsContract.CommonDataKinds.Phone.CONTACT_ID,
         ContactsContract.CommonDataKinds.Phone.NUMBER,
@@ -81,13 +84,18 @@
         ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME
     };
 
-    public ContactsController() {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        if (preferences.getBoolean("needGetStatuses", false)) {
-            reloadContactsStatuses();
-        }
-    }
+    public HashMap<Integer, Contact> contactsBook = new HashMap<Integer, Contact>();
+    public HashMap<String, Contact> contactsBookSPhones = new HashMap<String, Contact>();
+    public ArrayList<Contact> phoneBookContacts = new ArrayList<Contact>();
 
+    public ArrayList<TLRPC.TL_contact> contacts = new ArrayList<TLRPC.TL_contact>();
+    public SparseArray<TLRPC.TL_contact> contactsDict = new SparseArray<TLRPC.TL_contact>();
+    public HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = new HashMap<String, ArrayList<TLRPC.TL_contact>>();
+    public ArrayList<String> sortedUsersSectionsArray = new ArrayList<String>();
+
+    public HashMap<String, TLRPC.TL_contact> contactsByPhone = new HashMap<String, TLRPC.TL_contact>();
+
+    private static volatile ContactsController Instance = null;
     public static ContactsController getInstance() {
         ContactsController localInstance = Instance;
         if (localInstance == null) {
@@ -101,24 +109,11 @@ public static ContactsController getInstance() {
         return localInstance;
     }
 
-    public static String formatName(String firstName, String lastName) {
-        String result = null;
-        if (LocaleController.nameDisplayOrder == 1) {
-            result = firstName;
-            if (result == null || result.length() == 0) {
-                result = lastName;
-            } else if (result.length() != 0 && lastName != null && lastName.length() != 0) {
-                result += " " + lastName;
-            }
-        } else {
-            result = lastName;
-            if (result == null || result.length() == 0) {
-                result = firstName;
-            } else if (result.length() != 0 && firstName != null && firstName.length() != 0) {
-                result += " " + firstName;
-            }
+    public ContactsController() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        if (preferences.getBoolean("needGetStatuses", false)) {
+            reloadContactsStatuses();
         }
-        return result.trim();
     }
 
     public void cleanup() {
@@ -1719,14 +1714,14 @@ public void run() {
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
     }
 
-    public int getDeleteAccountTTL() {
-        return deleteAccountTTL;
-    }
-
     public void setDeleteAccountTTL(int ttl) {
         deleteAccountTTL = ttl;
     }
 
+    public int getDeleteAccountTTL() {
+        return deleteAccountTTL;
+    }
+
     public boolean getLoadingDeleteInfo() {
         return loadingDeleteInfo != 2;
     }
@@ -1745,13 +1740,23 @@ public void setPrivacyRules(ArrayList<TLRPC.PrivacyRule> rules) {
         reloadContactsStatuses();
     }
 
-    public static class Contact {
-        public int id;
-        public ArrayList<String> phones = new ArrayList<String>();
-        public ArrayList<String> phoneTypes = new ArrayList<String>();
-        public ArrayList<String> shortPhones = new ArrayList<String>();
-        public ArrayList<Integer> phoneDeleted = new ArrayList<Integer>();
-        public String first_name;
-        public String last_name;
+    public static String formatName(String firstName, String lastName) {
+        String result = null;
+        if (LocaleController.nameDisplayOrder == 1) {
+            result = firstName;
+            if (result == null || result.length() == 0) {
+                result = lastName;
+            } else if (result.length() != 0 && lastName != null && lastName.length() != 0) {
+                result += " " + lastName;
+            }
+        } else {
+            result = lastName;
+            if (result == null || result.length() == 0) {
+                result = firstName;
+            } else if (result.length() != 0 && firstName != null && firstName.length() != 0) {
+                result += " " + firstName;
+            }
+        }
+        return result.trim();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java
index 35e2d6a9f..852a84838 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java
@@ -28,23 +28,6 @@ public ContactsSyncAdapterService() {
         super();
     }
 
-    private static void performSync(Context context, Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult)
-            throws OperationCanceledException {
-        FileLog.d("telegram", "performSync: " + account.toString());
-    }
-
-    @Override
-    public IBinder onBind(Intent intent) {
-        return getSyncAdapter().getSyncAdapterBinder();
-    }
-
-    private SyncAdapterImpl getSyncAdapter() {
-        if (sSyncAdapter == null) {
-            sSyncAdapter = new SyncAdapterImpl(this);
-        }
-        return sSyncAdapter;
-    }
-
     private static class SyncAdapterImpl extends AbstractThreadedSyncAdapter {
         private Context mContext;
 
@@ -62,4 +45,21 @@ public void onPerformSync(Account account, Bundle extras, String authority, Cont
             }
         }
     }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return getSyncAdapter().getSyncAdapterBinder();
+    }
+
+    private SyncAdapterImpl getSyncAdapter() {
+        if (sSyncAdapter == null) {
+            sSyncAdapter = new SyncAdapterImpl(this);
+        }
+        return sSyncAdapter;
+    }
+
+    private static void performSync(Context context, Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult)
+            throws OperationCanceledException {
+        FileLog.d("telegram", "performSync: " + account.toString());
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
index 7d93dd85c..49745d6c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
@@ -8,6 +8,11 @@
 
 package org.telegram.android;
 
+import java.io.File;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Locale;
+
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
@@ -22,19 +27,22 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.Utilities;
-
-import java.io.File;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Locale;
+import org.telegram.messenger.ApplicationLoader;
 
 public class Emoji {
+	private static HashMap<Long, DrawableInfo> rects = new HashMap<Long, DrawableInfo>();
+	private static int drawImgSize, bigImgSize;
+	private static boolean inited = false;
+	private static Paint placeholderPaint;
+	private static Bitmap emojiBmp[] = new Bitmap[5];
+	private static boolean loadingEmoji[] = new boolean[5];
+
     private static final int[] cols = {
             13, 10, 15, 10, 14
     };
+
     private static final char[] emojiChars = {
             0x00A9, 0x00AE, 0x203C, 0x2049, 0x2122, 0x2139, 0x2194, 0x2195, 0x2196, 0x2197,
             0x2198, 0x2199, 0x21A9, 0x21AA, 0x231A, 0x231B, 0x23E9, 0x23EA, 0x23EB, 0x23EC,
@@ -49,138 +57,140 @@
             0x2797, 0x27A1, 0x27B0, 0x27BF, 0x2934, 0x2935, 0x2B05, 0x2B06, 0x2B07, 0x2B1B,
             0x2B1C, 0x2B50, 0x2B55, 0x3030, 0x303D, 0x3297, 0x3299
     };
-    public static long[][] data = {
+
+    public static  long[][] data = {
             new long[]
                     {},
             new long[]//189
                     {0x00000000D83DDE04L, 0x00000000D83DDE03L, 0x00000000D83DDE00L, 0x00000000D83DDE0AL, 0x000000000000263AL, 0x00000000D83DDE09L, 0x00000000D83DDE0DL,
-                            0x00000000D83DDE18L, 0x00000000D83DDE1AL, 0x00000000D83DDE17L, 0x00000000D83DDE19L, 0x00000000D83DDE1CL, 0x00000000D83DDE1DL, 0x00000000D83DDE1BL,
-                            0x00000000D83DDE33L, 0x00000000D83DDE01L, 0x00000000D83DDE14L, 0x00000000D83DDE0CL, 0x00000000D83DDE12L, 0x00000000D83DDE1EL, 0x00000000D83DDE23L,
-                            0x00000000D83DDE22L, 0x00000000D83DDE02L, 0x00000000D83DDE2DL, 0x00000000D83DDE2AL, 0x00000000D83DDE25L, 0x00000000D83DDE30L, 0x00000000D83DDE05L,
-                            0x00000000D83DDE13L, 0x00000000D83DDE29L, 0x00000000D83DDE2BL, 0x00000000D83DDE28L, 0x00000000D83DDE31L, 0x00000000D83DDE20L, 0x00000000D83DDE21L,
-                            0x00000000D83DDE24L, 0x00000000D83DDE16L, 0x00000000D83DDE06L, 0x00000000D83DDE0BL, 0x00000000D83DDE37L, 0x00000000D83DDE0EL, 0x00000000D83DDE34L,
-                            0x00000000D83DDE35L, 0x00000000D83DDE32L, 0x00000000D83DDE1FL, 0x00000000D83DDE26L, 0x00000000D83DDE27L, 0x00000000D83DDE08L, 0x00000000D83DDC7FL,
-                            0x00000000D83DDE2EL, 0x00000000D83DDE2CL, 0x00000000D83DDE10L, 0x00000000D83DDE15L, 0x00000000D83DDE2FL, 0x00000000D83DDE36L, 0x00000000D83DDE07L,
-                            0x00000000D83DDE0FL, 0x00000000D83DDE11L, 0x00000000D83DDC72L, 0x00000000D83DDC73L, 0x00000000D83DDC6EL, 0x00000000D83DDC77L, 0x00000000D83DDC82L,
-                            0x00000000D83DDC76L, 0x00000000D83DDC66L, 0x00000000D83DDC67L, 0x00000000D83DDC68L, 0x00000000D83DDC69L, 0x00000000D83DDC74L, 0x00000000D83DDC75L,
-                            0x00000000D83DDC71L, 0x00000000D83DDC7CL, 0x00000000D83DDC78L, 0x00000000D83DDE3AL, 0x00000000D83DDE38L, 0x00000000D83DDE3BL, 0x00000000D83DDE3DL,
-                            0x00000000D83DDE3CL, 0x00000000D83DDE40L, 0x00000000D83DDE3FL, 0x00000000D83DDE39L, 0x00000000D83DDE3EL, 0x00000000D83DDC79L, 0x00000000D83DDC7AL,
-                            0x00000000D83DDE48L, 0x00000000D83DDE49L, 0x00000000D83DDE4AL, 0x00000000D83DDC80L, 0x00000000D83DDC7DL, 0x00000000D83DDCA9L, 0x00000000D83DDD25L,
-                            0x0000000000002728L, 0x00000000D83CDF1FL, 0x00000000D83DDCABL, 0x00000000D83DDCA5L, 0x00000000D83DDCA2L, 0x00000000D83DDCA6L, 0x00000000D83DDCA7L,
-                            0x00000000D83DDCA4L, 0x00000000D83DDCA8L, 0x00000000D83DDC42L, 0x00000000D83DDC40L, 0x00000000D83DDC43L, 0x00000000D83DDC45L, 0x00000000D83DDC44L,
-                            0x00000000D83DDC4DL, 0x00000000D83DDC4EL, 0x00000000D83DDC4CL, 0x00000000D83DDC4AL, 0x000000000000270AL, 0x000000000000270CL, 0x00000000D83DDC4BL,
-                            0x000000000000270BL, 0x00000000D83DDC50L, 0x00000000D83DDC46L, 0x00000000D83DDC47L, 0x00000000D83DDC49L, 0x00000000D83DDC48L, 0x00000000D83DDE4CL,
-                            0x00000000D83DDE4FL, 0x000000000000261DL, 0x00000000D83DDC4FL, 0x00000000D83DDCAAL, 0x00000000D83DDEB6L, 0x00000000D83CDFC3L, 0x00000000D83DDC83L,
-                            0x00000000D83DDC6BL, 0x00000000D83DDC6AL, 0x00000000D83DDC6CL, 0x00000000D83DDC6DL, 0x00000000D83DDC8FL, 0x00000000D83DDC91L, 0x00000000D83DDC6FL,
-                            0x00000000D83DDE46L, 0x00000000D83DDE45L, 0x00000000D83DDC81L, 0x00000000D83DDE4BL, 0x00000000D83DDC86L, 0x00000000D83DDC87L, 0x00000000D83DDC85L,
-                            0x00000000D83DDC70L, 0x00000000D83DDE4EL, 0x00000000D83DDE4DL, 0x00000000D83DDE47L, 0x00000000D83CDFA9L, 0x00000000D83DDC51L, 0x00000000D83DDC52L,
-                            0x00000000D83DDC5FL, 0x00000000D83DDC5EL, 0x00000000D83DDC61L, 0x00000000D83DDC60L, 0x00000000D83DDC62L, 0x00000000D83DDC55L, 0x00000000D83DDC54L,
-                            0x00000000D83DDC5AL, 0x00000000D83DDC57L, 0x00000000D83CDFBDL, 0x00000000D83DDC56L, 0x00000000D83DDC58L, 0x00000000D83DDC59L, 0x00000000D83DDCBCL,
-                            0x00000000D83DDC5CL, 0x00000000D83DDC5DL, 0x00000000D83DDC5BL, 0x00000000D83DDC53L, 0x00000000D83CDF80L, 0x00000000D83CDF02L, 0x00000000D83DDC84L,
-                            0x00000000D83DDC9BL, 0x00000000D83DDC99L, 0x00000000D83DDC9CL, 0x00000000D83DDC9AL, 0x0000000000002764L, 0x00000000D83DDC94L, 0x00000000D83DDC97L,
-                            0x00000000D83DDC93L, 0x00000000D83DDC95L, 0x00000000D83DDC96L, 0x00000000D83DDC9EL, 0x00000000D83DDC98L, 0x00000000D83DDC8CL, 0x00000000D83DDC8BL,
-                            0x00000000D83DDC8DL, 0x00000000D83DDC8EL, 0x00000000D83DDC64L, 0x00000000D83DDC65L, 0x00000000D83DDCACL, 0x00000000D83DDC63L, 0x00000000D83DDCADL},
+                    0x00000000D83DDE18L, 0x00000000D83DDE1AL, 0x00000000D83DDE17L, 0x00000000D83DDE19L, 0x00000000D83DDE1CL, 0x00000000D83DDE1DL, 0x00000000D83DDE1BL,
+                    0x00000000D83DDE33L, 0x00000000D83DDE01L, 0x00000000D83DDE14L, 0x00000000D83DDE0CL, 0x00000000D83DDE12L, 0x00000000D83DDE1EL, 0x00000000D83DDE23L,
+                    0x00000000D83DDE22L, 0x00000000D83DDE02L, 0x00000000D83DDE2DL, 0x00000000D83DDE2AL, 0x00000000D83DDE25L, 0x00000000D83DDE30L, 0x00000000D83DDE05L,
+                    0x00000000D83DDE13L, 0x00000000D83DDE29L, 0x00000000D83DDE2BL, 0x00000000D83DDE28L, 0x00000000D83DDE31L, 0x00000000D83DDE20L, 0x00000000D83DDE21L,
+                    0x00000000D83DDE24L, 0x00000000D83DDE16L, 0x00000000D83DDE06L, 0x00000000D83DDE0BL, 0x00000000D83DDE37L, 0x00000000D83DDE0EL, 0x00000000D83DDE34L,
+                    0x00000000D83DDE35L, 0x00000000D83DDE32L, 0x00000000D83DDE1FL, 0x00000000D83DDE26L, 0x00000000D83DDE27L, 0x00000000D83DDE08L, 0x00000000D83DDC7FL,
+                    0x00000000D83DDE2EL, 0x00000000D83DDE2CL, 0x00000000D83DDE10L, 0x00000000D83DDE15L, 0x00000000D83DDE2FL, 0x00000000D83DDE36L, 0x00000000D83DDE07L,
+                    0x00000000D83DDE0FL, 0x00000000D83DDE11L, 0x00000000D83DDC72L, 0x00000000D83DDC73L, 0x00000000D83DDC6EL, 0x00000000D83DDC77L, 0x00000000D83DDC82L,
+                    0x00000000D83DDC76L, 0x00000000D83DDC66L, 0x00000000D83DDC67L, 0x00000000D83DDC68L, 0x00000000D83DDC69L, 0x00000000D83DDC74L, 0x00000000D83DDC75L,
+                    0x00000000D83DDC71L, 0x00000000D83DDC7CL, 0x00000000D83DDC78L, 0x00000000D83DDE3AL, 0x00000000D83DDE38L, 0x00000000D83DDE3BL, 0x00000000D83DDE3DL,
+                    0x00000000D83DDE3CL, 0x00000000D83DDE40L, 0x00000000D83DDE3FL, 0x00000000D83DDE39L, 0x00000000D83DDE3EL, 0x00000000D83DDC79L, 0x00000000D83DDC7AL,
+                    0x00000000D83DDE48L, 0x00000000D83DDE49L, 0x00000000D83DDE4AL, 0x00000000D83DDC80L, 0x00000000D83DDC7DL, 0x00000000D83DDCA9L, 0x00000000D83DDD25L,
+                    0x0000000000002728L, 0x00000000D83CDF1FL, 0x00000000D83DDCABL, 0x00000000D83DDCA5L, 0x00000000D83DDCA2L, 0x00000000D83DDCA6L, 0x00000000D83DDCA7L,
+                    0x00000000D83DDCA4L, 0x00000000D83DDCA8L, 0x00000000D83DDC42L, 0x00000000D83DDC40L, 0x00000000D83DDC43L, 0x00000000D83DDC45L, 0x00000000D83DDC44L,
+                    0x00000000D83DDC4DL, 0x00000000D83DDC4EL, 0x00000000D83DDC4CL, 0x00000000D83DDC4AL, 0x000000000000270AL, 0x000000000000270CL, 0x00000000D83DDC4BL,
+                    0x000000000000270BL, 0x00000000D83DDC50L, 0x00000000D83DDC46L, 0x00000000D83DDC47L, 0x00000000D83DDC49L, 0x00000000D83DDC48L, 0x00000000D83DDE4CL,
+                    0x00000000D83DDE4FL, 0x000000000000261DL, 0x00000000D83DDC4FL, 0x00000000D83DDCAAL, 0x00000000D83DDEB6L, 0x00000000D83CDFC3L, 0x00000000D83DDC83L,
+                    0x00000000D83DDC6BL, 0x00000000D83DDC6AL, 0x00000000D83DDC6CL, 0x00000000D83DDC6DL, 0x00000000D83DDC8FL, 0x00000000D83DDC91L, 0x00000000D83DDC6FL,
+                    0x00000000D83DDE46L, 0x00000000D83DDE45L, 0x00000000D83DDC81L, 0x00000000D83DDE4BL, 0x00000000D83DDC86L, 0x00000000D83DDC87L, 0x00000000D83DDC85L,
+                    0x00000000D83DDC70L, 0x00000000D83DDE4EL, 0x00000000D83DDE4DL, 0x00000000D83DDE47L, 0x00000000D83CDFA9L, 0x00000000D83DDC51L, 0x00000000D83DDC52L,
+                    0x00000000D83DDC5FL, 0x00000000D83DDC5EL, 0x00000000D83DDC61L, 0x00000000D83DDC60L, 0x00000000D83DDC62L, 0x00000000D83DDC55L, 0x00000000D83DDC54L,
+                    0x00000000D83DDC5AL, 0x00000000D83DDC57L, 0x00000000D83CDFBDL, 0x00000000D83DDC56L, 0x00000000D83DDC58L, 0x00000000D83DDC59L, 0x00000000D83DDCBCL,
+                    0x00000000D83DDC5CL, 0x00000000D83DDC5DL, 0x00000000D83DDC5BL, 0x00000000D83DDC53L, 0x00000000D83CDF80L, 0x00000000D83CDF02L, 0x00000000D83DDC84L,
+                    0x00000000D83DDC9BL, 0x00000000D83DDC99L, 0x00000000D83DDC9CL, 0x00000000D83DDC9AL, 0x0000000000002764L, 0x00000000D83DDC94L, 0x00000000D83DDC97L,
+                    0x00000000D83DDC93L, 0x00000000D83DDC95L, 0x00000000D83DDC96L, 0x00000000D83DDC9EL, 0x00000000D83DDC98L, 0x00000000D83DDC8CL, 0x00000000D83DDC8BL,
+                    0x00000000D83DDC8DL, 0x00000000D83DDC8EL, 0x00000000D83DDC64L, 0x00000000D83DDC65L, 0x00000000D83DDCACL, 0x00000000D83DDC63L, 0x00000000D83DDCADL},
             new long[]//116
                     {0x00000000D83DDC36L, 0x00000000D83DDC3AL, 0x00000000D83DDC31L, 0x00000000D83DDC2DL, 0x00000000D83DDC39L, 0x00000000D83DDC30L, 0x00000000D83DDC38L, 0x00000000D83DDC2FL,
-                            0x00000000D83DDC28L, 0x00000000D83DDC3BL, 0x00000000D83DDC37L, 0x00000000D83DDC3DL, 0x00000000D83DDC2EL, 0x00000000D83DDC17L, 0x00000000D83DDC35L,
-                            0x00000000D83DDC12L, 0x00000000D83DDC34L, 0x00000000D83DDC11L, 0x00000000D83DDC18L, 0x00000000D83DDC3CL, 0x00000000D83DDC27L, 0x00000000D83DDC26L,
-                            0x00000000D83DDC24L, 0x00000000D83DDC25L, 0x00000000D83DDC23L, 0x00000000D83DDC14L, 0x00000000D83DDC0DL, 0x00000000D83DDC22L, 0x00000000D83DDC1BL,
-                            0x00000000D83DDC1DL, 0x00000000D83DDC1CL, 0x00000000D83DDC1EL, 0x00000000D83DDC0CL, 0x00000000D83DDC19L, 0x00000000D83DDC1AL, 0x00000000D83DDC20L,
-                            0x00000000D83DDC1FL, 0x00000000D83DDC2CL, 0x00000000D83DDC33L, 0x00000000D83DDC0BL, 0x00000000D83DDC04L, 0x00000000D83DDC0FL, 0x00000000D83DDC00L,
-                            0x00000000D83DDC03L, 0x00000000D83DDC05L, 0x00000000D83DDC07L, 0x00000000D83DDC09L, 0x00000000D83DDC0EL, 0x00000000D83DDC10L, 0x00000000D83DDC13L,
-                            0x00000000D83DDC15L, 0x00000000D83DDC16L, 0x00000000D83DDC01L, 0x00000000D83DDC02L, 0x00000000D83DDC32L, 0x00000000D83DDC21L, 0x00000000D83DDC0AL,
-                            0x00000000D83DDC2BL, 0x00000000D83DDC2AL, 0x00000000D83DDC06L, 0x00000000D83DDC08L, 0x00000000D83DDC29L, 0x00000000D83DDC3EL, 0x00000000D83DDC90L,
-                            0x00000000D83CDF38L, 0x00000000D83CDF37L, 0x00000000D83CDF40L, 0x00000000D83CDF39L, 0x00000000D83CDF3BL, 0x00000000D83CDF3AL, 0x00000000D83CDF41L,
-                            0x00000000D83CDF43L, 0x00000000D83CDF42L, 0x00000000D83CDF3FL, 0x00000000D83CDF3EL, 0x00000000D83CDF44L, 0x00000000D83CDF35L, 0x00000000D83CDF34L,
-                            0x00000000D83CDF32L, 0x00000000D83CDF33L, 0x00000000D83CDF30L, 0x00000000D83CDF31L, 0x00000000D83CDF3CL, 0x00000000D83CDF10L, 0x00000000D83CDF1EL,
-                            0x00000000D83CDF1DL, 0x00000000D83CDF1AL, 0x00000000D83CDF11L, 0x00000000D83CDF12L, 0x00000000D83CDF13L, 0x00000000D83CDF14L, 0x00000000D83CDF15L,
-                            0x00000000D83CDF16L, 0x00000000D83CDF17L, 0x00000000D83CDF18L, 0x00000000D83CDF1CL, 0x00000000D83CDF1BL, 0x00000000D83CDF19L, 0x00000000D83CDF0DL,
-                            0x00000000D83CDF0EL, 0x00000000D83CDF0FL, 0x00000000D83CDF0BL, 0x00000000D83CDF0CL, 0x00000000D83CDF20L, 0x0000000000002B50L, 0x0000000000002600L,
-                            0x00000000000026C5L, 0x0000000000002601L, 0x00000000000026A1L, 0x0000000000002614L, 0x0000000000002744L, 0x00000000000026C4L, 0x00000000D83CDF00L,
-                            0x00000000D83CDF01L, 0x00000000D83CDF08L, 0x00000000D83CDF0AL},
+                    0x00000000D83DDC28L, 0x00000000D83DDC3BL, 0x00000000D83DDC37L, 0x00000000D83DDC3DL, 0x00000000D83DDC2EL, 0x00000000D83DDC17L, 0x00000000D83DDC35L,
+                    0x00000000D83DDC12L, 0x00000000D83DDC34L, 0x00000000D83DDC11L, 0x00000000D83DDC18L, 0x00000000D83DDC3CL, 0x00000000D83DDC27L, 0x00000000D83DDC26L,
+                    0x00000000D83DDC24L, 0x00000000D83DDC25L, 0x00000000D83DDC23L, 0x00000000D83DDC14L, 0x00000000D83DDC0DL, 0x00000000D83DDC22L, 0x00000000D83DDC1BL,
+                    0x00000000D83DDC1DL, 0x00000000D83DDC1CL, 0x00000000D83DDC1EL, 0x00000000D83DDC0CL, 0x00000000D83DDC19L, 0x00000000D83DDC1AL, 0x00000000D83DDC20L,
+                    0x00000000D83DDC1FL, 0x00000000D83DDC2CL, 0x00000000D83DDC33L, 0x00000000D83DDC0BL, 0x00000000D83DDC04L, 0x00000000D83DDC0FL, 0x00000000D83DDC00L,
+                    0x00000000D83DDC03L, 0x00000000D83DDC05L, 0x00000000D83DDC07L, 0x00000000D83DDC09L, 0x00000000D83DDC0EL, 0x00000000D83DDC10L, 0x00000000D83DDC13L,
+                    0x00000000D83DDC15L, 0x00000000D83DDC16L, 0x00000000D83DDC01L, 0x00000000D83DDC02L, 0x00000000D83DDC32L, 0x00000000D83DDC21L, 0x00000000D83DDC0AL,
+                    0x00000000D83DDC2BL, 0x00000000D83DDC2AL, 0x00000000D83DDC06L, 0x00000000D83DDC08L, 0x00000000D83DDC29L, 0x00000000D83DDC3EL, 0x00000000D83DDC90L,
+                    0x00000000D83CDF38L, 0x00000000D83CDF37L, 0x00000000D83CDF40L, 0x00000000D83CDF39L, 0x00000000D83CDF3BL, 0x00000000D83CDF3AL, 0x00000000D83CDF41L,
+                    0x00000000D83CDF43L, 0x00000000D83CDF42L, 0x00000000D83CDF3FL, 0x00000000D83CDF3EL, 0x00000000D83CDF44L, 0x00000000D83CDF35L, 0x00000000D83CDF34L,
+                    0x00000000D83CDF32L, 0x00000000D83CDF33L, 0x00000000D83CDF30L, 0x00000000D83CDF31L, 0x00000000D83CDF3CL, 0x00000000D83CDF10L, 0x00000000D83CDF1EL,
+                    0x00000000D83CDF1DL, 0x00000000D83CDF1AL, 0x00000000D83CDF11L, 0x00000000D83CDF12L, 0x00000000D83CDF13L, 0x00000000D83CDF14L, 0x00000000D83CDF15L,
+                    0x00000000D83CDF16L, 0x00000000D83CDF17L, 0x00000000D83CDF18L, 0x00000000D83CDF1CL, 0x00000000D83CDF1BL, 0x00000000D83CDF19L, 0x00000000D83CDF0DL,
+                    0x00000000D83CDF0EL, 0x00000000D83CDF0FL, 0x00000000D83CDF0BL, 0x00000000D83CDF0CL, 0x00000000D83CDF20L, 0x0000000000002B50L, 0x0000000000002600L,
+                    0x00000000000026C5L, 0x0000000000002601L, 0x00000000000026A1L, 0x0000000000002614L, 0x0000000000002744L, 0x00000000000026C4L, 0x00000000D83CDF00L,
+                    0x00000000D83CDF01L, 0x00000000D83CDF08L, 0x00000000D83CDF0AL},
             new long[]//230
                     {0x00000000D83CDF8DL, 0x00000000D83DDC9DL, 0x00000000D83CDF8EL, 0x00000000D83CDF92L, 0x00000000D83CDF93L, 0x00000000D83CDF8FL, 0x00000000D83CDF86L, 0x00000000D83CDF87L,
-                            0x00000000D83CDF90L, 0x00000000D83CDF91L, 0x00000000D83CDF83L, 0x00000000D83DDC7BL, 0x00000000D83CDF85L, 0x00000000D83CDF84L, 0x00000000D83CDF81L,
-                            0x00000000D83CDF8BL, 0x00000000D83CDF89L, 0x00000000D83CDF8AL, 0x00000000D83CDF88L, 0x00000000D83CDF8CL, 0x00000000D83DDD2EL, 0x00000000D83CDFA5L,
-                            0x00000000D83DDCF7L, 0x00000000D83DDCF9L, 0x00000000D83DDCFCL, 0x00000000D83DDCBFL, 0x00000000D83DDCC0L, 0x00000000D83DDCBDL, 0x00000000D83DDCBEL,
-                            0x00000000D83DDCBBL, 0x00000000D83DDCF1L, 0x000000000000260EL, 0x00000000D83DDCDEL, 0x00000000D83DDCDFL, 0x00000000D83DDCE0L, 0x00000000D83DDCE1L,
-                            0x00000000D83DDCFAL, 0x00000000D83DDCFBL, 0x00000000D83DDD0AL, 0x00000000D83DDD09L, 0x00000000D83DDD08L, 0x00000000D83DDD07L, 0x00000000D83DDD14L,
-                            0x00000000D83DDD15L, 0x00000000D83DDCE2L, 0x00000000D83DDCE3L, 0x00000000000023F3L, 0x000000000000231BL, 0x00000000000023F0L, 0x000000000000231AL,
-                            0x00000000D83DDD13L, 0x00000000D83DDD12L, 0x00000000D83DDD0FL, 0x00000000D83DDD10L, 0x00000000D83DDD11L, 0x00000000D83DDD0EL, 0x00000000D83DDCA1L,
-                            0x00000000D83DDD26L, 0x00000000D83DDD06L, 0x00000000D83DDD05L, 0x00000000D83DDD0CL, 0x00000000D83DDD0BL, 0x00000000D83DDD0DL, 0x00000000D83DDEC1L, 0x00000000D83DDEC0L,
-                            0x00000000D83DDEBFL, 0x00000000D83DDEBDL, 0x00000000D83DDD27L, 0x00000000D83DDD29L, 0x00000000D83DDD28L, 0x00000000D83DDEAAL, 0x00000000D83DDEACL,
-                            0x00000000D83DDCA3L, 0x00000000D83DDD2BL, 0x00000000D83DDD2AL, 0x00000000D83DDC8AL, 0x00000000D83DDC89L, 0x00000000D83DDCB0L, 0x00000000D83DDCB4L,
-                            0x00000000D83DDCB5L, 0x00000000D83DDCB7L, 0x00000000D83DDCB6L, 0x00000000D83DDCB3L, 0x00000000D83DDCB8L, 0x00000000D83DDCF2L, 0x00000000D83DDCE7L,
-                            0x00000000D83DDCE5L, 0x00000000D83DDCE4L, 0x0000000000002709L, 0x00000000D83DDCE9L, 0x00000000D83DDCE8L, 0x00000000D83DDCEFL, 0x00000000D83DDCEBL,
-                            0x00000000D83DDCEAL, 0x00000000D83DDCECL, 0x00000000D83DDCEDL, 0x00000000D83DDCEEL, 0x00000000D83DDCE6L, 0x00000000D83DDCDDL, 0x00000000D83DDCC4L,
-                            0x00000000D83DDCC3L, 0x00000000D83DDCD1L, 0x00000000D83DDCCAL, 0x00000000D83DDCC8L, 0x00000000D83DDCC9L, 0x00000000D83DDCDCL, 0x00000000D83DDCCBL,
-                            0x00000000D83DDCC5L, 0x00000000D83DDCC6L, 0x00000000D83DDCC7L, 0x00000000D83DDCC1L, 0x00000000D83DDCC2L, 0x0000000000002702L, 0x00000000D83DDCCCL,
-                            0x00000000D83DDCCEL, 0x0000000000002712L, 0x000000000000270FL, 0x00000000D83DDCCFL, 0x00000000D83DDCD0L, 0x00000000D83DDCD5L, 0x00000000D83DDCD7L,
-                            0x00000000D83DDCD8L, 0x00000000D83DDCD9L, 0x00000000D83DDCD3L, 0x00000000D83DDCD4L, 0x00000000D83DDCD2L, 0x00000000D83DDCDAL, 0x00000000D83DDCD6L,
-                            0x00000000D83DDD16L, 0x00000000D83DDCDBL, 0x00000000D83DDD2CL, 0x00000000D83DDD2DL, 0x00000000D83DDCF0L, 0x00000000D83CDFA8L, 0x00000000D83CDFACL,
-                            0x00000000D83CDFA4L, 0x00000000D83CDFA7L, 0x00000000D83CDFBCL, 0x00000000D83CDFB5L, 0x00000000D83CDFB6L, 0x00000000D83CDFB9L, 0x00000000D83CDFBBL,
-                            0x00000000D83CDFBAL, 0x00000000D83CDFB7L, 0x00000000D83CDFB8L, 0x00000000D83DDC7EL, 0x00000000D83CDFAEL, 0x00000000D83CDCCFL, 0x00000000D83CDFB4L,
-                            0x00000000D83CDC04L, 0x00000000D83CDFB2L, 0x00000000D83CDFAFL, 0x00000000D83CDFC8L, 0x00000000D83CDFC0L, 0x00000000000026BDL, 0x00000000000026BEL,
-                            0x00000000D83CDFBEL, 0x00000000D83CDFB1L, 0x00000000D83CDFC9L, 0x00000000D83CDFB3L, 0x00000000000026F3L, 0x00000000D83DDEB5L, 0x00000000D83DDEB4L,
-                            0x00000000D83CDFC1L, 0x00000000D83CDFC7L, 0x00000000D83CDFC6L, 0x00000000D83CDFBFL, 0x00000000D83CDFC2L, 0x00000000D83CDFCAL, 0x00000000D83CDFC4L,
-                            0x00000000D83CDFA3L, 0x0000000000002615L, 0x00000000D83CDF75L, 0x00000000D83CDF76L, 0x00000000D83CDF7CL, 0x00000000D83CDF7AL, 0x00000000D83CDF7BL,
-                            0x00000000D83CDF78L, 0x00000000D83CDF79L, 0x00000000D83CDF77L, 0x00000000D83CDF74L, 0x00000000D83CDF55L, 0x00000000D83CDF54L, 0x00000000D83CDF5FL,
-                            0x00000000D83CDF57L, 0x00000000D83CDF56L, 0x00000000D83CDF5DL, 0x00000000D83CDF5BL, 0x00000000D83CDF64L, 0x00000000D83CDF71L, 0x00000000D83CDF63L,
-                            0x00000000D83CDF65L, 0x00000000D83CDF59L, 0x00000000D83CDF58L, 0x00000000D83CDF5AL, 0x00000000D83CDF5CL, 0x00000000D83CDF72L, 0x00000000D83CDF62L,
-                            0x00000000D83CDF61L, 0x00000000D83CDF73L, 0x00000000D83CDF5EL, 0x00000000D83CDF69L, 0x00000000D83CDF6EL, 0x00000000D83CDF66L, 0x00000000D83CDF68L,
-                            0x00000000D83CDF67L, 0x00000000D83CDF82L, 0x00000000D83CDF70L, 0x00000000D83CDF6AL, 0x00000000D83CDF6BL, 0x00000000D83CDF6CL, 0x00000000D83CDF6DL,
-                            0x00000000D83CDF6FL, 0x00000000D83CDF4EL, 0x00000000D83CDF4FL, 0x00000000D83CDF4AL, 0x00000000D83CDF4BL, 0x00000000D83CDF52L, 0x00000000D83CDF47L,
-                            0x00000000D83CDF49L, 0x00000000D83CDF53L, 0x00000000D83CDF51L, 0x00000000D83CDF48L, 0x00000000D83CDF4CL, 0x00000000D83CDF50L, 0x00000000D83CDF4DL,
-                            0x00000000D83CDF60L, 0x00000000D83CDF46L, 0x00000000D83CDF45L, 0x00000000D83CDF3DL},
+                    0x00000000D83CDF90L, 0x00000000D83CDF91L, 0x00000000D83CDF83L, 0x00000000D83DDC7BL, 0x00000000D83CDF85L, 0x00000000D83CDF84L, 0x00000000D83CDF81L,
+                    0x00000000D83CDF8BL, 0x00000000D83CDF89L, 0x00000000D83CDF8AL, 0x00000000D83CDF88L, 0x00000000D83CDF8CL, 0x00000000D83DDD2EL, 0x00000000D83CDFA5L,
+                    0x00000000D83DDCF7L, 0x00000000D83DDCF9L, 0x00000000D83DDCFCL, 0x00000000D83DDCBFL, 0x00000000D83DDCC0L, 0x00000000D83DDCBDL, 0x00000000D83DDCBEL,
+                    0x00000000D83DDCBBL, 0x00000000D83DDCF1L, 0x000000000000260EL, 0x00000000D83DDCDEL, 0x00000000D83DDCDFL, 0x00000000D83DDCE0L, 0x00000000D83DDCE1L,
+                    0x00000000D83DDCFAL, 0x00000000D83DDCFBL, 0x00000000D83DDD0AL, 0x00000000D83DDD09L, 0x00000000D83DDD08L, 0x00000000D83DDD07L, 0x00000000D83DDD14L,
+                    0x00000000D83DDD15L, 0x00000000D83DDCE2L, 0x00000000D83DDCE3L, 0x00000000000023F3L, 0x000000000000231BL, 0x00000000000023F0L, 0x000000000000231AL,
+                    0x00000000D83DDD13L, 0x00000000D83DDD12L, 0x00000000D83DDD0FL, 0x00000000D83DDD10L, 0x00000000D83DDD11L, 0x00000000D83DDD0EL, 0x00000000D83DDCA1L,
+                    0x00000000D83DDD26L, 0x00000000D83DDD06L, 0x00000000D83DDD05L, 0x00000000D83DDD0CL, 0x00000000D83DDD0BL, 0x00000000D83DDD0DL, 0x00000000D83DDEC1L, 0x00000000D83DDEC0L,
+                    0x00000000D83DDEBFL, 0x00000000D83DDEBDL, 0x00000000D83DDD27L, 0x00000000D83DDD29L, 0x00000000D83DDD28L, 0x00000000D83DDEAAL, 0x00000000D83DDEACL,
+                    0x00000000D83DDCA3L, 0x00000000D83DDD2BL, 0x00000000D83DDD2AL, 0x00000000D83DDC8AL, 0x00000000D83DDC89L, 0x00000000D83DDCB0L, 0x00000000D83DDCB4L,
+                    0x00000000D83DDCB5L, 0x00000000D83DDCB7L, 0x00000000D83DDCB6L, 0x00000000D83DDCB3L, 0x00000000D83DDCB8L, 0x00000000D83DDCF2L, 0x00000000D83DDCE7L,
+                    0x00000000D83DDCE5L, 0x00000000D83DDCE4L, 0x0000000000002709L, 0x00000000D83DDCE9L, 0x00000000D83DDCE8L, 0x00000000D83DDCEFL, 0x00000000D83DDCEBL,
+                    0x00000000D83DDCEAL, 0x00000000D83DDCECL, 0x00000000D83DDCEDL, 0x00000000D83DDCEEL, 0x00000000D83DDCE6L, 0x00000000D83DDCDDL, 0x00000000D83DDCC4L,
+                    0x00000000D83DDCC3L, 0x00000000D83DDCD1L, 0x00000000D83DDCCAL, 0x00000000D83DDCC8L, 0x00000000D83DDCC9L, 0x00000000D83DDCDCL, 0x00000000D83DDCCBL,
+                    0x00000000D83DDCC5L, 0x00000000D83DDCC6L, 0x00000000D83DDCC7L, 0x00000000D83DDCC1L, 0x00000000D83DDCC2L, 0x0000000000002702L, 0x00000000D83DDCCCL,
+                    0x00000000D83DDCCEL, 0x0000000000002712L, 0x000000000000270FL, 0x00000000D83DDCCFL, 0x00000000D83DDCD0L, 0x00000000D83DDCD5L, 0x00000000D83DDCD7L,
+                    0x00000000D83DDCD8L, 0x00000000D83DDCD9L, 0x00000000D83DDCD3L, 0x00000000D83DDCD4L, 0x00000000D83DDCD2L, 0x00000000D83DDCDAL, 0x00000000D83DDCD6L,
+                    0x00000000D83DDD16L, 0x00000000D83DDCDBL, 0x00000000D83DDD2CL, 0x00000000D83DDD2DL, 0x00000000D83DDCF0L, 0x00000000D83CDFA8L, 0x00000000D83CDFACL,
+                    0x00000000D83CDFA4L, 0x00000000D83CDFA7L, 0x00000000D83CDFBCL, 0x00000000D83CDFB5L, 0x00000000D83CDFB6L, 0x00000000D83CDFB9L, 0x00000000D83CDFBBL,
+                    0x00000000D83CDFBAL, 0x00000000D83CDFB7L, 0x00000000D83CDFB8L, 0x00000000D83DDC7EL, 0x00000000D83CDFAEL, 0x00000000D83CDCCFL, 0x00000000D83CDFB4L,
+                    0x00000000D83CDC04L, 0x00000000D83CDFB2L, 0x00000000D83CDFAFL, 0x00000000D83CDFC8L, 0x00000000D83CDFC0L, 0x00000000000026BDL, 0x00000000000026BEL,
+                    0x00000000D83CDFBEL, 0x00000000D83CDFB1L, 0x00000000D83CDFC9L, 0x00000000D83CDFB3L, 0x00000000000026F3L, 0x00000000D83DDEB5L, 0x00000000D83DDEB4L,
+                    0x00000000D83CDFC1L, 0x00000000D83CDFC7L, 0x00000000D83CDFC6L, 0x00000000D83CDFBFL, 0x00000000D83CDFC2L, 0x00000000D83CDFCAL, 0x00000000D83CDFC4L,
+                    0x00000000D83CDFA3L, 0x0000000000002615L, 0x00000000D83CDF75L, 0x00000000D83CDF76L, 0x00000000D83CDF7CL, 0x00000000D83CDF7AL, 0x00000000D83CDF7BL,
+                    0x00000000D83CDF78L, 0x00000000D83CDF79L, 0x00000000D83CDF77L, 0x00000000D83CDF74L, 0x00000000D83CDF55L, 0x00000000D83CDF54L, 0x00000000D83CDF5FL,
+                    0x00000000D83CDF57L, 0x00000000D83CDF56L, 0x00000000D83CDF5DL, 0x00000000D83CDF5BL, 0x00000000D83CDF64L, 0x00000000D83CDF71L, 0x00000000D83CDF63L,
+                    0x00000000D83CDF65L, 0x00000000D83CDF59L, 0x00000000D83CDF58L, 0x00000000D83CDF5AL, 0x00000000D83CDF5CL, 0x00000000D83CDF72L, 0x00000000D83CDF62L,
+                    0x00000000D83CDF61L, 0x00000000D83CDF73L, 0x00000000D83CDF5EL, 0x00000000D83CDF69L, 0x00000000D83CDF6EL, 0x00000000D83CDF66L, 0x00000000D83CDF68L,
+                    0x00000000D83CDF67L, 0x00000000D83CDF82L, 0x00000000D83CDF70L, 0x00000000D83CDF6AL, 0x00000000D83CDF6BL, 0x00000000D83CDF6CL, 0x00000000D83CDF6DL,
+                    0x00000000D83CDF6FL, 0x00000000D83CDF4EL, 0x00000000D83CDF4FL, 0x00000000D83CDF4AL, 0x00000000D83CDF4BL, 0x00000000D83CDF52L, 0x00000000D83CDF47L,
+                    0x00000000D83CDF49L, 0x00000000D83CDF53L, 0x00000000D83CDF51L, 0x00000000D83CDF48L, 0x00000000D83CDF4CL, 0x00000000D83CDF50L, 0x00000000D83CDF4DL,
+                    0x00000000D83CDF60L, 0x00000000D83CDF46L, 0x00000000D83CDF45L, 0x00000000D83CDF3DL},
             new long[]//101
                     {0x00000000D83CDFE0L, 0x00000000D83CDFE1L, 0x00000000D83CDFEBL, 0x00000000D83CDFE2L, 0x00000000D83CDFE3L, 0x00000000D83CDFE5L, 0x00000000D83CDFE6L, 0x00000000D83CDFEAL,
-                            0x00000000D83CDFE9L, 0x00000000D83CDFE8L, 0x00000000D83DDC92L, 0x00000000000026EAL, 0x00000000D83CDFECL, 0x00000000D83CDFE4L, 0x00000000D83CDF07L,
-                            0x00000000D83CDF06L, 0x00000000D83CDFEFL, 0x00000000D83CDFF0L, 0x00000000000026FAL, 0x00000000D83CDFEDL, 0x00000000D83DDDFCL, 0x00000000D83DDDFEL,
-                            0x00000000D83DDDFBL, 0x00000000D83CDF04L, 0x00000000D83CDF05L, 0x00000000D83CDF03L, 0x00000000D83DDDFDL, 0x00000000D83CDF09L, 0x00000000D83CDFA0L,
-                            0x00000000D83CDFA1L, 0x00000000000026F2L, 0x00000000D83CDFA2L, 0x00000000D83DDEA2L, 0x00000000000026F5L, 0x00000000D83DDEA4L, 0x00000000D83DDEA3L,
-                            0x0000000000002693L, 0x00000000D83DDE80L, 0x0000000000002708L, 0x00000000D83DDCBAL, 0x00000000D83DDE81L, 0x00000000D83DDE82L, 0x00000000D83DDE8AL,
-                            0x00000000D83DDE89L, 0x00000000D83DDE9EL, 0x00000000D83DDE86L, 0x00000000D83DDE84L, 0x00000000D83DDE85L, 0x00000000D83DDE88L, 0x00000000D83DDE87L,
-                            0x00000000D83DDE9DL, 0x00000000D83DDE8BL, 0x00000000D83DDE83L, 0x00000000D83DDE8EL, 0x00000000D83DDE8CL, 0x00000000D83DDE8DL, 0x00000000D83DDE99L,
-                            0x00000000D83DDE98L, 0x00000000D83DDE97L, 0x00000000D83DDE95L, 0x00000000D83DDE96L, 0x00000000D83DDE9BL, 0x00000000D83DDE9AL, 0x00000000D83DDEA8L,
-                            0x00000000D83DDE93L, 0x00000000D83DDE94L, 0x00000000D83DDE92L, 0x00000000D83DDE91L, 0x00000000D83DDE90L, 0x00000000D83DDEB2L, 0x00000000D83DDEA1L,
-                            0x00000000D83DDE9FL, 0x00000000D83DDEA0L, 0x00000000D83DDE9CL, 0x00000000D83DDC88L, 0x00000000D83DDE8FL, 0x00000000D83CDFABL, 0x00000000D83DDEA6L,
-                            0x00000000D83DDEA5L, 0x00000000000026A0L, 0x00000000D83DDEA7L, 0x00000000D83DDD30L, 0x00000000000026FDL, 0x00000000D83CDFEEL, 0x00000000D83CDFB0L,
-                            0x0000000000002668L, 0x00000000D83DDDFFL, 0x00000000D83CDFAAL, 0x00000000D83CDFADL, 0x00000000D83DDCCDL, 0x00000000D83DDEA9L, 0xD83CDDEFD83CDDF5L,
-                            0xD83CDDF0D83CDDF7L, 0xD83CDDE9D83CDDEAL, 0xD83CDDE8D83CDDF3L, 0xD83CDDFAD83CDDF8L, 0xD83CDDEBD83CDDF7L, 0xD83CDDEAD83CDDF8L, 0xD83CDDEED83CDDF9L,
-                            0xD83CDDF7D83CDDFAL, 0xD83CDDECD83CDDE7L},
+                    0x00000000D83CDFE9L, 0x00000000D83CDFE8L, 0x00000000D83DDC92L, 0x00000000000026EAL, 0x00000000D83CDFECL, 0x00000000D83CDFE4L, 0x00000000D83CDF07L,
+                    0x00000000D83CDF06L, 0x00000000D83CDFEFL, 0x00000000D83CDFF0L, 0x00000000000026FAL, 0x00000000D83CDFEDL, 0x00000000D83DDDFCL, 0x00000000D83DDDFEL,
+                    0x00000000D83DDDFBL, 0x00000000D83CDF04L, 0x00000000D83CDF05L, 0x00000000D83CDF03L, 0x00000000D83DDDFDL, 0x00000000D83CDF09L, 0x00000000D83CDFA0L,
+                    0x00000000D83CDFA1L, 0x00000000000026F2L, 0x00000000D83CDFA2L, 0x00000000D83DDEA2L, 0x00000000000026F5L, 0x00000000D83DDEA4L, 0x00000000D83DDEA3L,
+                    0x0000000000002693L, 0x00000000D83DDE80L, 0x0000000000002708L, 0x00000000D83DDCBAL, 0x00000000D83DDE81L, 0x00000000D83DDE82L, 0x00000000D83DDE8AL,
+                    0x00000000D83DDE89L, 0x00000000D83DDE9EL, 0x00000000D83DDE86L, 0x00000000D83DDE84L, 0x00000000D83DDE85L, 0x00000000D83DDE88L, 0x00000000D83DDE87L,
+                    0x00000000D83DDE9DL, 0x00000000D83DDE8BL, 0x00000000D83DDE83L, 0x00000000D83DDE8EL, 0x00000000D83DDE8CL, 0x00000000D83DDE8DL, 0x00000000D83DDE99L,
+                    0x00000000D83DDE98L, 0x00000000D83DDE97L, 0x00000000D83DDE95L, 0x00000000D83DDE96L, 0x00000000D83DDE9BL, 0x00000000D83DDE9AL, 0x00000000D83DDEA8L,
+                    0x00000000D83DDE93L, 0x00000000D83DDE94L, 0x00000000D83DDE92L, 0x00000000D83DDE91L, 0x00000000D83DDE90L, 0x00000000D83DDEB2L, 0x00000000D83DDEA1L,
+                    0x00000000D83DDE9FL, 0x00000000D83DDEA0L, 0x00000000D83DDE9CL, 0x00000000D83DDC88L, 0x00000000D83DDE8FL, 0x00000000D83CDFABL, 0x00000000D83DDEA6L,
+                    0x00000000D83DDEA5L, 0x00000000000026A0L, 0x00000000D83DDEA7L, 0x00000000D83DDD30L, 0x00000000000026FDL, 0x00000000D83CDFEEL, 0x00000000D83CDFB0L,
+                    0x0000000000002668L, 0x00000000D83DDDFFL, 0x00000000D83CDFAAL, 0x00000000D83CDFADL, 0x00000000D83DDCCDL, 0x00000000D83DDEA9L, 0xD83CDDEFD83CDDF5L,
+                    0xD83CDDF0D83CDDF7L, 0xD83CDDE9D83CDDEAL, 0xD83CDDE8D83CDDF3L, 0xD83CDDFAD83CDDF8L, 0xD83CDDEBD83CDDF7L, 0xD83CDDEAD83CDDF8L, 0xD83CDDEED83CDDF9L,
+                    0xD83CDDF7D83CDDFAL, 0xD83CDDECD83CDDE7L},
             new long[]//209
                     {0x00000000003120E3L, 0x00000000003220E3L, 0x00000000003320E3L, 0x00000000003420E3L, 0x00000000003520E3L, 0x00000000003620E3L, 0x00000000003720E3L,
-                            0x00000000003820E3L, 0x00000000003920E3L, 0x00000000003020E3L, 0x00000000D83DDD1FL, 0x00000000D83DDD22L, 0x00000000002320E3L, 0x00000000D83DDD23L,
-                            0x0000000000002B06L, 0x0000000000002B07L, 0x0000000000002B05L, 0x00000000000027A1L, 0x00000000D83DDD20L, 0x00000000D83DDD21L, 0x00000000D83DDD24L,
-                            0x0000000000002197L, 0x0000000000002196L, 0x0000000000002198L, 0x0000000000002199L, 0x0000000000002194L, 0x0000000000002195L, 0x00000000D83DDD04L,
-                            0x00000000000025C0L, 0x00000000000025B6L, 0x00000000D83DDD3CL, 0x00000000D83DDD3DL, 0x00000000000021A9L, 0x00000000000021AAL, 0x0000000000002139L,
-                            0x00000000000023EAL, 0x00000000000023E9L, 0x00000000000023EBL, 0x00000000000023ECL, 0x0000000000002935L, 0x0000000000002934L, 0x00000000D83CDD97L,
-                            0x00000000D83DDD00L, 0x00000000D83DDD01L, 0x00000000D83DDD02L, 0x00000000D83CDD95L, 0x00000000D83CDD99L, 0x00000000D83CDD92L, 0x00000000D83CDD93L,
-                            0x00000000D83CDD96L, 0x00000000D83DDCF6L, 0x00000000D83CDFA6L, 0x00000000D83CDE01L, 0x00000000D83CDE2FL, 0x00000000D83CDE33L, 0x00000000D83CDE35L,
-                            0x00000000D83CDE32L, 0x00000000D83CDE34L, 0x00000000D83CDE50L, 0x00000000D83CDE39L, 0x00000000D83CDE3AL, 0x00000000D83CDE36L, 0x00000000D83CDE1AL,
-                            0x00000000D83DDEBBL, 0x00000000D83DDEB9L, 0x00000000D83DDEBAL, 0x00000000D83DDEBCL, 0x00000000D83DDEBEL, 0x00000000D83DDEB0L, 0x00000000D83DDEAEL,
-                            0x00000000D83CDD7FL, 0x000000000000267FL, 0x00000000D83DDEADL, 0x00000000D83CDE37L, 0x00000000D83CDE38L, 0x00000000D83CDE02L, 0x00000000000024C2L,
-                            0x00000000D83DDEC2L, 0x00000000D83DDEC4L, 0x00000000D83DDEC5L, 0x00000000D83DDEC3L, 0x00000000D83CDE51L, 0x0000000000003299L, 0x0000000000003297L,
-                            0x00000000D83CDD91L, 0x00000000D83CDD98L, 0x00000000D83CDD94L, 0x00000000D83DDEABL,
-                            0x00000000D83DDD1EL, 0x00000000D83DDCF5L, 0x00000000D83DDEAFL, 0x00000000D83DDEB1L, 0x00000000D83DDEB3L, 0x00000000D83DDEB7L, 0x00000000D83DDEB8L,
-                            0x00000000000026D4L, 0x0000000000002733L, 0x0000000000002747L, 0x000000000000274EL, 0x0000000000002705L, 0x0000000000002734L, 0x00000000D83DDC9FL,
-                            0x00000000D83CDD9AL, 0x00000000D83DDCF3L, 0x00000000D83DDCF4L, 0x00000000D83CDD70L, 0x00000000D83CDD71L, 0x00000000D83CDD8EL, 0x00000000D83CDD7EL,
-                            0x00000000D83DDCA0L, 0x00000000000027BFL, 0x000000000000267BL, 0x0000000000002648L, 0x0000000000002649L, 0x000000000000264AL, 0x000000000000264BL,
-                            0x000000000000264CL, 0x000000000000264DL, 0x000000000000264EL, 0x000000000000264FL, 0x0000000000002650L, 0x0000000000002651L, 0x0000000000002652L,
-                            0x0000000000002653L, 0x00000000000026CEL, 0x00000000D83DDD2FL, 0x00000000D83CDFE7L, 0x00000000D83DDCB9L, 0x00000000D83DDCB2L, 0x00000000D83DDCB1L,
-                            0x00000000000000A9L, 0x00000000000000AEL, 0x0000000000002122L, 0x000000000000303DL, 0x0000000000003030L, 0x00000000D83DDD1DL, 0x00000000D83DDD1AL,
-                            0x00000000D83DDD19L, 0x00000000D83DDD1BL, 0x00000000D83DDD1CL, 0x000000000000274CL, 0x0000000000002B55L, 0x0000000000002757L, 0x000000000000203CL,
-                            0x0000000000002049L, 0x0000000000002753L,
-                            0x0000000000002755L, 0x0000000000002754L, 0x00000000D83DDD03L, 0x00000000D83DDD5BL, 0x00000000D83DDD67L, 0x00000000D83DDD50L, 0x00000000D83DDD5CL,
-                            0x00000000D83DDD51L, 0x00000000D83DDD5DL, 0x00000000D83DDD52L, 0x00000000D83DDD5EL, 0x00000000D83DDD53L, 0x00000000D83DDD5FL, 0x00000000D83DDD54L,
-                            0x00000000D83DDD60L, 0x00000000D83DDD55L, 0x00000000D83DDD56L, 0x00000000D83DDD57L, 0x00000000D83DDD58L, 0x00000000D83DDD59L, 0x00000000D83DDD5AL,
-                            0x00000000D83DDD61L, 0x00000000D83DDD62L, 0x00000000D83DDD63L, 0x00000000D83DDD64L, 0x00000000D83DDD65L, 0x00000000D83DDD66L, 0x0000000000002716L,
-                            0x0000000000002795L, 0x0000000000002796L, 0x0000000000002797L, 0x0000000000002660L, 0x0000000000002665L, 0x0000000000002663L, 0x0000000000002666L,
-                            0x00000000D83DDCAEL, 0x00000000D83DDCAFL, 0x0000000000002714L, 0x0000000000002611L, 0x00000000D83DDD18L, 0x00000000D83DDD17L, 0x00000000000027B0L,
-                            0x00000000D83DDD31L, 0x00000000D83DDD32L, 0x00000000D83DDD33L, 0x00000000000025FCL, 0x00000000000025FBL, 0x00000000000025FEL, 0x00000000000025FDL,
-                            0x00000000000025AAL, 0x00000000000025ABL, 0x00000000D83DDD3AL, 0x0000000000002B1CL, 0x0000000000002B1BL, 0x00000000000026ABL, 0x00000000000026AAL,
-                            0x00000000D83DDD34L, 0x00000000D83DDD35L, 0x00000000D83DDD3BL, 0x00000000D83DDD36L, 0x00000000D83DDD37L, 0x00000000D83DDD38L, 0x00000000D83DDD39L}};
-    static {
+                    0x00000000003820E3L, 0x00000000003920E3L, 0x00000000003020E3L, 0x00000000D83DDD1FL, 0x00000000D83DDD22L, 0x00000000002320E3L, 0x00000000D83DDD23L,
+                    0x0000000000002B06L, 0x0000000000002B07L, 0x0000000000002B05L, 0x00000000000027A1L, 0x00000000D83DDD20L, 0x00000000D83DDD21L, 0x00000000D83DDD24L,
+                    0x0000000000002197L, 0x0000000000002196L, 0x0000000000002198L, 0x0000000000002199L, 0x0000000000002194L, 0x0000000000002195L, 0x00000000D83DDD04L,
+                    0x00000000000025C0L, 0x00000000000025B6L, 0x00000000D83DDD3CL, 0x00000000D83DDD3DL, 0x00000000000021A9L, 0x00000000000021AAL, 0x0000000000002139L,
+                    0x00000000000023EAL, 0x00000000000023E9L, 0x00000000000023EBL, 0x00000000000023ECL, 0x0000000000002935L, 0x0000000000002934L, 0x00000000D83CDD97L,
+                    0x00000000D83DDD00L, 0x00000000D83DDD01L, 0x00000000D83DDD02L, 0x00000000D83CDD95L, 0x00000000D83CDD99L, 0x00000000D83CDD92L, 0x00000000D83CDD93L,
+                    0x00000000D83CDD96L, 0x00000000D83DDCF6L, 0x00000000D83CDFA6L, 0x00000000D83CDE01L, 0x00000000D83CDE2FL, 0x00000000D83CDE33L, 0x00000000D83CDE35L,
+                    0x00000000D83CDE32L, 0x00000000D83CDE34L, 0x00000000D83CDE50L, 0x00000000D83CDE39L, 0x00000000D83CDE3AL, 0x00000000D83CDE36L, 0x00000000D83CDE1AL,
+                    0x00000000D83DDEBBL, 0x00000000D83DDEB9L, 0x00000000D83DDEBAL, 0x00000000D83DDEBCL, 0x00000000D83DDEBEL, 0x00000000D83DDEB0L, 0x00000000D83DDEAEL,
+                    0x00000000D83CDD7FL, 0x000000000000267FL, 0x00000000D83DDEADL, 0x00000000D83CDE37L, 0x00000000D83CDE38L, 0x00000000D83CDE02L, 0x00000000000024C2L,
+                    0x00000000D83DDEC2L, 0x00000000D83DDEC4L, 0x00000000D83DDEC5L, 0x00000000D83DDEC3L, 0x00000000D83CDE51L, 0x0000000000003299L, 0x0000000000003297L,
+                    0x00000000D83CDD91L, 0x00000000D83CDD98L, 0x00000000D83CDD94L, 0x00000000D83DDEABL,
+                    0x00000000D83DDD1EL, 0x00000000D83DDCF5L, 0x00000000D83DDEAFL, 0x00000000D83DDEB1L, 0x00000000D83DDEB3L, 0x00000000D83DDEB7L, 0x00000000D83DDEB8L,
+                    0x00000000000026D4L, 0x0000000000002733L, 0x0000000000002747L, 0x000000000000274EL, 0x0000000000002705L, 0x0000000000002734L, 0x00000000D83DDC9FL,
+                    0x00000000D83CDD9AL, 0x00000000D83DDCF3L, 0x00000000D83DDCF4L, 0x00000000D83CDD70L, 0x00000000D83CDD71L, 0x00000000D83CDD8EL, 0x00000000D83CDD7EL,
+                    0x00000000D83DDCA0L, 0x00000000000027BFL, 0x000000000000267BL, 0x0000000000002648L, 0x0000000000002649L, 0x000000000000264AL, 0x000000000000264BL,
+                    0x000000000000264CL, 0x000000000000264DL, 0x000000000000264EL, 0x000000000000264FL, 0x0000000000002650L, 0x0000000000002651L, 0x0000000000002652L,
+                    0x0000000000002653L, 0x00000000000026CEL, 0x00000000D83DDD2FL, 0x00000000D83CDFE7L, 0x00000000D83DDCB9L, 0x00000000D83DDCB2L, 0x00000000D83DDCB1L,
+                    0x00000000000000A9L, 0x00000000000000AEL, 0x0000000000002122L, 0x000000000000303DL, 0x0000000000003030L, 0x00000000D83DDD1DL, 0x00000000D83DDD1AL,
+                    0x00000000D83DDD19L, 0x00000000D83DDD1BL, 0x00000000D83DDD1CL, 0x000000000000274CL, 0x0000000000002B55L, 0x0000000000002757L, 0x000000000000203CL,
+                    0x0000000000002049L, 0x0000000000002753L,
+                    0x0000000000002755L, 0x0000000000002754L, 0x00000000D83DDD03L, 0x00000000D83DDD5BL, 0x00000000D83DDD67L, 0x00000000D83DDD50L, 0x00000000D83DDD5CL,
+                    0x00000000D83DDD51L, 0x00000000D83DDD5DL, 0x00000000D83DDD52L, 0x00000000D83DDD5EL, 0x00000000D83DDD53L, 0x00000000D83DDD5FL, 0x00000000D83DDD54L,
+                    0x00000000D83DDD60L, 0x00000000D83DDD55L, 0x00000000D83DDD56L, 0x00000000D83DDD57L, 0x00000000D83DDD58L, 0x00000000D83DDD59L, 0x00000000D83DDD5AL,
+                    0x00000000D83DDD61L, 0x00000000D83DDD62L, 0x00000000D83DDD63L, 0x00000000D83DDD64L, 0x00000000D83DDD65L, 0x00000000D83DDD66L, 0x0000000000002716L,
+                    0x0000000000002795L, 0x0000000000002796L, 0x0000000000002797L, 0x0000000000002660L, 0x0000000000002665L, 0x0000000000002663L, 0x0000000000002666L,
+                    0x00000000D83DDCAEL, 0x00000000D83DDCAFL, 0x0000000000002714L, 0x0000000000002611L, 0x00000000D83DDD18L, 0x00000000D83DDD17L, 0x00000000000027B0L,
+                    0x00000000D83DDD31L, 0x00000000D83DDD32L, 0x00000000D83DDD33L, 0x00000000000025FCL, 0x00000000000025FBL, 0x00000000000025FEL, 0x00000000000025FDL,
+                    0x00000000000025AAL, 0x00000000000025ABL, 0x00000000D83DDD3AL, 0x0000000000002B1CL, 0x0000000000002B1BL, 0x00000000000026ABL, 0x00000000000026AAL,
+                    0x00000000D83DDD34L, 0x00000000D83DDD35L, 0x00000000D83DDD3BL, 0x00000000D83DDD36L, 0x00000000D83DDD37L, 0x00000000D83DDD38L, 0x00000000D83DDD39L}};
+	
+	static {
         int emojiFullSize;
         if (AndroidUtilities.density <= 1.0f) {
             emojiFullSize = 30;
@@ -191,31 +201,25 @@
         } else {
             emojiFullSize = 90;
         }
-        drawImgSize = AndroidUtilities.dp(20);
+		drawImgSize = AndroidUtilities.dp(20);
         if (AndroidUtilities.isTablet()) {
             bigImgSize = AndroidUtilities.dp(40);
         } else {
             bigImgSize = AndroidUtilities.dp(30);
         }
 
-        for (int j = 1; j < data.length; j++) {
-            for (int i = 0; i < data[j].length; i++) {
+		for (int j = 1; j < data.length; j++) {
+			for (int i = 0; i < data[j].length; i++) {
                 Rect rect = new Rect((i % cols[j - 1]) * emojiFullSize, (i / cols[j - 1]) * emojiFullSize, (i % cols[j - 1] + 1) * emojiFullSize, (i / cols[j - 1] + 1) * emojiFullSize);
-                rects.put(data[j][i], new DrawableInfo(rect, (byte) (j - 1)));
-            }
-        }
-        placeholderPaint = new Paint();
-        placeholderPaint.setColor(0x00000000);
-    }
-    private static HashMap<Long, DrawableInfo> rects = new HashMap<Long, DrawableInfo>();
-    private static int drawImgSize, bigImgSize;
-    private static boolean inited = false;
-    private static Paint placeholderPaint;
-    private static Bitmap emojiBmp[] = new Bitmap[5];
-    private static boolean loadingEmoji[] = new boolean[5];
-
-    private static void loadEmoji(final int page) {
-        try {
+				rects.put(data[j][i], new DrawableInfo(rect, (byte)(j - 1)));
+			}
+		}
+		placeholderPaint = new Paint();
+		placeholderPaint.setColor(0x00000000);
+	}
+
+	private static void loadEmoji(final int page) {
+		try {
             float scale = 1.0f;
             int imageResize = 1;
             if (AndroidUtilities.density <= 1.0f) {
@@ -266,55 +270,123 @@ public void run() {
                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.emojiDidLoaded);
                 }
             });
-        } catch (Throwable x) {
+		} catch(Throwable x) {
             FileLog.e("tmessages", "Error loading emoji", x);
         }
-    }
-
-    private static void loadEmojiAsync(final int page) {
-        if (loadingEmoji[page]) {
+	}
+	
+	private static void loadEmojiAsync(final int page) {
+		if (loadingEmoji[page]) {
             return;
         }
         loadingEmoji[page] = true;
-        new Thread(new Runnable() {
+		new Thread(new Runnable() {
             public void run() {
                 loadEmoji(page);
                 loadingEmoji[page] = false;
             }
         }).start();
-    }
+	}
+	
+	public static void invalidateAll(View view) {
+		if (view instanceof ViewGroup) {
+			ViewGroup g = (ViewGroup)view;
+			for (int i = 0; i < g.getChildCount(); i++) {
+				invalidateAll(g.getChildAt(i));
+			}
+		} else if (view instanceof TextView) {
+			view.invalidate();
+		}
+	}
+	
+	public static EmojiDrawable getEmojiDrawable(long code) {
+		DrawableInfo info = rects.get(code);
+		if (info == null) {
+            FileLog.e("tmessages", "No emoji drawable for code " + String.format("%016X", code));
+			return null;
+		}
+		EmojiDrawable ed = new EmojiDrawable(info);
+		ed.setBounds(0, 0, drawImgSize, drawImgSize);
+		return ed;
+	}
+	
+	public static Drawable getEmojiBigDrawable(long code) {
+		EmojiDrawable ed = getEmojiDrawable(code);
+		if (ed == null) {
+            return null;
+        }
+		ed.setBounds(0, 0, bigImgSize, bigImgSize);
+		ed.fullSize = true;
+		return ed;
+	}
+	
+	public static class EmojiDrawable extends Drawable {
+        private DrawableInfo info;
+		private boolean fullSize = false;
+		private static Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
+		
+		public EmojiDrawable(DrawableInfo i) {
+			info = i;
+		}
 
-    public static void invalidateAll(View view) {
-        if (view instanceof ViewGroup) {
-            ViewGroup g = (ViewGroup) view;
-            for (int i = 0; i < g.getChildCount(); i++) {
-                invalidateAll(g.getChildAt(i));
-            }
-        } else if (view instanceof TextView) {
-            view.invalidate();
+        public DrawableInfo getDrawableInfo() {
+            return info;
         }
-    }
 
-    public static EmojiDrawable getEmojiDrawable(long code) {
-        DrawableInfo info = rects.get(code);
-        if (info == null) {
-            FileLog.e("tmessages", "No emoji drawable for code " + String.format("%016X", code));
-            return null;
+        public Rect getDrawRect() {
+            Rect b = copyBounds();
+            int cX = b.centerX(), cY = b.centerY();
+            b.left = cX - (fullSize ? bigImgSize : drawImgSize) / 2;
+            b.right = cX + (fullSize ? bigImgSize : drawImgSize) / 2;
+            b.top = cY - (fullSize ? bigImgSize : drawImgSize) / 2;
+            b.bottom = cY + (fullSize ? bigImgSize : drawImgSize) / 2;
+            return b;
         }
-        EmojiDrawable ed = new EmojiDrawable(info);
-        ed.setBounds(0, 0, drawImgSize, drawImgSize);
-        return ed;
-    }
 
-    public static Drawable getEmojiBigDrawable(long code) {
-        EmojiDrawable ed = getEmojiDrawable(code);
-        if (ed == null) {
-            return null;
+        @Override
+		public void draw(Canvas canvas) {
+			if (emojiBmp[info.page] == null) {
+                loadEmojiAsync(info.page);
+				canvas.drawRect(getBounds(), placeholderPaint);
+				return;
+			}
+            Rect b;
+            if (fullSize) {
+                b = getDrawRect();
+            } else {
+                b = getBounds();
+            }
+
+            if (!canvas.quickReject(b.left, b.top, b.right, b.bottom, Canvas.EdgeType.AA)) {
+                canvas.drawBitmap(emojiBmp[info.page], info.rect, b, paint);
+            }
+		}
+
+		@Override
+		public int getOpacity() {
+			return 0;
+		}
+
+		@Override
+		public void setAlpha(int alpha) {
+
         }
-        ed.setBounds(0, 0, bigImgSize, bigImgSize);
-        ed.fullSize = true;
-        return ed;
-    }
+
+		@Override
+		public void setColorFilter(ColorFilter cf) {
+
+        }
+	}
+	
+	private static class DrawableInfo {
+        public Rect rect;
+        public byte page;
+
+		public DrawableInfo(Rect r, byte p) {
+			rect = r;
+            page = p;
+		}
+	}
 
     private static boolean inArray(char c, char[] a) {
         for (char cc : a) {
@@ -331,7 +403,7 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
         }
         Spannable s;
         if (cs instanceof Spannable) {
-            s = (Spannable) cs;
+            s = (Spannable)cs;
         } else {
             s = Spannable.Factory.getInstance().newSpannable(cs);
         }
@@ -350,7 +422,7 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                     if (d != null) {
                         EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
                         emojiCount++;
-                        if (c >= 0xDDE6 && c <= 0xDDFA) {
+                        if (c>= 0xDDE6 && c <= 0xDDFA) {
                             s.setSpan(span, i - 3, i + 1, 0);
                         } else {
                             s.setSpan(span, i - 1, i + 1, 0);
@@ -392,74 +464,6 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
         return s;
     }
 
-    public static class EmojiDrawable extends Drawable {
-        private static Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
-        private DrawableInfo info;
-        private boolean fullSize = false;
-
-        public EmojiDrawable(DrawableInfo i) {
-            info = i;
-        }
-
-        public DrawableInfo getDrawableInfo() {
-            return info;
-        }
-
-        public Rect getDrawRect() {
-            Rect b = copyBounds();
-            int cX = b.centerX(), cY = b.centerY();
-            b.left = cX - (fullSize ? bigImgSize : drawImgSize) / 2;
-            b.right = cX + (fullSize ? bigImgSize : drawImgSize) / 2;
-            b.top = cY - (fullSize ? bigImgSize : drawImgSize) / 2;
-            b.bottom = cY + (fullSize ? bigImgSize : drawImgSize) / 2;
-            return b;
-        }
-
-        @Override
-        public void draw(Canvas canvas) {
-            if (emojiBmp[info.page] == null) {
-                loadEmojiAsync(info.page);
-                canvas.drawRect(getBounds(), placeholderPaint);
-                return;
-            }
-            Rect b;
-            if (fullSize) {
-                b = getDrawRect();
-            } else {
-                b = getBounds();
-            }
-
-            if (!canvas.quickReject(b.left, b.top, b.right, b.bottom, Canvas.EdgeType.AA)) {
-                canvas.drawBitmap(emojiBmp[info.page], info.rect, b, paint);
-            }
-        }
-
-        @Override
-        public int getOpacity() {
-            return 0;
-        }
-
-        @Override
-        public void setAlpha(int alpha) {
-
-        }
-
-        @Override
-        public void setColorFilter(ColorFilter cf) {
-
-        }
-    }
-
-    private static class DrawableInfo {
-        public Rect rect;
-        public byte page;
-
-        public DrawableInfo(Rect r, byte p) {
-            rect = r;
-            page = p;
-        }
-    }
-
     public static class EmojiSpan extends ImageSpan {
         private Paint.FontMetricsInt fontMetrics = null;
         private int size = AndroidUtilities.dp(20);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
index e33773946..f0a133beb 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
@@ -14,9 +14,9 @@
 import android.content.Intent;
 
 import org.json.JSONObject;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ApplicationLoader;
 
 public class GcmBroadcastReceiver extends BroadcastReceiver {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index ea383c73d..f3d7be2d1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -25,13 +25,13 @@
 import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -50,8 +50,6 @@
 
 public class ImageLoader {
 
-    private static volatile ImageLoader Instance = null;
-    protected VMRuntimeHack runtimeHack = null;
     private HashMap<String, Integer> bitmapUseCounts = new HashMap<String, Integer>();
     private LruCache memCache;
     private ConcurrentHashMap<String, CacheImage> imageLoadingByUrl = new ConcurrentHashMap<String, CacheImage>();
@@ -60,389 +58,572 @@
     private LinkedList<HttpTask> httpTasks = new LinkedList<HttpTask>();
     private DispatchQueue cacheOutQueue = new DispatchQueue("cacheOutQueue");
     private int currentHttpTasksCount = 0;
+
+    protected VMRuntimeHack runtimeHack = null;
     private String ignoreRemoval = null;
+
     private volatile long lastCacheOutTime = 0;
     private int lastImageNum = 0;
     private long lastProgressUpdateTime = 0;
+
     private File telegramPath = null;
 
-    public ImageLoader() {
-        int cacheSize = Math.min(15, ((ActivityManager) ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass() / 7) * 1024 * 1024;
+    private class HttpTask extends AsyncTask<Void, Void, Boolean> {
 
-        if (Build.VERSION.SDK_INT < 11) {
-            runtimeHack = new VMRuntimeHack();
-            cacheSize = 1024 * 1024 * 3;
-        }
-        memCache = new LruCache(cacheSize) {
-            @Override
-            protected int sizeOf(String key, BitmapDrawable bitmap) {
-                Bitmap b = bitmap.getBitmap();
-                if (Build.VERSION.SDK_INT < 12) {
-                    return b.getRowBytes() * b.getHeight();
-                } else {
-                    return b.getByteCount();
-                }
-            }
+        private CacheImage cacheImage = null;
+        private RandomAccessFile fileOutputStream = null;
 
-            @Override
-            protected void entryRemoved(boolean evicted, String key, BitmapDrawable oldBitmap, BitmapDrawable newBitmap) {
-                if (ignoreRemoval != null && key != null && ignoreRemoval.equals(key)) {
-                    return;
-                }
-                Integer count = bitmapUseCounts.get(key);
-                if (count == null || count == 0) {
-                    Bitmap b = oldBitmap.getBitmap();
-                    if (runtimeHack != null) {
-                        runtimeHack.trackAlloc(b.getRowBytes() * b.getHeight());
-                    }
-                    if (!b.isRecycled()) {
-                        b.recycle();
-                    }
-                }
-            }
-        };
+        public HttpTask(CacheImage cacheImage) {
+            this.cacheImage = cacheImage;
+        }
 
-        FileLoader.getInstance().setDelegate(new FileLoader.FileLoaderDelegate() {
-            @Override
-            public void fileUploadProgressChanged(final String location, final float progress, final boolean isEncrypted) {
-                long currentTime = System.currentTimeMillis();
-                if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
-                    lastProgressUpdateTime = currentTime;
+        protected Boolean doInBackground(Void... voids) {
+            InputStream httpConnectionStream = null;
+            boolean done = false;
 
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileUploadProgressChanged, location, progress, isEncrypted);
-                        }
-                    });
-                }
-            }
+            try {
+                URL downloadUrl = new URL(cacheImage.httpUrl);
+                URLConnection httpConnection = downloadUrl.openConnection();
+                httpConnection.setConnectTimeout(5000);
+                httpConnection.setReadTimeout(5000);
+                httpConnection.connect();
+                httpConnectionStream = httpConnection.getInputStream();
 
-            @Override
-            public void fileDidUploaded(final String location, final TLRPC.InputFile inputFile, final TLRPC.InputEncryptedFile inputEncryptedFile) {
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidUpload, location, inputFile, inputEncryptedFile);
-                    }
-                });
+                fileOutputStream = new RandomAccessFile(cacheImage.tempFilePath, "rws");
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
             }
 
-            @Override
-            public void fileDidFailedUpload(final String location, final boolean isEncrypted) {
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidFailUpload, location, isEncrypted);
+            try {
+                byte[] data = new byte[1024 * 2];
+                while (true) {
+                    if (isCancelled()) {
+                        break;
                     }
-                });
-            }
-
-            @Override
-            public void fileDidLoaded(final String location, final File finalFile, final File tempFile) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (location != null) {
-                            if (MediaController.getInstance().canSaveToGallery() && telegramPath != null && finalFile != null && finalFile.exists() && (location.endsWith(".mp4") || location.endsWith(".jpg"))) {
-                                if (finalFile.toString().startsWith(telegramPath.toString())) {
-                                    Utilities.addMediaToGallery(finalFile.toString());
-                                }
-                            }
+                    try {
+                        int readed = httpConnectionStream.read(data);
+                        if (readed > 0) {
+                            fileOutputStream.write(data, 0, readed);
+                        } else if (readed == -1) {
+                            done = true;
+                            break;
+                        } else {
+                            break;
                         }
-                        ImageLoader.this.fileDidLoaded(location, finalFile, tempFile);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidLoaded, location);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        break;
                     }
-                });
+                }
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
             }
 
-            @Override
-            public void fileDidFailedLoad(final String location, final int state) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        ImageLoader.this.fileDidFailedLoad(location);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidFailedLoad, location, state);
-                    }
-                });
+            try {
+                if (fileOutputStream != null) {
+                    fileOutputStream.close();
+                    fileOutputStream = null;
+                }
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
             }
 
-            @Override
-            public void fileLoadProgressChanged(final String location, final float progress) {
-                long currentTime = System.currentTimeMillis();
-                if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
-                    lastProgressUpdateTime = currentTime;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileLoadProgressChanged, location, progress);
-                        }
-                    });
+            try {
+                if (httpConnectionStream != null) {
+                    httpConnectionStream.close();
                 }
+                httpConnectionStream = null;
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
             }
-        });
 
-        BroadcastReceiver receiver = new BroadcastReceiver() {
-            @Override
-            public void onReceive(Context arg0, Intent intent) {
-                FileLog.e("tmessages", "file system changed");
-                Runnable r = new Runnable() {
-                    public void run() {
-                        FileLoader.getInstance().setMediaDirs(createMediaPaths());
-                    }
-                };
-                if (Intent.ACTION_MEDIA_UNMOUNTED.equals(intent.getAction())) {
-                    AndroidUtilities.runOnUIThread(r, 1000);
-                } else {
-                    r.run();
+            if (done) {
+                if (cacheImage.tempFilePath != null) {
+                    cacheImage.tempFilePath.renameTo(cacheImage.finalFilePath);
                 }
             }
-        };
 
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(Intent.ACTION_MEDIA_BAD_REMOVAL);
-        filter.addAction(Intent.ACTION_MEDIA_CHECKING);
-        filter.addAction(Intent.ACTION_MEDIA_EJECT);
-        filter.addAction(Intent.ACTION_MEDIA_MOUNTED);
-        filter.addAction(Intent.ACTION_MEDIA_NOFS);
-        filter.addAction(Intent.ACTION_MEDIA_REMOVED);
-        filter.addAction(Intent.ACTION_MEDIA_SHARED);
-        filter.addAction(Intent.ACTION_MEDIA_UNMOUNTABLE);
-        filter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
-        filter.addDataScheme("file");
-        ApplicationLoader.applicationContext.registerReceiver(receiver, filter);
+            return done;
+        }
 
-        FileLoader.getInstance().setMediaDirs(createMediaPaths());
-    }
+        @Override
+        protected void onPostExecute(Boolean result) {
+            fileDidLoaded(cacheImage.url, cacheImage.finalFilePath, cacheImage.tempFilePath);
+            runHttpTasks(true);
+        }
 
-    public static ImageLoader getInstance() {
-        ImageLoader localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (ImageLoader.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new ImageLoader();
-                }
-            }
+        @Override
+        protected void onCancelled() {
+            runHttpTasks(true);
         }
-        return localInstance;
     }
 
-    public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxHeight) {
-        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
-        bmOptions.inJustDecodeBounds = true;
-        FileDescriptor fileDescriptor = null;
-        ParcelFileDescriptor parcelFD = null;
+    private class CacheOutTask implements Runnable {
+        private Thread runningThread = null;
+        private final Object sync = new Object();
 
-        if (path == null && uri != null && uri.getScheme() != null) {
-            String imageFilePath = null;
-            if (uri.getScheme().contains("file")) {
-                path = uri.getPath();
-            } else {
-                try {
-                    path = Utilities.getPath(uri);
-                } catch (Throwable e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
+        private CacheImage cacheImage = null;
+        private boolean isCancelled = false;
+
+        public CacheOutTask(CacheImage cacheImage) {
+            this.cacheImage = cacheImage;
         }
 
-        if (path != null) {
-            BitmapFactory.decodeFile(path, bmOptions);
-        } else if (uri != null) {
-            boolean error = false;
-            try {
-                parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-                fileDescriptor = parcelFD.getFileDescriptor();
-                BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-                try {
-                    if (parcelFD != null) {
-                        parcelFD.close();
-                    }
-                } catch (Throwable e2) {
-                    FileLog.e("tmessages", e2);
+        @Override
+        public void run() {
+            synchronized (sync) {
+                runningThread = Thread.currentThread();
+                Thread.interrupted();
+                if (isCancelled) {
+                    return;
                 }
-                return null;
             }
-        }
-        float photoW = bmOptions.outWidth;
-        float photoH = bmOptions.outHeight;
-        float scaleFactor = Math.max(photoW / maxWidth, photoH / maxHeight);
-        if (scaleFactor < 1) {
-            scaleFactor = 1;
-        }
-        bmOptions.inJustDecodeBounds = false;
-        bmOptions.inSampleSize = (int) scaleFactor;
 
-        String exifPath = null;
-        if (path != null) {
-            exifPath = path;
-        } else if (uri != null) {
-            exifPath = Utilities.getPath(uri);
-        }
+            Long mediaId = null;
+            Bitmap image = null;
+            File cacheFileFinal = null;
+            boolean canDeleteFile = true;
 
-        Matrix matrix = null;
+            if (cacheImage.finalFilePath != null && cacheImage.finalFilePath.exists()) {
+                cacheFileFinal = cacheImage.finalFilePath;
+            } else if (cacheImage.tempFilePath != null && cacheImage.tempFilePath.exists()) {
+                cacheFileFinal = cacheImage.tempFilePath;
+            } else if (cacheImage.finalFilePath != null) {
+                cacheFileFinal = cacheImage.finalFilePath;
+            }
 
-        if (exifPath != null) {
-            ExifInterface exif;
             try {
-                exif = new ExifInterface(exifPath);
-                int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 1);
-                matrix = new Matrix();
-                switch (orientation) {
-                    case ExifInterface.ORIENTATION_ROTATE_90:
-                        matrix.postRotate(90);
-                        break;
-                    case ExifInterface.ORIENTATION_ROTATE_180:
-                        matrix.postRotate(180);
-                        break;
-                    case ExifInterface.ORIENTATION_ROTATE_270:
-                        matrix.postRotate(270);
-                        break;
+                if (cacheImage.httpUrl != null) {
+                    if (cacheImage.httpUrl.startsWith("thumb://")) {
+                        int idx = cacheImage.httpUrl.indexOf(":", 8);
+                        if (idx >= 0) {
+                            mediaId = Long.parseLong(cacheImage.httpUrl.substring(8, idx));
+                        }
+                        canDeleteFile = false;
+                    } else if (!cacheImage.httpUrl.startsWith("http")) {
+                        canDeleteFile = false;
+                    }
                 }
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-            }
-        }
 
-        Bitmap b = null;
-        if (path != null) {
-            try {
-                b = BitmapFactory.decodeFile(path, bmOptions);
-                if (b != null) {
-                    b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                int delay = 20;
+                if (runtimeHack != null) {
+                    delay = 60;
                 }
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-                ImageLoader.getInstance().clearMemory();
-                try {
-                    if (b == null) {
-                        b = BitmapFactory.decodeFile(path, bmOptions);
+                if (mediaId != null) {
+                    delay = 0;
+                }
+                if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay) {
+                    Thread.sleep(delay);
+                }
+                lastCacheOutTime = System.currentTimeMillis();
+                synchronized (sync) {
+                    if (isCancelled) {
+                        return;
                     }
-                    if (b != null) {
-                        b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                }
+
+                BitmapFactory.Options opts = new BitmapFactory.Options();
+
+                float w_filter = 0;
+                float h_filter = 0;
+                boolean blur = false;
+                if (cacheImage.filter != null) {
+                    String args[] = cacheImage.filter.split("_");
+                    w_filter = Float.parseFloat(args[0]) * AndroidUtilities.density;
+                    h_filter = Float.parseFloat(args[1]) * AndroidUtilities.density;
+                    if (args.length > 2) {
+                        blur = true;
                     }
-                } catch (Throwable e2) {
-                    FileLog.e("tmessages", e2);
+                    opts.inJustDecodeBounds = true;
+
+                    if (mediaId != null) {
+                        MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(), mediaId, MediaStore.Images.Thumbnails.MINI_KIND, opts);
+                    } else {
+                        if (cacheImage.finalFilePath != null && cacheImage.finalFilePath.exists()) {
+                            BitmapFactory.decodeFile(cacheImage.finalFilePath.getAbsolutePath(), opts);
+                        } else if (cacheImage.tempFilePath != null && cacheImage.tempFilePath.exists()) {
+                            BitmapFactory.decodeFile(cacheImage.tempFilePath.getAbsolutePath(), opts);
+                        }
+                    }
+
+                    float photoW = opts.outWidth;
+                    float photoH = opts.outHeight;
+                    float scaleFactor = Math.max(photoW / w_filter, photoH / h_filter);
+                    if (scaleFactor < 1) {
+                        scaleFactor = 1;
+                    }
+                    opts.inJustDecodeBounds = false;
+                    opts.inSampleSize = (int)scaleFactor;
                 }
-            }
-        } else if (uri != null) {
-            try {
-                b = BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
-                if (b != null) {
-                    b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                synchronized (sync) {
+                    if (isCancelled) {
+                        return;
+                    }
+                }
+
+                if (cacheImage.filter == null || blur) {
+                    opts.inPreferredConfig = Bitmap.Config.ARGB_8888;
+                } else {
+                    opts.inPreferredConfig = Bitmap.Config.RGB_565;
+                }
+                opts.inDither = false;
+                if (mediaId != null) {
+                    image = MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(), mediaId, MediaStore.Images.Thumbnails.MINI_KIND, null);
+                }
+                if (image == null) {
+                    FileInputStream is = new FileInputStream(cacheFileFinal);
+                    image = BitmapFactory.decodeStream(is, null, opts);
+                    is.close();
+                }
+                if (image == null) {
+                    if (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {
+                        cacheFileFinal.delete();
+                    }
+                } else {
+                    if (cacheImage.filter != null) {
+                        float bitmapW = image.getWidth();
+                        float bitmapH = image.getHeight();
+                        if (bitmapW != w_filter && bitmapW > w_filter) {
+                            float scaleFactor = bitmapW / w_filter;
+                            Bitmap scaledBitmap = Bitmap.createScaledBitmap(image, (int)w_filter, (int)(bitmapH / scaleFactor), true);
+                            if (image != scaledBitmap) {
+                                image.recycle();
+                                image = scaledBitmap;
+                            }
+                        }
+                        if (image != null && blur && bitmapH < 100 && bitmapW < 100) {
+                            Utilities.blurBitmap(image, 3);
+                        }
+                    }
+                    if (runtimeHack != null) {
+                        runtimeHack.trackFree(image.getRowBytes() * image.getHeight());
+                    }
                 }
             } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-            } finally {
+                //don't promt
+            }
+            Thread.interrupted();
+            onPostExecute(image != null ? new BitmapDrawable(image) : null);
+        }
+
+        private void onPostExecute(final BitmapDrawable bitmapDrawable) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (bitmapDrawable != null && memCache.get(cacheImage.key) == null) {
+                        memCache.put(cacheImage.key, bitmapDrawable);
+                    }
+                    cacheImage.setImageAndClear(bitmapDrawable);
+                }
+            });
+        }
+
+        public void cancel() {
+            synchronized (sync) {
                 try {
-                    if (parcelFD != null) {
-                        parcelFD.close();
+                    isCancelled = true;
+                    if (runningThread != null) {
+                        runningThread.interrupt();
                     }
-                } catch (Throwable e) {
-                    FileLog.e("tmessages", e);
+                } catch (Exception e) {
+                    //don't promt
                 }
             }
         }
-
-        return b;
     }
 
-    private static TLRPC.PhotoSize scaleAndSaveImageInternal(Bitmap bitmap, int w, int h, float photoW, float photoH, float scaleFactor, int quality, boolean cache, boolean scaleAnyway) throws Exception {
-        Bitmap scaledBitmap = null;
-        if (scaleFactor > 1 || scaleAnyway) {
-            scaledBitmap = Bitmap.createScaledBitmap(bitmap, w, h, true);
-        } else {
-            scaledBitmap = bitmap;
-        }
+    public class VMRuntimeHack {
+        private Object runtime = null;
+        private Method trackAllocation = null;
+        private Method trackFree = null;
 
-        TLRPC.TL_fileLocation location = new TLRPC.TL_fileLocation();
-        location.volume_id = Integer.MIN_VALUE;
-        location.dc_id = Integer.MIN_VALUE;
-        location.local_id = UserConfig.lastLocalId;
-        UserConfig.lastLocalId--;
-        TLRPC.PhotoSize size;
-        if (!cache) {
-            size = new TLRPC.TL_photoSize();
-        } else {
-            size = new TLRPC.TL_photoCachedSize();
+        public boolean trackAlloc(long size) {
+            if (runtime == null) {
+                return false;
+            }
+            try {
+                Object res = trackAllocation.invoke(runtime, size);
+                return (res instanceof Boolean) ? (Boolean)res : true;
+            } catch (Exception e) {
+                return false;
+            }
         }
-        size.location = location;
-        size.w = scaledBitmap.getWidth();
-        size.h = scaledBitmap.getHeight();
-        if (size.w <= 100 && size.h <= 100) {
-            size.type = "s";
-        } else if (size.w <= 320 && size.h <= 320) {
-            size.type = "m";
-        } else if (size.w <= 800 && size.h <= 800) {
-            size.type = "x";
-        } else if (size.w <= 1280 && size.h <= 1280) {
-            size.type = "y";
-        } else {
-            size.type = "w";
+
+        public boolean trackFree(long size) {
+            if (runtime == null) {
+                return false;
+            }
+            try {
+                Object res = trackFree.invoke(runtime, size);
+                return (res instanceof Boolean) ? (Boolean)res : true;
+            } catch (Exception e) {
+                return false;
+            }
         }
 
-        if (!cache) {
-            String fileName = location.volume_id + "_" + location.local_id + ".jpg";
-            final File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-            FileOutputStream stream = new FileOutputStream(cacheFile);
-            scaledBitmap.compress(Bitmap.CompressFormat.JPEG, quality, stream);
-            size.size = (int) stream.getChannel().size();
-        } else {
-            ByteArrayOutputStream stream = new ByteArrayOutputStream();
-            scaledBitmap.compress(Bitmap.CompressFormat.JPEG, quality, stream);
-            size.bytes = stream.toByteArray();
-            size.size = size.bytes.length;
-        }
-        if (scaledBitmap != bitmap) {
-            scaledBitmap.recycle();
+        @SuppressWarnings("unchecked")
+        public VMRuntimeHack() {
+            try {
+                Class cl = Class.forName("dalvik.system.VMRuntime");
+                Method getRt = cl.getMethod("getRuntime", new Class[0]);
+                Object[] objects = new Object[0];
+                runtime = getRt.invoke(null, objects);
+                trackAllocation = cl.getMethod("trackExternalAllocation", new Class[] {long.class});
+                trackFree = cl.getMethod("trackExternalFree", new Class[] {long.class});
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                runtime = null;
+                trackAllocation = null;
+                trackFree = null;
+            }
         }
-
-        return size;
     }
 
-    public static TLRPC.PhotoSize scaleAndSaveImage(Bitmap bitmap, float maxWidth, float maxHeight, int quality, boolean cache) {
-        return scaleAndSaveImage(bitmap, maxWidth, maxHeight, quality, cache, 0, 0);
-    }
+    private class CacheImage {
+        protected String key = null;
+        protected String url = null;
+        protected String filter = null;
+        protected TLRPC.FileLocation fileLocation = null;
+        protected String httpUrl = null;
+        protected File finalFilePath = null;
+        protected File tempFilePath = null;
+        protected CacheOutTask cacheTask;
+        protected HttpTask httpTask;
+        protected ArrayList<ImageReceiver> imageViewArray = new ArrayList<ImageReceiver>();
 
-    public static TLRPC.PhotoSize scaleAndSaveImage(Bitmap bitmap, float maxWidth, float maxHeight, int quality, boolean cache, int minWidth, int minHeight) {
-        if (bitmap == null) {
-            return null;
+        public void addImageView(ImageReceiver imageView) {
+            boolean exist = false;
+            for (ImageReceiver v : imageViewArray) {
+                if (v == imageView) {
+                    exist = true;
+                    break;
+                }
+            }
+            if (!exist) {
+                imageViewArray.add(imageView);
+                imageLoadingByTag.put(imageView.getTag(), this);
+            }
         }
-        float photoW = bitmap.getWidth();
-        float photoH = bitmap.getHeight();
-        if (photoW == 0 || photoH == 0) {
-            return null;
+
+        public void removeImageView(ImageReceiver imageView) {
+            for (int a = 0; a < imageViewArray.size(); a++) {
+                ImageReceiver obj = imageViewArray.get(a);
+                if (obj == null || obj == imageView) {
+                    imageViewArray.remove(a);
+                    if (obj != null) {
+                        imageLoadingByTag.remove(obj.getTag());
+                    }
+                    a--;
+                }
+            }
+
+            if (imageViewArray.size() == 0) {
+                cancelAndClear();
+            }
         }
-        boolean scaleAnyway = false;
-        float scaleFactor = Math.max(photoW / maxWidth, photoH / maxHeight);
-        if (scaleFactor < 1 && minWidth != 0 && minHeight != 0) {
-            scaleFactor = Math.max(photoW / minWidth, photoH / minHeight);
-            scaleAnyway = true;
+
+        public void setImageAndClear(BitmapDrawable image) {
+            if (image != null) {
+                for (ImageReceiver imgView : imageViewArray) {
+                    imgView.setImageBitmap(image, key);
+                }
+            }
+            clear();
         }
-        int w = (int) (photoW / scaleFactor);
-        int h = (int) (photoH / scaleFactor);
-        if (h == 0 || w == 0) {
-            return null;
+
+        public void cancelAndClear() {
+            if (fileLocation != null) {
+                FileLoader.getInstance().cancelLoadFile(fileLocation);
+            }
+            if (cacheTask != null) {
+                cacheOutQueue.cancelRunnable(cacheTask);
+                cacheTask.cancel();
+                cacheTask = null;
+            }
+            if (httpTask != null) {
+                httpTasks.remove(httpTask);
+                httpTask.cancel(true);
+                httpTask = null;
+            }
+            clear();
         }
 
-        try {
-            return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache, scaleAnyway);
-        } catch (Throwable e) {
-            FileLog.e("tmessages", e);
-            ImageLoader.getInstance().clearMemory();
-            System.gc();
-            try {
-                return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache, scaleAnyway);
-            } catch (Throwable e2) {
-                FileLog.e("tmessages", e2);
-                return null;
+        private void clear() {
+            for (ImageReceiver imageReceiver : imageViewArray) {
+                imageLoadingByTag.remove(imageReceiver.getTag());
+            }
+            imageViewArray.clear();
+            if (url != null) {
+                imageLoadingByUrl.remove(url);
+            }
+            if (key != null) {
+                imageLoadingByKeys.remove(key);
             }
         }
     }
 
+    private static volatile ImageLoader Instance = null;
+    public static ImageLoader getInstance() {
+        ImageLoader localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (ImageLoader.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new ImageLoader();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    public ImageLoader() {
+        int cacheSize = Math.min(15, ((ActivityManager) ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass() / 7) * 1024 * 1024;
+
+        if (Build.VERSION.SDK_INT < 11) {
+            runtimeHack = new VMRuntimeHack();
+            cacheSize = 1024 * 1024 * 3;
+        }
+        memCache = new LruCache(cacheSize) {
+            @Override
+            protected int sizeOf(String key, BitmapDrawable bitmap) {
+                Bitmap b = bitmap.getBitmap();
+                if(Build.VERSION.SDK_INT < 12) {
+                    return b.getRowBytes() * b.getHeight();
+                } else {
+                    return b.getByteCount();
+                }
+            }
+            @Override
+            protected void entryRemoved(boolean evicted, String key, BitmapDrawable oldBitmap, BitmapDrawable newBitmap) {
+                if (ignoreRemoval != null && key != null && ignoreRemoval.equals(key)) {
+                    return;
+                }
+                Integer count = bitmapUseCounts.get(key);
+                if (count == null || count == 0) {
+                    Bitmap b = oldBitmap.getBitmap();
+                    if (runtimeHack != null) {
+                        runtimeHack.trackAlloc(b.getRowBytes() * b.getHeight());
+                    }
+                    if (!b.isRecycled()) {
+                        b.recycle();
+                    }
+                }
+            }
+        };
+
+        FileLoader.getInstance().setDelegate(new FileLoader.FileLoaderDelegate() {
+            @Override
+            public void fileUploadProgressChanged(final String location, final float progress, final boolean isEncrypted) {
+                long currentTime = System.currentTimeMillis();
+                if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
+                    lastProgressUpdateTime = currentTime;
+
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileUploadProgressChanged, location, progress, isEncrypted);
+                        }
+                    });
+                }
+            }
+
+            @Override
+            public void fileDidUploaded(final String location, final TLRPC.InputFile inputFile, final TLRPC.InputEncryptedFile inputEncryptedFile) {
+                Utilities.stageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidUpload, location, inputFile, inputEncryptedFile);
+                    }
+                });
+            }
+
+            @Override
+            public void fileDidFailedUpload(final String location, final boolean isEncrypted) {
+                Utilities.stageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidFailUpload, location, isEncrypted);
+                    }
+                });
+            }
+
+            @Override
+            public void fileDidLoaded(final String location, final File finalFile, final File tempFile) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (location != null) {
+                            if (MediaController.getInstance().canSaveToGallery() && telegramPath != null && finalFile != null && finalFile.exists() && (location.endsWith(".mp4") || location.endsWith(".jpg"))) {
+                                if (finalFile.toString().startsWith(telegramPath.toString())) {
+                                    Utilities.addMediaToGallery(finalFile.toString());
+                                }
+                            }
+                        }
+                        ImageLoader.this.fileDidLoaded(location, finalFile, tempFile);
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidLoaded, location);
+                    }
+                });
+            }
+
+            @Override
+            public void fileDidFailedLoad(final String location, final int state) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        ImageLoader.this.fileDidFailedLoad(location);
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidFailedLoad, location, state);
+                    }
+                });
+            }
+
+            @Override
+            public void fileLoadProgressChanged(final String location, final float progress) {
+                long currentTime = System.currentTimeMillis();
+                if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
+                    lastProgressUpdateTime = currentTime;
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileLoadProgressChanged, location, progress);
+                        }
+                    });
+                }
+            }
+        });
+
+        BroadcastReceiver receiver = new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context arg0, Intent intent) {
+                FileLog.e("tmessages", "file system changed");
+                Runnable r = new Runnable() {
+                    public void run() {
+                        FileLoader.getInstance().setMediaDirs(createMediaPaths());
+                    }
+                };
+                if (Intent.ACTION_MEDIA_UNMOUNTED.equals(intent.getAction())) {
+                    AndroidUtilities.runOnUIThread(r, 1000);
+                } else {
+                    r.run();
+                }
+            }
+        };
+
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_MEDIA_BAD_REMOVAL);
+        filter.addAction(Intent.ACTION_MEDIA_CHECKING);
+        filter.addAction(Intent.ACTION_MEDIA_EJECT);
+        filter.addAction(Intent.ACTION_MEDIA_MOUNTED);
+        filter.addAction(Intent.ACTION_MEDIA_NOFS);
+        filter.addAction(Intent.ACTION_MEDIA_REMOVED);
+        filter.addAction(Intent.ACTION_MEDIA_SHARED);
+        filter.addAction(Intent.ACTION_MEDIA_UNMOUNTABLE);
+        filter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
+        filter.addDataScheme("file");
+        ApplicationLoader.applicationContext.registerReceiver(receiver, filter);
+
+        FileLoader.getInstance().setMediaDirs(createMediaPaths());
+    }
+
     private HashMap<Integer, File> createMediaPaths() {
         HashMap<Integer, File> mediaDirs = new HashMap<Integer, File>();
         File cachePath = AndroidUtilities.getCacheDir();
@@ -814,395 +995,217 @@ private void runHttpTasks(boolean complete) {
         }
     }
 
-    private class HttpTask extends AsyncTask<Void, Void, Boolean> {
-
-        private CacheImage cacheImage = null;
-        private RandomAccessFile fileOutputStream = null;
-
-        public HttpTask(CacheImage cacheImage) {
-            this.cacheImage = cacheImage;
-        }
-
-        protected Boolean doInBackground(Void... voids) {
-            InputStream httpConnectionStream = null;
-            boolean done = false;
-
-            try {
-                URL downloadUrl = new URL(cacheImage.httpUrl);
-                URLConnection httpConnection = downloadUrl.openConnection();
-                httpConnection.setConnectTimeout(5000);
-                httpConnection.setReadTimeout(5000);
-                httpConnection.connect();
-                httpConnectionStream = httpConnection.getInputStream();
-
-                fileOutputStream = new RandomAccessFile(cacheImage.tempFilePath, "rws");
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-            }
-
-            try {
-                byte[] data = new byte[1024 * 2];
-                while (true) {
-                    if (isCancelled()) {
-                        break;
-                    }
-                    try {
-                        int readed = httpConnectionStream.read(data);
-                        if (readed > 0) {
-                            fileOutputStream.write(data, 0, readed);
-                        } else if (readed == -1) {
-                            done = true;
-                            break;
-                        } else {
-                            break;
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                        break;
-                    }
-                }
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-            }
+    public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxHeight) {
+        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
+        bmOptions.inJustDecodeBounds = true;
+        FileDescriptor fileDescriptor = null;
+        ParcelFileDescriptor parcelFD = null;
 
-            try {
-                if (fileOutputStream != null) {
-                    fileOutputStream.close();
-                    fileOutputStream = null;
+        if (path == null && uri != null && uri.getScheme() != null) {
+            String imageFilePath = null;
+            if (uri.getScheme().contains("file")) {
+                path = uri.getPath();
+            } else {
+                try {
+                    path = Utilities.getPath(uri);
+                } catch (Throwable e) {
+                    FileLog.e("tmessages", e);
                 }
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
             }
+        }
 
+        if (path != null) {
+            BitmapFactory.decodeFile(path, bmOptions);
+        } else if (uri != null) {
+            boolean error = false;
             try {
-                if (httpConnectionStream != null) {
-                    httpConnectionStream.close();
-                }
-                httpConnectionStream = null;
+                parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
+                fileDescriptor = parcelFD.getFileDescriptor();
+                BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
             } catch (Throwable e) {
                 FileLog.e("tmessages", e);
-            }
-
-            if (done) {
-                if (cacheImage.tempFilePath != null) {
-                    cacheImage.tempFilePath.renameTo(cacheImage.finalFilePath);
+                try {
+                    if (parcelFD != null) {
+                        parcelFD.close();
+                    }
+                } catch (Throwable e2) {
+                    FileLog.e("tmessages", e2);
                 }
+                return null;
             }
-
-            return done;
-        }
-
-        @Override
-        protected void onPostExecute(Boolean result) {
-            fileDidLoaded(cacheImage.url, cacheImage.finalFilePath, cacheImage.tempFilePath);
-            runHttpTasks(true);
         }
-
-        @Override
-        protected void onCancelled() {
-            runHttpTasks(true);
+        float photoW = bmOptions.outWidth;
+        float photoH = bmOptions.outHeight;
+        float scaleFactor = Math.max(photoW / maxWidth, photoH / maxHeight);
+        if (scaleFactor < 1) {
+            scaleFactor = 1;
         }
-    }
-
-    private class CacheOutTask implements Runnable {
-        private final Object sync = new Object();
-        private Thread runningThread = null;
-        private CacheImage cacheImage = null;
-        private boolean isCancelled = false;
+        bmOptions.inJustDecodeBounds = false;
+        bmOptions.inSampleSize = (int)scaleFactor;
 
-        public CacheOutTask(CacheImage cacheImage) {
-            this.cacheImage = cacheImage;
+        String exifPath = null;
+        if (path != null) {
+            exifPath = path;
+        } else if (uri != null) {
+            exifPath = Utilities.getPath(uri);
         }
-
-        @Override
-        public void run() {
-            synchronized (sync) {
-                runningThread = Thread.currentThread();
-                Thread.interrupted();
-                if (isCancelled) {
-                    return;
-                }
-            }
-
-            Long mediaId = null;
-            Bitmap image = null;
-            File cacheFileFinal = null;
-            boolean canDeleteFile = true;
-
-            if (cacheImage.finalFilePath != null && cacheImage.finalFilePath.exists()) {
-                cacheFileFinal = cacheImage.finalFilePath;
-            } else if (cacheImage.tempFilePath != null && cacheImage.tempFilePath.exists()) {
-                cacheFileFinal = cacheImage.tempFilePath;
-            } else if (cacheImage.finalFilePath != null) {
-                cacheFileFinal = cacheImage.finalFilePath;
-            }
-
-            try {
-                if (cacheImage.httpUrl != null) {
-                    if (cacheImage.httpUrl.startsWith("thumb://")) {
-                        int idx = cacheImage.httpUrl.indexOf(":", 8);
-                        if (idx >= 0) {
-                            mediaId = Long.parseLong(cacheImage.httpUrl.substring(8, idx));
-                        }
-                        canDeleteFile = false;
-                    } else if (!cacheImage.httpUrl.startsWith("http")) {
-                        canDeleteFile = false;
-                    }
-                }
-
-                int delay = 20;
-                if (runtimeHack != null) {
-                    delay = 60;
-                }
-                if (mediaId != null) {
-                    delay = 0;
-                }
-                if (delay != 0 && lastCacheOutTime != 0 && lastCacheOutTime > System.currentTimeMillis() - delay) {
-                    Thread.sleep(delay);
-                }
-                lastCacheOutTime = System.currentTimeMillis();
-                synchronized (sync) {
-                    if (isCancelled) {
-                        return;
-                    }
-                }
-
-                BitmapFactory.Options opts = new BitmapFactory.Options();
-
-                float w_filter = 0;
-                float h_filter = 0;
-                boolean blur = false;
-                if (cacheImage.filter != null) {
-                    String args[] = cacheImage.filter.split("_");
-                    w_filter = Float.parseFloat(args[0]) * AndroidUtilities.density;
-                    h_filter = Float.parseFloat(args[1]) * AndroidUtilities.density;
-                    if (args.length > 2) {
-                        blur = true;
-                    }
-                    opts.inJustDecodeBounds = true;
-
-                    if (mediaId != null) {
-                        MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(), mediaId, MediaStore.Images.Thumbnails.MINI_KIND, opts);
-                    } else {
-                        if (cacheImage.finalFilePath != null && cacheImage.finalFilePath.exists()) {
-                            BitmapFactory.decodeFile(cacheImage.finalFilePath.getAbsolutePath(), opts);
-                        } else if (cacheImage.tempFilePath != null && cacheImage.tempFilePath.exists()) {
-                            BitmapFactory.decodeFile(cacheImage.tempFilePath.getAbsolutePath(), opts);
-                        }
-                    }
-
-                    float photoW = opts.outWidth;
-                    float photoH = opts.outHeight;
-                    float scaleFactor = Math.max(photoW / w_filter, photoH / h_filter);
-                    if (scaleFactor < 1) {
-                        scaleFactor = 1;
-                    }
-                    opts.inJustDecodeBounds = false;
-                    opts.inSampleSize = (int) scaleFactor;
-                }
-                synchronized (sync) {
-                    if (isCancelled) {
-                        return;
-                    }
-                }
-
-                if (cacheImage.filter == null || blur) {
-                    opts.inPreferredConfig = Bitmap.Config.ARGB_8888;
-                } else {
-                    opts.inPreferredConfig = Bitmap.Config.RGB_565;
-                }
-                opts.inDither = false;
-                if (mediaId != null) {
-                    image = MediaStore.Images.Thumbnails.getThumbnail(ApplicationLoader.applicationContext.getContentResolver(), mediaId, MediaStore.Images.Thumbnails.MINI_KIND, null);
-                }
-                if (image == null) {
-                    FileInputStream is = new FileInputStream(cacheFileFinal);
-                    image = BitmapFactory.decodeStream(is, null, opts);
-                    is.close();
-                }
-                if (image == null) {
-                    if (canDeleteFile && (cacheFileFinal.length() == 0 || cacheImage.filter == null)) {
-                        cacheFileFinal.delete();
-                    }
-                } else {
-                    if (cacheImage.filter != null) {
-                        float bitmapW = image.getWidth();
-                        float bitmapH = image.getHeight();
-                        if (bitmapW != w_filter && bitmapW > w_filter) {
-                            float scaleFactor = bitmapW / w_filter;
-                            Bitmap scaledBitmap = Bitmap.createScaledBitmap(image, (int) w_filter, (int) (bitmapH / scaleFactor), true);
-                            if (image != scaledBitmap) {
-                                image.recycle();
-                                image = scaledBitmap;
-                            }
-                        }
-                        if (image != null && blur && bitmapH < 100 && bitmapW < 100) {
-                            Utilities.blurBitmap(image, 3);
-                        }
-                    }
-                    if (runtimeHack != null) {
-                        runtimeHack.trackFree(image.getRowBytes() * image.getHeight());
-                    }
+
+        Matrix matrix = null;
+
+        if (exifPath != null) {
+            ExifInterface exif;
+            try {
+                exif = new ExifInterface(exifPath);
+                int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 1);
+                matrix = new Matrix();
+                switch (orientation) {
+                    case ExifInterface.ORIENTATION_ROTATE_90:
+                        matrix.postRotate(90);
+                        break;
+                    case ExifInterface.ORIENTATION_ROTATE_180:
+                        matrix.postRotate(180);
+                        break;
+                    case ExifInterface.ORIENTATION_ROTATE_270:
+                        matrix.postRotate(270);
+                        break;
                 }
             } catch (Throwable e) {
-                //don't promt
+                FileLog.e("tmessages", e);
             }
-            Thread.interrupted();
-            onPostExecute(image != null ? new BitmapDrawable(image) : null);
         }
 
-        private void onPostExecute(final BitmapDrawable bitmapDrawable) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (bitmapDrawable != null && memCache.get(cacheImage.key) == null) {
-                        memCache.put(cacheImage.key, bitmapDrawable);
+        Bitmap b = null;
+        if (path != null) {
+            try {
+                b = BitmapFactory.decodeFile(path, bmOptions);
+                if (b != null) {
+                    b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                }
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
+                ImageLoader.getInstance().clearMemory();
+                try {
+                    if (b == null) {
+                        b = BitmapFactory.decodeFile(path, bmOptions);
                     }
-                    cacheImage.setImageAndClear(bitmapDrawable);
+                    if (b != null) {
+                        b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                    }
+                } catch (Throwable e2) {
+                    FileLog.e("tmessages", e2);
                 }
-            });
-        }
-
-        public void cancel() {
-            synchronized (sync) {
+            }
+        } else if (uri != null) {
+            try {
+                b = BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
+                if (b != null) {
+                    b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), matrix, true);
+                }
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
+            } finally {
                 try {
-                    isCancelled = true;
-                    if (runningThread != null) {
-                        runningThread.interrupt();
+                    if (parcelFD != null) {
+                        parcelFD.close();
                     }
-                } catch (Exception e) {
-                    //don't promt
+                } catch (Throwable e) {
+                    FileLog.e("tmessages", e);
                 }
             }
         }
-    }
 
-    public class VMRuntimeHack {
-        private Object runtime = null;
-        private Method trackAllocation = null;
-        private Method trackFree = null;
+        return b;
+    }
 
-        @SuppressWarnings("unchecked")
-        public VMRuntimeHack() {
-            try {
-                Class cl = Class.forName("dalvik.system.VMRuntime");
-                Method getRt = cl.getMethod("getRuntime", new Class[0]);
-                Object[] objects = new Object[0];
-                runtime = getRt.invoke(null, objects);
-                trackAllocation = cl.getMethod("trackExternalAllocation", new Class[]{long.class});
-                trackFree = cl.getMethod("trackExternalFree", new Class[]{long.class});
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                runtime = null;
-                trackAllocation = null;
-                trackFree = null;
-            }
+    private static TLRPC.PhotoSize scaleAndSaveImageInternal(Bitmap bitmap, int w, int h, float photoW, float photoH, float scaleFactor, int quality, boolean cache, boolean scaleAnyway) throws Exception {
+        Bitmap scaledBitmap = null;
+        if (scaleFactor > 1 || scaleAnyway) {
+            scaledBitmap = Bitmap.createScaledBitmap(bitmap, w, h, true);
+        } else {
+            scaledBitmap = bitmap;
         }
 
-        public boolean trackAlloc(long size) {
-            if (runtime == null) {
-                return false;
-            }
-            try {
-                Object res = trackAllocation.invoke(runtime, size);
-                return (res instanceof Boolean) ? (Boolean) res : true;
-            } catch (Exception e) {
-                return false;
-            }
+        TLRPC.TL_fileLocation location = new TLRPC.TL_fileLocation();
+        location.volume_id = Integer.MIN_VALUE;
+        location.dc_id = Integer.MIN_VALUE;
+        location.local_id = UserConfig.lastLocalId;
+        UserConfig.lastLocalId--;
+        TLRPC.PhotoSize size;
+        if (!cache) {
+            size = new TLRPC.TL_photoSize();
+        } else {
+            size = new TLRPC.TL_photoCachedSize();
+        }
+        size.location = location;
+        size.w = scaledBitmap.getWidth();
+        size.h = scaledBitmap.getHeight();
+        if (size.w <= 100 && size.h <= 100) {
+            size.type = "s";
+        } else if (size.w <= 320 && size.h <= 320) {
+            size.type = "m";
+        } else if (size.w <= 800 && size.h <= 800) {
+            size.type = "x";
+        } else if (size.w <= 1280 && size.h <= 1280) {
+            size.type = "y";
+        } else {
+            size.type = "w";
         }
 
-        public boolean trackFree(long size) {
-            if (runtime == null) {
-                return false;
-            }
-            try {
-                Object res = trackFree.invoke(runtime, size);
-                return (res instanceof Boolean) ? (Boolean) res : true;
-            } catch (Exception e) {
-                return false;
-            }
+        if (!cache) {
+            String fileName = location.volume_id + "_" + location.local_id + ".jpg";
+            final File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+            FileOutputStream stream = new FileOutputStream(cacheFile);
+            scaledBitmap.compress(Bitmap.CompressFormat.JPEG, quality, stream);
+            size.size = (int)stream.getChannel().size();
+        } else {
+            ByteArrayOutputStream stream = new ByteArrayOutputStream();
+            scaledBitmap.compress(Bitmap.CompressFormat.JPEG, quality, stream);
+            size.bytes = stream.toByteArray();
+            size.size = size.bytes.length;
+        }
+        if (scaledBitmap != bitmap) {
+            scaledBitmap.recycle();
         }
+
+        return size;
     }
 
-    private class CacheImage {
-        protected String key = null;
-        protected String url = null;
-        protected String filter = null;
-        protected TLRPC.FileLocation fileLocation = null;
-        protected String httpUrl = null;
-        protected File finalFilePath = null;
-        protected File tempFilePath = null;
-        protected CacheOutTask cacheTask;
-        protected HttpTask httpTask;
-        protected ArrayList<ImageReceiver> imageViewArray = new ArrayList<ImageReceiver>();
+    public static TLRPC.PhotoSize scaleAndSaveImage(Bitmap bitmap, float maxWidth, float maxHeight, int quality, boolean cache) {
+        return scaleAndSaveImage(bitmap, maxWidth, maxHeight, quality, cache, 0, 0);
+    }
 
-        public void addImageView(ImageReceiver imageView) {
-            boolean exist = false;
-            for (ImageReceiver v : imageViewArray) {
-                if (v == imageView) {
-                    exist = true;
-                    break;
-                }
-            }
-            if (!exist) {
-                imageViewArray.add(imageView);
-                imageLoadingByTag.put(imageView.getTag(), this);
-            }
+    public static TLRPC.PhotoSize scaleAndSaveImage(Bitmap bitmap, float maxWidth, float maxHeight, int quality, boolean cache, int minWidth, int minHeight) {
+        if (bitmap == null) {
+            return null;
         }
-
-        public void removeImageView(ImageReceiver imageView) {
-            for (int a = 0; a < imageViewArray.size(); a++) {
-                ImageReceiver obj = imageViewArray.get(a);
-                if (obj == null || obj == imageView) {
-                    imageViewArray.remove(a);
-                    if (obj != null) {
-                        imageLoadingByTag.remove(obj.getTag());
-                    }
-                    a--;
-                }
-            }
-
-            if (imageViewArray.size() == 0) {
-                cancelAndClear();
-            }
+        float photoW = bitmap.getWidth();
+        float photoH = bitmap.getHeight();
+        if (photoW == 0 || photoH == 0) {
+            return null;
         }
-
-        public void setImageAndClear(BitmapDrawable image) {
-            if (image != null) {
-                for (ImageReceiver imgView : imageViewArray) {
-                    imgView.setImageBitmap(image, key);
-                }
-            }
-            clear();
+        boolean scaleAnyway = false;
+        float scaleFactor = Math.max(photoW / maxWidth, photoH / maxHeight);
+        if (scaleFactor < 1 && minWidth != 0 && minHeight != 0) {
+            scaleFactor = Math.max(photoW / minWidth, photoH / minHeight);
+            scaleAnyway = true;
         }
-
-        public void cancelAndClear() {
-            if (fileLocation != null) {
-                FileLoader.getInstance().cancelLoadFile(fileLocation);
-            }
-            if (cacheTask != null) {
-                cacheOutQueue.cancelRunnable(cacheTask);
-                cacheTask.cancel();
-                cacheTask = null;
-            }
-            if (httpTask != null) {
-                httpTasks.remove(httpTask);
-                httpTask.cancel(true);
-                httpTask = null;
-            }
-            clear();
+        int w = (int)(photoW / scaleFactor);
+        int h = (int)(photoH / scaleFactor);
+        if (h == 0 || w == 0) {
+            return null;
         }
 
-        private void clear() {
-            for (ImageReceiver imageReceiver : imageViewArray) {
-                imageLoadingByTag.remove(imageReceiver.getTag());
-            }
-            imageViewArray.clear();
-            if (url != null) {
-                imageLoadingByUrl.remove(url);
-            }
-            if (key != null) {
-                imageLoadingByKeys.remove(key);
+        try {
+            return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache, scaleAnyway);
+        } catch (Throwable e) {
+            FileLog.e("tmessages", e);
+            ImageLoader.getInstance().clearMemory();
+            System.gc();
+            try {
+                return scaleAndSaveImageInternal(bitmap, w, h, photoW, photoH, scaleFactor, quality, cache, scaleAnyway);
+            } catch (Throwable e2) {
+                FileLog.e("tmessages", e2);
+                return null;
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index 60dd3a665..21229633d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -20,8 +20,8 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.Utilities;
 
 public class ImageReceiver {
@@ -327,9 +327,9 @@ public boolean draw(Canvas canvas) {
 
     public Bitmap getBitmap() {
         if (currentImage != null && currentImage instanceof BitmapDrawable) {
-            return ((BitmapDrawable) currentImage).getBitmap();
+            return ((BitmapDrawable)currentImage).getBitmap();
         } else if (isPlaceholder && last_placeholder != null && last_placeholder instanceof BitmapDrawable) {
-            return ((BitmapDrawable) last_placeholder).getBitmap();
+            return ((BitmapDrawable)last_placeholder).getBitmap();
         }
         return null;
     }
@@ -411,10 +411,6 @@ public void setForcePreview(boolean value) {
         forcePreview = value;
     }
 
-    public int getRoundRadius() {
-        return roundRadius;
-    }
-
     public void setRoundRadius(int value) {
         roundRadius = value;
         if (roundRadius != 0) {
@@ -431,4 +427,8 @@ public void setRoundRadius(int value) {
             bitmapRect = null;
         }
     }
+
+    public int getRoundRadius() {
+        return roundRadius;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
index 8eb54f47c..4e0246d00 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
@@ -18,13 +18,13 @@
 import android.text.format.DateFormat;
 import android.util.Xml;
 
-import org.telegram.R;
 import org.telegram.android.time.FastDateFormat;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.xmlpull.v1.XmlPullParser;
 
 import java.io.File;
@@ -49,6 +49,7 @@
 
     public static boolean isRTL = false;
     public static int nameDisplayOrder = 1;
+    private static boolean is24HourFormat = false;
     public static FastDateFormat formatterDay;
     public static FastDateFormat formatterWeek;
     public static FastDateFormat formatterMonth;
@@ -56,11 +57,9 @@
     public static FastDateFormat formatterYearMax;
     public static FastDateFormat chatDate;
     public static FastDateFormat chatFullDate;
-    private static boolean is24HourFormat = false;
-    private static volatile LocaleController Instance = null;
-    public ArrayList<LocaleInfo> sortedLanguages = new ArrayList<LocaleController.LocaleInfo>();
-    public HashMap<String, LocaleInfo> languagesDict = new HashMap<String, LocaleInfo>();
+
     private HashMap<String, PluralRules> allRules = new HashMap<String, PluralRules>();
+
     private Locale currentLocale;
     private Locale systemDefaultLocale;
     private PluralRules currentPluralRules;
@@ -69,8 +68,67 @@
     private HashMap<String, String> localeValues = new HashMap<String, String>();
     private String languageOverride;
     private boolean changingConfiguration = false;
+
+    private class TimeZoneChangedReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            ApplicationLoader.applicationHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (!formatterMonth.getTimeZone().equals(TimeZone.getDefault())) {
+                        LocaleController.getInstance().recreateFormatters();
+                    }
+                }
+            });
+        }
+    }
+
+    public static class LocaleInfo {
+        public String name;
+        public String nameEnglish;
+        public String shortName;
+        public String pathToFile;
+
+        public String getSaveString() {
+            return name + "|" + nameEnglish + "|" + shortName + "|" + pathToFile;
+        }
+
+        public static LocaleInfo createWithString(String string) {
+            if (string == null || string.length() == 0) {
+                return null;
+            }
+            String[] args = string.split("\\|");
+            if (args.length != 4) {
+                return null;
+            }
+            LocaleInfo localeInfo = new LocaleInfo();
+            localeInfo.name = args[0];
+            localeInfo.nameEnglish = args[1];
+            localeInfo.shortName = args[2];
+            localeInfo.pathToFile = args[3];
+            return localeInfo;
+        }
+    }
+
+    public ArrayList<LocaleInfo> sortedLanguages = new ArrayList<LocaleController.LocaleInfo>();
+    public HashMap<String, LocaleInfo> languagesDict = new HashMap<String, LocaleInfo>();
+
     private ArrayList<LocaleInfo> otherLanguages = new ArrayList<LocaleInfo>();
 
+    private static volatile LocaleController Instance = null;
+    public static LocaleController getInstance() {
+        LocaleController localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (LocaleController.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new LocaleController();
+                }
+            }
+        }
+        return localInstance;
+    }
+
     public LocaleController() {
         addRules(new String[]{"bem", "brx", "da", "de", "el", "en", "eo", "es", "et", "fi", "fo", "gl", "he", "iw", "it", "nb",
                 "nl", "nn", "no", "sv", "af", "bg", "bn", "ca", "eu", "fur", "fy", "gu", "ha", "is", "ku",
@@ -225,17 +283,27 @@ public int compare(LocaleController.LocaleInfo o, LocaleController.LocaleInfo o2
         }
     }
 
-    public static LocaleController getInstance() {
-        LocaleController localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (LocaleController.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new LocaleController();
-                }
-            }
+    private void addRules(String[] languages, PluralRules rules) {
+        for (String language : languages) {
+            allRules.put(language, rules);
+        }
+    }
+
+    private String stringForQuantity(int quantity) {
+        switch (quantity) {
+            case QUANTITY_ZERO:
+                return "zero";
+            case QUANTITY_ONE:
+                return "one";
+            case QUANTITY_TWO:
+                return "two";
+            case QUANTITY_FEW:
+                return "few";
+            case QUANTITY_MANY:
+                return "many";
+            default:
+                return "other";
         }
-        return localInstance;
     }
 
     public static String getLocaleString(Locale locale) {
@@ -261,189 +329,6 @@ public static String getLocaleString(Locale locale) {
         return result.toString();
     }
 
-    public static String getCurrentLanguageName() {
-        return getString("LanguageName", R.string.LanguageName);
-    }
-
-    public static String getString(String key, int res) {
-        return getInstance().getStringInternal(key, res);
-    }
-
-    public static String formatPluralString(String key, int plural) {
-        if (key == null || key.length() == 0 || getInstance().currentPluralRules == null) {
-            return "LOC_ERR:" + key;
-        }
-        String param = getInstance().stringForQuantity(getInstance().currentPluralRules.quantityForNumber(plural));
-        param = key + "_" + param;
-        int resourceId = ApplicationLoader.applicationContext.getResources().getIdentifier(param, "string", ApplicationLoader.applicationContext.getPackageName());
-        return formatString(param, resourceId, plural);
-    }
-
-    public static String formatString(String key, int res, Object... args) {
-        String value = getInstance().localeValues.get(key);
-        if (value == null) {
-            value = ApplicationLoader.applicationContext.getString(res);
-        }
-        try {
-            if (getInstance().currentLocale != null) {
-                return String.format(getInstance().currentLocale, value, args);
-            } else {
-                return String.format(value, args);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return "LOC_ERR: " + key;
-        }
-    }
-
-    public static String formatStringSimple(String string, Object... args) {
-        try {
-            if (getInstance().currentLocale != null) {
-                return String.format(getInstance().currentLocale, string, args);
-            } else {
-                return String.format(string, args);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return "LOC_ERR: " + string;
-        }
-    }
-
-    public static String formatDateChat(long date) {
-        Calendar rightNow = Calendar.getInstance();
-        int year = rightNow.get(Calendar.YEAR);
-
-        rightNow.setTimeInMillis(date * 1000);
-        int dateYear = rightNow.get(Calendar.YEAR);
-
-        if (year == dateYear) {
-            return chatDate.format(date * 1000);
-        }
-        return chatFullDate.format(date * 1000);
-    }
-
-    public static String formatDate(long date) {
-        Calendar rightNow = Calendar.getInstance();
-        int day = rightNow.get(Calendar.DAY_OF_YEAR);
-        int year = rightNow.get(Calendar.YEAR);
-        rightNow.setTimeInMillis(date * 1000);
-        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
-        int dateYear = rightNow.get(Calendar.YEAR);
-
-        if (dateDay == day && year == dateYear) {
-            return formatterDay.format(new Date(date * 1000));
-        } else if (dateDay + 1 == day && year == dateYear) {
-            return getString("Yesterday", R.string.Yesterday);
-        } else if (year == dateYear) {
-            return formatterMonth.format(new Date(date * 1000));
-        } else {
-            return formatterYear.format(new Date(date * 1000));
-        }
-    }
-
-    public static String formatDateOnline(long date) {
-        Calendar rightNow = Calendar.getInstance();
-        int day = rightNow.get(Calendar.DAY_OF_YEAR);
-        int year = rightNow.get(Calendar.YEAR);
-        rightNow.setTimeInMillis(date * 1000);
-        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
-        int dateYear = rightNow.get(Calendar.YEAR);
-
-        if (dateDay == day && year == dateYear) {
-            return String.format("%s %s %s", LocaleController.getString("LastSeen", R.string.LastSeen), LocaleController.getString("TodayAt", R.string.TodayAt), formatterDay.format(new Date(date * 1000)));
-        } else if (dateDay + 1 == day && year == dateYear) {
-            return String.format("%s %s %s", LocaleController.getString("LastSeen", R.string.LastSeen), LocaleController.getString("YesterdayAt", R.string.YesterdayAt), formatterDay.format(new Date(date * 1000)));
-        } else if (year == dateYear) {
-            String format = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, formatterMonth.format(new Date(date * 1000)), formatterDay.format(new Date(date * 1000)));
-            return String.format("%s %s", LocaleController.getString("LastSeenDate", R.string.LastSeenDate), format);
-        } else {
-            String format = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, formatterYear.format(new Date(date * 1000)), formatterDay.format(new Date(date * 1000)));
-            return String.format("%s %s", LocaleController.getString("LastSeenDate", R.string.LastSeenDate), format);
-        }
-    }
-
-    public static String stringForMessageListDate(long date) {
-        Calendar rightNow = Calendar.getInstance();
-        int day = rightNow.get(Calendar.DAY_OF_YEAR);
-        int year = rightNow.get(Calendar.YEAR);
-        rightNow.setTimeInMillis(date * 1000);
-        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
-        int dateYear = rightNow.get(Calendar.YEAR);
-
-        if (year != dateYear) {
-            return formatterYear.format(new Date(date * 1000));
-        } else {
-            int dayDiff = dateDay - day;
-            if (dayDiff == 0 || dayDiff == -1 && (int) (System.currentTimeMillis() / 1000) - date < 60 * 60 * 8) {
-                return formatterDay.format(new Date(date * 1000));
-            } else if (dayDiff > -7 && dayDiff <= -1) {
-                return formatterWeek.format(new Date(date * 1000));
-            } else {
-                return formatterMonth.format(new Date(date * 1000));
-            }
-        }
-    }
-
-    public static String formatUserStatus(TLRPC.User user) {
-        if (user != null && user.status != null && user.status.expires == 0) {
-            if (user.status instanceof TLRPC.TL_userStatusRecently) {
-                user.status.expires = -100;
-            } else if (user.status instanceof TLRPC.TL_userStatusLastWeek) {
-                user.status.expires = -101;
-            } else if (user.status instanceof TLRPC.TL_userStatusLastMonth) {
-                user.status.expires = -102;
-            }
-        }
-        if (user != null && user.status != null && user.status.expires <= 0) {
-            if (MessagesController.getInstance().onlinePrivacy.containsKey(user.id)) {
-                return getString("Online", R.string.Online);
-            }
-        }
-        if (user == null || user.status == null || user.status.expires == 0 || user instanceof TLRPC.TL_userDeleted || user instanceof TLRPC.TL_userEmpty) {
-            return getString("ALongTimeAgo", R.string.ALongTimeAgo);
-        } else {
-            int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-            if (user.status.expires > currentTime) {
-                return getString("Online", R.string.Online);
-            } else {
-                if (user.status.expires == -1) {
-                    return getString("Invisible", R.string.Invisible);
-                } else if (user.status.expires == -100) {
-                    return getString("Lately", R.string.Lately);
-                } else if (user.status.expires == -101) {
-                    return getString("WithinAWeek", R.string.WithinAWeek);
-                } else if (user.status.expires == -102) {
-                    return getString("WithinAMonth", R.string.WithinAMonth);
-                } else {
-                    return formatDateOnline(user.status.expires);
-                }
-            }
-        }
-    }
-
-    private void addRules(String[] languages, PluralRules rules) {
-        for (String language : languages) {
-            allRules.put(language, rules);
-        }
-    }
-
-    private String stringForQuantity(int quantity) {
-        switch (quantity) {
-            case QUANTITY_ZERO:
-                return "zero";
-            case QUANTITY_ONE:
-                return "one";
-            case QUANTITY_TWO:
-                return "two";
-            case QUANTITY_FEW:
-                return "few";
-            case QUANTITY_MANY:
-                return "many";
-            default:
-                return "other";
-        }
-    }
-
     public boolean applyLanguageFile(File file) {
         try {
             HashMap<String, String> stringMap = getLocaleFileStrings(file);
@@ -565,13 +450,13 @@ private void loadOtherLanguages() {
             String value = null;
             String attrName = null;
             while (eventType != XmlPullParser.END_DOCUMENT) {
-                if (eventType == XmlPullParser.START_TAG) {
+                if(eventType == XmlPullParser.START_TAG) {
                     name = parser.getName();
                     int c = parser.getAttributeCount();
                     if (c > 0) {
                         attrName = parser.getAttributeValue(0);
                     }
-                } else if (eventType == XmlPullParser.TEXT) {
+                } else if(eventType == XmlPullParser.TEXT) {
                     if (attrName != null) {
                         value = parser.getText();
                         if (value != null) {
@@ -675,6 +560,10 @@ private void loadCurrentLocale() {
         localeValues.clear();
     }
 
+    public static String getCurrentLanguageName() {
+        return getString("LanguageName", R.string.LanguageName);
+    }
+
     private String getStringInternal(String key, int res) {
         String value = localeValues.get(key);
         if (value == null) {
@@ -683,6 +572,50 @@ private String getStringInternal(String key, int res) {
         return value;
     }
 
+    public static String getString(String key, int res) {
+        return getInstance().getStringInternal(key, res);
+    }
+
+    public static String formatPluralString(String key, int plural) {
+        if (key == null || key.length() == 0 || getInstance().currentPluralRules == null) {
+            return "LOC_ERR:" + key;
+        }
+        String param = getInstance().stringForQuantity(getInstance().currentPluralRules.quantityForNumber(plural));
+        param = key + "_" + param;
+        int resourceId = ApplicationLoader.applicationContext.getResources().getIdentifier(param, "string", ApplicationLoader.applicationContext.getPackageName());
+        return formatString(param, resourceId, plural);
+    }
+
+    public static String formatString(String key, int res, Object... args) {
+        String value = getInstance().localeValues.get(key);
+        if (value == null) {
+            value = ApplicationLoader.applicationContext.getString(res);
+        }
+        try {
+            if (getInstance().currentLocale != null) {
+                return String.format(getInstance().currentLocale, value, args);
+            } else {
+                return String.format(value, args);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return "LOC_ERR: " + key;
+        }
+    }
+
+    public static String formatStringSimple(String string, Object... args) {
+        try {
+            if (getInstance().currentLocale != null) {
+                return String.format(getInstance().currentLocale, string, args);
+            } else {
+                return String.format(string, args);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return "LOC_ERR: " + string;
+        }
+    }
+
     public void onDeviceConfigurationChange(Configuration newConfig) {
         if (changingConfiguration) {
             return;
@@ -707,6 +640,59 @@ public void onDeviceConfigurationChange(Configuration newConfig) {
         }
     }
 
+    public static String formatDateChat(long date) {
+        Calendar rightNow = Calendar.getInstance();
+        int year = rightNow.get(Calendar.YEAR);
+
+        rightNow.setTimeInMillis(date * 1000);
+        int dateYear = rightNow.get(Calendar.YEAR);
+
+        if (year == dateYear) {
+            return chatDate.format(date * 1000);
+        }
+        return chatFullDate.format(date * 1000);
+    }
+
+    public static String formatDate(long date) {
+        Calendar rightNow = Calendar.getInstance();
+        int day = rightNow.get(Calendar.DAY_OF_YEAR);
+        int year = rightNow.get(Calendar.YEAR);
+        rightNow.setTimeInMillis(date * 1000);
+        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
+        int dateYear = rightNow.get(Calendar.YEAR);
+
+        if (dateDay == day && year == dateYear) {
+            return formatterDay.format(new Date(date * 1000));
+        } else if (dateDay + 1 == day && year == dateYear) {
+            return getString("Yesterday", R.string.Yesterday);
+        } else if (year == dateYear) {
+            return formatterMonth.format(new Date(date * 1000));
+        } else {
+            return formatterYear.format(new Date(date * 1000));
+        }
+    }
+
+    public static String formatDateOnline(long date) {
+        Calendar rightNow = Calendar.getInstance();
+        int day = rightNow.get(Calendar.DAY_OF_YEAR);
+        int year = rightNow.get(Calendar.YEAR);
+        rightNow.setTimeInMillis(date * 1000);
+        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
+        int dateYear = rightNow.get(Calendar.YEAR);
+
+        if (dateDay == day && year == dateYear) {
+            return String.format("%s %s %s", LocaleController.getString("LastSeen", R.string.LastSeen), LocaleController.getString("TodayAt", R.string.TodayAt), formatterDay.format(new Date(date * 1000)));
+        } else if (dateDay + 1 == day && year == dateYear) {
+            return String.format("%s %s %s", LocaleController.getString("LastSeen", R.string.LastSeen), LocaleController.getString("YesterdayAt", R.string.YesterdayAt), formatterDay.format(new Date(date * 1000)));
+        } else if (year == dateYear) {
+            String format = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, formatterMonth.format(new Date(date * 1000)), formatterDay.format(new Date(date * 1000)));
+            return String.format("%s %s", LocaleController.getString("LastSeenDate", R.string.LastSeenDate), format);
+        } else {
+            String format = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, formatterYear.format(new Date(date * 1000)), formatterDay.format(new Date(date * 1000)));
+            return String.format("%s %s", LocaleController.getString("LastSeenDate", R.string.LastSeenDate), format);
+        }
+    }
+
     public void recreateFormatters() {
         Locale locale = currentLocale;
         if (locale == null) {
@@ -773,33 +759,66 @@ public void recreateFormatters() {
         }
     }
 
-    public static class LocaleInfo {
-        public String name;
-        public String nameEnglish;
-        public String shortName;
-        public String pathToFile;
+    public static String stringForMessageListDate(long date) {
+        Calendar rightNow = Calendar.getInstance();
+        int day = rightNow.get(Calendar.DAY_OF_YEAR);
+        int year = rightNow.get(Calendar.YEAR);
+        rightNow.setTimeInMillis(date * 1000);
+        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
+        int dateYear = rightNow.get(Calendar.YEAR);
 
-        public static LocaleInfo createWithString(String string) {
-            if (string == null || string.length() == 0) {
-                return null;
-            }
-            String[] args = string.split("\\|");
-            if (args.length != 4) {
-                return null;
+        if (year != dateYear) {
+            return formatterYear.format(new Date(date * 1000));
+        } else {
+            int dayDiff = dateDay - day;
+            if(dayDiff == 0 || dayDiff == -1 && (int)(System.currentTimeMillis() / 1000) - date < 60 * 60 * 8) {
+                return formatterDay.format(new Date(date * 1000));
+            } else if(dayDiff > -7 && dayDiff <= -1) {
+                return formatterWeek.format(new Date(date * 1000));
+            } else {
+                return formatterMonth.format(new Date(date * 1000));
             }
-            LocaleInfo localeInfo = new LocaleInfo();
-            localeInfo.name = args[0];
-            localeInfo.nameEnglish = args[1];
-            localeInfo.shortName = args[2];
-            localeInfo.pathToFile = args[3];
-            return localeInfo;
         }
+    }
 
-        public String getSaveString() {
-            return name + "|" + nameEnglish + "|" + shortName + "|" + pathToFile;
+    public static String formatUserStatus(TLRPC.User user) {
+        if (user != null && user.status != null && user.status.expires == 0) {
+            if (user.status instanceof TLRPC.TL_userStatusRecently) {
+                user.status.expires = -100;
+            } else if (user.status instanceof TLRPC.TL_userStatusLastWeek) {
+                user.status.expires = -101;
+            } else if (user.status instanceof TLRPC.TL_userStatusLastMonth) {
+                user.status.expires = -102;
+            }
+        }
+        if (user != null && user.status != null && user.status.expires <= 0) {
+            if (MessagesController.getInstance().onlinePrivacy.containsKey(user.id)) {
+                return getString("Online", R.string.Online);
+            }
+        }
+        if (user == null || user.status == null || user.status.expires == 0 || user instanceof TLRPC.TL_userDeleted || user instanceof TLRPC.TL_userEmpty) {
+            return getString("ALongTimeAgo", R.string.ALongTimeAgo);
+        } else {
+            int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+            if (user.status.expires > currentTime) {
+                return getString("Online", R.string.Online);
+            } else {
+                if (user.status.expires == -1) {
+                    return getString("Invisible", R.string.Invisible);
+                } else if (user.status.expires == -100) {
+                    return getString("Lately", R.string.Lately);
+                } else if (user.status.expires == -101) {
+                    return getString("WithinAWeek", R.string.WithinAWeek);
+                } else if (user.status.expires == -102) {
+                    return getString("WithinAMonth", R.string.WithinAMonth);
+                }  else {
+                    return formatDateOnline(user.status.expires);
+                }
+            }
         }
     }
 
+
     abstract public static class PluralRules {
         abstract int quantityForNumber(int n);
     }
@@ -1047,18 +1066,4 @@ public int quantityForNumber(int count) {
             }
         }
     }
-
-    private class TimeZoneChangedReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            ApplicationLoader.applicationHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (!formatterMonth.getTimeZone().equals(TimeZone.getDefault())) {
-                        LocaleController.getInstance().recreateFormatters();
-                    }
-                }
-            });
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LruCache.java b/TMessagesProj/src/main/java/org/telegram/android/LruCache.java
index 49de283c2..7455bbceb 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LruCache.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/LruCache.java
@@ -14,6 +14,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
+import java.util.Map;
 
 /**
  * Static library version of {@link android.util.LruCache}. Used to write apps
@@ -26,16 +27,14 @@
     private final LinkedHashMap<String, BitmapDrawable> map;
     private final LinkedHashMap<String, ArrayList<String>> mapFilters;
 
-    /**
-     * Size of this cache in units. Not necessarily the number of elements.
-     */
+    /** Size of this cache in units. Not necessarily the number of elements. */
     private int size;
     private int maxSize;
 
     /**
      * @param maxSize for caches that do not override {@link #sizeOf}, this is
-     *                the maximum number of entries in the cache. For all other caches,
-     *                this is the maximum sum of the sizes of the entries in this cache.
+     *     the maximum number of entries in the cache. For all other caches,
+     *     this is the maximum sum of the sizes of the entries in this cache.
      */
     public LruCache(int maxSize) {
         if (maxSize <= 0) {
@@ -115,7 +114,7 @@ public BitmapDrawable put(String key, BitmapDrawable value) {
 
     /**
      * @param maxSize the maximum size of the cache before returning. May be -1
-     *                to evict even 0-sized elements.
+     *     to evict even 0-sized elements.
      */
     private void trimToSize(int maxSize, String justAdded) {
         synchronized (this) {
@@ -185,9 +184,9 @@ public final BitmapDrawable remove(String key) {
 
         return previous;
     }
-
-    public boolean contains(String key) {
-        return map.containsKey(key);
+    
+    public boolean contains(String key){
+    	return map.containsKey(key);
     }
 
     /**
@@ -195,18 +194,17 @@ public boolean contains(String key) {
      * invoked when a value is evicted to make space, removed by a call to
      * {@link #remove}, or replaced by a call to {@link #put}. The default
      * implementation does nothing.
-     * <p/>
+     *
      * <p>The method is called without synchronization: other threads may
      * access the cache while this method is executing.
      *
-     * @param evicted  true if the entry is being removed to make space, false
-     *                 if the removal was caused by a {@link #put} or {@link #remove}.
+     * @param evicted true if the entry is being removed to make space, false
+     *     if the removal was caused by a {@link #put} or {@link #remove}.
      * @param newValue the new value for {@code key}, if it exists. If non-null,
-     *                 this removal was caused by a {@link #put}. Otherwise it was caused by
-     *                 an eviction or a {@link #remove}.
+     *     this removal was caused by a {@link #put}. Otherwise it was caused by
+     *     an eviction or a {@link #remove}.
      */
-    protected void entryRemoved(boolean evicted, String key, BitmapDrawable oldValue, BitmapDrawable newValue) {
-    }
+    protected void entryRemoved(boolean evicted, String key, BitmapDrawable oldValue, BitmapDrawable newValue) {}
 
     private int safeSizeOf(String key, BitmapDrawable value) {
         int result = sizeOf(key, value);
@@ -220,7 +218,7 @@ private int safeSizeOf(String key, BitmapDrawable value) {
      * Returns the size of the entry for {@code key} and {@code value} in
      * user-defined units.  The default implementation returns 1 so that size
      * is the number of entries and max size is the maximum number of entries.
-     * <p/>
+     *
      * <p>An entry's size must not change while it is in the cache.
      */
     protected int sizeOf(String key, BitmapDrawable value) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 021cda6b6..7bdcd4732 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -40,19 +40,19 @@
 import android.provider.MediaStore;
 import android.view.View;
 
-import org.telegram.R;
 import org.telegram.android.video.InputSurface;
 import org.telegram.android.video.MP4Builder;
 import org.telegram.android.video.Mp4Movie;
 import org.telegram.android.video.OutputSurface;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.Cells.ChatMediaCell;
 import org.telegram.ui.Components.GifDrawable;
 
@@ -71,11 +71,39 @@
 
 public class MediaController implements NotificationCenter.NotificationCenterDelegate {
 
-    public final static String MIME_TYPE = "video/avc";
-    public static final int AUTODOWNLOAD_MASK_PHOTO = 1;
-    public static final int AUTODOWNLOAD_MASK_AUDIO = 2;
-    public static final int AUTODOWNLOAD_MASK_VIDEO = 4;
-    public static final int AUTODOWNLOAD_MASK_DOCUMENT = 8;
+    private native int startRecord(String path);
+    private native int writeFrame(ByteBuffer frame, int len);
+    private native void stopRecord();
+    private native int openOpusFile(String path);
+    private native int seekOpusFile(float position);
+    private native int isOpusFile(String path);
+    private native void closeOpusFile();
+    private native void readOpusFile(ByteBuffer buffer, int capacity, int[] args);
+    private native long getTotalPcmDuration();
+
+    public static int[] readArgs = new int[3];
+
+    public static interface FileDownloadProgressListener {
+        public void onFailedDownload(String fileName);
+        public void onSuccessDownload(String fileName);
+        public void onProgressDownload(String fileName, float progress);
+        public void onProgressUpload(String fileName, float progress, boolean isEncrypted);
+        public int getObserverTag();
+    }
+
+    private class AudioBuffer {
+        public AudioBuffer(int capacity) {
+            buffer = ByteBuffer.allocateDirect(capacity);
+            bufferBytes = new byte[capacity];
+        }
+
+        ByteBuffer buffer;
+        byte[] bufferBytes;
+        int size;
+        int finished;
+        long pcmOffset;
+    }
+
     private static final String[] projectionPhotos = {
             MediaStore.Images.Media._ID,
             MediaStore.Images.Media.BUCKET_ID,
@@ -84,42 +112,81 @@
             MediaStore.Images.Media.DATE_TAKEN,
             MediaStore.Images.Media.ORIENTATION
     };
+
+    public static class AlbumEntry {
+        public int bucketId;
+        public String bucketName;
+        public PhotoEntry coverPhoto;
+        public ArrayList<PhotoEntry> photos = new ArrayList<PhotoEntry>();
+
+        public AlbumEntry(int bucketId, String bucketName, PhotoEntry coverPhoto) {
+            this.bucketId = bucketId;
+            this.bucketName = bucketName;
+            this.coverPhoto = coverPhoto;
+        }
+
+        public void addPhoto(PhotoEntry photoEntry) {
+            photos.add(photoEntry);
+        }
+    }
+
+    public static class PhotoEntry {
+        public int bucketId;
+        public int imageId;
+        public long dateTaken;
+        public String path;
+        public int orientation;
+
+        public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int orientation) {
+            this.bucketId = bucketId;
+            this.imageId = imageId;
+            this.dateTaken = dateTaken;
+            this.path = path;
+            this.orientation = orientation;
+        }
+    }
+
+    public final static String MIME_TYPE = "video/avc";
     private final static int PROCESSOR_TYPE_OTHER = 0;
     private final static int PROCESSOR_TYPE_QCOM = 1;
     private final static int PROCESSOR_TYPE_INTEL = 2;
     private final static int PROCESSOR_TYPE_MTK = 3;
     private final static int PROCESSOR_TYPE_SEC = 4;
     private final static int PROCESSOR_TYPE_TI = 5;
-    public static int[] readArgs = new int[3];
-    private static volatile MediaController Instance = null;
     private final Object videoConvertSync = new Object();
+
+    private ArrayList<MessageObject> videoConvertQueue = new ArrayList<MessageObject>();
     private final Object videoQueueSync = new Object();
-    private final Object progressTimerSync = new Object();
-    private final Object playerSync = new Object();
-    private final Object playerObjectSync = new Object();
-    private final Object sync = new Object();
+    private boolean cancelCurrentVideoConversion = false;
+    private boolean videoConvertFirstWrite = true;
+
+    public static final int AUTODOWNLOAD_MASK_PHOTO = 1;
+    public static final int AUTODOWNLOAD_MASK_AUDIO = 2;
+    public static final int AUTODOWNLOAD_MASK_VIDEO = 4;
+    public static final int AUTODOWNLOAD_MASK_DOCUMENT = 8;
     public int mobileDataDownloadMask = 0;
     public int wifiDownloadMask = 0;
     public int roamingDownloadMask = 0;
-    private ArrayList<MessageObject> videoConvertQueue = new ArrayList<MessageObject>();
-    private boolean cancelCurrentVideoConversion = false;
-    private boolean videoConvertFirstWrite = true;
     private int lastCheckMask = 0;
     private ArrayList<DownloadObject> photoDownloadQueue = new ArrayList<DownloadObject>();
     private ArrayList<DownloadObject> audioDownloadQueue = new ArrayList<DownloadObject>();
     private ArrayList<DownloadObject> documentDownloadQueue = new ArrayList<DownloadObject>();
     private ArrayList<DownloadObject> videoDownloadQueue = new ArrayList<DownloadObject>();
     private HashMap<String, DownloadObject> downloadQueueKeys = new HashMap<String, DownloadObject>();
+
     private boolean saveToGallery = true;
+
     private HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>> loadingFileObservers = new HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>>();
     private HashMap<Integer, String> observersByTag = new HashMap<Integer, String>();
     private boolean listenerInProgress = false;
     private HashMap<String, FileDownloadProgressListener> addLaterArray = new HashMap<String, FileDownloadProgressListener>();
     private ArrayList<FileDownloadProgressListener> deleteLaterArray = new ArrayList<FileDownloadProgressListener>();
     private int lastTag = 0;
+
     private GifDrawable currentGifDrawable;
     private MessageObject currentGifMessageObject;
     private ChatMediaCell currentMediaCell;
+
     private boolean isPaused = false;
     private MediaPlayer audioPlayer = null;
     private AudioTrack audioTrackPlayer = null;
@@ -131,6 +198,8 @@
     private long lastPlayPcm;
     private int ignoreFirstProgress = 0;
     private Timer progressTimer = null;
+    private final Object progressTimerSync = new Object();
+
     private AudioRecord audioRecorder = null;
     private TLRPC.TL_audio recordingAudio = null;
     private File recordingAudioFile = null;
@@ -141,12 +210,104 @@
     private DispatchQueue playerQueue;
     private ArrayList<AudioBuffer> usedPlayerBuffers = new ArrayList<AudioBuffer>();
     private ArrayList<AudioBuffer> freePlayerBuffers = new ArrayList<AudioBuffer>();
+    private final Object playerSync = new Object();
+    private final Object playerObjectSync = new Object();
+
+    private final Object sync = new Object();
+
     private ArrayList<ByteBuffer> recordBuffers = new ArrayList<ByteBuffer>();
     private ByteBuffer fileBuffer;
     private int recordBufferSize;
     private boolean sendAfterDone;
+
     private DispatchQueue recordQueue;
     private DispatchQueue fileEncodingQueue;
+    private Runnable recordRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (audioRecorder != null) {
+                ByteBuffer buffer = null;
+                if (!recordBuffers.isEmpty()) {
+                    buffer = recordBuffers.get(0);
+                    recordBuffers.remove(0);
+                } else {
+                    buffer = ByteBuffer.allocateDirect(recordBufferSize);
+                }
+                buffer.rewind();
+                int len = audioRecorder.read(buffer, buffer.capacity());
+                if (len > 0) {
+                    buffer.limit(len);
+                    final ByteBuffer finalBuffer = buffer;
+                    final boolean flush = len != buffer.capacity();
+                    if (len != 0) {
+                        fileEncodingQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                while (finalBuffer.hasRemaining()) {
+                                    int oldLimit = -1;
+                                    if (finalBuffer.remaining() > fileBuffer.remaining()) {
+                                        oldLimit = finalBuffer.limit();
+                                        finalBuffer.limit(fileBuffer.remaining() + finalBuffer.position());
+                                    }
+                                    fileBuffer.put(finalBuffer);
+                                    if (fileBuffer.position() == fileBuffer.limit() || flush) {
+                                        if (writeFrame(fileBuffer, !flush ? fileBuffer.limit() : finalBuffer.position()) != 0) {
+                                            fileBuffer.rewind();
+                                            recordTimeCount += fileBuffer.limit() / 2 / 16;
+                                        }
+                                    }
+                                    if (oldLimit != -1) {
+                                        finalBuffer.limit(oldLimit);
+                                    }
+                                }
+                                recordQueue.postRunnable(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        recordBuffers.add(finalBuffer);
+                                    }
+                                });
+                            }
+                        });
+                    }
+                    recordQueue.postRunnable(recordRunnable);
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordProgressChanged, System.currentTimeMillis() - recordStartTime);
+                        }
+                    });
+                } else {
+                    recordBuffers.add(buffer);
+                    stopRecordingInternal(sendAfterDone);
+                }
+            }
+        }
+    };
+
+    private class InternalObserver extends ContentObserver {
+        public InternalObserver() {
+            super(null);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            super.onChange(selfChange);
+            processMediaObserver(MediaStore.Images.Media.INTERNAL_CONTENT_URI);
+        }
+    }
+
+    private class ExternalObserver extends ContentObserver {
+        public ExternalObserver() {
+            super(null);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            super.onChange(selfChange);
+            processMediaObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
+        }
+    }
+
     private ExternalObserver externalObserver = null;
     private InternalObserver internalObserver = null;
     private long lastSecretChatEnterTime = 0;
@@ -156,8 +317,47 @@
     private ArrayList<Long> lastSecretChatVisibleMessages = null;
     private int startObserverToken = 0;
     private StopMediaObserverRunnable stopMediaObserverRunnable = null;
+    private final class StopMediaObserverRunnable implements Runnable {
+        public int currentObserverToken = 0;
+
+        @Override
+        public void run() {
+            if (currentObserverToken == startObserverToken) {
+                try {
+                    if (internalObserver != null) {
+                        ApplicationLoader.applicationContext.getContentResolver().unregisterContentObserver(internalObserver);
+                        internalObserver = null;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                try {
+                    if (externalObserver != null) {
+                        ApplicationLoader.applicationContext.getContentResolver().unregisterContentObserver(externalObserver);
+                        externalObserver = null;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
     private String[] mediaProjections = null;
 
+    private static volatile MediaController Instance = null;
+    public static MediaController getInstance() {
+        MediaController localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (MediaController.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new MediaController();
+                }
+            }
+        }
+        return localInstance;
+    }
+
     public MediaController() {
         try {
             recordBufferSize = AudioRecord.getMinBufferSize(16000, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
@@ -213,7 +413,7 @@ public void onReceive(Context context, Intent intent) {
         }
 
         if (Build.VERSION.SDK_INT >= 16) {
-            mediaProjections = new String[]{
+            mediaProjections = new String[] {
                     MediaStore.Images.ImageColumns.DATA,
                     MediaStore.Images.ImageColumns.DISPLAY_NAME,
                     MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
@@ -222,430 +422,16 @@ public void onReceive(Context context, Intent intent) {
                     MediaStore.Images.ImageColumns.WIDTH,
                     MediaStore.Images.ImageColumns.HEIGHT
             };
-        } else {
-            mediaProjections = new String[]{
-                    MediaStore.Images.ImageColumns.DATA,
-                    MediaStore.Images.ImageColumns.DISPLAY_NAME,
-                    MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
-                    MediaStore.Images.ImageColumns.DATE_TAKEN,
-                    MediaStore.Images.ImageColumns.TITLE
-            };
-        }
-    }
-
-    public static MediaController getInstance() {
-        MediaController localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (MediaController.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new MediaController();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    public static void saveFile(String fullPath, Context context, final int type, final String name) {
-        if (fullPath == null) {
-            return;
-        }
-
-        File file = null;
-        if (fullPath != null && fullPath.length() != 0) {
-            file = new File(fullPath);
-            if (!file.exists()) {
-                file = null;
-            }
-        }
-
-        if (file == null) {
-            return;
-        }
-
-        final File sourceFile = file;
-        if (sourceFile.exists()) {
-            ProgressDialog progressDialog = null;
-            if (context != null) {
-                try {
-                    progressDialog = new ProgressDialog(context);
-                    progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-                    progressDialog.setCanceledOnTouchOutside(false);
-                    progressDialog.setCancelable(false);
-                    progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
-                    progressDialog.setMax(100);
-                    progressDialog.show();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-
-            final ProgressDialog finalProgress = progressDialog;
-
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        File destFile = null;
-                        if (type == 0) {
-                            destFile = Utilities.generatePicturePath();
-                        } else if (type == 1) {
-                            destFile = Utilities.generateVideoPath();
-                        } else if (type == 2) {
-                            File f = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
-                            destFile = new File(f, name);
-                        }
-
-                        if (!destFile.exists()) {
-                            destFile.createNewFile();
-                        }
-                        FileChannel source = null;
-                        FileChannel destination = null;
-                        boolean result = true;
-                        long lastProgress = System.currentTimeMillis() - 500;
-                        try {
-                            source = new FileInputStream(sourceFile).getChannel();
-                            destination = new FileOutputStream(destFile).getChannel();
-                            long size = source.size();
-                            for (long a = 0; a < size; a += 1024) {
-                                destination.transferFrom(source, a, Math.min(1024, size - a));
-                                if (finalProgress != null) {
-                                    if (lastProgress <= System.currentTimeMillis() - 500) {
-                                        lastProgress = System.currentTimeMillis();
-                                        final int progress = (int) ((float) a / (float) size * 100);
-                                        AndroidUtilities.runOnUIThread(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                try {
-                                                    finalProgress.setProgress(progress);
-                                                } catch (Exception e) {
-                                                    FileLog.e("tmessages", e);
-                                                }
-                                            }
-                                        });
-                                    }
-                                }
-                            }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                            result = false;
-                        } finally {
-                            if (source != null) {
-                                source.close();
-                            }
-                            if (destination != null) {
-                                destination.close();
-                            }
-                        }
-
-                        if (result && (type == 0 || type == 1)) {
-                            Utilities.addMediaToGallery(Uri.fromFile(destFile));
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    if (finalProgress != null) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                try {
-                                    finalProgress.dismiss();
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        });
-                    }
-                }
-            }).start();
-        }
-    }    private Runnable recordRunnable = new Runnable() {
-        @Override
-        public void run() {
-            if (audioRecorder != null) {
-                ByteBuffer buffer = null;
-                if (!recordBuffers.isEmpty()) {
-                    buffer = recordBuffers.get(0);
-                    recordBuffers.remove(0);
-                } else {
-                    buffer = ByteBuffer.allocateDirect(recordBufferSize);
-                }
-                buffer.rewind();
-                int len = audioRecorder.read(buffer, buffer.capacity());
-                if (len > 0) {
-                    buffer.limit(len);
-                    final ByteBuffer finalBuffer = buffer;
-                    final boolean flush = len != buffer.capacity();
-                    if (len != 0) {
-                        fileEncodingQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                while (finalBuffer.hasRemaining()) {
-                                    int oldLimit = -1;
-                                    if (finalBuffer.remaining() > fileBuffer.remaining()) {
-                                        oldLimit = finalBuffer.limit();
-                                        finalBuffer.limit(fileBuffer.remaining() + finalBuffer.position());
-                                    }
-                                    fileBuffer.put(finalBuffer);
-                                    if (fileBuffer.position() == fileBuffer.limit() || flush) {
-                                        if (writeFrame(fileBuffer, !flush ? fileBuffer.limit() : finalBuffer.position()) != 0) {
-                                            fileBuffer.rewind();
-                                            recordTimeCount += fileBuffer.limit() / 2 / 16;
-                                        }
-                                    }
-                                    if (oldLimit != -1) {
-                                        finalBuffer.limit(oldLimit);
-                                    }
-                                }
-                                recordQueue.postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        recordBuffers.add(finalBuffer);
-                                    }
-                                });
-                            }
-                        });
-                    }
-                    recordQueue.postRunnable(recordRunnable);
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordProgressChanged, System.currentTimeMillis() - recordStartTime);
-                        }
-                    });
-                } else {
-                    recordBuffers.add(buffer);
-                    stopRecordingInternal(sendAfterDone);
-                }
-            }
-        }
-    };
-
-    public static boolean isGif(Uri uri) {
-        ParcelFileDescriptor parcelFD = null;
-        FileInputStream input = null;
-        try {
-            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-            input = new FileInputStream(parcelFD.getFileDescriptor());
-            if (input.getChannel().size() > 3) {
-                byte[] header = new byte[3];
-                input.read(header, 0, 3);
-                String str = new String(header);
-                if (str != null && str.equalsIgnoreCase("gif")) {
-                    return true;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        } finally {
-            try {
-                if (parcelFD != null) {
-                    parcelFD.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (input != null) {
-                    input.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-        }
-        return false;
-    }
-
-    public static String copyDocumentToCache(Uri uri, String ext) {
-        ParcelFileDescriptor parcelFD = null;
-        FileInputStream input = null;
-        FileOutputStream output = null;
-        try {
-            int id = UserConfig.lastLocalId;
-            UserConfig.lastLocalId--;
-            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-            input = new FileInputStream(parcelFD.getFileDescriptor());
-            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), String.format(Locale.US, "%d.%s", id, ext));
-            output = new FileOutputStream(f);
-            input.getChannel().transferTo(0, input.getChannel().size(), output.getChannel());
-            UserConfig.saveConfig(false);
-            return f.getAbsolutePath();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        } finally {
-            try {
-                if (parcelFD != null) {
-                    parcelFD.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (input != null) {
-                    input.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (output != null) {
-                    output.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-        }
-        return null;
-    }
-
-    public static void loadGalleryPhotosAlbums(final int guid) {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                final ArrayList<AlbumEntry> albumsSorted = new ArrayList<AlbumEntry>();
-                HashMap<Integer, AlbumEntry> albums = new HashMap<Integer, AlbumEntry>();
-                AlbumEntry allPhotosAlbum = null;
-                String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
-                Integer cameraAlbumId = null;
-
-                Cursor cursor = null;
-                try {
-                    cursor = MediaStore.Images.Media.query(ApplicationLoader.applicationContext.getContentResolver(), MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projectionPhotos, "", null, MediaStore.Images.Media.DATE_TAKEN + " DESC");
-                    if (cursor != null) {
-                        int imageIdColumn = cursor.getColumnIndex(MediaStore.Images.Media._ID);
-                        int bucketIdColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_ID);
-                        int bucketNameColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_DISPLAY_NAME);
-                        int dataColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATA);
-                        int dateColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATE_TAKEN);
-                        int orientationColumn = cursor.getColumnIndex(MediaStore.Images.Media.ORIENTATION);
-
-                        while (cursor.moveToNext()) {
-                            int imageId = cursor.getInt(imageIdColumn);
-                            int bucketId = cursor.getInt(bucketIdColumn);
-                            String bucketName = cursor.getString(bucketNameColumn);
-                            String path = cursor.getString(dataColumn);
-                            long dateTaken = cursor.getLong(dateColumn);
-                            int orientation = cursor.getInt(orientationColumn);
-
-                            if (path == null || path.length() == 0) {
-                                continue;
-                            }
-
-                            PhotoEntry photoEntry = new PhotoEntry(bucketId, imageId, dateTaken, path, orientation);
-
-                            if (allPhotosAlbum == null) {
-                                allPhotosAlbum = new AlbumEntry(0, LocaleController.getString("AllPhotos", R.string.AllPhotos), photoEntry);
-                                albumsSorted.add(0, allPhotosAlbum);
-                            }
-                            if (allPhotosAlbum != null) {
-                                allPhotosAlbum.addPhoto(photoEntry);
-                            }
-
-                            AlbumEntry albumEntry = albums.get(bucketId);
-                            if (albumEntry == null) {
-                                albumEntry = new AlbumEntry(bucketId, bucketName, photoEntry);
-                                albums.put(bucketId, albumEntry);
-                                if (cameraAlbumId == null && cameraFolder != null && path != null && path.startsWith(cameraFolder)) {
-                                    albumsSorted.add(0, albumEntry);
-                                    cameraAlbumId = bucketId;
-                                } else {
-                                    albumsSorted.add(albumEntry);
-                                }
-                            }
-
-                            albumEntry.addPhoto(photoEntry);
-                        }
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (cursor != null) {
-                        try {
-                            cursor.close();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    }
-                }
-                final Integer cameraAlbumIdFinal = cameraAlbumId;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.albumsDidLoaded, guid, albumsSorted, cameraAlbumIdFinal);
-                    }
-                });
-            }
-        }).start();
-    }
-
-    public static MediaCodecInfo selectCodec(String mimeType) {
-        int numCodecs = MediaCodecList.getCodecCount();
-        MediaCodecInfo lastCodecInfo = null;
-        for (int i = 0; i < numCodecs; i++) {
-            MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);
-            if (!codecInfo.isEncoder()) {
-                continue;
-            }
-            String[] types = codecInfo.getSupportedTypes();
-            for (String type : types) {
-                if (type.equalsIgnoreCase(mimeType)) {
-                    lastCodecInfo = codecInfo;
-                    if (!lastCodecInfo.getName().equals("OMX.SEC.avc.enc")) {
-                        return lastCodecInfo;
-                    } else if (lastCodecInfo.getName().equals("OMX.SEC.AVC.Encoder")) {
-                        return lastCodecInfo;
-                    }
-                }
-            }
-        }
-        return lastCodecInfo;
-    }
-
-    private static boolean isRecognizedFormat(int colorFormat) {
-        switch (colorFormat) {
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:
-                return true;
-            default:
-                return false;
-        }
-    }
-
-    public static int selectColorFormat(MediaCodecInfo codecInfo, String mimeType) {
-        MediaCodecInfo.CodecCapabilities capabilities = codecInfo.getCapabilitiesForType(mimeType);
-        int lastColorFormat = 0;
-        for (int i = 0; i < capabilities.colorFormats.length; i++) {
-            int colorFormat = capabilities.colorFormats[i];
-            if (isRecognizedFormat(colorFormat)) {
-                lastColorFormat = colorFormat;
-                if (!(codecInfo.getName().equals("OMX.SEC.AVC.Encoder") && colorFormat == 19)) {
-                    return colorFormat;
-                }
-            }
-        }
-        return lastColorFormat;
-    }
-
-    private native int startRecord(String path);
-
-    private native int writeFrame(ByteBuffer frame, int len);
-
-    private native void stopRecord();
-
-    private native int openOpusFile(String path);
-
-    private native int seekOpusFile(float position);
-
-    private native int isOpusFile(String path);
-
-    private native void closeOpusFile();
-
-    private native void readOpusFile(ByteBuffer buffer, int capacity, int[] args);
-
-    private native long getTotalPcmDuration();
+        } else {
+            mediaProjections = new String[] {
+                    MediaStore.Images.ImageColumns.DATA,
+                    MediaStore.Images.ImageColumns.DISPLAY_NAME,
+                    MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
+                    MediaStore.Images.ImageColumns.DATE_TAKEN,
+                    MediaStore.Images.ImageColumns.TITLE
+            };
+        }
+    }
 
     private void startProgressTimer() {
         synchronized (progressTimerSync) {
@@ -761,7 +547,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : photoDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.PhotoSize) downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.PhotoSize)downloadObject.object);
             }
             photoDownloadQueue.clear();
         }
@@ -771,7 +557,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : audioDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Audio) downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.Audio)downloadObject.object);
             }
             audioDownloadQueue.clear();
         }
@@ -781,7 +567,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : documentDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Document) downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.Document)downloadObject.object);
             }
             documentDownloadQueue.clear();
         }
@@ -791,7 +577,7 @@ public void checkAutodownloadSettings() {
             }
         } else {
             for (DownloadObject downloadObject : videoDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Video) downloadObject.object);
+                FileLoader.getInstance().cancelLoadFile((TLRPC.Video)downloadObject.object);
             }
             videoDownloadQueue.clear();
         }
@@ -822,7 +608,7 @@ public boolean canDownloadMedia(int type) {
     private int getCurrentDownloadMask() {
         if (ConnectionsManager.isConnectedToWiFi()) {
             return wifiDownloadMask;
-        } else if (ConnectionsManager.isRoaming()) {
+        } else if(ConnectionsManager.isRoaming()) {
             return roamingDownloadMask;
         } else {
             return mobileDataDownloadMask;
@@ -851,13 +637,13 @@ protected void processDownloadObjects(int type, ArrayList<DownloadObject> object
 
             boolean added = true;
             if (downloadObject.object instanceof TLRPC.Audio) {
-                FileLoader.getInstance().loadFile((TLRPC.Audio) downloadObject.object, false);
+                FileLoader.getInstance().loadFile((TLRPC.Audio)downloadObject.object, false);
             } else if (downloadObject.object instanceof TLRPC.PhotoSize) {
-                FileLoader.getInstance().loadFile((TLRPC.PhotoSize) downloadObject.object, false);
+                FileLoader.getInstance().loadFile((TLRPC.PhotoSize)downloadObject.object, false);
             } else if (downloadObject.object instanceof TLRPC.Video) {
-                FileLoader.getInstance().loadFile((TLRPC.Video) downloadObject.object, false);
+                FileLoader.getInstance().loadFile((TLRPC.Video)downloadObject.object, false);
             } else if (downloadObject.object instanceof TLRPC.Document) {
-                FileLoader.getInstance().loadFile((TLRPC.Document) downloadObject.object, false);
+                FileLoader.getInstance().loadFile((TLRPC.Document)downloadObject.object, false);
             } else {
                 added = false;
             }
@@ -1095,7 +881,7 @@ private void processLaterArrays() {
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidFailedLoad) {
             listenerInProgress = true;
-            String fileName = (String) args[0];
+            String fileName = (String)args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
@@ -1108,10 +894,10 @@ public void didReceivedNotification(int id, Object... args) {
             }
             listenerInProgress = false;
             processLaterArrays();
-            checkDownloadFinished(fileName, (Integer) args[1]);
+            checkDownloadFinished(fileName, (Integer)args[1]);
         } else if (id == NotificationCenter.FileDidLoaded) {
             listenerInProgress = true;
-            String fileName = (String) args[0];
+            String fileName = (String)args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
@@ -1127,10 +913,10 @@ public void didReceivedNotification(int id, Object... args) {
             checkDownloadFinished(fileName, 0);
         } else if (id == NotificationCenter.FileLoadProgressChanged) {
             listenerInProgress = true;
-            String fileName = (String) args[0];
+            String fileName = (String)args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
-                Float progress = (Float) args[1];
+                Float progress = (Float)args[1];
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
                     if (reference.get() != null) {
                         reference.get().onProgressDownload(fileName, progress);
@@ -1141,11 +927,11 @@ public void didReceivedNotification(int id, Object... args) {
             processLaterArrays();
         } else if (id == NotificationCenter.FileUploadProgressChanged) {
             listenerInProgress = true;
-            String fileName = (String) args[0];
+            String fileName = (String)args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
-                Float progress = (Float) args[1];
-                Boolean enc = (Boolean) args[2];
+                Float progress = (Float)args[1];
+                Boolean enc = (Boolean)args[2];
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
                     if (reference.get() != null) {
                         reference.get().onProgressUpload(fileName, progress, enc);
@@ -1156,13 +942,13 @@ public void didReceivedNotification(int id, Object... args) {
             processLaterArrays();
         } else if (id == NotificationCenter.messagesDeleted) {
             if (playingMessageObject != null) {
-                ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+                ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
                 if (markAsDeletedMessages.contains(playingMessageObject.messageOwner.id)) {
                     clenupPlayer(false);
                 }
             }
         } else if (id == NotificationCenter.removeAllMessagesFromDialog) {
-            long did = (Long) args[0];
+            long did = (Long)args[0];
             if (playingMessageObject != null && playingMessageObject.getDialogId() == did) {
                 clenupPlayer(false);
             }
@@ -1485,7 +1271,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                 @Override
                 public void run() {
                     if (playingMessageObject != null && playingMessageObject.audioProgress != 0) {
-                        lastPlayPcm = (long) (currentTotalPcmDuration * playingMessageObject.audioProgress);
+                        lastPlayPcm = (long)(currentTotalPcmDuration * playingMessageObject.audioProgress);
                         seekOpusFile(playingMessageObject.audioProgress);
                     }
                     synchronized (playerSync) {
@@ -1735,6 +1521,121 @@ public void run() {
         });
     }
 
+    public static void saveFile(String fullPath, Context context, final int type, final String name) {
+        if (fullPath == null) {
+            return;
+        }
+
+        File file = null;
+        if (fullPath != null && fullPath.length() != 0) {
+            file = new File(fullPath);
+            if (!file.exists()) {
+                file = null;
+            }
+        }
+
+        if (file == null) {
+            return;
+        }
+
+        final File sourceFile = file;
+        if (sourceFile.exists()) {
+            ProgressDialog progressDialog = null;
+            if (context != null) {
+                try {
+                    progressDialog = new ProgressDialog(context);
+                    progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+                    progressDialog.setCanceledOnTouchOutside(false);
+                    progressDialog.setCancelable(false);
+                    progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+                    progressDialog.setMax(100);
+                    progressDialog.show();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+
+            final ProgressDialog finalProgress = progressDialog;
+
+            new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        File destFile = null;
+                        if (type == 0) {
+                            destFile = Utilities.generatePicturePath();
+                        } else if (type == 1) {
+                            destFile = Utilities.generateVideoPath();
+                        } else if (type == 2) {
+                            File f = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
+                            destFile = new File(f, name);
+                        }
+
+                        if(!destFile.exists()) {
+                            destFile.createNewFile();
+                        }
+                        FileChannel source = null;
+                        FileChannel destination = null;
+                        boolean result = true;
+                        long lastProgress = System.currentTimeMillis() - 500;
+                        try {
+                            source = new FileInputStream(sourceFile).getChannel();
+                            destination = new FileOutputStream(destFile).getChannel();
+                            long size = source.size();
+                            for (long a = 0; a < size; a += 1024) {
+                                destination.transferFrom(source, a, Math.min(1024, size - a));
+                                if (finalProgress != null) {
+                                    if (lastProgress <= System.currentTimeMillis() - 500) {
+                                        lastProgress = System.currentTimeMillis();
+                                        final int progress = (int) ((float) a / (float) size * 100);
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                try {
+                                                    finalProgress.setProgress(progress);
+                                                } catch (Exception e) {
+                                                    FileLog.e("tmessages", e);
+                                                }
+                                            }
+                                        });
+                                    }
+                                }
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                            result = false;
+                        } finally {
+                            if(source != null) {
+                                source.close();
+                            }
+                            if(destination != null) {
+                                destination.close();
+                            }
+                        }
+
+                        if (result && (type == 0 || type == 1)) {
+                            Utilities.addMediaToGallery(Uri.fromFile(destFile));
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    if (finalProgress != null) {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                try {
+                                    finalProgress.dismiss();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        });
+                    }
+                }
+            }).start();
+        }
+    }
+
     public GifDrawable getGifDrawable(ChatMediaCell cell, boolean create) {
         if (cell == null) {
             return null;
@@ -1805,6 +1706,83 @@ public void clearGifDrawable(ChatMediaCell cell) {
         }
     }
 
+    public static boolean isGif(Uri uri) {
+        ParcelFileDescriptor parcelFD = null;
+        FileInputStream input = null;
+        try {
+            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
+            input = new FileInputStream(parcelFD.getFileDescriptor());
+            if (input.getChannel().size() > 3) {
+                byte[] header = new byte[3];
+                input.read(header, 0, 3);
+                String str = new String(header);
+                if (str != null && str.equalsIgnoreCase("gif")) {
+                    return true;
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        } finally {
+            try {
+                if (parcelFD != null) {
+                    parcelFD.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+            try {
+                if (input != null) {
+                    input.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+        }
+        return false;
+    }
+
+    public static String copyDocumentToCache(Uri uri, String ext) {
+        ParcelFileDescriptor parcelFD = null;
+        FileInputStream input = null;
+        FileOutputStream output = null;
+        try {
+            int id = UserConfig.lastLocalId;
+            UserConfig.lastLocalId--;
+            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
+            input = new FileInputStream(parcelFD.getFileDescriptor());
+            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), String.format(Locale.US, "%d.%s", id, ext));
+            output = new FileOutputStream(f);
+            input.getChannel().transferTo(0, input.getChannel().size(), output.getChannel());
+            UserConfig.saveConfig(false);
+            return f.getAbsolutePath();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        } finally {
+            try {
+                if (parcelFD != null) {
+                    parcelFD.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+            try {
+                if (input != null) {
+                    input.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+            try {
+                if (output != null) {
+                    output.close();
+                }
+            } catch (Exception e2) {
+                FileLog.e("tmessages", e2);
+            }
+        }
+        return null;
+    }
+
     public void toggleSaveToGallery() {
         saveToGallery = !saveToGallery;
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -1837,13 +1815,93 @@ public void checkSaveToGalleryFiles() {
                     new File(videoPath, ".nomedia").createNewFile();
                 }
             }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public boolean canSaveToGallery() {
-        return saveToGallery;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public boolean canSaveToGallery() {
+        return saveToGallery;
+    }
+
+    public static void loadGalleryPhotosAlbums(final int guid) {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                final ArrayList<AlbumEntry> albumsSorted = new ArrayList<AlbumEntry>();
+                HashMap<Integer, AlbumEntry> albums = new HashMap<Integer, AlbumEntry>();
+                AlbumEntry allPhotosAlbum = null;
+                String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
+                Integer cameraAlbumId = null;
+
+                Cursor cursor = null;
+                try {
+                    cursor = MediaStore.Images.Media.query(ApplicationLoader.applicationContext.getContentResolver(), MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projectionPhotos, "", null, MediaStore.Images.Media.DATE_TAKEN + " DESC");
+                    if (cursor != null) {
+                        int imageIdColumn = cursor.getColumnIndex(MediaStore.Images.Media._ID);
+                        int bucketIdColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_ID);
+                        int bucketNameColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_DISPLAY_NAME);
+                        int dataColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATA);
+                        int dateColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATE_TAKEN);
+                        int orientationColumn = cursor.getColumnIndex(MediaStore.Images.Media.ORIENTATION);
+
+                        while (cursor.moveToNext()) {
+                            int imageId = cursor.getInt(imageIdColumn);
+                            int bucketId = cursor.getInt(bucketIdColumn);
+                            String bucketName = cursor.getString(bucketNameColumn);
+                            String path = cursor.getString(dataColumn);
+                            long dateTaken = cursor.getLong(dateColumn);
+                            int orientation = cursor.getInt(orientationColumn);
+
+                            if (path == null || path.length() == 0) {
+                                continue;
+                            }
+
+                            PhotoEntry photoEntry = new PhotoEntry(bucketId, imageId, dateTaken, path, orientation);
+
+                            if (allPhotosAlbum == null) {
+                                allPhotosAlbum = new AlbumEntry(0, LocaleController.getString("AllPhotos", R.string.AllPhotos), photoEntry);
+                                albumsSorted.add(0, allPhotosAlbum);
+                            }
+                            if (allPhotosAlbum != null) {
+                                allPhotosAlbum.addPhoto(photoEntry);
+                            }
+
+                            AlbumEntry albumEntry = albums.get(bucketId);
+                            if (albumEntry == null) {
+                                albumEntry = new AlbumEntry(bucketId, bucketName, photoEntry);
+                                albums.put(bucketId, albumEntry);
+                                if (cameraAlbumId == null && cameraFolder != null && path != null && path.startsWith(cameraFolder)) {
+                                    albumsSorted.add(0, albumEntry);
+                                    cameraAlbumId = bucketId;
+                                } else {
+                                    albumsSorted.add(albumEntry);
+                                }
+                            }
+
+                            albumEntry.addPhoto(photoEntry);
+                        }
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                } finally {
+                    if (cursor != null) {
+                        try {
+                            cursor.close();
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                }
+                final Integer cameraAlbumIdFinal = cameraAlbumId;
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.albumsDidLoaded, guid, albumsSorted, cameraAlbumIdFinal);
+                    }
+                });
+            }
+        }).start();
     }
 
     public void scheduleVideoConvert(MessageObject messageObject) {
@@ -1883,6 +1941,57 @@ private void startVideoConvertFromQueue() {
         }
     }
 
+    public static MediaCodecInfo selectCodec(String mimeType) {
+        int numCodecs = MediaCodecList.getCodecCount();
+        MediaCodecInfo lastCodecInfo = null;
+        for (int i = 0; i < numCodecs; i++) {
+            MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);
+            if (!codecInfo.isEncoder()) {
+                continue;
+            }
+            String[] types = codecInfo.getSupportedTypes();
+            for (String type : types) {
+                if (type.equalsIgnoreCase(mimeType)) {
+                    lastCodecInfo = codecInfo;
+                    if (!lastCodecInfo.getName().equals("OMX.SEC.avc.enc")) {
+                        return lastCodecInfo;
+                    } else if (lastCodecInfo.getName().equals("OMX.SEC.AVC.Encoder")) {
+                        return lastCodecInfo;
+                    }
+                }
+            }
+        }
+        return lastCodecInfo;
+    }
+
+    private static boolean isRecognizedFormat(int colorFormat) {
+        switch (colorFormat) {
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:
+            case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:
+                return true;
+            default:
+                return false;
+        }
+    }
+
+    public static int selectColorFormat(MediaCodecInfo codecInfo, String mimeType) {
+        MediaCodecInfo.CodecCapabilities capabilities = codecInfo.getCapabilitiesForType(mimeType);
+        int lastColorFormat = 0;
+        for (int i = 0; i < capabilities.colorFormats.length; i++) {
+            int colorFormat = capabilities.colorFormats[i];
+            if (isRecognizedFormat(colorFormat)) {
+                lastColorFormat = colorFormat;
+                if (!(codecInfo.getName().equals("OMX.SEC.AVC.Encoder") && colorFormat == 19)) {
+                    return colorFormat;
+                }
+            }
+        }
+        return lastColorFormat;
+    }
+
     @TargetApi(16)
     private int selectTrack(MediaExtractor extractor, boolean audio) {
         int numTracks = extractor.getTrackCount();
@@ -1989,6 +2098,36 @@ private long readAndWriteTrack(final MessageObject messageObject, MediaExtractor
         return -1;
     }
 
+    private static class VideoConvertRunnable implements Runnable {
+
+        private MessageObject messageObject;
+
+        private VideoConvertRunnable(MessageObject message) {
+            messageObject = message;
+        }
+
+        @Override
+        public void run() {
+            MediaController.getInstance().convertVideo(messageObject);
+        }
+
+        public static void runConversion(final MessageObject obj) {
+            new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        VideoConvertRunnable wrapper = new VideoConvertRunnable(obj);
+                        Thread th = new Thread(wrapper, "VideoConvertRunnable");
+                        th.start();
+                        th.join();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            }).start();
+        }
+    }
+
     private void checkConversionCanceled() throws Exception {
         boolean cancelConversion = false;
         synchronized (videoConvertSync) {
@@ -2424,143 +2563,4 @@ private boolean convertVideo(final MessageObject messageObject) {
         didWriteData(messageObject, cacheFile, true, error);
         return true;
     }
-
-    public static interface FileDownloadProgressListener {
-        public void onFailedDownload(String fileName);
-
-        public void onSuccessDownload(String fileName);
-
-        public void onProgressDownload(String fileName, float progress);
-
-        public void onProgressUpload(String fileName, float progress, boolean isEncrypted);
-
-        public int getObserverTag();
-    }
-
-    public static class AlbumEntry {
-        public int bucketId;
-        public String bucketName;
-        public PhotoEntry coverPhoto;
-        public ArrayList<PhotoEntry> photos = new ArrayList<PhotoEntry>();
-
-        public AlbumEntry(int bucketId, String bucketName, PhotoEntry coverPhoto) {
-            this.bucketId = bucketId;
-            this.bucketName = bucketName;
-            this.coverPhoto = coverPhoto;
-        }
-
-        public void addPhoto(PhotoEntry photoEntry) {
-            photos.add(photoEntry);
-        }
-    }
-
-    public static class PhotoEntry {
-        public int bucketId;
-        public int imageId;
-        public long dateTaken;
-        public String path;
-        public int orientation;
-
-        public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int orientation) {
-            this.bucketId = bucketId;
-            this.imageId = imageId;
-            this.dateTaken = dateTaken;
-            this.path = path;
-            this.orientation = orientation;
-        }
-    }
-
-    private static class VideoConvertRunnable implements Runnable {
-
-        private MessageObject messageObject;
-
-        private VideoConvertRunnable(MessageObject message) {
-            messageObject = message;
-        }
-
-        public static void runConversion(final MessageObject obj) {
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        VideoConvertRunnable wrapper = new VideoConvertRunnable(obj);
-                        Thread th = new Thread(wrapper, "VideoConvertRunnable");
-                        th.start();
-                        th.join();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            }).start();
-        }
-
-        @Override
-        public void run() {
-            MediaController.getInstance().convertVideo(messageObject);
-        }
-    }
-
-    private class AudioBuffer {
-        ByteBuffer buffer;
-        byte[] bufferBytes;
-        int size;
-        int finished;
-        long pcmOffset;
-        public AudioBuffer(int capacity) {
-            buffer = ByteBuffer.allocateDirect(capacity);
-            bufferBytes = new byte[capacity];
-        }
-    }
-
-    private class InternalObserver extends ContentObserver {
-        public InternalObserver() {
-            super(null);
-        }
-
-        @Override
-        public void onChange(boolean selfChange) {
-            super.onChange(selfChange);
-            processMediaObserver(MediaStore.Images.Media.INTERNAL_CONTENT_URI);
-        }
-    }
-
-    private class ExternalObserver extends ContentObserver {
-        public ExternalObserver() {
-            super(null);
-        }
-
-        @Override
-        public void onChange(boolean selfChange) {
-            super.onChange(selfChange);
-            processMediaObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-        }
-    }
-
-    private final class StopMediaObserverRunnable implements Runnable {
-        public int currentObserverToken = 0;
-
-        @Override
-        public void run() {
-            if (currentObserverToken == startObserverToken) {
-                try {
-                    if (internalObserver != null) {
-                        ApplicationLoader.applicationContext.getContentResolver().unregisterContentObserver(internalObserver);
-                        internalObserver = null;
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                try {
-                    if (externalObserver != null) {
-                        ApplicationLoader.applicationContext.getContentResolver().unregisterContentObserver(externalObserver);
-                        externalObserver = null;
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        }
-    }
-
-
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 8da523a83..096948796 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -19,11 +19,11 @@
 import android.text.TextUtils;
 import android.text.util.Linkify;
 
-import org.telegram.R;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
+import org.telegram.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.URLSpanNoUnderline;
 
@@ -37,8 +37,7 @@
     public static final int MESSAGE_SEND_STATE_SENDING = 1;
     public static final int MESSAGE_SEND_STATE_SENT = 0;
     public static final int MESSAGE_SEND_STATE_SEND_ERROR = 2;
-    private static final int LINES_PER_BLOCK = 10;
-    private static TextPaint textPaint;
+
     public TLRPC.Message messageOwner;
     public CharSequence messageText;
     public int type;
@@ -49,10 +48,22 @@
     public boolean deleted = false;
     public float audioProgress;
     public int audioProgressSec;
+
+    private static TextPaint textPaint;
     public int lastLineWidth;
     public int textWidth;
     public int textHeight;
     public int blockHeight = Integer.MAX_VALUE;
+
+    public static class TextLayoutBlock {
+        public StaticLayout textLayout;
+        public float textXOffset = 0;
+        public float textYOffset = 0;
+        public int charactersOffset = 0;
+    }
+
+    private static final int LINES_PER_BLOCK = 10;
+
     public ArrayList<TextLayoutBlock> textLayoutBlocks;
 
     public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users) {
@@ -194,7 +205,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                    String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long) message.date) * 1000), LocaleController.formatterDay.format(((long) message.date) * 1000));
+                    String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long)message.date) * 1000), LocaleController.formatterDay.format(((long)message.date) * 1000));
                     TLRPC.User to_user = UserConfig.getCurrentUser();
                     if (to_user == null) {
                         if (users != null) {
@@ -328,7 +339,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         }
 
         Calendar rightNow = new GregorianCalendar();
-        rightNow.setTimeInMillis((long) (messageOwner.date) * 1000);
+        rightNow.setTimeInMillis((long)(messageOwner.date) * 1000);
         int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
         int dateYear = rightNow.get(Calendar.YEAR);
         int dateMonth = rightNow.get(Calendar.MONTH);
@@ -340,22 +351,6 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         generateThumbs(false, preview);
     }
 
-    public static void setIsUnread(TLRPC.Message message, boolean unread) {
-        if (unread) {
-            message.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
-        } else {
-            message.flags &= ~TLRPC.MESSAGE_FLAG_UNREAD;
-        }
-    }
-
-    public static boolean isUnread(TLRPC.Message message) {
-        return (message.flags & TLRPC.MESSAGE_FLAG_UNREAD) != 0;
-    }
-
-    public static boolean isOut(TLRPC.Message message) {
-        return (message.flags & TLRPC.MESSAGE_FLAG_OUT) != 0;
-    }
-
     public CharSequence replaceWithLink(CharSequence source, String param, TLRPC.User user) {
         String name = ContactsController.formatName(user.first_name, user.last_name);
         int start = TextUtils.indexOf(source, param);
@@ -423,8 +418,7 @@ public void generateThumbs(boolean update, int preview) {
                     PhotoObject photoObject = photoThumbs.get(0);
                     photoObject.photoOwner.location = messageOwner.media.video.thumb.location;
                 }
-            }
-            if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+            } if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
                 if (!(messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
                     if (!update) {
                         photoThumbs = new ArrayList<PhotoObject>();
@@ -554,7 +548,7 @@ private void generateLayout() {
         textHeight = textLayout.getHeight();
         int linesCount = textLayout.getLineCount();
 
-        int blocksCount = (int) Math.ceil((float) linesCount / LINES_PER_BLOCK);
+        int blocksCount = (int)Math.ceil((float)linesCount / LINES_PER_BLOCK);
         int linesOffset = 0;
         float prevOffset = 0;
 
@@ -579,7 +573,7 @@ private void generateLayout() {
                     block.textLayout = new StaticLayout(str, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                     block.textYOffset = textLayout.getLineTop(linesOffset);
                     if (a != 0) {
-                        blockHeight = Math.min(blockHeight, (int) (block.textYOffset - prevOffset));
+                        blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
                     }
                     prevOffset = block.textYOffset;
                     /*if (a != blocksCount - 1) {
@@ -611,7 +605,7 @@ private void generateLayout() {
                 FileLog.e("tmessages", e);
             }
 
-            int linesMaxWidth = (int) Math.ceil(lastLine);
+            int linesMaxWidth = (int)Math.ceil(lastLine);
             int lastLineWidthWithLeft;
             int linesMaxWidthWithLeft;
             boolean hasNonRTL = false;
@@ -620,7 +614,7 @@ private void generateLayout() {
                 lastLineWidth = linesMaxWidth;
             }
 
-            linesMaxWidthWithLeft = lastLineWidthWithLeft = (int) Math.ceil(lastLine + lastLeft);
+            linesMaxWidthWithLeft = lastLineWidthWithLeft = (int)Math.ceil(lastLine + lastLeft);
             if (lastLeft == 0) {
                 hasNonRTL = true;
             }
@@ -653,8 +647,8 @@ private void generateLayout() {
                     }
                     textRealMaxWidth = Math.max(textRealMaxWidth, lineWidth);
                     textRealMaxWidthWithLeft = Math.max(textRealMaxWidthWithLeft, lineWidth + lineLeft);
-                    linesMaxWidth = Math.max(linesMaxWidth, (int) Math.ceil(lineWidth));
-                    linesMaxWidthWithLeft = Math.max(linesMaxWidthWithLeft, (int) Math.ceil(lineWidth + lineLeft));
+                    linesMaxWidth = Math.max(linesMaxWidth, (int)Math.ceil(lineWidth));
+                    linesMaxWidthWithLeft = Math.max(linesMaxWidthWithLeft, (int)Math.ceil(lineWidth + lineLeft));
                 }
                 if (hasNonRTL) {
                     textRealMaxWidth = textRealMaxWidthWithLeft;
@@ -665,7 +659,7 @@ private void generateLayout() {
                 } else if (a == blocksCount - 1) {
                     lastLineWidth = linesMaxWidth;
                 }
-                textWidth = Math.max(textWidth, (int) Math.ceil(textRealMaxWidth));
+                textWidth = Math.max(textWidth, (int)Math.ceil(textRealMaxWidth));
             } else {
                 textWidth = Math.max(textWidth, Math.min(maxWidth, linesMaxWidth));
             }
@@ -694,7 +688,7 @@ public boolean isUnread() {
     }
 
     public void setIsRead() {
-        messageOwner.flags &= ~TLRPC.MESSAGE_FLAG_UNREAD;
+        messageOwner.flags &=~ TLRPC.MESSAGE_FLAG_UNREAD;
     }
 
     public boolean isSecretPhoto() {
@@ -704,8 +698,24 @@ public boolean isSecretPhoto() {
     public boolean isSecretMedia() {
         return messageOwner instanceof TLRPC.TL_message_secret &&
                 (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60 ||
-                        messageOwner.media instanceof TLRPC.TL_messageMediaAudio ||
-                        messageOwner.media instanceof TLRPC.TL_messageMediaVideo);
+                messageOwner.media instanceof TLRPC.TL_messageMediaAudio ||
+                messageOwner.media instanceof TLRPC.TL_messageMediaVideo);
+    }
+
+    public static void setIsUnread(TLRPC.Message message, boolean unread) {
+        if (unread) {
+            message.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
+        } else {
+            message.flags &=~ TLRPC.MESSAGE_FLAG_UNREAD;
+        }
+    }
+
+    public static boolean isUnread(TLRPC.Message message) {
+        return (message.flags & TLRPC.MESSAGE_FLAG_UNREAD) != 0;
+    }
+
+    public static boolean isOut(TLRPC.Message message) {
+        return (message.flags & TLRPC.MESSAGE_FLAG_OUT) != 0;
     }
 
     public long getDialogId() {
@@ -750,11 +760,4 @@ public String getSecretTimeString() {
         }
         return str;
     }
-
-    public static class TextLayoutBlock {
-        public StaticLayout textLayout;
-        public float textXOffset = 0;
-        public float textYOffset = 0;
-        public int charactersOffset = 0;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 10a5c6491..a9ab93f33 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -15,16 +15,16 @@
 import android.text.Html;
 import android.util.SparseArray;
 
-import org.telegram.R;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -36,19 +36,10 @@
 
 public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
 
-    public static final int UPDATE_MASK_NAME = 1;
-    public static final int UPDATE_MASK_AVATAR = 2;
-    public static final int UPDATE_MASK_STATUS = 4;
-    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
-    public static final int UPDATE_MASK_CHAT_NAME = 16;
-    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
-    public static final int UPDATE_MASK_USER_PRINT = 64;
-    public static final int UPDATE_MASK_USER_PHONE = 128;
-    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
-    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
-    public static final int UPDATE_MASK_PHONE = 1024;
-    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
-    private static volatile MessagesController Instance = null;
+    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<Integer, TLRPC.Chat>(100, 1.0f, 2);
+    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<Integer, TLRPC.EncryptedChat>(10, 1.0f, 2);
+    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<Integer, TLRPC.User>(100, 1.0f, 2);
+
     public ArrayList<TLRPC.TL_dialog> dialogs = new ArrayList<TLRPC.TL_dialog>();
     public ArrayList<TLRPC.TL_dialog> dialogsServerOnly = new ArrayList<TLRPC.TL_dialog>();
     public ConcurrentHashMap<Long, TLRPC.TL_dialog> dialogs_dict = new ConcurrentHashMap<Long, TLRPC.TL_dialog>(100, 1.0f, 2);
@@ -57,58 +48,66 @@
     public HashMap<Long, CharSequence> printingStrings = new HashMap<Long, CharSequence>();
     public HashMap<Long, Boolean> sendingTypings = new HashMap<Long, Boolean>();
     public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<Integer, Integer>(20, 1.0f, 2);
+    private int lastPrintingStringCount = 0;
+
     public boolean loadingBlockedUsers = false;
     public ArrayList<Integer> blockedUsers = new ArrayList<Integer>();
-    public int totalDialogsCount = 0;
-    public boolean loadingDialogs = false;
-    public boolean dialogsEndReached = false;
-    public boolean gettingDifference = false;
-    public boolean gettingDifferenceAgain = false;
-    public boolean updatingState = false;
-    public boolean firstGettingTask = false;
-    public boolean registeringForPush = false;
-    public boolean enableJoined = true;
-    public int fontSize = AndroidUtilities.dp(16);
-    public int maxGroupCount = 200;
-    public int maxBroadcastCount = 100;
-    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<Integer, TLRPC.Chat>(100, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<Integer, TLRPC.EncryptedChat>(10, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<Integer, TLRPC.User>(100, 1.0f, 2);
-    private int lastPrintingStringCount = 0;
+
     private ArrayList<TLRPC.Updates> updatesQueue = new ArrayList<TLRPC.Updates>();
     private long updatesStartWaitTime = 0;
     private ArrayList<Integer> loadingFullUsers = new ArrayList<Integer>();
     private ArrayList<Integer> loadedFullUsers = new ArrayList<Integer>();
     private ArrayList<Integer> loadingFullChats = new ArrayList<Integer>();
     private ArrayList<Integer> loadedFullChats = new ArrayList<Integer>();
+
     private boolean gettingNewDeleteTask = false;
     private int currentDeletingTaskTime = 0;
     private ArrayList<Integer> currentDeletingTaskMids = null;
     private Runnable currentDeleteTaskRunnable = null;
+
+    public int totalDialogsCount = 0;
+    public boolean loadingDialogs = false;
+    public boolean dialogsEndReached = false;
+    public boolean gettingDifference = false;
+    public boolean gettingDifferenceAgain = false;
+    public boolean updatingState = false;
+    public boolean firstGettingTask = false;
+    public boolean registeringForPush = false;
+
     private long lastStatusUpdateTime = 0;
     private long statusRequest = 0;
     private int statusSettingState = 0;
     private boolean offlineSent = false;
     private String uploadingAvatar = null;
 
-    public MessagesController() {
-        ImageLoader.getInstance();
-        MessagesStorage.getInstance();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
-        addSupportUser();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        enableJoined = preferences.getBoolean("EnableContactJoined", true);
+    public boolean enableJoined = true;
+    public int fontSize = AndroidUtilities.dp(16);
+    public int maxGroupCount = 200;
+    public int maxBroadcastCount = 100;
 
-        preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        maxGroupCount = preferences.getInt("maxGroupCount", 200);
-        maxBroadcastCount = preferences.getInt("maxBroadcastCount", 100);
-        fontSize = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
+    private class UserActionUpdates extends TLRPC.Updates {
+
+    }
+
+    public static final int UPDATE_MASK_NAME = 1;
+    public static final int UPDATE_MASK_AVATAR = 2;
+    public static final int UPDATE_MASK_STATUS = 4;
+    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
+    public static final int UPDATE_MASK_CHAT_NAME = 16;
+    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
+    public static final int UPDATE_MASK_USER_PRINT = 64;
+    public static final int UPDATE_MASK_USER_PHONE = 128;
+    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
+    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
+    public static final int UPDATE_MASK_PHONE = 1024;
+    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
+
+    public static class PrintingUser {
+        public long lastTime;
+        public int userId;
     }
 
+    private static volatile MessagesController Instance = null;
     public static MessagesController getInstance() {
         MessagesController localInstance = Instance;
         if (localInstance == null) {
@@ -122,22 +121,22 @@ public static MessagesController getInstance() {
         return localInstance;
     }
 
-    public static TLRPC.InputUser getInputUser(TLRPC.User user) {
-        if (user == null) {
-            return null;
-        }
-        TLRPC.InputUser inputUser = null;
-        if (user.id == UserConfig.getClientUserId()) {
-            inputUser = new TLRPC.TL_inputUserSelf();
-        } else if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-            inputUser = new TLRPC.TL_inputUserForeign();
-            inputUser.user_id = user.id;
-            inputUser.access_hash = user.access_hash;
-        } else {
-            inputUser = new TLRPC.TL_inputUserContact();
-            inputUser.user_id = user.id;
-        }
-        return inputUser;
+    public MessagesController() {
+        ImageLoader.getInstance();
+        MessagesStorage.getInstance();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        addSupportUser();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        enableJoined = preferences.getBoolean("EnableContactJoined", true);
+
+        preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        maxGroupCount = preferences.getInt("maxGroupCount", 200);
+        maxBroadcastCount = preferences.getInt("maxBroadcastCount", 100);
+        fontSize = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
     }
 
     public void updateConfig(final TLRPC.TL_config config) {
@@ -175,6 +174,24 @@ public void addSupportUser() {
         putUser(user, true);
     }
 
+    public static TLRPC.InputUser getInputUser(TLRPC.User user) {
+        if (user == null) {
+            return null;
+        }
+        TLRPC.InputUser inputUser = null;
+        if (user.id == UserConfig.getClientUserId()) {
+            inputUser = new TLRPC.TL_inputUserSelf();
+        } else if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+            inputUser = new TLRPC.TL_inputUserForeign();
+            inputUser.user_id = user.id;
+            inputUser.access_hash = user.access_hash;
+        } else {
+            inputUser = new TLRPC.TL_inputUserContact();
+            inputUser.user_id = user.id;
+        }
+        return inputUser;
+    }
+
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidUpload) {
@@ -3584,13 +3601,4 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
             }
         }
     }
-
-    public static class PrintingUser {
-        public long lastTime;
-        public int userId;
-    }
-
-    private class UserActionUpdates extends TLRPC.Updates {
-
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 68d9805bd..2199f5c44 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -17,7 +17,6 @@
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuffersStorage;
 import org.telegram.messenger.ByteBufferDesc;
 import org.telegram.messenger.ConnectionsManager;
@@ -29,6 +28,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -40,6 +40,10 @@
 import java.util.concurrent.Semaphore;
 
 public class MessagesStorage {
+    private DispatchQueue storageQueue = new DispatchQueue("storageQueue");
+    private SQLiteDatabase database;
+    private File cacheFile;
+    private BuffersStorage buffersStorage = new BuffersStorage(false);
     public static int lastDateValue = 0;
     public static int lastPtsValue = 0;
     public static int lastQtsValue = 0;
@@ -47,21 +51,13 @@
     public static int lastSecretVersion = 0;
     public static byte[] secretPBytes = null;
     public static int secretG = 0;
-    private static volatile MessagesStorage Instance = null;
-    private DispatchQueue storageQueue = new DispatchQueue("storageQueue");
-    private SQLiteDatabase database;
-    private File cacheFile;
-    private BuffersStorage buffersStorage = new BuffersStorage(false);
+
     private int lastSavedSeq = 0;
     private int lastSavedPts = 0;
     private int lastSavedDate = 0;
     private int lastSavedQts = 0;
 
-    public MessagesStorage() {
-        storageQueue.setPriority(Thread.MAX_PRIORITY);
-        openDatabase();
-    }
-
+    private static volatile MessagesStorage Instance = null;
     public static MessagesStorage getInstance() {
         MessagesStorage localInstance = Instance;
         if (localInstance == null) {
@@ -75,6 +71,11 @@ public static MessagesStorage getInstance() {
         return localInstance;
     }
 
+    public MessagesStorage() {
+        storageQueue.setPriority(Thread.MAX_PRIORITY);
+        openDatabase();
+    }
+
     public SQLiteDatabase getDatabase() {
         return database;
     }
@@ -480,15 +481,15 @@ public void run() {
                         while (cursor.next()) {
                             ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
                             if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                                TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                                TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                                 MessageObject.setIsUnread(message, cursor.intValue(0) != 1);
                                 message.id = cursor.intValue(3);
                                 message.date = cursor.intValue(4);
                                 message.dialog_id = cursor.longValue(5);
                                 messages.add(message);
 
-                                int lower_id = (int) message.dialog_id;
-                                int high_id = (int) (message.dialog_id >> 32);
+                                int lower_id = (int)message.dialog_id;
+                                int high_id = (int)(message.dialog_id >> 32);
 
                                 if (lower_id != 0) {
                                     if (lower_id < 0) {
@@ -690,8 +691,8 @@ public void run() {
                     if (!messagesOnly) {
                         database.executeFast("DELETE FROM dialogs WHERE did = " + did).stepThis().dispose();
                         database.executeFast("DELETE FROM chat_settings WHERE uid = " + did).stepThis().dispose();
-                        int lower_id = (int) did;
-                        int high_id = (int) (did >> 32);
+                        int lower_id = (int)did;
+                        int high_id = (int)(did >> 32);
                         if (lower_id != 0) {
                             if (high_id == 1) {
                                 database.executeFast("DELETE FROM chats WHERE uid = " + lower_id).stepThis().dispose();
@@ -732,7 +733,7 @@ public void run() {
                     while (cursor.next()) {
                         ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                         if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            TLRPC.Photo photo = (TLRPC.Photo) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            TLRPC.Photo photo = (TLRPC.Photo)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                             res.photos.add(photo);
                         }
                         buffersStorage.reuseFreeBuffer(data);
@@ -1023,7 +1024,7 @@ public void run() {
                     if (cursor.next()) {
                         ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                         if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            info = (TLRPC.ChatParticipants) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            info = (TLRPC.ChatParticipants)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                         }
                         buffersStorage.reuseFreeBuffer(data);
                     }
@@ -1086,7 +1087,7 @@ public void run() {
                     if (cursor.next()) {
                         ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                         if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            info = (TLRPC.ChatParticipants) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            info = (TLRPC.ChatParticipants)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                         }
                         buffersStorage.reuseFreeBuffer(data);
                     }
@@ -1148,7 +1149,7 @@ public void run() {
                         state.step();
                         state.dispose();*/
 
-                        int lower_id = (int) dialog_id;
+                        int lower_id = (int)dialog_id;
 
                         if (lower_id != 0) {
                             state = database.executeFast("UPDATE messages SET read_state = 1 WHERE uid = ? AND mid <= ? AND read_state = 0 AND out = 0");
@@ -1391,7 +1392,7 @@ public void run() {
                         count = cursor.intValue(0);
                     }
                     cursor.dispose();
-                    int lower_part = (int) uid;
+                    int lower_part = (int)uid;
                     if (count == -1 && lower_part == 0) {
                         cursor = database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM media WHERE uid = %d LIMIT 1", uid));
                         if (cursor.next()) {
@@ -1421,7 +1422,7 @@ public void run() {
 
                     SQLiteCursor cursor;
 
-                    if ((int) uid != 0) {
+                    if ((int)uid != 0) {
                         if (max_id != 0) {
                             cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, mid FROM media WHERE uid = %d AND mid < %d ORDER BY date DESC, mid DESC LIMIT %d", uid, max_id, count));
                         } else {
@@ -1438,10 +1439,10 @@ public void run() {
                     while (cursor.next()) {
                         ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                         if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                             message.id = cursor.intValue(1);
                             message.dialog_id = uid;
-                            if ((int) uid == 0) {
+                            if ((int)uid == 0) {
                                 message.random_id = cursor.longValue(2);
                             }
                             res.messages.add(message);
@@ -1523,7 +1524,7 @@ public void run() {
                     while (cursor.next()) {
                         ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
                         if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                            TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                             MessageObject.setIsUnread(message, cursor.intValue(0) != 1);
                             message.id = cursor.intValue(3);
                             message.date = cursor.intValue(4);
@@ -1535,8 +1536,8 @@ public void run() {
                             message.seq_out = cursor.intValue(8);
                             messages.add(message);
 
-                            int lower_id = (int) message.dialog_id;
-                            int high_id = (int) (message.dialog_id >> 32);
+                            int lower_id = (int)message.dialog_id;
+                            int high_id = (int)(message.dialog_id >> 32);
 
                             if (lower_id != 0) {
                                 if (high_id == 1) {
@@ -1663,7 +1664,7 @@ public void run() {
                     ArrayList<Integer> fromUser = new ArrayList<Integer>();
 
                     SQLiteCursor cursor = null;
-                    int lower_id = (int) dialog_id;
+                    int lower_id = (int)dialog_id;
 
                     if (lower_id != 0) {
                         if (load_type == 3) {
@@ -2017,7 +2018,7 @@ public void run() {
                     state = database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ? WHERE uid = ?");
                     state.bindInteger(1, chat.seq_in);
                     state.bindInteger(2, chat.seq_out);
-                    state.bindInteger(3, (int) chat.key_use_count_in << 16 | chat.key_use_count_out);
+                    state.bindInteger(3, (int)chat.key_use_count_in << 16 | chat.key_use_count_out);
                     state.bindInteger(4, chat.id);
                     state.step();
                 } catch (Exception e) {
@@ -2120,7 +2121,7 @@ public void run() {
                     state.bindInteger(5, chat.layer);
                     state.bindInteger(6, chat.seq_in);
                     state.bindInteger(7, chat.seq_out);
-                    state.bindInteger(8, (int) chat.key_use_count_in << 16 | chat.key_use_count_out);
+                    state.bindInteger(8, (int)chat.key_use_count_in << 16 | chat.key_use_count_out);
                     state.bindLong(9, chat.exchange_id);
                     state.bindInteger(10, chat.key_create_date);
                     state.bindLong(11, chat.future_key_fingerprint);
@@ -2216,7 +2217,7 @@ public void run() {
                     state.bindInteger(8, chat.layer);
                     state.bindInteger(9, chat.seq_in);
                     state.bindInteger(10, chat.seq_out);
-                    state.bindInteger(11, (int) chat.key_use_count_in << 16 | chat.key_use_count_out);
+                    state.bindInteger(11, (int)chat.key_use_count_in << 16 | chat.key_use_count_out);
                     state.bindLong(12, chat.exchange_id);
                     state.bindInteger(13, chat.key_create_date);
                     state.bindLong(14, chat.future_key_fingerprint);
@@ -2327,7 +2328,7 @@ private void getUsersInternal(String usersToLoad, ArrayList<TLRPC.User> result)
             try {
                 ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                 if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    TLRPC.User user = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                     if (user != null) {
                         if (user.status != null) {
                             user.status.expires = cursor.intValue(1);
@@ -2352,7 +2353,7 @@ private void getChatsInternal(String chatsToLoad, ArrayList<TLRPC.Chat> result)
             try {
                 ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                 if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    TLRPC.Chat chat = (TLRPC.Chat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    TLRPC.Chat chat = (TLRPC.Chat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                     if (chat != null) {
                         result.add(chat);
                     }
@@ -2375,7 +2376,7 @@ private void getEncryptedChatsInternal(String chatsToLoad, ArrayList<TLRPC.Encry
             try {
                 ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
                 if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                     if (chat != null) {
                         chat.user_id = cursor.intValue(1);
                         if (usersToLoad != null && !usersToLoad.contains(chat.user_id)) {
@@ -2388,8 +2389,8 @@ private void getEncryptedChatsInternal(String chatsToLoad, ArrayList<TLRPC.Encry
                         chat.seq_in = cursor.intValue(6);
                         chat.seq_out = cursor.intValue(7);
                         int use_count = cursor.intValue(8);
-                        chat.key_use_count_in = (short) (use_count >> 16);
-                        chat.key_use_count_out = (short) (use_count);
+                        chat.key_use_count_in = (short)(use_count >> 16);
+                        chat.key_use_count_out = (short)(use_count);
                         chat.exchange_id = cursor.longValue(9);
                         chat.key_create_date = cursor.intValue(10);
                         chat.future_key_fingerprint = cursor.longValue(11);
@@ -2524,8 +2525,8 @@ private boolean canAddMessageToMedia(TLRPC.Message message) {
     private int getMessageMediaType(TLRPC.Message message) {
         if (message instanceof TLRPC.TL_message_secret && (
                 message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl != 0 && message.ttl <= 60 ||
-                        message.media instanceof TLRPC.TL_messageMediaAudio ||
-                        message.media instanceof TLRPC.TL_messageMediaVideo)) {
+                message.media instanceof TLRPC.TL_messageMediaAudio ||
+                message.media instanceof TLRPC.TL_messageMediaVideo)) {
             return 1;
         } else if (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo) {
             return 0;
@@ -2769,7 +2770,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                 state = database.executeFast("REPLACE INTO media_counts VALUES(?, ?)");
                 for (HashMap.Entry<Long, Integer> pair : mediaCounts.entrySet()) {
                     long uid = pair.getKey();
-                    int lower_part = (int) uid;
+                    int lower_part = (int)uid;
                     int count = -1;
                     SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT count FROM media_counts WHERE uid = %d LIMIT 1", uid));
                     if (cursor.next()) {
@@ -3102,7 +3103,7 @@ private void markMessagesAsReadInternal(final ArrayList<Integer> messages, HashM
             }
             if (encryptedMessages != null && !encryptedMessages.isEmpty()) {
                 for (HashMap.Entry<Integer, Integer> entry : encryptedMessages.entrySet()) {
-                    long dialog_id = ((long) entry.getKey()) << 32;
+                    long dialog_id = ((long)entry.getKey()) << 32;
                     int max_date = entry.getValue();
                     SQLitePreparedStatement state = database.executeFast("UPDATE messages SET read_state = 1 WHERE uid = ? AND date <= ? AND read_state = 0 AND out = 1");
                     state.requery();
@@ -3179,12 +3180,12 @@ private void markMessagesAsDeletedInternal(final ArrayList<Integer> messages) {
             try {
                 while (cursor.next()) {
                     long did = cursor.longValue(0);
-                    if ((int) did != 0) {
+                    if ((int)did != 0) {
                         continue;
                     }
                     ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
                     if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                        TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                        TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                         if (message == null || message.media == null) {
                             continue;
                         }
@@ -3278,7 +3279,7 @@ private void updateDialogsWithDeletedMessagesInternal(final ArrayList<Integer> m
 
                 ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(4));
                 if (data != null && cursor.byteBufferValue(4, data.buffer) != 0) {
-                    TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                     MessageObject.setIsUnread(message, cursor.intValue(5) != 1);
                     message.id = cursor.intValue(6);
                     message.send_state = cursor.intValue(7);
@@ -3300,8 +3301,8 @@ private void updateDialogsWithDeletedMessagesInternal(final ArrayList<Integer> m
                 }
                 buffersStorage.reuseFreeBuffer(data);
 
-                int lower_id = (int) dialog.id;
-                int high_id = (int) (dialog.id >> 32);
+                int lower_id = (int)dialog.id;
+                int high_id = (int)(dialog.id >> 32);
                 if (lower_id != 0) {
                     if (high_id == 1) {
                         if (!chatsToLoad.contains(lower_id)) {
@@ -3451,7 +3452,7 @@ public void run() {
 
                         ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(4));
                         if (data != null && cursor.byteBufferValue(4, data.buffer) != 0) {
-                            TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            TLRPC.Message message = (TLRPC.Message)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                             if (message != null) {
                                 MessageObject.setIsUnread(message, cursor.intValue(5) != 1);
                                 message.id = cursor.intValue(6);
@@ -3475,8 +3476,8 @@ public void run() {
                         }
                         buffersStorage.reuseFreeBuffer(data);
 
-                        int lower_id = (int) dialog.id;
-                        int high_id = (int) (dialog.id >> 32);
+                        int lower_id = (int)dialog.id;
+                        int high_id = (int)(dialog.id >> 32);
                         if (lower_id != 0) {
                             if (high_id == 1) {
                                 if (!chatsToLoad.contains(lower_id)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
index 44523a584..0aa1b69d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
@@ -34,7 +34,7 @@ private static File getNativeLibraryDir(Context context) {
         File f = null;
         if (context != null) {
             try {
-                f = new File((String) ApplicationInfo.class.getField("nativeLibraryDir").get(context.getApplicationInfo()));
+                f = new File((String)ApplicationInfo.class.getField("nativeLibraryDir").get(context.getApplicationInfo()));
             } catch (Throwable th) {
                 th.printStackTrace();
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 0885939de..661e5ff21 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -71,12 +71,15 @@
     public final static int albumsDidLoaded = 50008;
     public final static int audioDidSent = 50009;
     public final static int audioDidStarted = 50010;
-    private static volatile NotificationCenter Instance = null;
+
     final private HashMap<Integer, ArrayList<Object>> observers = new HashMap<Integer, ArrayList<Object>>();
+
     final private HashMap<Integer, Object> removeAfterBroadcast = new HashMap<Integer, Object>();
     final private HashMap<Integer, Object> addAfterBroadcast = new HashMap<Integer, Object>();
+
     private int broadcasting = 0;
 
+    private static volatile NotificationCenter Instance = null;
     public static NotificationCenter getInstance() {
         NotificationCenter localInstance = Instance;
         if (localInstance == null) {
@@ -90,6 +93,10 @@ public static NotificationCenter getInstance() {
         return localInstance;
     }
 
+    public interface NotificationCenterDelegate {
+        public abstract void didReceivedNotification(int id, Object... args);
+    }
+
     public void postNotificationName(int id, Object... args) {
         synchronized (observers) {
             broadcasting++;
@@ -149,8 +156,4 @@ public void removeObserver(Object observer, int id) {
             }
         }
     }
-
-    public interface NotificationCenterDelegate {
-        public abstract void didReceivedNotification(int id, Object... args);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
index bb491b001..9732b4aa7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
@@ -11,6 +11,8 @@
 import android.app.IntentService;
 import android.content.Intent;
 
+import org.telegram.messenger.Utilities;
+
 public class NotificationRepeat extends IntentService {
 
     public NotificationRepeat() {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index ae832d78d..73fd3b751 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -28,12 +28,12 @@
 
 import org.json.JSONArray;
 import org.json.JSONObject;
-import org.telegram.R;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PopupNotificationActivity;
 
@@ -45,22 +45,20 @@
 public class NotificationsController {
 
     public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
-    private static volatile NotificationsController Instance = null;
-    public ArrayList<MessageObject> popupMessages = new ArrayList<MessageObject>();
+
     private ArrayList<MessageObject> pushMessages = new ArrayList<MessageObject>();
     private HashMap<Integer, MessageObject> pushMessagesDict = new HashMap<Integer, MessageObject>();
     private NotificationManagerCompat notificationManager = null;
     private HashMap<Long, Integer> pushDialogs = new HashMap<Long, Integer>();
     private HashMap<Long, Integer> wearNoticationsIds = new HashMap<Long, Integer>();
     private int wearNotificationId = 10000;
+    public ArrayList<MessageObject> popupMessages = new ArrayList<MessageObject>();
     private long openned_dialog_id = 0;
     private int total_unread_count = 0;
     private int personal_count = 0;
     private boolean notifyCheck = false;
-    public NotificationsController() {
-        notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
-    }
 
+    private static volatile NotificationsController Instance = null;
     public static NotificationsController getInstance() {
         NotificationsController localInstance = Instance;
         if (localInstance == null) {
@@ -74,24 +72,8 @@ public static NotificationsController getInstance() {
         return localInstance;
     }
 
-    public static String getLauncherClassName(Context context) {
-        try {
-            PackageManager pm = context.getPackageManager();
-
-            Intent intent = new Intent(Intent.ACTION_MAIN);
-            intent.addCategory(Intent.CATEGORY_LAUNCHER);
-
-            List<ResolveInfo> resolveInfos = pm.queryIntentActivities(intent, 0);
-            for (ResolveInfo resolveInfo : resolveInfos) {
-                String pkgName = resolveInfo.activityInfo.applicationInfo.packageName;
-                if (pkgName.equalsIgnoreCase(context.getPackageName())) {
-                    return resolveInfo.activityInfo.name;
-                }
-            }
-        } catch (Throwable e) {
-            FileLog.e("tmessages", e);
-        }
-        return null;
+    public NotificationsController() {
+        notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
     }
 
     public void cleanup() {
@@ -942,6 +924,26 @@ private void setBadge(Context context, int count) {
         }
     }
 
+    public static String getLauncherClassName(Context context) {
+        try {
+            PackageManager pm = context.getPackageManager();
+
+            Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.addCategory(Intent.CATEGORY_LAUNCHER);
+
+            List<ResolveInfo> resolveInfos = pm.queryIntentActivities(intent, 0);
+            for (ResolveInfo resolveInfo : resolveInfos) {
+                String pkgName = resolveInfo.activityInfo.applicationInfo.packageName;
+                if (pkgName.equalsIgnoreCase(context.getPackageName())) {
+                    return resolveInfo.activityInfo.name;
+                }
+            }
+        } catch (Throwable e) {
+            FileLog.e("tmessages", e);
+        }
+        return null;
+    }
+
     private boolean isPersonalMessage(MessageObject messageObject) {
         return messageObject.messageOwner.to_id != null && messageObject.messageOwner.to_id.chat_id == 0
                 && (messageObject.messageOwner.action == null || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java
index 9dc079b4b..91f90efba 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java
@@ -13,8 +13,8 @@
 import android.content.SharedPreferences;
 import android.os.IBinder;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ApplicationLoader;
 
 public class NotificationsService extends Service {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
index 3b4cef777..e6b6c7572 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
@@ -12,9 +12,9 @@
 import android.content.Context;
 import android.content.Intent;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ApplicationLoader;
 
 public class ScreenReceiver extends BroadcastReceiver {
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
index 47799c084..04a4b5c05 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
@@ -14,13 +14,13 @@
 import android.content.Context;
 import android.content.DialogInterface;
 
-import org.telegram.R;
 import org.telegram.messenger.BuffersStorage;
 import org.telegram.messenger.ByteBufferDesc;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessageKeyData;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLClassStore;
 import org.telegram.messenger.TLObject;
@@ -39,14 +39,15 @@
 public class SecretChatHelper {
 
     public static final int CURRENT_SECRET_CHAT_LAYER = 20;
-    private static volatile SecretChatHelper Instance = null;
-    public ArrayList<TLRPC.Update> delayedEncryptedChatUpdates = new ArrayList<TLRPC.Update>();
+
     private ArrayList<Integer> sendingNotifyLayer = new ArrayList<Integer>();
     private HashMap<Integer, ArrayList<TLRPC.TL_decryptedMessageHolder>> secretHolesQueue = new HashMap<Integer, ArrayList<TLRPC.TL_decryptedMessageHolder>>();
     private HashMap<Integer, TLRPC.EncryptedChat> acceptingChats = new HashMap<Integer, TLRPC.EncryptedChat>();
+    public ArrayList<TLRPC.Update> delayedEncryptedChatUpdates = new ArrayList<TLRPC.Update>();
     private ArrayList<Long> pendingEncMessagesToDelete = new ArrayList<Long>();
     private boolean startingSecretChat = false;
 
+    private static volatile SecretChatHelper Instance = null;
     public static SecretChatHelper getInstance() {
         SecretChatHelper localInstance = Instance;
         if (localInstance == null) {
@@ -60,14 +61,6 @@ public static SecretChatHelper getInstance() {
         return localInstance;
     }
 
-    public static boolean isSecretVisibleMessage(TLRPC.Message message) {
-        return message.action instanceof TLRPC.TL_messageEncryptedAction && (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL);
-    }
-
-    public static boolean isSecretInvisibleMessage(TLRPC.Message message) {
-        return message.action instanceof TLRPC.TL_messageEncryptedAction && !(message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL);
-    }
-
     public void cleanUp() {
         sendingNotifyLayer.clear();
         acceptingChats.clear();
@@ -645,6 +638,14 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.EncryptedFile file,
         }
     }
 
+    public static boolean isSecretVisibleMessage(TLRPC.Message message) {
+        return message.action instanceof TLRPC.TL_messageEncryptedAction && (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL);
+    }
+
+    public static boolean isSecretInvisibleMessage(TLRPC.Message message) {
+        return message.action instanceof TLRPC.TL_messageEncryptedAction && !(message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL);
+    }
+
     protected void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final TLRPC.Message newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile, final String originalPath) {
         if (req == null || chat.auth_key == null || chat instanceof TLRPC.TL_encryptedChatRequested || chat instanceof TLRPC.TL_encryptedChatWaiting) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
index 5c36f2707..21def121c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
@@ -18,16 +18,16 @@
 import android.webkit.MimeTypeMap;
 import android.widget.Toast;
 
-import org.telegram.R;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -35,19 +35,24 @@
 
 public class SendMessagesHelper implements NotificationCenter.NotificationCenterDelegate {
 
-    private static volatile SendMessagesHelper Instance = null;
     private TLRPC.ChatParticipants currentChatInfo = null;
     private HashMap<String, ArrayList<DelayedMessage>> delayedMessages = new HashMap<String, ArrayList<DelayedMessage>>();
     private HashMap<Integer, MessageObject> unsentMessages = new HashMap<Integer, MessageObject>();
 
-    public SendMessagesHelper() {
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FilePreparingStarted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FilePreparingFailed);
+    private class DelayedMessage {
+        public TLObject sendRequest;
+        public TLRPC.TL_decryptedMessage sendEncryptedRequest;
+        public int type;
+        public String originalPath;
+        public TLRPC.FileLocation location;
+        public TLRPC.TL_video videoLocation;
+        public TLRPC.TL_audio audioLocation;
+        public TLRPC.TL_document documentLocation;
+        public MessageObject obj;
+        public TLRPC.EncryptedChat encryptedChat;
     }
 
+    private static volatile SendMessagesHelper Instance = null;
     public static SendMessagesHelper getInstance() {
         SendMessagesHelper localInstance = Instance;
         if (localInstance == null) {
@@ -61,679 +66,328 @@ public static SendMessagesHelper getInstance() {
         return localInstance;
     }
 
-    private static boolean prepareSendingDocumentInternal(String path, String originalPath, Uri uri, String mime, final long dialog_id) {
-        if ((path == null || path.length() == 0) && uri == null) {
-            return false;
-        }
-        MimeTypeMap myMime = MimeTypeMap.getSingleton();
-        if (uri != null) {
-            String extension = null;
-            if (mime != null) {
-                extension = myMime.getExtensionFromMimeType(mime);
-            }
-            if (extension == null) {
-                extension = "txt";
-            }
-            path = MediaController.copyDocumentToCache(uri, extension);
-            if (path == null) {
-                return false;
-            }
-        }
-        final File f = new File(path);
-        if (!f.exists() || f.length() == 0) {
-            return false;
-        }
-
-        boolean isEncrypted = (int)dialog_id == 0;
-
-        String name = f.getName();
-        if (name == null) {
-            name = "noname";
-        }
-        String ext = "";
-        int idx = path.lastIndexOf(".");
-        if (idx != -1) {
-            ext = path.substring(idx + 1);
-        }
-        if (originalPath != null) {
-            originalPath += "" + f.length();
-        }
-
-        TLRPC.TL_document document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 1 : 4);
-        if (document == null && !path.equals(originalPath)) {
-            document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(path + f.length(), !isEncrypted ? 1 : 4);
-        }
-        if (document == null) {
-            document = new TLRPC.TL_document();
-            document.id = 0;
-            document.user_id = UserConfig.getClientUserId();
-            document.date = ConnectionsManager.getInstance().getCurrentTime();
-            document.file_name = name;
-            document.size = (int)f.length();
-            document.dc_id = 0;
-            if (ext.length() != 0) {
-                String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
-                if (mimeType != null) {
-                    document.mime_type = mimeType;
-                } else {
-                    document.mime_type = "application/octet-stream";
-                }
-            } else {
-                document.mime_type = "application/octet-stream";
-            }
-            if (document.mime_type.equals("image/gif")) {
-                try {
-                    Bitmap bitmap = ImageLoader.loadBitmap(f.getAbsolutePath(), null, 90, 90);
-                    if (bitmap != null) {
-                        document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, isEncrypted);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            if (document.thumb == null) {
-                document.thumb = new TLRPC.TL_photoSizeEmpty();
-                document.thumb.type = "s";
-            }
-        }
+    public SendMessagesHelper() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FilePreparingStarted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FilePreparingFailed);
+    }
 
-        final TLRPC.TL_document documentFinal = document;
-        final String originalPathFinal = originalPath;
-        final String pathFinal = path;
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id);
-            }
-        });
-        return true;
+    public void cleanUp() {
+        delayedMessages.clear();
+        unsentMessages.clear();
+        currentChatInfo = null;
     }
 
-    public static void prepareSendingDocument(String path, String originalPath, Uri uri, String mine, long dialog_id) {
-        if ((path == null || originalPath == null) && uri == null) {
-            return;
-        }
-        ArrayList<String> paths = new ArrayList<String>();
-        ArrayList<String> originalPaths = new ArrayList<String>();
-        ArrayList<Uri> uris = null;
-        if (uri != null) {
-            uris = new ArrayList<Uri>();
-        }
-        paths.add(path);
-        originalPaths.add(originalPath);
-        prepareSendingDocuments(paths, originalPaths, uris, mine, dialog_id);
+    public void setCurrentChatInfo(TLRPC.ChatParticipants info) {
+        currentChatInfo = info;
     }
 
-    public static void prepareSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths, final ArrayList<Uri> uris, final String mime, final long dialog_id) {
-        if (paths == null && originalPaths == null && uris == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
-            return;
-        }
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean error = false;
-                if (paths != null) {
-                    for (int a = 0; a < paths.size(); a++) {
-                        if (!prepareSendingDocumentInternal(paths.get(a), originalPaths.get(a), null, mime, dialog_id)) {
-                            error = true;
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.FileDidUpload) {
+            final String location = (String)args[0];
+            final TLRPC.InputFile file = (TLRPC.InputFile)args[1];
+            final TLRPC.InputEncryptedFile encryptedFile = (TLRPC.InputEncryptedFile)args[2];
+
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    ArrayList<DelayedMessage> arr = delayedMessages.get(location);
+                    if (arr != null) {
+                        for (int a = 0; a < arr.size(); a++) {
+                            DelayedMessage message = arr.get(a);
+                            TLRPC.InputMedia media = null;
+                            if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
+                                media = ((TLRPC.TL_messages_sendMedia)message.sendRequest).media;
+                            } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
+                                media = ((TLRPC.TL_messages_sendBroadcast)message.sendRequest).media;
+                            }
+
+                            if (file != null && media != null) {
+                                if (message.type == 0) {
+                                    media.file = file;
+                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
+                                } else if (message.type == 1) {
+                                    if (media.file == null) {
+                                        media.file = file;
+                                        if (media.thumb == null && message.location != null) {
+                                            performSendDelayedMessage(message);
+                                        } else {
+                                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
+                                        }
+                                    } else {
+                                        media.thumb = file;
+                                        performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
+                                    }
+                                } else if (message.type == 2) {
+                                    if (media.file == null) {
+                                        media.file = file;
+                                        if (media.thumb == null && message.location != null) {
+                                            performSendDelayedMessage(message);
+                                        } else {
+                                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
+                                        }
+                                    } else {
+                                        media.thumb = file;
+                                        performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
+                                    }
+                                } else if (message.type == 3) {
+                                    media.file = file;
+                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
+                                }
+                                arr.remove(a);
+                                a--;
+                            } else if (encryptedFile != null && message.sendEncryptedRequest != null) {
+                                message.sendEncryptedRequest.media.key = encryptedFile.key;
+                                message.sendEncryptedRequest.media.iv = encryptedFile.iv;
+                                SecretChatHelper.getInstance().performSendEncryptedRequest(message.sendEncryptedRequest, message.obj.messageOwner, message.encryptedChat, encryptedFile, message.originalPath);
+                                arr.remove(a);
+                                a--;
+                            }
                         }
-                    }
-                }
-                if (uris != null) {
-                    for (int a = 0; a < uris.size(); a++) {
-                        if (!prepareSendingDocumentInternal(null, null, uris.get(a), mime, dialog_id)) {
-                            error = true;
+                        if (arr.isEmpty()) {
+                            delayedMessages.remove(location);
                         }
                     }
                 }
-                if (error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                Toast toast = Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
-                                toast.show();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
+            });
+        } else if (id == NotificationCenter.FileDidFailUpload) {
+            final String location = (String) args[0];
+            final boolean enc = (Boolean) args[1];
+
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    ArrayList<DelayedMessage> arr = delayedMessages.get(location);
+                    if (arr != null) {
+                        for (int a = 0; a < arr.size(); a++) {
+                            DelayedMessage obj = arr.get(a);
+                            if (enc && obj.sendEncryptedRequest != null || !enc && obj.sendRequest != null) {
+                                MessagesStorage.getInstance().markMessageAsSendError(obj.obj.messageOwner.id);
+                                obj.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                                arr.remove(a);
+                                a--;
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, obj.obj.messageOwner.id);
+                                processSentMessage(obj.obj.messageOwner.id);
                             }
                         }
-                    });
+                        if (arr.isEmpty()) {
+                            delayedMessages.remove(location);
+                        }
+                    }
                 }
-            }
-        }).start();
-    }
+            });
+        } else if (id == NotificationCenter.FilePreparingStarted) {
+            MessageObject messageObject = (MessageObject)args[0];
+            String finalPath = (String)args[1];
 
-    public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long dialog_id) {
-        ArrayList<String> paths = null;
-        ArrayList<Uri> uris = null;
-        if (imageFilePath != null && imageFilePath.length() != 0) {
-            paths = new ArrayList<String>();
-            paths.add(imageFilePath);
-        }
-        if (imageUri != null) {
-            uris = new ArrayList<Uri>();
-            uris.add(imageUri);
-        }
-        prepareSendingPhotos(paths, uris, dialog_id);
-    }
-
-    public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id) {
-        if (paths == null && uris == null || paths != null && paths.isEmpty() || uris != null && uris.isEmpty()) {
-            return;
-        }
-        final ArrayList<String> pathsCopy = new ArrayList<String>();
-        final ArrayList<Uri> urisCopy = new ArrayList<Uri>();
-        if (paths != null) {
-            pathsCopy.addAll(paths);
-        }
-        if (uris != null) {
-            urisCopy.addAll(uris);
-        }
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean isEncrypted = (int)dialog_id == 0;
-
-                ArrayList<String> sendAsDocuments = null;
-                ArrayList<String> sendAsDocumentsOriginal = null;
-                int count = !pathsCopy.isEmpty() ? pathsCopy.size() : urisCopy.size();
-                String path = null;
-                Uri uri = null;
-                for (int a = 0; a < count; a++) {
-                    if (!pathsCopy.isEmpty()) {
-                        path = pathsCopy.get(a);
-                    } else if (!urisCopy.isEmpty()) {
-                        uri = urisCopy.get(a);
-                    }
-
-                    String originalPath = path;
-                    String tempPath = path;
-                    if (tempPath == null && uri != null) {
-                        tempPath = Utilities.getPath(uri);
-                        originalPath = uri.toString();
+            ArrayList<DelayedMessage> arr = delayedMessages.get(messageObject.messageOwner.attachPath);
+            if (arr != null) {
+                for (int a = 0; a < arr.size(); a++) {
+                    DelayedMessage message = arr.get(a);
+                    if (message.obj == messageObject) {
+                        message.videoLocation.videoEditedInfo = null;
+                        performSendDelayedMessage(message);
+                        arr.remove(a);
+                        a--;
+                        break;
                     }
+                }
+                if (arr.isEmpty()) {
+                    delayedMessages.remove(messageObject.messageOwner.attachPath);
+                }
+            }
+        } else if (id == NotificationCenter.FileNewChunkAvailable) {
+            MessageObject messageObject = (MessageObject)args[0];
+            String finalPath = (String)args[1];
+            long finalSize = (Long)args[2];
+            boolean isEncrypted = ((int)messageObject.getDialogId()) == 0;
+            FileLoader.getInstance().checkUploadNewDataAvailable(finalPath, isEncrypted, finalSize);
+            if (finalSize != 0) {
+                ArrayList<DelayedMessage> arr = delayedMessages.get(messageObject.messageOwner.attachPath);
+                if (arr != null) {
+                    for (DelayedMessage message : arr) {
+                        if (message.obj == messageObject) {
+                            message.obj.messageOwner.videoEditedInfo = null;
+                            message.obj.messageOwner.message = "-1";
+                            message.obj.messageOwner.media.video.size = (int)finalSize;
 
-                    boolean isGif = false;
-                    if (tempPath != null && tempPath.endsWith(".gif")) {
-                        isGif = true;
-                    } else if (tempPath == null && uri != null) {
-                        isGif = MediaController.isGif(uri);
-                        if (isGif) {
-                            originalPath = uri.toString();
-                            tempPath = MediaController.copyDocumentToCache(uri, "gif");
+                            ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
+                            messages.add(message.obj.messageOwner);
+                            MessagesStorage.getInstance().putMessages(messages, false, true, false, 0);
+                            break;
                         }
                     }
+                    if (arr.isEmpty()) {
+                        delayedMessages.remove(messageObject.messageOwner.attachPath);
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.FilePreparingFailed) {
+            MessageObject messageObject = (MessageObject)args[0];
+            String finalPath = (String)args[1];
+            stopVideoService(messageObject.messageOwner.attachPath);
 
-                    if (isGif) {
-                        if (sendAsDocuments == null) {
-                            sendAsDocuments = new ArrayList<String>();
-                            sendAsDocumentsOriginal = new ArrayList<String>();
-                        }
-                        sendAsDocuments.add(tempPath);
-                        sendAsDocumentsOriginal.add(originalPath);
-                    } else {
-                        if (tempPath != null) {
-                            File temp = new File(tempPath);
-                            originalPath += temp.length() + "_" + temp.lastModified();
-                        } else {
-                            originalPath = null;
-                        }
-                        TLRPC.TL_photo photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 0 : 3);
-                        if (photo == null && uri != null) {
-                            photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(Utilities.getPath(uri), !isEncrypted ? 0 : 3);
-                        }
-                        if (photo == null) {
-                            photo = SendMessagesHelper.getInstance().generatePhotoSizes(path, uri);
-                        }
-                        if (photo != null) {
-                            final String originalPathFinal = originalPath;
-                            final TLRPC.TL_photo photoFinal = photo;
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, dialog_id);
-                                }
-                            });
-                        }
+            ArrayList<DelayedMessage> arr = delayedMessages.get(finalPath);
+            if (arr != null) {
+                for (int a = 0; a < arr.size(); a++) {
+                    DelayedMessage message = arr.get(a);
+                    if (message.obj == messageObject) {
+                        MessagesStorage.getInstance().markMessageAsSendError(message.obj.messageOwner.id);
+                        message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                        arr.remove(a);
+                        a--;
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.messageOwner.id);
+                        processSentMessage(message.obj.messageOwner.id);
                     }
                 }
-                if (sendAsDocuments != null && !sendAsDocuments.isEmpty()) {
-                    for (int a = 0; a < sendAsDocuments.size(); a++) {
-                        prepareSendingDocumentInternal(sendAsDocuments.get(a), sendAsDocumentsOriginal.get(a), null, "gif", dialog_id);
+                if (arr.isEmpty()) {
+                    delayedMessages.remove(finalPath);
+                }
+            }
+        }
+    }
+
+    public void cancelSendingMessage(MessageObject object) {
+        String keyToRemvoe = null;
+        boolean enc = false;
+        for (HashMap.Entry<String, ArrayList<DelayedMessage>> entry : delayedMessages.entrySet()) {
+            ArrayList<DelayedMessage> messages = entry.getValue();
+            for (int a = 0; a < messages.size(); a++) {
+                DelayedMessage message = messages.get(a);
+                if (message.obj.messageOwner.id == object.messageOwner.id) {
+                    messages.remove(a);
+                    MediaController.getInstance().cancelVideoConvert(message.obj);
+                    if (messages.size() == 0) {
+                        keyToRemvoe = entry.getKey();
+                        if (message.sendEncryptedRequest != null) {
+                            enc = true;
+                        }
                     }
+                    break;
                 }
             }
-        }).start();
+        }
+        if (keyToRemvoe != null) {
+            FileLoader.getInstance().cancelUploadFile(keyToRemvoe, enc);
+            stopVideoService(keyToRemvoe);
+        }
+        ArrayList<Integer> messages = new ArrayList<Integer>();
+        messages.add(object.messageOwner.id);
+        MessagesController.getInstance().deleteMessages(messages, null, null);
     }
 
-    public static void prepareSendingVideo(final String videoPath, final long estimatedSize, final long duration, final int width, final int height, final TLRPC.VideoEditedInfo videoEditedInfo, final long dialog_id) {
-        if (videoPath == null || videoPath.length() == 0) {
-            return;
+    public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
+        if (messageObject.messageOwner.id >= 0) {
+            return false;
         }
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean isEncrypted = (int)dialog_id == 0;
+        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction) {
+            int enc_id = (int) (messageObject.getDialogId() >> 32);
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(enc_id);
+            if (encryptedChat == null) {
+                MessagesStorage.getInstance().markMessageAsSendError(messageObject.messageOwner.id);
+                messageObject.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, messageObject.messageOwner.id);
+                processSentMessage(messageObject.messageOwner.id);
+                return false;
+            }
+            if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                SecretChatHelper.getInstance().sendTTLMessage(encryptedChat, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionDeleteMessages) {
+                SecretChatHelper.getInstance().sendMessagesDeleteMessage(encryptedChat, null, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
+                SecretChatHelper.getInstance().sendClearHistoryMessage(encryptedChat, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
+                SecretChatHelper.getInstance().sendNotifyLayerMessage(encryptedChat, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionReadMessages) {
+                SecretChatHelper.getInstance().sendMessagesReadMessage(encryptedChat, null, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
+                SecretChatHelper.getInstance().sendScreenshotMessage(encryptedChat, null, messageObject.messageOwner);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionTyping) {
 
-                String path = videoPath;
-                String originalPath = videoPath;
-                File temp = new File(originalPath);
-                originalPath += temp.length() + "_" + temp.lastModified();
-                if (videoEditedInfo != null) {
-                    originalPath += duration + "_" + videoEditedInfo.startTime + "_" + videoEditedInfo.endTime;
-                }
-                TLRPC.TL_video video = (TLRPC.TL_video)MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 2 : 5);
-                if (video == null) {
-                    Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
-                    TLRPC.PhotoSize size = ImageLoader.scaleAndSaveImage(thumb, 90, 90, 55, isEncrypted);
-                    video = new TLRPC.TL_video();
-                    video.thumb = size;
-                    if (video.thumb == null) {
-                        video.thumb = new TLRPC.TL_photoSizeEmpty();
-                        video.thumb.type = "s";
-                    } else {
-                        video.thumb.type = "s";
-                    }
-                    video.caption = "";
-                    video.mime_type = "video/mp4";
-                    video.id = 0;
-                    UserConfig.saveConfig(false);
+            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionResend) {
 
-                    if (videoEditedInfo != null) {
-                        video.duration = (int)(duration / 1000);
-                        if (videoEditedInfo.rotationValue == 90 || videoEditedInfo.rotationValue == 270) {
-                            video.w = height;
-                            video.h = width;
-                        } else {
-                            video.w = width;
-                            video.h = height;
-                        }
-                        video.size = (int)estimatedSize;
-                        video.videoEditedInfo = videoEditedInfo;
-                        String fileName = Integer.MIN_VALUE + "_" + UserConfig.lastLocalId + ".mp4";
-                        UserConfig.lastLocalId--;
-                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-                        UserConfig.saveConfig(false);
-                        path = cacheFile.getAbsolutePath();
-                    } else {
-                        if (temp != null && temp.exists()) {
-                            video.size = (int) temp.length();
-                        }
-                        boolean infoObtained = false;
-                        if (Build.VERSION.SDK_INT >= 14) {
-                            MediaMetadataRetriever mediaMetadataRetriever = null;
-                            try {
-                                mediaMetadataRetriever = new MediaMetadataRetriever();
-                                mediaMetadataRetriever.setDataSource(videoPath);
-                                String width = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH);
-                                if (width != null) {
-                                    video.w = Integer.parseInt(width);
-                                }
-                                String height = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT);
-                                if (height != null) {
-                                    video.h = Integer.parseInt(height);
-                                }
-                                String duration = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
-                                if (duration != null) {
-                                    video.duration = (int) Math.ceil(Long.parseLong(duration) / 1000.0f);
-                                }
-                                infoObtained = true;
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            } finally {
-                                try {
-                                    if (mediaMetadataRetriever != null) {
-                                        mediaMetadataRetriever.release();
-                                        mediaMetadataRetriever = null;
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        }
-                        if (!infoObtained) {
-                            try {
-                                MediaPlayer mp = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(videoPath)));
-                                if (mp != null) {
-                                    video.duration = (int) Math.ceil(mp.getDuration() / 1000.0f);
-                                    video.w = mp.getVideoWidth();
-                                    video.h = mp.getVideoHeight();
-                                    mp.release();
-                                }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    }
-                }
+            }
+            return true;
+        }
+        if (unsent) {
+            unsentMessages.put(messageObject.messageOwner.id, messageObject);
+        }
+        sendMessage(messageObject);
+        return true;
+    }
 
-                final TLRPC.TL_video videoFinal = video;
-                final String originalPathFinal = originalPath;
-                final String finalPath = path;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        SendMessagesHelper.getInstance().sendMessage(videoFinal, originalPathFinal, finalPath, dialog_id);
-                    }
-                });
+    protected void processSentMessage(int id) {
+        int prevSize = unsentMessages.size();
+        unsentMessages.remove(id);
+        if (prevSize != 0 && unsentMessages.size() == 0) {
+            checkUnsentMessages();
+        }
+    }
+
+    public void processForwardFromMyName(MessageObject messageObject, long did) {
+        if (messageObject == null) {
+            return;
+        }
+        if (messageObject.messageOwner.media != null && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+            if (messageObject.messageOwner.media.photo instanceof TLRPC.TL_photo) {
+                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, did);
+            } else if (messageObject.messageOwner.media.audio instanceof TLRPC.TL_audio) {
+                sendMessage((TLRPC.TL_audio) messageObject.messageOwner.media.audio, messageObject.messageOwner.attachPath, did);
+            } else if (messageObject.messageOwner.media.video instanceof TLRPC.TL_video) {
+                TLRPC.TL_video video = (TLRPC.TL_video) messageObject.messageOwner.media.video;
+                video.videoEditedInfo = messageObject.messageOwner.videoEditedInfo;
+                sendMessage(video, null, messageObject.messageOwner.attachPath, did);
+            } else if (messageObject.messageOwner.media.document instanceof TLRPC.TL_document) {
+                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did);
+            } else if (messageObject.messageOwner.media.geo instanceof TLRPC.TL_geoPoint) {
+                sendMessage(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long, did);
+            } else if (messageObject.messageOwner.media.phone_number != null) {
+                TLRPC.User user = new TLRPC.TL_userContact();
+                user.phone = messageObject.messageOwner.media.phone_number;
+                user.first_name = messageObject.messageOwner.media.first_name;
+                user.last_name = messageObject.messageOwner.media.last_name;
+                user.id = messageObject.messageOwner.media.user_id;
+                sendMessage(user, did);
+            } else {
+                sendMessage(messageObject, did);
             }
-        }).start();
+        } else if (messageObject.messageOwner.message != null) {
+            sendMessage(messageObject.messageOwner.message, did);
+        } else {
+            sendMessage(messageObject, did);
+        }
     }
 
-    public void cleanUp() {
-        delayedMessages.clear();
-        unsentMessages.clear();
-        currentChatInfo = null;
+    public void sendMessage(TLRPC.User user, long peer) {
+        sendMessage(null, null, null, null, null, null, user, null, null, null, peer, false, null);
     }
 
-    public void setCurrentChatInfo(TLRPC.ChatParticipants info) {
-        currentChatInfo = info;
+    public void sendMessage(MessageObject message) {
+        sendMessage(null, null, null, null, null, message, null, null, null, null, message.getDialogId(), true, message.messageOwner.attachPath);
     }
 
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.FileDidUpload) {
-            final String location = (String)args[0];
-            final TLRPC.InputFile file = (TLRPC.InputFile)args[1];
-            final TLRPC.InputEncryptedFile encryptedFile = (TLRPC.InputEncryptedFile)args[2];
+    public void sendMessage(MessageObject message, long peer) {
+        sendMessage(null, null, null, null, null, message, null, null, null, null, peer, false, message.messageOwner.attachPath);
+    }
 
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    ArrayList<DelayedMessage> arr = delayedMessages.get(location);
-                    if (arr != null) {
-                        for (int a = 0; a < arr.size(); a++) {
-                            DelayedMessage message = arr.get(a);
-                            TLRPC.InputMedia media = null;
-                            if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
-                                media = ((TLRPC.TL_messages_sendMedia)message.sendRequest).media;
-                            } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
-                                media = ((TLRPC.TL_messages_sendBroadcast)message.sendRequest).media;
-                            }
+    public void sendMessage(TLRPC.TL_document document, String originalPath, String path, long peer) {
+        sendMessage(null, null, null, null, null, null, null, document, null, originalPath, peer, false, path);
+    }
 
-                            if (file != null && media != null) {
-                                if (message.type == 0) {
-                                    media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                } else if (message.type == 1) {
-                                    if (media.file == null) {
-                                        media.file = file;
-                                        if (media.thumb == null && message.location != null) {
-                                            performSendDelayedMessage(message);
-                                        } else {
-                                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                        }
-                                    } else {
-                                        media.thumb = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                    }
-                                } else if (message.type == 2) {
-                                    if (media.file == null) {
-                                        media.file = file;
-                                        if (media.thumb == null && message.location != null) {
-                                            performSendDelayedMessage(message);
-                                        } else {
-                                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                        }
-                                    } else {
-                                        media.thumb = file;
-                                        performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                    }
-                                } else if (message.type == 3) {
-                                    media.file = file;
-                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                }
-                                arr.remove(a);
-                                a--;
-                            } else if (encryptedFile != null && message.sendEncryptedRequest != null) {
-                                message.sendEncryptedRequest.media.key = encryptedFile.key;
-                                message.sendEncryptedRequest.media.iv = encryptedFile.iv;
-                                SecretChatHelper.getInstance().performSendEncryptedRequest(message.sendEncryptedRequest, message.obj.messageOwner, message.encryptedChat, encryptedFile, message.originalPath);
-                                arr.remove(a);
-                                a--;
-                            }
-                        }
-                        if (arr.isEmpty()) {
-                            delayedMessages.remove(location);
-                        }
-                    }
-                }
-            });
-        } else if (id == NotificationCenter.FileDidFailUpload) {
-            final String location = (String) args[0];
-            final boolean enc = (Boolean) args[1];
+    public void sendMessage(String message, long peer) {
+        sendMessage(message, null, null, null, null, null, null, null, null, null, peer, false, null);
+    }
 
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    ArrayList<DelayedMessage> arr = delayedMessages.get(location);
-                    if (arr != null) {
-                        for (int a = 0; a < arr.size(); a++) {
-                            DelayedMessage obj = arr.get(a);
-                            if (enc && obj.sendEncryptedRequest != null || !enc && obj.sendRequest != null) {
-                                MessagesStorage.getInstance().markMessageAsSendError(obj.obj.messageOwner.id);
-                                obj.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                                arr.remove(a);
-                                a--;
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, obj.obj.messageOwner.id);
-                                processSentMessage(obj.obj.messageOwner.id);
-                            }
-                        }
-                        if (arr.isEmpty()) {
-                            delayedMessages.remove(location);
-                        }
-                    }
-                }
-            });
-        } else if (id == NotificationCenter.FilePreparingStarted) {
-            MessageObject messageObject = (MessageObject)args[0];
-            String finalPath = (String)args[1];
+    public void sendMessage(double lat, double lon, long peer) {
+        sendMessage(null, lat, lon, null, null, null, null, null, null, null, peer, false, null);
+    }
 
-            ArrayList<DelayedMessage> arr = delayedMessages.get(messageObject.messageOwner.attachPath);
-            if (arr != null) {
-                for (int a = 0; a < arr.size(); a++) {
-                    DelayedMessage message = arr.get(a);
-                    if (message.obj == messageObject) {
-                        message.videoLocation.videoEditedInfo = null;
-                        performSendDelayedMessage(message);
-                        arr.remove(a);
-                        a--;
-                        break;
-                    }
-                }
-                if (arr.isEmpty()) {
-                    delayedMessages.remove(messageObject.messageOwner.attachPath);
-                }
-            }
-        } else if (id == NotificationCenter.FileNewChunkAvailable) {
-            MessageObject messageObject = (MessageObject)args[0];
-            String finalPath = (String)args[1];
-            long finalSize = (Long)args[2];
-            boolean isEncrypted = ((int)messageObject.getDialogId()) == 0;
-            FileLoader.getInstance().checkUploadNewDataAvailable(finalPath, isEncrypted, finalSize);
-            if (finalSize != 0) {
-                ArrayList<DelayedMessage> arr = delayedMessages.get(messageObject.messageOwner.attachPath);
-                if (arr != null) {
-                    for (DelayedMessage message : arr) {
-                        if (message.obj == messageObject) {
-                            message.obj.messageOwner.videoEditedInfo = null;
-                            message.obj.messageOwner.message = "-1";
-                            message.obj.messageOwner.media.video.size = (int)finalSize;
-
-                            ArrayList<TLRPC.Message> messages = new ArrayList<TLRPC.Message>();
-                            messages.add(message.obj.messageOwner);
-                            MessagesStorage.getInstance().putMessages(messages, false, true, false, 0);
-                            break;
-                        }
-                    }
-                    if (arr.isEmpty()) {
-                        delayedMessages.remove(messageObject.messageOwner.attachPath);
-                    }
-                }
-            }
-        } else if (id == NotificationCenter.FilePreparingFailed) {
-            MessageObject messageObject = (MessageObject)args[0];
-            String finalPath = (String)args[1];
-            stopVideoService(messageObject.messageOwner.attachPath);
-
-            ArrayList<DelayedMessage> arr = delayedMessages.get(finalPath);
-            if (arr != null) {
-                for (int a = 0; a < arr.size(); a++) {
-                    DelayedMessage message = arr.get(a);
-                    if (message.obj == messageObject) {
-                        MessagesStorage.getInstance().markMessageAsSendError(message.obj.messageOwner.id);
-                        message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                        arr.remove(a);
-                        a--;
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.messageOwner.id);
-                        processSentMessage(message.obj.messageOwner.id);
-                    }
-                }
-                if (arr.isEmpty()) {
-                    delayedMessages.remove(finalPath);
-                }
-            }
-        }
-    }
-
-    public void cancelSendingMessage(MessageObject object) {
-        String keyToRemvoe = null;
-        boolean enc = false;
-        for (HashMap.Entry<String, ArrayList<DelayedMessage>> entry : delayedMessages.entrySet()) {
-            ArrayList<DelayedMessage> messages = entry.getValue();
-            for (int a = 0; a < messages.size(); a++) {
-                DelayedMessage message = messages.get(a);
-                if (message.obj.messageOwner.id == object.messageOwner.id) {
-                    messages.remove(a);
-                    MediaController.getInstance().cancelVideoConvert(message.obj);
-                    if (messages.size() == 0) {
-                        keyToRemvoe = entry.getKey();
-                        if (message.sendEncryptedRequest != null) {
-                            enc = true;
-                        }
-                    }
-                    break;
-                }
-            }
-        }
-        if (keyToRemvoe != null) {
-            FileLoader.getInstance().cancelUploadFile(keyToRemvoe, enc);
-            stopVideoService(keyToRemvoe);
-        }
-        ArrayList<Integer> messages = new ArrayList<Integer>();
-        messages.add(object.messageOwner.id);
-        MessagesController.getInstance().deleteMessages(messages, null, null);
-    }
-
-    public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
-        if (messageObject.messageOwner.id >= 0) {
-            return false;
-        }
-        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction) {
-            int enc_id = (int) (messageObject.getDialogId() >> 32);
-            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(enc_id);
-            if (encryptedChat == null) {
-                MessagesStorage.getInstance().markMessageAsSendError(messageObject.messageOwner.id);
-                messageObject.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, messageObject.messageOwner.id);
-                processSentMessage(messageObject.messageOwner.id);
-                return false;
-            }
-            if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                SecretChatHelper.getInstance().sendTTLMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionDeleteMessages) {
-                SecretChatHelper.getInstance().sendMessagesDeleteMessage(encryptedChat, null, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
-                SecretChatHelper.getInstance().sendClearHistoryMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
-                SecretChatHelper.getInstance().sendNotifyLayerMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionReadMessages) {
-                SecretChatHelper.getInstance().sendMessagesReadMessage(encryptedChat, null, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
-                SecretChatHelper.getInstance().sendScreenshotMessage(encryptedChat, null, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionTyping) {
-
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionResend) {
-
-            }
-            return true;
-        }
-        if (unsent) {
-            unsentMessages.put(messageObject.messageOwner.id, messageObject);
-        }
-        sendMessage(messageObject);
-        return true;
-    }
-
-    protected void processSentMessage(int id) {
-        int prevSize = unsentMessages.size();
-        unsentMessages.remove(id);
-        if (prevSize != 0 && unsentMessages.size() == 0) {
-            checkUnsentMessages();
-        }
-    }
-
-    public void processForwardFromMyName(MessageObject messageObject, long did) {
-        if (messageObject == null) {
-            return;
-        }
-        if (messageObject.messageOwner.media != null && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
-            if (messageObject.messageOwner.media.photo instanceof TLRPC.TL_photo) {
-                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, did);
-            } else if (messageObject.messageOwner.media.audio instanceof TLRPC.TL_audio) {
-                sendMessage((TLRPC.TL_audio) messageObject.messageOwner.media.audio, messageObject.messageOwner.attachPath, did);
-            } else if (messageObject.messageOwner.media.video instanceof TLRPC.TL_video) {
-                TLRPC.TL_video video = (TLRPC.TL_video) messageObject.messageOwner.media.video;
-                video.videoEditedInfo = messageObject.messageOwner.videoEditedInfo;
-                sendMessage(video, null, messageObject.messageOwner.attachPath, did);
-            } else if (messageObject.messageOwner.media.document instanceof TLRPC.TL_document) {
-                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did);
-            } else if (messageObject.messageOwner.media.geo instanceof TLRPC.TL_geoPoint) {
-                sendMessage(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long, did);
-            } else if (messageObject.messageOwner.media.phone_number != null) {
-                TLRPC.User user = new TLRPC.TL_userContact();
-                user.phone = messageObject.messageOwner.media.phone_number;
-                user.first_name = messageObject.messageOwner.media.first_name;
-                user.last_name = messageObject.messageOwner.media.last_name;
-                user.id = messageObject.messageOwner.media.user_id;
-                sendMessage(user, did);
-            } else {
-                sendMessage(messageObject, did);
-            }
-        } else if (messageObject.messageOwner.message != null) {
-            sendMessage(messageObject.messageOwner.message, did);
-        } else {
-            sendMessage(messageObject, did);
-        }
-    }
-
-    public void sendMessage(TLRPC.User user, long peer) {
-        sendMessage(null, null, null, null, null, null, user, null, null, null, peer, false, null);
-    }
-
-    public void sendMessage(MessageObject message) {
-        sendMessage(null, null, null, null, null, message, null, null, null, null, message.getDialogId(), true, message.messageOwner.attachPath);
-    }
-
-    public void sendMessage(MessageObject message, long peer) {
-        sendMessage(null, null, null, null, null, message, null, null, null, null, peer, false, message.messageOwner.attachPath);
-    }
-
-    public void sendMessage(TLRPC.TL_document document, String originalPath, String path, long peer) {
-        sendMessage(null, null, null, null, null, null, null, document, null, originalPath, peer, false, path);
-    }
-
-    public void sendMessage(String message, long peer) {
-        sendMessage(message, null, null, null, null, null, null, null, null, null, peer, false, null);
-    }
-
-    public void sendMessage(double lat, double lon, long peer) {
-        sendMessage(null, lat, lon, null, null, null, null, null, null, null, peer, false, null);
-    }
-
-    public void sendMessage(TLRPC.TL_photo photo, String originalPath, long peer) {
-        sendMessage(null, null, null, photo, null, null, null, null, null, originalPath, peer, false, null);
-    }
+    public void sendMessage(TLRPC.TL_photo photo, String originalPath, long peer) {
+        sendMessage(null, null, null, photo, null, null, null, null, null, originalPath, peer, false, null);
+    }
 
     public void sendMessage(TLRPC.TL_video video, String originalPath, String path, long peer) {
         sendMessage(null, null, null, null, video, null, null, null, null, originalPath, peer, false, path);
@@ -1284,433 +938,779 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
                         reqSend.media.size = audio.size;
                         reqSend.media.mime_type = "audio/ogg";
 
-                        DelayedMessage delayedMessage = new DelayedMessage();
-                        delayedMessage.sendEncryptedRequest = reqSend;
-                        delayedMessage.type = 3;
-                        delayedMessage.obj = newMsgObj;
-                        delayedMessage.encryptedChat = encryptedChat;
-                        delayedMessage.audioLocation = audio;
-                        performSendDelayedMessage(delayedMessage);
-                    }
+                        DelayedMessage delayedMessage = new DelayedMessage();
+                        delayedMessage.sendEncryptedRequest = reqSend;
+                        delayedMessage.type = 3;
+                        delayedMessage.obj = newMsgObj;
+                        delayedMessage.encryptedChat = encryptedChat;
+                        delayedMessage.audioLocation = audio;
+                        performSendDelayedMessage(delayedMessage);
+                    }
+                }
+            } else if (type == 4) {
+                TLRPC.TL_messages_forwardMessage reqSend = new TLRPC.TL_messages_forwardMessage();
+                reqSend.peer = sendToPeer;
+                reqSend.random_id = newMsg.random_id;
+                if (msgObj.messageOwner.id >= 0) {
+                    reqSend.id = msgObj.messageOwner.id;
+                } else {
+                    reqSend.id = msgObj.messageOwner.fwd_msg_id;
+                }
+                performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.messageOwner.id);
+            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
+            processSentMessage(newMsgObj.messageOwner.id);
+        }
+    }
+
+    private void performSendDelayedMessage(final DelayedMessage message) {
+        if (message.type == 0) {
+            String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
+            putToDelayedMessages(location, message);
+            if (message.sendRequest != null) {
+                FileLoader.getInstance().uploadFile(location, false, true);
+            } else {
+                FileLoader.getInstance().uploadFile(location, true, true);
+            }
+        } else if (message.type == 1) {
+            if (message.videoLocation.videoEditedInfo != null) {
+                String location = message.obj.messageOwner.attachPath;
+                if (location == null) {
+                    location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
+                }
+                putToDelayedMessages(location, message);
+                MediaController.getInstance().scheduleVideoConvert(message.obj);
+            } else {
+                if (message.sendRequest != null) {
+                    TLRPC.InputMedia media = null;
+                    if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
+                        media = ((TLRPC.TL_messages_sendMedia) message.sendRequest).media;
+                    } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
+                        media = ((TLRPC.TL_messages_sendBroadcast) message.sendRequest).media;
+                    }
+                    if (media.file == null) {
+                        String location = message.obj.messageOwner.attachPath;
+                        if (location == null) {
+                            location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
+                        }
+                        putToDelayedMessages(location, message);
+                        if (message.obj.messageOwner.videoEditedInfo != null) {
+                            FileLoader.getInstance().uploadFile(location, false, false, message.videoLocation.size);
+                        } else {
+                            FileLoader.getInstance().uploadFile(location, false, false);
+                        }
+                    } else {
+                        String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
+                        putToDelayedMessages(location, message);
+                        FileLoader.getInstance().uploadFile(location, false, true);
+                    }
+                } else {
+                    String location = message.obj.messageOwner.attachPath;
+                    if (location == null) {
+                        location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
+                    }
+                    putToDelayedMessages(location, message);
+                    if (message.obj.messageOwner.videoEditedInfo != null) {
+                        FileLoader.getInstance().uploadFile(location, true, false, message.videoLocation.size);
+                    } else {
+                        FileLoader.getInstance().uploadFile(location, true, false);
+                    }
+                }
+            }
+        } else if (message.type == 2) {
+            TLRPC.InputMedia media = null;
+            if (message.sendRequest != null) {
+                if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
+                    media = ((TLRPC.TL_messages_sendMedia) message.sendRequest).media;
+                } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
+                    media = ((TLRPC.TL_messages_sendBroadcast) message.sendRequest).media;
+                }
+                if (media.file == null) {
+                    String location = message.obj.messageOwner.attachPath;
+                    putToDelayedMessages(location, message);
+                    if (message.sendRequest != null) {
+                        FileLoader.getInstance().uploadFile(location, false, false);
+                    } else {
+                        FileLoader.getInstance().uploadFile(location, true, false);
+                    }
+                } else if (media.thumb == null && message.location != null) {
+                    String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
+                    putToDelayedMessages(location, message);
+                    FileLoader.getInstance().uploadFile(location, false, true);
+                }
+            } else {
+                String location = message.obj.messageOwner.attachPath;
+                putToDelayedMessages(location, message);
+                FileLoader.getInstance().uploadFile(location, true, false);
+            }
+        } else if (message.type == 3) {
+            String location = message.obj.messageOwner.attachPath;
+            putToDelayedMessages(location, message);
+            if (message.sendRequest != null) {
+                FileLoader.getInstance().uploadFile(location, false, true);
+            } else {
+                FileLoader.getInstance().uploadFile(location, true, true);
+            }
+        }
+    }
+
+    protected void stopVideoService(final String path) {
+        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.stopEncodingService, path);
+                    }
+                });
+            }
+        });
+    }
+
+    private void performSendMessageRequest(final TLObject req, final TLRPC.Message newMsgObj, final String originalPath) {
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    final int oldId = newMsgObj.id;
+                    final boolean isBroadcast = req instanceof TLRPC.TL_messages_sendBroadcast;
+                    final ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
+                    final String attachPath = newMsgObj.attachPath;
+
+                    if (response instanceof TLRPC.messages_SentMessage) {
+                        TLRPC.messages_SentMessage res = (TLRPC.messages_SentMessage) response;
+                        newMsgObj.id = res.id;
+                        newMsgObj.date = res.date;
+                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.date);
+                    } else if (response instanceof TLRPC.messages_StatedMessage) {
+                        TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
+                        sentMessages.add(res.message);
+                        newMsgObj.id = res.message.id;
+                        processSentMessage(newMsgObj, res.message, originalPath);
+                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date);
+                    } else if (response instanceof TLRPC.messages_StatedMessages) {
+                        TLRPC.messages_StatedMessages res = (TLRPC.messages_StatedMessages) response;
+                        if (!res.messages.isEmpty()) {
+                            sentMessages.addAll(res.messages);
+                            TLRPC.Message message = res.messages.get(0);
+                            if (!isBroadcast) {
+                                newMsgObj.id = message.id;
+                            }
+                            processSentMessage(newMsgObj, message, originalPath);
+                        }
+                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, -1);
+                    }
+                    MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                        @Override
+                        public void run() {
+                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, oldId, (isBroadcast ? oldId : newMsgObj.id), 0, false);
+                            MessagesStorage.getInstance().putMessages(sentMessages, true, false, isBroadcast, 0);
+                            if (isBroadcast) {
+                                ArrayList<TLRPC.Message> currentMessage = new ArrayList<TLRPC.Message>();
+                                currentMessage.add(newMsgObj);
+                                newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                                MessagesStorage.getInstance().putMessages(currentMessage, true, false, false, 0);
+                            }
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                                    if (isBroadcast) {
+                                        for (TLRPC.Message message : sentMessages) {
+                                            ArrayList<MessageObject> arr = new ArrayList<MessageObject>();
+                                            MessageObject messageObject = new MessageObject(message, null, 0);
+                                            arr.add(messageObject);
+                                            MessagesController.getInstance().updateInterfaceWithMessages(messageObject.getDialogId(), arr, isBroadcast);
+                                        }
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                                    }
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.id), newMsgObj);
+                                    processSentMessage(oldId);
+                                }
+                            });
+                            if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
+                                stopVideoService(attachPath);
+                            }
+                        }
+                    });
+                } else {
+                    MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
+                            processSentMessage(newMsgObj.id);
+                            if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
+                                stopVideoService(newMsgObj.attachPath);
+                            }
+                        }
+                    });
+                }
+            }
+        }, (req instanceof TLRPC.TL_messages_forwardMessages ? null : new RPCRequest.RPCQuickAckDelegate() {
+            @Override
+            public void quickAck() {
+                final int msg_id = newMsgObj.id;
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByAck, msg_id);
+                    }
+                });
+            }
+        }), true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress, ConnectionsManager.DEFAULT_DATACENTER_ID);
+    }
+
+    private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage, String originalPath) {
+        if (sentMessage == null) {
+            return;
+        }
+        if (sentMessage.media instanceof TLRPC.TL_messageMediaPhoto && sentMessage.media.photo != null && newMsg.media instanceof TLRPC.TL_messageMediaPhoto && newMsg.media.photo != null) {
+            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.photo, 0);
+
+            for (TLRPC.PhotoSize size : sentMessage.media.photo.sizes) {
+                if (size instanceof TLRPC.TL_photoSizeEmpty) {
+                    continue;
+                }
+                for (TLRPC.PhotoSize size2 : newMsg.media.photo.sizes) {
+                    if (size.type.equals(size2.type)) {
+                        String fileName = size2.location.volume_id + "_" + size2.location.local_id;
+                        String fileName2 = size.location.volume_id + "_" + size.location.local_id;
+                        if (fileName.equals(fileName2)) {
+                            break;
+                        }
+                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
+                        File cacheFile2 = null;
+                        if (sentMessage.media.photo.sizes.size() == 1 || size.w > 80 || size.h > 80) {
+                            cacheFile2 = FileLoader.getPathToAttach(size);
+                        } else {
+                            cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
+                        }
+                        cacheFile.renameTo(cacheFile2);
+                        ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
+                        size2.location = size.location;
+                        break;
+                    }
+                }
+            }
+            sentMessage.message = newMsg.message;
+            sentMessage.attachPath = newMsg.attachPath;
+            newMsg.media.photo.id = sentMessage.media.photo.id;
+            newMsg.media.photo.access_hash = sentMessage.media.photo.access_hash;
+        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaVideo && sentMessage.media.video != null && newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
+            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.video, 2);
+
+            TLRPC.PhotoSize size2 = newMsg.media.video.thumb;
+            TLRPC.PhotoSize size = sentMessage.media.video.thumb;
+            if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
+                String fileName = size2.location.volume_id + "_" + size2.location.local_id;
+                String fileName2 = size.location.volume_id + "_" + size.location.local_id;
+                if (!fileName.equals(fileName2)) {
+                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
+                    File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
+                    cacheFile.renameTo(cacheFile2);
+                    ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
+                    size2.location = size.location;
+                }
+            }
+
+            sentMessage.message = newMsg.message;
+            newMsg.media.video.dc_id = sentMessage.media.video.dc_id;
+            newMsg.media.video.id = sentMessage.media.video.id;
+            newMsg.media.video.access_hash = sentMessage.media.video.access_hash;
+
+            if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
+                File cacheFile = new File(newMsg.attachPath);
+                File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.video);
+                if (!cacheFile.renameTo(cacheFile2)) {
+                    sentMessage.attachPath = newMsg.attachPath;
+                }
+            } else {
+                sentMessage.attachPath = newMsg.attachPath;
+            }
+        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaDocument && sentMessage.media.document != null && newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
+            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 1);
+
+            TLRPC.PhotoSize size2 = newMsg.media.document.thumb;
+            TLRPC.PhotoSize size = sentMessage.media.document.thumb;
+            if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
+                String fileName = size2.location.volume_id + "_" + size2.location.local_id;
+                String fileName2 = size.location.volume_id + "_" + size.location.local_id;
+                if (!fileName.equals(fileName2)) {
+                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
+                    File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
+                    cacheFile.renameTo(cacheFile2);
+                    ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
+                    size2.location = size.location;
+                }
+            }
+
+            newMsg.media.document.dc_id = sentMessage.media.document.dc_id;
+            newMsg.media.document.id = sentMessage.media.document.id;
+            newMsg.media.document.access_hash = sentMessage.media.document.access_hash;
+
+            if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
+                File cacheFile = new File(newMsg.attachPath);
+                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.document);
+                if (!cacheFile.renameTo(cacheFile2)) {
+                    sentMessage.attachPath = newMsg.attachPath;
+                    sentMessage.message = newMsg.message;
+                } else {
+                    newMsg.attachPath = "";
+                }
+            } else {
+                sentMessage.attachPath = newMsg.attachPath;
+                sentMessage.message = newMsg.message;
+            }
+        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaAudio && sentMessage.media.audio != null && newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
+            sentMessage.message = newMsg.message;
+
+            String fileName = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".ogg";
+            newMsg.media.audio.dc_id = sentMessage.media.audio.dc_id;
+            newMsg.media.audio.id = sentMessage.media.audio.id;
+            newMsg.media.audio.access_hash = sentMessage.media.audio.access_hash;
+            String fileName2 = sentMessage.media.audio.dc_id + "_" + sentMessage.media.audio.id + ".ogg";
+            if (!fileName.equals(fileName2)) {
+                File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.audio);
+                if (!cacheFile.renameTo(cacheFile2)) {
+                    sentMessage.attachPath = newMsg.attachPath;
                 }
-            } else if (type == 4) {
-                TLRPC.TL_messages_forwardMessage reqSend = new TLRPC.TL_messages_forwardMessage();
-                reqSend.peer = sendToPeer;
-                reqSend.random_id = newMsg.random_id;
-                if (msgObj.messageOwner.id >= 0) {
-                    reqSend.id = msgObj.messageOwner.id;
-                } else {
-                    reqSend.id = msgObj.messageOwner.fwd_msg_id;
+            }
+        }
+    }
+
+    private void putToDelayedMessages(String location, DelayedMessage message) {
+        ArrayList<DelayedMessage> arrayList = delayedMessages.get(location);
+        if (arrayList == null) {
+            arrayList = new ArrayList<DelayedMessage>();
+            delayedMessages.put(location, arrayList);
+        }
+        arrayList.add(message);
+    }
+
+    protected long getNextRandomId() {
+        long val = 0;
+        while (val == 0) {
+            val = Utilities.random.nextLong();
+        }
+        return val;
+    }
+
+    public void checkUnsentMessages() {
+        MessagesStorage.getInstance().getUnsentMessages(1000);
+    }
+
+    protected void processUnsentMessages(final ArrayList<TLRPC.Message> messages, final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final ArrayList<TLRPC.EncryptedChat> encryptedChats) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                MessagesController.getInstance().putUsers(users, true);
+                MessagesController.getInstance().putChats(chats, true);
+                MessagesController.getInstance().putEncryptedChats(encryptedChats, true);
+                for (TLRPC.Message message : messages) {
+                    MessageObject messageObject = new MessageObject(message, null, 0);
+                    retrySendMessage(messageObject, true);
                 }
-                performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
             }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.messageOwner.id);
-            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
-            processSentMessage(newMsgObj.messageOwner.id);
+        });
+    }
+
+    public TLRPC.TL_photo generatePhotoSizes(String path, Uri imageUri) {
+        long time = System.currentTimeMillis();
+        Bitmap bitmap = ImageLoader.loadBitmap(path, imageUri, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize());
+        if (bitmap == null && AndroidUtilities.getPhotoSize() != 800) {
+            bitmap = ImageLoader.loadBitmap(path, imageUri, 800, 800);
+        }
+        ArrayList<TLRPC.PhotoSize> sizes = new ArrayList<TLRPC.PhotoSize>();
+        TLRPC.PhotoSize size = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, true);
+        if (size != null) {
+            sizes.add(size);
+        }
+        size = ImageLoader.scaleAndSaveImage(bitmap, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 80, false);
+        if (size != null) {
+            sizes.add(size);
+        }
+        if (bitmap != null) {
+            bitmap.recycle();
+        }
+        if (sizes.isEmpty()) {
+            return null;
+        } else {
+            UserConfig.saveConfig(false);
+            TLRPC.TL_photo photo = new TLRPC.TL_photo();
+            photo.user_id = UserConfig.getClientUserId();
+            photo.date = ConnectionsManager.getInstance().getCurrentTime();
+            photo.sizes = sizes;
+            photo.caption = "";
+            photo.geo = new TLRPC.TL_geoPointEmpty();
+            return photo;
         }
     }
 
-    private void performSendDelayedMessage(final DelayedMessage message) {
-        if (message.type == 0) {
-            String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
-            putToDelayedMessages(location, message);
-            if (message.sendRequest != null) {
-                FileLoader.getInstance().uploadFile(location, false, true);
-            } else {
-                FileLoader.getInstance().uploadFile(location, true, true);
+    private static boolean prepareSendingDocumentInternal(String path, String originalPath, Uri uri, String mime, final long dialog_id) {
+        if ((path == null || path.length() == 0) && uri == null) {
+            return false;
+        }
+        MimeTypeMap myMime = MimeTypeMap.getSingleton();
+        if (uri != null) {
+            String extension = null;
+            if (mime != null) {
+                extension = myMime.getExtensionFromMimeType(mime);
             }
-        } else if (message.type == 1) {
-            if (message.videoLocation.videoEditedInfo != null) {
-                String location = message.obj.messageOwner.attachPath;
-                if (location == null) {
-                    location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
-                }
-                putToDelayedMessages(location, message);
-                MediaController.getInstance().scheduleVideoConvert(message.obj);
-            } else {
-                if (message.sendRequest != null) {
-                    TLRPC.InputMedia media = null;
-                    if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
-                        media = ((TLRPC.TL_messages_sendMedia) message.sendRequest).media;
-                    } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
-                        media = ((TLRPC.TL_messages_sendBroadcast) message.sendRequest).media;
-                    }
-                    if (media.file == null) {
-                        String location = message.obj.messageOwner.attachPath;
-                        if (location == null) {
-                            location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
-                        }
-                        putToDelayedMessages(location, message);
-                        if (message.obj.messageOwner.videoEditedInfo != null) {
-                            FileLoader.getInstance().uploadFile(location, false, false, message.videoLocation.size);
-                        } else {
-                            FileLoader.getInstance().uploadFile(location, false, false);
-                        }
-                    } else {
-                        String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
-                        putToDelayedMessages(location, message);
-                        FileLoader.getInstance().uploadFile(location, false, true);
-                    }
+            if (extension == null) {
+                extension = "txt";
+            }
+            path = MediaController.copyDocumentToCache(uri, extension);
+            if (path == null) {
+                return false;
+            }
+        }
+        final File f = new File(path);
+        if (!f.exists() || f.length() == 0) {
+            return false;
+        }
+
+        boolean isEncrypted = (int)dialog_id == 0;
+
+        String name = f.getName();
+        if (name == null) {
+            name = "noname";
+        }
+        String ext = "";
+        int idx = path.lastIndexOf(".");
+        if (idx != -1) {
+            ext = path.substring(idx + 1);
+        }
+        if (originalPath != null) {
+            originalPath += "" + f.length();
+        }
+
+        TLRPC.TL_document document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 1 : 4);
+        if (document == null && !path.equals(originalPath)) {
+            document = (TLRPC.TL_document)MessagesStorage.getInstance().getSentFile(path + f.length(), !isEncrypted ? 1 : 4);
+        }
+        if (document == null) {
+            document = new TLRPC.TL_document();
+            document.id = 0;
+            document.user_id = UserConfig.getClientUserId();
+            document.date = ConnectionsManager.getInstance().getCurrentTime();
+            document.file_name = name;
+            document.size = (int)f.length();
+            document.dc_id = 0;
+            if (ext.length() != 0) {
+                String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                if (mimeType != null) {
+                    document.mime_type = mimeType;
                 } else {
-                    String location = message.obj.messageOwner.attachPath;
-                    if (location == null) {
-                        location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
-                    }
-                    putToDelayedMessages(location, message);
-                    if (message.obj.messageOwner.videoEditedInfo != null) {
-                        FileLoader.getInstance().uploadFile(location, true, false, message.videoLocation.size);
-                    } else {
-                        FileLoader.getInstance().uploadFile(location, true, false);
-                    }
+                    document.mime_type = "application/octet-stream";
                 }
+            } else {
+                document.mime_type = "application/octet-stream";
             }
-        } else if (message.type == 2) {
-            TLRPC.InputMedia media = null;
-            if (message.sendRequest != null) {
-                if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
-                    media = ((TLRPC.TL_messages_sendMedia) message.sendRequest).media;
-                } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
-                    media = ((TLRPC.TL_messages_sendBroadcast) message.sendRequest).media;
-                }
-                if (media.file == null) {
-                    String location = message.obj.messageOwner.attachPath;
-                    putToDelayedMessages(location, message);
-                    if (message.sendRequest != null) {
-                        FileLoader.getInstance().uploadFile(location, false, false);
-                    } else {
-                        FileLoader.getInstance().uploadFile(location, true, false);
+            if (document.mime_type.equals("image/gif")) {
+                try {
+                    Bitmap bitmap = ImageLoader.loadBitmap(f.getAbsolutePath(), null, 90, 90);
+                    if (bitmap != null) {
+                        document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, isEncrypted);
                     }
-                } else if (media.thumb == null && message.location != null) {
-                    String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
-                    putToDelayedMessages(location, message);
-                    FileLoader.getInstance().uploadFile(location, false, true);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
-            } else {
-                String location = message.obj.messageOwner.attachPath;
-                putToDelayedMessages(location, message);
-                FileLoader.getInstance().uploadFile(location, true, false);
             }
-        } else if (message.type == 3) {
-            String location = message.obj.messageOwner.attachPath;
-            putToDelayedMessages(location, message);
-            if (message.sendRequest != null) {
-                FileLoader.getInstance().uploadFile(location, false, true);
-            } else {
-                FileLoader.getInstance().uploadFile(location, true, true);
+            if (document.thumb == null) {
+                document.thumb = new TLRPC.TL_photoSizeEmpty();
+                document.thumb.type = "s";
             }
         }
-    }
-
-    protected void stopVideoService(final String path) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+
+        final TLRPC.TL_document documentFinal = document;
+        final String originalPathFinal = originalPath;
+        final String pathFinal = path;
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.stopEncodingService, path);
-                    }
-                });
+                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id);
             }
         });
+        return true;
     }
 
-    private void performSendMessageRequest(final TLObject req, final TLRPC.Message newMsgObj, final String originalPath) {
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    final int oldId = newMsgObj.id;
-                    final boolean isBroadcast = req instanceof TLRPC.TL_messages_sendBroadcast;
-                    final ArrayList<TLRPC.Message> sentMessages = new ArrayList<TLRPC.Message>();
-                    final String attachPath = newMsgObj.attachPath;
+    public static void prepareSendingDocument(String path, String originalPath, Uri uri, String mine, long dialog_id) {
+        if ((path == null || originalPath == null) && uri == null) {
+            return;
+        }
+        ArrayList<String> paths = new ArrayList<String>();
+        ArrayList<String> originalPaths = new ArrayList<String>();
+        ArrayList<Uri> uris = null;
+        if (uri != null) {
+            uris = new ArrayList<Uri>();
+        }
+        paths.add(path);
+        originalPaths.add(originalPath);
+        prepareSendingDocuments(paths, originalPaths, uris, mine, dialog_id);
+    }
 
-                    if (response instanceof TLRPC.messages_SentMessage) {
-                        TLRPC.messages_SentMessage res = (TLRPC.messages_SentMessage) response;
-                        newMsgObj.id = res.id;
-                        newMsgObj.date = res.date;
-                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.date);
-                    } else if (response instanceof TLRPC.messages_StatedMessage) {
-                        TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
-                        sentMessages.add(res.message);
-                        newMsgObj.id = res.message.id;
-                        processSentMessage(newMsgObj, res.message, originalPath);
-                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date);
-                    } else if (response instanceof TLRPC.messages_StatedMessages) {
-                        TLRPC.messages_StatedMessages res = (TLRPC.messages_StatedMessages) response;
-                        if (!res.messages.isEmpty()) {
-                            sentMessages.addAll(res.messages);
-                            TLRPC.Message message = res.messages.get(0);
-                            if (!isBroadcast) {
-                                newMsgObj.id = message.id;
-                            }
-                            processSentMessage(newMsgObj, message, originalPath);
+    public static void prepareSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths, final ArrayList<Uri> uris, final String mime, final long dialog_id) {
+        if (paths == null && originalPaths == null && uris == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
+            return;
+        }
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                boolean error = false;
+                if (paths != null) {
+                    for (int a = 0; a < paths.size(); a++) {
+                        if (!prepareSendingDocumentInternal(paths.get(a), originalPaths.get(a), null, mime, dialog_id)) {
+                            error = true;
                         }
-                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, -1);
                     }
-                    MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, oldId, (isBroadcast ? oldId : newMsgObj.id), 0, false);
-                            MessagesStorage.getInstance().putMessages(sentMessages, true, false, isBroadcast, 0);
-                            if (isBroadcast) {
-                                ArrayList<TLRPC.Message> currentMessage = new ArrayList<TLRPC.Message>();
-                                currentMessage.add(newMsgObj);
-                                newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                                MessagesStorage.getInstance().putMessages(currentMessage, true, false, false, 0);
-                            }
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                                    if (isBroadcast) {
-                                        for (TLRPC.Message message : sentMessages) {
-                                            ArrayList<MessageObject> arr = new ArrayList<MessageObject>();
-                                            MessageObject messageObject = new MessageObject(message, null, 0);
-                                            arr.add(messageObject);
-                                            MessagesController.getInstance().updateInterfaceWithMessages(messageObject.getDialogId(), arr, isBroadcast);
-                                        }
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                                    }
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.id), newMsgObj);
-                                    processSentMessage(oldId);
-                                }
-                            });
-                            if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                stopVideoService(attachPath);
-                            }
+                }
+                if (uris != null) {
+                    for (int a = 0; a < uris.size(); a++) {
+                        if (!prepareSendingDocumentInternal(null, null, uris.get(a), mime, dialog_id)) {
+                            error = true;
                         }
-                    });
-                } else {
-                    MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
+                    }
+                }
+                if (error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
-                            processSentMessage(newMsgObj.id);
-                            if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                stopVideoService(newMsgObj.attachPath);
+                            try {
+                                Toast toast = Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
+                                toast.show();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
                             }
                         }
                     });
                 }
             }
-        }, (req instanceof TLRPC.TL_messages_forwardMessages ? null : new RPCRequest.RPCQuickAckDelegate() {
-            @Override
-            public void quickAck() {
-                final int msg_id = newMsgObj.id;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByAck, msg_id);
-                    }
-                });
-            }
-        }), true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress, ConnectionsManager.DEFAULT_DATACENTER_ID);
+        }).start();
     }
 
-    private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage, String originalPath) {
-        if (sentMessage == null) {
+    public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long dialog_id) {
+        ArrayList<String> paths = null;
+        ArrayList<Uri> uris = null;
+        if (imageFilePath != null && imageFilePath.length() != 0) {
+            paths = new ArrayList<String>();
+            paths.add(imageFilePath);
+        }
+        if (imageUri != null) {
+            uris = new ArrayList<Uri>();
+            uris.add(imageUri);
+        }
+        prepareSendingPhotos(paths, uris, dialog_id);
+    }
+
+    public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id) {
+        if (paths == null && uris == null || paths != null && paths.isEmpty() || uris != null && uris.isEmpty()) {
             return;
         }
-        if (sentMessage.media instanceof TLRPC.TL_messageMediaPhoto && sentMessage.media.photo != null && newMsg.media instanceof TLRPC.TL_messageMediaPhoto && newMsg.media.photo != null) {
-            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.photo, 0);
+        final ArrayList<String> pathsCopy = new ArrayList<String>();
+        final ArrayList<Uri> urisCopy = new ArrayList<Uri>();
+        if (paths != null) {
+            pathsCopy.addAll(paths);
+        }
+        if (uris != null) {
+            urisCopy.addAll(uris);
+        }
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                boolean isEncrypted = (int)dialog_id == 0;
 
-            for (TLRPC.PhotoSize size : sentMessage.media.photo.sizes) {
-                if (size instanceof TLRPC.TL_photoSizeEmpty) {
-                    continue;
-                }
-                for (TLRPC.PhotoSize size2 : newMsg.media.photo.sizes) {
-                    if (size.type.equals(size2.type)) {
-                        String fileName = size2.location.volume_id + "_" + size2.location.local_id;
-                        String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                        if (fileName.equals(fileName2)) {
-                            break;
-                        }
-                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
-                        File cacheFile2 = null;
-                        if (sentMessage.media.photo.sizes.size() == 1 || size.w > 80 || size.h > 80) {
-                            cacheFile2 = FileLoader.getPathToAttach(size);
-                        } else {
-                            cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
-                        }
-                        cacheFile.renameTo(cacheFile2);
-                        ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
-                        size2.location = size.location;
-                        break;
+                ArrayList<String> sendAsDocuments = null;
+                ArrayList<String> sendAsDocumentsOriginal = null;
+                int count = !pathsCopy.isEmpty() ? pathsCopy.size() : urisCopy.size();
+                String path = null;
+                Uri uri = null;
+                for (int a = 0; a < count; a++) {
+                    if (!pathsCopy.isEmpty()) {
+                        path = pathsCopy.get(a);
+                    } else if (!urisCopy.isEmpty()) {
+                        uri = urisCopy.get(a);
                     }
-                }
-            }
-            sentMessage.message = newMsg.message;
-            sentMessage.attachPath = newMsg.attachPath;
-            newMsg.media.photo.id = sentMessage.media.photo.id;
-            newMsg.media.photo.access_hash = sentMessage.media.photo.access_hash;
-        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaVideo && sentMessage.media.video != null && newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
-            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.video, 2);
-
-            TLRPC.PhotoSize size2 = newMsg.media.video.thumb;
-            TLRPC.PhotoSize size = sentMessage.media.video.thumb;
-            if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
-                String fileName = size2.location.volume_id + "_" + size2.location.local_id;
-                String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                if (!fileName.equals(fileName2)) {
-                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
-                    File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
-                    cacheFile.renameTo(cacheFile2);
-                    ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
-                    size2.location = size.location;
-                }
-            }
-
-            sentMessage.message = newMsg.message;
-            newMsg.media.video.dc_id = sentMessage.media.video.dc_id;
-            newMsg.media.video.id = sentMessage.media.video.id;
-            newMsg.media.video.access_hash = sentMessage.media.video.access_hash;
-
-            if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
-                File cacheFile = new File(newMsg.attachPath);
-                File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.video);
-                if (!cacheFile.renameTo(cacheFile2)) {
-                    sentMessage.attachPath = newMsg.attachPath;
-                }
-            } else {
-                sentMessage.attachPath = newMsg.attachPath;
-            }
-        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaDocument && sentMessage.media.document != null && newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
-            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 1);
 
-            TLRPC.PhotoSize size2 = newMsg.media.document.thumb;
-            TLRPC.PhotoSize size = sentMessage.media.document.thumb;
-            if (size2.location != null && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
-                String fileName = size2.location.volume_id + "_" + size2.location.local_id;
-                String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                if (!fileName.equals(fileName2)) {
-                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
-                    File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
-                    cacheFile.renameTo(cacheFile2);
-                    ImageLoader.getInstance().replaceImageInCache(fileName, fileName2);
-                    size2.location = size.location;
-                }
-            }
+                    String originalPath = path;
+                    String tempPath = path;
+                    if (tempPath == null && uri != null) {
+                        tempPath = Utilities.getPath(uri);
+                        originalPath = uri.toString();
+                    }
 
-            newMsg.media.document.dc_id = sentMessage.media.document.dc_id;
-            newMsg.media.document.id = sentMessage.media.document.id;
-            newMsg.media.document.access_hash = sentMessage.media.document.access_hash;
+                    boolean isGif = false;
+                    if (tempPath != null && tempPath.endsWith(".gif")) {
+                        isGif = true;
+                    } else if (tempPath == null && uri != null) {
+                        isGif = MediaController.isGif(uri);
+                        if (isGif) {
+                            originalPath = uri.toString();
+                            tempPath = MediaController.copyDocumentToCache(uri, "gif");
+                        }
+                    }
 
-            if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
-                File cacheFile = new File(newMsg.attachPath);
-                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.document);
-                if (!cacheFile.renameTo(cacheFile2)) {
-                    sentMessage.attachPath = newMsg.attachPath;
-                    sentMessage.message = newMsg.message;
-                } else {
-                    newMsg.attachPath = "";
+                    if (isGif) {
+                        if (sendAsDocuments == null) {
+                            sendAsDocuments = new ArrayList<String>();
+                            sendAsDocumentsOriginal = new ArrayList<String>();
+                        }
+                        sendAsDocuments.add(tempPath);
+                        sendAsDocumentsOriginal.add(originalPath);
+                    } else {
+                        if (tempPath != null) {
+                            File temp = new File(tempPath);
+                            originalPath += temp.length() + "_" + temp.lastModified();
+                        } else {
+                            originalPath = null;
+                        }
+                        TLRPC.TL_photo photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 0 : 3);
+                        if (photo == null && uri != null) {
+                            photo = (TLRPC.TL_photo)MessagesStorage.getInstance().getSentFile(Utilities.getPath(uri), !isEncrypted ? 0 : 3);
+                        }
+                        if (photo == null) {
+                            photo = SendMessagesHelper.getInstance().generatePhotoSizes(path, uri);
+                        }
+                        if (photo != null) {
+                            final String originalPathFinal = originalPath;
+                            final TLRPC.TL_photo photoFinal = photo;
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, dialog_id);
+                                }
+                            });
+                        }
+                    }
                 }
-            } else {
-                sentMessage.attachPath = newMsg.attachPath;
-                sentMessage.message = newMsg.message;
-            }
-        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaAudio && sentMessage.media.audio != null && newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
-            sentMessage.message = newMsg.message;
-
-            String fileName = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".ogg";
-            newMsg.media.audio.dc_id = sentMessage.media.audio.dc_id;
-            newMsg.media.audio.id = sentMessage.media.audio.id;
-            newMsg.media.audio.access_hash = sentMessage.media.audio.access_hash;
-            String fileName2 = sentMessage.media.audio.dc_id + "_" + sentMessage.media.audio.id + ".ogg";
-            if (!fileName.equals(fileName2)) {
-                File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.audio);
-                if (!cacheFile.renameTo(cacheFile2)) {
-                    sentMessage.attachPath = newMsg.attachPath;
+                if (sendAsDocuments != null && !sendAsDocuments.isEmpty()) {
+                    for (int a = 0; a < sendAsDocuments.size(); a++) {
+                        prepareSendingDocumentInternal(sendAsDocuments.get(a), sendAsDocumentsOriginal.get(a), null, "gif", dialog_id);
+                    }
                 }
             }
-        }
-    }
-
-    private void putToDelayedMessages(String location, DelayedMessage message) {
-        ArrayList<DelayedMessage> arrayList = delayedMessages.get(location);
-        if (arrayList == null) {
-            arrayList = new ArrayList<DelayedMessage>();
-            delayedMessages.put(location, arrayList);
-        }
-        arrayList.add(message);
+        }).start();
     }
 
-    protected long getNextRandomId() {
-        long val = 0;
-        while (val == 0) {
-            val = Utilities.random.nextLong();
+    public static void prepareSendingVideo(final String videoPath, final long estimatedSize, final long duration, final int width, final int height, final TLRPC.VideoEditedInfo videoEditedInfo, final long dialog_id) {
+        if (videoPath == null || videoPath.length() == 0) {
+            return;
         }
-        return val;
-    }
-
-    public void checkUnsentMessages() {
-        MessagesStorage.getInstance().getUnsentMessages(1000);
-    }
-
-    protected void processUnsentMessages(final ArrayList<TLRPC.Message> messages, final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final ArrayList<TLRPC.EncryptedChat> encryptedChats) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
+        new Thread(new Runnable() {
             @Override
             public void run() {
-                MessagesController.getInstance().putUsers(users, true);
-                MessagesController.getInstance().putChats(chats, true);
-                MessagesController.getInstance().putEncryptedChats(encryptedChats, true);
-                for (TLRPC.Message message : messages) {
-                    MessageObject messageObject = new MessageObject(message, null, 0);
-                    retrySendMessage(messageObject, true);
+                boolean isEncrypted = (int)dialog_id == 0;
+
+                String path = videoPath;
+                String originalPath = videoPath;
+                File temp = new File(originalPath);
+                originalPath += temp.length() + "_" + temp.lastModified();
+                if (videoEditedInfo != null) {
+                    originalPath += duration + "_" + videoEditedInfo.startTime + "_" + videoEditedInfo.endTime;
                 }
-            }
-        });
-    }
+                TLRPC.TL_video video = (TLRPC.TL_video)MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 2 : 5);
+                if (video == null) {
+                    Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
+                    TLRPC.PhotoSize size = ImageLoader.scaleAndSaveImage(thumb, 90, 90, 55, isEncrypted);
+                    video = new TLRPC.TL_video();
+                    video.thumb = size;
+                    if (video.thumb == null) {
+                        video.thumb = new TLRPC.TL_photoSizeEmpty();
+                        video.thumb.type = "s";
+                    } else {
+                        video.thumb.type = "s";
+                    }
+                    video.caption = "";
+                    video.mime_type = "video/mp4";
+                    video.id = 0;
+                    UserConfig.saveConfig(false);
 
-    public TLRPC.TL_photo generatePhotoSizes(String path, Uri imageUri) {
-        long time = System.currentTimeMillis();
-        Bitmap bitmap = ImageLoader.loadBitmap(path, imageUri, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize());
-        if (bitmap == null && AndroidUtilities.getPhotoSize() != 800) {
-            bitmap = ImageLoader.loadBitmap(path, imageUri, 800, 800);
-        }
-        ArrayList<TLRPC.PhotoSize> sizes = new ArrayList<TLRPC.PhotoSize>();
-        TLRPC.PhotoSize size = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, true);
-        if (size != null) {
-            sizes.add(size);
-        }
-        size = ImageLoader.scaleAndSaveImage(bitmap, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 80, false);
-        if (size != null) {
-            sizes.add(size);
-        }
-        if (bitmap != null) {
-            bitmap.recycle();
-        }
-        if (sizes.isEmpty()) {
-            return null;
-        } else {
-            UserConfig.saveConfig(false);
-            TLRPC.TL_photo photo = new TLRPC.TL_photo();
-            photo.user_id = UserConfig.getClientUserId();
-            photo.date = ConnectionsManager.getInstance().getCurrentTime();
-            photo.sizes = sizes;
-            photo.caption = "";
-            photo.geo = new TLRPC.TL_geoPointEmpty();
-            return photo;
-        }
-    }
+                    if (videoEditedInfo != null) {
+                        video.duration = (int)(duration / 1000);
+                        if (videoEditedInfo.rotationValue == 90 || videoEditedInfo.rotationValue == 270) {
+                            video.w = height;
+                            video.h = width;
+                        } else {
+                            video.w = width;
+                            video.h = height;
+                        }
+                        video.size = (int)estimatedSize;
+                        video.videoEditedInfo = videoEditedInfo;
+                        String fileName = Integer.MIN_VALUE + "_" + UserConfig.lastLocalId + ".mp4";
+                        UserConfig.lastLocalId--;
+                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+                        UserConfig.saveConfig(false);
+                        path = cacheFile.getAbsolutePath();
+                    } else {
+                        if (temp != null && temp.exists()) {
+                            video.size = (int) temp.length();
+                        }
+                        boolean infoObtained = false;
+                        if (Build.VERSION.SDK_INT >= 14) {
+                            MediaMetadataRetriever mediaMetadataRetriever = null;
+                            try {
+                                mediaMetadataRetriever = new MediaMetadataRetriever();
+                                mediaMetadataRetriever.setDataSource(videoPath);
+                                String width = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH);
+                                if (width != null) {
+                                    video.w = Integer.parseInt(width);
+                                }
+                                String height = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT);
+                                if (height != null) {
+                                    video.h = Integer.parseInt(height);
+                                }
+                                String duration = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
+                                if (duration != null) {
+                                    video.duration = (int) Math.ceil(Long.parseLong(duration) / 1000.0f);
+                                }
+                                infoObtained = true;
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            } finally {
+                                try {
+                                    if (mediaMetadataRetriever != null) {
+                                        mediaMetadataRetriever.release();
+                                        mediaMetadataRetriever = null;
+                                    }
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        }
+                        if (!infoObtained) {
+                            try {
+                                MediaPlayer mp = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(videoPath)));
+                                if (mp != null) {
+                                    video.duration = (int) Math.ceil(mp.getDuration() / 1000.0f);
+                                    video.w = mp.getVideoWidth();
+                                    video.h = mp.getVideoHeight();
+                                    mp.release();
+                                }
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                        }
+                    }
+                }
 
-    private class DelayedMessage {
-        public TLObject sendRequest;
-        public TLRPC.TL_decryptedMessage sendEncryptedRequest;
-        public int type;
-        public String originalPath;
-        public TLRPC.FileLocation location;
-        public TLRPC.TL_video videoLocation;
-        public TLRPC.TL_audio audioLocation;
-        public TLRPC.TL_document documentLocation;
-        public MessageObject obj;
-        public TLRPC.EncryptedChat encryptedChat;
+                final TLRPC.TL_video videoFinal = video;
+                final String originalPathFinal = originalPath;
+                final String finalPath = path;
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        SendMessagesHelper.getInstance().sendMessage(videoFinal, originalPathFinal, finalPath, dialog_id);
+                    }
+                });
+            }
+        }).start();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java b/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
index 2ef799651..c4470fa41 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
@@ -26,7 +26,7 @@
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        if (intent.getAction().equals("android.provider.Telephony.SMS_RECEIVED")) {
+        if(intent.getAction().equals("android.provider.Telephony.SMS_RECEIVED")) {
             if (!AndroidUtilities.isWaitingForSms()) {
                 return;
             }
@@ -37,8 +37,8 @@ public void onReceive(Context context, Intent intent) {
                     Object[] pdus = (Object[]) bundle.get("pdus");
                     msgs = new SmsMessage[pdus.length];
                     String wholeString = "";
-                    for (int i = 0; i < msgs.length; i++) {
-                        msgs[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);
+                    for(int i = 0; i < msgs.length; i++){
+                        msgs[i] = SmsMessage.createFromPdu((byte[])pdus[i]);
                         wholeString += msgs[i].getMessageBody();
                     }
 
@@ -55,7 +55,7 @@ public void onReceive(Context context, Intent intent) {
                         FileLog.e("tmessages", e);
                     }
 
-                } catch (Exception e) {
+                } catch(Exception e) {
                     FileLog.e("tmessages", e);
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java b/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java
index fa5e75def..fdfd1c9c1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java
@@ -14,9 +14,9 @@
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 
+import org.telegram.messenger.FileLog;
 import org.telegram.R;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
 
 public class VideoEncodingService extends Service implements NotificationCenter.NotificationCenterDelegate {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/time/FormatCache.java b/TMessagesProj/src/main/java/org/telegram/android/time/FormatCache.java
index ecdd739ff..bd534bf0b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/time/FormatCache.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/time/FormatCache.java
@@ -37,49 +37,12 @@
      * No date or no time.  Used in same parameters as DateFormat.SHORT or DateFormat.LONG
      */
     static final int NONE = -1;
- private static final ConcurrentMap<MultipartKey, String> cDateTimeInstanceCache
-            = new ConcurrentHashMap<MultipartKey, String>(7);
- private final ConcurrentMap<MultipartKey, F> cInstanceCache
-            = new ConcurrentHashMap<MultipartKey, F>(7);
 
-    /**
-     * <p>Gets a date/time format for the specified styles and locale.</p>
-     *
-     * @param dateStyle date style: FULL, LONG, MEDIUM, or SHORT, null indicates no date in format
-     * @param timeStyle time style: FULL, LONG, MEDIUM, or SHORT, null indicates no time in format
-     * @param locale    The non-null locale of the desired format
-     * @return a localized standard date/time format
-     * @throws IllegalArgumentException if the Locale has no date/time pattern defined
-     */
-    // package protected, for access from test code; do not make public or protected
-    static String getPatternForStyle(final Integer dateStyle, final Integer timeStyle, final Locale locale) {
-        final MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale);
+    private final ConcurrentMap<MultipartKey, F> cInstanceCache
+            = new ConcurrentHashMap<MultipartKey, F>(7);
 
-        String pattern = cDateTimeInstanceCache.get(key);
-        if (pattern == null) {
-            try {
-                DateFormat formatter;
-                if (dateStyle == null) {
-                    formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);
-                } else if (timeStyle == null) {
-                    formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);
-                } else {
-                    formatter = DateFormat.getDateTimeInstance(dateStyle.intValue(), timeStyle.intValue(), locale);
-                }
-                pattern = ((SimpleDateFormat) formatter).toPattern();
-                final String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);
-                if (previous != null) {
-                    // even though it doesn't matter if another thread put the pattern
-                    // it's still good practice to return the String instance that is
-                    // actually in the ConcurrentMap
-                    pattern = previous;
-                }
-            } catch (final ClassCastException ex) {
-                throw new IllegalArgumentException("No date time pattern for locale: " + locale);
-            }
-        }
-        return pattern;
-    }
+    private static final ConcurrentMap<MultipartKey, String> cDateTimeInstanceCache
+            = new ConcurrentHashMap<MultipartKey, String>(7);
 
     /**
      * <p>Gets a formatter instance using the default pattern in the
@@ -125,7 +88,7 @@ public F getInstance(final String pattern, TimeZone timeZone, Locale locale) {
             }
         }
         return format;
-    ;
+    }
 
     /**
      * <p>Create a format instance using the specified pattern, time zone
@@ -138,7 +101,7 @@ public F getInstance(final String pattern, TimeZone timeZone, Locale locale) {
      * @throws IllegalArgumentException if pattern is invalid
      *                                  or <code>null</code>
      */
-    abstract protected F createInstance(String pattern, TimeZone timeZone, Locale locale)}
+    abstract protected F createInstance(String pattern, TimeZone timeZone, Locale locale);
 
     /**
      * <p>Gets a date/time formatter instance using the specified style,
@@ -153,7 +116,7 @@ abstract protected F createInstance(String pattern, TimeZone timeZone, Locale lo
      * @throws IllegalArgumentException if the Locale has no date/time
      *                                  pattern defined
      */
-    // This must remain private, see LANG-884
+    // This must remain private, see LANG-884 
     private F getDateTimeInstance(final Integer dateStyle, final Integer timeStyle, final TimeZone timeZone, Locale locale) {
         if (locale == null) {
             locale = Locale.getDefault();
@@ -214,6 +177,45 @@ F getTimeInstance(final int timeStyle, final TimeZone timeZone, Locale locale) {
         return getDateTimeInstance(null, Integer.valueOf(timeStyle), timeZone, locale);
     }
 
+    /**
+     * <p>Gets a date/time format for the specified styles and locale.</p>
+     *
+     * @param dateStyle date style: FULL, LONG, MEDIUM, or SHORT, null indicates no date in format
+     * @param timeStyle time style: FULL, LONG, MEDIUM, or SHORT, null indicates no time in format
+     * @param locale    The non-null locale of the desired format
+     * @return a localized standard date/time format
+     * @throws IllegalArgumentException if the Locale has no date/time pattern defined
+     */
+    // package protected, for access from test code; do not make public or protected
+    static String getPatternForStyle(final Integer dateStyle, final Integer timeStyle, final Locale locale) {
+        final MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale);
+
+        String pattern = cDateTimeInstanceCache.get(key);
+        if (pattern == null) {
+            try {
+                DateFormat formatter;
+                if (dateStyle == null) {
+                    formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);
+                } else if (timeStyle == null) {
+                    formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);
+                } else {
+                    formatter = DateFormat.getDateTimeInstance(dateStyle.intValue(), timeStyle.intValue(), locale);
+                }
+                pattern = ((SimpleDateFormat) formatter).toPattern();
+                final String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);
+                if (previous != null) {
+                    // even though it doesn't matter if another thread put the pattern
+                    // it's still good practice to return the String instance that is
+                    // actually in the ConcurrentMap
+                    pattern = previous;
+                }
+            } catch (final ClassCastException ex) {
+                throw new IllegalArgumentException("No date time pattern for locale: " + locale);
+            }
+        }
+        return pattern;
+    }
+
     // ----------------------------------------------------------------------
 
     /**
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/InputSurface.java b/TMessagesProj/src/main/java/org/telegram/android/video/InputSurface.java
index ef6799605..914e8be6d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/InputSurface.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/InputSurface.java
@@ -18,10 +18,10 @@
 
 import android.annotation.TargetApi;
 import android.opengl.EGL14;
+import android.opengl.EGLExt;
 import android.opengl.EGLConfig;
 import android.opengl.EGLContext;
 import android.opengl.EGLDisplay;
-import android.opengl.EGLExt;
 import android.opengl.EGLSurface;
 import android.view.Surface;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java b/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
index bad9319c5..9d9eca96d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
@@ -62,13 +62,6 @@
     private HashMap<Track, long[]> track2SampleSizes = new HashMap<Track, long[]>();
     private ByteBuffer sizeBuffer = null;
 
-    public static long gcd(long a, long b) {
-        if (b == 0) {
-            return a;
-        }
-        return gcd(b, a % b);
-    }
-
     public MP4Builder createMovie(Mp4Movie mp4Movie) throws Exception {
         currentMp4Movie = mp4Movie;
 
@@ -171,6 +164,78 @@ protected FileTypeBox createFileTypeBox() {
         return new FileTypeBox("isom", 0, minorBrands);
     }
 
+    private class InterleaveChunkMdat implements Box {
+        private Container parent;
+        private long contentSize = 1024 * 1024 * 1024;
+        private long dataOffset = 0;
+
+        public Container getParent() {
+            return parent;
+        }
+
+        public long getOffset() {
+            return dataOffset;
+        }
+
+        public void setDataOffset(long offset) {
+            dataOffset = offset;
+        }
+
+        public void setParent(Container parent) {
+            this.parent = parent;
+        }
+
+        public void setContentSize(long contentSize) {
+            this.contentSize = contentSize;
+        }
+
+        public long getContentSize() {
+            return contentSize;
+        }
+
+        public String getType() {
+            return "mdat";
+        }
+
+        public long getSize() {
+            return 16 + contentSize;
+        }
+
+        private boolean isSmallBox(long contentSize) {
+            return (contentSize + 8) < 4294967296L;
+        }
+
+        @Override
+        public void parse(DataSource dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
+
+        }
+
+        public void getBox(WritableByteChannel writableByteChannel) throws IOException {
+            ByteBuffer bb = ByteBuffer.allocate(16);
+            long size = getSize();
+            if (isSmallBox(size)) {
+                IsoTypeWriter.writeUInt32(bb, size);
+            } else {
+                IsoTypeWriter.writeUInt32(bb, 1);
+            }
+            bb.put(IsoFile.fourCCtoBytes("mdat"));
+            if (isSmallBox(size)) {
+                bb.put(new byte[8]);
+            } else {
+                IsoTypeWriter.writeUInt64(bb, size);
+            }
+            bb.rewind();
+            writableByteChannel.write(bb);
+        }
+    }
+
+    public static long gcd(long a, long b) {
+        if (b == 0) {
+            return a;
+        }
+        return gcd(b, a % b);
+    }
+
     public long getTimescale(Mp4Movie mp4Movie) {
         long timescale = mp4Movie.getTracks().iterator().next().getTimeScale();
         for (Track track : mp4Movie.getTracks()) {
@@ -374,69 +439,4 @@ protected void createStco(Track track, SampleTableBox stbl) {
         stco.setChunkOffsets(chunkOffsetsLong);
         stbl.addBox(stco);
     }
-
-    private class InterleaveChunkMdat implements Box {
-        private Container parent;
-        private long contentSize = 1024 * 1024 * 1024;
-        private long dataOffset = 0;
-
-        public Container getParent() {
-            return parent;
-        }
-
-        public void setParent(Container parent) {
-            this.parent = parent;
-        }
-
-        public long getOffset() {
-            return dataOffset;
-        }
-
-        public void setDataOffset(long offset) {
-            dataOffset = offset;
-        }
-
-        public long getContentSize() {
-            return contentSize;
-        }
-
-        public void setContentSize(long contentSize) {
-            this.contentSize = contentSize;
-        }
-
-        public String getType() {
-            return "mdat";
-        }
-
-        public long getSize() {
-            return 16 + contentSize;
-        }
-
-        private boolean isSmallBox(long contentSize) {
-            return (contentSize + 8) < 4294967296L;
-        }
-
-        @Override
-        public void parse(DataSource dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
-
-        }
-
-        public void getBox(WritableByteChannel writableByteChannel) throws IOException {
-            ByteBuffer bb = ByteBuffer.allocate(16);
-            long size = getSize();
-            if (isSmallBox(size)) {
-                IsoTypeWriter.writeUInt32(bb, size);
-            } else {
-                IsoTypeWriter.writeUInt32(bb, 1);
-            }
-            bb.put(IsoFile.fourCCtoBytes("mdat"));
-            if (isSmallBox(size)) {
-                bb.put(new byte[8]);
-            } else {
-                IsoTypeWriter.writeUInt64(bb, size);
-            }
-            bb.rewind();
-            writableByteChannel.write(bb);
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java b/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
index 7bd577c38..5fea2eb3d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
@@ -37,6 +37,10 @@ public int getHeight() {
         return height;
     }
 
+    public void setCacheFile(File file) {
+        cacheFile = file;
+    }
+
     public void setRotation(int angle) {
         if (angle == 0) {
             matrix = Matrix.ROTATE_0;
@@ -62,10 +66,6 @@ public File getCacheFile() {
         return cacheFile;
     }
 
-    public void setCacheFile(File file) {
-        cacheFile = file;
-    }
-
     public void addSample(int trackIndex, long offset, MediaCodec.BufferInfo bufferInfo) throws Exception {
         if (trackIndex < 0 || trackIndex >= tracks.size()) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java b/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
index cbea830ba..c3e2d5fde 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
@@ -35,13 +35,13 @@
 
     private static final int EGL_OPENGL_ES2_BIT = 4;
     private static final int EGL_CONTEXT_CLIENT_VERSION = 0x3098;
-    private final Object mFrameSyncObject = new Object();
     private EGL10 mEGL;
     private EGLDisplay mEGLDisplay = null;
     private EGLContext mEGLContext = null;
     private EGLSurface mEGLSurface = null;
     private SurfaceTexture mSurfaceTexture;
     private Surface mSurface;
+    private final Object mFrameSyncObject = new Object();
     private boolean mFrameAvailable;
     private TextureRenderer mTextureRender;
     private int mWidth;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java b/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
index 30e67e41c..9b29f40c1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
@@ -16,16 +16,16 @@
 
 package org.telegram.android.video;
 
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
+
 import android.annotation.TargetApi;
 import android.graphics.SurfaceTexture;
 import android.opengl.GLES11Ext;
 import android.opengl.GLES20;
 import android.opengl.Matrix;
 
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.FloatBuffer;
-
 @TargetApi(16)
 public class TextureRenderer {
 
@@ -39,6 +39,8 @@
             -1.0f, 1.0f, 0, 0.f, 1.f,
             1.0f, 1.0f, 0, 1.f, 1.f,
     };
+    private FloatBuffer mTriangleVertices;
+
     private static final String VERTEX_SHADER =
             "uniform mat4 uMVPMatrix;\n" +
             "uniform mat4 uSTMatrix;\n" +
@@ -49,6 +51,7 @@
             "  gl_Position = uMVPMatrix * aPosition;\n" +
             "  vTextureCoord = (uSTMatrix * aTextureCoord).xy;\n" +
             "}\n";
+
     private static final String FRAGMENT_SHADER =
             "#extension GL_OES_EGL_image_external : require\n" +
             "precision mediump float;\n" +
@@ -57,7 +60,7 @@
             "void main() {\n" +
             "  gl_FragColor = texture2D(sTexture, vTextureCoord);\n" +
             "}\n";
-    private FloatBuffer mTriangleVertices;
+
     private float[] mMVPMatrix = new float[16];
     private float[] mSTMatrix = new float[16];
     private int mProgram;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java b/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
index 1f3211402..cc34745ea 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
@@ -16,6 +16,7 @@
 import com.coremedia.iso.boxes.SampleDescriptionBox;
 import com.coremedia.iso.boxes.SoundMediaHeaderBox;
 import com.coremedia.iso.boxes.VideoMediaHeaderBox;
+import com.mp4parser.iso14496.part15.AvcConfigurationBox;
 import com.coremedia.iso.boxes.sampleentry.AudioSampleEntry;
 import com.coremedia.iso.boxes.sampleentry.VisualSampleEntry;
 import com.googlecode.mp4parser.boxes.mp4.ESDescriptorBox;
@@ -23,7 +24,6 @@
 import com.googlecode.mp4parser.boxes.mp4.objectdescriptors.DecoderConfigDescriptor;
 import com.googlecode.mp4parser.boxes.mp4.objectdescriptors.ESDescriptor;
 import com.googlecode.mp4parser.boxes.mp4.objectdescriptors.SLConfigDescriptor;
-import com.mp4parser.iso14496.part15.AvcConfigurationBox;
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
@@ -34,7 +34,6 @@
 
 @TargetApi(16)
 public class Track {
-    private static Map<Integer, Integer> samplingFrequencyIndexMap = new HashMap<Integer, Integer>();
     private long trackId = 0;
     private ArrayList<Sample> samples = new ArrayList<Sample>();
     private long duration = 0;
@@ -49,6 +48,7 @@
     private float volume = 0;
     private ArrayList<Long> sampleDurations = new ArrayList<Long>();
     private boolean isAudio = false;
+    private static Map<Integer, Integer> samplingFrequencyIndexMap = new HashMap<Integer, Integer>();
     private long lastPresentationTimeUs = 0;
     private boolean first = true;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Action.java b/TMessagesProj/src/main/java/org/telegram/messenger/Action.java
index 6d930e301..61ed9b70d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Action.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Action.java
@@ -11,6 +11,11 @@
 import java.util.HashMap;
 
 public class Action {
+    public interface ActionDelegate {
+        void ActionDidFinishExecution(Action action, HashMap<String, Object> params);
+        void ActionDidFailExecution(Action action);
+    }
+
     public ActionDelegate delegate;
 
     public void execute(HashMap params) {
@@ -20,9 +25,4 @@ public void execute(HashMap params) {
     public void cancel() {
 
     }
-
-    public interface ActionDelegate {
-        void ActionDidFinishExecution(Action action, HashMap<String, Object> params);
-        void ActionDidFailExecution(Action action);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 7a50ec802..b788712c3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -31,30 +31,32 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
+import org.telegram.android.NotificationsService;
+import org.telegram.android.SendMessagesHelper;
+import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NativeLoader;
-import org.telegram.android.NotificationsService;
 import org.telegram.android.ScreenReceiver;
-import org.telegram.android.SendMessagesHelper;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class ApplicationLoader extends Application {
+    private GoogleCloudMessaging gcm;
+    private AtomicInteger msgId = new AtomicInteger();
+    private String regid;
     public static final String EXTRA_MESSAGE = "message";
     public static final String PROPERTY_REG_ID = "registration_id";
     private static final String PROPERTY_APP_VERSION = "appVersion";
     private static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
     public static Drawable cachedWallpaper = null;
+
     public static volatile Context applicationContext = null;
     public static volatile Handler applicationHandler = null;
+    private static volatile boolean applicationInited = false;
+
     public static volatile boolean isScreenOn = false;
     public static volatile boolean mainInterfacePaused = true;
-    private static volatile boolean applicationInited = false;
-    private GoogleCloudMessaging gcm;
-    private AtomicInteger msgId = new AtomicInteger();
-    private String regid;
 
     public static void postInitApplication() {
         if (applicationInited) {
@@ -103,6 +105,23 @@ public static void postInitApplication() {
         MediaController.getInstance();
     }
 
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        if (Build.VERSION.SDK_INT < 11) {
+            java.lang.System.setProperty("java.net.preferIPv4Stack", "true");
+            java.lang.System.setProperty("java.net.preferIPv6Addresses", "false");
+        }
+
+        applicationContext = getApplicationContext();
+        NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
+
+        applicationHandler = new Handler(applicationContext.getMainLooper());
+
+        startPushService();
+    }
+
     public static void startPushService() {
         SharedPreferences preferences = applicationContext.getSharedPreferences("Notifications", MODE_PRIVATE);
 
@@ -132,32 +151,6 @@ public static void stopPushService() {
         alarm.cancel(pintent);
     }
 
-    public static int getAppVersion() {
-        try {
-            PackageInfo packageInfo = applicationContext.getPackageManager().getPackageInfo(applicationContext.getPackageName(), 0);
-            return packageInfo.versionCode;
-        } catch (PackageManager.NameNotFoundException e) {
-            throw new RuntimeException("Could not get package name: " + e);
-        }
-    }
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-
-        if (Build.VERSION.SDK_INT < 11) {
-            java.lang.System.setProperty("java.net.preferIPv4Stack", "true");
-            java.lang.System.setProperty("java.net.preferIPv6Addresses", "false");
-        }
-
-        applicationContext = getApplicationContext();
-        NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
-
-        applicationHandler = new Handler(applicationContext.getMainLooper());
-
-        startPushService();
-    }
-
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
@@ -218,6 +211,15 @@ private SharedPreferences getGCMPreferences(Context context) {
         return getSharedPreferences(ApplicationLoader.class.getSimpleName(), Context.MODE_PRIVATE);
     }
 
+    public static int getAppVersion() {
+        try {
+            PackageInfo packageInfo = applicationContext.getPackageManager().getPackageInfo(applicationContext.getPackageName(), 0);
+            return packageInfo.versionCode;
+        } catch (PackageManager.NameNotFoundException e) {
+            throw new RuntimeException("Could not get package name: " + e);
+        }
+    }
+
     private void registerInBackground() {
         AsyncTask<String, String, Boolean> task = new AsyncTask<String, String, Boolean>() {
             @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
index e80f21db6..db28c5c73 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
@@ -12,8 +12,6 @@
 
 public class BuffersStorage {
 
-    private final static Object sync = new Object();
-    private static volatile BuffersStorage Instance = null;
     private final ArrayList<ByteBufferDesc> freeBuffers128;
     private final ArrayList<ByteBufferDesc> freeBuffers1024;
     private final ArrayList<ByteBufferDesc> freeBuffers4096;
@@ -21,20 +19,9 @@
     private final ArrayList<ByteBufferDesc> freeBuffers32768;
     private final ArrayList<ByteBufferDesc> freeBuffersBig;
     private boolean isThreadSafe;
-    public BuffersStorage(boolean threadSafe) {
-        isThreadSafe = threadSafe;
-        freeBuffers128 = new ArrayList<ByteBufferDesc>();
-        freeBuffers1024 = new ArrayList<ByteBufferDesc>();
-        freeBuffers4096 = new ArrayList<ByteBufferDesc>();
-        freeBuffers16384 = new ArrayList<ByteBufferDesc>();
-        freeBuffers32768 = new ArrayList<ByteBufferDesc>();
-        freeBuffersBig = new ArrayList<ByteBufferDesc>();
-
-        for (int a = 0; a < 5; a++) {
-            freeBuffers128.add(new ByteBufferDesc(128));
-        }
-    }
+    private final static Object sync = new Object();
 
+    private static volatile BuffersStorage Instance = null;
     public static BuffersStorage getInstance() {
         BuffersStorage localInstance = Instance;
         if (localInstance == null) {
@@ -48,6 +35,20 @@ public static BuffersStorage getInstance() {
         return localInstance;
     }
 
+    public BuffersStorage(boolean threadSafe) {
+        isThreadSafe = threadSafe;
+        freeBuffers128 = new ArrayList<ByteBufferDesc>();
+        freeBuffers1024 = new ArrayList<ByteBufferDesc>();
+        freeBuffers4096 = new ArrayList<ByteBufferDesc>();
+        freeBuffers16384 = new ArrayList<ByteBufferDesc>();
+        freeBuffers32768 = new ArrayList<ByteBufferDesc>();
+        freeBuffersBig = new ArrayList<ByteBufferDesc>();
+
+        for (int a = 0; a < 5; a++) {
+            freeBuffers128.add(new ByteBufferDesc(128));
+        }
+    }
+
     public ByteBufferDesc getFreeBuffer(int size) {
         if (size <= 0) {
             return null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 542c25841..ed620901a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -31,31 +31,31 @@
 import java.util.regex.Pattern;
 
 public class ConnectionsManager implements Action.ActionDelegate, TcpConnection.TcpConnectionDelegate {
-    public static final int DEFAULT_DATACENTER_ID = Integer.MAX_VALUE;
-    private static final int DC_UPDATE_TIME = 60 * 60;
-    private static volatile ConnectionsManager Instance = null;
-    private final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<Integer, ArrayList<NetworkMessage>>();
-    protected int currentDatacenterId;
-    protected int movingToDatacenterId;
-    //================================================================================
-    // Requests manage
-    //================================================================================
-    int lastClassGuid = 1;
     private HashMap<Integer, Datacenter> datacenters = new HashMap<Integer, Datacenter>();
+
     private ArrayList<Long> sessionsToDestroy = new ArrayList<Long>();
     private ArrayList<Long> destroyingSessions = new ArrayList<Long>();
     private HashMap<Integer, ArrayList<Long>> quickAckIdToRequestIds = new HashMap<Integer, ArrayList<Long>>();
+
     private HashMap<Long, Integer> pingIdToDate = new HashMap<Long, Integer>();
     private ConcurrentHashMap<Integer, ArrayList<Long>> requestsByGuids = new ConcurrentHashMap<Integer, ArrayList<Long>>(100, 1.0f, 2);
     private ConcurrentHashMap<Long, Integer> requestsByClass = new ConcurrentHashMap<Long, Integer>(100, 1.0f, 2);
     private volatile int connectionState = 2;
+
     private ArrayList<RPCRequest> requestQueue = new ArrayList<RPCRequest>();
     private ArrayList<RPCRequest> runningRequests = new ArrayList<RPCRequest>();
     private ArrayList<Action> actionQueue = new ArrayList<Action>();
+
     private ArrayList<Integer> unknownDatacenterIds = new ArrayList<Integer>();
     private ArrayList<Integer> neededDatacenterIds = new ArrayList<Integer>();
     private ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<Integer>();
+    private final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<Integer, ArrayList<NetworkMessage>>();
+
     private TLRPC.TL_auth_exportedAuthorization movingAuthorization;
+    public static final int DEFAULT_DATACENTER_ID = Integer.MAX_VALUE;
+    private static final int DC_UPDATE_TIME = 60 * 60;
+    protected int currentDatacenterId;
+    protected int movingToDatacenterId;
     private long lastOutgoingMessageId = 0;
     private int isTestBackend = 0;
     private int timeDifference = 0;
@@ -67,6 +67,7 @@
     private int currentAppVersion = 0;
     private long pushSessionId;
     private boolean registeringForPush = false;
+
     private boolean paused = false;
     private long lastPingTime = System.currentTimeMillis();
     private long lastPushPingTime = 0;
@@ -74,22 +75,27 @@
     private boolean sendingPushPing = false;
     private int nextSleepTimeout = 30000;
     private long nextPingId = 0;
+
     private long lastPauseTime = System.currentTimeMillis();
     private boolean appPaused = true;
-    private volatile long nextCallToken = 1;
 
-    public ConnectionsManager() {
-        currentAppVersion = ApplicationLoader.getAppVersion();
-        lastOutgoingMessageId = 0;
-        movingToDatacenterId = DEFAULT_DATACENTER_ID;
-        loadSession();
+    private volatile long nextCallToken = 1;
 
-        if (!isNetworkOnline()) {
-            connectionState = 1;
+    private static volatile ConnectionsManager Instance = null;
+    public static ConnectionsManager getInstance() {
+        ConnectionsManager localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (ConnectionsManager.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new ConnectionsManager();
+                }
+            }
         }
+        return localInstance;
+    }
 
-        Utilities.stageQueue.postRunnable(stageRunnable, 1000);
-    }    private Runnable stageRunnable = new Runnable() {
+    private Runnable stageRunnable = new Runnable() {
         @Override
         public void run() {
             Utilities.stageQueue.handler.removeCallbacks(stageRunnable);
@@ -196,68 +202,17 @@ public void run() {
         }
     };
 
-    public static ConnectionsManager getInstance() {
-        ConnectionsManager localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (ConnectionsManager.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new ConnectionsManager();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    public static boolean isNetworkOnline() {
-        try {
-            ConnectivityManager cm = (ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-            NetworkInfo netInfo = cm.getActiveNetworkInfo();
-            if (netInfo != null && (netInfo.isConnectedOrConnecting() || netInfo.isAvailable())) {
-                return true;
-            }
-
-            netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
-
-            if (netInfo != null && netInfo.isConnectedOrConnecting()) {
-                return true;
-            } else {
-                netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
-                if(netInfo != null && netInfo.isConnectedOrConnecting()) {
-                    return true;
-                }
-            }
-        } catch(Exception e) {
-            FileLog.e("tmessages", e);
-            return true;
-        }
-        return false;
-    }
+    public ConnectionsManager() {
+        currentAppVersion = ApplicationLoader.getAppVersion();
+        lastOutgoingMessageId = 0;
+        movingToDatacenterId = DEFAULT_DATACENTER_ID;
+        loadSession();
 
-    public static boolean isRoaming() {
-        try {
-            ConnectivityManager cm = (ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-            NetworkInfo netInfo = cm.getActiveNetworkInfo();
-            if (netInfo != null) {
-                return netInfo.isRoaming();
-            }
-        } catch(Exception e) {
-            FileLog.e("tmessages", e);
+        if (!isNetworkOnline()) {
+            connectionState = 1;
         }
-        return false;
-    }
 
-    public static boolean isConnectedToWiFi() {
-        try {
-            ConnectivityManager cm = (ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-            NetworkInfo netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
-            if (netInfo != null && netInfo.getState() == NetworkInfo.State.CONNECTED) {
-                return true;
-            }
-        } catch(Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return false;
+        Utilities.stageQueue.postRunnable(stageRunnable, 1000);
     }
 
     public int getConnectionState() {
@@ -288,10 +243,6 @@ public void run() {
         });
     }
 
-    //================================================================================
-    // Config and session manage
-    //================================================================================
-
     public void applicationMovedToForeground() {
         Utilities.stageQueue.postRunnable(stageRunnable);
         Utilities.stageQueue.postRunnable(new Runnable() {
@@ -340,6 +291,10 @@ public long getPauseTime() {
         return lastPauseTime;
     }
 
+    //================================================================================
+    // Config and session manage
+    //================================================================================
+
     public Datacenter datacenterWithId(int datacenterId) {
         if (datacenterId == DEFAULT_DATACENTER_ID) {
             return datacenters.get(currentDatacenterId);
@@ -347,6 +302,14 @@ public Datacenter datacenterWithId(int datacenterId) {
         return datacenters.get(datacenterId);
     }
 
+    void setTimeDifference(int diff) {
+        boolean store = Math.abs(diff - timeDifference) > 25;
+        timeDifference = diff;
+        if (store) {
+            saveSession();
+        }
+    }
+
     public void switchBackend() {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
@@ -653,6 +616,10 @@ long getTimeFromMsgId(long messageId) {
         return (long)(messageId / 4294967296.0 * 1000);
     }
 
+    //================================================================================
+    // Requests manage
+    //================================================================================
+    int lastClassGuid = 1;
     public int generateClassGuid() {
         int guid = lastClassGuid++;
         ArrayList<Long> requests = new ArrayList<Long>();
@@ -966,6 +933,57 @@ public void run() {
         });
     }
 
+    public static boolean isNetworkOnline() {
+        try {
+            ConnectivityManager cm = (ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo netInfo = cm.getActiveNetworkInfo();
+            if (netInfo != null && (netInfo.isConnectedOrConnecting() || netInfo.isAvailable())) {
+                return true;
+            }
+
+            netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
+
+            if (netInfo != null && netInfo.isConnectedOrConnecting()) {
+                return true;
+            } else {
+                netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
+                if(netInfo != null && netInfo.isConnectedOrConnecting()) {
+                    return true;
+                }
+            }
+        } catch(Exception e) {
+            FileLog.e("tmessages", e);
+            return true;
+        }
+        return false;
+    }
+
+    public static boolean isRoaming() {
+        try {
+            ConnectivityManager cm = (ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo netInfo = cm.getActiveNetworkInfo();
+            if (netInfo != null) {
+                return netInfo.isRoaming();
+            }
+        } catch(Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return false;
+    }
+
+    public static boolean isConnectedToWiFi() {
+        try {
+            ConnectivityManager cm = (ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo netInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
+            if (netInfo != null && netInfo.getState() == NetworkInfo.State.CONNECTED) {
+                return true;
+            }
+        } catch(Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return false;
+    }
+
     public int getCurrentTime() {
         return (int)(System.currentTimeMillis() / 1000) + timeDifference;
     }
@@ -974,14 +992,6 @@ public int getTimeDifference() {
         return timeDifference;
     }
 
-    void setTimeDifference(int diff) {
-        boolean store = Math.abs(diff - timeDifference) > 25;
-        timeDifference = diff;
-        if (store) {
-            saveSession();
-        }
-    }
-
     private void processRequestQueue(int requestClass, int _datacenterId) {
         boolean haveNetwork = true;//isNetworkOnline();
 
@@ -2372,6 +2382,10 @@ void generatePing(Datacenter datacenter, boolean push) {
         }
     }
 
+    //================================================================================
+    // TCPConnection delegate
+    //================================================================================
+
     @Override
     public void tcpConnectionClosed(TcpConnection connection) {
         if (connection.getDatacenterId() == currentDatacenterId && (connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
@@ -2412,10 +2426,6 @@ public void run() {
         }
     }
 
-    //================================================================================
-    // TCPConnection delegate
-    //================================================================================
-
     @Override
     public void tcpConnectionConnected(TcpConnection connection) {
         Datacenter datacenter = datacenterWithId(connection.getDatacenterId());
@@ -2588,6 +2598,10 @@ public TLObject getRequestWithMessageId(long msgId) {
         return null;
     }
 
+    //================================================================================
+    // Move to datacenter manage
+    //================================================================================
+
     void moveToDatacenter(final int datacenterId) {
         if (movingToDatacenterId == datacenterId) {
             return;
@@ -2624,10 +2638,6 @@ public void run() {
         }
     }
 
-    //================================================================================
-    // Move to datacenter manage
-    //================================================================================
-
     void authorizeOnMovingDatacenter() {
         Datacenter datacenter = datacenterWithId(movingToDatacenterId);
         if (datacenter == null) {
@@ -2682,6 +2692,10 @@ void authorizedOnMovingDatacenter() {
         processRequestQueue(0, 0);
     }
 
+    //================================================================================
+    // Actors manage
+    //================================================================================
+
     public void dequeueActor(final Action actor, final boolean execute) {
         if (actionQueue.size() == 0 || execute) {
             actor.execute(null);
@@ -2689,10 +2703,6 @@ public void dequeueActor(final Action actor, final boolean execute) {
         actionQueue.add(actor);
     }
 
-    //================================================================================
-    // Actors manage
-    //================================================================================
-
     @Override
     public void ActionDidFinishExecution(final Action action, HashMap<String, Object> params) {
         if (action instanceof HandshakeAction) {
@@ -2736,6 +2746,4 @@ public void run() {
             }
         });
     }
-
-
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
index 4bcd20966..36823ed79 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
@@ -29,12 +29,14 @@
     public long authKeyId;
     public int lastInitVersion = 0;
     public int overridePort = -1;
-    public TcpConnection connection;
-    public TcpConnection pushConnection;
     private volatile int currentPortNum = 0;
     private volatile int currentAddressNum = 0;
+
+    public TcpConnection connection;
     private TcpConnection downloadConnection;
     private TcpConnection uploadConnection;
+    public TcpConnection pushConnection;
+
     private ArrayList<ServerSalt> authServerSaltSet = new ArrayList<ServerSalt>();
 
     public Datacenter() {
@@ -263,6 +265,18 @@ public long selectServerSalt(int date) {
         return result;
     }
 
+    private class SaltComparator implements Comparator<ServerSalt> {
+        @Override
+        public int compare(ServerSalt o1, ServerSalt o2) {
+            if (o1.validSince < o2.validSince) {
+                return -1;
+            } else if (o1.validSince > o2.validSince) {
+                return 1;
+            }
+            return 0;
+        }
+    }
+
     public void mergeServerSalts(int date, ArrayList<TLRPC.TL_futureSalt> salts) {
         if (salts == null) {
             return;
@@ -375,16 +389,4 @@ public TcpConnection getGenericConnection(TcpConnection.TcpConnectionDelegate de
         }
         return connection;
     }
-
-    private class SaltComparator implements Comparator<ServerSalt> {
-        @Override
-        public int compare(ServerSalt o1, ServerSalt o2) {
-            if (o1.validSince < o2.validSince) {
-                return -1;
-            } else if (o1.validSince > o2.validSince) {
-                return 1;
-            }
-            return 0;
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java b/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
index 763295f5e..2c68fdf6e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
@@ -13,8 +13,8 @@
 import android.os.Message;
 
 public class DispatchQueue extends Thread {
-    private final Object handlerSyncObject = new Object();
     public volatile Handler handler = null;
+    private final Object handlerSyncObject = new Object();
 
     public DispatchQueue(final String threadName) {
         setName(threadName);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index afca6af03..364e21be2 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -8,20 +8,28 @@
 
 package org.telegram.messenger;
 
-import java.io.File;
 import java.io.RandomAccessFile;
+import java.io.File;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.Scanner;
 
 public class FileLoadOperation {
 
+    private static class RequestInfo {
+        private long requestToken = 0;
+        private int offset = 0;
+        private TLRPC.TL_upload_file response = null;
+    }
+
     private final static int stateIdle = 0;
     private final static int stateDownloading = 1;
     private final static int stateFailed = 2;
     private final static int stateFinished = 3;
+
     private final static int downloadChunkSize = 1024 * 32;
     private final static int maxDownloadRequests = 3;
+
     private int datacenter_id;
     private TLRPC.InputFileLocation location;
     private volatile int state = stateIdle;
@@ -30,18 +38,28 @@
     private FileLoadOperationDelegate delegate;
     private byte[] key;
     private byte[] iv;
+
     private int nextDownloadOffset = 0;
     private ArrayList<RequestInfo> requestInfos = new ArrayList<RequestInfo>(maxDownloadRequests);
     private ArrayList<RequestInfo> delayedRequestInfos = new ArrayList<RequestInfo>(maxDownloadRequests - 1);
+
     private File cacheFileTemp;
     private File cacheFileFinal;
     private File cacheIvTemp;
+
     private String ext;
     private RandomAccessFile fileOutputStream;
     private RandomAccessFile fiv;
     private File storePath = null;
     private File tempPath = null;
     private boolean isForceRequest = false;
+
+    public static interface FileLoadOperationDelegate {
+        public abstract void didFinishLoadingFile(FileLoadOperation operation, File finalFile, File tempFile);
+        public abstract void didFailedLoadingFile(FileLoadOperation operation, int state);
+        public abstract void didChangedLoadProgress(FileLoadOperation operation, float progress);
+    }
+
     public FileLoadOperation(TLRPC.FileLocation photoLocation, int size) {
         if (photoLocation instanceof TLRPC.TL_fileEncryptedLocation) {
             location = new TLRPC.TL_inputEncryptedFileLocation();
@@ -129,14 +147,14 @@ public FileLoadOperation(TLRPC.Document documentLocation) {
         }
     }
 
-    public boolean isForceRequest() {
-        return isForceRequest;
-    }
-
     public void setForceRequest(boolean forceRequest) {
         isForceRequest = forceRequest;
     }
 
+    public boolean isForceRequest() {
+        return isForceRequest;
+    }
+
     public void setPaths(File store, File temp) {
         storePath = store;
         tempPath = temp;
@@ -449,16 +467,4 @@ public void run(TLObject response, TLRPC.TL_error error) {
     public void setDelegate(FileLoadOperationDelegate delegate) {
         this.delegate = delegate;
     }
-
-    public static interface FileLoadOperationDelegate {
-        public abstract void didFinishLoadingFile(FileLoadOperation operation, File finalFile, File tempFile);
-        public abstract void didFailedLoadingFile(FileLoadOperation operation, int state);
-        public abstract void didChangedLoadProgress(FileLoadOperation operation, float progress);
-    }
-
-    private static class RequestInfo {
-        private long requestToken = 0;
-        private int offset = 0;
-        private TLRPC.TL_upload_file response = null;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 0076cd95b..0a134c094 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -19,12 +19,21 @@
 
 public class FileLoader {
 
+    public static interface FileLoaderDelegate {
+        public abstract void fileUploadProgressChanged(String location, float progress, boolean isEncrypted);
+        public abstract void fileDidUploaded(String location, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
+        public abstract void fileDidFailedUpload(String location, boolean isEncrypted);
+        public abstract void fileDidLoaded(String location, File finalFile, File tempFile);
+        public abstract void fileDidFailedLoad(String location, int state);
+        public abstract void fileLoadProgressChanged(String location, float progress);
+    }
+
     public static final int MEDIA_DIR_IMAGE = 0;
     public static final int MEDIA_DIR_AUDIO = 1;
     public static final int MEDIA_DIR_VIDEO = 2;
     public static final int MEDIA_DIR_DOCUMENT = 3;
     public static final int MEDIA_DIR_CACHE = 4;
-    private static volatile FileLoader Instance = null;
+
     private HashMap<Integer, File> mediaDirs = null;
     private volatile DispatchQueue fileLoaderQueue = new DispatchQueue("fileUploadQueue");
 
@@ -47,6 +56,7 @@
     private int currentUploadOperationsCount = 0;
     private int currentUploadSmallOperationsCount = 0;
 
+    private static volatile FileLoader Instance = null;
     public static FileLoader getInstance() {
         FileLoader localInstance = Instance;
         if (localInstance == null) {
@@ -60,151 +70,6 @@ public static FileLoader getInstance() {
         return localInstance;
     }
 
-    public static File getPathToMessage(TLRPC.Message message) {
-        if (message == null) {
-            return new File("");
-        }
-        if (message instanceof TLRPC.TL_messageService) {
-            if (message.action.photo != null) {
-                ArrayList<TLRPC.PhotoSize> sizes = message.action.photo.sizes;
-                if (sizes.size() > 0) {
-                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        return getPathToAttach(sizeFull);
-                    }
-                }
-            }
-        } else {
-            if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                return getPathToAttach(message.media.video);
-            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                return getPathToAttach(message.media.document);
-            } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-                return getPathToAttach(message.media.audio);
-            } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                ArrayList<TLRPC.PhotoSize> sizes = message.media.photo.sizes;
-                if (sizes.size() > 0) {
-                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        return getPathToAttach(sizeFull);
-                    }
-                }
-            }
-        }
-        return new File("");
-    }
-
-    public static File getExistPathToAttach(TLObject attach) {
-        File path = getInstance().getDirectory(MEDIA_DIR_CACHE);
-        String fileName = getAttachFileName(attach);
-        File attachPath = new File(path, fileName);
-        if (attachPath.exists()) {
-            return attachPath;
-        }
-        return getPathToAttach(attach);
-    }
-
-    public static File getPathToAttach(TLObject attach) {
-        return getPathToAttach(attach, false);
-    }
-
-    public static File getPathToAttach(TLObject attach, boolean forceCache) {
-        File dir = null;
-        if (attach instanceof TLRPC.Video) {
-            TLRPC.Video video = (TLRPC.Video)attach;
-            if (forceCache || video.key != null) {
-                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
-            } else {
-                dir = getInstance().getDirectory(MEDIA_DIR_VIDEO);
-            }
-        } else if (attach instanceof TLRPC.Document) {
-            TLRPC.Document document = (TLRPC.Document)attach;
-            if (forceCache || document.key != null) {
-                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
-            } else {
-                dir = getInstance().getDirectory(MEDIA_DIR_DOCUMENT);
-            }
-        } else if (attach instanceof TLRPC.PhotoSize) {
-            TLRPC.PhotoSize photoSize = (TLRPC.PhotoSize)attach;
-            if (forceCache || photoSize.location == null || photoSize.location.key != null || photoSize.location.volume_id == Integer.MIN_VALUE && photoSize.location.local_id < 0) {
-                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
-            } else {
-                dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
-            }
-        } else if (attach instanceof TLRPC.Audio) {
-            TLRPC.Audio audio = (TLRPC.Audio)attach;
-            if (forceCache || audio.key != null) {
-                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
-            } else {
-                dir = getInstance().getDirectory(MEDIA_DIR_AUDIO);
-            }
-        } else if (attach instanceof TLRPC.FileLocation) {
-            TLRPC.FileLocation fileLocation = (TLRPC.FileLocation)attach;
-            if (forceCache || fileLocation.key != null || fileLocation.volume_id == Integer.MIN_VALUE && fileLocation.local_id < 0) {
-                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
-            } else {
-                dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
-            }
-        }
-        if (dir == null) {
-            return new File("");
-        }
-        return new File(dir, getAttachFileName(attach));
-    }
-
-    public static TLRPC.PhotoSize getClosestPhotoSizeWithSize(ArrayList<TLRPC.PhotoSize> sizes, int side) {
-        if (sizes == null) {
-            return null;
-        }
-        int lastSide = 0;
-        TLRPC.PhotoSize closestObject = null;
-        for (TLRPC.PhotoSize obj : sizes) {
-            if (obj == null) {
-                continue;
-            }
-            int currentSide = obj.w >= obj.h ? obj.w : obj.h;
-            if (closestObject == null || closestObject instanceof TLRPC.TL_photoCachedSize || currentSide <= side && lastSide < currentSide) {
-                closestObject = obj;
-                lastSide = currentSide;
-            }
-        }
-        return closestObject;
-    }
-
-    public static String getAttachFileName(TLObject attach) {
-        if (attach instanceof TLRPC.Video) {
-            TLRPC.Video video = (TLRPC.Video)attach;
-            return video.dc_id + "_" + video.id + ".mp4";
-        } else if (attach instanceof TLRPC.Document) {
-            TLRPC.Document document = (TLRPC.Document)attach;
-            String ext = document.file_name;
-            int idx = -1;
-            if (ext == null || (idx = ext.lastIndexOf(".")) == -1) {
-                ext = "";
-            } else {
-                ext = ext.substring(idx);
-            }
-            if (ext.length() > 1) {
-                return document.dc_id + "_" + document.id + ext;
-            } else {
-                return document.dc_id + "_" + document.id;
-            }
-        } else if (attach instanceof TLRPC.PhotoSize) {
-            TLRPC.PhotoSize photo = (TLRPC.PhotoSize)attach;
-            if (photo.location == null) {
-                return "";
-            }
-            return photo.location.volume_id + "_" + photo.location.local_id + ".jpg";
-        } else if (attach instanceof TLRPC.Audio) {
-            TLRPC.Audio audio = (TLRPC.Audio)attach;
-            return audio.dc_id + "_" + audio.id + ".ogg";
-        } else if (attach instanceof TLRPC.FileLocation) {
-            TLRPC.FileLocation location = (TLRPC.FileLocation)attach;
-            return location.volume_id + "_" + location.local_id + ".jpg";
-        }
-        return "";
-    }
-
     public void setMediaDirs(HashMap<Integer, File> dirs) {
         mediaDirs = dirs;
     }
@@ -695,6 +560,151 @@ public void setDelegate(FileLoaderDelegate delegate) {
         this.delegate = delegate;
     }
 
+    public static File getPathToMessage(TLRPC.Message message) {
+        if (message == null) {
+            return new File("");
+        }
+        if (message instanceof TLRPC.TL_messageService) {
+            if (message.action.photo != null) {
+                ArrayList<TLRPC.PhotoSize> sizes = message.action.photo.sizes;
+                if (sizes.size() > 0) {
+                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
+                    if (sizeFull != null) {
+                        return getPathToAttach(sizeFull);
+                    }
+                }
+            }
+        } else {
+            if (message.media instanceof TLRPC.TL_messageMediaVideo) {
+                return getPathToAttach(message.media.video);
+            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
+                return getPathToAttach(message.media.document);
+            } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
+                return getPathToAttach(message.media.audio);
+            } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
+                ArrayList<TLRPC.PhotoSize> sizes = message.media.photo.sizes;
+                if (sizes.size() > 0) {
+                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
+                    if (sizeFull != null) {
+                        return getPathToAttach(sizeFull);
+                    }
+                }
+            }
+        }
+        return new File("");
+    }
+
+    public static File getExistPathToAttach(TLObject attach) {
+        File path = getInstance().getDirectory(MEDIA_DIR_CACHE);
+        String fileName = getAttachFileName(attach);
+        File attachPath = new File(path, fileName);
+        if (attachPath.exists()) {
+            return attachPath;
+        }
+        return getPathToAttach(attach);
+    }
+
+    public static File getPathToAttach(TLObject attach) {
+        return getPathToAttach(attach, false);
+    }
+
+    public static File getPathToAttach(TLObject attach, boolean forceCache) {
+        File dir = null;
+        if (attach instanceof TLRPC.Video) {
+            TLRPC.Video video = (TLRPC.Video)attach;
+            if (forceCache || video.key != null) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_VIDEO);
+            }
+        } else if (attach instanceof TLRPC.Document) {
+            TLRPC.Document document = (TLRPC.Document)attach;
+            if (forceCache || document.key != null) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_DOCUMENT);
+            }
+        } else if (attach instanceof TLRPC.PhotoSize) {
+            TLRPC.PhotoSize photoSize = (TLRPC.PhotoSize)attach;
+            if (forceCache || photoSize.location == null || photoSize.location.key != null || photoSize.location.volume_id == Integer.MIN_VALUE && photoSize.location.local_id < 0) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
+            }
+        } else if (attach instanceof TLRPC.Audio) {
+            TLRPC.Audio audio = (TLRPC.Audio)attach;
+            if (forceCache || audio.key != null) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_AUDIO);
+            }
+        } else if (attach instanceof TLRPC.FileLocation) {
+            TLRPC.FileLocation fileLocation = (TLRPC.FileLocation)attach;
+            if (forceCache || fileLocation.key != null || fileLocation.volume_id == Integer.MIN_VALUE && fileLocation.local_id < 0) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
+            }
+        }
+        if (dir == null) {
+            return new File("");
+        }
+        return new File(dir, getAttachFileName(attach));
+    }
+
+    public static TLRPC.PhotoSize getClosestPhotoSizeWithSize(ArrayList<TLRPC.PhotoSize> sizes, int side) {
+        if (sizes == null) {
+            return null;
+        }
+        int lastSide = 0;
+        TLRPC.PhotoSize closestObject = null;
+        for (TLRPC.PhotoSize obj : sizes) {
+            if (obj == null) {
+                continue;
+            }
+            int currentSide = obj.w >= obj.h ? obj.w : obj.h;
+            if (closestObject == null || closestObject instanceof TLRPC.TL_photoCachedSize || currentSide <= side && lastSide < currentSide) {
+                closestObject = obj;
+                lastSide = currentSide;
+            }
+        }
+        return closestObject;
+    }
+
+    public static String getAttachFileName(TLObject attach) {
+        if (attach instanceof TLRPC.Video) {
+            TLRPC.Video video = (TLRPC.Video)attach;
+            return video.dc_id + "_" + video.id + ".mp4";
+        } else if (attach instanceof TLRPC.Document) {
+            TLRPC.Document document = (TLRPC.Document)attach;
+            String ext = document.file_name;
+            int idx = -1;
+            if (ext == null || (idx = ext.lastIndexOf(".")) == -1) {
+                ext = "";
+            } else {
+                ext = ext.substring(idx);
+            }
+            if (ext.length() > 1) {
+                return document.dc_id + "_" + document.id + ext;
+            } else {
+                return document.dc_id + "_" + document.id;
+            }
+        } else if (attach instanceof TLRPC.PhotoSize) {
+            TLRPC.PhotoSize photo = (TLRPC.PhotoSize)attach;
+            if (photo.location == null) {
+                return "";
+            }
+            return photo.location.volume_id + "_" + photo.location.local_id + ".jpg";
+        } else if (attach instanceof TLRPC.Audio) {
+            TLRPC.Audio audio = (TLRPC.Audio)attach;
+            return audio.dc_id + "_" + audio.id + ".ogg";
+        } else if (attach instanceof TLRPC.FileLocation) {
+            TLRPC.FileLocation location = (TLRPC.FileLocation)attach;
+            return location.volume_id + "_" + location.local_id + ".jpg";
+        }
+        return "";
+    }
+
     public void deleteFiles(final ArrayList<File> files) {
         if (files == null || files.isEmpty()) {
             return;
@@ -716,13 +726,4 @@ public void run() {
             }
         });
     }
-
-    public static interface FileLoaderDelegate {
-        public abstract void fileUploadProgressChanged(String location, float progress, boolean isEncrypted);
-        public abstract void fileDidUploaded(String location, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
-        public abstract void fileDidFailedUpload(String location, boolean isEncrypted);
-        public abstract void fileDidLoaded(String location, File finalFile, File tempFile);
-        public abstract void fileDidFailedLoad(String location, int state);
-        public abstract void fileLoadProgressChanged(String location, float progress);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
index 708e2850b..ceee714f6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
@@ -20,11 +20,25 @@
 import java.util.Locale;
 
 public class FileLog {
-    private static volatile FileLog Instance = null;
     private OutputStreamWriter streamWriter = null;
     private FastDateFormat dateFormat = null;
     private DispatchQueue logQueue = null;
     private File currentFile = null;
+
+    private static volatile FileLog Instance = null;
+    public static FileLog getInstance() {
+        FileLog localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (FileLog.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new FileLog();
+                }
+            }
+        }
+        return localInstance;
+    }
+
     public FileLog() {
         if (!BuildVars.DEBUG_VERSION) {
             return;
@@ -59,19 +73,6 @@ public FileLog() {
         }
     }
 
-    public static FileLog getInstance() {
-        FileLog localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (FileLog.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new FileLog();
-                }
-            }
-        }
-        return localInstance;
-    }
-
     public static void e(final String tag, final String message, final Throwable exception) {
         if (!BuildVars.DEBUG_VERSION) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index 90a1bb393..157103bec 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -19,11 +19,11 @@
 import java.util.Locale;
 
 public class FileUploadOperation {
-    public int state = 0;
-    public FileUploadOperationDelegate delegate;
     private int uploadChunkSize = 1024 * 32;
     private String uploadingFilePath;
+    public int state = 0;
     private byte[] readBuffer;
+    public FileUploadOperationDelegate delegate;
     private long requestToken = 0;
     private int currentPartNum = 0;
     private long currentFileId;
@@ -45,6 +45,12 @@
     private MessageDigest mdEnc = null;
     private boolean started = false;
 
+    public static interface FileUploadOperationDelegate {
+        public abstract void didFinishUploadingFile(FileUploadOperation operation, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
+        public abstract void didFailedUploadingFile(FileUploadOperation operation);
+        public abstract void didChangedUploadProgress(FileUploadOperation operation, float progress);
+    }
+
     public FileUploadOperation(String location, boolean encrypted, int estimated) {
         uploadingFilePath = location;
         isEncrypted = encrypted;
@@ -387,10 +393,4 @@ public void run(TLObject response, TLRPC.TL_error error) {
             }
         }, null, true, RPCRequest.RPCRequestClassUploadMedia, ConnectionsManager.DEFAULT_DATACENTER_ID);
     }
-
-    public static interface FileUploadOperationDelegate {
-        public abstract void didFinishUploadingFile(FileUploadOperation operation, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
-        public abstract void didFailedUploadingFile(FileUploadOperation operation);
-        public abstract void didChangedUploadProgress(FileUploadOperation operation, float progress);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
index 188ff8bec..770dbd6f3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
@@ -17,24 +17,28 @@
 
 public class HandshakeAction extends Action implements TcpConnection.TcpConnectionDelegate {
 
-    static ArrayList<HashMap<String, Object>> serverPublicKeys = null;
-    final Object lock = new Object();
-    public Datacenter datacenter;
-    int timeDifference;
-    ServerSalt serverSalt;
     private ArrayList<Long> processedMessageIds;
+
     private byte[] authNonce;
     private byte[] authServerNonce;
     private byte[] authNewNonce;
+
     private byte[] authKey;
     private long authKeyId;
+
     private boolean processedPQRes;
+
     private ByteBufferDesc reqPQMsgData;
     private ByteBufferDesc reqDHMsgData;
     private ByteBufferDesc setClientDHParamsMsgData;
     private boolean wasDisconnect = false;
+
     private long lastOutgoingMessageId;
 
+    int timeDifference;
+    ServerSalt serverSalt;
+    public Datacenter datacenter;
+
     public HandshakeAction(Datacenter datacenter) {
         this.datacenter = datacenter;
     }
@@ -83,6 +87,8 @@ void beginHandshake(boolean dropConnection) {
         reqPQMsgData = sendMessageData(reqPq, generateMessageId());
     }
 
+    final Object lock = new Object();
+    static ArrayList<HashMap<String, Object>> serverPublicKeys = null;
     HashMap<String, Object> selectPublicKey(ArrayList<Long> fingerprints) {
         synchronized (lock) {
             if (serverPublicKeys == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java b/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
index 18f7fbb00..4e7454e07 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
@@ -11,10 +11,16 @@
 import java.util.ArrayList;
 
 public class RPCRequest {
+    public interface RPCRequestDelegate {
+        void run(TLObject response, TLRPC.TL_error error);
+    }
+    public interface RPCQuickAckDelegate {
+        void quickAck();
+    }
+
     public static int RPCRequestClassGeneric = 1;
     public static int RPCRequestClassDownloadMedia = 2;
     public static int RPCRequestClassUploadMedia = 4;
-    static int RPCRequestClassTransportMask = (RPCRequestClassGeneric | RPCRequestClassDownloadMedia | RPCRequestClassUploadMedia);
     public static int RPCRequestClassEnableUnauthorized = 8;
     public static int RPCRequestClassFailOnServerErrors = 16;
     public static int RPCRequestClassCanCompress = 32;
@@ -22,29 +28,41 @@
     public static int RPCRequestClassWithoutLogin = 128;
     public static int RPCRequestClassTryDifferentDc = 256;
     public static int RPCRequestClassForceDownload = 512;
-    protected int retryCount = 0;
-    protected int lastResendTime = 0;
-    protected boolean completed = false;
+
+    static int RPCRequestClassTransportMask = (RPCRequestClassGeneric | RPCRequestClassDownloadMedia | RPCRequestClassUploadMedia);
+
     long token;
     boolean cancelled;
+
     int serverFailureCount;
     int flags;
     boolean wait = false;
     boolean salt = false;
+    protected int retryCount = 0;
+    protected int lastResendTime = 0;
+    protected boolean completed = false;
+
     TLObject rawRequest;
     TLObject rpcRequest;
     int serializedLength;
+
     RPCRequestDelegate completionBlock;
     RPCQuickAckDelegate quickAckBlock;
+
     boolean requiresCompletion;
+
     long runningMessageId;
     int runningMessageSeqNo;
     int runningDatacenterId;
     int transportChannelToken;
+
     int runningStartTime;
     int runningMinStartTime;
+
     boolean confirmed;
+
     boolean initRequest = false;
+
     ArrayList<Long> respondsToMessageIds = new ArrayList<Long>();
 
     public void addRespondMessageId(long messageId) {
@@ -54,13 +72,5 @@ public void addRespondMessageId(long messageId) {
     boolean respondsToMessageId(long messageId) {
         return runningMessageId == messageId || respondsToMessageIds.contains(messageId);
     }
-
-    public interface RPCRequestDelegate {
-        void run(TLObject response, TLRPC.TL_error error);
-    }
-
-    public interface RPCQuickAckDelegate {
-        void quickAck();
-    }
 }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
index d3b79c2b8..0247b881e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
@@ -11,7 +11,6 @@
 import java.util.HashMap;
 
 public class TLClassStore {
-    static TLClassStore store = null;
     private HashMap<Integer, Class> classStore;
 
     public TLClassStore () {
@@ -402,6 +401,8 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_decryptedMessageHolder.constructor, TLRPC.TL_decryptedMessageHolder.class);
     }
 
+    static TLClassStore store = null;
+
     public static TLClassStore Instance() {
         if (store == null) {
             store = new TLClassStore();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index d14bcaae0..21310e0ca 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -9445,9 +9445,10 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_msg_container extends TLObject {
-        public static int constructor = 0x73f1f8dc;
         public ArrayList<TL_protoMessage> messages;
 
+        public static int constructor = 0x73f1f8dc;
+
         public void readParams(AbsSerializedData stream) {
             messages = new ArrayList<TL_protoMessage>();
             int count = stream.readInt32();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
index 8639ca6a2..a2afb811c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
@@ -20,25 +20,42 @@
 import jawnae.pyronet.PyroSelector;
 
 public class TcpConnection extends ConnectionContext {
-    static volatile Integer nextChannelToken = 1;
+    public enum TcpConnectionState {
+        TcpConnectionStageIdle,
+        TcpConnectionStageConnecting,
+        TcpConnectionStageReconnecting,
+        TcpConnectionStageConnected,
+        TcpConnectionStageSuspended
+    }
+
+    public abstract static interface TcpConnectionDelegate {
+        public abstract void tcpConnectionClosed(TcpConnection connection);
+        public abstract void tcpConnectionConnected(TcpConnection connection);
+        public abstract void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack);
+        public abstract void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length);
+    }
+
     private static PyroSelector selector;
-    private final Object timerSync = new Object();
+    private PyroClient client;
     public TcpConnectionState connectionState;
     public volatile int channelToken = 0;
-    public TcpConnectionDelegate delegate;
-    public int transportRequestClass;
-    private PyroClient client;
     private String hostAddress;
     private int hostPort;
     private int datacenterId;
     private int failedConnectionCount;
+    public TcpConnectionDelegate delegate;
     private ByteBufferDesc restOfTheData;
     private boolean hasSomeDataSinceLastConnect = false;
     private int willRetryConnectCount = 5;
     private boolean isNextPort = false;
+    private final Object timerSync = new Object();
     private boolean wasConnected;
     private int lastPacketLength;
+
+    public int transportRequestClass;
+
     private boolean firstPacket;
+
     private Timer reconnectTimer;
 
     public TcpConnection(int did) {
@@ -51,6 +68,7 @@ public TcpConnection(int did) {
         connectionState = TcpConnectionState.TcpConnectionStageIdle;
     }
 
+    static volatile Integer nextChannelToken = 1;
     static int generateChannelToken() {
         return nextChannelToken++;
     }
@@ -659,19 +677,4 @@ public void receivedData(PyroClient client, ByteBuffer data) {
     @Override
     public void sentData(PyroClient client, int bytes) {
     }
-
-    public enum TcpConnectionState {
-        TcpConnectionStageIdle,
-        TcpConnectionStageConnecting,
-        TcpConnectionStageReconnecting,
-        TcpConnectionStageConnected,
-        TcpConnectionStageSuspended
-    }
-
-    public abstract static interface TcpConnectionDelegate {
-        public abstract void tcpConnectionClosed(TcpConnection connection);
-        public abstract void tcpConnectionConnected(TcpConnection connection);
-        public abstract void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack);
-        public abstract void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index 7f1bb30f2..6ec36580c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -17,7 +17,7 @@
 import java.io.File;
 
 public class UserConfig {
-    private final static Object sync = new Object();
+    private static TLRPC.User currentUser;
     public static boolean registeredForPush = false;
     public static boolean registeredForInternalPush = false;
     public static String pushString = "";
@@ -27,9 +27,9 @@
     public static String contactsHash = "";
     public static String importHash = "";
     public static boolean blockedUsersLoaded = false;
+    private final static Object sync = new Object();
     public static boolean saveIncomingPhotos = false;
     public static int contactsVersion = 1;
-    private static TLRPC.User currentUser;
 
     public static int getNewMessageId() {
         int id;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index bc8922d99..f7e44667f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -55,7 +55,22 @@
 import javax.crypto.Cipher;
 
 public class Utilities {
+    public static Pattern pattern = Pattern.compile("[0-9]+");
+    public static SecureRandom random = new SecureRandom();
+
+    public static ArrayList<String> goodPrimes = new ArrayList<String>();
+
+    public static class TPFactorizedValue {
+        public long p, q;
+    }
+
+    public static volatile DispatchQueue stageQueue = new DispatchQueue("stageQueue");
+    public static volatile DispatchQueue globalQueue = new DispatchQueue("globalQueue");
+    public static volatile DispatchQueue searchQueue = new DispatchQueue("searchQueue");
+    public static volatile DispatchQueue photoBookQueue = new DispatchQueue("photoBookQueue");
+
     final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();
+
     static {
         try {
             File URANDOM_FILE = new File("/dev/urandom");
@@ -89,22 +104,11 @@
             }
         }
     }
-    public static Pattern pattern = Pattern.compile("[0-9]+");
-    public static SecureRandom random = new SecureRandom();
-    public static ArrayList<String> goodPrimes = new ArrayList<String>();
-    public static volatile DispatchQueue stageQueue = new DispatchQueue("stageQueue");
-    public static volatile DispatchQueue globalQueue = new DispatchQueue("globalQueue");
-    public static volatile DispatchQueue searchQueue = new DispatchQueue("searchQueue");
-    public static volatile DispatchQueue photoBookQueue = new DispatchQueue("photoBookQueue");
 
     public native static long doPQNative(long _what);
-
     public native static void loadBitmap(String path, Bitmap bitmap, int scale, int width, int height, int stride);
-
     public native static void blurBitmap(Object bitmap, int radius);
-
     public native static int convertVideoFrame(ByteBuffer src, ByteBuffer dest, int destFormat, int width, int height, int padding, int swap);
-
     private native static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, int offset, int length);
 
     public static void aesIgeEncryption(ByteBuffer buffer, byte[] key, byte[] iv, boolean encrypt, boolean changeIv, int offset, int length) {
@@ -706,8 +710,4 @@ public static void checkForUpdates(Activity context) {
             UpdateManager.register(context, BuildVars.HOCKEY_APP_HASH);
         }
     }
-
-    public static class TPFactorizedValue {
-        public long p, q;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index bb9b72cc7..9ff4c0b11 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -21,15 +21,21 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.R;
 
 public class ActionBar extends FrameLayout {
 
-    public ActionBarMenuOnItemClick actionBarMenuOnItemClick;
-    protected boolean isSearchFieldVisible;
-    protected int itemsBackgroundResourceId;
-    protected BaseFragment parentFragment;
+    public static class ActionBarMenuOnItemClick {
+        public void onItemClick(int id) {
+
+        }
+
+        public boolean canOpenMenu() {
+            return true;
+        }
+    }
+
     private FrameLayout titleFrameLayout;
     private ImageView backButtonImageView;
     private TextView titleTextView;
@@ -38,16 +44,23 @@
     private ActionBarMenu menu;
     private ActionBarMenu actionMode;
     private boolean occupyStatusBar = Build.VERSION.SDK_INT >= 21;
+
     private boolean allowOverlayTitle;
     private CharSequence lastTitle;
     private boolean showingOverlayTitle;
+
+    protected boolean isSearchFieldVisible;
+    protected int itemsBackgroundResourceId;
     private boolean isBackOverlayVisible;
+    protected BaseFragment parentFragment;
+    public ActionBarMenuOnItemClick actionBarMenuOnItemClick;
     private int extraHeight;
+
     public ActionBar(Context context) {
         super(context);
         titleFrameLayout = new FrameLayout(context);
         addView(titleFrameLayout);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) titleFrameLayout.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)titleFrameLayout.getLayoutParams();
         layoutParams.width = LayoutParams.WRAP_CONTENT;
         layoutParams.height = LayoutParams.FILL_PARENT;
         layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
@@ -58,7 +71,7 @@ public ActionBar(Context context) {
 
     private void positionBackImage(int height) {
         if (backButtonImageView != null) {
-            LayoutParams layoutParams = (LayoutParams) backButtonImageView.getLayoutParams();
+            LayoutParams layoutParams = (LayoutParams)backButtonImageView.getLayoutParams();
             layoutParams.width = AndroidUtilities.dp(54);
             layoutParams.height = height;
             layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
@@ -156,7 +169,7 @@ public void positionMenu(int width, int height) {
         if (menu == null) {
             return;
         }
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) menu.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)menu.getLayoutParams();
         layoutParams.width = isSearchFieldVisible ? LayoutParams.MATCH_PARENT : LayoutParams.WRAP_CONTENT;
         layoutParams.height = height;
         layoutParams.leftMargin = isSearchFieldVisible ? AndroidUtilities.dp(54) : 0;
@@ -256,6 +269,18 @@ private void createTitleTextView() {
         titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
     }
 
+    public void setTitle(CharSequence value) {
+        if (value != null && titleTextView == null) {
+            createTitleTextView();
+        }
+        if (titleTextView != null) {
+            lastTitle = value;
+            titleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : GONE);
+            titleTextView.setText(value);
+            positionTitle(getMeasuredWidth(), getMeasuredHeight());
+        }
+    }
+
     public void setTitleIcon(int resourceId, int padding) {
         if (resourceId != 0 && titleTextView == null) {
             createTitleTextView();
@@ -276,25 +301,13 @@ public CharSequence getTitle() {
         return titleTextView.getText();
     }
 
-    public void setTitle(CharSequence value) {
-        if (value != null && titleTextView == null) {
-            createTitleTextView();
-        }
-        if (titleTextView != null) {
-            lastTitle = value;
-            titleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : GONE);
-            titleTextView.setText(value);
-            positionTitle(getMeasuredWidth(), getMeasuredHeight());
-        }
-    }
-
     public ActionBarMenu createMenu() {
         if (menu != null) {
             return menu;
         }
         menu = new ActionBarMenu(getContext(), this);
         addView(menu);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) menu.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)menu.getLayoutParams();
         layoutParams.height = LayoutParams.FILL_PARENT;
         layoutParams.width = LayoutParams.WRAP_CONTENT;
         layoutParams.gravity = Gravity.RIGHT;
@@ -310,7 +323,7 @@ public void setCustomView(int resourceId) {
         LayoutInflater li = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         View view = li.inflate(resourceId, null);
         addView(view);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) view.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)view.getLayoutParams();
         layoutParams.width = LayoutParams.FILL_PARENT;
         layoutParams.height = LayoutParams.FILL_PARENT;
         layoutParams.topMargin = occupyStatusBar ? AndroidUtilities.statusBarHeight : 0;
@@ -325,7 +338,7 @@ public ActionBarMenu createActionMode() {
         actionMode.setBackgroundResource(R.drawable.editheader);
         addView(actionMode);
         actionMode.setPadding(0, occupyStatusBar ? AndroidUtilities.statusBarHeight : 0, 0, 0);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) actionMode.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)actionMode.getLayoutParams();
         layoutParams.height = LayoutParams.FILL_PARENT;
         layoutParams.width = LayoutParams.FILL_PARENT;
         layoutParams.gravity = Gravity.RIGHT;
@@ -336,7 +349,7 @@ public ActionBarMenu createActionMode() {
             actionModeTop = new View(getContext());
             actionModeTop.setBackgroundColor(0x99000000);
             addView(actionModeTop);
-            layoutParams = (FrameLayout.LayoutParams) actionModeTop.getLayoutParams();
+            layoutParams = (FrameLayout.LayoutParams)actionModeTop.getLayoutParams();
             layoutParams.height = AndroidUtilities.statusBarHeight;
             layoutParams.width = LayoutParams.FILL_PARENT;
             layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
@@ -393,7 +406,7 @@ protected void onSearchFieldVisibilityChanged(boolean visible) {
         }
         Drawable drawable = backButtonImageView.getDrawable();
         if (drawable != null && drawable instanceof MenuDrawable) {
-            ((MenuDrawable) drawable).setRotation(visible ? 1 : 0, true);
+            ((MenuDrawable)drawable).setRotation(visible ? 1 : 0, true);
         }
     }
 
@@ -457,14 +470,14 @@ public int getExtraHeight() {
         return extraHeight;
     }
 
-    public boolean getOccupyStatusBar() {
-        return occupyStatusBar;
-    }
-
     public void setOccupyStatusBar(boolean value) {
         occupyStatusBar = value;
     }
 
+    public boolean getOccupyStatusBar() {
+        return occupyStatusBar;
+    }
+
     public void setItemsBackground(int resourceId) {
         itemsBackgroundResourceId = resourceId;
         if (backButtonImageView != null) {
@@ -477,14 +490,4 @@ public boolean onTouchEvent(MotionEvent event) {
         super.onTouchEvent(event);
         return true;
     }
-
-    public static class ActionBarMenuOnItemClick {
-        public void onItemClick(int id) {
-
-        }
-
-        public boolean canOpenMenu() {
-            return true;
-        }
-    }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index ef76a8d75..ed2186ac5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -28,9 +28,9 @@
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
@@ -40,22 +40,81 @@
 
 public class ActionBarLayout extends FrameLayout {
 
+    public static interface ActionBarLayoutDelegate {
+        public abstract boolean onPreIme();
+        public abstract boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
+        public abstract boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
+        public abstract boolean needCloseLastFragment(ActionBarLayout layout);
+        public abstract void onRebuildAllFragments(ActionBarLayout layout);
+    }
+
+    public class LinearLayoutContainer extends LinearLayout {
+
+        public LinearLayoutContainer(Context context) {
+            super(context);
+            setOrientation(VERTICAL);
+        }
+
+        @Override
+        protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+            if (child instanceof ActionBar) {
+                return super.drawChild(canvas, child, drawingTime);
+            } else {
+                boolean wasActionBar = false;
+                int actionBarHeight = 0;
+                int childCount = getChildCount();
+                for (int a = 0; a < childCount; a++) {
+                    View view = getChildAt(a);
+                    if (view == child) {
+                        continue;
+                    }
+                    if (view instanceof ActionBar && view.getVisibility() == VISIBLE) {
+                        actionBarHeight = view.getMeasuredHeight();
+                        wasActionBar = true;
+                        break;
+                    }
+                }
+                /*if (!wasActionBar) {
+                    if (child instanceof ViewGroup) {
+                        ViewGroup viewGroup = (ViewGroup) child;
+                        childCount = viewGroup.getChildCount();
+                        for (int a = 0; a < childCount; a++) {
+                            View possibleActionBar = viewGroup.getChildAt(a);
+                            if (possibleActionBar instanceof ActionBar) {
+                                actionBarHeight = possibleActionBar.getMeasuredHeight();
+                                break;
+                            }
+                        }
+                    }
+                }*/
+                boolean result = super.drawChild(canvas, child, drawingTime);
+                if (actionBarHeight != 0 && headerShadowDrawable != null) {
+                    headerShadowDrawable.setBounds(0, actionBarHeight, getMeasuredWidth(), actionBarHeight + headerShadowDrawable.getIntrinsicHeight());
+                    headerShadowDrawable.draw(canvas);
+                }
+                return result;
+            }
+        }
+    }
+
     private static Drawable headerShadowDrawable;
     private static Drawable layerShadowDrawable;
     private static Paint scrimPaint;
-    public float innerTranslationX;
-    public ArrayList<BaseFragment> fragmentsStack = null;
-    protected boolean startedTracking;
-    protected boolean animationInProgress;
-    protected Activity parentActivity = null;
+
     private LinearLayoutContainer containerView;
     private LinearLayoutContainer containerViewBack;
     private DrawerLayoutContainer drawerLayoutContainer;
     private ActionBar currentActionBar;
+
     private AnimatorSetProxy currentAnimation;
+
+    public float innerTranslationX;
+
     private boolean maybeStartTracking;
+    protected boolean startedTracking;
     private int startedTrackingX;
     private int startedTrackingY;
+    protected boolean animationInProgress;
     private VelocityTracker velocityTracker;
     private boolean beginTrackingSent;
     private boolean transitionAnimationInProgress;
@@ -71,6 +130,10 @@
     private String titleOverlayText;
 
     private ActionBarLayoutDelegate delegate = null;
+    protected Activity parentActivity = null;
+
+    public ArrayList<BaseFragment> fragmentsStack = null;
+
     public ActionBarLayout(Context context) {
         super(context);
         parentActivity = (Activity) context;
@@ -114,15 +177,15 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
         }
     }
 
-    public float getInnerTranslationX() {
-        return innerTranslationX;
-    }
-
     public void setInnerTranslationX(float value) {
         innerTranslationX = value;
         invalidate();
     }
 
+    public float getInnerTranslationX() {
+        return innerTranslationX;
+    }
+
     public void onResume() {
         if (transitionAnimationInProgress) {
             if (currentAnimation != null) {
@@ -194,7 +257,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                 layerShadowDrawable.setAlpha((int) (0xff * alpha));
                 layerShadowDrawable.draw(canvas);
             } else if (child == containerViewBack) {
-                final float opacity = Math.min(0.8f, (width - translationX) / (float) width);
+                final float opacity = Math.min(0.8f, (width - translationX) / (float)width);
                 scrimPaint.setColor((int) (((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
                 canvas.drawRect(clipLeft, 0, clipRight, getHeight(), scrimPaint);
             }
@@ -351,7 +414,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                             distToMove = containerView.getMeasuredWidth() - x;
                             animatorSet.playTogether(
                                     ObjectAnimatorProxy.ofFloat(containerView, "x", containerView.getMeasuredWidth()),
-                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float) containerView.getMeasuredWidth())
+                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float)containerView.getMeasuredWidth())
                             );
                         } else {
                             distToMove = x;
@@ -877,14 +940,14 @@ public void setBackgroundView(View view) {
         backgroundView = view;
     }
 
-    public DrawerLayoutContainer getDrawerLayoutContainer() {
-        return drawerLayoutContainer;
-    }
-
     public void setDrawerLayoutContainer(DrawerLayoutContainer layout) {
         drawerLayoutContainer = layout;
     }
 
+    public DrawerLayoutContainer getDrawerLayoutContainer() {
+        return drawerLayoutContainer;
+    }
+
     public void setRemoveActionBarExtraHeight(boolean value) {
         removeActionBarExtraHeight = value;
     }
@@ -897,65 +960,4 @@ public void setTitleOverlayText(String text) {
             }
         }
     }
-
-    public static interface ActionBarLayoutDelegate {
-        public abstract boolean onPreIme();
-
-        public abstract boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
-
-        public abstract boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
-
-        public abstract boolean needCloseLastFragment(ActionBarLayout layout);
-
-        public abstract void onRebuildAllFragments(ActionBarLayout layout);
-    }
-
-    public class LinearLayoutContainer extends LinearLayout {
-
-        public LinearLayoutContainer(Context context) {
-            super(context);
-            setOrientation(VERTICAL);
-        }
-
-        @Override
-        protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
-            if (child instanceof ActionBar) {
-                return super.drawChild(canvas, child, drawingTime);
-            } else {
-                boolean wasActionBar = false;
-                int actionBarHeight = 0;
-                int childCount = getChildCount();
-                for (int a = 0; a < childCount; a++) {
-                    View view = getChildAt(a);
-                    if (view == child) {
-                        continue;
-                    }
-                    if (view instanceof ActionBar && view.getVisibility() == VISIBLE) {
-                        actionBarHeight = view.getMeasuredHeight();
-                        wasActionBar = true;
-                        break;
-                    }
-                }
-                /*if (!wasActionBar) {
-                    if (child instanceof ViewGroup) {
-                        ViewGroup viewGroup = (ViewGroup) child;
-                        childCount = viewGroup.getChildCount();
-                        for (int a = 0; a < childCount; a++) {
-                            View possibleActionBar = viewGroup.getChildAt(a);
-                            if (possibleActionBar instanceof ActionBar) {
-                                actionBarHeight = possibleActionBar.getMeasuredHeight();
-                                break;
-                            }
-                        }
-                    }
-                }*/
-                boolean result = super.drawChild(canvas, child, drawingTime);
-                if (actionBarHeight != 0 && headerShadowDrawable != null) {
-                    headerShadowDrawable.setBounds(0, actionBarHeight, getMeasuredWidth(), actionBarHeight + headerShadowDrawable.getIntrinsicHeight());
-                    headerShadowDrawable.draw(canvas);
-                }
-                return result;
-            }
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
index d9c3930d7..7b9d202a0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
@@ -46,14 +46,14 @@ public View addItemResource(int id, int resourceId) {
         View view = li.inflate(resourceId, null);
         view.setTag(id);
         addView(view);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) view.getLayoutParams();
+        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)view.getLayoutParams();
         layoutParams.height = FrameLayout.LayoutParams.FILL_PARENT;
         view.setBackgroundResource(parentActionBar.itemsBackgroundResourceId);
         view.setLayoutParams(layoutParams);
         view.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
-                onItemClick((Integer) view.getTag());
+                onItemClick((Integer)view.getTag());
             }
         });
         return view;
@@ -85,14 +85,14 @@ public ActionBarMenuItem addItem(int id, int icon, int backgroundResource, Drawa
             menuItem.setImageResource(icon);
         }
         addView(menuItem);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) menuItem.getLayoutParams();
+        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)menuItem.getLayoutParams();
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.width = width;
         menuItem.setLayoutParams(layoutParams);
         menuItem.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
-                ActionBarMenuItem item = (ActionBarMenuItem) view;
+                ActionBarMenuItem item = (ActionBarMenuItem)view;
                 if (item.hasSubMenu()) {
                     if (parentActionBar.actionBarMenuOnItemClick.canOpenMenu()) {
                         item.toggleSubMenu();
@@ -100,7 +100,7 @@ public void onClick(View view) {
                 } else if (item.isSearchField()) {
                     parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
                 } else {
-                    onItemClick((Integer) view.getTag());
+                    onItemClick((Integer)view.getTag());
                 }
             }
         });
@@ -111,7 +111,7 @@ public void hideAllPopupMenus() {
         for (int a = 0; a < getChildCount(); a++) {
             View view = getChildAt(a);
             if (view instanceof ActionBarMenuItem) {
-                ((ActionBarMenuItem) view).closeSubMenu();
+                ((ActionBarMenuItem)view).closeSubMenu();
             }
         }
     }
@@ -133,7 +133,7 @@ public void onMenuButtonPressed() {
         for (int a = 0; a < getChildCount(); a++) {
             View view = getChildAt(a);
             if (view instanceof ActionBarMenuItem) {
-                ActionBarMenuItem item = (ActionBarMenuItem) view;
+                ActionBarMenuItem item = (ActionBarMenuItem)view;
                 if (item.hasSubMenu() && item.getVisibility() == VISIBLE) {
                     item.toggleSubMenu();
                     break;
@@ -146,7 +146,7 @@ public void closeSearchField() {
         for (int a = 0; a < getChildCount(); a++) {
             View view = getChildAt(a);
             if (view instanceof ActionBarMenuItem) {
-                ActionBarMenuItem item = (ActionBarMenuItem) view;
+                ActionBarMenuItem item = (ActionBarMenuItem)view;
                 if (item.isSearchField()) {
                     parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
                 }
@@ -157,7 +157,7 @@ public void closeSearchField() {
     public ActionBarMenuItem getItem(int id) {
         View v = findViewWithTag(id);
         if (v instanceof ActionBarMenuItem) {
-            return (ActionBarMenuItem) v;
+            return (ActionBarMenuItem)v;
         }
         return null;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index 70179bd14..567f162c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -29,14 +29,20 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.R;
 
 import java.lang.reflect.Field;
 
 public class ActionBarMenuItem extends ImageView {
 
+    public static interface ActionBarMenuItemSearchListener {
+        public abstract void onSearchExpand();
+        public abstract void onSearchCollapse();
+        public abstract void onTextChanged(EditText editText);
+    }
+
     private ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout;
     private ActionBarMenu parentMenu;
     private ActionBarPopupWindow popupWindow;
@@ -50,6 +56,7 @@
     private boolean showFromBottom;
     private int menuHeight = AndroidUtilities.dp(16);
     private boolean needOffset = Build.VERSION.SDK_INT >= 21;
+
     public ActionBarMenuItem(Context context, ActionBarMenu menu, int background) {
         super(context);
         setBackgroundResource(background);
@@ -91,8 +98,8 @@ public void run() {
                 for (int a = 0; a < popupLayout.getChildCount(); a++) {
                     View child = popupLayout.getChildAt(a);
                     child.getHitRect(rect);
-                    if ((Integer) child.getTag() < 100) {
-                        if (!rect.contains((int) x, (int) y)) {
+                    if ((Integer)child.getTag() < 100) {
+                        if (!rect.contains((int)x, (int)y)) {
                             child.setPressed(false);
                             child.setSelected(false);
                             if (Build.VERSION.SDK_INT >= 21) {
@@ -146,7 +153,7 @@ public boolean onTouch(View v, MotionEvent event) {
                     if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
                         if (popupWindow != null && popupWindow.isShowing()) {
                             v.getHitRect(rect);
-                            if (!rect.contains((int) event.getX(), (int) event.getY())) {
+                            if (!rect.contains((int)event.getX(), (int)event.getY())) {
                                 popupWindow.dismiss();
                             }
                         }
@@ -185,7 +192,7 @@ public void onDispatchKeyEvent(KeyEvent keyEvent) {
             }
         }
         popupLayout.addView(textView);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) textView.getLayoutParams();
+        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)textView.getLayoutParams();
         if (LocaleController.isRTL) {
             layoutParams.gravity = Gravity.RIGHT;
         }
@@ -234,7 +241,7 @@ public void toggleSubMenu() {
             popupWindow.getContentView().setOnKeyListener(new OnKeyListener() {
                 @Override
                 public boolean onKey(View v, int keyCode, KeyEvent event) {
-                    if (keyCode == KeyEvent.KEYCODE_MENU && event.getRepeatCount() == 0 && event.getAction() == KeyEvent.ACTION_UP && popupWindow != null && popupWindow.isShowing()) {
+                    if (keyCode ==  KeyEvent.KEYCODE_MENU && event.getRepeatCount() == 0 && event.getAction() == KeyEvent.ACTION_UP && popupWindow != null && popupWindow.isShowing()) {
                         popupWindow.dismiss();
                         return true;
                     }
@@ -390,7 +397,7 @@ public void afterTextChanged(Editable s) {
                 searchField.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
             }
             parentMenu.addView(searchField, 0);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) searchField.getLayoutParams();
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)searchField.getLayoutParams();
             layoutParams.weight = 1;
             layoutParams.width = 0;
             layoutParams.gravity = Gravity.CENTER_VERTICAL;
@@ -445,12 +452,4 @@ public void showSubItem(int id) {
             view.setVisibility(VISIBLE);
         }
     }
-
-    public static interface ActionBarMenuItemSearchListener {
-        public abstract void onSearchExpand();
-
-        public abstract void onSearchCollapse();
-
-        public abstract void onTextChanged(EditText editText);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index 234d1d555..e67c9c640 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -27,7 +27,6 @@
 public class ActionBarPopupWindow extends PopupWindow {
 
     private static final Field superListenerField;
-
     static {
         Field f = null;
         try {
@@ -49,6 +48,39 @@ public void onScrollChanged() {
     private ViewTreeObserver.OnScrollChangedListener mSuperScrollListener;
     private ViewTreeObserver mViewTreeObserver;
 
+    public static interface OnDispatchKeyEventListener {
+        public void onDispatchKeyEvent(KeyEvent keyEvent);
+    }
+
+    public static class ActionBarPopupWindowLayout extends LinearLayout {
+
+        private OnDispatchKeyEventListener mOnDispatchKeyEventListener;
+
+        public ActionBarPopupWindowLayout(Context context) {
+            super(context);
+        }
+
+        public ActionBarPopupWindowLayout(Context context, AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        public ActionBarPopupWindowLayout(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+        }
+
+        public void setDispatchKeyEventListener(OnDispatchKeyEventListener listener) {
+            mOnDispatchKeyEventListener = listener;
+        }
+
+        @Override
+        public boolean dispatchKeyEvent(KeyEvent event) {
+            if (mOnDispatchKeyEventListener != null) {
+                mOnDispatchKeyEventListener.onDispatchKeyEvent(event);
+            }
+            return super.dispatchKeyEvent(event);
+        }
+    }
+
     public ActionBarPopupWindow() {
         super();
         init();
@@ -171,37 +203,4 @@ public void dismiss() {
         super.dismiss();
         unregisterListener();
     }
-
-    public static interface OnDispatchKeyEventListener {
-        public void onDispatchKeyEvent(KeyEvent keyEvent);
-    }
-
-    public static class ActionBarPopupWindowLayout extends LinearLayout {
-
-        private OnDispatchKeyEventListener mOnDispatchKeyEventListener;
-
-        public ActionBarPopupWindowLayout(Context context) {
-            super(context);
-        }
-
-        public ActionBarPopupWindowLayout(Context context, AttributeSet attrs) {
-            super(context, attrs);
-        }
-
-        public ActionBarPopupWindowLayout(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-        }
-
-        public void setDispatchKeyEventListener(OnDispatchKeyEventListener listener) {
-            mOnDispatchKeyEventListener = listener;
-        }
-
-        @Override
-        public boolean dispatchKeyEvent(KeyEvent event) {
-            if (mOnDispatchKeyEventListener != null) {
-                mOnDispatchKeyEventListener.onDispatchKeyEvent(event);
-            }
-            return super.dispatchKeyEvent(event);
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index d93a62cfa..a5114127f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -17,19 +17,20 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.telegram.R;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 
 public class BaseFragment {
+    private boolean isFinished = false;
+    private AlertDialog visibleDialog = null;
+
     protected View fragmentView;
     protected ActionBarLayout parentLayout;
     protected ActionBar actionBar;
     protected int classGuid = 0;
     protected Bundle arguments;
     protected boolean swipeBackEnabled = true;
-    private boolean isFinished = false;
-    private AlertDialog visibleDialog = null;
 
     public BaseFragment() {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
index 36187365b..1178e261b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -24,8 +24,8 @@
 import android.widget.FrameLayout;
 import android.widget.ListView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.R;
 import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
@@ -73,6 +73,15 @@ public DrawerLayoutContainer(Context context) {
         shadowLeft = getResources().getDrawable(R.drawable.menu_shadow);
     }
 
+    private class InsetsListener implements View.OnApplyWindowInsetsListener {
+        @Override
+        public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {
+            final DrawerLayoutContainer drawerLayout = (DrawerLayoutContainer) v;
+            drawerLayout.setChildInsets(insets, insets.getSystemWindowInsetTop() > 0);
+            return insets.consumeSystemWindowInsets();
+        }
+    }
+
     private void configureApplyInsets(View drawerLayout) {
         if (Build.VERSION.SDK_INT >= 21) {
             drawerLayout.setOnApplyWindowInsetsListener(new InsetsListener());
@@ -116,12 +125,16 @@ private void setChildInsets(Object insets, boolean draw) {
         requestLayout();
     }
 
-    public void moveDrawerByX(float dx) {
-        setDrawerPosition(drawerPosition + dx);
+    public void setDrawerLayout(ViewGroup layout) {
+        drawerLayout = layout;
+        addView(drawerLayout);
+        if (Build.VERSION.SDK_INT >= 21) {
+            drawerLayout.setFitsSystemWindows(true);
+        }
     }
 
-    public float getDrawerPosition() {
-        return drawerPosition;
+    public void moveDrawerByX(float dx) {
+        setDrawerPosition(drawerPosition + dx);
     }
 
     public void setDrawerPosition(float value) {
@@ -137,7 +150,11 @@ public void setDrawerPosition(float value) {
         if (drawerLayout.getVisibility() != newVisibility) {
             drawerLayout.setVisibility(newVisibility);
         }
-        setScrimOpacity(drawerPosition / (float) drawerLayout.getMeasuredWidth());
+        setScrimOpacity(drawerPosition / (float)drawerLayout.getMeasuredWidth());
+    }
+
+    public float getDrawerPosition() {
+        return drawerPosition;
     }
 
     public void cancelCurrentAnimation() {
@@ -209,30 +226,22 @@ private void onDrawerAnimationEnd(boolean opened) {
         drawerOpened = opened;
         if (!opened) {
             if (drawerLayout instanceof ListView) {
-                ((ListView) drawerLayout).setSelectionFromTop(0, 0);
+                ((ListView)drawerLayout).setSelectionFromTop(0, 0);
             }
         }
     }
 
-    private float getScrimOpacity() {
-        return scrimOpacity;
-    }
-
     private void setScrimOpacity(float value) {
         scrimOpacity = value;
         invalidate();
     }
 
-    public View getDrawerLayout() {
-        return drawerLayout;
+    private float getScrimOpacity() {
+        return scrimOpacity;
     }
 
-    public void setDrawerLayout(ViewGroup layout) {
-        drawerLayout = layout;
-        addView(drawerLayout);
-        if (Build.VERSION.SDK_INT >= 21) {
-            drawerLayout.setFitsSystemWindows(true);
-        }
+    public View getDrawerLayout() {
+        return drawerLayout;
     }
 
     public void setParentActionBarLayout(ActionBarLayout layout) {
@@ -291,8 +300,8 @@ public boolean onTouchEvent(MotionEvent ev) {
                         requestDisallowInterceptTouchEvent(true);
                     } else if (startedTracking) {
                         if (!beginTrackingSent) {
-                            if (((Activity) getContext()).getCurrentFocus() != null) {
-                                AndroidUtilities.hideKeyboard(((Activity) getContext()).getCurrentFocus());
+                            if (((Activity)getContext()).getCurrentFocus() != null) {
+                                AndroidUtilities.hideKeyboard(((Activity)getContext()).getCurrentFocus());
                             }
                             beginTrackingSent = true;
                         }
@@ -372,7 +381,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
             if (drawerLayout != child) {
                 child.layout(lp.leftMargin, lp.topMargin, lp.leftMargin + child.getMeasuredWidth(), lp.topMargin + child.getMeasuredHeight());
             } else {
-                child.layout(-child.getMeasuredWidth() + (int) drawerPosition, lp.topMargin, (int) drawerPosition, lp.topMargin + child.getMeasuredHeight());
+                child.layout(-child.getMeasuredWidth() + (int)drawerPosition, lp.topMargin, (int)drawerPosition, lp.topMargin + child.getMeasuredHeight());
             }
         }
         inLayout = false;
@@ -458,20 +467,11 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
         } else if (shadowLeft != null) {
             final float alpha = Math.max(0, Math.min(drawerPosition / AndroidUtilities.dp(20), 1.0f));
             if (alpha != 0) {
-                shadowLeft.setBounds((int) drawerPosition, child.getTop(), (int) drawerPosition + shadowLeft.getIntrinsicWidth(), child.getBottom());
+                shadowLeft.setBounds((int)drawerPosition, child.getTop(), (int)drawerPosition + shadowLeft.getIntrinsicWidth(), child.getBottom());
                 shadowLeft.setAlpha((int) (0xff * alpha));
                 shadowLeft.draw(canvas);
             }
         }
         return result;
     }
-
-    private class InsetsListener implements View.OnApplyWindowInsetsListener {
-        @Override
-        public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {
-            final DrawerLayoutContainer drawerLayout = (DrawerLayoutContainer) v;
-            drawerLayout.setChildInsets(insets, insets.getSystemWindowInsetTop() > 0);
-            return insets.consumeSystemWindowInsets();
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/MenuDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/MenuDrawable.java
index 12165afe2..46f601702 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/MenuDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/MenuDrawable.java
@@ -81,7 +81,7 @@ public void draw(Canvas canvas) {
         canvas.rotate(currentRotation * (reverseAngle ? -180 : 180));
         canvas.drawLine(-AndroidUtilities.dp(9), 0, AndroidUtilities.dp(9) - AndroidUtilities.dp(1) * currentRotation, 0, paint);
         float endYDiff = AndroidUtilities.dp(5) * (1 - Math.abs(currentRotation)) - AndroidUtilities.dp(0.5f) * Math.abs(currentRotation);
-        float endXDiff = AndroidUtilities.dp(9) - AndroidUtilities.dp(0.5f) * Math.abs(currentRotation);
+        float endXDiff = AndroidUtilities.dp(9) - AndroidUtilities.dp(0.5f) *  Math.abs(currentRotation);
         float startYDiff = AndroidUtilities.dp(5) + AndroidUtilities.dp(3.5f) * Math.abs(currentRotation);
         float startXDiff = -AndroidUtilities.dp(9) + AndroidUtilities.dp(8.5f) * Math.abs(currentRotation);
         canvas.drawLine(startXDiff, -startYDiff, endXDiff, -endYDiff, paint);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
index 237d08ddf..17903b397 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
@@ -19,9 +19,9 @@
 public class BaseContactsSearchAdapter extends BaseFragmentAdapter {
 
     protected ArrayList<TLRPC.User> globalSearch = new ArrayList<TLRPC.User>();
-    protected String lastFoundUsername = null;
     private long reqId = 0;
     private int lastReqId;
+    protected String lastFoundUsername = null;
 
     public void queryServerSearch(final String query) {
         if (reqId != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSectionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSectionsAdapter.java
index 27379182a..3b6023c7a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSectionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSectionsAdapter.java
@@ -20,11 +20,6 @@
     private int sectionCount;
     private int count;
 
-    public BaseSectionsAdapter() {
-        super();
-        cleanupCache();
-    }
-
     private void cleanupCache() {
         sectionCache = new SparseArray<Integer>();
         sectionPositionCache = new SparseArray<Integer>();
@@ -33,6 +28,11 @@ private void cleanupCache() {
         sectionCount = -1;
     }
 
+    public BaseSectionsAdapter() {
+        super();
+        cleanupCache();
+    }
+
     @Override
     public void notifyDataSetChanged() {
         cleanupCache();
@@ -143,16 +143,10 @@ public int getPositionInSectionForPosition(int position) {
     }
 
     public abstract int getSectionCount();
-
     public abstract int getCountForSection(int section);
-
     public abstract boolean isRowEnabled(int section, int row);
-
     public abstract int getItemViewType(int section, int position);
-
     public abstract Object getItem(int section, int position);
-
     public abstract View getItemView(int section, int position, View convertView, ViewGroup parent);
-
     public abstract View getSectionHeaderView(int section, View convertView, ViewGroup parent);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
index c0c4e0599..8fd966df1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
@@ -13,12 +13,12 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.android.MessagesController;
+import org.telegram.R;
 import org.telegram.ui.AnimationCompat.ViewProxy;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.GreySectionCell;
@@ -224,9 +224,9 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
 
             ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - (onlyUsers ? 0 : 1)));
             TLRPC.User user = MessagesController.getInstance().getUser(arr.get(position).user_id);
-            ((UserCell) convertView).setData(user, null, null, 0);
+            ((UserCell)convertView).setData(user, null, null, 0);
             if (checkedMap != null) {
-                ((UserCell) convertView).setChecked(checkedMap.containsKey(user.id), !scrolling && Build.VERSION.SDK_INT > 10);
+                ((UserCell) convertView).setChecked(checkedMap.containsKey(user.id), !scrolling  && Build.VERSION.SDK_INT > 10);
             }
             if (ignoreUsers != null) {
                 if (ignoreUsers.containsKey(user.id)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsSearchAdapter.java
index f798cb1a1..467d8f29c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsSearchAdapter.java
@@ -13,13 +13,13 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Cells.GreySectionCell;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java
index e3e5eef0c..9c7010c1d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java
@@ -14,8 +14,8 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.LetterSectionCell;
 import org.telegram.ui.Cells.TextSettingsCell;
@@ -30,9 +30,16 @@
 
 public class CountryAdapter extends BaseSectionsAdapter {
 
+    public static class Country {
+        public String name;
+        public String code;
+        public String shortname;
+    }
+
     private Context mContext;
     private HashMap<String, ArrayList<Country>> countries = new HashMap<String, ArrayList<Country>>();
     private ArrayList<String> sortedCountries = new ArrayList<String>();
+
     public CountryAdapter(Context context) {
         mContext = context;
 
@@ -155,10 +162,4 @@ public int getItemViewType(int section, int position) {
     public int getViewTypeCount() {
         return 2;
     }
-
-    public static class Country {
-        public String name;
-        public String code;
-        public String shortname;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index 37a91f261..266329096 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -14,7 +14,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.telegram.R;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
@@ -25,6 +24,7 @@
 import org.telegram.messenger.ByteBufferDesc;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLClassStore;
 import org.telegram.messenger.TLObject;
@@ -60,6 +60,16 @@
     private String lastMessagesSearchString;
     private int lastSearchId = 0;
 
+    private class DialogSearchResult {
+        public TLObject object;
+        public int date;
+        public CharSequence name;
+    }
+
+    public static interface MessagesActivitySearchAdapterDelegate {
+        public abstract void searchStateChanged(boolean searching);
+    }
+
     public DialogsSearchAdapter(Context context, boolean messagesSearch) {
         mContext = context;
         needMessagesSearch = messagesSearch;
@@ -166,8 +176,8 @@ public void run() {
                         dialogSearchResult.date = cursor.intValue(1);
                         dialogsResult.put(id, dialogSearchResult);
 
-                        int lower_id = (int) id;
-                        int high_id = (int) (id >> 32);
+                        int lower_id = (int)id;
+                        int high_id = (int)(id >> 32);
                         if (lower_id != 0) {
                             if (high_id == 1) {
                                 if (!serverOnly && !chatsToLoad.contains(lower_id)) {
@@ -212,7 +222,7 @@ public void run() {
                                 if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
                                     TLRPC.User user = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                                     if (user.id != UserConfig.getClientUserId()) {
-                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long) user.id);
+                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long)user.id);
                                         if (user.status != null) {
                                             user.status.expires = cursor.intValue(1);
                                         }
@@ -279,7 +289,7 @@ public void run() {
                                 ByteBufferDesc data2 = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(6));
                                 if (data != null && cursor.byteBufferValue(0, data.buffer) != 0 && cursor.byteBufferValue(6, data2.buffer) != 0) {
                                     TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                    DialogSearchResult dialogSearchResult = dialogsResult.get((long) chat.id << 32);
+                                    DialogSearchResult dialogSearchResult = dialogsResult.get((long)chat.id << 32);
 
                                     chat.user_id = cursor.intValue(2);
                                     chat.a_or_b = cursor.byteArrayValue(3);
@@ -289,15 +299,15 @@ public void run() {
                                     chat.seq_in = cursor.intValue(9);
                                     chat.seq_out = cursor.intValue(10);
                                     int use_count = cursor.intValue(11);
-                                    chat.key_use_count_in = (short) (use_count >> 16);
-                                    chat.key_use_count_out = (short) (use_count);
+                                    chat.key_use_count_in = (short)(use_count >> 16);
+                                    chat.key_use_count_out = (short)(use_count);
                                     chat.exchange_id = cursor.longValue(12);
                                     chat.key_create_date = cursor.intValue(13);
                                     chat.future_key_fingerprint = cursor.longValue(14);
                                     chat.future_auth_key = cursor.byteArrayValue(15);
                                     chat.key_hash = cursor.byteArrayValue(16);
 
-                                    TLRPC.User user = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data2, data2.readInt32());
+                                    TLRPC.User user = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data2, data2.readInt32());
                                     if (user.status != null) {
                                         user.status.expires = cursor.intValue(7);
                                     }
@@ -347,7 +357,7 @@ public int compare(DialogSearchResult lhs, DialogSearchResult rhs) {
                     cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid");
                     while (cursor.next()) {
                         int uid = cursor.intValue(3);
-                        if (dialogsResult.containsKey((long) uid)) {
+                        if (dialogsResult.containsKey((long)uid)) {
                             continue;
                         }
                         String name = cursor.stringValue(2);
@@ -583,7 +593,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 view = new DialogCell(mContext);
             }
             ((DialogCell) view).useSeparator = (i != getCount() - 1);
-            MessageObject messageObject = (MessageObject) getItem(i);
+            MessageObject messageObject = (MessageObject)getItem(i);
             ((DialogCell) view).setDialog(messageObject.getDialogId(), messageObject, false, messageObject.messageOwner.date, 0);
         } else if (type == 3) {
             if (view == null) {
@@ -618,14 +628,4 @@ public int getViewTypeCount() {
     public boolean isEmpty() {
         return searchResult.isEmpty() && globalSearch.isEmpty() && searchResultMessages.isEmpty();
     }
-
-    public static interface MessagesActivitySearchAdapterDelegate {
-        public abstract void searchStateChanged(boolean searching);
-    }
-
-    private class DialogSearchResult {
-        public TLObject object;
-        public int date;
-        public CharSequence name;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
index 817052600..dff52a3e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
@@ -13,14 +13,14 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 
-import org.telegram.R;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
+import org.telegram.R;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.DrawerActionCell;
-import org.telegram.ui.Cells.DrawerProfileCell;
+import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.EmptyCell;
+import org.telegram.ui.Cells.DrawerProfileCell;
 
 public class DrawerLayoutAdapter extends BaseAdapter {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
index 06165af77..32e6ccfe1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
@@ -30,9 +30,11 @@
 
     public abstract void setStartDelay(long startDelay);
 
+    public abstract Animator10 setDuration(long duration);
+
     public abstract long getDuration();
 
-    public abstract Animator10 setDuration(long duration);
+    public abstract void setInterpolator(Interpolator value);
 
     public abstract boolean isRunning();
 
@@ -88,8 +90,6 @@ public Interpolator getInterpolator() {
         return null;
     }
 
-    public abstract void setInterpolator(Interpolator value);
-
     public void addListener(AnimatorListener listener) {
         if (mListeners == null) {
             mListeners = new ArrayList<AnimatorListener>();
@@ -179,17 +179,13 @@ public void setTarget(Object target) {
 
     public static interface AnimatorListener {
         void onAnimationStart(Animator10 animation);
-
         void onAnimationEnd(Animator10 animation);
-
         void onAnimationCancel(Animator10 animation);
-
         void onAnimationRepeat(Animator10 animation);
     }
 
     public static interface AnimatorPauseListener {
         void onAnimationPause(Animator10 animation);
-
         void onAnimationResume(Animator10 animation);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorSet10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorSet10.java
index a20a5d4fa..0f91b93b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorSet10.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/AnimatorSet10.java
@@ -25,13 +25,13 @@
 
 public final class AnimatorSet10 extends Animator10 {
 
-    boolean mTerminated = false;
     private ArrayList<Animator10> mPlayingSet = new ArrayList<Animator10>();
     private HashMap<Animator10, Node> mNodeMap = new HashMap<Animator10, Node>();
     private ArrayList<Node> mNodes = new ArrayList<Node>();
     private ArrayList<Node> mSortedNodes = new ArrayList<Node>();
     private boolean mNeedsSort = true;
     private AnimatorSetListener mSetListener = null;
+    boolean mTerminated = false;
     private boolean mStarted = false;
     private long mStartDelay = 0;
     private ValueAnimator mDelayAnim = null;
@@ -69,7 +69,7 @@ public void playSequentially(Animator10... items) {
                 play(items[0]);
             } else {
                 for (int i = 0; i < items.length - 1; ++i) {
-                    play(items[i]).before(items[i + 1]);
+                    play(items[i]).before(items[i+1]);
                 }
             }
         }
@@ -82,7 +82,7 @@ public void playSequentially(List<Animator10> items) {
                 play(items.get(0));
             } else {
                 for (int i = 0; i < items.size() - 1; ++i) {
-                    play(items.get(i)).before(items.get(i + 1));
+                    play(items.get(i)).before(items.get(i+1));
                 }
             }
         }
@@ -109,13 +109,13 @@ public void setTarget(Object target) {
     }
 
     @Override
-    public Interpolator getInterpolator() {
-        return mInterpolator;
+    public void setInterpolator(Interpolator interpolator) {
+        mInterpolator = interpolator;
     }
 
     @Override
-    public void setInterpolator(Interpolator interpolator) {
-        mInterpolator = interpolator;
+    public Interpolator getInterpolator() {
+        return mInterpolator;
     }
 
     public Builder play(Animator10 anim) {
@@ -140,7 +140,7 @@ public void cancel() {
             }
             if (mDelayAnim != null && mDelayAnim.isRunning()) {
                 mDelayAnim.cancel();
-            } else if (mSortedNodes.size() > 0) {
+            } else  if (mSortedNodes.size() > 0) {
                 for (Node node : mSortedNodes) {
                     node.animation.cancel();
                 }
@@ -335,11 +335,9 @@ public void start() {
             mDelayAnim.setDuration(mStartDelay);
             mDelayAnim.addListener(new AnimatorListenerAdapter10() {
                 boolean canceled = false;
-
                 public void onAnimationCancel(Animator10 anim) {
                     canceled = true;
                 }
-
                 public void onAnimationEnd(Animator10 anim) {
                     if (!canceled) {
                         int numNodes = nodesToStart.size();
@@ -427,60 +425,6 @@ public AnimatorSet10 clone() {
         return anim;
     }
 
-    private void sortNodes() {
-        if (mNeedsSort) {
-            mSortedNodes.clear();
-            ArrayList<Node> roots = new ArrayList<Node>();
-            int numNodes = mNodes.size();
-            for (Node node : mNodes) {
-                if (node.dependencies == null || node.dependencies.size() == 0) {
-                    roots.add(node);
-                }
-            }
-            ArrayList<Node> tmpRoots = new ArrayList<Node>();
-            while (roots.size() > 0) {
-                int numRoots = roots.size();
-                for (Node root : roots) {
-                    mSortedNodes.add(root);
-                    if (root.nodeDependents != null) {
-                        int numDependents = root.nodeDependents.size();
-                        for (int j = 0; j < numDependents; ++j) {
-                            Node node = root.nodeDependents.get(j);
-                            node.nodeDependencies.remove(root);
-                            if (node.nodeDependencies.size() == 0) {
-                                tmpRoots.add(node);
-                            }
-                        }
-                    }
-                }
-                roots.clear();
-                roots.addAll(tmpRoots);
-                tmpRoots.clear();
-            }
-            mNeedsSort = false;
-            if (mSortedNodes.size() != mNodes.size()) {
-                throw new IllegalStateException("Circular dependencies cannot exist in AnimatorSet");
-            }
-        } else {
-            int numNodes = mNodes.size();
-            for (Node node : mNodes) {
-                if (node.dependencies != null && node.dependencies.size() > 0) {
-                    int numDependencies = node.dependencies.size();
-                    for (int j = 0; j < numDependencies; ++j) {
-                        Dependency dependency = node.dependencies.get(j);
-                        if (node.nodeDependencies == null) {
-                            node.nodeDependencies = new ArrayList<Node>();
-                        }
-                        if (!node.nodeDependencies.contains(dependency.node)) {
-                            node.nodeDependencies.add(dependency.node);
-                        }
-                    }
-                }
-                node.done = false;
-            }
-        }
-    }
-
     private static class DependencyListener implements AnimatorListener {
 
         private AnimatorSet10 mAnimatorSet;
@@ -535,58 +479,6 @@ private void startIfReady(Animator10 dependencyAnimation) {
         }
     }
 
-    private static class Dependency {
-        static final int WITH = 0;
-        static final int AFTER = 1;
-        public Node node;
-        public int rule;
-
-        public Dependency(Node node, int rule) {
-            this.node = node;
-            this.rule = rule;
-        }
-    }
-
-    private static class Node implements Cloneable {
-        public Animator10 animation;
-        public ArrayList<Dependency> dependencies = null;
-        public ArrayList<Dependency> tmpDependencies = null;
-        public ArrayList<Node> nodeDependencies = null;
-        public ArrayList<Node> nodeDependents = null;
-        public boolean done = false;
-
-        public Node(Animator10 animation) {
-            this.animation = animation;
-        }
-
-        public void addDependency(Dependency dependency) {
-            if (dependencies == null) {
-                dependencies = new ArrayList<Dependency>();
-                nodeDependencies = new ArrayList<Node>();
-            }
-            dependencies.add(dependency);
-            if (!nodeDependencies.contains(dependency.node)) {
-                nodeDependencies.add(dependency.node);
-            }
-            Node dependencyNode = dependency.node;
-            if (dependencyNode.nodeDependents == null) {
-                dependencyNode.nodeDependents = new ArrayList<Node>();
-            }
-            dependencyNode.nodeDependents.add(this);
-        }
-
-        @Override
-        public Node clone() {
-            try {
-                Node node = (Node) super.clone();
-                node.animation = animation.clone();
-                return node;
-            } catch (CloneNotSupportedException e) {
-                throw new AssertionError();
-            }
-        }
-    }
-
     private class AnimatorSetListener implements AnimatorListener {
 
         private AnimatorSet10 mAnimatorSet;
@@ -648,6 +540,112 @@ public void onAnimationStart(Animator10 animation) {
         }
     }
 
+    private void sortNodes() {
+        if (mNeedsSort) {
+            mSortedNodes.clear();
+            ArrayList<Node> roots = new ArrayList<Node>();
+            int numNodes = mNodes.size();
+            for (Node node : mNodes) {
+                if (node.dependencies == null || node.dependencies.size() == 0) {
+                    roots.add(node);
+                }
+            }
+            ArrayList<Node> tmpRoots = new ArrayList<Node>();
+            while (roots.size() > 0) {
+                int numRoots = roots.size();
+                for (Node root : roots) {
+                    mSortedNodes.add(root);
+                    if (root.nodeDependents != null) {
+                        int numDependents = root.nodeDependents.size();
+                        for (int j = 0; j < numDependents; ++j) {
+                            Node node = root.nodeDependents.get(j);
+                            node.nodeDependencies.remove(root);
+                            if (node.nodeDependencies.size() == 0) {
+                                tmpRoots.add(node);
+                            }
+                        }
+                    }
+                }
+                roots.clear();
+                roots.addAll(tmpRoots);
+                tmpRoots.clear();
+            }
+            mNeedsSort = false;
+            if (mSortedNodes.size() != mNodes.size()) {
+                throw new IllegalStateException("Circular dependencies cannot exist in AnimatorSet");
+            }
+        } else {
+            int numNodes = mNodes.size();
+            for (Node node : mNodes) {
+                if (node.dependencies != null && node.dependencies.size() > 0) {
+                    int numDependencies = node.dependencies.size();
+                    for (int j = 0; j < numDependencies; ++j) {
+                        Dependency dependency = node.dependencies.get(j);
+                        if (node.nodeDependencies == null) {
+                            node.nodeDependencies = new ArrayList<Node>();
+                        }
+                        if (!node.nodeDependencies.contains(dependency.node)) {
+                            node.nodeDependencies.add(dependency.node);
+                        }
+                    }
+                }
+                node.done = false;
+            }
+        }
+    }
+
+    private static class Dependency {
+        static final int WITH = 0;
+        static final int AFTER = 1;
+        public Node node;
+        public int rule;
+
+        public Dependency(Node node, int rule) {
+            this.node = node;
+            this.rule = rule;
+        }
+    }
+
+    private static class Node implements Cloneable {
+        public Animator10 animation;
+        public ArrayList<Dependency> dependencies = null;
+        public ArrayList<Dependency> tmpDependencies = null;
+        public ArrayList<Node> nodeDependencies = null;
+        public ArrayList<Node> nodeDependents = null;
+        public boolean done = false;
+
+        public Node(Animator10 animation) {
+            this.animation = animation;
+        }
+
+        public void addDependency(Dependency dependency) {
+            if (dependencies == null) {
+                dependencies = new ArrayList<Dependency>();
+                nodeDependencies = new ArrayList<Node>();
+            }
+            dependencies.add(dependency);
+            if (!nodeDependencies.contains(dependency.node)) {
+                nodeDependencies.add(dependency.node);
+            }
+            Node dependencyNode = dependency.node;
+            if (dependencyNode.nodeDependents == null) {
+                dependencyNode.nodeDependents = new ArrayList<Node>();
+            }
+            dependencyNode.nodeDependents.add(this);
+        }
+
+        @Override
+        public Node clone() {
+            try {
+                Node node = (Node) super.clone();
+                node.animation = animation.clone();
+                return node;
+            } catch (CloneNotSupportedException e) {
+               throw new AssertionError();
+            }
+        }
+    }
+
     public class Builder {
 
         private Node mCurrentNode;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatKeyframeSet.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatKeyframeSet.java
index b8ee83468..52d0da5fe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatKeyframeSet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/FloatKeyframeSet.java
@@ -63,7 +63,7 @@ public float getFloatValue(float fraction) {
             if (mEvaluator == null) {
                 return firstValue + fraction * deltaValue;
             } else {
-                return ((Number) mEvaluator.evaluate(fraction, firstValue, lastValue)).floatValue();
+                return ((Number)mEvaluator.evaluate(fraction, firstValue, lastValue)).floatValue();
             }
         }
         if (fraction <= 0f) {
@@ -78,7 +78,7 @@ public float getFloatValue(float fraction) {
                 fraction = interpolator.getInterpolation(fraction);
             }
             float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
-            return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number) mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
+            return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
         } else if (fraction >= 1f) {
             final FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(mNumKeyframes - 2);
             final FloatKeyframe nextKeyframe = (FloatKeyframe) mKeyframes.get(mNumKeyframes - 1);
@@ -91,7 +91,7 @@ public float getFloatValue(float fraction) {
                 fraction = interpolator.getInterpolation(fraction);
             }
             float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
-            return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number) mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
+            return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
         }
         FloatKeyframe prevKeyframe = (FloatKeyframe) mKeyframes.get(0);
         for (int i = 1; i < mNumKeyframes; ++i) {
@@ -102,13 +102,13 @@ public float getFloatValue(float fraction) {
                     fraction = interpolator.getInterpolation(fraction);
                 }
                 float intervalFraction = (fraction - prevKeyframe.getFraction()) /
-                        (nextKeyframe.getFraction() - prevKeyframe.getFraction());
+                    (nextKeyframe.getFraction() - prevKeyframe.getFraction());
                 float prevValue = prevKeyframe.getFloatValue();
                 float nextValue = nextKeyframe.getFloatValue();
-                return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number) mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
+                return mEvaluator == null ? prevValue + intervalFraction * (nextValue - prevValue) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).floatValue();
             }
             prevKeyframe = nextKeyframe;
         }
-        return ((Number) mKeyframes.get(mNumKeyframes - 1).getValue()).floatValue();
+        return ((Number)mKeyframes.get(mNumKeyframes - 1).getValue()).floatValue();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntEvaluator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntEvaluator.java
index 8edd0123f..cd3a19ebe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntEvaluator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntEvaluator.java
@@ -19,6 +19,6 @@
 public class IntEvaluator implements TypeEvaluator<Integer> {
     public Integer evaluate(float fraction, Integer startValue, Integer endValue) {
         int startInt = startValue;
-        return (int) (startInt + fraction * (endValue - startInt));
+        return (int)(startInt + fraction * (endValue - startInt));
     }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntKeyframeSet.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntKeyframeSet.java
index 79ec8cebd..9d58863c8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntKeyframeSet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/IntKeyframeSet.java
@@ -61,9 +61,9 @@ public int getIntValue(float fraction) {
                 fraction = mInterpolator.getInterpolation(fraction);
             }
             if (mEvaluator == null) {
-                return firstValue + (int) (fraction * deltaValue);
+                return firstValue + (int)(fraction * deltaValue);
             } else {
-                return ((Number) mEvaluator.evaluate(fraction, firstValue, lastValue)).intValue();
+                return ((Number)mEvaluator.evaluate(fraction, firstValue, lastValue)).intValue();
             }
         }
         if (fraction <= 0f) {
@@ -78,7 +78,7 @@ public int getIntValue(float fraction) {
                 fraction = interpolator.getInterpolation(fraction);
             }
             float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
-            return mEvaluator == null ? prevValue + (int) (intervalFraction * (nextValue - prevValue)) : ((Number) mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
+            return mEvaluator == null ? prevValue + (int)(intervalFraction * (nextValue - prevValue)) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
         } else if (fraction >= 1f) {
             final IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(mNumKeyframes - 2);
             final IntKeyframe nextKeyframe = (IntKeyframe) mKeyframes.get(mNumKeyframes - 1);
@@ -91,7 +91,7 @@ public int getIntValue(float fraction) {
                 fraction = interpolator.getInterpolation(fraction);
             }
             float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
-            return mEvaluator == null ? prevValue + (int) (intervalFraction * (nextValue - prevValue)) : ((Number) mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
+            return mEvaluator == null ? prevValue + (int)(intervalFraction * (nextValue - prevValue)) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
         }
         IntKeyframe prevKeyframe = (IntKeyframe) mKeyframes.get(0);
         for (int i = 1; i < mNumKeyframes; ++i) {
@@ -104,11 +104,11 @@ public int getIntValue(float fraction) {
                 float intervalFraction = (fraction - prevKeyframe.getFraction()) / (nextKeyframe.getFraction() - prevKeyframe.getFraction());
                 int prevValue = prevKeyframe.getIntValue();
                 int nextValue = nextKeyframe.getIntValue();
-                return mEvaluator == null ? prevValue + (int) (intervalFraction * (nextValue - prevValue)) : ((Number) mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
+                return mEvaluator == null ? prevValue + (int)(intervalFraction * (nextValue - prevValue)) : ((Number)mEvaluator.evaluate(intervalFraction, prevValue, nextValue)).intValue();
             }
             prevKeyframe = nextKeyframe;
         }
-        return ((Number) mKeyframes.get(mNumKeyframes - 1).getValue()).intValue();
+        return ((Number)mKeyframes.get(mNumKeyframes - 1).getValue()).intValue();
     }
 }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Keyframe.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Keyframe.java
index 2250d6e00..cb71460cd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Keyframe.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Keyframe.java
@@ -22,8 +22,8 @@
 
     float mFraction;
     Class mValueType;
-    boolean mHasValue = false;
     private Interpolator mInterpolator = null;
+    boolean mHasValue = false;
 
     public static Keyframe ofInt(float fraction, int value) {
         return new IntKeyframe(fraction, value);
@@ -54,7 +54,6 @@ public boolean hasValue() {
     }
 
     public abstract Object getValue();
-
     public abstract void setValue(Object value);
 
     public float getFraction() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/KeyframeSet.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/KeyframeSet.java
index 1fc0816ba..98a34ff67 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/KeyframeSet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/KeyframeSet.java
@@ -16,16 +16,15 @@
 
 package org.telegram.ui.Animation;
 
+import java.util.ArrayList;
+import java.util.Arrays;
 import android.util.Log;
 import android.view.animation.Interpolator;
 
-import org.telegram.ui.Animation.Keyframe.FloatKeyframe;
 import org.telegram.ui.Animation.Keyframe.IntKeyframe;
+import org.telegram.ui.Animation.Keyframe.FloatKeyframe;
 import org.telegram.ui.Animation.Keyframe.ObjectKeyframe;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-
 class KeyframeSet {
 
     int mNumKeyframes;
@@ -47,7 +46,7 @@ public KeyframeSet(Keyframe... keyframes) {
 
     public static KeyframeSet ofInt(int... values) {
         int numKeyframes = values.length;
-        IntKeyframe keyframes[] = new IntKeyframe[Math.max(numKeyframes, 2)];
+        IntKeyframe keyframes[] = new IntKeyframe[Math.max(numKeyframes,2)];
         if (numKeyframes == 1) {
             keyframes[0] = (IntKeyframe) Keyframe.ofInt(0f);
             keyframes[1] = (IntKeyframe) Keyframe.ofInt(1f, values[0]);
@@ -63,7 +62,7 @@ public static KeyframeSet ofInt(int... values) {
     public static KeyframeSet ofFloat(float... values) {
         boolean badValue = false;
         int numKeyframes = values.length;
-        FloatKeyframe keyframes[] = new FloatKeyframe[Math.max(numKeyframes, 2)];
+        FloatKeyframe keyframes[] = new FloatKeyframe[Math.max(numKeyframes,2)];
         if (numKeyframes == 1) {
             keyframes[0] = (FloatKeyframe) Keyframe.ofFloat(0f);
             keyframes[1] = (FloatKeyframe) Keyframe.ofFloat(1f, values[0]);
@@ -118,7 +117,7 @@ public static KeyframeSet ofKeyframe(Keyframe... keyframes) {
 
     public static KeyframeSet ofObject(Object... values) {
         int numKeyframes = values.length;
-        ObjectKeyframe keyframes[] = new ObjectKeyframe[Math.max(numKeyframes, 2)];
+        ObjectKeyframe keyframes[] = new ObjectKeyframe[Math.max(numKeyframes,2)];
         if (numKeyframes == 1) {
             keyframes[0] = (ObjectKeyframe) Keyframe.ofObject(0f);
             keyframes[1] = (ObjectKeyframe) Keyframe.ofObject(1f, values[0]);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ObjectAnimator10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ObjectAnimator10.java
index 57829cab4..9f7ea7369 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ObjectAnimator10.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ObjectAnimator10.java
@@ -214,6 +214,52 @@ public Float get(View object) {
     private Property mProperty;
     private boolean mAutoCancel = false;
 
+    public void setPropertyName(String propertyName) {
+        if (mValues != null) {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            String oldName = valuesHolder.getPropertyName();
+            valuesHolder.setPropertyName(propertyName);
+            mValuesMap.remove(oldName);
+            mValuesMap.put(propertyName, valuesHolder);
+        }
+        mPropertyName = propertyName;
+        mInitialized = false;
+    }
+
+    public void setProperty(Property property) {
+        if (mValues != null) {
+            PropertyValuesHolder valuesHolder = mValues[0];
+            String oldName = valuesHolder.getPropertyName();
+            valuesHolder.setProperty(property);
+            mValuesMap.remove(oldName);
+            mValuesMap.put(mPropertyName, valuesHolder);
+        }
+        if (mProperty != null) {
+            mPropertyName = property.getName();
+        }
+        mProperty = property;
+        mInitialized = false;
+    }
+
+    public String getPropertyName() {
+        String propertyName = null;
+        if (mPropertyName != null) {
+            propertyName = mPropertyName;
+        } else if (mProperty != null) {
+            propertyName = mProperty.getName();
+        } else if (mValues != null && mValues.length > 0) {
+            for (int i = 0; i < mValues.length; ++i) {
+                if (i == 0) {
+                    propertyName = "";
+                } else {
+                    propertyName += ",";
+                }
+                propertyName += mValues[i].getPropertyName();
+            }
+        }
+        return propertyName;
+    }
+
     public ObjectAnimator10() {
 
     }
@@ -273,52 +319,6 @@ public static ObjectAnimator10 ofPropertyValuesHolder(Object target, PropertyVal
         return anim;
     }
 
-    public void setProperty(Property property) {
-        if (mValues != null) {
-            PropertyValuesHolder valuesHolder = mValues[0];
-            String oldName = valuesHolder.getPropertyName();
-            valuesHolder.setProperty(property);
-            mValuesMap.remove(oldName);
-            mValuesMap.put(mPropertyName, valuesHolder);
-        }
-        if (mProperty != null) {
-            mPropertyName = property.getName();
-        }
-        mProperty = property;
-        mInitialized = false;
-    }
-
-    public String getPropertyName() {
-        String propertyName = null;
-        if (mPropertyName != null) {
-            propertyName = mPropertyName;
-        } else if (mProperty != null) {
-            propertyName = mProperty.getName();
-        } else if (mValues != null && mValues.length > 0) {
-            for (int i = 0; i < mValues.length; ++i) {
-                if (i == 0) {
-                    propertyName = "";
-                } else {
-                    propertyName += ",";
-                }
-                propertyName += mValues[i].getPropertyName();
-            }
-        }
-        return propertyName;
-    }
-
-    public void setPropertyName(String propertyName) {
-        if (mValues != null) {
-            PropertyValuesHolder valuesHolder = mValues[0];
-            String oldName = valuesHolder.getPropertyName();
-            valuesHolder.setPropertyName(propertyName);
-            mValuesMap.remove(oldName);
-            mValuesMap.put(propertyName, valuesHolder);
-        }
-        mPropertyName = propertyName;
-        mInitialized = false;
-    }
-
     @SuppressWarnings("unchecked")
     @Override
     public void setIntValues(int... values) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Property.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Property.java
index 74a3d4a8f..96beb2109 100755
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Property.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Property.java
@@ -20,21 +20,21 @@
     private final String mName;
     private final Class<V> mType;
 
+    public static <T, V> Property<T, V> of(Class<T> hostType, Class<V> valueType, String name) {
+        return new ReflectiveProperty<T, V>(hostType, valueType, name);
+    }
+
     public Property(Class<V> type, String name) {
         mName = name;
         mType = type;
     }
 
-    public static <T, V> Property<T, V> of(Class<T> hostType, Class<V> valueType, String name) {
-        return new ReflectiveProperty<T, V>(hostType, valueType, name);
-    }
-
     public boolean isReadOnly() {
         return false;
     }
 
     public void set(T object, V value) {
-        throw new UnsupportedOperationException("Property " + getName() + " is read-only");
+        throw new UnsupportedOperationException("Property " + getName() +" is read-only");
     }
 
     public abstract V get(T object);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/PropertyValuesHolder.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/PropertyValuesHolder.java
index 064d57d37..d01e4d9c7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/PropertyValuesHolder.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/PropertyValuesHolder.java
@@ -23,21 +23,26 @@
 
 public class PropertyValuesHolder implements Cloneable {
 
+    String mPropertyName;
+    protected Property mProperty;
+    Method mSetter = null;
+    private Method mGetter = null;
+    Class mValueType;
+    KeyframeSet mKeyframeSet = null;
+
     private static final TypeEvaluator sIntEvaluator = new IntEvaluator();
     private static final TypeEvaluator sFloatEvaluator = new FloatEvaluator();
-    private static final HashMap<Class, HashMap<String, Method>> sSetterPropertyMap = new HashMap<Class, HashMap<String, Method>>();
-    private static final HashMap<Class, HashMap<String, Method>> sGetterPropertyMap = new HashMap<Class, HashMap<String, Method>>();
+
     private static Class[] FLOAT_VARIANTS = {float.class, Float.class, double.class, int.class, Double.class, Integer.class};
     private static Class[] INTEGER_VARIANTS = {int.class, Integer.class, float.class, double.class, Float.class, Double.class};
     private static Class[] DOUBLE_VARIANTS = {double.class, Double.class, float.class, int.class, Float.class, Integer.class};
+
+    private static final HashMap<Class, HashMap<String, Method>> sSetterPropertyMap = new HashMap<Class, HashMap<String, Method>>();
+    private static final HashMap<Class, HashMap<String, Method>> sGetterPropertyMap = new HashMap<Class, HashMap<String, Method>>();
+
     final ReentrantReadWriteLock mPropertyMapLock = new ReentrantReadWriteLock();
     final Object[] mTmpValueArray = new Object[1];
-    protected Property mProperty;
-    String mPropertyName;
-    Method mSetter = null;
-    Class mValueType;
-    KeyframeSet mKeyframeSet = null;
-    private Method mGetter = null;
+
     private TypeEvaluator mEvaluator;
 
     private Object mAnimatedValue;
@@ -113,15 +118,6 @@ public static PropertyValuesHolder ofKeyframe(Property property, Keyframe... val
         }
     }
 
-    static String getMethodName(String prefix, String propertyName) {
-        if (propertyName == null || propertyName.length() == 0) {
-            return prefix;
-        }
-        char firstLetter = Character.toUpperCase(propertyName.charAt(0));
-        String theRest = propertyName.substring(1);
-        return prefix + firstLetter + theRest;
-    }
-
     public void setIntValues(int... values) {
         mValueType = int.class;
         mKeyframeSet = KeyframeSet.ofInt(values);
@@ -307,6 +303,23 @@ public PropertyValuesHolder clone() {
         }
     }
 
+    @SuppressWarnings("unchecked")
+    void setAnimatedValue(Object target) {
+        if (mProperty != null) {
+            mProperty.set(target, getAnimatedValue());
+        }
+        if (mSetter != null) {
+            try {
+                mTmpValueArray[0] = getAnimatedValue();
+                mSetter.invoke(target, mTmpValueArray);
+            } catch (InvocationTargetException e) {
+                e.printStackTrace();
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
     void init() {
         if (mEvaluator == null) {
             mEvaluator = (mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;
@@ -325,6 +338,10 @@ void calculateValue(float fraction) {
         mAnimatedValue = mKeyframeSet.getValue(fraction);
     }
 
+    public void setPropertyName(String propertyName) {
+        mPropertyName = propertyName;
+    }
+
     public void setProperty(Property property) {
         mProperty = property;
     }
@@ -333,41 +350,30 @@ public String getPropertyName() {
         return mPropertyName;
     }
 
-    public void setPropertyName(String propertyName) {
-        mPropertyName = propertyName;
-    }
-
     Object getAnimatedValue() {
         return mAnimatedValue;
     }
 
-    @SuppressWarnings("unchecked")
-    void setAnimatedValue(Object target) {
-        if (mProperty != null) {
-            mProperty.set(target, getAnimatedValue());
-        }
-        if (mSetter != null) {
-            try {
-                mTmpValueArray[0] = getAnimatedValue();
-                mSetter.invoke(target, mTmpValueArray);
-            } catch (InvocationTargetException e) {
-                e.printStackTrace();
-            } catch (IllegalAccessException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
     @Override
     public String toString() {
         return mPropertyName + ": " + mKeyframeSet.toString();
     }
 
+    static String getMethodName(String prefix, String propertyName) {
+        if (propertyName == null || propertyName.length() == 0) {
+            return prefix;
+        }
+        char firstLetter = Character.toUpperCase(propertyName.charAt(0));
+        String theRest = propertyName.substring(1);
+        return prefix + firstLetter + theRest;
+    }
+
     static class IntPropertyValuesHolder extends PropertyValuesHolder {
         private static final HashMap<Class, HashMap<String, Integer>> sJNISetterPropertyMap = new HashMap<Class, HashMap<String, Integer>>();
+        private IntProperty mIntProperty;
+
         IntKeyframeSet mIntKeyframeSet;
         int mIntAnimatedValue;
-        private IntProperty mIntProperty;
 
         public IntPropertyValuesHolder(String propertyName, IntKeyframeSet keyframeSet) {
             super(propertyName);
@@ -415,6 +421,13 @@ Object getAnimatedValue() {
             return mIntAnimatedValue;
         }
 
+        @Override
+        public IntPropertyValuesHolder clone() {
+            IntPropertyValuesHolder newPVH = (IntPropertyValuesHolder) super.clone();
+            newPVH.mIntKeyframeSet = (IntKeyframeSet) newPVH.mKeyframeSet;
+            return newPVH;
+        }
+
         @SuppressWarnings("unchecked")
         @Override
         void setAnimatedValue(Object target) {
@@ -438,13 +451,6 @@ void setAnimatedValue(Object target) {
             }
         }
 
-        @Override
-        public IntPropertyValuesHolder clone() {
-            IntPropertyValuesHolder newPVH = (IntPropertyValuesHolder) super.clone();
-            newPVH.mIntKeyframeSet = (IntKeyframeSet) newPVH.mKeyframeSet;
-            return newPVH;
-        }
-
         @Override
         void setupSetter(Class targetClass) {
             if (mProperty != null) {
@@ -458,9 +464,10 @@ void setupSetter(Class targetClass) {
     static class FloatPropertyValuesHolder extends PropertyValuesHolder {
 
         private static final HashMap<Class, HashMap<String, Integer>> sJNISetterPropertyMap = new HashMap<Class, HashMap<String, Integer>>();
+        private FloatProperty10 mFloatProperty;
+
         FloatKeyframeSet mFloatKeyframeSet;
         float mFloatAnimatedValue;
-        private FloatProperty10 mFloatProperty;
 
         public FloatPropertyValuesHolder(String propertyName, FloatKeyframeSet keyframeSet) {
             super(propertyName);
@@ -508,6 +515,13 @@ Object getAnimatedValue() {
             return mFloatAnimatedValue;
         }
 
+        @Override
+        public FloatPropertyValuesHolder clone() {
+            FloatPropertyValuesHolder newPVH = (FloatPropertyValuesHolder) super.clone();
+            newPVH.mFloatKeyframeSet = (FloatKeyframeSet) newPVH.mKeyframeSet;
+            return newPVH;
+        }
+
         @SuppressWarnings("unchecked")
         @Override
         void setAnimatedValue(Object target) {
@@ -531,13 +545,6 @@ void setAnimatedValue(Object target) {
             }
         }
 
-        @Override
-        public FloatPropertyValuesHolder clone() {
-            FloatPropertyValuesHolder newPVH = (FloatPropertyValuesHolder) super.clone();
-            newPVH.mFloatKeyframeSet = (FloatKeyframeSet) newPVH.mKeyframeSet;
-            return newPVH;
-        }
-
         @Override
         void setupSetter(Class targetClass) {
             if (mProperty != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ReflectiveProperty.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ReflectiveProperty.java
index d3163cabd..ce487b4ff 100755
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ReflectiveProperty.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ReflectiveProperty.java
@@ -38,12 +38,12 @@
      * field results in throwing NoSuchPropertyException.
      *
      * @param propertyHolder The class on which the methods or field are found
-     * @param name           The name of the property, where this name is capitalized and appended to
-     *                       "get" and "is to search for the appropriate methods. If the get/is methods are not found,
-     *                       the constructor will search for a field with that exact name.
+     * @param name The name of the property, where this name is capitalized and appended to
+     * "get" and "is to search for the appropriate methods. If the get/is methods are not found,
+     * the constructor will search for a field with that exact name.
      */
     public ReflectiveProperty(Class<T> propertyHolder, Class<V> valueType, String name) {
-        // TODO: cache reflection info for each new class/name pair
+         // TODO: cache reflection info for each new class/name pair
         super(valueType, name);
         char firstLetter = Character.toUpperCase(name.charAt(0));
         String theRest = name.substring(1);
@@ -147,7 +147,7 @@ public void set(T object, V value) {
                 throw new AssertionError();
             }
         } else {
-            throw new UnsupportedOperationException("Property " + getName() + " is read-only");
+            throw new UnsupportedOperationException("Property " + getName() +" is read-only");
         }
     }
 
@@ -155,7 +155,7 @@ public void set(T object, V value) {
     public V get(T object) {
         if (mGetter != null) {
             try {
-                return (V) mGetter.invoke(object, (Object[]) null);
+                return (V) mGetter.invoke(object, (Object[])null);
             } catch (IllegalAccessException e) {
                 throw new AssertionError();
             } catch (InvocationTargetException e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
index 288286f4d..b4baca6de 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
@@ -30,50 +30,53 @@
 
 public class ValueAnimator extends Animator10 {
 
-    public static final int RESTART = 1;
-    private int mRepeatMode = RESTART;
-    public static final int REVERSE = 2;
-    public static final int INFINITE = -1;
-    static final int STOPPED = 0;
-    int mPlayingState = STOPPED;
-    static final int RUNNING = 1;
-    static final int SEEKED = 2;
-    private static final Interpolator sDefaultInterpolator = new AccelerateDecelerateInterpolator();
-    private Interpolator mInterpolator = sDefaultInterpolator;
-    protected static ThreadLocal<AnimationHandler> sAnimationHandler = new ThreadLocal<AnimationHandler>();
     private static float sDurationScale = 1.0f;
-    private long mDuration = (long) (300 * sDurationScale);
+    static final int STOPPED    = 0;
+    static final int RUNNING    = 1;
+    static final int SEEKED     = 2;
+
     long mStartTime;
     long mSeekTime = -1;
-    boolean mInitialized = false;
-    PropertyValuesHolder[] mValues;
-    HashMap<String, PropertyValuesHolder> mValuesMap;
     private long mPauseTime;
     private boolean mResumed = false;
+    protected static ThreadLocal<AnimationHandler> sAnimationHandler = new ThreadLocal<AnimationHandler>();
+    private static final Interpolator sDefaultInterpolator = new AccelerateDecelerateInterpolator();
     private boolean mPlayingBackwards = false;
     private int mCurrentIteration = 0;
     private float mCurrentFraction = 0f;
     private boolean mStartedDelay = false;
     private long mDelayStartTime;
+    int mPlayingState = STOPPED;
     private boolean mRunning = false;
     private boolean mStarted = false;
     private boolean mStartListenersCalled = false;
+    boolean mInitialized = false;
+
+    private long mDuration = (long)(300 * sDurationScale);
     private long mUnscaledDuration = 300;
     private long mStartDelay = 0;
     private long mUnscaledStartDelay = 0;
     private int mRepeatCount = 0;
+    private int mRepeatMode = RESTART;
+    private Interpolator mInterpolator = sDefaultInterpolator;
     private ArrayList<AnimatorUpdateListener> mUpdateListeners = null;
+    PropertyValuesHolder[] mValues;
+    HashMap<String, PropertyValuesHolder> mValuesMap;
 
-    public ValueAnimator() {
+    public static final int RESTART = 1;
+    public static final int REVERSE = 2;
+    public static final int INFINITE = -1;
 
+    public static void setDurationScale(float durationScale) {
+        sDurationScale = durationScale;
     }
 
     public static float getDurationScale() {
         return sDurationScale;
     }
 
-    public static void setDurationScale(float durationScale) {
-        sDurationScale = durationScale;
+    public ValueAnimator() {
+
     }
 
     public static ValueAnimator ofInt(int... values) {
@@ -101,29 +104,6 @@ public static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values)
         return anim;
     }
 
-    public static int getCurrentAnimationsCount() {
-        AnimationHandler handler = sAnimationHandler.get();
-        return handler != null ? handler.mAnimations.size() : 0;
-    }
-
-    public static void clearAllAnimations() {
-        AnimationHandler handler = sAnimationHandler.get();
-        if (handler != null) {
-            handler.mAnimations.clear();
-            handler.mPendingAnimations.clear();
-            handler.mDelayedAnims.clear();
-        }
-    }
-
-    private static AnimationHandler getOrCreateAnimationHandler() {
-        AnimationHandler handler = sAnimationHandler.get();
-        if (handler == null) {
-            handler = new AnimationHandler();
-            sAnimationHandler.set(handler);
-        }
-        return handler;
-    }
-
     public void setIntValues(int... values) {
         if (values == null || values.length == 0) {
             return;
@@ -163,10 +143,6 @@ public void setObjectValues(Object... values) {
         mInitialized = false;
     }
 
-    public PropertyValuesHolder[] getValues() {
-        return mValues;
-    }
-
     public void setValues(PropertyValuesHolder... values) {
         int numValues = values.length;
         mValues = values;
@@ -177,6 +153,10 @@ public void setValues(PropertyValuesHolder... values) {
         mInitialized = false;
     }
 
+    public PropertyValuesHolder[] getValues() {
+        return mValues;
+    }
+
     void initAnimation() {
         if (!mInitialized) {
             int numValues = mValues.length;
@@ -187,24 +167,17 @@ void initAnimation() {
         }
     }
 
-    public long getDuration() {
-        return mUnscaledDuration;
-    }
-
     public ValueAnimator setDuration(long duration) {
         if (duration < 0) {
             throw new IllegalArgumentException("Animators cannot have negative duration: " + duration);
         }
         mUnscaledDuration = duration;
-        mDuration = (long) (duration * sDurationScale);
+        mDuration = (long)(duration * sDurationScale);
         return this;
     }
 
-    public long getCurrentPlayTime() {
-        if (!mInitialized || mPlayingState == STOPPED) {
-            return 0;
-        }
-        return AnimationUtils.currentAnimationTimeMillis() - mStartTime;
+    public long getDuration() {
+        return mUnscaledDuration;
     }
 
     public void setCurrentPlayTime(long playTime) {
@@ -218,12 +191,102 @@ public void setCurrentPlayTime(long playTime) {
         doAnimationFrame(currentTime);
     }
 
+    public long getCurrentPlayTime() {
+        if (!mInitialized || mPlayingState == STOPPED) {
+            return 0;
+        }
+        return AnimationUtils.currentAnimationTimeMillis() - mStartTime;
+    }
+
+    @SuppressWarnings("unchecked")
+    protected static class AnimationHandler implements Runnable {
+
+        protected final ArrayList<ValueAnimator> mAnimations = new ArrayList<ValueAnimator>();
+        private final ArrayList<ValueAnimator> mTmpAnimations = new ArrayList<ValueAnimator>();
+        protected final ArrayList<ValueAnimator> mPendingAnimations = new ArrayList<ValueAnimator>();
+        protected final ArrayList<ValueAnimator> mDelayedAnims = new ArrayList<ValueAnimator>();
+        private final ArrayList<ValueAnimator> mEndingAnims = new ArrayList<ValueAnimator>();
+        private final ArrayList<ValueAnimator> mReadyAnims = new ArrayList<ValueAnimator>();
+
+        private boolean mAnimationScheduled;
+
+        public void start() {
+            scheduleAnimation();
+        }
+
+        private void doAnimationFrame(long frameTime) {
+            while (mPendingAnimations.size() > 0) {
+                ArrayList<ValueAnimator> pendingCopy = (ArrayList<ValueAnimator>) mPendingAnimations.clone();
+                mPendingAnimations.clear();
+                int count = pendingCopy.size();
+                for (ValueAnimator anim : pendingCopy) {
+                    if (anim.mStartDelay == 0) {
+                        anim.startAnimation(this);
+                    } else {
+                        mDelayedAnims.add(anim);
+                    }
+                }
+            }
+
+            int numDelayedAnims = mDelayedAnims.size();
+            for (ValueAnimator anim : mDelayedAnims) {
+                if (anim.delayedAnimationFrame(frameTime)) {
+                    mReadyAnims.add(anim);
+                }
+            }
+            int numReadyAnims = mReadyAnims.size();
+            if (numReadyAnims > 0) {
+                for (ValueAnimator anim : mReadyAnims) {
+                    anim.startAnimation(this);
+                    anim.mRunning = true;
+                    mDelayedAnims.remove(anim);
+                }
+                mReadyAnims.clear();
+            }
+
+            int numAnims = mAnimations.size();
+            for (ValueAnimator mAnimation : mAnimations) {
+                mTmpAnimations.add(mAnimation);
+            }
+            for (int i = 0; i < numAnims; ++i) {
+                ValueAnimator anim = mTmpAnimations.get(i);
+                if (mAnimations.contains(anim) && anim.doAnimationFrame(frameTime)) {
+                    mEndingAnims.add(anim);
+                }
+            }
+            mTmpAnimations.clear();
+            if (mEndingAnims.size() > 0) {
+                for (ValueAnimator mEndingAnim : mEndingAnims) {
+                    mEndingAnim.endAnimation(this);
+                }
+                mEndingAnims.clear();
+            }
+
+            if (!mAnimations.isEmpty() || !mDelayedAnims.isEmpty()) {
+                scheduleAnimation();
+            }
+        }
+
+        @Override
+        public void run() {
+            mAnimationScheduled = false;
+            doAnimationFrame(System.nanoTime() / 1000000);
+        }
+
+        private void scheduleAnimation() {
+            if (!mAnimationScheduled) {
+                AndroidUtilities.runOnUIThread(this);
+                mAnimationScheduled = true;
+            }
+        }
+    }
+
     public long getStartDelay() {
         return mUnscaledStartDelay;
     }
 
     public void setStartDelay(long startDelay) {
-        this.mStartDelay = (long) (startDelay * sDurationScale);
+        this.mStartDelay = (long)(startDelay * sDurationScale);
         mUnscaledStartDelay = startDelay;
     }
 
@@ -243,22 +306,22 @@ public Object getAnimatedValue(String propertyName) {
         }
     }
 
-    public int getRepeatCount() {
-        return mRepeatCount;
-    }
-
     public void setRepeatCount(int value) {
         mRepeatCount = value;
     }
 
-    public int getRepeatMode() {
-        return mRepeatMode;
+    public int getRepeatCount() {
+        return mRepeatCount;
     }
 
     public void setRepeatMode(int value) {
         mRepeatMode = value;
     }
 
+    public int getRepeatMode() {
+        return mRepeatMode;
+    }
+
     public void addUpdateListener(AnimatorUpdateListener listener) {
         if (mUpdateListeners == null) {
             mUpdateListeners = new ArrayList<AnimatorUpdateListener>();
@@ -284,11 +347,6 @@ public void removeUpdateListener(AnimatorUpdateListener listener) {
         }
     }
 
-    @Override
-    public Interpolator getInterpolator() {
-        return mInterpolator;
-    }
-
     @Override
     public void setInterpolator(Interpolator value) {
         if (value != null) {
@@ -298,6 +356,11 @@ public void setInterpolator(Interpolator value) {
         }
     }
 
+    @Override
+    public Interpolator getInterpolator() {
+        return mInterpolator;
+    }
+
     public void setEvaluator(TypeEvaluator value) {
         if (value != null && mValues != null && mValues.length > 0) {
             mValues[0].setEvaluator(value);
@@ -426,7 +489,7 @@ private void endAnimation(AnimationHandler handler) {
         if ((mStarted || mRunning) && mListeners != null) {
             if (!mRunning) {
                 notifyStartListeners();
-            }
+             }
             ArrayList<AnimatorListener> tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();
             int numListeners = tmpListeners.size();
             for (AnimatorListener tmpListener : tmpListeners) {
@@ -476,33 +539,33 @@ private boolean delayedAnimationFrame(long currentTime) {
     boolean animationFrame(long currentTime) {
         boolean done = false;
         switch (mPlayingState) {
-            case RUNNING:
-            case SEEKED:
-                float fraction = mDuration > 0 ? (float) (currentTime - mStartTime) / mDuration : 1f;
-                if (fraction >= 1f) {
-                    if (mCurrentIteration < mRepeatCount || mRepeatCount == INFINITE) {
-                        if (mListeners != null) {
-                            int numListeners = mListeners.size();
-                            for (AnimatorListener mListener : mListeners) {
-                                mListener.onAnimationRepeat(this);
-                            }
+        case RUNNING:
+        case SEEKED:
+            float fraction = mDuration > 0 ? (float)(currentTime - mStartTime) / mDuration : 1f;
+            if (fraction >= 1f) {
+                if (mCurrentIteration < mRepeatCount || mRepeatCount == INFINITE) {
+                    if (mListeners != null) {
+                        int numListeners = mListeners.size();
+                        for (AnimatorListener mListener : mListeners) {
+                            mListener.onAnimationRepeat(this);
                         }
-                        if (mRepeatMode == REVERSE) {
-                            mPlayingBackwards = !mPlayingBackwards;
-                        }
-                        mCurrentIteration += (int) fraction;
-                        fraction = fraction % 1f;
-                        mStartTime += mDuration;
-                    } else {
-                        done = true;
-                        fraction = Math.min(fraction, 1.0f);
                     }
+                    if (mRepeatMode == REVERSE) {
+                        mPlayingBackwards = !mPlayingBackwards;
+                    }
+                    mCurrentIteration += (int)fraction;
+                    fraction = fraction % 1f;
+                    mStartTime += mDuration;
+                } else {
+                    done = true;
+                    fraction = Math.min(fraction, 1.0f);
                 }
-                if (mPlayingBackwards) {
-                    fraction = 1f - fraction;
-                }
-                animateValue(fraction);
-                break;
+            }
+            if (mPlayingBackwards) {
+                fraction = 1f - fraction;
+            }
+            animateValue(fraction);
+            break;
         }
 
         return done;
@@ -587,86 +650,26 @@ public ValueAnimator clone() {
         void onAnimationUpdate(ValueAnimator animation);
     }
 
-    @SuppressWarnings("unchecked")
-    protected static class AnimationHandler implements Runnable {
-
-        protected final ArrayList<ValueAnimator> mAnimations = new ArrayList<ValueAnimator>();
-        protected final ArrayList<ValueAnimator> mPendingAnimations = new ArrayList<ValueAnimator>();
-        protected final ArrayList<ValueAnimator> mDelayedAnims = new ArrayList<ValueAnimator>();
-        private final ArrayList<ValueAnimator> mTmpAnimations = new ArrayList<ValueAnimator>();
-        private final ArrayList<ValueAnimator> mEndingAnims = new ArrayList<ValueAnimator>();
-        private final ArrayList<ValueAnimator> mReadyAnims = new ArrayList<ValueAnimator>();
-
-        private boolean mAnimationScheduled;
-
-        public void start() {
-            scheduleAnimation();
-        }
-
-        private void doAnimationFrame(long frameTime) {
-            while (mPendingAnimations.size() > 0) {
-                ArrayList<ValueAnimator> pendingCopy = (ArrayList<ValueAnimator>) mPendingAnimations.clone();
-                mPendingAnimations.clear();
-                int count = pendingCopy.size();
-                for (ValueAnimator anim : pendingCopy) {
-                    if (anim.mStartDelay == 0) {
-                        anim.startAnimation(this);
-                    } else {
-                        mDelayedAnims.add(anim);
-                    }
-                }
-            }
-
-            int numDelayedAnims = mDelayedAnims.size();
-            for (ValueAnimator anim : mDelayedAnims) {
-                if (anim.delayedAnimationFrame(frameTime)) {
-                    mReadyAnims.add(anim);
-                }
-            }
-            int numReadyAnims = mReadyAnims.size();
-            if (numReadyAnims > 0) {
-                for (ValueAnimator anim : mReadyAnims) {
-                    anim.startAnimation(this);
-                    anim.mRunning = true;
-                    mDelayedAnims.remove(anim);
-                }
-                mReadyAnims.clear();
-            }
-
-            int numAnims = mAnimations.size();
-            for (ValueAnimator mAnimation : mAnimations) {
-                mTmpAnimations.add(mAnimation);
-            }
-            for (int i = 0; i < numAnims; ++i) {
-                ValueAnimator anim = mTmpAnimations.get(i);
-                if (mAnimations.contains(anim) && anim.doAnimationFrame(frameTime)) {
-                    mEndingAnims.add(anim);
-                }
-            }
-            mTmpAnimations.clear();
-            if (mEndingAnims.size() > 0) {
-                for (ValueAnimator mEndingAnim : mEndingAnims) {
-                    mEndingAnim.endAnimation(this);
-                }
-                mEndingAnims.clear();
-            }
-
-            if (!mAnimations.isEmpty() || !mDelayedAnims.isEmpty()) {
-                scheduleAnimation();
-            }
-        }
+    public static int getCurrentAnimationsCount() {
+        AnimationHandler handler = sAnimationHandler.get();
+        return handler != null ? handler.mAnimations.size() : 0;
+    }
 
-        @Override
-        public void run() {
-            mAnimationScheduled = false;
-            doAnimationFrame(System.nanoTime() / 1000000);
+    public static void clearAllAnimations() {
+        AnimationHandler handler = sAnimationHandler.get();
+        if (handler != null) {
+            handler.mAnimations.clear();
+            handler.mPendingAnimations.clear();
+            handler.mDelayedAnims.clear();
         }
+    }
 
-        private void scheduleAnimation() {
-            if (!mAnimationScheduled) {
-                AndroidUtilities.runOnUIThread(this);
-                mAnimationScheduled = true;
-            }
+    private static AnimationHandler getOrCreateAnimationHandler() {
+        AnimationHandler handler = sAnimationHandler.get();
+        if (handler == null) {
+            handler = new AnimationHandler();
+            sAnimationHandler.set(handler);
         }
+        return handler;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/View10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/View10.java
index be3831038..0863204d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/View10.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/View10.java
@@ -29,14 +29,26 @@
 
 public class View10 extends Animation {
 
-    private static final WeakHashMap<View, View10> PROXIES = new WeakHashMap<View, View10>();
     public static boolean NEED_PROXY = Build.VERSION.SDK_INT < 11;
+
+    private static final WeakHashMap<View, View10> PROXIES = new WeakHashMap<View, View10>();
+
+    public static View10 wrap(View view) {
+        View10 proxy = PROXIES.get(view);
+        Animation animation = view.getAnimation();
+        if (proxy == null || proxy != animation && animation != null) {
+            proxy = new View10(view);
+            PROXIES.put(view, proxy);
+        } else if (animation == null) {
+            view.setAnimation(proxy);
+        }
+        return proxy;
+    }
+
     private final WeakReference<View> mView;
     private final Camera mCamera = new Camera();
-    private final RectF mBefore = new RectF();
-    private final RectF mAfter = new RectF();
-    private final Matrix mTempMatrix = new Matrix();
     private boolean mHasPivot;
+
     private float mAlpha = 1;
     private float mPivotX;
     private float mPivotY;
@@ -47,6 +59,11 @@
     private float mScaleY = 1;
     private float mTranslationX;
     private float mTranslationY;
+
+    private final RectF mBefore = new RectF();
+    private final RectF mAfter = new RectF();
+    private final Matrix mTempMatrix = new Matrix();
+
     private View10(View view) {
         setDuration(0);
         setFillAfter(true);
@@ -54,18 +71,6 @@ private View10(View view) {
         mView = new WeakReference<View>(view);
     }
 
-    public static View10 wrap(View view) {
-        View10 proxy = PROXIES.get(view);
-        Animation animation = view.getAnimation();
-        if (proxy == null || proxy != animation && animation != null) {
-            proxy = new View10(view);
-            PROXIES.put(view, proxy);
-        } else if (animation == null) {
-            view.setAnimation(proxy);
-        }
-        return proxy;
-    }
-
     public float getAlpha() {
         return mAlpha;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorSetProxy.java b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorSetProxy.java
index b358680ab..50ac0c1d1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorSetProxy.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/AnimatorSetProxy.java
@@ -25,14 +25,6 @@
 
     private Object animatorSet;
 
-    public AnimatorSetProxy() {
-        if (View10.NEED_PROXY) {
-            animatorSet = new AnimatorSet10();
-        } else {
-            animatorSet = new AnimatorSet();
-        }
-    }
-
     public static <T, U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {
         return copyOfRange(original, 0, newLength, newType);
     }
@@ -53,6 +45,14 @@ public AnimatorSetProxy() {
         return result;
     }
 
+    public AnimatorSetProxy() {
+        if (View10.NEED_PROXY) {
+            animatorSet = new AnimatorSet10();
+        } else {
+            animatorSet = new AnimatorSet();
+        }
+    }
+
     @SuppressWarnings("unchecked")
     public void playTogether(Object... items) {
         if (View10.NEED_PROXY) {
@@ -68,13 +68,13 @@ public void playTogether(ArrayList<Object> items) {
         if (View10.NEED_PROXY) {
             ArrayList<Animator10> animators = new ArrayList<Animator10>();
             for (Object obj : items) {
-                animators.add((Animator10) obj);
+                animators.add((Animator10)obj);
             }
             ((AnimatorSet10) animatorSet).playTogether(animators);
         } else {
             ArrayList<Animator> animators = new ArrayList<Animator>();
             for (Object obj : items) {
-                animators.add((Animator) obj);
+                animators.add((Animator)obj);
             }
             ((AnimatorSet) animatorSet).playTogether(animators);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ViewProxy.java b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ViewProxy.java
index 4b6720826..478398bee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ViewProxy.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AnimationCompat/ViewProxy.java
@@ -86,6 +86,14 @@ public static float getRotationX(View view) {
         }
     }
 
+    public void setRotationX(View view, float rotationX) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setRotationX(rotationX);
+        } else {
+            view.setRotationX(rotationX);
+        }
+    }
+
     public static float getRotationY(View view) {
         if (View10.NEED_PROXY) {
             return View10.wrap(view).getRotationY();
@@ -94,6 +102,14 @@ public static float getRotationY(View view) {
         }
     }
 
+    public void setRotationY(View view, float rotationY) {
+        if (View10.NEED_PROXY) {
+            View10.wrap(view).setRotationY(rotationY);
+        } else {
+            view.setRotationY(rotationY);
+        }
+    }
+
     public static float getScaleX(View view) {
         if (View10.NEED_PROXY) {
             return View10.wrap(view).getScaleX();
@@ -229,20 +245,4 @@ public static Object wrap(View view) {
             return view;
         }
     }
-
-    public void setRotationX(View view, float rotationX) {
-        if (View10.NEED_PROXY) {
-            View10.wrap(view).setRotationX(rotationX);
-        } else {
-            view.setRotationX(rotationX);
-        }
-    }
-
-    public void setRotationY(View view, float rotationY) {
-        if (View10.NEED_PROXY) {
-            View10.wrap(view).setRotationY(rotationY);
-        } else {
-            view.setRotationY(rotationY);
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index e7f93f2c3..b8b19e7d7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -25,27 +25,28 @@
 import android.widget.TextView;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.LocaleController;
+import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.R;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.TextInfoCell;
 import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 public class BlockedUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate {
 
-    private final static int block_user = 1;
     private ListView listView;
     private ListAdapter listViewAdapter;
     private FrameLayout progressView;
     private TextView emptyTextView;
     private int selectedUserId;
 
+    private final static int block_user = 1;
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
@@ -160,7 +161,7 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     selectedUserId = MessagesController.getInstance().blockedUsers.get(i);
 
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    CharSequence[] items = new CharSequence[]{LocaleController.getString("Unblock", R.string.Unblock)};
+                    CharSequence[] items = new CharSequence[] {LocaleController.getString("Unblock", R.string.Unblock)};
                     builder.setItems(items, new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialogInterface, int i) {
@@ -184,7 +185,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 listView.setEmptyView(emptyTextView);
             }
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -195,7 +196,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 updateVisibleRows(mask);
             }
@@ -303,7 +304,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         @Override
         public int getItemViewType(int i) {
-            if (i == MessagesController.getInstance().blockedUsers.size()) {
+            if(i == MessagesController.getInstance().blockedUsers.size()) {
                 return 1;
             }
             return 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
index 8cebb7508..c0170b66f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
@@ -17,10 +17,36 @@
 
 public class BaseCell extends View {
 
+    private final class CheckForTap implements Runnable {
+        public void run() {
+            if (pendingCheckForLongPress == null) {
+                pendingCheckForLongPress = new CheckForLongPress();
+            }
+            pendingCheckForLongPress.currentPressCount = ++pressCount;
+            postDelayed(pendingCheckForLongPress, ViewConfiguration.getLongPressTimeout() - ViewConfiguration.getTapTimeout());
+        }
+    }
+
+    class CheckForLongPress implements Runnable {
+        public int currentPressCount;
+
+        public void run() {
+            if (checkingForLongPress && getParent() != null && currentPressCount == pressCount) {
+                checkingForLongPress = false;
+                MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_CANCEL, 0, 0, 0);
+                onTouchEvent(event);
+                event.recycle();
+                performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
+                onLongPress();
+            }
+        }
+    }
+
     private boolean checkingForLongPress = false;
     private CheckForLongPress pendingCheckForLongPress = null;
     private int pressCount = 0;
     private CheckForTap pendingCheckForTap = null;
+
     public BaseCell(Context context) {
         super(context);
     }
@@ -57,29 +83,4 @@ protected void cancelCheckLongPress() {
     protected void onLongPress() {
 
     }
-
-    private final class CheckForTap implements Runnable {
-        public void run() {
-            if (pendingCheckForLongPress == null) {
-                pendingCheckForLongPress = new CheckForLongPress();
-            }
-            pendingCheckForLongPress.currentPressCount = ++pressCount;
-            postDelayed(pendingCheckForLongPress, ViewConfiguration.getLongPressTimeout() - ViewConfiguration.getTapTimeout());
-        }
-    }
-
-    class CheckForLongPress implements Runnable {
-        public int currentPressCount;
-
-        public void run() {
-            if (checkingForLongPress && getParent() != null && currentPressCount == pressCount) {
-                checkingForLongPress = false;
-                MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_CANCEL, 0, 0, 0);
-                onTouchEvent(event);
-                event.recycle();
-                performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
-                onLongPress();
-            }
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index 6f0f06998..d591ad705 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -21,24 +21,32 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.PhotoObject;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.PhotoViewer;
+import org.telegram.ui.Components.AvatarDrawable;
 
 public class ChatActionCell extends BaseCell {
 
+    public static interface ChatActionCellDelegate {
+        public abstract void didClickedImage(ChatActionCell cell);
+        public abstract void didLongPressed(ChatActionCell cell);
+        public abstract void needOpenUserProfile(int uid);
+    }
+
     private static Drawable backgroundBlack;
     private static Drawable backgroundBlue;
     private static TextPaint textPaint;
+
     private URLSpan pressedLink;
+
     private ImageReceiver imageReceiver;
     private AvatarDrawable avatarDrawable;
     private StaticLayout textLayout;
@@ -50,7 +58,9 @@
     private boolean useBlackBackground = false;
     private int previousWidth = 0;
     private boolean imagePressed = false;
+
     private MessageObject currentMessageObject;
+
     private ChatActionCellDelegate delegate;
 
     public ChatActionCell(Context context) {
@@ -73,14 +83,6 @@ public void setDelegate(ChatActionCellDelegate delegate) {
         this.delegate = delegate;
     }
 
-    public void setUseBlackBackground(boolean value) {
-        useBlackBackground = value;
-    }
-
-    public MessageObject getMessageObject() {
-        return currentMessageObject;
-    }
-
     public void setMessageObject(MessageObject messageObject) {
         if (currentMessageObject == messageObject) {
             return;
@@ -116,11 +118,19 @@ public void setMessageObject(MessageObject messageObject) {
             }
             imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
         } else {
-            imageReceiver.setImageBitmap((Bitmap) null);
+            imageReceiver.setImageBitmap((Bitmap)null);
         }
         requestLayout();
     }
 
+    public void setUseBlackBackground(boolean value) {
+        useBlackBackground = value;
+    }
+
+    public MessageObject getMessageObject() {
+        return currentMessageObject;
+    }
+
     public ImageReceiver getPhotoImage() {
         return imageReceiver;
     }
@@ -174,11 +184,11 @@ public boolean onTouchEvent(MotionEvent event) {
                     y -= textY;
                     x -= textXLeft;
 
-                    final int line = textLayout.getLineForVertical((int) y);
+                    final int line = textLayout.getLineForVertical((int)y);
                     final int off = textLayout.getOffsetForHorizontal(line, x);
                     final float left = textLayout.getLineLeft(line);
                     if (left <= x && left + textLayout.getLineWidth(line) >= x) {
-                        Spannable buffer = (Spannable) currentMessageObject.messageText;
+                        Spannable buffer = (Spannable)currentMessageObject.messageText;
                         URLSpan[] link = buffer.getSpans(off, off, URLSpan.class);
 
                         if (link.length != 0) {
@@ -232,12 +242,12 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     float lineLeft = 0;
                     try {
                         lineWidth = textLayout.getLineWidth(a);
-                        textHeight = (int) Math.max(textHeight, Math.ceil(textLayout.getLineBottom(a)));
+                        textHeight = (int)Math.max(textHeight, Math.ceil(textLayout.getLineBottom(a)));
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                         return;
                     }
-                    textWidth = (int) Math.max(textWidth, Math.ceil(lineWidth));
+                    textWidth = (int)Math.max(textWidth, Math.ceil(lineWidth));
                 }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
@@ -280,12 +290,4 @@ protected void onDraw(Canvas canvas) {
             canvas.restore();
         }
     }
-
-    public static interface ChatActionCellDelegate {
-        public abstract void didClickedImage(ChatActionCell cell);
-
-        public abstract void didLongPressed(ChatActionCell cell);
-
-        public abstract void needOpenUserProfile(int uid);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index b62423e0a..bdff7ff45 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -17,14 +17,14 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.FileLoader;
+import org.telegram.android.MediaController;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessagesController;
+import org.telegram.R;
+import org.telegram.android.MessageObject;
+import org.telegram.android.ImageReceiver;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.ProgressView;
 import org.telegram.ui.Components.SeekBar;
@@ -35,7 +35,7 @@
 
     private static Drawable[][] statesDrawable = new Drawable[8][2];
     private static TextPaint timePaint;
-    public TLRPC.User audioUser;
+
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
     private boolean needAvatarImage = false;
@@ -43,15 +43,21 @@
     private ProgressView progressView;
     private int seekBarX;
     private int seekBarY;
+
     private int buttonState = 0;
     private int buttonX;
     private int buttonY;
     private boolean buttonPressed = false;
+
     private boolean avatarPressed = false;
+
     private StaticLayout timeLayout;
     private int timeX;
     private String lastTimeString = null;
+
     private int TAG;
+
+    public TLRPC.User audioUser;
     private TLRPC.FileLocation currentPhoto;
 
     public ChatAudioCell(Context context) {
@@ -199,7 +205,7 @@ public void updateProgress() {
         }
         String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
         if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
-            int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
+            int timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
             timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
         }
         invalidate();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index d692656f1..daae1b88a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -20,19 +20,34 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessagesController;
+import org.telegram.R;
+import org.telegram.android.MessageObject;
+import org.telegram.android.ImageReceiver;
 import org.telegram.ui.Components.AvatarDrawable;
 
 public class ChatBaseCell extends BaseCell {
 
-    protected static Drawable mediaBackgroundDrawable;
+    public static interface ChatBaseCellDelegate {
+        public abstract void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user);
+        public abstract void didPressedCancelSendButton(ChatBaseCell cell);
+        public abstract void didLongPressed(ChatBaseCell cell);
+        public abstract boolean canPerformActions();
+    }
+
+    public boolean isChat = false;
+    protected boolean isPressed = false;
+    protected boolean forwardName = false;
+    protected boolean media = false;
+    private boolean isCheckPressed = true;
+    private boolean wasLayout = false;
+    protected boolean isAvatarVisible = false;
+    protected MessageObject currentMessageObject;
+
     private static Drawable backgroundDrawableIn;
     private static Drawable backgroundDrawableInSelected;
     private static Drawable backgroundDrawableOut;
@@ -50,51 +65,56 @@
     private static Drawable clockMediaDrawable;
     private static Drawable broadcastMediaDrawable;
     private static Drawable errorDrawable;
+    protected static Drawable mediaBackgroundDrawable;
     private static TextPaint timePaintIn;
     private static TextPaint timePaintOut;
     private static TextPaint timeMediaPaint;
     private static TextPaint namePaint;
     private static TextPaint forwardNamePaint;
-    public boolean isChat = false;
-    protected boolean isPressed = false;
-    protected boolean forwardName = false;
-    protected boolean media = false;
-    protected boolean isAvatarVisible = false;
-    protected MessageObject currentMessageObject;
+
     protected int backgroundWidth = 100;
+
     protected int layoutWidth;
     protected int layoutHeight;
-    protected int nameWidth;
-    protected boolean drawName = false;
-    protected int forwardedNameWidth;
-    protected boolean drawForwardedName = false;
-    protected int timeWidth;
-    protected boolean drawTime = true;
-    protected ChatBaseCellDelegate delegate;
-    protected int namesOffset = 0;
-    private boolean isCheckPressed = true;
-    private boolean wasLayout = false;
+
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
     private boolean avatarPressed = false;
     private boolean forwardNamePressed = false;
+
     private StaticLayout nameLayout;
+    protected int nameWidth;
     private float nameOffsetX = 0;
+    protected boolean drawName = false;
+
     private StaticLayout forwardedNameLayout;
+    protected int forwardedNameWidth;
+    protected boolean drawForwardedName = false;
     private int forwardNameX;
     private int forwardNameY;
     private float forwardNameOffsetX = 0;
+
     private StaticLayout timeLayout;
+    protected int timeWidth;
     private int timeX;
     private TextPaint currentTimePaint;
     private String currentTimeString;
+    protected boolean drawTime = true;
+
     private TLRPC.User currentUser;
     private TLRPC.FileLocation currentPhoto;
     private String currentNameString;
+
     private TLRPC.User currentForwardUser;
     private String currentForwardNameString;
+
+    protected ChatBaseCellDelegate delegate;
+
+    protected int namesOffset = 0;
+
     private int last_send_state = 0;
     private int last_delete_date = 0;
+
     public ChatBaseCell(Context context) {
         super(context);
         if (backgroundDrawableIn == null) {
@@ -202,10 +222,6 @@ protected boolean isUserDataChanged() {
         return currentForwardNameString == null && newNameString != null || currentForwardNameString != null && newNameString == null || currentForwardNameString != null && newNameString != null && !currentForwardNameString.equals(newNameString);
     }
 
-    public final MessageObject getMessageObject() {
-        return currentMessageObject;
-    }
-
     public void setMessageObject(MessageObject messageObject) {
         currentMessageObject = messageObject;
         last_send_state = messageObject.messageOwner.send_state;
@@ -243,7 +259,7 @@ public void setMessageObject(MessageObject messageObject) {
         }
 
         currentTimeString = LocaleController.formatterDay.format((long) (currentMessageObject.messageOwner.date) * 1000);
-        timeWidth = (int) Math.ceil(currentTimePaint.measureText(currentTimeString));
+        timeWidth = (int)Math.ceil(currentTimePaint.measureText(currentTimeString));
 
         namesOffset = 0;
 
@@ -254,7 +270,7 @@ public void setMessageObject(MessageObject messageObject) {
             CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
             nameLayout = new StaticLayout(nameStringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (nameLayout.getLineCount() > 0) {
-                nameWidth = (int) Math.ceil(nameLayout.getLineWidth(0));
+                nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
                 namesOffset += AndroidUtilities.dp(18);
                 nameOffsetX = nameLayout.getLineLeft(0);
             } else {
@@ -297,6 +313,10 @@ public void setMessageObject(MessageObject messageObject) {
         requestLayout();
     }
 
+    public final MessageObject getMessageObject() {
+        return currentMessageObject;
+    }
+
     protected int getMaxNameWidth() {
         return backgroundWidth - AndroidUtilities.dp(8);
     }
@@ -504,7 +524,7 @@ protected void onDraw(Canvas canvas) {
                 boolean drawCheck2 = false;
                 boolean drawClock = false;
                 boolean drawError = false;
-                boolean isBroadcast = (int) (currentMessageObject.getDialogId() >> 32) == 1;
+                boolean isBroadcast = (int)(currentMessageObject.getDialogId() >> 32) == 1;
 
                 if (currentMessageObject.isSending()) {
                     drawCheck1 = false;
@@ -587,14 +607,4 @@ protected void onDraw(Canvas canvas) {
             }
         }
     }
-
-    public static interface ChatBaseCellDelegate {
-        public abstract void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user);
-
-        public abstract void didPressedCancelSendButton(ChatBaseCell cell);
-
-        public abstract void didLongPressed(ChatBaseCell cell);
-
-        public abstract boolean canPerformActions();
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
index 42ca675ff..36eca6ec1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
@@ -19,33 +19,43 @@
 import android.view.SoundEffectConstants;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.AvatarDrawable;
 
 public class ChatContactCell extends ChatBaseCell {
 
+    public static interface ChatContactCellDelegate {
+        public abstract void didClickAddButton(ChatContactCell cell, TLRPC.User user);
+        public abstract void didClickPhone(ChatContactCell cell);
+    }
+
     private static TextPaint namePaint;
     private static TextPaint phonePaint;
     private static Drawable addContactDrawableIn;
     private static Drawable addContactDrawableOut;
+
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
+
     private StaticLayout nameLayout;
     private StaticLayout phoneLayout;
+
     private TLRPC.User contactUser;
     private TLRPC.FileLocation currentPhoto;
+
     private boolean avatarPressed = false;
     private boolean buttonPressed = false;
     private boolean drawAddButton = false;
     private int namesWidth = 0;
+
     private ChatContactCellDelegate contactDelegate = null;
 
     public ChatContactCell(Context context) {
@@ -193,7 +203,7 @@ public void setMessageObject(MessageObject messageObject) {
             CharSequence stringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth, TextUtils.TruncateAt.END);
             nameLayout = new StaticLayout(stringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (nameLayout.getLineCount() > 0) {
-                nameWidth = (int) Math.ceil(nameLayout.getLineWidth(0));
+                nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
             } else {
                 nameWidth = 0;
             }
@@ -211,7 +221,7 @@ public void setMessageObject(MessageObject messageObject) {
             stringFinal = TextUtils.ellipsize(phone.replace("\n", " "), phonePaint, phoneWidth, TextUtils.TruncateAt.END);
             phoneLayout = new StaticLayout(stringFinal, phonePaint, phoneWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (phoneLayout.getLineCount() > 0) {
-                phoneWidth = (int) Math.ceil(phoneLayout.getLineWidth(0));
+                phoneWidth = (int)Math.ceil(phoneLayout.getLineWidth(0));
             } else {
                 phoneWidth = 0;
             }
@@ -285,10 +295,4 @@ protected void onDraw(Canvas canvas) {
             addContactDrawable.draw(canvas);
         }
     }
-
-    public static interface ChatContactCellDelegate {
-        public abstract void didClickAddButton(ChatContactCell cell, TLRPC.User user);
-
-        public abstract void didClickPhone(ChatContactCell cell);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index ba6091a9f..c06e501f3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -22,26 +22,31 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
-import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.PhotoObject;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
+import org.telegram.android.MediaController;
+import org.telegram.R;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.Components.GifDrawable;
+import org.telegram.android.MessageObject;
+import org.telegram.android.PhotoObject;
 import org.telegram.ui.Components.RadialProgress;
 import org.telegram.ui.PhotoViewer;
+import org.telegram.ui.Components.GifDrawable;
+import org.telegram.android.ImageReceiver;
 
 import java.io.File;
 import java.util.Locale;
 
 public class ChatMediaCell extends ChatBaseCell implements MediaController.FileDownloadProgressListener {
 
+    public static interface ChatMediaCellDelegate {
+        public abstract void didClickedImage(ChatMediaCell cell);
+        public abstract void didPressedOther(ChatMediaCell cell);
+    }
+
     private static Drawable placeholderDocInDrawable;
     private static Drawable placeholderDocOutDrawable;
     private static Drawable videoIconDrawable;
@@ -54,8 +59,10 @@
     private static TextPaint namePaint;
     private static Paint docBackPaint;
     private static Paint deleteProgressPaint;
+
     private GifDrawable gifDrawable = null;
     private RadialProgress radialProgress;
+
     private int photoWidth;
     private int photoHeight;
     private PhotoObject currentPhotoObject;
@@ -65,23 +72,30 @@
     private ImageReceiver photoImage;
     private boolean photoNotSet = false;
     private boolean cancelLoading = false;
+
     private boolean allowedToSetPhoto = true;
+
     private int TAG;
+
     private int buttonState = 0;
     private int buttonPressed = 0;
     private boolean imagePressed = false;
     private boolean otherPressed = false;
     private int buttonX;
     private int buttonY;
+
     private StaticLayout infoLayout;
     private int infoWidth;
     private int infoOffset = 0;
     private String currentInfoString;
+
     private StaticLayout nameLayout;
     private int nameWidth = 0;
     private String currentNameString;
+
     private ChatMediaCellDelegate mediaDelegate = null;
     private RectF deleteProgressRect = new RectF();
+
     public ChatMediaCell(Context context) {
         super(context);
 
@@ -381,7 +395,7 @@ private boolean isPhotoDataChanged(MessageObject object) {
             }
             double lat = object.messageOwner.media.geo.lat;
             double lon = object.messageOwner.media.geo._long;
-            String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
+            String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
             if (!url.equals(currentUrl)) {
                 return true;
             }
@@ -495,7 +509,7 @@ public void setMessageObject(MessageObject messageObject) {
                         photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, null, 0, false);
                     }
                 } else {
-                    photoImage.setImageBitmap((BitmapDrawable) null);
+                    photoImage.setImageBitmap((BitmapDrawable)null);
                 }
             } else if (messageObject.type == 4) {
                 photoWidth = AndroidUtilities.dp(100);
@@ -504,7 +518,7 @@ public void setMessageObject(MessageObject messageObject) {
 
                 double lat = messageObject.messageOwner.media.geo.lat;
                 double lon = messageObject.messageOwner.media.geo._long;
-                currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
+                currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
                 photoImage.setImage(currentUrl, null, null);
             } else {
                 if (AndroidUtilities.isTablet()) {
@@ -615,7 +629,7 @@ public void setMessageObject(MessageObject messageObject) {
                         }
                     }
                 } else {
-                    photoImage.setImageBitmap((Bitmap) null);
+                    photoImage.setImageBitmap((Bitmap)null);
                 }
             }
             photoImage.setForcePreview(messageObject.isSecretPhoto());
@@ -731,8 +745,8 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         }
         photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
         int size = AndroidUtilities.dp(48);
-        buttonX = (int) (x + (photoWidth - size) / 2.0f);
-        buttonY = (int) (AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
+        buttonX = (int)(x + (photoWidth - size) / 2.0f);
+        buttonY = (int)(AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
 
         radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
         deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
@@ -749,7 +763,7 @@ private void updateSecretTimeText() {
         if (currentInfoString == null || !currentInfoString.equals(str)) {
             currentInfoString = str;
             infoOffset = 0;
-            infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
+            infoWidth = (int)Math.ceil(infoPaint.measureText(currentInfoString));
             CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
             infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             invalidate();
@@ -847,11 +861,11 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             buttonStatesDrawables[drawable].draw(canvas);
             if (!currentMessageObject.isOut() && currentMessageObject.messageOwner.destroyTime != 0) {
                 long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
-                float progress = Math.max(0, (long) currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
+                float progress = Math.max(0, (long)currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
                 canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
                 if (progress != 0) {
                     int offset = AndroidUtilities.dp(2);
-                    invalidate((int) deleteProgressRect.left - offset, (int) deleteProgressRect.top - offset, (int) deleteProgressRect.right + offset * 2, (int) deleteProgressRect.bottom + offset * 2);
+                    invalidate((int)deleteProgressRect.left - offset, (int)deleteProgressRect.top - offset, (int)deleteProgressRect.right + offset * 2, (int)deleteProgressRect.bottom + offset * 2);
                 }
                 updateSecretTimeText();
             }
@@ -924,10 +938,4 @@ public void onProgressUpload(String fileName, float progress, boolean isEncrypte
     public int getObserverTag() {
         return TAG;
     }
-
-    public static interface ChatMediaCellDelegate {
-        public abstract void didClickedImage(ChatMediaCell cell);
-
-        public abstract void didPressedOther(ChatMediaCell cell);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index b7d5062bb..ef2814c84 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -15,8 +15,8 @@
 import android.view.MotionEvent;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.MessageObject;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.MessageObject;
 
 public class ChatMessageCell extends ChatBaseCell {
 
@@ -37,22 +37,22 @@ public ChatMessageCell(Context context) {
     public boolean onTouchEvent(MotionEvent event) {
         if (currentMessageObject != null && currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty() && currentMessageObject.messageText instanceof Spannable && !isPressed) {
             if (event.getAction() == MotionEvent.ACTION_DOWN || pressedLink != null && event.getAction() == MotionEvent.ACTION_UP) {
-                int x = (int) event.getX();
-                int y = (int) event.getY();
+                int x = (int)event.getX();
+                int y = (int)event.getY();
                 if (x >= textX && y >= textY && x <= textX + currentMessageObject.textWidth && y <= textY + currentMessageObject.textHeight) {
                     y -= textY;
                     int blockNum = Math.max(0, y / currentMessageObject.blockHeight);
                     if (blockNum < currentMessageObject.textLayoutBlocks.size()) {
                         try {
                             MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(blockNum);
-                            x -= textX - (int) Math.ceil(block.textXOffset);
+                            x -= textX - (int)Math.ceil(block.textXOffset);
                             y -= block.textYOffset;
                             final int line = block.textLayout.getLineForVertical(y);
                             final int off = block.textLayout.getOffsetForHorizontal(line, x) + block.charactersOffset;
 
                             final float left = block.textLayout.getLineLeft(line);
                             if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
-                                Spannable buffer = (Spannable) currentMessageObject.messageText;
+                                Spannable buffer = (Spannable)currentMessageObject.messageText;
                                 ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
 
                                 if (link.length != 0) {
@@ -223,7 +223,7 @@ protected void onDraw(Canvas canvas) {
             }
             MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
             canvas.save();
-            canvas.translate(textX - (int) Math.ceil(block.textXOffset), textY + block.textYOffset);
+            canvas.translate(textX - (int)Math.ceil(block.textXOffset), textY + block.textYOffset);
             try {
                 block.textLayout.draw(canvas);
             } catch (Exception e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 7c97f7056..3ee134a53 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -18,18 +18,18 @@
 import android.text.TextPaint;
 import android.text.TextUtils;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.Emoji;
-import org.telegram.android.ImageReceiver;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.android.Emoji;
+import org.telegram.android.MessagesController;
+import org.telegram.R;
 import org.telegram.messenger.UserConfig;
+import org.telegram.android.ImageReceiver;
 import org.telegram.ui.Components.AvatarDrawable;
 
 public class DialogCell extends BaseCell {
@@ -52,19 +52,25 @@
     private static Drawable broadcastDrawable;
 
     private static Paint linePaint;
-    public boolean useSeparator = false;
+
     private long currentDialogId;
     private boolean allowPrintStrings;
     private int lastMessageDate;
     private int unreadCount;
     private boolean lastUnreadState;
     private MessageObject message;
+
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
+
     private TLRPC.User user = null;
     private TLRPC.Chat chat = null;
     private TLRPC.EncryptedChat encryptedChat = null;
     private CharSequence lastPrintString = null;
+
+    public boolean useSeparator = false;
+
+
     private int nameLeft;
     private StaticLayout nameLayout;
     private boolean drawNameLock;
@@ -100,14 +106,6 @@
 
     private int avatarTop = AndroidUtilities.dp(10);
 
-    public DialogCell(Context context) {
-        super(context);
-        init();
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(26));
-        avatarDrawable = new AvatarDrawable();
-    }
-
     private void init() {
         if (namePaint == null) {
             namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
@@ -156,6 +154,14 @@ private void init() {
         }
     }
 
+    public DialogCell(Context context) {
+        super(context);
+        init();
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.dp(26));
+        avatarDrawable = new AvatarDrawable();
+    }
+
     public void setDialog(long dialog_id, MessageObject messageObject, boolean usePrintStrings, int date, int unread) {
         currentDialogId = dialog_id;
         message = messageObject;
@@ -485,7 +491,7 @@ public void buildLayout() {
                 messageLeft += w;
             }
         } else if (countString != null) {
-            countWidth = Math.max(AndroidUtilities.dp(12), (int) Math.ceil(countPaint.measureText(countString)));
+            countWidth = Math.max(AndroidUtilities.dp(12), (int)Math.ceil(countPaint.measureText(countString)));
             countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
             int w = countWidth + AndroidUtilities.dp(18);
             messageWidth -= w;
@@ -611,8 +617,8 @@ public void update(int mask) {
         chat = null;
         encryptedChat = null;
 
-        int lower_id = (int) currentDialogId;
-        int high_id = (int) (currentDialogId >> 32);
+        int lower_id = (int)currentDialogId;
+        int high_id = (int)(currentDialogId >> 32);
         if (lower_id != 0) {
             if (high_id == 1) {
                 chat = MessagesController.getInstance().getChat(lower_id);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/GreySectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GreySectionCell.java
index df35c6fa9..b13f3de75 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/GreySectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/GreySectionCell.java
@@ -21,6 +21,24 @@
 public class GreySectionCell extends FrameLayout {
     private TextView textView;
 
+    private void init() {
+        setBackgroundColor(0xfff2f2f2);
+
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setTextColor(0xff8a8a8a);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)textView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(16);
+        layoutParams.rightMargin = AndroidUtilities.dp(16);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+    }
+
     public GreySectionCell(Context context) {
         super(context);
         init();
@@ -41,24 +59,6 @@ public GreySectionCell(Context context, AttributeSet attrs, int defStyleAttr, in
         init();
     }
 
-    private void init() {
-        setBackgroundColor(0xfff2f2f2);
-
-        textView = new TextView(getContext());
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setTextColor(0xff8a8a8a);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(16);
-        layoutParams.rightMargin = AndroidUtilities.dp(16);
-        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-        textView.setLayoutParams(layoutParams);
-    }
-
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(36), MeasureSpec.EXACTLY));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
index b1221d646..fcfd8b2e0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
@@ -22,6 +22,23 @@
 
     private TextView textView;
 
+    private void init() {
+        textView = new TextView(getContext());
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setTextColor(0xff3e90cf);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+        addView(textView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)textView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.leftMargin = AndroidUtilities.dp(17);
+        layoutParams.rightMargin = AndroidUtilities.dp(17);
+        layoutParams.topMargin = AndroidUtilities.dp(15);
+        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
+        textView.setLayoutParams(layoutParams);
+    }
+
     public HeaderCell(Context context) {
         super(context);
         init();
@@ -42,23 +59,6 @@ public HeaderCell(Context context, AttributeSet attrs, int defStyleAttr, int def
         init();
     }
 
-    private void init() {
-        textView = new TextView(getContext());
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setTextColor(0xff3e90cf);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(17);
-        layoutParams.rightMargin = AndroidUtilities.dp(17);
-        layoutParams.topMargin = AndroidUtilities.dp(15);
-        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-        textView.setLayoutParams(layoutParams);
-    }
-
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(38), MeasureSpec.EXACTLY));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java
index 50ec97a66..40e5b3a1f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java
@@ -31,7 +31,7 @@ public LetterSectionCell(Context context) {
         textView.setTextColor(0xff808080);
         textView.setGravity(Gravity.CENTER);
         addView(textView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)textView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
         textView.setLayoutParams(layoutParams);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
index 84f9acbd4..16b528cdd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
@@ -18,13 +18,13 @@
 import android.text.TextUtils;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.ConnectionsManager;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -38,18 +38,23 @@
     private static Drawable broadcastDrawable;
     private static Drawable groupDrawable;
     private static Paint linePaint;
-    public boolean useSeparator = false;
-    public float drawAlpha = 1;
+
     private CharSequence currentName;
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
     private CharSequence subLabel;
+
     private TLRPC.User user = null;
     private TLRPC.Chat chat = null;
     private TLRPC.EncryptedChat encryptedChat = null;
+
     private String lastName = null;
     private int lastStatus = 0;
     private TLRPC.FileLocation lastAvatar = null;
+
+    public boolean useSeparator = false;
+    public float drawAlpha = 1;
+
     private int nameLeft;
     private int nameTop;
     private StaticLayout nameLayout;
@@ -386,7 +391,7 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (drawAlpha != 1) {
-            canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int) (255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
+            canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int)(255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
         }
 
         if (drawNameLock) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java
index 5767496d7..6b6de3b2d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java
@@ -12,11 +12,15 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.R;
 
 public class ShadowBottomSectionCell extends View {
 
+    private void init() {
+        setBackgroundResource(R.drawable.greydivider_bottom);
+    }
+
     public ShadowBottomSectionCell(Context context) {
         super(context);
         init();
@@ -37,10 +41,6 @@ public ShadowBottomSectionCell(Context context, AttributeSet attrs, int defStyle
         init();
     }
 
-    private void init() {
-        setBackgroundResource(R.drawable.greydivider_bottom);
-    }
-
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(6), MeasureSpec.EXACTLY));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
index 476891137..b2f423d33 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
@@ -12,11 +12,15 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.R;
 
 public class ShadowSectionCell extends View {
 
+    private void init() {
+        setBackgroundResource(R.drawable.greydivider);
+    }
+
     public ShadowSectionCell(Context context) {
         super(context);
         init();
@@ -37,10 +41,6 @@ public ShadowSectionCell(Context context, AttributeSet attrs, int defStyleAttr,
         init();
     }
 
-    private void init() {
-        setBackgroundResource(R.drawable.greydivider);
-    }
-
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(12), MeasureSpec.EXACTLY));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
index 9f0e82b02..4e5da0292 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
@@ -23,9 +23,9 @@
 
 public class TextCheckCell extends FrameLayoutFixed {
 
-    private static Paint paint;
     private TextView textView;
     private Switch checkBox;
+    private static Paint paint;
     private boolean needDivider;
 
     public TextCheckCell(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
index 6f673643d..4f07aa9bf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
@@ -19,14 +19,14 @@
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.R;
 
 public class TextColorCell extends FrameLayout {
-    private static Paint paint;
     private TextView textView;
     private Drawable colorDrawable;
+    private static Paint paint;
     private boolean needDivider;
     private int currentColor;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailDocumentsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailDocumentsCell.java
index 708097f99..89d0b8a85 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailDocumentsCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailDocumentsCell.java
@@ -123,7 +123,7 @@ public void setTextAndValueAndTypeAndThumb(String text, String value, String typ
         if (thumb != null || resId != 0) {
             if (thumb != null) {
                 imageView.setImage(thumb, "40_40", null);
-            } else {
+            } else  {
                 imageView.setImageResource(resId);
             }
             imageView.setVisibility(VISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
index 58398d2b7..4d62db658 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
@@ -21,9 +21,9 @@
 
 public class TextDetailSettingsCell extends FrameLayoutFixed {
 
-    private static Paint paint;
     private TextView textView;
     private TextView valueTextView;
+    private static Paint paint;
     private boolean needDivider;
     private boolean multiline;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
index 690b91978..e6c0414c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
@@ -23,10 +23,10 @@
 
 public class TextSettingsCell extends FrameLayout {
 
-    private static Paint paint;
     private TextView textView;
     private TextView valueTextView;
     private ImageView valueImageView;
+    private static Paint paint;
     private boolean needDivider;
 
     public TextSettingsCell(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
index ebb8c2c83..0a88f4c3a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
@@ -16,12 +16,12 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.ConnectionsManager;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.AvatarDrawable;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
index 4ccc418b9..b7df17462 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
@@ -24,24 +24,25 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessagesController;
+import org.telegram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
 
 public class ChangeChatNameActivity extends BaseFragment {
 
-    private final static int done_button = 1;
     private EditText firstNameField;
     private View headerLabelView;
     private int chat_id;
     private View doneButton;
 
+    private final static int done_button = 1;
+
     public ChangeChatNameActivity(Bundle args) {
         super(args);
     }
@@ -113,7 +114,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             });
 
             ((LinearLayout) fragmentView).addView(firstNameField);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) firstNameField.getLayoutParams();
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
             layoutParams.topMargin = AndroidUtilities.dp(24);
             layoutParams.height = AndroidUtilities.dp(36);
             layoutParams.leftMargin = AndroidUtilities.dp(24);
@@ -128,7 +129,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             }
             firstNameField.setSelection(firstNameField.length());
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index 3ed3c35c3..d5f8a6a3f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -23,16 +23,16 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
+import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -40,12 +40,13 @@
 
 public class ChangeNameActivity extends BaseFragment {
 
-    private final static int done_button = 1;
     private EditText firstNameField;
     private EditText lastNameField;
     private View headerLabelView;
     private View doneButton;
 
+    private final static int done_button = 1;
+
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
@@ -97,7 +98,7 @@ public boolean onTouch(View v, MotionEvent event) {
             firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
             AndroidUtilities.clearCursorDrawable(firstNameField);
             ((LinearLayout) fragmentView).addView(firstNameField);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) firstNameField.getLayoutParams();
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
             layoutParams.topMargin = AndroidUtilities.dp(24);
             layoutParams.height = AndroidUtilities.dp(36);
             layoutParams.leftMargin = AndroidUtilities.dp(24);
@@ -129,7 +130,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
             AndroidUtilities.clearCursorDrawable(lastNameField);
             ((LinearLayout) fragmentView).addView(lastNameField);
-            layoutParams = (LinearLayout.LayoutParams) lastNameField.getLayoutParams();
+            layoutParams = (LinearLayout.LayoutParams)lastNameField.getLayoutParams();
             layoutParams.topMargin = AndroidUtilities.dp(16);
             layoutParams.height = AndroidUtilities.dp(36);
             layoutParams.leftMargin = AndroidUtilities.dp(24);
@@ -153,7 +154,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                 lastNameField.setText(user.last_name);
             }
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
index 821627e3a..336c34672 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
@@ -37,7 +37,6 @@
 import android.widget.TextView;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
@@ -47,6 +46,7 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
@@ -73,11 +73,12 @@
 
 public class ChangePhoneActivity extends BaseFragment {
 
-    private final static int done_button = 1;
     private int currentViewNum = 0;
     private SlideView[] views = new SlideView[2];
     private ProgressDialog progressDialog;
 
+    private final static int done_button = 1;
+
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
@@ -156,10 +157,10 @@ public void onItemClick(int id) {
 
             try {
                 if (views[0] == null || views[1] == null) {
-                    FrameLayout parent = (FrameLayout) ((ScrollView) fragmentView).getChildAt(0);
+                    FrameLayout parent = (FrameLayout)((ScrollView) fragmentView).getChildAt(0);
                     for (int a = 0; a < views.length; a++) {
                         if (views[a] == null) {
-                            views[a] = (SlideView) parent.getChildAt(a);
+                            views[a] = (SlideView)parent.getChildAt(a);
                         }
                     }
                 }
@@ -169,7 +170,7 @@ public void onItemClick(int id) {
 
             actionBar.setTitle(views[0].getHeaderName());
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -241,7 +242,7 @@ public void needHideProgress() {
     }
 
     public void setPage(int page, boolean animated, Bundle params, boolean back) {
-        if (android.os.Build.VERSION.SDK_INT > 10) {
+        if(android.os.Build.VERSION.SDK_INT > 10) {
             final SlideView outView = views[currentViewNum];
             final SlideView newView = views[page];
             currentViewNum = page;
@@ -473,7 +474,7 @@ public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                             int toDelete = 0;
                             for (int a = start; a >= 0; a--) {
                                 substr = str.substring(a, a + 1);
-                                if (phoneChars.contains(substr)) {
+                                if(phoneChars.contains(substr)) {
                                     break;
                                 }
                                 toDelete++;
@@ -557,7 +558,7 @@ public int compare(String lhs, String rhs) {
             String country = null;
 
             try {
-                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
                 if (telephonyManager != null) {
                     country = telephonyManager.getSimCountryIso().toUpperCase();
                 }
@@ -677,7 +678,7 @@ public void run(final TLObject response, final TLRPC.TL_error error) {
                         public void run() {
                             nextPressed = false;
                             if (error == null) {
-                                TLRPC.TL_account_sentChangePhoneCode res = (TLRPC.TL_account_sentChangePhoneCode) response;
+                                TLRPC.TL_account_sentChangePhoneCode res = (TLRPC.TL_account_sentChangePhoneCode)response;
                                 params.putString("phoneHash", res.phone_code_hash);
                                 params.putInt("calltime", res.send_call_timeout * 1000);
                                 setPage(1, true, params, false);
@@ -722,15 +723,16 @@ public String getHeaderName() {
 
     public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
 
-        private final Object timerSync = new Object();
         private String phoneHash;
         private String requestPhone;
         private EditText codeField;
         private TextView confirmTextView;
         private TextView timeText;
         private Bundle currentParams;
+
         private Timer timeTimer;
         private Timer codeTimer;
+        private final Object timerSync = new Object();
         private volatile int time = 60000;
         private volatile int codeTime = 15000;
         private double lastCurrentTime;
@@ -912,7 +914,7 @@ public void run() {
 
         private void destroyCodeTimer() {
             try {
-                synchronized (timerSync) {
+                synchronized(timerSync) {
                     if (codeTimer != null) {
                         codeTimer.cancel();
                         codeTimer = null;
@@ -971,7 +973,7 @@ public void run() {
 
         private void destroyTimer() {
             try {
-                synchronized (timerSync) {
+                synchronized(timerSync) {
                     if (timeTimer != null) {
                         timeTimer.cancel();
                         timeTimer = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
index 0dfb75790..82ea1f9cc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
@@ -23,10 +23,10 @@
 import android.widget.TextView;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
@@ -88,7 +88,7 @@ public boolean onTouch(View v, MotionEvent event) {
             ImageView imageView = new ImageView(getParentActivity());
             imageView.setImageResource(R.drawable.phone_change);
             linearLayout.addView(imageView);
-            LinearLayout.LayoutParams layoutParams2 = (LinearLayout.LayoutParams) imageView.getLayoutParams();
+            LinearLayout.LayoutParams layoutParams2 = (LinearLayout.LayoutParams)imageView.getLayoutParams();
             layoutParams2.width = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams2.height = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams2.gravity = Gravity.CENTER_HORIZONTAL;
@@ -106,7 +106,7 @@ public boolean onTouch(View v, MotionEvent event) {
                 textView.setText(LocaleController.getString("PhoneNumberHelp", R.string.PhoneNumberHelp));
             }
             linearLayout.addView(textView);
-            layoutParams2 = (LinearLayout.LayoutParams) textView.getLayoutParams();
+            layoutParams2 = (LinearLayout.LayoutParams)textView.getLayoutParams();
             layoutParams2.width = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams2.height = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams2.gravity = Gravity.CENTER_HORIZONTAL;
@@ -123,7 +123,7 @@ public boolean onTouch(View v, MotionEvent event) {
             textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
             textView.setPadding(0, AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10));
             linearLayout.addView(textView);
-            layoutParams2 = (LinearLayout.LayoutParams) textView.getLayoutParams();
+            layoutParams2 = (LinearLayout.LayoutParams)textView.getLayoutParams();
             layoutParams2.width = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams2.height = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams2.gravity = Gravity.CENTER_HORIZONTAL;
@@ -153,7 +153,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             });
 
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
index 843f1942c..1e936fae1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
@@ -29,7 +29,6 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
@@ -38,6 +37,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
@@ -50,7 +50,6 @@
 
 public class ChangeUsernameActivity extends BaseFragment {
 
-    private final static int done_button = 1;
     private EditText firstNameField;
     private View doneButton;
     private TextView checkTextView;
@@ -59,6 +58,8 @@
     private Runnable checkRunnable = null;
     private boolean lastNameAvailable = false;
 
+    private final static int done_button = 1;
+
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
         if (fragmentView == null) {
@@ -119,7 +120,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             });
 
             ((LinearLayout) fragmentView).addView(firstNameField);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) firstNameField.getLayoutParams();
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
             layoutParams.topMargin = AndroidUtilities.dp(24);
             layoutParams.height = AndroidUtilities.dp(36);
             layoutParams.leftMargin = AndroidUtilities.dp(24);
@@ -136,7 +137,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
             checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             ((LinearLayout) fragmentView).addView(checkTextView);
-            layoutParams = (LinearLayout.LayoutParams) checkTextView.getLayoutParams();
+            layoutParams = (LinearLayout.LayoutParams)checkTextView.getLayoutParams();
             layoutParams.topMargin = AndroidUtilities.dp(12);
             layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
@@ -151,7 +152,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             helpTextView.setText(Html.fromHtml(LocaleController.getString("UsernameHelp", R.string.UsernameHelp)));
             ((LinearLayout) fragmentView).addView(helpTextView);
-            layoutParams = (LinearLayout.LayoutParams) helpTextView.getLayoutParams();
+            layoutParams = (LinearLayout.LayoutParams)helpTextView.getLayoutParams();
             layoutParams.topMargin = AndroidUtilities.dp(10);
             layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
             layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
@@ -179,7 +180,7 @@ public void afterTextChanged(Editable editable) {
 
             checkTextView.setVisibility(View.GONE);
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -361,7 +362,7 @@ private void saveName() {
             @Override
             public void run(TLObject response, final TLRPC.TL_error error) {
                 if (error == null) {
-                    final TLRPC.User user = (TLRPC.User) response;
+                    final TLRPC.User user = (TLRPC.User)response;
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index 8cedcfae6..208733b6b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -17,12 +17,12 @@
 import android.text.StaticLayout;
 import android.text.TextPaint;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.util.Locale;
 
@@ -39,6 +39,7 @@
             R.drawable.bar_selector_green, R.drawable.bar_selector_cyan, R.drawable.bar_selector_blue, R.drawable.bar_selector_violet, R.drawable.bar_selector_pink};
 
 
+
     private static Drawable broadcastDrawable;
     private static Drawable photoDrawable;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
index 535a79eaf..07edc7ad1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
@@ -17,28 +17,32 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
-import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PhotoCropActivity;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.io.File;
 
 public class AvatarUpdater implements NotificationCenter.NotificationCenterDelegate, PhotoCropActivity.PhotoCropActivityDelegate {
     public String currentPicturePath;
+    private TLRPC.PhotoSize smallPhoto;
+    private TLRPC.PhotoSize bigPhoto;
     public String uploadingAvatar = null;
+    File picturePath = null;
     public BaseFragment parentFragment = null;
     public AvatarUpdaterDelegate delegate;
-    public boolean returnOnly = false;
-    File picturePath = null;
-    private TLRPC.PhotoSize smallPhoto;
-    private TLRPC.PhotoSize bigPhoto;
     private boolean clearAfterUpdate = false;
+    public boolean returnOnly = false;
+
+    public static abstract interface AvatarUpdaterDelegate {
+        public abstract void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big);
+    }
 
     public void clear() {
         if (uploadingAvatar != null) {
@@ -75,7 +79,7 @@ public void openGallery() {
 
     private void startCrop(String path, Uri uri) {
         try {
-            LaunchActivity activity = (LaunchActivity) parentFragment.getParentActivity();
+            LaunchActivity activity = (LaunchActivity)parentFragment.getParentActivity();
             if (activity == null) {
                 return;
             }
@@ -140,7 +144,7 @@ public void didFinishCrop(Bitmap bitmap) {
     @Override
     public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.FileDidUpload) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
@@ -148,7 +152,7 @@ public void run() {
                         NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
                         NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
                         if (delegate != null) {
-                            delegate.didUploadedPhoto((TLRPC.InputFile) args[1], smallPhoto, bigPhoto);
+                            delegate.didUploadedPhoto((TLRPC.InputFile)args[1], smallPhoto, bigPhoto);
                         }
                         uploadingAvatar = null;
                         if (clearAfterUpdate) {
@@ -159,7 +163,7 @@ public void run() {
                 });
             }
         } else if (id == NotificationCenter.FileDidFailUpload) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
@@ -176,8 +180,4 @@ public void run() {
             }
         }
     }
-
-    public static abstract interface AvatarUpdaterDelegate {
-        public abstract void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index addc400a3..988134030 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -32,26 +32,33 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
 import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.android.SendMessagesHelper;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.messenger.ApplicationLoader;
 
 public class ChatActivityEnterView implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
 
+    public static interface ChatActivityEnterViewDelegate {
+        public abstract void onMessageSend();
+        public abstract void needSendTyping();
+        public abstract void onAttachButtonHidden();
+        public abstract void onAttachButtonShow();
+    }
+
     private EditText messsageEditText;
     private ImageButton sendButton;
     private ImageView emojiButton;
@@ -68,8 +75,10 @@
     private ObjectAnimatorProxy runningAnimationAudio;
     private int runningAnimationType;
     private int audioInterfaceState;
+
     private WindowManager.LayoutParams windowLayoutParams;
     private boolean showingEmoji;
+
     private int keyboardHeight;
     private int keyboardHeightLand;
     private boolean keyboardVisible;
@@ -79,10 +88,12 @@
     private float startedDraggingX = -1;
     private float distCanMove = AndroidUtilities.dp(80);
     private boolean recordingAudio;
+
     private Activity parentActivity;
     private long dialog_id;
     private boolean ignoreTextChange;
     private ChatActivityEnterViewDelegate delegate;
+
     public ChatActivityEnterView() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStarted);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStartError);
@@ -721,6 +732,16 @@ public void setDialogId(long id) {
         dialog_id = id;
     }
 
+    public void setFieldText(String text) {
+        if (messsageEditText == null) {
+            return;
+        }
+        ignoreTextChange = true;
+        messsageEditText.setText(text);
+        messsageEditText.setSelection(messsageEditText.getText().length());
+        ignoreTextChange = false;
+    }
+
     public void setFieldFocused(boolean focus) {
         if (messsageEditText == null) {
             return;
@@ -758,16 +779,6 @@ public String getFieldText() {
         return null;
     }
 
-    public void setFieldText(String text) {
-        if (messsageEditText == null) {
-            return;
-        }
-        ignoreTextChange = true;
-        messsageEditText.setText(text);
-        messsageEditText.setSelection(messsageEditText.getText().length());
-        ignoreTextChange = false;
-    }
-
     public boolean isEmojiPopupShowing() {
         return showingEmoji;
     }
@@ -879,14 +890,4 @@ public void didReceivedNotification(int id, Object... args) {
             hideEmojiPopup();
         }
     }
-
-    public static interface ChatActivityEnterViewDelegate {
-        public abstract void onMessageSend();
-
-        public abstract void needSendTyping();
-
-        public abstract void onAttachButtonHidden();
-
-        public abstract void onAttachButtonShow();
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java
index 232835040..c284f2eb9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/CheckBox.java
@@ -17,28 +17,32 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.R;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
 
 public class CheckBox extends View {
 
-    private final static float progressBounceDiff = 0.2f;
     private static Drawable checkDrawable;
     private static Paint paint;
     private static Paint eraser;
     private static Paint eraser2;
     private static Paint checkPaint;
+
     private Bitmap drawBitmap;
     private Bitmap checkBitmap;
     private Canvas bitmapCanvas;
     private Canvas checkCanvas;
+
     private float progress;
     private ObjectAnimatorProxy checkAnimator;
     private boolean isCheckAnimation = true;
+
     private boolean attachedToWindow;
     private boolean isChecked = false;
 
+    private final static float progressBounceDiff = 0.2f;
+
     public CheckBox(Context context) {
         super(context);
         if (checkDrawable == null) {
@@ -67,10 +71,6 @@ public void setVisibility(int visibility) {
         }
     }
 
-    public float getProgress() {
-        return progress;
-    }
-
     public void setProgress(float value) {
         if (progress == value) {
             return;
@@ -79,6 +79,10 @@ public void setProgress(float value) {
         invalidate();
     }
 
+    public float getProgress() {
+        return progress;
+    }
+
     private void cancelCheckAnimator() {
         if (checkAnimator != null) {
             checkAnimator.cancel();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
index ea147fe5d..a288647f5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
@@ -40,6 +40,10 @@
     private RectF bitmapRect;
     private Matrix shaderMatrix;
 
+    public static interface onDrawListener {
+        public abstract void onDraw();
+    }
+
     public ClippingImageView(Context context) {
         super(context);
         paint = new Paint();
@@ -51,56 +55,26 @@ public int getClipBottom() {
         return clipBottom;
     }
 
-    public void setClipBottom(int value) {
-        clipBottom = value;
-        invalidate();
-    }
-
     public int getClipHorizontal() {
         return clipRight;
     }
 
-    public void setClipHorizontal(int value) {
-        clipRight = value;
-        clipLeft = value;
-        invalidate();
-    }
-
     public int getClipLeft() {
         return clipLeft;
     }
 
-    public void setClipLeft(int value) {
-        clipLeft = value;
-        invalidate();
-    }
-
     public int getClipRight() {
         return clipRight;
     }
 
-    public void setClipRight(int value) {
-        clipRight = value;
-        invalidate();
-    }
-
     public int getClipTop() {
         return clipTop;
     }
 
-    public void setClipTop(int value) {
-        clipTop = value;
-        invalidate();
-    }
-
     public int getRadius() {
         return radius;
     }
 
-    public void setRadius(int value) {
-        radius = value;
-    }
-
     public void onDraw(Canvas canvas) {
         if (getVisibility() == GONE || getVisibility() == INVISIBLE) {
             return;
@@ -130,6 +104,32 @@ public void onDraw(Canvas canvas) {
         }
     }
 
+    public void setClipBottom(int value) {
+        clipBottom = value;
+        invalidate();
+    }
+
+    public void setClipHorizontal(int value) {
+        clipRight = value;
+        clipLeft = value;
+        invalidate();
+    }
+
+    public void setClipLeft(int value) {
+        clipLeft = value;
+        invalidate();
+    }
+
+    public void setClipRight(int value) {
+        clipRight = value;
+        invalidate();
+    }
+
+    public void setClipTop(int value) {
+        clipTop = value;
+        invalidate();
+    }
+
     public void setClipVertical(int value) {
         clipBottom = value;
         clipTop = value;
@@ -158,7 +158,7 @@ public void setNeedRadius(boolean value) {
         needRadius = value;
     }
 
-    public static interface onDrawListener {
-        public abstract void onDraw();
+    public void setRadius(int value) {
+        radius = value;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
index 363137da1..ef7319a03 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
@@ -38,7 +38,7 @@
     private static final String STATE_OLD_COLOR = "color";
     private static final String STATE_SHOW_OLD_COLOR = "showColor";
 
-    private static final int[] COLORS = new int[]{0xFFFF0000, 0xFFFF00FF, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00, 0xFFFFFFFF, 0xFFFFFF00, 0xFFFF0000};
+    private static final int[] COLORS = new int[] { 0xFFFF0000, 0xFFFF00FF, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00, 0xFFFFFFFF, 0xFFFFFF00, 0xFFFF0000 };
 
     private Paint mColorWheelPaint;
     private Paint mPointerHaloPaint;
@@ -88,6 +88,14 @@ public ColorPickerView(Context context, AttributeSet attrs, int defStyle) {
         init(attrs, defStyle);
     }
 
+    public interface OnColorChangedListener {
+        public void onColorChanged(int color);
+    }
+
+    public interface OnColorSelectedListener {
+        public void onColorSelected(int color);
+    }
+
     public void setOnColorChangedListener(OnColorChangedListener listener) {
         this.onColorChangedListener = listener;
     }
@@ -309,7 +317,7 @@ public boolean onTouchEvent(MotionEvent event) {
         float x = (float) (mColorWheelRadius * Math.cos(angle));
         float y = (float) (mColorWheelRadius * Math.sin(angle));
 
-        return new float[]{x, y};
+        return new float[] { x, y };
     }
 
     public void setNewCenterColor(int color) {
@@ -319,25 +327,21 @@ public void setNewCenterColor(int color) {
             mCenterOldColor = color;
             mCenterOldPaint.setColor(color);
         }
-        if (onColorChangedListener != null && color != oldChangedListenerColor) {
+        if (onColorChangedListener != null && color != oldChangedListenerColor ) {
             onColorChangedListener.onColorChanged(color);
-            oldChangedListenerColor = color;
+            oldChangedListenerColor  = color;
         }
         invalidate();
     }
 
-    public int getOldCenterColor() {
-        return mCenterOldColor;
-    }
-
     public void setOldCenterColor(int color) {
         mCenterOldColor = color;
         mCenterOldPaint.setColor(color);
         invalidate();
     }
 
-    public boolean getShowOldCenterColor() {
-        return mShowCenterOldColor;
+    public int getOldCenterColor() {
+        return mCenterOldColor;
     }
 
     public void setShowOldCenterColor(boolean show) {
@@ -345,6 +349,10 @@ public void setShowOldCenterColor(boolean show) {
         invalidate();
     }
 
+    public boolean getShowOldCenterColor() {
+        return mShowCenterOldColor;
+    }
+
     @Override
     protected Parcelable onSaveInstanceState() {
         Parcelable superState = super.onSaveInstanceState();
@@ -372,12 +380,4 @@ protected void onRestoreInstanceState(Parcelable state) {
         mPointerColor.setColor(currentColor);
         setNewCenterColor(currentColor);
     }
-
-    public interface OnColorChangedListener {
-        public void onColorChanged(int color);
-    }
-
-    public interface OnColorSelectedListener {
-        public void onColorSelected(int color);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 204c85588..4eae10e6f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -23,10 +23,10 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
+import org.telegram.R;
 
 import java.util.ArrayList;
 
@@ -38,7 +38,7 @@
             R.drawable.ic_emoji_flower,
             R.drawable.ic_emoji_bell,
             R.drawable.ic_emoji_car,
-            R.drawable.ic_emoji_symbol};
+            R.drawable.ic_emoji_symbol };
     private Listener listener;
     private ViewPager pager;
     private FrameLayout recentsWrap;
@@ -92,9 +92,9 @@ private String convert(long paramLong) {
             if (i >= 4) {
                 return str;
             }
-            int j = (int) (0xFFFF & paramLong >> 16 * (3 - i));
+            int j = (int)(0xFFFF & paramLong >> 16 * (3 - i));
             if (j != 0) {
-                str = str + (char) j;
+                str = str + (char)j;
             }
         }
     }
@@ -205,12 +205,6 @@ public void invalidateViews() {
         }
     }
 
-    public static abstract interface Listener {
-        public abstract void onBackspace();
-
-        public abstract void onEmojiSelected(String paramString);
-    }
-
     private class EmojiGridAdapter extends BaseAdapter {
         long[] data;
 
@@ -231,7 +225,7 @@ public long getItemId(int i) {
         }
 
         public View getView(int i, View view, ViewGroup paramViewGroup) {
-            ImageView imageView = (ImageView) view;
+            ImageView imageView = (ImageView)view;
             if (imageView == null) {
                 imageView = new ImageView(EmojiView.this.getContext()) {
                     public void onMeasure(int paramAnonymousInt1, int paramAnonymousInt2) {
@@ -241,9 +235,9 @@ public void onMeasure(int paramAnonymousInt1, int paramAnonymousInt2) {
                 imageView.setOnClickListener(new View.OnClickListener() {
                     public void onClick(View view) {
                         if (EmojiView.this.listener != null) {
-                            EmojiView.this.listener.onEmojiSelected(EmojiView.this.convert((Long) view.getTag()));
+                            EmojiView.this.listener.onEmojiSelected(EmojiView.this.convert((Long)view.getTag()));
                         }
-                        EmojiView.this.addToRecent((Long) view.getTag());
+                        EmojiView.this.addToRecent((Long)view.getTag());
                     }
                 });
                 imageView.setBackgroundResource(R.drawable.list_selector);
@@ -304,4 +298,9 @@ public void unregisterDataSetObserver(DataSetObserver observer) {
             }
         }
     }
+
+    public static abstract interface Listener {
+        public abstract void onBackspace();
+        public abstract void onEmojiSelected(String paramString);
+    }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java
index 501d7a0de..1d30c5682 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java
@@ -33,10 +33,16 @@ public FrameLayoutFixed(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
     }
 
+    public final int getMeasuredStateFixed(View view) {
+        return (view.getMeasuredWidth()&0xff000000)
+                | ((view.getMeasuredHeight()>>16)
+                & (0xff000000>>16));
+    }
+
     public static int resolveSizeAndStateFixed(int size, int measureSpec, int childMeasuredState) {
         int result = size;
         int specMode = MeasureSpec.getMode(measureSpec);
-        int specSize = MeasureSpec.getSize(measureSpec);
+        int specSize =  MeasureSpec.getSize(measureSpec);
         switch (specMode) {
             case MeasureSpec.UNSPECIFIED:
                 result = size;
@@ -52,13 +58,7 @@ public static int resolveSizeAndStateFixed(int size, int measureSpec, int childM
                 result = specSize;
                 break;
         }
-        return result | (childMeasuredState & 0xff000000);
-    }
-
-    public final int getMeasuredStateFixed(View view) {
-        return (view.getMeasuredWidth() & 0xff000000)
-                | ((view.getMeasuredHeight() >> 16)
-                & (0xff000000 >> 16));
+        return result | (childMeasuredState&0xff000000);
     }
 
     @Override
@@ -123,8 +123,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
                     if (lp.width == LayoutParams.MATCH_PARENT) {
                         childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -
-                                        getPaddingLeft() - getPaddingRight() -
-                                        lp.leftMargin - lp.rightMargin,
+                                getPaddingLeft() - getPaddingRight() -
+                                lp.leftMargin - lp.rightMargin,
                                 MeasureSpec.EXACTLY);
                     } else {
                         childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,
@@ -135,8 +135,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
                     if (lp.height == LayoutParams.MATCH_PARENT) {
                         childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredHeight() -
-                                        getPaddingTop() - getPaddingBottom() -
-                                        lp.topMargin - lp.bottomMargin,
+                                getPaddingTop() - getPaddingBottom() -
+                                lp.topMargin - lp.bottomMargin,
                                 MeasureSpec.EXACTLY);
                     } else {
                         childHeightMeasureSpec = getChildMeasureSpec(heightMeasureSpec,
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/GifDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/GifDrawable.java
index 84e90df3e..2462db98f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/GifDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/GifDrawable.java
@@ -43,28 +43,46 @@ of this software and associated documentation files (the "Software"), to deal
 
 public class GifDrawable extends Drawable implements Animatable, MediaController.MediaPlayerControl {
 
+    private static native void renderFrame(int[] pixels, int gifFileInPtr, int[] metaData);
+    private static native int openFile(int[] metaData, String filePath);
+    private static native void free(int gifFileInPtr);
+    private static native void reset(int gifFileInPtr);
+    private static native void setSpeedFactor(int gifFileInPtr, float factor);
+    private static native String getComment(int gifFileInPtr);
+    private static native int getLoopCount(int gifFileInPtr);
+    private static native int getDuration(int gifFileInPtr);
+    private static native int getCurrentPosition(int gifFileInPtr);
+    private static native int seekToTime(int gifFileInPtr, int pos, int[] pixels);
+    private static native int seekToFrame(int gifFileInPtr, int frameNr, int[] pixels);
+    private static native int saveRemainder(int gifFileInPtr);
+    private static native int restoreRemainder(int gifFileInPtr);
+    private static native long getAllocationByteCount(int gifFileInPtr);
+
     private static final Handler UI_HANDLER = new Handler(Looper.getMainLooper());
-    protected final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG);
-    protected final int[] mColors;
+
+    private volatile int mGifInfoPtr;
+    private volatile boolean mIsRunning = true;
+
     private final int[] mMetaData = new int[5];//[w, h, imageCount, errorCode, post invalidation time]
     private final long mInputSourceLength;
+
+    private float mSx = 1f;
+    private float mSy = 1f;
+    private boolean mApplyTransformation;
     private final Rect mDstRect = new Rect();
+
     public WeakReference<View> parentView = null;
-    private final Runnable mInvalidateTask = new Runnable() {
-        @Override
-        public void run() {
-            if (parentView != null && parentView.get() != null) {
-                parentView.get().invalidate();
-            }
-        }
-    };
-    private volatile int mGifInfoPtr;
+
+    protected final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG);
+    protected final int[] mColors;
+
     private final Runnable mResetTask = new Runnable() {
         @Override
         public void run() {
             reset(mGifInfoPtr);
         }
     };
+
     private final Runnable mStartTask = new Runnable() {
         @Override
         public void run() {
@@ -75,16 +93,31 @@ public void run() {
             mMetaData[4] = 0;
         }
     };
+
     private final Runnable mSaveRemainderTask = new Runnable() {
         @Override
         public void run() {
             saveRemainder(mGifInfoPtr);
         }
     };
-    private volatile boolean mIsRunning = true;
-    private float mSx = 1f;
-    private float mSy = 1f;
-    private boolean mApplyTransformation;
+
+    private final Runnable mInvalidateTask = new Runnable() {
+        @Override
+        public void run() {
+            if (parentView != null && parentView.get() != null) {
+                parentView.get().invalidate();
+            }
+        }
+    };
+
+    private static void runOnUiThread(Runnable task) {
+        if (Looper.myLooper() == UI_HANDLER.getLooper()) {
+            task.run();
+        } else {
+            UI_HANDLER.post(task);
+        }
+    }
+
     public GifDrawable(String filePath) throws Exception {
         mInputSourceLength = new File(filePath).length();
         mGifInfoPtr = openFile(mMetaData, filePath);
@@ -97,42 +130,6 @@ public GifDrawable(File file) throws Exception {
         mColors = new int[mMetaData[0] * mMetaData[1]];
     }
 
-    private static native void renderFrame(int[] pixels, int gifFileInPtr, int[] metaData);
-
-    private static native int openFile(int[] metaData, String filePath);
-
-    private static native void free(int gifFileInPtr);
-
-    private static native void reset(int gifFileInPtr);
-
-    private static native void setSpeedFactor(int gifFileInPtr, float factor);
-
-    private static native String getComment(int gifFileInPtr);
-
-    private static native int getLoopCount(int gifFileInPtr);
-
-    private static native int getDuration(int gifFileInPtr);
-
-    private static native int getCurrentPosition(int gifFileInPtr);
-
-    private static native int seekToTime(int gifFileInPtr, int pos, int[] pixels);
-
-    private static native int seekToFrame(int gifFileInPtr, int frameNr, int[] pixels);
-
-    private static native int saveRemainder(int gifFileInPtr);
-
-    private static native int restoreRemainder(int gifFileInPtr);
-
-    private static native long getAllocationByteCount(int gifFileInPtr);
-
-    private static void runOnUiThread(Runnable task) {
-        if (Looper.myLooper() == UI_HANDLER.getLooper()) {
-            task.run();
-        } else {
-            UI_HANDLER.post(task);
-        }
-    }
-
     public void recycle() {
         mIsRunning = false;
         int tmpPtr = mGifInfoPtr;
@@ -159,6 +156,11 @@ public int getIntrinsicWidth() {
         return mMetaData[0];
     }
 
+    @Override
+    public void setAlpha(int alpha) {
+        mPaint.setAlpha(alpha);
+    }
+
     @Override
     public void setColorFilter(ColorFilter cf) {
         mPaint.setColorFilter(cf);
@@ -379,11 +381,6 @@ public int getAlpha() {
         return mPaint.getAlpha();
     }
 
-    @Override
-    public void setAlpha(int alpha) {
-        mPaint.setAlpha(alpha);
-    }
-
     @Override
     public void setFilterBitmap(boolean filter) {
         mPaint.setFilterBitmap(filter);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java
index 007578fbd..4cc5b0915 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java
@@ -7,6 +7,9 @@
  */
 package org.telegram.ui.Components;
 
+import java.util.HashMap;
+import java.util.LinkedList;
+
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.database.DataSetObserver;
@@ -20,107 +23,23 @@
 import android.widget.ListAdapter;
 import android.widget.Scroller;
 
-import java.util.HashMap;
-import java.util.LinkedList;
-
 public class HorizontalListView extends AdapterView<ListAdapter> {
 
     public boolean mAlwaysOverrideTouch = true;
     protected ListAdapter mAdapter;
-    protected int mCurrentX;
-    protected int mNextX;
-    protected Scroller mScroller;
     private int mLeftViewIndex = -1;
     private int mRightViewIndex = 0;
+    protected int mCurrentX;
+    protected int mNextX;
     private int mMaxX = Integer.MAX_VALUE;
     private int mDisplayOffset = 0;
+    protected Scroller mScroller;
     private GestureDetector mGesture;
     private HashMap<Integer, LinkedList<View>> mRemovedViewQueue = new HashMap<Integer, LinkedList<View>>();
     private OnItemSelectedListener mOnItemSelected;
     private OnItemClickListener mOnItemClicked;
     private OnItemLongClickListener mOnItemLongClicked;
-    private OnGestureListener mOnGesture = new GestureDetector.SimpleOnGestureListener() {
-
-        @Override
-        public boolean onDown(MotionEvent e) {
-            return HorizontalListView.this.onDown(e);
-        }
-
-        @Override
-        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
-            return HorizontalListView.this.onFling(e1, e2, velocityX, velocityY);
-        }
-
-        @Override
-        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
-            synchronized (HorizontalListView.this) {
-                mNextX += (int) distanceX;
-            }
-            requestLayout();
-            return true;
-        }
-
-        @Override
-        public boolean onSingleTapUp(MotionEvent e) {
-            for (int i = 0; i < getChildCount(); i++) {
-                View child = getChildAt(i);
-                if (isEventWithinView(e, child)) {
-                    if (mOnItemClicked != null) {
-                        mOnItemClicked.onItemClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
-                    }
-                    if (mOnItemSelected != null) {
-                        mOnItemSelected.onItemSelected(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
-                    }
-                    break;
-                }
-            }
-            return true;
-        }
-
-        @Override
-        public void onLongPress(MotionEvent e) {
-            int childCount = getChildCount();
-            for (int i = 0; i < childCount; i++) {
-                View child = getChildAt(i);
-                if (isEventWithinView(e, child)) {
-                    if (mOnItemLongClicked != null) {
-                        mOnItemLongClicked.onItemLongClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
-                    }
-                    break;
-                }
-            }
-        }
-
-        private boolean isEventWithinView(MotionEvent e, View child) {
-            Rect viewRect = new Rect();
-            int[] childPosition = new int[2];
-            child.getLocationOnScreen(childPosition);
-            int left = childPosition[0];
-            int right = left + child.getWidth();
-            int top = childPosition[1];
-            int bottom = top + child.getHeight();
-            viewRect.set(left, top, right, bottom);
-            return viewRect.contains((int) e.getRawX(), (int) e.getRawY());
-        }
-    };
     private boolean mDataChanged = false;
-    private DataSetObserver mDataObserver = new DataSetObserver() {
-        @Override
-        public void onChanged() {
-            synchronized (HorizontalListView.this) {
-                mDataChanged = true;
-            }
-            invalidate();
-            requestLayout();
-        }
-
-        @Override
-        public void onInvalidated() {
-            reset();
-            invalidate();
-            requestLayout();
-        }
-    };
 
     public HorizontalListView(Context context, AttributeSet attrs) {
         super(context, attrs);
@@ -153,21 +72,29 @@ public void setOnItemLongClickListener(AdapterView.OnItemLongClickListener liste
         mOnItemLongClicked = listener;
     }
 
+    private DataSetObserver mDataObserver = new DataSetObserver() {
+        @Override
+        public void onChanged() {
+            synchronized (HorizontalListView.this) {
+                mDataChanged = true;
+            }
+            invalidate();
+            requestLayout();
+        }
+
+        @Override
+        public void onInvalidated() {
+            reset();
+            invalidate();
+            requestLayout();
+        }
+    };
+
     @Override
     public ListAdapter getAdapter() {
         return mAdapter;
     }
 
-    @Override
-    public void setAdapter(ListAdapter adapter) {
-        if (mAdapter != null && mDataObserver != null) {
-            mAdapter.unregisterDataSetObserver(mDataObserver);
-        }
-        mAdapter = adapter;
-        mAdapter.registerDataSetObserver(mDataObserver);
-        reset();
-    }
-
     @Override
     public View getSelectedView() {
 
@@ -179,6 +106,16 @@ public void setSelection(int position) {
 
     }
 
+    @Override
+    public void setAdapter(ListAdapter adapter) {
+        if (mAdapter != null && mDataObserver != null) {
+            mAdapter.unregisterDataSetObserver(mDataObserver);
+        }
+        mAdapter = adapter;
+        mAdapter.registerDataSetObserver(mDataObserver);
+        reset();
+    }
+
     private synchronized void reset() {
         initView();
         mRemovedViewQueue.clear();
@@ -195,6 +132,7 @@ private void addAndMeasureChild(final View child, int viewPos) {
         child.measure(MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(getHeight(), MeasureSpec.AT_MOST));
     }
 
+
     @SuppressLint("DrawAllocation")
     @Override
     protected synchronized void onLayout(boolean changed, int left, int top, int right, int bottom) {
@@ -383,4 +321,69 @@ protected boolean onDown(MotionEvent e) {
         mScroller.forceFinished(true);
         return true;
     }
+
+    private OnGestureListener mOnGesture = new GestureDetector.SimpleOnGestureListener() {
+
+        @Override
+        public boolean onDown(MotionEvent e) {
+            return HorizontalListView.this.onDown(e);
+        }
+
+        @Override
+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+            return HorizontalListView.this.onFling(e1, e2, velocityX, velocityY);
+        }
+
+        @Override
+        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+            synchronized (HorizontalListView.this) {
+                mNextX += (int) distanceX;
+            }
+            requestLayout();
+            return true;
+        }
+
+        @Override
+        public boolean onSingleTapUp(MotionEvent e) {
+            for (int i = 0; i < getChildCount(); i++) {
+                View child = getChildAt(i);
+                if (isEventWithinView(e, child)) {
+                    if (mOnItemClicked != null) {
+                        mOnItemClicked.onItemClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    if (mOnItemSelected != null) {
+                        mOnItemSelected.onItemSelected(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    break;
+                }
+            }
+            return true;
+        }
+
+        @Override
+        public void onLongPress(MotionEvent e) {
+            int childCount = getChildCount();
+            for (int i = 0; i < childCount; i++) {
+                View child = getChildAt(i);
+                if (isEventWithinView(e, child)) {
+                    if (mOnItemLongClicked != null) {
+                        mOnItemLongClicked.onItemLongClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    break;
+                }
+            }
+        }
+
+        private boolean isEventWithinView(MotionEvent e, View child) {
+            Rect viewRect = new Rect();
+            int[] childPosition = new int[2];
+            child.getLocationOnScreen(childPosition);
+            int left = childPosition[0];
+            int right = left + child.getWidth();
+            int top = childPosition[1];
+            int bottom = top + child.getHeight();
+            viewRect.set(left, top, right, bottom);
+            return viewRect.contains((int) e.getRawX(), (int) e.getRawY());
+        }
+    };
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/IdenticonDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/IdenticonDrawable.java
index 445f6eca6..b1a04b8e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/IdenticonDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/IdenticonDrawable.java
@@ -49,7 +49,7 @@ public void draw(Canvas canvas) {
         }
 
         int bitPointer = 0;
-        float rectSize = (float) Math.floor(Math.min(getBounds().width(), getBounds().height()) / 8.0f);
+        float rectSize = (float)Math.floor(Math.min(getBounds().width(), getBounds().height()) / 8.0f);
         float xOffset = Math.max(0, (getBounds().width() - rectSize * 8) / 2);
         float yOffset = Math.max(0, (getBounds().height() - rectSize * 8) / 2);
         for (int iy = 0; iy < 8; iy++) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java
index dc17aad10..6712cf6fb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java
@@ -16,8 +16,13 @@
 
 public class LayoutListView extends ListView {
 
+    public static interface OnInterceptTouchEventListener {
+        public abstract boolean onInterceptTouchEvent(MotionEvent event);
+    }
+
     private OnInterceptTouchEventListener onInterceptTouchEventListener;
     private int height = -1;
+
     public LayoutListView(Context context) {
         super(context);
     }
@@ -69,8 +74,4 @@ public void run() {
         }
         height = (bottom - top);
     }
-
-    public static interface OnInterceptTouchEventListener {
-        public abstract boolean onInterceptTouchEvent(MotionEvent event);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
index d8bdfdb63..46a490fd3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
@@ -45,10 +45,8 @@
 public class NumberPicker extends LinearLayout {
 
     private static final int SELECTOR_WHEEL_ITEM_COUNT = 3;
-    private static final int SELECTOR_MIDDLE_ITEM_INDEX = SELECTOR_WHEEL_ITEM_COUNT / 2;
-    private final int[] mSelectorIndices = new int[SELECTOR_WHEEL_ITEM_COUNT];
     private static final long DEFAULT_LONG_PRESS_UPDATE_INTERVAL = 300;
-    private long mLongPressUpdateInterval = DEFAULT_LONG_PRESS_UPDATE_INTERVAL;
+    private static final int SELECTOR_MIDDLE_ITEM_INDEX = SELECTOR_WHEEL_ITEM_COUNT / 2;
     private static final int SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT = 8;
     private static final int SELECTOR_ADJUSTMENT_DURATION_MILLIS = 800;
     private static final int SNAP_SCROLL_DURATION = 300;
@@ -57,7 +55,7 @@
     private static final int UNSCALED_DEFAULT_SELECTION_DIVIDERS_DISTANCE = 48;
     private static final int DEFAULT_LAYOUT_RESOURCE_ID = 0;
     private static final int SIZE_UNSPECIFIED = -1;
-    private final SparseArray<String> mSelectorIndexToStringCache = new SparseArray<String>();
+
     private TextView mInputText;
     private int mSelectionDividersDistance;
     private int mMinHeight;
@@ -74,6 +72,9 @@
     private OnValueChangeListener mOnValueChangeListener;
     private OnScrollListener mOnScrollListener;
     private Formatter mFormatter;
+    private long mLongPressUpdateInterval = DEFAULT_LONG_PRESS_UPDATE_INTERVAL;
+    private final SparseArray<String> mSelectorIndexToStringCache = new SparseArray<String>();
+    private final int[] mSelectorIndices = new int[SELECTOR_WHEEL_ITEM_COUNT];
     private Paint mSelectorWheelPaint;
     private Drawable mVirtualButtonPressedDrawable;
     private int mSelectorElementHeight;
@@ -104,45 +105,20 @@
     private PressedStateHelper mPressedStateHelper;
     private int mLastHandledDownDpadKeyCode = -1;
 
-    public NumberPicker(Context context) {
-        super(context);
-        init();
-    }
-
-    public NumberPicker(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        init();
+    public interface OnValueChangeListener {
+        void onValueChange(NumberPicker picker, int oldVal, int newVal);
     }
 
-    public NumberPicker(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        init();
-    }
+    public interface OnScrollListener {
+        public static int SCROLL_STATE_IDLE = 0;
+        public static int SCROLL_STATE_TOUCH_SCROLL = 1;
+        public static int SCROLL_STATE_FLING = 2;
 
-    public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {
-        int result = size;
-        int specMode = MeasureSpec.getMode(measureSpec);
-        int specSize = MeasureSpec.getSize(measureSpec);
-        switch (specMode) {
-            case MeasureSpec.UNSPECIFIED:
-                result = size;
-                break;
-            case MeasureSpec.AT_MOST:
-                if (specSize < size) {
-                    result = specSize | 16777216;
-                } else {
-                    result = size;
-                }
-                break;
-            case MeasureSpec.EXACTLY:
-                result = specSize;
-                break;
-        }
-        return result | (childMeasuredState & (-16777216));
+        public void onScrollStateChange(NumberPicker view, int scrollState);
     }
 
-    static private String formatNumberWithLocale(int value) {
-        return String.format(Locale.getDefault(), "%d", value);
+    public interface Formatter {
+        public String format(int value);
     }
 
     private void init() {
@@ -204,6 +180,21 @@ private void init() {
         updateInputTextView();
     }
 
+    public NumberPicker(Context context) {
+        super(context);
+        init();
+    }
+
+    public NumberPicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public NumberPicker(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init();
+    }
+
     @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         final int msrdWdth = getMeasuredWidth();
@@ -517,6 +508,10 @@ public void setFormatter(Formatter formatter) {
         updateInputTextView();
     }
 
+    public void setValue(int value) {
+        setValueInternal(value, false);
+    }
+
     private void tryComputeMaxWidth() {
         if (!mComputeMaxWidth) {
             return;
@@ -576,10 +571,6 @@ public int getValue() {
         return mValue;
     }
 
-    public void setValue(int value) {
-        setValueInternal(value, false);
-    }
-
     public int getMinValue() {
         return mMinValue;
     }
@@ -734,6 +725,28 @@ private int resolveSizeAndStateRespectingMinSize(
         }
     }
 
+    public static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {
+        int result = size;
+        int specMode = MeasureSpec.getMode(measureSpec);
+        int specSize =  MeasureSpec.getSize(measureSpec);
+        switch (specMode) {
+            case MeasureSpec.UNSPECIFIED:
+                result = size;
+                break;
+            case MeasureSpec.AT_MOST:
+                if (specSize < size) {
+                    result = specSize | 16777216;
+                } else {
+                    result = size;
+                }
+                break;
+            case MeasureSpec.EXACTLY:
+                result = specSize;
+                break;
+        }
+        return result | (childMeasuredState & (-16777216));
+    }
+
     private void initializeSelectorWheelIndices() {
         mSelectorIndexToStringCache.clear();
         int[] selectorIndices = mSelectorIndices;
@@ -970,22 +983,6 @@ private boolean ensureScrollWheelAdjusted() {
         return false;
     }
 
-    public interface OnValueChangeListener {
-        void onValueChange(NumberPicker picker, int oldVal, int newVal);
-    }
-
-    public interface OnScrollListener {
-        public static int SCROLL_STATE_IDLE = 0;
-        public static int SCROLL_STATE_TOUCH_SCROLL = 1;
-        public static int SCROLL_STATE_FLING = 2;
-
-        public void onScrollStateChange(NumberPicker view, int scrollState);
-    }
-
-    public interface Formatter {
-        public String format(int value);
-    }
-
     class PressedStateHelper implements Runnable {
         public static final int BUTTON_INCREMENT = 1;
         public static final int BUTTON_DECREMENT = 2;
@@ -1080,4 +1077,8 @@ public void run() {
             postDelayed(this, mLongPressUpdateInterval);
         }
     }
+
+    static private String formatNumberWithLocale(int value) {
+        return String.format(Locale.getDefault(), "%d", value);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
index e642b88f7..fb63e68a9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
@@ -8,6 +8,8 @@
 
 package org.telegram.ui.Components;
 
+import java.util.Locale;
+
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Canvas;
@@ -33,34 +35,48 @@
 
 import org.telegram.R;
 
-import java.util.Locale;
-
 public class PagerSlidingTabStrip extends HorizontalScrollView {
 
+    public interface IconTabProvider {
+        public int getPageIconResId(int position);
+    }
+
+    private LinearLayout.LayoutParams defaultTabLayoutParams;
+
     private final PageListener pageListener = new PageListener();
     public OnPageChangeListener delegatePageListener;
-    private LinearLayout.LayoutParams defaultTabLayoutParams;
+
     private LinearLayout tabsContainer;
     private ViewPager pager;
+
     private int tabCount;
+
     private int currentPosition = 0;
     private float currentPositionOffset = 0f;
+
     private Paint rectPaint;
+
     private int indicatorColor = 0xFF666666;
     private int underlineColor = 0x1A000000;
+
     private boolean shouldExpand = false;
     private boolean textAllCaps = true;
+
     private int scrollOffset = 52;
     private int indicatorHeight = 8;
     private int underlineHeight = 2;
     private int dividerPadding = 12;
     private int tabPadding = 24;
+
     private int tabTextSize = 12;
     private int tabTextColor = 0xFF666666;
     private Typeface tabTypeface = null;
     private int tabTypefaceStyle = Typeface.BOLD;
+
     private int lastScrollX = 0;
+
     private int tabBackgroundResId = R.drawable.background_tab;
+
     private Locale locale;
 
     public PagerSlidingTabStrip(Context context) {
@@ -195,7 +211,7 @@ public void onClick(View v) {
     }
 
     private void updateExpanded() {
-
+        
     }
 
     private void updateTabStyles() {
@@ -300,6 +316,46 @@ protected void onDraw(Canvas canvas) {
         canvas.drawRect(0, height - underlineHeight, tabsContainer.getWidth(), height, rectPaint);
     }
 
+    private class PageListener implements OnPageChangeListener {
+
+        @Override
+        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+
+            currentPosition = position;
+            currentPositionOffset = positionOffset;
+
+            scrollToChild(position, (int) (positionOffset * tabsContainer.getChildAt(position).getWidth()));
+
+            invalidate();
+
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageScrolled(position, positionOffset, positionOffsetPixels);
+            }
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int state) {
+            if (state == ViewPager.SCROLL_STATE_IDLE) {
+                scrollToChild(pager.getCurrentItem(), 0);
+            }
+
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageScrollStateChanged(state);
+            }
+        }
+
+        @Override
+        public void onPageSelected(int position) {
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageSelected(position);
+            }
+            for (int a = 0; a < tabsContainer.getChildCount(); a++) {
+                tabsContainer.getChildAt(a).setSelected(a == position);
+            }
+        }
+
+    }
+
     public void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
         if (!shouldExpand) {
             post(new Runnable() {
@@ -310,6 +366,11 @@ public void run() {
         }
     }
 
+    public void setIndicatorColor(int indicatorColor) {
+        this.indicatorColor = indicatorColor;
+        invalidate();
+    }
+
     public void setIndicatorColorResource(int resId) {
         this.indicatorColor = getResources().getColor(resId);
         invalidate();
@@ -319,8 +380,8 @@ public int getIndicatorColor() {
         return this.indicatorColor;
     }
 
-    public void setIndicatorColor(int indicatorColor) {
-        this.indicatorColor = indicatorColor;
+    public void setIndicatorHeight(int indicatorLineHeightPx) {
+        this.indicatorHeight = indicatorLineHeightPx;
         invalidate();
     }
 
@@ -328,8 +389,8 @@ public int getIndicatorHeight() {
         return indicatorHeight;
     }
 
-    public void setIndicatorHeight(int indicatorLineHeightPx) {
-        this.indicatorHeight = indicatorLineHeightPx;
+    public void setUnderlineColor(int underlineColor) {
+        this.underlineColor = underlineColor;
         invalidate();
     }
 
@@ -342,22 +403,13 @@ public int getUnderlineColor() {
         return underlineColor;
     }
 
-    public void setUnderlineColor(int underlineColor) {
-        this.underlineColor = underlineColor;
-        invalidate();
-    }
-
-    public int getUnderlineHeight() {
-        return underlineHeight;
-    }
-
     public void setUnderlineHeight(int underlineHeightPx) {
         this.underlineHeight = underlineHeightPx;
         invalidate();
     }
 
-    public int getDividerPadding() {
-        return dividerPadding;
+    public int getUnderlineHeight() {
+        return underlineHeight;
     }
 
     public void setDividerPadding(int dividerPaddingPx) {
@@ -365,8 +417,8 @@ public void setDividerPadding(int dividerPaddingPx) {
         invalidate();
     }
 
-    public int getScrollOffset() {
-        return scrollOffset;
+    public int getDividerPadding() {
+        return dividerPadding;
     }
 
     public void setScrollOffset(int scrollOffsetPx) {
@@ -374,8 +426,8 @@ public void setScrollOffset(int scrollOffsetPx) {
         invalidate();
     }
 
-    public boolean getShouldExpand() {
-        return shouldExpand;
+    public int getScrollOffset() {
+        return scrollOffset;
     }
 
     public void setShouldExpand(boolean shouldExpand) {
@@ -385,6 +437,10 @@ public void setShouldExpand(boolean shouldExpand) {
         requestLayout();
     }
 
+    public boolean getShouldExpand() {
+        return shouldExpand;
+    }
+
     public boolean isTextAllCaps() {
         return textAllCaps;
     }
@@ -393,12 +449,17 @@ public void setAllCaps(boolean textAllCaps) {
         this.textAllCaps = textAllCaps;
     }
 
+    public void setTextSize(int textSizePx) {
+        this.tabTextSize = textSizePx;
+        updateTabStyles();
+    }
+
     public int getTextSize() {
         return tabTextSize;
     }
 
-    public void setTextSize(int textSizePx) {
-        this.tabTextSize = textSizePx;
+    public void setTextColor(int textColor) {
+        this.tabTextColor = textColor;
         updateTabStyles();
     }
 
@@ -411,27 +472,18 @@ public int getTextColor() {
         return tabTextColor;
     }
 
-    public void setTextColor(int textColor) {
-        this.tabTextColor = textColor;
-        updateTabStyles();
-    }
-
     public void setTypeface(Typeface typeface, int style) {
         this.tabTypeface = typeface;
         this.tabTypefaceStyle = style;
         updateTabStyles();
     }
 
-    public int getTabBackground() {
-        return tabBackgroundResId;
-    }
-
     public void setTabBackground(int resId) {
         this.tabBackgroundResId = resId;
     }
 
-    public int getTabPaddingLeftRight() {
-        return tabPadding;
+    public int getTabBackground() {
+        return tabBackgroundResId;
     }
 
     public void setTabPaddingLeftRight(int paddingPx) {
@@ -439,6 +491,10 @@ public void setTabPaddingLeftRight(int paddingPx) {
         updateTabStyles();
     }
 
+    public int getTabPaddingLeftRight() {
+        return tabPadding;
+    }
+
     @Override
     public void onRestoreInstanceState(Parcelable state) {
         SavedState savedState = (SavedState) state;
@@ -455,22 +511,7 @@ public Parcelable onSaveInstanceState() {
         return savedState;
     }
 
-    public interface IconTabProvider {
-        public int getPageIconResId(int position);
-    }
-
     static class SavedState extends BaseSavedState {
-        public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator<SavedState>() {
-            @Override
-            public SavedState createFromParcel(Parcel in) {
-                return new SavedState(in);
-            }
-
-            @Override
-            public SavedState[] newArray(int size) {
-                return new SavedState[size];
-            }
-        };
         int currentPosition;
 
         public SavedState(Parcelable superState) {
@@ -487,45 +528,17 @@ public void writeToParcel(Parcel dest, int flags) {
             super.writeToParcel(dest, flags);
             dest.writeInt(currentPosition);
         }
-    }
-
-    private class PageListener implements OnPageChangeListener {
-
-        @Override
-        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
-
-            currentPosition = position;
-            currentPositionOffset = positionOffset;
-
-            scrollToChild(position, (int) (positionOffset * tabsContainer.getChildAt(position).getWidth()));
-
-            invalidate();
-
-            if (delegatePageListener != null) {
-                delegatePageListener.onPageScrolled(position, positionOffset, positionOffsetPixels);
-            }
-        }
-
-        @Override
-        public void onPageScrollStateChanged(int state) {
-            if (state == ViewPager.SCROLL_STATE_IDLE) {
-                scrollToChild(pager.getCurrentItem(), 0);
-            }
 
-            if (delegatePageListener != null) {
-                delegatePageListener.onPageScrollStateChanged(state);
+        public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator<SavedState>() {
+            @Override
+            public SavedState createFromParcel(Parcel in) {
+                return new SavedState(in);
             }
-        }
 
-        @Override
-        public void onPageSelected(int position) {
-            if (delegatePageListener != null) {
-                delegatePageListener.onPageSelected(position);
-            }
-            for (int a = 0; a < tabsContainer.getChildCount(); a++) {
-                tabsContainer.getChildAt(a).setSelected(a == position);
+            @Override
+            public SavedState[] newArray(int size) {
+                return new SavedState[size];
             }
-        }
-
+        };
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
index f14d3ec69..5e299f43e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
@@ -17,33 +17,38 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.messenger.FileLoader;
+import org.telegram.R;
+import org.telegram.android.MessageObject;
 import org.telegram.ui.Cells.BaseCell;
 
 import java.io.File;
 
 public class PopupAudioView extends BaseCell implements SeekBar.SeekBarDelegate, MediaController.FileDownloadProgressListener {
 
+    private boolean wasLayout = false;
+    protected MessageObject currentMessageObject;
+
     private static Drawable backgroundMediaDrawableIn;
+
     private static Drawable[][] statesDrawable = new Drawable[8][2];
     private static TextPaint timePaint;
-    protected MessageObject currentMessageObject;
-    int timeWidth = 0;
-    private boolean wasLayout = false;
+
     private SeekBar seekBar;
     private ProgressView progressView;
     private int seekBarX;
     private int seekBarY;
+
     private int buttonState = 0;
     private int buttonX;
     private int buttonY;
     private int buttonPressed = 0;
+
     private StaticLayout timeLayout;
     private int timeX;
+    int timeWidth = 0;
     private String lastTimeString = null;
 
     private int TAG;
@@ -81,10 +86,6 @@ public PopupAudioView(Context context) {
         progressView = new ProgressView();
     }
 
-    public final MessageObject getMessageObject() {
-        return currentMessageObject;
-    }
-
     public void setMessageObject(MessageObject messageObject) {
         if (currentMessageObject != messageObject) {
             int uid = messageObject.messageOwner.media.audio.user_id;
@@ -103,6 +104,10 @@ public void setMessageObject(MessageObject messageObject) {
         updateButtonState();
     }
 
+    public final MessageObject getMessageObject() {
+        return currentMessageObject;
+    }
+
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int width = MeasureSpec.getSize(widthMeasureSpec);
@@ -266,7 +271,7 @@ public void updateProgress() {
         }
         String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
         if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
-            timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
+            timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
             timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
         }
         invalidate();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ProgressView.java
index c2e991254..adaa786e2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ProgressView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ProgressView.java
@@ -14,12 +14,13 @@
 import org.telegram.android.AndroidUtilities;
 
 public class ProgressView {
+    private Paint innerPaint;
+    private Paint outerPaint;
+
     public float currentProgress = 0;
     public int width;
     public int height;
     public float progressHeight = AndroidUtilities.dp(2.0f);
-    private Paint innerPaint;
-    private Paint outerPaint;
 
     public ProgressView() {
         innerPaint = new Paint();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
index 0e711acb5..02438ea9c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
@@ -19,8 +19,6 @@
 
 public class RadialProgress {
 
-    private static DecelerateInterpolator decelerateInterpolator = null;
-    private static Paint progressPaint = null;
     private long lastUpdateTime = 0;
     private float radOffset = 0;
     private float currentProgress = 0;
@@ -31,12 +29,16 @@
     private RectF cicleRect = new RectF();
     private View parent = null;
     private float animatedAlphaValue = 1.0f;
+
     private boolean currentWithRound;
     private boolean previousWithRound;
     private Drawable currentDrawable;
     private Drawable previousDrawable;
     private boolean hideCurrentDrawable;
 
+    private static DecelerateInterpolator decelerateInterpolator = null;
+    private static Paint progressPaint = null;
+
     public RadialProgress(View parentView) {
         if (decelerateInterpolator == null) {
             decelerateInterpolator = new DecelerateInterpolator();
@@ -106,7 +108,7 @@ public void setProgress(float value, boolean animated) {
 
     private void invalidateParent() {
         int offset = AndroidUtilities.dp(2);
-        parent.invalidate((int) progressRect.left - offset, (int) progressRect.top - offset, (int) progressRect.right + offset * 2, (int) progressRect.bottom + offset * 2);
+        parent.invalidate((int)progressRect.left - offset, (int)progressRect.top - offset, (int)progressRect.right + offset * 2, (int)progressRect.bottom + offset * 2);
     }
 
     public void setBackground(Drawable drawable, boolean withRound, boolean animated) {
@@ -131,25 +133,25 @@ public void swapBackground(Drawable drawable) {
 
     public void onDraw(Canvas canvas) {
         if (previousDrawable != null) {
-            previousDrawable.setAlpha((int) (255 * animatedAlphaValue));
-            previousDrawable.setBounds((int) progressRect.left, (int) progressRect.top, (int) progressRect.right, (int) progressRect.bottom);
+            previousDrawable.setAlpha((int)(255 * animatedAlphaValue));
+            previousDrawable.setBounds((int)progressRect.left, (int)progressRect.top, (int)progressRect.right, (int)progressRect.bottom);
             previousDrawable.draw(canvas);
         }
 
         if (!hideCurrentDrawable && currentDrawable != null) {
             if (previousDrawable != null) {
-                currentDrawable.setAlpha((int) (255 * (1.0f - animatedAlphaValue)));
+                currentDrawable.setAlpha((int)(255 * (1.0f - animatedAlphaValue)));
             } else {
                 currentDrawable.setAlpha(255);
             }
-            currentDrawable.setBounds((int) progressRect.left, (int) progressRect.top, (int) progressRect.right, (int) progressRect.bottom);
+            currentDrawable.setBounds((int)progressRect.left, (int)progressRect.top, (int)progressRect.right, (int)progressRect.bottom);
             currentDrawable.draw(canvas);
         }
 
         if (currentWithRound || previousWithRound) {
             int diff = AndroidUtilities.dp(1);
             if (previousWithRound) {
-                progressPaint.setAlpha((int) (255 * animatedAlphaValue));
+                progressPaint.setAlpha((int)(255 * animatedAlphaValue));
             } else {
                 progressPaint.setAlpha(255);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Scroller.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Scroller.java
index 3da85f3eb..56890bfb2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Scroller.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Scroller.java
@@ -27,22 +27,49 @@
 /**
  * This class encapsulates scrolling.  The duration of the scroll
  * can be passed in the constructor and specifies the maximum time that
- * the scrolling animation should take.  Past this time, the scrolling is
+ * the scrolling animation should take.  Past this time, the scrolling is 
  * automatically moved to its final stage and computeScrollOffset()
  * will always return false to indicate that scrolling is over.
  */
-public class Scroller {
+public class Scroller  {
+    private int mMode;
+
+    private int mStartX;
+    private int mStartY;
+    private int mFinalX;
+    private int mFinalY;
+
+    private int mMinX;
+    private int mMaxX;
+    private int mMinY;
+    private int mMaxY;
+
+    private int mCurrX;
+    private int mCurrY;
+    private long mStartTime;
+    private int mDuration;
+    private float mDurationReciprocal;
+    private float mDeltaX;
+    private float mDeltaY;
+    private boolean mFinished;
+    private Interpolator mInterpolator;
+    private boolean mFlywheel;
+
+    private float mVelocity;
+
     private static final int DEFAULT_DURATION = 250;
     private static final int SCROLL_MODE = 0;
     private static final int FLING_MODE = 1;
-    private static final int NB_SAMPLES = 100;
-    private static final float[] SPLINE = new float[NB_SAMPLES + 1];
+
     private static float DECELERATION_RATE = (float) (Math.log(0.75) / Math.log(0.9));
     private static float START_TENSION = 0.4f; // Tension at start: (0.4 * total T, 1.0 * Distance)
     private static float END_TENSION = 1.0f - START_TENSION;
-    private static float sViscousFluidScale;
-    private static float sViscousFluidNormalize;
+    private static final int NB_SAMPLES = 100;
+    private static final float[] SPLINE = new float[NB_SAMPLES + 1];
+
+    private float mDeceleration;
     private final float mPpi;
+
     static {
         float x_min = 0.0f;
         for (int i = 0; i <= NB_SAMPLES; i++) {
@@ -68,27 +95,9 @@
         sViscousFluidNormalize = 1.0f;
         sViscousFluidNormalize = 1.0f / viscousFluid(1.0f);
     }
-    private int mMode;
-    private int mStartX;
-    private int mStartY;
-    private int mFinalX;
-    private int mFinalY;
-    private int mMinX;
-    private int mMaxX;
-    private int mMinY;
-    private int mMaxY;
-    private int mCurrX;
-    private int mCurrY;
-    private long mStartTime;
-    private int mDuration;
-    private float mDurationReciprocal;
-    private float mDeltaX;
-    private float mDeltaY;
-    private boolean mFinished;
-    private Interpolator mInterpolator;
-    private boolean mFlywheel;
-    private float mVelocity;
-    private float mDeceleration;
+
+    private static float sViscousFluidScale;
+    private static float sViscousFluidNormalize;
 
     /**
      * Create a Scroller with the default duration and interpolator.
@@ -119,82 +128,70 @@ public Scroller(Context context, Interpolator interpolator, boolean flywheel) {
         mFlywheel = flywheel;
     }
 
-    static float viscousFluid(float x) {
-        x *= sViscousFluidScale;
-        if (x < 1.0f) {
-            x -= (1.0f - (float) Math.exp(-x));
-        } else {
-            float start = 0.36787944117f;   // 1/e == exp(-1)
-            x = 1.0f - (float) Math.exp(1.0f - x);
-            x = start + x * (1.0f - start);
-        }
-        x *= sViscousFluidNormalize;
-        return x;
-    }
-
     /**
      * The amount of friction applied to flings. The default value
      * is {@link android.view.ViewConfiguration#getScrollFriction}.
-     *
+     * 
      * @param friction A scalar dimension-less value representing the coefficient of
-     *                 friction.
+     *         friction.
      */
     public final void setFriction(float friction) {
         mDeceleration = computeDeceleration(friction);
     }
-
+    
     private float computeDeceleration(float friction) {
         return SensorManager.GRAVITY_EARTH   // g (m/s^2)
-                * 39.37f               // inch/meter
-                * mPpi                 // pixels per inch
-                * friction;
+                      * 39.37f               // inch/meter
+                      * mPpi                 // pixels per inch
+                      * friction;
     }
 
     /**
+     * 
      * Returns whether the scroller has finished scrolling.
-     *
+     * 
      * @return True if the scroller has finished scrolling, false otherwise.
      */
     public final boolean isFinished() {
         return mFinished;
     }
-
+    
     /**
      * Force the finished field to a particular value.
-     *
+     *  
      * @param finished The new finished value.
      */
     public final void forceFinished(boolean finished) {
         mFinished = finished;
     }
-
+    
     /**
      * Returns how long the scroll event will take, in milliseconds.
-     *
+     * 
      * @return The duration of the scroll in milliseconds.
      */
     public final int getDuration() {
         return mDuration;
     }
-
+    
     /**
-     * Returns the current X offset in the scroll.
-     *
+     * Returns the current X offset in the scroll. 
+     * 
      * @return The new X offset as an absolute distance from the origin.
      */
     public final int getCurrX() {
         return mCurrX;
     }
-
+    
     /**
-     * Returns the current Y offset in the scroll.
-     *
+     * Returns the current Y offset in the scroll. 
+     * 
      * @return The new Y offset as an absolute distance from the origin.
      */
     public final int getCurrY() {
         return mCurrY;
     }
-
+    
     /**
      * Returns the current velocity.
      *
@@ -206,138 +203,113 @@ public float getCurrVelocity() {
     }
 
     /**
-     * Returns the start X offset in the scroll.
-     *
+     * Returns the start X offset in the scroll. 
+     * 
      * @return The start X offset as an absolute distance from the origin.
      */
     public final int getStartX() {
         return mStartX;
     }
-
+    
     /**
-     * Returns the start Y offset in the scroll.
-     *
+     * Returns the start Y offset in the scroll. 
+     * 
      * @return The start Y offset as an absolute distance from the origin.
      */
     public final int getStartY() {
         return mStartY;
     }
-
+    
     /**
      * Returns where the scroll will end. Valid only for "fling" scrolls.
-     *
+     * 
      * @return The final X offset as an absolute distance from the origin.
      */
     public final int getFinalX() {
         return mFinalX;
     }
-
-    /**
-     * Sets the final position (X) for this scroller.
-     *
-     * @param newX The new X offset as an absolute distance from the origin.
-     * @see #extendDuration(int)
-     * @see #setFinalY(int)
-     */
-    public void setFinalX(int newX) {
-        mFinalX = newX;
-        mDeltaX = mFinalX - mStartX;
-        mFinished = false;
-    }
-
+    
     /**
      * Returns where the scroll will end. Valid only for "fling" scrolls.
-     *
+     * 
      * @return The final Y offset as an absolute distance from the origin.
      */
     public final int getFinalY() {
         return mFinalY;
     }
 
-    /**
-     * Sets the final position (Y) for this scroller.
-     *
-     * @param newY The new Y offset as an absolute distance from the origin.
-     * @see #extendDuration(int)
-     * @see #setFinalX(int)
-     */
-    public void setFinalY(int newY) {
-        mFinalY = newY;
-        mDeltaY = mFinalY - mStartY;
-        mFinished = false;
-    }
-
     /**
      * Call this when you want to know the new location.  If it returns true,
      * the animation is not yet finished.  loc will be altered to provide the
      * new location.
-     */
+     */ 
     public boolean computeScrollOffset() {
         if (mFinished) {
             return false;
         }
 
-        int timePassed = (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);
-
+        int timePassed = (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);
+    
         if (timePassed < mDuration) {
             switch (mMode) {
-                case SCROLL_MODE:
-                    float x = timePassed * mDurationReciprocal;
-
-                    if (mInterpolator == null)
-                        x = viscousFluid(x);
-                    else
-                        x = mInterpolator.getInterpolation(x);
-
-                    mCurrX = mStartX + Math.round(x * mDeltaX);
-                    mCurrY = mStartY + Math.round(x * mDeltaY);
-                    break;
-                case FLING_MODE:
-                    final float t = (float) timePassed / mDuration;
-                    final int index = (int) (NB_SAMPLES * t);
-                    final float t_inf = (float) index / NB_SAMPLES;
-                    final float t_sup = (float) (index + 1) / NB_SAMPLES;
-                    final float d_inf = SPLINE[index];
-                    final float d_sup = SPLINE[index + 1];
-                    final float distanceCoef = d_inf + (t - t_inf) / (t_sup - t_inf) * (d_sup - d_inf);
-
-                    mCurrX = mStartX + Math.round(distanceCoef * (mFinalX - mStartX));
-                    // Pin to mMinX <= mCurrX <= mMaxX
-                    mCurrX = Math.min(mCurrX, mMaxX);
-                    mCurrX = Math.max(mCurrX, mMinX);
-
-                    mCurrY = mStartY + Math.round(distanceCoef * (mFinalY - mStartY));
-                    // Pin to mMinY <= mCurrY <= mMaxY
-                    mCurrY = Math.min(mCurrY, mMaxY);
-                    mCurrY = Math.max(mCurrY, mMinY);
-
-                    if (mCurrX == mFinalX && mCurrY == mFinalY) {
-                        mFinished = true;
-                    }
-
-                    break;
+            case SCROLL_MODE:
+                float x = timePassed * mDurationReciprocal;
+    
+                if (mInterpolator == null)
+                    x = viscousFluid(x); 
+                else
+                    x = mInterpolator.getInterpolation(x);
+    
+                mCurrX = mStartX + Math.round(x * mDeltaX);
+                mCurrY = mStartY + Math.round(x * mDeltaY);
+                break;
+            case FLING_MODE:
+                final float t = (float) timePassed / mDuration;
+                final int index = (int) (NB_SAMPLES * t);
+                final float t_inf = (float) index / NB_SAMPLES;
+                final float t_sup = (float) (index + 1) / NB_SAMPLES;
+                final float d_inf = SPLINE[index];
+                final float d_sup = SPLINE[index + 1];
+                final float distanceCoef = d_inf + (t - t_inf) / (t_sup - t_inf) * (d_sup - d_inf);
+                
+                mCurrX = mStartX + Math.round(distanceCoef * (mFinalX - mStartX));
+                // Pin to mMinX <= mCurrX <= mMaxX
+                mCurrX = Math.min(mCurrX, mMaxX);
+                mCurrX = Math.max(mCurrX, mMinX);
+                
+                mCurrY = mStartY + Math.round(distanceCoef * (mFinalY - mStartY));
+                // Pin to mMinY <= mCurrY <= mMaxY
+                mCurrY = Math.min(mCurrY, mMaxY);
+                mCurrY = Math.max(mCurrY, mMinY);
+
+                if (mCurrX == mFinalX && mCurrY == mFinalY) {
+                    mFinished = true;
+                }
+
+                break;
             }
-        } else {
+        }
+        else {
             mCurrX = mFinalX;
             mCurrY = mFinalY;
             mFinished = true;
         }
         return true;
     }
-
+    
     /**
      * Start scrolling by providing a starting point and the distance to travel.
      * The scroll will use the default value of 250 milliseconds for the
      * duration.
-     *
+     * 
      * @param startX Starting horizontal scroll offset in pixels. Positive
-     *               numbers will scroll the content to the left.
+     *        numbers will scroll the content to the left.
      * @param startY Starting vertical scroll offset in pixels. Positive numbers
-     *               will scroll the content up.
-     * @param dx     Horizontal distance to travel. Positive numbers will scroll the
-     *               content to the left.
-     * @param dy     Vertical distance to travel. Positive numbers will scroll the
-     *               content up.
+     *        will scroll the content up.
+     * @param dx Horizontal distance to travel. Positive numbers will scroll the
+     *        content to the left.
+     * @param dy Vertical distance to travel. Positive numbers will scroll the
+     *        content up.
      */
     public void startScroll(int startX, int startY, int dx, int dy) {
         startScroll(startX, startY, dx, dy, DEFAULT_DURATION);
@@ -345,15 +317,15 @@ public void startScroll(int startX, int startY, int dx, int dy) {
 
     /**
      * Start scrolling by providing a starting point and the distance to travel.
-     *
-     * @param startX   Starting horizontal scroll offset in pixels. Positive
-     *                 numbers will scroll the content to the left.
-     * @param startY   Starting vertical scroll offset in pixels. Positive numbers
-     *                 will scroll the content up.
-     * @param dx       Horizontal distance to travel. Positive numbers will scroll the
-     *                 content to the left.
-     * @param dy       Vertical distance to travel. Positive numbers will scroll the
-     *                 content up.
+     * 
+     * @param startX Starting horizontal scroll offset in pixels. Positive
+     *        numbers will scroll the content to the left.
+     * @param startY Starting vertical scroll offset in pixels. Positive numbers
+     *        will scroll the content up.
+     * @param dx Horizontal distance to travel. Positive numbers will scroll the
+     *        content to the left.
+     * @param dy Vertical distance to travel. Positive numbers will scroll the
+     *        content up.
      * @param duration Duration of the scroll in milliseconds.
      */
     public void startScroll(int startX, int startY, int dx, int dy, int duration) {
@@ -373,24 +345,24 @@ public void startScroll(int startX, int startY, int dx, int dy, int duration) {
     /**
      * Start scrolling based on a fling gesture. The distance travelled will
      * depend on the initial velocity of the fling.
-     *
-     * @param startX    Starting point of the scroll (X)
-     * @param startY    Starting point of the scroll (Y)
+     * 
+     * @param startX Starting point of the scroll (X)
+     * @param startY Starting point of the scroll (Y)
      * @param velocityX Initial velocity of the fling (X) measured in pixels per
-     *                  second.
+     *        second.
      * @param velocityY Initial velocity of the fling (Y) measured in pixels per
-     *                  second
-     * @param minX      Minimum X value. The scroller will not scroll past this
-     *                  point.
-     * @param maxX      Maximum X value. The scroller will not scroll past this
-     *                  point.
-     * @param minY      Minimum Y value. The scroller will not scroll past this
-     *                  point.
-     * @param maxY      Maximum Y value. The scroller will not scroll past this
-     *                  point.
+     *        second
+     * @param minX Minimum X value. The scroller will not scroll past this
+     *        point.
+     * @param maxX Maximum X value. The scroller will not scroll past this
+     *        point.
+     * @param minY Minimum Y value. The scroller will not scroll past this
+     *        point.
+     * @param maxY Maximum Y value. The scroller will not scroll past this
+     *        point.
      */
     public void fling(int startX, int startY, int velocityX, int velocityY,
-                      int minX, int maxX, int minY, int maxY) {
+            int minX, int maxX, int minY, int maxY) {
         // Continue a scroll or fling in progress
         if (mFlywheel && !mFinished) {
             float oldVel = getCurrVelocity();
@@ -415,7 +387,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
         mFinished = false;
 
         float velocity = FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);
-
+     
         mVelocity = velocity;
         float ALPHA = 800;
         final double l = Math.log(START_TENSION * velocity / ALPHA);
@@ -429,7 +401,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
 
         int totalDistance =
                 (int) (ALPHA * Math.exp(DECELERATION_RATE / (DECELERATION_RATE - 1.0) * l));
-
+        
         mMinX = minX;
         mMaxX = maxX;
         mMinY = minY;
@@ -439,13 +411,27 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
         // Pin to mMinX <= mFinalX <= mMaxX
         mFinalX = Math.min(mFinalX, mMaxX);
         mFinalX = Math.max(mFinalX, mMinX);
-
+        
         mFinalY = startY + Math.round(totalDistance * coeffY);
         // Pin to mMinY <= mFinalY <= mMaxY
         mFinalY = Math.min(mFinalY, mMaxY);
         mFinalY = Math.max(mFinalY, mMinY);
     }
-
+    
+    static float viscousFluid(float x)
+    {
+        x *= sViscousFluidScale;
+        if (x < 1.0f) {
+            x -= (1.0f - (float)Math.exp(-x));
+        } else {
+            float start = 0.36787944117f;   // 1/e == exp(-1)
+            x = 1.0f - (float)Math.exp(1.0f - x);
+            x = start + x * (1.0f - start);
+        }
+        x *= sViscousFluidNormalize;
+        return x;
+    }
+    
     /**
      * Stops the animation. Contrary to {@link #forceFinished(boolean)},
      * aborting the animating cause the scroller to move to the final x and y
@@ -458,7 +444,7 @@ public void abortAnimation() {
         mCurrY = mFinalY;
         mFinished = true;
     }
-
+    
     /**
      * Extend the scroll animation. This allows a running animation to scroll
      * further and longer, when used with {@link #setFinalX(int)} or {@link #setFinalY(int)}.
@@ -480,7 +466,33 @@ public void extendDuration(int extend) {
      * @return The elapsed time in milliseconds.
      */
     public int timePassed() {
-        return (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);
+        return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);
+    }
+
+    /**
+     * Sets the final position (X) for this scroller.
+     *
+     * @param newX The new X offset as an absolute distance from the origin.
+     * @see #extendDuration(int)
+     * @see #setFinalY(int)
+     */
+    public void setFinalX(int newX) {
+        mFinalX = newX;
+        mDeltaX = mFinalX - mStartX;
+        mFinished = false;
+    }
+
+    /**
+     * Sets the final position (Y) for this scroller.
+     *
+     * @param newY The new Y offset as an absolute distance from the origin.
+     * @see #extendDuration(int)
+     * @see #setFinalX(int)
+     */
+    public void setFinalY(int newY) {
+        mFinalY = newY;
+        mDeltaY = mFinalY - mStartY;
+        mFinished = false;
     }
 
     public boolean isScrollingInDirection(float xvel, float yvel) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SectionsListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SectionsListView.java
index 992dd1582..0d833ee41 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SectionsListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SectionsListView.java
@@ -191,11 +191,11 @@ protected void dispatchDraw(Canvas canvas) {
         }
         for (View header : headers) {
             int saveCount = canvas.save();
-            int top = (Integer) header.getTag();
+            int top = (Integer)header.getTag();
             canvas.translate(LocaleController.isRTL ? getWidth() - header.getWidth() : 0, top);
             canvas.clipRect(0, 0, getWidth(), header.getMeasuredHeight());
             if (top < 0) {
-                canvas.saveLayerAlpha(0, top, header.getWidth(), top + canvas.getHeight(), (int) (255 * (1.0f + (float) top / (float) header.getMeasuredHeight())), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
+                canvas.saveLayerAlpha(0, top, header.getWidth(), top + canvas.getHeight(), (int)(255 * (1.0f + (float)top / (float)header.getMeasuredHeight())), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
             }
             header.draw(canvas);
             canvas.restoreToCount(saveCount);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
index 475a1167f..0cc7ff595 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
@@ -14,11 +14,15 @@
 import android.graphics.drawable.Drawable;
 import android.view.MotionEvent;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.R;
 
 public class SeekBar {
 
+    public abstract interface SeekBarDelegate {
+        public void onSeekBarDrag(float progress);
+    }
+
     private static Drawable thumbDrawable1;
     private static Drawable thumbDrawablePressed1;
     private static Drawable thumbDrawable2;
@@ -32,10 +36,11 @@
     public int type;
     public int thumbX = 0;
     public int thumbDX = 0;
+    private boolean pressed = false;
     public int width;
     public int height;
     public SeekBarDelegate delegate;
-    private boolean pressed = false;
+
     public SeekBar(Context context) {
         if (thumbDrawable1 == null) {
             thumbDrawable1 = context.getResources().getDrawable(R.drawable.player1);
@@ -56,20 +61,20 @@ public boolean onTouch(int action, float x, float y) {
             int additionWidth = (height - thumbWidth) / 2;
             if (thumbX - additionWidth <= x && x <= thumbX + thumbWidth + additionWidth && y >= 0 && y <= height) {
                 pressed = true;
-                thumbDX = (int) (x - thumbX);
+                thumbDX = (int)(x - thumbX);
                 return true;
             }
         } else if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
             if (pressed) {
                 if (action == MotionEvent.ACTION_UP && delegate != null) {
-                    delegate.onSeekBarDrag((float) thumbX / (float) (width - thumbWidth));
+                    delegate.onSeekBarDrag((float)thumbX / (float)(width - thumbWidth));
                 }
                 pressed = false;
                 return true;
             }
         } else if (action == MotionEvent.ACTION_MOVE) {
             if (pressed) {
-                thumbX = (int) (x - thumbDX);
+                thumbX = (int)(x - thumbDX);
                 if (thumbX < 0) {
                     thumbX = 0;
                 } else if (thumbX > width - thumbWidth) {
@@ -82,7 +87,7 @@ public boolean onTouch(int action, float x, float y) {
     }
 
     public void setProgress(float progress) {
-        thumbX = (int) Math.ceil((width - thumbWidth) * progress);
+        thumbX = (int)Math.ceil((width - thumbWidth) * progress);
         if (thumbX < 0) {
             thumbX = 0;
         } else if (thumbX > width - thumbWidth) {
@@ -121,8 +126,4 @@ public void draw(Canvas canvas) {
         thumb.setBounds(thumbX, y, thumbX + thumbWidth, y + thumbHeight);
         thumb.draw(canvas);
     }
-
-    public abstract interface SeekBarDelegate {
-        public void onSeekBarDrag(float progress);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
index 08a512b10..214f320f8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
@@ -20,9 +20,13 @@
 
 public class SizeNotifierRelativeLayout extends RelativeLayout {
 
-    public SizeNotifierRelativeLayoutDelegate delegate;
     private Rect rect = new Rect();
     private Drawable backgroundDrawable;
+    public SizeNotifierRelativeLayoutDelegate delegate;
+
+    public abstract interface SizeNotifierRelativeLayoutDelegate {
+        public abstract void onSizeChanged(int keyboardHeight);
+    }
 
     public SizeNotifierRelativeLayout(Context context) {
         super(context);
@@ -44,14 +48,14 @@ public void setBackgroundImage(int resourceId) {
         }
     }
 
-    public Drawable getBackgroundImage() {
-        return backgroundDrawable;
-    }
-
     public void setBackgroundImage(Drawable bitmap) {
         backgroundDrawable = bitmap;
     }
 
+    public Drawable getBackgroundImage() {
+        return backgroundDrawable;
+    }
+
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
         super.onLayout(changed, l, t, r, b);
@@ -67,11 +71,11 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
     @Override
     protected void onDraw(Canvas canvas) {
         if (backgroundDrawable != null) {
-            float scaleX = (float) getMeasuredWidth() / (float) backgroundDrawable.getIntrinsicWidth();
-            float scaleY = (float) getMeasuredHeight() / (float) backgroundDrawable.getIntrinsicHeight();
+            float scaleX = (float)getMeasuredWidth() / (float)backgroundDrawable.getIntrinsicWidth();
+            float scaleY = (float)getMeasuredHeight() / (float)backgroundDrawable.getIntrinsicHeight();
             float scale = scaleX < scaleY ? scaleY : scaleX;
-            int width = (int) Math.ceil(backgroundDrawable.getIntrinsicWidth() * scale);
-            int height = (int) Math.ceil(backgroundDrawable.getIntrinsicHeight() * scale);
+            int width = (int)Math.ceil(backgroundDrawable.getIntrinsicWidth() * scale);
+            int height = (int)Math.ceil(backgroundDrawable.getIntrinsicHeight() * scale);
             int x = (getMeasuredWidth() - width) / 2;
             int y = (getMeasuredHeight() - height) / 2;
             backgroundDrawable.setBounds(x, y, x + width, y + height);
@@ -80,8 +84,4 @@ protected void onDraw(Canvas canvas) {
             super.onDraw(canvas);
         }
     }
-
-    public abstract interface SizeNotifierRelativeLayoutDelegate {
-        public abstract void onSizeChanged(int keyboardHeight);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
index 97c90b5d1..cdf8daa0c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
@@ -30,32 +30,56 @@
 import android.view.ViewConfiguration;
 import android.widget.CompoundButton;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.R;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
 
 public class Switch extends CompoundButton {
 
+    public static class Insets {
+        public static final Insets NONE = new Insets(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
+
+        public final int left;
+        public final int top;
+        public final int right;
+        public final int bottom;
+
+        private Insets(int left, int top, int right, int bottom) {
+            this.left = left;
+            this.top = top;
+            this.right = right;
+            this.bottom = bottom;
+        }
+    }
+
+    public static float constrain(float amount, float low, float high) {
+        return amount < low ? low : (amount > high ? high : amount);
+    }
+
     private static final int THUMB_ANIMATION_DURATION = 250;
+
     private static final int TOUCH_MODE_IDLE = 0;
     private static final int TOUCH_MODE_DOWN = 1;
     private static final int TOUCH_MODE_DRAGGING = 2;
-    private final Rect mTempRect = new Rect();
+
     private Drawable mThumbDrawable;
     private Drawable mTrackDrawable;
     private int mThumbTextPadding;
     private int mSwitchMinWidth;
     private int mSwitchPadding;
     private boolean mSplitTrack;
+
     private boolean attachedToWindow;
     private boolean wasLayout;
+
     private int mTouchMode;
     private int mTouchSlop;
     private float mTouchX;
     private float mTouchY;
     private VelocityTracker mVelocityTracker = VelocityTracker.obtain();
     private int mMinFlingVelocity;
+
     private float thumbPosition;
     private int mSwitchWidth;
     private int mSwitchHeight;
@@ -64,8 +88,11 @@
     private int mSwitchTop;
     private int mSwitchRight;
     private int mSwitchBottom;
+
     private ObjectAnimatorProxy mPositionAnimator;
 
+    private final Rect mTempRect = new Rect();
+
     public Switch(Context context) {
         super(context);
 
@@ -95,21 +122,13 @@ public Switch(Context context) {
         setChecked(isChecked());
     }
 
-    public static float constrain(float amount, float low, float high) {
-        return amount < low ? low : (amount > high ? high : amount);
-    }
-
-    public int getSwitchPadding() {
-        return mSwitchPadding;
-    }
-
     public void setSwitchPadding(int pixels) {
         mSwitchPadding = pixels;
         requestLayout();
     }
 
-    public int getSwitchMinWidth() {
-        return mSwitchMinWidth;
+    public int getSwitchPadding() {
+        return mSwitchPadding;
     }
 
     public void setSwitchMinWidth(int pixels) {
@@ -117,8 +136,8 @@ public void setSwitchMinWidth(int pixels) {
         requestLayout();
     }
 
-    public int getThumbTextPadding() {
-        return mThumbTextPadding;
+    public int getSwitchMinWidth() {
+        return mSwitchMinWidth;
     }
 
     public void setThumbTextPadding(int pixels) {
@@ -126,12 +145,8 @@ public void setThumbTextPadding(int pixels) {
         requestLayout();
     }
 
-    public void setTrackResource(int resId) {
-        setTrackDrawable(getContext().getDrawable(resId));
-    }
-
-    public Drawable getTrackDrawable() {
-        return mTrackDrawable;
+    public int getThumbTextPadding() {
+        return mThumbTextPadding;
     }
 
     public void setTrackDrawable(Drawable track) {
@@ -145,12 +160,12 @@ public void setTrackDrawable(Drawable track) {
         requestLayout();
     }
 
-    public void setThumbResource(int resId) {
-        setThumbDrawable(getContext().getDrawable(resId));
+    public void setTrackResource(int resId) {
+        setTrackDrawable(getContext().getDrawable(resId));
     }
 
-    public Drawable getThumbDrawable() {
-        return mThumbDrawable;
+    public Drawable getTrackDrawable() {
+        return mTrackDrawable;
     }
 
     public void setThumbDrawable(Drawable thumb) {
@@ -164,8 +179,12 @@ public void setThumbDrawable(Drawable thumb) {
         requestLayout();
     }
 
-    public boolean getSplitTrack() {
-        return mSplitTrack;
+    public void setThumbResource(int resId) {
+        setThumbDrawable(getContext().getDrawable(resId));
+    }
+
+    public Drawable getThumbDrawable() {
+        return mThumbDrawable;
     }
 
     public void setSplitTrack(boolean splitTrack) {
@@ -173,6 +192,10 @@ public void setSplitTrack(boolean splitTrack) {
         invalidate();
     }
 
+    public boolean getSplitTrack() {
+        return mSplitTrack;
+    }
+
     @Override
     public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         final Rect padding = mTempRect;
@@ -350,15 +373,15 @@ private boolean getTargetCheckedState() {
         return thumbPosition > 0.5f;
     }
 
-    public float getThumbPosition() {
-        return thumbPosition;
-    }
-
     private void setThumbPosition(float position) {
         thumbPosition = position;
         invalidate();
     }
 
+    public float getThumbPosition() {
+        return thumbPosition;
+    }
+
     @Override
     public void toggle() {
         setChecked(!isChecked());
@@ -605,6 +628,15 @@ private int getThumbScrollRange() {
         }
     }
 
+    /*@Override
+    protected int[] onCreateDrawableState(int extraSpace) {
+        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
+        if (isChecked()) {
+            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
+        }
+        return drawableState;
+    }*/
+
     @Override
     protected void drawableStateChanged() {
         super.drawableStateChanged();
@@ -622,15 +654,6 @@ protected void drawableStateChanged() {
         invalidate();
     }
 
-    /*@Override
-    protected int[] onCreateDrawableState(int extraSpace) {
-        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
-        if (isChecked()) {
-            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
-        }
-        return drawableState;
-    }*/
-
     @Override
     public void drawableHotspotChanged(float x, float y) {
         super.drawableHotspotChanged(x, y);
@@ -666,20 +689,4 @@ public void jumpDrawablesToCurrentState() {
             mPositionAnimator = null;
         }
     }
-
-    public static class Insets {
-        public static final Insets NONE = new Insets(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
-
-        public final int left;
-        public final int top;
-        public final int right;
-        public final int bottom;
-
-        private Insets(int left, int top, int right, int bottom) {
-            this.left = left;
-            this.top = top;
-            this.right = right;
-            this.bottom = bottom;
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
index 0edfef6a9..17d8131f4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
@@ -17,9 +17,9 @@
 import android.text.StaticLayout;
 import android.text.TextPaint;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 
 public class TimerDrawable extends Drawable {
 
@@ -77,7 +77,7 @@ public void setTime(int value) {
 
         timeWidth = timePaint.measureText(timeString);
         try {
-            timeLayout = new StaticLayout(timeString, timePaint, (int) Math.ceil(timeWidth), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            timeLayout = new StaticLayout(timeString, timePaint, (int)Math.ceil(timeWidth), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             timeHeight = timeLayout.getHeight();
         } catch (Exception e) {
             timeLayout = null;
@@ -108,7 +108,7 @@ public void draw(Canvas canvas) {
             if (AndroidUtilities.density == 3) {
                 xOffxet = -1;
             }
-            canvas.translate((int) (width / 2 - Math.ceil(timeWidth / 2)) + xOffxet, (height - timeHeight) / 2);
+            canvas.translate((int)(width / 2 - Math.ceil(timeWidth / 2)) + xOffxet, (height - timeHeight) / 2);
             timeLayout.draw(canvas);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
index 9dcc44737..393482f89 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
@@ -20,8 +20,8 @@
     private boolean isChat = false;
     private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
     private float[] scales = new float[3];
-    private float[] startTimes = new float[]{0, 150, 300};
-    private float[] elapsedTimes = new float[]{0, 0, 0};
+    private float[] startTimes = new float[] {0, 150, 300};
+    private float[] elapsedTimes = new float[] {0, 0, 0};
     private long lastUpdateTime = 0;
     private boolean started = false;
     private DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java
index abb5f59df..099e677e7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java
@@ -16,8 +16,8 @@
 import android.view.MotionEvent;
 import android.view.View;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.R;
 
 public class VideoSeekBarView extends View {
 
@@ -25,10 +25,23 @@
     private static Paint innerPaint1 = new Paint();
     private static int thumbWidth;
     private static int thumbHeight;
-    public SeekBarDelegate delegate;
     private int thumbDX = 0;
     private float progress = 0;
     private boolean pressed = false;
+    public SeekBarDelegate delegate;
+
+    public abstract interface SeekBarDelegate {
+        public void onSeekBarDrag(float progress);
+    }
+
+    private void init(Context context) {
+        if (thumbDrawable1 == null) {
+            thumbDrawable1 = context.getResources().getDrawable(R.drawable.videolapse);
+            innerPaint1.setColor(0x99999999);
+            thumbWidth = thumbDrawable1.getIntrinsicWidth();
+            thumbHeight = thumbDrawable1.getIntrinsicHeight();
+        }
+    }
 
     public VideoSeekBarView(Context context) {
         super(context);
@@ -45,15 +58,6 @@ public VideoSeekBarView(Context context, AttributeSet attrs, int defStyleAttr) {
         init(context);
     }
 
-    private void init(Context context) {
-        if (thumbDrawable1 == null) {
-            thumbDrawable1 = context.getResources().getDrawable(R.drawable.videolapse);
-            innerPaint1.setColor(0x99999999);
-            thumbWidth = thumbDrawable1.getIntrinsicWidth();
-            thumbHeight = thumbDrawable1.getIntrinsicHeight();
-        }
-    }
-
     @Override
     public boolean onTouchEvent(MotionEvent event) {
         if (event == null) {
@@ -61,12 +65,12 @@ public boolean onTouchEvent(MotionEvent event) {
         }
         float x = event.getX();
         float y = event.getY();
-        float thumbX = (int) ((getMeasuredWidth() - thumbWidth) * progress);
+        float thumbX = (int)((getMeasuredWidth() - thumbWidth) * progress);
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
             int additionWidth = (getMeasuredHeight() - thumbWidth) / 2;
             if (thumbX - additionWidth <= x && x <= thumbX + thumbWidth + additionWidth && y >= 0 && y <= getMeasuredHeight()) {
                 pressed = true;
-                thumbDX = (int) (x - thumbX);
+                thumbDX = (int)(x - thumbX);
                 getParent().requestDisallowInterceptTouchEvent(true);
                 invalidate();
                 return true;
@@ -74,7 +78,7 @@ public boolean onTouchEvent(MotionEvent event) {
         } else if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
             if (pressed) {
                 if (event.getAction() == MotionEvent.ACTION_UP && delegate != null) {
-                    delegate.onSeekBarDrag(thumbX / (float) (getMeasuredWidth() - thumbWidth));
+                    delegate.onSeekBarDrag(thumbX / (float)(getMeasuredWidth() - thumbWidth));
                 }
                 pressed = false;
                 invalidate();
@@ -82,7 +86,7 @@ public boolean onTouchEvent(MotionEvent event) {
             }
         } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
             if (pressed) {
-                thumbX = (int) (x - thumbDX);
+                thumbX = (int)(x - thumbDX);
                 if (thumbX < 0) {
                     thumbX = 0;
                 } else if (thumbX > getMeasuredWidth() - thumbWidth) {
@@ -96,10 +100,6 @@ public boolean onTouchEvent(MotionEvent event) {
         return false;
     }
 
-    public float getProgress() {
-        return progress;
-    }
-
     public void setProgress(float progress) {
         if (progress < 0) {
             progress = 0;
@@ -110,16 +110,16 @@ public void setProgress(float progress) {
         invalidate();
     }
 
+    public float getProgress() {
+        return progress;
+    }
+
     @Override
     protected void onDraw(Canvas canvas) {
         int y = (getMeasuredHeight() - thumbHeight) / 2;
-        int thumbX = (int) ((getMeasuredWidth() - thumbWidth) * progress);
+        int thumbX = (int)((getMeasuredWidth() - thumbWidth) * progress);
         canvas.drawRect(thumbWidth / 2, getMeasuredHeight() / 2 - AndroidUtilities.dp(1), getMeasuredWidth() - thumbWidth / 2, getMeasuredHeight() / 2 + AndroidUtilities.dp(1), innerPaint1);
         thumbDrawable1.setBounds(thumbX, y, thumbX + thumbWidth, y + thumbHeight);
         thumbDrawable1.draw(canvas);
     }
-
-    public abstract interface SeekBarDelegate {
-        public void onSeekBarDrag(float progress);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
index ff6afa89a..710346156 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
@@ -21,15 +21,14 @@
 import android.view.MotionEvent;
 import android.view.View;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 
 import java.util.ArrayList;
 
 @TargetApi(10)
 public class VideoTimelineView extends View {
-    private static final Object sync = new Object();
     private long videoLength = 0;
     private float progressLeft = 0;
     private float progressRight = 1;
@@ -42,12 +41,26 @@
     private VideoTimelineViewDelegate delegate = null;
     private ArrayList<Bitmap> frames = new ArrayList<Bitmap>();
     private AsyncTask<Integer, Integer, Bitmap> currentTask = null;
+    private static final Object sync = new Object();
     private long frameTimeOffset = 0;
     private int frameWidth = 0;
     private int frameHeight = 0;
     private int framesToLoad = 0;
     private Drawable pickDrawable = null;
 
+    public abstract interface VideoTimelineViewDelegate {
+        public void onLeftProgressChanged(float progress);
+        public void onRifhtProgressChanged(float progress);
+    }
+
+    private void init(Context context) {
+        paint = new Paint();
+        paint.setColor(0xff66d1ee);
+        paint2 = new Paint();
+        paint2.setColor(0x7f000000);
+        pickDrawable = getResources().getDrawable(R.drawable.videotrimmer);
+    }
+
     public VideoTimelineView(Context context) {
         super(context);
         init(context);
@@ -63,14 +76,6 @@ public VideoTimelineView(Context context, AttributeSet attrs, int defStyleAttr)
         init(context);
     }
 
-    private void init(Context context) {
-        paint = new Paint();
-        paint.setColor(0xff66d1ee);
-        paint2 = new Paint();
-        paint2.setColor(0x7f000000);
-        pickDrawable = getResources().getDrawable(R.drawable.videotrimmer);
-    }
-
     public float getLeftProgress() {
         return progressLeft;
     }
@@ -88,20 +93,20 @@ public boolean onTouchEvent(MotionEvent event) {
         float y = event.getY();
 
         int width = getMeasuredWidth() - AndroidUtilities.dp(32);
-        int startX = (int) (width * progressLeft) + AndroidUtilities.dp(16);
-        int endX = (int) (width * progressRight) + AndroidUtilities.dp(16);
+        int startX = (int)(width * progressLeft) + AndroidUtilities.dp(16);
+        int endX = (int)(width * progressRight) + AndroidUtilities.dp(16);
 
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
             int additionWidth = AndroidUtilities.dp(12);
             if (startX - additionWidth <= x && x <= startX + additionWidth && y >= 0 && y <= getMeasuredHeight()) {
                 pressedLeft = true;
-                pressDx = (int) (x - startX);
+                pressDx = (int)(x - startX);
                 getParent().requestDisallowInterceptTouchEvent(true);
                 invalidate();
                 return true;
             } else if (endX - additionWidth <= x && x <= endX + additionWidth && y >= 0 && y <= getMeasuredHeight()) {
                 pressedRight = true;
-                pressDx = (int) (x - endX);
+                pressDx = (int)(x - endX);
                 getParent().requestDisallowInterceptTouchEvent(true);
                 invalidate();
                 return true;
@@ -116,26 +121,26 @@ public boolean onTouchEvent(MotionEvent event) {
             }
         } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
             if (pressedLeft) {
-                startX = (int) (x - pressDx);
+                startX = (int)(x - pressDx);
                 if (startX < AndroidUtilities.dp(16)) {
                     startX = AndroidUtilities.dp(16);
                 } else if (startX > endX) {
                     startX = endX;
                 }
-                progressLeft = (float) (startX - AndroidUtilities.dp(16)) / (float) width;
+                progressLeft = (float)(startX - AndroidUtilities.dp(16)) / (float)width;
                 if (delegate != null) {
                     delegate.onLeftProgressChanged(progressLeft);
                 }
                 invalidate();
                 return true;
             } else if (pressedRight) {
-                endX = (int) (x - pressDx);
+                endX = (int)(x - pressDx);
                 if (endX < startX) {
                     endX = startX;
                 } else if (endX > width + AndroidUtilities.dp(16)) {
                     endX = width + AndroidUtilities.dp(16);
                 }
-                progressRight = (float) (endX - AndroidUtilities.dp(16)) / (float) width;
+                progressRight = (float)(endX - AndroidUtilities.dp(16)) / (float)width;
                 if (delegate != null) {
                     delegate.onRifhtProgressChanged(progressRight);
                 }
@@ -168,7 +173,7 @@ private void reloadFrames(int frameNum) {
         if (frameNum == 0) {
             frameHeight = AndroidUtilities.dp(40);
             framesToLoad = (getMeasuredWidth() - AndroidUtilities.dp(16)) / frameHeight;
-            frameWidth = (int) Math.ceil((float) (getMeasuredWidth() - AndroidUtilities.dp(16)) / (float) framesToLoad);
+            frameWidth = (int)Math.ceil((float)(getMeasuredWidth() - AndroidUtilities.dp(16)) / (float)framesToLoad);
             frameTimeOffset = videoLength / framesToLoad;
         }
         currentTask = new AsyncTask<Integer, Integer, Bitmap>() {
@@ -266,8 +271,8 @@ public void clearFrames() {
     @Override
     protected void onDraw(Canvas canvas) {
         int width = getMeasuredWidth() - AndroidUtilities.dp(36);
-        int startX = (int) (width * progressLeft) + AndroidUtilities.dp(16);
-        int endX = (int) (width * progressRight) + AndroidUtilities.dp(16);
+        int startX = (int)(width * progressLeft) + AndroidUtilities.dp(16);
+        int endX = (int)(width * progressRight) + AndroidUtilities.dp(16);
 
         canvas.save();
         canvas.clipRect(AndroidUtilities.dp(16), 0, width + AndroidUtilities.dp(20), AndroidUtilities.dp(44));
@@ -300,10 +305,4 @@ protected void onDraw(Canvas canvas) {
         pickDrawable.setBounds(endX - drawableWidth / 2 + AndroidUtilities.dp(4), getMeasuredHeight() - drawableHeight, endX + drawableWidth / 2 + AndroidUtilities.dp(4), getMeasuredHeight());
         pickDrawable.draw(canvas);
     }
-
-    public abstract interface VideoTimelineViewDelegate {
-        public void onLeftProgressChanged(float progress);
-
-        public void onRifhtProgressChanged(float progress);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index 7cde1c5c7..25db90503 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -27,34 +27,36 @@
 import android.widget.ScrollView;
 import android.widget.TextView;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 public class ContactAddActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    private final static int done_button = 1;
     private View doneButton;
     private EditText firstNameField;
     private EditText lastNameField;
     private BackupImageView avatarImage;
     private TextView nameTextView;
     private TextView onlineTextView;
+
     private int user_id;
     private boolean addContact;
     private String phone = null;
 
+    private final static int done_button = 1;
+
     public ContactAddActivity(Bundle args) {
         super(args);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index 18f846388..df5c11458 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -29,25 +29,25 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.android.SecretChatHelper;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseSectionsAdapter;
 import org.telegram.ui.Adapters.ContactsAdapter;
 import org.telegram.ui.Adapters.ContactsSearchAdapter;
 import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.SectionsListView;
 
 import java.util.ArrayList;
@@ -73,6 +73,10 @@
     private boolean allowUsernameSearch = true;
     private ContactsActivityDelegate delegate;
 
+    public static interface ContactsActivityDelegate {
+        public abstract void didSelectContact(TLRPC.User user, String param);
+    }
+
     public ContactsActivity(Bundle args) {
         super(args);
     }
@@ -170,7 +174,7 @@ public void onTextChanged(EditText editText) {
                         if (listView != null) {
                             listView.setAdapter(searchListViewAdapter);
                             searchListViewAdapter.notifyDataSetChanged();
-                            if (android.os.Build.VERSION.SDK_INT >= 11) {
+                            if(android.os.Build.VERSION.SDK_INT >= 11) {
                                 listView.setFastScrollAlwaysVisible(false);
                             }
                             listView.setFastScrollEnabled(false);
@@ -377,7 +381,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -411,10 +415,10 @@ public void onClick(DialogInterface dialogInterface, int i) {
             });
             builder.setNegativeButton(R.string.Cancel, null);
             showAlertDialog(builder);
-            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) editText.getLayoutParams();
+            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
             if (layoutParams != null) {
                 if (layoutParams instanceof FrameLayout.LayoutParams) {
-                    ((FrameLayout.LayoutParams) layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
+                    ((FrameLayout.LayoutParams)layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
                 }
                 layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
                 editText.setLayoutParams(layoutParams);
@@ -452,13 +456,13 @@ public void didReceivedNotification(int id, Object... args) {
                 listViewAdapter.notifyDataSetChanged();
             }
         } else if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
                 updateVisibleRows(mask);
             }
         } else if (id == NotificationCenter.encryptedChatCreated) {
             if (createSecretChat && creatingChat) {
-                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) args[0];
+                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
                 Bundle args2 = new Bundle();
                 args2.putInt("enc_id", encryptedChat.id);
                 presentFragment(new ChatActivity(args2), true);
@@ -485,8 +489,4 @@ public void setDelegate(ContactsActivityDelegate delegate) {
     public void setIgnoreUsers(HashMap<Integer, TLRPC.User> users) {
         ignoreUsers = users;
     }
-
-    public static interface ContactsActivityDelegate {
-        public abstract void didSelectContact(TLRPC.User user, String param);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 79eeadb33..65b90ae55 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -22,26 +22,32 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.R;
+import org.telegram.ui.Adapters.CountryAdapter;
+import org.telegram.ui.Adapters.CountryAdapter.Country;
+import org.telegram.ui.Adapters.CountrySearchAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.CountryAdapter;
-import org.telegram.ui.Adapters.CountryAdapter.Country;
-import org.telegram.ui.Adapters.CountrySearchAdapter;
 import org.telegram.ui.Components.SectionsListView;
 
 public class CountrySelectActivity extends BaseFragment {
 
+    public static interface CountrySelectActivityDelegate {
+        public abstract void didSelectCountry(String name);
+    }
+
     private SectionsListView listView;
     private TextView emptyTextView;
     private CountryAdapter listViewAdapter;
     private CountrySearchAdapter searchListViewAdapter;
+
     private boolean searchWas;
     private boolean searching;
+
     private CountrySelectActivityDelegate delegate;
 
     @Override
@@ -101,7 +107,7 @@ public void onTextChanged(EditText editText) {
                         searchWas = true;
                         if (listView != null) {
                             listView.setAdapter(searchListViewAdapter);
-                            if (android.os.Build.VERSION.SDK_INT >= 11) {
+                            if(android.os.Build.VERSION.SDK_INT >= 11) {
                                 listView.setFastScrollAlwaysVisible(false);
                             }
                             listView.setFastScrollEnabled(false);
@@ -216,7 +222,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -235,8 +241,4 @@ public void onResume() {
     public void setCountrySelectActivityDelegate(CountrySelectActivityDelegate delegate) {
         this.delegate = delegate;
     }
-
-    public static interface CountrySelectActivityDelegate {
-        public abstract void didSelectCountry(String name);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index f177c54c1..d7480498e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -28,19 +28,19 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
+import org.telegram.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.ui.Cells.TextDetailDocumentsCell;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -52,13 +52,43 @@
 
 public class DocumentSelectActivity extends BaseFragment {
 
-    private final static int done = 3;
+    public static abstract interface DocumentSelectActivityDelegate {
+        public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files);
+        public void startDocumentSelectActivity();
+    }
+
     private ListView listView;
     private ListAdapter listAdapter;
     private TextView selectedMessagesCountTextView;
     private TextView emptyView;
 
     private File currentDir;
+    private ArrayList<ListItem> items = new ArrayList<ListItem>();
+    private boolean receiverRegistered = false;
+    private ArrayList<HistoryEntry> history = new ArrayList<HistoryEntry>();
+    private long sizeLimit = 1024 * 1024 * 1024;
+    private DocumentSelectActivityDelegate delegate;
+    private HashMap<String, ListItem> selectedFiles = new HashMap<String, ListItem>();
+    private ArrayList<View> actionModeViews = new ArrayList<View>();
+    private boolean scrolling;
+
+    private final static int done = 3;
+
+    private class ListItem {
+        int icon;
+        String title;
+        String subtitle = "";
+        String ext = "";
+        String thumb;
+        File file;
+    }
+
+    private class HistoryEntry {
+        int scrollItem, scrollOffset;
+        File dir;
+        String title;
+    }
+
     private BroadcastReceiver receiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context arg0, Intent intent) {
@@ -82,14 +112,6 @@ public void run() {
             }
         }
     };
-    private ArrayList<ListItem> items = new ArrayList<ListItem>();
-    private boolean receiverRegistered = false;
-    private ArrayList<HistoryEntry> history = new ArrayList<HistoryEntry>();
-    private long sizeLimit = 1024 * 1024 * 1024;
-    private DocumentSelectActivityDelegate delegate;
-    private HashMap<String, ListItem> selectedFiles = new HashMap<String, ListItem>();
-    private ArrayList<View> actionModeViews = new ArrayList<View>();
-    private boolean scrolling;
 
     @Override
     public void onFragmentDestroy() {
@@ -173,7 +195,7 @@ public boolean onTouch(View v, MotionEvent event) {
                 }
             });
             actionMode.addView(selectedMessagesCountTextView);
-            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) selectedMessagesCountTextView.getLayoutParams();
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)selectedMessagesCountTextView.getLayoutParams();
             layoutParams.weight = 1;
             layoutParams.width = 0;
             layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
@@ -183,14 +205,14 @@ public boolean onTouch(View v, MotionEvent event) {
 
             fragmentView = inflater.inflate(R.layout.document_select_layout, container, false);
             listAdapter = new ListAdapter(getParentActivity());
-            emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
             emptyView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
-            listView = (ListView) fragmentView.findViewById(R.id.listView);
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
             listView.setEmptyView(emptyView);
             listView.setAdapter(listAdapter);
 
@@ -327,7 +349,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
 
             listRoots();
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -391,7 +413,7 @@ private boolean listFiles(File dir) {
         File[] files = null;
         try {
             files = dir.listFiles();
-        } catch (Exception e) {
+        } catch(Exception e) {
             showErrorBox(e.getLocalizedMessage());
             return false;
         }
@@ -490,7 +512,7 @@ private void listRoots() {
                 }
                 aliases.get(info[0]).add(info[1]);
                 if (info[1].equals(extStorage)) {
-                    extDevice = info[0];
+                    extDevice=info[0];
                 }
                 result.add(info[1]);
             }
@@ -545,35 +567,14 @@ private void listRoots() {
 
     private String getRootSubtitle(String path) {
         StatFs stat = new StatFs(path);
-        long total = (long) stat.getBlockCount() * (long) stat.getBlockSize();
-        long free = (long) stat.getAvailableBlocks() * (long) stat.getBlockSize();
+        long total = (long)stat.getBlockCount() * (long)stat.getBlockSize();
+        long free = (long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
         if (total == 0) {
             return "";
         }
         return LocaleController.formatString("FreeOfTotal", R.string.FreeOfTotal, Utilities.formatFileSize(free), Utilities.formatFileSize(total));
     }
 
-    public static abstract interface DocumentSelectActivityDelegate {
-        public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files);
-
-        public void startDocumentSelectActivity();
-    }
-
-    private class ListItem {
-        int icon;
-        String title;
-        String subtitle = "";
-        String ext = "";
-        String thumb;
-        File file;
-    }
-
-    private class HistoryEntry {
-        int scrollItem, scrollOffset;
-        File dir;
-        String title;
-    }
-
     private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 9e2286bec..d969ab6ac 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -38,21 +38,21 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
+import org.telegram.ui.Adapters.ContactsAdapter;
+import org.telegram.ui.Adapters.ContactsSearchAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.ContactsAdapter;
-import org.telegram.ui.Adapters.ContactsSearchAdapter;
 import org.telegram.ui.Cells.UserCell;
 import org.telegram.ui.Components.SectionsListView;
 
@@ -61,13 +61,43 @@
 
 public class GroupCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    private final static int done_button = 1;
+    public static interface GroupCreateActivityDelegate {
+        public abstract void didSelectUsers(ArrayList<Integer> ids);
+    }
+
+    private class XImageSpan extends ImageSpan {
+        public int uid;
+
+        public XImageSpan(Drawable d, int verticalAlignment) {
+            super(d, verticalAlignment);
+        }
+
+        @Override
+        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
+            if (fm == null) {
+                fm = new Paint.FontMetricsInt();
+            }
+
+            int sz = super.getSize(paint, text, start, end, fm);
+            int offset = AndroidUtilities.dp(6);
+            int w = (fm.bottom - fm.top) / 2;
+            fm.top = -w - offset;
+            fm.bottom = w - offset;
+            fm.ascent = -w - offset;
+            fm.leading = 0;
+            fm.descent = w - offset;
+            return sz;
+        }
+    }
+
     private ContactsAdapter listViewAdapter;
     private TextView emptyTextView;
     private EditText userSelectEditText;
     private SectionsListView listView;
     private ContactsSearchAdapter searchListViewAdapter;
+
     private GroupCreateActivityDelegate delegate;
+
     private int beforeChangeIndex;
     private int maxCount = 200;
     private boolean ignoreChange = false;
@@ -79,6 +109,9 @@
     private CharSequence changeString;
     private HashMap<Integer, XImageSpan> selectedContacts = new HashMap<Integer, XImageSpan>();
     private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
+
+    private final static int done_button = 1;
+
     public GroupCreateActivity() {
         super();
     }
@@ -260,7 +293,7 @@ public void afterTextChanged(Editable editable) {
                                 if (listView != null) {
                                     listView.setAdapter(searchListViewAdapter);
                                     searchListViewAdapter.notifyDataSetChanged();
-                                    if (android.os.Build.VERSION.SDK_INT >= 11) {
+                                    if(android.os.Build.VERSION.SDK_INT >= 11) {
                                         listView.setFastScrollAlwaysVisible(false);
                                     }
                                     listView.setFastScrollEnabled(false);
@@ -436,7 +469,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -451,7 +484,7 @@ public void didReceivedNotification(int id, Object... args) {
                 listViewAdapter.notifyDataSetChanged();
             }
         } else if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
                 updateVisibleRows(mask);
             }
@@ -484,7 +517,7 @@ public void setDelegate(GroupCreateActivityDelegate delegate) {
     private XImageSpan createAndPutChipForUser(TLRPC.User user) {
         LayoutInflater lf = (LayoutInflater) ApplicationLoader.applicationContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
         View textView = lf.inflate(R.layout.group_create_bubble, null);
-        TextView text = (TextView) textView.findViewById(R.id.bubble_text_view);
+        TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
         String name = ContactsController.formatName(user.first_name, user.last_name);
         if (name.length() == 0 && user.phone != null && user.phone.length() != 0) {
             name = PhoneFormat.getInstance().format("+" + user.phone);
@@ -518,33 +551,4 @@ private XImageSpan createAndPutChipForUser(TLRPC.User user) {
         userSelectEditText.setSelection(ssb.length());
         return span;
     }
-
-    public static interface GroupCreateActivityDelegate {
-        public abstract void didSelectUsers(ArrayList<Integer> ids);
-    }
-
-    private class XImageSpan extends ImageSpan {
-        public int uid;
-
-        public XImageSpan(Drawable d, int verticalAlignment) {
-            super(d, verticalAlignment);
-        }
-
-        @Override
-        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
-            if (fm == null) {
-                fm = new Paint.FontMetricsInt();
-            }
-
-            int sz = super.getSize(paint, text, start, end, fm);
-            int offset = AndroidUtilities.dp(6);
-            int w = (fm.bottom - fm.top) / 2;
-            fm.top = -w - offset;
-            fm.bottom = w - offset;
-            fm.ascent = -w - offset;
-            fm.leading = 0;
-            fm.descent = w - offset;
-            return sz;
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index e59e0d744..073f43be6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -28,24 +28,24 @@
 import android.widget.LinearLayout;
 import android.widget.ListView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.ConnectionsManager;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.GreySectionCell;
 import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.AvatarUpdater;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.FrameLayoutFixed;
 
 import java.util.ArrayList;
@@ -53,7 +53,6 @@
 
 public class GroupCreateFinalActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, AvatarUpdater.AvatarUpdaterDelegate {
 
-    private final static int done_button = 1;
     private ListAdapter listAdapter;
     private ListView listView;
     private EditText nameTextView;
@@ -69,6 +68,8 @@
     private String nameToSet = null;
     private boolean isBroadcast = false;
 
+    private final static int done_button = 1;
+
     public GroupCreateFinalActivity(Bundle args) {
         super(args);
         isBroadcast = args.getBoolean("broadcast", false);
@@ -277,7 +278,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             frameLayout.addView(nameTextView);
             layoutParams1 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
             layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
-            layoutParams1.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams1.height =  FrameLayout.LayoutParams.WRAP_CONTENT;
             layoutParams1.leftMargin = LocaleController.isRTL ? AndroidUtilities.dp(16) : AndroidUtilities.dp(96);
             layoutParams1.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(96) : AndroidUtilities.dp(16);
             layoutParams1.gravity = Gravity.CENTER_VERTICAL;
@@ -317,7 +318,7 @@ public void afterTextChanged(Editable s) {
             layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
             listView.setLayoutParams(layoutParams);
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -377,7 +378,7 @@ public void restoreSelfArgs(Bundle args) {
     @Override
     public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
                 updateVisibleRows(mask);
             }
@@ -402,7 +403,7 @@ public void run() {
                         }
                     }
                     Bundle args2 = new Bundle();
-                    args2.putInt("chat_id", (Integer) args[0]);
+                    args2.putInt("chat_id", (Integer)args[0]);
                     presentFragment(new ChatActivity(args2), true);
                 }
             });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
index b8ca0dd5b..05101c5fa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
@@ -22,11 +22,11 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessagesController;
+import org.telegram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.IdenticonDrawable;
@@ -62,7 +62,7 @@ public void onItemClick(int id) {
 
             fragmentView = inflater.inflate(R.layout.identicon_layout, container, false);
             ImageView identiconView = (ImageView) fragmentView.findViewById(R.id.identicon_view);
-            TextView textView = (TextView) fragmentView.findViewById(R.id.identicon_text);
+            TextView textView = (TextView)fragmentView.findViewById(R.id.identicon_text);
             TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(chat_id);
             if (encryptedChat != null) {
                 IdenticonDrawable drawable = new IdenticonDrawable();
@@ -79,7 +79,7 @@ public boolean onTouch(View v, MotionEvent event) {
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -110,7 +110,7 @@ public boolean onPreDraw() {
                 if (getParentActivity() == null || fragmentView == null) {
                     return true;
                 }
-                LinearLayout layout = (LinearLayout) fragmentView;
+                LinearLayout layout = (LinearLayout)fragmentView;
                 WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
                 int rotation = manager.getDefaultDisplay().getRotation();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index c4165351c..1b2b0acd8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -25,9 +25,9 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
+import org.telegram.R;
 import org.telegram.messenger.Utilities;
 
 public class IntroActivity extends Activity {
@@ -42,7 +42,6 @@
     private int[] titles;
     private int[] messages;
 
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         setTheme(R.style.Theme_TMessages);
@@ -57,7 +56,7 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         if (LocaleController.isRTL) {
-            icons = new int[]{
+            icons = new int[] {
                     R.drawable.intro7,
                     R.drawable.intro6,
                     R.drawable.intro5,
@@ -66,7 +65,7 @@ protected void onCreate(Bundle savedInstanceState) {
                     R.drawable.intro2,
                     R.drawable.intro1
             };
-            titles = new int[]{
+            titles = new int[] {
                     R.string.Page7Title,
                     R.string.Page6Title,
                     R.string.Page5Title,
@@ -75,7 +74,7 @@ protected void onCreate(Bundle savedInstanceState) {
                     R.string.Page2Title,
                     R.string.Page1Title
             };
-            messages = new int[]{
+            messages = new int[] {
                     R.string.Page7Message,
                     R.string.Page6Message,
                     R.string.Page5Message,
@@ -85,7 +84,7 @@ protected void onCreate(Bundle savedInstanceState) {
                     R.string.Page1Message
             };
         } else {
-            icons = new int[]{
+            icons = new int[] {
                     R.drawable.intro1,
                     R.drawable.intro2,
                     R.drawable.intro3,
@@ -94,7 +93,7 @@ protected void onCreate(Bundle savedInstanceState) {
                     R.drawable.intro6,
                     R.drawable.intro7
             };
-            titles = new int[]{
+            titles = new int[] {
                     R.string.Page1Title,
                     R.string.Page2Title,
                     R.string.Page3Title,
@@ -103,7 +102,7 @@ protected void onCreate(Bundle savedInstanceState) {
                     R.string.Page6Title,
                     R.string.Page7Title
             };
-            messages = new int[]{
+            messages = new int[] {
                     R.string.Page1Message,
                     R.string.Page2Message,
                     R.string.Page3Message,
@@ -113,12 +112,12 @@ protected void onCreate(Bundle savedInstanceState) {
                     R.string.Page7Message
             };
         }
-        viewPager = (ViewPager) findViewById(R.id.intro_view_pager);
+        viewPager = (ViewPager)findViewById(R.id.intro_view_pager);
         TextView startMessagingButton = (TextView) findViewById(R.id.start_messaging_button);
         startMessagingButton.setText(LocaleController.getString("StartMessaging", R.string.StartMessaging));
-        topImage1 = (ImageView) findViewById(R.id.icon_image1);
-        topImage2 = (ImageView) findViewById(R.id.icon_image2);
-        bottomPages = (ViewGroup) findViewById(R.id.bottom_pages);
+        topImage1 = (ImageView)findViewById(R.id.icon_image1);
+        topImage2 = (ImageView)findViewById(R.id.icon_image2);
+        bottomPages = (ViewGroup)findViewById(R.id.bottom_pages);
         topImage2.setVisibility(View.GONE);
         viewPager.setAdapter(new IntroAdapter());
         viewPager.setPageMargin(0);
@@ -242,8 +241,8 @@ public int getCount() {
         @Override
         public Object instantiateItem(ViewGroup container, int position) {
             View view = View.inflate(container.getContext(), R.layout.intro_view_layout, null);
-            TextView headerTextView = (TextView) view.findViewById(R.id.header_text);
-            TextView messageTextView = (TextView) view.findViewById(R.id.message_text);
+            TextView headerTextView = (TextView)view.findViewById(R.id.header_text);
+            TextView messageTextView = (TextView)view.findViewById(R.id.message_text);
             container.addView(view, 0);
 
             headerTextView.setText(getString(titles[position]));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index 435d53302..bc7bdbcfa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -24,31 +24,32 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
+import org.telegram.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextSettingsCell;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextSettingsCell;
 
 import java.util.ArrayList;
 import java.util.Timer;
 import java.util.TimerTask;
 
 public class LanguageSelectActivity extends BaseFragment {
-    public ArrayList<LocaleController.LocaleInfo> searchResult;
     private BaseFragmentAdapter listAdapter;
     private ListView listView;
     private boolean searchWas;
     private boolean searching;
     private BaseFragmentAdapter searchListViewAdapter;
     private TextView emptyTextView;
+
     private Timer searchTimer;
+    public ArrayList<LocaleController.LocaleInfo> searchResult;
 
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
@@ -229,7 +230,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
index 5de6251c5..a38ebbc10 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
@@ -27,7 +27,6 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
@@ -36,6 +35,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
@@ -51,12 +51,13 @@
 
 public class LastSeenActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    private final static int done_button = 1;
     private ListAdapter listAdapter;
     private View doneButton;
+
     private int currentType = 0;
     private ArrayList<Integer> currentPlus;
     private ArrayList<Integer> currentMinus;
+
     private int lastSeenSectionRow;
     private int everybodyRow;
     private int myContactsRow;
@@ -68,6 +69,20 @@
     private int shareDetailRow;
     private int rowCount;
 
+    private final static int done_button = 1;
+
+    private static class LinkMovementMethodMy extends LinkMovementMethod {
+        @Override
+        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
+            try {
+                return super.onTouchEvent(widget, buffer, event);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            return false;
+        }
+    }
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
@@ -383,18 +398,6 @@ public void onResume() {
         }
     }
 
-    private static class LinkMovementMethodMy extends LinkMovementMethod {
-        @Override
-        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
-            try {
-                return super.onTouchEvent(widget, buffer, event);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            return false;
-        }
-    }
-
     private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
index 1474e48ce..72d4b0d53 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
@@ -24,10 +24,10 @@
 import android.widget.TextView;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -40,7 +40,10 @@
 
 public class LastSeenUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    private final static int block_user = 1;
+    public static interface LastSeenUsersActivityDelegate {
+        public abstract void didUpdatedUserList(ArrayList<Integer> ids, boolean added);
+    }
+
     private ListView listView;
     private ListAdapter listViewAdapter;
     private int selectedUserId;
@@ -50,6 +53,8 @@
 
     private LastSeenUsersActivityDelegate delegate;
 
+    private final static int block_user = 1;
+
     public LastSeenUsersActivity(ArrayList<Integer> users, boolean always) {
         super();
         uidArray = users;
@@ -168,12 +173,12 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     selectedUserId = uidArray.get(i);
 
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    CharSequence[] items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
+                    CharSequence[] items = new CharSequence[] {LocaleController.getString("Delete", R.string.Delete)};
                     builder.setItems(items, new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialogInterface, int i) {
                             if (i == 0) {
-                                uidArray.remove((Integer) selectedUserId);
+                                uidArray.remove((Integer)selectedUserId);
                                 listViewAdapter.notifyDataSetChanged();
                                 if (delegate != null) {
                                     delegate.didUpdatedUserList(uidArray, false);
@@ -186,7 +191,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -197,7 +202,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 updateVisibleRows(mask);
             }
@@ -229,10 +234,6 @@ public void onResume() {
         }
     }
 
-    public static interface LastSeenUsersActivityDelegate {
-        public abstract void didUpdatedUserList(ArrayList<Integer> ids, boolean added);
-    }
-
     private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
@@ -281,7 +282,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     view = new UserCell(mContext, 1);
                 }
                 TLRPC.User user = MessagesController.getInstance().getUser(uidArray.get(i));
-                ((UserCell) view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
+                ((UserCell)view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
             } else if (type == 1) {
                 if (view == null) {
                     view = new TextInfoCell(mContext);
@@ -293,7 +294,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         @Override
         public int getItemViewType(int i) {
-            if (i == uidArray.size()) {
+            if(i == uidArray.size()) {
                 return 1;
             }
             return 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index a4f68ca65..a7ff66a3e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -38,27 +38,27 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.android.SendMessagesHelper;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
-import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 
 import java.io.BufferedReader;
 import java.io.InputStream;
@@ -67,9 +67,6 @@
 import java.util.Map;
 
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
-    private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<BaseFragment>();
-    private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<BaseFragment>();
-    private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<BaseFragment>();
     private boolean finished;
     private String videoPath;
     private String sendingText;
@@ -80,6 +77,10 @@
     private ArrayList<String> documentsOriginalPathsArray;
     private ArrayList<TLRPC.User> contactsToSend;
     private int currentConnectionState;
+    private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<BaseFragment>();
+    private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<BaseFragment>();
+    private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<BaseFragment>();
+
     private ActionBarLayout actionBarLayout;
     private ActionBarLayout layersActionBarLayout;
     private ActionBarLayout rightActionBarLayout;
@@ -158,7 +159,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
             rightActionBarLayout = new ActionBarLayout(this);
             launchLayout.addView(rightActionBarLayout);
-            relativeLayoutParams = (RelativeLayout.LayoutParams) rightActionBarLayout.getLayoutParams();
+            relativeLayoutParams = (RelativeLayout.LayoutParams)rightActionBarLayout.getLayoutParams();
             relativeLayoutParams.width = AndroidUtilities.dp(320);
             relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
             rightActionBarLayout.setLayoutParams(relativeLayoutParams);
@@ -222,7 +223,7 @@ public void onClick(View v) {
             layersActionBarLayout.setUseAlphaAnimations(true);
             layersActionBarLayout.setBackgroundResource(R.drawable.boxshadow);
             launchLayout.addView(layersActionBarLayout);
-            relativeLayoutParams = (RelativeLayout.LayoutParams) layersActionBarLayout.getLayoutParams();
+            relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
             relativeLayoutParams.width = AndroidUtilities.dp(498);
             relativeLayoutParams.height = AndroidUtilities.dp(528);
             layersActionBarLayout.setLayoutParams(relativeLayoutParams);
@@ -238,7 +239,7 @@ public void onClick(View v) {
         listView.setAdapter(drawerLayoutAdapter = new DrawerLayoutAdapter(this));
         drawerLayoutContainer.setDrawerLayout(listView);
         listView.setBackgroundColor(0xffffffff);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)listView.getLayoutParams();
         Point screenSize = AndroidUtilities.getRealScreenSize();
         layoutParams.width = AndroidUtilities.isTablet() ? AndroidUtilities.dp(320) : Math.min(screenSize.x, screenSize.y) - AndroidUtilities.dp(56);
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
@@ -792,8 +793,8 @@ protected void onNewIntent(Intent intent) {
     @Override
     public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
         if (dialog_id != 0) {
-            int lower_part = (int) dialog_id;
-            int high_id = (int) (dialog_id >> 32);
+            int lower_part = (int)dialog_id;
+            int high_id = (int)(dialog_id >> 32);
 
             Bundle args = new Bundle();
             args.putBoolean("scrollToTopOnResume", true);
@@ -816,7 +817,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
             ChatActivity fragment = new ChatActivity(args);
 
             if (videoPath != null) {
-                if (android.os.Build.VERSION.SDK_INT >= 16) {
+                if(android.os.Build.VERSION.SDK_INT >= 16) {
                     if (AndroidUtilities.isTablet()) {
                         actionBarLayout.presentFragment(fragment, false, true, true);
                     }
@@ -884,7 +885,7 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
     public void needLayout() {
         if (AndroidUtilities.isTablet()) {
 
-            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) layersActionBarLayout.getLayoutParams();
+            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
             relativeLayoutParams.leftMargin = (AndroidUtilities.displaySize.x - relativeLayoutParams.width) / 2;
             int y = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
             relativeLayoutParams.topMargin = y + (AndroidUtilities.displaySize.y - relativeLayoutParams.height - y) / 2;
@@ -1058,7 +1059,7 @@ public void didReceivedNotification(int id, Object... args) {
                 onFinish();
             }
         } else if (id == NotificationCenter.didUpdatedConnectionState) {
-            int state = (Integer) args[0];
+            int state = (Integer)args[0];
             if (currentConnectionState != state) {
                 FileLog.e("tmessages", "switch to state " + state);
                 currentConnectionState = state;
@@ -1217,7 +1218,7 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
         if (AndroidUtilities.isTablet()) {
             drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE);
             if (fragment instanceof MessagesActivity) {
-                MessagesActivity messagesActivity = (MessagesActivity) fragment;
+                MessagesActivity messagesActivity = (MessagesActivity)fragment;
                 if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
@@ -1302,7 +1303,7 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
         if (AndroidUtilities.isTablet()) {
             drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE);
             if (fragment instanceof MessagesActivity) {
-                MessagesActivity messagesActivity = (MessagesActivity) fragment;
+                MessagesActivity messagesActivity = (MessagesActivity)fragment;
                 if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.addFragmentToStack(fragment);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index ed7172ac7..be531d1d1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -20,36 +20,33 @@
 import com.google.android.gms.maps.CameraUpdateFactory;
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.MapView;
+
 import com.google.android.gms.maps.MapsInitializer;
 import com.google.android.gms.maps.model.BitmapDescriptorFactory;
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.Marker;
 import com.google.android.gms.maps.model.MarkerOptions;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
 import org.telegram.android.LocaleController;
+import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
+import org.telegram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.util.List;
 
 public class LocationActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    private final static int map_to_my_location = 1;
-    private final static int map_list_menu_map = 2;
-    private final static int map_list_menu_satellite = 3;
-    private final static int map_list_menu_hybrid = 4;
     private GoogleMap googleMap;
     private TextView distanceTextView;
     private Marker userMarker;
@@ -63,6 +60,15 @@
     private MapView mapView;
     private LocationActivityDelegate delegate;
 
+    private final static int map_to_my_location = 1;
+    private final static int map_list_menu_map = 2;
+    private final static int map_list_menu_satellite = 3;
+    private final static int map_list_menu_hybrid = 4;
+
+    public static interface LocationActivityDelegate {
+        public abstract void didSelectLocation(double latitude, double longitude);
+    }
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
@@ -138,13 +144,13 @@ public void onItemClick(int id) {
                 fragmentView = inflater.inflate(R.layout.location_attach_layout, container, false);
             }
 
-            avatarImageView = (BackupImageView) fragmentView.findViewById(R.id.location_avatar_view);
+            avatarImageView = (BackupImageView)fragmentView.findViewById(R.id.location_avatar_view);
             if (avatarImageView != null) {
                 avatarImageView.processDetach = false;
                 avatarImageView.imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
             }
-            nameTextView = (TextView) fragmentView.findViewById(R.id.location_name_label);
-            distanceTextView = (TextView) fragmentView.findViewById(R.id.location_distance_label);
+            nameTextView = (TextView)fragmentView.findViewById(R.id.location_name_label);
+            distanceTextView = (TextView)fragmentView.findViewById(R.id.location_distance_label);
             View bottomView = fragmentView.findViewById(R.id.location_bottom_view);
             TextView sendButton = (TextView) fragmentView.findViewById(R.id.location_send_button);
             if (sendButton != null) {
@@ -152,7 +158,7 @@ public void onItemClick(int id) {
                 sendButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
             }
 
-            mapView = (MapView) fragmentView.findViewById(R.id.map_view);
+            mapView = (MapView)fragmentView.findViewById(R.id.map_view);
             mapView.onCreate(null);
             try {
                 MapsInitializer.initialize(getParentActivity());
@@ -238,7 +244,7 @@ public void onClick(View view) {
                 positionMarker(myLocation);
             }
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -286,7 +292,7 @@ private void positionMarker(Location location) {
             if (userLocation != null && distanceTextView != null) {
                 float distance = location.distanceTo(userLocation);
                 if (distance < 1000) {
-                    distanceTextView.setText(String.format("%d %s", (int) (distance), LocaleController.getString("MetersAway", R.string.MetersAway)));
+                    distanceTextView.setText(String.format("%d %s", (int)(distance), LocaleController.getString("MetersAway", R.string.MetersAway)));
                 } else {
                     distanceTextView.setText(String.format("%.2f %s", distance / 1000.0f, LocaleController.getString("KMetersAway", R.string.KMetersAway)));
                 }
@@ -315,7 +321,7 @@ public void setMessageObject(MessageObject message) {
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 updateUserData();
             }
@@ -355,8 +361,4 @@ public void onLowMemory() {
     public void setDelegate(LocationActivityDelegate delegate) {
         this.delegate = delegate;
     }
-
-    public static interface LocationActivityDelegate {
-        public abstract void didSelectLocation(double latitude, double longitude);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index f70d91b17..7092cb61e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -36,15 +36,22 @@
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.view.inputmethod.EditorInfo;
 import android.widget.AdapterView;
+import android.widget.Button;
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
 
+import com.spotify.sdk.android.authentication.AuthenticationClient;
+import com.spotify.sdk.android.authentication.AuthenticationRequest;
+import com.spotify.sdk.android.authentication.AuthenticationResponse;
+
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
@@ -52,8 +59,6 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
@@ -78,12 +83,11 @@
 
 public class LoginActivity extends BaseFragment {
 
+    private final static int done_button = 1;
     private int currentViewNum = 0;
-    private SlideView[] views = new SlideView[3];
+    private SlideView[] views = new SlideView[4];
     private ProgressDialog progressDialog;
 
-    private final static int done_button = 1;
-
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
@@ -131,19 +135,31 @@ public void onItemClick(int id) {
             layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
             frameLayout.setLayoutParams(layoutParams);
 
-            views[1] = new PhoneView(getParentActivity());
-            views[1].setVisibility(View.VISIBLE);
-            frameLayout.addView(views[1]);
-            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) views[1].getLayoutParams();
+            views[0] = new PhoneView(getParentActivity());
+            views[0].setVisibility(View.VISIBLE);
+            frameLayout.addView(views[0]);
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) views[0].getLayoutParams();
             layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
             layoutParams1.height = FrameLayout.LayoutParams.WRAP_CONTENT;
             layoutParams1.leftMargin = AndroidUtilities.dp(16);
             layoutParams1.rightMargin = AndroidUtilities.dp(16);
             layoutParams1.topMargin = AndroidUtilities.dp(30);
             layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
+            views[0].setLayoutParams(layoutParams1);
+
+            views[1] = new LoginActivitySmsView(getParentActivity());
+            views[1].setVisibility(View.GONE);
+            frameLayout.addView(views[1]);
+            layoutParams1 = (FrameLayout.LayoutParams) views[1].getLayoutParams();
+            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.height = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams1.leftMargin = AndroidUtilities.dp(16);
+            layoutParams1.rightMargin = AndroidUtilities.dp(16);
+            layoutParams1.topMargin = AndroidUtilities.dp(30);
+            layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
             views[1].setLayoutParams(layoutParams1);
 
-            views[2] = new LoginActivitySmsView(getParentActivity());
+            views[2] = new RegisterView(getParentActivity());
             views[2].setVisibility(View.GONE);
             frameLayout.addView(views[2]);
             layoutParams1 = (FrameLayout.LayoutParams) views[2].getLayoutParams();
@@ -155,7 +171,7 @@ public void onItemClick(int id) {
             layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
             views[2].setLayoutParams(layoutParams1);
 
-            views[3] = new RegisterView(getParentActivity());
+            views[3] = new SpotifyLoginView(getParentActivity());
             views[3].setVisibility(View.GONE);
             frameLayout.addView(views[3]);
             layoutParams1 = (FrameLayout.LayoutParams) views[3].getLayoutParams();
@@ -167,24 +183,12 @@ public void onItemClick(int id) {
             layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
             views[3].setLayoutParams(layoutParams1);
 
-            views[0] = new SpotifyLoginView(getParentActivity());
-            views[0].setVisibility(View.GONE);
-            frameLayout.addView(views[0]);
-            layoutParams1 = (FrameLayout.LayoutParams) views[0].getLayoutParams();
-            layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
-            layoutParams1.height = FrameLayout.LayoutParams.MATCH_PARENT;
-            layoutParams1.leftMargin = AndroidUtilities.dp(16);
-            layoutParams1.rightMargin = AndroidUtilities.dp(16);
-            layoutParams1.topMargin = AndroidUtilities.dp(30);
-            layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
-            views[0].setLayoutParams(layoutParams1);
-
             try {
                 if (views[0] == null || views[1] == null || views[2] == null || views[3] == null) {
                     FrameLayout parent = (FrameLayout) ((ScrollView) fragmentView).getChildAt(0);
                     for (int a = 0; a < views.length; a++) {
                         if (views[a] == null) {
-                            views[a] = (SlideView)parent.getChildAt(a);
+                            views[a] = (SlideView) parent.getChildAt(a);
                         }
                     }
                 }
@@ -198,17 +202,20 @@ public void onItemClick(int id) {
             if (savedInstanceState != null) {
                 currentViewNum = savedInstanceState.getInt("currentViewNum", 0);
             }
+
             for (int a = 0; a < views.length; a++) {
                 SlideView v = views[a];
                 if (v != null) {
                     if (savedInstanceState != null) {
                         v.restoreStateParams(savedInstanceState);
                     }
+
                     v.setVisibility(currentViewNum == a ? View.VISIBLE : View.GONE);
                 }
             }
         } else {
-            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -291,7 +298,7 @@ private void putBundleToEditor(Bundle bundle, SharedPreferences.Editor editor, S
                     editor.putInt(key, (Integer) obj);
                 }
             } else if (obj instanceof Bundle) {
-                putBundleToEditor((Bundle)obj, editor, key);
+                putBundleToEditor((Bundle) obj, editor, key);
             }
         }
     }
@@ -347,7 +354,7 @@ public void needHideProgress() {
     }
 
     public void setPage(int page, boolean animated, Bundle params, boolean back) {
-        if(android.os.Build.VERSION.SDK_INT > 13) {
+        if (android.os.Build.VERSION.SDK_INT > 13) {
             final SlideView outView = views[currentViewNum];
             final SlideView newView = views[page];
             currentViewNum = page;
@@ -623,7 +630,7 @@ public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                             int toDelete = 0;
                             for (int a = start; a >= 0; a--) {
                                 substr = str.substring(a, a + 1);
-                                if(phoneChars.contains(substr)) {
+                                if (phoneChars.contains(substr)) {
                                     break;
                                 }
                                 toDelete++;
@@ -707,7 +714,7 @@ public int compare(String lhs, String rhs) {
             String country = null;
 
             try {
-                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
                 if (telephonyManager != null) {
                     country = telephonyManager.getSimCountryIso().toUpperCase();
                 }
@@ -834,7 +841,7 @@ public void run(final TLObject response, final TLRPC.TL_error error) {
                         public void run() {
                             nextPressed = false;
                             if (error == null) {
-                                final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode)response;
+                                final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode) response;
                                 params.putString("phoneHash", res.phone_code_hash);
                                 params.putInt("calltime", res.send_call_timeout * 1000);
                                 if (res.phone_registered) {
@@ -904,6 +911,7 @@ public void restoreStateParams(Bundle bundle) {
 
     public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
 
+        private final Object timerSync = new Object();
         private String phoneHash;
         private String requestPhone;
         private String registered;
@@ -912,10 +920,8 @@ public void restoreStateParams(Bundle bundle) {
         private TextView timeText;
         private TextView problemText;
         private Bundle currentParams;
-
         private Timer timeTimer;
         private Timer codeTimer;
-        private final Object timerSync = new Object();
         private volatile int time = 60000;
         private volatile int codeTime = 15000;
         private double lastCurrentTime;
@@ -1136,7 +1142,7 @@ public void run() {
 
         private void destroyCodeTimer() {
             try {
-                synchronized(timerSync) {
+                synchronized (timerSync) {
                     if (codeTimer != null) {
                         codeTimer.cancel();
                         codeTimer = null;
@@ -1195,7 +1201,7 @@ public void run() {
 
         private void destroyTimer() {
             try {
-                synchronized(timerSync) {
+                synchronized (timerSync) {
                     if (timeTimer != null) {
                         timeTimer.cancel();
                         timeTimer = null;
@@ -1230,7 +1236,7 @@ public void run() {
                             needHideProgress();
                             nextPressed = false;
                             if (error == null) {
-                                TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
+                                TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
                                 destroyTimer();
                                 destroyCodeTimer();
                                 UserConfig.clearConfig();
@@ -1669,7 +1675,11 @@ public void onDestroyActivity() {
 
         @Override
         public void onNextPressed() {
-            super.onNextPressed();
+            if (nextPressed) {
+                return;
+            }
+            nextPressed = true;
+            needFinishActivity();
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 55e283db0..6580d31c0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -24,19 +24,19 @@
 import android.widget.GridView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -69,7 +69,7 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
         dialog_id = getArguments().getLong("dialog_id", 0);
-        if (((int) dialog_id) == 0) {
+        if (((int)dialog_id) == 0) {
             max_id = Integer.MIN_VALUE;
         }
         loading = true;
@@ -108,7 +108,7 @@ public void onItemClick(int id) {
 
             fragmentView = inflater.inflate(R.layout.media_layout, container, false);
 
-            emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
             emptyView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
             emptyView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
@@ -116,7 +116,7 @@ public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
-            listView = (GridView) fragmentView.findViewById(R.id.media_grid);
+            listView = (GridView)fragmentView.findViewById(R.id.media_grid);
             progressView = fragmentView.findViewById(R.id.progressLayout);
 
             listView.setAdapter(listAdapter = new ListAdapter(getParentActivity()));
@@ -153,7 +153,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -165,15 +165,15 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.mediaDidLoaded) {
-            long uid = (Long) args[0];
-            int guid = (Integer) args[4];
+            long uid = (Long)args[0];
+            int guid = (Integer)args[4];
             if (uid == dialog_id && guid == classGuid) {
                 loading = false;
-                totalCount = (Integer) args[1];
+                totalCount = (Integer)args[1];
                 @SuppressWarnings("uchecked")
-                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[2];
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[2];
                 boolean added = false;
-                boolean enc = ((int) dialog_id) == 0;
+                boolean enc = ((int)dialog_id) == 0;
                 for (MessageObject message : arr) {
                     if (!messagesDict.containsKey(message.messageOwner.id)) {
                         if (!enc) {
@@ -191,7 +191,7 @@ public void didReceivedNotification(int id, Object... args) {
                 if (!added) {
                     endReached = true;
                 }
-                cacheEndReached = !(Boolean) args[3];
+                cacheEndReached = !(Boolean)args[3];
                 if (progressView != null) {
                     progressView.setVisibility(View.GONE);
                 }
@@ -206,7 +206,7 @@ public void didReceivedNotification(int id, Object... args) {
             }
         } else if (id == NotificationCenter.messagesDeleted) {
             @SuppressWarnings("unchecked")
-            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
             boolean updated = false;
             for (Integer ids : markAsDeletedMessages) {
                 MessageObject obj = messagesDict.get(ids);
@@ -221,11 +221,11 @@ public void didReceivedNotification(int id, Object... args) {
                 listAdapter.notifyDataSetChanged();
             }
         } else if (id == NotificationCenter.didReceivedNewMessages) {
-            long uid = (Long) args[0];
+            long uid = (Long)args[0];
             if (uid == dialog_id) {
                 boolean markAsRead = false;
                 @SuppressWarnings("unchecked")
-                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[1];
 
                 for (MessageObject obj : arr) {
                     if (obj.messageOwner.media == null || !(obj.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) && !(obj.messageOwner.media instanceof TLRPC.TL_messageMediaVideo)) {
@@ -234,7 +234,7 @@ public void didReceivedNotification(int id, Object... args) {
                     if (messagesDict.containsKey(obj.messageOwner.id)) {
                         continue;
                     }
-                    boolean enc = ((int) dialog_id) == 0;
+                    boolean enc = ((int)dialog_id) == 0;
                     if (!enc) {
                         if (obj.messageOwner.id > 0) {
                             max_id = Math.min(obj.messageOwner.id, max_id);
@@ -250,10 +250,10 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.messageReceivedByServer) {
-            Integer msgId = (Integer) args[0];
+            Integer msgId = (Integer)args[0];
             MessageObject obj = messagesDict.get(msgId);
             if (obj != null) {
-                Integer newMsgId = (Integer) args[1];
+                Integer newMsgId = (Integer)args[1];
                 messagesDict.remove(msgId);
                 messagesDict.put(newMsgId, obj);
                 obj.messageOwner.id = newMsgId;
@@ -285,9 +285,9 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
 
         for (int a = 0; a < count; a++) {
             View view = listView.getChildAt(a);
-            BackupImageView imageView = (BackupImageView) view.findViewById(R.id.media_photo_image);
+            BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
             if (imageView != null) {
-                int num = (Integer) imageView.getTag();
+                int num = (Integer)imageView.getTag();
                 if (num < 0 || num >= messages.size()) {
                     continue;
                 }
@@ -309,34 +309,25 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
     }
 
     @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-    }
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
 
     @Override
-    public void willHidePhotoViewer() {
-    }
+    public void willHidePhotoViewer() { }
 
     @Override
-    public boolean isPhotoChecked(int index) {
-        return false;
-    }
+    public boolean isPhotoChecked(int index) { return false; }
 
     @Override
-    public void setPhotoChecked(int index) {
-    }
+    public void setPhotoChecked(int index) { }
 
     @Override
-    public void cancelButtonPressed() {
-    }
+    public void cancelButtonPressed() { }
 
     @Override
-    public void sendButtonPressed(int index) {
-    }
+    public void sendButtonPressed(int index) { }
 
     @Override
-    public int getSelectedCount() {
-        return 0;
-    }
+    public int getSelectedCount() { return 0; }
 
     private void fixLayout() {
         if (listView != null) {
@@ -418,7 +409,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             if (type == 0) {
                 MessageObject message = messages.get(i);
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.media_photo_layout, viewGroup, false);
                 }
                 ViewGroup.LayoutParams params = view.getLayoutParams();
@@ -426,7 +417,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 params.height = itemWidth;
                 view.setLayoutParams(params);
 
-                BackupImageView imageView = (BackupImageView) view.findViewById(R.id.media_photo_image);
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
                 imageView.setTag(i);
 
                 if (message.messageOwner.media != null && message.messageOwner.media.photo != null && !message.messageOwner.media.photo.sizes.isEmpty()) {
@@ -444,7 +435,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             } else if (type == 1) {
                 MessageObject message = messages.get(i);
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.media_video_layout, viewGroup, false);
                 }
                 ViewGroup.LayoutParams params = view.getLayoutParams();
@@ -452,8 +443,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 params.height = itemWidth;
                 view.setLayoutParams(params);
 
-                TextView textView = (TextView) view.findViewById(R.id.chat_video_time);
-                BackupImageView imageView = (BackupImageView) view.findViewById(R.id.media_photo_image);
+                TextView textView = (TextView)view.findViewById(R.id.chat_video_time);
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
                 imageView.setTag(i);
 
                 if (message.messageOwner.media.video != null && message.messageOwner.media.video.thumb != null) {
@@ -474,7 +465,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 imageView.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(message), false);
             } else if (type == 2) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.media_loading_layout, viewGroup, false);
                 }
                 ViewGroup.LayoutParams params = view.getLayoutParams();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index c221050c3..e5925cfed 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -30,35 +30,33 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessageObject;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
+import org.telegram.R;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.ActionBar.MenuDrawable;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Adapters.DialogsAdapter;
 import org.telegram.ui.Adapters.DialogsSearchAdapter;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.ui.AnimationCompat.ViewProxy;
-import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Cells.DialogCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.MenuDrawable;
 
 import java.util.ArrayList;
 
 public class MessagesActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    private static boolean dialogsLoaded = false;
-    private final AccelerateDecelerateInterpolator floatingInterpolator = new AccelerateDecelerateInterpolator();
     private ListView messagesListView;
     private DialogsAdapter dialogsAdapter;
     private DialogsSearchAdapter dialogsSearchAdapter;
@@ -70,9 +68,13 @@
     private int prevTop;
     private boolean scrollUpdated;
     private boolean floatingHidden;
+    private final AccelerateDecelerateInterpolator floatingInterpolator = new AccelerateDecelerateInterpolator();
+
     private String selectAlertString;
     private String selectAlertStringGroup;
     private boolean serverOnly = false;
+
+    private static boolean dialogsLoaded = false;
     private boolean searching = false;
     private boolean searchWas = false;
     private boolean onlySelect = false;
@@ -82,6 +84,10 @@
 
     private long openedDialogId = 0;
 
+    public static interface MessagesActivityDelegate {
+        public abstract void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
+    }
+
     public MessagesActivity(Bundle args) {
         super(args);
     }
@@ -234,7 +240,7 @@ public void searchStateChanged(boolean search) {
                 }
             });
 
-            messagesListView = (ListView) fragmentView.findViewById(R.id.messages_list_view);
+            messagesListView = (ListView)fragmentView.findViewById(R.id.messages_list_view);
             messagesListView.setAdapter(dialogsAdapter);
             if (Build.VERSION.SDK_INT >= 11) {
                 messagesListView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
@@ -258,16 +264,16 @@ public boolean onTouch(View v, MotionEvent event) {
             });
 
 
-            TextView textView = (TextView) fragmentView.findViewById(R.id.list_empty_view_text1);
+            TextView textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text1);
             textView.setText(LocaleController.getString("NoChats", R.string.NoChats));
-            textView = (TextView) fragmentView.findViewById(R.id.list_empty_view_text2);
+            textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text2);
             textView.setText(LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp));
-            textView = (TextView) fragmentView.findViewById(R.id.search_empty_text);
+            textView = (TextView)fragmentView.findViewById(R.id.search_empty_text);
             textView.setText(LocaleController.getString("NoResult", R.string.NoResult));
 
-            floatingButton = (ImageView) fragmentView.findViewById(R.id.floating_button);
+            floatingButton = (ImageView)fragmentView.findViewById(R.id.floating_button);
             floatingButton.setVisibility(onlySelect ? View.GONE : View.VISIBLE);
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) floatingButton.getLayoutParams();
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)floatingButton.getLayoutParams();
             layoutParams.leftMargin = LocaleController.isRTL ? AndroidUtilities.dp(14) : 0;
             layoutParams.rightMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(14);
             layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM;
@@ -299,7 +305,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     }
                     long dialog_id = 0;
                     int message_id = 0;
-                    BaseFragmentAdapter adapter = (BaseFragmentAdapter) messagesListView.getAdapter();
+                    BaseFragmentAdapter adapter = (BaseFragmentAdapter)messagesListView.getAdapter();
                     if (adapter == dialogsAdapter) {
                         TLRPC.TL_dialog dialog = dialogsAdapter.getItem(i);
                         if (dialog == null) {
@@ -312,7 +318,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             dialog_id = ((TLRPC.User) obj).id;
                             if (dialogsSearchAdapter.isGlobalSearch(i)) {
                                 ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
-                                users.add((TLRPC.User) obj);
+                                users.add((TLRPC.User)obj);
                                 MessagesController.getInstance().putUsers(users, false);
                                 MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
                             }
@@ -323,9 +329,9 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                 dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
                             }
                         } else if (obj instanceof TLRPC.EncryptedChat) {
-                            dialog_id = ((long) ((TLRPC.EncryptedChat) obj).id) << 32;
+                            dialog_id = ((long)((TLRPC.EncryptedChat) obj).id) << 32;
                         } else if (obj instanceof MessageObject) {
-                            MessageObject messageObject = (MessageObject) obj;
+                            MessageObject messageObject = (MessageObject)obj;
                             dialog_id = messageObject.getDialogId();
                             message_id = messageObject.messageOwner.id;
                         }
@@ -339,8 +345,8 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         didSelectResult(dialog_id, true, false);
                     } else {
                         Bundle args = new Bundle();
-                        int lower_part = (int) dialog_id;
-                        int high_id = (int) (dialog_id >> 32);
+                        int lower_part = (int)dialog_id;
+                        int high_id = (int)(dialog_id >> 32);
                         if (lower_part != 0) {
                             if (high_id == 1) {
                                 args.putInt("chat_id", lower_part);
@@ -396,8 +402,8 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
 
-                    int lower_id = (int) selectedDialog;
-                    int high_id = (int) (selectedDialog >> 32);
+                    int lower_id = (int)selectedDialog;
+                    int high_id = (int)(selectedDialog >> 32);
 
                     final boolean isChat = lower_id < 0 && high_id != 1;
                     builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory),
@@ -486,7 +492,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -564,7 +570,7 @@ public void didReceivedNotification(int id, Object... args) {
                 updateVisibleRows(0);
             }
         } else if (id == NotificationCenter.updateInterfaces) {
-            updateVisibleRows((Integer) args[0]);
+            updateVisibleRows((Integer)args[0]);
         } else if (id == NotificationCenter.appDidLogout) {
             dialogsLoaded = false;
         } else if (id == NotificationCenter.encryptedChatUpdated) {
@@ -573,8 +579,8 @@ public void didReceivedNotification(int id, Object... args) {
             updateVisibleRows(0);
         } else if (id == NotificationCenter.openedChatChanged) {
             if (!serverOnly && AndroidUtilities.isTablet()) {
-                boolean close = (Boolean) args[1];
-                long dialog_id = (Long) args[0];
+                boolean close = (Boolean)args[1];
+                long dialog_id = (Long)args[0];
                 if (close) {
                     if (dialog_id == openedDialogId) {
                         openedDialogId = 0;
@@ -627,14 +633,14 @@ private void updateVisibleRows(int mask) {
         }
     }
 
-    public MessagesActivityDelegate getDelegate() {
-        return delegate;
-    }
-
     public void setDelegate(MessagesActivityDelegate delegate) {
         this.delegate = delegate;
     }
 
+    public MessagesActivityDelegate getDelegate() {
+        return delegate;
+    }
+
     private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
         if (useAlert && selectAlertString != null && selectAlertStringGroup != null) {
             if (getParentActivity() == null) {
@@ -642,8 +648,8 @@ private void didSelectResult(final long dialog_id, boolean useAlert, final boole
             }
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            int lower_part = (int) dialog_id;
-            int high_id = (int) (dialog_id >> 32);
+            int lower_part = (int)dialog_id;
+            int high_id = (int)(dialog_id >> 32);
             if (lower_part != 0) {
                 if (high_id == 1) {
                     TLRPC.Chat chat = MessagesController.getInstance().getChat(lower_part);
@@ -691,7 +697,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             builder.setNegativeButton(R.string.Cancel, null);
             showAlertDialog(builder);
             if (checkBox != null) {
-                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) checkBox.getLayoutParams();
+                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)checkBox.getLayoutParams();
                 if (layoutParams != null) {
                     layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
                     checkBox.setLayoutParams(layoutParams);
@@ -706,8 +712,4 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
         }
     }
-
-    public static interface MessagesActivityDelegate {
-        public abstract void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index 89dd5a0a5..2f311c0a8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -27,26 +27,26 @@
 import android.widget.ListView;
 import android.widget.Toast;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.android.NotificationsController;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.HeaderCell;
 import org.telegram.ui.Cells.ShadowSectionCell;
 import org.telegram.ui.Cells.TextCheckCell;
 import org.telegram.ui.Cells.TextColorCell;
 import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.ColorPickerView;
 
 public class NotificationsSettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
@@ -354,9 +354,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             return;
                         }
 
-                        LayoutInflater li = (LayoutInflater) getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                         view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
-                        final ColorPickerView colorPickerView = (ColorPickerView) view.findViewById(R.id.color_picker);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
 
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         if (i == messageLedRow) {
@@ -400,7 +400,7 @@ public void onClick(DialogInterface dialog, int which) {
                     } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("PopupNotification", R.string.PopupNotification));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("NoPopup", R.string.NoPopup),
                                 LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn),
                                 LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff),
@@ -426,7 +426,7 @@ public void onClick(DialogInterface dialog, int which) {
                     } else if (i == messageVibrateRow || i == groupVibrateRow) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("Disabled", R.string.Disabled),
                                 LocaleController.getString("Default", R.string.Default),
                                 LocaleController.getString("Short", R.string.Short),
@@ -460,7 +460,7 @@ public void onClick(DialogInterface dialog, int which) {
                     } else if (i == messagePriorityRow || i == groupPriorityRow) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault),
                                 LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh),
                                 LocaleController.getString("NotificationsPriorityMax", R.string.NotificationsPriorityMax)
@@ -483,7 +483,7 @@ public void onClick(DialogInterface dialog, int which) {
                     } else if (i == repeatRow) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever),
                                 LocaleController.formatPluralString("Minutes", 5),
                                 LocaleController.formatPluralString("Minutes", 10),
@@ -524,7 +524,7 @@ public void onClick(DialogInterface dialog, int which) {
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -564,7 +564,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
             if (ringtone != null) {
                 Ringtone rng = RingtoneManager.getRingtone(getParentActivity(), ringtone);
                 if (rng != null) {
-                    if (ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
+                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
                         name = LocaleController.getString("Default", R.string.Default);
                     } else {
                         name = rng.getTitle(getParentActivity());
@@ -665,8 +665,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else if (i == resetSectionRow) {
                     ((HeaderCell) view).setText(LocaleController.getString("Reset", R.string.Reset));
                 }
-            }
-            if (type == 1) {
+            } if (type == 1) {
                 if (view == null) {
                     view = new TextCheckCell(mContext);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index 3909f3378..5793cd9ca 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -22,11 +22,11 @@
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
-import org.telegram.android.LocaleController;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
+import org.telegram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
@@ -35,99 +35,6 @@
 
 public class PhotoCropActivity extends BaseFragment {
 
-    private final static int done_button = 1;
-    private Bitmap imageToCrop;
-    private BitmapDrawable drawable;
-    private PhotoCropActivityDelegate delegate = null;
-    private PhotoCropView view;
-    private boolean sameBitmap = false;
-    private boolean doneButtonPressed = false;
-    public PhotoCropActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        swipeBackEnabled = false;
-        String photoPath = getArguments().getString("photoPath");
-        Uri photoUri = getArguments().getParcelable("photoUri");
-        if (photoPath == null && photoUri == null) {
-            return false;
-        }
-        if (photoPath != null) {
-            File f = new File(photoPath);
-            if (!f.exists()) {
-                return false;
-            }
-        }
-        int size = 0;
-        if (AndroidUtilities.isTablet()) {
-            size = AndroidUtilities.dp(520);
-        } else {
-            size = Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y);
-        }
-        imageToCrop = ImageLoader.loadBitmap(photoPath, photoUri, size, size);
-        if (imageToCrop == null) {
-            return false;
-        }
-        drawable = new BitmapDrawable(imageToCrop);
-        super.onFragmentCreate();
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        drawable = null;
-        if (imageToCrop != null && !sameBitmap) {
-            imageToCrop.recycle();
-            imageToCrop = null;
-        }
-    }
-
-    @Override
-    public View createView(LayoutInflater inflater, ViewGroup container) {
-        if (fragmentView == null) {
-            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-            actionBar.setAllowOverlayTitle(true);
-            actionBar.setTitle(LocaleController.getString("AddContact", R.string.AddContact));
-            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-                @Override
-                public void onItemClick(int id) {
-                    if (id == -1) {
-                        finishFragment();
-                    } else if (id == done_button) {
-                        if (delegate != null && !doneButtonPressed) {
-                            Bitmap bitmap = view.getBitmap();
-                            if (bitmap == imageToCrop) {
-                                sameBitmap = true;
-                            }
-                            delegate.didFinishCrop(bitmap);
-                            doneButtonPressed = true;
-                        }
-                        finishFragment();
-                    }
-                }
-            });
-
-            ActionBarMenu menu = actionBar.createMenu();
-            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-            fragmentView = view = new PhotoCropView(getParentActivity());
-            fragmentView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
-        } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
-            if (parent != null) {
-                parent.removeView(fragmentView);
-            }
-        }
-        return fragmentView;
-    }
-
-    public void setDelegate(PhotoCropActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
     public interface PhotoCropActivityDelegate {
         public abstract void didFinishCrop(Bitmap bitmap);
     }
@@ -286,10 +193,10 @@ private void updateBitmapSize() {
             float scaleY = viewHeight / h;
             if (scaleX > scaleY) {
                 bitmapHeight = viewHeight;
-                bitmapWidth = (int) Math.ceil(w * scaleY);
+                bitmapWidth = (int)Math.ceil(w * scaleY);
             } else {
                 bitmapWidth = viewWidth;
-                bitmapHeight = (int) Math.ceil(h * scaleX);
+                bitmapHeight = (int)Math.ceil(h * scaleX);
             }
             bitmapX = (viewWidth - bitmapWidth) / 2;
             bitmapY = (viewHeight - bitmapHeight) / 2;
@@ -324,9 +231,9 @@ public Bitmap getBitmap() {
             float percX = (rectX - bitmapX) / bitmapWidth;
             float percY = (rectY - bitmapY) / bitmapHeight;
             float percSize = rectSize / bitmapWidth;
-            int x = (int) (percX * imageToCrop.getWidth());
-            int y = (int) (percY * imageToCrop.getHeight());
-            int size = (int) (percSize * imageToCrop.getWidth());
+            int x = (int)(percX * imageToCrop.getWidth());
+            int y = (int)(percY * imageToCrop.getHeight());
+            int size = (int)(percSize * imageToCrop.getWidth());
             if (x + size > imageToCrop.getWidth()) {
                 size = imageToCrop.getWidth() - x;
             }
@@ -367,4 +274,99 @@ protected void onDraw(Canvas canvas) {
             canvas.drawRect(rectX + rectSize - side, rectY + rectSize - side, rectX + rectSize + side, rectY + rectSize + side, circlePaint);
         }
     }
+
+    private Bitmap imageToCrop;
+    private BitmapDrawable drawable;
+    private PhotoCropActivityDelegate delegate = null;
+    private PhotoCropView view;
+    private boolean sameBitmap = false;
+    private boolean doneButtonPressed = false;
+
+    private final static int done_button = 1;
+
+    public PhotoCropActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        swipeBackEnabled = false;
+        String photoPath = getArguments().getString("photoPath");
+        Uri photoUri = getArguments().getParcelable("photoUri");
+        if (photoPath == null && photoUri == null) {
+            return false;
+        }
+        if (photoPath != null) {
+            File f = new File(photoPath);
+            if (!f.exists()) {
+                return false;
+            }
+        }
+        int size = 0;
+        if (AndroidUtilities.isTablet()) {
+            size = AndroidUtilities.dp(520);
+        } else {
+            size = Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y);
+        }
+        imageToCrop = ImageLoader.loadBitmap(photoPath, photoUri, size, size);
+        if (imageToCrop == null) {
+            return false;
+        }
+        drawable = new BitmapDrawable(imageToCrop);
+        super.onFragmentCreate();
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        drawable = null;
+        if (imageToCrop != null && !sameBitmap) {
+            imageToCrop.recycle();
+            imageToCrop = null;
+        }
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            actionBar.setAllowOverlayTitle(true);
+            actionBar.setTitle(LocaleController.getString("AddContact", R.string.AddContact));
+            actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        if (delegate != null && !doneButtonPressed) {
+                            Bitmap bitmap = view.getBitmap();
+                            if (bitmap == imageToCrop) {
+                                sameBitmap = true;
+                            }
+                            delegate.didFinishCrop(bitmap);
+                            doneButtonPressed = true;
+                        }
+                        finishFragment();
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBar.createMenu();
+            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+            fragmentView = view = new PhotoCropView(getParentActivity());
+            fragmentView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public void setDelegate(PhotoCropActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index e5a238f8e..db59c90bd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -24,18 +24,18 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessageObject;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Components.BackupImageView;
 
 import java.util.ArrayList;
@@ -43,11 +43,17 @@
 
 public class PhotoPickerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
 
+    public static interface PhotoPickerActivityDelegate {
+        public abstract void didSelectPhotos(ArrayList<String> photos);
+        public abstract void startPhotoSelectActivity();
+    }
+
     private ArrayList<MediaController.AlbumEntry> albumsSorted = null;
     private HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = new HashMap<Integer, MediaController.PhotoEntry>();
     private Integer cameraAlbumId = null;
     private boolean loading = false;
     private MediaController.AlbumEntry selectedAlbum = null;
+
     private GridView listView;
     private ListAdapter listAdapter;
     private View progressView;
@@ -57,6 +63,7 @@
     private TextView doneButtonBadgeTextView;
     private int itemWidth = 100;
     private boolean sendPressed = false;
+
     private PhotoPickerActivityDelegate delegate;
 
     @Override
@@ -112,7 +119,7 @@ public void onItemClick(int id) {
 
             fragmentView = inflater.inflate(R.layout.photo_picker_layout, container, false);
 
-            emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
             emptyView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
@@ -120,10 +127,10 @@ public boolean onTouch(View v, MotionEvent event) {
                 }
             });
             emptyView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
-            listView = (GridView) fragmentView.findViewById(R.id.media_grid);
+            listView = (GridView)fragmentView.findViewById(R.id.media_grid);
             progressView = fragmentView.findViewById(R.id.progressLayout);
 
-            Button cancelButton = (Button) fragmentView.findViewById(R.id.cancel_button);
+            Button cancelButton = (Button)fragmentView.findViewById(R.id.cancel_button);
             cancelButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
@@ -140,10 +147,10 @@ public void onClick(View view) {
 
             cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
             cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            doneButtonTextView = (TextView) doneButton.findViewById(R.id.done_button_text);
+            doneButtonTextView = (TextView)doneButton.findViewById(R.id.done_button_text);
             doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
             doneButtonTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            doneButtonBadgeTextView = (TextView) doneButton.findViewById(R.id.done_button_badge);
+            doneButtonBadgeTextView = (TextView)doneButton.findViewById(R.id.done_button_badge);
             doneButtonBadgeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
 
             listView.setAdapter(listAdapter = new ListAdapter(getParentActivity()));
@@ -175,7 +182,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
             }
             updateSelectedCount();
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -202,9 +209,9 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.albumsDidLoaded) {
-            int guid = (Integer) args[0];
+            int guid = (Integer)args[0];
             if (classGuid == guid) {
-                albumsSorted = (ArrayList<MediaController.AlbumEntry>) args[1];
+                albumsSorted = (ArrayList<MediaController.AlbumEntry>)args[1];
                 if (args[2] != null) {
                     cameraAlbumId = (Integer) args[2];
                 }
@@ -244,9 +251,9 @@ public boolean onBackPressed() {
 
         for (int a = 0; a < count; a++) {
             View view = listView.getChildAt(a);
-            BackupImageView imageView = (BackupImageView) view.findViewById(R.id.media_photo_image);
+            BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
             if (imageView != null) {
-                int num = (Integer) imageView.getTag();
+                int num = (Integer)imageView.getTag();
                 if (num < 0 || num >= selectedAlbum.photos.size()) {
                     continue;
                 }
@@ -261,7 +268,7 @@ public boolean onBackPressed() {
                     object.thumb = object.imageReceiver.getBitmap();
                     View frameView = view.findViewById(R.id.photo_frame);
                     frameView.setVisibility(View.GONE);
-                    ImageView checkImageView = (ImageView) view.findViewById(R.id.photo_check);
+                    ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
                     checkImageView.setVisibility(View.GONE);
                     return object;
                 }
@@ -278,14 +285,14 @@ public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation
             if (view.getTag() == null) {
                 continue;
             }
-            int num = (Integer) view.getTag();
+            int num = (Integer)view.getTag();
             if (num < 0 || num >= selectedAlbum.photos.size()) {
                 continue;
             }
             if (num == index) {
                 View frameView = view.findViewById(R.id.photo_frame);
                 frameView.setVisibility(View.VISIBLE);
-                ImageView checkImageView = (ImageView) view.findViewById(R.id.photo_check);
+                ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
                 checkImageView.setVisibility(View.VISIBLE);
                 break;
             }
@@ -323,7 +330,7 @@ public void setPhotoChecked(int index) {
 
         for (int a = 0; a < count; a++) {
             View view = listView.getChildAt(a);
-            int num = (Integer) view.getTag();
+            int num = (Integer)view.getTag();
             if (num == index) {
                 updateSelectedPhoto(view, photoEntry);
                 break;
@@ -443,7 +450,7 @@ private void updateSelectedCount() {
 
     private void updateSelectedPhoto(View view, MediaController.PhotoEntry photoEntry) {
         View frameView = view.findViewById(R.id.photo_frame);
-        ImageView checkImageView = (ImageView) view.findViewById(R.id.photo_check);
+        ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
         if (selectedPhotos.containsKey(photoEntry.imageId)) {
             frameView.setBackgroundResource(R.drawable.photoborder);
             checkImageView.setImageResource(R.drawable.selectphoto_small_active);
@@ -455,12 +462,6 @@ private void updateSelectedPhoto(View view, MediaController.PhotoEntry photoEntr
         }
     }
 
-    public static interface PhotoPickerActivityDelegate {
-        public abstract void didSelectPhotos(ArrayList<String> photos);
-
-        public abstract void startPhotoSelectActivity();
-    }
-
     private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
@@ -506,7 +507,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.photo_picker_album_layout, viewGroup, false);
                 }
                 ViewGroup.LayoutParams params = view.getLayoutParams();
@@ -515,36 +516,36 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 view.setLayoutParams(params);
 
                 MediaController.AlbumEntry albumEntry = albumsSorted.get(i);
-                BackupImageView imageView = (BackupImageView) view.findViewById(R.id.media_photo_image);
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
                 if (albumEntry.coverPhoto != null && albumEntry.coverPhoto.path != null) {
                     imageView.setImage("thumb://" + albumEntry.coverPhoto.imageId + ":" + albumEntry.coverPhoto.path, null, mContext.getResources().getDrawable(R.drawable.nophotos));
                 } else {
                     imageView.setImageResource(R.drawable.nophotos);
                 }
-                TextView textView = (TextView) view.findViewById(R.id.album_name);
+                TextView textView = (TextView)view.findViewById(R.id.album_name);
                 textView.setText(albumEntry.bucketName);
                 if (cameraAlbumId != null && albumEntry.bucketId == cameraAlbumId) {
 
                 } else {
 
                 }
-                textView = (TextView) view.findViewById(R.id.album_count);
+                textView = (TextView)view.findViewById(R.id.album_count);
                 textView.setText("" + albumEntry.photos.size());
             } else if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.photo_picker_photo_layout, viewGroup, false);
                     View checkImageView = view.findViewById(R.id.photo_check_frame);
                     checkImageView.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View v) {
-                            MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get((Integer) ((View) v.getParent()).getTag());
+                            MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get((Integer)((View)v.getParent()).getTag());
                             if (selectedPhotos.containsKey(photoEntry.imageId)) {
                                 selectedPhotos.remove(photoEntry.imageId);
                             } else {
                                 selectedPhotos.put(photoEntry.imageId, photoEntry);
                             }
-                            updateSelectedPhoto((View) v.getParent(), photoEntry);
+                            updateSelectedPhoto((View)v.getParent(), photoEntry);
                             updateSelectedCount();
                         }
                     });
@@ -555,7 +556,7 @@ public void onClick(View v) {
                 view.setLayoutParams(params);
 
                 MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(i);
-                BackupImageView imageView = (BackupImageView) view.findViewById(R.id.media_photo_image);
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
                 imageView.setTag(i);
                 view.setTag(i);
                 if (photoEntry.path != null) {
@@ -568,7 +569,7 @@ public void onClick(View v) {
                 imageView.imageReceiver.setVisible(!showing, false);
                 View frameView = view.findViewById(R.id.photo_frame);
                 frameView.setVisibility(showing ? View.GONE : View.VISIBLE);
-                ImageView checkImageView = (ImageView) view.findViewById(R.id.photo_check);
+                ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
                 checkImageView.setVisibility(showing ? View.GONE : View.VISIBLE);
             }
             return view;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 05d5b5fd5..4d1ec269a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -45,31 +45,31 @@
 import android.widget.Scroller;
 import android.widget.TextView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.android.MessageObject;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
 import org.telegram.ui.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Components.ClippingImageView;
+import org.telegram.android.ImageReceiver;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -79,18 +79,17 @@
 
 public class PhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
 
-    private final static int gallery_menu_save = 1;
-    private final static int gallery_menu_showall = 2;
-    private final static int gallery_menu_send = 3;
-    private final static int PAGE_SPACING = AndroidUtilities.dp(30);
-    private static Drawable[] progressDrawables = null;
-    private static volatile PhotoViewer Instance = null;
     private int classGuid;
     private PhotoViewerProvider placeProvider;
     private boolean isVisible;
+
     private Activity parentActivity;
+
     private ActionBar actionBar;
     private boolean isActionBarVisible = true;
+
+    private static Drawable[] progressDrawables = null;
+
     private WindowManager.LayoutParams windowLayoutParams;
     private FrameLayoutDrawer containerView;
     private FrameLayoutTouchListener windowView;
@@ -108,6 +107,7 @@
     private ImageView shareButton;
     private RadialProgressView radialProgressViews[] = new RadialProgressView[3];
     private boolean canShowBottom = true;
+
     private int animationInProgress = 0;
     private long transitionAnimationStartTime = 0;
     private Runnable animationEndRunnable = null;
@@ -115,6 +115,7 @@
     private PlaceProviderObject hideAfterAnimation;
     private boolean disableShowCheck = false;
     private Animation.AnimationListener animationListener;
+
     private ImageReceiver leftImage = new ImageReceiver();
     private ImageReceiver centerImage = new ImageReceiver();
     private ImageReceiver rightImage = new ImageReceiver();
@@ -125,6 +126,7 @@
     private PlaceProviderObject currentPlaceObject;
     private String currentPathObject;
     private Bitmap currentThumb = null;
+
     private int avatarsUserId;
     private long currentDialogId;
     private int totalImagesCount;
@@ -133,6 +135,7 @@
     private boolean loadingMoreImages;
     private boolean cacheEndReached;
     private boolean opennedFromMedia;
+
     private boolean draggingDown = false;
     private float dragY;
     private float translationX = 0;
@@ -168,6 +171,7 @@
     private int switchImageAfterAnimation = 0;
     private VelocityTracker velocityTracker = null;
     private Scroller scroller = null;
+
     private ArrayList<MessageObject> imagesArrTemp = new ArrayList<MessageObject>();
     private HashMap<Integer, MessageObject> imagesByIdsTemp = new HashMap<Integer, MessageObject>();
     private ArrayList<MessageObject> imagesArr = new ArrayList<MessageObject>();
@@ -178,6 +182,196 @@
     private ArrayList<MediaController.PhotoEntry> imagesArrLocals = new ArrayList<MediaController.PhotoEntry>();
     private TLRPC.FileLocation currentUserAvatarLocation = null;
 
+    private final static int gallery_menu_save = 1;
+    private final static int gallery_menu_showall = 2;
+    private final static int gallery_menu_send = 3;
+
+    private final static int PAGE_SPACING = AndroidUtilities.dp(30);
+
+    private static class RadialProgressView {
+
+        private long lastUpdateTime = 0;
+        private float radOffset = 0;
+        private float currentProgress = 0;
+        private float animationProgressStart = 0;
+        private long currentProgressTime = 0;
+        private float animatedProgressValue = 0;
+        private RectF progressRect = new RectF();
+        private int backgroundState = -1;
+        private View parent = null;
+        private int size = AndroidUtilities.dp(64);
+        private int previousBackgroundState = -2;
+        private float animatedAlphaValue = 1.0f;
+
+        private static DecelerateInterpolator decelerateInterpolator = null;
+        private static Paint progressPaint = null;
+
+        public RadialProgressView(Context context, View parentView) {
+            if (decelerateInterpolator == null) {
+                decelerateInterpolator = new DecelerateInterpolator();
+                progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+                progressPaint.setStyle(Paint.Style.STROKE);
+                progressPaint.setStrokeCap(Paint.Cap.ROUND);
+                progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
+                progressPaint.setColor(0xffffffff);
+            }
+            parent = parentView;
+        }
+
+        private void updateAnimation() {
+            long newTime = System.currentTimeMillis();
+            long dt = newTime - lastUpdateTime;
+            lastUpdateTime = newTime;
+
+            if (animatedProgressValue != 1) {
+                radOffset += 360 * dt / 3000.0f;
+                float progressDiff = currentProgress - animationProgressStart;
+                if (progressDiff > 0) {
+                    currentProgressTime += dt;
+                    if (currentProgressTime >= 300) {
+                        animatedProgressValue = currentProgress;
+                        animationProgressStart = currentProgress;
+                        currentProgressTime = 0;
+                    } else {
+                        animatedProgressValue = animationProgressStart + progressDiff * decelerateInterpolator.getInterpolation(currentProgressTime / 300.0f);
+                    }
+                }
+                parent.invalidate();
+            }
+            if (animatedProgressValue >= 1 && previousBackgroundState != -2) {
+                animatedAlphaValue -= dt / 200.0f;
+                if (animatedAlphaValue <= 0) {
+                    animatedAlphaValue = 0.0f;
+                    previousBackgroundState = -2;
+                }
+                parent.invalidate();
+            }
+        }
+
+        public void setProgress(float value, boolean animated) {
+            if (!animated) {
+                animatedProgressValue = value;
+                animationProgressStart = value;
+            } else {
+                animationProgressStart = animatedProgressValue;
+            }
+            currentProgress = value;
+            currentProgressTime = 0;
+        }
+
+        public void setBackgroundState(int state, boolean animated) {
+            lastUpdateTime = System.currentTimeMillis();
+            if (animated && backgroundState != state) {
+                previousBackgroundState = backgroundState;
+                animatedAlphaValue = 1.0f;
+            } else {
+                previousBackgroundState = -2;
+            }
+            backgroundState = state;
+            parent.invalidate();
+        }
+
+        public void onDraw(Canvas canvas) {
+            int x = (canvas.getWidth() - size) / 2;
+            int y = (canvas.getHeight() - size) / 2;
+
+            if (previousBackgroundState >= 0 && previousBackgroundState < 4) {
+                Drawable drawable = progressDrawables[previousBackgroundState];
+                if (drawable != null) {
+                    drawable.setAlpha((int)(255 * animatedAlphaValue));
+                    drawable.setBounds(x, y, x + size, y + size);
+                    drawable.draw(canvas);
+                }
+            }
+
+            if (backgroundState >= 0 && backgroundState < 4) {
+                Drawable drawable = progressDrawables[backgroundState];
+                if (drawable != null) {
+                    if (previousBackgroundState != -2) {
+                        drawable.setAlpha((int)(255 * (1.0f - animatedAlphaValue)));
+                    } else {
+                        drawable.setAlpha(255);
+                    }
+                    drawable.setBounds(x, y, x + size, y + size);
+                    drawable.draw(canvas);
+                }
+            }
+
+            if (backgroundState == 0 || backgroundState == 1 || previousBackgroundState == 0 || previousBackgroundState == 1) {
+                int diff = AndroidUtilities.dp(1);
+                if (previousBackgroundState != -2) {
+                    progressPaint.setAlpha((int)(255 * animatedAlphaValue));
+                } else {
+                    progressPaint.setAlpha(255);
+                }
+                progressRect.set(x + diff, y + diff, x + size - diff, y + size - diff);
+                canvas.drawArc(progressRect, -90 + radOffset, Math.max(4, 360 * animatedProgressValue), false, progressPaint);
+                updateAnimation();
+            }
+        }
+    }
+
+    public static class PlaceProviderObject {
+        public ImageReceiver imageReceiver;
+        public int viewX;
+        public int viewY;
+        public View parentView;
+        public Bitmap thumb;
+        public int user_id;
+        public int index;
+        public int size;
+        public int radius;
+    }
+
+    public static interface PhotoViewerProvider {
+        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        public void willHidePhotoViewer();
+        public boolean isPhotoChecked(int index);
+        public void setPhotoChecked(int index);
+        public void cancelButtonPressed();
+        public void sendButtonPressed(int index);
+        public int getSelectedCount();
+    }
+
+    private class FrameLayoutTouchListener extends FrameLayout {
+        public FrameLayoutTouchListener(Context context) {
+            super(context);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent event) {
+            return getInstance().onTouchEvent(event);
+        }
+
+        @Override
+        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+            super.onLayout(changed, left, top, right, bottom);
+            getInstance().onLayout(changed, left, top, right, bottom);
+        }
+    }
+
+    private class FrameLayoutDrawer extends FrameLayout {
+        public FrameLayoutDrawer(Context context) {
+            super(context);
+            setWillNotDraw(false);
+        }
+
+        @Override
+        protected void onAnimationEnd() {
+            super.onAnimationEnd();
+            if (getInstance().animationListener != null) {
+                getInstance().animationListener.onAnimationEnd(null);
+            }
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            getInstance().onDraw(canvas);
+        }
+    }
+
+    private static volatile PhotoViewer Instance = null;
     public static PhotoViewer getInstance() {
         PhotoViewer localInstance = Instance;
         if (localInstance == null) {
@@ -195,7 +389,7 @@ public static PhotoViewer getInstance() {
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidFailedLoad) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             for (int a = 0; a < 3; a++) {
                 if (currentFileNames[a] != null && currentFileNames[a].equals(location)) {
                     radialProgressViews[a].setProgress(1.0f, true);
@@ -204,7 +398,7 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.FileDidLoaded) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             for (int a = 0; a < 3; a++) {
                 if (currentFileNames[a] != null && currentFileNames[a].equals(location)) {
                     radialProgressViews[a].setProgress(1.0f, true);
@@ -213,7 +407,7 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.FileLoadProgressChanged) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             for (int a = 0; a < 3; a++) {
                 if (currentFileNames[a] != null && currentFileNames[a].equals(location)) {
                     Float progress = (Float) args[1];
@@ -221,13 +415,13 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.userPhotosLoaded) {
-            int guid = (Integer) args[4];
-            int uid = (Integer) args[0];
+            int guid = (Integer)args[4];
+            int uid = (Integer)args[0];
             if (avatarsUserId == uid && classGuid == guid) {
-                boolean fromCache = (Boolean) args[3];
+                boolean fromCache = (Boolean)args[3];
 
                 int setToImage = -1;
-                ArrayList<TLRPC.Photo> photos = (ArrayList<TLRPC.Photo>) args[5];
+                ArrayList<TLRPC.Photo> photos = (ArrayList<TLRPC.Photo>)args[5];
                 if (photos.isEmpty()) {
                     return;
                 }
@@ -273,12 +467,12 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.mediaCountDidLoaded) {
-            long uid = (Long) args[0];
+            long uid = (Long)args[0];
             if (uid == currentDialogId) {
-                if ((int) currentDialogId != 0 && (Boolean) args[2]) {
+                if ((int)currentDialogId != 0 && (Boolean)args[2]) {
                     MessagesController.getInstance().getMediaCount(currentDialogId, classGuid, false);
                 }
-                totalImagesCount = (Integer) args[1];
+                totalImagesCount = (Integer)args[1];
                 if (needSearchImageInArr && isFirstLoading) {
                     isFirstLoading = false;
                     loadingMoreImages = true;
@@ -288,12 +482,12 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.mediaDidLoaded) {
-            long uid = (Long) args[0];
-            int guid = (Integer) args[4];
+            long uid = (Long)args[0];
+            int guid = (Integer)args[4];
             if (uid == currentDialogId && guid == classGuid) {
                 loadingMoreImages = false;
-                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[2];
-                boolean fromCache = (Boolean) args[3];
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[2];
+                boolean fromCache = (Boolean)args[3];
                 cacheEndReached = !fromCache;
                 if (needSearchImageInArr) {
                     if (arr.isEmpty()) {
@@ -388,7 +582,7 @@ public void setParentActivity(Activity activity) {
         containerView = new FrameLayoutDrawer(activity);
         containerView.setFocusable(false);
         windowView.addView(containerView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) containerView.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)containerView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
@@ -442,7 +636,7 @@ public void onItemClick(int id) {
                         closePhoto(false);
                         Bundle args2 = new Bundle();
                         args2.putLong("dialog_id", currentDialogId);
-                        ((LaunchActivity) parentActivity).presentFragment(new MediaActivity(args2), false, true);
+                        ((LaunchActivity)parentActivity).presentFragment(new MediaActivity(args2), false, true);
                     }
                 } else if (id == gallery_menu_send) {
                     /*Intent intent = new Intent(this, MessagesActivity.class);
@@ -505,7 +699,7 @@ public boolean canOpenMenu() {
 
         bottomLayout = new FrameLayout(containerView.getContext());
         containerView.addView(bottomLayout);
-        layoutParams = (FrameLayout.LayoutParams) bottomLayout.getLayoutParams();
+        layoutParams = (FrameLayout.LayoutParams)bottomLayout.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = AndroidUtilities.dp(48);
         layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
@@ -589,10 +783,10 @@ public void onClick(View v) {
 
                         ArrayList<Long> random_ids = null;
                         TLRPC.EncryptedChat encryptedChat = null;
-                        if ((int) obj.getDialogId() == 0 && obj.messageOwner.random_id != 0) {
+                        if ((int)obj.getDialogId() == 0 && obj.messageOwner.random_id != 0) {
                             random_ids = new ArrayList<Long>();
                             random_ids.add(obj.messageOwner.random_id);
-                            encryptedChat = MessagesController.getInstance().getEncryptedChat((int) (obj.getDialogId() >> 32));
+                            encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(obj.getDialogId() >> 32));
                         }
 
                         MessagesController.getInstance().deleteMessages(arr, random_ids, encryptedChat);
@@ -655,7 +849,7 @@ public void onClick(View v) {
         nameTextView.setTextColor(0xffffffff);
         nameTextView.setGravity(Gravity.CENTER);
         bottomLayout.addView(nameTextView);
-        layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
+        layoutParams = (FrameLayout.LayoutParams)nameTextView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
         layoutParams.gravity = Gravity.TOP;
@@ -672,7 +866,7 @@ public void onClick(View v) {
         dateTextView.setTextColor(0xffb8bdbe);
         dateTextView.setGravity(Gravity.CENTER);
         bottomLayout.addView(dateTextView);
-        layoutParams = (FrameLayout.LayoutParams) dateTextView.getLayoutParams();
+        layoutParams = (FrameLayout.LayoutParams)dateTextView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
         layoutParams.gravity = Gravity.TOP;
@@ -683,7 +877,7 @@ public void onClick(View v) {
 
         pickerView = parentActivity.getLayoutInflater().inflate(R.layout.photo_picker_bottom_layout, null);
         containerView.addView(pickerView);
-        Button cancelButton = (Button) pickerView.findViewById(R.id.cancel_button);
+        Button cancelButton = (Button)pickerView.findViewById(R.id.cancel_button);
         cancelButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -704,7 +898,7 @@ public void onClick(View view) {
             }
         });
 
-        layoutParams = (FrameLayout.LayoutParams) pickerView.getLayoutParams();
+        layoutParams = (FrameLayout.LayoutParams)pickerView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = AndroidUtilities.dp(48);
         layoutParams.gravity = Gravity.BOTTOM;
@@ -712,10 +906,10 @@ public void onClick(View view) {
 
         cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
         cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        doneButtonTextView = (TextView) doneButton.findViewById(R.id.done_button_text);
+        doneButtonTextView = (TextView)doneButton.findViewById(R.id.done_button_text);
         doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
         doneButtonTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        doneButtonBadgeTextView = (TextView) doneButton.findViewById(R.id.done_button_badge);
+        doneButtonBadgeTextView = (TextView)doneButton.findViewById(R.id.done_button_badge);
         doneButtonBadgeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
 
         gestureDetector = new GestureDetector(containerView.getContext(), this);
@@ -730,7 +924,7 @@ public void onClick(View view) {
         checkImageView.setVisibility(View.GONE);
         checkImageView.setScaleType(ImageView.ScaleType.CENTER);
         checkImageView.setImageResource(R.drawable.selectphoto_large);
-        layoutParams = (FrameLayout.LayoutParams) checkImageView.getLayoutParams();
+        layoutParams = (FrameLayout.LayoutParams)checkImageView.getLayoutParams();
         layoutParams.width = AndroidUtilities.dp(46);
         layoutParams.height = AndroidUtilities.dp(46);
         layoutParams.gravity = Gravity.RIGHT;
@@ -1287,7 +1481,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                 if (currentThumb != null && imageReceiver == centerImage) {
                     placeHolder = currentThumb;
                 }
-                int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
+                int size = (int)(AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
                 imageReceiver.setImage(photoEntry.path, String.format(Locale.US, "%d_%d", size, size), placeHolder != null ? new BitmapDrawable(null, placeHolder) : null);
             } else {
                 imageReceiver.setImageBitmap((Bitmap) null);
@@ -1561,7 +1755,7 @@ public void closePhoto(boolean animated) {
 
         final PlaceProviderObject object = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
 
-        if (animated) {
+        if(animated) {
             AndroidUtilities.lockOrientation(parentActivity);
 
             animationInProgress = 1;
@@ -1738,9 +1932,9 @@ private void onPhotoClosed(PlaceProviderObject object) {
                 radialProgressViews[a].setBackgroundState(-1, false);
             }
         }
-        centerImage.setImageBitmap((Bitmap) null);
-        leftImage.setImageBitmap((Bitmap) null);
-        rightImage.setImageBitmap((Bitmap) null);
+        centerImage.setImageBitmap((Bitmap)null);
+        leftImage.setImageBitmap((Bitmap)null);
+        rightImage.setImageBitmap((Bitmap)null);
         if (object != null) {
             object.imageReceiver.setVisible(true, true);
         }
@@ -1794,7 +1988,7 @@ private boolean onTouchEvent(MotionEvent ev) {
             return false;
         }
 
-        if (ev.getPointerCount() == 1 && gestureDetector.onTouchEvent(ev) && doubleTap) {
+        if(ev.getPointerCount() == 1 && gestureDetector.onTouchEvent(ev) && doubleTap) {
             doubleTap = false;
             moving = false;
             zooming = false;
@@ -1832,7 +2026,7 @@ private boolean onTouchEvent(MotionEvent ev) {
             }
         } else if (ev.getActionMasked() == MotionEvent.ACTION_MOVE) {
             if (canZoom && ev.getPointerCount() == 2 && !draggingDown && zooming && !changingPage) {
-                scale = (float) Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0)) / pinchStartDistance * pinchStartScale;
+                scale = (float)Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0)) / pinchStartDistance * pinchStartScale;
                 translationX = (pinchCenterX - containerView.getWidth() / 2) - ((pinchCenterX - containerView.getWidth() / 2) - pinchStartX) * (scale / pinchStartScale);
                 translationY = (pinchCenterY - containerView.getHeight() / 2) - ((pinchCenterY - containerView.getHeight() / 2) - pinchStartY) * (scale / pinchStartScale);
                 updateMinMax(scale);
@@ -1904,7 +2098,7 @@ private boolean onTouchEvent(MotionEvent ev) {
                 if (scale < 1.0f) {
                     updateMinMax(1.0f);
                     animateTo(1.0f, 0, 0, true);
-                } else if (scale > 3.0f) {
+                } else if(scale > 3.0f) {
                     float atx = (pinchCenterX - containerView.getWidth() / 2) - ((pinchCenterX - containerView.getWidth() / 2) - pinchStartX) * (3.0f / pinchStartScale);
                     float aty = (pinchCenterY - containerView.getHeight() / 2) - ((pinchCenterY - containerView.getHeight() / 2) - pinchStartY) * (3.0f / pinchStartScale);
                     updateMinMax(3.0f);
@@ -1942,11 +2136,11 @@ private boolean onTouchEvent(MotionEvent ev) {
                     velocity = velocityTracker.getXVelocity();
                 }
 
-                if ((translationX < minX - containerView.getWidth() / 3 || velocity < -AndroidUtilities.dp(650)) && rightImage.hasImage()) {
+                if((translationX < minX - containerView.getWidth() / 3 || velocity < -AndroidUtilities.dp(650)) && rightImage.hasImage()){
                     goToNext();
                     return true;
                 }
-                if ((translationX > maxX + containerView.getWidth() / 3 || velocity > AndroidUtilities.dp(650)) && leftImage.hasImage()) {
+                if((translationX > maxX + containerView.getWidth() / 3 || velocity > AndroidUtilities.dp(650)) && leftImage.hasImage()){
                     goToPrev();
                     return true;
                 }
@@ -2037,7 +2231,7 @@ private void onDraw(Canvas canvas) {
         float aty = -1;
         float ai = -1;
         if (System.currentTimeMillis() - animationStartTime < animationDuration) {
-            ai = interpolator.getInterpolation((float) (System.currentTimeMillis() - animationStartTime) / animationDuration);
+            ai = interpolator.getInterpolation((float)(System.currentTimeMillis() - animationStartTime) / animationDuration);
             if (ai >= 0.99f) {
                 ai = -1;
             }
@@ -2176,7 +2370,7 @@ private void onDraw(Canvas canvas) {
 
     @SuppressLint("DrawAllocation")
     private void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (changed) {
+        if(changed) {
             scale = 1;
             translationX = 0;
             translationY = 0;
@@ -2187,8 +2381,8 @@ private void onLayout(boolean changed, int left, int top, int right, int bottom)
                     @Override
                     public boolean onPreDraw() {
                         checkImageView.getViewTreeObserver().removeOnPreDrawListener(this);
-                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) checkImageView.getLayoutParams();
-                        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)checkImageView.getLayoutParams();
+                        WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
                         int rotation = manager.getDefaultDisplay().getRotation();
                         if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
                             layoutParams.topMargin = AndroidUtilities.dp(48);
@@ -2328,193 +2522,4 @@ public boolean onDoubleTap(MotionEvent e) {
     public boolean onDoubleTapEvent(MotionEvent e) {
         return false;
     }
-
-    public static interface PhotoViewerProvider {
-        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
-
-        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
-
-        public void willHidePhotoViewer();
-
-        public boolean isPhotoChecked(int index);
-
-        public void setPhotoChecked(int index);
-
-        public void cancelButtonPressed();
-
-        public void sendButtonPressed(int index);
-
-        public int getSelectedCount();
-    }
-
-    private static class RadialProgressView {
-
-        private static DecelerateInterpolator decelerateInterpolator = null;
-        private static Paint progressPaint = null;
-        private long lastUpdateTime = 0;
-        private float radOffset = 0;
-        private float currentProgress = 0;
-        private float animationProgressStart = 0;
-        private long currentProgressTime = 0;
-        private float animatedProgressValue = 0;
-        private RectF progressRect = new RectF();
-        private int backgroundState = -1;
-        private View parent = null;
-        private int size = AndroidUtilities.dp(64);
-        private int previousBackgroundState = -2;
-        private float animatedAlphaValue = 1.0f;
-
-        public RadialProgressView(Context context, View parentView) {
-            if (decelerateInterpolator == null) {
-                decelerateInterpolator = new DecelerateInterpolator();
-                progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-                progressPaint.setStyle(Paint.Style.STROKE);
-                progressPaint.setStrokeCap(Paint.Cap.ROUND);
-                progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
-                progressPaint.setColor(0xffffffff);
-            }
-            parent = parentView;
-        }
-
-        private void updateAnimation() {
-            long newTime = System.currentTimeMillis();
-            long dt = newTime - lastUpdateTime;
-            lastUpdateTime = newTime;
-
-            if (animatedProgressValue != 1) {
-                radOffset += 360 * dt / 3000.0f;
-                float progressDiff = currentProgress - animationProgressStart;
-                if (progressDiff > 0) {
-                    currentProgressTime += dt;
-                    if (currentProgressTime >= 300) {
-                        animatedProgressValue = currentProgress;
-                        animationProgressStart = currentProgress;
-                        currentProgressTime = 0;
-                    } else {
-                        animatedProgressValue = animationProgressStart + progressDiff * decelerateInterpolator.getInterpolation(currentProgressTime / 300.0f);
-                    }
-                }
-                parent.invalidate();
-            }
-            if (animatedProgressValue >= 1 && previousBackgroundState != -2) {
-                animatedAlphaValue -= dt / 200.0f;
-                if (animatedAlphaValue <= 0) {
-                    animatedAlphaValue = 0.0f;
-                    previousBackgroundState = -2;
-                }
-                parent.invalidate();
-            }
-        }
-
-        public void setProgress(float value, boolean animated) {
-            if (!animated) {
-                animatedProgressValue = value;
-                animationProgressStart = value;
-            } else {
-                animationProgressStart = animatedProgressValue;
-            }
-            currentProgress = value;
-            currentProgressTime = 0;
-        }
-
-        public void setBackgroundState(int state, boolean animated) {
-            lastUpdateTime = System.currentTimeMillis();
-            if (animated && backgroundState != state) {
-                previousBackgroundState = backgroundState;
-                animatedAlphaValue = 1.0f;
-            } else {
-                previousBackgroundState = -2;
-            }
-            backgroundState = state;
-            parent.invalidate();
-        }
-
-        public void onDraw(Canvas canvas) {
-            int x = (canvas.getWidth() - size) / 2;
-            int y = (canvas.getHeight() - size) / 2;
-
-            if (previousBackgroundState >= 0 && previousBackgroundState < 4) {
-                Drawable drawable = progressDrawables[previousBackgroundState];
-                if (drawable != null) {
-                    drawable.setAlpha((int) (255 * animatedAlphaValue));
-                    drawable.setBounds(x, y, x + size, y + size);
-                    drawable.draw(canvas);
-                }
-            }
-
-            if (backgroundState >= 0 && backgroundState < 4) {
-                Drawable drawable = progressDrawables[backgroundState];
-                if (drawable != null) {
-                    if (previousBackgroundState != -2) {
-                        drawable.setAlpha((int) (255 * (1.0f - animatedAlphaValue)));
-                    } else {
-                        drawable.setAlpha(255);
-                    }
-                    drawable.setBounds(x, y, x + size, y + size);
-                    drawable.draw(canvas);
-                }
-            }
-
-            if (backgroundState == 0 || backgroundState == 1 || previousBackgroundState == 0 || previousBackgroundState == 1) {
-                int diff = AndroidUtilities.dp(1);
-                if (previousBackgroundState != -2) {
-                    progressPaint.setAlpha((int) (255 * animatedAlphaValue));
-                } else {
-                    progressPaint.setAlpha(255);
-                }
-                progressRect.set(x + diff, y + diff, x + size - diff, y + size - diff);
-                canvas.drawArc(progressRect, -90 + radOffset, Math.max(4, 360 * animatedProgressValue), false, progressPaint);
-                updateAnimation();
-            }
-        }
-    }
-
-    public static class PlaceProviderObject {
-        public ImageReceiver imageReceiver;
-        public int viewX;
-        public int viewY;
-        public View parentView;
-        public Bitmap thumb;
-        public int user_id;
-        public int index;
-        public int size;
-        public int radius;
-    }
-
-    private class FrameLayoutTouchListener extends FrameLayout {
-        public FrameLayoutTouchListener(Context context) {
-            super(context);
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent event) {
-            return getInstance().onTouchEvent(event);
-        }
-
-        @Override
-        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-            super.onLayout(changed, left, top, right, bottom);
-            getInstance().onLayout(changed, left, top, right, bottom);
-        }
-    }
-
-    private class FrameLayoutDrawer extends FrameLayout {
-        public FrameLayoutDrawer(Context context) {
-            super(context);
-            setWillNotDraw(false);
-        }
-
-        @Override
-        protected void onAnimationEnd() {
-            super.onAnimationEnd();
-            if (getInstance().animationListener != null) {
-                getInstance().animationListener.onAnimationEnd(null);
-            }
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            getInstance().onDraw(canvas);
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 3057afb8e..cf6d62a9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -30,22 +30,22 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.NotificationsController;
-import org.telegram.android.PhotoObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessageObject;
+import org.telegram.android.PhotoObject;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -92,6 +92,59 @@
     private boolean startedMoving = false;
     private Runnable onAnimationEndRunnable = null;
 
+    private class FrameLayoutTouch extends FrameLayoutFixed {
+        public FrameLayoutTouch(Context context) {
+            super(context);
+        }
+
+        public FrameLayoutTouch(Context context, AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        public FrameLayoutTouch(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+        }
+
+        @Override
+        public boolean onInterceptTouchEvent(MotionEvent ev) {
+            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent ev) {
+            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
+        }
+
+        @Override
+        public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+            ((PopupNotificationActivity)getContext()).onTouchEventMy(null);
+            super.requestDisallowInterceptTouchEvent(disallowIntercept);
+        }
+    }
+
+    public class FrameLayoutAnimationListener extends FrameLayoutFixed {
+        public FrameLayoutAnimationListener(Context context) {
+            super(context);
+        }
+
+        public FrameLayoutAnimationListener(Context context, AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        public FrameLayoutAnimationListener(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+        }
+
+        @Override
+        protected void onAnimationEnd() {
+            super.onAnimationEnd();
+            if (onAnimationEndRunnable != null) {
+                onAnimationEndRunnable.run();
+                onAnimationEndRunnable = null;
+            }
+        }
+    }
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -296,7 +349,7 @@ public boolean onTouchEventMy(MotionEvent motionEvent) {
             moveStartX = motionEvent.getX();
         } else if (motionEvent != null && motionEvent.getAction() == MotionEvent.ACTION_MOVE) {
             float x = motionEvent.getX();
-            int diff = (int) (x - moveStartX);
+            int diff = (int)(x - moveStartX);
             if (moveStartX != -1 && !startedMoving) {
                 if (Math.abs(diff) > AndroidUtilities.dp(10)) {
                     startedMoving = true;
@@ -325,7 +378,7 @@ public boolean onTouchEventMy(MotionEvent motionEvent) {
         } else if (motionEvent == null || motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
             if (motionEvent != null && startedMoving) {
                 FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) centerView.getLayoutParams();
-                int diff = (int) (motionEvent.getX() - moveStartX);
+                int diff = (int)(motionEvent.getX() - moveStartX);
                 int width = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
                 int moveDiff = 0;
                 int forceMove = 0;
@@ -373,7 +426,7 @@ public void run() {
                     };
                 }
                 if (moveDiff != 0) {
-                    int time = (int) (Math.abs((float) moveDiff / (float) width) * 200);
+                    int time = (int)(Math.abs((float)moveDiff / (float)width) * 200);
                     TranslateAnimation animation = new TranslateAnimation(0, moveDiff, 0, 0);
                     animation.setDuration(time);
                     centerView.startAnimation(animation);
@@ -456,7 +509,7 @@ public void onClick(View v) {
                 });
             }
 
-            TextView messageText = (TextView) view.findViewById(R.id.message_text);
+            TextView messageText = (TextView)view.findViewById(R.id.message_text);
             BackupImageView imageView = (BackupImageView) view.findViewById(R.id.message_image);
             imageView.imageReceiver.setAspectFit(true);
 
@@ -496,7 +549,7 @@ public void onClick(View v) {
                 imageView.setVisibility(View.VISIBLE);
                 double lat = messageObject.messageOwner.media.geo.lat;
                 double lon = messageObject.messageOwner.media.geo._long;
-                String currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
+                String currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
                 imageView.setImage(currentUrl, null, null);
             }
         } else if (messageObject.type == 2) {
@@ -504,7 +557,7 @@ public void onClick(View v) {
             if (audioViews.size() > 0) {
                 view = audioViews.get(0);
                 audioViews.remove(0);
-                cell = (PopupAudioView) view.findViewWithTag(300);
+                cell = (PopupAudioView)view.findViewWithTag(300);
             } else {
                 view = new FrameLayoutAnimationListener(this);
                 view.addView(getLayoutInflater().inflate(R.layout.popup_audio_layout, null));
@@ -517,7 +570,7 @@ public void onClick(View v) {
                     }
                 });
 
-                ViewGroup audioContainer = (ViewGroup) view.findViewById(R.id.audio_container);
+                ViewGroup audioContainer = (ViewGroup)view.findViewById(R.id.audio_container);
                 cell = new PopupAudioView(this);
                 cell.setTag(300);
                 audioContainer.addView(cell);
@@ -544,7 +597,7 @@ public void onClick(View v) {
                     }
                 });
             }
-            TextView messageText = (TextView) view.findViewById(R.id.message_text);
+            TextView messageText = (TextView)view.findViewById(R.id.message_text);
             messageText.setTag(301);
             messageText.setTextSize(TypedValue.COMPLEX_UNIT_SP, MessagesController.getInstance().fontSize);
             messageText.setText(messageObject.messageText);
@@ -578,7 +631,7 @@ private void reuseView(ViewGroup view) {
         if (view == null) {
             return;
         }
-        int tag = (Integer) view.getTag();
+        int tag = (Integer)view.getTag();
         view.setVisibility(View.GONE);
         if (tag == 1) {
             textViews.add(view);
@@ -682,13 +735,13 @@ private void handleIntent(Intent intent) {
         KeyguardManager km = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
         if (km.inKeyguardRestrictedInputMode() || !ApplicationLoader.isScreenOn) {
             getWindow().addFlags(
-                    WindowManager.LayoutParams.FLAG_DIM_BEHIND |
+                            WindowManager.LayoutParams.FLAG_DIM_BEHIND |
                             WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
                             WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON |
                             WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
         } else {
             getWindow().addFlags(
-                    WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
+                            WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
                             WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON |
                             WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
             getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
@@ -737,15 +790,15 @@ private void openCurrentMessage() {
         }
         Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
         long dialog_id = currentMessageObject.getDialogId();
-        if ((int) dialog_id != 0) {
-            int lower_id = (int) dialog_id;
+        if ((int)dialog_id != 0) {
+            int lower_id = (int)dialog_id;
             if (lower_id < 0) {
                 intent.putExtra("chatId", -lower_id);
             } else {
                 intent.putExtra("userId", lower_id);
             }
         } else {
-            intent.putExtra("encId", (int) (dialog_id >> 32));
+            intent.putExtra("encId", (int)(dialog_id >> 32));
         }
         intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
         intent.setFlags(0x00008000);
@@ -762,8 +815,8 @@ private void updateInterfaceForCurrentMessage(int move) {
         currentUser = null;
         long dialog_id = currentMessageObject.getDialogId();
         chatActivityEnterView.setDialogId(dialog_id);
-        if ((int) dialog_id != 0) {
-            int lower_id = (int) dialog_id;
+        if ((int)dialog_id != 0) {
+            int lower_id = (int)dialog_id;
             if (lower_id > 0) {
                 currentUser = MessagesController.getInstance().getUser(lower_id);
             } else {
@@ -771,7 +824,7 @@ private void updateInterfaceForCurrentMessage(int move) {
                 currentUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
             }
         } else {
-            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
             currentUser = MessagesController.getInstance().getUser(encryptedChat.user_id);
         }
 
@@ -782,7 +835,7 @@ private void updateInterfaceForCurrentMessage(int move) {
             nameTextView.setCompoundDrawablePadding(0);
         } else if (currentUser != null) {
             nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-            if ((int) dialog_id == 0) {
+            if ((int)dialog_id == 0) {
                 nameTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_lock_white, 0, 0, 0);
                 nameTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
             } else {
@@ -919,7 +972,7 @@ public void didReceivedNotification(int id, Object... args) {
             if (currentMessageObject == null) {
                 return;
             }
-            int updateMask = (Integer) args[0];
+            int updateMask = (Integer)args[0];
             if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0) {
                 updateSubtitle();
             }
@@ -933,13 +986,13 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.audioDidReset) {
-            Integer mid = (Integer) args[0];
+            Integer mid = (Integer)args[0];
             if (messageContainer != null) {
                 int count = messageContainer.getChildCount();
                 for (int a = 0; a < count; a++) {
                     View view = messageContainer.getChildAt(a);
-                    if ((Integer) view.getTag() == 3) {
-                        PopupAudioView cell = (PopupAudioView) view.findViewWithTag(300);
+                    if ((Integer)view.getTag() == 3) {
+                        PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
                         if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
                             cell.updateButtonState();
                             break;
@@ -948,13 +1001,13 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.audioProgressDidChanged) {
-            Integer mid = (Integer) args[0];
+            Integer mid = (Integer)args[0];
             if (messageContainer != null) {
                 int count = messageContainer.getChildCount();
                 for (int a = 0; a < count; a++) {
                     View view = messageContainer.getChildAt(a);
-                    if ((Integer) view.getTag() == 3) {
-                        PopupAudioView cell = (PopupAudioView) view.findViewWithTag(300);
+                    if ((Integer)view.getTag() == 3) {
+                        PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
                         if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
                             cell.updateProgress();
                             break;
@@ -967,8 +1020,8 @@ public void didReceivedNotification(int id, Object... args) {
                 int count = messageContainer.getChildCount();
                 for (int a = 0; a < count; a++) {
                     View view = messageContainer.getChildAt(a);
-                    if ((Integer) view.getTag() == 1) {
-                        TextView textView = (TextView) view.findViewWithTag(301);
+                    if ((Integer)view.getTag() == 1) {
+                        TextView textView = (TextView)view.findViewWithTag(301);
                         if (textView != null) {
                             textView.invalidate();
                         }
@@ -1008,57 +1061,4 @@ protected void onFinish() {
             wakeLock.release();
         }
     }
-
-    private class FrameLayoutTouch extends FrameLayoutFixed {
-        public FrameLayoutTouch(Context context) {
-            super(context);
-        }
-
-        public FrameLayoutTouch(Context context, AttributeSet attrs) {
-            super(context, attrs);
-        }
-
-        public FrameLayoutTouch(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-        }
-
-        @Override
-        public boolean onInterceptTouchEvent(MotionEvent ev) {
-            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent ev) {
-            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
-        }
-
-        @Override
-        public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
-            ((PopupNotificationActivity) getContext()).onTouchEventMy(null);
-            super.requestDisallowInterceptTouchEvent(disallowIntercept);
-        }
-    }
-
-    public class FrameLayoutAnimationListener extends FrameLayoutFixed {
-        public FrameLayoutAnimationListener(Context context) {
-            super(context);
-        }
-
-        public FrameLayoutAnimationListener(Context context, AttributeSet attrs) {
-            super(context, attrs);
-        }
-
-        public FrameLayoutAnimationListener(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-        }
-
-        @Override
-        protected void onAnimationEnd() {
-            super.onAnimationEnd();
-            if (onAnimationEndRunnable != null) {
-                onAnimationEndRunnable.run();
-                onAnimationEndRunnable = null;
-            }
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
index 23b6f7fb5..f5ccc5140 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
@@ -21,7 +21,6 @@
 import android.widget.ListView;
 import android.widget.Toast;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
@@ -29,6 +28,7 @@
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
@@ -171,7 +171,7 @@ public void run() {
                         }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("DeleteAccountTitle", R.string.DeleteAccountTitle));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.formatPluralString("Months", 1),
                                 LocaleController.formatPluralString("Months", 3),
                                 LocaleController.formatPluralString("Months", 6),
@@ -227,7 +227,7 @@ public void run() {
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -351,7 +351,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setText(LocaleController.getString("BlockedUsers", R.string.BlockedUsers), true);
                 } else if (i == terminateSessionsRow) {
                     textCell.setText(LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), false);
-                } else if (i == lastSeenRow) {
+                }  else if (i == lastSeenRow) {
                     String value;
                     if (ContactsController.getInstance().getLoadingLastSeenInfo()) {
                         value = LocaleController.getString("Loading", R.string.Loading);
@@ -359,7 +359,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         value = formatRulesString();
                     }
                     textCell.setTextAndValue(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), value, false);
-                } else if (i == deleteAccountRow) {
+                }  else if (i == deleteAccountRow) {
                     String value;
                     if (ContactsController.getInstance().getLoadingDeleteInfo()) {
                         value = LocaleController.getString("Loading", R.string.Loading);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index f6dd4657a..74078ee18 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -31,27 +31,23 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.android.SecretChatHelper;
 import org.telegram.android.SendMessagesHelper;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
+import org.telegram.android.MessageObject;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.AnimationCompat.ViewProxy;
 import org.telegram.ui.Cells.DividerCell;
@@ -60,9 +56,13 @@
 import org.telegram.ui.Cells.TextCell;
 import org.telegram.ui.Cells.TextDetailCell;
 import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.AvatarUpdater;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.IdenticonDrawable;
 
 import java.util.ArrayList;
@@ -73,33 +73,39 @@
 
 public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
 
-    private final static int add_contact = 1;
-    private final static int block_contact = 2;
-    private final static int share_contact = 3;
-    private final static int edit_contact = 4;
-    private final static int delete_contact = 5;
-    private final static int add_member = 6;
-    private final static int leave_group = 7;
-    private final static int edit_name = 8;
     private ListView listView;
     private ListAdapter listAdapter;
     private BackupImageView avatarImage;
     private TextView nameTextView;
     private TextView onlineTextView;
     private ImageView writeButton;
+
     private int user_id;
     private int chat_id;
     private long dialog_id;
     private boolean creatingChat;
     private boolean userBlocked;
+
     private AvatarUpdater avatarUpdater;
     private TLRPC.ChatParticipants info;
     private TLRPC.TL_chatParticipant selectedUser;
     private int onlineCount = -1;
     private ArrayList<Integer> sortedUsers;
+
     private TLRPC.EncryptedChat currentEncryptedChat;
     private TLRPC.Chat currentChat;
+
     private int totalMediaCount = -1;
+
+    private final static int add_contact = 1;
+    private final static int block_contact = 2;
+    private final static int share_contact = 3;
+    private final static int edit_contact = 4;
+    private final static int delete_contact = 5;
+    private final static int add_member = 6;
+    private final static int leave_group = 7;
+    private final static int edit_name = 8;
+
     private int overscrollRow;
     private int emptyRow;
     private int emptyRowChat;
@@ -432,7 +438,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                         presentFragment(new MediaActivity(args));
                     } else if (i == settingsKeyRow) {
                         Bundle args = new Bundle();
-                        args.putInt("chat_id", (int) (dialog_id >> 32));
+                        args.putInt("chat_id", (int)(dialog_id >> 32));
                         presentFragment(new IdenticonActivity(args));
                     } else if (i == settingsTimerRow) {
                         if (getParentActivity() == null) {
@@ -467,7 +473,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         }
 
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setItems(new CharSequence[]{LocaleController.getString("Call", R.string.Call), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                        builder.setItems(new CharSequence[] {LocaleController.getString("Call", R.string.Call), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
                                 if (i == 0) {
@@ -479,11 +485,11 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                         FileLog.e("tmessages", e);
                                     }
                                 } else if (i == 1) {
-                                    if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                                    if(Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
                                         android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                         clipboard.setText("+" + user.phone);
                                     } else {
-                                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                         android.content.ClipData clip = android.content.ClipData.newPlainText("label", "+" + user.phone);
                                         clipboard.setPrimaryClip(clip);
                                     }
@@ -620,7 +626,7 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun
 
             updateProfileData();
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -680,14 +686,14 @@ private void needLayout() {
         }
 
         if (avatarImage != null) {
-            float diff = actionBar.getExtraHeight() / (float) AndroidUtilities.dp(88);
+            float diff = actionBar.getExtraHeight() / (float)AndroidUtilities.dp(88);
             float diffm = 1.0f - diff;
 
-            int avatarSize = 42 + (int) (18 * diff);
-            int avatarX = 17 + (int) (47 * diffm);
-            int avatarY = AndroidUtilities.dp(22) - (int) ((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
-            int nameX = 97 + (int) (21 * diffm);
-            int nameEndX = 16 + (int) (32 * diffm);
+            int avatarSize = 42 + (int)(18 * diff);
+            int avatarX = 17 + (int)(47 * diffm);
+            int avatarY = AndroidUtilities.dp(22) - (int)((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
+            int nameX = 97 + (int)(21 * diffm);
+            int nameEndX = 16 + (int)(32 * diffm);
             float nameFontSize = 20 - 2 * diffm;
             int nameY = avatarY + AndroidUtilities.dp(29 - 10 * diffm);
             int statusY = avatarY + AndroidUtilities.dp(8 - 7 * diffm);
@@ -757,7 +763,7 @@ public boolean needAddActionBar() {
     @Override
     public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if (user_id != 0) {
                 if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
                     updateProfileData();
@@ -785,7 +791,7 @@ public void didReceivedNotification(int id, final Object... args) {
         } else if (id == NotificationCenter.contactsDidLoaded) {
             createActionBarMenu();
         } else if (id == NotificationCenter.mediaCountDidLoaded) {
-            long uid = (Long) args[0];
+            long uid = (Long)args[0];
             if (user_id != 0) {
                 if (uid > 0 && user_id == uid && dialog_id == 0 || dialog_id != 0 && dialog_id == uid) {
                     totalMediaCount = (Integer) args[1];
@@ -794,9 +800,9 @@ public void didReceivedNotification(int id, final Object... args) {
                     }
                 }
             } else if (chat_id != 0) {
-                int lower_part = (int) uid;
+                int lower_part = (int)uid;
                 if (lower_part < 0 && chat_id == -lower_part) {
-                    totalMediaCount = (Integer) args[1];
+                    totalMediaCount = (Integer)args[1];
                     if (listView != null) {
                         listView.invalidateViews();
                     }
@@ -816,7 +822,7 @@ public void run() {
                 });
             }
         } else if (id == NotificationCenter.encryptedChatUpdated) {
-            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) args[0];
+            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)args[0];
             if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
                 currentEncryptedChat = chat;
                 updateRowsIds();
@@ -832,9 +838,9 @@ public void run() {
                 createActionBarMenu();
             }
         } else if (id == NotificationCenter.chatInfoDidLoaded) {
-            int chatId = (Integer) args[0];
+            int chatId = (Integer)args[0];
             if (chatId == chat_id) {
-                info = (TLRPC.ChatParticipants) args[1];
+                info = (TLRPC.ChatParticipants)args[1];
                 updateOnlineCount();
                 updateRowsIds();
                 if (listAdapter != null) {
@@ -894,8 +900,7 @@ public void onResume() {
     }
 
     @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-    }
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
 
     @Override
     public void willHidePhotoViewer() {
@@ -903,26 +908,19 @@ public void willHidePhotoViewer() {
     }
 
     @Override
-    public boolean isPhotoChecked(int index) {
-        return false;
-    }
+    public boolean isPhotoChecked(int index) { return false; }
 
     @Override
-    public void setPhotoChecked(int index) {
-    }
+    public void setPhotoChecked(int index) { }
 
     @Override
-    public void cancelButtonPressed() {
-    }
+    public void cancelButtonPressed() { }
 
     @Override
-    public void sendButtonPressed(int index) {
-    }
+    public void sendButtonPressed(int index) { }
 
     @Override
-    public int getSelectedCount() {
-        return 0;
-    }
+    public int getSelectedCount() { return 0; }
 
     private void updateOnlineCount() {
         if (info == null) {
@@ -1158,7 +1156,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
             Bundle args = new Bundle();
             args.putBoolean("scrollToTopOnResume", true);
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-            int lower_part = (int) dialog_id;
+            int lower_part = (int)dialog_id;
             if (lower_part != 0) {
                 if (lower_part > 0) {
                     args.putInt("user_id", lower_part);
@@ -1166,7 +1164,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                     args.putInt("chat_id", -lower_part);
                 }
             } else {
-                args.putInt("enc_id", (int) (dialog_id >> 32));
+                args.putInt("enc_id", (int)(dialog_id >> 32));
             }
             presentFragment(new ChatActivity(args), true);
             removeSelfFromStack();
@@ -1276,7 +1274,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     }
                     textCell.setTextAndValue(LocaleController.getString("SharedMedia", R.string.SharedMedia), value);
                 } else if (i == settingsTimerRow) {
-                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
                     String value;
                     if (encryptedChat.ttl == 0) {
                         value = LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
@@ -1291,7 +1289,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setTextColor(0xff37a919);
                 } else if (i == settingsKeyRow) {
                     IdenticonDrawable identiconDrawable = new IdenticonDrawable();
-                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
+                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
                     identiconDrawable.setEncryptedChat(encryptedChat);
                     textCell.setTextAndValueDrawable(LocaleController.getString("EncryptionKey", R.string.EncryptionKey), identiconDrawable);
                 }
@@ -1301,7 +1299,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 }
 
                 TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
-                ((UserCell) view).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
+                ((UserCell)view).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
             } else if (type == 5) {
                 if (view == null) {
                     view = new ShadowSectionCell(mContext);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
index 556e08b7b..777fc729a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -27,23 +27,23 @@
 import android.widget.FrameLayout;
 import android.widget.ListView;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.TextColorCell;
 import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.ColorPickerView;
 
@@ -120,7 +120,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                     if (i == settingsVibrateRow) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("Disabled", R.string.Disabled),
                                 LocaleController.getString("SettingsDefault", R.string.SettingsDefault),
                                 LocaleController.getString("SystemDefault", R.string.SystemDefault),
@@ -156,7 +156,7 @@ public void onClick(DialogInterface dialog, int which) {
                         }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("Default", R.string.Default),
                                 LocaleController.getString("Enabled", R.string.Enabled),
                                 LocaleController.getString("Disabled", R.string.Disabled)
@@ -212,15 +212,15 @@ public void onClick(DialogInterface dialog, int which) {
                             return;
                         }
 
-                        LayoutInflater li = (LayoutInflater) getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                         view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
-                        final ColorPickerView colorPickerView = (ColorPickerView) view.findViewById(R.id.color_picker);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
 
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         if (preferences.contains("color_" + dialog_id)) {
                             colorPickerView.setOldCenterColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
                         } else {
-                            if ((int) dialog_id < 0) {
+                            if ((int)dialog_id < 0) {
                                 colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
                             } else {
                                 colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
@@ -264,7 +264,7 @@ public void onClick(DialogInterface dialog, int which) {
                     } else if (i == settingsPriorityRow) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("SettingsDefault", R.string.SettingsDefault),
                                 LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault),
                                 LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh),
@@ -290,7 +290,7 @@ public void onClick(DialogInterface dialog, int which) {
                 }
             });
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -299,7 +299,7 @@ public void onClick(DialogInterface dialog, int which) {
     }
 
     public void updateServerNotificationsSettings() {
-        if ((int) dialog_id == 0) {
+        if ((int)dialog_id == 0) {
             return;
         }
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
@@ -312,21 +312,21 @@ public void updateServerNotificationsSettings() {
 
         req.peer = new TLRPC.TL_inputNotifyPeer();
 
-        if ((int) dialog_id < 0) {
-            ((TLRPC.TL_inputNotifyPeer) req.peer).peer = new TLRPC.TL_inputPeerChat();
-            ((TLRPC.TL_inputNotifyPeer) req.peer).peer.chat_id = -(int) dialog_id;
+        if ((int)dialog_id < 0) {
+            ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerChat();
+            ((TLRPC.TL_inputNotifyPeer)req.peer).peer.chat_id = -(int)dialog_id;
         } else {
-            TLRPC.User user = MessagesController.getInstance().getUser((int) dialog_id);
+            TLRPC.User user = MessagesController.getInstance().getUser((int)dialog_id);
             if (user == null) {
                 return;
             }
             if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                ((TLRPC.TL_inputNotifyPeer) req.peer).peer = new TLRPC.TL_inputPeerForeign();
-                ((TLRPC.TL_inputNotifyPeer) req.peer).peer.access_hash = user.access_hash;
+                ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerForeign();
+                ((TLRPC.TL_inputNotifyPeer)req.peer).peer.access_hash = user.access_hash;
             } else {
-                ((TLRPC.TL_inputNotifyPeer) req.peer).peer = new TLRPC.TL_inputPeerContact();
+                ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerContact();
             }
-            ((TLRPC.TL_inputNotifyPeer) req.peer).peer.user_id = (int) dialog_id;
+            ((TLRPC.TL_inputNotifyPeer)req.peer).peer.user_id = (int)dialog_id;
         }
 
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
@@ -348,7 +348,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
             if (ringtone != null) {
                 Ringtone rng = RingtoneManager.getRingtone(ApplicationLoader.applicationContext, ringtone);
                 if (rng != null) {
-                    if (ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
+                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
                         name = LocaleController.getString("Default", R.string.Default);
                     } else {
                         name = rng.getTitle(getParentActivity());
@@ -482,7 +482,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 if (preferences.contains("color_" + dialog_id)) {
                     textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("color_" + dialog_id, 0xff00ff00), false);
                 } else {
-                    if ((int) dialog_id < 0) {
+                    if ((int)dialog_id < 0) {
                         textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("GroupLed", 0xff00ff00), false);
                     } else {
                         textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("MessagesLed", 0xff00ff00), false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
index 735355eb0..89a468f85 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
@@ -29,7 +29,6 @@
 import android.view.WindowManager;
 import android.widget.FrameLayout;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
 import org.telegram.android.ImageReceiver;
@@ -38,6 +37,7 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.TLRPC;
 
 import java.io.File;
@@ -45,7 +45,105 @@
 
 public class SecretPhotoViewer implements NotificationCenter.NotificationCenterDelegate {
 
-    private static volatile SecretPhotoViewer Instance = null;
+    private class FrameLayoutDrawer extends FrameLayout {
+        public FrameLayoutDrawer(Context context) {
+            super(context);
+            setWillNotDraw(false);
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            getInstance().onDraw(canvas);
+        }
+    }
+
+    private class FrameLayoutTouchListener extends FrameLayout {
+        public FrameLayoutTouchListener(Context context) {
+            super(context);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent event) {
+            FileLog.e("tmessages", event.toString());
+            return super.onTouchEvent(event);
+        }
+    }
+
+    private class SecretDeleteTimer extends FrameLayout {
+        private String currentInfoString;
+        private int infoWidth;
+        private TextPaint infoPaint = null;
+        private StaticLayout infoLayout = null;
+        private Paint deleteProgressPaint;
+        private RectF deleteProgressRect = new RectF();
+        private Drawable drawable = null;
+
+        public SecretDeleteTimer(Context context) {
+            super(context);
+            setWillNotDraw(false);
+
+            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            infoPaint.setTextSize(AndroidUtilities.dp(15));
+            infoPaint.setColor(0xffffffff);
+
+            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            deleteProgressPaint.setColor(0xffe6e6e6);
+
+            drawable = getResources().getDrawable(R.drawable.circle1);
+        }
+
+        private void updateSecretTimeText() {
+            if (currentMessageObject == null) {
+                return;
+            }
+            String str = currentMessageObject.getSecretTimeString();
+            if (str == null) {
+                return;
+            }
+            if (currentInfoString == null || !currentInfoString.equals(str)) {
+                currentInfoString = str;
+                infoWidth = (int)Math.ceil(infoPaint.measureText(currentInfoString));
+                CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
+                infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                invalidate();
+            }
+        }
+
+        @Override
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+            deleteProgressRect.set(getMeasuredWidth() - AndroidUtilities.dp(30), AndroidUtilities.dp(2), getMeasuredWidth() - AndroidUtilities.dp(2), AndroidUtilities.dp(30));
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            if (currentMessageObject == null || currentMessageObject.messageOwner.destroyTime == 0) {
+                return;
+            }
+
+            if (drawable != null) {
+                drawable.setBounds(getMeasuredWidth() - AndroidUtilities.dp(32), 0, getMeasuredWidth(), AndroidUtilities.dp(32));
+                drawable.draw(canvas);
+            }
+
+            long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
+            float progress = Math.max(0, (long)currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
+            canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
+            if (progress != 0) {
+                int offset = AndroidUtilities.dp(2);
+                invalidate((int)deleteProgressRect.left - offset, (int)deleteProgressRect.top - offset, (int)deleteProgressRect.right + offset * 2, (int)deleteProgressRect.bottom + offset * 2);
+            }
+            updateSecretTimeText();
+
+            if (infoLayout != null) {
+                canvas.save();
+                canvas.translate(getMeasuredWidth() - AndroidUtilities.dp(38) - infoWidth, AndroidUtilities.dp(7));
+                infoLayout.draw(canvas);
+                canvas.restore();
+            }
+        }
+    }
+
     private Activity parentActivity;
     private WindowManager.LayoutParams windowLayoutParams;
     private FrameLayoutTouchListener windowView;
@@ -53,8 +151,10 @@
     private ImageReceiver centerImage = new ImageReceiver();
     private SecretDeleteTimer secretDeleteTimer;
     private boolean isVisible = false;
+
     private MessageObject currentMessageObject = null;
 
+    private static volatile SecretPhotoViewer Instance = null;
     public static SecretPhotoViewer getInstance() {
         SecretPhotoViewer localInstance = Instance;
         if (localInstance == null) {
@@ -75,7 +175,7 @@ public void didReceivedNotification(int id, Object... args) {
             if (currentMessageObject == null) {
                 return;
             }
-            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>) args[0];
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
             if (markAsDeletedMessages.contains(currentMessageObject.messageOwner.id)) {
                 closePhoto();
             }
@@ -83,8 +183,8 @@ public void didReceivedNotification(int id, Object... args) {
             if (currentMessageObject == null || secretDeleteTimer == null) {
                 return;
             }
-            SparseArray<ArrayList<Integer>> mids = (SparseArray<ArrayList<Integer>>) args[0];
-            for (int i = 0; i < mids.size(); i++) {
+            SparseArray<ArrayList<Integer>> mids = (SparseArray<ArrayList<Integer>>)args[0];
+            for(int i = 0; i < mids.size(); i++) {
                 int key = mids.keyAt(i);
                 ArrayList<Integer> arr = mids.get(key);
                 for (Integer mid : arr) {
@@ -112,7 +212,7 @@ public void setParentActivity(Activity activity) {
         containerView = new FrameLayoutDrawer(activity);
         containerView.setFocusable(false);
         windowView.addView(containerView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) containerView.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)containerView.getLayoutParams();
         layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
@@ -129,7 +229,7 @@ public boolean onTouch(View v, MotionEvent event) {
 
         secretDeleteTimer = new SecretDeleteTimer(activity);
         containerView.addView(secretDeleteTimer);
-        layoutParams = (FrameLayout.LayoutParams) secretDeleteTimer.getLayoutParams();
+        layoutParams = (FrameLayout.LayoutParams)secretDeleteTimer.getLayoutParams();
         layoutParams.gravity = Gravity.TOP | Gravity.RIGHT;
         layoutParams.width = AndroidUtilities.dp(100);
         layoutParams.height = AndroidUtilities.dp(32);
@@ -217,7 +317,7 @@ public void closePhoto() {
         AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
-                centerImage.setImageBitmap((Bitmap) null);
+                centerImage.setImageBitmap((Bitmap)null);
             }
         });
         try {
@@ -269,103 +369,4 @@ private void onDraw(Canvas canvas) {
         }
         canvas.restore();
     }
-
-    private class FrameLayoutDrawer extends FrameLayout {
-        public FrameLayoutDrawer(Context context) {
-            super(context);
-            setWillNotDraw(false);
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            getInstance().onDraw(canvas);
-        }
-    }
-
-    private class FrameLayoutTouchListener extends FrameLayout {
-        public FrameLayoutTouchListener(Context context) {
-            super(context);
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent event) {
-            FileLog.e("tmessages", event.toString());
-            return super.onTouchEvent(event);
-        }
-    }
-
-    private class SecretDeleteTimer extends FrameLayout {
-        private String currentInfoString;
-        private int infoWidth;
-        private TextPaint infoPaint = null;
-        private StaticLayout infoLayout = null;
-        private Paint deleteProgressPaint;
-        private RectF deleteProgressRect = new RectF();
-        private Drawable drawable = null;
-
-        public SecretDeleteTimer(Context context) {
-            super(context);
-            setWillNotDraw(false);
-
-            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            infoPaint.setTextSize(AndroidUtilities.dp(15));
-            infoPaint.setColor(0xffffffff);
-
-            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            deleteProgressPaint.setColor(0xffe6e6e6);
-
-            drawable = getResources().getDrawable(R.drawable.circle1);
-        }
-
-        private void updateSecretTimeText() {
-            if (currentMessageObject == null) {
-                return;
-            }
-            String str = currentMessageObject.getSecretTimeString();
-            if (str == null) {
-                return;
-            }
-            if (currentInfoString == null || !currentInfoString.equals(str)) {
-                currentInfoString = str;
-                infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-                CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-                infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                invalidate();
-            }
-        }
-
-        @Override
-        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-            deleteProgressRect.set(getMeasuredWidth() - AndroidUtilities.dp(30), AndroidUtilities.dp(2), getMeasuredWidth() - AndroidUtilities.dp(2), AndroidUtilities.dp(30));
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            if (currentMessageObject == null || currentMessageObject.messageOwner.destroyTime == 0) {
-                return;
-            }
-
-            if (drawable != null) {
-                drawable.setBounds(getMeasuredWidth() - AndroidUtilities.dp(32), 0, getMeasuredWidth(), AndroidUtilities.dp(32));
-                drawable.draw(canvas);
-            }
-
-            long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
-            float progress = Math.max(0, (long) currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
-            canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
-            if (progress != 0) {
-                int offset = AndroidUtilities.dp(2);
-                invalidate((int) deleteProgressRect.left - offset, (int) deleteProgressRect.top - offset, (int) deleteProgressRect.right + offset * 2, (int) deleteProgressRect.bottom + offset * 2);
-            }
-            updateSecretTimeText();
-
-            if (infoLayout != null) {
-                canvas.save();
-                canvas.translate(getMeasuredWidth() - AndroidUtilities.dp(38) - infoWidth, AndroidUtilities.dp(7));
-                infoLayout.draw(canvas);
-                canvas.restore();
-            }
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 1b955446a..aab1aa1cd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -38,43 +38,43 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.ConnectionsManager;
+import org.telegram.android.LocaleController;
 import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.SerializedData;
 import org.telegram.messenger.TLClassStore;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
+import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.android.MessageObject;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.TextInfoCell;
 import org.telegram.ui.Cells.EmptyCell;
 import org.telegram.ui.Cells.HeaderCell;
 import org.telegram.ui.Cells.ShadowSectionCell;
 import org.telegram.ui.Cells.TextCheckCell;
 import org.telegram.ui.Cells.TextDetailSettingsCell;
-import org.telegram.ui.Cells.TextInfoCell;
 import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.AvatarUpdater;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.NumberPicker;
 
 import java.io.File;
@@ -83,8 +83,6 @@
 
 public class SettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
 
-    private final static int edit_name = 1;
-    private final static int logout = 2;
     private ListView listView;
     private ListAdapter listAdapter;
     private BackupImageView avatarImage;
@@ -92,6 +90,7 @@
     private TextView onlineTextView;
     private ImageView writeButton;
     private AvatarUpdater avatarUpdater = new AvatarUpdater();
+
     private int overscrollRow;
     private int emptyRow;
     private int numberSectionRow;
@@ -127,6 +126,21 @@
     private int contactsSortRow;
     private int rowCount;
 
+    private final static int edit_name = 1;
+    private final static int logout = 2;
+
+    private static class LinkMovementMethodMy extends LinkMovementMethod {
+        @Override
+        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
+            try {
+                return super.onTouchEvent(widget, buffer, event);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            return false;
+        }
+    }
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
@@ -156,7 +170,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             if (user == null) {
                                 return;
                             }
-                            TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo) response;
+                            TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo)response;
                             ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
                             TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100);
                             TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000);
@@ -483,7 +497,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("SortBy", R.string.SortBy));
-                        builder.setItems(new CharSequence[]{
+                        builder.setItems(new CharSequence[] {
                                 LocaleController.getString("Default", R.string.Default),
                                 LocaleController.getString("SortFirstName", R.string.SortFirstName),
                                 LocaleController.getString("SortLastName", R.string.SortLastName)
@@ -609,10 +623,10 @@ public void onClick(View v) {
                     }
                     boolean fullMenu = false;
                     if (user.photo != null && user.photo.photo_big != null && !(user.photo instanceof TLRPC.TL_userProfilePhotoEmpty)) {
-                        items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                        items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
                         fullMenu = true;
                     } else {
-                        items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                        items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
                     }
 
                     final boolean full = fullMenu;
@@ -659,7 +673,7 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun
 
             updateUserData();
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -699,8 +713,7 @@ protected void onDialogDismiss() {
     }
 
     @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-    }
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
 
     @Override
     public void willHidePhotoViewer() {
@@ -708,26 +721,19 @@ public void willHidePhotoViewer() {
     }
 
     @Override
-    public boolean isPhotoChecked(int index) {
-        return false;
-    }
+    public boolean isPhotoChecked(int index) { return false; }
 
     @Override
-    public void setPhotoChecked(int index) {
-    }
+    public void setPhotoChecked(int index) { }
 
     @Override
-    public void cancelButtonPressed() {
-    }
+    public void cancelButtonPressed() { }
 
     @Override
-    public void sendButtonPressed(int index) {
-    }
+    public void sendButtonPressed(int index) { }
 
     @Override
-    public int getSelectedCount() {
-        return 0;
-    }
+    public int getSelectedCount() { return 0; }
 
     public void performAskAQuestion() {
         final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -742,7 +748,7 @@ public void performAskAQuestion() {
                         byte[] datacentersBytes = Base64.decode(userString, Base64.DEFAULT);
                         if (datacentersBytes != null) {
                             SerializedData data = new SerializedData(datacentersBytes);
-                            supportUser = (TLRPC.User) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            supportUser = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
                             if (supportUser != null && supportUser.id == 333000) {
                                 supportUser = null;
                             }
@@ -766,7 +772,7 @@ public void performAskAQuestion() {
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
 
-                        final TLRPC.TL_help_support res = (TLRPC.TL_help_support) response;
+                        final TLRPC.TL_help_support res = (TLRPC.TL_help_support)response;
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
@@ -834,7 +840,7 @@ public void restoreSelfArgs(Bundle args) {
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
+            int mask = (Integer)args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 updateUserData();
             }
@@ -865,14 +871,14 @@ private void needLayout() {
         }
 
         if (avatarImage != null) {
-            float diff = actionBar.getExtraHeight() / (float) AndroidUtilities.dp(88);
+            float diff = actionBar.getExtraHeight() / (float)AndroidUtilities.dp(88);
             float diffm = 1.0f - diff;
 
-            int avatarSize = 42 + (int) (18 * diff);
-            int avatarX = 17 + (int) (47 * diffm);
-            int avatarY = AndroidUtilities.dp(22) - (int) ((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
-            int nameX = 97 + (int) (21 * diffm);
-            int nameEndX = 16 + (int) (32 * diffm);
+            int avatarSize = 42 + (int)(18 * diff);
+            int avatarX = 17 + (int)(47 * diffm);
+            int avatarY = AndroidUtilities.dp(22) - (int)((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
+            int nameX = 97 + (int)(21 * diffm);
+            int nameEndX = 16 + (int)(32 * diffm);
             float nameFontSize = 20 - 2 * diffm;
             int nameY = avatarY + AndroidUtilities.dp(29 - 10 * diffm);
             int statusY = avatarY + AndroidUtilities.dp(8 - 7 * diffm);
@@ -949,7 +955,7 @@ private void sendLogs() {
         try {
             ArrayList<Uri> uris = new ArrayList<Uri>();
             File sdCard = ApplicationLoader.applicationContext.getExternalFilesDir(null);
-            File dir = new File(sdCard.getAbsolutePath() + "/logs");
+            File dir = new File (sdCard.getAbsolutePath() + "/logs");
             File[] files = dir.listFiles();
             for (File file : files) {
                 uris.add(Uri.fromFile(file));
@@ -959,7 +965,7 @@ private void sendLogs() {
                 return;
             }
             Intent i = new Intent(Intent.ACTION_SEND_MULTIPLE);
-            i.setType("message/rfc822");
+            i.setType("message/rfc822") ;
             i.putExtra(Intent.EXTRA_EMAIL, new String[]{BuildVars.SEND_LOGS_EMAIL});
             i.putExtra(Intent.EXTRA_SUBJECT, "last logs");
             i.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris);
@@ -969,18 +975,6 @@ private void sendLogs() {
         }
     }
 
-    private static class LinkMovementMethodMy extends LinkMovementMethod {
-        @Override
-        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
-            try {
-                return super.onTouchEvent(widget, buffer, event);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            return false;
-        }
-    }
-
     private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
@@ -1191,8 +1185,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         public int getItemViewType(int i) {
             if (i == emptyRow || i == overscrollRow) {
                 return 0;
-            }
-            if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
+            } if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
                 return 1;
             } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow) {
                 return 3;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java
index 7684a66ba..ba9d2988f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java
@@ -8,15 +8,12 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import com.spotify.sdk.android.playback.Player;
-
-import org.telegram.R;
 import org.telegram.android.LocaleController;
+import org.telegram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.SongAdapter;
 
 public class SongSelectActivity extends BaseFragment {
 
@@ -30,8 +27,6 @@
     private SongSelectActivityDelegate delegate;
     private TextView emptyView;
     private ListView listView;
-    private SongAdapter songAdapter;
-    private Player mPlayer;
 
     public void setDelegate(SongSelectActivityDelegate delegate) {
         this.delegate = delegate;
@@ -73,26 +68,19 @@ public void onTextChanged(EditText editText) {
                 }
             });
 
-            songAdapter = new SongAdapter(getParentActivity());
-
             fragmentView = inflater.inflate(R.layout.song_select_layout, container, false);
-
-            emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
-            emptyView.setText(LocaleController.getString("NoSongs", R.string.NoSongs));
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
             emptyView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
-
-            listView = (ListView) fragmentView.findViewById(R.id.listView);
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
             listView.setEmptyView(emptyView);
-            listView.setAdapter(songAdapter);
-
 
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index 4880fd51b..57c429ea5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -40,12 +40,12 @@
 import com.googlecode.mp4parser.util.Matrix;
 import com.googlecode.mp4parser.util.Path;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -59,7 +59,6 @@
 @TargetApi(16)
 public class VideoEditorActivity extends BaseFragment implements TextureView.SurfaceTextureListener {
 
-    private final Object sync = new Object();
     private boolean created = false;
     private MediaPlayer videoPlayer = null;
     private VideoTimelineView videoTimelineView = null;
@@ -73,10 +72,13 @@
     private View controlView = null;
     private CheckBox compressVideo = null;
     private boolean playerPrepared = false;
+
     private String videoPath = null;
     private float lastProgress = 0;
     private boolean needSeek = false;
     private VideoEditorActivityDelegate delegate;
+
+    private final Object sync = new Object();
     private Thread thread = null;
 
     private int rotationValue = 0;
@@ -86,6 +88,18 @@
     private int resultHeight = 0;
     private int bitrate = 0;
     private float videoDuration = 0;
+    private long startTime = 0;
+    private long endTime = 0;
+    private long audioFramesSize = 0;
+    private long videoFramesSize = 0;
+    private int estimatedSize = 0;
+    private long esimatedDuration = 0;
+    private long originalSize = 0;
+
+    public interface VideoEditorActivityDelegate {
+        public abstract void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration);
+    }
+
     private Runnable progressRunnable = new Runnable() {
         @Override
         public void run() {
@@ -141,13 +155,6 @@ public void run() {
             }
         }
     };
-    private long startTime = 0;
-    private long endTime = 0;
-    private long audioFramesSize = 0;
-    private long videoFramesSize = 0;
-    private int estimatedSize = 0;
-    private long esimatedDuration = 0;
-    private long originalSize = 0;
 
     public VideoEditorActivity(Bundle args) {
         super(args);
@@ -476,8 +483,8 @@ private void updateVideoOriginalInfo() {
         int width = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
         int height = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
         String videoDimension = String.format("%dx%d", width, height);
-        long duration = (long) Math.ceil(videoDuration);
-        int minutes = (int) (duration / 1000 / 60);
+        long duration = (long)Math.ceil(videoDuration);
+        int minutes = (int)(duration / 1000 / 60);
         int seconds = (int) Math.ceil(duration / 1000) - minutes * 60;
         String videoTimeSize = String.format("%d:%02d, %s", minutes, seconds, Utilities.formatFileSize(originalSize));
         originalSizeTextView.setText(String.format("%s, %s", videoDimension, videoTimeSize));
@@ -487,7 +494,7 @@ private void updateVideoEditedInfo() {
         if (editedSizeTextView == null) {
             return;
         }
-        esimatedDuration = (long) Math.ceil((videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * videoDuration);
+        esimatedDuration = (long)Math.ceil((videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * videoDuration);
 
         int width = 0;
         int height = 0;
@@ -495,11 +502,11 @@ private void updateVideoEditedInfo() {
         if (compressVideo.getVisibility() == View.GONE || compressVideo.getVisibility() == View.VISIBLE && !compressVideo.isChecked()) {
             width = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
             height = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
-            estimatedSize = (int) (originalSize * ((float) esimatedDuration / videoDuration));
+            estimatedSize = (int)(originalSize * ((float)esimatedDuration / videoDuration));
         } else {
             width = rotationValue == 90 || rotationValue == 270 ? resultHeight : resultWidth;
             height = rotationValue == 90 || rotationValue == 270 ? resultWidth : resultHeight;
-            estimatedSize = calculateEstimatedSize((float) esimatedDuration / videoDuration);
+            estimatedSize = calculateEstimatedSize((float)esimatedDuration / videoDuration);
         }
 
         if (videoTimelineView.getLeftProgress() == 0) {
@@ -514,7 +521,7 @@ private void updateVideoEditedInfo() {
         }
 
         String videoDimension = String.format("%dx%d", width, height);
-        int minutes = (int) (esimatedDuration / 1000 / 60);
+        int minutes = (int)(esimatedDuration / 1000 / 60);
         int seconds = (int) Math.ceil(esimatedDuration / 1000) - minutes * 60;
         String videoTimeSize = String.format("%d:%02d, ~%s", minutes, seconds, Utilities.formatFileSize(estimatedSize));
         editedSizeTextView.setText(String.format("%s, %s", videoDimension, videoTimeSize));
@@ -711,7 +718,7 @@ private boolean processOpenVideo() {
             }
 
             for (Box box : boxes) {
-                TrackBox trackBox = (TrackBox) box;
+                TrackBox trackBox = (TrackBox)box;
                 long sampleSizes = 0;
                 long trackBitrate = 0;
                 try {
@@ -721,15 +728,15 @@ private boolean processOpenVideo() {
                     for (long size : sampleSizeBox.getSampleSizes()) {
                         sampleSizes += size;
                     }
-                    videoDuration = (float) mediaHeaderBox.getDuration() / (float) mediaHeaderBox.getTimescale();
-                    trackBitrate = (int) (sampleSizes * 8 / videoDuration);
+                    videoDuration = (float)mediaHeaderBox.getDuration() / (float)mediaHeaderBox.getTimescale();
+                    trackBitrate = (int)(sampleSizes * 8 / videoDuration);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
                 TrackHeaderBox headerBox = trackBox.getTrackHeaderBox();
                 if (headerBox.getWidth() != 0 && headerBox.getHeight() != 0) {
                     trackHeaderBox = headerBox;
-                    bitrate = (int) (trackBitrate / 100000 * 100000);
+                    bitrate = (int)(trackBitrate / 100000 * 100000);
                     if (bitrate > 900000) {
                         bitrate = 900000;
                     }
@@ -750,8 +757,8 @@ private boolean processOpenVideo() {
             } else if (matrix.equals(Matrix.ROTATE_270)) {
                 rotationValue = 270;
             }
-            resultWidth = originalWidth = (int) trackHeaderBox.getWidth();
-            resultHeight = originalHeight = (int) trackHeaderBox.getHeight();
+            resultWidth = originalWidth = (int)trackHeaderBox.getWidth();
+            resultHeight = originalHeight = (int)trackHeaderBox.getHeight();
 
             if (resultWidth > 640 || resultHeight > 640) {
                 float scale = resultWidth > resultHeight ? 640.0f / resultWidth : 640.0f / resultHeight;
@@ -759,7 +766,7 @@ private boolean processOpenVideo() {
                 resultHeight *= scale;
                 if (bitrate != 0) {
                     bitrate *= Math.max(0.5f, scale);
-                    videoFramesSize = (long) (bitrate / 8 * videoDuration);
+                    videoFramesSize = (long)(bitrate / 8 * videoDuration);
                 }
             }
 
@@ -780,12 +787,8 @@ private boolean processOpenVideo() {
     }
 
     private int calculateEstimatedSize(float timeDelta) {
-        int size = (int) ((audioFramesSize + videoFramesSize) * timeDelta);
+        int size = (int)((audioFramesSize + videoFramesSize) * timeDelta);
         size += size / (32 * 1024) * 16;
         return size;
     }
-
-    public interface VideoEditorActivityDelegate {
-        public abstract void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration);
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index d4172b53b..8be2b4b99 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -29,25 +29,25 @@
 import android.widget.ImageView;
 import android.widget.ProgressBar;
 
-import org.telegram.R;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.R;
 import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.HorizontalListView;
 
 import java.io.File;
@@ -57,7 +57,6 @@
 
 public class WallpapersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    private final static int done_button = 1;
     private HorizontalListView listView;
     private ListAdapter listAdapter;
     private ImageView backgroundImage;
@@ -72,6 +71,8 @@
     private TLRPC.PhotoSize loadingSize = null;
     private String currentPicturePath;
 
+    private final static int done_button = 1;
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
@@ -160,9 +161,9 @@ public void onItemClick(int id) {
             fragmentView = inflater.inflate(R.layout.settings_wallpapers_layout, container, false);
             listAdapter = new ListAdapter(getParentActivity());
 
-            progressBar = (ProgressBar) fragmentView.findViewById(R.id.action_progress);
-            backgroundImage = (ImageView) fragmentView.findViewById(R.id.background_image);
-            listView = (HorizontalListView) fragmentView.findViewById(R.id.listView);
+            progressBar = (ProgressBar)fragmentView.findViewById(R.id.action_progress);
+            backgroundImage = (ImageView)fragmentView.findViewById(R.id.background_image);
+            listView = (HorizontalListView)fragmentView.findViewById(R.id.listView);
             listView.setAdapter(listAdapter);
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
@@ -173,7 +174,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         }
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
-                        CharSequence[] items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("Cancel", R.string.Cancel)};
+                        CharSequence[] items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("Cancel", R.string.Cancel)};
 
                         builder.setItems(items, new DialogInterface.OnClickListener() {
                             @Override
@@ -209,7 +210,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
 
             processSelectedBackground();
         } else {
-            ViewGroup parent = (ViewGroup) fragmentView.getParent();
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -348,7 +349,7 @@ private void processSelectedBackground() {
     @Override
     public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.FileDidFailedLoad) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             if (loadingFile != null && loadingFile.equals(location)) {
                 loadingFileObject = null;
                 loadingFile = null;
@@ -357,7 +358,7 @@ public void didReceivedNotification(int id, final Object... args) {
                 doneButton.setEnabled(false);
             }
         } else if (id == NotificationCenter.FileDidLoaded) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             if (loadingFile != null && loadingFile.equals(location)) {
                 backgroundImage.setImageURI(Uri.fromFile(loadingFileObject));
                 progressBar.setVisibility(View.GONE);
@@ -368,16 +369,16 @@ public void didReceivedNotification(int id, final Object... args) {
                 loadingSize = null;
             }
         } else if (id == NotificationCenter.FileLoadProgressChanged) {
-            String location = (String) args[0];
+            String location = (String)args[0];
             if (loadingFile != null && loadingFile.equals(location)) {
-                Float progress = (Float) args[1];
-                progressBar.setProgress((int) (progress * 100));
+                Float progress = (Float)args[1];
+                progressBar.setProgress((int)(progress * 100));
             }
         } else if (id == NotificationCenter.wallpapersDidLoaded) {
             AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
-                    wallPapers = (ArrayList<TLRPC.WallPaper>) args[0];
+                    wallPapers = (ArrayList<TLRPC.WallPaper>)args[0];
                     wallpappersByIds.clear();
                     for (TLRPC.WallPaper wallPaper : wallPapers) {
                         wallpappersByIds.put(wallPaper.id, wallPaper);
@@ -412,11 +413,11 @@ public void run(final TLObject response, TLRPC.TL_error error) {
                     @Override
                     public void run() {
                         wallPapers.clear();
-                        TLRPC.Vector res = (TLRPC.Vector) response;
+                        TLRPC.Vector res = (TLRPC.Vector)response;
                         wallpappersByIds.clear();
                         for (Object obj : res.objects) {
-                            wallPapers.add((TLRPC.WallPaper) obj);
-                            wallpappersByIds.put(((TLRPC.WallPaper) obj).id, (TLRPC.WallPaper) obj);
+                            wallPapers.add((TLRPC.WallPaper)obj);
+                            wallpappersByIds.put(((TLRPC.WallPaper)obj).id, (TLRPC.WallPaper)obj);
                         }
                         listAdapter.notifyDataSetChanged();
                         if (backgroundImage != null) {
@@ -504,11 +505,11 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.settings_wallpapers_my_row, viewGroup, false);
                 }
                 View parentView = view.findViewById(R.id.parent);
-                ImageView imageView = (ImageView) view.findViewById(R.id.image);
+                ImageView imageView = (ImageView)view.findViewById(R.id.image);
                 View selection = view.findViewById(R.id.selection);
                 if (i == 0) {
                     if (selectedBackground == -1 || selectedColor != 0 || selectedBackground == 1000001) {
@@ -534,15 +535,15 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 }
             } else if (type == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.settings_wallpapers_other_row, viewGroup, false);
                 }
-                BackupImageView image = (BackupImageView) view.findViewById(R.id.image);
+                BackupImageView image = (BackupImageView)view.findViewById(R.id.image);
                 View selection = view.findViewById(R.id.selection);
                 TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
                 TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, AndroidUtilities.dp(100));
                 if (size != null && size.location != null) {
-                    image.setImage(size.location, "100_100", (Drawable) null);
+                    image.setImage(size.location, "100_100", (Drawable)null);
                 }
                 if (wallPaper.id == selectedBackground) {
                     selection.setVisibility(View.VISIBLE);
diff --git a/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml b/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
index 906f22f9f..34fa70643 100644
--- a/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
+++ b/TMessagesProj/src/main/res/anim/icon_anim_fade_in.xml
@@ -1,8 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <set xmlns:android="http://schemas.android.com/apk/res/android">
-    <alpha
+    <alpha android:fromAlpha="0.0"
+        android:toAlpha="1.0"
         android:duration="200"
-        android:fromAlpha="0.0"
-        android:interpolator="@android:anim/accelerate_decelerate_interpolator"
-        android:toAlpha="1.0" />
+        android:interpolator="@android:anim/accelerate_decelerate_interpolator"/>
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml b/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
index 38f9dbb3d..915208c6c 100644
--- a/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
+++ b/TMessagesProj/src/main/res/anim/icon_anim_fade_out.xml
@@ -1,8 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <set xmlns:android="http://schemas.android.com/apk/res/android">
-    <alpha
+    <alpha android:fromAlpha="1.0"
+        android:toAlpha="0.0"
         android:duration="200"
-        android:fromAlpha="1.0"
-        android:interpolator="@android:anim/accelerate_decelerate_interpolator"
-        android:toAlpha="0.0" />
+        android:interpolator="@android:anim/accelerate_decelerate_interpolator"/>
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/popup_in.xml b/TMessagesProj/src/main/res/anim/popup_in.xml
index 91e873c9a..42a4bb0bc 100644
--- a/TMessagesProj/src/main/res/anim/popup_in.xml
+++ b/TMessagesProj/src/main/res/anim/popup_in.xml
@@ -1,9 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <set xmlns:android="http://schemas.android.com/apk/res/android">
-    <alpha
+    <alpha android:fromAlpha="0.0"
+        android:toAlpha="1.0"
         android:duration="150"
-        android:fromAlpha="0.0"
-        android:interpolator="@android:anim/accelerate_interpolator"
-        android:toAlpha="1.0" />
+        android:interpolator="@android:anim/accelerate_interpolator"/>
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/anim/popup_out.xml b/TMessagesProj/src/main/res/anim/popup_out.xml
index ec219c4fe..0975248a7 100644
--- a/TMessagesProj/src/main/res/anim/popup_out.xml
+++ b/TMessagesProj/src/main/res/anim/popup_out.xml
@@ -1,9 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <set xmlns:android="http://schemas.android.com/apk/res/android">
-    <alpha
+    <alpha android:fromAlpha="1.0"
+        android:toAlpha="0.0"
         android:duration="150"
-        android:fromAlpha="1.0"
-        android:interpolator="@android:anim/accelerate_interpolator"
-        android:toAlpha="0.0" />
+        android:interpolator="@android:anim/accelerate_interpolator"/>
 </set>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml
index 9529cb35e..7c7941ef9 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff45658d"></ripple>
+    android:color="#ff45658d">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml
index 08c67a140..34512df87 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff3f76a8"></ripple>
\ No newline at end of file
+    android:color="#ff3f76a8">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml
index 604cdd244..64d8697d3 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff39849d"></ripple>
\ No newline at end of file
+    android:color="#ff39849d">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml
index 6783437e1..49c5a35ea 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff48953d"></ripple>
\ No newline at end of file
+    android:color="#ff48953d">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml
index ad6c35d01..386d01cee 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#fff0f0f0"></ripple>
+    android:color="#fff0f0f0">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml
index 7ea953666..2d5c96c84 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffe67429"></ripple>
\ No newline at end of file
+    android:color="#ffe67429">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml
index fc65ee099..8c28f1d3f 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff3d3d3d"></ripple>
+    android:color="#ff3d3d3d">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml
index bc82ae3ed..72f764054 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffd44e7b"></ripple>
\ No newline at end of file
+    android:color="#ffd44e7b">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml
index 8f464d51d..4badd6870 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffbc4b41"></ripple>
\ No newline at end of file
+    android:color="#ffbc4b41">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_style.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_style.xml
index 23c5d4127..ed6784f52 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_style.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_style.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#40a0bcdd"></ripple>
+    android:color="#40a0bcdd">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml
index be405e90f..ee31ab7fe 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff735fbe"></ripple>
\ No newline at end of file
+    android:color="#ff735fbe">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_white.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_white.xml
index 67f631cac..46b442850 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_white.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_white.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#40ffffff"></ripple>
+    android:color="#40ffffff">
+</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml
index 2689fd02e..f0ee5a20f 100644
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml
@@ -1,3 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffef9f09"></ripple>
\ No newline at end of file
+    android:color="#ffef9f09">
+</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/list_selector.xml b/TMessagesProj/src/main/res/drawable-v21/list_selector.xml
index 9d1308b05..0ba2177bc 100644
--- a/TMessagesProj/src/main/res/drawable-v21/list_selector.xml
+++ b/TMessagesProj/src/main/res/drawable-v21/list_selector.xml
@@ -1,7 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <ripple xmlns:android="http://schemas.android.com/apk/res/android"
     android:color="#2f000000">
-    <item
-        android:id="@android:id/mask"
-        android:drawable="@android:color/white" />
+    <item android:id="@android:id/mask" android:drawable="@android:color/white"/>
 </ripple>
diff --git a/TMessagesProj/src/main/res/drawable/background_tab.xml b/TMessagesProj/src/main/res/drawable/background_tab.xml
index d2d359628..885cf036a 100755
--- a/TMessagesProj/src/main/res/drawable/background_tab.xml
+++ b/TMessagesProj/src/main/res/drawable/background_tab.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android" android:exitFadeDuration="@android:integer/config_shortAnimTime">
 
-    <item android:drawable="@color/background_tab_pressed" android:state_pressed="true" />
-    <item android:drawable="@color/background_tab_pressed" android:state_focused="true" />
-    <item android:drawable="@android:color/transparent" />
+    <item android:state_pressed="true" android:drawable="@color/background_tab_pressed" />
+    <item android:state_focused="true" android:drawable="@color/background_tab_pressed"/>
+    <item android:drawable="@android:color/transparent"/>
 
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector.xml b/TMessagesProj/src/main/res/drawable/bar_selector.xml
index 61c4891ad..961d245f2 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ff45658d" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml b/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
index 4fecfdb17..83e879474 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ff3f76a8" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml b/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
index 2c47172ce..e9fb9cc20 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ff39849d" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_green.xml b/TMessagesProj/src/main/res/drawable/bar_selector_green.xml
index 7322ccdd5..2e88b9f42 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_green.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_green.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ff48953d" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml b/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml
index 6947a0a52..f3319e321 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <inset android:insetBottom="2dp">
             <shape android:shape="rectangle">
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml b/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml
index 0d9f10d90..e1880b1e0 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ffe67429" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_picker.xml b/TMessagesProj/src/main/res/drawable/bar_selector_picker.xml
index 3a9856dfc..3a705f195 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_picker.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_picker.xml
@@ -6,7 +6,8 @@
   ~ Copyright Nikolai Kudashov, 2013-2014.
   -->
 
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ff3d3d3d" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml b/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml
index 439a85c47..9d81d09dc 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ffd44e7b" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_red.xml b/TMessagesProj/src/main/res/drawable/bar_selector_red.xml
index efcad61ca..c00e47a4e 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_red.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_red.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ffbc4b41" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_style.xml b/TMessagesProj/src/main/res/drawable/bar_selector_style.xml
index 7c7b2fcf2..236178c0e 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_style.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_style.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#40a0bcdd" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml b/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml
index 01e780f3a..405397c10 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ff735fbe" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_white.xml b/TMessagesProj/src/main/res/drawable/bar_selector_white.xml
index cb5690e64..313bf1833 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_white.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_white.xml
@@ -6,7 +6,8 @@
   ~ Copyright Nikolai Kudashov, 2013-2014.
   -->
 
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#40ffffff" />
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml b/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml
index 753f2369a..98da9c127 100644
--- a/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml
+++ b/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml
@@ -1,4 +1,5 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
             <solid android:color="#ffef9f09" />
diff --git a/TMessagesProj/src/main/res/drawable/edit_text.xml b/TMessagesProj/src/main/res/drawable/edit_text.xml
index 3af701c84..b9d7fc543 100644
--- a/TMessagesProj/src/main/res/drawable/edit_text.xml
+++ b/TMessagesProj/src/main/res/drawable/edit_text.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/search_dark_activated" android:state_enabled="true" android:state_focused="true" />
-    <item android:drawable="@drawable/search_dark_activated" android:state_focused="true" />
+    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_dark_activated" />
+    <item android:state_focused="true" android:drawable="@drawable/search_dark_activated" />
     <item android:drawable="@drawable/search_dark" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/ic_emoji_backspace.xml b/TMessagesProj/src/main/res/drawable/ic_emoji_backspace.xml
index 806de22ac..0346dc27c 100644
--- a/TMessagesProj/src/main/res/drawable/ic_emoji_backspace.xml
+++ b/TMessagesProj/src/main/res/drawable/ic_emoji_backspace.xml
@@ -1,5 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android" android:exitFadeDuration="300">
-    <item android:drawable="@drawable/ic_smiles_backspace_active" android:state_pressed="true"></item>
-    <item android:drawable="@drawable/ic_smiles_backspace"></item>
+	<item
+		android:state_pressed="true"
+		android:drawable="@drawable/ic_smiles_backspace_active">
+	</item>
+	<item
+		android:drawable="@drawable/ic_smiles_backspace">
+	</item>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/ic_emoji_bell.xml b/TMessagesProj/src/main/res/drawable/ic_emoji_bell.xml
index b6745f05c..5c3d57160 100644
--- a/TMessagesProj/src/main/res/drawable/ic_emoji_bell.xml
+++ b/TMessagesProj/src/main/res/drawable/ic_emoji_bell.xml
@@ -1,5 +1,16 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android" android:enterFadeDuration="200" android:exitFadeDuration="300">
-    <item android:drawable="@drawable/ic_smiles_bell_active" android:state_selected="true"></item>
-    <item android:drawable="@drawable/ic_smiles_bell"></item>
+<selector
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:enterFadeDuration="200"
+	android:exitFadeDuration="300"
+	>
+	<item
+		android:state_selected="true"
+		android:drawable="@drawable/ic_smiles_bell_active"
+		>
+	</item>
+	<item
+		android:drawable="@drawable/ic_smiles_bell"
+		>
+	</item>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/ic_emoji_car.xml b/TMessagesProj/src/main/res/drawable/ic_emoji_car.xml
index 426c13c5e..30c4baa25 100644
--- a/TMessagesProj/src/main/res/drawable/ic_emoji_car.xml
+++ b/TMessagesProj/src/main/res/drawable/ic_emoji_car.xml
@@ -1,5 +1,16 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android" android:enterFadeDuration="200" android:exitFadeDuration="300">
-    <item android:drawable="@drawable/ic_smiles_car_active" android:state_selected="true"></item>
-    <item android:drawable="@drawable/ic_smiles_car"></item>
+<selector
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:enterFadeDuration="200"
+	android:exitFadeDuration="300"
+	>
+	<item
+		android:state_selected="true"
+		android:drawable="@drawable/ic_smiles_car_active"
+		>
+	</item>
+	<item
+		android:drawable="@drawable/ic_smiles_car"
+		>
+	</item>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/ic_emoji_flower.xml b/TMessagesProj/src/main/res/drawable/ic_emoji_flower.xml
index d0e90cb75..86e934246 100644
--- a/TMessagesProj/src/main/res/drawable/ic_emoji_flower.xml
+++ b/TMessagesProj/src/main/res/drawable/ic_emoji_flower.xml
@@ -1,5 +1,16 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android" android:enterFadeDuration="200" android:exitFadeDuration="300">
-    <item android:drawable="@drawable/ic_smiles_flower_active" android:state_selected="true"></item>
-    <item android:drawable="@drawable/ic_smiles_flower"></item>
+<selector
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:enterFadeDuration="200"
+	android:exitFadeDuration="300"
+	>
+	<item
+		android:state_selected="true"
+		android:drawable="@drawable/ic_smiles_flower_active"
+		>
+	</item>
+	<item
+		android:drawable="@drawable/ic_smiles_flower"
+		>
+	</item>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/ic_emoji_recent.xml b/TMessagesProj/src/main/res/drawable/ic_emoji_recent.xml
index c5162b83a..aa39b4f50 100644
--- a/TMessagesProj/src/main/res/drawable/ic_emoji_recent.xml
+++ b/TMessagesProj/src/main/res/drawable/ic_emoji_recent.xml
@@ -1,5 +1,16 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android" android:enterFadeDuration="200" android:exitFadeDuration="300">
-    <item android:drawable="@drawable/ic_smiles_recent_active" android:state_selected="true"></item>
-    <item android:drawable="@drawable/ic_smiles_recent"></item>
+<selector
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:enterFadeDuration="200"
+	android:exitFadeDuration="300"
+	>
+	<item
+		android:state_selected="true"
+		android:drawable="@drawable/ic_smiles_recent_active"
+		>
+	</item>
+	<item
+		android:drawable="@drawable/ic_smiles_recent"
+		>
+	</item>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/ic_emoji_smile.xml b/TMessagesProj/src/main/res/drawable/ic_emoji_smile.xml
index 6b5df2982..97d0c7a55 100644
--- a/TMessagesProj/src/main/res/drawable/ic_emoji_smile.xml
+++ b/TMessagesProj/src/main/res/drawable/ic_emoji_smile.xml
@@ -1,5 +1,16 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android" android:enterFadeDuration="200" android:exitFadeDuration="300">
-    <item android:drawable="@drawable/ic_smiles_smile_active" android:state_selected="true"></item>
-    <item android:drawable="@drawable/ic_smiles_smile"></item>
+<selector
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:enterFadeDuration="200"
+	android:exitFadeDuration="300"
+	>
+	<item
+		android:state_selected="true"
+		android:drawable="@drawable/ic_smiles_smile_active"
+		>
+	</item>
+	<item
+		android:drawable="@drawable/ic_smiles_smile"
+		>
+	</item>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/ic_emoji_symbol.xml b/TMessagesProj/src/main/res/drawable/ic_emoji_symbol.xml
index c4223322b..63a97e2f1 100644
--- a/TMessagesProj/src/main/res/drawable/ic_emoji_symbol.xml
+++ b/TMessagesProj/src/main/res/drawable/ic_emoji_symbol.xml
@@ -1,5 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android" android:enterFadeDuration="200" android:exitFadeDuration="300">
-    <item android:drawable="@drawable/ic_smiles_grid_active" android:state_selected="true" />
-    <item android:drawable="@drawable/ic_smiles_grid" />
+<selector
+	xmlns:android="http://schemas.android.com/apk/res/android"
+	android:enterFadeDuration="200"
+	android:exitFadeDuration="300">
+	<item android:state_selected="true" android:drawable="@drawable/ic_smiles_grid_active"/>
+	<item android:drawable="@drawable/ic_smiles_grid"/>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/item_background_holo_light.xml b/TMessagesProj/src/main/res/drawable/item_background_holo_light.xml
index f5f9e0132..652dc8a4c 100644
--- a/TMessagesProj/src/main/res/drawable/item_background_holo_light.xml
+++ b/TMessagesProj/src/main/res/drawable/item_background_holo_light.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/list_selector_disabled_holo_light" android:state_enabled="false" android:state_focused="true" android:state_pressed="true" />
-    <item android:drawable="@drawable/list_selector_disabled_holo_light" android:state_enabled="false" android:state_focused="true" />
-    <item android:drawable="@drawable/list_selector_background_transition_holo_light" android:state_focused="true" android:state_pressed="true" />
-    <item android:drawable="@drawable/list_selector_background_transition_holo_light" android:state_focused="false" android:state_pressed="true" />
-    <item android:drawable="@drawable/list_focused_holo" android:state_focused="true" />
-    <item android:drawable="@drawable/transparent" />
+    <item android:state_focused="true"  android:state_enabled="false" android:state_pressed="true" android:drawable="@drawable/list_selector_disabled_holo_light" />
+    <item android:state_focused="true"  android:state_enabled="false"                              android:drawable="@drawable/list_selector_disabled_holo_light" />
+    <item android:state_focused="true"                                android:state_pressed="true" android:drawable="@drawable/list_selector_background_transition_holo_light" />
+    <item android:state_focused="false"                               android:state_pressed="true" android:drawable="@drawable/list_selector_background_transition_holo_light" />
+    <item android:state_focused="true"                                                             android:drawable="@drawable/list_focused_holo" />
+    <item                                                                                          android:drawable="@drawable/transparent" />
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/list_selector_background_transition_holo_light.xml b/TMessagesProj/src/main/res/drawable/list_selector_background_transition_holo_light.xml
index f5e6af54b..41cae09a3 100644
--- a/TMessagesProj/src/main/res/drawable/list_selector_background_transition_holo_light.xml
+++ b/TMessagesProj/src/main/res/drawable/list_selector_background_transition_holo_light.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <transition xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/list_pressed_holo_light" />
-    <item android:drawable="@drawable/list_longpressed_holo_light" />
+    <item android:drawable="@drawable/list_pressed_holo_light"  />
+    <item android:drawable="@drawable/list_longpressed_holo_light"  />
 </transition>
diff --git a/TMessagesProj/src/main/res/drawable/location_send_button_states.xml b/TMessagesProj/src/main/res/drawable/location_send_button_states.xml
index 99e000872..94dc5b829 100644
--- a/TMessagesProj/src/main/res/drawable/location_send_button_states.xml
+++ b/TMessagesProj/src/main/res/drawable/location_send_button_states.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/btn_send_location_down" android:state_pressed="true" />
+    <item android:drawable="@drawable/btn_send_location_down"
+          android:state_pressed="true" />
     <item android:drawable="@drawable/btn_send_location_up" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/photo_placeholder_in.xml b/TMessagesProj/src/main/res/drawable/photo_placeholder_in.xml
index 0ba3f8e36..660131c6d 100644
--- a/TMessagesProj/src/main/res/drawable/photo_placeholder_in.xml
+++ b/TMessagesProj/src/main/res/drawable/photo_placeholder_in.xml
@@ -1,4 +1,4 @@
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
     <item>
         <shape android:shape="rectangle">
             <solid android:color="#f0f0f0" />
diff --git a/TMessagesProj/src/main/res/drawable/regbtn_states.xml b/TMessagesProj/src/main/res/drawable/regbtn_states.xml
index acf1d23e4..450cdb88a 100644
--- a/TMessagesProj/src/main/res/drawable/regbtn_states.xml
+++ b/TMessagesProj/src/main/res/drawable/regbtn_states.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/regbtn2_pressed" android:state_focused="true" />
-    <item android:drawable="@drawable/regbtn2_pressed" android:state_checked="true" />
-    <item android:drawable="@drawable/regbtn2_pressed" android:state_pressed="true" />
+    <item android:state_focused="true" android:drawable="@drawable/regbtn2_pressed" />
+    <item android:state_checked="true" android:drawable="@drawable/regbtn2_pressed" />
+    <item android:state_pressed="true" android:drawable="@drawable/regbtn2_pressed" />
     <item android:drawable="@drawable/regbtn2" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/search_carret.xml b/TMessagesProj/src/main/res/drawable/search_carret.xml
index c4153f209..a07ec56d7 100644
--- a/TMessagesProj/src/main/res/drawable/search_carret.xml
+++ b/TMessagesProj/src/main/res/drawable/search_carret.xml
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-<shape xmlns:android="http://schemas.android.com/apk/res/android"
-    android:shape="rectangle">
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
     <solid android:color="#ffffffff" />
     <size
         android:width="1dp"
diff --git a/TMessagesProj/src/main/res/drawable/search_dark_states.xml b/TMessagesProj/src/main/res/drawable/search_dark_states.xml
index 0123ca0a4..d1d4b4594 100644
--- a/TMessagesProj/src/main/res/drawable/search_dark_states.xml
+++ b/TMessagesProj/src/main/res/drawable/search_dark_states.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/search_light_activated" android:state_enabled="true" android:state_focused="true" />
-    <item android:drawable="@drawable/search_light_activated" android:state_activated="true" android:state_enabled="true" />
-    <item android:drawable="@drawable/search_light" android:state_enabled="true" />
-    <item android:drawable="@drawable/search_light" />
+    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:drawable="@drawable/search_light"/>
+    <item android:drawable="@drawable/search_light"/>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/search_light_states.xml b/TMessagesProj/src/main/res/drawable/search_light_states.xml
index 0123ca0a4..d1d4b4594 100644
--- a/TMessagesProj/src/main/res/drawable/search_light_states.xml
+++ b/TMessagesProj/src/main/res/drawable/search_light_states.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/search_light_activated" android:state_enabled="true" android:state_focused="true" />
-    <item android:drawable="@drawable/search_light_activated" android:state_activated="true" android:state_enabled="true" />
-    <item android:drawable="@drawable/search_light" android:state_enabled="true" />
-    <item android:drawable="@drawable/search_light" />
+    <item android:state_enabled="true" android:state_focused="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:state_activated="true" android:drawable="@drawable/search_light_activated"/>
+    <item android:state_enabled="true" android:drawable="@drawable/search_light"/>
+    <item android:drawable="@drawable/search_light"/>
 </selector>
diff --git a/TMessagesProj/src/main/res/drawable/spinner_states.xml b/TMessagesProj/src/main/res/drawable/spinner_states.xml
index 4c6098c32..5cce57b08 100644
--- a/TMessagesProj/src/main/res/drawable/spinner_states.xml
+++ b/TMessagesProj/src/main/res/drawable/spinner_states.xml
@@ -1,26 +1,47 @@
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:state_pressed="true">
         <shape android:shape="rectangle">
-            <padding android:bottom="4dp" android:left="4dp" android:right="4dp" android:top="4dp" />
-            <solid android:color="#22000000" />
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#22000000" />
         </shape>
     </item>
     <item android:state_checked="true">
         <shape android:shape="rectangle">
-            <padding android:bottom="4dp" android:left="4dp" android:right="4dp" android:top="4dp" />
-            <solid android:color="#22000000" />
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#22000000" />
         </shape>
     </item>
     <item android:state_focused="true">
         <shape android:shape="rectangle">
-            <padding android:bottom="4dp" android:left="4dp" android:right="4dp" android:top="4dp" />
-            <solid android:color="#22000000" />
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#22000000" />
         </shape>
     </item>
     <item>
         <shape android:shape="rectangle">
-            <padding android:bottom="4dp" android:left="4dp" android:right="4dp" android:top="4dp" />
-            <solid android:color="#00000000" />
+            <padding
+                android:left="4dp"
+                android:top="4dp"
+                android:right="4dp"
+                android:bottom="4dp"/>
+            <solid
+                android:color="#00000000" />
         </shape>
     </item>
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/switch_thumb.xml b/TMessagesProj/src/main/res/drawable/switch_thumb.xml
index 82617d5d7..3d6207ceb 100644
--- a/TMessagesProj/src/main/res/drawable/switch_thumb.xml
+++ b/TMessagesProj/src/main/res/drawable/switch_thumb.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@drawable/switch_to_on2" android:state_checked="true" />
+    <item android:state_checked="true" android:drawable="@drawable/switch_to_on2" />
     <item android:drawable="@drawable/switch_to_on1" />
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/transparent.xml b/TMessagesProj/src/main/res/drawable/transparent.xml
index b95520af0..fa57a4a8a 100644
--- a/TMessagesProj/src/main/res/drawable/transparent.xml
+++ b/TMessagesProj/src/main/res/drawable/transparent.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <solid android:color="#00000000" />
+    <solid android:color="#00000000"/>
 </shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml b/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml
index 98bfda632..c265685e2 100644
--- a/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml
+++ b/TMessagesProj/src/main/res/layout-ar/encrypted_chat_placeholder.xml
@@ -1,132 +1,126 @@
 <LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/secret_placeholder"
-    android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    android:layout_centerInParent="true"
+    android:layout_width="wrap_content"
     android:layout_gravity="center"
-    android:orientation="vertical"
     android:padding="20dp"
-    android:visibility="gone">
+    android:layout_centerInParent="true"
+    android:id="@+id/secret_placeholder"
+    android:orientation="vertical"
+    android:visibility="gone"
+    xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <TextView
-        android:id="@+id/invite_text"
+    <TextView android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
+        android:id="@+id/invite_text"
+        android:maxWidth="210dp"
         android:layout_gravity="center_horizontal"
         android:gravity="center_horizontal"
-        android:maxWidth="210dp"
         android:textColor="#ffffff"
-        android:textSize="15dp" />
+        android:textSize="15dp"/>
 
-    <TextView
-        android:id="@+id/secret_title"
+    <TextView android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="right"
         android:layout_marginTop="8dp"
-        android:gravity="center_horizontal|right"
         android:maxWidth="260dp"
+        android:gravity="center_horizontal|right"
         android:textColor="#ffffff"
-        android:textSize="15dp" />
+        android:textSize="15dp"
+        android:layout_gravity="right"
+        android:id="@+id/secret_title"/>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="right"
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
         android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_gravity="right">
 
-        <TextView
-            android:id="@+id/secret_description1"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical|right"
             android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description1"/>
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginLeft="8dp"
-            android:layout_marginTop="3dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="3dp"/>
 
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="right"
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
         android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_gravity="right">
 
-        <TextView
-            android:id="@+id/secret_description2"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical|right"
             android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description2"/>
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginLeft="8dp"
-            android:layout_marginTop="3dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="3dp"/>
 
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="right"
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
         android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_gravity="right">
 
-        <TextView
-            android:id="@+id/secret_description3"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical|right"
             android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description3"/>
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginLeft="8dp"
-            android:layout_marginTop="3dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="3dp"/>
 
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="right"
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
         android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_gravity="right">
 
-        <TextView
-            android:id="@+id/secret_description4"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical|right"
             android:maxWidth="260dp"
+            android:gravity="center_vertical|right"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description4"/>
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginLeft="8dp"
-            android:layout_marginTop="3dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="3dp"/>
 
     </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
index b6f3ee6f9..a39c6a5e5 100644
--- a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:layout_gravity="top">
@@ -9,48 +10,48 @@
         android:id="@+id/map_view"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="top" />
+        android:layout_gravity="top"/>
 
     <FrameLayout
-        android:id="@+id/location_bottom_view"
         android:layout_width="fill_parent"
         android:layout_height="91dp"
         android:layout_gravity="bottom"
-        android:background="@drawable/location_panel">
+        android:background="@drawable/location_panel"
+        android:id="@+id/location_bottom_view">
 
         <org.telegram.ui.Components.BackupImageView
-            android:id="@+id/location_avatar_view"
             android:layout_width="64dp"
             android:layout_height="64dp"
-            android:layout_gravity="top|right"
+            android:id="@+id/location_avatar_view"
             android:layout_marginRight="12dp"
-            android:layout_marginTop="16dp" />
+            android:layout_marginTop="16dp"
+            android:layout_gravity="top|right"/>
 
         <TextView
-            android:id="@+id/location_name_label"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="top|right"
-            android:layout_marginLeft="12dp"
+            android:textSize="22dp"
+            android:textColor="#212121"
             android:layout_marginRight="88dp"
             android:layout_marginTop="20dp"
-            android:gravity="right"
+            android:layout_marginLeft="12dp"
+            android:id="@+id/location_name_label"
+            android:layout_gravity="top|right"
             android:maxLines="1"
-            android:textColor="#212121"
-            android:textSize="22dp" />
+            android:gravity="right"/>
 
         <TextView
-            android:id="@+id/location_distance_label"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="top|right"
-            android:layout_marginLeft="12dp"
+            android:textSize="15dp"
             android:layout_marginRight="88dp"
             android:layout_marginTop="52dp"
-            android:gravity="right"
-            android:maxLines="1"
+            android:layout_marginLeft="12dp"
             android:textColor="#999999"
-            android:textSize="15dp" />
+            android:id="@+id/location_distance_label"
+            android:layout_gravity="top|right"
+            android:maxLines="1"
+            android:gravity="right"/>
 
     </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/chat_layout.xml b/TMessagesProj/src/main/res/layout/chat_layout.xml
index 591464e09..829549faa 100644
--- a/TMessagesProj/src/main/res/layout/chat_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_layout.xml
@@ -1,193 +1,195 @@
-<org.telegram.ui.Components.SizeNotifierRelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/chat_layout"
+<org.telegram.ui.Components.SizeNotifierRelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
-    android:layout_height="match_parent">
+    android:layout_height="match_parent"
+    android:id="@+id/chat_layout">
 
     <org.telegram.ui.Components.FrameLayoutFixed
-        android:id="@+id/empty_view"
-        android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:paddingBottom="48dp">
+        android:layout_width="fill_parent"
+        android:paddingBottom="48dp"
+        android:id="@+id/empty_view">
 
         <TextView
-            android:id="@+id/searchEmptyView"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
+            android:textColor="#ffffff"
             android:gravity="center"
+            android:paddingTop="2dp"
             android:paddingBottom="2dp"
             android:paddingLeft="7dp"
             android:paddingRight="7dp"
-            android:paddingTop="2dp"
-            android:textColor="#ffffff"
-            android:textSize="16dp" />
+            android:textSize="16dp"
+            android:id="@+id/searchEmptyView"
+            android:layout_gravity="center"/>
 
         <include
             layout="@layout/encrypted_chat_placeholder"
-            android:layout_gravity="center" />
+            android:layout_gravity="center"/>
 
     </org.telegram.ui.Components.FrameLayoutFixed>
 
     <org.telegram.ui.Components.LayoutListView
-        android:id="@+id/chat_list_view"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:layout_above="@+id/chat_compose_panel"
-        android:layout_alignParentLeft="true"
+        android:id="@+id/chat_list_view"
         android:layout_alignParentTop="true"
-        android:layout_marginBottom="-3dp"
-        android:cacheColorHint="#00000000"
+        android:layout_alignParentLeft="true"
         android:clipToPadding="false"
+        android:layout_marginBottom="-3dp"
+        android:layout_above="@+id/chat_compose_panel"
         android:divider="@null"
         android:dividerHeight="0dp"
+        android:listSelector="@android:color/transparent"
         android:fadingEdge="none"
         android:fadingEdgeLength="0dp"
-        android:listSelector="@android:color/transparent"
+        android:stackFromBottom="true"
         android:paddingBottom="3dp"
         android:paddingTop="4dp"
-        android:stackFromBottom="true" />
+        android:cacheColorHint="#00000000"/>
 
     <FrameLayout
-        android:id="@+id/progressLayout"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_centerInParent="true"
+        android:id="@+id/progressLayout"
         android:visibility="gone">
 
         <FrameLayout
             android:id="@+id/progressLayoutInner"
             android:layout_width="36dp"
             android:layout_height="36dp"
-            android:layout_marginBottom="48dp"
-            android:gravity="center">
+            android:gravity="center"
+            android:layout_marginBottom="48dp">
 
             <ProgressBar
-                android:id="@+id/center_progress"
                 android:layout_width="32dp"
                 android:layout_height="32dp"
-                android:layout_gravity="center"
+                android:id="@+id/center_progress"
+                android:indeterminateDrawable="@drawable/loading_animation"
                 android:indeterminate="true"
+                android:layout_gravity="center"
                 android:indeterminateBehavior="repeat"
-                android:indeterminateDrawable="@drawable/loading_animation"
-                android:indeterminateDuration="1500"></ProgressBar>
+                android:indeterminateDuration="1500">
+            </ProgressBar>
 
         </FrameLayout>
 
     </FrameLayout>
 
     <LinearLayout
-        android:id="@+id/chat_compose_panel"
-        android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_width="match_parent"
         android:layout_alignParentBottom="true"
-        android:background="@drawable/compose_panel"
         android:focusable="true"
         android:focusableInTouchMode="true"
+        android:id="@+id/chat_compose_panel"
+        android:background="@drawable/compose_panel"
         android:orientation="horizontal">
 
         <org.telegram.ui.Components.FrameLayoutFixed
-            android:layout_width="0dp"
             android:layout_height="wrap_content"
+            android:layout_width="0dp"
             android:layout_weight="1">
 
             <ImageView
-                android:id="@+id/chat_smile_button"
+                android:src="@drawable/ic_msg_panel_smiles"
                 android:layout_width="48dp"
                 android:layout_height="48dp"
-                android:layout_gravity="bottom"
                 android:layout_marginTop="2dp"
-                android:paddingLeft="4dp"
                 android:paddingTop="1dp"
+                android:paddingLeft="4dp"
                 android:scaleType="centerInside"
-                android:src="@drawable/ic_msg_panel_smiles" />
+                android:layout_gravity="bottom"
+                android:id="@+id/chat_smile_button"/>
 
             <EditText
-                android:id="@+id/chat_text_edit"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
                 android:layout_gravity="bottom"
-                android:layout_marginLeft="52dp"
-                android:layout_marginRight="2dp"
-                android:background="@null"
-                android:gravity="bottom"
+                android:id="@+id/chat_text_edit"
+                android:maxLines="4"
+                android:textSize="18dp"
+                android:textColorHint="#b2b2b2"
                 android:imeOptions="flagNoExtractUi"
                 android:inputType="textCapSentences|textMultiLine"
                 android:maxLength="16384"
-                android:maxLines="4"
+                android:gravity="bottom"
+                android:layout_marginLeft="52dp"
+                android:layout_marginRight="2dp"
+                android:background="@null"
                 android:paddingBottom="12dp"
                 android:paddingTop="11dp"
-                android:textColor="#000000"
-                android:textColorHint="#b2b2b2"
                 android:textCursorDrawable="@null"
-                android:textSize="18dp" />
+                android:textColor="#000000"/>
 
             <FrameLayout
-                android:id="@+id/chat_attach_button"
                 android:layout_width="48dp"
                 android:layout_height="48dp"
-                android:layout_gravity="bottom|right"
                 android:layout_marginTop="2dp"
-                android:enabled="false" />
+                android:id="@+id/chat_attach_button"
+                android:enabled="false"
+                android:layout_gravity="bottom|right"/>
 
             <org.telegram.ui.Components.FrameLayoutFixed
-                android:id="@+id/record_panel"
-                android:layout_width="fill_parent"
                 android:layout_height="48dp"
-                android:layout_gravity="bottom"
+                android:layout_width="fill_parent"
                 android:layout_marginTop="2dp"
+                android:layout_gravity="bottom"
                 android:background="#ffffff"
+                android:id="@+id/record_panel"
                 android:visibility="gone">
 
                 <LinearLayout
-                    android:id="@+id/slideText"
-                    android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
                     android:layout_gravity="center"
                     android:layout_marginLeft="30dp"
-                    android:orientation="horizontal">
+                    android:orientation="horizontal"
+                    android:id="@+id/slideText">
 
                     <ImageView
-                        android:layout_width="wrap_content"
                         android:layout_height="wrap_content"
+                        android:layout_width="wrap_content"
+                        android:src="@drawable/slidearrow"
                         android:layout_gravity="center_vertical"
-                        android:layout_marginTop="1dp"
-                        android:src="@drawable/slidearrow" />
+                        android:layout_marginTop="1dp"/>
 
                     <TextView
-                        android:id="@+id/slideToCancelTextView"
                         android:layout_width="wrap_content"
                         android:layout_height="wrap_content"
-                        android:layout_gravity="center_vertical"
-                        android:layout_marginLeft="6dp"
                         android:textColor="#999999"
-                        android:textSize="12dp" />
+                        android:textSize="12dp"
+                        android:layout_marginLeft="6dp"
+                        android:id="@+id/slideToCancelTextView"
+                        android:layout_gravity="center_vertical"/>
 
                 </LinearLayout>
 
                 <LinearLayout
-                    android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
                     android:layout_gravity="center_vertical"
-                    android:background="#ffffffff"
+                    android:paddingLeft="13dp"
                     android:orientation="horizontal"
-                    android:paddingLeft="13dp">
+                    android:background="#ffffffff">
 
                     <ImageView
-                        android:layout_width="wrap_content"
                         android:layout_height="wrap_content"
+                        android:layout_width="wrap_content"
+                        android:src="@drawable/rec"
                         android:layout_gravity="center_vertical"
-                        android:layout_marginTop="1dp"
-                        android:src="@drawable/rec" />
+                        android:layout_marginTop="1dp"/>
 
                     <TextView
-                        android:id="@+id/recording_time_text"
                         android:layout_width="wrap_content"
                         android:layout_height="wrap_content"
-                        android:layout_gravity="center_vertical"
-                        android:layout_marginLeft="6dp"
+                        android:id="@+id/recording_time_text"
                         android:text="00:00"
                         android:textColor="#4d4c4b"
-                        android:textSize="16dp" />
+                        android:textSize="16dp"
+                        android:layout_gravity="center_vertical"
+                        android:layout_marginLeft="6dp"/>
 
                 </LinearLayout>
 
@@ -202,75 +204,75 @@
             android:layout_marginTop="2dp">
 
             <ImageButton
-                android:id="@+id/chat_audio_send_button"
                 android:layout_width="48dp"
                 android:layout_height="48dp"
-                android:background="@android:color/white"
+                android:scaleType="centerInside"
+                android:id="@+id/chat_audio_send_button"
                 android:enabled="false"
+                android:src="@drawable/mic_button_states"
                 android:paddingRight="4dp"
-                android:scaleType="centerInside"
-                android:src="@drawable/mic_button_states" />
+                android:background="@android:color/white"/>
 
             <ImageButton
-                android:id="@+id/chat_send_button"
                 android:layout_width="48dp"
                 android:layout_height="48dp"
-                android:background="@android:color/transparent"
-                android:enabled="false"
                 android:scaleType="centerInside"
-                android:src="@drawable/ic_send" />
+                android:id="@+id/chat_send_button"
+                android:enabled="false"
+                android:src="@drawable/ic_send"
+                android:background="@android:color/transparent"/>
 
         </FrameLayout>
 
     </LinearLayout>
 
     <FrameLayout
-        android:id="@+id/bottom_overlay"
-        android:layout_width="fill_parent"
         android:layout_height="48dp"
+        android:layout_width="fill_parent"
         android:layout_alignParentBottom="true"
         android:background="#ffffff"
-        android:clickable="true"
+        android:id="@+id/bottom_overlay"
+        android:visibility="gone"
         android:focusable="true"
         android:focusableInTouchMode="true"
-        android:visibility="gone">
+        android:clickable="true">
 
         <TextView
-            android:id="@+id/bottom_overlay_text"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
+            android:id="@+id/bottom_overlay_text"
             android:textColor="#7f7f7f"
-            android:textSize="16dp" />
+            android:textSize="16dp"
+            android:layout_gravity="center"/>
 
     </FrameLayout>
 
     <FrameLayout
-        android:id="@+id/bottom_overlay_chat"
-        android:layout_width="fill_parent"
         android:layout_height="48dp"
+        android:layout_width="fill_parent"
         android:layout_alignParentBottom="true"
         android:background="#fbfcfd"
+        android:id="@+id/bottom_overlay_chat"
         android:visibility="gone">
 
         <TextView
-            android:id="@+id/bottom_overlay_chat_text"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
+            android:id="@+id/bottom_overlay_chat_text"
             android:textColor="#3e6fa1"
-            android:textSize="18dp" />
+            android:textSize="18dp"
+            android:layout_gravity="center"/>
 
     </FrameLayout>
 
     <ImageView
-        android:id="@+id/pagedown_button"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
+        android:src="@drawable/pagedown"
         android:layout_above="@id/chat_compose_panel"
         android:layout_alignParentRight="true"
-        android:layout_marginBottom="4dp"
         android:layout_marginRight="4dp"
-        android:src="@drawable/pagedown" />
+        android:layout_marginBottom="4dp"
+        android:id="@+id/pagedown_button"/>
 
 </org.telegram.ui.Components.SizeNotifierRelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_loading_layout.xml b/TMessagesProj/src/main/res/layout/chat_loading_layout.xml
index 51d55239a..7d15e8b0d 100644
--- a/TMessagesProj/src/main/res/layout/chat_loading_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_loading_layout.xml
@@ -1,25 +1,26 @@
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:paddingBottom="4dp"
-    android:paddingTop="4dp">
+    android:paddingTop="4dp"
+    android:paddingBottom="4dp">
 
     <FrameLayout
         android:id="@+id/progressLayout"
         android:layout_width="36dp"
         android:layout_height="36dp"
-        android:layout_gravity="center"
-        android:gravity="center">
+        android:gravity="center"
+        android:layout_gravity="center">
 
         <ProgressBar
-            android:id="@+id/center_progress"
             android:layout_width="32dp"
             android:layout_height="32dp"
-            android:layout_gravity="center"
+            android:id="@+id/center_progress"
+            android:indeterminateDrawable="@drawable/loading_animation"
             android:indeterminate="true"
+            android:layout_gravity="center"
             android:indeterminateBehavior="repeat"
-            android:indeterminateDrawable="@drawable/loading_animation"
-            android:indeterminateDuration="1500"></ProgressBar>
+            android:indeterminateDuration="1500">
+        </ProgressBar>
 
     </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/chat_unread_layout.xml b/TMessagesProj/src/main/res/layout/chat_unread_layout.xml
index 9cdbbae29..13832bbf5 100644
--- a/TMessagesProj/src/main/res/layout/chat_unread_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_unread_layout.xml
@@ -1,4 +1,5 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="40dp"
     android:layout_gravity="top">
@@ -6,26 +7,26 @@
     <FrameLayout
         android:layout_width="match_parent"
         android:layout_height="27dp"
-        android:layout_gravity="top"
+        android:background="@drawable/newmsg_divider"
         android:layout_marginTop="7dp"
-        android:background="@drawable/newmsg_divider">
+        android:layout_gravity="top">
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_ab_new"
             android:layout_gravity="right|center_vertical"
             android:layout_marginRight="10dp"
-            android:paddingTop="2dp"
-            android:src="@drawable/ic_ab_new" />
+            android:paddingTop="2dp"/>
 
         <TextView
-            android:id="@+id/chat_message_text"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_gravity="center"
-            android:paddingBottom="1dp"
             android:textColor="#4a7297"
-            android:textSize="14dp" />
+            android:textSize="14dp"
+            android:id="@+id/chat_message_text"
+            android:paddingBottom="1dp"/>
 
     </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/document_select_layout.xml b/TMessagesProj/src/main/res/layout/document_select_layout.xml
index 5584d9f01..9576e5914 100644
--- a/TMessagesProj/src/main/res/layout/document_select_layout.xml
+++ b/TMessagesProj/src/main/res/layout/document_select_layout.xml
@@ -1,27 +1,27 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent">
 
     <ListView
-        android:id="@+id/listView"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:cacheColorHint="#ffffffff"
+        android:id="@+id/listView"
         android:clipToPadding="false"
-        android:divider="@null"
-        android:dividerHeight="0dp"
         android:fadingEdge="none"
         android:fadingEdgeLength="0dp"
-        android:scrollbars="none" />
+        android:dividerHeight="0dp"
+        android:divider="@null"
+        android:scrollbars="none"
+        android:cacheColorHint="#ffffffff"/>
 
-    <TextView
-        android:id="@+id/searchEmptyView"
-        android:layout_width="match_parent"
+    <TextView android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="top"
-        android:gravity="center"
         android:textColor="#808080"
+        android:gravity="center"
         android:textSize="20dp"
-        android:visibility="gone" />
+        android:id="@+id/searchEmptyView"
+        android:visibility="gone"
+        android:layout_gravity="top"/>
 
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml b/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml
index 27f5701c1..6df0e8915 100644
--- a/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml
+++ b/TMessagesProj/src/main/res/layout/encrypted_chat_placeholder.xml
@@ -1,127 +1,121 @@
 <LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/secret_placeholder"
-    android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    android:layout_centerInParent="true"
+    android:layout_width="wrap_content"
     android:layout_gravity="center"
-    android:orientation="vertical"
     android:padding="20dp"
-    android:visibility="gone">
+    android:layout_centerInParent="true"
+    android:id="@+id/secret_placeholder"
+    android:orientation="vertical"
+    android:visibility="gone"
+    xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <TextView
-        android:id="@+id/invite_text"
+    <TextView android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
+        android:id="@+id/invite_text"
+        android:maxWidth="210dp"
         android:layout_gravity="center_horizontal"
         android:gravity="center_horizontal"
-        android:maxWidth="210dp"
         android:textColor="#ffffff"
-        android:textSize="15dp" />
+        android:textSize="15dp"/>
 
-    <TextView
-        android:id="@+id/secret_title"
+    <TextView android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
         android:layout_marginTop="8dp"
-        android:gravity="center_horizontal"
         android:maxWidth="260dp"
+        android:gravity="center_horizontal"
         android:textColor="#ffffff"
-        android:textSize="15dp" />
+        android:textSize="15dp"
+        android:id="@+id/secret_title"/>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginRight="8dp"
-            android:layout_marginTop="4dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="4dp"/>
 
-        <TextView
-            android:id="@+id/secret_description1"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical"
             android:maxWidth="260dp"
+            android:gravity="center_vertical"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description1"/>
 
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginRight="8dp"
-            android:layout_marginTop="4dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="4dp"/>
 
-        <TextView
-            android:id="@+id/secret_description2"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical"
             android:maxWidth="260dp"
+            android:gravity="center_vertical"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description2"/>
 
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginRight="8dp"
-            android:layout_marginTop="4dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="4dp"/>
 
-        <TextView
-            android:id="@+id/secret_description3"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical"
             android:maxWidth="260dp"
+            android:gravity="center_vertical"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description3"/>
 
     </LinearLayout>
 
     <LinearLayout
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_marginTop="8dp"
-        android:orientation="horizontal">
+        android:layout_width="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginTop="8dp">
 
         <ImageView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:src="@drawable/ic_lock_white"
             android:layout_marginRight="8dp"
-            android:layout_marginTop="4dp"
-            android:src="@drawable/ic_lock_white" />
+            android:layout_marginTop="4dp"/>
 
-        <TextView
-            android:id="@+id/secret_description4"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center_vertical"
             android:maxWidth="260dp"
+            android:gravity="center_vertical"
             android:textColor="#ffffff"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/secret_description4"/>
 
     </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/group_create_bubble.xml b/TMessagesProj/src/main/res/layout/group_create_bubble.xml
index 766da8fdf..2f932acff 100644
--- a/TMessagesProj/src/main/res/layout/group_create_bubble.xml
+++ b/TMessagesProj/src/main/res/layout/group_create_bubble.xml
@@ -1,18 +1,18 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
 <FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="wrap_content"
-    android:layout_height="41dp"
-    android:paddingTop="9dp">
+        android:layout_width="wrap_content"
+        android:layout_height="41dp"
+        android:paddingTop="9dp"
+        xmlns:android="http://schemas.android.com/apk/res/android">
 
     <TextView
-        android:id="@+id/bubble_text_view"
         android:layout_width="wrap_content"
         android:layout_height="26dp"
+        android:textSize="16dp"
         android:gravity="center"
         android:textColor="#ff000000"
-        android:textSize="16dp" />
+        android:id="@+id/bubble_text_view"/>
 
 </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/identicon_layout.xml b/TMessagesProj/src/main/res/layout/identicon_layout.xml
index 06e3c337f..aed5e9270 100644
--- a/TMessagesProj/src/main/res/layout/identicon_layout.xml
+++ b/TMessagesProj/src/main/res/layout/identicon_layout.xml
@@ -1,47 +1,45 @@
 <LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
     android:layout_height="fill_parent"
-    android:background="#f0f0f0"
+    android:layout_width="fill_parent"
     android:orientation="vertical"
-    android:weightSum="100">
+    android:weightSum="100"
+    android:background="#f0f0f0"
+    xmlns:android="http://schemas.android.com/apk/res/android">
 
     <FrameLayout
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
         android:layout_weight="40"
-        android:paddingBottom="20dp"
         android:paddingLeft="20dp"
         android:paddingRight="20dp"
-        android:paddingTop="20dp">
+        android:paddingTop="20dp"
+        android:paddingBottom="20dp">
 
         <ImageView
-            android:id="@+id/identicon_view"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
-            android:scaleType="fitXY" />
+            android:scaleType="fitXY"
+            android:id="@+id/identicon_view"/>
 
     </FrameLayout>
 
-    <FrameLayout
-        android:layout_width="fill_parent"
+    <FrameLayout android:layout_width="fill_parent"
         android:layout_height="fill_parent"
         android:layout_weight="60"
-        android:background="#ffffff"
-        android:paddingBottom="10dp"
         android:paddingLeft="10dp"
-        android:paddingRight="10dp">
+        android:paddingRight="10dp"
+        android:paddingBottom="10dp"
+        android:background="#ffffff">
 
-        <TextView
-            android:id="@+id/identicon_text"
+        <TextView android:layout_height="wrap_content"
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
+            android:textColor="#7f7f7f"
+            android:textSize="16dp"
             android:layout_gravity="center"
             android:autoLink="web"
             android:gravity="center"
-            android:textColor="#7f7f7f"
             android:textColorLink="#316f9f"
-            android:textSize="16dp" />
+            android:id="@+id/identicon_text"/>
 
     </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/intro_layout.xml b/TMessagesProj/src/main/res/layout/intro_layout.xml
index 5b64a925c..74fd2ec4f 100644
--- a/TMessagesProj/src/main/res/layout/intro_layout.xml
+++ b/TMessagesProj/src/main/res/layout/intro_layout.xml
@@ -1,6 +1,7 @@
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_height="fill_parent"
+    android:layout_width="fill_parent"
     android:fillViewport="true">
 
     <FrameLayout
@@ -9,96 +10,95 @@
         android:background="#fafafa">
 
         <FrameLayout
+            android:layout_gravity="top"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:layout_gravity="top"
             android:layout_marginTop="88dp">
 
             <ImageView
-                android:id="@+id/icon_image1"
                 android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
                 android:layout_gravity="center"
-                android:src="@drawable/intro1" />
+                android:layout_height="wrap_content"
+                android:id="@+id/icon_image1"
+                android:src="@drawable/intro1"/>
 
             <ImageView
-                android:id="@+id/icon_image2"
                 android:layout_width="wrap_content"
+                android:layout_gravity="center"
                 android:layout_height="wrap_content"
-                android:layout_gravity="center" />
+                android:id="@+id/icon_image2"/>
 
         </FrameLayout>
 
         <android.support.v4.view.ViewPager
-            android:id="@+id/intro_view_pager"
             android:layout_width="fill_parent"
-            android:layout_height="fill_parent" />
+            android:layout_height="fill_parent"
+            android:id="@+id/intro_view_pager"/>
 
-        <TextView
-            android:id="@+id/start_messaging_button"
-            android:layout_width="wrap_content"
+        <TextView android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:layout_marginLeft="10dp"
-            android:layout_marginRight="10dp"
             android:layout_marginTop="336dp"
             android:background="@drawable/regbtn_states"
+            android:layout_gravity="center_horizontal"
+            android:textSize="18dp"
+            android:textColor="#ffffff"
             android:gravity="center"
-            android:paddingBottom="10dp"
             android:paddingLeft="20dp"
             android:paddingRight="20dp"
             android:paddingTop="10dp"
-            android:textColor="#ffffff"
-            android:textSize="18dp" />
+            android:paddingBottom="10dp"
+            android:layout_marginLeft="10dp"
+            android:layout_marginRight="10dp"
+            android:id="@+id/start_messaging_button"/>
 
         <LinearLayout
-            android:id="@+id/bottom_pages"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:id="@+id/bottom_pages"
+            android:orientation="horizontal"
             android:layout_gravity="bottom|center_horizontal"
-            android:layout_marginBottom="26dp"
-            android:orientation="horizontal">
+            android:layout_marginBottom="26dp">
 
             <FrameLayout
                 android:layout_width="5dp"
                 android:layout_height="5dp"
-                android:background="#bbbbbb" />
+                android:background="#bbbbbb"/>
 
             <FrameLayout
                 android:layout_width="5dp"
                 android:layout_height="5dp"
-                android:layout_marginLeft="7dp"
-                android:background="#bbbbbb" />
+                android:background="#bbbbbb"
+                android:layout_marginLeft="7dp"/>
 
             <FrameLayout
                 android:layout_width="5dp"
                 android:layout_height="5dp"
-                android:layout_marginLeft="7dp"
-                android:background="#bbbbbb" />
+                android:background="#bbbbbb"
+                android:layout_marginLeft="7dp"/>
 
             <FrameLayout
                 android:layout_width="5dp"
                 android:layout_height="5dp"
-                android:layout_marginLeft="7dp"
-                android:background="#bbbbbb" />
+                android:background="#bbbbbb"
+                android:layout_marginLeft="7dp"/>
 
             <FrameLayout
                 android:layout_width="5dp"
                 android:layout_height="5dp"
-                android:layout_marginLeft="7dp"
-                android:background="#bbbbbb" />
+                android:background="#bbbbbb"
+                android:layout_marginLeft="7dp"/>
 
             <FrameLayout
                 android:layout_width="5dp"
                 android:layout_height="5dp"
-                android:layout_marginLeft="7dp"
-                android:background="#bbbbbb" />
+                android:background="#bbbbbb"
+                android:layout_marginLeft="7dp"/>
 
             <FrameLayout
                 android:layout_width="5dp"
                 android:layout_height="5dp"
-                android:layout_marginLeft="7dp"
-                android:background="#bbbbbb" />
+                android:background="#bbbbbb"
+                android:layout_marginLeft="7dp"/>
 
         </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/intro_layout_tablet.xml b/TMessagesProj/src/main/res/layout/intro_layout_tablet.xml
index f3a0404d6..d5aa085c6 100644
--- a/TMessagesProj/src/main/res/layout/intro_layout_tablet.xml
+++ b/TMessagesProj/src/main/res/layout/intro_layout_tablet.xml
@@ -1,12 +1,13 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent">
 
     <ImageView
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:scaleType="centerCrop"
-        android:src="@drawable/cats" />
+        android:src="@drawable/cats"
+        android:scaleType="centerCrop"/>
 
     <FrameLayout
         android:layout_width="498dp"
@@ -14,7 +15,7 @@
         android:layout_gravity="center"
         android:background="@drawable/btnshadow">
 
-        <include layout="@layout/intro_layout" />
+        <include layout="@layout/intro_layout"/>
 
     </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/intro_view_layout.xml b/TMessagesProj/src/main/res/layout/intro_view_layout.xml
index 6cafb96cd..08b700038 100644
--- a/TMessagesProj/src/main/res/layout/intro_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout/intro_view_layout.xml
@@ -1,29 +1,28 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="fill_parent"
     android:layout_height="fill_parent">
 
-    <TextView
-        android:id="@+id/header_text"
+    <TextView android:layout_height="wrap_content"
         android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
+        android:id="@+id/header_text"
+        android:textSize="26dp"
+        android:gravity="center"
         android:layout_gravity="top|left"
         android:layout_marginLeft="18dp"
         android:layout_marginRight="16dp"
-        android:layout_marginTop="224dp"
-        android:gravity="center"
         android:textColor="#ff000000"
-        android:textSize="26dp" />
+        android:layout_marginTop="224dp"/>
 
-    <TextView
-        android:id="@+id/message_text"
+    <TextView android:layout_height="wrap_content"
         android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
+        android:id="@+id/message_text"
+        android:textSize="15dp"
+        android:gravity="center"
         android:layout_gravity="top|left"
         android:layout_marginLeft="16dp"
         android:layout_marginRight="16dp"
         android:layout_marginTop="266dp"
-        android:gravity="center"
-        android:textColor="#808080"
-        android:textSize="15dp" />
+        android:textColor="#808080"/>
 
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/location_attach_layout.xml b/TMessagesProj/src/main/res/layout/location_attach_layout.xml
index 2a92267d0..0775f3058 100644
--- a/TMessagesProj/src/main/res/layout/location_attach_layout.xml
+++ b/TMessagesProj/src/main/res/layout/location_attach_layout.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:layout_gravity="top">
@@ -9,19 +10,19 @@
         android:id="@+id/map_view"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="top" />
+        android:layout_gravity="top"/>
 
     <TextView
-        android:id="@+id/location_send_button"
         android:layout_width="match_parent"
         android:layout_height="50dp"
         android:layout_gravity="bottom"
         android:layout_marginBottom="15dp"
-        android:layout_marginLeft="15dp"
         android:layout_marginRight="15dp"
-        android:background="@drawable/location_send_button_states"
+        android:layout_marginLeft="15dp"
         android:gravity="center"
+        android:textSize="14dp"
         android:textColor="#316f9f"
-        android:textSize="14dp" />
+        android:background="@drawable/location_send_button_states"
+        android:id="@+id/location_send_button"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/location_view_layout.xml b/TMessagesProj/src/main/res/layout/location_view_layout.xml
index 960edabd3..d89e26ebd 100644
--- a/TMessagesProj/src/main/res/layout/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout/location_view_layout.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:layout_gravity="top">
@@ -9,46 +10,46 @@
         android:id="@+id/map_view"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="top" />
+        android:layout_gravity="top"/>
 
     <FrameLayout
-        android:id="@+id/location_bottom_view"
         android:layout_width="fill_parent"
         android:layout_height="91dp"
         android:layout_gravity="bottom"
-        android:background="@drawable/location_panel">
+        android:background="@drawable/location_panel"
+        android:id="@+id/location_bottom_view">
 
         <org.telegram.ui.Components.BackupImageView
-            android:id="@+id/location_avatar_view"
             android:layout_width="64dp"
             android:layout_height="64dp"
-            android:layout_gravity="top"
+            android:id="@+id/location_avatar_view"
             android:layout_marginLeft="12dp"
-            android:layout_marginTop="16dp" />
+            android:layout_marginTop="16dp"
+            android:layout_gravity="top"/>
 
         <TextView
-            android:id="@+id/location_name_label"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="top"
+            android:textSize="22dp"
+            android:textColor="#212121"
             android:layout_marginLeft="88dp"
-            android:layout_marginRight="12dp"
             android:layout_marginTop="20dp"
-            android:maxLines="1"
-            android:textColor="#212121"
-            android:textSize="22dp" />
+            android:layout_marginRight="12dp"
+            android:id="@+id/location_name_label"
+            android:layout_gravity="top"
+            android:maxLines="1"/>
 
         <TextView
-            android:id="@+id/location_distance_label"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="top"
+            android:textSize="15dp"
             android:layout_marginLeft="88dp"
-            android:layout_marginRight="12dp"
             android:layout_marginTop="52dp"
-            android:maxLines="1"
+            android:layout_marginRight="12dp"
             android:textColor="#999999"
-            android:textSize="15dp" />
+            android:id="@+id/location_distance_label"
+            android:layout_gravity="top"
+            android:maxLines="1"/>
 
     </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/media_layout.xml b/TMessagesProj/src/main/res/layout/media_layout.xml
index 752e3100c..04b9f3a89 100644
--- a/TMessagesProj/src/main/res/layout/media_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_layout.xml
@@ -5,29 +5,29 @@
 
     <GridView
         android:id="@+id/media_grid"
+        android:paddingLeft="2dp"
+        android:paddingRight="2dp"
+        android:paddingBottom="2dp"
+        android:clipToPadding="false"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:layout_gravity="top"
-        android:clipToPadding="false"
         android:drawSelectorOnTop="true"
-        android:gravity="center"
+        android:verticalSpacing="4dp"
         android:horizontalSpacing="4dp"
-        android:listSelector="@drawable/list_selector"
         android:numColumns="auto_fit"
-        android:paddingBottom="2dp"
-        android:paddingLeft="2dp"
-        android:paddingRight="2dp"
         android:stretchMode="columnWidth"
-        android:verticalSpacing="4dp" />
+        android:gravity="center"
+        android:listSelector="@drawable/list_selector"
+        android:layout_gravity="top"/>
 
     <TextView
-        android:id="@+id/searchEmptyView"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:gravity="center"
         android:textColor="#808080"
+        android:gravity="center"
         android:textSize="20dp"
-        android:visibility="gone" />
+        android:id="@+id/searchEmptyView"
+        android:visibility="gone"/>
 
     <LinearLayout
         android:id="@+id/progressLayout"
@@ -39,7 +39,7 @@
 
         <ProgressBar
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content" />
+            android:layout_height="wrap_content"/>
 
     </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/media_loading_layout.xml b/TMessagesProj/src/main/res/layout/media_loading_layout.xml
index c342791fa..435491b6d 100644
--- a/TMessagesProj/src/main/res/layout/media_loading_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_loading_layout.xml
@@ -6,7 +6,7 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_gravity="center"
-        android:paddingBottom="6dp"
-        android:paddingTop="6dp" />
+        android:paddingTop="6dp"
+        android:paddingBottom="6dp"/>
 
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/media_photo_layout.xml b/TMessagesProj/src/main/res/layout/media_photo_layout.xml
index 59f5594b7..918626671 100644
--- a/TMessagesProj/src/main/res/layout/media_photo_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_photo_layout.xml
@@ -1,10 +1,11 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="100dp"
     android:layout_height="100dp">
 
     <org.telegram.ui.Components.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
+        android:layout_height="fill_parent"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/media_video_layout.xml b/TMessagesProj/src/main/res/layout/media_video_layout.xml
index a4a46aacd..17de40a58 100644
--- a/TMessagesProj/src/main/res/layout/media_video_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_video_layout.xml
@@ -1,37 +1,38 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="100dp"
     android:layout_height="100dp">
 
     <org.telegram.ui.Components.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
+        android:layout_height="fill_parent"/>
 
     <LinearLayout
         android:layout_width="wrap_content"
         android:layout_height="16dp"
-        android:layout_gravity="bottom"
+        android:paddingLeft="3dp"
+        android:paddingRight="3dp"
         android:background="@drawable/phototime"
-        android:gravity="center_vertical"
         android:orientation="horizontal"
-        android:paddingLeft="3dp"
-        android:paddingRight="3dp">
+        android:gravity="center_vertical"
+        android:layout_gravity="bottom">
 
         <ImageView
-            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:src="@drawable/ic_video" />
+            android:layout_width="wrap_content"
+            android:src="@drawable/ic_video"/>
 
         <TextView
-            android:id="@+id/chat_video_time"
-            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center_vertical"
-            android:layout_marginBottom="1dp"
+            android:layout_width="wrap_content"
+            android:textColor="#ffffff"
+            android:textSize="12dp"
             android:layout_marginLeft="4dp"
             android:gravity="center_vertical"
-            android:textColor="#ffffff"
-            android:textSize="12dp" />
+            android:layout_gravity="center_vertical"
+            android:layout_marginBottom="1dp"
+            android:id="@+id/chat_video_time"/>
 
     </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/messages_list.xml b/TMessagesProj/src/main/res/layout/messages_list.xml
index 7d47cf77d..b051134b5 100644
--- a/TMessagesProj/src/main/res/layout/messages_list.xml
+++ b/TMessagesProj/src/main/res/layout/messages_list.xml
@@ -1,67 +1,68 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical">
 
     <ListView
-        android:id="@+id/messages_list_view"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:animationCache="false"
+        android:id="@+id/messages_list_view"
+        android:fadingEdge="none"
+        android:fadingEdgeLength="0dp"
         android:divider="@null"
         android:dividerHeight="0px"
-        android:fadingEdge="none"
-        android:fadingEdgeLength="0dp" />
+        android:animationCache="false"/>
 
     <LinearLayout
-        android:id="@+id/search_empty_view"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:gravity="center"
+        android:id="@+id/search_empty_view"
         android:orientation="vertical"
+        android:gravity="center"
         android:visibility="gone">
 
         <TextView
-            android:id="@+id/search_empty_text"
             android:layout_width="match_parent"
             android:layout_height="0dp"
-            android:layout_weight="1"
-            android:gravity="center"
             android:textColor="#808080"
-            android:textSize="20dp" />
+            android:gravity="center"
+            android:textSize="20dp"
+            android:id="@+id/search_empty_text"
+            android:layout_weight="1"/>
 
         <FrameLayout
-            android:layout_width="match_parent"
             android:layout_height="0dp"
-            android:layout_weight="1" />
+            android:layout_width="match_parent"
+            android:layout_weight="1"/>
 
     </LinearLayout>
 
     <LinearLayout
-        android:id="@+id/list_empty_view"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:gravity="center"
+        android:id="@+id/list_empty_view"
         android:orientation="vertical"
+        android:gravity="center"
         android:visibility="gone">
 
         <TextView
-            android:id="@+id/list_empty_view_text1"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:gravity="center"
             android:textColor="#959595"
-            android:textSize="20dp" />
+            android:gravity="center"
+            android:textSize="20dp"
+            android:id="@+id/list_empty_view_text1"/>
 
         <TextView
-            android:id="@+id/list_empty_view_text2"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:textColor="#959595"
             android:gravity="center"
-            android:lineSpacingExtra="2dp"
+            android:textSize="15dp"
             android:paddingTop="6dp"
-            android:textColor="#959595"
-            android:textSize="15dp" />
+            android:lineSpacingExtra="2dp"
+            android:id="@+id/list_empty_view_text2"/>
 
     </LinearLayout>
 
@@ -75,17 +76,17 @@
 
         <ProgressBar
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content" />
+            android:layout_height="wrap_content"/>
 
     </LinearLayout>
 
     <ImageView
-        android:id="@+id/floating_button"
-        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        android:src="@drawable/floating_states"
         android:layout_gravity="bottom|right"
-        android:layout_marginBottom="14dp"
         android:layout_marginRight="14dp"
-        android:src="@drawable/floating_states" />
+        android:layout_marginBottom="14dp"
+        android:id="@+id/floating_button"/>
 
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml
index 0d89baa91..1f966a1f8 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml
@@ -1,4 +1,5 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="100dp"
     android:layout_height="100dp"
     android:layout_gravity="top">
@@ -6,39 +7,39 @@
     <org.telegram.ui.Components.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
+        android:layout_height="fill_parent"/>
 
     <LinearLayout
         android:layout_width="fill_parent"
         android:layout_height="28dp"
         android:layout_gravity="bottom"
-        android:background="#7f000000"
-        android:orientation="horizontal">
+        android:orientation="horizontal"
+        android:background="#7f000000">
 
         <TextView
-            android:id="@+id/album_name"
-            android:layout_width="0dp"
             android:layout_height="fill_parent"
-            android:layout_marginLeft="8dp"
+            android:layout_width="0dp"
+            android:id="@+id/album_name"
+            android:textSize="13dp"
+            android:gravity="center_vertical"
+            android:textColor="#ffffffff"
             android:layout_weight="1"
+            android:singleLine="true"
             android:ellipsize="end"
-            android:gravity="center_vertical"
             android:maxLines="1"
-            android:singleLine="true"
-            android:textColor="#ffffffff"
-            android:textSize="13dp" />
+            android:layout_marginLeft="8dp"/>
 
         <TextView
-            android:id="@+id/album_count"
-            android:layout_width="wrap_content"
             android:layout_height="fill_parent"
-            android:layout_marginLeft="4dp"
-            android:layout_marginRight="4dp"
+            android:layout_width="wrap_content"
+            android:id="@+id/album_count"
+            android:textSize="13dp"
             android:gravity="center_vertical"
-            android:maxLines="1"
-            android:singleLine="true"
             android:textColor="#ffaaaaaa"
-            android:textSize="13dp" />
+            android:singleLine="true"
+            android:maxLines="1"
+            android:layout_marginLeft="4dp"
+            android:layout_marginRight="4dp"/>
 
     </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml
index 5ccf5addc..7009f8bb0 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_bottom_layout.xml
@@ -1,59 +1,60 @@
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_gravity="bottom"
+    android:orientation="horizontal"
     android:layout_width="fill_parent"
     android:layout_height="48dp"
-    android:layout_gravity="bottom"
-    android:background="#ff333333"
-    android:orientation="horizontal">
+    android:background="#ff333333">
 
     <Button
+        android:textSize="14dp"
+        android:textColor="#ffffff"
         android:id="@+id/cancel_button"
-        android:layout_width="0.0dip"
-        android:layout_height="fill_parent"
-        android:layout_weight="1.0"
         android:background="@drawable/bar_selector_picker"
         android:paddingLeft="3dp"
-        android:textColor="#ffffff"
-        android:textSize="14dp" />
+        android:layout_width="0.0dip"
+        android:layout_height="fill_parent"
+        android:layout_weight="1.0"/>
 
     <FrameLayout
         android:id="@+id/done_button"
-        android:layout_width="0dp"
-        android:layout_height="fill_parent"
-        android:layout_weight="1.0"
         android:background="@drawable/bar_selector_picker"
+        android:paddingRight="3dp"
         android:clickable="true"
-        android:paddingRight="3dp">
+        android:layout_width="0dp"
+        android:layout_height="fill_parent"
+        android:layout_weight="1.0">
 
         <LinearLayout
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:orientation="horizontal">
+            android:orientation="horizontal"
+            android:layout_gravity="center">
 
             <TextView
-                android:id="@+id/done_button_badge"
+                android:textSize="13dp"
+                android:textColor="#ffffff"
+                android:gravity="center"
+                android:background="@drawable/photobadge"
+                android:layout_gravity="center"
                 android:layout_width="wrap_content"
                 android:layout_height="23dp"
-                android:layout_gravity="center"
-                android:layout_marginRight="10dp"
-                android:background="@drawable/photobadge"
-                android:gravity="center"
                 android:minWidth="23dp"
-                android:paddingBottom="1dp"
+                android:id="@+id/done_button_badge"
                 android:paddingLeft="8dp"
                 android:paddingRight="8dp"
-                android:textColor="#ffffff"
-                android:textSize="13dp" />
+                android:paddingBottom="1dp"
+                android:layout_marginRight="10dp"/>
 
             <TextView
-                android:id="@+id/done_button_text"
+                android:textSize="14dp"
+                android:textColor="#ffffff"
+                android:gravity="center"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:layout_gravity="center_vertical"
+                android:id="@+id/done_button_text"
                 android:drawablePadding="8dp"
-                android:gravity="center"
-                android:textColor="#ffffff"
-                android:textSize="14dp" />
+                android:layout_gravity="center_vertical"/>
 
         </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_layout.xml
index 1939c73d3..e47a34498 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_layout.xml
@@ -1,54 +1,55 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:background="#ff000000"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:layout_gravity="top"
-    android:background="#ff000000">
+    android:layout_gravity="top">
 
     <GridView
         android:id="@+id/media_grid"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:layout_gravity="top"
+        android:paddingBottom="4dp"
+        android:paddingTop="4dp"
+        android:paddingLeft="4dp"
+        android:paddingRight="4dp"
         android:layout_marginBottom="48dp"
         android:clipToPadding="false"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
         android:drawSelectorOnTop="true"
-        android:gravity="center"
+        android:verticalSpacing="4dp"
         android:horizontalSpacing="4dp"
-        android:listSelector="@drawable/list_selector"
         android:numColumns="auto_fit"
-        android:paddingBottom="4dp"
-        android:paddingLeft="4dp"
-        android:paddingRight="4dp"
-        android:paddingTop="4dp"
-        android:scrollbars="none"
         android:stretchMode="columnWidth"
-        android:verticalSpacing="4dp" />
+        android:gravity="center"
+        android:layout_gravity="top"
+        android:scrollbars="none"
+        android:listSelector="@drawable/list_selector"/>
 
     <TextView
-        android:id="@+id/searchEmptyView"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_marginBottom="48dp"
-        android:gravity="center"
         android:textColor="#808080"
+        android:gravity="center"
         android:textSize="20dp"
-        android:visibility="gone" />
+        android:id="@+id/searchEmptyView"
+        android:visibility="gone"
+        android:layout_marginBottom="48dp"/>
 
     <LinearLayout
         android:id="@+id/progressLayout"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:layout_marginBottom="48dp"
         android:gravity="center"
         android:orientation="vertical"
-        android:visibility="gone">
+        android:visibility="gone"
+        android:layout_marginBottom="48dp">
 
         <ProgressBar
             android:layout_width="wrap_content"
-            android:layout_height="wrap_content" />
+            android:layout_height="wrap_content"/>
 
     </LinearLayout>
 
-    <include layout="@layout/photo_picker_bottom_layout" />
+    <include layout="@layout/photo_picker_bottom_layout"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml
index 5cb52265c..8c1440e16 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml
@@ -1,4 +1,5 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="100dp"
     android:layout_height="100dp"
     android:layout_gravity="top">
@@ -6,27 +7,27 @@
     <org.telegram.ui.Components.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
+        android:layout_height="fill_parent"/>
 
     <FrameLayout
-        android:id="@+id/photo_frame"
+        android:layout_height="fill_parent"
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
+        android:id="@+id/photo_frame"/>
 
     <FrameLayout
-        android:id="@+id/photo_check_frame"
         android:layout_width="42dp"
         android:layout_height="42dp"
-        android:layout_gravity="right">
+        android:layout_gravity="right"
+        android:id="@+id/photo_check_frame">
 
         <ImageView
-            android:id="@+id/photo_check"
-            android:layout_width="30dp"
             android:layout_height="30dp"
+            android:layout_width="30dp"
+            android:id="@+id/photo_check"
             android:layout_gravity="right"
-            android:layout_marginRight="2dp"
             android:layout_marginTop="2dp"
-            android:scaleType="center" />
+            android:scaleType="center"
+            android:layout_marginRight="2dp"/>
 
     </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/popup_audio_layout.xml b/TMessagesProj/src/main/res/layout/popup_audio_layout.xml
index f76bb5d17..cbd48a1f8 100644
--- a/TMessagesProj/src/main/res/layout/popup_audio_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_audio_layout.xml
@@ -1,16 +1,17 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/text_container"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:layout_gravity="top"
-    android:background="@drawable/list_selector">
+    android:id="@+id/text_container"
+    android:background="@drawable/list_selector"
+    android:layout_gravity="top">
 
     <FrameLayout
-        android:id="@+id/audio_container"
-        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_gravity="center"
+        android:layout_width="match_parent"
         android:layout_marginLeft="20dp"
-        android:layout_marginRight="20dp" />
+        android:layout_marginRight="20dp"
+        android:layout_gravity="center"
+        android:id="@+id/audio_container"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/popup_count_layout.xml b/TMessagesProj/src/main/res/layout/popup_count_layout.xml
index 890272233..1593006af 100644
--- a/TMessagesProj/src/main/res/layout/popup_count_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_count_layout.xml
@@ -3,13 +3,14 @@
     android:layout_height="wrap_content"
     android:layout_alignParentRight="true">
 
-    <TextView xmlns:android="http://schemas.android.com/apk/res/android"
-        android:id="@+id/count_text"
-        android:layout_width="56dp"
+    <TextView
+        xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_height="fill_parent"
-        android:layout_centerInParent="true"
-        android:gravity="center"
+        android:layout_width="56dp"
+        android:id="@+id/count_text"
         android:textColor="#ffd7e8f7"
-        android:textSize="14dp" />
+        android:textSize="14dp"
+        android:gravity="center"
+        android:layout_centerInParent="true"/>
 
 </RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/popup_image_layout.xml b/TMessagesProj/src/main/res/layout/popup_image_layout.xml
index ef9590e9d..e1fbaccd1 100644
--- a/TMessagesProj/src/main/res/layout/popup_image_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_image_layout.xml
@@ -1,24 +1,25 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/text_container"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:layout_gravity="top"
-    android:background="@drawable/list_selector"
-    android:padding="10dp">
+    android:id="@+id/text_container"
+    android:padding="10dp"
+    android:background="@drawable/list_selector">
 
     <org.telegram.ui.Components.BackupImageView
-        android:id="@+id/message_image"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="center" />
+        android:id="@+id/message_image"
+        android:layout_gravity="center"/>
 
     <TextView
-        android:id="@+id/message_text"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_gravity="center"
-        android:gravity="center"
+        android:textSize="16dp"
         android:textColor="#ff000000"
-        android:textSize="16dp" />
+        android:id="@+id/message_text"
+        android:gravity="center"
+        android:layout_gravity="center"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/popup_notification_layout.xml b/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
index 241099f72..3286d13b5 100644
--- a/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
@@ -1,128 +1,129 @@
-<org.telegram.ui.Components.SizeNotifierRelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/chat_layout"
+<org.telegram.ui.Components.SizeNotifierRelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:layout_gravity="top"
-    android:background="#99000000">
+    android:background="#99000000"
+    android:id="@+id/chat_layout">
 
     <RelativeLayout
         android:layout_width="match_parent"
         android:layout_height="match_parent">
 
         <RelativeLayout
-            android:id="@+id/popup_container"
             android:layout_width="match_parent"
             android:layout_height="240dp"
+            android:background="#ffffffff"
             android:layout_centerInParent="true"
             android:layout_marginLeft="12dp"
             android:layout_marginRight="12dp"
-            android:background="#ffffffff">
+            android:id="@+id/popup_container">
 
             <LinearLayout
-                android:id="@+id/chat_compose_panel"
-                android:layout_width="match_parent"
                 android:layout_height="wrap_content"
+                android:layout_width="match_parent"
                 android:layout_alignParentBottom="true"
-                android:background="@drawable/compose_panel"
                 android:focusable="true"
                 android:focusableInTouchMode="true"
+                android:id="@+id/chat_compose_panel"
+                android:background="@drawable/compose_panel"
                 android:orientation="horizontal">
 
                 <org.telegram.ui.Components.FrameLayoutFixed
-                    android:layout_width="0dp"
                     android:layout_height="wrap_content"
+                    android:layout_width="0dp"
                     android:layout_weight="1">
 
                     <ImageView
-                        android:id="@+id/chat_smile_button"
+                        android:src="@drawable/ic_msg_panel_smiles"
                         android:layout_width="48dp"
                         android:layout_height="48dp"
-                        android:layout_gravity="bottom"
                         android:layout_marginTop="2dp"
-                        android:paddingLeft="4dp"
                         android:paddingTop="1dp"
+                        android:paddingLeft="4dp"
                         android:scaleType="centerInside"
-                        android:src="@drawable/ic_msg_panel_smiles" />
+                        android:layout_gravity="bottom"
+                        android:id="@+id/chat_smile_button"/>
 
                     <EditText
-                        android:id="@+id/chat_text_edit"
                         android:layout_width="match_parent"
                         android:layout_height="wrap_content"
                         android:layout_gravity="bottom"
-                        android:layout_marginLeft="52dp"
-                        android:layout_marginRight="2dp"
-                        android:background="@null"
-                        android:gravity="bottom"
+                        android:id="@+id/chat_text_edit"
+                        android:maxLines="4"
+                        android:textSize="18dp"
+                        android:textColorHint="#b2b2b2"
                         android:imeOptions="flagNoExtractUi"
                         android:inputType="textCapSentences|textMultiLine"
                         android:maxLength="16384"
-                        android:maxLines="4"
+                        android:gravity="bottom"
+                        android:layout_marginLeft="52dp"
+                        android:layout_marginRight="2dp"
+                        android:background="@null"
                         android:paddingBottom="12dp"
                         android:paddingTop="11dp"
-                        android:textColor="#000000"
-                        android:textColorHint="#b2b2b2"
                         android:textCursorDrawable="@null"
-                        android:textSize="18dp" />
+                        android:textColor="#000000"/>
 
                     <org.telegram.ui.Components.FrameLayoutFixed
-                        android:id="@+id/record_panel"
-                        android:layout_width="fill_parent"
                         android:layout_height="48dp"
-                        android:layout_gravity="bottom"
+                        android:layout_width="fill_parent"
                         android:layout_marginTop="2dp"
+                        android:layout_gravity="bottom"
                         android:background="#ffffff"
+                        android:id="@+id/record_panel"
                         android:visibility="gone">
 
                         <LinearLayout
-                            android:id="@+id/slideText"
-                            android:layout_width="wrap_content"
                             android:layout_height="wrap_content"
+                            android:layout_width="wrap_content"
                             android:layout_gravity="center"
                             android:layout_marginLeft="30dp"
-                            android:orientation="horizontal">
+                            android:orientation="horizontal"
+                            android:id="@+id/slideText">
 
                             <ImageView
-                                android:layout_width="wrap_content"
                                 android:layout_height="wrap_content"
+                                android:layout_width="wrap_content"
+                                android:src="@drawable/slidearrow"
                                 android:layout_gravity="center_vertical"
-                                android:layout_marginTop="1dp"
-                                android:src="@drawable/slidearrow" />
+                                android:layout_marginTop="1dp"/>
 
                             <TextView
-                                android:id="@+id/slideToCancelTextView"
                                 android:layout_width="wrap_content"
                                 android:layout_height="wrap_content"
-                                android:layout_gravity="center_vertical"
-                                android:layout_marginLeft="6dp"
                                 android:textColor="#999999"
-                                android:textSize="12dp" />
+                                android:textSize="12dp"
+                                android:layout_marginLeft="6dp"
+                                android:id="@+id/slideToCancelTextView"
+                                android:layout_gravity="center_vertical"/>
 
                         </LinearLayout>
 
                         <LinearLayout
-                            android:layout_width="wrap_content"
                             android:layout_height="wrap_content"
+                            android:layout_width="wrap_content"
                             android:layout_gravity="center_vertical"
-                            android:background="#ffffffff"
+                            android:paddingLeft="13dp"
                             android:orientation="horizontal"
-                            android:paddingLeft="13dp">
+                            android:background="#ffffffff">
 
                             <ImageView
-                                android:layout_width="wrap_content"
                                 android:layout_height="wrap_content"
+                                android:layout_width="wrap_content"
+                                android:src="@drawable/rec"
                                 android:layout_gravity="center_vertical"
-                                android:layout_marginTop="1dp"
-                                android:src="@drawable/rec" />
+                                android:layout_marginTop="1dp"/>
 
                             <TextView
-                                android:id="@+id/recording_time_text"
                                 android:layout_width="wrap_content"
                                 android:layout_height="wrap_content"
-                                android:layout_gravity="center_vertical"
-                                android:layout_marginLeft="6dp"
+                                android:id="@+id/recording_time_text"
                                 android:text="00:00"
                                 android:textColor="#4d4c4b"
-                                android:textSize="16dp" />
+                                android:textSize="16dp"
+                                android:layout_gravity="center_vertical"
+                                android:layout_marginLeft="6dp"/>
 
                         </LinearLayout>
 
@@ -137,23 +138,23 @@
                     android:layout_marginTop="2dp">
 
                     <ImageButton
-                        android:id="@+id/chat_audio_send_button"
                         android:layout_width="48dp"
                         android:layout_height="48dp"
-                        android:background="@android:color/white"
+                        android:scaleType="centerInside"
+                        android:id="@+id/chat_audio_send_button"
                         android:enabled="false"
+                        android:src="@drawable/mic_button_states"
                         android:paddingRight="4dp"
-                        android:scaleType="centerInside"
-                        android:src="@drawable/mic_button_states" />
+                        android:background="@android:color/white"/>
 
                     <ImageButton
-                        android:id="@+id/chat_send_button"
                         android:layout_width="48dp"
                         android:layout_height="48dp"
-                        android:background="@android:color/transparent"
-                        android:enabled="false"
                         android:scaleType="centerInside"
-                        android:src="@drawable/ic_send" />
+                        android:id="@+id/chat_send_button"
+                        android:enabled="false"
+                        android:src="@drawable/ic_send"
+                        android:background="@android:color/transparent"/>
 
                 </FrameLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/popup_text_layout.xml b/TMessagesProj/src/main/res/layout/popup_text_layout.xml
index 39e91972b..02358aace 100644
--- a/TMessagesProj/src/main/res/layout/popup_text_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_text_layout.xml
@@ -1,27 +1,28 @@
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/text_scroll"
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:fillViewport="true">
+    android:fillViewport="true"
+    android:id="@+id/text_scroll">
 
     <LinearLayout
-        android:id="@+id/text_container"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_gravity="center_horizontal"
+        android:padding="10dp"
+        android:id="@+id/text_container"
         android:background="@drawable/list_selector"
-        android:orientation="horizontal"
-        android:padding="10dp">
+        android:orientation="horizontal">
 
         <TextView
-            android:id="@+id/message_text"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:gravity="center"
+            android:textSize="16dp"
             android:textColor="#ff000000"
             android:textColorLink="#ff000000"
-            android:textSize="16dp" />
+            android:id="@+id/message_text"
+            android:gravity="center"
+            android:layout_gravity="center"/>
 
     </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml b/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
index 56934ee84..981b72c3a 100644
--- a/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
+++ b/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
@@ -1,13 +1,14 @@
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:layout_gravity="center"
-    android:orientation="vertical">
+    android:layout_gravity="center">
 
     <org.telegram.ui.Components.ColorPickerView
         android:id="@+id/color_picker"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="center" />
+        android:layout_gravity="center"/>
 
 </LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml b/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
index b059c9056..a49b123c4 100644
--- a/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
+++ b/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
@@ -1,29 +1,30 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="fill_parent"
     android:layout_height="fill_parent">
 
     <ImageView
-        android:id="@+id/background_image"
-        android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:scaleType="centerCrop" />
+        android:layout_width="fill_parent"
+        android:scaleType="centerCrop"
+        android:id="@+id/background_image"/>
 
     <ProgressBar
-        android:id="@+id/action_progress"
         android:layout_width="60dp"
         android:layout_height="60dp"
         android:layout_gravity="center"
-        android:layout_marginBottom="52dp"
+        android:id="@+id/action_progress"
         android:padding="6dp"
-        android:visibility="visible" />
+        android:visibility="visible"
+        android:layout_marginBottom="52dp"/>
 
     <org.telegram.ui.Components.HorizontalListView
-        android:id="@+id/listView"
         android:layout_width="fill_parent"
         android:layout_height="102dp"
         android:layout_gravity="bottom"
+        android:id="@+id/listView"
         android:clipToPadding="false"
         android:paddingLeft="40dp"
-        android:paddingRight="40dp" />
+        android:paddingRight="40dp"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_wallpapers_my_row.xml b/TMessagesProj/src/main/res/layout/settings_wallpapers_my_row.xml
index f7717e509..d0683c0b1 100644
--- a/TMessagesProj/src/main/res/layout/settings_wallpapers_my_row.xml
+++ b/TMessagesProj/src/main/res/layout/settings_wallpapers_my_row.xml
@@ -1,19 +1,20 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/parent"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="102dp"
     android:layout_width="100dp"
-    android:layout_height="102dp">
+    android:id="@+id/parent">
 
     <ImageView
-        android:id="@+id/image"
-        android:layout_width="100dp"
         android:layout_height="100dp"
-        android:layout_gravity="bottom"
-        android:scaleType="center" />
+        android:layout_width="100dp"
+        android:scaleType="center"
+        android:id="@+id/image"
+        android:layout_gravity="bottom"/>
 
     <FrameLayout
-        android:id="@+id/selection"
-        android:layout_width="100dp"
         android:layout_height="102dp"
-        android:background="@drawable/wall_selection" />
+        android:layout_width="100dp"
+        android:background="@drawable/wall_selection"
+        android:id="@+id/selection"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml b/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
index b068ade7d..882ae732f 100644
--- a/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
+++ b/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
@@ -1,18 +1,19 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="100dp"
-    android:layout_height="102dp">
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="102dp"
+    android:layout_width="100dp">
 
     <org.telegram.ui.Components.BackupImageView
-        android:id="@+id/image"
-        android:layout_width="100dp"
         android:layout_height="100dp"
+        android:layout_width="100dp"
+        android:id="@+id/image"
         android:layout_gravity="bottom"
-        android:background="#5A475866" />
+        android:background="#5A475866"/>
 
     <FrameLayout
-        android:id="@+id/selection"
-        android:layout_width="100dp"
         android:layout_height="102dp"
-        android:background="@drawable/wall_selection" />
+        android:layout_width="100dp"
+        android:background="@drawable/wall_selection"
+        android:id="@+id/selection"/>
 
 </FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/song_select_layout.xml b/TMessagesProj/src/main/res/layout/song_select_layout.xml
index 5584d9f01..9576e5914 100644
--- a/TMessagesProj/src/main/res/layout/song_select_layout.xml
+++ b/TMessagesProj/src/main/res/layout/song_select_layout.xml
@@ -1,27 +1,27 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent">
 
     <ListView
-        android:id="@+id/listView"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
-        android:cacheColorHint="#ffffffff"
+        android:id="@+id/listView"
         android:clipToPadding="false"
-        android:divider="@null"
-        android:dividerHeight="0dp"
         android:fadingEdge="none"
         android:fadingEdgeLength="0dp"
-        android:scrollbars="none" />
+        android:dividerHeight="0dp"
+        android:divider="@null"
+        android:scrollbars="none"
+        android:cacheColorHint="#ffffffff"/>
 
-    <TextView
-        android:id="@+id/searchEmptyView"
-        android:layout_width="match_parent"
+    <TextView android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="top"
-        android:gravity="center"
         android:textColor="#808080"
+        android:gravity="center"
         android:textSize="20dp"
-        android:visibility="gone" />
+        android:id="@+id/searchEmptyView"
+        android:visibility="gone"
+        android:layout_gravity="top"/>
 
 </FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/video_editor_layout.xml b/TMessagesProj/src/main/res/layout/video_editor_layout.xml
index b6dd47d99..331d938fd 100644
--- a/TMessagesProj/src/main/res/layout/video_editor_layout.xml
+++ b/TMessagesProj/src/main/res/layout/video_editor_layout.xml
@@ -1,112 +1,113 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:background="#ff000000">
 
     <FrameLayout
-        android:id="@+id/video_container"
-        android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:layout_gravity="top"
+        android:layout_width="match_parent"
+        android:layout_marginTop="16dp"
         android:layout_marginBottom="160dp"
-        android:layout_marginTop="16dp">
+        android:id="@+id/video_container"
+        android:layout_gravity="top">
 
         <TextureView
-            android:id="@+id/video_view"
-            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center" />
+            android:layout_width="wrap_content"
+            android:layout_gravity="center"
+            android:id="@+id/video_view"/>
 
         <ImageView
-            android:id="@+id/play_button"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            android:layout_gravity="center"
             android:scaleType="center"
-            android:src="@drawable/video_play" />
+            android:src="@drawable/video_play"
+            android:layout_gravity="center"
+            android:id="@+id/play_button"/>
 
     </FrameLayout>
 
     <FrameLayout
-        android:id="@+id/control_layout"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content">
+        android:layout_height="wrap_content"
+        android:id="@+id/control_layout">
 
         <org.telegram.ui.Components.VideoSeekBarView
-            android:id="@+id/video_seekbar"
-            android:layout_width="match_parent"
             android:layout_height="36dp"
+            android:layout_width="match_parent"
+            android:id="@+id/video_seekbar"
+            android:background="#77000000"
             android:layout_marginLeft="8dp"
-            android:layout_marginRight="8dp"
-            android:background="#77000000" />
+            android:layout_marginRight="8dp"/>
 
         <org.telegram.ui.Components.VideoTimelineView
-            android:id="@+id/video_timeline_view"
             android:layout_width="match_parent"
             android:layout_height="74dp"
-            android:layout_marginTop="36dp" />
+            android:layout_marginTop="36dp"
+            android:id="@+id/video_timeline_view"/>
 
     </FrameLayout>
 
     <LinearLayout
-        android:id="@+id/info_container"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_gravity="bottom"
-        android:layout_marginBottom="16dp"
+        android:background="#ff2d2d2d"
         android:layout_marginLeft="16dp"
         android:layout_marginRight="16dp"
-        android:background="#ff2d2d2d"
-        android:orientation="vertical"
+        android:layout_marginBottom="16dp"
+        android:paddingTop="8dp"
         android:paddingBottom="8dp"
-        android:paddingTop="8dp">
-
+        android:id="@+id/info_container"
+        android:orientation="vertical">
+    
         <TextView
-            android:id="@+id/original_title"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:textColor="#f0f0f0"
+            android:textSize="15dp"
             android:layout_marginLeft="13dp"
             android:layout_marginRight="13dp"
-            android:textColor="#f0f0f0"
-            android:textSize="15dp" />
+            android:id="@+id/original_title"/>
 
         <TextView
-            android:id="@+id/original_size"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:textColor="#bebebe"
+            android:textSize="15dp"
             android:layout_marginLeft="13dp"
             android:layout_marginRight="13dp"
-            android:textColor="#bebebe"
-            android:textSize="15dp" />
+            android:id="@+id/original_size"/>
 
         <TextView
-            android:id="@+id/edited_title"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:textColor="#f0f0f0"
+            android:textSize="15dp"
+            android:layout_marginTop="10dp"
             android:layout_marginLeft="13dp"
             android:layout_marginRight="13dp"
-            android:layout_marginTop="10dp"
-            android:textColor="#f0f0f0"
-            android:textSize="15dp" />
+            android:id="@+id/edited_title"/>
 
         <TextView
-            android:id="@+id/edited_size"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:textColor="#bebebe"
+            android:textSize="15dp"
             android:layout_marginLeft="13dp"
             android:layout_marginRight="13dp"
-            android:textColor="#bebebe"
-            android:textSize="15dp" />
+            android:id="@+id/edited_size"/>
 
         <CheckBox
-            android:id="@+id/compress_video"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_marginLeft="8dp"
             android:layout_marginRight="8dp"
             android:layout_marginTop="6dp"
             android:textColor="#f0f0f0"
-            android:textSize="15dp" />
+            android:textSize="15dp"
+            android:id="@+id/compress_video"/>
 
     </LinearLayout>
 
diff --git a/TMessagesProj/src/main/res/values-v21/styles.xml b/TMessagesProj/src/main/res/values-v21/styles.xml
index 970a7ed3b..97ee0af7d 100644
--- a/TMessagesProj/src/main/res/values-v21/styles.xml
+++ b/TMessagesProj/src/main/res/values-v21/styles.xml
@@ -6,7 +6,8 @@
   ~ Copyright Nikolai Kudashov, 2013-2014.
   -->
 
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
+<resources
+    xmlns:android="http://schemas.android.com/apk/res/android">
 
     <!--THEMES-->
 
@@ -59,7 +60,7 @@
     </style>
 
     <!--ACTION BAR ITEMS-->
-
+    
     <style name="ActionBar.Transparent.TMessages.Item" parent="android:TextAppearance.Widget.IconMenu.Item">
         <item name="android:textColor">#000000</item>
         <item name="android:textSize">18sp</item>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 0060bd7e7..4309ce182 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 
+
 <resources>
     <string name="AppName">Telegram</string>
     <string name="LanguageName">English</string>
@@ -532,5 +533,4 @@
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
-    <string name="NoSongs">No songs yet</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index c522cfdfa..bf12e881b 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -1,4 +1,5 @@
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
+<resources
+    xmlns:android="http://schemas.android.com/apk/res/android">
 
     <!--THEMES-->
 
@@ -33,7 +34,7 @@
 
     <!-- POPUP -->
 
-    <style name="PopupAnimation" mce_bogus="1" parent="android:Animation">
+    <style name="PopupAnimation" parent="android:Animation" mce_bogus="1">
         <item name="android:windowEnterAnimation">@anim/popup_in</item>
         <item name="android:windowExitAnimation">@anim/popup_out</item>
     </style>
diff --git a/TMessagesProj/src/main/res/xml/auth.xml b/TMessagesProj/src/main/res/xml/auth.xml
index 6ff37ed6f..7856d0c83 100644
--- a/TMessagesProj/src/main/res/xml/auth.xml
+++ b/TMessagesProj/src/main/res/xml/auth.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
-    android:accountPreferences="@xml/auth_menu"
     android:accountType="org.telegram.account"
     android:icon="@drawable/ic_launcher"
+    android:smallIcon="@drawable/ic_launcher"
     android:label="@string/AppName"
-    android:smallIcon="@drawable/ic_launcher" />
+    android:accountPreferences="@xml/auth_menu"/>
diff --git a/TMessagesProj/src/main/res/xml/auth_menu.xml b/TMessagesProj/src/main/res/xml/auth_menu.xml
index 521bb4ee1..a4cc31699 100644
--- a/TMessagesProj/src/main/res/xml/auth_menu.xml
+++ b/TMessagesProj/src/main/res/xml/auth_menu.xml
@@ -1,14 +1,12 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory android:title="@string/Settings" />
-    <PreferenceScreen
-        android:key="account_settings"
-        android:summary=""
-        android:title="Account Settings">
-        <intent
-            android:action="org.telegram.messenger.OPEN_ACCOUNT"
-            android:targetClass="org.telegram.ui.LaunchActivity"
-            android:targetPackage="org.telegram.messenger" />
+    <PreferenceCategory android:title="@string/Settings"/>
+    <PreferenceScreen android:key="account_settings"
+        android:title="Account Settings"
+        android:summary="">
+        <intent android:action="org.telegram.messenger.OPEN_ACCOUNT"
+            android:targetPackage="org.telegram.messenger"
+            android:targetClass="org.telegram.ui.LaunchActivity"/>
     </PreferenceScreen>
 </PreferenceScreen>
diff --git a/TMessagesProj/src/main/res/xml/contacts.xml b/TMessagesProj/src/main/res/xml/contacts.xml
index 0c44bab1d..43fa9fd60 100644
--- a/TMessagesProj/src/main/res/xml/contacts.xml
+++ b/TMessagesProj/src/main/res/xml/contacts.xml
@@ -1,10 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <ContactsSource xmlns:android="http://schemas.android.com/apk/res/android">
-    <ContactsDataKind
-        android:detailColumn="data3"
-        android:detailSocialSummary="true"
-        android:icon="@drawable/ic_launcher"
+    <ContactsDataKind android:icon="@drawable/ic_launcher"
         android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile"
-        android:summaryColumn="data2" />
+        android:summaryColumn="data2"
+        android:detailColumn="data3"
+        android:detailSocialSummary="true"/>
 </ContactsSource>
diff --git a/TMessagesProj/src/main/res/xml/sync_contacts.xml b/TMessagesProj/src/main/res/xml/sync_contacts.xml
index 1cd7637e9..9ec405a98 100644
--- a/TMessagesProj/src/main/res/xml/sync_contacts.xml
+++ b/TMessagesProj/src/main/res/xml/sync_contacts.xml
@@ -1,3 +1,3 @@
 <sync-adapter xmlns:android="http://schemas.android.com/apk/res/android"
-    android:accountType="org.telegram.account"
-    android:contentAuthority="com.android.contacts" />
\ No newline at end of file
+    android:contentAuthority="com.android.contacts"
+    android:accountType="org.telegram.account"/>
\ No newline at end of file
