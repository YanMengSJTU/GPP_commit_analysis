diff --git a/TMessagesProj/src/main/java/DataSchema/Channel.java b/TMessagesProj/src/main/java/DataSchema/Channel.java
index 2c25474d4..3855a7432 100644
--- a/TMessagesProj/src/main/java/DataSchema/Channel.java
+++ b/TMessagesProj/src/main/java/DataSchema/Channel.java
@@ -1,16 +1,34 @@
 package DataSchema;
 
+import java.util.Collection;
+import java.util.HashMap;
+
 /**
  * Created by shverm on 1/29/2016.
  */
 public class Channel {
     public Geofence geofence;
     public User admin;
-    public int channelID;
+    public String channelID;
+
+    private transient HashMap<Integer, User> usersById;
 
-    public Channel(Geofence geofence, User admin, int channelID) {
+    public Channel(Geofence geofence, User admin, String channelID) {
         this.geofence = geofence;
         this.admin = admin;
         this.channelID = channelID;
+        usersById = new HashMap<>();
+    }
+
+    public Collection<User> getUsers() {
+        return usersById.values();
+    }
+
+    public void addUser(User user) {
+        usersById.put(user.userId, user);
+    }
+
+    public void removeUser(String userId) {
+        usersById.remove(userId);
     }
 }
diff --git a/TMessagesProj/src/main/java/DataSchema/GeoCordinates.java b/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
similarity index 53%
rename from TMessagesProj/src/main/java/DataSchema/GeoCordinates.java
rename to TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
index 0650d6f1d..edf2fbeb2 100644
--- a/TMessagesProj/src/main/java/DataSchema/GeoCordinates.java
+++ b/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
@@ -1,13 +1,10 @@
 package DataSchema;
 
-/**
- * Created by shverm on 1/29/2016.
- */
-public class GeoCordinates {
+public class GeoCoordinates {
     public double latitude;
     public double longitude;
 
-    public GeoCordinates(double latitude, double longitude) {
+    public GeoCoordinates(double latitude, double longitude) {
         this.latitude = latitude;
         this.longitude = longitude;
     }
diff --git a/TMessagesProj/src/main/java/DataSchema/Geofence.java b/TMessagesProj/src/main/java/DataSchema/Geofence.java
index 9302d8e63..e6da2ad5f 100644
--- a/TMessagesProj/src/main/java/DataSchema/Geofence.java
+++ b/TMessagesProj/src/main/java/DataSchema/Geofence.java
@@ -1,41 +1,106 @@
 package DataSchema;
 
-/**
- * Created by shverm on 1/29/2016.
- */
+import java.util.ArrayList;
+import java.util.List;
+
 public class Geofence {
-    private String[] constant;
 
-    private String[] multiple;
+    public List<GeoCoordinates> coordinates;
+    private transient double[] constant, multiple;
 
-    private Coordinates[] coordinates;
+    public Geofence(GeoCoordinates leftBottom, GeoCoordinates rightBottom, GeoCoordinates leftTop, GeoCoordinates rightTop) {
+        coordinates = new ArrayList<>();
 
-    public String[] getConstant() {
-        return constant;
+        addCoordinate(rightTop);
+        addCoordinate(leftTop);
+        addCoordinate(leftBottom);
+        addCoordinate(rightBottom);
+        precalc_values();
     }
 
-    public void setConstant(String[] constant) {
-        this.constant = constant;
+    public Geofence(List<GeoCoordinates> coordinates) {
+        this.coordinates = coordinates;
+        precalc_values();
     }
 
-    public String[] getMultiple() {
-        return multiple;
+    private void precalc_values() {
+
+        constant = new double[coordinates.size()];
+        multiple = new double[coordinates.size()];
+
+        int i, j = coordinates.size() - 1;
+
+        for (i = 0; i < coordinates.size(); i++) {
+            double ix = coordinates.get(i).latitude, iy = coordinates.get(i).longitude,
+                    jx = coordinates.get(j).latitude, jy = coordinates.get(j).longitude;
+
+            if (jy == iy) {
+                constant[i] = ix;
+                multiple[i] = 0;
+            } else {
+                constant[i] = ix - (iy * jx) / (jy - iy) + (iy * ix) / (jy - iy);
+                multiple[i] = (jx - ix) / (jy - iy);
+            }
+            j = i;
+        }
     }
 
-    public void setMultiple(String[] multiple) {
-        this.multiple = multiple;
+    private boolean pointInPolygon(double x, double y) {
+
+        int i, j = coordinates.size() - 1;
+        boolean oddNodes = false;
+
+        for (i = 0; i < coordinates.size(); i++) {
+
+            double iy = coordinates.get(i).longitude, jy = coordinates.get(j).longitude;
+
+            if ((iy < y && jy >= y
+                    || jy < y && iy >= y)) {
+                oddNodes ^= (y * multiple[i] + constant[i] < x);
+            }
+            j = i;
+        }
+
+        return oddNodes;
     }
 
-    public Coordinates[] getCoordinates() {
-        return coordinates;
+    private void addCoordinate(GeoCoordinates coordinate) {
+        coordinates.add(coordinate);
     }
 
-    public void setCoordinates(Coordinates[] coordinates) {
-        this.coordinates = coordinates;
+
+    //  Globals which should be set before calling these functions:
+//
+//  int    polyCorners  =  how many corners the polygon has (no repeats)
+//  float  polyX[]      =  horizontal coordinates of corners
+//  float  polyY[]      =  vertical coordinates of corners
+//  float  x, y         =  point to be tested
+//
+//  The following global arrays should be allocated before calling these functions:
+//
+//  float  constant[] = storage for precalculated constants (same size as polyX)
+//  float  multiple[] = storage for precalculated multipliers (same size as polyX)
+//
+//  (Globals are used in this example for purposes of speed.  Change as
+//  desired.)
+//
+//  USAGE:
+//  Call precalc_values() to initialize the constant[] and multiple[] arrays,
+//  then call pointInPolygon(x, y) to determine if the point is in the polygon.
+//
+//  The function will return YES if the point x,y is inside the polygon, or
+//  NO if it is not.  If the point is exactly on the edge of the polygon,
+//  then the function may return YES or NO.
+//
+//  Note that division by zero is avoided because the division is protected
+//  by the "if" clause which surrounds it.
+
+    public boolean Contains(GeoCoordinates coordinates) {
+        return Contains(coordinates.latitude, coordinates.longitude);
     }
 
-    @Override
-    public String toString() {
-        return "ChannelInfo [constant = " + constant + ", multiple = " + multiple + ", coordinates = " + coordinates + "]";
+    public boolean Contains(double latitude, double longitude) {
+        return pointInPolygon(latitude, longitude);
     }
+
 }
diff --git a/TMessagesProj/src/main/java/Utilities/Utilities.java b/TMessagesProj/src/main/java/Utilities/Utilities.java
index 77daa9592..2b6cd83c3 100644
--- a/TMessagesProj/src/main/java/Utilities/Utilities.java
+++ b/TMessagesProj/src/main/java/Utilities/Utilities.java
@@ -1,40 +1,8 @@
 package Utilities;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import DataSchema.Channel;
-
 /**
  * Created by shverm on 1/29/2016.
  */
 public class Utilities {
 
-    public List<Channel> buildDummyData() {
-//        GeoCordinates microsoftLeftBottom = new GeoCordinates(17.42726335237322, 78.34141373634338);
-//        GeoCordinates microsoftLeftTop = new GeoCordinates(17.429023997842013, 78.33863496780396);
-//        GeoCordinates microsoftRightTop = new GeoCordinates(17.43590263591793, 78.34269046783447);
-//        GeoCordinates microsoftRightBottom = new GeoCordinates(17.43414205681682, 78.34575891494751);
-//
-//        GeoCordinates mprLeftTop = new GeoCordinates(17.429554363369927, 78.34092993289232);
-//        GeoCordinates mprLeftBottom = new GeoCordinates(17.42954476690242, 78.34095273166895);
-//        GeoCordinates mprRightTop = new GeoCordinates(17.429711745365164, 78.34103118628263);
-//        GeoCordinates mprRightBottom = new GeoCordinates(17.429697670558106, 78.34106404334307);
-//
-//
-//
-//        Geofence microsoftGeofence = new Geofence(microsoftLeftBottom, microsoftLeftTop, microsoftRightTop, microsoftRightBottom);
-//        Geofence mprGeofence = new Geofence(mprLeftBottom, mprLeftTop, mprRightTop, mprRightBottom);
-//
-//        User microsoftAdmin = new User(1, "admin");
-//        User mprAdmin = new User(2, "admin");
-//
-//        Channel microsoftChannel = new Channel(microsoftGeofence, microsoftAdmin, 1);
-//        Channel mprChannel = new Channel(mprGeofence, mprAdmin, 2);
-//
-        List<Channel> channelList = new ArrayList<Channel>();
-//        channelList.add(microsoftChannel);
-//        channelList.add(mprChannel);
-        return channelList;
-    }
 }
