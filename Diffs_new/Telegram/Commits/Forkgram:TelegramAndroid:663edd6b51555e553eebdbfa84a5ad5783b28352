diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 1cc3a8320..759960c73 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -39,6 +39,7 @@
 import org.telegram.ui.DialogsActivity;
 import org.telegram.ui.ProfileActivity;
 
+import java.util.Set;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -65,6 +66,7 @@
     public ArrayList<TLRPC.TL_dialog> dialogsForward = new ArrayList<>();
     public ArrayList<TLRPC.TL_dialog> dialogsServerOnly = new ArrayList<>();
     public ArrayList<TLRPC.TL_dialog> dialogsGroupsOnly = new ArrayList<>();
+    public ArrayList<TLRPC.TL_dialog> dialogsHide = new ArrayList<>();
     public int unreadUnmutedDialogs;
     public int nextDialogsCacheOffset;
     public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
@@ -783,6 +785,7 @@ public void cleanup() {
         unreadUnmutedDialogs = 0;
         joiningToChannels.clear();
         channelViewsToSend.clear();
+        dialogsHide.clear();
         dialogsServerOnly.clear();
         dialogsForward.clear();
         dialogsGroupsOnly.clear();
@@ -9346,6 +9349,7 @@ public void sortDialogs(SparseArray<TLRPC.Chat> chatsDict) {
         dialogsServerOnly.clear();
         dialogsGroupsOnly.clear();
         dialogsForward.clear();
+        dialogsHide.clear();
         unreadUnmutedDialogs = 0;
         boolean selfAdded = false;
         int selfId = UserConfig.getInstance(currentAccount).getClientUserId();
@@ -9357,10 +9361,16 @@ public void sortDialogs(SparseArray<TLRPC.Chat> chatsDict) {
                 isLeftProxyChannel = false;
             }
         }
+        Set<String> setStr = mainPreferences.getStringSet("setOfDialogsToHide", (Set<String>)Collections.EMPTY_SET);
         for (int a = 0; a < dialogs.size(); a++) {
             TLRPC.TL_dialog d = dialogs.get(a);
             int high_id = (int) (d.id >> 32);
             int lower_id = (int) d.id;
+
+            if (setStr.contains(String.valueOf(d.id))) {
+                dialogsHide.add(d);
+            }
+
             if (lower_id == selfId) {
                 dialogsForward.add(0, d);
                 selfAdded = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index 0cfa51cd9..aa907471e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -104,6 +104,8 @@ public boolean isDataSetChanged() {
             return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
         } else if (dialogsType == 3) {
             return MessagesController.getInstance(currentAccount).dialogsForward;
+        } else if (dialogsType == 4) {
+            return MessagesController.getInstance(currentAccount).dialogsHide;
         }
         return null;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 556708357..969460a88 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -902,6 +902,8 @@ public void setDialogSelected(boolean value) {
             return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
         } else if (dialogsType == 3) {
             return MessagesController.getInstance(currentAccount).dialogsForward;
+        } else if (dialogsType == 4) {
+            return MessagesController.getInstance(currentAccount).dialogsHide;
         }
         return null;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 693ea968c..849b0bb9e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -106,6 +106,8 @@
 import org.telegram.ui.Components.StickersAlert;
 
 import java.util.ArrayList;
+import java.util.Set;
+import java.util.Collections;
 
 public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     
@@ -162,6 +164,8 @@
 
     private DialogsActivityDelegate delegate;
 
+    public static boolean DIALOGS_HIDED = false;
+
     public interface DialogsActivityDelegate {
         void didSelectDialogs(DialogsActivity fragment, ArrayList<Long> dids, CharSequence message, boolean param);
     }
@@ -386,8 +390,24 @@ public void onTextChanged(EditText editText) {
             actionBar.setSupportsHolidayImage(true);
         }
         actionBar.setTitleActionRunnable(() -> {
-            hideFloatingButton(false);
-            listView.smoothScrollToPosition(0);
+            if (getParentActivity() == null) {
+                return;
+            }
+            DIALOGS_HIDED = !DIALOGS_HIDED;
+
+            int currentTypeToOpen = 0;
+            if (DIALOGS_HIDED) currentTypeToOpen = 4;
+            Bundle args = new Bundle();
+            args.putBoolean("onlySelect", false);
+            args.putInt("dialogsType", currentTypeToOpen);
+            DialogsActivity fragment = new DialogsActivity(args);
+            LaunchActivity launchActivity = (LaunchActivity) getParentActivity();
+            dialogsLoaded[currentAccount] = true;
+            launchActivity.presentFragment(fragment, true, true);
+            dialogsLoaded[currentAccount] = true;
+
+            // hideFloatingButton(false);
+            // listView.smoothScrollToPosition(0);
         });
 
         if (allowSwitchAccount && UserConfig.getActivatedAccountsCount() > 1) {
@@ -934,16 +954,25 @@ public boolean onItemClick(View view, int position, float x, float y) {
                         }
                         final boolean isBot = user != null && user.bot;
 
+                        //Hide mode work.
+                        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+                        Set<String> setStr = preferences.getStringSet("setOfDialogsToHide", (Set<String>)Collections.EMPTY_SET);
+                        String selectedDialogStr = String.valueOf(selectedDialog);
+                        final boolean isAlreadyHided = setStr.contains(selectedDialogStr);
+                        /////
+
                         builder.setItems(new CharSequence[]{
                                 dialog.pinned || MessagesController.getInstance(currentAccount).canPinDialog(lower_id == 0) ? (dialog.pinned ? LocaleController.getString("UnpinFromTop", R.string.UnpinFromTop) : LocaleController.getString("PinToTop", R.string.PinToTop)) : null,
                                 LocaleController.getString("ClearHistory", R.string.ClearHistory),
                                 hasUnread ? LocaleController.getString("MarkAsRead", R.string.MarkAsRead) : LocaleController.getString("MarkAsUnread", R.string.MarkAsUnread),
-                                isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : isBot ? LocaleController.getString("DeleteAndStop", R.string.DeleteAndStop) : LocaleController.getString("Delete", R.string.Delete)
+                                isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : isBot ? LocaleController.getString("DeleteAndStop", R.string.DeleteAndStop) : LocaleController.getString("Delete", R.string.Delete),
+                                isAlreadyHided ? "Remove from Hide Mode" : "Add to Hide Mode"
                         }, new int[]{
                                 dialog.pinned ? R.drawable.chats_unpin : R.drawable.chats_pin,
                                 R.drawable.chats_clear,
                                 hasUnread ? R.drawable.menu_read : R.drawable.menu_unread,
-                                isChat ? R.drawable.chats_leave : R.drawable.chats_delete
+                                isChat ? R.drawable.chats_leave : R.drawable.chats_delete,
+                                R.drawable.chats_clear
                         }, (d, which) -> {
                             if (which == 0) {
                                 if (MessagesController.getInstance(currentAccount).pinDialog(selectedDialog, !pinned, null, 0) && !pinned) {
@@ -957,6 +986,15 @@ public boolean onItemClick(View view, int position, float x, float y) {
                                 } else {
                                     MessagesController.getInstance(currentAccount).markDialogAsUnread(selectedDialog, null, 0);
                                 }
+                            } else if (which == 4) {
+                                if (isAlreadyHided) {
+                                    setStr.remove(selectedDialogStr);
+                                } else {
+                                    setStr.add(selectedDialogStr);
+                                }
+                                SharedPreferences.Editor editor = MessagesController.getGlobalMainSettings().edit();
+                                editor.putStringSet("setOfDialogsToHide", setStr);
+                                editor.commit();
                             } else {
                                 AlertDialog.Builder builder12 = new AlertDialog.Builder(getParentActivity());
                                 builder12.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -1853,6 +1891,8 @@ public void onAnimationEnd(Animator animation) {
             return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
         } else if (dialogsType == 3) {
             return MessagesController.getInstance(currentAccount).dialogsForward;
+        } else if (dialogsType == 4) {
+            return MessagesController.getInstance(currentAccount).dialogsHide;
         }
         return null;
     }
