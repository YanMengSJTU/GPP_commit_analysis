diff --git a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
index 0f9133d08..e2f5e149e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
@@ -19,11 +19,9 @@
 import android.util.Xml;
 
 import org.telegram.android.time.FastDateFormat;
-import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ApplicationLoader;
 import org.xmlpull.v1.XmlPullParser;
 
 import java.io.File;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/PostsStorage.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
rename to TMessagesProj/src/main/java/org/telegram/android/PostsStorage.java
index 249a62615..df00e6da0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsStorage.java
@@ -10,37 +10,24 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.text.TextUtils;
-import android.util.SparseArray;
 
-import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuffersStorage;
 import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
-import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLClassStore;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.Utilities;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.dto.User;
 
 import java.io.File;
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
-import java.util.concurrent.Semaphore;
 
 //TODO this Class work with SQL DB. save messages, dialogs and users.
-public class MessagesStorage {
+public class PostsStorage {
     private DispatchQueue storageQueue = new DispatchQueue("storageQueue");
     private SQLiteDatabase database;
     private File cacheFile;
@@ -53,23 +40,23 @@
     public static byte[] secretPBytes = null;
     public static int secretG = 0;
 
-    private static volatile MessagesStorage Instance = null;
+    private static volatile PostsStorage Instance = null;
 
     @Deprecated
-    public static MessagesStorage getInstance() {
-        MessagesStorage localInstance = Instance;
+    public static PostsStorage getInstance() {
+        PostsStorage localInstance = Instance;
         if (localInstance == null) {
-            synchronized (MessagesStorage.class) {
+            synchronized (PostsStorage.class) {
                 localInstance = Instance;
                 if (localInstance == null) {
-                    Instance = localInstance = new MessagesStorage();
+                    Instance = localInstance = new PostsStorage();
                 }
             }
         }
         return localInstance;
     }
 
-    public MessagesStorage() {
+    public PostsStorage() {
         storageQueue.setPriority(Thread.MAX_PRIORITY);
         openDatabase();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
deleted file mode 100644
index a6a107835..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-import java.util.HashMap;
-
-public class TLClassStore {
-    private HashMap<Integer, Class> classStore;
-
-    public TLClassStore() {
-        classStore = new HashMap<>();
-
-        classStore.put(TLRPC.TL_photoSize.constructor, TLRPC.TL_photoSize.class);
-    }
-
-    static TLClassStore store = null;
-
-    public static TLClassStore Instance() {
-        if (store == null) {
-            store = new TLClassStore();
-        }
-        return store;
-    }
-
-    public TLObject TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
-        Class objClass = classStore.get(constructor);
-        if (objClass != null) {
-            TLObject response;
-            try {
-                response = (TLObject) objClass.newInstance();
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-                return null;
-            }
-            response.readParams(stream, exception);
-            return response;
-        }
-        return null;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index cc168e3e5..4b96e712a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -174,21 +174,6 @@ public void serializeToStream(AbsSerializedData stream) {
         public int size;
         public byte[] bytes;
 
-        public static PhotoSize TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
-            PhotoSize result = null;
-            switch (constructor) {
-                case 0x77bfb61b:
-                    result = new TL_photoSize();
-                    break;
-            }
-            if (result == null && exception) {
-                throw new RuntimeException(String.format("can't parse magic %x in PhotoSize", constructor));
-            }
-            if (result != null) {
-                result.readParams(stream, exception);
-            }
-            return result;
-        }
     }
 
     public static class TL_photoSize extends PhotoSize {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index 6a918fd6e..03b9abf4e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -12,7 +12,7 @@
 import android.content.SharedPreferences;
 import android.util.Base64;
 
-import org.telegram.android.MessagesStorage;
+import org.telegram.android.PostsStorage;
 import org.telegram.messenger.dto.User;
 import org.telegram.messenger.service.mock.UserServiceMock;
 
@@ -140,9 +140,9 @@ public static void loadConfig() {
                         int constructor = data.readInt32(false);
 //                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, constructor, false);
                         currentUser = UserServiceMock.getRandomUser();
-                        MessagesStorage.lastDateValue = data.readInt32(false);
-                        MessagesStorage.lastPtsValue = data.readInt32(false);
-                        MessagesStorage.lastSeqValue = data.readInt32(false);
+                        PostsStorage.lastDateValue = data.readInt32(false);
+                        PostsStorage.lastPtsValue = data.readInt32(false);
+                        PostsStorage.lastSeqValue = data.readInt32(false);
                         registeredForPush = data.readBool(false);
                         pushString = data.readString(false);
                         lastSendMessageId = data.readInt32(false);
@@ -151,13 +151,13 @@ public static void loadConfig() {
                         importHash = data.readString(false);
                         saveIncomingPhotos = data.readBool(false);
                         contactsVersion = 0;
-                        MessagesStorage.lastQtsValue = data.readInt32(false);
-                        MessagesStorage.lastSecretVersion = data.readInt32(false);
+                        PostsStorage.lastQtsValue = data.readInt32(false);
+                        PostsStorage.lastSecretVersion = data.readInt32(false);
                         int val = data.readInt32(false);
                         if (val == 1) {
-                            MessagesStorage.secretPBytes = data.readByteArray(false);
+                            PostsStorage.secretPBytes = data.readByteArray(false);
                         }
-                        MessagesStorage.secretG = data.readInt32(false);
+                        PostsStorage.secretG = data.readInt32(false);
                         Utilities.stageQueue.postRunnable(new Runnable() {
                             @Override
                             public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
index ff713b287..561463af6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -113,7 +113,7 @@ public void didClickedImage(PostCell cell) {
 //                    mContext - is getParentActivity form Post Activity. look at instance creation of PostAdapter
                     PhotoViewer.getInstance().setParentActivity((Activity) mContext);
 //                    PhotoViewer.getInstance().openPhoto(post, postsActivity);
-                    PhotoViewer.getInstance().openPhotoNew(cellPost, postsActivity, postsActivity);
+                    PhotoViewer.getInstance().openPhotoNew(cellPost, cell.getIndex(), postsActivity, postsActivity);
                 }
 
                 @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index c6e3bd227..902fd157a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -922,4 +922,9 @@ public void setDelegate(PostCellDelegate delegate) {
     public ImageReceiver getPhotoImage() {
         return photoImage;
     }
+
+
+    public int getIndex() {
+        return index;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 2a618cc45..49a3b39d8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -486,7 +486,7 @@ private PhotoPickerPhotoCell getCellForIndex(int index) {
     }
 
     @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(int index) {
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Object obj, int index) {
         PhotoPickerPhotoCell cell = getCellForIndex(index);
         if (cell != null) {
             int coords[] = new int[2];
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index a0f25e244..a78d2534a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -82,7 +82,7 @@
 
 
     //TODO-aragats new
-    private PostPhotoViewerProvider postPlaceProvider;
+//    private PostPhotoViewerProvider postPlaceProvider;
     //TODO-aragats new
     private ArrayList<Post> imagesPostArr = new ArrayList<Post>();
     //TODO-aragats new
@@ -385,7 +385,7 @@ public void onDraw(Canvas canvas) {
 
     public static class EmptyPhotoViewerProvider implements PhotoViewerProvider {
         @Override
-        public PlaceProviderObject getPlaceForPhoto(int index) {
+        public PlaceProviderObject getPlaceForPhoto(Object object, int index) {
             return null;
         }
 
@@ -437,7 +437,7 @@ public void updatePhotoAtIndex(int index) {
 
     public interface PhotoViewerProvider {
 
-        PlaceProviderObject getPlaceForPhoto(int index);
+        PlaceProviderObject getPlaceForPhoto(Object object, int index);
 
         Bitmap getThumbForPhoto(int index);
 
@@ -1540,7 +1540,7 @@ private void updateSelectedCount() {
 
 
     //TODO-aragats new
-    private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
+    private void onPhotoShowNew(final Post post, int index, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
         //TODO-aragat new
         currentPost = null;
@@ -1767,7 +1767,7 @@ private void setImageIndex(int index, boolean init) {
                 showAfterAnimation = currentPlaceObject;
             }
         }
-        currentPlaceObject = placeProvider.getPlaceForPhoto(currentIndex);
+        currentPlaceObject = placeProvider.getPlaceForPhoto(currentPost, currentIndex);
         if (currentPlaceObject != null) {
             if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(false, true);
@@ -1858,7 +1858,7 @@ private void setImageIndexPostNew(int index, boolean init) {
         currentFileNames[0] = getFileName(index);
         currentFileNames[1] = getFileName(index + 1);
         currentFileNames[2] = getFileName(index - 1);
-        postPlaceProvider.willSwitchFromPhoto(currentPost);
+        placeProvider.willSwitchFromPhoto(currentIndex);
         int prevIndex = currentIndex;
         currentIndex = index;
 
@@ -1905,7 +1905,7 @@ private void setImageIndexPostNew(int index, boolean init) {
                 showAfterAnimation = currentPlaceObject;
             }
         }
-        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPost);
+        currentPlaceObject = placeProvider.getPlaceForPhoto(currentPost, currentIndex);
         if (currentPlaceObject != null) {
             if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(false, true);
@@ -2089,7 +2089,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
             } else {
                 imageReceiver.setImageBitmap((Bitmap) null);
             }
-        } else if(!imagesPostArr.isEmpty()) {
+        } else if (!imagesPostArr.isEmpty()) {
             if (index >= 0 && index < imagesPostArr.size() && imagesPostArr.get(index) != null) {
                 Post post = imagesPostArr.get(index);
                 int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
@@ -2099,7 +2099,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                 }
                 //aragats it returns null.b ut curretnThumb is not null. so we miss this part of code.
                 if (placeHolder == null) {
-                    placeHolder = postPlaceProvider.getThumbForPhoto(null, index);
+                    placeHolder = placeProvider.getThumbForPhoto(index);
                 }
                 String path = post.getImage().getUrl();
                 int imageSize = 0;
@@ -2156,7 +2156,7 @@ public void openPhoto(final ArrayList<Object> photos, final int index, final Pho
         }
 
         // immer null.
-        final PlaceProviderObject object = provider.getPlaceForPhoto(index);
+        final PlaceProviderObject object = provider.getPlaceForPhoto(null, index);
         if (object == null && photos == null) {
             return;
         }
@@ -2218,13 +2218,13 @@ public void openPhoto(final ArrayList<Object> photos, final int index, final Pho
 
     //TODO-aragats new
     //final PostPhotoViewerProvider provider, PostsActivity postsActivity are the same class.
-    public void openPhotoNew(final Post post, final PostPhotoViewerProvider provider, PostsActivity postsActivity) {
+    public void openPhotoNew(final Post post, final int index, final PhotoViewerProvider provider, PostsActivity postsActivity) {
         if (parentActivity == null || isVisible || provider == null || checkAnimation() || post == null) {
             return;
         }
 
         //filocation we do not need here. messageObject is used to find ChatMediaCell by id from messageObject. // method is implemented in provider.
-        final PlaceProviderObject object = provider.getPlaceForPhoto(post);
+        final PlaceProviderObject object = provider.getPlaceForPhoto(post, index);
         if (object == null) {
             return;
         }
@@ -2271,7 +2271,7 @@ public void openPhotoNew(final Post post, final PostPhotoViewerProvider provider
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
 
-        postPlaceProvider = provider;
+        placeProvider = provider;
 
         if (velocityTracker == null) {
             velocityTracker = VelocityTracker.obtain();
@@ -2283,7 +2283,7 @@ public void openPhotoNew(final Post post, final PostPhotoViewerProvider provider
         if (object != null) {
             disableShowCheck = true;
             animationInProgress = 1;
-            onPhotoShowNew(post, object);
+            onPhotoShowNew(post, index, object);
 
             final Rect drawRegion = object.imageReceiver.getDrawRegion();
             int orientation = object.imageReceiver.getOrientation();
@@ -2418,7 +2418,7 @@ public void run() {
         } else {
             backgroundDrawable.setAlpha(255);
             ViewProxy.setAlpha(containerView, 1.0f);
-            onPhotoShowNew(post, object);
+            onPhotoShowNew(post, index, object);
         }
     }
 
@@ -2451,7 +2451,7 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
             currentEditMode = 0;
         }
 
-        if (parentActivity == null || !isVisible || checkAnimation() || (placeProvider == null && postPlaceProvider == null)) {
+        if (parentActivity == null || !isVisible || checkAnimation() || (placeProvider == null)) {
             return;
         }
 
@@ -2483,10 +2483,12 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
         //NOW
         PlaceProviderObject object1 = null;
         if (placeProvider != null) {
-            object1 = placeProvider.getPlaceForPhoto(currentIndex);
-        } else if (this.postPlaceProvider != null) {
-            object1 = this.postPlaceProvider.getPlaceForPhoto(currentPost);
+            object1 = placeProvider.getPlaceForPhoto(currentPost, currentIndex);
         }
+//
+//        else if (this.postPlaceProvider != null) {
+//            object1 = this.postPlaceProvider.getPlaceForPhoto(currentPost);
+//        }
         //TODO
         final PlaceProviderObject object = object1;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index c5aa1a35f..d1302754e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -81,7 +81,7 @@
 import java.util.Arrays;
 
 //TODO-aragats new
-public class PostCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate,  PostPhotoViewerProvider {
+public class PostCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
 
     private ArrayList<PostMediaCell> postMediaCellsCache = new ArrayList<>();
 
@@ -1352,8 +1352,8 @@ public void updatePhotoAtIndex(int index) {
     }
 
     @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Post postObject) {
-        if (postObject == null) {
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Object postObject, int index) {
+        if (postObject == null || !(postObject instanceof Post)) {
             return null;
         }
         int count = postListView.getChildCount();
@@ -1366,7 +1366,7 @@ public void updatePhotoAtIndex(int index) {
                 PostMediaCell cell = (PostMediaCell) view;
                 Post post = cell.getPost();
                 if (post != null && !StringUtils.isEmpty(post.getId())
-                        && post.getId().equals(postObject.getId())) {
+                        && post.getId().equals(((Post) postObject).getId())) {
                     postToOpen = post;
                     imageReceiver = cell.getPhotoImage();
                 }
@@ -1389,12 +1389,12 @@ public void updatePhotoAtIndex(int index) {
     }
 
     @Override
-    public Bitmap getThumbForPhoto(Post post, int index) {
+    public Bitmap getThumbForPhoto(int index) {
         return null;
     }
 
     @Override
-    public void willSwitchFromPhoto(Post post) {
+    public void willSwitchFromPhoto(int index) {
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
index eb1aaaaa8..bbe6cc5a4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
@@ -7,30 +7,30 @@
 /**
  * Created by aragats on 05/07/15.
  */
-//TODO-aragats. This is copy form PhotoViewerProvvider from PhotoViewer.
-public interface PostPhotoViewerProvider {
-
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Post post);
-
-    Bitmap getThumbForPhoto(Post post, int index);
-
-//    void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
-
-    public void willSwitchFromPhoto(Post post);
-
-
-    void willHidePhotoViewer();
-
-    boolean isPhotoChecked(int index);
-
-    void setPhotoChecked(int index);
-
-    void cancelButtonPressed();
-
-    void sendButtonPressed(int index);
-
-    int getSelectedCount();
-
-    void updatePhotoAtIndex(int index);
-
-}
\ No newline at end of file
+////TODO-aragats. This is copy form PhotoViewerProvvider from PhotoViewer.
+//public interface PostPhotoViewerProvider {
+//
+//    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Post post);
+//
+//    Bitmap getThumbForPhoto(Post post, int index);
+//
+////    void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+//
+//    public void willSwitchFromPhoto(Post post);
+//
+//
+//    void willHidePhotoViewer();
+//
+//    boolean isPhotoChecked(int index);
+//
+//    void setPhotoChecked(int index);
+//
+//    void cancelButtonPressed();
+//
+//    void sendButtonPressed(int index);
+//
+//    int getSelectedCount();
+//
+//    void updatePhotoAtIndex(int index);
+//
+//}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 273ac4280..b436e9328 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -79,7 +79,7 @@
 /*
 TODO-aragats
  */
-public class PostsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PostPhotoViewerProvider {
+public class PostsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
 
     private RecyclerListView postListView;
     private LinearLayoutManager layoutManager;
@@ -111,8 +111,8 @@
 
     //TODO-legacy. update according to new version.
     @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Post post) {
-        if (post == null) {
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Object post, int index) {
+        if (post == null || !(post instanceof Post)) {
             return null;
         }
         int count = this.postListView.getChildCount();
@@ -124,7 +124,7 @@
             if (view instanceof PostCell) {
                 PostCell cell = (PostCell) view;
                 Post cellPost = cell.getPost();
-                if (cellPost != null && cellPost.getId() != null && cellPost.getId().equals(post.getId())) {
+                if (cellPost != null && cellPost.getId() != null && cellPost.getId().equals(((Post) post).getId())) {
                     postToOpen = cellPost;
                     imageReceiver = cell.getPhotoImage();
                 }
@@ -148,12 +148,12 @@
     }
 
     @Override
-    public Bitmap getThumbForPhoto(Post post, int index) {
+    public Bitmap getThumbForPhoto(int index) {
         return null;
     }
 
     @Override
-    public void willSwitchFromPhoto(Post post) {
+    public void willSwitchFromPhoto(int index) {
 
     }
 
@@ -686,7 +686,7 @@ public void didReceivedNotification(int id, Object... args) {
                 swipeRefreshLayout.setRefreshing(false);
             }
             Activity context = getParentActivity();
-            if(context != null) {
+            if (context != null) {
                 AlertDialog.Builder builder = new AlertDialog.Builder(context);
                 builder.setTitle("Whats going on?");
                 builder.setMessage("Please, enable gps on your phone.");
