diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
index f2a9972a7..28fa5240a 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
@@ -27,13 +27,28 @@
     private final PollgramService pollgramService;
     private final LayoutInflater inflater;
 
+    /**
+     *
+     * @param context
+     * @param items
+     * @param groupMemberCount or -1 for do not show this info
+     */
     public DecisionAdapter(Context context,  List<Decision> items, int groupMemberCount) {
         super(context, LAYOUT_RES_ID, items);
         this.groupMemberCount = groupMemberCount;
-        pollgramService = PollgramFactory.getPollgramService();
+        pollgramService = PollgramFactory.getService();
         inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
     }
 
+    /**
+     * do not show how many users votes out of the total
+     * @param context
+     * @param items
+     */
+    public DecisionAdapter(Context context, List<Decision> items){
+        this(context, items, -1);
+    }
+
     @Override
     public View getView(int position, View convertView, ViewGroup parent) {
 
@@ -48,12 +63,16 @@ public View getView(int position, View convertView, ViewGroup parent) {
         // put data
         Decision decision = getItem(position);
         decisionTitle.setText(decision.getTitle());
-        int userThatVoteSoFar = PollgramFactory.getPollgramDAO().getUserVoteCount(decision);
+        int userThatVoteSoFar = PollgramFactory.getDAO().getUserVoteCount(decision);
         String userAsString = pollgramService.asString(pollgramService.getUser(decision.getUserCreatorId()));
         String creationDateStr = DateFormat.getDateInstance(DateFormat.SHORT).
                 format(decision.getCreationDate());
         decisionSubtitle1.setText(getContext().getString(R.string.createdByUserOnDay, userAsString, creationDateStr));
-        decisionSubtitle2.setText(getContext().getString(R.string.howManyMemberVote, userThatVoteSoFar, groupMemberCount));
+        if (groupMemberCount == -1)
+            decisionSubtitle2.setVisibility(View.GONE);
+        else
+            decisionSubtitle2.setText(getContext().getString(R.string.howManyMemberVote, userThatVoteSoFar, groupMemberCount));
+
         if (!decision.isOpen())
             rowView.setBackgroundColor(Color.LTGRAY);
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
index a16934c4b..b77abf827 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
@@ -1,8 +1,9 @@
 package org.pollgram.decision.adapter;
 
 import android.content.Context;
+import android.graphics.Color;
 import android.text.Editable;
-import android.text.TextWatcher;
+import android.text.util.Linkify;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -17,9 +18,11 @@
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.PollgramException;
 import org.pollgram.decision.data.TextOption;
+import org.pollgram.decision.ui.DefaultTextWatcher;
 
 import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
 
@@ -29,25 +32,21 @@
 public class OptionsAdapter extends ArrayAdapter<Option> {
     private static final int LAYOUT_RES_ID = R.layout.item_new_option_list;
 
-    private final List<TextOption> options;
+    private final LinkedList<TextOption> options;
     private final LayoutInflater inflater;
-    private int lastIdx;
     private final boolean editable;
     private List<TextOption> deletedOptions;
 
 
     public OptionsAdapter(Context context) {
-        this(context,new ArrayList<TextOption>(),true);
-        // put one first empty option
-        options.add(new TextOption());
+        this(context, new LinkedList<TextOption>(), true);
     }
 
     public OptionsAdapter(Context context, List<TextOption> options, boolean editable){
         super(context, LAYOUT_RES_ID);
-        this.options = options;
+        this.options = new LinkedList<>(options);
         this.deletedOptions  = new ArrayList<>();
-        this.lastIdx = options.size() -1;
-        this.editable =editable;
+        this.editable = editable;
         inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
     }
 
@@ -56,10 +55,8 @@ public OptionsAdapter(Context context, List<TextOption> options, boolean editabl
      * @return the list of the selected options
      * @throws PollgramException if some value is invalid
      */
-    public List<Option> getOptions() throws PollgramException{
+    public List<Option> getNewOptions() throws PollgramException{
         Set<String> titleSet = new HashSet<>();
-        List<Option> out = new ArrayList<Option>();
-
         // check for duplicated titles
         for(Option o : options){
             if (titleSet.contains(o.getTitle())){
@@ -68,17 +65,18 @@ public OptionsAdapter(Context context, List<TextOption> options, boolean editabl
             titleSet.add(o.getTitle());
         }
 
-        for (int i = lastIdx + 1 ; i<options.size() ; i++)
-            out.add(options.get(i));
-
-        for (int i = 0; i < out.size(); i++) {
-            String title = out.get(i).getTitle();
+        List<Option> out = new ArrayList<Option>();
+        for (int i = 0; i < options.size(); i++) {
+            TextOption opt = options.get(i);
+            String title = opt.getTitle();
             if (title == null || title.trim().isEmpty()) {
-                if (i == out.size() -1)
+                if (i == 0)
                     throw new PollgramException(getContext().getString(R.string.emptyTitleOnLastOption));
                 else
                     throw new PollgramException(getContext().getString(R.string.emptyTitleOnOption, i + 1));
             }
+            if (opt.getId() == DBBean.ID_NOT_SET)
+                out.add(opt);
         }
         return out;
     }
@@ -96,18 +94,19 @@ public int getCount() {
     }
 
     @Override
-    public View getView(final int position, View convertView, ViewGroup parent) {
+    public View getView(int position, View convertView, ViewGroup parent) {
         View rowView;
-        if (position == getCount() - 1) {
+        if (position == 0) {
             rowView = inflater.inflate(R.layout.item_add_new_option_list, parent, false);
             Button buttonAdd = (Button) rowView.findViewById(R.id.new_option_add_button);
             buttonAdd.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    if (options.get(position-1).getTitle() == null){
+                    TextOption first = options.size() == 0 ? null : options.getFirst();
+                    if (first != null && (first.getTitle() == null || first.getTitle().isEmpty())){
                         Toast.makeText(getContext(), R.string.pleaseSelectATitleForOption, Toast.LENGTH_LONG).show();
                     } else {
-                        options.add(new TextOption());
+                        options.addFirst(new TextOption());
                         notifyDataSetChanged();
                     }
                 }
@@ -117,69 +116,58 @@ public void onClick(View v) {
             // Create view for item
             rowView = inflater.inflate(LAYOUT_RES_ID, parent, false);
             EditText edTitle = (EditText) rowView.findViewById(R.id.new_option_ed_title);
-            EditText edLongDescription = (EditText) rowView.findViewById(R.id.new_option_ed_long_description);
+            final EditText edLongDescription = (EditText) rowView.findViewById(R.id.new_option_ed_long_description);
             ImageButton deleteItem = (ImageButton) rowView.findViewById(R.id.new_option_delete_button);
 
             // Set data
-            final TextOption o = options.get(position);
-            edTitle.setText(o.getTitle());
-            edLongDescription.setText(o.getLongDescription());
-            // make grey the lines that are already present and therefore not editable
-            if(o.getId() != DBBean.ID_NOT_SET) {
-//                rowView.setBackgroundColor(Color.LTGRAY);
-                // prevent EditText hint to be showed for existing decision with not long description
-                if (o.getLongDescription() != null || o.getLongDescription().isEmpty()) {
-                    edLongDescription.setText(" ");
-                }
-            }
-
+            final int optionPos = position - 1;
+            final TextOption o = options.get(optionPos);
+            final boolean alreadyOnDB = o.getId() != DBBean.ID_NOT_SET;
 
             // Register listener
             deleteItem.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    if (position <= lastIdx) {
-                        lastIdx--;
-                        deletedOptions.add(options.get(position));
+                    TextOption optionToDelete = options.get(optionPos);
+                    if (alreadyOnDB) {
+                        deletedOptions.add(optionToDelete);
                     }
-                    options.remove(position);
+                    options.remove(optionPos);
                     notifyDataSetChanged();
                 }
             });
-            edTitle.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-                }
-
-                @Override
-                public void onTextChanged(CharSequence s, int start, int before, int count) {
-                }
-
+            edTitle.addTextChangedListener(new DefaultTextWatcher() {
                 @Override
                 public void afterTextChanged(Editable s) {
                     o.setTitle(s.toString());
                 }
             });
-            edLongDescription.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-                }
-
-                @Override
-                public void onTextChanged(CharSequence s, int start, int before, int count) {
-                }
-
+            edLongDescription.addTextChangedListener(new DefaultTextWatcher() {
                 @Override
                 public void afterTextChanged(Editable s) {
                     o.setLongDescription(s.toString());
+                    Linkify.addLinks(edLongDescription, Linkify.ALL);
                 }
             });
 
-            boolean enableFields = position > lastIdx && editable;
+            edTitle.setText(o.getTitle());
+            edLongDescription.setText(o.getLongDescription());
+            // make grey the lines that are already present and therefore not editable
+            if(alreadyOnDB) {
+                edTitle.setTextColor(Color.GRAY);
+                edLongDescription.setTextColor(Color.GRAY);
+                if (o.getLongDescription() == null || o.getLongDescription().isEmpty()) {
+                    edLongDescription.setText(" ");
+                }
+            }
+
+            boolean enableFields = !alreadyOnDB && editable;
             edTitle.setEnabled(enableFields);
             edLongDescription.setEnabled(enableFields);
             deleteItem.setVisibility(editable ? View.VISIBLE : View.INVISIBLE);
 
+            if (o.getTitle() == null || o.getTitle().isEmpty())
+                edTitle.requestFocus();
         }
 
         return rowView;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 599b55fc7..97a7ff3be 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -111,9 +111,13 @@ public void setOnVoteChangeListener(OnVoteChangeListener onVoteChangeListener){
     @Override
     public View getView(final int position, View convertView, ViewGroup parent) {
         final Vote vote = getItem(position);
-        final Option c = PollgramFactory.getPollgramDAO().getOption(vote.getOptionId());
+        final Option c = PollgramFactory.getDAO().getOption(vote.getOptionId());
         if (c instanceof TimeRangeOption){
-            Log.e("ChoiceAdapter", "TimeRangeOption not supported yet");
+            Log.e(LOG_TAG, "TimeRangeOption not supported yet");
+            return null;
+        }
+        if (c == null) {
+            Log.e(LOG_TAG, "Decision not found for id ["+vote.getOptionId()+"]");
             return null;
         }
         final TextOption o = (TextOption)c;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
index 92e7145a6..08b792e39 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
@@ -35,6 +35,13 @@
      */
     List<Decision> getDecisions(long chatId, @Nullable Boolean open);
 
+    /**
+     * @param chatId
+     * @param  decisionOwnerId decision owner
+     * @return decision for given chat id
+     */
+    List<Decision> getDecisions(long chatId, int decisionOwnerId);
+
     /**
      * Insert or update the passed Option if not found
      * @param o
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index ec8202d98..46aa696ee 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -50,7 +50,7 @@ public void putStubData(int chatId, int creatorId) {
             options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
             options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
 
-            PollgramFactory.getPollgramService().notifyNewDecision(decision1, options);
+            PollgramFactory.getService().notifyNewDecision(decision1, options);
         }
 
         {
@@ -70,7 +70,7 @@ public void putStubData(int chatId, int creatorId) {
             options.add(new TextOption("Le funivie del'ghiacciaio della valle di stubai che si trova in austria vicino ad innsbruck", "è un po lungo il viaggio ma potrebbe essere assai fico", decision1.getId()));
             options.add(new TextOption("Sul piste del passo del Broccon", null, decision1.getId()));
 
-            PollgramFactory.getPollgramService().notifyNewDecision(decision1, options);
+            PollgramFactory.getService().notifyNewDecision(decision1, options);
         }
     }
 
@@ -205,6 +205,18 @@ public Decision getDecision(long decisionId) {
         return helper.findById(decisionId, helper.DECISION_MAPPER);
     }
 
+    @Override
+    public List<Decision> getDecisions(long chatId, int decisionOwnerId) {
+        String selection = PGSqlLiteHelper.T_Decision.GROUP_ID + " = ? " +
+                " and " + PGSqlLiteHelper.T_Decision.DECISION_OWNER + " = ? " +
+                " and " + PGSqlLiteHelper.T_Decision.OPEN + "= ? ";
+        String[] selectionArgs = new String[]{Long.toString(chatId),
+                Integer.toString(decisionOwnerId),PGSqlLiteHelper.toString(true)};
+
+        return helper.query(helper.DECISION_MAPPER, selection, selectionArgs, null, null,
+                PGSqlLiteHelper.T_Decision.CREATION_DATE) ;
+    }
+
     @Override
     public List<Decision> getDecisions(long chatId, @Nullable Boolean open) {
         String selection = PGSqlLiteHelper.T_Decision.GROUP_ID + " = ? ";
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramFactory.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramFactory.java
index 06a1f0213..50f42abe7 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramFactory.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramFactory.java
@@ -11,7 +11,7 @@
 
     // TODO factorize getter code
 
-    public static PollgramMessagesManager getPollgramMessagesManager() {
+    public static PollgramMessagesManager getMessagesManager() {
         PollgramMessagesManager localInstance = MESSAGEE_MANAGER_INSTANCE;
         if (localInstance == null) {
             synchronized (PollgramMessagesManager.class) {
@@ -24,7 +24,7 @@ public static PollgramMessagesManager getPollgramMessagesManager() {
         return localInstance;
     }
 
-    public static PollgramDAO getPollgramDAO() {
+    public static PollgramDAO getDAO() {
         PollgramDAO localInstance = INSTANCE;
         if (localInstance == null) {
             synchronized (PollgramDAO.class) {
@@ -37,7 +37,7 @@ public static PollgramDAO getPollgramDAO() {
         return localInstance;
     }
 
-    public static PollgramService getPollgramService() {
+    public static PollgramService getService() {
         PollgramService localInstance = POLLGRAM_SERVICE_INSTANCE;
         if (localInstance == null) {
             synchronized (PollgramService.class) {
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index 0609e9d1f..b1a6bb6e2 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -97,6 +97,11 @@ public String getDescription() {
      */
     MessageType getMessageType(String msg);
 
+    /**
+     * @param msg
+     * @return whether this is a pollgram message
+     */
+    boolean isPollgram(MessageObject msg);
 
     /**
      * Build message for notify a vote transaction
@@ -233,24 +238,27 @@ public ClosedDecisionDate(Decision decision, List<Option> winningOptions) {
      * Only if getMessageType(text) == MessageType_CLOSE_DECISION
      * @param text
      * @param groupChatId
+     * @param userId
      * @return the data for close decision message
      */
-    ClosedDecisionDate getCloseDecision(String text, long groupChatId) throws PollgramParseException;
+    ClosedDecisionDate getCloseDecision(String text, long groupChatId, int userId) throws PollgramParseException;
 
     /**
      * * Only if getMessageType(text) == MessageType_DELETE_DECISION
      * @param text
      * @param groupChatId
+     * @param userId
      * @return the decision to delete
      */
-    Decision getDeleteDecision(String text, long groupChatId) throws PollgramParseException;
+    Decision getDeleteDecision(String text, long groupChatId, int userId) throws PollgramParseException;
 
     /**
      * Only if getMessageType(text) == MessageType_REOPEN_DECISION
      * @param text
      * @param groupChatId
+     * @param userId
      * @return the decision to reopen
      */
-    Decision getReopenDecision(String text, long groupChatId) throws PollgramParseException;
+    Decision getReopenDecision(String text, long groupChatId, int userId) throws PollgramParseException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index 77dd27158..76fc5a90a 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -51,7 +51,7 @@
     private final Context context;
 
     PollgramMessagesManagerImpl(){
-        this(PollgramFactory.getPollgramDAO());
+        this(PollgramFactory.getDAO());
     }
 
     String getTailingString(){
@@ -344,6 +344,13 @@ public MessageType getMessageType(String msg){
         return null;
     }
 
+    @Override
+    public boolean isPollgram(MessageObject msg) {
+        if (msg == null || msg.messageText == null)
+            return false;
+        return getMessageType(msg.messageText.toString()) != null;
+    }
+
     @Override
     public long getMessageGroupId(MessageObject messageObject) {
         if (messageObject.messageOwner == null)
@@ -475,7 +482,7 @@ private void addOption2List(List<Option> optionList, StringTokenizer strTok) {
     }
 
     @Override
-    public ClosedDecisionDate getCloseDecision(String msg, long currentChat) throws PollgramParseException {
+    public ClosedDecisionDate getCloseDecision(String msg, long currentChat, int userId) throws PollgramParseException {
         Decision decision;
         List<Option> optionList;
         try {
@@ -485,6 +492,8 @@ public ClosedDecisionDate getCloseDecision(String msg, long currentChat) throws
             decision = pollgramDAO.getDecision(title, currentChat);
             if (decision == null)
                 throw new PollgramParseException("Decision not found for title  [" + title + "]");
+            if (!decision.isEditable(userId))
+                throw new PollgramParseException("Decision is not editable by userId ["+userId+"]");
 
             optionList = new ArrayList<>();
             while (strTok.hasMoreTokens()){
@@ -506,15 +515,15 @@ public ClosedDecisionDate getCloseDecision(String msg, long currentChat) throws
     }
 
     @Override
-    public Decision getDeleteDecision(String text, long groupChatId) throws PollgramParseException {
-        Decision d = getDecisionInDeleteOrReopenMessage(text, groupChatId);
+    public Decision getDeleteDecision(String text, long groupChatId, int userId) throws PollgramParseException {
+        Decision d = getDecisionInDeleteOrReopenMessage(text, groupChatId, userId);
         Log.d(LOG_TAG, "getDeleteDecision Decision[" + d + "]");
         return d;
     }
 
     @Override
-    public Decision getReopenDecision(String text, long groupChatId) throws PollgramParseException {
-        Decision d = getDecisionInDeleteOrReopenMessage(text,groupChatId);
+    public Decision getReopenDecision(String text, long groupChatId, int userId) throws PollgramParseException {
+        Decision d = getDecisionInDeleteOrReopenMessage(text,groupChatId, userId);
         if (d ==null)
             throw new PollgramParseException( "Decision not found for message[" + text + "]");
         Log.d(LOG_TAG, "getReopenDecision Decision["+d+"]");
@@ -525,15 +534,19 @@ public Decision getReopenDecision(String text, long groupChatId) throws Pollgram
      * Actually Delete and Reopen messages have the same structure
      * @param msg
      * @param groupChatId
+     * @param userId
      * @return
      */
-    private @Nullable Decision getDecisionInDeleteOrReopenMessage(String msg, long groupChatId) throws PollgramParseException {
-        Decision decision;
+    private @Nullable Decision getDecisionInDeleteOrReopenMessage(String msg, long groupChatId, int userId) throws PollgramParseException {
         try {
             StringTokenizer strTok = new EscapeStringTokenizer(msg);
-            strTok.nextToken(); // skipt this token
-            String decisionTitle = strTok.nextToken();
-            Decision d = pollgramDAO.getDecision(decisionTitle, groupChatId);
+            strTok.nextToken(); // skip this token
+            String title = strTok.nextToken();
+            Decision d = pollgramDAO.getDecision(title, groupChatId);
+            if (d == null)
+                throw new PollgramParseException("Decision not found for title ["+title+"]");
+            if (!d.isEditable(userId))
+                throw new PollgramParseException("Decision is not editable by userid ["+userId+"]");
             return d;
         } catch (NoSuchElementException e){
             Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index a84ff7967..c391cd699 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -29,7 +29,6 @@
     UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] members);
 
     /**
-     *
      * @param decisionId
      * @param members
      * @return a data structure representing a decision and the vote of each member
@@ -140,10 +139,23 @@ Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObject messa
      *
      * @param currentChat
      * @param selectedObject
-     * @return a Bundle for creating a new decision starting from a message
+     * @return a Bundle for creating a new decision starting from a message, see NewDecisionFragment
      */
     Bundle getBundleForNewDecision(TLRPC.Chat currentChat, MessageObject selectedObject);
 
+    /**
+     * @param currentChat
+     * @param selectedObject
+     * @return a Bundle for adding a new option to a decision starting from a message, see SelectDecisionFragment
+     */
+    Bundle getBundleForNewOption(TLRPC.Chat currentChat, MessageObject selectedObject);
+
+    /**
+     * @param chatInfo
+     * @return a Bundle ready to pass to DecisionsListFragment
+     */
+    Bundle getBundleForDecisionList(TLRPC.ChatFull chatInfo);
+
     /**
      * @param user
      * @return a string representation of the passed user.
@@ -157,7 +169,6 @@ Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObject messa
     void processMessages(final long dialog_id, List<MessageObject> objects);
 
     /**
-     *
      * @param dialog_id
      * @param dialogMessagesByIds
      * @param excludeMessages
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index d70ca02e3..d1f37bcbe 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.style.ClickableSpan;
 import android.util.Log;
@@ -14,7 +15,9 @@
 import org.pollgram.decision.data.ParsedMessage;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.ui.DecisionsListFragment;
 import org.pollgram.decision.ui.NewDecisionFragment;
+import org.pollgram.decision.ui.SelectDecisionFragment;
 import org.pollgram.decision.ui.VotesManagerFragment;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.ApplicationLoader;
@@ -50,8 +53,8 @@
     private final PollgramMessagesManager messageManager;
 
     public PollgramServiceImpl() {
-        this.pollgramDAO = PollgramFactory.getPollgramDAO();
-        this.messageManager = PollgramFactory.getPollgramMessagesManager();
+        this.pollgramDAO = PollgramFactory.getDAO();
+        this.messageManager = PollgramFactory.getMessagesManager();
     }
 
     PollgramServiceImpl(PollgramDAO pollgramDAO, PollgramMessagesManager messageManager) {
@@ -233,30 +236,30 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
         try {
             switch (msgType) {
                 case NEW_DECISION: {
-                    PollgramMessagesManager.DecisionOptionData resut = messageManager.getNewDecision(text,
+                    PollgramMessagesManager.DecisionOptionData result = messageManager.getNewDecision(text,
                             groupChatId, userId, messageDate);
-                    if (resut == null){
+                    if (result == null){
                         throw new PollgramParseException("Decision not found for NEW_DECISION messsage");
                     }
-                    if (pollgramDAO.getDecision(resut.decision.getTitle(),resut.decision.getChatId()) != null){
+                    if (pollgramDAO.getDecision(result.decision.getTitle(),result.decision.getChatId()) != null){
                         Log.d(LOG_TAG,"New decision already found will not insert twice");
                         break;
                     }
-                    Decision d = pollgramDAO.save(resut.decision);
-                    for (Option o : resut.optionList) {
+                    Decision d = pollgramDAO.save(result.decision);
+                    for (Option o : result.optionList) {
                         o.setDecisionId(d.getId());
                         pollgramDAO.save(o);
                     }
                     break;
                 }
                 case ADD_OPTIONS:{
-                    PollgramMessagesManager.DecisionOptionData resut = messageManager.getAddedOption(text,
+                    PollgramMessagesManager.DecisionOptionData result = messageManager.getAddedOption(text,
                             groupChatId, userId);
-                    if (resut == null){
+                    if (result == null){
                         throw new PollgramParseException("Decision not found for "+msgType+" messsage");
                     }
-                    for (Option o : resut.optionList) {
-                        o.setDecisionId(resut.decision.getId());
+                    for (Option o : result.optionList) {
+                        o.setDecisionId(result.decision.getId());
                         pollgramDAO.save(o);
                     }
                     break;
@@ -278,20 +281,23 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
                     break;
                 }
 
-                case REOPEN_DECISION: {
-                    Decision decision = messageManager.getReopenDecision(text, groupChatId);
-                    decision.setOpen(true);
-                    pollgramDAO.save(decision);
-                    break;
-                }
                 case CLOSE_DECISION: {
-                    PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(text, groupChatId);
+                    PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(text,
+                            groupChatId, userId);
                     result.decision.setOpen(false);
                     pollgramDAO.save(result.decision);
                     break;
                 }
+
+                case REOPEN_DECISION: {
+                    Decision decision = messageManager.getReopenDecision(text, groupChatId, userId);
+                    decision.setOpen(true);
+                    pollgramDAO.save(decision);
+                    break;
+                }
+
                 case DELETE_DECISION: {
-                    Decision decision = messageManager.getDeleteDecision(text, groupChatId);
+                    Decision decision = messageManager.getDeleteDecision(text, groupChatId, userId);
                     if (decision != null)
                         pollgramDAO.delete(decision);
                     break;
@@ -364,6 +370,8 @@ public String asString(TLRPC.User user){
     }
 
     private String asString(TLRPC.User user, boolean overrideYou) {
+        if (user == null)
+            return null;
         if (overrideYou && user.id == UserConfig.getCurrentUser().id)
             return ApplicationLoader.applicationContext.getString(R.string.you);
 
@@ -409,27 +417,61 @@ public Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObjec
         return  bundle;
     }
 
+    @Override
+    public Bundle getBundleForDecisionList(TLRPC.ChatFull chatInfo) {
+
+        List<Integer> ids = new ArrayList<>(chatInfo.participants.participants.size());
+        for (int i = 0; i < chatInfo.participants.participants.size() ; i++){
+            TLRPC.User user = PollgramFactory.getService().getUser(chatInfo.participants.participants.get(i).user_id);
+            if (user != null)
+                ids.add(user.id);
+        }
+        int[] participantsUserIds = new int[ids.size()];
+        for (int i=0;i<ids.size();i++)
+            participantsUserIds[i] = ids.get(i);
+        Bundle args = new Bundle();
+        args.putInt(DecisionsListFragment.PAR_GROUP_CHAT_ID, chatInfo.id);
+        args.putIntArray(DecisionsListFragment.PAR_PARTICIPANT_IDS,participantsUserIds);
+        return args;
+    }
 
     @Override
     public Bundle getBundleForNewDecision(TLRPC.Chat currentChat, MessageObject selectedObject) {
+        Bundle args = new Bundle();
+        args.putInt(NewDecisionFragment.PAR_GROUP_CHAT_ID, currentChat.id);
+        args.putString(NewDecisionFragment.PAR_DECISION_LONG_DESCRIPTION,
+                getLongDescription(selectedObject).toString());
+        return args;
+    }
+
+    @Override
+    public Bundle getBundleForNewOption(TLRPC.Chat currentChat, MessageObject selectedObject) {
+        Bundle args = new Bundle();
+        args.putInt(SelectDecisionFragment.PAR_GROUP_CHAT_ID, currentChat.id);
+        args.putString(SelectDecisionFragment.PAR_NEW_OPTION_LONG_DESCRIPTION,
+                getLongDescription(selectedObject).toString());
+        return args;
+    }
+
+    @NonNull
+    private StringBuilder getLongDescription(MessageObject selectedObject) {
         Context context = ApplicationLoader.applicationContext;
 
-        TLRPC.User user =  getUser(selectedObject.messageOwner.from_id);
-        String userAsString = asString(user,false);
+        TLRPC.User user = getUser(selectedObject.messageOwner.from_id);
         String dateAsString = DateFormat.getDateInstance(DateFormat.SHORT).
                 format(getMessageDate(selectedObject));
 
         StringBuilder longDescription = new StringBuilder();
-        longDescription.append(context.getString(R.string.newDecisionFromMessageHeader, dateAsString ,userAsString));
-        longDescription.append('\n');
+        if (user != null) {
+            longDescription.append(context.getString(R.string.newDecisionFromMessageHeader, dateAsString,
+                    asString(user, false)));
+            longDescription.append('\n');
+        }
         longDescription.append(selectedObject.messageText.toString());
-
-        Bundle args = new Bundle();
-        args.putInt(NewDecisionFragment.PAR_GROUP_CHAT_ID, currentChat.id);
-        args.putString(NewDecisionFragment.PAR_DECISION_LONG_DESCRIPTION, longDescription.toString());
-        return args;
+        return longDescription;
     }
 
+
     /**
      * Internal class used for sorting messages
      */
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionDetailFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionDetailFragment.java
index 50ff60f98..3193ef937 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionDetailFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionDetailFragment.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.os.Bundle;
+import android.text.util.Linkify;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -38,8 +39,8 @@ public DecisionDetailFragment(Bundle bundle) {
 
     @Override
     public boolean onFragmentCreate() {
-        pollgramDAO = PollgramFactory.getPollgramDAO();
-        pollgramService = PollgramFactory.getPollgramService();
+        pollgramDAO = PollgramFactory.getDAO();
+        pollgramService = PollgramFactory.getService();
         long decisionId = getArguments().getLong(PAR_DECISION_ID);
         decision = pollgramDAO.getDecision(decisionId);
 
@@ -81,6 +82,7 @@ public void onItemClick(int id) {
         }
         EditText edLongDescription = (EditText) myView.findViewById(R.id.decision_detail_ed_long_description);
         edLongDescription.setText(decision.getLongDescription());
+        Linkify.addLinks(edLongDescription, Linkify.ALL);
 
         Button ediOptionButton = (Button)myView.findViewById(R.id.decision_detail_edit_option);
         ediOptionButton.setEnabled(decision.isEditable() && decision.isOpen());
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
index 894c40716..fefd2a0ae 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -44,6 +44,10 @@
  * Created by davide on 30/09/15.
  */
 public class DecisionsListFragment extends BaseFragment {
+
+    public static final String PAR_PARTICIPANT_IDS  = "PAR_PARTICIPANT_IDS" ;
+    public static final String PAR_GROUP_CHAT_ID = "PAR_GROUP_CHAT_ID" ;
+
     private static int nextId = 1;
     private static final int ID_TOGGLE_OPEN_CLOSE_DECISIONS = nextId++;
     private static final int ID_PURGE_ALL_DATA = nextId++;
@@ -51,7 +55,7 @@
     private static final int ID_SUICIDE = nextId++;
 
     private Context context;
-    private TLRPC.ChatFull chatInfo;
+    private int groupChatId;
     private TLRPC.Chat currentChat;
 
     private PollgramDAO pollgramDAO;
@@ -64,17 +68,19 @@
     private TextView tvNodecisionPresent;
 
 
-    public DecisionsListFragment(){
-    }
-
     public DecisionsListFragment(Bundle bundle) {
         super(bundle);
     }
 
     @Override
     public boolean onFragmentCreate() {
-        pollgramDAO = PollgramFactory.getPollgramDAO();
+        pollgramDAO = PollgramFactory.getDAO();
         hideCloseDecision = false;
+
+        this.participantsUserIds = getArguments().getIntArray(PAR_PARTICIPANT_IDS);
+        this.groupChatId = getArguments().getInt(PAR_GROUP_CHAT_ID);
+        this.currentChat = MessagesController.getInstance().getChat(groupChatId);
+
         return true;
     }
 
@@ -92,7 +98,7 @@ public View createView(final Context context) {
         final TextView viewOpenCloseTextView =  headerItem.addSubItem(ID_TOGGLE_OPEN_CLOSE_DECISIONS,
                 context.getString(hideCloseDecision ? R.string.viewCloseDecision : R.string.hideCloseDecision),0 );
 
-        // TODO remove those last items...just for test
+        // Items just for test
 //        headerItem.addSubItem(ID_PURGE_ALL_DATA, "Remove current chat decisions", 0);
 //        headerItem.addSubItem(ID_PUT_STUB_DATA_DATA, "Put stub data for current chat", 0);
         headerItem.addSubItem(ID_SUICIDE , getParentActivity().getString(R.string.doNotPressThisButton), 0);
@@ -109,7 +115,7 @@ public void onItemClick(int id) {
                     else
                         viewOpenCloseTextView.setText(R.string.hideCloseDecision);
                 } else if (id == ID_PURGE_ALL_DATA) {
-                    List<Decision> allDecisions = pollgramDAO.getDecisions(chatInfo.id, null);
+                    List<Decision> allDecisions = pollgramDAO.getDecisions(groupChatId, null);
                     for (Decision d : allDecisions) {
                         pollgramDAO.delete(d);
                     }
@@ -124,8 +130,8 @@ public void onItemClick(int id) {
 
         // inflate xml main layout
         fragmentView = new SizeNotifierFrameLayout(context);
-        LayoutInflater li = LayoutInflater.from(context);
-        View myView = li.inflate(R.layout.decision_list_layout, (ViewGroup) fragmentView);
+        LayoutInflater layoutInflater = LayoutInflater.from(context);
+        View myView = layoutInflater.inflate(R.layout.decision_list_layout, (ViewGroup) fragmentView);
         TextView tvTitle = (TextView) myView.findViewById(R.id.decision_list_tv_title);
         ViewGroup imageContainer = (ViewGroup)myView.findViewById(R.id.decision_icon_container);
         decisionsListView = (ListView) myView.findViewById(R.id.decision_list_list_view);
@@ -145,7 +151,7 @@ public void onItemClick(int id) {
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                 Decision decision = (Decision) parent.getAdapter().getItem(position);
                 Bundle bundle = new Bundle();
-                bundle.putLong(VotesManagerFragment.PAR_GROUP_CHAT_ID, chatInfo.id);
+                bundle.putLong(VotesManagerFragment.PAR_GROUP_CHAT_ID, groupChatId);
                 bundle.putLong(VotesManagerFragment.PAR_DECISION_ID, decision.getId());
                 bundle.putIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
                 presentFragment(new VotesManagerFragment(bundle));
@@ -154,8 +160,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
         });
         updateResult();
 
-        // Addig "plus" floating button
-        /// TODO add to layout or createutil methosd ?
+        // Adding "plus" floating button
         ImageView floatingButton = new ImageView(context);
         floatingButton.setScaleType(ImageView.ScaleType.CENTER);
         floatingButton.setBackgroundResource(R.drawable.floating_states);
@@ -180,7 +185,7 @@ public void getOutline(View view, Outline outline) {
             @Override
             public void onClick(View v) {
                 Bundle args = new Bundle();
-                args.putInt(NewDecisionFragment.PAR_GROUP_CHAT_ID, chatInfo.id);
+                args.putInt(NewDecisionFragment.PAR_GROUP_CHAT_ID, groupChatId);
                 presentFragment(new NewDecisionFragment(args));
             }
         });
@@ -189,7 +194,7 @@ public void onClick(View v) {
 
     private void updateResult() {
         Boolean queryPar = hideCloseDecision ? true : null;
-        List<Decision> allDecisions = pollgramDAO.getDecisions(chatInfo.id, null);
+        List<Decision> allDecisions = pollgramDAO.getDecisions(groupChatId, null);
         List<Decision> filterDecision = new ArrayList<>();
         int openCount = 0 ;
         for (Decision d : allDecisions){
@@ -211,22 +216,6 @@ private void updateResult() {
         }
     }
 
-
-    public void setChatInfo(TLRPC.ChatFull chatInfo) {
-        this.chatInfo = chatInfo;
-        List<Integer> ids = new ArrayList<>(chatInfo.participants.participants.size());
-        for (int i = 0; i < chatInfo.participants.participants.size() ; i++){
-            TLRPC.User user = PollgramFactory.getPollgramService().getUser(chatInfo.participants.participants.get(i).user_id);
-            if (user != null)
-                ids.add(user.id);
-        }
-        participantsUserIds = new int[ids.size()];
-        for (int i=0;i<ids.size();i++)
-            participantsUserIds[i] = ids.get(i);
-
-        this.currentChat = MessagesController.getInstance().getChat(chatInfo.id);
-    }
-
     @Override
     public void onResume() {
         super.onResume();
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DefaultTextWatcher.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DefaultTextWatcher.java
new file mode 100644
index 000000000..fa8309636
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DefaultTextWatcher.java
@@ -0,0 +1,21 @@
+package org.pollgram.decision.ui;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+
+/**
+ * Created by davide on 24/01/16.
+ */
+public class DefaultTextWatcher implements TextWatcher{
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+    }
+
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before, int count) {
+    }
+
+    @Override
+    public void afterTextChanged(Editable s) {
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java
index f6950a1f7..9f1f1dccd 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/EditOptionsFragment.java
@@ -36,6 +36,7 @@
 public class EditOptionsFragment extends BaseFragment {
 
     public static final String PAR_DECISION_ID = "PAR_DECISION_ID";
+    public static final String PAR_NEW_OPTION_LONG_DESC = "PAR_NEW_OPTION_LONG_DESC";
 
     private static final int SAVE_MENU_ITEM_ID = 1;
 
@@ -55,12 +56,17 @@ public EditOptionsFragment(Bundle args) {
 
     @Override
     public boolean onFragmentCreate() {
-        pollgramDAO = PollgramFactory.getPollgramDAO();
-        pollgramService = PollgramFactory.getPollgramService();
+        pollgramDAO = PollgramFactory.getDAO();
+        pollgramService = PollgramFactory.getService();
         long decisionId  = getArguments().getLong(PAR_DECISION_ID);
+        String newOptionLongDesc = getArguments().getString(PAR_NEW_OPTION_LONG_DESC);
+
+        options = new ArrayList<TextOption>();
+        if (newOptionLongDesc != null)
+            options.add(new TextOption(null, newOptionLongDesc, decisionId));
+
         decision = pollgramDAO.getDecision(decisionId);
         List<Option> resultOptions = pollgramDAO.getOptions(decision);
-        options = new ArrayList<TextOption>();
         for (Option o : resultOptions)
             options.add((TextOption)o);
 
@@ -93,20 +99,20 @@ public void onItemClick(int id) {
                         final List<Option> newOptions;
                         final List<Option> deletedOptions;
                         try {
-                            newOptions = optionsAdapter.getOptions();
+                            newOptions = optionsAdapter.getNewOptions();
                         } catch (PollgramException e) {
                             Log.w(LOG_TAG, "Error in getOption", e);
                             Toast.makeText(getParentActivity(), e.getMessage(), Toast.LENGTH_LONG).show();
                             return;
                         }
                         deletedOptions = optionsAdapter.getDeletedOptions();
-                        Log.i(LOG_TAG, "option added["+newOptions+"] option deleted["+deletedOptions+"]");
 
+                        Log.i(LOG_TAG, "option added["+newOptions+"] option deleted["+deletedOptions+"]");
                         String message;
 
                         if (deletedOptions.size() == 0) {
                             if (newOptions.size() == 0){
-                                Toast.makeText(context,R.string.nothingToSave,Toast.LENGTH_SHORT);
+                                Toast.makeText(context,R.string.nothingToSave,Toast.LENGTH_SHORT).show();
                                 return;
                             }
                             message = context.getString(R.string.addOptionToDecisionQuestion,
@@ -154,7 +160,7 @@ private void saveDecision(List<Option> newOptions, List<Option> deleteOptions) {
             pollgramService.notifyDeleteOptions(decision, deleteOptions);
 
         Toast.makeText(getParentActivity(), R.string.decisionSaved, Toast.LENGTH_LONG).show();
-        super.finishFragment();
+        EditOptionsFragment.this.finishFragment();
         return;
     }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
index b30f43482..dbec4ccae 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
@@ -4,6 +4,8 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
+import android.text.Editable;
+import android.text.util.Linkify;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -68,8 +70,8 @@ public NewDecisionFragment(Bundle args) {
 
     @Override
     public boolean onFragmentCreate() {
-        pollgramDAO = PollgramFactory.getPollgramDAO();
-        pollgramService = PollgramFactory.getPollgramService();
+        pollgramDAO = PollgramFactory.getDAO();
+        pollgramService = PollgramFactory.getService();
 
         groupChatId = getArguments().getInt(PAR_GROUP_CHAT_ID);
         decisionLongDescription = getArguments().getString(PAR_DECISION_LONG_DESCRIPTION);
@@ -109,7 +111,7 @@ private void showPage1() {
             public void onItemClick(int id) {
                 switch (id) {
                     case UIUtils.ACTION_BAR_BACK_ITEM_ID:
-                        finishFragment();
+                        abortDecisionCreation();
                         break;
                     case NEXT_MENU_ITEM_ID:
                         nextStep();
@@ -126,14 +128,19 @@ public void onItemClick(int id) {
         edTitle = (EditText) myView.findViewById(R.id.decision_detail_ed_title);
         edTitle.setText(decisionTitle);
         edLongDescription = (EditText) myView.findViewById(R.id.decision_detail_ed_long_description);
+        edLongDescription.addTextChangedListener(new DefaultTextWatcher(){
+            @Override
+            public void afterTextChanged(Editable s) {
+                Linkify.addLinks(edLongDescription, Linkify.ALL);
+            }
+        });
         edLongDescription.setText(decisionLongDescription);
     }
 
-
     private void showPage2() {
         currentPage = PAGE_2;
         reset();
-        actionBar.setTitle(getParentActivity().getString(R.string.selectOptions));
+        actionBar.setTitle(getParentActivity().getString(R.string.addOptionsTitle));
         actionBar.setBackButtonImage(R.drawable.ic_arrow_back_white_24dp);
         nextItemMenu.setBackgroundResource(R.drawable.ic_done_white_36dp);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick(){
@@ -146,7 +153,7 @@ public void onItemClick(int id) {
                     case NEXT_MENU_ITEM_ID:
                         final List<Option> options;
                         try {
-                            options = newOptionAdapter.getOptions();
+                            options = newOptionAdapter.getNewOptions();
                         } catch (PollgramException e) {
                             Log.w(LOG_TAG, "Error in getOption",e);
                             Toast.makeText(getParentActivity(), e.getMessage(), Toast.LENGTH_LONG).show();
@@ -223,13 +230,35 @@ public void onResume() {
 
     }
 
+    private void abortDecisionCreation() {
+        if (edTitle.getText().toString().isEmpty() && edLongDescription.getText().toString().isEmpty()){
+            finishFragment();
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setMessage(getParentActivity().getString(R.string.abortDecisionCreation));
+        builder.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                finishFragment();
+            }
+        });
+        builder.setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                // do nothing
+            }
+        });
+        builder.show();
+    }
+
     @Override
     public boolean onBackPressed() {
-        if (currentPage == PAGE_1)
-            return true;
-        else {
+        if (currentPage == PAGE_1) {
+            abortDecisionCreation();
+        }else {
             showPage1();
-            return false;
         }
+        return false;
     }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
index 8e836496b..bc42f55f8 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.os.Bundle;
+import android.text.util.Linkify;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -48,7 +49,7 @@ public boolean onFragmentCreate() {
         long decisionId = getArguments().getLong(PAR_DECISION_ID);
         int[] members = getArguments().getIntArray(PAR_PARTICIPANT_IDS);
 
-        UsersDecisionVotes usersDecisionVotes = PollgramFactory.getPollgramService().getUsersDecisionVotes(decisionId, members);
+        UsersDecisionVotes usersDecisionVotes = PollgramFactory.getService().getUsersDecisionVotes(decisionId, members);
 
         option = (TextOption) usersDecisionVotes.getOption(optionId);
         membersCount = usersDecisionVotes.getUsers().size();
@@ -91,6 +92,8 @@ public void onItemClick(int id) {
         StackedBar.Percentages percentages = stackedBar.getPercentages();
         edTitle.setText(option.getTitle());
         edLongDesc.setText(option.getLongDescription());
+        Linkify.addLinks(edLongDesc, Linkify.ALL);
+
         tvMissing.setText(context.getString(R.string.missingVoteDesc, missingVoteCount, percentages.emptyPerc * 100 ));
         tvPositive.setText(context.getString(R.string.positiveVoteDesc, positiveVoteCount, percentages.positivePerc * 100));
         tvNegative.setText(context.getString(R.string.negativeVoteDesc, negativeVoteCount, percentages.negativePerc * 100));
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/SelectDecisionFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/SelectDecisionFragment.java
new file mode 100644
index 000000000..d01741bdf
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/SelectDecisionFragment.java
@@ -0,0 +1,93 @@
+package org.pollgram.decision.ui;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.pollgram.R;
+import org.pollgram.decision.adapter.DecisionAdapter;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.service.PollgramDAO;
+import org.pollgram.decision.service.PollgramFactory;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Components.SizeNotifierFrameLayout;
+
+import java.util.List;
+
+/**
+ * Created by davide on 24/01/16.
+ */
+public class SelectDecisionFragment extends BaseFragment {
+
+    public static final String PAR_GROUP_CHAT_ID = "PAR_GROUP_CHAT_ID";
+    public static final String PAR_NEW_OPTION_LONG_DESCRIPTION = "PAR_NEW_OPTION_LONG_DESCRIPTION";
+
+    private static final String LOG_TAG = "SelectDecision";
+
+    private PollgramDAO dao;
+    private int groupChatId;
+    private String newOptionLongDescription;
+
+    public SelectDecisionFragment(Bundle bundle){
+        super(bundle);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        dao = PollgramFactory.getDAO();
+        groupChatId = getArguments().getInt(PAR_GROUP_CHAT_ID);
+        newOptionLongDescription = getArguments().getString(PAR_NEW_OPTION_LONG_DESCRIPTION);
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setTitle(context.getString(R.string.selectDecision));
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == UIUtils.ACTION_BAR_BACK_ITEM_ID) {
+                    finishFragment();
+                    return;
+                } else
+                    Log.w(LOG_TAG, "unknown on item click id [" + id + "]");
+            }
+        });
+
+        // set up layout
+        fragmentView = new SizeNotifierFrameLayout(context);
+        LayoutInflater layoutInflater = LayoutInflater.from(context);
+        View myView = layoutInflater.inflate(R.layout.select_decision_layout, (ViewGroup) fragmentView);
+        TextView tvNoDecisionForCurrentUser = (TextView)myView.findViewById(R.id.select_decision_tv_no_decisions_present);
+        final ListView lvDecisions = (ListView)myView.findViewById(R.id.select_decision_list_view);
+
+        // put values
+        List<Decision> decisionList = dao.getDecisions(groupChatId, UserConfig.getClientUserId());
+        tvNoDecisionForCurrentUser.setVisibility(decisionList.size() == 0 ? View.VISIBLE : View.GONE);
+
+        DecisionAdapter decisionAdapter = new DecisionAdapter(context, decisionList);
+        lvDecisions.setAdapter(decisionAdapter);
+        lvDecisions.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                Decision decision = (Decision) parent.getAdapter().getItem(position);
+                Bundle bundle = new Bundle();
+                bundle.putLong(EditOptionsFragment.PAR_DECISION_ID, decision.getId());
+                bundle.putString(EditOptionsFragment.PAR_NEW_OPTION_LONG_DESC, newOptionLongDescription);
+                presentFragment(new EditOptionsFragment(bundle));
+                removeSelfFromStack();
+            }
+        });
+
+        return fragmentView;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
index 3aa560ed0..b99cc7227 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
@@ -28,6 +28,8 @@
 import java.text.DateFormat;
 import java.util.List;
 
+import static org.pollgram.decision.service.PollgramMessagesManager.MessageType;
+
 /**
  * Created by davide on 04/10/15.
  */
@@ -72,8 +74,8 @@ public VotesManagerFragment(Bundle bundle) {
     public boolean onFragmentCreate() {
         // init field
         super.swipeBackEnabled = false;
-        pollgramDAO = PollgramFactory.getPollgramDAO();
-        pollgramService = PollgramFactory.getPollgramService();
+        pollgramDAO = PollgramFactory.getDAO();
+        pollgramService = PollgramFactory.getService();
         long decisionId = getArguments().getLong(PAR_DECISION_ID);
         members = pollgramService.getUsers(getArguments().getIntArray(PAR_PARTICIPANT_IDS));
         decision = pollgramDAO.getDecision(decisionId);
@@ -102,10 +104,13 @@ public void onClick(View v) {
         });
         menu = actionBar.createMenu();
         ActionBarMenuItem headerItem = menu.addItem(0, R.drawable.ic_ab_other);
-        menuCloseDecisionItem = headerItem.addSubItem(ID_CLOSE_DECISION, context.getString(R.string.closeDecision), 0);
-        menuReopenDecisionItem =  headerItem.addSubItem(ID_REOPEN_DECISION, context.getString(R.string.reopenDecision), 0);
-        menuDeleteDecisionItem =headerItem.addSubItem(ID_DELETE_DECISION, context.getString(R.string.deleteDecision), 0);
-        menuEditOptions = headerItem.addSubItem(ID_EDIT_OPTIONS,context.getString(R.string.editOptions),0);
+        menuCloseDecisionItem = headerItem.addSubItem(ID_CLOSE_DECISION,
+                getTitle(MessageType.CLOSE_DECISION, R.string.closeDecision), 0);
+        menuReopenDecisionItem =  headerItem.addSubItem(ID_REOPEN_DECISION,
+                getTitle(MessageType.REOPEN_DECISION, R.string.reopenDecision), 0);
+        menuDeleteDecisionItem =headerItem.addSubItem(ID_DELETE_DECISION,
+                getTitle(MessageType.DELETE_DECISION, R.string.deleteDecision), 0);
+        menuEditOptions = headerItem.addSubItem(ID_EDIT_OPTIONS,context.getString(R.string.editOptions),R.drawable.ic_settings);
         
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
@@ -199,6 +204,10 @@ protected void onVoteSaved() {
         return rootView;
     }
 
+    private String getTitle(MessageType closeDecision, int stringRes) {
+        return closeDecision.getEmoji()+ "   "+ getParentActivity().getString(stringRes);
+    }
+
     private void closeDecision() {
         PollgramDAO.WinningOption winningOption = pollgramDAO.getWinningOption(decision);
         if (winningOption.options.size() == 0){
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index f8cecbfd6..2cdf007ec 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -16,6 +16,7 @@
 
 package org.pollgram.decision.ui;
 
+import android.content.Context;
 import android.graphics.Typeface;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
@@ -73,7 +74,16 @@
     private long groupChatId;
     private VoteListAdapter voteListAdapter;
     private int[] participantsUserIds;
+    private LayoutInflater inflater;
+    private PagerAdapter pagerAdapter;
+    private Context context;
 
+    @Override
+    public Context getContext() {
+        if (context == null)
+            context = super.getContext();
+        return context;
+    }
 
     public VotesManagerTabsFragment(BaseFragment parentFragment) {
         this.parentFragment = parentFragment;
@@ -83,8 +93,8 @@ public VotesManagerTabsFragment(BaseFragment parentFragment) {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        pollgramDAO = PollgramFactory.getPollgramDAO();
-        pollgramService = PollgramFactory.getPollgramService();
+        pollgramDAO = PollgramFactory.getDAO();
+        pollgramService = PollgramFactory.getService();
         groupChatId = getArguments().getLong(VotesManagerFragment.PAR_GROUP_CHAT_ID);
         long decisionId = getArguments().getLong(VotesManagerFragment.PAR_DECISION_ID);
         participantsUserIds = getArguments().getIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS);
@@ -99,13 +109,15 @@ public void onCreate(Bundle savedInstanceState) {
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
+        this.inflater = inflater;
         return inflater.inflate(R.layout.tabbed_fragment, container, false);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         viewPager = (ViewPager) view.findViewById(R.id.viewpager);
-        viewPager.setAdapter(new DecisionPagerAdapter());
+        pagerAdapter = new DecisionPagerAdapter();
+        viewPager.setAdapter(pagerAdapter);
 
         slidingTabLayout = (SlidingTabLayout) view.findViewById(R.id.sliding_tabs);
         slidingTabLayout.setViewPager(viewPager);
@@ -168,26 +180,26 @@ public CharSequence getPageTitle(int position) {
         @Override
         public Object instantiateItem(ViewGroup container, int position) {
             View rootView = null;
-            LayoutInflater inflater = getActivity().getLayoutInflater();
-            if (areThereNoOptions()) {
-                rootView = inflater.inflate(R.layout.votes_manager_no_option_present, container, false);
-            } else {
-                switch (position) {
-                    case OPTION_ID: {
-                        rootView = getOptionsListView(container, inflater);
-                        break;
-                    }
-                    case TABLE_VIEW_ID: {
-                        optionTableViewContainer = new LinearLayout(getContext());
-                        updateOptionsTableView(optionTableViewContainer, inflater);
-                        rootView = optionTableViewContainer;
-                        break;
-                    }
-                    default:
-                        rootView = null;
-                        break;
+
+            switch (position) {
+                case OPTION_ID: {
+                    rootView = getOptionsListView(container, inflater);
+                    break;
                 }
+                case TABLE_VIEW_ID: {
+                    optionTableViewContainer = new LinearLayout(getContext());
+                    updateOptionsTableView(optionTableViewContainer, inflater);
+                    rootView = optionTableViewContainer;
+                    break;
+                }
+                default:
+                    rootView = null;
+                    break;
             }
+
+            if (areThereNoOptions())
+                rootView = inflater.inflate(R.layout.votes_manager_no_option_present, container, false);
+
             container.addView(rootView);
             return rootView;
         }
@@ -257,12 +269,16 @@ public void voteChanges(boolean areThereChangesToSave) {
     protected void updateView() {
         if (usersDecisionVotes == null)
             return;
-        usersDecisionVotes = PollgramFactory.getPollgramService().
+
+        boolean wereNoOptions = areThereNoOptions();
+        usersDecisionVotes = PollgramFactory.getService().
                 getUsersDecisionVotes(usersDecisionVotes.getDecision().getId(),
                         usersDecisionVotes.getUsers());
 
-        if (!areThereNoOptions()) {
-
+        if (wereNoOptions != areThereNoOptions()){
+            // force tabbed pane to rebuild itself
+            viewPager.setAdapter(pagerAdapter);
+        } else {
             // set new sorted  votes in the voteListAdapter
             voteListAdapter.setData(usersDecisionVotes, currentUserId);
             voteListAdapter.setEditable(usersDecisionVotes.getDecision().isOpen());
@@ -270,7 +286,7 @@ protected void updateView() {
 
             // Update table user interface
             optionTableViewContainer.removeAllViews();
-            updateOptionsTableView(optionTableViewContainer, getActivity().getLayoutInflater());
+            updateOptionsTableView(optionTableViewContainer, inflater);
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
index a15e6b785..f6d7910c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
@@ -80,7 +80,7 @@
 
     public ArrayList<TextLayoutBlock> textLayoutBlocks;
 
-    private PollgramMessagesManager msgManager = PollgramFactory.getPollgramMessagesManager();
+    private PollgramMessagesManager msgManager = PollgramFactory.getMessagesManager();
 
     public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users, boolean generateLayout) {
         this(message, users, null, generateLayout);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 2ec4c2854..771c7a528 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -129,7 +129,7 @@
     public int minGroupConvertSize = 200;
     public int groupBigSize;
     private ArrayList<TLRPC.TL_disabledFeature> disabledFeatures = new ArrayList<>();
-    private PollgramService pollgramService = PollgramFactory.getPollgramService();
+    private PollgramService pollgramService = PollgramFactory.getService();
 
     private class UserActionUpdatesSeq extends TLRPC.Updates {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
index 0e7807055..4c732344b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
@@ -97,7 +97,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             } else if (i == 9) {
                 actionCell.setTextAndIcon(LocaleController.getString("TelegramFaq", R.string.TelegramFaq), R.drawable.menu_help);
             }else if (i == 10) {
-                actionCell.setTextAndIcon(LocaleController.getString("ContactMe", R.string.ContactMe), R.drawable.bot_info);
+                actionCell.setTextAndIcon(LocaleController.getString("contactMe", R.string.contactMe), R.drawable.bot_info);
             }
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index acec47a4b..514ee06e6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -836,7 +836,7 @@ protected void onDraw(Canvas canvas) {
 
         Drawable currentBackgroundDrawable;
         if (currentMessageObject.isOutOwner()) {
-            if (isPollgram(currentMessageObject)) {
+            if (PollgramFactory.getMessagesManager().isPollgram(currentMessageObject)) {
                 currentBackgroundDrawable = ResourceLoader.backgroundDrawablePollgramMessageOut;
 
             } else if (isDrawSelectedBackground()) {
@@ -854,7 +854,7 @@ protected void onDraw(Canvas canvas) {
             }
             setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
         } else {
-            if (isPollgram(currentMessageObject)) {
+            if (PollgramFactory.getMessagesManager().isPollgram(currentMessageObject)) {
                 currentBackgroundDrawable = ResourceLoader.backgroundDrawablePollgramMessageIn;
             } else  if (isDrawSelectedBackground()) {
                 if (!media) {
@@ -1166,12 +1166,6 @@ protected void onDraw(Canvas canvas) {
         }
     }
 
-    private boolean isPollgram(MessageObject msg) {
-        if (msg == null || msg.messageText == null)
-            return false;
-        return PollgramFactory.getPollgramMessagesManager().getMessageType(msg.messageText.toString()) != null;
-    }
-
     @Override
     public void onFailedDownload(String fileName) {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 45ec7a0c2..93e2f4cae 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -56,6 +56,7 @@
 import org.pollgram.decision.service.PollgramFactory;
 import org.pollgram.decision.ui.DecisionsListFragment;
 import org.pollgram.decision.ui.NewDecisionFragment;
+import org.pollgram.decision.ui.SelectDecisionFragment;
 import org.pollgram.decision.ui.VotesManagerFragment;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
@@ -148,7 +149,7 @@
 public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate,
         PhotoViewer.PhotoViewerProvider {
 
-    private static final int MENU_ITEM_OPTION_CREATE_DECISION = 1001;
+
     protected TLRPC.Chat currentChat;
     protected TLRPC.User currentUser;
     protected TLRPC.EncryptedChat currentEncryptedChat;
@@ -325,7 +326,11 @@
     private final static int share_contact = 17;
     private final static int mute = 18;
     private final static int reply = 19;
+
     // Pollgram IDs start
+    private static final int MENU_ITEM_OPTION_CREATE_DECISION = 1001;
+    private static final int MENU_ITEM_OPTION_CREATE_OPTION = 1002;
+
     private final static int new_decision = 20;
     private final static int show_decision = 21;
     // Pollgram IDs end
@@ -2345,9 +2350,8 @@ public void onClick(DialogInterface dialogInterface, int i) {
     }
 
     private void openDecisionListFragment() {
-        DecisionsListFragment fragment = new DecisionsListFragment();
-        fragment.setChatInfo(info);
-        presentFragment(fragment);
+        Bundle args = PollgramFactory.getService().getBundleForDecisionList(info);
+        presentFragment(new DecisionsListFragment(args));
     }
 
     private boolean isGroupChat() {
@@ -6068,9 +6072,12 @@ private void createMenu(View v, boolean single) {
                 } else {
                     if (currentEncryptedChat == null) {
 
-                        if (isGroupChat()) { // Pollgram custom items
-                            items.add(LocaleController.getString("CreateDecision", R.string.CreateDecision));
+                        if (isGroupChat() && !PollgramFactory.getMessagesManager().isPollgram(selectedObject)) { // Pollgram custom items
+                            items.add(LocaleController.getString("createDecision", R.string.createDecision));
                             options.add(MENU_ITEM_OPTION_CREATE_DECISION);
+
+                            items.add(LocaleController.getString("createOption", R.string.createOption));
+                            options.add(MENU_ITEM_OPTION_CREATE_OPTION);
                         }
 
                         if (allowChatActions) {
@@ -6339,11 +6346,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
             MediaController.saveFile(path, getParentActivity(), selectedObject.isMusic() ? 3 : 2, fileName);
 
-        } else if (option == MENU_ITEM_OPTION_CREATE_DECISION){
+        } else if (option == MENU_ITEM_OPTION_CREATE_DECISION) {
             // Pollgram create decision
-            Bundle args = PollgramFactory.getPollgramService().getBundleForNewDecision(currentChat, selectedObject);
+            Bundle args = PollgramFactory.getService().getBundleForNewDecision(currentChat, selectedObject);
             presentFragment(new NewDecisionFragment(args));
 
+        } else if (option == MENU_ITEM_OPTION_CREATE_OPTION){
+            // Pollgram use it as option
+            Bundle args = PollgramFactory.getService().getBundleForNewOption(currentChat,selectedObject);
+            presentFragment(new SelectDecisionFragment(args));
+
         } else if (option == 11) {
             MediaController.SearchImage searchImage = new MediaController.SearchImage();
             searchImage.type = 2;
@@ -6825,7 +6837,7 @@ public void didPressUrl(MessageObject messageObject, final ClickableSpan url, bo
                             } else {
                                 // Pollgram decision tile link to vote manager
                                 try {
-                                    Bundle bundle = PollgramFactory.getPollgramService().
+                                    Bundle bundle = PollgramFactory.getService().
                                             getBundleForVotesManagerFragment(info, messageObject, url);
                                     if (bundle != null) {
                                         presentFragment(new VotesManagerFragment(bundle));
diff --git a/TMessagesProj/src/main/res/layout/decision_detail_layout.xml b/TMessagesProj/src/main/res/layout/decision_detail_layout.xml
index e691763b7..d06393b26 100644
--- a/TMessagesProj/src/main/res/layout/decision_detail_layout.xml
+++ b/TMessagesProj/src/main/res/layout/decision_detail_layout.xml
@@ -57,7 +57,7 @@
         android:layout_below="@+id/decision_detail_tv_creation_info"
         android:paddingTop="5dp"
         android:text="@string/notes"
-        android:textAppearance="?android:attr/textAppearanceMedium" />
+        android:textAppearance="?android:attr/textAppearanceMedium"/>
 
     <ScrollView
         android:id="@+id/decision_detail_long_description_scroll_view"
@@ -73,6 +73,7 @@
 
             <EditText
                 android:id="@+id/decision_detail_ed_long_description"
+                android:textAppearance="?android:attr/textAppearanceSmall"
                 android:layout_width="fill_parent"
                 android:layout_height="wrap_content"
                 android:layout_alignParentTop="true"
@@ -85,7 +86,7 @@
             android:layout_height="wrap_content"
             android:layout_alignParentBottom="true"
             android:layout_centerHorizontal="true"
-            android:drawableLeft="@drawable/floating_pencil"
+            android:drawableLeft="@drawable/ic_settings"
             android:orientation="vertical"
             android:text="@string/editOptions"
             android:layout_gravity="center_horizontal" />
diff --git a/TMessagesProj/src/main/res/layout/item_new_option_list.xml b/TMessagesProj/src/main/res/layout/item_new_option_list.xml
index a2da70361..f05ea553e 100644
--- a/TMessagesProj/src/main/res/layout/item_new_option_list.xml
+++ b/TMessagesProj/src/main/res/layout/item_new_option_list.xml
@@ -10,14 +10,16 @@
         android:background="@drawable/option"
         android:paddingRight="10dp"
         android:id="@+id/decision_detail_iv_option_image"
-        android:layout_alignBottom="@+id/new_option_ed_long_description" />
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true" />
 
     <EditText
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:id="@+id/new_option_ed_title"
         android:hint="@string/insertOptionTitleHint"
-        android:singleLine = "true"
+        android:inputType="textCapSentences"
         android:layout_alignParentTop="true"
         android:layout_toRightOf="@+id/decision_detail_iv_option_image"
         android:layout_toLeftOf="@+id/new_option_delete_button"
@@ -28,6 +30,8 @@
         android:layout_height="wrap_content"
         android:id="@+id/new_option_ed_long_description"
         android:hint="@string/insertLongDescriptionHint"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:inputType="textMultiLine|textCapSentences"
         android:layout_below="@+id/new_option_ed_title"
         android:layout_toRightOf="@+id/decision_detail_iv_option_image"
         android:layout_alignParentRight="true"
diff --git a/TMessagesProj/src/main/res/layout/item_vote_list.xml b/TMessagesProj/src/main/res/layout/item_vote_list.xml
index 0941c07f7..f6ced6f23 100644
--- a/TMessagesProj/src/main/res/layout/item_vote_list.xml
+++ b/TMessagesProj/src/main/res/layout/item_vote_list.xml
@@ -39,6 +39,7 @@
         android:layout_toRightOf="@+id/item_option_iv_image"
         android:maxLines="2"
         android:paddingLeft="8dp"
+        android:paddingTop="2dp"
         android:text="Lorem ipsum dolor sit amet, 1 2 3 4 5 . 6 7 consectetuer  adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam "
         android:textAppearance="?android:attr/textAppearanceSmall"
         android:layout_toLeftOf="@+id/item_option_stacked_bar"
diff --git a/TMessagesProj/src/main/res/layout/new_decision_step1_layout.xml b/TMessagesProj/src/main/res/layout/new_decision_step1_layout.xml
index 93d8c8654..10e6e88c3 100644
--- a/TMessagesProj/src/main/res/layout/new_decision_step1_layout.xml
+++ b/TMessagesProj/src/main/res/layout/new_decision_step1_layout.xml
@@ -15,8 +15,8 @@
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:id="@+id/decision_detail_ed_title"
-        android:singleLine = "true"
         android:hint="@string/insertTitleHint"
+        android:inputType="textCapSentences"
         android:layout_alignBottom="@+id/decision_detail_iv_option_image"
         android:layout_alignRight="@+id/decision_detail_ed_long_description"
         android:layout_alignEnd="@+id/decision_detail_ed_long_description"
@@ -40,6 +40,8 @@
         android:layout_height="wrap_content"
         android:id="@+id/decision_detail_ed_long_description"
         android:hint="@string/insertLongDescriptionHint"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:inputType="textMultiLine|textCapSentences"
         android:layout_below="@+id/decision_detail_tv_notes"
         android:layout_alignParentLeft="true"
         android:layout_alignParentStart="true"
diff --git a/TMessagesProj/src/main/res/layout/select_decision_layout.xml b/TMessagesProj/src/main/res/layout/select_decision_layout.xml
new file mode 100644
index 000000000..fc21be9b5
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/select_decision_layout.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/decision_list_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:text="@string/decisionsCreatedByYou"
+        android:id="@+id/select_decision_tv_title"
+        android:paddingLeft="5dp"
+        android:paddingTop="5dp"
+        android:paddingBottom="10dp"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="visible"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:text="@string/thereAreNoDecisionCreatedByYouInThisGroup"
+        android:gravity="left|top"
+        android:paddingTop="10dp"
+        android:paddingLeft="10dp"
+        android:paddingRight="10dp"
+        android:id="@+id/select_decision_tv_no_decisions_present"
+        android:layout_alignRight="@+id/select_decision_tv_title"
+        android:layout_alignEnd="@+id/select_decision_tv_title"
+        android:layout_below="@+id/select_decision_tv_title"
+        />
+
+
+    <ListView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/select_decision_list_view"
+        android:layout_alignRight="@+id/select_decision_tv_title"
+        android:layout_alignEnd="@+id/select_decision_tv_title"
+        android:layout_below="@+id/select_decision_tv_no_decisions_present" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 835f9f3bf..ddca6e55c 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -3,8 +3,8 @@
 <!--https://www.transifex.com/projects/p/telegram/language/it/members/-->
 
 <resources>
-    <string name="AppName">Pollgram</string>
-    <string name="AppNameBeta">Pollgram Beta</string>
+    <string name="AppName">DecisionGram</string>
+    <string name="AppNameBeta">DecisionGram Beta</string>
     <string name="LanguageName">Italiano</string>
     <string name="LanguageNameInEnglish">Italian</string>
     <string name="LanguageCode">it</string>
@@ -1101,6 +1101,15 @@
     <!-- END MessageType descriptions -->
 
 
+    <!-- Pollgram crash messages START -->
+    <string name="appCrashedMessage">Oh cazzo! L\'applicazione è andata in crash :-( Inviami una segnalazione del crash via email in modo che possa sistemare il tutto in men che non si dica. Grazie </string>
+    <string name="sendCrashEmail">Invia sengalazione di errore</string>
+    <string name="contactMe">Contact me</string>
+    <string name="sendInfoEmail">Pollgram contactta lo sviluppatore</string>
+    <string name="doNotPressThisButton">Non premere qui</string>
+    <string name="emailCrashMessageBody">Mi dispiace ma Pollgram si è interrotto a causa di:\n%1$s\nLe infromazione relative al errore sono allegate alla mail.\nGrazie per il supporto supporto.\n</string>
+    <!-- Pollgram crash messages END -->
+
     <string name="howManyMemberVote">%1$d su %2$d hanno votato</string>
     <string name="createdByUserOnDayNewLine">Creata da %1$s \nil %2$s</string>
     <string name="createdByUserOnDay">Creata da %1$s il %2$s</string>
@@ -1130,16 +1139,16 @@
     <string name="decisionNotFound">Decisione %1$s not trovata, potrebbe essere stata cancellata.</string>
     <string name="title">Titolo</string>
     <string name="notes">Note</string>
-    <string name="deleteDecisionQuestion">Sei sicuro di cancellare questa decisione ? Verrà rimossa per TUTTI gli utenti del gruppo non solo per te.\nContinuare ?</string>
+    <string name="deleteDecisionQuestion">Sei sicuro di cancellare questa decisione ? Verrà rimossa definitivamente per tutti gli utenti del gruppo non solo per te.\nContinuare ?</string>
     <string name="insertTitleHint">Inserire il titolo qui</string>
     <string name="insertOptionTitleHint">Inserire il titolo del opzione qui</string>
-    <string name="insertLongDescriptionHint">Inserire qui le note aggiuntive</string>
+    <string name="insertLongDescriptionHint">Inserire qui le note (opzionale)</string>
     <string name="newDecision">Nuova decisione</string>
-    <string name="selectOptions">Selezionare le opzioni</string>
+    <string name="addOptionsTitle">Aggiungi opzioni</string>
     <string name="pleaseSelectATitle">Scegliere un titolo</string>
-    <string name="newOption">Nuova opzione</string>
+    <string name="newOption">Aggiungi nuova opzione</string>
     <string name="decisionSaved">La decisione è stata salvata</string>
-    <string name="pleaseSelectATitleForOption">È necessario selezionafdre un titolo per l\'ultima opzione, prima aggiungerne una nuova.</string>
+    <string name="pleaseSelectATitleForOption">Selezionare un titolo per l\'ultima opzione, prima aggiungerne una nuova.</string>
     <string name="decisionAlreadyExist">Attenzione! Esiste già una decisione con questo titolo per questo!</string>
     <string name="emptyTitleOnOption">Prego selezionare un titolo per l\'opzione %1$d.</string>
     <string name="emptyTitleOnLastOption">Prego selezionare un titolo per l\'ultima opzione.</string>
@@ -1166,17 +1175,15 @@
         tra i membri del gruppo, utilizzando un sistema basato su sondaggi.
         \n\nPremi il pulsante \"più\" per creare una nuova decisione.</string>
 
-    <string name="CreateDecision">Crea nuova decisione</string>
-    <string name="newDecisionFromMessageHeader">Message from %2$s, %1$s:</string>
-
-    <!-- Pollgram crash messages START -->
-    <string name="appCrashedMessage">Oh cazzo! L\'applicazione è andata in crash :-( Inviami una segnalazione del crash via email in modo che possa sistemare il tutto in men che non si dica. Grazie </string>
-    <string name="sendCrashEmail">Invia sengalazione via eMail</string>
-    <string name="ContactMe">Contact me</string>
-    <string name="sendInfoEmail">Pollgram contactta lo sviluppatore</string>
-    <string name="doNotPressThisButton">Non premere qui</string>
-    <string name="emailCrashMessageBody">Mi dispiace ma Pollgram si è interrotto a causa di:\n%1$s\nLe infromazione relative al errore sono allegate alla mail.\nGrazie per il supporto supporto.\n</string>
-    <!-- Pollgram crash messages END -->
+    <string name="createDecision">Crea nuova decisione</string>
+    <string name="newDecisionFromMessageHeader">Messaggio da %2$s, %1$s:</string>
+    <string name="abortDecisionCreation">Interrompere la creazione della nuova decisione \?</string>
+    <string name="createOption">Utilizza come opzione</string>
+    <string name="selectDecision">Seleziona una decisione</string>
+    <string name="decisionsCreatedByYou">Seleziona in quale delle decisioni create da te aggiungere la nuova opzione.</string>
+    <string name="thereAreNoDecisionCreatedByYouInThisGroup">Non sono presenti decisione create da te in questo gruppo.
+        È possibile aggiungere opzioni solo alle proprie decisioni.
+        \n\nSe vuoi aggiungere un opzione ad una decisione creata da qualcun altro, chiedoglielo semplicemente.</string>
 
     <!-- END of Pollgram text -->
 
@@ -1184,5 +1191,4 @@
     <string name="updateText">Telegram per Android si è aggiornato. Nuovo nella versione 3.4.0:\n\nRivoluzione GIF: Invio e download 20 volte più veloci, autoriproduci e salva le tue preferite nel pannello sticker.\n\nPiù info sulle GIF:\nhttps://telegram.org/blog/gif-revolution\n\nBot Inline: Un nuovo modo di aggiungere contenuti in ogni chat. Menziona un bot e la tua domanda nel campo di scrittura e ottieni risultati immediati. Prova a scrivere “@gif dog” nella tua prossima chat. Bot di esempio: @gif, @wiki, @bing, @vid, @bold\n\nPiù info sui Bot Inline:\nhttps://telegram.org/blog/inline-bots</string>
     <string name="updateBuild">704</string>
 
-
 </resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 36b3b6b19..4ea19707e 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1096,9 +1096,17 @@
     <string name="MessageType_DELETE_DECISION">Delete decision</string>
     <string name="MessageType_ADD_OPTIONS">Add options</string>
     <string name="MessageType_DELTE_OPTIONS">Delete options</string>
-
     <!-- END MessageType descriptions -->
 
+    <!-- Pollgram crash messages START -->
+    <string name="appCrashedMessage">Oh shit ! The app crashed :-( Please send me the crash info by email, so i can fix the problem as soon a spossible. Thanks you.</string>
+    <string name="sendCrashEmail">Send Crash info</string>
+    <string name="contactMe">Contact me</string>
+    <string name="sendInfoEmail">Pollgram contact developer</string>
+    <string name="doNotPressThisButton">Do not press here</string>
+    <string name="emailCrashMessageBody">I am sorry but Pollgram just crashed because of: \n%1$s\nCrash report is attached to the email.\nThank you for the support.\n</string>
+    <string name="title_activity_crash_manager_activity">Crash Manager</string>
+    <!-- Pollgram crash messages END -->
 
     <string name="howManyMemberVote">%1$d on %2$d have voted yet</string>
     <string name="createdByUserOnDayNewLine">Created by %1$s \non %2$s</string>
@@ -1131,14 +1139,14 @@
     <string name="deleteDecisionQuestion">Are you sure you want to delete this decision ?
         This will remove this decision for ALL users involved, not just yourself.\nAre you sure ?</string>
     <string name="insertTitleHint">Insert title here</string>
-    <string name="insertOptionTitleHint">Insert option\'s title here</string>
-    <string name="insertLongDescriptionHint">Insert additional notes here</string>
+    <string name="insertOptionTitleHint">Insert option title here</string>
+    <string name="insertLongDescriptionHint">Insert notes here (optional)</string>
     <string name="newDecision">New decision</string>
-    <string name="selectOptions">Select options</string>
+    <string name="addOptionsTitle">Add options</string>
     <string name="pleaseSelectATitle">Please select a title</string>
-    <string name="newOption">New Option</string>
+    <string name="newOption">Add new Option</string>
     <string name="decisionSaved">Decision has been saved</string>
-    <string name="pleaseSelectATitleForOption">Pleace select a value for the title of the last option, before adding a new one</string>
+    <string name="pleaseSelectATitleForOption">Pleace select a value for the title of the last option added, before adding a new one</string>
     <string name="decisionAlreadyExist">Already exist a decision with this title on the current group !</string>
     <string name="emptyTitleOnOption">Please select a title for the %1$d option.</string>
     <string name="emptyTitleOnLastOption">Please select a title for the last option.</string>
@@ -1166,18 +1174,16 @@
         using a poll-based system.
         \n\nPres the \"plus\" button for creating a new decision.</string>
 
-    <string name="CreateDecision">Create Decision</string>
+    <string name="createDecision">Create Decision</string>
+    <string name="abortDecisionCreation">Abort decision creation ?</string>
     <string name="newDecisionFromMessageHeader">Message from %2$s, %1$s:</string>
+    <string name="createOption">Use as Option</string>
+    <string name="selectDecision">Select a decision</string>
+    <string name="decisionsCreatedByYou">Select in which of the decisions created by you, add the new option</string>
+    <string name="thereAreNoDecisionCreatedByYouInThisGroup">There are no decisions created by you in this group.
+        You can add option only to the decisions that you have created.
+        \n\nIf you want to add an option to a decision created by someone else, just ask her/him to do so.</string>
 
-    <!-- Pollgram crash messages START -->
-    <string name="appCrashedMessage">Oh shit ! The app crashed :-( Please send me the crash info by email, so i can fix the problem as soon a spossible. Thanks you.</string>
-    <string name="sendCrashEmail">Send Crash info by Email</string>
-    <string name="ContactMe">Contact me</string>
-    <string name="sendInfoEmail">Pollgram contact developer</string>
-    <string name="doNotPressThisButton">Do not press here</string>
-    <string name="emailCrashMessageBody">I am sorry but Pollgram just crashed because of: \n%1$s\nCrash report is attached to the email.\nThank you for the support.\n</string>
-    <string name="title_activity_crash_manager_activity">Crash Manager</string>
-    <!-- Pollgram crash messages END -->
 
     <string name="emailBugDestAddress">davide.pallaoro@gmail.com</string>
     <!-- END of Pollgram text -->
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
index e40ea7974..ed5d88371 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
@@ -189,7 +189,7 @@ public void testCloseDecisionSingleWinningOptions() throws PollgramParseExceptio
     }
 
     private void assertCloseDecision(Decision decision, List<Option> winningOption, String message) throws PollgramParseException {
-        PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(message, chat.id);
+        PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(message, chat.id, user.id);
         Assert.assertEquals(decision, result.decision);
         Assert.assertEquals(winningOption, result.winningOptions);
     }
@@ -204,7 +204,7 @@ public void testReopenDecision() throws PollgramParseException {
     }
 
     private void assertReopenDecision(Decision decision, String message) throws PollgramParseException {
-        Decision foundDecision = messageManager.getReopenDecision(message, chat.id);
+        Decision foundDecision = messageManager.getReopenDecision(message, chat.id, user.id);
         Assert.assertEquals(foundDecision, decision);
     }
 
@@ -218,7 +218,7 @@ public void testDeleteDecision() throws PollgramParseException {
     }
 
     private void assertDeleteDecision(Decision decision, String message) throws PollgramParseException {
-        Decision foundDecision = messageManager.getDeleteDecision(message, chat.id);
+        Decision foundDecision = messageManager.getDeleteDecision(message, chat.id, user.id);
         Assert.assertEquals(foundDecision, decision);
     }
 
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
index 5d30a2211..12c290ded 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
@@ -105,6 +105,11 @@ public Decision getDecision(long decisionId) {
         return outList;
     }
 
+    @Override
+    public List<Decision> getDecisions(long chatId, int decisionOwnerId) {
+        return null;
+    }
+
     @Override
     public Option getOption(long optionId) {
         for (Option o : textOptions)
