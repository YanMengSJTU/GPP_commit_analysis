diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
index bb3e071ab..ad856529b 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
@@ -9,9 +9,10 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.pollgram.decision.data.Decision;
 import org.pollgram.R;
+import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.service.PollgramFactory;
+import org.pollgram.decision.service.PollgramService;
 
 import java.util.List;
 
@@ -22,10 +23,12 @@
 
     private static final int LAYOUT_RES_ID = R.layout.item_decision_list;
     private final int groupMemberCount;
+    private final PollgramService pollgramService;
 
     public DecisionAdapter(Context context,  List<Decision> items, int groupMemberCount) {
         super(context, LAYOUT_RES_ID, items);
         this.groupMemberCount = groupMemberCount;
+        pollgramService = PollgramFactory.getPollgramService();
     }
 
     @Override
@@ -35,15 +38,17 @@ public View getView(int position, View convertView, ViewGroup parent) {
         View rowView = inflater.inflate(LAYOUT_RES_ID, parent, false);
         ImageView decisionImage = (ImageView)rowView.findViewById(R.id.item_decision_iv_image);
         TextView decisionTitle = (TextView)rowView.findViewById(R.id.item_decision_tv_title);
-        TextView decisionSubtitle = (TextView)rowView.findViewById(R.id.item_decision_tv_subtitle);
+        TextView decisionSubtitle1 = (TextView)rowView.findViewById(R.id.item_decision_tv_subtitle_1);
+        TextView decisionSubtitle2 = (TextView)rowView.findViewById(R.id.item_decision_tv_subtitle_2);
 
 
         // put data
         Decision decision = getItem(position);
         decisionTitle.setText(decision.getTitle());
         int userThatVoteSoFar = PollgramFactory.getPollgramDAO().getUserVoteCount(decision);
-        String subTitle = getContext().getString(R.string.howManyMemberVote, userThatVoteSoFar,groupMemberCount);
-        decisionSubtitle.setText(subTitle);
+        String userAsString = pollgramService.asString(pollgramService.getUser(decision.getUserCreatorId()));
+        decisionSubtitle1.setText(getContext().getString(R.string.createdBy, userAsString));
+        decisionSubtitle2.setText(getContext().getString(R.string.howManyMemberVote, userThatVoteSoFar, groupMemberCount));
         if (!decision.isOpen())
             rowView.setBackgroundColor(Color.LTGRAY);
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 2f2a73c67..2503ca7e6 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -30,19 +30,21 @@
     private static final String LOG_TAG = "ChoiceAdapter";
 
     private static final int LAYOUT_RES_ID = R.layout.item_vote_list;
+    private boolean editable;
     private List<Vote> votes;
     private List<Boolean> originalVotes;
     private List<Vote> newVotes;
-    private OnVoteChangeListener onVoteChageListener;
+    private OnVoteChangeListener onVoteChangeListener;
 
     public interface OnVoteChangeListener {
         void voteChanges(boolean areThereChangesToSave);
     }
 
-    public VoteListAdapter(Context context, List<Vote> votes) {
+    public VoteListAdapter(Context context, List<Vote> votes, boolean editable) {
         super(context, LAYOUT_RES_ID);
+        this.editable = editable;
         setVotes(votes);
-        this.onVoteChageListener = new OnVoteChangeListener() {
+        this.onVoteChangeListener = new OnVoteChangeListener() {
             @Override
             public void voteChanges(boolean areThereChangesToSave) {
             }
@@ -58,6 +60,10 @@ public void setVotes(List<Vote> votes) {
         }
     }
 
+    public void setEditable(boolean editable) {
+        this.editable = editable;
+    }
+
     public List<Vote> getVotes() {
         return votes;
     }
@@ -77,8 +83,8 @@ public int getPosition(Vote item) {
         return votes.indexOf(item);
     }
 
-    public void setOnVoteChageListener(OnVoteChangeListener onVoteChageListener){
-        this.onVoteChageListener = onVoteChageListener;
+    public void setOnVoteChangeListener(OnVoteChangeListener onVoteChangeListener){
+        this.onVoteChangeListener = onVoteChangeListener;
     }
 
     @Override
@@ -97,6 +103,7 @@ public View getView(final int position, View convertView, ViewGroup parent) {
         TextView optionSubtitle = (TextView)rowView.findViewById(R.id.item_option_tv_subtitle);
 //        SurfaceView optionView = (SurfaceView)rowView.findViewById(R.id.item_option_sw_bar);
         final CheckBox optionCheckBox = (CheckBox)rowView.findViewById(R.id.item_option_cb);
+        optionCheckBox.setEnabled(editable);
         optionCheckBox.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -108,7 +115,7 @@ public void onClick(View v) {
                     newVotes.add(vote);
                 }
                 Log.d(LOG_TAG, "item [" + position + "] selected[" + optionCheckBox.isChecked() + "] ");
-                onVoteChageListener.voteChanges(!newVotes.isEmpty());
+                onVoteChangeListener.voteChanges(!newVotes.isEmpty());
             }
         });
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
index 6dc7b6aff..1bfdda816 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
@@ -1,31 +1,35 @@
 package org.pollgram.decision.data;
 
+import java.util.Date;
+
 /**
  * Created by davide on 01/10/15.
  */
 public class Decision extends  DBBean {
 
+    private final Date creationDate;
     private String title;
     private final String longDescription;
     private final int fullChatId;
-    private final long userCreatorId;
+    private final int userCreatorId;
     private boolean open;
 
     // icon/image will be retrived externally by url or file.
     // Like the file containing the decision image can be named like decisio_<id>.png, and cached on the fs
 
-    public Decision(int fullChatId, long userCreatorId, String title, String longDescription,
-                    boolean open) {
+    public Decision(int fullChatId, int userCreatorId, String title, String longDescription,
+                    Date creationDate, boolean open) {
         this.fullChatId = fullChatId;
-        this.userCreatorId = userCreatorId;
         this.title = title;
         this.longDescription = longDescription;
+        this.userCreatorId = userCreatorId;
+        this.creationDate = creationDate;
         this.open = open;
     }
 
-    public Decision(long id, int fullChatId, long userCreatorId, String title, String longDescription,
-                    boolean open) {
-        this(fullChatId,userCreatorId,title, longDescription, open);
+    public Decision(long id, int fullChatId, int userCreatorId, String title, String longDescription,
+                    Date creationDate, boolean open) {
+        this(fullChatId,userCreatorId,title, longDescription, creationDate, open);
         setId(id);
 
     }
@@ -41,7 +45,7 @@ public int getChatId() {
      * @return the id of the user that create the current decision.
      * This id referes to TLRPC.User
      */
-    public long getUserCreatorId() {
+    public int getUserCreatorId() {
         return userCreatorId;
     }
 
@@ -53,6 +57,10 @@ public void setTitle(String title) {
         this.title = title;
     }
 
+    public Date getCreationDate() {
+        return creationDate;
+    }
+
     public boolean isOpen() {
         return open;
     }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
index d7f9cf9cf..b7aa5e645 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
@@ -32,12 +32,12 @@
         static final String LONG_DESCRIPTION = "long_description";
         static final String FULL_CHAT_ID = "full_chat_id";
         static final String USER_CREATOR_ID = "user_creator_id";
+        static final String CREATION_DATE = "creation_date";
         static final String OPEN = "open";
 
         public static String cloumns(String tableAlias) {
-            return createColumns(tableAlias, ID, TITLE, LONG_DESCRIPTION, FULL_CHAT_ID, USER_CREATOR_ID, OPEN);
+            return createColumns(tableAlias, ID, TITLE, LONG_DESCRIPTION, FULL_CHAT_ID,CREATION_DATE, USER_CREATOR_ID, OPEN);
         }
-
     }
 
     static class T_TextOption {
@@ -114,7 +114,6 @@ public ContentValues toCV(Vote v) {
         }
     };
 
-
     /**
      * DBObjectMapper for Decision
      */
@@ -136,9 +135,10 @@ public Decision from(Cursor c) {
             String title = getString(c, T_Decision.TITLE);
             String description = getString(c, T_Decision.LONG_DESCRIPTION);
             int fullChatId = getInt(c, T_Decision.FULL_CHAT_ID);
-            long userCreatorId = getLong(c, T_Decision.USER_CREATOR_ID);
+            int userCreatorId = getInt(c, T_Decision.USER_CREATOR_ID);
+            Date creationDate = getDate(c, T_Decision.CREATION_DATE);
             boolean isOpen = getBoolean(c, T_Decision.OPEN);
-            return new Decision(id, fullChatId, userCreatorId, title, description, isOpen);
+            return new Decision(id, fullChatId, userCreatorId, title, description, creationDate, isOpen);
         }
 
         @Override
@@ -148,6 +148,7 @@ public ContentValues toCV(Decision d) {
             cv.put(T_Decision.LONG_DESCRIPTION, d.getLongDescription());
             cv.put(T_Decision.FULL_CHAT_ID, d.getChatId());
             cv.put(T_Decision.USER_CREATOR_ID, d.getUserCreatorId());
+            cv.put(T_Decision.CREATION_DATE, d.getCreationDate().getTime());
             cv.put(T_Decision.OPEN, d.isOpen());
             return cv;
         }
@@ -256,13 +257,15 @@ public PGSqlLiteHelper() {
         }
     }
 
+
     public <T extends DBBean> List<T> query(DBObjectMapper<T> mapper, String selection,
-                                            String[] selectionArgs) {
+                                            String[] selectionArgs, String groupBy, String having,
+                                            String orderBy) {
         SQLiteDatabase db = getReadableDatabase();
         Cursor cursor = null;
         try {
-             cursor = db.query(mapper.getTableName(), null, selection,
-                    selectionArgs, null, null, null);
+            cursor = db.query(mapper.getTableName(), null, selection,
+                    selectionArgs, groupBy, having, orderBy);
             List<T> result = new ArrayList<>();
             cursor.moveToFirst();
             while (!cursor.isAfterLast()) {
@@ -278,6 +281,11 @@ public PGSqlLiteHelper() {
         }
     }
 
+    public <T extends DBBean> List<T> query(DBObjectMapper<T> mapper, String selection,
+                                            String[] selectionArgs) {
+        return query(mapper, selection, selectionArgs, null, null, null);
+    }
+
     public <T extends DBBean> T findFirst(DBObjectMapper<T> mapper, String selection,
                                             String[] selectionArgs) {
         List<T> list = query(mapper,selection,selectionArgs);
@@ -318,6 +326,7 @@ public void onCreate(SQLiteDatabase db) {
                 T_Decision.LONG_DESCRIPTION + " TEXT, " +
                 T_Decision.FULL_CHAT_ID + " INTEGER," +
                 T_Decision.USER_CREATOR_ID + " INTEGER," +
+                T_Decision.CREATION_DATE + " TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                 T_Decision.OPEN + " INTEGER, " +
                 "UNIQUE ("+T_Decision.TITLE+","+T_Decision.FULL_CHAT_ID+")" +
                 ") ;");
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index 817e9df58..aca654a14 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -13,6 +13,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 
 /**
@@ -41,10 +42,11 @@ public void putStubData(int chatId, int creatorId) {
         Log.i(LOG_TAG, "Put Stub test data");
 
         List<Decision> decisions = new ArrayList<>();
-        decisions.add(new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", true));
-        decisions.add(new Decision(chatId, creatorId, "Where do we go ?", "huge bla bla bla", true));
-        decisions.add(new Decision(chatId, creatorId, "When will the party be ?", "huge bla bla bla", true));
-        decisions.add(new Decision(chatId, creatorId, "Do we add Slomp to the group ?", "huge bla bla bla", false));
+        Date creationDate = new Date();
+        decisions.add(new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", creationDate, true));
+        decisions.add(new Decision(chatId, creatorId, "Where do we go ?", "huge bla bla bla", creationDate, true));
+        decisions.add(new Decision(chatId, creatorId, "When will the party be ?", "huge bla bla bla", creationDate, true));
+        decisions.add(new Decision(chatId, creatorId, "Do we add Slomp to the group ?", "huge bla bla bla", creationDate, false));
         for (Decision d : decisions) {
             Decision newD = save(d);
             Log.i(LOG_TAG, "inserted decision id:" + newD.getId());
@@ -179,13 +181,17 @@ public Decision getDecision(long decisionId) {
 
     @Override
     public List<Decision> getDecisions(int chatId, @Nullable Boolean open) {
-        String chatIdCond = PGSqlLiteHelper.T_Decision.FULL_CHAT_ID + " = ? ";
-        if (open == null)
-            return helper.query(helper.DECISION_MAPPER, chatIdCond, new String[]{Integer.toString(chatId)});
-        else
-            return helper.query(helper.DECISION_MAPPER,
-                    PGSqlLiteHelper.T_Decision.OPEN + "= ? and " + chatIdCond,
-                    new String[]{PGSqlLiteHelper.toString(open), Integer.toString(chatId)});
+        String selection = PGSqlLiteHelper.T_Decision.FULL_CHAT_ID + " = ? ";
+        String[] selectionArgs;
+        if (open != null) {
+            selection = PGSqlLiteHelper.T_Decision.OPEN + "= ? and " + selection;
+            selectionArgs = new String[]{PGSqlLiteHelper.toString(open), Integer.toString(chatId)};
+        } else {
+            selectionArgs = new String[]{Integer.toString(chatId)};
+        }
+
+        return helper.query(helper.DECISION_MAPPER, selection, selectionArgs, null, null,
+                PGSqlLiteHelper.T_Decision.OPEN + " DESC, " + PGSqlLiteHelper.T_Decision.CREATION_DATE) ;
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index 2b567856d..8ffd96d06 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -154,9 +154,10 @@ public NewDecisionData(@NonNull Decision decision, @NonNull List<Option> optionL
      * @param msg the text message to parse
      * @param currentChat current group chat
      * @param userId message owner
+     * @param messageDate the message date
      * @return the decision and its options
      */
-    NewDecisionData getNewDecision(String msg, int currentChat, int userId) throws PollgramParseException;
+    NewDecisionData getNewDecision(String msg, int currentChat, int userId, Date messageDate) throws PollgramParseException;
 
     /**
      * Return value for getCloseDecision
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index a15b993f5..9dfdd9f1a 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -282,7 +282,7 @@ public MessageType getMessageType(String msg){
     }
 
     @Override
-    public NewDecisionData getNewDecision(String msg, int currentChat, int userId) throws PollgramParseException {
+    public NewDecisionData getNewDecision(String msg, int currentChat, int userId, Date messageDate) throws PollgramParseException {
         Decision decision;
         List<Option> optionList = new ArrayList<>();
         try {
@@ -292,7 +292,7 @@ public NewDecisionData getNewDecision(String msg, int currentChat, int userId) t
                 String title = strTok.nextToken();
                 strTok.nextToken();//skip this token
                 String longDescription = strTok.nextToken();
-                decision = new Decision(currentChat, userId, title, longDescription, true);
+                decision = new Decision(currentChat, userId, title, longDescription, messageDate, true);
             }
             while (strTok.hasMoreTokens()){
                 strTok.nextToken();//skip this token
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index 4b5d5c811..c431b9d2e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -15,7 +15,6 @@
  */
 public interface PollgramService {
 
-    List<TLRPC.User> getUsers(int[] usersIds);
 
     UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds);
 
@@ -35,17 +34,19 @@
 
     /**
      * Process a message and return the new message, performing some transformation if needed.
-     * @param currentChat
      * @param message the input message
      * @return the input message transformed if needed
      */
     void processMessage(MessageObject message);
 
+    List<TLRPC.User> getUsers(int[] usersIds);
+
+    TLRPC.User getUser(int userid);
+
     /**
      * @param user
-     * @return a string reppresetation of the passed user. That can be used just for local
-     * representaion not for sending message, as description can be taken right from
-     * the local contact list of the user
+     * @return a string representation of the passed user.
      */
     String asString(TLRPC.User user);
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index d6ec8e5d4..a042aaee3 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -43,19 +43,6 @@ public PollgramServiceImpl() {
         this.messageManager = messageManager;
     }
 
-    @Override
-    public List<TLRPC.User> getUsers(int[] usersIds) {
-        List<TLRPC.User> users = new ArrayList<>();
-        for (int i = 0; i < usersIds.length; i++) {
-            TLRPC.User user = MessagesController.getInstance().getUser(usersIds[i]);
-            if (user.status == null) {// suppose this is a bot
-                Log.i(LOG_TAG, "User [" + user + "] is a BOT, it will be skipped");
-                continue;
-            }
-            users.add(user);
-        }
-        return users;
-    }
 
     @Override
     public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds) {
@@ -106,6 +93,7 @@ public void notifyVote(Decision decision, Collection<Vote> votes2Save) {
         sendMessage(decision.getChatId(), message);
     }
 
+
     @Override
     public void notifyClose(Decision decision) {
         decision.setOpen(false);
@@ -141,13 +129,13 @@ public void notifyNewDecision(Decision decision, List<Option> options) {
             pollgramDAO.save(o);
         }
 
-        String message = messageManager.buildNotifyNewDecision(decision,options);
+        String message = messageManager.buildNotifyNewDecision(decision, options);
         sendMessage(decision.getChatId(), message);
     }
 
     @Override
     public void processMessage(MessageObject message) {
-        Log.d(LOG_TAG,"parsing message ["+message.messageText+"]");
+        Log.d(LOG_TAG, "parsing message [" + message.messageText + "]");
         if (message.messageOwner == null) {
             Log.d(NOT_PARSED_TAG,"message.messageOwner not set");
             return;
@@ -177,7 +165,8 @@ public void processMessage(MessageObject message) {
         try {
             switch (msgType) {
                 case NEW_DECISION: {
-                    PollgramMessagesManager.NewDecisionData resut = messageManager.getNewDecision(text, groupChatId, userId);
+                    PollgramMessagesManager.NewDecisionData resut = messageManager.getNewDecision(text,
+                            groupChatId, userId, messageDate);
                     if (resut == null){
                         throw new PollgramParseException("Decision not found for NEW_DECISION messsage");
                     }
@@ -232,6 +221,25 @@ protected void sendMessage(long groupChatId, String message) {
         Log.i(LOG_TAG, "sended message [" + message + "] in group [" + groupChatId + "]");
     }
 
+    @Override
+    public TLRPC.User getUser(int userid) {
+        return MessagesController.getInstance().getUser(userid);
+    }
+
+    @Override
+    public List<TLRPC.User> getUsers(int[] usersIds) {
+        List<TLRPC.User> users = new ArrayList<>();
+        for (int i = 0; i < usersIds.length; i++) {
+            TLRPC.User user = getUser(usersIds[i]);
+            if (user.status == null) {// suppose this is a bot
+                Log.i(LOG_TAG, "User [" + user + "] is a BOT, it will be skipped");
+                continue;
+            }
+            users.add(user);
+        }
+        return users;
+    }
+
     @Override
     public String asString(TLRPC.User user){
         if (user.id / 1000 != 777 && user.id / 1000 != 333 &&
@@ -246,4 +254,5 @@ public String asString(TLRPC.User user){
             return UserObject.getUserName(user);
         }
     }
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
index 2369a4b1c..a613fecd6 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -70,7 +70,7 @@ public DecisionsListFragment(Bundle bundle) {
     @Override
     public boolean onFragmentCreate() {
         pollgramDAO = PollgramFactory.getPollgramDAO();
-        hideCloseDecision = true;
+        hideCloseDecision = false;
         return true;
     }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
index 45d66e701..701e883d1 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
@@ -25,6 +25,8 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 
+import java.text.DateFormat;
+
 /**
  * Created by davide on 04/10/15.
  */
@@ -47,12 +49,15 @@
     private PollgramDAO pollgramDAO;
     private PollgramService pollgramService;
     private Decision decision;
+
+    private TextView tvCreationInfo;
     private TextView tvUserVoteCount;
     private TextView tvDecisionStatus;
     private TextView menuDeleteDecisionItem;
     private TextView menuReopenDecisionItem;
     private TextView menuCloseDecisionItem;
     private ActionBarMenu menu;
+    private VotesManagerTabsFragment votesManagerTabsFragment;
 
     public VotesManagerFragment(Bundle bundle) {
         super(bundle);
@@ -117,6 +122,7 @@ public void onClick(DialogInterface dialog, int which) {
                     Log.e(LOG_TAG, "Unknown action id[" + id + "]");
                     return;
                 }
+                votesManagerTabsFragment.updateView();
                 updateView();
                 Toast.makeText(context, context.getString(stringId), Toast.LENGTH_SHORT).show();
             }
@@ -127,19 +133,20 @@ public void onClick(DialogInterface dialog, int which) {
         ViewGroup rootView = (ViewGroup)li.inflate(R.layout.votes_manager_main, (ViewGroup) fragmentView);
 
         // Create view
-        tvUserVoteCount = (TextView) rootView.findViewById(R.id.tv_user_vote_count);
-        tvDecisionStatus = (TextView) rootView.findViewById(R.id.tv_decision_status);
+        tvCreationInfo = (TextView) rootView.findViewById(R.id.vote_manager_tv_creationInfo);
+        tvUserVoteCount = (TextView) rootView.findViewById(R.id.vote_manager_tv_user_vote_count);
+        tvDecisionStatus = (TextView) rootView.findViewById(R.id.vote_manager_tv_decision_status);
         updateView();
 
         android.support.v4.app.FragmentTransaction transaction = getParentActivity().getSupportFragmentManager().beginTransaction();
-        VotesManagerTabsFragment fragment = new VotesManagerTabsFragment(){
+        votesManagerTabsFragment = new VotesManagerTabsFragment(){
             @Override
             protected void onVoteSaved() {
                 updateView();
             }
         };
-        fragment.setArguments(getArguments());
-        transaction.replace(R.id.sample_content_fragment, fragment);
+        votesManagerTabsFragment.setArguments(getArguments());
+        transaction.replace(R.id.sample_content_fragment, votesManagerTabsFragment);
         transaction.commit();
 
         return rootView;
@@ -153,7 +160,7 @@ private void updateView(){
         menuReopenDecisionItem.setVisibility(View.GONE);
         menuDeleteDecisionItem.setVisibility(View.GONE);
         menuCloseDecisionItem.setVisibility(View.GONE);
-        if (decision.getUserCreatorId() == UserConfig.getCurrentUser().id){
+        if (decision.getUserCreatorId() == UserConfig.getCurrentUser().id) {
             menu.setVisibility(View.VISIBLE);
             if (decision.isOpen())
                 menuCloseDecisionItem.setVisibility(View.VISIBLE);
@@ -161,10 +168,14 @@ private void updateView(){
                 menuReopenDecisionItem.setVisibility(View.VISIBLE);
                 menuDeleteDecisionItem.setVisibility(View.VISIBLE);
             }
-        }
+        } else {
             menu.setVisibility(View.GONE);
+        }
 
-
+        String userStr = pollgramService.asString(pollgramService.getUser(decision.getUserCreatorId()));
+        String creationDateStr = DateFormat.getDateInstance(DateFormat.MEDIUM).
+                format(decision.getCreationDate());
+        tvCreationInfo.setText(ctx.getString(R.string.createdByUserOnDay,userStr, creationDateStr));
 
         String statusDesc = ctx.getString(decision.isOpen() ? R.string.statusOpen : R.string.statusClose);
         tvDecisionStatus.setText(ctx.getString(R.string.decisionStatus, statusDesc));
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index fb7cb1788..e349e31cd 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -69,6 +69,7 @@
     private int currentUserId;
     private ViewGroup optionTableViewContainer;
     private long groupChatId;
+    private VoteListAdapter voteListAdapter;
 
     public VotesManagerTabsFragment() {
     }
@@ -201,15 +202,17 @@ private View getOptionsListView(ViewGroup container, LayoutInflater inflater) {
         View rootView;
         rootView = inflater.inflate(R.layout.votes_manager_list_tab, container, false);
         ListView listView = (ListView) rootView.findViewById(R.id.decision_option_lw_options);
-        final VoteListAdapter adapter = new VoteListAdapter(getActivity(), usersDecisionVotes.getVotes(currentUserId));
-        listView.setAdapter(adapter);
+        voteListAdapter = new VoteListAdapter(getActivity(),
+                usersDecisionVotes.getVotes(currentUserId),
+                usersDecisionVotes.getDecision().isOpen());
+        listView.setAdapter(voteListAdapter);
         final Button btnSaveOption = (Button) rootView.findViewById(R.id.decision_option_btn_save_votes);
         btnSaveOption.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 Collection<Vote> votes2Save;
                 if (usersDecisionVotes.atLeastOneIsNull(currentUserId)) {
-                    votes2Save = adapter.getVotes();
+                    votes2Save = voteListAdapter.getVotes();
                     // set to false null votes
                     for(Vote v : votes2Save){
                         if (v.isVote() == null) {
@@ -218,23 +221,15 @@ public void onClick(View view) {
                         }
                     }
                 } else
-                    votes2Save = adapter.getNewVotes();
+                    votes2Save = voteListAdapter.getNewVotes();
 
                 Log.i(LOG_TAG, "saving votes[" + votes2Save + "]");
                 pollgramService.notifyVote(usersDecisionVotes.getDecision(), votes2Save);
-
-                usersDecisionVotes = PollgramFactory.getPollgramService().
-                        getUsersDecisionVotes(usersDecisionVotes.getDecision().getId(),
-                                usersDecisionVotes.getUsers());
                 btnSaveOption.setVisibility(View.GONE);
 
-                // set new sorted  votes in the adapter
-                adapter.setVotes(usersDecisionVotes.getVotes(currentUserId));
-                adapter.notifyDataSetChanged();
+                // update view
+                updateView();
 
-                // Update table user interface
-                optionTableViewContainer.removeAllViews();
-                updateOptionsTableView(optionTableViewContainer, getActivity().getLayoutInflater());
                 // Call method in order ti
                 onVoteSaved();
 
@@ -242,7 +237,7 @@ public void onClick(View view) {
             }
         });
 
-        adapter.setOnVoteChageListener(new VoteListAdapter.OnVoteChangeListener() {
+        voteListAdapter.setOnVoteChangeListener(new VoteListAdapter.OnVoteChangeListener() {
             @Override
             public void voteChanges(boolean areThereChangesToSave) {
                 if (areThereChangesToSave)
@@ -254,6 +249,21 @@ public void voteChanges(boolean areThereChangesToSave) {
         return rootView;
     }
 
+    protected void updateView() {
+        usersDecisionVotes = PollgramFactory.getPollgramService().
+                getUsersDecisionVotes(usersDecisionVotes.getDecision().getId(),
+                        usersDecisionVotes.getUsers());
+
+        // set new sorted  votes in the voteListAdapter
+        voteListAdapter.setVotes(usersDecisionVotes.getVotes(currentUserId));
+        voteListAdapter.notifyDataSetChanged();
+        voteListAdapter.setEditable(usersDecisionVotes.getDecision().isOpen());
+
+        // Update table user interface
+        optionTableViewContainer.removeAllViews();
+        updateOptionsTableView(optionTableViewContainer, getActivity().getLayoutInflater());
+    }
+
     @NonNull
     private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater) {
         View rootView = inflater.inflate(R.layout.votes_manager_table_tab, container, false);
diff --git a/TMessagesProj/src/main/res/layout/item_decision_list.xml b/TMessagesProj/src/main/res/layout/item_decision_list.xml
index 93f2b997d..480c472d1 100644
--- a/TMessagesProj/src/main/res/layout/item_decision_list.xml
+++ b/TMessagesProj/src/main/res/layout/item_decision_list.xml
@@ -27,16 +27,29 @@
         android:layout_alignParentTop="true"
         android:layout_toRightOf="@+id/item_decision_iv_image"
         android:layout_toEndOf="@+id/item_decision_iv_image"
-        android:paddingLeft="10dp" />
+        android:paddingLeft="5dp" />
 
     <TextView
-        android:layout_width="match_parent"
+        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:textAppearance="?android:attr/textAppearanceSmall"
-        android:text="sub title that my report bla bla"
-        android:id="@+id/item_decision_tv_subtitle"
+        android:text="Subtitle1"
+        android:id="@+id/item_decision_tv_subtitle_1"
         android:layout_below="@+id/item_decision_tv_title"
         android:layout_toRightOf="@+id/item_decision_iv_image"
-        android:layout_toEndOf="@+id/item_decision_iv_image"
-        android:paddingLeft="10dp" />
+        android:layout_alignRight="@+id/item_decision_tv_title"
+        android:layout_alignEnd="@+id/item_decision_tv_title"
+        android:paddingLeft="5dp"/>
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:text="Subtitle2"
+        android:id="@+id/item_decision_tv_subtitle_2"
+        android:layout_below="@+id/item_decision_tv_subtitle_1"
+        android:layout_toRightOf="@+id/item_decision_iv_image"
+        android:layout_alignRight="@+id/item_decision_tv_subtitle_1"
+        android:layout_alignEnd="@+id/item_decision_tv_subtitle_1"
+        android:paddingLeft="5dp"/>
 </RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/votes_manager_main.xml b/TMessagesProj/src/main/res/layout/votes_manager_main.xml
index ab5e9744d..420f78de1 100644
--- a/TMessagesProj/src/main/res/layout/votes_manager_main.xml
+++ b/TMessagesProj/src/main/res/layout/votes_manager_main.xml
@@ -17,6 +17,13 @@
     
 
 -->
+    <TextView
+        android:id="@+id/vote_manager_tv_creationInfo"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:text="vote_manager_tv_creationInfos"
+        android:padding="5dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"/>
 
     <LinearLayout android:id="@+id/top_title_layout"
         android:layout_width="match_parent"
@@ -24,8 +31,8 @@
         android:orientation="horizontal">
 
         <TextView
-            android:id="@+id/tv_decision_status"
-            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:id="@+id/vote_manager_tv_decision_status"
+            android:textAppearance="?android:attr/textAppearanceSmall"
             android:text="status"
             android:padding="5dp"
             android:layout_width="wrap_content"
@@ -33,8 +40,8 @@
 
 
         <TextView
-            android:id="@+id/tv_user_vote_count"
-            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:id="@+id/vote_manager_tv_user_vote_count"
+            android:textAppearance="?android:attr/textAppearanceSmall"
             android:text="Title"
             android:padding="5dp"
             android:layout_width="wrap_content"
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 043de418a..213fd3c4e 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -954,11 +954,13 @@
 
     <!-- START of Pollgram text -->
     <string name="howManyMemberVote">%1$d on %2$d have voted yet</string>
+    <string name="createdBy">Created by %1$s</string>
+    <string name="createdByUserOnDay">Created by %1$s on %2$s</string>
     <string name="decisionStatus">Decision is %1$s</string>
-    <string name="statusOpen">open</string>
+    <string name="statusOpen">editable</string>
     <string name="statusClose">close</string>
     <string name="groupDecision">Group decisions</string>
-    <string name="decisionsCount">%1$d open decision, %2$d closed decisions</string>
+    <string name="decisionsCount">%1$d editable decision, %2$d closed decisions</string>
 
     <string name="viewCloseDecision">View closed decision</string>
     <string name="hideCloseDecision">Hide closed decision</string>
