diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/HomePage.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/HomePage.java
new file mode 100644
index 000000000..099bb41a4
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/HomePage.java
@@ -0,0 +1,81 @@
+package org.telegramkr.passcodelock;
+
+import me.dawson.applock.core.AppLock;
+import me.dawson.applock.core.AppLockActivity;
+import me.dawson.applock.core.BaseActivity;
+import me.dawson.applock.core.LockManager;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.Toast;
+
+public class HomePage extends BaseActivity implements OnClickListener {
+	public static final String TAG = "HomePage";
+
+	private Button btOnOff;
+	private Button btChange;
+
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.page_home);
+
+		btOnOff = (Button) findViewById(R.id.bt_on_off);
+		btOnOff.setOnClickListener(this);
+
+		btChange = (Button) findViewById(R.id.bt_change);
+		btChange.setText(R.string.change_passcode);
+		btChange.setOnClickListener(this);
+
+		updateUI();
+	}
+
+	@Override
+	public void onClick(View view) {
+		if (view.equals(btOnOff)) {
+			int type = LockManager.getInstance().getAppLock().isPasscodeSet() ? AppLock.DISABLE_PASSLOCK
+					: AppLock.ENABLE_PASSLOCK;
+			Intent intent = new Intent(this, AppLockActivity.class);
+			intent.putExtra(AppLock.TYPE, type);
+			startActivityForResult(intent, type);
+		} else if (view.equals(btChange)) {
+			Intent intent = new Intent(this, AppLockActivity.class);
+			intent.putExtra(AppLock.TYPE, AppLock.CHANGE_PASSWORD);
+			intent.putExtra(AppLock.MESSAGE,
+					getString(R.string.enter_old_passcode));
+			startActivityForResult(intent, AppLock.CHANGE_PASSWORD);
+		}
+	}
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+		super.onActivityResult(requestCode, resultCode, data);
+
+		switch (requestCode) {
+		case AppLock.DISABLE_PASSLOCK:
+			break;
+		case AppLock.ENABLE_PASSLOCK:
+		case AppLock.CHANGE_PASSWORD:
+			if (resultCode == RESULT_OK) {
+				Toast.makeText(this, getString(R.string.setup_passcode),
+						Toast.LENGTH_SHORT).show();
+			}
+			break;
+		default:
+			break;
+		}
+		updateUI();
+	}
+
+	private void updateUI() {
+		if (LockManager.getInstance().getAppLock().isPasscodeSet()) {
+			btOnOff.setText(R.string.disable_passcode);
+			btChange.setEnabled(true);
+		} else {
+			btOnOff.setText(R.string.enable_passcode);
+			btChange.setEnabled(false);
+		}
+	}
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/SettingsPasscodeLockActivity.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/SettingsPasscodeLockActivity.java
new file mode 100644
index 000000000..f7639c988
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/SettingsPasscodeLockActivity.java
@@ -0,0 +1,751 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegramkr.passcodelock;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.provider.Settings;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.NotificationsController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.ui.ApplicationLoader;
+import org.telegramkr.messenger.R;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Views.ActionBar.ActionBarLayer;
+import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegram.ui.Views.ColorPickerView;
+
+public class SettingsPasscodeLockActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private ListView listView;
+    private boolean reseting = false;
+
+    private int notificationsServiceRow;
+    private int messageSectionRow;
+    private int messageAlertRow;
+    private int messagePreviewRow;
+    private int messageVibrateRow;
+    private int messageSoundRow;
+    private int messageLedRow;
+    private int messagePopupNotificationRow;
+    private int groupSectionRow;
+    private int groupAlertRow;
+    private int groupPreviewRow;
+    private int groupVibrateRow;
+    private int groupSoundRow;
+    private int groupLedRow;
+    private int groupPopupNotificationRow;
+    private int inappSectionRow;
+    private int inappSoundRow;
+    private int inappVibrateRow;
+    private int inappPreviewRow;
+    private int eventsSectionRow;
+    private int contactJoinedRow;
+    private int otherSectionRow;
+    private int badgeNumberRow;
+    private int pebbleAlertRow;
+    private int resetSectionRow;
+    private int resetNotificationsRow;
+    private int rowCount = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        notificationsServiceRow = rowCount++;
+        messageSectionRow = rowCount++;
+        messageAlertRow = rowCount++;
+        messagePreviewRow = rowCount++;
+        messageVibrateRow = rowCount++;
+        messageLedRow = rowCount++;
+        messagePopupNotificationRow = rowCount++;
+        messageSoundRow = rowCount++;
+        groupSectionRow = rowCount++;
+        groupAlertRow = rowCount++;
+        groupPreviewRow = rowCount++;
+        groupVibrateRow = rowCount++;
+        groupLedRow = rowCount++;
+        groupPopupNotificationRow = rowCount++;
+        groupSoundRow = rowCount++;
+        inappSectionRow = rowCount++;
+        inappSoundRow = rowCount++;
+        inappVibrateRow = rowCount++;
+        inappPreviewRow = rowCount++;
+        eventsSectionRow = rowCount++;
+        contactJoinedRow = rowCount++;
+        otherSectionRow = rowCount++;
+        badgeNumberRow = rowCount++;
+        pebbleAlertRow = rowCount++;
+        resetSectionRow = rowCount++;
+        resetNotificationsRow = rowCount++;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
+
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
+            final ListAdapter listAdapter = new ListAdapter(getParentActivity());
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == messageAlertRow || i == groupAlertRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled;
+                        if (i == messageAlertRow) {
+                            enabled = preferences.getBoolean("EnableAll", true);
+                            editor.putBoolean("EnableAll", !enabled);
+                        } else if (i == groupAlertRow) {
+                            enabled = preferences.getBoolean("EnableGroup", true);
+                            editor.putBoolean("EnableGroup", !enabled);
+                        }
+                        editor.commit();
+                        listView.invalidateViews();
+                        updateServerNotificationsSettings(i == groupAlertRow);
+                    } else if (i == messagePreviewRow || i == groupPreviewRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled;
+                        if (i == messagePreviewRow) {
+                            enabled = preferences.getBoolean("EnablePreviewAll", true);
+                            editor.putBoolean("EnablePreviewAll", !enabled);
+                        } else if (i == groupPreviewRow) {
+                            enabled = preferences.getBoolean("EnablePreviewGroup", true);
+                            editor.putBoolean("EnablePreviewGroup", !enabled);
+                        }
+                        editor.commit();
+                        listView.invalidateViews();
+                        updateServerNotificationsSettings(i == groupPreviewRow);
+                    } else if (i == messageSoundRow || i == groupSoundRow) {
+                        try {
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
+                            Uri currentSound = null;
+
+                            String defaultPath = null;
+                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
+                            if (defaultUri != null) {
+                                defaultPath = defaultUri.getPath();
+                            }
+
+                            if (i == messageSoundRow) {
+                                String path = preferences.getString("GlobalSoundPath", defaultPath);
+                                if (path != null && !path.equals("NoSound")) {
+                                    if (path.equals(defaultPath)) {
+                                        currentSound = defaultUri;
+                                    } else {
+                                        currentSound = Uri.parse(path);
+                                    }
+                                }
+                            } else if (i == groupSoundRow) {
+                                String path = preferences.getString("GroupSoundPath", defaultPath);
+                                if (path != null && !path.equals("NoSound")) {
+                                    if (path.equals(defaultPath)) {
+                                        currentSound = defaultUri;
+                                    } else {
+                                        currentSound = Uri.parse(path);
+                                    }
+                                }
+                            }
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
+                            startActivityForResult(tmpIntent, i);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (i == resetNotificationsRow) {
+                        if (reseting) {
+                            return;
+                        }
+                        reseting = true;
+                        TLRPC.TL_account_resetNotifySettings req = new TLRPC.TL_account_resetNotifySettings();
+                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                            @Override
+                            public void run(TLObject response, TLRPC.TL_error error) {
+                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        MessagesController.getInstance().enableJoined = true;
+                                        reseting = false;
+                                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                        SharedPreferences.Editor editor = preferences.edit();
+                                        editor.clear();
+                                        editor.commit();
+                                        if (listView != null) {
+                                            listView.invalidateViews();
+                                        }
+                                        if (getParentActivity() != null) {
+                                            Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("ResetNotificationsText", R.string.ResetNotificationsText), Toast.LENGTH_SHORT);
+                                            toast.show();
+                                        }
+                                    }
+                                });
+                            }
+                        });
+                    } else if (i == inappSoundRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableInAppSounds", true);
+                        editor.putBoolean("EnableInAppSounds", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == inappVibrateRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableInAppVibrate", true);
+                        editor.putBoolean("EnableInAppVibrate", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == inappPreviewRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableInAppPreview", true);
+                        editor.putBoolean("EnableInAppPreview", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == contactJoinedRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableContactJoined", true);
+                        MessagesController.getInstance().enableJoined = !enabled;
+                        editor.putBoolean("EnableContactJoined", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == pebbleAlertRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnablePebbleNotifications", false);
+                        editor.putBoolean("EnablePebbleNotifications", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == badgeNumberRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("badgeNumber", true);
+                        editor.putBoolean("badgeNumber", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                        NotificationsController.getInstance().setBadgeEnabled(!enabled);
+                    } else if (i == notificationsServiceRow) {
+                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        boolean enabled = preferences.getBoolean("pushService", true);
+                        if (!enabled) {
+                            final SharedPreferences.Editor editor = preferences.edit();
+                            editor.putBoolean("pushService", !enabled);
+                            editor.commit();
+                            listView.invalidateViews();
+                            ApplicationLoader.startPushService();
+                        } else {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setMessage(LocaleController.getString("NotificationsServiceDisableInfo", R.string.NotificationsServiceDisableInfo));
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    ApplicationLoader.stopPushService();
+                                    final SharedPreferences.Editor editor = preferences.edit();
+                                    editor.putBoolean("pushService", false);
+                                    editor.commit();
+                                    listView.invalidateViews();
+                                }
+                            });
+                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showAlertDialog(builder);
+                        }
+                    } else if (i == messageLedRow || i == groupLedRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
+
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        if (i == messageLedRow) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                        } else if (i == groupLedRow) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
+                        builder.setView(view);
+                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messageLedRow) {
+                                    editor.putInt("MessagesLed", colorPickerView.getColor());
+                                } else if (i == groupLedRow) {
+                                    editor.putInt("GroupLed", colorPickerView.getColor());
+                                }
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messageLedRow) {
+                                    editor.putInt("MessagesLed", 0);
+                                } else if (i == groupLedRow) {
+                                    editor.putInt("GroupLed", 0);
+                                }
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("PopupNotification", R.string.PopupNotification));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("NoPopup", R.string.NoPopup),
+                                LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn),
+                                LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff),
+                                LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messagePopupNotificationRow) {
+                                    editor.putInt("popupAll", which);
+                                } else if (i == groupPopupNotificationRow) {
+                                    editor.putInt("popupGroup", which);
+                                }
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == messageVibrateRow || i == groupVibrateRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("Disabled", R.string.Disabled),
+                                LocaleController.getString("Default", R.string.Default),
+                                LocaleController.getString("Short", R.string.Short),
+                                LocaleController.getString("Long", R.string.Long)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                String param = "vibrate_messages";
+                                if (i == groupVibrateRow) {
+                                    param = "vibrate_group";
+                                }
+                                if (which == 0) {
+                                    editor.putInt(param, 2);
+                                } else if (which == 1) {
+                                    editor.putInt(param, 0);
+                                } else if (which == 2) {
+                                    editor.putInt(param, 1);
+                                } else if (which == 3) {
+                                    editor.putInt(param, 3);
+                                }
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public void updateServerNotificationsSettings(boolean group) {
+        //disable global settings sync
+        /*SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
+        req.settings = new TLRPC.TL_inputPeerNotifySettings();
+        req.settings.sound = "default";
+        req.settings.events_mask = 0;
+        if (!group) {
+            req.peer = new TLRPC.TL_inputNotifyUsers();
+            req.settings.mute_until = preferences.getBoolean("EnableAll", true) ? 0 : Integer.MAX_VALUE;
+            req.settings.show_previews = preferences.getBoolean("EnablePreviewAll", true);
+        } else {
+            req.peer = new TLRPC.TL_inputNotifyChats();
+            req.settings.mute_until = preferences.getBoolean("EnableGroup", true) ? 0 : Integer.MAX_VALUE;
+            req.settings.show_previews = preferences.getBoolean("EnablePreviewGroup", true);
+        }
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        });*/
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
+            String name = null;
+            if (ringtone != null) {
+                Ringtone rng = RingtoneManager.getRingtone(getParentActivity(), ringtone);
+                if (rng != null) {
+                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
+                        name = LocaleController.getString("Default", R.string.Default);
+                    } else {
+                        name = rng.getTitle(getParentActivity());
+                    }
+                    rng.stop();
+                }
+            }
+
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+
+            if (requestCode == messageSoundRow) {
+                if (name != null && ringtone != null) {
+                    editor.putString("GlobalSound", name);
+                    editor.putString("GlobalSoundPath", ringtone.toString());
+                } else {
+                    editor.putString("GlobalSound", "NoSound");
+                    editor.putString("GlobalSoundPath", "NoSound");
+                }
+            } else if (requestCode == groupSoundRow) {
+                if (name != null && ringtone != null) {
+                    editor.putString("GroupSound", name);
+                    editor.putString("GroupSoundPath", ringtone.toString());
+                } else {
+                    editor.putString("GroupSound", "NoSound");
+                    editor.putString("GroupSoundPath", "NoSound");
+                }
+            }
+            editor.commit();
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.notificationsSettingsUpdated) {
+            listView.invalidateViews();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow);
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_section_text);
+                if (i == messageSectionRow) {
+                    textView.setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
+                } else if (i == groupSectionRow) {
+                    textView.setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
+                } else if (i == inappSectionRow) {
+                    textView.setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
+                } else if (i == eventsSectionRow) {
+                    textView.setText(LocaleController.getString("Events", R.string.Events));
+                } else if (i == otherSectionRow) {
+                    textView.setText(LocaleController.getString("PhoneOther", R.string.PhoneOther));
+                } else if (i == resetSectionRow) {
+                    textView.setText(LocaleController.getString("Reset", R.string.Reset));
+                }
+            } if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_check_notify_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+
+                ImageView checkButton = (ImageView)view.findViewById(R.id.settings_row_check_button);
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                boolean enabled = false;
+                boolean enabledAll = preferences.getBoolean("EnableAll", true);
+                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
+
+                if (i == messageAlertRow || i == groupAlertRow) {
+                    if (i == messageAlertRow) {
+                        enabled = enabledAll;
+                    } else if (i == groupAlertRow) {
+                        enabled = enabledGroup;
+                    }
+                    textView.setText(LocaleController.getString("Alert", R.string.Alert));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == messagePreviewRow || i == groupPreviewRow) {
+                    if (i == messagePreviewRow) {
+                        enabled = preferences.getBoolean("EnablePreviewAll", true);
+                    } else if (i == groupPreviewRow) {
+                        enabled = preferences.getBoolean("EnablePreviewGroup", true);
+                    }
+                    textView.setText(LocaleController.getString("MessagePreview", R.string.MessagePreview));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == inappSoundRow) {
+                    enabled = preferences.getBoolean("EnableInAppSounds", true);
+                    textView.setText(LocaleController.getString("InAppSounds", R.string.InAppSounds));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == inappVibrateRow) {
+                    enabled = preferences.getBoolean("EnableInAppVibrate", true);
+                    textView.setText(LocaleController.getString("InAppVibrate", R.string.InAppVibrate));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == inappPreviewRow) {
+                    enabled = preferences.getBoolean("EnableInAppPreview", true);
+                    textView.setText(LocaleController.getString("InAppPreview", R.string.InAppPreview));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == contactJoinedRow) {
+                    enabled = preferences.getBoolean("EnableContactJoined", true);
+                    textView.setText(LocaleController.getString("ContactJoined", R.string.ContactJoined));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == pebbleAlertRow) {
+                    enabled = preferences.getBoolean("EnablePebbleNotifications", false);
+                    textView.setText(LocaleController.getString("Pebble", R.string.Pebble));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == notificationsServiceRow) {
+                    enabled = preferences.getBoolean("pushService", true);
+                    textView.setText(LocaleController.getString("NotificationsService", R.string.NotificationsService));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == badgeNumberRow) {
+                    enabled = preferences.getBoolean("badgeNumber", true);
+                    textView.setText(LocaleController.getString("BadgeNumber", R.string.BadgeNumber));
+                    divider.setVisibility(View.VISIBLE);
+                }
+                if (enabled) {
+                    checkButton.setImageResource(R.drawable.btn_check_on);
+                } else {
+                    checkButton.setImageResource(R.drawable.btn_check_off);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView textViewDetail = (TextView)view.findViewById(R.id.settings_row_text_detail);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                boolean enabledAll = preferences.getBoolean("EnableAll", true);
+                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
+
+                if (i == messageSoundRow || i == groupSoundRow) {
+                    String name = null;
+                    if (i == messageSoundRow) {
+                        name = preferences.getString("GlobalSound", LocaleController.getString("Default", R.string.Default));
+                    } else if (i == groupSoundRow) {
+                        name = preferences.getString("GroupSound", LocaleController.getString("Default", R.string.Default));
+                    }
+                    if (name.equals("NoSound")) {
+                        textViewDetail.setText(LocaleController.getString("NoSound", R.string.NoSound));
+                    } else {
+                        textViewDetail.setText(name);
+                    }
+                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == resetNotificationsRow) {
+                    textView.setText(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications));
+                    textViewDetail.setText(LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
+                    textView.setText(LocaleController.getString("PopupNotification", R.string.PopupNotification));
+                    int option = 0;
+                    if (i == messagePopupNotificationRow) {
+                        option = preferences.getInt("popupAll", 0);
+                    } else if (i == groupPopupNotificationRow) {
+                        option = preferences.getInt("popupGroup", 0);
+                    }
+                    if (option == 0) {
+                        textViewDetail.setText(LocaleController.getString("NoPopup", R.string.NoPopup));
+                    } else if (option == 1) {
+                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn));
+                    } else if (option == 2) {
+                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff));
+                    } else if (option == 3) {
+                        textViewDetail.setText(LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup));
+                    }
+                    divider.setVisibility(View.VISIBLE);
+                }
+            } else if (type == 3) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View colorView = view.findViewById(R.id.settings_color);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                if (i == messageLedRow) {
+                    colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                } else if (i == groupLedRow) {
+                    colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                }
+                divider.setVisibility(View.VISIBLE);
+            } else if (type == 4) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                int value = 0;
+                textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
+                divider.setVisibility(View.VISIBLE);
+                if (i == messageVibrateRow) {
+                    value = preferences.getInt("vibrate_messages", 0);
+                } else if (i == groupVibrateRow) {
+                    value = preferences.getInt("vibrate_group", 0);
+                }
+                if (value == 0) {
+                    detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                } else if (value == 1) {
+                    detailTextView.setText(LocaleController.getString("Short", R.string.Short));
+                } else if (value == 2) {
+                    detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                } else if (value == 3) {
+                    detailTextView.setText(LocaleController.getString("Long", R.string.Long));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow) {
+                return 0;
+            } else if (i == messageAlertRow || i == messagePreviewRow ||
+                    i == groupAlertRow || i == groupPreviewRow ||
+                    i == inappSoundRow || i == inappVibrateRow || i == inappPreviewRow ||
+                    i == contactJoinedRow ||
+                    i == pebbleAlertRow || i == notificationsServiceRow || i == badgeNumberRow) {
+                return 1;
+            } else if (i == messageLedRow || i == groupLedRow) {
+                return 3;
+            } else if (i == groupVibrateRow || i == messageVibrateRow) {
+                return 4;
+            } else {
+                return 2;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 5;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLock.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLock.java
new file mode 100644
index 000000000..2c6b8d137
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLock.java
@@ -0,0 +1,47 @@
+package org.telegramkr.passcodelock.core;
+
+import java.util.HashSet;
+
+public abstract class AppLock {
+	public static final int ENABLE_PASSLOCK = 0;
+	public static final int DISABLE_PASSLOCK = 1;
+	public static final int CHANGE_PASSWORD = 2;
+	public static final int UNLOCK_PASSWORD = 3;
+
+	public static final String MESSAGE = "message";
+	public static final String TYPE = "type";
+
+	public static final int DEFAULT_TIMEOUT = 0; // 2000ms
+
+	protected int lockTimeOut;
+	protected HashSet<String> ignoredActivities;
+
+	public void setTimeout(int timeout) {
+		this.lockTimeOut = timeout;
+	}
+
+	public AppLock() {
+		ignoredActivities = new HashSet<String>();
+		lockTimeOut = DEFAULT_TIMEOUT;
+	}
+
+	public void addIgnoredActivity(Class<?> clazz) {
+		String clazzName = clazz.getName();
+		this.ignoredActivities.add(clazzName);
+	}
+
+	public void removeIgnoredActivity(Class<?> clazz) {
+		String clazzName = clazz.getName();
+		this.ignoredActivities.remove(clazzName);
+	}
+
+	public abstract void enable();
+
+	public abstract void disable();
+
+	public abstract boolean setPasscode(String passcode);
+
+	public abstract boolean checkPasscode(String passcode);
+
+	public abstract boolean isPasscodeSet();
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockActivity.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockActivity.java
new file mode 100644
index 000000000..bb65a71de
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockActivity.java
@@ -0,0 +1,355 @@
+package org.telegramkr.passcodelock.core;
+
+import me.dawson.applock.R;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.Spanned;
+import android.text.method.PasswordTransformationMethod;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnTouchListener;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+public class AppLockActivity extends BaseActivity {
+	public static final String TAG = "AppLockActivity";
+
+	private int type = -1;
+	private String oldPasscode = null;
+
+	protected EditText codeField1 = null;
+	protected EditText codeField2 = null;
+	protected EditText codeField3 = null;
+	protected EditText codeField4 = null;
+	protected InputFilter[] filters = null;
+	protected TextView tvMessage = null;
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+		setContentView(R.layout.page_passcode);
+
+		tvMessage = (TextView) findViewById(R.id.tv_message);
+
+		Bundle extras = getIntent().getExtras();
+		if (extras != null) {
+			String message = extras.getString(AppLock.MESSAGE);
+			if (message != null) {
+				tvMessage.setText(message);
+			}
+
+			type = extras.getInt(AppLock.TYPE, -1);
+		}
+
+		filters = new InputFilter[2];
+		filters[0] = new InputFilter.LengthFilter(1);
+		filters[1] = numberFilter;
+
+		codeField1 = (EditText) findViewById(R.id.passcode_1);
+		setupEditText(codeField1);
+
+		codeField2 = (EditText) findViewById(R.id.passcode_2);
+		setupEditText(codeField2);
+
+		codeField3 = (EditText) findViewById(R.id.passcode_3);
+		setupEditText(codeField3);
+
+		codeField4 = (EditText) findViewById(R.id.passcode_4);
+		setupEditText(codeField4);
+
+		// setup the keyboard
+		((Button) findViewById(R.id.button0)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button1)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button2)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button3)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button4)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button5)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button6)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button7)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button8)).setOnClickListener(btnListener);
+		((Button) findViewById(R.id.button9)).setOnClickListener(btnListener);
+
+		((Button) findViewById(R.id.button_clear))
+				.setOnClickListener(new OnClickListener() {
+					@Override
+					public void onClick(View view) {
+						clearFields();
+					}
+				});
+
+		((Button) findViewById(R.id.button_erase))
+				.setOnClickListener(new OnClickListener() {
+					@Override
+					public void onClick(View view) {
+						onDeleteKey();
+					}
+				});
+
+		overridePendingTransition(R.anim.slide_up, R.anim.nothing);
+
+		switch (type) {
+
+		case AppLock.DISABLE_PASSLOCK:
+			this.setTitle("Disable Passcode");
+			break;
+		case AppLock.ENABLE_PASSLOCK:
+			this.setTitle("Enable Passcode");
+			break;
+		case AppLock.CHANGE_PASSWORD:
+			this.setTitle("Change Passcode");
+			break;
+		case AppLock.UNLOCK_PASSWORD:
+			this.setTitle("Unlock Passcode");
+			break;
+		}
+	}
+
+	public int getType() {
+		return type;
+	}
+
+	protected void onPasscodeInputed() {
+		String passLock = codeField1.getText().toString()
+				+ codeField2.getText().toString()
+				+ codeField3.getText().toString() + codeField4.getText();
+
+		codeField1.setText("");
+		codeField2.setText("");
+		codeField3.setText("");
+		codeField4.setText("");
+		codeField1.requestFocus();
+
+		switch (type) {
+
+		case AppLock.DISABLE_PASSLOCK:
+			if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
+				setResult(RESULT_OK);
+				LockManager.getInstance().getAppLock().setPasscode(null);
+				finish();
+			} else {
+				onPasscodeError();
+			}
+			break;
+
+		case AppLock.ENABLE_PASSLOCK:
+			if (oldPasscode == null) {
+				tvMessage.setText(R.string.reenter_passcode);
+				oldPasscode = passLock;
+			} else {
+				if (passLock.equals(oldPasscode)) {
+					setResult(RESULT_OK);
+					LockManager.getInstance().getAppLock()
+							.setPasscode(passLock);
+					finish();
+				} else {
+					oldPasscode = null;
+					tvMessage.setText(R.string.enter_passcode);
+					onPasscodeError();
+				}
+			}
+			break;
+
+		case AppLock.CHANGE_PASSWORD:
+			if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
+				tvMessage.setText(R.string.enter_passcode);
+				type = AppLock.ENABLE_PASSLOCK;
+			} else {
+				onPasscodeError();
+			}
+			break;
+
+		case AppLock.UNLOCK_PASSWORD:
+			if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
+				setResult(RESULT_OK);
+				finish();
+			} else {
+				onPasscodeError();
+			}
+			break;
+
+		default:
+			break;
+		}
+	}
+
+	@Override
+	public void onBackPressed() {
+		if (type == AppLock.UNLOCK_PASSWORD) {
+			// back to home screen
+			Intent intent = new Intent();
+			intent.setAction(Intent.ACTION_MAIN);
+			intent.addCategory(Intent.CATEGORY_HOME);
+			this.startActivity(intent);
+			finish();
+		} else {
+			finish();
+		}
+	}
+
+	protected void setupEditText(EditText editText) {
+		editText.setInputType(InputType.TYPE_NULL);
+		editText.setFilters(filters);
+		editText.setOnTouchListener(touchListener);
+		editText.setTransformationMethod(PasswordTransformationMethod
+				.getInstance());
+	}
+
+	public boolean onKeyDown(int keyCode, KeyEvent event) {
+		if (keyCode == KeyEvent.KEYCODE_DEL) {
+			onDeleteKey();
+			return true;
+		}
+		return super.onKeyDown(keyCode, event);
+	}
+
+	private void onDeleteKey() {
+		if (codeField1.isFocused()) {
+
+		} else if (codeField2.isFocused()) {
+			codeField1.requestFocus();
+			codeField1.setText("");
+		} else if (codeField3.isFocused()) {
+			codeField2.requestFocus();
+			codeField2.setText("");
+		} else if (codeField4.isFocused()) {
+			codeField3.requestFocus();
+			codeField3.setText("");
+		}
+	}
+
+	private OnClickListener btnListener = new OnClickListener() {
+		@Override
+		public void onClick(View view) {
+			int currentValue = -1;
+			int id = view.getId();
+			if (id == R.id.button0) {
+				currentValue = 0;
+			} else if (id == R.id.button1) {
+				currentValue = 1;
+			} else if (id == R.id.button2) {
+				currentValue = 2;
+			} else if (id == R.id.button3) {
+				currentValue = 3;
+			} else if (id == R.id.button4) {
+				currentValue = 4;
+			} else if (id == R.id.button5) {
+				currentValue = 5;
+			} else if (id == R.id.button6) {
+				currentValue = 6;
+			} else if (id == R.id.button7) {
+				currentValue = 7;
+			} else if (id == R.id.button8) {
+				currentValue = 8;
+			} else if (id == R.id.button9) {
+				currentValue = 9;
+			} else {
+			}
+
+			// set the value and move the focus
+			String currentValueString = String.valueOf(currentValue);
+			if (codeField1.isFocused()) {
+				codeField1.setText(currentValueString);
+				codeField2.requestFocus();
+				codeField2.setText("");
+			} else if (codeField2.isFocused()) {
+				codeField2.setText(currentValueString);
+				codeField3.requestFocus();
+				codeField3.setText("");
+			} else if (codeField3.isFocused()) {
+				codeField3.setText(currentValueString);
+				codeField4.requestFocus();
+				codeField4.setText("");
+			} else if (codeField4.isFocused()) {
+				codeField4.setText(currentValueString);
+			}
+
+			if (codeField4.getText().toString().length() > 0
+					&& codeField3.getText().toString().length() > 0
+					&& codeField2.getText().toString().length() > 0
+					&& codeField1.getText().toString().length() > 0) {
+				onPasscodeInputed();
+			}
+		}
+	};
+
+	protected void onPasscodeError() {
+		Toast toast = Toast.makeText(this, getString(R.string.passcode_wrong),
+				Toast.LENGTH_SHORT);
+		toast.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 30);
+		toast.show();
+
+		Thread thread = new Thread() {
+			public void run() {
+				Animation animation = AnimationUtils.loadAnimation(
+						AppLockActivity.this, R.anim.shake);
+				findViewById(R.id.ll_applock).startAnimation(animation);
+				codeField1.setText("");
+				codeField2.setText("");
+				codeField3.setText("");
+				codeField4.setText("");
+				codeField1.requestFocus();
+			}
+		};
+		runOnUiThread(thread);
+	}
+
+	private InputFilter numberFilter = new InputFilter() {
+		@Override
+		public CharSequence filter(CharSequence source, int start, int end,
+				Spanned dest, int dstart, int dend) {
+
+			if (source.length() > 1) {
+				return "";
+			}
+
+			if (source.length() == 0) // erase
+			{
+				return null;
+			}
+
+			try {
+				int number = Integer.parseInt(source.toString());
+				if ((number >= 0) && (number <= 9))
+					return String.valueOf(number);
+				else
+					return "";
+			} catch (NumberFormatException e) {
+				return "";
+			}
+		}
+	};
+
+	private OnTouchListener touchListener = new OnTouchListener() {
+		@Override
+		public boolean onTouch(View v, MotionEvent event) {
+			v.performClick();
+			clearFields();
+			return false;
+		}
+	};
+
+	private void clearFields() {
+		codeField1.setText("");
+		codeField2.setText("");
+		codeField3.setText("");
+		codeField4.setText("");
+
+		codeField1.postDelayed(new Runnable() {
+
+			@Override
+			public void run() {
+				codeField1.requestFocus();
+			}
+		}, 200);
+	}
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockImpl.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockImpl.java
new file mode 100644
index 000000000..2405ccd81
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockImpl.java
@@ -0,0 +1,215 @@
+package org.telegramkr.passcodelock.core;
+
+import android.app.Activity;
+import android.app.Application;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+public class AppLockImpl extends AppLock implements PageListener {
+	public static final String TAG = "DefaultAppLock";
+
+	private static final String PASSWORD_PREFERENCE_KEY = "passcode";
+	private static final String PASSWORD_SALT = "7xn7@c$";
+
+	private SharedPreferences settings;
+
+	private int liveCount;
+	private int visibleCount;
+
+	private long lastActive;
+
+	public AppLockImpl(Application app) {
+		super();
+		SharedPreferences settings = PreferenceManager
+				.getDefaultSharedPreferences(app);
+		this.settings = settings;
+		this.liveCount = 0;
+		this.visibleCount = 0;
+	}
+
+	public void enable() {
+		BaseActivity.setListener(this);
+	}
+
+	public void disable() {
+		BaseActivity.setListener(null);
+	}
+
+	public boolean checkPasscode(String passcode) {
+		passcode = PASSWORD_SALT + passcode + PASSWORD_SALT;
+		passcode = Encryptor.getSHA1(passcode);
+		String storedPasscode = "";
+
+		if (settings.contains(PASSWORD_PREFERENCE_KEY)) {
+			storedPasscode = settings.getString(PASSWORD_PREFERENCE_KEY, "");
+		}
+
+		if (passcode.equalsIgnoreCase(storedPasscode)) {
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setPasscode(String passcode) {
+		SharedPreferences.Editor editor = settings.edit();
+
+		if (passcode == null) {
+			editor.remove(PASSWORD_PREFERENCE_KEY);
+			editor.commit();
+			this.disable();
+		} else {
+			passcode = PASSWORD_SALT + passcode + PASSWORD_SALT;
+			passcode = Encryptor.getSHA1(passcode);
+			editor.putString(PASSWORD_PREFERENCE_KEY, passcode);
+			editor.commit();
+			this.enable();
+		}
+
+		return true;
+	}
+
+	// Check if we need to show the lock screen at startup
+	public boolean isPasscodeSet() {
+		if (settings.contains(PASSWORD_PREFERENCE_KEY)) {
+			return true;
+		}
+
+		return false;
+	}
+
+	private boolean isIgnoredActivity(Activity activity) {
+		String clazzName = activity.getClass().getName();
+
+		// ignored activities
+		if (ignoredActivities.contains(clazzName)) {
+			Log.d(TAG, "ignore activity " + clazzName);
+			return true;
+		}
+
+		return false;
+	}
+
+	private boolean shouldLockSceen(Activity activity) {
+
+		// already unlock
+		if (activity instanceof AppLockActivity) {
+			AppLockActivity ala = (AppLockActivity) activity;
+			if (ala.getType() == AppLock.UNLOCK_PASSWORD) {
+				Log.d(TAG, "already unlock activity");
+				return false;
+			}
+		}
+
+		// no pass code set
+		if (!isPasscodeSet()) {
+			Log.d(TAG, "lock passcode not set.");
+			return false;
+		}
+
+		// no enough timeout
+		long passedTime = System.currentTimeMillis() - lastActive;
+		if (lastActive > 0 && passedTime <= lockTimeOut) {
+			Log.d(TAG, "no enough timeout " + passedTime + " for "
+					+ lockTimeOut);
+			return false;
+		}
+
+		// start more than one page
+		if (visibleCount > 1) {
+			return false;
+		}
+
+		return true;
+	}
+
+	@Override
+	public void onActivityPaused(Activity activity) {
+		String clazzName = activity.getClass().getName();
+		Log.d(TAG, "onActivityPaused " + clazzName);
+
+		if (isIgnoredActivity(activity)) {
+			return;
+		}
+	}
+
+	@Override
+	public void onActivityResumed(Activity activity) {
+		String clazzName = activity.getClass().getName();
+		Log.d(TAG, "onActivityResumed " + clazzName);
+
+		if (isIgnoredActivity(activity)) {
+			return;
+		}
+
+		if (shouldLockSceen(activity)) {
+			Intent intent = new Intent(activity.getApplicationContext(),
+					AppLockActivity.class);
+			intent.putExtra(AppLock.TYPE, AppLock.UNLOCK_PASSWORD);
+			intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+			activity.getApplication().startActivity(intent);
+		}
+
+		lastActive = 0;
+	}
+
+	@Override
+	public void onActivityCreated(Activity activity) {
+
+		if (isIgnoredActivity(activity)) {
+			return;
+		}
+
+		liveCount++;
+	}
+
+	@Override
+	public void onActivityDestroyed(Activity activity) {
+		if (isIgnoredActivity(activity)) {
+			return;
+		}
+
+		liveCount--;
+		if (liveCount == 0) {
+			lastActive = System.currentTimeMillis();
+			Log.d(TAG, "set last active " + lastActive);
+		}
+	}
+
+	@Override
+	public void onActivitySaveInstanceState(Activity activity) {
+		if (isIgnoredActivity(activity)) {
+			return;
+		}
+	}
+
+	@Override
+	public void onActivityStarted(Activity activity) {
+		String clazzName = activity.getClass().getName();
+		Log.d(TAG, "onActivityStarted " + clazzName);
+
+		if (isIgnoredActivity(activity)) {
+			return;
+		}
+
+		visibleCount++;
+	}
+
+	@Override
+	public void onActivityStopped(Activity activity) {
+		String clazzName = activity.getClass().getName();
+		Log.d(TAG, "onActivityStopped " + clazzName);
+
+		if (isIgnoredActivity(activity)) {
+			return;
+		}
+
+		visibleCount--;
+		if (visibleCount == 0) {
+			lastActive = System.currentTimeMillis();
+			Log.d(TAG, "set last active " + lastActive);
+		}
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/BaseActivity.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/BaseActivity.java
new file mode 100644
index 000000000..f4d5aa253
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/BaseActivity.java
@@ -0,0 +1,76 @@
+package org.telegramkr.passcodelock.core;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class BaseActivity extends Activity {
+
+	private static PageListener pageListener;
+
+	public static void setListener(PageListener listener) {
+		pageListener = listener;
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+
+		if (pageListener != null) {
+			pageListener.onActivityCreated(this);
+		}
+	}
+
+	@Override
+	protected void onStart() {
+		super.onStart();
+
+		if (pageListener != null) {
+			pageListener.onActivityStarted(this);
+		}
+	}
+
+	@Override
+	protected void onResume() {
+		super.onResume();
+
+		if (pageListener != null) {
+			pageListener.onActivityResumed(this);
+		}
+	}
+
+	@Override
+	protected void onPause() {
+		super.onPause();
+
+		if (pageListener != null) {
+			pageListener.onActivityPaused(this);
+		}
+	}
+
+	@Override
+	protected void onStop() {
+		super.onStop();
+
+		if (pageListener != null) {
+			pageListener.onActivityStopped(this);
+		}
+	}
+
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+
+		if (pageListener != null) {
+			pageListener.onActivityDestroyed(this);
+		}
+	}
+
+	@Override
+	protected void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+
+		if (pageListener != null) {
+			pageListener.onActivitySaveInstanceState(this);
+		}
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/Encryptor.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/Encryptor.java
new file mode 100644
index 000000000..f0e8b0d5a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/Encryptor.java
@@ -0,0 +1,40 @@
+package org.telegramkr.passcodelock.core;
+
+import java.security.MessageDigest;
+import java.util.Locale;
+
+import android.text.TextUtils;
+
+public class Encryptor {
+
+	private static String bytes2Hex(byte[] bytes) {
+		String hs = "";
+		String stmp = "";
+		for (int n = 0; n < bytes.length; n++) {
+			stmp = (Integer.toHexString(bytes[n] & 0XFF));
+			if (stmp.length() == 1) {
+				hs += "0" + stmp;
+			} else {
+				hs += stmp;
+			}
+		}
+		return hs.toLowerCase(Locale.ENGLISH);
+	}
+
+	public static String getSHA1(String text) {
+		String sha1 = null;
+		if (TextUtils.isEmpty(text)) {
+			return sha1;
+		}
+		MessageDigest sha1Digest = null;
+		try {
+			sha1Digest = MessageDigest.getInstance("SHA-1");
+		} catch (Exception e) {
+			return sha1;
+		}
+		byte[] textBytes = text.getBytes();
+		sha1Digest.update(textBytes, 0, text.length());
+		byte[] sha1hash = sha1Digest.digest();
+		return bytes2Hex(sha1hash);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/LockManager.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/LockManager.java
new file mode 100644
index 000000000..1ab6953e2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/LockManager.java
@@ -0,0 +1,44 @@
+package org.telegramkr.passcodelock.core;
+
+import android.app.Application;
+
+public class LockManager {
+
+	private volatile static LockManager instance;
+	private AppLock curAppLocker;
+
+	public static LockManager getInstance() {
+		synchronized (LockManager.class) {
+			if (instance == null) {
+				instance = new LockManager();
+			}
+		}
+		return instance;
+	}
+
+	public void enableAppLock(Application app) {
+		if (curAppLocker == null) {
+			curAppLocker = new AppLockImpl(app);
+		}
+		curAppLocker.enable();
+	}
+
+	public boolean isAppLockEnabled() {
+		if (curAppLocker == null) {
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void setAppLock(AppLock appLocker) {
+		if (curAppLocker != null) {
+			curAppLocker.disable();
+		}
+		curAppLocker = appLocker;
+	}
+
+	public AppLock getAppLock() {
+		return curAppLocker;
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PageListener.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PageListener.java
new file mode 100644
index 000000000..8bcbfec63
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PageListener.java
@@ -0,0 +1,20 @@
+package org.telegramkr.passcodelock.core;
+
+import android.app.Activity;
+
+public interface PageListener {
+
+	void onActivityCreated(Activity activity);
+
+	void onActivityStarted(Activity activity);
+
+	void onActivityResumed(Activity activity);
+
+	void onActivityPaused(Activity activity);
+
+	void onActivityStopped(Activity activity);
+
+	void onActivitySaveInstanceState(Activity activity);
+
+	void onActivityDestroyed(Activity activity);
+}
diff --git a/TMessagesProj/src/main/res/anim/cycle5.xml b/TMessagesProj/src/main/res/anim/cycle5.xml
new file mode 100644
index 000000000..8d5a65892
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/cycle5.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<cycleInterpolator xmlns:android="http://schemas.android.com/apk/res/android"
+    android:cycles="5" />
diff --git a/TMessagesProj/src/main/res/anim/nothing.xml b/TMessagesProj/src/main/res/anim/nothing.xml
new file mode 100644
index 000000000..4c8f1d992
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/nothing.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="300"
+    android:fromXDelta="0"
+    android:toXDelta="0" />
diff --git a/TMessagesProj/src/main/res/anim/slide_down.xml b/TMessagesProj/src/main/res/anim/passcode_slide_down.xml
similarity index 100%
rename from TMessagesProj/src/main/res/anim/slide_down.xml
rename to TMessagesProj/src/main/res/anim/passcode_slide_down.xml
diff --git a/TMessagesProj/src/main/res/anim/passcode_slide_up.xml b/TMessagesProj/src/main/res/anim/passcode_slide_up.xml
new file mode 100644
index 000000000..46231cf44
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/passcode_slide_up.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="300"
+    android:fromYDelta="100%p"
+    android:interpolator="@android:anim/accelerate_decelerate_interpolator"
+    android:toYDelta="0" />
+
+    -<set xmlns:android="http://schemas.android.com/apk/res/android">
+-    <translate
+-        android:fromYDelta="0%"
+-        android:toYDelta="-100%"
+-        android:duration="200"/>
+-</set>
diff --git a/TMessagesProj/src/main/res/anim/shake.xml b/TMessagesProj/src/main/res/anim/shake.xml
new file mode 100644
index 000000000..e49679ff6
--- /dev/null
+++ b/TMessagesProj/src/main/res/anim/shake.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="1000"
+    android:fromXDelta="0"
+    android:interpolator="@anim/cycle5"
+    android:toXDelta="10" />
diff --git a/TMessagesProj/src/main/res/drawable/passcode_button_background.xml b/TMessagesProj/src/main/res/drawable/passcode_button_background.xml
new file mode 100644
index 000000000..a6798739f
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/passcode_button_background.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/button_pressed" android:state_pressed="true"/>
+    <item android:drawable="@drawable/button_pressed" android:state_focused="true"/>
+    <item android:drawable="@drawable/button_normal"/>
+
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/passcode_button_normal.xml b/TMessagesProj/src/main/res/drawable/passcode_button_normal.xml
new file mode 100644
index 000000000..2b9093bbd
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/passcode_button_normal.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <stroke
+        android:width="1dip"
+        android:color="@color/gray" />
+
+    <solid android:color="@color/light_gray" />
+
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/passcode_button_pressed.xml b/TMessagesProj/src/main/res/drawable/passcode_button_pressed.xml
new file mode 100644
index 000000000..01bbf9014
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/passcode_button_pressed.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <stroke
+        android:width="1dip"
+        android:color="@color/light_blue" />
+
+    <solid android:color="@color/light_blue" />
+
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/passcode_edittext_background.xml b/TMessagesProj/src/main/res/drawable/passcode_edittext_background.xml
new file mode 100644
index 000000000..4b208b19e
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/passcode_edittext_background.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:drawable="@drawable/edittext_pressed" android:state_pressed="true"/>
+    <item android:drawable="@drawable/edittext_pressed" android:state_focused="true"/>
+    <item android:drawable="@drawable/edittext_normal"/>
+
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/passcode_edittext_cursor.xml b/TMessagesProj/src/main/res/drawable/passcode_edittext_cursor.xml
new file mode 100644
index 000000000..95951dcd4
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/passcode_edittext_cursor.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#80000000" />
+
+    <size android:width="1dp" />
+
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/passcode_edittext_normal.xml b/TMessagesProj/src/main/res/drawable/passcode_edittext_normal.xml
new file mode 100644
index 000000000..aeacca8df
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/passcode_edittext_normal.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40DDDDDD" />
+
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/passcode_edittext_pressed.xml b/TMessagesProj/src/main/res/drawable/passcode_edittext_pressed.xml
new file mode 100644
index 000000000..b9086f47d
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/passcode_edittext_pressed.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40DDDDDD" />
+
+    <stroke
+        android:width="2dip"
+        android:color="#FFDDDDDD" />
+
+</shape>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/passcode_home.xml b/TMessagesProj/src/main/res/layout/passcode_home.xml
new file mode 100644
index 000000000..a9031c6cd
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/passcode_home.xml
@@ -0,0 +1,19 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/rl_root"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".HomePage" >
+
+    <Button
+        android:id="@+id/bt_on_off"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" />
+
+    <Button
+        android:id="@+id/bt_change"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/bt_on_off" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/passcode_page.xml b/TMessagesProj/src/main/res/layout/passcode_page.xml
new file mode 100644
index 000000000..adc2b7741
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/passcode_page.xml
@@ -0,0 +1,143 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:layout_gravity="center"
+    android:background="#FFFFFF" >
+
+    <LinearLayout
+        android:id="@+id/ll_applock"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:gravity="center"
+        android:orientation="vertical"
+        android:paddingLeft="16dp"
+        android:paddingRight="16dp" >
+
+        <TextView
+            android:id="@+id/tv_message"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:paddingBottom="16dp"
+            android:paddingTop="16dp"
+            android:singleLine="true"
+            android:textColor="#FF464646"
+            android:textSize="18sp" />
+
+        <LinearLayout
+            android:id="@+id/ll_passcodes"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal" >
+
+            <EditText
+                android:id="@+id/passcode_1"
+                style="@style/PasscodeInputIStyle" >
+
+                <requestFocus />
+            </EditText>
+
+            <EditText
+                android:id="@+id/passcode_2"
+                style="@style/PasscodeInputIStyle" >
+            </EditText>
+
+            <EditText
+                android:id="@+id/passcode_3"
+                style="@style/PasscodeInputIStyle" >
+            </EditText>
+
+            <EditText
+                android:id="@+id/passcode_4"
+                style="@style/PasscodeInputIStyle" >
+            </EditText>
+        </LinearLayout>
+
+        <TableLayout
+            android:id="@+id/tl_keys"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:paddingTop="30dp"
+            android:shrinkColumns="*"
+            android:stretchColumns="*" >
+
+            <TableRow>
+
+                <Button
+                    android:id="@+id/button1"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="1" />
+
+                <Button
+                    android:id="@+id/button2"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="2" />
+
+                <Button
+                    android:id="@+id/button3"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="3" />
+            </TableRow>
+
+            <TableRow>
+
+                <Button
+                    android:id="@+id/button4"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="4" />
+
+                <Button
+                    android:id="@+id/button5"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="5" />
+
+                <Button
+                    android:id="@+id/button6"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="6" />
+            </TableRow>
+
+            <TableRow>
+
+                <Button
+                    android:id="@+id/button7"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="7" />
+
+                <Button
+                    android:id="@+id/button8"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="8" />
+
+                <Button
+                    android:id="@+id/button9"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="9" />
+            </TableRow>
+
+            <TableRow>
+
+                <Button
+                    android:id="@+id/button_clear"
+                    style="@style/PasscodeButtonStyle"
+                    android:clickable="false"
+                    android:focusable="false"
+                    android:focusableInTouchMode="false"
+                    android:text="Clear" />
+
+                <Button
+                    android:id="@+id/button0"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="0" />
+
+                <Button
+                    android:id="@+id/button_erase"
+                    style="@style/PasscodeButtonStyle"
+                    android:text="Del" />
+            </TableRow>
+        </TableLayout>
+    </LinearLayout>
+
+</ScrollView>
\ No newline at end of file
