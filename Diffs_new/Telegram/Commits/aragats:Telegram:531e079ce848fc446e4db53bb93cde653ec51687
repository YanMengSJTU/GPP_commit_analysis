diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 7bad73671..fa24d7b96 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -35,7 +35,7 @@
     public static final int offlinePostsLoaded = totalEvents++;
 
     public static final int savePostError = totalEvents++;
-    public static final int loadPostsError = totalEvents++;
+//    public static final int loadPostsError = totalEvents++;
 
     public static final int didReceivedNewPosts = totalEvents++; //TODO
     public static final int updateInterfaces = totalEvents++; //TODO
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 389defd05..2630b8758 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -25,13 +25,14 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 import retrofit2.Call;
 import retrofit2.Callback;
 import retrofit2.Response;
-import retrofit2.Retrofit;
 import ru.aragats.wgo.ApplicationLoader;
 import ru.aragats.wgo.comparator.PostDateComparator;
 import ru.aragats.wgo.comparator.PostDistanceComparator;
@@ -84,6 +85,15 @@
     public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
 
 
+    /**
+     * The set of all call currently being processed by this PostController. A Call
+     * will be in this set if it is waiting in any queue or currently being processed by
+     * any dispatcher.
+     */
+    //TODO think about making CallQueue like it is in RequestQueue.
+    private final Set<Call<?>> currentCalls = new HashSet<Call<?>>();
+
+
     private static volatile PostsController Instance = null;
 
     public static PostsController getInstance() {
@@ -112,6 +122,28 @@ public PostsController() {
 
     }
 
+    private void addCall(Call<?> call) {
+        currentCalls.add(call);
+    }
+
+    //finish call
+    private void removeCall(Call<?> call) {
+        currentCalls.remove(call);
+    }
+
+    public void cancelAllCalls() {
+        for (Call<?> call : currentCalls) {
+            call.cancel();
+        }
+        loadingPosts = false;
+    }
+
+    private void cancelCall(Call<?> call) {
+        boolean result = currentCalls.remove(call);
+        if (result) {
+            call.cancel();
+        }
+    }
 
     public void updateConfig() {
 
@@ -301,30 +333,39 @@ private void loadLocalPosts(final PostRequest postRequest, final boolean reload)
 
     private void loadPostFromServer(final PostRequest postRequest, final boolean reload) {
         nextOffset = 0;
-        RestManager.getInstance().findNearPosts(postRequest, new Callback<PostResponse>() {
+        final Call<PostResponse> call = RestManager.getInstance().findNearPosts(postRequest, new Callback<PostResponse>() {
             @Override
             public void onResponse(Call<PostResponse> call, Response<PostResponse> response) {
+                removeCall(call);
                 //        after getting response.
                 processLoadedPosts(response.body(), reload);
+
             }
 
             @Override
             public void onFailure(Call<PostResponse> call, Throwable t) {
+                removeCall(call);
 //                loadingPosts = false; // TODO false or true ??? if continue then true otherwise false. False if finish. true if goes to VK
-//                NotificationCenter.getInstance().postNotificationName(NotificationCenter.loadPostsError);
+//                boolean withError = true;
+//                if (t != null && t.getMessage().equals("Cancelled")) {
+//                    withError = false;
+//                }
+//                NotificationCenter.getInstance().postNotificationName(NotificationCenter.postRequestFinished, withError);
 
                 loadVKPhotos(postRequest, reload);
             }
 
         });
+        addCall(call);
     }
 
 
     private void loadVKPhotos(final PostRequest postRequest, final boolean reload) {
         loadingPosts = true;
-        RestManager.getInstance().findNearVKPhotos(postRequest, new Callback<VKPhotoResponse>() {
+        final Call<VKPhotoResponse> call = RestManager.getInstance().findNearVKPhotos(postRequest, new Callback<VKPhotoResponse>() {
             @Override
             public void onResponse(Call<VKPhotoResponse> call, Response<VKPhotoResponse> response) {
+                removeCall(call);
                 //        after getting response.
                 PostResponse postResponse = new PostResponse();
                 postResponse.setPosts(vkPhotoResponseConverter.convert(response.body() != null ?
@@ -340,10 +381,20 @@ public void onResponse(Call<VKPhotoResponse> call, Response<VKPhotoResponse> res
 
             @Override
             public void onFailure(Call<VKPhotoResponse> call, Throwable t) {
+                removeCall(call);
                 loadingPosts = false;
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.loadPostsError);
+                boolean withError = true;
+                if (t != null && t.getMessage().equals("Canceled")) {
+                    withError = false;
+                }
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.postRequestFinished, withError);
             }
         });
+        addCall(call);
+
+
+        // it works and it forces onFailure java.io.IOException: Canceled
+//        call.cancel(); //
     }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
index 3106890ca..5b2bad75e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -66,6 +66,9 @@ public int getItemCount() {
 //        if (!PostsController.getInstance().dialogsEndReached) {
 //            count++;
 //        }
+        if (count != 0) {
+            count++; // loading cell
+        }
         currentCount = count;
         return count;
     }
@@ -166,9 +169,10 @@ public boolean canPerformActions() {
         }
     }
 
+    //TODO loading here to work.
     @Override
     public int getItemViewType(int i) {
-        if (i == PostsController.getInstance().getPosts().size()) {
+        if (i != 0 && i == PostsController.getInstance().getPosts().size()) {
             return 1; //LoadingCell
         }
         return 0; //PostCell
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 7463367db..4dca86e7f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -255,7 +255,6 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.locationServiceDisabled);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postsNeedReload);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.loadPostsError);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         }
@@ -289,7 +288,6 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.locationServiceDisabled);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postsNeedReload);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.loadPostsError);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         }
@@ -821,10 +819,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 showDialog(builder.create());
             }
         } else if (id == NotificationCenter.postRequestFinished) {
-            //TODO duplicate NotificationCenter.loadPostsError
+            boolean withError = false;
+            if (args != null && args.length != 0) {
+                withError = (boolean) args[0];
+            }
             notifyDateSetChanged();
-            updateViewLayers(false);
+            updateViewLayers(withError);
             stopRefreshingProgressView();
+            if(withError) {
+                Toast.makeText(((Context) getParentActivity()), "Load posts error", Toast.LENGTH_SHORT).show();
+            }
         } else if (id == NotificationCenter.postsNeedReload) {
 //            hideProgressView();
             boolean scrollToTop = false;
@@ -838,12 +842,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
             notifyDateSetChanged();
             updateViewLayers(false);
             stopRefreshingProgressView();
-        } else if (id == NotificationCenter.loadPostsError) {
-            //TODO duplicate  NNotificationCenter.postRequestFinished
-            notifyDateSetChanged();
-            updateViewLayers(true);
-            stopRefreshingProgressView();
-            Toast.makeText(((Context) getParentActivity()), "Load posts Error", Toast.LENGTH_SHORT).show();
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (postListView != null) {
                 updateVisibleRows(0);
@@ -870,6 +868,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         postListView.setVisibility(View.INVISIBLE);
                     }
                 }
+                PostsController.getInstance().cancelAllCalls();
                 PostsController.getInstance().getPosts().clear();
                 MediaController.loadGeoTaggedGalleryPhotos(0, false);
             }
@@ -888,6 +887,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
             this.offlineMode = false;
 //            layoutManager.scrollToPosition(0);
+            PostsController.getInstance().cancelAllCalls();
             PostsController.getInstance().getPosts().clear();
             refreshPosts(force);
         }
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
index b83b27a81..66f93b85f 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
@@ -46,8 +46,11 @@ private RestManager() {
     }
 
 
-    public void findNearPosts(PostRequest request, Callback<PostResponse> callback) {
-        findNearPostsCall(request).enqueue(callback);
+    // TODO tem try it.
+    public Call<PostResponse> findNearPosts(PostRequest request, Callback<PostResponse> callback) {
+        Call<PostResponse> call = findNearPostsCall(request);
+        call.enqueue(callback);
+        return call;
     }
 
     private Call<PostResponse> findNearPostsCall(PostRequest request) {
@@ -56,8 +59,10 @@ public void findNearPosts(PostRequest request, Callback<PostResponse> callback)
     }
 
 
-    public void uploadImage(FileUploadRequest request, Callback<List<Image>> callback) {
-        uploadImage(request).enqueue(callback);
+    public Call<List<Image>> uploadImage(FileUploadRequest request, Callback<List<Image>> callback) {
+        Call<List<Image>> call = uploadImage(request);
+        call.enqueue(callback);
+        return call;
     }
 
     private Call<List<Image>> uploadImage(FileUploadRequest request) {
@@ -88,8 +93,10 @@ public void uploadImage(FileUploadRequest request, Callback<List<Image>> callbac
 
 
     // findPostsAtVenue
-    public void findPostsAtVenue(VenuePostsRequest request, Callback<PostResponse> callback) {
-        findPostsAtVenueCall(request).enqueue(callback);
+    public Call<PostResponse> findPostsAtVenue(VenuePostsRequest request, Callback<PostResponse> callback) {
+        Call<PostResponse> call = findPostsAtVenueCall(request);
+        call.enqueue(callback);
+        return call;
     }
 
     private Call<PostResponse> findPostsAtVenueCall(VenuePostsRequest request) {
@@ -97,8 +104,10 @@ public void findPostsAtVenue(VenuePostsRequest request, Callback<PostResponse> c
     }
 
     // savePost
-    public void savePost(Post post, Callback<String> callback) {
-        savePostCall(post).enqueue(callback);
+    public Call<String> savePost(Post post, Callback<String> callback) {
+        Call<String> call = savePostCall(post);
+        call.enqueue(callback);
+        return call;
     }
 
     private Call<String> savePostCall(Post post) {
@@ -153,8 +162,10 @@ public void addTest(PostRequest request, Callback<PostResponse> callback) {
 //    http://192.168.0.100:8080/api/posts/find/near?lng=13.0116908&lat=52.3898987&distance=1000&count=20.0&offset=sds
 
 
-    public void findNearVKPhotos(PostRequest request, Callback<VKPhotoResponse> callback) {
-        findNearVKPhotos(request).enqueue(callback);
+    public Call<VKPhotoResponse> findNearVKPhotos(PostRequest request, Callback<VKPhotoResponse> callback) {
+        Call<VKPhotoResponse> call = findNearVKPhotos(request);
+        call.enqueue(callback);
+        return call;
     }
 
     private Call<VKPhotoResponse> findNearVKPhotos(PostRequest request) {
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 5b258a3d9..5d6f6cc81 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Nov 27 03:55:06 MSK 2014
+#Sun May 01 12:01:57 CEST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
