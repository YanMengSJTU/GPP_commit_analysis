diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
index e793077cd..d7f9cf9cf 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
@@ -245,9 +245,9 @@ public PGSqlLiteHelper() {
     public <T extends DBBean> void update(T bean, DBObjectMapper<T> mapper) {
         SQLiteDatabase db = getWritableDatabase();
         try {
-            int nrow = db.update(mapper.getTableName(), mapper.toCV(bean),
+            int rowCount = db.update(mapper.getTableName(), mapper.toCV(bean),
                     mapper.getIdFiledName() + "= ?", new String[]{Long.toString(bean.getId())});
-            if (nrow == 0)
+            if (rowCount == 0)
                 throw new PollgramDAOException("Error updating: " + bean);
 
         } finally {
@@ -259,8 +259,9 @@ public PGSqlLiteHelper() {
     public <T extends DBBean> List<T> query(DBObjectMapper<T> mapper, String selection,
                                             String[] selectionArgs) {
         SQLiteDatabase db = getReadableDatabase();
+        Cursor cursor = null;
         try {
-            Cursor cursor = db.query(mapper.getTableName(), null, selection,
+             cursor = db.query(mapper.getTableName(), null, selection,
                     selectionArgs, null, null, null);
             List<T> result = new ArrayList<>();
             cursor.moveToFirst();
@@ -272,6 +273,8 @@ public PGSqlLiteHelper() {
         } finally {
             if (db != null && db.isOpen())
                 db.close();
+            if (cursor != null)
+                cursor.close();
         }
     }
 
@@ -290,9 +293,9 @@ public PGSqlLiteHelper() {
 
     public <T extends DBBean> T findById(long id, DBObjectMapper<T> mapper) {
         SQLiteDatabase db = getReadableDatabase();
-
+        Cursor cursor = null;
         try {
-            Cursor cursor = db.query(mapper.getTableName(), null, mapper.getIdFiledName() + "= ?",
+             cursor = db.query(mapper.getTableName(), null, mapper.getIdFiledName() + "= ?",
                     new String[]{Long.toString(id)}, null, null, null);
             if (!cursor.moveToFirst())
                 return null;
@@ -301,6 +304,8 @@ public PGSqlLiteHelper() {
         } finally {
             if (db != null && db.isOpen())
                 db.close();
+            if (cursor != null)
+                cursor.close();
         }
     }
 
@@ -322,14 +327,16 @@ public void onCreate(SQLiteDatabase db) {
                 T_TextOption.LONG_DESCRIPTION + " TEXT, " +
                 T_TextOption.FK_DECISION + " INTEGER, " +
                 "UNIQUE("+T_TextOption.TITLE +", " + T_TextOption.FK_DECISION +"), "+
-                "FOREIGN KEY(" + T_TextOption.FK_DECISION + ") REFERENCES " + T_Decision.TABLE_NAME + "(" + T_Decision.ID + ") ) ;");
+                "FOREIGN KEY(" + T_TextOption.FK_DECISION + ") REFERENCES " +
+                     T_Decision.TABLE_NAME + "(" + T_Decision.ID + ") ON DELETE CASCADE ) ;");
         db.execSQL("CREATE TABLE " + T_Vote.TABLE_NAME + " (" +
                 T_Vote.ID + " INTEGER PRIMARY KEY," +
                 T_Vote.VOTE + " Boolean," +
                 T_Vote.VOTE_TIME + " TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                 T_Vote.FK_OPTION + " INTEGER, " +
                 T_Vote.USER_ID + " INTEGER, " +
-                "FOREIGN KEY(" + T_Vote.FK_OPTION + ")REFERENCES " + T_TextOption.TABLE_NAME + " (" + T_TextOption.ID + ") ) ;");
+                "FOREIGN KEY(" + T_Vote.FK_OPTION + ")REFERENCES " +
+                    T_TextOption.TABLE_NAME + " (" + T_TextOption.ID + ") ON DELETE CASCADE ) ;");
         Log.i(LOG_TAG, "Db creation completed");
 
     }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
index 0a8c5defa..68c42ddb0 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
@@ -89,6 +89,12 @@
      */
     int getUserVoteCount(Decision decision);
 
+    /**
+     * Delete permanently a decision and all its options and vote
+     * @param decision
+     */
+    void delete(Decision decision);
+
     /**
      * Result for method getWinningOption
      */
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index 000d18d38..817e9df58 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -12,6 +12,7 @@
 import org.pollgram.decision.data.Vote;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -44,7 +45,6 @@ public void putStubData(int chatId, int creatorId) {
         decisions.add(new Decision(chatId, creatorId, "Where do we go ?", "huge bla bla bla", true));
         decisions.add(new Decision(chatId, creatorId, "When will the party be ?", "huge bla bla bla", true));
         decisions.add(new Decision(chatId, creatorId, "Do we add Slomp to the group ?", "huge bla bla bla", false));
-        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_Decision.TABLE_NAME);
         for (Decision d : decisions) {
             Decision newD = save(d);
             Log.i(LOG_TAG, "inserted decision id:" + newD.getId());
@@ -52,16 +52,17 @@ public void putStubData(int chatId, int creatorId) {
         }
 
         Decision decision1 = getDecisions(chatId, null).get(0);
-        List<TextOption> options = new ArrayList<>();
+        List<Option> options = new ArrayList<>();
         options.add(new TextOption("Ski", "They cost 385EUR i saw them at the corner shop", decision1.getId()));
         options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
         options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
         options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
-        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_TextOption.TABLE_NAME);
-        for (TextOption te : options) {
-            Option newOpt = save(te);
-            Log.i(LOG_TAG, "inserted TextOption id:" + newOpt.getId());
-            Option found = getOption(newOpt.getId());
+
+        for (Decision d : getDecisions(chatId, true)) {
+            if (d.equals(decisions.get(0)))
+                PollgramFactory.getPollgramService().notifyNewDecision(d, options);
+            else
+                PollgramFactory.getPollgramService().notifyNewDecision(d, Collections.<Option>emptyList());
         }
         // }
         // Do some test query
@@ -71,12 +72,7 @@ public void putStubData(int chatId, int creatorId) {
         }
 
         Log.i(LOG_TAG, "query getDecisions(true)");
-        for (Decision d : getDecisions(chatId, true)) {
-            List<Option> optionsList = getOptions(d);
-            if (options.size() > 0)
-                PollgramFactory.getPollgramService().notifyNewDecision(d, optionsList);
-            Log.d(LOG_TAG, "found-2: " + d);
-        }
+
         Log.i(LOG_TAG, "query getDecisions(false)");
         for (Decision d : getDecisions(chatId, false)) {
             Log.d(LOG_TAG, "found-3 " + d);
@@ -88,8 +84,9 @@ public void putStubData(int chatId, int creatorId) {
     @Override
     public int getUserVoteCount(Decision decision) {
         SQLiteDatabase db = helper.getReadableDatabase();
+        Cursor c = null;
         try {
-            Cursor c =db.rawQuery("Select count(*) FROM (" +
+            c =db.rawQuery("Select count(*) FROM (" +
                             "SELECT v." + PGSqlLiteHelper.T_Vote.USER_ID + " " +
                             "FROM decision d inner join text_option o " +
                             "on d." + PGSqlLiteHelper.T_Decision.ID + " = o." + PGSqlLiteHelper.T_TextOption.FK_DECISION + " " +
@@ -102,6 +99,31 @@ public int getUserVoteCount(Decision decision) {
             if (!c.moveToFirst())
                 return  0;
             return c.getInt(0);
+        } finally {
+            if (db != null)
+                db.close();
+            if (c != null)
+                c.close();
+        }
+    }
+
+    @Override
+    public void delete(Decision decision) {
+        Log.d(LOG_TAG, "Delete all decision data for decision["+decision+"]");
+        SQLiteDatabase db = helper.getWritableDatabase();
+        String[] decisionIdPar = new String[]{Long.toString(decision.getId())};
+        try {
+            db.delete(PGSqlLiteHelper.T_Vote.TABLE_NAME,
+                    PGSqlLiteHelper.T_Vote.FK_OPTION + " in  ( " +
+                            "select " + PGSqlLiteHelper.T_TextOption.ID + " from " + PGSqlLiteHelper.T_TextOption.TABLE_NAME +
+                            " where " + PGSqlLiteHelper.T_TextOption.FK_DECISION + "= ?)",
+                    decisionIdPar);
+            db.delete(PGSqlLiteHelper.T_TextOption.TABLE_NAME,
+                    PGSqlLiteHelper.T_TextOption.FK_DECISION + " =  ? ",
+                    decisionIdPar);
+            db.delete(PGSqlLiteHelper.T_Decision.TABLE_NAME,
+                    PGSqlLiteHelper.T_Decision.ID + " =  ? ",
+                    decisionIdPar);
         } finally {
             if (db != null)
                 db.close();
@@ -112,8 +134,9 @@ public int getUserVoteCount(Decision decision) {
     public WinningOption getWinningOption(Decision decision) {
         SQLiteDatabase db = helper.getReadableDatabase();
         String voteCountFieldName= "max_vote_count";
+        Cursor c = null;
         try {
-            Cursor c =db.rawQuery("SELECT "+PGSqlLiteHelper.T_TextOption.cloumns(null)+" , max(vote_count) as "+voteCountFieldName+" FROM (" +
+            c =db.rawQuery("SELECT "+PGSqlLiteHelper.T_TextOption.cloumns(null)+" , max(vote_count) as "+voteCountFieldName+" FROM (" +
                             "SELECT "+PGSqlLiteHelper.T_TextOption.cloumns("o")+",  count (*) as vote_count " +
                             "FROM decision d inner join text_option o " +
                             "on d." + PGSqlLiteHelper.T_Decision.ID + " = o." + PGSqlLiteHelper.T_TextOption.FK_DECISION + " " +
@@ -132,6 +155,8 @@ public WinningOption getWinningOption(Decision decision) {
         } finally {
             if (db != null)
                 db.close();
+            if (c != null)
+                c.close();
         }
     }
 
@@ -228,9 +253,10 @@ public Option getOption(long optionId) {
             strQuery.append(" and v.user_id = ? ");
             params.add(Integer.toString(userId));
         }
+        Cursor cursor = null;
         try {
             List<Vote> result = new ArrayList<>();
-            Cursor cursor = db.rawQuery(strQuery.toString(),params.toArray(new String[params.size()]));
+            cursor = db.rawQuery(strQuery.toString(),params.toArray(new String[params.size()]));
             cursor.moveToFirst();
             while (!cursor.isAfterLast()) {
                 result.add(helper.VOTE_MAPPER.from(cursor));
@@ -240,6 +266,8 @@ public Option getOption(long optionId) {
         } finally {
             if (db != null && db.isOpen())
                 db.close();
+            if (cursor != null)
+                cursor.close();
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index 61025ef97..2b567856d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -8,7 +8,6 @@
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.tgnet.TLRPC;
 
 import java.text.ParseException;
 import java.util.Collection;
@@ -20,6 +19,7 @@
  */
 public interface PollgramMessagesManager {
 
+
     /**
      * The different messages type managed by Pollgram
      * Emoji codes are taken from http://apps.timwhitlock.info/emoji/tables/unicode#block-6a-additional-emoticons
@@ -46,8 +46,9 @@ public String getEmoji() {
         }
 
         public static MessageType byEmoji(String emoji){
+            String trimmed = emoji.trim();
             for (MessageType mt : MessageType.values()){
-                if (emoji.equals(mt.getEmoji()))
+                if (trimmed.equals(mt.getEmoji()))
                     return mt;
             }
             return null;
@@ -117,6 +118,14 @@ public String getDescription() {
     String buildReopenDecision(Decision decision);
 
     /**
+     * build a message for notifying that the passed decision is has been deleted. All decision data will be lost.
+     * @param  decision
+     * @return
+     */
+    String buildDeleteDecision(Decision decision);
+
+    /**
+     * Only if getMessageType(text) == MessageType_VOTE
      * if the message is {@link org.pollgram.decision.service.PollgramMessagesManager.MessageType#VOTE}
      * @param msg the text message to parse
      * @param currentChat current group chat
@@ -124,7 +133,7 @@ public String getDescription() {
      * @return a collection of the vote contained in the message
      * @throws ParseException is the message is not well formed
      */
-    Collection<Vote> getVotes(String msg, TLRPC.Chat currentChat, Date messageDate, int userId) throws PollgramParseException;
+    Collection<Vote> getVotes(String msg, int currentChat, Date messageDate, int userId) throws PollgramParseException;
 
     /**
      * Retrun vale for getNewDecision method
@@ -140,13 +149,14 @@ public NewDecisionData(@NonNull Decision decision, @NonNull List<Option> optionL
     }
 
     /**
+     * Only if getMessageType(text) == MessageType_NEW_DECISION
      * Return the new decision data contained in the passed message
      * @param msg the text message to parse
      * @param currentChat current group chat
      * @param userId message owner
-      @return the decision and its options
+     * @return the decision and its options
      */
-    NewDecisionData getNewDecision(String msg, TLRPC.Chat currentChat, int userId) throws PollgramParseException;
+    NewDecisionData getNewDecision(String msg, int currentChat, int userId) throws PollgramParseException;
 
     /**
      * Return value for getCloseDecision
@@ -161,6 +171,28 @@ public ClosedDecisionDate(Decision decision, Option winningOption) {
         }
     }
 
-    ClosedDecisionDate getCloseDecision(String text, TLRPC.Chat currentChat);
+    /**
+     * Only if getMessageType(text) == MessageType_CLOSE_DECISION
+     * @param text
+     * @param groupChatId
+     * @return the data for close decision message
+     */
+    ClosedDecisionDate getCloseDecision(String text, int groupChatId) throws PollgramParseException;
+
+    /**
+     * * Only if getMessageType(text) == MessageType_DELETE_DECISION
+     * @param text
+     * @param groupChatId
+     * @return the decision to delete
+     */
+    Decision getDeleteDecision(String text, int groupChatId) throws PollgramParseException;
+
+    /**
+     * Only if getMessageType(text) == MessageType_REOPEN_DECISION
+     * @param text
+     * @param groupChatId
+     * @return the decision to reopen
+     */
+    Decision getReopenDecision(String text, int groupChatId) throws PollgramParseException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index fe2638329..a15b993f5 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -11,9 +11,9 @@
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Date;
 import java.util.Iterator;
@@ -84,19 +84,21 @@ private String getBooleanValue(Boolean b) {
         return sb.toString();
     }
 
-    private Boolean getBooleanValue(String str){
-        if (str == null)
-            return  false;
-        return str.startsWith(TRUE_EMOJI);
+    private Boolean getBooleanValue(String str) {
+        return str != null && str.startsWith(TRUE_EMOJI);
     }
 
     @Override
     public String buildRemindMessage(String userAsString, Decision decision) {
         StringBuilder body = new StringBuilder();
         body.append(context.getString(R.string.tmsg_RemindToVoteP1));
+        body.append(' ');
         body.append(format(userAsString));
+        body.append(' ');
         body.append(context.getString(R.string.tmsg_RemindToVoteP2));
+        body.append(NEW_LINE);
         body.append(format(decision));
+        body.append(NEW_LINE);
         body.append(context.getString(R.string.tmsg_RemindToVoteP3));
         body.append(' ');
         body.append(WINKING_FACE_EMOJI);
@@ -107,6 +109,7 @@ public String buildRemindMessage(String userAsString, Decision decision) {
     public String buildCloseDecision(Decision decision, Option winningOption, int voteCount) {
         StringBuilder body = new StringBuilder();
         body.append(context.getString(R.string.tmsg_CloseDecisionP1));
+        body.append(' ');
         body.append(format(decision));
         body.append(context.getString(R.string.tmsg_CloseDecisionP2));
         body.append(format(winningOption));
@@ -121,12 +124,24 @@ public String buildCloseDecision(Decision decision, Option winningOption, int vo
 
     @Override
     public String buildReopenDecision(Decision decision) {
+        return buildDeleteOrReopenMessage(MessageType.REOPEN_DECISION, decision,
+                R.string.tmsg_ReopenDecisionPrefix, R.string.tmsg_ReopenDecisionSuffix);
+    }
+
+    @Override
+    public String buildDeleteDecision(Decision decision) {
+        return buildDeleteOrReopenMessage(MessageType.DELETE_DECISION, decision,
+                R.string.tmsg_DeleteDecisionPrefix, R.string.tmsg_DeleteDecisionSuffix);
+    }
+
+    private String buildDeleteOrReopenMessage(MessageType type, Decision decision, int prefixStringRes, int suffixStringRes){
         StringBuilder body = new StringBuilder();
-        body.append(context.getString(R.string.tmsg_ReopenDecisionPrefix));
+        body.append(context.getString(prefixStringRes));
+        body.append(' ');
         body.append(format(decision));
         body.append(NEW_LINE);
-        body.append(context.getString(R.string.tmsg_ReopenDecisionSuffix));
-        return buildMessage(MessageType.REOPEN_DECISION, body.toString());
+        body.append(context.getString(suffixStringRes));
+        return buildMessage(type, body.toString());
     }
 
     @Override
@@ -185,7 +200,7 @@ public String buildNotifyNewDecision(Decision decision, List<Option> options) {
      * @param messageBody
      * @return a message ready to be sent
      */
-    private String buildMessage(MessageType type, String messageBody) {
+    protected String buildMessage(MessageType type, String messageBody) {
         StringBuilder sb = new StringBuilder();
         sb.append(POLLGRAM_MESSAGE_PREFIX);
         sb.append(' ');
@@ -217,7 +232,7 @@ public MessageType getMessageType(String msg){
                 int start = POLLGRAM_MESSAGE_PREFIX.length() + 1;
                 String msgEmoji = msg.substring(start, start + 2);
                 MessageType t = MessageType.byEmoji(msgEmoji);
-                Log.d(LOG_TAG, "MessageType for [" + msgEmoji + "] is [" + t + "]");
+                Log.d(LOG_TAG, "MessageType for [" + Arrays.toString(msgEmoji.getBytes()) + "] is [" + t + "]");
                 return t;
             } catch (IndexOutOfBoundsException | IllegalArgumentException e) {
                 Log.e(LOG_TAG, "Error parsing message type for message [" + msg + "] il will not be parset", e);
@@ -230,16 +245,16 @@ public MessageType getMessageType(String msg){
 
 
     @Override
-    public Collection<Vote> getVotes(String msg, TLRPC.Chat currentChat, Date messageDate ,int userId) throws PollgramParseException {
+    public Collection<Vote> getVotes(String msg, int currentChat, Date messageDate ,int userId) throws PollgramParseException {
 
         try {
             StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR) + Character.toString(NEW_LINE));
             strTok.nextToken(); // skip token
             strTok.nextToken(); // skip token
             String decisionTitle = strTok.nextToken();
-            Decision decision = pollgramDAO.getDecision(decisionTitle, currentChat.id);
+            Decision decision = pollgramDAO.getDecision(decisionTitle, currentChat);
             if (decision == null)
-                throw new PollgramParseException("Decision not found for title["+decisionTitle+"]  currentChat["+currentChat.id+"]");
+                throw new PollgramParseException("Decision not found for title["+decisionTitle+"]  currentChat["+currentChat+"]");
             List<Vote> voteList = new ArrayList<>();
             while (strTok.hasMoreTokens()) {
                 String voteValue = strTok.nextToken();
@@ -267,7 +282,7 @@ public MessageType getMessageType(String msg){
     }
 
     @Override
-    public NewDecisionData getNewDecision(String msg, TLRPC.Chat currentChat, int userId) {
+    public NewDecisionData getNewDecision(String msg, int currentChat, int userId) throws PollgramParseException {
         Decision decision;
         List<Option> optionList = new ArrayList<>();
         try {
@@ -277,7 +292,7 @@ public NewDecisionData getNewDecision(String msg, TLRPC.Chat currentChat, int us
                 String title = strTok.nextToken();
                 strTok.nextToken();//skip this token
                 String longDescription = strTok.nextToken();
-                decision = new Decision(currentChat.id, userId, title, longDescription, true);
+                decision = new Decision(currentChat, userId, title, longDescription, true);
             }
             while (strTok.hasMoreTokens()){
                 strTok.nextToken();//skip this token
@@ -298,7 +313,7 @@ public NewDecisionData getNewDecision(String msg, TLRPC.Chat currentChat, int us
     }
 
     @Override
-    public ClosedDecisionDate getCloseDecision(String msg, TLRPC.Chat currentChat) {
+    public ClosedDecisionDate getCloseDecision(String msg, int currentChat) throws PollgramParseException {
         Decision decision;
         Option winningOption;
         try {
@@ -309,7 +324,7 @@ public ClosedDecisionDate getCloseDecision(String msg, TLRPC.Chat currentChat) {
             String optionTitle = strTok.nextToken();//skip this token
 
             String longDescription = strTok.nextToken();
-            decision = pollgramDAO.getDecision(title, currentChat.id);
+            decision = pollgramDAO.getDecision(title, currentChat);
             winningOption = pollgramDAO.getOption(optionTitle, decision);
 
 
@@ -320,4 +335,42 @@ public ClosedDecisionDate getCloseDecision(String msg, TLRPC.Chat currentChat) {
         Log.d(LOG_TAG, "getNewDecision decision[" + decision + "] winningOption[" + winningOption + "]");
         return new ClosedDecisionDate(decision, winningOption);
     }
+
+    @Override
+    public Decision getDeleteDecision(String text, int groupChatId) throws PollgramParseException {
+        Decision d = getDecisionInDeleteOrReopenMessage(text, groupChatId);
+        Log.d(LOG_TAG, "getDeleteDecision Decision["+d+"]");
+        return d;
+    }
+
+    @Override
+    public Decision getReopenDecision(String text, int groupChatId) throws PollgramParseException {
+        Decision d = getDecisionInDeleteOrReopenMessage(text,groupChatId);
+        Log.d(LOG_TAG, "getReopenDecision Decision["+d+"]");
+        return d;
+    }
+
+    /**
+     * Actually Delete and Reopen messages have the same structure
+     * @param msg
+     * @param groupChatId
+     * @return
+     */
+    private Decision getDecisionInDeleteOrReopenMessage(String msg, int groupChatId) throws PollgramParseException {
+        Decision decision;
+        try {
+            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR));
+            strTok.nextToken(); // skipt this token
+            String decisionTitle = strTok.nextToken();
+            Decision d = pollgramDAO.getDecision(decisionTitle, groupChatId);
+            if (d ==null)
+                throw new PollgramParseException("Decision not found for title["+decisionTitle+"] and groupChatId["+groupChatId+"]");
+            return d;
+        } catch (NoSuchElementException e){
+            Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
+            throw new PollgramParseException("Token not found", e);
+        }
+    }
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramParseException.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramParseException.java
index fd5fe79dc..284965878 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramParseException.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramParseException.java
@@ -3,7 +3,7 @@
 /**
  * Created by davide on 27/10/15.
  */
-public class PollgramParseException extends RuntimeException {
+public class PollgramParseException extends Exception {
 
     public PollgramParseException(String detailMessage) {
         super(detailMessage);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index bf9a11c23..4b5d5c811 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -35,9 +35,17 @@
 
     /**
      * Process a message and return the new message, performing some transformation if needed.
-     * @param message the input message
      * @param currentChat
+     * @param message the input message
      * @return the input message transformed if needed
      */
-    void processMessage(MessageObject message, TLRPC.Chat currentChat);
+    void processMessage(MessageObject message);
+
+    /**
+     * @param user
+     * @return a string reppresetation of the passed user. That can be used just for local
+     * representaion not for sending message, as description can be taken right from
+     * the local contact list of the user
+     */
+    String asString(TLRPC.User user);
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index 7c50a90fc..d6ec8e5d4 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -7,12 +7,14 @@
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
-import org.pollgram.decision.utils.PollgramUtils;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
@@ -82,7 +84,13 @@ public UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User
     @Override
     public void remindUserToVote(Decision decision, TLRPC.User user) {
         Log.d(LOG_TAG, "remindUserToVote groupChatId[" + decision.getChatId() + "] decision[" + decision + "] user[" + user + "]");
-        String msg = messageManager.buildRemindMessage(PollgramUtils.asString(user), decision);
+        String userAsString = ContactsController.formatName(user.first_name, user.last_name);
+        // TODO Remove START
+        Toast.makeText(ApplicationLoader.applicationContext, "formatName="+userAsString,Toast.LENGTH_SHORT).show();
+        Toast.makeText(ApplicationLoader.applicationContext, "user.first_name="+user.first_name,Toast.LENGTH_SHORT).show();
+        Toast.makeText(ApplicationLoader.applicationContext, "user.username="+user.username,Toast.LENGTH_SHORT).show();
+        // TODO Remove END
+        String msg = messageManager.buildRemindMessage(userAsString, decision);
         sendMessage(decision.getChatId(), msg);
     }
 
@@ -117,9 +125,10 @@ public void notifyReopen(Decision decision) {
 
     @Override
     public void notifyDelete(Decision decision) {
-        // TODO
+        pollgramDAO.delete(decision);
+        String message = messageManager.buildDeleteDecision(decision);
+        sendMessage(decision.getChatId(), message);
     }
-
     @Override
     public void notifyNewDecision(Decision decision, List<Option> options) {
         Log.d(LOG_TAG, "notifyNewDecision decision[" + decision + "] decision[" + decision + "] options[" + options + "]");
@@ -137,14 +146,20 @@ public void notifyNewDecision(Decision decision, List<Option> options) {
     }
 
     @Override
-    public void processMessage(MessageObject message, TLRPC.Chat currentChat) {
-        Log.d(LOG_TAG,"parsing message ["+message.messageText+"] for chat ["+currentChat+"]");
-        if (currentChat == null) {
-            Log.d(NOT_PARSED_TAG,"not a group message");
+    public void processMessage(MessageObject message) {
+        Log.d(LOG_TAG,"parsing message ["+message.messageText+"]");
+        if (message.messageOwner == null) {
+            Log.d(NOT_PARSED_TAG,"message.messageOwner not set");
+            return;
+        }
+
+        if (message.messageOwner.dialog_id > 0){
+            Log.d(NOT_PARSED_TAG,"message.messageOwner.dialog_id positive, in not a group chat");
             return;
         }
 
-        if (ChatObject.isChannel(currentChat)){
+        int groupChatId = (int)(message.messageOwner.dialog_id * -1);
+        if (ChatObject.isChannel(groupChatId)){
             Log.d(NOT_PARSED_TAG,"is a channel");
             return;
         }
@@ -162,7 +177,7 @@ public void processMessage(MessageObject message, TLRPC.Chat currentChat) {
         try {
             switch (msgType) {
                 case NEW_DECISION: {
-                    PollgramMessagesManager.NewDecisionData resut = messageManager.getNewDecision(text, currentChat, userId);
+                    PollgramMessagesManager.NewDecisionData resut = messageManager.getNewDecision(text, groupChatId, userId);
                     if (resut == null){
                         throw new PollgramParseException("Decision not found for NEW_DECISION messsage");
                     }
@@ -174,22 +189,27 @@ public void processMessage(MessageObject message, TLRPC.Chat currentChat) {
                     break;
                 }
                 case REOPEN_DECISION: {
+                    Decision decision = messageManager.getReopenDecision(text, groupChatId);
+                    decision.setOpen(true);
+                    pollgramDAO.save(decision);
                     break;
                 }
                 case CLOSE_DECISION: {
-                    PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(text, currentChat);
+                    PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(text, groupChatId);
                     result.decision.setOpen(false);
                     pollgramDAO.save(result.decision);
                     break;
                 }
                 case DELETE_DECISION: {
+                    Decision decision = messageManager.getDeleteDecision(text, groupChatId);
+                    pollgramDAO.delete(decision);
                     break;
                 }
                 case REMIND_TO_VOTE: {
                     break;
                 }
                 case VOTE: {
-                    Collection<Vote> votes = messageManager.getVotes(text, currentChat, messageDate, userId);
+                    Collection<Vote> votes = messageManager.getVotes(text, groupChatId, messageDate, userId);
                     for (Vote v : votes)
                         pollgramDAO.save(v);
                     break;
@@ -211,4 +231,19 @@ protected void sendMessage(long groupChatId, String message) {
         SendMessagesHelper.getInstance().sendMessage(message, peer, replyToMsg, webPAge, searchLinks, asAdmin);
         Log.i(LOG_TAG, "sended message [" + message + "] in group [" + groupChatId + "]");
     }
+
+    @Override
+    public String asString(TLRPC.User user){
+        if (user.id / 1000 != 777 && user.id / 1000 != 333 &&
+                ContactsController.getInstance().contactsDict.get(user.id) == null &&
+                (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+            if (user.phone != null && user.phone.length() != 0) {
+                return PhoneFormat.getInstance().format("+" + user.phone);
+            } else {
+                return UserObject.getUserName(user);
+            }
+        } else {
+            return UserObject.getUserName(user);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
index 71768b27e..2369a4b1c 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -87,7 +87,7 @@ public View createView(final Context context) {
         ActionBarMenuItem headerItem = menu.addItem(0, R.drawable.ic_ab_other);
         final TextView viewOpenCloseTextView =  headerItem.addSubItem(ID_TOGGLE_OPEN_CLOSE_DECISIONS,
                 context.getString(R.string.viewCloseDecision),0 );
-        headerItem.addSubItem(ID_PURGE_ALL_DATA, "Purge ALL data from db", 0);
+        headerItem.addSubItem(ID_PURGE_ALL_DATA, "Remove current chat decisions data", 0);
         headerItem.addSubItem(ID_PUT_STUB_DATA_DATA, "Put stub data for current chat", 0);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
@@ -102,7 +102,10 @@ public void onItemClick(int id) {
                     else
                         viewOpenCloseTextView.setText(R.string.hideCloseDecision);
                 } else if (id == ID_PURGE_ALL_DATA){
-                    pollgramDAO.purgeData();
+                    List<Decision> allDecisions = pollgramDAO.getDecisions(chatInfo.id, null);
+                    for (Decision d : allDecisions){
+                        pollgramDAO.delete(d);
+                    }
                 } else if (id == ID_PUT_STUB_DATA_DATA){
                     pollgramDAO.putStubData(currentChat.id, UserConfig.getCurrentUser().id);
                 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
index 10719b1f0..45d66e701 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
@@ -1,6 +1,9 @@
 package org.pollgram.decision.ui;
 
+import android.app.AlertDialog;
 import android.content.Context;
+import android.content.DialogInterface;
+import android.graphics.Color;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -9,12 +12,13 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import org.pollgram.decision.service.PollgramDAO;
+import org.pollgram.R;
 import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.service.PollgramDAO;
 import org.pollgram.decision.service.PollgramFactory;
 import org.pollgram.decision.service.PollgramService;
 import org.pollgram.decision.utils.PollgramUtils;
-import org.pollgram.R;
+import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
@@ -43,7 +47,12 @@
     private PollgramDAO pollgramDAO;
     private PollgramService pollgramService;
     private Decision decision;
-    private TextView title;
+    private TextView tvUserVoteCount;
+    private TextView tvDecisionStatus;
+    private TextView menuDeleteDecisionItem;
+    private TextView menuReopenDecisionItem;
+    private TextView menuCloseDecisionItem;
+    private ActionBarMenu menu;
 
     public VotesManagerFragment(Bundle bundle) {
         super(bundle);
@@ -67,15 +76,13 @@ public View createView(final Context context) {
         // TODO add real icon
         // set up action bar
         PollgramUtils.init(actionBar, decision.getTitle(), 18, R.drawable.attach_camera);
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        ActionBarMenu menu = actionBar.createMenu();
+        menu = actionBar.createMenu();
         ActionBarMenuItem headerItem = menu.addItem(0, R.drawable.ic_ab_other);
-        if (decision.isOpen())
-            headerItem.addSubItem(ID_CLOSE_DECISOIN, context.getString(R.string.closeDecision),0 );
-        else {
-            headerItem.addSubItem(ID_REOPEN_DECISOIN, context.getString(R.string.reopenDecision), 0);
-            headerItem.addSubItem(ID_DELETE_DECISOIN, context.getString(R.string.deleteDecision), 0);
-        }
+        menuCloseDecisionItem = headerItem.addSubItem(ID_CLOSE_DECISOIN, context.getString(R.string.closeDecision), 0);
+        menuReopenDecisionItem =  headerItem.addSubItem(ID_REOPEN_DECISOIN, context.getString(R.string.reopenDecision), 0);
+        menuDeleteDecisionItem =headerItem.addSubItem(ID_DELETE_DECISOIN, context.getString(R.string.deleteDecision), 0);
+        
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
@@ -83,29 +90,45 @@ public void onItemClick(int id) {
                     finishFragment();
                     return;
                 }
+                if (id == ID_DELETE_DECISOIN) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(context);
+                    builder.setMessage(R.string.deleteDecisionQuestion).setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            pollgramService.notifyDelete(decision);
+                            Toast.makeText(context, context.getString(R.string.decisionDeleted), Toast.LENGTH_SHORT).show();
+                            finishFragment();
+                        }
+                    }).setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            // nothing to do11
+                        }
+                    }).show();
+                }
                 int stringId;
-                if (id == ID_CLOSE_DECISOIN){
+                if (id == ID_CLOSE_DECISOIN) {
                     pollgramService.notifyClose(decision);
                     stringId = R.string.decisionClosed;
-                } else if (id == ID_REOPEN_DECISOIN){
+                } else if (id == ID_REOPEN_DECISOIN) {
                     pollgramService.notifyReopen(decision);
                     stringId = R.string.decisionReopened;
-                } else if (id == ID_DELETE_DECISOIN){
-                    stringId = R.string.decisionDeleted;
-                    pollgramService.notifyDelete(decision);
                 } else {
-                    Log.e(LOG_TAG, "Unknown action id["+id+"]");
+                    Log.e(LOG_TAG, "Unknown action id[" + id + "]");
                     return;
                 }
-                Toast.makeText(context,context.getString(stringId),Toast.LENGTH_SHORT).show();
+                updateView();
+                Toast.makeText(context, context.getString(stringId), Toast.LENGTH_SHORT).show();
             }
         });
         fragmentView = new SizeNotifierFrameLayout(context);
-        SizeNotifierFrameLayout contentView = (SizeNotifierFrameLayout) fragmentView;
+        //SizeNotifierFrameLayout contentView = (SizeNotifierFrameLayout) fragmentView;
         LayoutInflater li = LayoutInflater.from(context);
         ViewGroup rootView = (ViewGroup)li.inflate(R.layout.votes_manager_main, (ViewGroup) fragmentView);
+
         // Create view
-        title = (TextView) rootView.findViewById(R.id.decision_detail_top_title);
+        tvUserVoteCount = (TextView) rootView.findViewById(R.id.tv_user_vote_count);
+        tvDecisionStatus = (TextView) rootView.findViewById(R.id.tv_decision_status);
         updateView();
 
         android.support.v4.app.FragmentTransaction transaction = getParentActivity().getSupportFragmentManager().beginTransaction();
@@ -123,8 +146,32 @@ protected void onVoteSaved() {
     }
 
     private void updateView(){
+        Context ctx = getParentActivity();
+        decision = pollgramDAO.getDecision(decision.getId());
         int userThatVoteSoFar = pollgramDAO.getUserVoteCount(decision);
-        title.setText(getParentActivity().getString(R.string.decisionDetailSummarizeTitle,
+
+        menuReopenDecisionItem.setVisibility(View.GONE);
+        menuDeleteDecisionItem.setVisibility(View.GONE);
+        menuCloseDecisionItem.setVisibility(View.GONE);
+        if (decision.getUserCreatorId() == UserConfig.getCurrentUser().id){
+            menu.setVisibility(View.VISIBLE);
+            if (decision.isOpen())
+                menuCloseDecisionItem.setVisibility(View.VISIBLE);
+            else {
+                menuReopenDecisionItem.setVisibility(View.VISIBLE);
+                menuDeleteDecisionItem.setVisibility(View.VISIBLE);
+            }
+        }
+            menu.setVisibility(View.GONE);
+
+
+
+        String statusDesc = ctx.getString(decision.isOpen() ? R.string.statusOpen : R.string.statusClose);
+        tvDecisionStatus.setText(ctx.getString(R.string.decisionStatus, statusDesc));
+        tvDecisionStatus.setBackgroundColor(decision.isOpen() ? Color.GREEN : Color.RED);
+
+        tvUserVoteCount.setText(ctx.getString(R.string.howManyMemberVote,
                 userThatVoteSoFar, participantsUserIds.length));
+
     }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index a9ab78d5d..fb7cb1788 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -43,9 +43,8 @@
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.service.PollgramDAO;
-import org.pollgram.decision.service.PollgramService;
 import org.pollgram.decision.service.PollgramFactory;
-import org.pollgram.decision.utils.PollgramUtils;
+import org.pollgram.decision.service.PollgramService;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
@@ -328,7 +327,7 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
                 userNameTv.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
                 userNameTv.setPadding(15, 0, 0, 0);
                 userNameTv.setEllipsize(TextUtils.TruncateAt.END);
-                userNameTv.setText(PollgramUtils.asString(user));
+                userNameTv.setText(pollgramService.asString(user));
                 int maxWith = AndroidUtilities.dp(80);
                 userNameTv.setMaxWidth(maxWith);
                 userNameTv.setMaxLines(1);
@@ -345,7 +344,7 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
                 @Override
                 public void onClick(View v) {
                     pollgramService.remindUserToVote(usersDecisionVotes.getDecision(), user);
-                    String message = getContext().getString(R.string.remindToUserSent, PollgramUtils.asString(user));
+                    String message = getContext().getString(R.string.remindToUserSent, pollgramService.asString(user));
                     Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
                 }
             });
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
index 0d04b975d..d77c4669c 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
@@ -7,12 +7,8 @@
 import android.widget.TextView;
 
 import org.pollgram.R;
-import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.UserObject;
-import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.LayoutHelper;
@@ -59,20 +55,6 @@ public static ActionBar init(ActionBar actionBar, String title,int titleFontSize
         return actionBar;
     }
 
-    public static String asString(TLRPC.User user){
-        if (user.id / 1000 != 777 && user.id / 1000 != 333 &&
-                ContactsController.getInstance().contactsDict.get(user.id) == null &&
-                (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
-            if (user.phone != null && user.phone.length() != 0) {
-                return PhoneFormat.getInstance().format("+" + user.phone);
-            } else {
-                return UserObject.getUserName(user);
-            }
-        } else {
-            return UserObject.getUserName(user);
-        }
-    }
-
     public static String getEmojiAsString(byte... emojiBytes){
         return new String(emojiBytes, Charset.forName("UTF-8"));
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index f1e79c7dd..505933282 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -7,8 +7,6 @@
  */
 
 package org.telegram.messenger;
-import org.pollgram.R;
-
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
@@ -22,6 +20,8 @@
 import android.util.SparseIntArray;
 import android.widget.Toast;
 
+import org.pollgram.R;
+import org.pollgram.decision.service.PollgramFactory;
 import org.telegram.messenger.query.BotQuery;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.ConnectionsManager;
@@ -4053,6 +4053,7 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
                     message.media = new TLRPC.TL_messageMediaEmpty();
                     MessagesStorage.lastPtsValue = updates.pts;
                     final MessageObject obj = new MessageObject(message, null, true);
+                    PollgramFactory.getPollgramService().processMessage(obj);
                     final ArrayList<MessageObject> objArr = new ArrayList<>();
                     objArr.add(obj);
                     ArrayList<TLRPC.Message> arr = new ArrayList<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 5b5a630b6..794c8ecdb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -51,7 +51,6 @@
 import android.widget.Toast;
 
 import org.pollgram.R;
-import org.pollgram.decision.service.PollgramFactory;
 import org.pollgram.decision.ui.DecisionsListFragment;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
@@ -3952,9 +3951,9 @@ public void run() {
 
                 // TODO _POLLGRAM HERE THE MESSAGES ARE PARSED !!!! YEAH !!!
                 // From here pass even the message that i send
-                for (MessageObject msgObj : arr) {
-                    PollgramFactory.getPollgramService().processMessage(msgObj, currentChat);
-                }
+//                for (MessageObject msgObj : arr) {
+//                    PollgramFactory.getPollgramService().processMessage(msgObj);
+//                }
 
                 ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                 if (!forward_end_reached) {
@@ -5976,7 +5975,6 @@ public boolean canPerformActions() {
                     public void didPressUrl(MessageObject messageObject, final ClickableSpan url) {
                         if (url instanceof URLSpanNoUnderline) {
                             String str = ((URLSpanNoUnderline) url).getURL();
-                            // TODO _POLLGRAM add here eventualy some action on tap
                             if (str.startsWith("@")) {
                                 MessagesController.openByUserName(str.substring(1), ChatActivity.this, 0);
                             } else if (str.startsWith("#")) {
diff --git a/TMessagesProj/src/main/res/layout/votes_manager_main.xml b/TMessagesProj/src/main/res/layout/votes_manager_main.xml
index 270dcb201..ab5e9744d 100644
--- a/TMessagesProj/src/main/res/layout/votes_manager_main.xml
+++ b/TMessagesProj/src/main/res/layout/votes_manager_main.xml
@@ -1,5 +1,4 @@
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/sample_main_layout"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical">
@@ -15,15 +14,34 @@
                   style="@style/Widget.SampleMessageTile"
                   android:layout_width="match_parent"
                   android:layout_height="match_parent">
-    -->
-    <TextView
-        android:id="@+id/decision_detail_top_title"
-        android:textAppearance="?android:attr/textAppearanceMedium"
-        android:text="Title"
-        android:padding="5dp"
+    
+
+-->
+
+    <LinearLayout android:id="@+id/top_title_layout"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"/>
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:id="@+id/tv_decision_status"
+            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:text="status"
+            android:padding="5dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"/>
+
+
+        <TextView
+            android:id="@+id/tv_user_vote_count"
+            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:text="Title"
+            android:padding="5dp"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"/>
 
+    </LinearLayout>
+    
     <!--
             </ScrollView>
 
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 75de7a0a8..043de418a 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -953,14 +953,16 @@
     <string name="updateBuild">614</string>
 
     <!-- START of Pollgram text -->
-    <string name="howManyMemberVote">%1$d members on %2$d have voted yet</string>
+    <string name="howManyMemberVote">%1$d on %2$d have voted yet</string>
+    <string name="decisionStatus">Decision is %1$s</string>
+    <string name="statusOpen">open</string>
+    <string name="statusClose">close</string>
     <string name="groupDecision">Group decisions</string>
     <string name="decisionsCount">%1$d open decision, %2$d closed decisions</string>
 
     <string name="viewCloseDecision">View closed decision</string>
     <string name="hideCloseDecision">Hide closed decision</string>
 
-    <string name="decisionDetailSummarizeTitle">%1$d members on %2$d have already voted!</string>
     <string name="optionTabName">Options</string>
     <string name="tableViewTabName">Table View</string>
     <string name="saveVotes">Save votes</string>
@@ -983,9 +985,9 @@
 
     <string name="tmsg_RemindToVoteP1">Hey</string>
     <!-- between P1 and P2 goes the username -->
-    <string name="tmsg_RemindToVoteP2">can you please for decision\n</string>
+    <string name="tmsg_RemindToVoteP2">can you please for decision</string>
     <!-- between P2 and P3 goes the decision title -->
-    <string name="tmsg_RemindToVoteP3">\nThank you</string>
+    <string name="tmsg_RemindToVoteP3">Thank you</string>
 
     <string name="tmsg_NewDecisionMsgPrefix">I just create a new decision</string>
     <!-- between MsgPrefix and OptionsPrefix goes the decision title, and long description -->
@@ -997,9 +999,9 @@
 
     <string name="tmsg_CloseDecisionP1">Decision</string>
     <!-- between Prefix and Suffix goes the decision title -->
-    <string name="tmsg_CloseDecisionP2">, is now closed.\nThe option that receive more vote is</string>
+    <string name="tmsg_CloseDecisionP2">, is now closed. The option that receive more vote is</string>
     <!--after P2 goes the winning option title -->
-    <string name="tmsg_CloseDecisionP3"> with </string>
+    <string name="tmsg_CloseDecisionP3">with</string>
     <string name="tmsg_CloseDecisionP4"> votes.</string>
 
     <string name="tmsg_ReopenDecisionPrefix">Decision</string>
@@ -1019,6 +1021,7 @@
     <string name="MessageType_CLOSE_DECISION">Close decision</string>
     <string name="MessageType_REOPEN_DECISION">Reopen decision</string>
     <string name="MessageType_DELETE_DECISION">Delete decision</string>
+    <string name="deleteDecisionQuestion">Are you sure you want to delete this decision ? This will remove this decision for ALL users involved, not just yourself.</string>
     <!-- END MessageType descriptions -->
 
     <!-- END of Pollgram text -->
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
index c49825248..e1da55ce8 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
@@ -33,7 +33,7 @@
     Context mMockContext;
 
     private PollgramDAOTestImpl dao;
-    private PollgramMessagesManager messageManager;
+    private PollgramMessagesManagerImpl messageManager;
     private PollgramServiceImpl service;
     private Map<Long, String> receivedId2LastMessages = new HashMap<>();
     private TLRPC.Chat chat;
@@ -78,7 +78,16 @@ public void testMessageTypeGetEmoji() {
     }
 
     @Test
-    public void testSendVotes() throws ParseException {
+    public void testBuildMessage() {
+        for (PollgramMessagesManager.MessageType mt1 : PollgramMessagesManager.MessageType.values()) {
+            String msg = messageManager.buildMessage(mt1, "Message Body");
+            PollgramMessagesManager.MessageType  type = messageManager.getMessageType(msg);
+            Assert.assertEquals(mt1, type);
+        }
+    }
+
+    @Test
+    public void testSendVotes() throws ParseException, PollgramParseException {
         List<Option> options = dao.getOptions(decision);
         Collection<Vote> votes = new ArrayList<>();
         Date voteDate = new Date();
@@ -94,8 +103,8 @@ public void testSendVotes() throws ParseException {
         assertVotes(votes, voteDate, messageManager.reformatMessage(message));
     }
 
-    private void assertVotes(Collection<Vote> votes, Date voteDate, String message) {
-        Collection<Vote> parsedVotes = messageManager.getVotes(message, chat, voteDate, user.id);
+    private void assertVotes(Collection<Vote> votes, Date voteDate, String message) throws PollgramParseException {
+        Collection<Vote> parsedVotes = messageManager.getVotes(message, chat.id, voteDate, user.id);
         Assert.assertEquals(parsedVotes, votes);
     }
 
@@ -107,7 +116,7 @@ public void testSendRemind() throws ParseException {
     }
 
     @Test
-    public void testNewDecision() throws ParseException {
+    public void testNewDecision() throws ParseException, PollgramParseException {
         List<Option> options = dao.getOptions(decision);
         String message = messageManager.buildNotifyNewDecision(decision, options);
 
@@ -119,14 +128,14 @@ public void testNewDecision() throws ParseException {
 
     }
 
-    private void assertNewDecision(Decision decision, List<Option> options, String message) {
-        PollgramMessagesManager.NewDecisionData result = messageManager.getNewDecision(message, chat, user.id);
+    private void assertNewDecision(Decision decision, List<Option> options, String message) throws PollgramParseException {
+        PollgramMessagesManager.NewDecisionData result = messageManager.getNewDecision(message, chat.id, user.id);
         Assert.assertEquals(decision, result.decision);
         Assert.assertEquals(options, result.optionList);
     }
 
     @Test
-    public void testCloseDecision() {
+    public void testCloseDecision() throws PollgramParseException {
         Option winningOption = dao.getOptions(decision).get(0);
         int voteCount = 5;
         String message = messageManager.buildCloseDecision(decision, winningOption, voteCount);
@@ -136,17 +145,38 @@ public void testCloseDecision() {
         assertCloseDecision(decision, winningOption, messageManager.reformatMessage(message));
     }
 
-    private void assertCloseDecision(Decision decision, Option winningOption, String message) {
-        PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(message, chat);
+    private void assertCloseDecision(Decision decision, Option winningOption, String message) throws PollgramParseException {
+        PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(message, chat.id);
         Assert.assertEquals(decision, result.decision);
         Assert.assertEquals(winningOption, result.winningOption);
     }
 
     @Test
-    public void testReopenDecision() {
+    public void testReopenDecision() throws PollgramParseException {
         String message = messageManager.buildReopenDecision(decision);
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
+        Assert.assertEquals(PollgramMessagesManager.MessageType.REOPEN_DECISION, type);
+        assertReopenDecision(decision, message);
+        assertReopenDecision(decision, messageManager.reformatMessage(message));
+    }
+
+    private void assertReopenDecision(Decision decision, String message) throws PollgramParseException {
+        Decision foundDecision = messageManager.getReopenDecision(message, chat.id);
+        Assert.assertEquals(foundDecision, decision);
+    }
 
+    @Test
+    public void testDeleteDecision() throws PollgramParseException {
+        String message = messageManager.buildDeleteDecision(decision);
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
+        Assert.assertEquals(PollgramMessagesManager.MessageType.DELETE_DECISION, type);
+        assertDeleteDecision(decision, message);
+        assertDeleteDecision(decision, messageManager.reformatMessage(message));
+    }
 
+    private void assertDeleteDecision(Decision decision, String message) throws PollgramParseException {
+        Decision foundDecision = messageManager.getDeleteDecision(message, chat.id);
+        Assert.assertEquals(foundDecision, decision);
     }
 
 }
\ No newline at end of file
