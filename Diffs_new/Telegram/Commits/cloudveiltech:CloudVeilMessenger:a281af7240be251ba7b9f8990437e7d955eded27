diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 1cdd15bb3..06e3ae707 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -56,6 +56,13 @@ android {
 
     sourceSets.main.jniLibs.srcDirs = ['./jni/']
 
+    lintOptions {
+        checkReleaseBuilds false
+        // Or, if you prefer, you can continue to check for errors in release builds,
+        // but continue the build even when errors are found:
+        abortOnError false
+    }
+
     externalNativeBuild {
         ndkBuild {
             path "jni/Android.mk"
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
index 04d558cf9..f71278ff4 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
@@ -2,9 +2,6 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
-import android.support.annotation.NonNull;
-
-import com.google.gson.Gson;
 
 import org.telegram.messenger.ApplicationLoader;
 
@@ -17,15 +14,16 @@
     public static final boolean LOCK_DISABLE_FORWARD_CHAT = false;
     public static final boolean LOCK_DISABLE_BOTS = false;
     public static final boolean LOCK_DISABLE_YOUTUBE_VIDEO = true;
+    private static final boolean DEFAULT_MANAGE_USERS = false;
 
 
     private static boolean DEFAULT_LOCK_DISABLE_SECRET_CHAT = false;
     private static int DEFAULT_MIN_SECRET_CHAT_TTL = 0;
     public static final boolean LOCK_DISABLE_IN_APP_BROWSER = true;
     public static final boolean LOCK_DISABLE_AUTOPLAY_GIFS = true;
-    public static final boolean LOCK_DISABLE_GIFS = true;
+    private static final boolean DEFAULT_LOCK_DISABLE_GIFS = false;
     public static final boolean LOCK_DISABLE_GLOBAL_SEARCH = true;
-    public static final boolean LOCK_DISABLE_STICKERS = true;
+    private static final boolean DEFAULT_LOCK_DISABLE_STICKERS = false;
 
     private static final boolean DEFAULT_LOCK_DISABLE_OWN_BIO = true;
     private static final boolean DEFAULT_LOCK_DISABLE_OWN_PHOTO = true;
@@ -102,4 +100,28 @@ public static void setDisabledVideoInlineRecording(boolean lockDisableInlineVide
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
         preferences.edit().putBoolean("inputToggleVoiceVideo", lockDisableInlineVideo).apply();
     }
+
+    public static boolean isLockDisableGifs() {
+        return DEFAULT_LOCK_DISABLE_GIFS;
+    }
+
+    public static void setLockDisableStickers(boolean lockDisableStickers) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        preferences.edit().putBoolean("isLockDisableStickers", lockDisableStickers).apply();
+    }
+
+    public static boolean isLockDisableStickers() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        return preferences.getBoolean("isLockDisableStickers", DEFAULT_LOCK_DISABLE_STICKERS);
+    }
+
+    public static void setManageUsers(boolean isManagingUsers) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        preferences.edit().putBoolean("isManagingUsers", isManagingUsers).apply();
+    }
+
+    public static boolean getManageUsers() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        return preferences.getBoolean("isManagingUsers", DEFAULT_MANAGE_USERS);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
index d43dd2e23..f97048234 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
@@ -14,6 +14,8 @@
     public ArrayList<Row> groups = new ArrayList<>();
     public ArrayList<Row> channels = new ArrayList<>();
     public ArrayList<Row> bots = new ArrayList<>();
+    public ArrayList<Row> stickers = new ArrayList<>();
+    public ArrayList<Row> users = new ArrayList<>();
 
     public boolean isEmpty() {
         return groups.isEmpty() && channels.isEmpty() && bots.isEmpty();
@@ -37,6 +39,14 @@ public void addBot(Row bot) {
         addRow(bots, bot);
     }
 
+    public void addUser(Row user) {
+        addRow(users, user);
+    }
+
+    public void addSticker(Row sticker) {
+        addRow(stickers, sticker);
+    }
+
     private void addRow(ArrayList<Row> rows, Row data) {
         for(Row row : rows) {
             if(row.id == data.id) {
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
index c5498a282..c56e00ca7 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
@@ -1,15 +1,22 @@
 package org.cloudveil.messenger.api.model.response;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 
 /**
  * Created by Dmitriy on 05.02.2018.
  */
 
 public class SettingsResponse {
-    public ArrayList<Long> channels;
-    public ArrayList<Long> bots;
-    public ArrayList<Long> groups;
+    public class AccessList {
+        public ArrayList<HashMap<Long, Boolean>> groups;
+        public ArrayList<HashMap<Long, Boolean>> bots;
+        public ArrayList<HashMap<Long, Boolean>> channels;
+        public ArrayList<HashMap<Long, Boolean>> users;
+        public ArrayList<HashMap<Long, Boolean>> stickers;
+
+    }
+    public AccessList access;
 
     public boolean secretChat;
     public int secretChatMinimumLength;
@@ -18,5 +25,7 @@
     public boolean disableBioChange;
     public boolean disableProfilePhoto;
     public boolean disableProfilePhotoChange;
+    public boolean disableStickers;
+    public boolean manageUsers;
     public boolean inputToggleVoiceVideo;
 }
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index d99492063..6de1a6d2a 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -20,11 +20,13 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
 import io.reactivex.android.schedulers.AndroidSchedulers;
@@ -71,7 +73,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
         if (intent != null && intent.getAction() != null && intent.getAction().equals(ACTION_CHECK_CHANNELS)) {
             handler.removeCallbacks(checkDataRunnable);
             long additionalId = intent.getLongExtra(EXTRA_ADDITION_DIALOG_ID, 0);
-            if(additionalId != 0) {
+            if (additionalId != 0) {
                 additionalDialogId = additionalId;
             }
 
@@ -91,6 +93,7 @@ private void sendDataCheckRequest() {
         final SettingsRequest request = new SettingsRequest();
         addDialogsToRequest(request);
         addInlineBotsToRequest(request);
+        addStickersToRequest(request);
 
         request.userPhone = UserConfig.getCurrentUser().phone;
         request.userId = UserConfig.getCurrentUser().id;
@@ -104,7 +107,7 @@ private void sendDataCheckRequest() {
         final SettingsResponse cached = loadFromCache();
         if (!ConnectionsManager.isNetworkOnline()) {
             if (cached != null) {
-                processResponse(request, cached);
+                processResponse(cached);
             }
             return;
         }
@@ -117,7 +120,7 @@ private void sendDataCheckRequest() {
 
                     @Override
                     public void accept(SettingsResponse settingsResponse) throws Exception {
-                        processResponse(request, settingsResponse);
+                        processResponse(settingsResponse);
                         freeSubscription();
 
                         saveToCache(settingsResponse);
@@ -127,7 +130,7 @@ public void accept(SettingsResponse settingsResponse) throws Exception {
                     public void accept(Throwable throwable) throws Exception {
                         freeSubscription();
                         if (cached != null) {
-                            processResponse(request, cached);
+                            processResponse(cached);
                         }
                     }
                 });
@@ -147,26 +150,53 @@ private void addInlineBotsToRequest(SettingsRequest request) {
         }
     }
 
-    private void processResponse(@NonNull SettingsRequest request, @NonNull SettingsResponse settingsResponse) {
-        ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
-        allowedDialogs.clear();
-        for (Long channelId : settingsResponse.channels) {
-            allowedDialogs.put(channelId, true);
+    private void addStickersToRequest(SettingsRequest request) {
+        for (int i = 0; i < StickersQuery.getStickersSetTypesCount(); i++) {
+            addStickerSetToRequest(StickersQuery.getStickerSets(i), request);
+        }
+
+        ArrayList<TLRPC.StickerSetCovered> featuredStickerSets = StickersQuery.getFeaturedStickerSetsUnfiltered();
+        for (TLRPC.StickerSetCovered stickerSetCovered : featuredStickerSets) {
+            addStickerSetToRequest(stickerSetCovered.set, request);
         }
-        for (Long groupId : settingsResponse.groups) {
-            allowedDialogs.put(groupId, true);
+    }
+
+    private void addStickerSetToRequest(ArrayList<TLRPC.TL_messages_stickerSet> stickerSets, SettingsRequest request) {
+        for (TLRPC.TL_messages_stickerSet set : stickerSets) {
+            addStickerSetToRequest(set.set, request);
         }
+    }
+
+    private void addStickerSetToRequest(TLRPC.StickerSet stickerSet, SettingsRequest request) {
+        SettingsRequest.Row row = new SettingsRequest.Row();
+        row.id = stickerSet.id;
+        row.title = stickerSet.title;
+        row.userName = stickerSet.short_name;
+
+        request.addSticker(row);
+    }
+
+    private void processResponse(@NonNull SettingsResponse settingsResponse) {
+        ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
+        allowedDialogs.clear();
+
+        appendAllowedDialogs(allowedDialogs, settingsResponse.access.channels);
+        appendAllowedDialogs(allowedDialogs, settingsResponse.access.groups);
+        appendAllowedDialogs(allowedDialogs, settingsResponse.access.users);
 
         ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
         allowedBots.clear();
-        for (Long groupId : settingsResponse.bots) {
-            allowedBots.put(groupId, true);
+        appendAllowedDialogs(allowedBots, settingsResponse.access.bots);
+
+        StickersQuery.allowedStickerSets.clear();
+        for (HashMap<Long, Boolean> data : settingsResponse.access.stickers) {
+            Long stickerId = data.keySet().iterator().next();
+            Boolean allowed = data.values().iterator().next();
+            if (allowed) {
+                StickersQuery.allowedStickerSets.add(stickerId);
+            }
         }
 
-        addBlackListedDialogs(request.channels);
-        addBlackListedDialogs(request.groups);
-        addBlackListedBots(request.bots);
-
         GlobalSecuritySettings.setDisableSecretChat(!settingsResponse.secretChat);
         GlobalSecuritySettings.setMinSecretChatTtl(settingsResponse.secretChatMinimumLength);
 
@@ -175,25 +205,17 @@ private void processResponse(@NonNull SettingsRequest request, @NonNull Settings
         GlobalSecuritySettings.setLockDisableOwnPhoto(settingsResponse.disableProfilePhotoChange);
         GlobalSecuritySettings.setLockDisableOthersPhoto(settingsResponse.disableProfilePhoto);
         GlobalSecuritySettings.setDisabledVideoInlineRecording(!settingsResponse.inputToggleVoiceVideo);
+        GlobalSecuritySettings.setLockDisableStickers(settingsResponse.disableStickers);
+        GlobalSecuritySettings.setManageUsers(settingsResponse.manageUsers);
 
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
     }
 
-    private void addBlackListedDialogs(ArrayList<SettingsRequest.Row> rows) {
-        ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
-        for (SettingsRequest.Row dlg : rows) {
-            if (!allowedDialogs.containsKey(dlg.id)) {
-                allowedDialogs.put(dlg.id, false);
-            }
-        }
-    }
-
-    private void addBlackListedBots(ArrayList<SettingsRequest.Row> rows) {
-        ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
-        for (SettingsRequest.Row dlg : rows) {
-            if (!allowedBots.containsKey(dlg.id)) {
-                allowedBots.put(dlg.id, false);
-            }
+    private void appendAllowedDialogs(ConcurrentHashMap<Long, Boolean> allowedDialogs, ArrayList<HashMap<Long, Boolean>> groups) {
+        for (HashMap<Long, Boolean> data : groups) {
+            Long id = data.keySet().iterator().next();
+            Boolean value = data.values().iterator().next();
+            allowedDialogs.put(id, value);
         }
     }
 
@@ -231,7 +253,7 @@ private void addDialogsToRequest(@NonNull SettingsRequest request) {
         addDialogsToRequest(request, MessagesController.getInstance().dialogsGroupsOnly);
         addDialogsToRequest(request, MessagesController.getInstance().dialogsServerOnly);
 
-        if(additionalDialogId != 0) {
+        if (additionalDialogId != 0) {
             addDialogToRequest(additionalDialogId, request);
             additionalDialogId = 0;
         }
@@ -285,11 +307,15 @@ private void addDialogToRequest(long currentDialogId, @NonNull SettingsRequest r
                 request.addGroup(row);
             }
         } else if (user != null) {
-            if (user.bot) {
+            if (!user.self) {
                 row.id = user.id;
-                row.title = user.username;
+                row.title = user.first_name + " " + user.last_name;
                 row.userName = user.username;
-                request.addBot(row);
+                if (user.bot) {
+                    request.addBot(row);
+                } else {
+                    request.addUser(row);
+                }
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 2a120f412..b9f2c83c5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -1,5 +1,5 @@
 /*
- * This is the source code of Telegram for Android v. 4.x.x.
+ * This is the source code of Telegram for Android v. 3.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
@@ -11,15 +11,14 @@
 public class BuildVars {
     public static boolean DEBUG_VERSION = false;
     public static boolean DEBUG_PRIVATE_VERSION = false;
-    public static int BUILD_VERSION = 1155;
-    public static String BUILD_VERSION_STRING = "4.6";
-    public static int APP_ID = 17544; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = "e0023208d2cfd01c7211e97e9f0a8801"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "ef9e1199d834442a85d416613999bb58";
-    public static String HOCKEY_APP_HASH_DEBUG = "ef9e1199d834442a85d416613999bb58";
+    public static int BUILD_VERSION = 1043;
+    public static String BUILD_VERSION_STRING = "4.2";
+    public static int APP_ID = 66408; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "2db8d372e3978a884a38ee57d04d4ee1"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static String HOCKEY_APP_HASH = "e683f2bc25474272a9d987ffc3c73763";
+    public static String HOCKEY_APP_HASH_DEBUG = "e683f2bc25474272a9d987ffc3c73763";
     public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
     public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
     public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
-    public static String GOOGLE_API_KEY = "";
     public static String FOURSQUARE_API_VERSION = "20150326";
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index fabdcb73a..63423e30a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -9041,6 +9041,9 @@ public boolean isUserAllowed(TLRPC.User user) {
             }
             long id = (long) user.id;
             return !allowedBots.containsKey(id) || allowedBots.get(id);
+        } else if(GlobalSecuritySettings.getManageUsers()) {
+            long id = (long) user.id;
+            return !allowedDialogs.containsKey(id) || allowedDialogs.get(id);
         }
         return true;
     }
@@ -9119,6 +9122,8 @@ public boolean isDialogCheckedOnServer(long currentDialogId) {
             if (user.bot) {
                 long id = (long) user.id;
                 return allowedBots.containsKey(id);
+            } else if(GlobalSecuritySettings.getManageUsers()) {
+                return allowedDialogs.containsKey(currentDialogId);
             }
             return true;
         }
@@ -9132,6 +9137,10 @@ public boolean isDialogCheckedOnServer(long currentDialogId) {
 
 
     public boolean isMessageAllowed(MessageObject messageObject) {
+        if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.document != null && !StickersQuery.isStickerAllowed(messageObject.messageOwner.media.document)) {
+            return false;
+        }
+
         if (messageObject.messageOwner.via_bot_id <= 0) {
             return true;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
index 556532a23..178a3c909 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
@@ -13,6 +13,7 @@
 import android.content.SharedPreferences;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
@@ -45,7 +46,7 @@
     public static final int TYPE_MASK = 1;
     public static final int TYPE_FAVE = 2;
 
-    private static ArrayList<TLRPC.TL_messages_stickerSet> stickerSets[] = new ArrayList[] {new ArrayList<>(), new ArrayList<>()};
+    private static ArrayList<TLRPC.TL_messages_stickerSet> stickerSets[] = new ArrayList[]{new ArrayList<>(), new ArrayList<>()};
     private static HashMap<Long, TLRPC.TL_messages_stickerSet> stickerSetsById = new HashMap<>();
     private static HashMap<Long, TLRPC.TL_messages_stickerSet> groupStickerSets = new HashMap<>();
     private static HashMap<String, TLRPC.TL_messages_stickerSet> stickerSetsByName = new HashMap<>();
@@ -59,7 +60,7 @@
     private static HashMap<Long, String> stickersByEmoji = new HashMap<>();
     private static HashMap<String, ArrayList<TLRPC.Document>> allStickers = new HashMap<>();
 
-    private static ArrayList<TLRPC.Document> recentStickers[] = new ArrayList[] {new ArrayList<>(), new ArrayList<>(), new ArrayList<>()};
+    private static ArrayList<TLRPC.Document> recentStickers[] = new ArrayList[]{new ArrayList<>(), new ArrayList<>(), new ArrayList<>()};
     private static boolean loadingRecentStickers[] = new boolean[3];
     private static boolean recentStickersLoaded[] = new boolean[3];
 
@@ -76,6 +77,10 @@
     private static boolean loadingFeaturedStickers;
     private static boolean featuredStickersLoaded;
 
+    //CloudVeil start
+    public static ArrayList<Long> allowedStickerSets = new ArrayList<>();
+    //CloudVeil end
+
     public static void cleanup() {
         for (int a = 0; a < 3; a++) {
             recentStickers[a].clear();
@@ -117,13 +122,46 @@ public static void checkFeaturedStickers() {
         }
     }
 
+    //CloudVeil Start
+    public static int getStickersSetTypesCount() {
+        return stickerSets.length;
+    }
+
+    public static boolean isStickerAllowed(TLRPC.Document doc) {
+        if(doc == null) {
+            return true;
+        }
+        long id = getStickerSetId(doc);
+        if(id < 0) {
+            return true;
+        }
+        return isStickerAllowed(id);
+    }
+
+    public static boolean isStickerAllowed(TLRPC.TL_messages_stickerSet stickerSet) {
+        return isStickerAllowed(stickerSet.set.id);
+    }
+
+    public static boolean isStickerAllowed(long id) {
+        return !GlobalSecuritySettings.isLockDisableStickers() && allowedStickerSets.contains(id);
+    }
+
     public static ArrayList<TLRPC.Document> getRecentStickers(int type) {
-        return new ArrayList<>(recentStickers[type]);
+        ArrayList<TLRPC.Document> stickers = new ArrayList<>();
+        for (TLRPC.Document doc : recentStickers[type]) {
+            if (isStickerAllowed(doc)) {
+                stickers.add(doc);
+            }
+        }
+
+        return stickers;
     }
 
+
     public static ArrayList<TLRPC.Document> getRecentStickersNoCopy(int type) {
-        return recentStickers[type];
+        return getRecentStickers(type);
     }
+    //CloudVeil end
 
     public static boolean isStickerInFavorites(TLRPC.Document document) {
         for (int a = 0; a < recentStickers[TYPE_FAVE].size(); a++) {
@@ -267,12 +305,19 @@ public static boolean isLoadingStickers(int type) {
         return loadingStickers[type];
     }
 
+    //CloudVeil start
     public static TLRPC.TL_messages_stickerSet getStickerSetByName(String name) {
-        return stickerSetsByName.get(name);
+        if (isStickerAllowed(stickerSetsByName.get(name))) {
+            return stickerSetsByName.get(name);
+        }
+        return null;
     }
 
     public static TLRPC.TL_messages_stickerSet getStickerSetById(Long id) {
-        return stickerSetsById.get(id);
+        if (isStickerAllowed(id)) {
+            return stickerSetsById.get(id);
+        }
+        return null;
     }
 
     public static TLRPC.TL_messages_stickerSet getGroupStickerSetById(TLRPC.StickerSet stickerSet) {
@@ -285,8 +330,13 @@ public static boolean isLoadingStickers(int type) {
                 loadGroupStickerSet(stickerSet, false);
             }
         }
+        if(set != null && !isStickerAllowed(set)) {
+            return null;
+        }
+
         return set;
     }
+    //CloudVeil end
 
     public static void putGroupStickerSet(TLRPC.TL_messages_stickerSet stickerSet) {
         groupStickerSets.put(stickerSet.set.id, stickerSet);
@@ -379,9 +429,24 @@ public void run() {
         }
     }
 
+    //CloudVeil start
     public static HashMap<String, ArrayList<TLRPC.Document>> getAllStickers() {
         return allStickers;
     }
+    public static ArrayList<TLRPC.StickerSetCovered> getFeaturedStickerSetsUnfiltered() {
+        return featuredStickerSets;
+    }
+
+    public static ArrayList<TLRPC.StickerSetCovered> getFeaturedStickerSets() {
+        ArrayList<TLRPC.StickerSetCovered> res = new ArrayList<>();
+        for(TLRPC.StickerSetCovered covered : featuredStickerSets) {
+            if(isStickerAllowed(covered.set.id)) {
+                res.add(covered);
+            }
+        }
+        return res;
+    }
+    //CloudVeil end
 
     public static boolean canAddStickerToFavorites() {
         return !stickersLoaded[0] || stickerSets[0].size() >= 5 || !recentStickers[TYPE_FAVE].isEmpty();
@@ -391,9 +456,6 @@ public static boolean canAddStickerToFavorites() {
         return stickerSets[type];
     }
 
-    public static ArrayList<TLRPC.StickerSetCovered> getFeaturedStickerSets() {
-        return featuredStickerSets;
-    }
 
     public static ArrayList<Long> getUnreadStickerSets() {
         return unreadStickerSets;
@@ -1267,9 +1329,12 @@ public void run() {
 
                         for (int a = 0; a < res.size(); a++) {
                             TLRPC.TL_messages_stickerSet stickerSet = res.get(a);
-                            if (stickerSet == null) {
+                            //CloudVeil start
+                            if (stickerSet == null || !isStickerAllowed(stickerSet)) {
                                 continue;
                             }
+                            //CloudVeil end
+
                             stickerSetsNew.add(stickerSet);
                             stickerSetsByIdNew.put(stickerSet.set.id, stickerSet);
                             stickerSetsByNameNew.put(stickerSet.set.short_name, stickerSet);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
index 3a6d5b2f3..4c6a87114 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
@@ -197,7 +197,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
         } else if (i == stickers.size() - 1) {
             side = 1;
         }
-        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.isLockDisableStickers()) {
             ((StickerCell) viewHolder.itemView).setSticker(stickers.get(i), side);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
index 943120279..7c6daea25 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
@@ -88,7 +88,7 @@ public PhotoPickerSearchCell(Context context, boolean allowGifs) {
         setOrientation(HORIZONTAL);
 
         /* Start Disable Giphy */
-        if (!GlobalSecuritySettings.LOCK_DISABLE_GIFS) {
+        if (!GlobalSecuritySettings.isLockDisableGifs()) {
             SearchButton searchButton = new SearchButton(context);
             searchButton.textView1.setText(LocaleController.getString("SearchImages", R.string.SearchImages));
             searchButton.textView2.setText(LocaleController.getString("SearchImagesInfo", R.string.SearchImagesInfo));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
index 2e0ea0043..60b53b871 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
@@ -64,7 +64,8 @@ public void setRecent(boolean value) {
     }
 
     public void setSticker(TLRPC.Document document, boolean showEmoji) {
-        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+        //CloudVeil start
+        if (!GlobalSecuritySettings.isLockDisableStickers() && StickersQuery.isStickerAllowed(document)) {
             if (document != null) {
                 sticker = document;
                 if (document.thumb != null) {
@@ -92,6 +93,7 @@ public void setSticker(TLRPC.Document document, boolean showEmoji) {
                 }
             }
         }
+        //CloudVeil end
     }
 
     public void disable() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 79c49ce2b..6cc5500bd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -174,7 +174,6 @@
 
 import java.io.File;
 import java.net.URLDecoder;
-import java.nio.channels.Channel;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collections;
@@ -4309,7 +4308,7 @@ private void showGifHint() {
             return;
         }
         //CloudVeil Start
-        if (GlobalSecuritySettings.LOCK_DISABLE_GIFS) {
+        if (GlobalSecuritySettings.isLockDisableGifs()) {
             return;
         }
         //CloudVeil End
@@ -8670,9 +8669,7 @@ public void run() {
         }
 
         //CloudVeil start
-        for(MessageObject message : messages) {
-            messagesOld.add(message);
-        }
+        backupMessages();
         if (MessagesController.getInstance().isDialogCheckedOnServer(dialog_id)) {
             messages = MessagesController.getInstance().filterMessages(messages);
         } else {
@@ -8684,6 +8681,13 @@ public void run() {
         //CloudVeil end
     }
 
+    private void backupMessages() {
+        messagesOld.clear();
+        for(MessageObject m : messages) {
+            messagesOld.add(m);
+        }
+    }
+
     public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline button) {
         if (inlineReturn == 0 || button.same_peer || parentLayout == null) {
             return false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 4269f5aa3..367a8b51b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -1556,13 +1556,13 @@ public void setAllowStickersAndGifs(boolean value, boolean value2) {
             emojiView = null;
         }
         allowStickers = value;
-        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.isLockDisableStickers()) {
             allowStickers = value;
         } else {
             allowStickers = false;
         }
 
-        if (!GlobalSecuritySettings.LOCK_DISABLE_GIFS) {
+        if (!GlobalSecuritySettings.isLockDisableGifs()) {
             allowGifs = value2;
         } else {
             allowGifs = false;
@@ -3043,7 +3043,7 @@ private void createEmojiView() {
             return;
         }
         emojiView = new EmojiView(allowStickers, allowGifs, parentActivity, info);
-        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.isLockDisableStickers()) {
             emojiView = new EmojiView(allowStickers, allowGifs, parentActivity,info);
         } else {
             emojiView = new EmojiView(false, false, parentActivity,info);
@@ -3153,7 +3153,7 @@ public void onShowStickerSet(TLRPC.StickerSet stickerSet, TLRPC.InputStickerSet
                 if (parentFragment == null || parentActivity == null) {
                     return;
                 }
-                if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+                if (!GlobalSecuritySettings.isLockDisableStickers()) {
                     if (stickerSet != null) {
                         inputStickerSet = new TLRPC.TL_inputStickerSetID();
                         inputStickerSet.access_hash = stickerSet.access_hash;
@@ -3254,8 +3254,7 @@ private boolean allowDragging(){
 
     @Override
     public void onStickerSelected(TLRPC.Document sticker) {
-        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
-        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.isLockDisableStickers()) {
             SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
         }
         if (delegate != null) {
@@ -3265,7 +3264,7 @@ public void onStickerSelected(TLRPC.Document sticker) {
 
     public void addStickerToRecent(TLRPC.Document sticker) {
         createEmojiView();
-        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.isLockDisableStickers()) {
             emojiView.addRecentSticker(sticker);
         }
     }
@@ -3365,7 +3364,7 @@ private void setEmojiButtonImage() {
         if (currentPage == 0 || !allowStickers && !allowGifs) {
             emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
         } else if (currentPage == 1) {
-            if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+            if (!GlobalSecuritySettings.isLockDisableStickers()) {
                 emojiButton.setImageResource(R.drawable.ic_msg_panel_stickers);
             }
         } else if (currentPage == 2) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 39bbf2622..fa3a4f1ed 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -726,7 +726,7 @@ public boolean onTouch(View v, MotionEvent event) {
                     return StickerPreviewViewer.getInstance().onTouch(event, stickersGridView, EmojiView.this.getMeasuredHeight(), stickersOnItemClickListener, stickerPreviewViewerDelegate);
                 }
             });
-            if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+            if (!GlobalSecuritySettings.isLockDisableStickers()) {
                 stickersOnItemClickListener = new RecyclerListView.OnItemClickListener() {
                     @Override
                     public void onItemClick(View view, int position) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
index 022a8bca4..759b66eb8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
@@ -186,7 +186,7 @@ public void onItemClick(int id) {
         listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
             @Override
             public void onItemClick(View view, int position) {
-                if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
+                if (!GlobalSecuritySettings.isLockDisableStickers()) {
                     if (position >= stickersStartRow && position < stickersEndRow && getParentActivity() != null) {
                         sendReorder();
                         final TLRPC.TL_messages_stickerSet stickerSet = StickersQuery.getStickerSets(currentType).get(position - stickersStartRow);
