diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index 8ffd96d06..3d4b0825a 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -1,6 +1,7 @@
 package org.pollgram.decision.service;
 
 import android.support.annotation.NonNull;
+import android.text.Spannable;
 
 import org.pollgram.R;
 import org.pollgram.decision.data.Decision;
@@ -8,6 +9,7 @@
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.MessageObject;
 
 import java.text.ParseException;
 import java.util.Collection;
@@ -20,6 +22,8 @@
 public interface PollgramMessagesManager {
 
 
+    void addDecisionURLSpan(MessageType type, Spannable charSequence);
+
     /**
      * The different messages type managed by Pollgram
      * Emoji codes are taken from http://apps.timwhitlock.info/emoji/tables/unicode#block-6a-additional-emoticons
@@ -62,6 +66,12 @@ public String getDescription() {
 
     }
 
+    /**
+     * @param messageObject
+     * @return the group chat id of this message or -1 if this message is not a group chat message
+     */
+    int getMessageGroupId(MessageObject messageObject);
+
     /**
      * @param msg message to parse
      * @return whether the message is a pollgram transaction message it returns the message type,
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index 9dfdd9f1a..cbb79b8cc 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -1,6 +1,7 @@
 package org.pollgram.decision.service;
 
 import android.content.Context;
+import android.text.Spannable;
 import android.util.Log;
 
 import org.pollgram.R;
@@ -11,6 +12,9 @@
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.MessageObject;
+import org.telegram.ui.Components.URLSpanNoUnderline;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -93,7 +97,7 @@ public String buildRemindMessage(String userAsString, Decision decision) {
         StringBuilder body = new StringBuilder();
         body.append(context.getString(R.string.tmsg_RemindToVoteP1));
         body.append(' ');
-        body.append(format(userAsString));
+        body.append(userAsString);
         body.append(' ');
         body.append(context.getString(R.string.tmsg_RemindToVoteP2));
         body.append(NEW_LINE);
@@ -217,7 +221,13 @@ protected String buildMessage(MessageType type, String messageBody) {
 
     @Override
     public String reformatMessage(String message) {
-        return message.replace(getTailingString(), "");
+        // remove talning string
+        MessageType type = getMessageType(message);
+        if (type == null) {
+            return  message;
+        }
+        message = message.replace(getTailingString(), "");
+        return  message;
     }
 
     /**
@@ -243,6 +253,24 @@ public MessageType getMessageType(String msg){
         return null;
     }
 
+    @Override
+    public int getMessageGroupId(MessageObject messageObject) {
+        if (messageObject.messageOwner == null)
+            return -1;
+
+        if (messageObject.messageOwner.dialog_id > 0){
+            Log.d(LOG_TAG,"message.messageOwner.dialog_id positive, in not a group chat");
+            return -1;
+        }
+
+        int groupChatId = (int)(messageObject.messageOwner.dialog_id * -1);
+        if (ChatObject.isChannel(groupChatId)){
+            Log.d(LOG_TAG,"is a channel");
+            return -1;
+        }
+
+        return groupChatId;
+    }
 
     @Override
     public Collection<Vote> getVotes(String msg, int currentChat, Date messageDate ,int userId) throws PollgramParseException {
@@ -339,7 +367,7 @@ public ClosedDecisionDate getCloseDecision(String msg, int currentChat) throws P
     @Override
     public Decision getDeleteDecision(String text, int groupChatId) throws PollgramParseException {
         Decision d = getDecisionInDeleteOrReopenMessage(text, groupChatId);
-        Log.d(LOG_TAG, "getDeleteDecision Decision["+d+"]");
+        Log.d(LOG_TAG, "getDeleteDecision Decision[" + d + "]");
         return d;
     }
 
@@ -372,5 +400,43 @@ private Decision getDecisionInDeleteOrReopenMessage(String msg, int groupChatId)
         }
     }
 
+    private int getDecisionTitleStartIdx(MessageType type, String message){
+        switch (type){
+            // Actually in all messageType decision title is always the first QUTE_CHAR token
+            case VOTE:
+            case REMIND_TO_VOTE:
+            case CLOSE_DECISION:
+            case DELETE_DECISION:
+            case NEW_DECISION:
+            case REOPEN_DECISION:
+                return message.indexOf(QUOTE_CHAR);
+        }
+        return  -1;
+    }
+
+    private int getDecisionTitleEndIdx(String msgStr, int start) {
+        return start + msgStr.substring(start + 1).indexOf(QUOTE_CHAR) + 2;
+    }
+
+    @Override
+    public void addDecisionURLSpan(MessageType type, Spannable spannable) {
+        if (type == null){
+            Log.d(LOG_TAG, "Null message type no link added for["+spannable+"]");
+            return;
+        }
+        String msgStr = spannable.toString();
+        int start = getDecisionTitleStartIdx(type, msgStr);
+        if (start == -1){
+            Log.d(LOG_TAG, "Decision title start idx not found for[" + spannable + "]");
+            return;
+        }
+        int end = getDecisionTitleEndIdx(msgStr, start);
+
+        String linkStr = msgStr.subSequence(start, end).toString();
+        Log.d(LOG_TAG, "Link string is ["+linkStr+"]");
+        URLSpanNoUnderline url = new URLSpanNoUnderline(linkStr);
+        spannable.setSpan(url, start, end, 0);
+    }
+
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index c431b9d2e..bfea369cb 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -1,5 +1,8 @@
 package org.pollgram.decision.service;
 
+import android.os.Bundle;
+import android.text.style.ClickableSpan;
+
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
@@ -43,6 +46,14 @@
 
     TLRPC.User getUser(int userid);
 
+    /**
+     *
+     * @param messageObject
+     * @param url
+     * @return a Bundle for invoking VoteMangerFragment, based on pollgram message
+     */
+    Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObject messageObject,final ClickableSpan url);
+
     /**
      * @param user
      * @return a string representation of the passed user.
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index a042aaee3..66341fd77 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -1,5 +1,7 @@
 package org.pollgram.decision.service;
 
+import android.os.Bundle;
+import android.text.style.ClickableSpan;
 import android.util.Log;
 import android.widget.Toast;
 
@@ -7,15 +9,16 @@
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.ui.VotesManagerFragment;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Components.URLSpanNoUnderline;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -141,14 +144,9 @@ public void processMessage(MessageObject message) {
             return;
         }
 
-        if (message.messageOwner.dialog_id > 0){
-            Log.d(NOT_PARSED_TAG,"message.messageOwner.dialog_id positive, in not a group chat");
-            return;
-        }
-
-        int groupChatId = (int)(message.messageOwner.dialog_id * -1);
-        if (ChatObject.isChannel(groupChatId)){
-            Log.d(NOT_PARSED_TAG,"is a channel");
+        int groupChatId = messageManager.getMessageGroupId(message);
+        if (groupChatId == -1){
+            Log.d(NOT_PARSED_TAG,"group chat id not found");
             return;
         }
 
@@ -255,4 +253,31 @@ public String asString(TLRPC.User user){
         }
     }
 
+    @Override
+    public Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObject messageObject, ClickableSpan url) {
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(messageObject.messageText.toString());
+        if (type == null) {
+            return null;
+        }
+        int groupChatId = messageManager.getMessageGroupId(messageObject);
+        if (groupChatId == -1) {
+            return null;
+        }
+        String decisionTitle = ((URLSpanNoUnderline) url).getURL();
+        decisionTitle = decisionTitle.replace("'", "");
+        Decision d = PollgramFactory.getPollgramDAO().getDecision(decisionTitle, groupChatId);
+        if (d == null) {
+            return null;
+        }
+        int[] participantsUserIds = new int[info.participants.participants.size()];
+        for (int i = 0; i < info.participants.participants.size(); i++) {
+            participantsUserIds[i] = info.participants.participants.get(i).user_id;
+        }
+        Bundle bundle = new Bundle();
+        bundle.putLong(VotesManagerFragment.PAR_GROUP_CHAT_ID, groupChatId);
+        bundle.putLong(VotesManagerFragment.PAR_DECISION_ID, d.getId());
+        bundle.putIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
+        return  bundle;
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
index 2873f14dc..35148d1ab 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
@@ -7,6 +7,7 @@
  */
 
 package org.telegram.messenger;
+
 import android.graphics.Paint;
 import android.graphics.Typeface;
 import android.text.Layout;
@@ -21,6 +22,7 @@
 
 import org.pollgram.R;
 import org.pollgram.decision.service.PollgramFactory;
+import org.pollgram.decision.service.PollgramMessagesManager;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.TypefaceSpan;
@@ -90,10 +92,11 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         if (message.replyMessage != null) {
             replyMessageObject = new MessageObject(message.replyMessage, users, false);
         }
-
-        if (messageOwner.message != null){
+        // If i want to change format in a more deeper way i can evn add a new atribute like (orginal message)
+        // where i can save the original message without any modification, but if it is not necessary
+        // why doing it
+        if (messageOwner.message != null)
             messageOwner.message = PollgramFactory.getPollgramMessagesManager().reformatMessage(messageOwner.message);
-        }
 
         if (message instanceof TLRPC.TL_messageService) {
             if (message.action != null) {
@@ -355,7 +358,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                 messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
             }
         } else {
-            messageText = message.message;
+            messageText =messageOwner.message;
         }
         if (generateLayout) {
             messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
@@ -436,6 +439,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
 
         generateCaption();
         if (generateLayout) {
+            addPollgramLinks(messageText);
             generateLayout();
         }
         generateThumbs(false);
@@ -587,6 +591,7 @@ private static boolean containsUrls(CharSequence message) {
             } else if (!(c != ' ' && digitsInRow > 0)) {
                 digitsInRow = 0;
             }
+            // POLLGRAM Check
             if ((c == '@' || c == '#' || c == '/') && i == 0 || i != 0 && (message.charAt(i - 1) == ' ' || message.charAt(i - 1) == '\n')) {
                 return true;
             }
@@ -670,6 +675,18 @@ private static void addUsernamesAndHashtags(CharSequence charSequence) {
         }
     }
 
+    private static void addPollgramLinks(CharSequence charSequence) {
+        PollgramMessagesManager manager = PollgramFactory.getPollgramMessagesManager();
+        try {
+            PollgramMessagesManager.MessageType type = manager.getMessageType(charSequence.toString());
+            if (type == null)
+                return;
+            manager.addDecisionURLSpan(type, (Spannable)charSequence);
+        } catch (Exception e) {
+            FileLog.e("pollgramLink", e);
+        }
+    }
+
     public static void addLinks(CharSequence messageText) {
         if (messageText instanceof Spannable && containsUrls(messageText)) {
             if (messageText.length() < 100) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 794c8ecdb..f447ba352 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -30,7 +30,6 @@
 import android.text.TextUtils;
 import android.text.style.ClickableSpan;
 import android.util.Base64;
-import android.util.Log;
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 import android.util.TypedValue;
@@ -51,7 +50,9 @@
 import android.widget.Toast;
 
 import org.pollgram.R;
+import org.pollgram.decision.service.PollgramFactory;
 import org.pollgram.decision.ui.DecisionsListFragment;
+import org.pollgram.decision.ui.VotesManagerFragment;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
@@ -903,7 +904,6 @@ public View getRevealView() {
 
         /// uuuuu add button
         boolean isChannel = ChatObject.isChannel(currentChat);
-        Log.i("AAAZZZ","isChannel = "+isChannel);
         if (currentChat != null && !isChannel) { // only incase of a group chat
             ImageView aNewButton = new ImageView(context);
             aNewButton.setScaleType(ImageView.ScaleType.CENTER);
@@ -3949,12 +3949,6 @@ public void run() {
                     }
                 }
 
-                // TODO _POLLGRAM HERE THE MESSAGES ARE PARSED !!!! YEAH !!!
-                // From here pass even the message that i send
-//                for (MessageObject msgObj : arr) {
-//                    PollgramFactory.getPollgramService().processMessage(msgObj);
-//                }
-
                 ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                 if (!forward_end_reached) {
                     int currentMaxDate = Integer.MIN_VALUE;
@@ -5987,6 +5981,13 @@ public void didPressUrl(MessageObject messageObject, final ClickableSpan url) {
                                 }
                             } else if (str.startsWith("/")) {
                                 chatActivityEnterView.setCommand(messageObject, str);
+                            } else {
+                                // Pollgram decision tile link to vote manager
+                                Bundle bundle = PollgramFactory.getPollgramService().
+                                        getBundleForVotesManagerFragment(info, messageObject, url);
+                                if (bundle != null) {
+                                    presentFragment(new VotesManagerFragment(bundle));
+                                }
                             }
                         } else if (url instanceof URLSpanReplacement) {
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
