diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index b73778a24..87547dd5f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -115,6 +115,7 @@ public void setImage(TLObject path, String filter, Drawable thumb, int size, Str
         setImage(path, null, filter, thumb, null, null, size, ext, cacheOnly);
     }
 
+    //TODO ser image by url. investigate the method nad new parameters.
     public void setImage(String httpUrl, String filter, Drawable thumb, String ext, int size) {
         setImage(null, httpUrl, filter, thumb, null, null, size, ext, true);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 2092d378c..bafc88956 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -17,6 +17,10 @@
 
 public class NotificationCenter {
 
+    public static final int venuesNeedReload = -1;
+    public static final int postsNeedReload = -2;
+
+
     private static int totalEvents = 1;
 
     public static final int didReceivedNewMessages = totalEvents++;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
new file mode 100644
index 000000000..388907731
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -0,0 +1,170 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.android;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.dto.PostResponse;
+import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.service.mock.PostServiceMock;
+
+import java.util.ArrayList;
+import java.util.concurrent.ConcurrentHashMap;
+
+//import org.telegram.messenger.TLRPC;
+
+// TODO-aragats
+//TODO Look at MessagesController methods. There are many good examples and best practice.
+public class PostsController implements NotificationCenter.NotificationCenterDelegate {
+
+
+
+    public ArrayList<PostObject> postObjects = new ArrayList<>();
+    public ConcurrentHashMap<String, PostObject> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
+
+    public int totalDialogsCount = 0;
+    public boolean loadingPosts = false;
+
+
+    public int fontSize = AndroidUtilities.dp(16);
+
+
+    public static final int UPDATE_MASK_NAME = 1;
+    public static final int UPDATE_MASK_AVATAR = 2;
+    public static final int UPDATE_MASK_STATUS = 4;
+    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
+    public static final int UPDATE_MASK_CHAT_NAME = 16;
+    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
+    public static final int UPDATE_MASK_USER_PRINT = 64;
+    public static final int UPDATE_MASK_USER_PHONE = 128;
+    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
+    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
+    public static final int UPDATE_MASK_PHONE = 1024;
+    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
+    public static final int UPDATE_MASK_SEND_STATE = 4096;
+    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
+
+
+
+    private static volatile PostsController Instance = null;
+
+    public static PostsController getInstance() {
+        PostsController localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (PostsController.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new PostsController();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    public PostsController() {
+        ImageLoader.getInstance();
+        MessagesStorage.getInstance();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+
+        preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+
+        fontSize = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
+        String disabledFeaturesString = preferences.getString("disabledFeatures", null);
+
+    }
+
+
+    public void updateConfig() {
+
+    }
+
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        //TODO perform some action when receive observing notification
+    }
+
+    public void cleanUp() {
+        ContactsController.getInstance().cleanup();
+        MediaController.getInstance().cleanup();
+        NotificationsController.getInstance().cleanup();
+        SendMessagesHelper.getInstance().cleanUp();
+        SecretChatHelper.getInstance().cleanUp();
+
+        postsMap.clear();
+        postObjects.clear();
+
+        totalDialogsCount = 0;
+
+        loadingPosts = false;
+
+    }
+
+
+
+
+
+
+
+
+
+
+    public void deletePost(final String did, int offset, final boolean onlyHistory) {
+        // TODO Delete Post
+    }
+
+
+
+
+
+
+
+
+    public void loadPosts(final int offset, final int serverOffset, final int count, boolean fromCache) {
+        if (loadingPosts) {
+            return;
+        }
+        loadingPosts = true;
+//        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+
+        PostResponse postResponse = PostServiceMock.getPosts("location", null, offset, count);
+//        after getting response.
+        processLoadedPosts(postResponse, offset, count);
+
+    }
+
+
+
+    public void processLoadedPosts(PostResponse postResponse,  final int offset,  final int count) {
+        postObjects.addAll(PostServiceMock.convertPost(postResponse.getPosts()));
+        for (PostObject postObject : postObjects) {
+            postsMap.putIfAbsent(postObject.getId(), postObject);
+        }
+        loadingPosts = false;
+        //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
+        if (!postResponse.getPosts().isEmpty()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+        }
+
+
+    }
+
+
+
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
index 145807b46..e7a409a51 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
@@ -2,7 +2,6 @@
 
 import android.text.StaticLayout;
 
-import ru.aragats.whats.TLRPC;
 
 /**
  * Created by aragats on 27/12/14.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/PostResponse.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/PostResponse.java
index d582e2de2..9a2969ac0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/dto/PostResponse.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/PostResponse.java
@@ -3,7 +3,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import ru.aragats.android.object.PostObject;
 
 /**
  * Created by aragats on 09/05/15.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/object/PostObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/object/PostObject.java
new file mode 100644
index 000000000..3bafa1371
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/object/PostObject.java
@@ -0,0 +1,257 @@
+package org.telegram.messenger.object;
+
+import android.text.StaticLayout;
+
+import org.telegram.messenger.dto.Image;
+import org.telegram.messenger.dto.Post;
+
+
+/**
+ * Created by aragats on 27/12/14.
+ */
+public class PostObject {
+
+    public static class TextLayoutBlock {
+        public StaticLayout textLayout;
+        public float textXOffset = 0;
+        public float textYOffset = 0;
+        public int charactersOffset = 0;
+    }
+
+    private Post post;
+
+
+    public PostObject() {
+
+    }
+
+    public PostObject(Post post) {
+        this.post = post;
+    }
+
+
+    public String getId() {
+        return this.post.getId();
+    }
+
+    public long getCreatedDate() {
+        return this.post.getCreatedDate();
+    }
+
+    public String getMessage() {
+        return this.post.getMessage();
+    }
+
+    public String getAuthor() {
+        return this.post.getUser().getFirstName() + " " + post.getUser().getLastName();
+    }
+
+    public String getVenueName() {
+        return this.post.getVenue().getName();
+    }
+
+    public String getPreviewImageUrl() {
+        return this.post.getPreviewImage().getUrl();
+    }
+
+    public String getVenuePreviewImageUrl() {
+        return this.post.getVenue().getImage().getUrl();
+    }
+
+    public Image getPreviewImage() {
+        return this.post.getPreviewImage();
+    }
+
+    public Image getImage() {
+        return this.post.getImage();
+    }
+
+//    public PostObject(TLRPC.TL_dialog dialog) {
+//        peer = dialog.peer;
+//        top_message = dialog.top_message;
+//        unread_count = dialog.unread_count;
+//        notify_settings = dialog.notify_settings;
+//        last_message_date = dialog.last_message_date;
+//        id = dialog.id;
+//        last_read = dialog.last_read;
+//
+//    }
+//    //TODO change to private
+//    public TLRPC.Peer peer;
+//
+//    public int top_message;
+//    public int unread_count;
+//    public TLRPC.PeerNotifySettings notify_settings;
+//
+//    public int last_message_date;
+//    public int last_read;
+//
+//    public long id;
+//    private String message;
+//    private int date;
+//    private String user;
+//    private String venue;
+//    private String firstName;
+//    private String lastName;
+//    private String image;
+//    private int width;
+//    private int height;
+//
+//    //TODO should be enum.
+//    private int type;
+//
+//    private String attachPath;
+//
+//    private int size;
+//
+//    private String info;
+//
+//
+//    private String text;
+//
+//    private String fullImage;
+//
+//
+//
+//    public void setPostFromDialog(TLRPC.TL_dialog dialog) {
+//        peer = dialog.peer;
+//        top_message = dialog.top_message;
+//        unread_count = dialog.unread_count;
+//        notify_settings = dialog.notify_settings;
+//        last_message_date = dialog.last_message_date;
+//        id = dialog.id;
+//        last_read = dialog.last_read;
+//
+//    }
+//
+//
+//
+//    public long getId() {
+//        return id;
+//    }
+//
+//    public void setId(long id) {
+//        this.id = id;
+//    }
+//
+//
+//    public int getDate() {
+//        return date;
+//    }
+//
+//    public void setDate(int date) {
+//        this.date = date;
+//    }
+//
+//    public String getMessage() {
+//        return message;
+//    }
+//
+//    public void setMessage(String message) {
+//        this.message = message;
+//    }
+//
+//    public String getUser() {
+//        return user;
+//    }
+//
+//    public void setUser(String user) {
+//        this.user = user;
+//    }
+//
+//    public String getVenue() {
+//        return venue;
+//    }
+//
+//    public void setVenue(String venue) {
+//        this.venue = venue;
+//    }
+//
+//    public String getFirstName() {
+//        return firstName;
+//    }
+//
+//    public void setFirstName(String firstName) {
+//        this.firstName = firstName;
+//    }
+//
+//    public String getLastName() {
+//        return lastName;
+//    }
+//
+//    public void setLastName(String lastName) {
+//        this.lastName = lastName;
+//    }
+//
+//    public String getImage() {
+//        return image;
+//    }
+//
+//    public void setImage(String image) {
+//        this.image = image;
+//    }
+//
+//    public int getType() {
+//        return type;
+//    }
+//
+//    public void setType(int type) {
+//        this.type = type;
+//    }
+//
+//    public String getAttachPath() {
+//        return attachPath;
+//    }
+//
+//    public void setAttachPath(String attachPath) {
+//        this.attachPath = attachPath;
+//    }
+//
+//    public int getSize() {
+//        return size;
+//    }
+//
+//    public void setSize(int size) {
+//        this.size = size;
+//    }
+//
+//    public String getInfo() {
+//        return info;
+//    }
+//
+//    public void setInfo(String info) {
+//        this.info = info;
+//    }
+//
+//    public int getWidth() {
+//        return width;
+//    }
+//
+//    public void setWidth(int width) {
+//        this.width = width;
+//    }
+//
+//    public int getHeight() {
+//        return height;
+//    }
+//
+//    public void setHeight(int height) {
+//        this.height = height;
+//    }
+//
+//    public String getText() {
+//        return text;
+//    }
+//
+//    public void setText(String text) {
+//        this.text = text;
+//    }
+//
+//    public String getFullImage() {
+//        return fullImage;
+//    }
+//
+//    public void setFullImage(String fullImage) {
+//        this.fullImage = fullImage;
+//    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/object/UserObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/object/UserObject.java
new file mode 100644
index 000000000..201a5eb42
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/object/UserObject.java
@@ -0,0 +1,7 @@
+package org.telegram.messenger.object;
+
+/**
+ * Created by aragats on 27/12/14.
+ */
+public class UserObject {
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/object/VenueObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/object/VenueObject.java
new file mode 100644
index 000000000..2e3789f74
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/object/VenueObject.java
@@ -0,0 +1,121 @@
+package org.telegram.messenger.object;
+
+
+import org.telegram.messenger.dto.Venue;
+
+/**
+ * Created by aragats on 27/12/14.
+ */
+public class VenueObject {
+
+    private Venue venue;
+
+    public VenueObject() {
+
+    }
+
+
+    public VenueObject(Venue venue) {
+        this.venue = venue;
+    }
+
+
+    public String getId() {
+        return this.venue.getId();
+    }
+
+
+    public String getVenuePreviewImageUrl() {
+        return this.venue.getPreviewImage().getUrl();
+    }
+
+    public String getAddress() {
+        return this.venue.getAddress();
+    }
+
+    public String getDistanceStr() {
+        return this.venue.getDistance() + " km";
+    }
+
+    public String getName() {
+        return this.venue.getName();
+    }
+
+//
+//
+//
+//    public long id;
+//    private String name;
+//    private String distanceStr;
+//    private String address;
+//    private float distance;
+//
+//    private String image;
+//
+//
+//
+//    //TODO should be enum.
+//    private int type;
+//
+//
+//
+//
+//
+//    public long getId() {
+//        return id;
+//    }
+//
+//    public void setId(long id) {
+//        this.id = id;
+//    }
+//
+//
+//    public String getDistanceStr() {
+//        return distanceStr;
+//    }
+//
+//    public void setDistanceStr(String distanceStr) {
+//        this.distanceStr = distanceStr;
+//    }
+//
+//
+//    public String getName() {
+//        return name;
+//    }
+//
+//    public void setName(String name) {
+//        this.name = name;
+//    }
+//
+//    public int getType() {
+//        return type;
+//    }
+//
+//    public void setType(int type) {
+//        this.type = type;
+//    }
+//
+//    public String getAddress() {
+//        return address;
+//    }
+//
+//    public void setAddress(String address) {
+//        this.address = address;
+//    }
+//
+//    public float getDistance() {
+//        return distance;
+//    }
+//
+//    public void setDistance(float distance) {
+//        this.distance = distance;
+//    }
+//
+//    public String getImage() {
+//        return image;
+//    }
+//
+//    public void setImage(String image) {
+//        this.image = image;
+//    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/CoordinatesServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/CoordinatesServiceMock.java
index 9473cceec..e999c86be 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/CoordinatesServiceMock.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/CoordinatesServiceMock.java
@@ -1,11 +1,12 @@
 package org.telegram.messenger.service.mock;
 
+import org.telegram.messenger.dto.Coordinates;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
 
-import ru.aragats.whats.dto.Coordinates;
 
 /**
  * Created by aragats on 10/05/15.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ImageServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ImageServiceMock.java
index a66de29c3..6d5f651f1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ImageServiceMock.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ImageServiceMock.java
@@ -1,10 +1,11 @@
 package org.telegram.messenger.service.mock;
 
+import org.telegram.messenger.dto.Image;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
-import ru.aragats.whats.dto.Image;
 
 /**
  * Created by aragats on 09/05/15.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
index 9539e8976..f87326865 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
@@ -1,15 +1,16 @@
 package org.telegram.messenger.service.mock;
 
+import org.telegram.messenger.dto.Image;
+import org.telegram.messenger.dto.Post;
+import org.telegram.messenger.dto.PostResponse;
+import org.telegram.messenger.object.PostObject;
+import org.telegram.utils.StringUtils;
+
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 import java.util.Random;
 
-import ru.aragats.android.object.PostObject;
-import ru.aragats.utils.StringUtils;
-import ru.aragats.whats.dto.Image;
-import ru.aragats.whats.dto.Post;
-import ru.aragats.whats.dto.PostResponse;
 
 /**
  * Created by aragats on 09/05/15.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/UserServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/UserServiceMock.java
index 5dc74aa8a..12f0535a8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/UserServiceMock.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/UserServiceMock.java
@@ -1,13 +1,15 @@
 package org.telegram.messenger.service.mock;
 
+import org.telegram.messenger.dto.Image;
+import org.telegram.messenger.dto.User;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
-import ru.aragats.whats.dto.Image;
-import ru.aragats.whats.dto.User;
 
-import static ru.aragats.whats.service.PostServiceMock.*;
+
+import static org.telegram.messenger.service.mock.PostServiceMock.*;
 
 /**
  * Created by aragats on 09/05/15.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/VenueServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/VenueServiceMock.java
index c9e5e43b1..51fe7786e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/VenueServiceMock.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/VenueServiceMock.java
@@ -1,17 +1,15 @@
 package org.telegram.messenger.service.mock;
 
+import org.telegram.messenger.dto.Image;
+import org.telegram.messenger.dto.Venue;
+import org.telegram.messenger.dto.VenueResponse;
+import org.telegram.messenger.object.VenueObject;
+import org.telegram.utils.StringUtils;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
-import ru.aragats.android.object.PostObject;
-import ru.aragats.android.object.VenueObject;
-import ru.aragats.utils.StringUtils;
-import ru.aragats.whats.dto.Image;
-import ru.aragats.whats.dto.Post;
-import ru.aragats.whats.dto.Venue;
-import ru.aragats.whats.dto.VenueResponse;
-
 /**
  * Created by aragats on 10/05/15.
  */
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
index aa1e2dda8..eb70d0e8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -13,17 +13,20 @@
 import android.view.ViewGroup;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.MessagesController;
+import org.telegram.android.PostsController;
 import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.DialogCell;
+import org.telegram.messenger.object.PostObject;
+import org.telegram.ui.Cells.PostCell;
 import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.utils.StringUtils;
 
+// TODO-aragats
 public class PostsAdapter extends RecyclerView.Adapter {
 
     private Context mContext;
+    //TODO ???
     private boolean serverOnly;
-    private long openedDialogId;
+    private String openedPostId;
     private int currentCount;
 
     private class Holder extends RecyclerView.ViewHolder {
@@ -38,8 +41,8 @@ public PostsAdapter(Context context, boolean onlyFromServer) {
         serverOnly = onlyFromServer;
     }
 
-    public void setOpenedDialogId(long id) {
-        openedDialogId = id;
+    public void setOpenedPostId(String id) {
+        openedPostId = id;
     }
 
     public boolean isDataSetChanged() {
@@ -49,34 +52,24 @@ public boolean isDataSetChanged() {
 
     @Override
     public int getItemCount() {
-        int count;
-        if (serverOnly) {
-            count = MessagesController.getInstance().dialogsServerOnly.size();
-        } else {
-            count = MessagesController.getInstance().dialogs.size();
-        }
-        if (count == 0 && MessagesController.getInstance().loadingDialogs) {
+        int count = PostsController.getInstance().postObjects.size();
+        if (count == 0 && PostsController.getInstance().loadingPosts) {
             return 0;
         }
-        if (!MessagesController.getInstance().dialogsEndReached) {
-            count++;
-        }
+//        if (!PostsController.getInstance().dialogsEndReached) {
+//            count++;
+//        }
         currentCount = count;
         return count;
     }
 
-    public TLRPC.TL_dialog getItem(int i) {
-        if (serverOnly) {
-            if (i < 0 || i >= MessagesController.getInstance().dialogsServerOnly.size()) {
-                return null;
-            }
-            return MessagesController.getInstance().dialogsServerOnly.get(i);
-        } else {
-            if (i < 0 || i >= MessagesController.getInstance().dialogs.size()) {
-                return null;
-            }
-            return MessagesController.getInstance().dialogs.get(i);
+    public PostObject getItem(int i) {
+
+        if (i < 0 || i >= PostsController.getInstance().postObjects.size()) {
+            return null;
         }
+        return PostsController.getInstance().postObjects.get(i);
+
     }
 
     @Override
@@ -88,7 +81,7 @@ public long getItemId(int i) {
     public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
         View view = null;
         if (viewType == 0) {
-            view = new DialogCell(mContext);
+            view = new PostCell(mContext);
         } else if (viewType == 1) {
             view = new LoadingCell(mContext);
         }
@@ -98,26 +91,23 @@ public long getItemId(int i) {
     @Override
     public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
         if (viewHolder.getItemViewType() == 0) {
-            DialogCell cell = (DialogCell) viewHolder.itemView;
+            PostCell cell = (PostCell) viewHolder.itemView;
             cell.useSeparator = (i != getItemCount() - 1);
-            TLRPC.TL_dialog dialog;
-            if (serverOnly) {
-                dialog = MessagesController.getInstance().dialogsServerOnly.get(i);
-            } else {
-                dialog = MessagesController.getInstance().dialogs.get(i);
-                if (AndroidUtilities.isTablet()) {
-                    cell.setDialogSelected(dialog.id == openedDialogId);
-                }
+            PostObject postObject;
+            postObject = PostsController.getInstance().postObjects.get(i);
+            if (AndroidUtilities.isTablet()) {
+                cell.setPostSelected(!StringUtils.isEmpty(postObject.getId()) && postObject.getId().equals(openedPostId));
             }
-            cell.setDialog(dialog, i, serverOnly);
+
+            cell.setPostObject(postObject, i, serverOnly);
         }
     }
 
     @Override
     public int getItemViewType(int i) {
-        if (serverOnly && i == MessagesController.getInstance().dialogsServerOnly.size() || !serverOnly && i == MessagesController.getInstance().dialogs.size()) {
-            return 1;
+        if (i == PostsController.getInstance().postObjects.size()) {
+            return 1; //LoadingCell
         }
-        return 0;
+        return 0; //PostCell
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
index 1ac7cdf0b..2a8467876 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
@@ -9,54 +9,41 @@
 package org.telegram.ui.Adapters;
 
 import android.content.Context;
-import android.text.TextUtils;
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
 import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.DialogCell;
+import org.telegram.messenger.dto.PostResponse;
+import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.service.mock.PostServiceMock;
 import org.telegram.ui.Cells.GreySectionCell;
 import org.telegram.ui.Cells.HashtagSearchCell;
 import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.PostCell;
 import org.telegram.ui.Cells.ProfileSearchCell;
 
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashMap;
-import java.util.Locale;
 import java.util.Timer;
-import java.util.TimerTask;
 
+// TODO-aragats
 public class PostsSearchAdapter extends BaseSearchAdapterRecycler {
 
     private Context mContext;
+    //TODO important search timer!!!
     private Timer searchTimer;
-    private ArrayList<TLObject> searchResult = new ArrayList<>();
-    private ArrayList<CharSequence> searchResultNames = new ArrayList<>();
-    private ArrayList<MessageObject> searchResultMessages = new ArrayList<>();
+    private ArrayList<Object> searchResult = new ArrayList<>();
     private ArrayList<String> searchResultHashtags = new ArrayList<>();
     private String lastSearchText;
     private long reqId = 0;
     private int lastReqId;
-    private MessagesActivitySearchAdapterDelegate delegate;
-    private int needMessagesSearch;
-    private boolean messagesSearchEndReached;
-    private String lastMessagesSearchString;
+    private PostsActivitySearchAdapterDelegate delegate;
+    private int needPostsSearch;
+    private boolean postsSearchEndReached;
+    private String lastPostsSearchString;
     private int lastSearchId = 0;
 
     private class Holder extends RecyclerView.ViewHolder {
@@ -66,413 +53,80 @@ public Holder(View itemView) {
         }
     }
 
-    private class DialogSearchResult {
-        public TLObject object;
-        public int date;
-        public CharSequence name;
-    }
 
-    public interface MessagesActivitySearchAdapterDelegate {
+    public interface PostsActivitySearchAdapterDelegate {
         void searchStateChanged(boolean searching);
     }
 
     public PostsSearchAdapter(Context context, int messagesSearch) {
         mContext = context;
-        needMessagesSearch = messagesSearch;
+        needPostsSearch = messagesSearch;
     }
 
-    public void setDelegate(MessagesActivitySearchAdapterDelegate delegate) {
+    public void setDelegate(PostsActivitySearchAdapterDelegate delegate) {
         this.delegate = delegate;
     }
 
-    public boolean isMessagesSearchEndReached() {
-        return messagesSearchEndReached;
+    public boolean isPostsSearchEndReached() {
+        return postsSearchEndReached;
     }
 
     public void loadMoreSearchMessages() {
-        searchMessagesInternal(lastMessagesSearchString);
+        searchMessagesInternal(lastPostsSearchString);
     }
 
     public String getLastSearchString() {
-        return lastMessagesSearchString;
+        return lastPostsSearchString;
     }
 
-    private void searchMessagesInternal(final String query) {
-        if (needMessagesSearch == 0) {
+
+    private void searchPostsInternal(final String query, final int offset, final int count) {
+
+        if (needPostsSearch == 0) {
             return;
         }
-        if (reqId != 0) {
-            ConnectionsManager.getInstance().cancelRpc(reqId, true);
-            reqId = 0;
+
+        PostResponse response = PostServiceMock.getPosts("location", query, offset, count);
+        searchResult.addAll(PostServiceMock.convertPost(response.getPosts()));
+        //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
+        if (!response.getPosts().isEmpty()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);
         }
+
+
+//        if (reqId != 0) {
+//            ConnectionsManager.getInstance().cancelRpc(reqId, true);
+//            reqId = 0;
+//        }
         if (query == null || query.length() == 0) {
-            searchResultMessages.clear();
             lastReqId = 0;
-            lastMessagesSearchString = null;
-            notifyDataSetChanged();
+            lastPostsSearchString = null;
+//            notifyDataSetChanged();
             if (delegate != null) {
                 delegate.searchStateChanged(false);
             }
             return;
         }
-        final TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
-        req.limit = 20;
-        req.peer = new TLRPC.TL_inputPeerEmpty();
-        req.q = query;
-        if (lastMessagesSearchString != null && query.equals(lastMessagesSearchString) && !searchResultMessages.isEmpty()) {
-            req.max_id = searchResultMessages.get(searchResultMessages.size() - 1).getId();
-        }
-        lastMessagesSearchString = query;
-        req.filter = new TLRPC.TL_inputMessagesFilterEmpty();
-        final int currentReqId = ++lastReqId;
+//        notifyDataSetChanged();
         if (delegate != null) {
             delegate.searchStateChanged(true);
         }
-        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (currentReqId == lastReqId) {
-                            if (error == null) {
-                                TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
-                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
-                                MessagesController.getInstance().putUsers(res.users, false);
-                                MessagesController.getInstance().putChats(res.chats, false);
-                                if (req.max_id == 0) {
-                                    searchResultMessages.clear();
-                                }
-                                for (TLRPC.Message message : res.messages) {
-                                    searchResultMessages.add(new MessageObject(message, null, false));
-                                }
-                                messagesSearchEndReached = res.messages.size() != 20;
-                                notifyDataSetChanged();
-                            }
-                        }
-                        if (delegate != null) {
-                            delegate.searchStateChanged(false);
-                        }
-                        reqId = 0;
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+
+
     }
 
-    private void searchDialogsInternal(final String query, final boolean serverOnly, final int searchId) {
-        if (needMessagesSearch == 2) {
-            return;
-        }
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    String search1 = query.trim().toLowerCase();
-                    if (search1.length() == 0) {
-                        lastSearchId = -1;
-                        updateSearchResults(new ArrayList<TLObject>(), new ArrayList<CharSequence>(), new ArrayList<TLRPC.User>(), lastSearchId);
-                        return;
-                    }
-                    String search2 = LocaleController.getInstance().getTranslitString(search1);
-                    if (search1.equals(search2) || search2.length() == 0) {
-                        search2 = null;
-                    }
-                    String search[] = new String[1 + (search2 != null ? 1 : 0)];
-                    search[0] = search1;
-                    if (search2 != null) {
-                        search[1] = search2;
-                    }
-
-                    ArrayList<Integer> usersToLoad = new ArrayList<>();
-                    ArrayList<Integer> chatsToLoad = new ArrayList<>();
-                    ArrayList<Integer> encryptedToLoad = new ArrayList<>();
-                    ArrayList<TLRPC.User> encUsers = new ArrayList<>();
-                    int resultCount = 0;
-
-                    HashMap<Long, DialogSearchResult> dialogsResult = new HashMap<>();
-                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 200");
-                    while (cursor.next()) {
-                        long id = cursor.longValue(0);
-                        DialogSearchResult dialogSearchResult = new DialogSearchResult();
-                        dialogSearchResult.date = cursor.intValue(1);
-                        dialogsResult.put(id, dialogSearchResult);
-
-                        int lower_id = (int) id;
-                        int high_id = (int) (id >> 32);
-                        if (lower_id != 0) {
-                            if (high_id == 1) {
-                                if (!serverOnly && !chatsToLoad.contains(lower_id)) {
-                                    chatsToLoad.add(lower_id);
-                                }
-                            } else {
-                                if (lower_id > 0) {
-                                    if (!usersToLoad.contains(lower_id)) {
-                                        usersToLoad.add(lower_id);
-                                    }
-                                } else {
-                                    if (!chatsToLoad.contains(-lower_id)) {
-                                        chatsToLoad.add(-lower_id);
-                                    }
-                                }
-                            }
-                        } else if (!serverOnly) {
-                            if (!encryptedToLoad.contains(high_id)) {
-                                encryptedToLoad.add(high_id);
-                            }
-                        }
-                    }
-                    cursor.dispose();
-
-                    if (!usersToLoad.isEmpty()) {
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, status, name FROM users WHERE uid IN(%s)", TextUtils.join(",", usersToLoad)));
-                        while (cursor.next()) {
-                            String name = cursor.stringValue(2);
-                            String tName = LocaleController.getInstance().getTranslitString(name);
-                            if (name.equals(tName)) {
-                                tName = null;
-                            }
-                            String username = null;
-                            int usernamePos = name.lastIndexOf(";;;");
-                            if (usernamePos != -1) {
-                                username = name.substring(usernamePos + 3);
-                            }
-                            int found = 0;
-                            for (String q : search) {
-                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                    found = 1;
-                                } else if (username != null && username.startsWith(q)) {
-                                    found = 2;
-                                }
-                                if (found != 0) {
-                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                        TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
-                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long) user.id);
-                                        if (user.status != null) {
-                                            user.status.expires = cursor.intValue(1);
-                                        }
-                                        if (found == 1) {
-                                            dialogSearchResult.name = AndroidUtilities.generateSearchName(user.first_name, user.last_name, q);
-                                        } else {
-                                            dialogSearchResult.name = AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q);
-                                        }
-                                        dialogSearchResult.object = user;
-                                        resultCount++;
-                                    }
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                    break;
-                                }
-                            }
-                        }
-                        cursor.dispose();
-                    }
-
-                    if (!chatsToLoad.isEmpty()) {
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, name FROM chats WHERE uid IN(%s)", TextUtils.join(",", chatsToLoad)));
-                        while (cursor.next()) {
-                            String name = cursor.stringValue(1);
-                            String tName = LocaleController.getInstance().getTranslitString(name);
-                            if (name.equals(tName)) {
-                                tName = null;
-                            }
-                            for (String q : search) {
-                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                        TLRPC.Chat chat = TLRPC.Chat.TLdeserialize(data, data.readInt32(false), false);
-                                        long dialog_id;
-                                        if (chat.id > 0) {
-                                            dialog_id = -chat.id;
-                                        } else {
-                                            dialog_id = AndroidUtilities.makeBroadcastId(chat.id);
-                                        }
-                                        DialogSearchResult dialogSearchResult = dialogsResult.get(dialog_id);
-                                        dialogSearchResult.name = AndroidUtilities.generateSearchName(chat.title, null, q);
-                                        dialogSearchResult.object = chat;
-                                        resultCount++;
-                                    }
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                    break;
-                                }
-                            }
-                        }
-                        cursor.dispose();
-                    }
-
-                    if (!encryptedToLoad.isEmpty()) {
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)", TextUtils.join(",", encryptedToLoad)));
-                        while (cursor.next()) {
-                            String name = cursor.stringValue(1);
-                            String tName = LocaleController.getInstance().getTranslitString(name);
-                            if (name.equals(tName)) {
-                                tName = null;
-                            }
-
-                            String username = null;
-                            int usernamePos = name.lastIndexOf(";;;");
-                            if (usernamePos != -1) {
-                                username = name.substring(usernamePos + 2);
-                            }
-                            int found = 0;
-                            for (String q : search) {
-                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                    found = 1;
-                                } else if (username != null && username.startsWith(q)) {
-                                    found = 2;
-                                }
-
-                                if (found != 0) {
-                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                    ByteBufferDesc data2 = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(6));
-                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0 && cursor.byteBufferValue(6, data2.buffer) != 0) {
-                                        TLRPC.EncryptedChat chat = TLRPC.EncryptedChat.TLdeserialize(data, data.readInt32(false), false);
-                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long) chat.id << 32);
-
-                                        chat.user_id = cursor.intValue(2);
-                                        chat.a_or_b = cursor.byteArrayValue(3);
-                                        chat.auth_key = cursor.byteArrayValue(4);
-                                        chat.ttl = cursor.intValue(5);
-                                        chat.layer = cursor.intValue(8);
-                                        chat.seq_in = cursor.intValue(9);
-                                        chat.seq_out = cursor.intValue(10);
-                                        int use_count = cursor.intValue(11);
-                                        chat.key_use_count_in = (short) (use_count >> 16);
-                                        chat.key_use_count_out = (short) (use_count);
-                                        chat.exchange_id = cursor.longValue(12);
-                                        chat.key_create_date = cursor.intValue(13);
-                                        chat.future_key_fingerprint = cursor.longValue(14);
-                                        chat.future_auth_key = cursor.byteArrayValue(15);
-                                        chat.key_hash = cursor.byteArrayValue(16);
-
-                                        TLRPC.User user = TLRPC.User.TLdeserialize(data2, data2.readInt32(false), false);
-                                        if (user.status != null) {
-                                            user.status.expires = cursor.intValue(7);
-                                        }
-                                        if (found == 1) {
-                                            dialogSearchResult.name = AndroidUtilities.replaceTags("<c#ff00a60e>" + ContactsController.formatName(user.first_name, user.last_name) + "</c>");
-                                        } else {
-                                            dialogSearchResult.name = AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q);
-                                        }
-                                        dialogSearchResult.object = chat;
-                                        encUsers.add(user);
-                                        resultCount++;
-                                    }
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data2);
-                                    break;
-                                }
-                            }
-                        }
-                        cursor.dispose();
-                    }
-
-                    ArrayList<DialogSearchResult> searchResults = new ArrayList<>(resultCount);
-                    for (DialogSearchResult dialogSearchResult : dialogsResult.values()) {
-                        if (dialogSearchResult.object != null && dialogSearchResult.name != null) {
-                            searchResults.add(dialogSearchResult);
-                        }
-                    }
-
-                    Collections.sort(searchResults, new Comparator<DialogSearchResult>() {
-                        @Override
-                        public int compare(DialogSearchResult lhs, DialogSearchResult rhs) {
-                            if (lhs.date < rhs.date) {
-                                return 1;
-                            } else if (lhs.date > rhs.date) {
-                                return -1;
-                            }
-                            return 0;
-                        }
-                    });
-
-                    ArrayList<TLObject> resultArray = new ArrayList<>();
-                    ArrayList<CharSequence> resultArrayNames = new ArrayList<>();
-
-                    for (DialogSearchResult dialogSearchResult : searchResults) {
-                        resultArray.add(dialogSearchResult.object);
-                        resultArrayNames.add(dialogSearchResult.name);
-                    }
-
-                    cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid");
-                    while (cursor.next()) {
-                        int uid = cursor.intValue(3);
-                        if (dialogsResult.containsKey((long) uid)) {
-                            continue;
-                        }
-                        String name = cursor.stringValue(2);
-                        String tName = LocaleController.getInstance().getTranslitString(name);
-                        if (name.equals(tName)) {
-                            tName = null;
-                        }
-                        String username = null;
-                        int usernamePos = name.lastIndexOf(";;;");
-                        if (usernamePos != -1) {
-                            username = name.substring(usernamePos + 3);
-                        }
-                        int found = 0;
-                        for (String q : search) {
-                            if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                found = 1;
-                            } else if (username != null && username.startsWith(q)) {
-                                found = 2;
-                            }
-                            if (found != 0) {
-                                ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
-                                    if (user.status != null) {
-                                        user.status.expires = cursor.intValue(1);
-                                    }
-                                    if (found == 1) {
-                                        resultArrayNames.add(AndroidUtilities.generateSearchName(user.first_name, user.last_name, q));
-                                    } else {
-                                        resultArrayNames.add(AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q));
-                                    }
-                                    resultArray.add(user);
-                                }
-                                MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                break;
-                            }
-                        }
-                    }
-                    cursor.dispose();
-
-                    updateSearchResults(resultArray, resultArrayNames, encUsers, searchId);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
+    private void searchPostsInternal(final String query, final int searchId) {
+
     }
 
-    private void updateSearchResults(final ArrayList<TLObject> result, final ArrayList<CharSequence> names, final ArrayList<TLRPC.User> encUsers, final int searchId) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (searchId != lastSearchId) {
-                    return;
-                }
-                for (TLObject obj : result) {
-                    if (obj instanceof TLRPC.User) {
-                        TLRPC.User user = (TLRPC.User) obj;
-                        MessagesController.getInstance().putUser(user, true);
-                    } else if (obj instanceof TLRPC.Chat) {
-                        TLRPC.Chat chat = (TLRPC.Chat) obj;
-                        MessagesController.getInstance().putChat(chat, true);
-                    } else if (obj instanceof TLRPC.EncryptedChat) {
-                        TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) obj;
-                        MessagesController.getInstance().putEncryptedChat(chat, true);
-                    }
-                }
-                for (TLRPC.User user : encUsers) {
-                    MessagesController.getInstance().putUser(user, true);
-                }
-                searchResult = result;
-                searchResultNames = names;
-                notifyDataSetChanged();
-            }
-        });
+
+    private void searchMessagesInternal(final String query) {
+
+    }
+
+    private void updateSearchResults(final ArrayList<Object> result, final ArrayList<CharSequence> names, final int searchId) {
+        searchResult = result;
+        notifyDataSetChanged();
     }
 
     public String getLastSearchText() {
@@ -502,92 +156,129 @@ protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, H
         notifyDataSetChanged();
     }
 
-    public void searchDialogs(final String query, final boolean serverOnly) {
+
+    public void searchPosts(final String query) {
         if (query != null && lastSearchText != null && query.equals(lastSearchText)) {
             return;
         }
-        try {
-            if (searchTimer != null) {
-                searchTimer.cancel();
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
+
+        // mock
+        searchResult.clear();
+        PostResponse response = PostServiceMock.getPosts("location", query, 0, 20);
+        searchResult.addAll(PostServiceMock.convertPost(response.getPosts()));
+        //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
+//        if (!response.getPosts().isEmpty()) {
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);
+//        }
+        if (delegate != null) {
+            delegate.searchStateChanged(false);
         }
-        if (query == null || query.length() == 0) {
-            hashtagsLoadedFromDb = false;
-            searchResult.clear();
-            searchResultNames.clear();
-            searchResultHashtags.clear();
-            if (needMessagesSearch != 2) {
-                queryServerSearch(null);
-            }
-            searchMessagesInternal(null);
-            notifyDataSetChanged();
-        } else {
-            if (query.startsWith("#") && query.length() == 1) {
-                messagesSearchEndReached = true;
-                if (!hashtagsLoadedFromDb) {
-                    loadRecentHashtags();
-                    if (delegate != null) {
-                        delegate.searchStateChanged(true);
-                    }
-                    notifyDataSetChanged();
-                    return;
-                }
-                searchResultMessages.clear();
-                searchResultHashtags.clear();
-                for (HashtagObject hashtagObject : hashtags) {
-                    searchResultHashtags.add(hashtagObject.hashtag);
-                }
-                if (delegate != null) {
-                    delegate.searchStateChanged(false);
-                }
-                notifyDataSetChanged();
-                return;
-            } else {
-                searchResultHashtags.clear();
-            }
-            final int searchId = ++lastSearchId;
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
-                        searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    searchDialogsInternal(query, serverOnly, searchId);
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (needMessagesSearch != 2) {
-                                queryServerSearch(query);
-                            }
-                            searchMessagesInternal(query);
-                        }
-                    });
-                }
-            }, 200, 300);
+
+        lastSearchText = query;
+
+        //TODO mock a
+        if (true) {
+            return;
         }
+
+
+////        try {
+////            if (searchTimer != null) {
+////                searchTimer.cancel();
+////            }
+////        } catch (Exception e) {
+////            FileLog.e("tmessages", e);
+////        }
+//        if (query == null || query.length() == 0) {
+//            searchResult.clear();
+//            searchPostsInternal(null);
+////            queryServerSearch(null);
+//            notifyDataSetChanged();
+//        } else {
+////            final int searchId = ++lastSearchId;
+////            searchTimer = new Timer();
+//            searchPostsInternal(query, 0);
+////            queryServerSearch(query);
+//            searchPostsInternal(query);
+//
+//        }
     }
 
+//    public void searchPosts(final String query, final boolean serverOnly) {
+//        if (query != null && lastSearchText != null && query.equals(lastSearchText)) {
+//            return;
+//        }
+//        try {
+//            if (searchTimer != null) {
+//                searchTimer.cancel();
+//            }
+//        } catch (Exception e) {
+//            FileLog.e("tmessages", e);
+//        }
+//        if (query == null || query.length() == 0) {
+//            hashtagsLoadedFromDb = false;
+//            searchResult.clear();
+//            searchResultHashtags.clear();
+//            if (needPostsSearch != 2) {
+//                queryServerSearch(null);
+//            }
+//            searchMessagesInternal(null);
+//            notifyDataSetChanged();
+//        } else {
+//            if (query.startsWith("#") && query.length() == 1) {
+//                postsSearchEndReached = true;
+//                if (!hashtagsLoadedFromDb) {
+//                    loadRecentHashtags();
+//                    if (delegate != null) {
+//                        delegate.searchStateChanged(true);
+//                    }
+//                    notifyDataSetChanged();
+//                    return;
+//                }
+//                searchResultHashtags.clear();
+//                for (HashtagObject hashtagObject : hashtags) {
+//                    searchResultHashtags.add(hashtagObject.hashtag);
+//                }
+//                if (delegate != null) {
+//                    delegate.searchStateChanged(false);
+//                }
+//                notifyDataSetChanged();
+//                return;
+//            } else {
+//                searchResultHashtags.clear();
+//            }
+//            final int searchId = ++lastSearchId;
+//            searchTimer = new Timer();
+//            searchTimer.schedule(new TimerTask() {
+//                @Override
+//                public void run() {
+//                    try {
+//                        searchTimer.cancel();
+//                        searchTimer = null;
+//                    } catch (Exception e) {
+//                        FileLog.e("tmessages", e);
+//                    }
+//                    searchPostsInternal(query, serverOnly, searchId);
+//                    AndroidUtilities.runOnUIThread(new Runnable() {
+//                        @Override
+//                        public void run() {
+//                            if (needPostsSearch != 2) {
+//                                queryServerSearch(query);
+//                            }
+//                            searchMessagesInternal(query);
+//                        }
+//                    });
+//                }
+//            }, 200, 300);
+//        }
+//    }
+
     @Override
     public int getItemCount() {
         if (!searchResultHashtags.isEmpty()) {
             return searchResultHashtags.size() + 1;
         }
-        int count = searchResult.size();
-        int globalCount = globalSearch.size();
-        int messagesCount = searchResultMessages.size();
-        if (globalCount != 0) {
-            count += globalCount + 1;
-        }
-        if (messagesCount != 0) {
-            count += messagesCount + 1 + (messagesSearchEndReached ? 0 : 1);
-        }
-        return count;
+        return searchResult.size();
     }
 
     public Object getItem(int i) {
@@ -595,14 +286,8 @@ public Object getItem(int i) {
             return searchResultHashtags.get(i - 1);
         }
         int localCount = searchResult.size();
-        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
-        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
         if (i >= 0 && i < localCount) {
             return searchResult.get(i);
-        } else if (i > localCount && i < globalCount + localCount) {
-            return globalSearch.get(i - localCount - 1);
-        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
-            return searchResultMessages.get(i - localCount - globalCount - 1);
         }
         return null;
     }
@@ -624,12 +309,13 @@ public long getItemId(int i) {
                 view = new GreySectionCell(mContext);
                 break;
             case 2:
-                view = new DialogCell(mContext);
+                view = new PostCell(mContext);
                 break;
             case 3:
                 view = new LoadingCell(mContext);
                 break;
             case 4:
+                //TODO WAS ?
                 view = new HashtagSearchCell(mContext);
                 break;
         }
@@ -638,59 +324,13 @@ public long getItemId(int i) {
 
     @Override
     public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+        //TODO
         switch (holder.getItemViewType()) {
-            case 0: {
-                ProfileSearchCell cell = (ProfileSearchCell) holder.itemView;
-
-                TLRPC.User user = null;
-                TLRPC.Chat chat = null;
-                TLRPC.EncryptedChat encryptedChat = null;
-
-                int localCount = searchResult.size();
-                int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
-
-                cell.useSeparator = (position != getItemCount() - 1 && position != localCount - 1 && position != localCount + globalCount - 1);
-                Object obj = getItem(position);
-                if (obj instanceof TLRPC.User) {
-                    user = (TLRPC.User) obj;
-                } else if (obj instanceof TLRPC.Chat) {
-                    chat = MessagesController.getInstance().getChat(((TLRPC.Chat) obj).id);
-                } else if (obj instanceof TLRPC.EncryptedChat) {
-                    encryptedChat = MessagesController.getInstance().getEncryptedChat(((TLRPC.EncryptedChat) obj).id);
-                    user = MessagesController.getInstance().getUser(encryptedChat.user_id);
-                }
-
-                CharSequence username = null;
-                CharSequence name = null;
-                if (position < searchResult.size()) {
-                    name = searchResultNames.get(position);
-                    if (name != null && user != null && user.username != null && user.username.length() > 0) {
-                        if (name.toString().startsWith("@" + user.username)) {
-                            username = name;
-                            name = null;
-                        }
-                    }
-                } else if (position > searchResult.size() && user != null && user.username != null) {
-                    String foundUserName = lastFoundUsername;
-                    if (foundUserName.startsWith("@")) {
-                        foundUserName = foundUserName.substring(1);
-                    }
-                    try {
-                        username = AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>@%s</c>%s", user.username.substring(0, foundUserName.length()), user.username.substring(foundUserName.length())));
-                    } catch (Exception e) {
-                        username = user.username;
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                cell.setData(user, chat, encryptedChat, name, username);
-                break;
-            }
             case 1: {
                 GreySectionCell cell = (GreySectionCell) holder.itemView;
                 if (!searchResultHashtags.isEmpty()) {
                     cell.setText(LocaleController.getString("Hashtags", R.string.Hashtags).toUpperCase());
-                }  else if (!globalSearch.isEmpty() && position == searchResult.size()) {
+                } else if (!globalSearch.isEmpty() && position == searchResult.size()) {
                     cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
                 } else {
                     cell.setText(LocaleController.getString("SearchMessages", R.string.SearchMessages));
@@ -698,10 +338,10 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                 break;
             }
             case 2: {
-                DialogCell cell = (DialogCell) holder.itemView;
+                PostCell cell = (PostCell) holder.itemView;
                 cell.useSeparator = (position != getItemCount() - 1);
-                MessageObject messageObject = (MessageObject)getItem(position);
-                cell.setDialog(messageObject.getDialogId(), messageObject, messageObject.messageOwner.date);
+                PostObject postObject = (PostObject) getItem(position);
+                cell.setPost(postObject.getId(), postObject, postObject.getCreatedDate());
                 break;
             }
             case 3: {
@@ -722,14 +362,8 @@ public int getItemViewType(int i) {
             return i == 0 ? 1 : 4;
         }
         int localCount = searchResult.size();
-        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
-        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
-        if (i >= 0 && i < localCount || i > localCount && i < globalCount + localCount) {
+        if (i >= 0 && i < localCount) {
             return 0;
-        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
-            return 2;
-        } else if (messagesCount != 0 && i == globalCount + localCount + messagesCount) {
-            return 3;
         }
         return 1;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index db0986bfa..e0cd630ca 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -19,19 +19,16 @@
 import android.text.TextUtils;
 import android.view.MotionEvent;
 
-import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.Emoji;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
+import org.telegram.android.PostsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.object.PostObject;
 import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.utils.StringUtils;
 
 public class PostCell extends BaseCell {
 
@@ -56,23 +53,15 @@
     private static Paint linePaint;
     private static Paint backPaint;
 
-    private long currentDialogId;
-    private boolean isDialogCell;
-    private int lastMessageDate;
-    private int unreadCount;
-    private boolean lastUnreadState;
-    private int lastSendState;
-    private boolean dialogMuted;
-    private MessageObject message;
+    private String currentPostId;
+    private long lastMessageDate;
+    private PostObject postObject;
     private int index;
     private boolean isServerOnly;
 
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
 
-    private TLRPC.User user = null;
-    private TLRPC.Chat chat = null;
-    private TLRPC.EncryptedChat encryptedChat = null;
     private CharSequence lastPrintString = null;
 
     public boolean useSeparator = false;
@@ -176,29 +165,28 @@ public PostCell(Context context) {
         avatarDrawable = new AvatarDrawable();
     }
 
-    public void setDialog(TLRPC.TL_dialog dialog, int i, boolean server) {
-        currentDialogId = dialog.id;
-        isDialogCell = true;
+    public void setPostObject(PostObject postObject, int i, boolean server) {
+        //TODO I should store id or object. And retrieve from Controller by id.
+        currentPostId = postObject.getId();
+        this.postObject = postObject;
         index = i;
         isServerOnly = server;
         update(0);
     }
 
-    public void setDialog(long dialog_id, MessageObject messageObject, int date) {
-        currentDialogId = dialog_id;
-        message = messageObject;
-        isDialogCell = false;
+    public void setPost(String postId, PostObject postObject, long date) {
+        currentPostId = postId;
+        this.postObject = postObject;
         lastMessageDate = date;
-        unreadCount = 0;
-        lastUnreadState = messageObject != null && messageObject.isUnread();
-        if (message != null) {
-            lastSendState = message.messageOwner.send_state;
-        }
+//        lastUnreadState = postObject != null && postObject.isUnread();
+//        if (this.postObject != null) {
+//            lastSendState = this.postObject.getCreatedDate();
+//        }
         update(0);
     }
 
-    public long getDialogId() {
-        return currentDialogId;
+    public String getPostId() {
+        return currentPostId;
     }
 
     @Override
@@ -220,7 +208,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
     @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (currentDialogId == 0) {
+        if (StringUtils.isEmpty(currentPostId)) {
             super.onLayout(changed, left, top, right, bottom);
             return;
         }
@@ -244,10 +232,6 @@ public void buildLayout() {
         String timeString = "";
         String countString = null;
         CharSequence messageString = "";
-        CharSequence printingString = null;
-        if (isDialogCell) {
-            printingString = MessagesController.getInstance().printingStrings.get(currentDialogId);
-        }
         TextPaint currentNamePaint = namePaint;
         TextPaint currentMessagePaint = messagePaint;
         boolean checkMessage = true;
@@ -256,73 +240,35 @@ public void buildLayout() {
         drawNameBroadcast = false;
         drawNameLock = false;
 
-        if (encryptedChat != null) {
-            drawNameLock = true;
-            nameLockTop = AndroidUtilities.dp(16.5f);
-            if (!LocaleController.isRTL) {
-                nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + lockDrawable.getIntrinsicWidth();
-            } else {
-                nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - lockDrawable.getIntrinsicWidth();
-                nameLeft = AndroidUtilities.dp(14);
-            }
-        } else {
-            if (chat != null) {
-                if (chat.id < 0) {
-                    drawNameBroadcast = true;
-                    nameLockTop = AndroidUtilities.dp(16.5f);
-                } else {
-                    drawNameGroup = true;
-                    nameLockTop = AndroidUtilities.dp(17.5f);
-                }
 
-                if (!LocaleController.isRTL) {
-                    nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                } else {
-                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                    nameLeft = AndroidUtilities.dp(14);
-                }
-            } else {
-                if (!LocaleController.isRTL) {
-                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                } else {
-                    nameLeft = AndroidUtilities.dp(14);
-                }
-            }
+//        if (chat != null) {
+//            if (chat.id < 0) {
+//                drawNameBroadcast = true;
+//                nameLockTop = AndroidUtilities.dp(16.5f);
+//            } else {
+//                drawNameGroup = true;
+//                nameLockTop = AndroidUtilities.dp(17.5f);
+//            }
+//
+//            if (!LocaleController.isRTL) {
+//                nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
+//                nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+//            } else {
+//                nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+//                nameLeft = AndroidUtilities.dp(14);
+//            }
+//        } else {
+        if (!LocaleController.isRTL) {
+            nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
+        } else {
+            nameLeft = AndroidUtilities.dp(14);
         }
+//        }
 
-        if (message == null) {
-            if (printingString != null) {
-                lastPrintString = messageString = printingString;
-                currentMessagePaint = messagePrintingPaint;
-            } else {
-                lastPrintString = null;
-                if (encryptedChat != null) {
-                    currentMessagePaint = messagePrintingPaint;
-                    if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
-                        messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
-                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
-                        if (user != null && user.first_name != null) {
-                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, user.first_name);
-                        } else {
-                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "");
-                        }
-                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
-                        messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
-                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
-                        if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
-                            if (user != null && user.first_name != null) {
-                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
-                            } else {
-                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, "");
-                            }
-                        } else {
-                            messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
-                        }
-                    }
-                }
-            }
+
+        if (postObject == null) {
+            lastPrintString = messageString;
+            currentMessagePaint = messagePrintingPaint;
             if (lastMessageDate != 0) {
                 timeString = LocaleController.stringForMessageListDate(lastMessageDate);
             }
@@ -332,107 +278,40 @@ public void buildLayout() {
             drawCount = false;
             drawError = false;
         } else {
-            TLRPC.User fromUser = MessagesController.getInstance().getUser(message.messageOwner.from_id);
 
             if (lastMessageDate != 0) {
                 timeString = LocaleController.stringForMessageListDate(lastMessageDate);
             } else {
-                timeString = LocaleController.stringForMessageListDate(message.messageOwner.date);
-            }
-            if (printingString != null) {
-                lastPrintString = messageString = printingString;
-                currentMessagePaint = messagePrintingPaint;
-            } else {
-                lastPrintString = null;
-                if (message.messageOwner instanceof TLRPC.TL_messageService) {
-                    messageString = message.messageText;
-                    currentMessagePaint = messagePrintingPaint;
-                } else {
-                    if (chat != null && chat.id > 0) {
-                        String name = "";
-                        if (message.isOut()) {
-                            name = LocaleController.getString("FromYou", R.string.FromYou);
-                        } else {
-                            if (fromUser != null) {
-                                if (fromUser.first_name.length() > 0) {
-                                    name = fromUser.first_name;
-                                } else {
-                                    name = fromUser.last_name;
-                                }
-                            }
-                        }
-                        checkMessage = false;
-                        if (message.caption != null) {
-                            String mess = message.caption.toString();
-                            if (mess.length() > 150) {
-                                mess = mess.substring(0, 150);
-                            }
-                            mess = mess.replace("\n", " ");
-                            messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                        } else {
-                            if (message.messageOwner.media != null && !message.isMediaEmpty()) {
-                                currentMessagePaint = messagePrintingPaint;
-                                messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                            } else {
-                                if (message.messageOwner.message != null) {
-                                    String mess = message.messageOwner.message;
-                                    if (mess.length() > 150) {
-                                        mess = mess.substring(0, 150);
-                                    }
-                                    mess = mess.replace("\n", " ");
-                                    messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                                }
-                            }
-                        }
-                    } else {
-                        if (message.caption != null) {
-                            messageString = message.caption;
-                        } else {
-                            messageString = message.messageText;
-                            if (message.messageOwner.media != null && !message.isMediaEmpty()) {
-                                currentMessagePaint = messagePrintingPaint;
-                            }
-                        }
-                    }
-                }
+                timeString = LocaleController.stringForMessageListDate(postObject.getCreatedDate());
             }
 
-            if (unreadCount != 0) {
-                drawCount = true;
-                countString = String.format("%d", unreadCount);
-            } else {
-                drawCount = false;
-            }
+            lastPrintString = null;
 
-            if (message.isOut()) {
-                if (message.isSending()) {
-                    drawCheck1 = false;
-                    drawCheck2 = false;
-                    drawClock = true;
-                    drawError = false;
-                } else if (message.isSendError()) {
-                    drawCheck1 = false;
-                    drawCheck2 = false;
-                    drawClock = false;
-                    drawError = true;
-                    drawCount = false;
-                } else if (message.isSent()) {
-                    if (!message.isUnread()) {
-                        drawCheck1 = true;
-                        drawCheck2 = true;
-                    } else {
-                        drawCheck1 = false;
-                        drawCheck2 = true;
-                    }
-                    drawClock = false;
-                    drawError = false;
-                }
-            } else {
-                drawCheck1 = false;
-                drawCheck2 = false;
-                drawClock = false;
-                drawError = false;
+            String name = "";
+            name = postObject.getAuthor();
+
+
+            checkMessage = false;
+
+            currentMessagePaint = messagePrintingPaint;
+
+            String mess = postObject.getMessage();
+            if (mess.length() > 150) {
+                mess = mess.substring(0, 150);
             }
+            mess = mess.replace("\n", " ");
+
+//                messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", name, postObject.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+            messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+
+
+//            if (unreadCount != 0) {
+//                drawCount = true;
+//                countString = String.format("%d", unreadCount);
+//            } else {
+//                drawCount = false;
+//            }
+            //TODO postObject.isOut(). errorSend.
         }
 
         int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
@@ -443,27 +322,10 @@ public void buildLayout() {
             timeLeft = AndroidUtilities.dp(15);
         }
 
-        if (chat != null) {
-            nameString = chat.title;
-        } else if (user != null) {
-            if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
-                if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
-                    nameString = ContactsController.formatName(user.first_name, user.last_name);
-                } else {
-                    if (user.phone != null && user.phone.length() != 0) {
-                        nameString = PhoneFormat.getInstance().format("+" + user.phone);
-                    } else {
-                        currentNamePaint = nameUnknownPaint;
-                        nameString = ContactsController.formatName(user.first_name, user.last_name);
-                    }
-                }
-            } else {
-                nameString = ContactsController.formatName(user.first_name, user.last_name);
-            }
-            if (encryptedChat != null) {
-                currentNamePaint = nameEncryptedPaint;
-            }
-        }
+        //  here was building name string
+
+
+
         if (nameString.length() == 0) {
             nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
         }
@@ -515,13 +377,6 @@ public void buildLayout() {
             }
         }
 
-        if (dialogMuted) {
-            int w = AndroidUtilities.dp(6) + muteDrawable.getIntrinsicWidth();
-            nameWidth -= w;
-            if (LocaleController.isRTL) {
-                nameLeft += w;
-            }
-        }
 
         nameWidth = Math.max(AndroidUtilities.dp(12), nameWidth);
         CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
@@ -551,7 +406,7 @@ public void buildLayout() {
                 messageLeft += w;
             }
         } else if (countString != null) {
-            countWidth = Math.max(AndroidUtilities.dp(12), (int)Math.ceil(countPaint.measureText(countString)));
+            countWidth = Math.max(AndroidUtilities.dp(12), (int) Math.ceil(countPaint.measureText(countString)));
             countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
             int w = countWidth + AndroidUtilities.dp(18);
             messageWidth -= w;
@@ -591,9 +446,9 @@ public void buildLayout() {
             if (nameLayout != null && nameLayout.getLineCount() > 0) {
                 left = nameLayout.getLineLeft(0);
                 widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                if (dialogMuted) {
-                    nameMuteLeft = (int) (nameLeft + (nameWidth - widthpx) - AndroidUtilities.dp(6) - muteDrawable.getIntrinsicWidth());
-                }
+//                if (dialogMuted) {
+//                    nameMuteLeft = (int) (nameLeft + (nameWidth - widthpx) - AndroidUtilities.dp(6) - muteDrawable.getIntrinsicWidth());
+//                }
                 if (left == 0) {
                     if (widthpx < nameWidth) {
                         nameLeft += (nameWidth - widthpx);
@@ -618,9 +473,9 @@ public void buildLayout() {
                         nameLeft -= (nameWidth - widthpx);
                     }
                 }
-                if (dialogMuted) {
-                    nameMuteLeft = (int) (nameLeft + left + AndroidUtilities.dp(6));
-                }
+//                if (dialogMuted) {
+//                    nameMuteLeft = (int) (nameLeft + left + AndroidUtilities.dp(6));
+//                }
             }
             if (messageLayout != null && messageLayout.getLineCount() > 0) {
                 left = messageLayout.getLineRight(0);
@@ -634,137 +489,70 @@ public void buildLayout() {
         }
     }
 
-    public void setDialogSelected(boolean value) {
+    public void setPostSelected(boolean value) {
         if (isSelected != value) {
             invalidate();
         }
         isSelected = value;
     }
 
-    public void checkCurrentDialogIndex() {
-        TLRPC.TL_dialog dialog = null;
-        if (isServerOnly) {
-            if (index < MessagesController.getInstance().dialogsServerOnly.size()) {
-                dialog = MessagesController.getInstance().dialogsServerOnly.get(index);
-            }
-        } else {
-            if (index < MessagesController.getInstance().dialogs.size()) {
-                dialog = MessagesController.getInstance().dialogs.get(index);
-            }
+    public void checkCurrentPostIndex() {
+        PostObject postObject = null;
+
+        if (index < PostsController.getInstance().postObjects.size()) {
+            postObject = PostsController.getInstance().postObjects.get(index);
         }
-        if (dialog != null) {
-            if (currentDialogId != dialog.id || message != null && message.getId() != dialog.top_message || unreadCount != dialog.unread_count) {
-                currentDialogId = dialog.id;
+
+        if (postObject != null) {
+            if (!StringUtils.isEmpty(postObject.getId())
+                    && !StringUtils.isEmpty(currentPostId)
+                    && !currentPostId.equals(postObject.getId())) {
+                currentPostId = postObject.getId();
                 update(0);
             }
         }
     }
 
     public void update(int mask) {
-        if (isDialogCell) {
-            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
-            if (dialog != null && mask == 0) {
-                message = MessagesController.getInstance().dialogMessage.get(dialog.top_message);
-                lastUnreadState = message != null && message.isUnread();
-                unreadCount = dialog.unread_count;
-                lastMessageDate = dialog.last_message_date;
-                if (message != null) {
-                    lastSendState = message.messageOwner.send_state;
-                }
-            }
-        }
 
-        if (mask != 0) {
-            boolean continueUpdate = false;
-            if (isDialogCell) {
-                if ((mask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
-                    CharSequence printString = MessagesController.getInstance().printingStrings.get(currentDialogId);
-                    if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
-                        continueUpdate = true;
-                    }
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
-                if (chat == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                if (chat == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
-                if (user == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
-                if (user == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE) != 0) {
-                if (message != null && lastUnreadState != message.isUnread()) {
-                    lastUnreadState = message.isUnread();
-                    continueUpdate = true;
-                } else if (isDialogCell) {
-                    TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
-                    if (dialog != null && unreadCount != dialog.unread_count) {
-                        unreadCount = dialog.unread_count;
-                        continueUpdate = true;
-                    }
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_SEND_STATE) != 0) {
-                if (message != null && lastSendState != message.messageOwner.send_state) {
-                    lastSendState = message.messageOwner.send_state;
-                    continueUpdate = true;
-                }
-            }
+//        PostObject postObject = PostsController.getInstance().postsMap.get(currentPostId);
 
-            if (!continueUpdate) {
-                return;
-            }
+
+        if (mask != 0) {
+            //TODO different masks. look at examples.
         }
 
-        dialogMuted = isDialogCell && MessagesController.getInstance().isDialogMuted(currentDialogId);
-        user = null;
-        chat = null;
-        encryptedChat = null;
 
-        int lower_id = (int)currentDialogId;
-        int high_id = (int)(currentDialogId >> 32);
-        if (lower_id != 0) {
-            if (high_id == 1) {
-                chat = MessagesController.getInstance().getChat(lower_id);
-            } else {
-                if (lower_id < 0) {
-                    chat = MessagesController.getInstance().getChat(-lower_id);
-                } else {
-                    user = MessagesController.getInstance().getUser(lower_id);
-                }
-            }
-        } else {
-            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
-            if (encryptedChat != null) {
-                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
-            }
-        }
+//        TLRPC.FileLocation photo = null;
+//        if (user != null) {
+//            if (user.photo != null) {
+//                photo = user.photo.photo_small;
+//            }
+//            avatarDrawable.setInfo(user);
+//        } else if (chat != null) {
+//            if (chat.photo != null) {
+//                photo = chat.photo.photo_small;
+//            }
+//            avatarDrawable.setInfo(chat);
+//        }
+//        avatarImage.setImage(photo, "50_50", avatarDrawable, null, false);
+
+
+        //TODO-DELETE
+//        if(postObject == null) {
+//            return;
+//        }
+        //
+
+        //TODO null, 0 ??? s ext adn size. int)postObject.getImage().getSize()
+        avatarImage.setImage(postObject.getVenuePreviewImageUrl(), null, avatarDrawable, null, 0);
+
+        //Photo
+        // TODO null ? // Set image
+//        photoImage.setImage(postObject.getPreviewImageUrl(), null, imageDrawable); // TODO fix it. Create drawable.
+
+        //Photo
 
-        TLRPC.FileLocation photo = null;
-        if (user != null) {
-            if (user.photo != null) {
-                photo = user.photo.photo_small;
-            }
-            avatarDrawable.setInfo(user);
-        } else if (chat != null) {
-            if (chat.photo != null) {
-                photo = chat.photo.photo_small;
-            }
-            avatarDrawable.setInfo(chat);
-        }
-        avatarImage.setImage(photo, "50_50", avatarDrawable, null, false);
 
         if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
             buildLayout();
@@ -777,7 +565,7 @@ public void update(int mask) {
 
     @Override
     protected void onDraw(Canvas canvas) {
-        if (currentDialogId == 0) {
+        if (StringUtils.isEmpty(currentPostId)) {
             return;
         }
 
@@ -830,10 +618,6 @@ protected void onDraw(Canvas canvas) {
             }
         }
 
-        if (dialogMuted) {
-            setDrawableBounds(muteDrawable, nameMuteLeft, AndroidUtilities.dp(16.5f));
-            muteDrawable.draw(canvas);
-        }
 
         if (drawError) {
             setDrawableBounds(errorDrawable, errorLeft, errorTop);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 31584c160..380bba79d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -39,16 +39,15 @@
 import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
+import org.telegram.android.PostsController;
 import org.telegram.android.support.widget.LinearLayoutManager;
 import org.telegram.android.support.widget.RecyclerView;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
+//TODO delte it or reuse.
 import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.object.PostObject;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
@@ -62,8 +61,7 @@
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
 import org.telegram.ui.Components.ResourceLoader;
-
-import java.util.ArrayList;
+import org.telegram.utils.StringUtils;
 
 /*
 TODO-aragats
@@ -90,13 +88,13 @@
     private String selectAlertStringGroup;
     private boolean serverOnly;
 
-    private static boolean dialogsLoaded;
+    private static boolean postsLoaded;
     private boolean searching;
     private boolean searchWas;
     private boolean onlySelect;
-    private long selectedDialog;
+    private String selectedPost;
     private String searchString;
-    private long openedDialogId;
+    private String openedPostId;
 
     private MessagesActivityDelegate delegate;
 
@@ -135,10 +133,10 @@ public boolean onFragmentCreate() {
         }
 
 
-        if (!dialogsLoaded) {
-            MessagesController.getInstance().loadDialogs(0, 0, 100, true);
+        if (!postsLoaded) {
+            PostsController.getInstance().loadPosts(0, 0, 100, true);
             ContactsController.getInstance().checkInviteText();
-            dialogsLoaded = true;
+            postsLoaded = true;
         }
         return true;
     }
@@ -202,7 +200,7 @@ public boolean onSearchCollapse() {
                 searchWas = false;
                 if (listView != null) {
                     searchEmptyView.setVisibility(View.INVISIBLE);
-                    if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
                         emptyView.setVisibility(View.INVISIBLE);
                         listView.setEmptyView(progressView);
                     } else {
@@ -221,7 +219,7 @@ public boolean onSearchCollapse() {
                     }
                 }
                 if (postsSearchAdapter != null) {
-                    postsSearchAdapter.searchDialogs(null, false);
+                    postsSearchAdapter.searchPosts(null);
                 }
                 updatePasscodeButton();
                 return true;
@@ -244,7 +242,7 @@ public void onTextChanged(EditText editText) {
                     }
                 }
                 if (postsSearchAdapter != null) {
-                    postsSearchAdapter.searchDialogs(text, serverOnly);
+                    postsSearchAdapter.searchPosts(text);
                 }
             }
         });
@@ -282,7 +280,7 @@ public void onItemClick(int id) {
 
         FrameLayout frameLayout = new FrameLayout(context);
         fragmentView = frameLayout;
-        
+
         listView = new RecyclerListView(context);
         listView.setVerticalScrollBarEnabled(true);
         listView.setItemAnimator(null);
@@ -306,88 +304,57 @@ public void onItemClick(View view, int position) {
                 if (listView == null || listView.getAdapter() == null) {
                     return;
                 }
-                long dialog_id = 0;
-                int message_id = 0;
+                String post_id = "";
+                String message_id = "";
                 RecyclerView.Adapter adapter = listView.getAdapter();
                 if (adapter == postsAdapter) {
-                    TLRPC.TL_dialog dialog = postsAdapter.getItem(position);
-                    if (dialog == null) {
+                    PostObject postObject = postsAdapter.getItem(position);
+                    if (postObject == null) {
                         return;
                     }
-                    dialog_id = dialog.id;
+                    post_id = postObject.getId();
                 } else if (adapter == postsSearchAdapter) {
                     Object obj = postsSearchAdapter.getItem(position);
-                    if (obj instanceof TLRPC.User) {
-                        dialog_id = ((TLRPC.User) obj).id;
-                        if (postsSearchAdapter.isGlobalSearch(position)) {
-                            ArrayList<TLRPC.User> users = new ArrayList<>();
-                            users.add((TLRPC.User) obj);
-                            MessagesController.getInstance().putUsers(users, false);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                        }
-                    } else if (obj instanceof TLRPC.Chat) {
-                        if (((TLRPC.Chat) obj).id > 0) {
-                            dialog_id = -((TLRPC.Chat) obj).id;
-                        } else {
-                            dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
-                        }
-                    } else if (obj instanceof TLRPC.EncryptedChat) {
-                        dialog_id = ((long) ((TLRPC.EncryptedChat) obj).id) << 32;
-                    } else if (obj instanceof MessageObject) {
-                        MessageObject messageObject = (MessageObject) obj;
-                        dialog_id = messageObject.getDialogId();
-                        message_id = messageObject.getId();
+                    if (obj instanceof PostObject) {
+                        PostObject postObject = (PostObject) obj;
+                        post_id = postObject.getId();
                         postsSearchAdapter.addHashtagsFromMessage(postsSearchAdapter.getLastSearchString());
                     } else if (obj instanceof String) {
                         actionBar.openSearchField((String) obj);
                     }
                 }
 
-                if (dialog_id == 0) {
+                if (StringUtils.isEmpty(post_id)) {
                     return;
                 }
 
                 if (onlySelect) {
-                    didSelectResult(dialog_id, true, false);
+//                    didSelectResult(post_id, true, false);
                 } else {
                     Bundle args = new Bundle();
-                    int lower_part = (int) dialog_id;
-                    int high_id = (int) (dialog_id >> 32);
-                    if (lower_part != 0) {
-                        if (high_id == 1) {
-                            args.putInt("chat_id", lower_part);
-                        } else {
-                            if (lower_part > 0) {
-                                args.putInt("user_id", lower_part);
-                            } else if (lower_part < 0) {
-                                args.putInt("chat_id", -lower_part);
-                            }
-                        }
-                    } else {
-                        args.putInt("enc_id", high_id);
-                    }
-                    if (message_id != 0) {
-                        args.putInt("message_id", message_id);
-                    } else {
-                        if (actionBar != null) {
-                            actionBar.closeSearchField();
-                        }
-                    }
-                    if (AndroidUtilities.isTablet()) {
-                        if (openedDialogId == dialog_id) {
-                            return;
-                        }
-                        if (postsAdapter != null) {
-                            postsAdapter.setOpenedDialogId(openedDialogId = dialog_id);
-                            updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
-                        }
-                    }
-                    if (searchString != null) {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                        presentFragment(new ChatActivity(args));
-                    } else {
-                        presentFragment(new ChatActivity(args));
+
+
+                    if (actionBar != null) {
+                        actionBar.closeSearchField();
                     }
+
+                    // TODO here action on click to post. Open new Activity for example
+
+//                    if (AndroidUtilities.isTablet()) {
+//                        if (!StringUtils.isEmpty(openedPostId) && openedPostId.equals(post_id)) {
+//                            return;
+//                        }
+//                        if (postsAdapter != null) {
+//                            postsAdapter.setOpenedPostId(openedPostId = post_id);
+//                            updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
+//                        }
+//                    }
+//                    if (searchString != null) {
+//                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+//                        presentFragment(new ChatActivity(args));
+//                    } else {
+//                        presentFragment(new ChatActivity(args));
+//                    }
                 }
             }
         });
@@ -417,19 +384,11 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     }
                     return;
                 }
-                TLRPC.TL_dialog dialog;
-                if (serverOnly) {
-                    if (position < 0 || position >= MessagesController.getInstance().dialogsServerOnly.size()) {
-                        return;
-                    }
-                    dialog = MessagesController.getInstance().dialogsServerOnly.get(position);
-                } else {
-                    if (position < 0 || position >= MessagesController.getInstance().dialogs.size()) {
-                        return;
-                    }
-                    dialog = MessagesController.getInstance().dialogs.get(position);
-                }
-                selectedDialog = dialog.id;
+                PostObject postObject;
+
+                postObject = PostsController.getInstance().postObjects.get(position);
+
+                selectedPost = postObject.getId();
 
                 /*AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                 builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -439,12 +398,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 showDialog(builder.create());*/
 
                 BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
-                int lower_id = (int) selectedDialog;
-                int high_id = (int) (selectedDialog >> 32);
+//                int lower_id = (int) selectedPost;
+//                int high_id = (int) (selectedPost >> 32);
 
-                final boolean isChat = lower_id < 0 && high_id != 1;
+//                final boolean isChat = lower_id < 0 && high_id != 1;
                 builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory),
-                        isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : LocaleController.getString("Delete", R.string.Delete)}, new DialogInterface.OnClickListener() {
+                        LocaleController.getString("Delete", R.string.Delete)}, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, final int which) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -452,31 +411,22 @@ public void onClick(DialogInterface dialog, final int which) {
                         if (which == 0) {
                             builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
                         } else {
-                            if (isChat) {
-                                builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
-                            } else {
-                                builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
-                            }
+
+                            builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
+
                         }
                         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
                                 if (which != 0) {
-                                    if (isChat) {
-                                        TLRPC.Chat currentChat = MessagesController.getInstance().getChat((int) -selectedDialog);
-                                        if (currentChat != null && currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
-                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
-                                        } else {
-                                            MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
-                                        }
-                                    } else {
-                                        MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
-                                    }
+
+                                    PostsController.getInstance().deletePost(selectedPost, 0, false);
+
                                     if (AndroidUtilities.isTablet()) {
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedPost);
                                     }
                                 } else {
-                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
+                                    PostsController.getInstance().deletePost(selectedPost, 0, true);
                                 }
                             }
                         });
@@ -573,14 +523,15 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 int totalItemCount = recyclerView.getAdapter().getItemCount();
 
                 if (searching && searchWas) {
-                    if (visibleItemCount > 0 && layoutManager.findLastVisibleItemPosition() == totalItemCount - 1 && !postsSearchAdapter.isMessagesSearchEndReached()) {
+                    if (visibleItemCount > 0 && layoutManager.findLastVisibleItemPosition() == totalItemCount - 1 && !postsSearchAdapter.isPostsSearchEndReached()) {
                         postsSearchAdapter.loadMoreSearchMessages();
                     }
                     return;
                 }
+                //TODO fix it.
                 if (visibleItemCount > 0) {
-                    if (layoutManager.findLastVisibleItemPosition() == MessagesController.getInstance().dialogs.size() && !serverOnly || layoutManager.findLastVisibleItemPosition() == MessagesController.getInstance().dialogsServerOnly.size() && serverOnly) {
-                        MessagesController.getInstance().loadDialogs(MessagesController.getInstance().dialogs.size(), MessagesController.getInstance().dialogsServerOnly.size(), 100, true);
+                    if (layoutManager.findLastVisibleItemPosition() == PostsController.getInstance().postObjects.size()) {
+                        PostsController.getInstance().loadPosts(PostsController.getInstance().postObjects.size(), PostsController.getInstance().postObjects.size(), 100, true);
                     }
                 }
 
@@ -611,8 +562,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
 
         if (searchString == null) {
             postsAdapter = new PostsAdapter(context, serverOnly);
-            if (AndroidUtilities.isTablet() && openedDialogId != 0) {
-                postsAdapter.setOpenedDialogId(openedDialogId);
+            if (AndroidUtilities.isTablet() && StringUtils.isEmpty(openedPostId)) {
+                postsAdapter.setOpenedPostId(openedPostId);
             }
             listView.setAdapter(postsAdapter);
         }
@@ -623,7 +574,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
             type = 1;
         }
         postsSearchAdapter = new PostsSearchAdapter(context, type);
-        postsSearchAdapter.setDelegate(new PostsSearchAdapter.MessagesActivitySearchAdapterDelegate() {
+        postsSearchAdapter.setDelegate(new PostsSearchAdapter.PostsActivitySearchAdapterDelegate() {
             @Override
             public void searchStateChanged(boolean search) {
                 if (searching && searchWas && searchEmptyView != null) {
@@ -636,7 +587,7 @@ public void searchStateChanged(boolean search) {
             }
         });
 
-        if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+        if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
             searchEmptyView.setVisibility(View.INVISIBLE);
             emptyView.setVisibility(View.INVISIBLE);
             listView.setEmptyView(progressView);
@@ -692,7 +643,7 @@ public void didReceivedNotification(int id, Object... args) {
                 if (postsAdapter.isDataSetChanged()) {
                     postsAdapter.notifyDataSetChanged();
                 } else {
-                    updateVisibleRows(MessagesController.UPDATE_MASK_NEW_MESSAGE);
+                    updateVisibleRows(PostsController.UPDATE_MASK_NEW_MESSAGE);
                 }
             }
             if (postsSearchAdapter != null) {
@@ -700,7 +651,7 @@ public void didReceivedNotification(int id, Object... args) {
             }
             if (listView != null) {
                 try {
-                    if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
                         searchEmptyView.setVisibility(View.INVISIBLE);
                         emptyView.setVisibility(View.INVISIBLE);
                         listView.setEmptyView(progressView);
@@ -725,31 +676,31 @@ public void didReceivedNotification(int id, Object... args) {
         } else if (id == NotificationCenter.updateInterfaces) {
             updateVisibleRows((Integer) args[0]);
         } else if (id == NotificationCenter.appDidLogout) {
-            dialogsLoaded = false;
+            postsLoaded = false;
         } else if (id == NotificationCenter.encryptedChatUpdated) {
             updateVisibleRows(0);
         } else if (id == NotificationCenter.contactsDidLoaded) {
             updateVisibleRows(0);
         } else if (id == NotificationCenter.openedChatChanged) {
-            if (!serverOnly && AndroidUtilities.isTablet()) {
-                boolean close = (Boolean) args[1];
-                long dialog_id = (Long) args[0];
-                if (close) {
-                    if (dialog_id == openedDialogId) {
-                        openedDialogId = 0;
-                    }
-                } else {
-                    openedDialogId = dialog_id;
-                }
-                if (postsAdapter != null) {
-                    postsAdapter.setOpenedDialogId(openedDialogId);
-                }
-                updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
-            }
+//            if (!serverOnly && AndroidUtilities.isTablet()) {
+//                boolean close = (Boolean) args[1];
+//                String dialog_id = (String) args[0];
+//                if (close) {
+//                    if (dialog_id == openedPostId) {
+//                        openedPostId = 0;
+//                    }
+//                } else {
+//                    openedPostId = dialog_id;
+//                }
+//                if (postsAdapter != null) {
+//                    postsAdapter.setOpenedPostId(openedPostId);
+//                }
+//                updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
+//            }
         } else if (id == NotificationCenter.notificationsSettingsUpdated) {
             updateVisibleRows(0);
         } else if (id == NotificationCenter.messageReceivedByAck || id == NotificationCenter.messageReceivedByServer || id == NotificationCenter.messageSendError) {
-            updateVisibleRows(MessagesController.UPDATE_MASK_SEND_STATE);
+            updateVisibleRows(PostsController.UPDATE_MASK_SEND_STATE);
         } else if (id == NotificationCenter.didSetPasscode) {
             updatePasscodeButton();
         }
@@ -791,14 +742,14 @@ private void updateVisibleRows(int mask) {
             View child = listView.getChildAt(a);
             if (child instanceof PostCell) {
                 PostCell cell = (PostCell) child;
-                if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0) {
-                    cell.checkCurrentDialogIndex();
+                if ((mask & PostsController.UPDATE_MASK_NEW_MESSAGE) != 0) {
+                    cell.checkCurrentPostIndex();
                     if (!serverOnly && AndroidUtilities.isTablet()) {
-                        cell.setDialogSelected(cell.getDialogId() == openedDialogId);
+                        cell.setPostSelected(cell.getPostId().equals(openedPostId));
                     }
-                } else if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
+                } else if ((mask & PostsController.UPDATE_MASK_SELECT_DIALOG) != 0) {
                     if (!serverOnly && AndroidUtilities.isTablet()) {
-                        cell.setDialogSelected(cell.getDialogId() == openedDialogId);
+                        cell.setPostSelected(cell.getPostId().equals(openedPostId));
                     }
                 } else {
                     cell.update(mask);
@@ -822,61 +773,7 @@ public boolean isMainDialogList() {
         return delegate == null && searchString == null;
     }
 
-    private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
-        if (useAlert && selectAlertString != null && selectAlertStringGroup != null) {
-            if (getParentActivity() == null) {
-                return;
-            }
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            int lower_part = (int) dialog_id;
-            int high_id = (int) (dialog_id >> 32);
-            if (lower_part != 0) {
-                if (high_id == 1) {
-                    TLRPC.Chat chat = MessagesController.getInstance().getChat(lower_part);
-                    if (chat == null) {
-                        return;
-                    }
-                    builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
-                } else {
-                    if (lower_part > 0) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
-                        if (user == null) {
-                            return;
-                        }
-                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
-                    } else if (lower_part < 0) {
-                        TLRPC.Chat chat = MessagesController.getInstance().getChat(-lower_part);
-                        if (chat == null) {
-                            return;
-                        }
-                        builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
-                    }
-                }
-            } else {
-                TLRPC.EncryptedChat chat = MessagesController.getInstance().getEncryptedChat(high_id);
-                TLRPC.User user = MessagesController.getInstance().getUser(chat.user_id);
-                if (user == null) {
-                    return;
-                }
-                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
-            }
-
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
-                    didSelectResult(dialog_id, false, false);
-                }
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            showDialog(builder.create());
-        } else {
-            if (delegate != null) {
-                delegate.didSelectDialog(PostsActivity.this, dialog_id, param);
-                delegate = null;
-            } else {
-                finishFragment();
-            }
-        }
+    private void didSelectResult(final String dialog_id, boolean useAlert, final boolean param) {
+        //TODO here onlySelect Posts (Dialog)
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
new file mode 100644
index 000000000..e71807478
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -0,0 +1,14 @@
+package org.telegram.utils;
+
+/**
+ * Created by aragats on 15/05/15.
+ */
+public class Constants {
+    public static final String WGO = "Whats going on";
+    public static final String WGO_IMAGE = "Whats going on. Images";
+    public static final String WGO_VIDEO = "Whats going on. Videos";
+    public static final String WGO_AUDIO = "Whats going on. Audios";
+    public static final String WGO_DOCUMENT = "Whats going on. Documents";
+    public static final String WGOFaqUrl = "WGOFaqUrl";
+    public static final String WGO_FAQ = "WGOFAQ";
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/StringUtils.java b/TMessagesProj/src/main/java/org/telegram/utils/StringUtils.java
new file mode 100644
index 000000000..9ec7ea5b4
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/utils/StringUtils.java
@@ -0,0 +1,13 @@
+package org.telegram.utils;
+
+/**
+ * Created by aragats on 10/05/15.
+ */
+public class StringUtils {
+
+
+    public static boolean isEmpty(String str) {
+        return str == null || str.length() == 0;
+    }
+
+}
