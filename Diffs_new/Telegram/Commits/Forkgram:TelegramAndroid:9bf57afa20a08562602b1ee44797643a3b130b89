diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
index f5e2f2eef..8a210ff23 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
@@ -958,7 +958,7 @@ public static Dialog createMuteAlert(Context context, final long dialog_id) {
                     SharedPreferences preferences = MessagesController.getNotificationsSettings(UserConfig.selectedAccount);
                     SharedPreferences.Editor editor = preferences.edit();
                     long flags;
-                    if (i == 3) {
+                    if (i == (times.length - 1)) {
                         editor.putInt("notify2_" + dialog_id, 2);
                         flags = 1;
                     } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index d830a3123..9080de3bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -2101,11 +2101,13 @@ public boolean processSendingText(CharSequence text) {
                 ArrayList<TLRPC.MessageEntity> entities = DataQuery.getInstance(currentAccount).getEntities(message);
                 String textMessageString = message[0].toString();
 
-                boolean endsWithMono = false;
+                boolean endsWithRichText = false;
                 if (entities != null) {
                     TLRPC.MessageEntity last = entities.get(entities.size() - 1);
-                    if (last instanceof TLRPC.TL_messageEntityCode) {
-                        endsWithMono = last.offset + last.length == textMessageString.length();
+                    if (last instanceof TLRPC.TL_messageEntityCode
+                        || last instanceof TLRPC.TL_messageEntityUrl
+                        || last instanceof TLRPC.TL_messageEntityEmail) {
+                        endsWithRichText = last.offset + last.length == textMessageString.length();
                     }
                 }
 
@@ -2119,8 +2121,10 @@ public boolean processSendingText(CharSequence text) {
                         && !textMessageString.endsWith("â€¦")
                         && !textMessageString.endsWith("?")
                         && !textMessageString.endsWith("+")
+                        && !textMessageString.endsWith("=)")
+                        && !textMessageString.endsWith("=(")
                         && !skipDot
-                        && !endsWithMono
+                        && !endsWithRichText
                         && !textMessageString.startsWith("/")) {
                         textMessageString += ".";
                     }
@@ -3340,6 +3344,12 @@ public void onStickerSelected(TLRPC.Document sticker, Object parent) {
             emojiView.hideSearchKeyboard();
         }
         setStickersExpanded(false, true, false);
+
+        // If this sticker was sent from Sticker Suggestion -> View Pack,
+        // Then don't sendMessage().
+        if (Emoji.isValidEmoji(messageEditText.getText().toString())) {
+            messageEditText.setText("");
+        }
         sendMessage();
         SendMessagesHelper.getInstance(currentAccount).sendSticker(sticker, dialog_id, replyingMessageObject, parent);
         if (delegate != null) {
