diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 23a2ceb30..40cab7174 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -113,15 +113,6 @@
             android:name="org.telegram.ui.IntroActivity"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
         </activity>
-        <activity
-            android:name="org.telegram.ui.PopupNotificationActivity"
-            android:configChanges="keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize"
-            android:excludeFromRecents="true"
-            android:launchMode="singleTask"
-            android:taskAffinity=""
-            android:theme="@style/Theme.TMessages.PopupNotification"
-            android:windowSoftInputMode="adjustResize|stateHidden">
-        </activity>
 
 
         <service android:name="org.telegram.android.AuthenticatorService" android:exported="true">
@@ -142,17 +133,6 @@
                 android:resource="@xml/contacts" />
         </service>
 
-        <service android:name="org.telegram.android.NotificationsService" android:enabled="true"/>
-        <service android:name="org.telegram.android.NotificationRepeat" android:exported="false"/>
-        <service android:name="org.telegram.android.NotificationDelay" android:exported="false"/>
-
-        <receiver android:name="org.telegram.android.AppStartReceiver" android:enabled="true">
-            <intent-filter>
-                <action android:name="org.telegram.start" />
-                <action android:name="android.intent.action.BOOT_COMPLETED" />
-            </intent-filter>
-        </receiver>
-
         <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
         <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
         <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java
deleted file mode 100644
index 49bfe9f0b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-import org.telegram.messenger.ApplicationLoader;
-
-public class AppStartReceiver extends BroadcastReceiver {
-    public void onReceive(Context context, Intent intent) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                ApplicationLoader.startPushService();
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 9bbefe8e4..f60d918b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -1454,7 +1454,6 @@ private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiv
 
         final Integer finalTag = TAG;
         final boolean finalIsNeedsQualityThumb = imageReceiver.isNeedsQualityThumb();
-        final MessageObject parentMessageObject = imageReceiver.getParentMessageObject();
         final boolean shouldGenerateQualityThumb = imageReceiver.isShouldGenerateQualityThumb();
         imageLoadQueue.postRunnable(new Runnable() {
             @Override
@@ -1511,34 +1510,6 @@ public void run() {
                                 cacheFile = null;
                             }
                         }
-
-                        if (parentMessageObject != null) {
-                            File attachPath = null;
-                            if (parentMessageObject.messageOwner.attachPath != null && parentMessageObject.messageOwner.attachPath.length() > 0) {
-                                attachPath = new File(parentMessageObject.messageOwner.attachPath);
-                                if (!attachPath.exists()) {
-                                    attachPath = null;
-                                }
-                            }
-                            if (attachPath == null) {
-                                attachPath = FileLoader.getPathToMessage(parentMessageObject.messageOwner);
-                            }
-                            if (finalIsNeedsQualityThumb && cacheFile == null) {
-                                String location = parentMessageObject.getFileName();
-                                ThumbGenerateInfo info = waitingForQualityThumb.get(location);
-                                if (info == null) {
-                                    info = new ThumbGenerateInfo();
-                                    info.fileLocation = (TLRPC.TL_fileLocation) imageLocation;
-                                    info.filter = filter;
-                                    waitingForQualityThumb.put(location, info);
-                                }
-                                info.count++;
-                                waitingForQualityThumbByTag.put(finalTag, location);
-                            }
-                            if (attachPath.exists() && shouldGenerateQualityThumb) {
-                                generateThumb(parentMessageObject.getFileType(), attachPath, (TLRPC.TL_fileLocation) imageLocation, filter);
-                            }
-                        }
                     }
 
                     if (thumb != 2) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index 8cb24dd22..9fa5bf409 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -49,7 +49,7 @@
     private View parentView;
     private Integer tag;
     private Integer thumbTag;
-    private MessageObject parentMessageObject;
+//    private MessageObject parentMessageObject;
     private boolean canceledLoading;
 
     private SetImageBackup setImageBackup;
@@ -739,13 +739,13 @@ public int getRoundRadius() {
         return roundRadius;
     }
 
-    public void setParentMessageObject(MessageObject messageObject) {
-        parentMessageObject = messageObject;
-    }
+//    public void setParentMessageObject(MessageObject messageObject) {
+//        parentMessageObject = messageObject;
+//    }
 
-    public MessageObject getParentMessageObject() {
-        return parentMessageObject;
-    }
+//    public MessageObject getParentMessageObject() {
+//        return parentMessageObject;
+//    }
 
     public void setNeedsQualityThumb(boolean value) {
         needsQualityThumb = value;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
deleted file mode 100644
index 387ec76d5..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ /dev/null
@@ -1,835 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.android;
-
-import android.graphics.Paint;
-import android.text.Layout;
-import android.text.Spannable;
-import android.text.SpannableStringBuilder;
-import android.text.Spanned;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.text.util.Linkify;
-
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.URLSpanNoUnderline;
-import org.telegram.ui.Components.URLSpanNoUnderlineBold;
-
-import java.util.AbstractMap;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.GregorianCalendar;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class MessageObject {
-
-    public static final int MESSAGE_SEND_STATE_SENDING = 1;
-    public static final int MESSAGE_SEND_STATE_SENT = 0;
-    public static final int MESSAGE_SEND_STATE_SEND_ERROR = 2;
-
-    public TLRPC.Message messageOwner;
-    public CharSequence messageText;
-    public CharSequence linkDescription;
-    public CharSequence caption;
-    public MessageObject replyMessageObject;
-    public int type;
-    public int contentType;
-    public String dateKey;
-    public String monthKey;
-    public boolean deleted;
-    public float audioProgress;
-    public int audioProgressSec;
-    public ArrayList<TLRPC.PhotoSize> photoThumbs;
-
-    public static TextPaint textPaint;
-    public int lastLineWidth;
-    public int textWidth;
-    public int textHeight;
-    public int blockHeight = Integer.MAX_VALUE;
-
-    public static class TextLayoutBlock {
-        public StaticLayout textLayout;
-        public float textXOffset = 0;
-        public float textYOffset = 0;
-        public int charactersOffset = 0;
-    }
-
-    private static final int LINES_PER_BLOCK = 10;
-
-    public ArrayList<TextLayoutBlock> textLayoutBlocks;
-
-    public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users, boolean generateLayout) {
-        if (textPaint == null) {
-            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            textPaint.setColor(0xff000000);
-            textPaint.linkColor = 0xff316f9f;
-        }
-
-        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
-
-        messageOwner = message;
-
-        if (message.replyMessage != null) {
-            replyMessageObject = new MessageObject(message.replyMessage, users, false);
-        }
-
-        messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-
-        if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded_old2) {
-            if (isMediaEmpty()) {
-                contentType = type = 0;
-                if (messageText.length() == 0) {
-                    messageText = "Empty message";
-                }
-            } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                contentType = type = 1;
-            } else if (message.media instanceof TLRPC.TL_messageMediaGeo || message.media instanceof TLRPC.TL_messageMediaVenue) {
-                contentType = 1;
-                type = 4;
-            } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                contentType = 1;
-                type = 3;
-            } else if (message.media instanceof TLRPC.TL_messageMediaContact) {
-                contentType = 3;
-                type = 12;
-            } else if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
-                contentType = type = 0;
-            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                contentType = 1;
-                if (message.media.document.mime_type != null) {
-                    if (message.media.document.mime_type.equals("image/gif") && message.media.document.thumb != null && !(message.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
-                        type = 8;
-                    } else if (message.media.document.mime_type.equals("image/webp") && isSticker()) {
-                        type = 13;
-                    } else {
-                        type = 9;
-                    }
-                } else {
-                    type = 9;
-                }
-            } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-                contentType = type = 2;
-            }
-        } else if (message instanceof TLRPC.TL_messageService) {
-            if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                contentType = type = 0;
-            } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto || message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                contentType = 4;
-                type = 11;
-            } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
-                if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                    contentType = 4;
-                    type = 10;
-                } else {
-                    contentType = -1;
-                    type = -1;
-                }
-            } else {
-                contentType = 4;
-                type = 10;
-            }
-        }
-
-        Calendar rightNow = new GregorianCalendar();
-        rightNow.setTimeInMillis((long) (messageOwner.date) * 1000);
-        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
-        int dateYear = rightNow.get(Calendar.YEAR);
-        int dateMonth = rightNow.get(Calendar.MONTH);
-        dateKey = String.format("%d_%02d_%02d", dateYear, dateMonth, dateDay);
-        if (contentType == 1 || contentType == 2) {
-            monthKey = String.format("%d_%02d", dateYear, dateMonth);
-        }
-
-        if (messageOwner.message != null && messageOwner.id < 0 && messageOwner.message.length() > 6 && messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-
-        }
-
-        generateCaption();
-        if (generateLayout) {
-            generateLayout();
-        }
-        generateThumbs(false);
-    }
-
-    public void generateThumbs(boolean update) {
-        if (messageOwner instanceof TLRPC.TL_messageService) {
-            if (messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
-                if (!update) {
-                    photoThumbs = new ArrayList<>(messageOwner.action.photo.sizes);
-                } else if (photoThumbs != null && !photoThumbs.isEmpty()) {
-                    for (TLRPC.PhotoSize photoObject : photoThumbs) {
-                        for (TLRPC.PhotoSize size : messageOwner.action.photo.sizes) {
-                            if (size instanceof TLRPC.TL_photoSizeEmpty) {
-                                continue;
-                            }
-                            if (size.type.equals(photoObject.type)) {
-                                photoObject.location = size.location;
-                                break;
-                            }
-                        }
-                    }
-                }
-            }
-        } else if (messageOwner.media != null && !(messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
-            if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                if (!update) {
-                    photoThumbs = new ArrayList<>(messageOwner.media.photo.sizes);
-                } else if (photoThumbs != null && !photoThumbs.isEmpty()) {
-                    for (TLRPC.PhotoSize photoObject : photoThumbs) {
-                        for (TLRPC.PhotoSize size : messageOwner.media.photo.sizes) {
-                            if (size instanceof TLRPC.TL_photoSizeEmpty) {
-                                continue;
-                            }
-                            if (size.type.equals(photoObject.type)) {
-                                photoObject.location = size.location;
-                                break;
-                            }
-                        }
-                    }
-                }
-            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                if (!update) {
-                    photoThumbs = new ArrayList<>();
-                    photoThumbs.add(messageOwner.media.video.thumb);
-                } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.video.thumb != null) {
-                    TLRPC.PhotoSize photoObject = photoThumbs.get(0);
-                    photoObject.location = messageOwner.media.video.thumb.location;
-                }
-            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                if (!(messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
-                    if (!update) {
-                        photoThumbs = new ArrayList<>();
-                        photoThumbs.add(messageOwner.media.document.thumb);
-                    } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.document.thumb != null) {
-                        TLRPC.PhotoSize photoObject = photoThumbs.get(0);
-                        photoObject.location = messageOwner.media.document.thumb.location;
-                    }
-                }
-            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
-                if (messageOwner.media.webpage.photo != null) {
-                    if (!update || photoThumbs == null) {
-                        photoThumbs = new ArrayList<>(messageOwner.media.webpage.photo.sizes);
-                    } else if (!photoThumbs.isEmpty()) {
-                        for (TLRPC.PhotoSize photoObject : photoThumbs) {
-                            for (TLRPC.PhotoSize size : messageOwner.media.webpage.photo.sizes) {
-                                if (size instanceof TLRPC.TL_photoSizeEmpty) {
-                                    continue;
-                                }
-                                if (size.type.equals(photoObject.type)) {
-                                    photoObject.location = size.location;
-                                    break;
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    public CharSequence replaceWithLink(CharSequence source, String param, TLRPC.User user) {
-        String name = ContactsController.formatName(user.first_name, user.last_name);
-        int start = TextUtils.indexOf(source, param);
-        URLSpanNoUnderlineBold span = new URLSpanNoUnderlineBold("" + user.id);
-        SpannableStringBuilder builder = new SpannableStringBuilder(TextUtils.replace(source, new String[]{param}, new String[]{name}));
-        builder.setSpan(span, start, start + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-        return builder;
-    }
-
-    public String getFileName() {
-        if (messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-            return FileLoader.getAttachFileName(messageOwner.media.video);
-        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-            return FileLoader.getAttachFileName(messageOwner.media.document);
-        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-            return FileLoader.getAttachFileName(messageOwner.media.audio);
-        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-            ArrayList<TLRPC.PhotoSize> sizes = messageOwner.media.photo.sizes;
-            if (sizes.size() > 0) {
-                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
-                if (sizeFull != null) {
-                    return FileLoader.getAttachFileName(sizeFull);
-                }
-            }
-        }
-        return "";
-    }
-
-    public int getFileType() {
-        if (messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-            return FileLoader.MEDIA_DIR_VIDEO;
-        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-            return FileLoader.MEDIA_DIR_DOCUMENT;
-        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-            return FileLoader.MEDIA_DIR_AUDIO;
-        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-            return FileLoader.MEDIA_DIR_IMAGE;
-        }
-        return FileLoader.MEDIA_DIR_CACHE;
-    }
-
-    private boolean containsUrls(CharSequence message) {
-        if (message == null || message.length() < 3 || message.length() > 1024 * 20) {
-            return false;
-        }
-
-        int length = message.length();
-
-        int digitsInRow = 0;
-        int schemeSequence = 0;
-        int dotSequence = 0;
-
-        char lastChar = 0;
-
-        for (int i = 0; i < length; i++) {
-            char c = message.charAt(i);
-
-            if (c >= '0' && c <= '9') {
-                digitsInRow++;
-                if (digitsInRow >= 6) {
-                    return true;
-                }
-                schemeSequence = 0;
-                dotSequence = 0;
-            } else if (!(c != ' ' && digitsInRow > 0)) {
-                digitsInRow = 0;
-            }
-            if ((c == '@' || c == '#') && i == 0 || i != 0 && (message.charAt(i - 1) == ' ' || message.charAt(i - 1) == '\n')) {
-                return true;
-            }
-            if (c == ':') {
-                if (schemeSequence == 0) {
-                    schemeSequence = 1;
-                } else {
-                    schemeSequence = 0;
-                }
-            } else if (c == '/') {
-                if (schemeSequence == 2) {
-                    return true;
-                }
-                if (schemeSequence == 1) {
-                    schemeSequence++;
-                } else {
-                    schemeSequence = 0;
-                }
-            } else if (c == '.') {
-                if (dotSequence == 0 && lastChar != ' ') {
-                    dotSequence++;
-                } else {
-                    dotSequence = 0;
-                }
-            } else if (c != ' ' && lastChar == '.' && dotSequence == 1) {
-                return true;
-            } else {
-                dotSequence = 0;
-            }
-            lastChar = c;
-        }
-        return false;
-    }
-
-    public void generateLinkDescription() {
-        if (linkDescription != null) {
-            return;
-        }
-        if (messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && messageOwner.media.webpage instanceof TLRPC.TL_webPage && messageOwner.media.webpage.description != null) {
-            linkDescription = Spannable.Factory.getInstance().newSpannable(messageOwner.media.webpage.description);
-            if (containsUrls(linkDescription)) {
-                Linkify.addLinks((Spannable) linkDescription, Linkify.WEB_URLS);
-            }
-        }
-    }
-
-    public void generateCaption() {
-        if (caption != null) {
-            return;
-        }
-        if (messageOwner.media != null && messageOwner.media.caption != null && messageOwner.media.caption.length() > 0) {
-            caption = Emoji.replaceEmoji(messageOwner.media.caption, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-            if (containsUrls(caption)) {
-                try {
-                    Linkify.addLinks((Spannable) caption, Linkify.WEB_URLS);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                addUsernamesAndHashtags(caption);
-            }
-        }
-    }
-
-    private void addUsernamesAndHashtags(CharSequence charSequence) {
-        try {
-            Pattern pattern = Pattern.compile("(^|\\s)@[a-zA-Z\\d_]{5,32}|(^|\\s)#[\\w\\.]+");
-            Matcher matcher = pattern.matcher(charSequence);
-            while (matcher.find()) {
-                int start = matcher.start();
-                int end = matcher.end();
-                if (charSequence.charAt(start) != '@' && charSequence.charAt(start) != '#') {
-                    start++;
-                }
-                URLSpanNoUnderline url = new URLSpanNoUnderline(charSequence.subSequence(start, end).toString());
-                ((Spannable) charSequence).setSpan(url, start, end, 0);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void generateLayout() {
-        if (type != 0 || messageOwner.to_id == null || messageText == null || messageText.length() == 0) {
-            return;
-        }
-
-        generateLinkDescription();
-        textLayoutBlocks = new ArrayList<>();
-
-        if (messageText instanceof Spannable && containsUrls(messageText)) {
-            if (messageText.length() < 100) {
-                try {
-                    Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS | Linkify.PHONE_NUMBERS);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            } else {
-                try {
-                    Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            addUsernamesAndHashtags(messageText);
-        }
-
-        int maxWidth;
-        if (AndroidUtilities.isTablet()) {
-            if (messageOwner.to_id.chat_id != 0 && !isOut()) {
-                maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
-            } else {
-                maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
-            }
-        } else {
-            if (messageOwner.to_id.chat_id != 0 && !isOut()) {
-                maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
-            } else {
-                maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
-            }
-        }
-
-        StaticLayout textLayout;
-
-        try {
-            textLayout = new StaticLayout(messageText, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return;
-        }
-
-        textHeight = textLayout.getHeight();
-        int linesCount = textLayout.getLineCount();
-
-        int blocksCount = (int) Math.ceil((float) linesCount / LINES_PER_BLOCK);
-        int linesOffset = 0;
-        float prevOffset = 0;
-
-        for (int a = 0; a < blocksCount; a++) {
-            int currentBlockLinesCount = Math.min(LINES_PER_BLOCK, linesCount - linesOffset);
-            TextLayoutBlock block = new TextLayoutBlock();
-
-            if (blocksCount == 1) {
-                block.textLayout = textLayout;
-                block.textYOffset = 0;
-                block.charactersOffset = 0;
-                blockHeight = textHeight;
-            } else {
-                int startCharacter = textLayout.getLineStart(linesOffset);
-                int endCharacter = textLayout.getLineEnd(linesOffset + currentBlockLinesCount - 1);
-                if (endCharacter < startCharacter) {
-                    continue;
-                }
-                block.charactersOffset = startCharacter;
-                try {
-                    CharSequence str = messageText.subSequence(startCharacter, endCharacter);
-                    block.textLayout = new StaticLayout(str, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                    block.textYOffset = textLayout.getLineTop(linesOffset);
-                    if (a != 0) {
-                        blockHeight = Math.min(blockHeight, (int) (block.textYOffset - prevOffset));
-                    }
-                    prevOffset = block.textYOffset;
-                    /*if (a != blocksCount - 1) {
-                        int height = block.textLayout.getHeight();
-                        blockHeight = Math.min(blockHeight, block.textLayout.getHeight());
-                        prevOffset = block.textYOffset;
-                    } else {
-                        blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
-                    }*/
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                    continue;
-                }
-            }
-
-            textLayoutBlocks.add(block);
-
-            float lastLeft = block.textXOffset = 0;
-            try {
-                lastLeft = block.textXOffset = block.textLayout.getLineLeft(currentBlockLinesCount - 1);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            float lastLine = 0;
-            try {
-                lastLine = block.textLayout.getLineWidth(currentBlockLinesCount - 1);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            int linesMaxWidth = (int) Math.ceil(lastLine);
-            int lastLineWidthWithLeft;
-            int linesMaxWidthWithLeft;
-            boolean hasNonRTL = false;
-
-            if (a == blocksCount - 1) {
-                lastLineWidth = linesMaxWidth;
-            }
-
-            linesMaxWidthWithLeft = lastLineWidthWithLeft = (int) Math.ceil(lastLine + lastLeft);
-            if (lastLeft == 0) {
-                hasNonRTL = true;
-            }
-
-            if (currentBlockLinesCount > 1) {
-                float textRealMaxWidth = 0, textRealMaxWidthWithLeft = 0, lineWidth, lineLeft;
-                for (int n = 0; n < currentBlockLinesCount; ++n) {
-                    try {
-                        lineWidth = block.textLayout.getLineWidth(n);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                        lineWidth = 0;
-                    }
-
-                    if (lineWidth > maxWidth + 100) {
-                        lineWidth = maxWidth;
-                    }
-
-                    try {
-                        lineLeft = block.textLayout.getLineLeft(n);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                        lineLeft = 0;
-                    }
-
-                    block.textXOffset = Math.min(block.textXOffset, lineLeft);
-
-                    if (lineLeft == 0) {
-                        hasNonRTL = true;
-                    }
-                    textRealMaxWidth = Math.max(textRealMaxWidth, lineWidth);
-                    textRealMaxWidthWithLeft = Math.max(textRealMaxWidthWithLeft, lineWidth + lineLeft);
-                    linesMaxWidth = Math.max(linesMaxWidth, (int) Math.ceil(lineWidth));
-                    linesMaxWidthWithLeft = Math.max(linesMaxWidthWithLeft, (int) Math.ceil(lineWidth + lineLeft));
-                }
-                if (hasNonRTL) {
-                    textRealMaxWidth = textRealMaxWidthWithLeft;
-                    if (a == blocksCount - 1) {
-                        lastLineWidth = lastLineWidthWithLeft;
-                    }
-                } else if (a == blocksCount - 1) {
-                    lastLineWidth = linesMaxWidth;
-                }
-                textWidth = Math.max(textWidth, (int) Math.ceil(textRealMaxWidth));
-            } else {
-                textWidth = Math.max(textWidth, Math.min(maxWidth, linesMaxWidth));
-            }
-
-            if (hasNonRTL) {
-                block.textXOffset = 0;
-            }
-
-            linesOffset += currentBlockLinesCount;
-        }
-        if (blockHeight == 0) {
-            blockHeight = 1;
-        }
-    }
-
-    public boolean isOut() {
-        return (messageOwner.flags & TLRPC.MESSAGE_FLAG_OUT) != 0;
-    }
-
-    public boolean isUnread() {
-        return (messageOwner.flags & TLRPC.MESSAGE_FLAG_UNREAD) != 0;
-    }
-
-    public boolean isContentUnread() {
-        return (messageOwner.flags & TLRPC.MESSAGE_FLAG_CONTENT_UNREAD) != 0;
-    }
-
-    public void setIsRead() {
-        messageOwner.flags &= ~TLRPC.MESSAGE_FLAG_UNREAD;
-    }
-
-    public int getUnradFlags() {
-        return getUnreadFlags(messageOwner);
-    }
-
-    public static int getUnreadFlags(TLRPC.Message message) {
-        int flags = 0;
-        if ((message.flags & TLRPC.MESSAGE_FLAG_UNREAD) == 0) {
-            flags |= 1;
-        }
-        if ((message.flags & TLRPC.MESSAGE_FLAG_CONTENT_UNREAD) == 0) {
-            flags |= 2;
-        }
-        return flags;
-    }
-
-    public void setContentIsRead() {
-        messageOwner.flags &= ~TLRPC.MESSAGE_FLAG_CONTENT_UNREAD;
-    }
-
-    public int getId() {
-        return messageOwner.id;
-    }
-
-    public boolean isSecretPhoto() {
-        return messageOwner instanceof TLRPC.TL_message_secret && messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60;
-    }
-
-    public boolean isSecretMedia() {
-        return messageOwner instanceof TLRPC.TL_message_secret &&
-                (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60 ||
-                        messageOwner.media instanceof TLRPC.TL_messageMediaAudio ||
-                        messageOwner.media instanceof TLRPC.TL_messageMediaVideo);
-    }
-
-    public static void setUnreadFlags(TLRPC.Message message, int flag) {
-        if ((flag & 1) == 0) {
-            message.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
-        } else {
-            message.flags &= ~TLRPC.MESSAGE_FLAG_UNREAD;
-        }
-        if ((flag & 2) == 0) {
-            message.flags |= TLRPC.MESSAGE_FLAG_CONTENT_UNREAD;
-        } else {
-            message.flags &= ~TLRPC.MESSAGE_FLAG_CONTENT_UNREAD;
-        }
-    }
-
-    public static boolean isUnread(TLRPC.Message message) {
-        return (message.flags & TLRPC.MESSAGE_FLAG_UNREAD) != 0;
-    }
-
-    public static boolean isContentUnread(TLRPC.Message message) {
-        return (message.flags & TLRPC.MESSAGE_FLAG_CONTENT_UNREAD) != 0;
-    }
-
-    public static boolean isOut(TLRPC.Message message) {
-        return (message.flags & TLRPC.MESSAGE_FLAG_OUT) != 0;
-    }
-
-    public long getDialogId() {
-        if (messageOwner.dialog_id != 0) {
-            return messageOwner.dialog_id;
-        } else {
-            if (messageOwner.to_id.chat_id != 0) {
-                return -messageOwner.to_id.chat_id;
-            } else if (isOut()) {
-                return messageOwner.to_id.user_id;
-            } else {
-                return messageOwner.from_id;
-            }
-        }
-    }
-
-    public boolean isSending() {
-        return messageOwner.send_state == MESSAGE_SEND_STATE_SENDING && messageOwner.id < 0;
-    }
-
-    public boolean isSendError() {
-        return messageOwner.send_state == MESSAGE_SEND_STATE_SEND_ERROR;
-    }
-
-    public boolean isSent() {
-        return messageOwner.send_state == MESSAGE_SEND_STATE_SENT || messageOwner.id > 0;
-    }
-
-    public String getSecretTimeString() {
-        if (!isSecretMedia()) {
-            return null;
-        }
-        int secondsLeft = messageOwner.ttl;
-        if (messageOwner.destroyTime != 0) {
-            secondsLeft = Math.max(0, messageOwner.destroyTime - ConnectionsManager.getInstance().getCurrentTime());
-        }
-        String str;
-        if (secondsLeft < 60) {
-            str = secondsLeft + "s";
-        } else {
-            str = secondsLeft / 60 + "m";
-        }
-        return str;
-    }
-
-    public String getDocumentName() {
-        if (messageOwner.media != null && messageOwner.media.document != null) {
-            return FileLoader.getDocumentFileName(messageOwner.media.document);
-        }
-        return "";
-    }
-
-    public static boolean isStickerMessage(TLRPC.Message message) {
-        if (message.media != null && message.media.document != null) {
-            for (TLRPC.DocumentAttribute attribute : message.media.document.attributes) {
-                if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    public static TLRPC.InputStickerSet getInputStickerSet(TLRPC.Message message) {
-        if (message.media != null && message.media.document != null) {
-            for (TLRPC.DocumentAttribute attribute : message.media.document.attributes) {
-                if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                    if (attribute.stickerset instanceof TLRPC.TL_inputStickerSetEmpty) {
-                        return null;
-                    }
-                    return attribute.stickerset;
-                }
-            }
-        }
-        return null;
-    }
-
-    public String getStrickerChar() {
-        if (messageOwner.media != null && messageOwner.media.document != null) {
-            for (TLRPC.DocumentAttribute attribute : messageOwner.media.document.attributes) {
-                if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                    return attribute.alt;
-                }
-            }
-        }
-        return null;
-    }
-
-    public int getApproximateHeight() {
-        if (type == 0) {
-            return textHeight;
-        } else if (contentType == 2) {
-            return AndroidUtilities.dp(68);
-        } else if (contentType == 3) {
-            return AndroidUtilities.dp(71);
-        } else if (type == 9) {
-            return AndroidUtilities.dp(100);
-        } else if (type == 4) {
-            return AndroidUtilities.dp(114);
-        } else if (type == 13) {
-            float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
-            float maxWidth;
-            if (AndroidUtilities.isTablet()) {
-                maxWidth = AndroidUtilities.getMinTabletSide() * 0.5f;
-            } else {
-                maxWidth = AndroidUtilities.displaySize.x * 0.5f;
-            }
-            int photoHeight = 0;
-            int photoWidth = 0;
-            for (TLRPC.DocumentAttribute attribute : messageOwner.media.document.attributes) {
-                if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
-                    photoWidth = attribute.w;
-                    photoHeight = attribute.h;
-                    break;
-                }
-            }
-            if (photoWidth == 0) {
-                photoHeight = (int) maxHeight;
-                photoWidth = photoHeight + AndroidUtilities.dp(100);
-            }
-            if (photoHeight > maxHeight) {
-                photoWidth *= maxHeight / photoHeight;
-                photoHeight = (int)maxHeight;
-            }
-            if (photoWidth > maxWidth) {
-                photoHeight *= maxWidth / photoWidth;
-            }
-            return photoHeight + AndroidUtilities.dp(14);
-        } else {
-            int photoHeight;
-            int photoWidth;
-
-            if (AndroidUtilities.isTablet()) {
-                photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
-            } else {
-                photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
-            }
-            photoHeight = photoWidth + AndroidUtilities.dp(100);
-            if (photoWidth > AndroidUtilities.getPhotoSize()) {
-                photoWidth = AndroidUtilities.getPhotoSize();
-            }
-            if (photoHeight > AndroidUtilities.getPhotoSize()) {
-                photoHeight = AndroidUtilities.getPhotoSize();
-            }
-            TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(photoThumbs, AndroidUtilities.getPhotoSize());
-
-            if (currentPhotoObject != null) {
-                float scale = (float) currentPhotoObject.w / (float) photoWidth;
-                int h = (int) (currentPhotoObject.h / scale);
-                if (h == 0) {
-                    h = AndroidUtilities.dp(100);
-                }
-                if (h > photoHeight) {
-                    h = photoHeight;
-                } else if (h < AndroidUtilities.dp(120)) {
-                    h = AndroidUtilities.dp(120);
-                }
-                if (isSecretPhoto()) {
-                    if (AndroidUtilities.isTablet()) {
-                        h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
-                    } else {
-                        h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
-                    }
-                }
-                photoHeight = h;
-            }
-            return photoHeight + AndroidUtilities.dp(14);
-        }
-    }
-
-    public boolean isSticker() {
-        return isStickerMessage(messageOwner);
-    }
-
-    public TLRPC.InputStickerSet getInputStickerSet() {
-        return getInputStickerSet(messageOwner);
-    }
-
-    public boolean isForwarded() {
-        return (messageOwner.flags & TLRPC.MESSAGE_FLAG_FWD) != 0;
-    }
-
-    public boolean isReply() {
-        return !(replyMessageObject != null && replyMessageObject.messageOwner instanceof TLRPC.TL_messageEmpty) && messageOwner.reply_to_msg_id != 0 && (messageOwner.flags & TLRPC.MESSAGE_FLAG_REPLY) != 0;
-    }
-
-    public boolean isMediaEmpty() {
-        return isMediaEmpty(messageOwner);
-    }
-
-    public static boolean isMediaEmpty(TLRPC.Message message) {
-        return message == null || message.media == null || message.media instanceof TLRPC.TL_messageMediaEmpty || message.media instanceof TLRPC.TL_messageMediaWebPage;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index c449234a7..8d08c7431 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -109,7 +109,6 @@ public void didReceivedNotification(int id, Object... args) {
     public void cleanUp() {
         ContactsController.getInstance().cleanup();
         MediaController.getInstance().cleanup();
-        NotificationsController.getInstance().cleanup();
 
         totalDialogsCount = 0;
         loadingDialogs = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationDelay.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationDelay.java
deleted file mode 100644
index c47af63f3..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationDelay.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.app.IntentService;
-import android.content.Intent;
-
-public class NotificationDelay extends IntentService {
-
-    public NotificationDelay() {
-        super("NotificationDelay");
-    }
-
-    @Override
-    protected void onHandleIntent(Intent intent) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                NotificationsController.getInstance().notificationDelayReached();
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
deleted file mode 100644
index 9732b4aa7..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.app.IntentService;
-import android.content.Intent;
-
-import org.telegram.messenger.Utilities;
-
-public class NotificationRepeat extends IntentService {
-
-    public NotificationRepeat() {
-        super("NotificationRepeat");
-    }
-
-    @Override
-    protected void onHandleIntent(Intent intent) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                NotificationsController.getInstance().repeatNotificationMaybe();
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
deleted file mode 100644
index b64f2894f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ /dev/null
@@ -1,1052 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.app.AlarmManager;
-import android.app.PendingIntent;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.graphics.Point;
-import android.graphics.drawable.BitmapDrawable;
-import android.media.AudioManager;
-import android.media.SoundPool;
-import android.net.Uri;
-import android.os.Build;
-import android.os.SystemClock;
-import android.provider.Settings;
-import android.support.v4.app.NotificationCompat;
-import android.support.v4.app.NotificationManagerCompat;
-import android.support.v4.app.RemoteInput;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.DispatchQueue;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.ui.LaunchActivity;
-import org.telegram.ui.PopupNotificationActivity;
-
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.HashMap;
-import java.util.List;
-
-public class NotificationsController {
-
-    public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
-
-    private DispatchQueue notificationsQueue = new DispatchQueue("notificationsQueue");
-    private ArrayList<MessageObject> pushMessages = new ArrayList<>();
-    private ArrayList<MessageObject> delayedPushMessages = new ArrayList<>();
-    private HashMap<Integer, MessageObject> pushMessagesDict = new HashMap<>();
-    private HashMap<Long, Point> smartNotificationsDialogs = new HashMap<>();
-    private NotificationManagerCompat notificationManager = null;
-    private HashMap<Long, Integer> pushDialogs = new HashMap<>();
-    private HashMap<Long, Integer> wearNotificationsIds = new HashMap<>();
-    private HashMap<Long, Integer> autoNotificationsIds = new HashMap<>();
-    private HashMap<Long, Integer> pushDialogsOverrideMention = new HashMap<>();
-    private int wearNotificationId = 10000;
-    private int autoNotificationId = 20000;
-    public ArrayList<MessageObject> popupMessages = new ArrayList<>();
-    private long openned_dialog_id = 0;
-    private int total_unread_count = 0;
-    private int personal_count = 0;
-    private boolean notifyCheck = false;
-    private int lastOnlineFromOtherDevice = 0;
-    private boolean inChatSoundEnabled = true;
-    private int lastBadgeCount;
-    private String launcherClassName;
-
-    private long lastSoundPlay;
-    private long lastSoundOutPlay;
-    private SoundPool soundPool;
-    private int soundIn;
-    private int soundOut;
-    protected AudioManager audioManager;
-
-    private static volatile NotificationsController Instance = null;
-    public static NotificationsController getInstance() {
-        NotificationsController localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (MessagesController.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new NotificationsController();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    public NotificationsController() {
-        notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-        inChatSoundEnabled = preferences.getBoolean("EnableInChatSound", true);
-
-        try {
-            audioManager = (AudioManager) ApplicationLoader.applicationContext.getSystemService(Context.AUDIO_SERVICE);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void cleanup() {
-        openned_dialog_id = 0;
-        total_unread_count = 0;
-        personal_count = 0;
-        pushMessages.clear();
-        pushMessagesDict.clear();
-        pushDialogs.clear();
-        popupMessages.clear();
-        wearNotificationsIds.clear();
-        autoNotificationsIds.clear();
-        notifyCheck = false;
-        lastBadgeCount = 0;
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.clear();
-        editor.commit();
-    }
-
-    public void setInChatSoundEnabled(boolean value) {
-        inChatSoundEnabled = value;
-    }
-
-    public void setOpennedDialogId(long dialog_id) {
-        openned_dialog_id = dialog_id;
-    }
-
-    private String getStringForMessage(MessageObject messageObject, boolean shortMessage) {
-        long dialog_id = messageObject.messageOwner.dialog_id;
-        int chat_id = messageObject.messageOwner.to_id.chat_id;
-        int user_id = messageObject.messageOwner.to_id.user_id;
-        if (user_id == 0) {
-            user_id = messageObject.messageOwner.from_id;
-        }
-
-        if (dialog_id == 0) {
-            if (chat_id != 0) {
-                dialog_id = -chat_id;
-            } else if (user_id != 0) {
-                dialog_id = user_id;
-            }
-        }
-
-//        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-        TLRPC.User user = null;
-        if (user == null) {
-            return null;
-        }
-        TLRPC.Chat chat = null;
-        if (chat_id != 0) {
-//            chat = MessagesController.getInstance().getChat(chat_id);
-            if (chat == null) {
-                return null;
-            }
-        }
-
-        String msg = null;
-        if ((int)dialog_id == 0 || AndroidUtilities.needShowPasscode(false) || UserConfig.isWaitingForPasscodeEnter) {
-            msg = LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
-        } else {
-            if (chat_id == 0 && user_id != 0) {
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-                if (preferences.getBoolean("EnablePreviewAll", true)) {
-                    if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
-                        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserJoined) {
-                            msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, ContactsController.formatName(user.first_name, user.last_name));
-                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                            msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(user.first_name, user.last_name));
-                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                            String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long) messageObject.messageOwner.date) * 1000), LocaleController.formatterDay.format(((long) messageObject.messageOwner.date) * 1000));
-                            msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().getFirstName(), date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
-                        }
-                    } else {
-                        if (messageObject.isMediaEmpty()) {
-                            if (!shortMessage) {
-                                if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                    msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, ContactsController.formatName(user.first_name, user.last_name), messageObject.messageOwner.message);
-                                } else {
-                                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
-                                }
-                            } else {
-                                msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
-                            }
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, ContactsController.formatName(user.first_name, user.last_name));
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                            msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, ContactsController.formatName(user.first_name, user.last_name));
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                            msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, ContactsController.formatName(user.first_name, user.last_name));
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
-                            msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, ContactsController.formatName(user.first_name, user.last_name));
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            if (messageObject.isSticker()) {
-                                msg = LocaleController.formatString("NotificationMessageSticker", R.string.NotificationMessageSticker, ContactsController.formatName(user.first_name, user.last_name));
-                            } else {
-                                msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, ContactsController.formatName(user.first_name, user.last_name));
-                            }
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                            msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, ContactsController.formatName(user.first_name, user.last_name));
-                        }
-                    }
-                } else {
-                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
-                }
-            }
-        }
-        return msg;
-    }
-
-    private void scheduleNotificationRepeat() {
-        try {
-            AlarmManager alarm = (AlarmManager) ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
-            PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, NotificationRepeat.class), 0);
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            int minutes = preferences.getInt("repeat_messages", 60);
-            if (minutes > 0 && personal_count > 0) {
-                alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + minutes * 60 * 1000, pintent);
-            } else {
-                alarm.cancel(pintent);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void scheduleNotificationDelay(boolean onlineReason) {
-        try {
-            FileLog.e("tmessages", "delay notification start, onlineReason = " + onlineReason);
-            AlarmManager alarm = (AlarmManager) ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
-            PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, NotificationDelay.class), 0);
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            if (onlineReason) {
-                alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + 3 * 1000, pintent);
-            } else {
-                alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + 1000, pintent);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    protected void notificationDelayReached() {
-        FileLog.e("tmessages", "delay reached");
-        if (!delayedPushMessages.isEmpty()) {
-            showOrUpdateNotification(true);
-            delayedPushMessages.clear();
-        }
-    }
-
-    protected void repeatNotificationMaybe() {
-        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
-        if (hour >= 11 && hour <= 22) {
-            notificationManager.cancel(1);
-            showOrUpdateNotification(true);
-        } else {
-            scheduleNotificationRepeat();
-        }
-    }
-
-    public void setLastOnlineFromOtherDevice(final int time) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                FileLog.e("tmessages", "set last online from other device = " + time);
-                lastOnlineFromOtherDevice = time;
-            }
-        });
-    }
-
-    private void showOrUpdateNotification(boolean notifyAboutLast) {
-        if (!UserConfig.isClientActivated() || pushMessages.isEmpty()) {
-            dismissNotification();
-            return;
-        }
-        try {
-            ConnectionsManager.getInstance().resumeNetworkMaybe();
-
-            MessageObject lastMessageObject = pushMessages.get(0);
-
-            long dialog_id = lastMessageObject.getDialogId();
-            long override_dialog_id = dialog_id;
-            if ((lastMessageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_MENTION) != 0) {
-                override_dialog_id = lastMessageObject.messageOwner.from_id;
-            }
-            int mid = lastMessageObject.getId();
-            int chat_id = lastMessageObject.messageOwner.to_id.chat_id;
-            int user_id = lastMessageObject.messageOwner.to_id.user_id;
-            if (user_id == 0) {
-                user_id = lastMessageObject.messageOwner.from_id;
-            }
-
-//            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            TLRPC.User user = null;
-            TLRPC.Chat chat = null;
-            if (chat_id != 0) {
-//                chat = MessagesController.getInstance().getChat(chat_id);
-            }
-            TLRPC.FileLocation photoPath = null;
-
-            boolean notifyDisabled = false;
-            int needVibrate = 0;
-            String choosenSoundPath = null;
-            int ledColor = 0xff00ff00;
-            boolean inAppSounds;
-            boolean inAppVibrate;
-            boolean inAppPreview = false;
-            boolean inAppPriority;
-            int priority = 0;
-            int priorityOverride;
-            int vibrateOverride;
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-            int notifyOverride = getNotifyOverride(preferences, override_dialog_id);
-            if (!notifyAboutLast || notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || chat_id != 0 && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0) {
-                notifyDisabled = true;
-            }
-
-            if (!notifyDisabled && dialog_id == override_dialog_id && chat != null) {
-                int notifyMaxCount = preferences.getInt("smart_max_count_" + dialog_id, 2);
-                int notifyDelay = preferences.getInt("smart_delay_" + dialog_id, 3 * 60);
-                if (notifyMaxCount != 0) {
-                    Point dialogInfo = smartNotificationsDialogs.get(dialog_id);
-                    if (dialogInfo == null) {
-                        dialogInfo = new Point(1, (int) (System.currentTimeMillis() / 1000));
-                        smartNotificationsDialogs.put(dialog_id, dialogInfo);
-                    } else {
-                        int lastTime = dialogInfo.y;
-                        if (lastTime + notifyDelay < System.currentTimeMillis() / 1000) {
-                            dialogInfo.set(1, (int) (System.currentTimeMillis() / 1000));
-                        } else {
-                            int count = dialogInfo.x;
-                            if (count < notifyMaxCount) {
-                                dialogInfo.set(count + 1, (int) (System.currentTimeMillis() / 1000));
-                            } else {
-                                notifyDisabled = true;
-                            }
-                        }
-                    }
-                }
-            }
-
-            String defaultPath = Settings.System.DEFAULT_NOTIFICATION_URI.getPath();
-            if (!notifyDisabled) {
-                inAppSounds = preferences.getBoolean("EnableInAppSounds", true);
-                inAppVibrate = preferences.getBoolean("EnableInAppVibrate", true);
-                inAppPreview = preferences.getBoolean("EnableInAppPreview", true);
-                inAppPriority = preferences.getBoolean("EnableInAppPriority", false);
-                vibrateOverride = preferences.getInt("vibrate_" + dialog_id, 0);
-                priorityOverride = preferences.getInt("priority_" + dialog_id, 3);
-                boolean vibrateOnlyIfSilent = false;
-
-                choosenSoundPath = preferences.getString("sound_path_" + dialog_id, null);
-                if (chat_id != 0) {
-                    if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
-                        choosenSoundPath = null;
-                    } else if (choosenSoundPath == null) {
-                        choosenSoundPath = preferences.getString("GroupSoundPath", defaultPath);
-                    }
-                    needVibrate = preferences.getInt("vibrate_group", 0);
-                    priority = preferences.getInt("priority_group", 1);
-                    ledColor = preferences.getInt("GroupLed", 0xff00ff00);
-                } else if (user_id != 0) {
-                    if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
-                        choosenSoundPath = null;
-                    } else if (choosenSoundPath == null) {
-                        choosenSoundPath = preferences.getString("GlobalSoundPath", defaultPath);
-                    }
-                    needVibrate = preferences.getInt("vibrate_messages", 0);
-                    priority = preferences.getInt("priority_group", 1);
-                    ledColor = preferences.getInt("MessagesLed", 0xff00ff00);
-                }
-                if (preferences.contains("color_" + dialog_id)) {
-                    ledColor = preferences.getInt("color_" + dialog_id, 0);
-                }
-
-                if (priorityOverride != 3) {
-                    priority = priorityOverride;
-                }
-
-                if (needVibrate == 4) {
-                    vibrateOnlyIfSilent = true;
-                    needVibrate = 0;
-                }
-                if (needVibrate == 2 && (vibrateOverride == 1 || vibrateOverride == 3 || vibrateOverride == 5) || needVibrate != 2 && vibrateOverride == 2 || vibrateOverride != 0) {
-                    needVibrate = vibrateOverride;
-                }
-                if (!ApplicationLoader.mainInterfacePaused) {
-                    if (!inAppSounds) {
-                        choosenSoundPath = null;
-                    }
-                    if (!inAppVibrate) {
-                        needVibrate = 2;
-                    }
-                    if (!inAppPriority) {
-                        priority = 0;
-                    } else if (priority == 2) {
-                        priority = 1;
-                    }
-                }
-                if (vibrateOnlyIfSilent && needVibrate != 2) {
-                    try {
-                        int mode = audioManager.getRingerMode();
-                        if (mode != AudioManager.RINGER_MODE_SILENT && mode != AudioManager.RINGER_MODE_VIBRATE) {
-                            needVibrate = 2;
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            }
-
-            Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
-            intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
-            intent.setFlags(32768);
-            if ((int)dialog_id != 0) {
-                if (pushDialogs.size() == 1) {
-                    if (chat_id != 0) {
-                        intent.putExtra("chatId", chat_id);
-                    } else if (user_id != 0) {
-                        intent.putExtra("userId", user_id);
-                    }
-                }
-                if (AndroidUtilities.needShowPasscode(false) || UserConfig.isWaitingForPasscodeEnter) {
-                    photoPath = null;
-                } else {
-                    if (pushDialogs.size() == 1) {
-                        if (chat != null) {
-                            if (chat.photo != null && chat.photo.photo_small != null && chat.photo.photo_small.volume_id != 0 && chat.photo.photo_small.local_id != 0) {
-                                photoPath = chat.photo.photo_small;
-                            }
-                        } else {
-                            if (user.photo != null && user.photo.photo_small != null && user.photo.photo_small.volume_id != 0 && user.photo.photo_small.local_id != 0) {
-                                photoPath = user.photo.photo_small;
-                            }
-                        }
-                    }
-                }
-            } else {
-                if (pushDialogs.size() == 1) {
-                    intent.putExtra("encId", (int) (dialog_id >> 32));
-                }
-            }
-            PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, intent, PendingIntent.FLAG_ONE_SHOT);
-
-            String name;
-            boolean replace = true;
-            if ((int)dialog_id == 0 || pushDialogs.size() > 1 || AndroidUtilities.needShowPasscode(false) || UserConfig.isWaitingForPasscodeEnter) {
-                name = LocaleController.getString("AppName", R.string.AppName);
-                replace = false;
-            } else {
-                if (chat != null) {
-                    name = chat.title;
-                } else {
-                    name = ContactsController.formatName(user.first_name, user.last_name);
-                }
-            }
-
-            String detailText;
-            if (pushDialogs.size() == 1) {
-                detailText = LocaleController.formatPluralString("NewMessages", total_unread_count);
-            } else {
-                detailText = LocaleController.formatString("NotificationMessagesPeopleDisplayOrder", R.string.NotificationMessagesPeopleDisplayOrder, LocaleController.formatPluralString("NewMessages", total_unread_count), LocaleController.formatPluralString("FromChats", pushDialogs.size()));
-            }
-
-            NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setContentTitle(name)
-                    .setSmallIcon(R.drawable.notification)
-                    .setAutoCancel(true)
-                    .setNumber(total_unread_count)
-                    .setContentIntent(contentIntent)
-                    .setGroup("messages")
-                    .setGroupSummary(true)
-                    .setColor(0xff2ca5e0);
-
-            if (!notifyAboutLast) {
-                mBuilder.setPriority(NotificationCompat.PRIORITY_LOW);
-            } else {
-                if (priority == 0) {
-                    mBuilder.setPriority(NotificationCompat.PRIORITY_DEFAULT);
-                } else if (priority == 1) {
-                    mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
-                } else if (priority == 2) {
-                    mBuilder.setPriority(NotificationCompat.PRIORITY_MAX);
-                }
-            }
-
-            mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
-            if (chat == null && user != null && user.phone != null && user.phone.length() > 0) {
-                mBuilder.addPerson("tel:+" + user.phone);
-            }
-
-            String lastMessage = null;
-            String lastMessageFull = null;
-            if (pushMessages.size() == 1) {
-                String message = lastMessageFull = getStringForMessage(pushMessages.get(0), false);
-                //lastMessage = getStringForMessage(pushMessages.get(0), true);
-                lastMessage = lastMessageFull;
-                if (message == null) {
-                    return;
-                }
-                if (replace) {
-                    if (chat != null) {
-                        message = message.replace(" @ " + name, "");
-                    } else {
-                        message = message.replace(name + ": ", "").replace(name + " ", "");
-                    }
-                }
-                mBuilder.setContentText(message);
-                mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(message));
-            } else {
-                mBuilder.setContentText(detailText);
-                NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();
-                inboxStyle.setBigContentTitle(name);
-                int count = Math.min(10, pushMessages.size());
-                for (int i = 0; i < count; i++) {
-                    String message = getStringForMessage(pushMessages.get(i), false);
-                    if (message == null) {
-                        continue;
-                    }
-                    if (i == 0) {
-                        lastMessageFull = message;
-                        lastMessage = lastMessageFull;
-                    }
-                    if (pushDialogs.size() == 1) {
-                        if (replace) {
-                            if (chat != null) {
-                                message = message.replace(" @ " + name, "");
-                            } else {
-                                message = message.replace(name + ": ", "").replace(name + " ", "");
-                            }
-                        }
-                    }
-                    inboxStyle.addLine(message);
-                }
-                inboxStyle.setSummaryText(detailText);
-                mBuilder.setStyle(inboxStyle);
-            }
-
-            if (photoPath != null) {
-                BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
-                if (img != null) {
-                    mBuilder.setLargeIcon(img.getBitmap());
-                }
-            }
-
-            if (!notifyDisabled) {
-                if (ApplicationLoader.mainInterfacePaused || inAppPreview) {
-                    if (lastMessage.length() > 100) {
-                        lastMessage = lastMessage.substring(0, 100).replace("\n", " ").trim() + "...";
-                    }
-                    mBuilder.setTicker(lastMessage);
-                }
-                if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
-                    if (choosenSoundPath.equals(defaultPath)) {
-                        /*MediaPlayer mediaPlayer = new MediaPlayer();
-                        mediaPlayer.setAudioStreamType(AudioManager.STREAM_ALARM);
-                        mediaPlayer.setDataSource(ApplicationLoader.applicationContext, Settings.System.DEFAULT_NOTIFICATION_URI);
-                        mediaPlayer.prepare();
-                        mediaPlayer.start();*/
-                        mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
-                    } else {
-                        mBuilder.setSound(Uri.parse(choosenSoundPath), AudioManager.STREAM_NOTIFICATION);
-                    }
-                }
-                if (ledColor != 0) {
-                    mBuilder.setLights(ledColor, 1000, 1000);
-                }
-                if (needVibrate == 2) {
-                    mBuilder.setVibrate(new long[]{0, 0});
-                } else if (needVibrate == 1) {
-                    mBuilder.setVibrate(new long[]{0, 100, 0, 100});
-                } else if (needVibrate == 0 || needVibrate == 4) {
-                    mBuilder.setDefaults(NotificationCompat.DEFAULT_VIBRATE);
-                } else if (needVibrate == 3) {
-                    mBuilder.setVibrate(new long[]{0, 1000});
-                }
-            } else {
-                mBuilder.setVibrate(new long[]{0, 0});
-            }
-
-            notificationManager.notify(1, mBuilder.build());
-            if (preferences.getBoolean("EnablePebbleNotifications", false)) {
-                sendAlertToPebble(lastMessageFull);
-            }
-
-            scheduleNotificationRepeat();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-
-    private void dismissNotification() {
-        try {
-            notificationManager.cancel(1);
-            pushMessages.clear();
-            pushMessagesDict.clear();
-            for (HashMap.Entry<Long, Integer> entry : autoNotificationsIds.entrySet()) {
-                notificationManager.cancel(entry.getValue());
-            }
-            autoNotificationsIds.clear();
-            for (HashMap.Entry<Long, Integer> entry : wearNotificationsIds.entrySet()) {
-                notificationManager.cancel(entry.getValue());
-            }
-            wearNotificationsIds.clear();
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void sendAlertToPebble(String message) {
-        try {
-            final Intent i = new Intent("com.getpebble.action.SEND_NOTIFICATION");
-
-            final HashMap<String, String> data = new HashMap<>();
-            data.put("title", LocaleController.getString("AppName", R.string.AppName));
-            data.put("body", message);
-            final JSONObject jsonData = new JSONObject(data);
-            final String notificationData = new JSONArray().put(jsonData).toString();
-
-            i.putExtra("messageType", "PEBBLE_ALERT");
-            i.putExtra("sender", LocaleController.formatString("AppName", R.string.AppName));
-            i.putExtra("notificationData", notificationData);
-
-            ApplicationLoader.applicationContext.sendBroadcast(i);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void processReadMessages(HashMap<Integer, Integer> inbox, long dialog_id, int max_date, int max_id, boolean isPopup) {
-        int oldCount = popupMessages.size();
-        if (inbox != null) {
-            for (HashMap.Entry<Integer, Integer> entry : inbox.entrySet()) {
-                for (int a = 0; a < pushMessages.size(); a++) {
-                    MessageObject messageObject = pushMessages.get(a);
-                    if (messageObject.getDialogId() == entry.getKey() && messageObject.getId() <= entry.getValue()) {
-                        if (isPersonalMessage(messageObject)) {
-                            personal_count--;
-                        }
-                        popupMessages.remove(messageObject);
-                        pushMessagesDict.remove(messageObject.getId());
-                        delayedPushMessages.remove(messageObject);
-                        pushMessages.remove(a);
-                        a--;
-                    }
-                }
-            }
-        }
-        if (dialog_id != 0 && (max_id != 0 || max_date != 0)) {
-            for (int a = 0; a < pushMessages.size(); a++) {
-                MessageObject messageObject = pushMessages.get(a);
-                if (messageObject.getDialogId() == dialog_id) {
-                    boolean remove = false;
-                    if (max_date != 0) {
-                        if (messageObject.messageOwner.date <= max_date) {
-                            remove = true;
-                        }
-                    } else {
-                        if (!isPopup) {
-                            if (messageObject.getId() <= max_id || max_id < 0) {
-                                remove = true;
-                            }
-                        } else {
-                            if (messageObject.getId() == max_id || max_id < 0) {
-                                remove = true;
-                            }
-                        }
-                    }
-                    if (remove) {
-                        if (isPersonalMessage(messageObject)) {
-                            personal_count--;
-                        }
-                        pushMessages.remove(a);
-                        delayedPushMessages.remove(messageObject);
-                        popupMessages.remove(messageObject);
-                        pushMessagesDict.remove(messageObject.getId());
-                        a--;
-                    }
-                }
-            }
-        }
-        if (oldCount != popupMessages.size()) {
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
-        }
-    }
-
-    private void playInChatSound() {
-        if (!inChatSoundEnabled) {
-            return;
-        }
-        try {
-            if (audioManager.getRingerMode() == AudioManager.RINGER_MODE_SILENT) {
-                return;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        try {
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-            int notifyOverride = getNotifyOverride(preferences, openned_dialog_id);
-            if (notifyOverride == 2) {
-                return;
-            }
-            notificationsQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    if (lastSoundPlay > System.currentTimeMillis() - 500) {
-                        return;
-                    }
-                    try {
-                        if (soundPool == null) {
-                            soundPool = new SoundPool(4, AudioManager.STREAM_SYSTEM, 0);
-                            soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {
-                                @Override
-                                public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
-                                    if (status == 0) {
-                                        soundPool.play(sampleId, 1.0f, 1.0f, 1, 0, 1.0f);
-                                    }
-                                }
-                            });
-                        }
-                        if (soundIn == 0) {
-                            soundIn = soundPool.load(ApplicationLoader.applicationContext, R.raw.sound_in, 1);
-                        }
-                        soundPool.play(soundIn, 1.0f, 1.0f, 1, 0, 1.0f);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            });
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void playOutChatSound() {
-        if (!inChatSoundEnabled) {
-            return;
-        }
-        try {
-            if (audioManager.getRingerMode() == AudioManager.RINGER_MODE_SILENT) {
-                return;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        notificationsQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (lastSoundOutPlay > System.currentTimeMillis() - 100) {
-                        return;
-                    }
-                    lastSoundOutPlay = System.currentTimeMillis();
-                    if (soundPool == null) {
-                        soundPool = new SoundPool(4, AudioManager.STREAM_SYSTEM, 0);
-                        soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {
-                            @Override
-                            public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
-                                if (status == 0) {
-                                    soundPool.play(sampleId, 1.0f, 1.0f, 1, 0, 1.0f);
-                                }
-                            }
-                        });
-                    }
-                    if (soundOut == 0) {
-                        soundOut = soundPool.load(ApplicationLoader.applicationContext, R.raw.sound_out, 1);
-                    }
-                    soundPool.play(soundOut, 1.0f, 1.0f, 1, 0, 1.0f);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private int getNotifyOverride(SharedPreferences preferences, long dialog_id) {
-        int notifyOverride = preferences.getInt("notify2_" + dialog_id, 0);
-        if (notifyOverride == 3) {
-            int muteUntil = preferences.getInt("notifyuntil_" + dialog_id, 0);
-            if (muteUntil >= ConnectionsManager.getInstance().getCurrentTime()) {
-                notifyOverride = 2;
-            }
-        }
-        return notifyOverride;
-    }
-
-    public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean isLast) {
-        if (messageObjects.isEmpty()) {
-            return;
-        }
-        boolean added = false;
-
-        int oldCount = popupMessages.size();
-        HashMap<Long, Boolean> settingsCache = new HashMap<>();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-        int popup = 0;
-
-        for (MessageObject messageObject : messageObjects) {
-            if (pushMessagesDict.containsKey(messageObject.getId())) {
-                continue;
-            }
-            long dialog_id = messageObject.getDialogId();
-            long original_dialog_id = dialog_id;
-            if (dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
-                playInChatSound();
-                continue;
-            }
-            if ((messageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_MENTION) != 0) {
-                dialog_id = messageObject.messageOwner.from_id;
-            }
-            if (isPersonalMessage(messageObject)) {
-                personal_count++;
-            }
-            added = true;
-
-            Boolean value = settingsCache.get(dialog_id);
-            boolean isChat = (int)dialog_id < 0;
-            popup = (int)dialog_id == 0 ? 0 : preferences.getInt(isChat ? "popupGroup" : "popupAll", 0);
-            if (value == null) {
-                int notifyOverride = getNotifyOverride(preferences, dialog_id);
-                value = !(notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || isChat && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0);
-                settingsCache.put(dialog_id, value);
-            }
-            if (value) {
-                if (popup != 0) {
-                    popupMessages.add(0, messageObject);
-                }
-                delayedPushMessages.add(messageObject);
-                pushMessages.add(0, messageObject);
-                pushMessagesDict.put(messageObject.getId(), messageObject);
-                if (original_dialog_id != dialog_id) {
-                    pushDialogsOverrideMention.put(original_dialog_id, 1);
-                }
-            }
-        }
-
-        if (added) {
-            notifyCheck = isLast;
-        }
-
-        if (!popupMessages.isEmpty() && oldCount != popupMessages.size() && !AndroidUtilities.needShowPasscode(false) && !UserConfig.isWaitingForPasscodeEnter) {
-            if (ApplicationLoader.mainInterfacePaused || !ApplicationLoader.isScreenOn) {
-                MessageObject messageObject = messageObjects.get(0);
-                if (popup == 3 || popup == 1 && ApplicationLoader.isScreenOn || popup == 2 && !ApplicationLoader.isScreenOn) {
-                    Intent popupIntent = new Intent(ApplicationLoader.applicationContext, PopupNotificationActivity.class);
-                    popupIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION | Intent.FLAG_ACTIVITY_NO_USER_ACTION | Intent.FLAG_FROM_BACKGROUND);
-                    ApplicationLoader.applicationContext.startActivity(popupIntent);
-                }
-            }
-        }
-    }
-
-    public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdate) {
-        int old_unread_count = total_unread_count;
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-        for (HashMap.Entry<Long, Integer> entry : dialogsToUpdate.entrySet()) {
-            long dialog_id = entry.getKey();
-
-            int notifyOverride = getNotifyOverride(preferences, dialog_id);
-            if (notifyCheck) {
-                Integer override = pushDialogsOverrideMention.get(dialog_id);
-                if (override != null && override == 1) {
-                    pushDialogsOverrideMention.put(dialog_id, 0);
-                    notifyOverride = 1;
-                }
-            }
-            boolean canAddValue = !(notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || ((int)dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0);
-
-            Integer currentCount = pushDialogs.get(dialog_id);
-            Integer newCount = entry.getValue();
-            if (newCount == 0) {
-                smartNotificationsDialogs.remove(dialog_id);
-            }
-
-            if (newCount < 0) {
-                if (currentCount == null) {
-                    continue;
-                }
-                newCount = currentCount + newCount;
-            }
-            if (canAddValue || newCount == 0) {
-                if (currentCount != null) {
-                    total_unread_count -= currentCount;
-                }
-            }
-            if (newCount == 0) {
-                pushDialogs.remove(dialog_id);
-                pushDialogsOverrideMention.remove(dialog_id);
-                for (int a = 0; a < pushMessages.size(); a++) {
-                    MessageObject messageObject = pushMessages.get(a);
-                    if (messageObject.getDialogId() == dialog_id) {
-                        if (isPersonalMessage(messageObject)) {
-                            personal_count--;
-                        }
-                        pushMessages.remove(a);
-                        a--;
-                        delayedPushMessages.remove(messageObject);
-                        pushMessagesDict.remove(messageObject.getId());
-                        popupMessages.remove(messageObject);
-                    }
-                }
-            } else if (canAddValue) {
-                total_unread_count += newCount;
-                pushDialogs.put(dialog_id, newCount);
-            }
-        }
-        if (old_unread_count != total_unread_count) {
-            if (!notifyCheck) {
-                delayedPushMessages.clear();
-                showOrUpdateNotification(notifyCheck);
-            } else {
-                scheduleNotificationDelay(lastOnlineFromOtherDevice > ConnectionsManager.getInstance().getCurrentTime());
-            }
-        }
-        notifyCheck = false;
-        if (preferences.getBoolean("badgeNumber", true)) {
-            setBadge(ApplicationLoader.applicationContext, total_unread_count);
-        }
-    }
-
-
-
-    public void setBadgeEnabled(boolean enabled) {
-        setBadge(ApplicationLoader.applicationContext, enabled ? total_unread_count : 0);
-    }
-
-    private void setBadge(final Context context, final int count) {
-        notificationsQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (lastBadgeCount == count) {
-                    return;
-                }
-                lastBadgeCount = count;
-                try {
-                    ContentValues cv = new ContentValues();
-                    cv.put("tag", "org.telegram.messenger/org.telegram.ui.LaunchActivity");
-                    cv.put("count", count);
-                    context.getContentResolver().insert(Uri.parse("content://com.teslacoilsw.notifier/unread_count"), cv);
-                } catch (Throwable e) {
-                     //ignore
-                }
-                try {
-                    launcherClassName = getLauncherClassName(context);
-                    if (launcherClassName == null) {
-                        return;
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                Intent intent = new Intent("android.intent.action.BADGE_COUNT_UPDATE");
-                                intent.putExtra("badge_count", count);
-                                intent.putExtra("badge_count_package_name", context.getPackageName());
-                                intent.putExtra("badge_count_class_name", launcherClassName);
-                                context.sendBroadcast(intent);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    });
-                } catch (Throwable e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public static String getLauncherClassName(Context context) {
-        try {
-            PackageManager pm = context.getPackageManager();
-
-            Intent intent = new Intent(Intent.ACTION_MAIN);
-            intent.addCategory(Intent.CATEGORY_LAUNCHER);
-
-            List<ResolveInfo> resolveInfos = pm.queryIntentActivities(intent, 0);
-            for (ResolveInfo resolveInfo : resolveInfos) {
-                String pkgName = resolveInfo.activityInfo.applicationInfo.packageName;
-                if (pkgName.equalsIgnoreCase(context.getPackageName())) {
-                    return resolveInfo.activityInfo.name;
-                }
-            }
-        } catch (Throwable e) {
-            FileLog.e("tmessages", e);
-        }
-        return null;
-    }
-
-    private boolean isPersonalMessage(MessageObject messageObject) {
-        return messageObject.messageOwner.to_id != null && messageObject.messageOwner.to_id.chat_id == 0
-                && (messageObject.messageOwner.action == null || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty);
-    }
-
-    public static void updateServerNotificationsSettings(long dialog_id) {
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
-        if ((int)dialog_id == 0) {
-            return;
-        }
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
-        req.settings = new TLRPC.TL_inputPeerNotifySettings();
-        req.settings.sound = "default";
-        req.settings.events_mask = 0;
-        int mute_type = preferences.getInt("notify2_" + dialog_id, 0);
-        if (mute_type == 3) {
-            req.settings.mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
-        } else {
-            req.settings.mute_until = mute_type != 2 ? 0 : Integer.MAX_VALUE;
-        }
-        req.settings.show_previews = preferences.getBoolean("preview_" + dialog_id, true);
-
-        req.peer = new TLRPC.TL_inputNotifyPeer();
-
-        if ((int)dialog_id < 0) {
-            ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerChat();
-            ((TLRPC.TL_inputNotifyPeer)req.peer).peer.chat_id = -(int)dialog_id;
-        } else {
-//            TLRPC.User user = MessagesController.getInstance().getUser((int)dialog_id);
-            TLRPC.User user = null;
-            if (user == null) {
-                return;
-            }
-            if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerForeign();
-                ((TLRPC.TL_inputNotifyPeer)req.peer).peer.access_hash = user.access_hash;
-            } else {
-                ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerContact();
-            }
-            ((TLRPC.TL_inputNotifyPeer)req.peer).peer.user_id = (int)dialog_id;
-        }
-
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java
deleted file mode 100644
index 91f90efba..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.app.Service;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.IBinder;
-
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.ApplicationLoader;
-
-public class NotificationsService extends Service {
-
-    @Override
-    public void onCreate() {
-        FileLog.e("tmessages", "service started");
-        ApplicationLoader.postInitApplication();
-    }
-
-    @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        return START_STICKY;
-    }
-
-    @Override
-    public IBinder onBind(Intent intent) {
-        return null;
-    }
-
-    public void onDestroy() {
-        FileLog.e("tmessages", "service destroyed");
-
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", MODE_PRIVATE);
-        if (preferences.getBoolean("pushService", true)) {
-            Intent intent = new Intent("org.telegram.start");
-            sendBroadcast(intent);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index e8eb4103d..bc486fb33 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -110,7 +110,6 @@ public void didReceivedNotification(int id, Object... args) {
 
     public void cleanUp() {
         MediaController.getInstance().cleanup();
-        NotificationsController.getInstance().cleanup();
 
         postsMap.clear();
         posts.clear();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 4f801465a..643fd0a25 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -32,7 +32,6 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.MediaController;
-import org.telegram.android.NotificationsService;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NativeLoader;
@@ -191,36 +190,6 @@ public void onCreate() {
 
         applicationHandler = new Handler(applicationContext.getMainLooper());
 
-        startPushService();
-    }
-
-    public static void startPushService() {
-        SharedPreferences preferences = applicationContext.getSharedPreferences("Notifications", MODE_PRIVATE);
-
-        if (preferences.getBoolean("pushService", true)) {
-            applicationContext.startService(new Intent(applicationContext, NotificationsService.class));
-
-            if (android.os.Build.VERSION.SDK_INT >= 19) {
-//                Calendar cal = Calendar.getInstance();
-//                PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
-//                AlarmManager alarm = (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE);
-//                alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), 30000, pintent);
-
-                PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
-                AlarmManager alarm = (AlarmManager)applicationContext.getSystemService(Context.ALARM_SERVICE);
-                alarm.cancel(pintent);
-            }
-        } else {
-            stopPushService();
-        }
-    }
-
-    public static void stopPushService() {
-        applicationContext.stopService(new Intent(applicationContext, NotificationsService.class));
-
-        PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
-        AlarmManager alarm = (AlarmManager)applicationContext.getSystemService(Context.ALARM_SERVICE);
-        alarm.cancel(pintent);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index 299df7224..6a8e57683 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -6920,42 +6920,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_inputPhoneContact extends TLObject {
-        public static int constructor = 0xf392b7f4;
-
-        public long client_id;
-        public String phone;
-        public String first_name;
-        public String last_name;
-
-        public static TL_inputPhoneContact TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
-            if (TL_inputPhoneContact.constructor != constructor) {
-                if (exception) {
-                    throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneContact", constructor));
-                } else {
-                    return null;
-                }
-            }
-            TL_inputPhoneContact result = new TL_inputPhoneContact();
-            result.readParams(stream, exception);
-            return result;
-        }
-
-        public void readParams(AbsSerializedData stream, boolean exception) {
-            client_id = stream.readInt64(exception);
-            phone = stream.readString(exception);
-            first_name = stream.readString(exception);
-            last_name = stream.readString(exception);
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeInt64(client_id);
-            stream.writeString(phone);
-            stream.writeString(first_name);
-            stream.writeString(last_name);
-        }
-    }
 
     public static class Bool extends TLObject {
 
@@ -7066,27 +7030,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_messages_messageEmpty extends TLObject {
-        public static int constructor = 0x3f4e0648;
-
-
-        public static TL_messages_messageEmpty TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
-            if (TL_messages_messageEmpty.constructor != constructor) {
-                if (exception) {
-                    throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEmpty", constructor));
-                } else {
-                    return null;
-                }
-            }
-            TL_messages_messageEmpty result = new TL_messages_messageEmpty();
-            result.readParams(stream, exception);
-            return result;
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-        }
-    }
 
     public static class DestroySessionRes extends TLObject {
         public long session_id;
@@ -12972,27 +12915,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_contacts_importContacts extends TLObject {
-        public static int constructor = 0xda30b32d;
-
-        public ArrayList<TL_inputPhoneContact> contacts = new ArrayList<>();
-        public boolean replace;
-
-        public TLObject deserializeResponse(AbsSerializedData stream, int constructor, boolean exception) {
-            return TL_contacts_importedContacts.TLdeserialize(stream, constructor, exception);
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeInt32(0x1cb5c415);
-            int count = contacts.size();
-            stream.writeInt32(count);
-            for (int a = 0; a < count; a++) {
-                contacts.get(a).serializeToStream(stream);
-            }
-            stream.writeBool(replace);
-        }
-    }
 
     public static class TL_contacts_getSuggested extends TLObject {
         public static int constructor = 0xcd773428;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
index 2013b21ee..256392acc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
@@ -21,7 +21,6 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.messenger.dto.Image;
 import org.telegram.messenger.dto.Post;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -78,7 +77,6 @@
     private boolean buttonPressed = false;
 
     private static TextPaint infoPaint;
-    private static MessageObject lastDownloadedGifMessage = null;
     private static TextPaint namePaint;
 
     private RadialProgress radialProgress;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 0696571ce..079286326 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -42,7 +42,7 @@
     public interface Listener {
         boolean onBackspace();
         void onEmojiSelected(String emoji);
-        void onStickerSelected(TLRPC.Document sticker);
+//        void onStickerSelected(TLRPC.Document sticker);
     }
 
     private ArrayList<EmojiGridAdapter> adapters = new ArrayList<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
index a09747408..d8dd6fbbc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
@@ -38,15 +38,11 @@
 import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.BaseFragment;
 
 /**
@@ -83,29 +79,19 @@
     private PowerManager.WakeLock mWakeLock;
     private AnimatorSetProxy runningAnimation;
     private AnimatorSetProxy runningAnimation2;
-    private ObjectAnimatorProxy runningAnimationAudio;
     private int runningAnimationType;
-    private int audioInterfaceState;
 
     private int keyboardHeight;
     private int keyboardHeightLand;
     private boolean keyboardVisible;
     private boolean sendByEnter;
     private long lastTypingTimeSend;
-    private String lastTimeString;
-    private float startedDraggingX = -1;
-    private float distCanMove = AndroidUtilities.dp(80);
-    private boolean recordingAudio;
     private boolean forceShowSendButton;
     private boolean allowStickers;
 
     private Activity parentActivity;
     private BaseFragment parentFragment;
-    private long dialog_id;
     private boolean ignoreTextChange;
-    private MessageObject replyingMessageObject;
-    private TLRPC.WebPage messageWebPage;
-    private boolean messageWebPageSearch = true;
     private PostCreateActivityEnterViewDelegate delegate;
 
     private float topViewAnimation;
@@ -277,9 +263,6 @@ public void onTextChanged(CharSequence charSequence, int start, int before, int
                 checkSendButton(true);
 
                 if (delegate != null) {
-                    if (count > 2 || charSequence == null || charSequence.length() == 0) {
-                        messageWebPageSearch = true;
-                    }
                     delegate.onTextChanged(charSequence, before > count + 1 || (count - before) > 2);
                 }
 
@@ -580,41 +563,10 @@ public void onDestroy() {
         }
     }
 
-    public void setDialogId(long id) {
-        dialog_id = id;
-    }
-
-    public void setReplyingMessageObject(MessageObject messageObject) {
-        replyingMessageObject = messageObject;
-    }
-
-    public void setWebPage(TLRPC.WebPage webPage, boolean searchWebPages) {
-        messageWebPage = webPage;
-        messageWebPageSearch = searchWebPages;
-    }
-
-    public boolean isMessageWebPageSearchEnabled() {
-        return messageWebPageSearch;
-    }
 
     private void sendMessage() {
         if (parentFragment != null) {
-            String action;
-            TLRPC.Chat currentChat;
-            if ((int) dialog_id < 0) {
-//                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
-                currentChat = null;
-                if (currentChat != null && currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
-                    action = "bigchat_message";
-                } else {
-                    action = "chat_message";
-                }
-            } else {
-                action = "pm_message";
-            }
-            if (!MessagesController.isFeatureEnabled(action, parentFragment)) {
-                return;
-            }
+            String action = "pm_message";
         }
         String message = messageEditText.getText().toString();
         if (processSendingText(message)) {
@@ -871,13 +823,6 @@ public void onEmojiSelected(String symbol) {
                             FileLog.e("tmessages", e);
                         }
                     }
-
-                    public void onStickerSelected(TLRPC.Document sticker) {
-//                        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
-                        if (delegate != null) {
-                            delegate.onMessageSend(null);
-                        }
-                    }
                 });
                 emojiPopup = new PopupWindow(emojiView);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 20c6b7559..5d80fd443 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -50,7 +50,6 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessageObject;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.ActionBarMenu;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 5b0b32411..674af6c5d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -2093,7 +2093,6 @@ private void checkProgress(int a, boolean animated) {
     private void setIndexToImage(ImageReceiver imageReceiver, int index) {
         imageReceiver.setOrientation(0, false);
         if (!imagesArrLocals.isEmpty()) {
-            imageReceiver.setParentMessageObject(null);
             if (index >= 0 && index < imagesArrLocals.size()) {
                 Object object = imagesArrLocals.get(index);
                 int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
@@ -2130,7 +2129,6 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
         } else {
             int size[] = new int[1];
             imageReceiver.setNeedsQualityThumb(false);
-            imageReceiver.setParentMessageObject(null);
             if (size[0] == 0) {
                 imageReceiver.setImageBitmap((Bitmap) null);
             } else {
@@ -2145,7 +2143,6 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
     private void setIndexToImagePostNew(ImageReceiver imageReceiver, int index) {
         imageReceiver.setOrientation(0, false);
         if (!imagesPostArr.isEmpty()) {
-            imageReceiver.setParentMessageObject(null);
             if (index >= 0 && index < imagesPostArr.size() && imagesPostArr.get(index) != null) {
                 Post post = imagesPostArr.get(index);
                 int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
deleted file mode 100644
index e8f9906e4..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ /dev/null
@@ -1,992 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.KeyguardManager;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.graphics.drawable.Drawable;
-import android.os.Bundle;
-import android.os.PowerManager;
-import android.text.TextUtils;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.MotionEvent;
-import android.view.VelocityTracker;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
-import android.view.animation.TranslateAnimation;
-import android.widget.FrameLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessagesController;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.NotificationsController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessageObject;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.FrameLayoutFixed;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.SizeNotifierRelativeLayout;
-import org.telegram.ui.Components.TypingDotsDrawable;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Locale;
-
-// TODO ChatActivityEnterView was used here /// Why ?? Investigate.
-public class PopupNotificationActivity extends Activity implements NotificationCenter.NotificationCenterDelegate {
-
-    private ActionBar actionBar;
-    private BackupImageView avatarImageView;
-    private TextView nameTextView;
-    private TextView onlineTextView;
-    private FrameLayout avatarContainer;
-    private TextView countText;
-    private ViewGroup messageContainer;
-    private ViewGroup centerView;
-    private ViewGroup leftView;
-    private ViewGroup rightView;
-    private ArrayList<ViewGroup> textViews = new ArrayList<>();
-    private ArrayList<ViewGroup> imageViews = new ArrayList<>();
-    private ArrayList<ViewGroup> audioViews = new ArrayList<>();
-    private VelocityTracker velocityTracker = null;
-    private TypingDotsDrawable typingDotsDrawable;
-
-    private int classGuid;
-    private TLRPC.User currentUser;
-    private TLRPC.Chat currentChat;
-    private boolean finished = false;
-    private CharSequence lastPrintString;
-    private MessageObject currentMessageObject = null;
-    private int currentMessageNum = 0;
-    private PowerManager.WakeLock wakeLock = null;
-    private boolean animationInProgress = false;
-    private long animationStartTime = 0;
-    private float moveStartX = -1;
-    private boolean startedMoving = false;
-    private Runnable onAnimationEndRunnable = null;
-
-    private class FrameLayoutTouch extends FrameLayoutFixed {
-        public FrameLayoutTouch(Context context) {
-            super(context);
-        }
-
-        public FrameLayoutTouch(Context context, AttributeSet attrs) {
-            super(context, attrs);
-        }
-
-        public FrameLayoutTouch(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-        }
-
-        @Override
-        public boolean onInterceptTouchEvent(MotionEvent ev) {
-            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent ev) {
-            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
-        }
-
-        @Override
-        public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
-            ((PopupNotificationActivity)getContext()).onTouchEventMy(null);
-            super.requestDisallowInterceptTouchEvent(disallowIntercept);
-        }
-    }
-
-    public class FrameLayoutAnimationListener extends FrameLayoutFixed {
-        public FrameLayoutAnimationListener(Context context) {
-            super(context);
-        }
-
-        public FrameLayoutAnimationListener(Context context, AttributeSet attrs) {
-            super(context, attrs);
-        }
-
-        public FrameLayoutAnimationListener(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-        }
-
-        @Override
-        protected void onAnimationEnd() {
-            super.onAnimationEnd();
-            if (onAnimationEndRunnable != null) {
-                onAnimationEndRunnable.run();
-                onAnimationEndRunnable = null;
-            }
-        }
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        classGuid = ConnectionsManager.getInstance().generateClassGuid();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.pushMessagesUpdated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
-
-        typingDotsDrawable = new TypingDotsDrawable();
-
-        SizeNotifierRelativeLayout contentView = new SizeNotifierRelativeLayout(this);
-        setContentView(contentView);
-        contentView.setBackgroundColor(0x99000000);
-
-        RelativeLayout relativeLayout = new RelativeLayout(this);
-        contentView.addView(relativeLayout);
-        RelativeLayout.LayoutParams layoutParams3 = (RelativeLayout.LayoutParams) relativeLayout.getLayoutParams();
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = LayoutHelper.MATCH_PARENT;
-        relativeLayout.setLayoutParams(layoutParams3);
-
-        RelativeLayout popupContainer = new RelativeLayout(this);
-        popupContainer.setBackgroundColor(0xffffffff);
-        relativeLayout.addView(popupContainer);
-        layoutParams3 = (RelativeLayout.LayoutParams) popupContainer.getLayoutParams();
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = AndroidUtilities.dp(240);
-        layoutParams3.leftMargin = AndroidUtilities.dp(12);
-        layoutParams3.rightMargin = AndroidUtilities.dp(12);
-        layoutParams3.addRule(RelativeLayout.CENTER_IN_PARENT);
-        popupContainer.setLayoutParams(layoutParams3);
-
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
-
-        messageContainer = new FrameLayoutTouch(this);
-        popupContainer.addView(messageContainer, 0);
-
-        actionBar = new ActionBar(this);
-        actionBar.setOccupyStatusBar(false);
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setBackgroundColor(0xff54759e);
-        actionBar.setItemsBackground(R.drawable.bar_selector);
-        popupContainer.addView(actionBar);
-        ViewGroup.LayoutParams layoutParams = actionBar.getLayoutParams();
-        layoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;
-        actionBar.setLayoutParams(layoutParams);
-
-        ActionBarMenu menu = actionBar.createMenu();
-        View view = menu.addItemResource(2, R.layout.popup_count_layout);
-        countText = (TextView) view.findViewById(R.id.count_text);
-
-        avatarContainer = new FrameLayoutFixed(this);
-        avatarContainer.setBackgroundResource(R.drawable.bar_selector);
-        avatarContainer.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
-        actionBar.addView(avatarContainer);
-        FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
-        layoutParams2.height = LayoutHelper.MATCH_PARENT;
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.rightMargin = AndroidUtilities.dp(48);
-        layoutParams2.leftMargin = AndroidUtilities.dp(60);
-        layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
-        avatarContainer.setLayoutParams(layoutParams2);
-
-        avatarImageView = new BackupImageView(this);
-        avatarImageView.setRoundRadius(AndroidUtilities.dp(21));
-        avatarContainer.addView(avatarImageView);
-        layoutParams2 = (FrameLayout.LayoutParams) avatarImageView.getLayoutParams();
-        layoutParams2.width = AndroidUtilities.dp(42);
-        layoutParams2.height = AndroidUtilities.dp(42);
-        layoutParams2.topMargin = AndroidUtilities.dp(3);
-        avatarImageView.setLayoutParams(layoutParams2);
-
-        nameTextView = new TextView(this);
-        nameTextView.setTextColor(0xffffffff);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        nameTextView.setLines(1);
-        nameTextView.setMaxLines(1);
-        nameTextView.setSingleLine(true);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        nameTextView.setGravity(Gravity.LEFT);
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        avatarContainer.addView(nameTextView);
-        layoutParams2 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.leftMargin = AndroidUtilities.dp(54);
-        layoutParams2.bottomMargin = AndroidUtilities.dp(22);
-        layoutParams2.gravity = Gravity.BOTTOM;
-        nameTextView.setLayoutParams(layoutParams2);
-
-        onlineTextView = new TextView(this);
-        onlineTextView.setTextColor(0xffd7e8f7);
-        onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        onlineTextView.setLines(1);
-        onlineTextView.setMaxLines(1);
-        onlineTextView.setSingleLine(true);
-        onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
-        onlineTextView.setGravity(Gravity.LEFT);
-        avatarContainer.addView(onlineTextView);
-        layoutParams2 = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.leftMargin = AndroidUtilities.dp(54);
-        layoutParams2.bottomMargin = AndroidUtilities.dp(4);
-        layoutParams2.gravity = Gravity.BOTTOM;
-        onlineTextView.setLayoutParams(layoutParams2);
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    onFinish();
-                    finish();
-                } else if (id == 1) {
-                    openCurrentMessage();
-                } else if (id == 2) {
-                    switchToNextMessage();
-                }
-            }
-        });
-
-        PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
-        wakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP, "screen");
-        wakeLock.setReferenceCounted(false);
-
-        handleIntent(getIntent());
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        AndroidUtilities.checkDisplaySize();
-        fixLayout();
-    }
-
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-        handleIntent(intent);
-    }
-
-    private void switchToNextMessage() {
-        if (NotificationsController.getInstance().popupMessages.size() > 1) {
-            if (currentMessageNum < NotificationsController.getInstance().popupMessages.size() - 1) {
-                currentMessageNum++;
-            } else {
-                currentMessageNum = 0;
-            }
-            currentMessageObject = NotificationsController.getInstance().popupMessages.get(currentMessageNum);
-            updateInterfaceForCurrentMessage(2);
-            countText.setText(String.format("%d/%d", currentMessageNum + 1, NotificationsController.getInstance().popupMessages.size()));
-        }
-    }
-
-    private void switchToPreviousMessage() {
-        if (NotificationsController.getInstance().popupMessages.size() > 1) {
-            if (currentMessageNum > 0) {
-                currentMessageNum--;
-            } else {
-                currentMessageNum = NotificationsController.getInstance().popupMessages.size() - 1;
-            }
-            currentMessageObject = NotificationsController.getInstance().popupMessages.get(currentMessageNum);
-            updateInterfaceForCurrentMessage(1);
-            countText.setText(String.format("%d/%d", currentMessageNum + 1, NotificationsController.getInstance().popupMessages.size()));
-        }
-    }
-
-    public boolean checkTransitionAnimation() {
-        if (animationInProgress && animationStartTime < System.currentTimeMillis() - 400) {
-            animationInProgress = false;
-            if (onAnimationEndRunnable != null) {
-                onAnimationEndRunnable.run();
-                onAnimationEndRunnable = null;
-            }
-        }
-        return animationInProgress;
-    }
-
-    public boolean onTouchEventMy(MotionEvent motionEvent) {
-        if (checkTransitionAnimation()) {
-            return false;
-        }
-        if (motionEvent != null && motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
-            moveStartX = motionEvent.getX();
-        } else if (motionEvent != null && motionEvent.getAction() == MotionEvent.ACTION_MOVE) {
-            float x = motionEvent.getX();
-            int diff = (int)(x - moveStartX);
-            if (moveStartX != -1 && !startedMoving) {
-                if (Math.abs(diff) > AndroidUtilities.dp(10)) {
-                    startedMoving = true;
-                    moveStartX = x;
-                    AndroidUtilities.lockOrientation(this);
-                    diff = 0;
-                    if (velocityTracker == null) {
-                        velocityTracker = VelocityTracker.obtain();
-                    } else {
-                        velocityTracker.clear();
-                    }
-                }
-            }
-            if (startedMoving) {
-                if (leftView == null && diff > 0) {
-                    diff = 0;
-                }
-                if (rightView == null && diff < 0) {
-                    diff = 0;
-                }
-                if (velocityTracker != null) {
-                    velocityTracker.addMovement(motionEvent);
-                }
-                applyViewsLayoutParams(diff);
-            }
-        } else if (motionEvent == null || motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
-            if (motionEvent != null && startedMoving) {
-                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) centerView.getLayoutParams();
-                int diff = (int)(motionEvent.getX() - moveStartX);
-                int width = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
-                int moveDiff = 0;
-                int forceMove = 0;
-                View otherView = null;
-                if (velocityTracker != null) {
-                    velocityTracker.computeCurrentVelocity(1000);
-                    if (velocityTracker.getXVelocity() >= 3500) {
-                        forceMove = 1;
-                    } else if (velocityTracker.getXVelocity() <= -3500) {
-                        forceMove = 2;
-                    }
-                }
-                if ((forceMove == 1 || diff > width / 3) && leftView != null) {
-                    moveDiff = width - layoutParams.leftMargin;
-                    otherView = leftView;
-                    onAnimationEndRunnable = new Runnable() {
-                        @Override
-                        public void run() {
-                            animationInProgress = false;
-                            switchToPreviousMessage();
-                            AndroidUtilities.unlockOrientation(PopupNotificationActivity.this);
-                        }
-                    };
-                } else if ((forceMove == 2 || diff < -width / 3) && rightView != null) {
-                    moveDiff = -width - layoutParams.leftMargin;
-                    otherView = rightView;
-                    onAnimationEndRunnable = new Runnable() {
-                        @Override
-                        public void run() {
-                            animationInProgress = false;
-                            switchToNextMessage();
-                            AndroidUtilities.unlockOrientation(PopupNotificationActivity.this);
-                        }
-                    };
-                } else if (layoutParams.leftMargin != 0) {
-                    moveDiff = -layoutParams.leftMargin;
-                    otherView = diff > 0 ? leftView : rightView;
-                    onAnimationEndRunnable = new Runnable() {
-                        @Override
-                        public void run() {
-                            animationInProgress = false;
-                            applyViewsLayoutParams(0);
-                            AndroidUtilities.unlockOrientation(PopupNotificationActivity.this);
-                        }
-                    };
-                }
-                if (moveDiff != 0) {
-                    int time = (int)(Math.abs((float)moveDiff / (float)width) * 200);
-                    TranslateAnimation animation = new TranslateAnimation(0, moveDiff, 0, 0);
-                    animation.setDuration(time);
-                    centerView.startAnimation(animation);
-                    if (otherView != null) {
-                        animation = new TranslateAnimation(0, moveDiff, 0, 0);
-                        animation.setDuration(time);
-                        otherView.startAnimation(animation);
-                    }
-                    animationInProgress = true;
-                    animationStartTime = System.currentTimeMillis();
-                }
-            } else {
-                applyViewsLayoutParams(0);
-            }
-            if (velocityTracker != null) {
-                velocityTracker.recycle();
-                velocityTracker = null;
-            }
-            startedMoving = false;
-            moveStartX = -1;
-        }
-        return startedMoving;
-    }
-
-    private void applyViewsLayoutParams(int xOffset) {
-        FrameLayout.LayoutParams layoutParams;
-        int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
-        if (leftView != null) {
-            layoutParams = (FrameLayout.LayoutParams) leftView.getLayoutParams();
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
-            layoutParams.width = widht;
-            layoutParams.leftMargin = -widht + xOffset;
-            leftView.setLayoutParams(layoutParams);
-        }
-        if (centerView != null) {
-            layoutParams = (FrameLayout.LayoutParams) centerView.getLayoutParams();
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
-            layoutParams.width = widht;
-            layoutParams.leftMargin = xOffset;
-            centerView.setLayoutParams(layoutParams);
-        }
-        if (rightView != null) {
-            layoutParams = (FrameLayout.LayoutParams) rightView.getLayoutParams();
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
-            layoutParams.width = widht;
-            layoutParams.leftMargin = widht + xOffset;
-            rightView.setLayoutParams(layoutParams);
-        }
-        messageContainer.invalidate();
-    }
-
-    private ViewGroup getViewForMessage(int num, boolean applyOffset) {
-        if (NotificationsController.getInstance().popupMessages.size() == 1 && (num < 0 || num >= NotificationsController.getInstance().popupMessages.size())) {
-            return null;
-        }
-        if (num == -1) {
-            num = NotificationsController.getInstance().popupMessages.size() - 1;
-        } else if (num == NotificationsController.getInstance().popupMessages.size()) {
-            num = 0;
-        }
-        ViewGroup view;
-        MessageObject messageObject = NotificationsController.getInstance().popupMessages.get(num);
-        if (messageObject.type == 1 || messageObject.type == 4) {
-            if (imageViews.size() > 0) {
-                view = imageViews.get(0);
-                imageViews.remove(0);
-            } else {
-                view = new FrameLayoutAnimationListener(this);
-                view.addView(getLayoutInflater().inflate(R.layout.popup_image_layout, null));
-                view.setTag(2);
-
-                view.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        openCurrentMessage();
-                    }
-                });
-            }
-
-            TextView messageText = (TextView)view.findViewById(R.id.message_text);
-            BackupImageView imageView = (BackupImageView) view.findViewById(R.id.message_image);
-            imageView.setAspectFit(true);
-
-            if (messageObject.type == 1) {
-                TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
-                TLRPC.PhotoSize thumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100);
-                boolean photoSet = false;
-                if (currentPhotoObject != null) {
-                    boolean photoExist = true;
-                    if (messageObject.type == 1) {
-                        File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
-                        if (!cacheFile.exists()) {
-                            photoExist = false;
-                        }
-                    }
-                    if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
-                        imageView.setImage(currentPhotoObject.location, "100_100", thumb.location, currentPhotoObject.size);
-                        photoSet = true;
-                    } else {
-                        if (thumb != null) {
-                            imageView.setImage(thumb.location, null, (Drawable) null);
-                            photoSet = true;
-                        }
-                    }
-                }
-                if (!photoSet) {
-                    imageView.setVisibility(View.GONE);
-                    messageText.setVisibility(View.VISIBLE);
-                    messageText.setTextSize(TypedValue.COMPLEX_UNIT_SP, MessagesController.getInstance().fontSize);
-                    messageText.setText(messageObject.messageText);
-                } else {
-                    imageView.setVisibility(View.VISIBLE);
-                    messageText.setVisibility(View.GONE);
-                }
-            } else if (messageObject.type == 4) {
-                messageText.setVisibility(View.GONE);
-                messageText.setText(messageObject.messageText);
-                imageView.setVisibility(View.VISIBLE);
-                double lat = messageObject.messageOwner.media.geo.lat;
-                double lon = messageObject.messageOwner.media.geo._long;
-                String currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
-                imageView.setImage(currentUrl, null, null);
-            }
-        } else {
-            if (textViews.size() > 0) {
-                view = textViews.get(0);
-                textViews.remove(0);
-            } else {
-                view = new FrameLayoutAnimationListener(this);
-                view.addView(getLayoutInflater().inflate(R.layout.popup_text_layout, null));
-                view.setTag(1);
-
-                View textContainer = view.findViewById(R.id.text_container);
-                textContainer.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        openCurrentMessage();
-                    }
-                });
-            }
-            TextView messageText = (TextView)view.findViewById(R.id.message_text);
-            messageText.setTag(301);
-            messageText.setTextSize(TypedValue.COMPLEX_UNIT_SP, MessagesController.getInstance().fontSize);
-            messageText.setText(messageObject.messageText);
-        }
-        if (view.getParent() == null) {
-            messageContainer.addView(view);
-        }
-        view.setVisibility(View.VISIBLE);
-
-        if (applyOffset) {
-            int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) view.getLayoutParams();
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
-            layoutParams.width = widht;
-            if (num == currentMessageNum) {
-                layoutParams.leftMargin = 0;
-            } else if (num == currentMessageNum - 1) {
-                layoutParams.leftMargin = -widht;
-            } else if (num == currentMessageNum + 1) {
-                layoutParams.leftMargin = widht;
-            }
-            view.setLayoutParams(layoutParams);
-            view.invalidate();
-        }
-
-        return view;
-    }
-
-    private void reuseView(ViewGroup view) {
-        if (view == null) {
-            return;
-        }
-        int tag = (Integer)view.getTag();
-        view.setVisibility(View.GONE);
-        if (tag == 1) {
-            textViews.add(view);
-        } else if (tag == 2) {
-            imageViews.add(view);
-        } else if (tag == 3) {
-            audioViews.add(view);
-        }
-    }
-
-    private void prepareLayouts(int move) {
-        if (move == 0) {
-            reuseView(centerView);
-            reuseView(leftView);
-            reuseView(rightView);
-            for (int a = currentMessageNum - 1; a < currentMessageNum + 2; a++) {
-                if (a == currentMessageNum - 1) {
-                    leftView = getViewForMessage(a, true);
-                } else if (a == currentMessageNum) {
-                    centerView = getViewForMessage(a, true);
-                } else if (a == currentMessageNum + 1) {
-                    rightView = getViewForMessage(a, true);
-                }
-            }
-        } else if (move == 1) {
-            reuseView(rightView);
-            rightView = centerView;
-            centerView = leftView;
-            leftView = getViewForMessage(currentMessageNum - 1, true);
-        } else if (move == 2) {
-            reuseView(leftView);
-            leftView = centerView;
-            centerView = rightView;
-            rightView = getViewForMessage(currentMessageNum + 1, true);
-        } else if (move == 3) {
-            if (rightView != null) {
-                int offset = ((FrameLayout.LayoutParams) rightView.getLayoutParams()).leftMargin;
-                reuseView(rightView);
-                rightView = getViewForMessage(currentMessageNum + 1, false);
-                int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
-                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) rightView.getLayoutParams();
-                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-                layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
-                layoutParams.width = widht;
-                layoutParams.leftMargin = offset;
-                rightView.setLayoutParams(layoutParams);
-                rightView.invalidate();
-            }
-        } else if (move == 4) {
-            if (leftView != null) {
-                int offset = ((FrameLayout.LayoutParams) leftView.getLayoutParams()).leftMargin;
-                reuseView(leftView);
-                leftView = getViewForMessage(0, false);
-                int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
-                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) leftView.getLayoutParams();
-                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-                layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
-                layoutParams.width = widht;
-                layoutParams.leftMargin = offset;
-                leftView.setLayoutParams(layoutParams);
-                leftView.invalidate();
-            }
-        }
-    }
-
-    private void fixLayout() {
-        if (avatarContainer != null) {
-            avatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    if (avatarContainer != null) {
-                        avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
-                    }
-                    int padding = (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
-                    avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
-                    return false;
-                }
-            });
-        }
-        if (messageContainer != null) {
-            messageContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    messageContainer.getViewTreeObserver().removeOnPreDrawListener(this);
-                    if (!checkTransitionAnimation() && !startedMoving) {
-                        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) messageContainer.getLayoutParams();
-                        layoutParams.topMargin = AndroidUtilities.getCurrentActionBarHeight();
-                        layoutParams.bottomMargin = AndroidUtilities.dp(48);
-                        layoutParams.width = ViewGroup.MarginLayoutParams.MATCH_PARENT;
-                        layoutParams.height = ViewGroup.MarginLayoutParams.MATCH_PARENT;
-                        messageContainer.setLayoutParams(layoutParams);
-                        applyViewsLayoutParams(0);
-                    }
-                    return false;
-                }
-            });
-        }
-    }
-
-    private void handleIntent(Intent intent) {
-        KeyguardManager km = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
-        if (km.inKeyguardRestrictedInputMode() || !ApplicationLoader.isScreenOn) {
-            getWindow().addFlags(
-                            WindowManager.LayoutParams.FLAG_DIM_BEHIND |
-                            WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
-                            WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON |
-                            WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
-        } else {
-            getWindow().addFlags(
-                            WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
-                            WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON |
-                            WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
-            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
-        }
-
-        if (currentMessageObject == null) {
-            currentMessageNum = 0;
-        }
-        getNewMessage();
-    }
-
-    private void getNewMessage() {
-        if (NotificationsController.getInstance().popupMessages.isEmpty()) {
-            onFinish();
-            finish();
-            return;
-        }
-
-        boolean found = false;
-        if ((currentMessageNum != 0 || startedMoving) && currentMessageObject != null) {
-            for (int a = 0; a < NotificationsController.getInstance().popupMessages.size(); a++) {
-                if (NotificationsController.getInstance().popupMessages.get(a).getId() == currentMessageObject.getId()) {
-                    currentMessageNum = a;
-                    found = true;
-                    break;
-                }
-            }
-        }
-        if (!found) {
-            currentMessageNum = 0;
-            currentMessageObject = NotificationsController.getInstance().popupMessages.get(0);
-            updateInterfaceForCurrentMessage(0);
-        } else if (startedMoving) {
-            if (currentMessageNum == NotificationsController.getInstance().popupMessages.size() - 1) {
-                prepareLayouts(3);
-            } else if (currentMessageNum == 1) {
-                prepareLayouts(4);
-            }
-        }
-        countText.setText(String.format("%d/%d", currentMessageNum + 1, NotificationsController.getInstance().popupMessages.size()));
-    }
-
-    private void openCurrentMessage() {
-        if (currentMessageObject == null) {
-            return;
-        }
-        Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
-        long dialog_id = currentMessageObject.getDialogId();
-        if ((int)dialog_id != 0) {
-            int lower_id = (int)dialog_id;
-            if (lower_id < 0) {
-                intent.putExtra("chatId", -lower_id);
-            } else {
-                intent.putExtra("userId", lower_id);
-            }
-        } else {
-            intent.putExtra("encId", (int)(dialog_id >> 32));
-        }
-        intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
-        intent.setFlags(0x00008000);
-        startActivity(intent);
-        onFinish();
-        finish();
-    }
-
-    private void updateInterfaceForCurrentMessage(int move) {
-        if (actionBar == null) {
-            return;
-        }
-        currentChat = null;
-        currentUser = null;
-        long dialog_id = currentMessageObject.getDialogId();
-        if ((int)dialog_id != 0) {
-            int lower_id = (int)dialog_id;
-            if (lower_id > 0) {
-//                currentUser = MessagesController.getInstance().getUser(lower_id);
-            } else {
-//                currentChat = MessagesController.getInstance().getChat(-lower_id);
-//                currentUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
-            }
-        }
-
-        if (currentChat != null && currentUser != null) {
-            nameTextView.setText(currentChat.title);
-            onlineTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-            nameTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
-            nameTextView.setCompoundDrawablePadding(0);
-        } else if (currentUser != null) {
-            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-            if ((int)dialog_id == 0) {
-                nameTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_lock_white, 0, 0, 0);
-                nameTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-            } else {
-                nameTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
-                nameTextView.setCompoundDrawablePadding(0);
-            }
-        }
-
-        prepareLayouts(move);
-        updateSubtitle();
-        checkAndUpdateAvatar();
-        applyViewsLayoutParams(0);
-    }
-
-    private void updateSubtitle() {
-        if (actionBar == null) {
-            return;
-        }
-        if (currentChat != null || currentUser == null) {
-            return;
-        }
-        if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
-            if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
-            } else {
-                nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-            }
-        } else {
-            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-        }
-        CharSequence printString = "";
-        if (printString == null || printString.length() == 0) {
-            lastPrintString = null;
-            setTypingAnimation(false);
-//            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
-            TLRPC.User user = null;
-            if (user != null) {
-                currentUser = user;
-            }
-//            onlineTextView.setText(LocaleController.formatUserStatus(currentUser));
-        } else {
-            lastPrintString = printString;
-            onlineTextView.setText(printString);
-            setTypingAnimation(true);
-        }
-    }
-
-    private void checkAndUpdateAvatar() {
-        TLRPC.FileLocation newPhoto = null;
-        AvatarDrawable avatarDrawable = null;
-        if (currentChat != null) {
-//            TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
-            TLRPC.Chat chat = null;
-            if (chat == null) {
-                return;
-            }
-            currentChat = chat;
-            if (currentChat.photo != null) {
-                newPhoto = currentChat.photo.photo_small;
-            }
-            avatarDrawable = new AvatarDrawable(currentChat);
-        } else if (currentUser != null) {
-//            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
-            TLRPC.User user = null;
-            if (user == null) {
-                return;
-            }
-            currentUser = user;
-            if (currentUser.photo != null) {
-                newPhoto = currentUser.photo.photo_small;
-            }
-            avatarDrawable = new AvatarDrawable(currentUser);
-        }
-        if (avatarImageView != null) {
-            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
-        }
-    }
-
-    private void setTypingAnimation(boolean start) {
-        if (actionBar == null) {
-            return;
-        }
-        if (start) {
-            try {
-//                Integer type = MessagesController.getInstance().printingStringsTypes.get(currentMessageObject.getDialogId());
-                Integer type = 0;
-                if (type == 0) {
-                    onlineTextView.setCompoundDrawablesWithIntrinsicBounds(typingDotsDrawable, null, null, null);
-                    onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-                    typingDotsDrawable.start();
-                } else if (type == 1) {
-                    onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-                    typingDotsDrawable.stop();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        } else {
-            onlineTextView.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
-            onlineTextView.setCompoundDrawablePadding(0);
-            typingDotsDrawable.stop();
-        }
-    }
-
-    @Override
-    public void onBackPressed() {
-        super.onBackPressed();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        ConnectionsManager.getInstance().setAppPaused(false, false);
-        fixLayout();
-        checkAndUpdateAvatar();
-        wakeLock.acquire(7000);
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        overridePendingTransition(0, 0);
-        ConnectionsManager.getInstance().setAppPaused(true, false);
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.appDidLogout) {
-            onFinish();
-            finish();
-        } else if (id == NotificationCenter.pushMessagesUpdated) {
-            getNewMessage();
-        } else if (id == NotificationCenter.updateInterfaces) {
-            if (currentMessageObject == null) {
-                return;
-            }
-            int updateMask = (Integer)args[0];
-            if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0) {
-                updateSubtitle();
-            }
-            if ((updateMask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
-                checkAndUpdateAvatar();
-            }
-            if ((updateMask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
-//                CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
-                CharSequence printString = "";
-                if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
-                    updateSubtitle();
-                }
-            }
-        } else if (id == NotificationCenter.emojiDidLoaded) {
-            if (messageContainer != null) {
-                int count = messageContainer.getChildCount();
-                for (int a = 0; a < count; a++) {
-                    View view = messageContainer.getChildAt(a);
-                    if ((Integer)view.getTag() == 1) {
-                        TextView textView = (TextView)view.findViewWithTag(301);
-                        if (textView != null) {
-                            textView.invalidate();
-                        }
-                    }
-                }
-            }
-        } else if (id == NotificationCenter.contactsDidLoaded) {
-            updateSubtitle();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        onFinish();
-        if (wakeLock.isHeld()) {
-            wakeLock.release();
-        }
-        if (avatarImageView != null) {
-            avatarImageView.setImageDrawable(null);
-        }
-    }
-
-    protected void onFinish() {
-        if (finished) {
-            return;
-        }
-        finished = true;
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.pushMessagesUpdated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioProgressDidChanged);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-        if (wakeLock.isHeld()) {
-            wakeLock.release();
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 404a37f00..ec08d1555 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -682,22 +682,6 @@ public void onTextChanged(final CharSequence text, boolean bigChange) {
                     AndroidUtilities.cancelRunOnUIThread(waitingForCharaterEnterRunnable);
                     waitingForCharaterEnterRunnable = null;
                 }
-                if (postCreateActivityEnterView.isMessageWebPageSearchEnabled()) {
-                    if (bigChange) {
-//                        searchLinks(text, true);
-                    } else {
-                        waitingForCharaterEnterRunnable = new Runnable() {
-                            @Override
-                            public void run() {
-                                if (this == waitingForCharaterEnterRunnable) {
-//                                    searchLinks(text, false);
-                                    waitingForCharaterEnterRunnable = null;
-                                }
-                            }
-                        };
-                        AndroidUtilities.runOnUIThread(waitingForCharaterEnterRunnable, 3000);
-                    }
-                }
             }
 
             @Override
