diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index a92b286df..ffe61a278 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -233,7 +233,8 @@ public void loadPosts(final String idOffset, final int offset, final int count,
         if (offlineMode) {
             loadLocalPosts(postRequest, reload);
         } else {
-            loadPostFromServer(postRequest, reload);
+//            loadPostFromServer(postRequest, reload);
+            loadVKPhotos(postRequest, reload);
         }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java b/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
index 20db354a9..1a942d0e6 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
@@ -34,6 +34,8 @@
 
     private Geocoder geocoder;
 
+//    private GoogleApiClient mGoogleApiClient;
+
     public static LocationManagerHelper getInstance() {
         LocationManagerHelper localInstance = Instance;
         if (localInstance == null) {
@@ -48,6 +50,18 @@ public static LocationManagerHelper getInstance() {
     }
 
     private LocationManagerHelper() {
+//        mGoogleApiClient = new GoogleApiClient
+//                .Builder(ApplicationLoader.applicationContext)
+////                .enableAutoManage((FragmentActivity) ApplicationLoader.applicationContext, 0, null)
+//                .addApi(Places.GEO_DATA_API)
+//                .addApi(Places.PLACE_DETECTION_API)
+////                .addConnectionCallbacks(null)
+////                .addOnConnectionFailedListener(null)
+//                .build();
+//        if (mGoogleApiClient != null) {
+//            mGoogleApiClient.connect();
+//        }
+
         geocoder = new Geocoder(ApplicationLoader.applicationContext, Locale.ENGLISH);
         // Define a listener that responds to location updates
 
@@ -131,6 +145,84 @@ public Location getLastSavedOrLastLocation() {
         return getLastLocation();
     }
 
+
+//    private ArrayList<PlaceAutocomplete> getPredictions(CharSequence constraint) {
+//        if (mGoogleApiClient != null) {
+//            Log.i(TAG, "Executing autocomplete query for: " + constraint);
+//            PendingResult<AutocompletePredictionBuffer> results =
+//                    Places.GeoDataApi
+//                            .getAutocompletePredictions(mGoogleApiClient, constraint.toString(),
+//                                    mBounds, mPlaceFilter);
+//            // Wait for predictions, set the timeout.
+//            AutocompletePredictionBuffer autocompletePredictions = results
+//                    .await(60, TimeUnit.SECONDS);
+//            final Status status = autocompletePredictions.getStatus();
+//            if (!status.isSuccess()) {
+//                Toast.makeText(getContext(), "Error: " + status.toString(),
+//                        Toast.LENGTH_SHORT).show();
+//                Log.e(TAG, "Error getting place predictions: " + status
+//                        .toString());
+//                autocompletePredictions.release();
+//                return null;
+//            }
+//
+//            Log.i(TAG, "Query completed. Received " + autocompletePredictions.getCount()
+//                    + " predictions.");
+//            Iterator<AutocompletePrediction> iterator = autocompletePredictions.iterator();
+//            ArrayList resultList = new ArrayList<>(autocompletePredictions.getCount());
+//            while (iterator.hasNext()) {
+//                AutocompletePrediction prediction = iterator.next();
+//                resultList.add(new PlaceAutocomplete(prediction.getPlaceId(),
+//                        prediction.getDescription()));
+//            }
+//            // Buffer release
+//            autocompletePredictions.release();
+//            return resultList;
+//        }
+//        Log.e(TAG, "Google API client is not connected.");
+//        return null;
+//    }
+
+
+//    public void predictPlaceByName(String query) {
+//
+//        if (!mGoogleApiClient.isConnected()) {
+//            return;
+//        }
+//
+//        LatLngBounds latLngBounds = new LatLngBounds(
+//                new LatLng(52.222485, 12.755897),
+//                new LatLng(52.893462, 13.739561));
+////        PendingResult<AutocompletePredictionBuffer> result =
+////                Places.GeoDataApi.getAutocompletePredictions(mGoogleApiClient, query,
+////                        latLngBounds, null);
+//
+//        Places.GeoDataApi.getAutocompletePredictions(mGoogleApiClient, query, latLngBounds, null)
+//                .setResultCallback(
+//                        new ResultCallback<AutocompletePredictionBuffer>() {
+//                            @Override
+//                            public void onResult(AutocompletePredictionBuffer buffer) {
+//
+//                                if (buffer == null)
+//                                    return;
+//
+//                                if (buffer.getStatus().isSuccess()) {
+//                                    for (AutocompletePrediction prediction : buffer) {
+//                                        prediction.getPlaceId();
+//                                        prediction.getDescription();
+//                                        //Add as a new item to avoid IllegalArgumentsException when buffer is released
+////                                        add( new AutoCompletePlace( prediction.getPlaceId(), prediction.getDescription() ) );
+//                                    }
+//                                }
+//
+//                                //Prevent memory leak by releasing buffer
+//                                buffer.release();
+//                            }
+//                        }, 60, TimeUnit.SECONDS);
+////
+//        return;
+//    }
+
     //TODO run in the thread
     //
     public List<Address> getAddressesFromLocationName(String locationName, int maxResults) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
index 3557a9d9e..224348ef1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
@@ -88,7 +88,7 @@ public void run() {
                         @Override
                         public void run() {
                             lastSearchLocation = null;
-                            searchGooglePlacesWithQuery(query, coordinate);
+                            searchGooglePlacesWithQuery(query, coordinate, Constants.RADIUS_BROWSER, Constants.FOURSQUARE_BROWSER);
                         }
                     });
                 }
@@ -96,7 +96,7 @@ public void run() {
         }
     }
 
-    public void searchGooglePlacesWithQuery(final String query, final Location coordinate) {
+    public void searchGooglePlacesWithQuery(final String query, final Location coordinate, final int radius, final String intent) {
         if (lastSearchLocation != null && coordinate.distanceTo(lastSearchLocation) < 200) {
             return;
         }
@@ -107,8 +107,8 @@ public void searchGooglePlacesWithQuery(final String query, final Location coord
         }
         try {
             searching = true;
-            String url = String.format(Locale.US, "https://api.foursquare.com/v2/venues/search/?v=%s&locale=en&limit=25&client_id=%s&client_secret=%s&ll=%s&radius=%s",
-                    BuildVars.FOURSQUARE_API_VERSION, BuildVars.FOURSQUARE_API_ID, BuildVars.FOURSQUARE_API_KEY, String.format(Locale.US, "%f,%f", coordinate.getLatitude(), coordinate.getLongitude()), Constants.RADIUS);
+            String url = String.format(Locale.US, "https://api.foursquare.com/v2/venues/search/?v=%s&locale=en&limit=25&client_id=%s&client_secret=%s&ll=%s&radius=%s&intent=%s",
+                    BuildVars.FOURSQUARE_API_VERSION, BuildVars.FOURSQUARE_API_ID, BuildVars.FOURSQUARE_API_KEY, String.format(Locale.US, "%f,%f", coordinate.getLatitude(), coordinate.getLongitude()), radius, intent);
             if (query != null && query.length() > 0) {
                 url += "&query=" + URLEncoder.encode(query, "UTF-8");
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityGoogleSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityGoogleSearchAdapter.java
index 999a97cdd..12fc05b7a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityGoogleSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityGoogleSearchAdapter.java
@@ -49,6 +49,7 @@ public void searchGooglePlacesWithQuery(final String query, final Location coord
         }
         searching = true;
         //TODO run in the thread
+//        LocationManagerHelper.getInstance().predictPlaceByName(query);
         List<Address> addresses = LocationManagerHelper.getInstance().getAddressesFromLocationName(query, Constants.MAX_RESULTS);
         places = (ArrayList<TLRPC.TL_messageMediaVenue>) convertAddresses(addresses);
         searching = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
index 401b7bf39..8e95db31c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
@@ -63,6 +63,7 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseLocationAdapter;
 import org.telegram.ui.Adapters.LocationActivityAdapter;
+import org.telegram.ui.Adapters.LocationActivityGoogleSearchAdapter;
 import org.telegram.ui.Adapters.LocationActivitySearchAdapter;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
@@ -606,6 +607,7 @@ public boolean onTouch(View v, MotionEvent event) {
             searchListView.setVisibility(View.GONE);
             searchListView.setDividerHeight(0);
             searchListView.setDivider(null);
+//            searchListView.setAdapter(searchAdapter = new LocationActivityGoogleSearchAdapter(context));
             searchListView.setAdapter(searchAdapter = new LocationActivitySearchAdapter(context));
             frameLayout.addView(searchListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
             searchListView.setOnScrollListener(new AbsListView.OnScrollListener() {
@@ -868,7 +870,7 @@ private void positionMarker(Location location) {
             LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
             if (adapter != null) {
                 if(searchPlacesEnable) {
-                    adapter.searchGooglePlacesWithQuery(null, myLocation);
+                    adapter.searchGooglePlacesWithQuery(null, myLocation, Constants.RADIUS_CHECKIN, Constants.FOURSQUARE_CHECKIN);
                 }
                 adapter.setGpsLocation(myLocation);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index dda214544..d3ded76b2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -1085,8 +1085,14 @@ public void didSelectLocation(TLRPC.MessageMedia location) {
                     return;
                 }
                 Location customLocation = new Location(lastSavedLocation.getProvider());
-                customLocation.setLatitude(location.geo.lat);
-                customLocation.setLongitude(location.geo._long);
+                double lat = location.geo.lat;
+                double lng = location.geo._long;
+                if (location.geoPlace != null) {
+                    lat = location.geoPlace.lat;
+                    lng = location.geoPlace._long;
+                }
+                customLocation.setLatitude(lat);
+                customLocation.setLongitude(lng);
                 LocationManagerHelper.getInstance().setCustomLocation(customLocation);
                 locationItem.setIcon(R.drawable.ic_attach_location_white);
                 refreshPosts(true);
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index 84e85df15..ad4b6538f 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -20,6 +20,10 @@
     public static int POST_COUNT = 20;
 
     public static final int RADIUS = 800; // meters 8000 for VK
+    public static final int RADIUS_BROWSER = 100_000;
+    public static final int RADIUS_CHECKIN = 800;
+    public static final String FOURSQUARE_BROWSER = "browse";
+    public static final String FOURSQUARE_CHECKIN = "checkin";
     public static final double MAX_DISTANCE_DEGREE = 0.01;
 
 
