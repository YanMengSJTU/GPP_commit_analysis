diff --git a/TMessagesProj/jni/video-compress.c b/TMessagesProj/jni/video-compress.c
index 8fb0b0242..135907579 100644
--- a/TMessagesProj/jni/video-compress.c
+++ b/TMessagesProj/jni/video-compress.c
@@ -5,6 +5,9 @@
 #include <jni.h>
 #include <malloc.h>
 
+
+#define UPDATE_PROGRESS_FRAME_INTERVAL 5
+
 typedef struct StreamContext {
     AVCodecContext *dec_ctx;
     AVCodecContext *enc_ctx;
@@ -328,15 +331,15 @@ int compress_video(const char *src_in, const char *src_out, struct Context *cont
     }
 
 
-//    float duration_sec;
-//    float pts2sec = (float) av_q2d(context->video_enc_ctx->time_base);
-//
-//    if (context->videoConfig.end_time > 0) {
-//        duration_sec = context->videoConfig.end_time - context->videoConfig.start_time;
-//    } else {
-//        duration_sec = (float) (av_q2d(context->ifmt_ctx->streams[0]->time_base) *
-//                                context->ifmt_ctx->streams[0]->duration) - context->videoConfig.start_time;
-//    }
+    float duration_sec;
+    float pts2sec = (float) av_q2d(context->video_enc_ctx->time_base);
+
+    if (context->videoConfig.end_time > 0) {
+        duration_sec = context->videoConfig.end_time - context->videoConfig.start_time;
+    } else {
+        duration_sec = (float) (av_q2d(context->ifmt_ctx->streams[0]->time_base) *
+                                context->ifmt_ctx->streams[0]->duration) - context->videoConfig.start_time;
+    }
 
 
     /* read audio stream packets */
@@ -417,9 +420,9 @@ int compress_video(const char *src_in, const char *src_out, struct Context *cont
 
                 if (got_frame) {
                     encoded_frame_count++;
-                    if (encoded_frame_count % 20 == 0) {
-                        // float progress =(enc_pkt.pts * pts2sec - context->videoConfig.start_time) /duration_sec;
-                        (*env)->CallVoidMethod(env, convertorObject, updateProgress, 0.0);
+                    if (encoded_frame_count % UPDATE_PROGRESS_FRAME_INTERVAL == 0) {
+                         float progress =(enc_pkt.pts * pts2sec - context->videoConfig.start_time) /duration_sec;
+                        (*env)->CallVoidMethod(env, convertorObject, updateProgress, progress);
                     }
 
                     av_packet_rescale_ts(&enc_pkt,
@@ -563,14 +566,15 @@ int compress_video(const char *src_in, const char *src_out, struct Context *cont
 
         if (got_frame) {
             encoded_frame_count++;
-            if (encoded_frame_count % 20 == 0) {
-                //     float progress =(enc_pkt.pts * pts2sec - context->videoConfig.start_time) / duration_sec;
-                (*env)->CallVoidMethod(env, convertorObject, updateProgress, 0.0);
+            if (encoded_frame_count % UPDATE_PROGRESS_FRAME_INTERVAL == 0) {
+                float progress =(enc_pkt.pts * pts2sec - context->videoConfig.start_time) /duration_sec;
+                (*env)->CallVoidMethod(env, convertorObject, updateProgress, progress);
             }
 
             av_packet_rescale_ts(&enc_pkt,
                                  context->video_enc_ctx->time_base,
                                  context->ofmt_ctx->streams[context->videoStreamIndex]->time_base);
+            enc_pkt.stream_index = context->videoStreamIndex;
 
             av_interleaved_write_frame(context->ofmt_ctx, &enc_pkt);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 2f0bd0166..df3a3e524 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -3568,7 +3568,7 @@ public static int findTrack(MediaExtractor extractor, boolean audio) {
         return -5;
     }
 
-    private void didWriteData(final MessageObject messageObject, final File file, final boolean last, long availableSize, final boolean error) {
+    private void didWriteData(final MessageObject messageObject, final File file, final boolean last, long availableSize, final boolean error, final float progress) {
         final boolean firstWrite = messageObject.videoEditedInfo.videoConvertFirstWrite;
         if (firstWrite) {
             messageObject.videoEditedInfo.videoConvertFirstWrite = false;
@@ -3582,12 +3582,12 @@ private void didWriteData(final MessageObject messageObject, final File file, fi
                 startVideoConvertFromQueue();
             }
             if (error) {
-                NotificationCenter.getInstance(messageObject.currentAccount).postNotificationName(NotificationCenter.filePreparingFailed, messageObject, file.toString());
+                NotificationCenter.getInstance(messageObject.currentAccount).postNotificationName(NotificationCenter.filePreparingFailed, messageObject, file.toString(), progress);
             } else {
                 if (firstWrite) {
-                    NotificationCenter.getInstance(messageObject.currentAccount).postNotificationName(NotificationCenter.filePreparingStarted, messageObject, file.toString());
+                    NotificationCenter.getInstance(messageObject.currentAccount).postNotificationName(NotificationCenter.filePreparingStarted, messageObject, file.toString(), progress);
                 }
-                NotificationCenter.getInstance(messageObject.currentAccount).postNotificationName(NotificationCenter.fileNewChunkAvailable, messageObject, file.toString(), availableSize, last ? file.length() : 0);
+                NotificationCenter.getInstance(messageObject.currentAccount).postNotificationName(NotificationCenter.fileNewChunkAvailable, messageObject, file.toString(), availableSize, last ? file.length() : 0, progress);
             }
         });
     }
@@ -3689,26 +3689,27 @@ private boolean convertVideo(final MessageObject messageObject) {
         long time = System.currentTimeMillis();
 
         VideoConvertorListener callback = new VideoConvertorListener() {
+
+            long lastAvailableSize = 0;
+
             @Override
             public boolean checkConversionCanceled() {
                 return messageObject.videoEditedInfo.canceled;
             }
 
-            long lastLength = 0;
             @Override
-            public void updateProgress(float progress) {
+            public void didWriteData(long availableSize, float progress) {
                 if (messageObject.videoEditedInfo.canceled) return;
-                long availableSize = cacheFile.length();
-                if(availableSize > lastLength) {
-                    lastLength = availableSize;
-                    MediaController.this.didWriteData(messageObject, cacheFile, false, availableSize, false);
+                if (availableSize < 0) {
+                    availableSize = cacheFile.length();
                 }
-            }
 
-            @Override
-            public void didWriteData(long availableSize) {
-                if (messageObject.videoEditedInfo.canceled) return;
-                MediaController.this.didWriteData(messageObject, cacheFile, false, availableSize, false);
+                if(!messageObject.videoEditedInfo.needUpdateProgress && lastAvailableSize == availableSize) {
+                    return;
+                }
+
+                lastAvailableSize = availableSize;
+                MediaController.this.didWriteData(messageObject, cacheFile, false, availableSize, false, progress);
             }
         };
 
@@ -3734,7 +3735,10 @@ public void didWriteData(long availableSize) {
 
         extractor.release();
 
+        boolean ffmpeg = false;
+
         if(needCompress && duration < 25_000000 && !isSecret && copyAudioStream) {
+            ffmpeg = true;
             try {
                 FfmpegVideoConvertor convertor = new FfmpegVideoConvertor();
                 error = convertor.convertVideo(videoPath, cacheFile.getAbsolutePath(),
@@ -3754,7 +3758,8 @@ public void didWriteData(long availableSize) {
                     resultWidth, resultHeight,
                     framerate, bitrate,
                     startTime, endTime,
-                    needCompress, callback);
+                    needCompress, duration,
+                    callback);
         }
 
 
@@ -3766,11 +3771,11 @@ public void didWriteData(long availableSize) {
         }
 
         if (BuildVars.LOGS_ENABLED) {
-            FileLog.d("time = " + (System.currentTimeMillis() - time) + " canceled = " + canceled);
+            FileLog.d("ffmpeg=" + ffmpeg + " time=" + (System.currentTimeMillis() - time) + " canceled=" + canceled);
         }
 
         preferences.edit().putBoolean("isPreviousOk", true).apply();
-        didWriteData(messageObject, cacheFile, true, cacheFile.length(), error || canceled);
+        didWriteData(messageObject, cacheFile, true, cacheFile.length(), error || canceled, 1f);
 
         return true;
     }
@@ -3815,7 +3820,6 @@ private static int getVideoBitrateWithFactor(float f) {
 
     public interface VideoConvertorListener {
         boolean checkConversionCanceled();
-        void updateProgress(float progress);
-        void didWriteData(long availableSize);
+        void didWriteData(long availableSize,float progress);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/VideoEditedInfo.java b/TMessagesProj/src/main/java/org/telegram/messenger/VideoEditedInfo.java
index e3136707e..5cf8dd5ae 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/VideoEditedInfo.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/VideoEditedInfo.java
@@ -29,6 +29,7 @@
     public long estimatedDuration;
     public boolean roundVideo;
     public boolean muted;
+    public long originalDuration;
     public TLRPC.InputFile file;
     public TLRPC.InputEncryptedFile encryptedFile;
     public byte[] key;
@@ -36,7 +37,8 @@
 
     public boolean canceled;
     public boolean videoConvertFirstWrite;
-    public long originalDuration;
+    public boolean needUpdateProgress = false;
+
 
     public String getString() {
         return String.format(Locale.US, "-1_%d_%d_%d_%d_%d_%d_%d_%d_%d_%s", startTime, endTime, rotationValue, originalWidth, originalHeight, bitrate, resultWidth, resultHeight, framerate, originalPath);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/video/FfmpegVideoConvertor.java b/TMessagesProj/src/main/java/org/telegram/messenger/video/FfmpegVideoConvertor.java
index 4a5975827..a181faec1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/video/FfmpegVideoConvertor.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/video/FfmpegVideoConvertor.java
@@ -178,7 +178,6 @@ public boolean checkConversionCanceled() {
     }
 
     public void updateProgress(float progress) {
-        if (callback != null) callback.updateProgress(progress);
+        if (callback != null) callback.didWriteData(-1, progress);
     }
-
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/video/MediaCodecVideoConvertor.java b/TMessagesProj/src/main/java/org/telegram/messenger/video/MediaCodecVideoConvertor.java
index 8557405d1..b6b659e9a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/video/MediaCodecVideoConvertor.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/video/MediaCodecVideoConvertor.java
@@ -39,11 +39,11 @@ public boolean convertVideo(String videoPath, File cacheFile,
                                 int resultWidth, int resultHeight,
                                 int framerate, int bitrate,
                                 long startTime, long endTime,
-                                boolean needCompress,
+                                boolean needCompress, long duration,
                                 MediaController.VideoConvertorListener callback) {
         this.callback = callback;
         return convertVideoInternal(videoPath, cacheFile, rotationValue, isSecret,
-                resultWidth, resultHeight, framerate, bitrate, startTime, endTime, needCompress, false);
+                resultWidth, resultHeight, framerate, bitrate, startTime, endTime, duration, needCompress, false);
     }
 
     private boolean convertVideoInternal(String videoPath, File cacheFile,
@@ -51,6 +51,7 @@ private boolean convertVideoInternal(String videoPath, File cacheFile,
                                          int resultWidth, int resultHeight,
                                          int framerate, int bitrate,
                                          long startTime, long endTime,
+                                         long duration,
                                          boolean needCompress, boolean increaseTimeout) {
 
         boolean error = false;
@@ -67,6 +68,9 @@ private boolean convertVideoInternal(String videoPath, File cacheFile,
             extractor.setDataSource(videoPath);
 
 
+            long currentPts = 0;
+            float durationS = duration / 1000f;
+
             checkConversionCanceled();
 
             if (needCompress) {
@@ -329,8 +333,12 @@ private boolean convertVideoInternal(String videoPath, File cacheFile,
                                         info.flags = extractor.getSampleFlags();
                                         long availableSize = mediaMuxer.writeSampleData(audioTrackIndex, audioBuffer, info, false);
                                         if (availableSize != 0) {
-                                            if (callback != null)
-                                                callback.didWriteData(availableSize);
+                                            if (callback != null) {
+                                                if (info.presentationTimeUs - startTime > currentPts) {
+                                                    currentPts = info.presentationTimeUs - startTime;
+                                                }
+                                                callback.didWriteData(availableSize, (currentPts / 1000f) / durationS);
+                                            }
                                         }
                                     }
                                 } else if (index == -1) {
@@ -377,8 +385,12 @@ private boolean convertVideoInternal(String videoPath, File cacheFile,
                                         if ((info.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) == 0) {
                                             long availableSize = mediaMuxer.writeSampleData(videoTrackIndex, encodedData, info, true);
                                             if (availableSize != 0) {
-                                                if (callback != null)
-                                                    callback.didWriteData(availableSize);
+                                                if (callback != null) {
+                                                    if (info.presentationTimeUs - startTime > currentPts) {
+                                                        currentPts = info.presentationTimeUs - startTime;
+                                                    }
+                                                    callback.didWriteData(availableSize, (currentPts / 1000f) / durationS);
+                                                }
                                             }
                                         } else if (videoTrackIndex == -5) {
                                             byte[] csd = new byte[info.size];
@@ -536,7 +548,7 @@ private boolean convertVideoInternal(String videoPath, File cacheFile,
                     checkConversionCanceled();
                 }
             } else {
-                readAndWriteTracks(extractor, mediaMuxer, info, startTime, endTime, cacheFile, bitrate != -1);
+                readAndWriteTracks(extractor, mediaMuxer, info, startTime, endTime, duration, cacheFile, bitrate != -1);
             }
         } catch (Exception e) {
             error = true;
@@ -558,19 +570,23 @@ private boolean convertVideoInternal(String videoPath, File cacheFile,
 
         if (repeatWithIncreasedTimeout) {
             return convertVideoInternal(videoPath, cacheFile, rotationValue, isSecret,
-                    resultWidth, resultHeight, framerate, bitrate, startTime, endTime, needCompress, true);
+                    resultWidth, resultHeight, framerate, bitrate, startTime, endTime, duration, needCompress, true);
         }
 
         return error;
     }
 
     private long readAndWriteTracks(MediaExtractor extractor, MP4Builder mediaMuxer,
-                                    MediaCodec.BufferInfo info, long start, long end, File file, boolean needAudio) throws Exception {
+                                    MediaCodec.BufferInfo info, long start, long end, long duration, File file, boolean needAudio) throws Exception {
         int videoTrackIndex = MediaController.findTrack(extractor, false);
         int audioTrackIndex = needAudio ? MediaController.findTrack(extractor, true) : -1;
         int muxerVideoTrackIndex = -1;
         int muxerAudioTrackIndex = -1;
         boolean inputDone = false;
+
+        long currentPts = 0;
+        float durationS = duration / 1000f;
+
         int maxBufferSize = 0;
         if (videoTrackIndex >= 0) {
             extractor.selectTrack(videoTrackIndex);
@@ -654,7 +670,12 @@ private long readAndWriteTracks(MediaExtractor extractor, MP4Builder mediaMuxer,
                             info.flags = extractor.getSampleFlags();
                             long availableSize = mediaMuxer.writeSampleData(muxerTrackIndex, buffer, info, false);
                             if (availableSize != 0) {
-                                if (callback != null) callback.didWriteData(availableSize);
+                                if (callback != null) {
+                                    if (info.presentationTimeUs - startTime > currentPts) {
+                                        currentPts = info.presentationTimeUs - startTime;
+                                    }
+                                    callback.didWriteData(availableSize, (currentPts / 1000f) / durationS);
+                                }
                             }
                         } else {
                             eof = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index af692db78..7d4de65e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -13,6 +13,7 @@
 import android.animation.AnimatorListenerAdapter;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
+import android.animation.ValueAnimator;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.Dialog;
@@ -854,10 +855,10 @@ private void updateAnimation() {
             }
             lastUpdateTime = newTime;
 
-            if (animatedProgressValue != 1) {
+            if (animatedProgressValue != 1 || currentProgress != 1) {
                 radOffset += 360 * dt / 3000.0f;
                 float progressDiff = currentProgress - animationProgressStart;
-                if (progressDiff > 0) {
+                if (Math.abs(progressDiff) > 0) {
                     currentProgressTime += dt;
                     if (currentProgressTime >= 300) {
                         animatedProgressValue = currentProgress;
@@ -888,6 +889,7 @@ public void setProgress(float value, boolean animated) {
             }
             currentProgress = value;
             currentProgressTime = 0;
+            parent.invalidate();
         }
 
         public void setBackgroundState(int state, boolean animated) {
@@ -941,7 +943,7 @@ public void onDraw(Canvas canvas) {
             }
 
             if (backgroundState == 0 || backgroundState == 1 || previousBackgroundState == 0 || previousBackgroundState == 1) {
-                int diff = AndroidUtilities.dp(4);
+                float diff = AndroidUtilities.dpf2(4.5f);
                 if (previousBackgroundState != -2) {
                     progressPaint.setAlpha((int) (255 * animatedAlphaValue * alpha));
                 } else {
@@ -1669,10 +1671,14 @@ public void didReceivedNotification(int id, int account, Object... args) {
             MessageObject messageObject = (MessageObject) args[0];
             if (messageObject == videoPreviewMessageObject) {
                 String finalPath = (String) args[1];
+
                 long finalSize = (Long) args[3];
+                float progress = (float) args[4];
+                photoProgressViews[0].setProgress(progress,true);
                 if (finalSize != 0) {
                     requestingPreview = false;
-                    progressView.setVisibility(View.INVISIBLE);
+                    photoProgressViews[0].setProgress(1f, true);
+                    photoProgressViews[0].setBackgroundState(3, true);
                     preparePlayer(Uri.fromFile(new File(finalPath)), false, true);
                 }
             }
@@ -8163,7 +8169,7 @@ private void onDraw(Canvas canvas) {
         }
         boolean drawProgress;
         if (isCurrentVideo) {
-            drawProgress = progressView.getVisibility() != View.VISIBLE && (videoPlayer == null || !videoPlayer.isPlaying());
+            drawProgress = videoPlayer == null || !videoPlayer.isPlaying();
         } else {
             drawProgress = !drawTextureView && videoPlayerControlFrameLayout.getVisibility() != View.VISIBLE;
             if (drawProgress && currentAnimation != null && !currentAnimation.isLoadingStream()) {
@@ -8776,10 +8782,10 @@ private void requestVideoPreview(int request) {
                     videoPlayer.seekTo((long) (videoTimelineView.getLeftProgress() * videoDuration));
                 } else {
                     progressView.setVisibility(View.VISIBLE);
+                    progressView.setAlpha(1f);
                     loadInitialVideo = true;
                 }
             } else {
-                requestingPreview = true;
                 releasePlayer(false);
                 if (videoPreviewMessageObject == null) {
                     TLRPC.TL_message message = new TLRPC.TL_message();
@@ -8811,14 +8817,20 @@ private void requestVideoPreview(int request) {
                 videoPreviewMessageObject.videoEditedInfo.bitrate = bitrate;
                 videoPreviewMessageObject.videoEditedInfo.resultWidth = resultWidth;
                 videoPreviewMessageObject.videoEditedInfo.resultHeight = resultHeight;
+                videoPreviewMessageObject.videoEditedInfo.needUpdateProgress = true;
+                videoPreviewMessageObject.videoEditedInfo.originalDuration = (long) (videoDuration * 1000);
+
                 if (!MediaController.getInstance().scheduleVideoConvert(videoPreviewMessageObject, true)) {
                     tryStartRequestPreviewOnFinish = true;
                 }
                 requestingPreview = true;
-                progressView.setVisibility(View.VISIBLE);
+
+                photoProgressViews[0].setProgress(0,photoProgressViews[0].backgroundState == 0 || photoProgressViews[0].previousBackgroundState == 0);
+                photoProgressViews[0].setBackgroundState(0,false);
             }
         } else {
             tryStartRequestPreviewOnFinish = false;
+            photoProgressViews[0].setBackgroundState(3,false);
             if (request == 2) {
                 preparePlayer(currentPlayingVideoFile, false, false);
                 videoPlayer.seekTo((long) (videoTimelineView.getLeftProgress() * videoDuration));
