diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 4831f7c24..8b4aaafa4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -47,6 +47,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Components.ArchivedPullForegroundDrawable;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.CheckBox2;
 import org.telegram.ui.Components.RLottieDrawable;
@@ -116,6 +117,7 @@
     private boolean animatingArchiveAvatar;
     private float animatingArchiveAvatarProgress;
     private BounceInterpolator interpolator = new BounceInterpolator();
+    private ArchivedPullForegroundDrawable archivedChatsDrawable;
 
     private TLRPC.User user;
     private TLRPC.Chat chat;
@@ -306,6 +308,7 @@ protected void onDetachedFromWindow() {
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
+        archivedChatsDrawable = DialogsActivity.archivedPullForegroundDrawable;
         avatarImage.onAttachedToWindow();
         archiveHidden = SharedConfig.archiveHidden;
         archiveBackgroundProgress = archiveHidden ? 0.0f : 1.0f;
@@ -994,6 +997,7 @@ public void buildLayout() {
             }
 
             if (currentDialogFolderId != 0) {
+                if(archivedChatsDrawable != null) archivedChatsDrawable.setView(this);
                 nameString = LocaleController.getString("ArchivedChats", R.string.ArchivedChats);
             } else {
                 if (chat != null) {
@@ -1578,6 +1582,7 @@ public void update(int mask) {
 
             if (currentDialogFolderId != 0) {
                 Theme.dialogs_archiveAvatarDrawable.setCallback(this);
+                if(archivedChatsDrawable != null) archivedChatsDrawable.setView(this);
                 avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_ARCHIVED);
                 avatarImage.setImage(null, null, avatarDrawable, null, user, 0);
             } else {
@@ -1643,6 +1648,11 @@ protected void onDraw(Canvas canvas) {
             return;
         }
 
+        if (currentDialogFolderId != 0 && archivedChatsDrawable != null && archivedChatsDrawable.outProgress == 0f && translationX == 0) {
+            archivedChatsDrawable.draw(canvas);
+            return;
+        }
+
         boolean needInvalidate = false;
 
         long newTime = SystemClock.uptimeMillis();
@@ -2001,6 +2011,9 @@ protected void onDraw(Canvas canvas) {
         if (translationX != 0) {
             canvas.restore();
         }
+        if (currentDialogFolderId != 0 && translationX == 0 && archivedChatsDrawable != null) {
+            archivedChatsDrawable.draw(canvas);
+        }
 
         if (useSeparator) {
             int left;
@@ -2111,6 +2124,16 @@ protected void onDraw(Canvas canvas) {
         }
     }
 
+    public void startOutAnimation() {
+        if(archivedChatsDrawable != null) {
+            archivedChatsDrawable.outCy = avatarImage.getCenterY();
+            archivedChatsDrawable.outCx = avatarImage.getCenterX();
+            archivedChatsDrawable.outRadius = AndroidUtilities.dp(54) >> 1;
+            archivedChatsDrawable.outDrawable = avatarDrawable;
+            archivedChatsDrawable.startOutAnimation();
+        }
+    }
+
     public void onReorderStateChanged(boolean reordering, boolean animated) {
         if (!drawPin && reordering || drawReorder == reordering) {
             if (!drawPin) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
new file mode 100644
index 000000000..69ced176b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
@@ -0,0 +1,249 @@
+package org.telegram.ui.Components;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.ValueAnimator;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.RectF;
+import android.graphics.drawable.Drawable;
+import android.text.TextPaint;
+import android.view.animation.LinearInterpolator;
+
+import androidx.core.content.ContextCompat;
+import androidx.core.graphics.ColorUtils;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Cells.DialogCell;
+
+
+public class ArchivedPullForegroundDrawable {
+
+    public final static float SNAP_HEIGHT = 0.85f;
+
+
+    private Paint paintSecondary = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private Paint paintAccent = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private Paint backgroundPaint = new Paint();
+    private RectF rectF = new RectF();
+    private Paint tooltipTextPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+    private Drawable arrowDrawable;
+
+
+    private float textSwappingProgress = 1f;
+    private boolean animateToEndText = false;
+    private ValueAnimator textSwipingAnimator;
+    private ValueAnimator outAnimator;
+    public float outProgress = 0f;
+    private boolean animateOut = false;
+
+    private int startPadding = AndroidUtilities.dp(32);
+    private int smallMargin = AndroidUtilities.dp(8);
+    private int radius = AndroidUtilities.dp(9);
+    private int diameter = AndroidUtilities.dp(18);
+
+    private DialogCell parent;
+
+    public float pullProgress;
+
+    public float outCy;
+    public float outCx;
+    public int outRadius;
+    public AvatarDrawable outDrawable;
+
+    private String pullTooltip;
+    private String releaseTooltip;
+
+    private ValueAnimator.AnimatorUpdateListener textSwappingUpdateListener = animation -> {
+        textSwappingProgress = (float) animation.getAnimatedValue();
+        if (parent != null) parent.invalidate();
+    };
+
+    public ArchivedPullForegroundDrawable() {
+        tooltipTextPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        tooltipTextPaint.setTextAlign(Paint.Align.CENTER);
+        tooltipTextPaint.setTextSize(AndroidUtilities.dp(16));
+    }
+
+    public void setView(DialogCell view) {
+        parent = view;
+
+        int primaryColor = Color.WHITE;
+        int backgroundColor = Theme.getColor(Theme.key_avatar_backgroundArchivedHidden);
+
+        tooltipTextPaint.setColor(primaryColor);
+        paintAccent.setColor(primaryColor);
+        paintSecondary.setColor(ColorUtils.setAlphaComponent(primaryColor, 100));
+        backgroundPaint.setColor(backgroundColor);
+        arrowDrawable = ContextCompat.getDrawable(ApplicationLoader.applicationContext, R.drawable.archive_swipe_arrow).mutate();
+        arrowDrawable.setColorFilter(new PorterDuffColorFilter(backgroundColor, PorterDuff.Mode.MULTIPLY));
+
+        pullTooltip = LocaleController.getString("SwipeForArchive", R.string.SwipeForArchive);
+        releaseTooltip = LocaleController.getString("ReleaseForArchive", R.string.ReleaseForArchive);
+    }
+
+
+    public void draw(Canvas canvas) {
+        if (outProgress == 1f || parent == null) return;
+        int visibleHeight = (int) (parent.getHeight() * pullProgress);
+
+        updateTextProgress(pullProgress);
+
+        float outProgressHalf = outProgress * 2f;
+        if (outProgressHalf > 1f) outProgressHalf = 1f;
+
+        float cX = outCx;
+        float cY = outCy;
+
+        canvas.save();
+        if (outProgress == 0f) {
+            canvas.drawPaint(backgroundPaint);
+        } else {
+            float outBackgroundRadius = outRadius + (parent.getWidth() - outRadius) * (1f - outProgress);
+            canvas.drawCircle(cX, cY, outBackgroundRadius, backgroundPaint);
+
+            //clip rect work faster then clip path, and in this case users see no difference
+            canvas.clipRect(
+                    cX - outBackgroundRadius, cY - outBackgroundRadius,
+                    cX + outBackgroundRadius, cY + outBackgroundRadius
+            );
+        }
+
+        if (visibleHeight > diameter + smallMargin * 2) {
+            paintSecondary.setAlpha((int) ((1f - outProgressHalf) * 0.4f * 255));
+            rectF.set(startPadding, parent.getHeight() - visibleHeight + smallMargin, startPadding + diameter, parent.getHeight() - smallMargin);
+            canvas.drawRoundRect(rectF, radius, radius, paintSecondary);
+        }
+
+        if (outProgress == 0f) {
+            int x = startPadding + radius;
+            int y = parent.getHeight() - smallMargin - radius;
+            canvas.drawCircle(x, y, radius, paintAccent);
+
+            int ih = arrowDrawable.getIntrinsicHeight();
+            int iw = arrowDrawable.getIntrinsicWidth();
+
+            arrowDrawable.setBounds(
+                    x - (iw >> 1), y - (ih >> 1),
+                    x + (iw >> 1), y + (ih >> 1)
+            );
+
+            float rotateProgress = (float) (visibleHeight - (diameter + smallMargin * 2)) / (float) (parent.getHeight() - (diameter + smallMargin * 2));
+            if (rotateProgress < 0) rotateProgress = 0f;
+            rotateProgress = 1f - rotateProgress;
+            canvas.save();
+            canvas.rotate(180 * rotateProgress, x, y);
+            arrowDrawable.draw(canvas);
+            canvas.restore();
+        }
+
+        tooltipTextPaint.setAlpha((int) (255 * textSwappingProgress));
+        canvas.drawText(pullTooltip, parent.getWidth() / 2f - AndroidUtilities.dp(2), parent.getHeight() - AndroidUtilities.dp(10)
+                + AndroidUtilities.dp(12) * (1f - textSwappingProgress), tooltipTextPaint);
+
+        tooltipTextPaint.setAlpha(255 - (int) (255 * textSwappingProgress));
+        canvas.drawText(releaseTooltip, parent.getWidth() / 2f - AndroidUtilities.dp(2), parent.getHeight() - AndroidUtilities.dp(10)
+                - AndroidUtilities.dp(12) * (textSwappingProgress), tooltipTextPaint);
+
+        canvas.restore();
+
+
+        if (outProgress > 0) {
+            canvas.save();
+            int ih = Theme.dialogs_archiveAvatarDrawable.getIntrinsicHeight();
+            int iw = Theme.dialogs_archiveAvatarDrawable.getIntrinsicWidth();
+
+            int startCx = startPadding + radius;
+            int startCy = parent.getHeight() - smallMargin - radius;
+
+            float scaleStart = (float) AndroidUtilities.dp(24) / iw;
+            float scale = scaleStart + (1f - scaleStart) * outProgress;
+
+            int x = (int) cX;
+            int y = (int) cY;
+            canvas.translate((startCx - cX) * (1f - outProgress), (startCy - cY) * (1f - outProgress));
+            canvas.scale(scale, scale, cX, cY);
+
+            Theme.dialogs_archiveAvatarDrawable.setProgress(0);
+            Theme.dialogs_archiveAvatarDrawable.setBounds(
+                    x - (iw >> 1), y - (ih >> 1),
+                    x + (iw >> 1), y + (ih >> 1)
+            );
+            Theme.dialogs_archiveAvatarDrawable.draw(canvas);
+
+            canvas.restore();
+        }
+    }
+
+    private void updateTextProgress(float pullProgress) {
+        boolean endText = pullProgress > SNAP_HEIGHT;
+        if (animateToEndText != endText) {
+            animateToEndText = endText;
+            if (textSwipingAnimator != null) textSwipingAnimator.cancel();
+            textSwipingAnimator = ValueAnimator.ofFloat(textSwappingProgress, endText ? 0f : 1f);
+            textSwipingAnimator.addUpdateListener(textSwappingUpdateListener);
+            textSwipingAnimator.setInterpolator(new LinearInterpolator());
+            textSwipingAnimator.setDuration(150);
+            textSwipingAnimator.start();
+        }
+    }
+
+    public void startOutAnimation() {
+        if (animateOut) return;
+        if (outAnimator != null) {
+            outAnimator.removeAllListeners();
+            outAnimator.cancel();
+        }
+        animateOut = true;
+        outAnimator = ValueAnimator.ofFloat(0f, 1f);
+        outAnimator.addUpdateListener(animation -> {
+            outProgress = (float) animation.getAnimatedValue();
+            if (parent != null) parent.invalidate();
+        });
+
+        outAnimator.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                textSwappingProgress = 1f;
+                animateToEndText = false;
+            }
+        });
+        outAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
+        outAnimator.setDuration(250);
+        outAnimator.start();
+    }
+
+    public void doNotShow() {
+        if (outAnimator != null) {
+            outAnimator.removeAllListeners();
+            outAnimator.cancel();
+        }
+        outProgress = 1f;
+        animateOut = true;
+    }
+
+    public void showHidden() {
+        if (outAnimator != null) {
+            outAnimator.removeAllListeners();
+            outAnimator.cancel();
+        }
+        outProgress = 0f;
+        animateOut = false;
+    }
+
+    public void destroyView() {
+        parent = null;
+        if (textSwipingAnimator != null) textSwipingAnimator.cancel();
+        if (outAnimator != null) {
+            outAnimator.removeAllListeners();
+            outAnimator.cancel();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 52e5c8782..f1d38fa76 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -35,12 +35,6 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Vibrator;
-
-import androidx.recyclerview.widget.ItemTouchHelper;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -55,39 +49,51 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import androidx.recyclerview.widget.ItemTouchHelper;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.telegram.messenger.AccountInstance;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.MediaDataController;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DialogObject;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.ImageLocation;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.NotificationsController;
+import org.telegram.messenger.R;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.XiaomiUtilities;
-import org.telegram.messenger.FileLog;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.MenuDrawable;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
 import org.telegram.ui.Adapters.DialogsAdapter;
 import org.telegram.ui.Adapters.DialogsSearchAdapter;
 import org.telegram.ui.Cells.AccountSelectCell;
 import org.telegram.ui.Cells.ArchiveHintInnerCell;
+import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.DialogsEmptyCell;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.DrawerActionCell;
@@ -102,22 +108,17 @@
 import org.telegram.ui.Cells.ShadowSectionCell;
 import org.telegram.ui.Cells.TextCell;
 import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.ActionBar.MenuDrawable;
 import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.AnimatedArrowDrawable;
+import org.telegram.ui.Components.ArchivedPullForegroundDrawable;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.ChatActivityEnterView;
 import org.telegram.ui.Components.CombinedDrawable;
 import org.telegram.ui.Components.CubicBezierInterpolator;
 import org.telegram.ui.Components.DialogsItemAnimator;
-import org.telegram.ui.Components.FragmentContextView;
 import org.telegram.ui.Components.EmptyTextProgressView;
+import org.telegram.ui.Components.FragmentContextView;
 import org.telegram.ui.Components.JoinGroupAlert;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.NumberTextView;
@@ -126,7 +127,6 @@
 import org.telegram.ui.Components.RLottieDrawable;
 import org.telegram.ui.Components.RadialProgressView;
 import org.telegram.ui.Components.RecyclerListView;
-import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 import org.telegram.ui.Components.StickersAlert;
 import org.telegram.ui.Components.UndoView;
@@ -134,7 +134,7 @@
 import java.util.ArrayList;
 
 public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    
+
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
     private DialogsAdapter dialogsAdapter;
@@ -235,7 +235,7 @@
     private int canMuteCount;
     private int canUnmuteCount;
     private int canClearCacheCount;
-    
+
     private int folderId;
 
     private final static int pin = 100;
@@ -245,11 +245,18 @@
     private final static int mute = 104;
     private final static int archive = 105;
 
-    private boolean allowScrollToHiddenView;
+    private final static int ARCHIVE_ITEM_STATE_PINNED = 0;
+    private final static int ARCHIVE_ITEM_STATE_SHOWED = 1;
+    private final static int ARCHIVE_ITEM_STATE_HIDDEN = 2;
+
+    private int archivePullViewState;
     private boolean scrollingManually;
     private int totalConsumedAmount;
     private boolean startedScrollAtTop;
 
+    //moved to static variable to prevent glitches when adapter.notifyDataChangesCalled
+    public static ArchivedPullForegroundDrawable archivedPullForegroundDrawable;
+
     private class ContentView extends SizeNotifierFrameLayout {
 
         private int inputFieldHeight;
@@ -395,7 +402,6 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                     }
                 }
                 totalConsumedAmount = 0;
-                allowScrollToHiddenView = false;
             }
             return super.onInterceptTouchEvent(ev);
         }
@@ -480,6 +486,7 @@ public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
                         listView.smoothScrollBy(0, (dialogCell.getMeasuredHeight() + dialogCell.getTop()), CubicBezierInterpolator.EASE_OUT);
                         getUndoView().showWithAction(0, UndoView.ACTION_ARCHIVE_HIDDEN, null, null);
                     }
+                    archivePullViewState = SharedConfig.archiveHidden ? ARCHIVE_ITEM_STATE_HIDDEN : ARCHIVE_ITEM_STATE_PINNED;
                     return;
                 }
 
@@ -648,6 +655,10 @@ public boolean onFragmentCreate() {
             messagesCount = arguments.getInt("messagesCount", 0);
         }
 
+        if (archivedPullForegroundDrawable == null && folderId == 0) {
+            archivedPullForegroundDrawable = new ArchivedPullForegroundDrawable();
+        }
+
         if (dialogsType == 0) {
             askAboutContacts = MessagesController.getGlobalNotificationsSettings().getBoolean("askAboutContacts", true);
             SharedConfig.loadProxyList();
@@ -1040,26 +1051,31 @@ public boolean onTouchEvent(MotionEvent e) {
                         if (itemTouchhelper.checkHorizontalSwipe(null, ItemTouchHelper.LEFT) != 0) {
                             SharedConfig.toggleArchiveHidden();
                             getUndoView().showWithAction(0, UndoView.ACTION_ARCHIVE_PINNED, null, null);
+                            archivePullViewState = SharedConfig.archiveHidden ? ARCHIVE_ITEM_STATE_HIDDEN : ARCHIVE_ITEM_STATE_PINNED;
                         }
                     }
                 }
                 boolean result = super.onTouchEvent(e);
-                if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
-                    if (allowScrollToHiddenView) {
-                        int currentPosition = layoutManager.findFirstVisibleItemPosition();
-                        if (currentPosition == 0) {
-                            View view = layoutManager.findViewByPosition(currentPosition);
-                            int height = AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) / 4 * 3;
-                            int diff = view.getTop() + view.getMeasuredHeight();
-                            if (view != null) {
-                                if (diff < height) {
-                                    listView.smoothScrollBy(0, diff, CubicBezierInterpolator.EASE_OUT_QUINT);
-                                } else {
+                if ((action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) &&
+                        archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && hasHiddenArchive()) {
+
+                    int currentPosition = layoutManager.findFirstVisibleItemPosition();
+                    if (currentPosition == 0) {
+                        View view = layoutManager.findViewByPosition(currentPosition);
+                        int height = (int) (AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) * ArchivedPullForegroundDrawable.SNAP_HEIGHT);
+                        int diff = view.getTop() + view.getMeasuredHeight();
+                        if (view != null) {
+                            if (diff < height) {
+                                listView.smoothScrollBy(0, diff, CubicBezierInterpolator.EASE_OUT_QUINT);
+                                archivePullViewState = ARCHIVE_ITEM_STATE_HIDDEN;
+                            } else {
+                                if (archivePullViewState != ARCHIVE_ITEM_STATE_SHOWED) {
+                                    ((DialogCell) view).startOutAnimation();
                                     listView.smoothScrollBy(0, view.getTop(), CubicBezierInterpolator.EASE_OUT_QUINT);
+                                    archivePullViewState = ARCHIVE_ITEM_STATE_SHOWED;
                                 }
                             }
                         }
-                        allowScrollToHiddenView = false;
                     }
                 }
                 return result;
@@ -1111,6 +1127,9 @@ protected void onAllAnimationsDone() {
         listView.setInstantClick(true);
         listView.setTag(4);
         layoutManager = new LinearLayoutManager(context) {
+
+            boolean canShow = false;
+
             @Override
             public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
                 if (hasHiddenArchive() && position == 1) {
@@ -1124,7 +1143,8 @@ public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State
 
             @Override
             public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {
-                if (listView.getAdapter() == dialogsAdapter && dialogsType == 0 && !onlySelect && !allowScrollToHiddenView && folderId == 0 && dy < 0 && getMessagesController().hasHiddenArchive()) {
+                if (listView.getAdapter() == dialogsAdapter && dialogsType == 0 && !onlySelect && folderId == 0 && dy < 0 && getMessagesController().hasHiddenArchive() && archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN) {
+                    listView.setOverScrollMode(View.OVER_SCROLL_ALWAYS);
                     int currentPosition = layoutManager.findFirstVisibleItemPosition();
                     if (currentPosition == 0) {
                         View view = layoutManager.findViewByPosition(currentPosition);
@@ -1132,26 +1152,54 @@ public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerVi
                             currentPosition = 1;
                         }
                     }
-                    if (currentPosition != 0 && currentPosition != RecyclerView.NO_POSITION) {
+
+
+                    if (listView.getScrollState() != RecyclerView.SCROLL_STATE_DRAGGING) {
                         View view = layoutManager.findViewByPosition(currentPosition);
-                        if (view != null) {
-                            int dialogHeight = AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) + 1;
-                            int canScrollDy = -view.getTop() + (currentPosition - 1) * dialogHeight;
-                            int positiveDy = Math.abs(dy);
-                            if (canScrollDy < positiveDy) {
-                                totalConsumedAmount += Math.abs(dy);
-                                dy = -canScrollDy;
-                                if (startedScrollAtTop && totalConsumedAmount >= AndroidUtilities.dp(150)) {
-                                    allowScrollToHiddenView = true;
-                                    try {
-                                        listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
-                                    } catch (Exception ignore) {
+                        int dialogHeight = AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) + 1;
+                        int canScrollDy = -view.getTop() + (currentPosition - 1) * dialogHeight;
+                        int positiveDy = Math.abs(dy);
+                        if (canScrollDy < positiveDy) {
+                            totalConsumedAmount += Math.abs(dy);
+                            dy = -canScrollDy;
+                        }
+                    } else {
+                        if (currentPosition == 0) {
+                            View v = layoutManager.findViewByPosition(currentPosition);
+                            float k = 1f + (v.getTop() / (float) v.getMeasuredHeight());
+                            if (k > 1f) k = 1f;
+                            listView.setOverScrollMode(View.OVER_SCROLL_NEVER);
+                            dy *= 0.5f - 0.15f * k;
+                        }
+                    }
+                }
 
-                                    }
-                                }
+                if (archivePullViewState != ARCHIVE_ITEM_STATE_PINNED && hasHiddenArchive()) {
+                    int unusedDy = super.scrollVerticallyBy(dy, recycler, state);
+
+                    int currentPosition = layoutManager.findFirstVisibleItemPosition();
+                    if (currentPosition == 0) {
+                        DialogCell dialogCell = (DialogCell) layoutManager.findViewByPosition(currentPosition);
+                        if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && archivedPullForegroundDrawable != null) {
+                            archivedPullForegroundDrawable.showHidden();
+                        }
+
+                        float k = 1f + (dialogCell.getTop() / (float) dialogCell.getMeasuredHeight());
+                        if (k > 1f) k = 1f;
+                        boolean canShowInternal = k > ArchivedPullForegroundDrawable.SNAP_HEIGHT;
+                        if (canShow != canShowInternal) {
+                            canShow = canShowInternal;
+                            if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN) {
+                                listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
                             }
                         }
+                        archivedPullForegroundDrawable.pullProgress = k;
+                        dialogCell.invalidate();
+                    } else {
+                        canShow = false;
+                        archivePullViewState = ARCHIVE_ITEM_STATE_HIDDEN;
                     }
+                    return unusedDy;
                 }
                 return super.scrollVerticallyBy(dy, recycler, state);
             }
@@ -1950,9 +1998,24 @@ protected boolean canUndo() {
             actionBar.setSearchTextColor(Theme.getColor(Theme.key_actionBarDefaultArchivedSearchPlaceholder), true);
         }
 
+        archivePullViewState = SharedConfig.archiveHidden ? ARCHIVE_ITEM_STATE_HIDDEN : ARCHIVE_ITEM_STATE_PINNED;
+        if (hasHiddenArchive()) {
+            archivedPullForegroundDrawable.showHidden();
+        } else {
+            archivedPullForegroundDrawable.doNotShow();
+        }
+
         return fragmentView;
     }
 
+    @Override
+    public void finishFragment() {
+        super.finishFragment();
+        if (archivedPullForegroundDrawable != null && folderId == 0) {
+            archivedPullForegroundDrawable.destroyView();
+        }
+    }
+
     @Override
     public void onResume() {
         super.onResume();
@@ -2019,6 +2082,10 @@ public void onResume() {
                     .setNegativeButton(LocaleController.getString("ContactsPermissionAlertNotNow", R.string.ContactsPermissionAlertNotNow), (dialog, which) -> MessagesController.getGlobalNotificationsSettings().edit().putBoolean("askedAboutMiuiLockscreen", true).commit())
                     .create());
         }
+
+        if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && layoutManager.findFirstVisibleItemPosition() == 0) {
+            layoutManager.scrollToPositionWithOffset(1, 0);
+        }
     }
 
     @Override
@@ -2061,6 +2128,7 @@ protected void onBecomeFullyHidden() {
         }
     }
 
+
     private boolean hasHiddenArchive() {
         return listView.getAdapter() == dialogsAdapter && !onlySelect && dialogsType == 0 && folderId == 0 && getMessagesController().hasHiddenArchive();
     }
