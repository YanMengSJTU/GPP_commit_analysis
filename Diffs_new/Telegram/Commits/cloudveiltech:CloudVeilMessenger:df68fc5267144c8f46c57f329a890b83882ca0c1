diff --git a/.gitignore b/.gitignore
index d5e1d4acd..2ff213731 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,4 @@ gradle.properties
 
 TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
 TMessagesProj/.externalNativeBuild/
+/TMessagesProj/google-services.json
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
new file mode 100644
index 000000000..3d507e35b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
@@ -0,0 +1,38 @@
+package org.cloudveil.messenger;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+
+import com.google.gson.Gson;
+
+import org.telegram.messenger.ApplicationLoader;
+
+/**
+ * Created by darren on 2017-03-25.
+ */
+
+public class GlobalSecuritySettings {
+    public static final boolean LOCK_DISABLE_DELETE_CHAT = false;
+    public static final boolean LOCK_DISABLE_FORWARD_CHAT = false;
+    public static final boolean LOCK_DISABLE_BOTS = true;
+    public static final boolean LOCK_DISABLE_YOUTUBE_VIDEO = true;
+
+
+    private static boolean DEFAULT_LOCK_DISABLE_SECRET_CHAT = false;
+    public static final boolean LOCK_DISABLE_IN_APP_BROWSER = true;
+    public static final boolean LOCK_DISABLE_AUTOPLAY_GIFS = true;
+    public static final boolean LOCK_DISABLE_GIFS = true;
+    public static final boolean LOCK_DISABLE_GLOBAL_SEARCH = true;
+    public static final boolean LOCK_DISABLE_STICKERS = true;
+
+    public static boolean isDisabledSecretChat() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        return preferences.getBoolean("disabledSecretChat", DEFAULT_LOCK_DISABLE_SECRET_CHAT);
+    }
+
+    public static void setDisableSecretChat(boolean isDisabled) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        preferences.edit().putBoolean("disabledSecretChat", isDisabled).apply();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
index 32a3155ca..d43dd2e23 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
@@ -9,6 +9,8 @@
 public class SettingsRequest {
     public int userId;
     public String userPhone;
+    public String userName;
+
     public ArrayList<Row> groups = new ArrayList<>();
     public ArrayList<Row> channels = new ArrayList<>();
     public ArrayList<Row> bots = new ArrayList<>();
@@ -18,7 +20,29 @@ public boolean isEmpty() {
     }
 
     public static class Row {
-        public int id;
+        public long id;
         public String title;
+        public String userName;
+    }
+
+    public void addChannel(Row channel) {
+        addRow(channels, channel);
+    }
+
+    public void addGroup(Row group) {
+        addRow(groups, group);
+    }
+
+    public void addBot(Row bot) {
+        addRow(bots, bot);
+    }
+
+    private void addRow(ArrayList<Row> rows, Row data) {
+        for(Row row : rows) {
+            if(row.id == data.id) {
+                return;
+            }
+        }
+        rows.add(data);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
index cc871255d..98446d781 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
@@ -1,10 +1,16 @@
 package org.cloudveil.messenger.api.model.response;
 
+import java.util.ArrayList;
+
 /**
  * Created by Dmitriy on 05.02.2018.
  */
 
 public class SettingsResponse {
+    public ArrayList<Long> channels;
+    public ArrayList<Long> bots;
+    public ArrayList<Long> groups;
+
     public boolean secretChat;
     public int secretChatMinimumLength;
 
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index 05ef5d591..31a9c2065 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -1,21 +1,30 @@
 package org.cloudveil.messenger.service;
 
+import android.app.Activity;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Handler;
 import android.os.IBinder;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.google.gson.Gson;
+
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.cloudveil.messenger.api.model.request.SettingsRequest;
 import org.cloudveil.messenger.api.model.response.SettingsResponse;
 import org.cloudveil.messenger.api.service.holder.ServiceClientHolders;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.DialogObject;
 import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.concurrent.ConcurrentHashMap;
 
 import io.reactivex.android.schedulers.AndroidSchedulers;
@@ -29,7 +38,9 @@
 
 public class ChannelCheckingService extends Service {
     private static final String ACTION_CHECK_CHANNELS = "org.cloudveil.messenger.service.check.channels";
+    private static final long DEBOUNCE_TIME_MS = 200;
     private Disposable subscription;
+    Handler handler = new Handler();
 
     @Nullable
     @Override
@@ -46,23 +57,41 @@ public static void startDataChecking(@NonNull Context context) {
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
-        if (intent.getAction() != null && intent.getAction().equals(ACTION_CHECK_CHANNELS) && subscription == null) {
-            sendDataCheckRequest();
+        if (intent != null && intent.getAction() != null && intent.getAction().equals(ACTION_CHECK_CHANNELS)) {
+            handler.removeCallbacks(checkDataRunnable);
+            handler.postDelayed(checkDataRunnable, DEBOUNCE_TIME_MS);
         }
         return super.onStartCommand(intent, flags, startId);
     }
 
+    Runnable checkDataRunnable = new Runnable() {
+        @Override
+        public void run() {
+            sendDataCheckRequest();
+        }
+    };
+
     private void sendDataCheckRequest() {
         SettingsRequest request = new SettingsRequest();
-        addChatsToRequest(request);
-        addUsersToRequest(request);
+        addDialogsToRequest(request);
 
         request.userPhone = UserConfig.getCurrentUser().phone;
         request.userId = UserConfig.getCurrentUser().id;
+        request.userName = UserConfig.getCurrentUser().username;
 
-        if(request.isEmpty()) {
+        if (request.isEmpty()) {
             return;
         }
+
+        final SettingsResponse cached = loadFromCache();
+        if(!ConnectionsManager.isNetworkOnline()) {
+            if(cached != null) {
+                processResponse(cached);
+            }
+            return;
+        }
+
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
         subscription = ServiceClientHolders.getSettingsService().loadSettings(request).
                 subscribeOn(Schedulers.io()).
                 observeOn(AndroidSchedulers.mainThread()).
@@ -70,16 +99,59 @@ private void sendDataCheckRequest() {
 
                     @Override
                     public void accept(SettingsResponse settingsResponse) throws Exception {
+                        processResponse(settingsResponse);
                         freeSubscription();
+
+                        saveToCache(settingsResponse);
                     }
                 }, new Consumer<Throwable>() {
                     @Override
                     public void accept(Throwable throwable) throws Exception {
                         freeSubscription();
+                        if(cached != null) {
+                            processResponse(cached);
+                        }
                     }
                 });
     }
 
+    private void processResponse(@NonNull SettingsResponse settingsResponse) {
+        ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
+        allowedDialogs.clear();
+        for (Long channelId : settingsResponse.channels) {
+            allowedDialogs.put(channelId, true);
+        }
+        for (Long groupId : settingsResponse.groups) {
+            allowedDialogs.put(groupId, true);
+        }
+
+
+        ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
+        allowedBots.clear();
+        for (Long groupId : settingsResponse.bots) {
+            allowedBots.put(groupId, true);
+        }
+
+        GlobalSecuritySettings.setDisableSecretChat(!settingsResponse.secretChat);
+
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
+    }
+
+    private SettingsResponse loadFromCache() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(this.getClass().getCanonicalName(), Activity.MODE_PRIVATE);
+        String json = preferences.getString("settings", null);
+        if (json == null) {
+            return null;
+        }
+        return new Gson().fromJson(json, SettingsResponse.class);
+    }
+
+    private void saveToCache(@NonNull SettingsResponse settings) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(this.getClass().getCanonicalName(), Activity.MODE_PRIVATE);
+        String json = new Gson().toJson(settings);
+        preferences.edit().putString("settings", json).apply();
+    }
+
     private void freeSubscription() {
         if (subscription != null && !subscription.isDisposed()) {
             subscription.dispose();
@@ -93,42 +165,61 @@ public void onDestroy() {
         freeSubscription();
     }
 
-    private void addChatsToRequest(@NonNull SettingsRequest request) {
-        ConcurrentHashMap<Integer, TLRPC.Chat> chats = MessagesController.getInstance().getChats();
-        Collection<TLRPC.Chat> values = chats.values();
-
-
-        for (TLRPC.Chat chat : values) {
-            int id = chat.id;
-            String title = chat.title;
-
-            SettingsRequest.Row row = new SettingsRequest.Row();
-            row.id = id;
-            row.title = title;
+    private void addDialogsToRequest(@NonNull SettingsRequest request) {
+        addDialogsToRequest(request, MessagesController.getInstance().dialogs);
+        addDialogsToRequest(request, MessagesController.getInstance().dialogsForward);
+        addDialogsToRequest(request, MessagesController.getInstance().dialogsGroupsOnly);
+        addDialogsToRequest(request, MessagesController.getInstance().dialogsServerOnly);
+    }
 
-            if (chat instanceof TLRPC.TL_channel) {
-                request.channels.add(row);
+    private void addDialogsToRequest(@NonNull SettingsRequest request, ArrayList<TLRPC.TL_dialog> dialogs) {
+        //this is very complicated code from Telegram core to separate dialogs to users, groups and channels
+        for (TLRPC.TL_dialog dlg : dialogs) {
+            long currentDialogId = dlg.id;
+            int lower_id = (int) currentDialogId;
+            int high_id = (int) (currentDialogId >> 32);
+            TLRPC.Chat chat = null;
+            TLRPC.User user = null;
+            if (lower_id != 0) {
+                if (high_id == 1) {
+                    chat = MessagesController.getInstance().getChat(lower_id);
+                } else {
+                    if (lower_id < 0) {
+                        chat = MessagesController.getInstance().getChat(-lower_id);
+                        if (chat != null && chat.migrated_to != null) {
+                            TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
+                            if (chat2 != null) {
+                                chat = chat2;
+                            }
+                        }
+                    } else {
+                        user = MessagesController.getInstance().getUser(lower_id);
+                    }
+                }
             } else {
-                request.groups.add(row);
+                TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+                if (encryptedChat != null) {
+                    user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                }
             }
-        }
-    }
-
-    private void addUsersToRequest(@NonNull SettingsRequest request) {
-        ConcurrentHashMap<Integer, TLRPC.User> users = MessagesController.getInstance().getUsers();
-        Collection<TLRPC.User> values = users.values();
 
-
-        for (TLRPC.User user : values) {
-            if (user.bot) {
-                int id = user.id;
-                String title = user.username;
-
-                SettingsRequest.Row row = new SettingsRequest.Row();
-                row.id = id;
-                row.title = title;
-
-                request.bots.add(row);
+            SettingsRequest.Row row = new SettingsRequest.Row();
+            row.id = dlg.id;
+            if (chat != null) {
+                row.title = chat.title;
+                row.userName = chat.username;
+
+                if (DialogObject.isChannel(dlg)) {
+                    request.addChannel(row);
+                } else {
+                    request.addGroup(row);
+                }
+            } else if (user != null) {
+                if (user.bot) {
+                    row.title = user.username;
+                    row.userName = user.username;
+                    request.addBot(row);
+                }
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Constants.java b/TMessagesProj/src/main/java/org/telegram/messenger/Constants.java
deleted file mode 100644
index 4ccd9092b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Constants.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.telegram.messenger;
-
-/**
- * Created by darren on 2017-03-25.
- */
-
-public class Constants {
-        public static final boolean LOCK_DISABLE_DELETE_CHAT = false;
-        public static final boolean LOCK_DISABLE_FORWARD_CHAT = false;
-        public static final boolean LOCK_DISABLE_BOTS = true;
-        public static final boolean LOCK_DISABLE_YOUTUBE_VIDEO = true;
-        public static final boolean LOCK_DISABLE_SECRET_CHAT = false;
-        public static final boolean LOCK_DISABLE_IN_APP_BROWSER = true;
-        public static final boolean LOCK_DISABLE_AUTOPLAY_GIFS = true;
-        public static final boolean LOCK_DISABLE_GIFS = true;
-        public static final boolean LOCK_DISABLE_GLOBAL_SEARCH = true;
-        public static final boolean LOCK_DISABLE_STICKERS = true;
-
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index fa6d3bc82..236eb0988 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -55,6 +55,7 @@
 import android.view.WindowManager;
 import android.widget.FrameLayout;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.audioinfo.AudioInfo;
 import org.telegram.messenger.exoplayer2.ExoPlayer;
 import org.telegram.messenger.exoplayer2.ui.AspectRatioFrameLayout;
@@ -864,14 +865,14 @@ public MediaController() {
         saveToGallery = preferences.getBoolean("save_gallery", false);
         autoplayGifs = preferences.getBoolean("autoplay_gif", true);
         //CloudVeil Start
-        if (Constants.LOCK_DISABLE_AUTOPLAY_GIFS) {
+        if (GlobalSecuritySettings.LOCK_DISABLE_AUTOPLAY_GIFS) {
             autoplayGifs = false;
         }
         //CloudVeil End
         raiseToSpeak = preferences.getBoolean("raise_to_speak", true);
         customTabs = preferences.getBoolean("custom_tabs", true);
         //CloudVeil Start
-        if (Constants.LOCK_DISABLE_IN_APP_BROWSER) {
+        if (GlobalSecuritySettings.LOCK_DISABLE_IN_APP_BROWSER) {
             customTabs = false;
         }
         //CloudVeil End
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 0c5f6dfcf..75fb3def0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -44,8 +44,10 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.concurrent.Semaphore;
 
 public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
@@ -55,6 +57,11 @@
     private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
     private ConcurrentHashMap<String, TLObject> objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
 
+    //CLoudVeil start
+    public ConcurrentHashMap<Long, Boolean> allowedDialogs = new ConcurrentHashMap<>();
+    public ConcurrentHashMap<Long, Boolean> allowedBots = new ConcurrentHashMap<>();
+    //CLoudVeil end
+
     private ArrayList<Integer> joiningToChannels = new ArrayList<>();
 
     private HashMap<Integer, TLRPC.ExportedChatInvite> exportedChats = new HashMap<>();
@@ -97,6 +104,7 @@
     private HashMap<Integer, Integer> channelsPts = new HashMap<>();
     private HashMap<Integer, Boolean> gettingDifferenceChannels = new HashMap<>();
 
+
     private HashMap<Integer, Boolean> gettingUnknownChannels = new HashMap<>();
     private HashMap<Integer, Boolean> checkingLastMessagesDialogs = new HashMap<>();
 
@@ -121,6 +129,7 @@
 
     private HashMap<Long, ArrayList<Integer>> reloadingMessages = new HashMap<>();
 
+
     private boolean gettingNewDeleteTask;
     private int currentDeletingTaskTime;
     private ArrayList<Integer> currentDeletingTaskMids;
@@ -173,6 +182,7 @@
 
     private ArrayList<TLRPC.TL_disabledFeature> disabledFeatures = new ArrayList<>();
 
+
     private class UserActionUpdatesSeq extends TLRPC.Updates {
 
     }
@@ -729,12 +739,6 @@ public TLObject getUserOrChat(String username) {
         return users;
     }
 
-    //CloudVeil start
-    public ConcurrentHashMap<Integer, TLRPC.Chat> getChats() {
-        return chats;
-    }
-    //CloudVeil end
-
     public TLRPC.Chat getChat(Integer id) {
         return chats.get(id);
     }
@@ -821,7 +825,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
                         oldUser.photo = user.photo;
                         oldUser.flags |= 32;
                     } else {
-                        oldUser.flags = oldUser.flags &~ 32;
+                        oldUser.flags = oldUser.flags & ~32;
                         oldUser.photo = null;
                     }
                 }
@@ -855,7 +859,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
                     user.photo = oldUser.photo;
                     user.flags |= 32;
                 } else {
-                    user.flags = user.flags &~ 32;
+                    user.flags = user.flags & ~32;
                     user.photo = null;
                 }
                 users.put(user.id, user);
@@ -913,7 +917,7 @@ public void putChat(final TLRPC.Chat chat, boolean fromCache) {
                         oldChat.username = chat.username;
                         oldChat.flags |= 64;
                     } else {
-                        oldChat.flags = oldChat.flags &~ 64;
+                        oldChat.flags = oldChat.flags & ~64;
                         oldChat.username = null;
                     }
                     if (chat.participants_count != 0) {
@@ -959,7 +963,7 @@ public void run() {
                     chat.username = oldChat.username;
                     chat.flags |= 64;
                 } else {
-                    chat.flags = chat.flags &~ 64;
+                    chat.flags = chat.flags & ~64;
                     chat.username = null;
                 }
                 if (oldChat.participants_count != 0 && chat.participants_count == 0) {
@@ -8242,8 +8246,8 @@ public void run() {
                             TLRPC.PhoneCall call = upd.phone_call;
                             VoIPService svc = VoIPService.getSharedInstance();
                             if (BuildVars.DEBUG_VERSION) {
-                                FileLog.d("Received call in update: "+call);
-                                FileLog.d("call id "+call.id);
+                                FileLog.d("Received call in update: " + call);
+                                FileLog.d("call id " + call.id);
                             }
                             if (call instanceof TLRPC.TL_phoneCallRequested) {
                                 if (call.date + callRingTimeout / 1000 < ConnectionsManager.getInstance().getCurrentTime()) {
@@ -8252,9 +8256,9 @@ public void run() {
                                     continue;
                                 }
                                 TelephonyManager tm = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
-                                if (svc != null || VoIPService.callIShouldHavePutIntoIntent!=null || tm.getCallState() != TelephonyManager.CALL_STATE_IDLE) {
+                                if (svc != null || VoIPService.callIShouldHavePutIntoIntent != null || tm.getCallState() != TelephonyManager.CALL_STATE_IDLE) {
                                     if (BuildVars.DEBUG_VERSION) {
-                                        FileLog.d("Auto-declining call "+call.id+" because there's already active one");
+                                        FileLog.d("Auto-declining call " + call.id + " because there's already active one");
                                     }
                                     TLRPC.TL_phone_discardCall req = new TLRPC.TL_phone_discardCall();
                                     req.peer = new TLRPC.TL_inputPhoneCall();
@@ -8273,7 +8277,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                     continue;
                                 }
                                 if (BuildVars.DEBUG_VERSION) {
-                                    FileLog.d("Starting service for call "+call.id);
+                                    FileLog.d("Starting service for call " + call.id);
                                 }
                                 VoIPService.callIShouldHavePutIntoIntent = call;
                                 Intent intent = new Intent(ApplicationLoader.applicationContext, VoIPService.class);
@@ -8961,7 +8965,7 @@ public static void openByUserName(String username, final BaseFragment fragment,
             if (fragment.getParentActivity() == null) {
                 return;
             }
-            final AlertDialog progressDialog[] = new AlertDialog[] {new AlertDialog(fragment.getParentActivity(), 1)};
+            final AlertDialog progressDialog[] = new AlertDialog[]{new AlertDialog(fragment.getParentActivity(), 1)};
 
             TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
             req.username = username;
@@ -9026,4 +9030,60 @@ public void onClick(DialogInterface dialog, int which) {
             }, 500);
         }
     }
+
+    //CLoudVeil start
+    public boolean isDialogAllowed(TLRPC.TL_dialog dialog) {
+        return isDialogIdAllowed(dialog.id);
+    }
+
+    public boolean isDialogIdAllowed(long currentDialogId) {
+        int lower_id = (int) currentDialogId;
+        int high_id = (int) (currentDialogId >> 32);
+        TLRPC.Chat chat = null;
+        TLRPC.User user = null;
+        if (lower_id != 0) {
+            if (high_id == 1) {
+                chat = MessagesController.getInstance().getChat(lower_id);
+            } else {
+                if (lower_id < 0) {
+                    chat = MessagesController.getInstance().getChat(-lower_id);
+                    if (chat != null && chat.migrated_to != null) {
+                        TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
+                        if (chat2 != null) {
+                            chat = chat2;
+                        }
+                    }
+                } else {
+                    user = MessagesController.getInstance().getUser(lower_id);
+                }
+            }
+        } else {
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            if (encryptedChat != null) {
+                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+            }
+        }
+
+        if (chat != null) {
+            return allowedDialogs.containsKey(currentDialogId);
+        } else if (user != null) {
+            return !user.bot || allowedBots.containsKey(currentDialogId);
+        }
+        return false;
+    }
+
+    public ArrayList<TLRPC.TL_dialog> filterDialogs(ArrayList<TLRPC.TL_dialog> dialogs) {
+        ArrayList<TLRPC.TL_dialog> filtered = new ArrayList<>();
+        if (dialogs == null) {
+            return filtered;
+        }
+        int i = 0;
+        for (TLRPC.TL_dialog dlg : dialogs) {
+            if (isDialogAllowed(dlg)) {
+                filtered.add(dlg);
+            }
+        }
+        return filtered;
+    }
+    //CloudVeil end
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
index 0434e20c7..e2c14cc6f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
@@ -137,6 +137,7 @@
     public static final int didStartedCall = totalEvents++;
     public static final int didEndedCall = totalEvents++;
     public static final int closeInCallActivity = totalEvents++;
+    public static final int filterDialogsReady = totalEvents++;
 
     private SparseArray<ArrayList<Object>> observers = new SparseArray<>();
     private SparseArray<ArrayList<Object>> removeAfterBroadcast = new SparseArray<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index aa716cd4f..eb74f6f1c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -679,11 +679,14 @@ public void run() {
                         if (popup != 0) {
                             popupArray.add(0, messageObject);
                         }
-                        delayedPushMessages.add(messageObject);
-                        pushMessages.add(0, messageObject);
-                        pushMessagesDict.put(mid, messageObject);
-                        if (original_dialog_id != dialog_id) {
-                            pushDialogsOverrideMention.put(original_dialog_id, 1);
+                        //CloudVeil start
+                        if(MessagesController.getInstance().isDialogIdAllowed(dialog_id)) {
+                            delayedPushMessages.add(messageObject);
+                            pushMessages.add(0, messageObject);
+                            pushMessagesDict.put(mid, messageObject);
+                            if (original_dialog_id != dialog_id) {
+                                pushDialogsOverrideMention.put(original_dialog_id, 1);
+                            }
                         }
                     }
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
index 079324a94..e0bbcd3cf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
@@ -12,8 +12,8 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
@@ -252,10 +252,10 @@ public void onBindViewHolder(int section, int position, RecyclerView.ViewHolder
                         } else if (position == 1) {
                             textCell.setTextAndIcon(LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret);
                             //CloudVeil Start
-                            if (!Constants.LOCK_DISABLE_SECRET_CHAT) {
+                            if (!GlobalSecuritySettings.isDisabledSecretChat()) {
                                 textCell.setTextAndIcon(LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret);
                             }
-                            if (Constants.LOCK_DISABLE_SECRET_CHAT) {
+                            if (GlobalSecuritySettings.isDisabledSecretChat()) {
                                 textCell.setVisibility(View.INVISIBLE);
                             }
                             //CloudVeil End
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index 17949066d..31f2a7889 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -89,16 +89,22 @@ public boolean isDataSetChanged() {
     }
 
     private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
+        //CloudVeil start
+        ArrayList<TLRPC.TL_dialog> dialogs = null;
         if (dialogsType == 0) {
-            return MessagesController.getInstance().dialogs;
+            dialogs = MessagesController.getInstance().dialogs;
         } else if (dialogsType == 1) {
-            return MessagesController.getInstance().dialogsServerOnly;
+            dialogs = MessagesController.getInstance().dialogsServerOnly;
         } else if (dialogsType == 2) {
-            return MessagesController.getInstance().dialogsGroupsOnly;
+            dialogs = MessagesController.getInstance().dialogsGroupsOnly;
         } else if (dialogsType == 3) {
-            return MessagesController.getInstance().dialogsForward;
+            dialogs = MessagesController.getInstance().dialogsForward;
+        } else {
+            return null;
         }
-        return null;
+        dialogs = MessagesController.getInstance().filterDialogs(dialogs);
+        //CloudVeil end
+        return dialogs;
     }
 
     @Override
@@ -107,9 +113,11 @@ public int getItemCount() {
         if (count == 0 && MessagesController.getInstance().loadingDialogs) {
             return 0;
         }
-        if (!MessagesController.getInstance().dialogsEndReached || count == 0) {
+        //CloudVeil start
+        /*if (!MessagesController.getInstance().dialogsEndReached || count == 0) {
             count++;
-        }
+        }*/
+        //CloudVeil end
         if (hasHints) {
             count += 2 + MessagesController.getInstance().hintDialogs.size();
         }
@@ -130,6 +138,7 @@ public TLObject getItem(int i) {
         if (i < 0 || i >= arrayList.size()) {
             return null;
         }
+
         return arrayList.get(i);
     }
 
@@ -216,8 +225,9 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
             case 0: {
                 DialogCell cell = (DialogCell) holder.itemView;
                 TLRPC.TL_dialog dialog = (TLRPC.TL_dialog) getItem(i);
+                MessagesController messagesController = MessagesController.getInstance();
                 if (hasHints) {
-                    i -= 2 + MessagesController.getInstance().hintDialogs.size();
+                    i -= 2 + messagesController.hintDialogs.size();
                 }
                 cell.useSeparator = (i != getItemCount() - 1);
                 if (dialogsType == 0) {
@@ -229,6 +239,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
                     cell.setChecked(selectedDialogs.contains(dialog.id), false);
                 }
                 cell.setDialog(dialog, i, dialogsType);
+
                 break;
             }
             case 4: {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
index 8965f7395..1f950e866 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
@@ -13,7 +13,7 @@
 import android.view.ViewGroup;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
@@ -109,7 +109,7 @@ private void resetItems() {
         }
         items.add(null); // profile
         items.add(null); // padding
-        if (Constants.LOCK_DISABLE_SECRET_CHAT) { //If secret chats are disabled.
+        if (GlobalSecuritySettings.isDisabledSecretChat()) { //If secret chats are disabled.
             items.add(new Item(2, LocaleController.getString("NewGroup", R.string.NewGroup), R.drawable.menu_newgroup));
             //items.add(new Item(3, LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret));
             items.add(new Item(4, LocaleController.getString("NewChannel", R.string.NewChannel), R.drawable.menu_broadcast));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
index f2a4d8316..2c0be8c17 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
@@ -16,7 +16,7 @@
 import android.view.ViewGroup;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
@@ -61,7 +61,7 @@ public SearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1, boolean
         allowUsernameSearch = usernameSearch;
         allowChats = chats;
         allowBots = bots;
-        if (Constants.LOCK_DISABLE_BOTS) {
+        if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
             allowBots = false;
         }
         channelId = searchChannelId;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java
index 2fc0fc097..18828dd93 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java
@@ -8,10 +8,10 @@
 
 package org.telegram.ui.Adapters;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLitePreparedStatement;
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
@@ -184,7 +184,7 @@ public void run() {
                                                 TLRPC.Chat chat = res.chats.get(a);
                                                 //globalSearch.add(chat);
                                                 //CloudVeil Start
-                                                if (!Constants.LOCK_DISABLE_GLOBAL_SEARCH) {
+                                                if (!GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
                                                     globalSearch.add(chat);
                                                 }
                                                 //CloudVeil End
@@ -198,7 +198,7 @@ public void run() {
                                             }
                                             //globalSearch.add(user);
                                             //CloudVeil Start
-                                            if (!Constants.LOCK_DISABLE_GLOBAL_SEARCH) {
+                                            if (!GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
                                                 globalSearch.add(user);
                                             }
                                             //CloudVeil End
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
index 5cb5f71f7..3a6d5b2f3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
@@ -12,7 +12,7 @@
 import android.text.TextUtils;
 import android.view.ViewGroup;
 
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.query.StickersQuery;
@@ -197,7 +197,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
         } else if (i == stickers.size() - 1) {
             side = 1;
         }
-        if (!Constants.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
             ((StickerCell) viewHolder.itemView).setSticker(stickers.get(i), side);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index cae10c3e2..7e70766fa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -43,7 +43,7 @@
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.ImageLoader;
@@ -810,7 +810,7 @@ private boolean checkLinkPreviewMotionEvent(MotionEvent event) {
                         } else {
                             TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
                             //CloudVeil Start
-                            boolean isYoutube = !Constants.LOCK_DISABLE_YOUTUBE_VIDEO || (webPage != null && WebPlayerView.isYoutubeUrl(webPage.embed_url));
+                            boolean isYoutube = !GlobalSecuritySettings.LOCK_DISABLE_YOUTUBE_VIDEO || (webPage != null && WebPlayerView.isYoutubeUrl(webPage.embed_url));
                             if (webPage != null && !TextUtils.isEmpty(webPage.embed_url) && !isYoutube) {
                                 delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.title, webPage.url, webPage.embed_width, webPage.embed_height);
                             } else if (buttonState == -1 || buttonState == 3) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
index 09b2b3ac3..943120279 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
@@ -20,8 +20,8 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.Theme;
@@ -88,7 +88,7 @@ public PhotoPickerSearchCell(Context context, boolean allowGifs) {
         setOrientation(HORIZONTAL);
 
         /* Start Disable Giphy */
-        if (!Constants.LOCK_DISABLE_GIFS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_GIFS) {
             SearchButton searchButton = new SearchButton(context);
             searchButton.textView1.setText(LocaleController.getString("SearchImages", R.string.SearchImages));
             searchButton.textView2.setText(LocaleController.getString("SearchImagesInfo", R.string.SearchImagesInfo));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
index a8b381d5d..2e0ea0043 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
@@ -18,7 +18,7 @@
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.TLRPC;
@@ -64,7 +64,7 @@ public void setRecent(boolean value) {
     }
 
     public void setSticker(TLRPC.Document document, boolean showEmoji) {
-        if (!Constants.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
             if (document != null) {
                 sticker = document;
                 if (document.thumb != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 82990fe08..70585c946 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -74,13 +74,13 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.EmojiSuggestion;
@@ -107,7 +107,6 @@
 import org.telegram.messenger.query.DraftQuery;
 import org.telegram.messenger.query.MessagesQuery;
 import org.telegram.messenger.query.MessagesSearchQuery;
-import org.telegram.messenger.query.SearchQuery;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.messenger.support.widget.GridLayoutManager;
 import org.telegram.messenger.support.widget.GridLayoutManagerFixed;
@@ -543,7 +542,7 @@ public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
             }
             sendBotInlineResult((TLRPC.BotInlineResult) botContextResults.get(index));
             //CloudVeil Start
-            if (!Constants.LOCK_DISABLE_BOTS) {
+            if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                 sendBotInlineResult((TLRPC.BotInlineResult) botContextResults.get(index));
             }
             //CloudVeil End */
@@ -682,10 +681,10 @@ public void run() {
             //    MessagesController.getInstance().sendBotStart(currentUser, inlineQuery);
             //}
             //CloudVeil Start
-            if (Constants.LOCK_DISABLE_BOTS) {
+            if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                 botUser = "";
             }
-            if (!Constants.LOCK_DISABLE_BOTS) {
+            if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                 if (inlineQuery != null) {
                     MessagesController.getInstance().sendBotStart(currentUser, inlineQuery);
                 }
@@ -843,7 +842,7 @@ public void run() {
         if (userId != 0 && currentUser.bot) {
             //BotQuery.loadBotInfo(userId, true, classGuid);
             //CloudVeil Start
-            if (!Constants.LOCK_DISABLE_BOTS) {
+            if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                 BotQuery.loadBotInfo(userId, true, classGuid);
             }
             //CloudVeil End
@@ -854,7 +853,7 @@ public void run() {
                 if (user != null && user.bot) {
                     // BotQuery.loadBotInfo(user.id, true, classGuid);
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_BOTS) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                         BotQuery.loadBotInfo(user.id, true, classGuid);
                     }
                     //CloudVeil End
@@ -1064,7 +1063,7 @@ public void onItemClick(final int id) {
                     }
                     // createDeleteMessagesAlert(null, null);
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_DELETE_CHAT) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
                         createDeleteMessagesAlert(null, null);
                     }
                     //CloudVeil End
@@ -1202,14 +1201,14 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 } else if (id == bot_help) {
                     //SendMessagesHelper.getInstance().sendMessage("/help", dialog_id, null, null, false, null, null, null);
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_BOTS) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                         SendMessagesHelper.getInstance().sendMessage("/help", dialog_id, null, null, false, null, null, null);
                     }
                     //CloudVeil End
                 } else if (id == bot_settings) {
                     //SendMessagesHelper.getInstance().sendMessage("/settings", dialog_id, null, null, false, null, null, null);
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_BOTS) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                         SendMessagesHelper.getInstance().sendMessage("/settings", dialog_id, null, null, false, null, null, null);
                     }
                     //CloudVeil End
@@ -1379,7 +1378,7 @@ public void onCaptionCleared() {
             //headerItem.addSubItem(bot_help, LocaleController.getString("BotHelp", R.string.BotHelp));
             //updateBotButtons();
             //CloudVeil Start
-            if (!Constants.LOCK_DISABLE_BOTS) {
+            if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                 headerItem.addSubItem(bot_settings, LocaleController.getString("BotSettings", R.string.BotSettings));
                 headerItem.addSubItem(bot_help, LocaleController.getString("BotHelp", R.string.BotHelp));
                 updateBotButtons();
@@ -1488,7 +1487,7 @@ public boolean onTouch(View v, MotionEvent event) {
         actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
         actionMode.getItem(star).setVisibility(selectedMessagesCanStarIds[0].size() + selectedMessagesCanStarIds[1].size() != 0 ? View.VISIBLE : View.GONE);
         actionMode.getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
-        if (Constants.LOCK_DISABLE_DELETE_CHAT) {
+        if (GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
             actionMode.getItem(delete).setVisibility(View.GONE);
         }
         checkActionBarMenu();
@@ -1603,7 +1602,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                             int height;
                             mentionListViewIgnoreLayout = true;
                            // if (mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout()) {
-                            if (mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout() && !Constants.LOCK_DISABLE_BOTS) {
+                            if (mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout() && !GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                                 int size = mentionGridLayoutManager.getRowsCount(widthSize);
                                 int maxHeight = size * 102;
                                 if (mentionsAdapter.isBotContext()) {
@@ -1622,7 +1621,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                                 int size = mentionsAdapter.getItemCount();
                                 int maxHeight = 0;
                                 //CloudVeil Start
-                                if (!Constants.LOCK_DISABLE_BOTS) {
+                                if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                                     if (mentionsAdapter.isBotContext()) {
                                         if (mentionsAdapter.getBotContextSwitch() != null) {
                                             maxHeight += 36;
@@ -1820,7 +1819,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                 super.onLayout(changed, l, t, r, b);
                 forceScrollToTop = false;
                 //CloudVeil Start
-                if (!Constants.LOCK_DISABLE_BOTS) {
+                if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                     if (chatAdapter.isBot) {
                         int childCount = getChildCount();
                         for (int a = 0; a < childCount; a++) {
@@ -2608,7 +2607,7 @@ public void onDraw(Canvas canvas) {
                         canvas.drawRect(0, 0, getMeasuredWidth(), top, Theme.chat_composeBackgroundPaint);
                     } else {
                         int top;
-                        if (Constants.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout() && mentionsAdapter.getBotContextSwitch() == null) {
+                        if (GlobalSecuritySettings.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout() && mentionsAdapter.getBotContextSwitch() == null) {
                             top = mentionListViewScrollOffsetY - AndroidUtilities.dp(4);
                         } else {
                             top = mentionListViewScrollOffsetY - AndroidUtilities.dp(2);
@@ -2691,7 +2690,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
 
                     if (newPosition != -1) {
                         mentionListViewIgnoreLayout = true;
-                        if (Constants.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout()) {
+                        if (GlobalSecuritySettings.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout()) {
                             mentionGridLayoutManager.scrollToPositionWithOffset(newPosition, newTop);
                         } else {
                             mentionLayoutManager.scrollToPositionWithOffset(newPosition, newTop);
@@ -2730,7 +2729,7 @@ protected Size getSizeForItem(int i) {
                     }
                     Object object = mentionsAdapter.getItem(i);
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_BOTS) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                         if (object instanceof TLRPC.BotInlineResult) {
                             TLRPC.BotInlineResult inlineResult = (TLRPC.BotInlineResult) object;
                             if (inlineResult.document != null) {
@@ -2811,7 +2810,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, Recycle
             mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(context, false, dialog_id, new MentionsAdapter.MentionsAdapterDelegate() {
                 @Override
                 public void needChangePanelVisibility(boolean show) {
-                    if (!Constants.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout()) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout()) {
                         mentionListView.setLayoutManager(mentionGridLayoutManager);
                     } else {
                         mentionListView.setLayoutManager(mentionLayoutManager);
@@ -2829,7 +2828,7 @@ public void needChangePanelVisibility(boolean show) {
                             mentionContainer.setAlpha(1.0f);
                             return;
                         }
-                        if (!Constants.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout()) {
+                        if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS && mentionsAdapter.isBotContext() && mentionsAdapter.isMediaLayout()) {
                             mentionGridLayoutManager.scrollToPositionWithOffset(0, 10000);
                         } else {
                             mentionLayoutManager.scrollToPositionWithOffset(0, 10000);
@@ -2983,14 +2982,14 @@ public void onItemClick(View view, int position) {
                             }
                         }
                     } else if (object instanceof String) {
-                        if (!Constants.LOCK_DISABLE_BOTS && mentionsAdapter.isBotCommands()) {
+                        if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS && mentionsAdapter.isBotCommands()) {
                             SendMessagesHelper.getInstance().sendMessage((String) object, dialog_id, replyingMessageObject, null, false, null, null, null);
                             chatActivityEnterView.setFieldText("");
                             showReplyPanel(false, null, null, null, false);
                         } else {
                             chatActivityEnterView.replaceWithText(start, len, object + " ", false);
                         }
-                    } else if (!Constants.LOCK_DISABLE_BOTS && object instanceof TLRPC.BotInlineResult) {
+                    } else if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS && object instanceof TLRPC.BotInlineResult) {
                         if (chatActivityEnterView.getFieldText() == null) {
                             return;
                         }
@@ -3004,7 +3003,7 @@ public void onItemClick(View view, int position) {
                         } else {
                             sendBotInlineResult(result);
                         }
-                    } else if (!Constants.LOCK_DISABLE_BOTS && object instanceof TLRPC.TL_inlineBotSwitchPM) {
+                    } else if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS && object instanceof TLRPC.TL_inlineBotSwitchPM) {
                         processInlineBotContextPM((TLRPC.TL_inlineBotSwitchPM) object);
                     } else if (object instanceof EmojiSuggestion) {
                         String code = ((EmojiSuggestion) object).emoji;
@@ -3022,7 +3021,7 @@ public boolean onItemClick(View view, int position) {
                     }
                     Object object = mentionsAdapter.getItem(position);
                     if (object instanceof String) {
-                        if (!Constants.LOCK_DISABLE_BOTS && mentionsAdapter.isBotCommands()) {
+                        if (!GlobalSecuritySettings.LOCK_DISABLE_BOTS && mentionsAdapter.isBotCommands()) {
                             if (URLSpanBotCommand.enabled) {
                                 chatActivityEnterView.setFieldText("");
                                 chatActivityEnterView.setCommand(null, (String) object, true, currentChat != null && currentChat.megagroup);
@@ -4355,7 +4354,7 @@ private void showGifHint() {
             return;
         }
         //CloudVeil Start
-        if (Constants.LOCK_DISABLE_GIFS) {
+        if (GlobalSecuritySettings.LOCK_DISABLE_GIFS) {
             return;
         }
         //CloudVeil End
@@ -6072,7 +6071,7 @@ private void addToSelectedMessages(MessageObject messageObject, boolean outside,
                 int newCopyVisible = copyItem.getVisibility();
                 int newStarVisible = starItem.getVisibility();
                 actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
-                if (Constants.LOCK_DISABLE_DELETE_CHAT) {
+                if (GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
                     actionBar.createActionMode().getItem(delete).setVisibility(View.GONE);
                 }
                 if (editItem != null) {
@@ -10293,7 +10292,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
         }
 
         //CloudVeil Start
-        if (!Constants.LOCK_DISABLE_DELETE_CHAT) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
             item.setVisibility(View.GONE);
         }
         //CloudVeil End
@@ -10456,7 +10455,7 @@ private void processSelectedOption(int option) {
                 }
 
                 //CloudVeil Start
-                if (!Constants.LOCK_DISABLE_DELETE_CHAT) {
+                if (!GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
                     createDeleteMessagesAlert(selectedObject, selectedObjectGroup);
                 }
                 //CloudVeil End
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 0796f80d0..38adc72a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -62,7 +62,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
@@ -1556,13 +1556,13 @@ public void setAllowStickersAndGifs(boolean value, boolean value2) {
             emojiView = null;
         }
         allowStickers = value;
-        if (!Constants.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
             allowStickers = value;
         } else {
             allowStickers = false;
         }
 
-        if (!Constants.LOCK_DISABLE_GIFS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_GIFS) {
             allowGifs = value2;
         } else {
             allowGifs = false;
@@ -3036,7 +3036,7 @@ private void createEmojiView() {
             return;
         }
         emojiView = new EmojiView(allowStickers, allowGifs, parentActivity, info);
-        if (!Constants.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
             emojiView = new EmojiView(allowStickers, allowGifs, parentActivity,info);
         } else {
             emojiView = new EmojiView(false, false, parentActivity,info);
@@ -3146,7 +3146,7 @@ public void onShowStickerSet(TLRPC.StickerSet stickerSet, TLRPC.InputStickerSet
                 if (parentFragment == null || parentActivity == null) {
                     return;
                 }
-                if (!Constants.LOCK_DISABLE_STICKERS) {
+                if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
                     if (stickerSet != null) {
                         inputStickerSet = new TLRPC.TL_inputStickerSetID();
                         inputStickerSet.access_hash = stickerSet.access_hash;
@@ -3248,7 +3248,7 @@ private boolean allowDragging(){
     @Override
     public void onStickerSelected(TLRPC.Document sticker) {
         SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
-        if (!Constants.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
             SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
         }
         if (delegate != null) {
@@ -3258,7 +3258,7 @@ public void onStickerSelected(TLRPC.Document sticker) {
 
     public void addStickerToRecent(TLRPC.Document sticker) {
         createEmojiView();
-        if (!Constants.LOCK_DISABLE_STICKERS) {
+        if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
             emojiView.addRecentSticker(sticker);
         }
     }
@@ -3358,7 +3358,7 @@ private void setEmojiButtonImage() {
         if (currentPage == 0 || !allowStickers && !allowGifs) {
             emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
         } else if (currentPage == 1) {
-            if (!Constants.LOCK_DISABLE_STICKERS) {
+            if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
                 emojiButton.setImageResource(R.drawable.ic_msg_panel_stickers);
             }
         } else if (currentPage == 2) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 7004a41f6..39bbf2622 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -48,9 +48,9 @@
 import android.widget.PopupWindow;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.EmojiData;
 import org.telegram.messenger.FileLog;
@@ -726,7 +726,7 @@ public boolean onTouch(View v, MotionEvent event) {
                     return StickerPreviewViewer.getInstance().onTouch(event, stickersGridView, EmojiView.this.getMeasuredHeight(), stickersOnItemClickListener, stickerPreviewViewerDelegate);
                 }
             });
-            if (!Constants.LOCK_DISABLE_STICKERS) {
+            if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
                 stickersOnItemClickListener = new RecyclerListView.OnItemClickListener() {
                     @Override
                     public void onItemClick(View view, int position) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index ebf0c64d3..ebd8bae39 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -33,10 +33,10 @@
 import android.widget.FrameLayout;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
@@ -137,10 +137,10 @@ public boolean onFragmentCreate() {
             needPhonebook = true;
         }
 // Cloudveil Start
-        if (Constants.LOCK_DISABLE_BOTS) {
+        if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
             allowBots = false;
         }
-        if (Constants.LOCK_DISABLE_SECRET_CHAT) {
+        if (GlobalSecuritySettings.isDisabledSecretChat()) {
             createSecretChat = false;
         }
         //CloudVeil End
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 2fb53a9a7..d6b38214d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -20,6 +20,7 @@
 import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.graphics.Outline;
@@ -28,6 +29,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
+import android.preference.PreferenceManager;
 import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.View;
@@ -43,7 +45,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DialogObject;
 import org.telegram.messenger.FileLog;
@@ -98,7 +100,7 @@
 import java.util.ArrayList;
 
 public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    
+
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
     private DialogsAdapter dialogsAdapter;
@@ -175,6 +177,9 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.needReloadRecentDialogsSearch);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.didLoadedReplyMessages);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.reloadHints);
+            //CloudVeil start
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.filterDialogsReady);
+            //CloudVeil end
         }
 
         if (!dialogsLoaded) {
@@ -208,6 +213,10 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.needReloadRecentDialogsSearch);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didLoadedReplyMessages);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.reloadHints);
+
+            //CloudVeil start
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
+            //CloudVeil end
         }
         if (commentView != null) {
             commentView.onDestroy();
@@ -215,6 +224,27 @@ public void onFragmentDestroy() {
         delegate = null;
     }
 
+    //CloudVeil start
+    private void showPopup(Context context) {
+        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
+        if(defaultSharedPreferences.getBoolean("popupShown", false)) {
+            return;
+        }
+
+        defaultSharedPreferences.edit().putBoolean("popupShown", true).apply();
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(context.getString(R.string.warning))
+                .setMessage(context.getString(R.string.cloudveil_message_warning))
+                .setPositiveButton(context.getString(R.string.OK), new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int which) {
+                                dialog.dismiss();
+                            }
+                        });
+        showDialog(builder.create());
+    }
+    //CloudVeil end
+
     @Override
     public View createView(final Context context) {
         searching = false;
@@ -262,7 +292,9 @@ public void onSearchCollapse() {
                 searching = false;
                 searchWas = false;
                 if (listView != null) {
-                    if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                    //CloudVeil start
+                    if (MessagesController.getInstance().loadingDialogs && getDialogsArray().isEmpty()) {
+                        //CloudVeil end
                         listView.setEmptyView(progressView);
                     } else {
                         progressView.setVisibility(View.GONE);
@@ -480,7 +512,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
             }
         };
         fragmentView = contentView;
-        
+
         listView = new RecyclerListView(context);
         listView.setVerticalScrollBarEnabled(true);
         listView.setItemAnimator(null);
@@ -560,7 +592,7 @@ public void onItemClick(View view, int position) {
                     } else if (obj instanceof TLRPC.Chat) {
                         if (dialogsSearchAdapter.isGlobalSearch(position)) {
                             //CloudVeil Start
-                            if (Constants.LOCK_DISABLE_GLOBAL_SEARCH) {
+                            if (GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
                                 ArrayList<TLRPC.Chat> chats = new ArrayList<>();
                                 chats.add((TLRPC.Chat) obj);
                                 MessagesController.getInstance().putChats(chats, false);
@@ -1038,7 +1070,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
         });
 
-        if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+        //CloudVeil start
+        if (MessagesController.getInstance().loadingDialogs && getDialogsArray().isEmpty()) {
+            //CloudVeil end
             searchEmptyView.setVisibility(View.GONE);
             listView.setEmptyView(progressView);
         } else {
@@ -1149,6 +1183,10 @@ public void needShowMediaBanHint() {
             });
         }
 
+        //CloudVeil start
+        showPopup(context);
+        //CloadVeil end
+
         return fragmentView;
     }
 
@@ -1315,9 +1353,11 @@ public void onRequestPermissionsResultFragment(int requestCode, String[] permiss
     @Override
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
+        //CloudVeil start
         if (id == NotificationCenter.dialogsNeedReload) {
-            //CloudVeil start
             ChannelCheckingService.startDataChecking(ApplicationLoader.applicationContext);
+        }
+        if (id == NotificationCenter.filterDialogsReady) {
             //CloudVeil end
             if (dialogsAdapter != null) {
                 if (dialogsAdapter.isDataSetChanged()) {
@@ -1393,16 +1433,22 @@ public void didReceivedNotification(int id, Object... args) {
     }
 
     private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
+        //CloudVeil start
+        ArrayList<TLRPC.TL_dialog> dialogs = null;
         if (dialogsType == 0) {
-            return MessagesController.getInstance().dialogs;
+            dialogs = MessagesController.getInstance().dialogs;
         } else if (dialogsType == 1) {
-            return MessagesController.getInstance().dialogsServerOnly;
+            dialogs = MessagesController.getInstance().dialogsServerOnly;
         } else if (dialogsType == 2) {
-            return MessagesController.getInstance().dialogsGroupsOnly;
+            dialogs = MessagesController.getInstance().dialogsGroupsOnly;
         } else if (dialogsType == 3) {
-            return MessagesController.getInstance().dialogsForward;
+            dialogs = MessagesController.getInstance().dialogsForward;
+        } else {
+            return null;
         }
-        return null;
+        dialogs = MessagesController.getInstance().filterDialogs(dialogs);
+        //CloudVeil end
+        return dialogs;
     }
 
     public void setSideMenu(RecyclerView recyclerView) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 058639605..5ef72d3ef 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -42,12 +42,12 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -382,7 +382,7 @@ public void onItemClick(final View view, int position) {
                     drawerLayoutContainer.closeDrawer(false);
                 } else if (id == 3) {
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_SECRET_CHAT) {
+                    if (!GlobalSecuritySettings.isDisabledSecretChat()) {
                         Bundle args = new Bundle();
                         args.putBoolean("onlyUsers", true);
                         args.putBoolean("destroyAfterSelect", true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 524a7ea39..a33a258e8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -49,11 +49,11 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
@@ -2828,7 +2828,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
                         }
                     } else if (i == startSecretChatRow) {
                         //CloudVeil Start
-                        if (!Constants.LOCK_DISABLE_SECRET_CHAT) {
+                        if (!GlobalSecuritySettings.isDisabledSecretChat()) {
                             textCell.setText(LocaleController.getString("StartEncryptedChat", R.string.StartEncryptedChat));
                             textCell.setTag(Theme.key_windowBackgroundWhiteGreenText2);
                             textCell.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGreenText2));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index f182ff39b..0840a6ba8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -53,12 +53,12 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.Constants;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -523,7 +523,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     }
                 } else if (position == autoplayGifsRow) {
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_AUTOPLAY_GIFS) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_AUTOPLAY_GIFS) {
                         MediaController.getInstance().toggleAutoplayGifs();
                         if (view instanceof TextCheckCell) {
                             ((TextCheckCell) view).setChecked(MediaController.getInstance().canAutoplayGifs());
@@ -537,7 +537,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     }
                 } else if (position == customTabsRow) {
                     //CloudVeil Start
-                    if (!Constants.LOCK_DISABLE_IN_APP_BROWSER) {
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_IN_APP_BROWSER) {
                         MediaController.getInstance().toggleCustomTabs();
                         if (view instanceof TextCheckCell) {
                             ((TextCheckCell) view).setChecked(MediaController.getInstance().canCustomTabs());
@@ -1273,7 +1273,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     } else if (position == autoplayGifsRow) {
                         textCell.setTextAndCheck(LocaleController.getString("AutoplayGifs", R.string.AutoplayGifs), MediaController.getInstance().canAutoplayGifs(), true);
                         /*CloudVeil Change Start */
-                        if (Constants.LOCK_DISABLE_AUTOPLAY_GIFS) {
+                        if (GlobalSecuritySettings.LOCK_DISABLE_AUTOPLAY_GIFS) {
                             textCell.setEnabled(false);
                         }
                         /*CloudVeil Change End */
@@ -1282,7 +1282,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     } else if (position == customTabsRow) {
                         textCell.setTextAndValueAndCheck(LocaleController.getString("ChromeCustomTabs", R.string.ChromeCustomTabs), LocaleController.getString("ChromeCustomTabsInfo", R.string.ChromeCustomTabsInfo), MediaController.getInstance().canCustomTabs(), false, true);
                         /*CloudVeil Change Start */
-                        if (Constants.LOCK_DISABLE_IN_APP_BROWSER) {
+                        if (GlobalSecuritySettings.LOCK_DISABLE_IN_APP_BROWSER) {
                             textCell.setEnabled(false);
                         }
                         /*CloudVeil Change End */
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
index e682e93ec..022a8bca4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
@@ -20,7 +20,7 @@
 import android.widget.Toast;
 
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.Constants;
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
@@ -186,7 +186,7 @@ public void onItemClick(int id) {
         listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
             @Override
             public void onItemClick(View view, int position) {
-                if (!Constants.LOCK_DISABLE_STICKERS) {
+                if (!GlobalSecuritySettings.LOCK_DISABLE_STICKERS) {
                     if (position >= stickersStartRow && position < stickersEndRow && getParentActivity() != null) {
                         sendReorder();
                         final TLRPC.TL_messages_stickerSet stickerSet = StickersQuery.getStickerSets(currentType).get(position - stickersStartRow);
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index bd48e682c..7be6d8804 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1492,7 +1492,7 @@
     <string name="CallMessageIncoming">Incoming Call</string>
     <string name="CallMessageIncomingMissed">Missed Call</string>
     <string name="CallMessageOutgoingMissed">Cancelled Call</string>
-	<string name="CallMessageIncomingDeclined">Declined Call</string>
+    <string name="CallMessageIncomingDeclined">Declined Call</string>
     <string name="CallMessageWithDuration">%1$s (%2$s)</string>
     <string name="NoCallLog">You didn\'t make any calls yet.</string>
     <string name="VoipPeerIncompatible">**%1$s**\'s app is using an incompatible protocol. They need to update their app before you can call them.</string>
@@ -1505,13 +1505,13 @@
     <string name="DefaultRingtone">Default</string>
     <string name="ConfirmDeleteCallLog">Are you sure you want to delete this entry from the calls log?</string>
     <string name="CallViaTelegram">Telegram Call</string>
-	<string name="VoipAudioRoutingEarpiece">Earpiece</string>
+    <string name="VoipAudioRoutingEarpiece">Earpiece</string>
     <string name="VoipAudioRoutingSpeaker">Speaker</string>
     <string name="VoipAudioRoutingBluetooth">Bluetooth</string>
     <string name="ReturnToCall">RETURN TO CALL</string>
     <string name="CallNotAvailable">Sorry, **%1$s** doesn\'t accept calls.</string>
     <string name="CallEmojiKeyTooltip">If emoji on %1$s\'s screen are the same, this call is 100%% secure.</string>
-	<string name="CallMessageReportProblem">Rate Call</string>
+    <string name="CallMessageReportProblem">Rate Call</string>
     <string name="CallReportHint">What went wrong?</string>
     <string name="CallReportIncludeLogs">Include technical information</string>
     <string name="CallReportLogsExplain">This won\'t reveal the contents of your conversation, but will help us fix the issue sooner.</string>
@@ -1781,4 +1781,6 @@
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
+    <string name="cloudveil_message_warning">CloudVeil Messenger uses a server based system to control access to Bots, Channels, and Groups and other policy rules. This is used to block unacceptable content. Your Telegram id and list of channels, bots, and groups will be sent to our system to allow this to work. We do not have access to your messages themselves.</string>
+    <string name="warning">Warning</string>
 </resources>
