diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index 49f38d8b4..ee5b0e31d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -45,7 +45,7 @@
     private View parentView;
     private Integer tag;
     private Integer thumbTag;
-//    private MessageObject parentMessageObject;
+    //    private MessageObject parentMessageObject;
     private boolean canceledLoading;
 
     private SetImageBackup setImageBackup;
@@ -143,8 +143,8 @@ public void setImage(String httpUrl, String filter, Drawable thumb, String thumb
         }
 
 
-
-        String  key = Utilities.MD5(httpUrl);;
+        String key = Utilities.MD5(httpUrl);
+        ;
 
         if (key != null) {
             if (filter != null) {
@@ -261,7 +261,6 @@ public void clearImage() {
         recycleBitmap(null, false);
         recycleBitmap(null, true);
         if (needsQualityThumb) {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageThumbGenerated);
             ImageLoader.getInstance().cancelLoadingForImageReceiver(this, 0);
         }
     }
@@ -685,11 +684,6 @@ public int getRoundRadius() {
 
     public void setNeedsQualityThumb(boolean value) {
         needsQualityThumb = value;
-        if (needsQualityThumb) {
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageThumbGenerated);
-        } else {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageThumbGenerated);
-        }
     }
 
     public boolean isNeedsQualityThumb() {
@@ -828,25 +822,7 @@ private void recycleBitmap(String newKey, boolean thumb) {
 
     @Override
     public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.messageThumbGenerated) {
-            String key = (String) args[1];
-            if (currentThumbKey != null && currentThumbKey.equals(key)) {
-                if (currentThumb == null) {
-                    ImageLoader.getInstance().incrementUseCount(currentThumbKey);
-                }
-                currentThumb = (BitmapDrawable) args[0];
-                if (staticThumb instanceof BitmapDrawable) {
-                    staticThumb = null;
-                }
-                if (parentView != null) {
-                    if (invalidateAll) {
-                        parentView.invalidate();
-                    } else {
-                        parentView.invalidate(imageX, imageY, imageX + imageW, imageY + imageH);
-                    }
-                }
-            }
-        } else if (id == NotificationCenter.didReplacedPhotoInMemCache) {
+        if (id == NotificationCenter.didReplacedPhotoInMemCache) {
             String oldKey = (String) args[0];
             if (currentKey != null && currentKey.equals(oldKey)) {
                 currentKey = (String) args[1];
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index d81fbf4c9..1c79b9a8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -237,9 +237,6 @@ public MediaController() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileUploadProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
 
         BroadcastReceiver networkStateReceiver = new BroadcastReceiver() {
             @Override
@@ -523,25 +520,6 @@ public void didReceivedNotification(int id, Object... args) {
             }
             listenerInProgress = false;
             processLaterArrays();
-        } else if (id == NotificationCenter.FileUploadProgressChanged) {
-            listenerInProgress = true;
-            String fileName = (String)args[0];
-            ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
-            if (arrayList != null) {
-                Float progress = (Float)args[1];
-                Boolean enc = (Boolean)args[2];
-                for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
-                    if (reference.get() != null) {
-                        reference.get().onProgressUpload(fileName, progress, enc);
-                    }
-                }
-            }
-            listenerInProgress = false;
-            processLaterArrays();
-            try {
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index a888edfb3..73c213656 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -17,87 +17,34 @@
 
 public class NotificationCenter {
 
-    public static final int venuesNeedReload = -1;
-    public static final int postsNeedReload = -2;
-    public static final int postRequestFinished = -3;
-    public static final int undefinedLocation = -4;
-    public static final int newPostSaved = -5;
+
 
 
     private static int totalEvents = 1;
 
-    public static final int didReceivedNewMessages = totalEvents++;
-    public static final int updateInterfaces = totalEvents++;
-    public static final int dialogsNeedReload = totalEvents++;
+    public static final int venuesNeedReload = totalEvents++;
+    public static final int postsNeedReload = totalEvents++;
+    public static final int postRequestFinished = totalEvents++;
+    public static final int undefinedLocation = totalEvents++;
+    public static final int newPostSaved = totalEvents++;
+
+    public static final int didReceivedNewPosts = totalEvents++; //TODO
+    public static final int updateInterfaces = totalEvents++; //TODO
     public static final int closeChats = totalEvents++;
-    public static final int messagesDeleted = totalEvents++;
-    public static final int messagesRead = totalEvents++;
-    public static final int messagesDidLoaded = totalEvents++;
-    public static final int messageReceivedByAck = totalEvents++;
-    public static final int messageReceivedByServer = totalEvents++;
-    public static final int messageSendError = totalEvents++;
-    public static final int contactsDidLoaded = totalEvents++;
-    public static final int chatInfoDidLoaded = totalEvents++;
-    public static final int mediaDidLoaded = totalEvents++;
-    public static final int mediaCountDidLoaded = totalEvents++;
-    public static final int encryptedChatUpdated = totalEvents++;
-    public static final int messagesReadEncrypted = totalEvents++;
-    public static final int userPhotosLoaded = totalEvents++;
-    public static final int removeAllMessagesFromDialog = totalEvents++;
-    public static final int notificationsSettingsUpdated = totalEvents++;
-    public static final int pushMessagesUpdated = totalEvents++;
-    public static final int blockedUsersDidLoaded = totalEvents++;
-    public static final int openedChatChanged = totalEvents++;
     public static final int hideEmojiKeyboard = totalEvents++;
-    public static final int didCreatedNewDeleteTask = totalEvents++;
-    public static final int mainUserInfoChanged = totalEvents++;
-    public static final int privacyRulesUpdated = totalEvents++;
-    public static final int updateMessageMedia = totalEvents++;
-    public static final int recentImagesDidLoaded = totalEvents++;
-    public static final int replaceMessagesObjects = totalEvents++;
-    public static final int didSetPasscode = totalEvents++;
     public static final int screenStateChanged = totalEvents++;
-    public static final int didLoadedReplyMessages = totalEvents++;
-    public static final int newSessionReceived = totalEvents++;
-    public static final int didReceivedWebpages = totalEvents++;
-    public static final int didReceivedWebpagesInUpdates = totalEvents++;
-    public static final int stickersDidLoaded = totalEvents++;
     public static final int didReplacedPhotoInMemCache = totalEvents++;
-    public static final int messagesReadContent = totalEvents++;
-
-    public static final int httpFileDidLoaded = totalEvents++;
-    public static final int httpFileDidFailedLoad = totalEvents++;
-
-    public static final int messageThumbGenerated = totalEvents++;
-
-    public static final int wallpapersDidLoaded = totalEvents++;
     public static final int closeOtherAppActivities = totalEvents++;
-    public static final int didUpdatedConnectionState = totalEvents++;
-    public static final int didReceiveSmsCode = totalEvents++;
+    public static final int didUpdatedConnectionState = totalEvents++; // TODO
     public static final int emojiDidLoaded = totalEvents++;
-    public static final int appDidLogout = totalEvents++;
-
-    public static final int FileDidUpload = totalEvents++;
-    public static final int FileDidFailUpload = totalEvents++;
-    public static final int FileUploadProgressChanged = totalEvents++;
-    public static final int FileLoadProgressChanged = totalEvents++;
+    public static final int FileLoadProgressChanged = totalEvents++; //TODO
     public static final int FileDidLoaded = totalEvents++;
     public static final int FileDidFailedLoad = totalEvents++;
-    public static final int FilePreparingStarted = totalEvents++;
-    public static final int FileNewChunkAvailable = totalEvents++;
-    public static final int FilePreparingFailed = totalEvents++;
-
-    public static final int audioProgressDidChanged = totalEvents++;
-    public static final int audioDidReset = totalEvents++;
-    public static final int recordProgressChanged = totalEvents++;
-    public static final int recordStarted = totalEvents++;
-    public static final int recordStartError = totalEvents++;
-    public static final int recordStopped = totalEvents++;
-    public static final int screenshotTook = totalEvents++;
-    public static final int albumsDidLoaded = totalEvents++;
-    public static final int audioDidSent = totalEvents++;
-    public static final int audioDidStarted = totalEvents++;
-    public static final int audioRouteChanged = totalEvents++;
+    public static final int albumsDidLoaded = totalEvents++; //TODO
+
+
+    public static final int httpFileDidLoaded = totalEvents++; // TODO need receiver
+    public static final int httpFileDidFailedLoad = totalEvents++; // TODO need receiver
 
     private HashMap<Integer, ArrayList<Object>> observers = new HashMap<>();
     private HashMap<Integer, Object> removeAfterBroadcast = new HashMap<>();
@@ -149,7 +96,7 @@ public void setAnimationInProgress(boolean value) {
 
     public void postNotificationName(int id, Object... args) {
         boolean allowDuringAnimation = false;
-        if (id == dialogsNeedReload || id == closeChats || id == messagesDidLoaded || id == mediaCountDidLoaded || id == mediaDidLoaded) {
+        if (id == closeChats) {
             allowDuringAnimation = true;
         }
         postNotificationNameInternal(id, allowDuringAnimation, args);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 9abbfa64b..54e6ff749 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -82,11 +82,8 @@ public static PostsController getInstance() {
 
     public PostsController() {
         ImageLoader.getInstance();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
 
         preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java
deleted file mode 100644
index 54bec92c0..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java
+++ /dev/null
@@ -1,398 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.RectF;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import java.util.Locale;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageReceiver;
-import org.telegram.messenger.dto.Image;
-import org.telegram.messenger.dto.Post;
-import org.telegram.messenger.dto.User;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.RadialProgress;
-
-import ru.aragats.wgo.R;
-
-//TODO-aragats
-public class PostMediaCellOld extends BaseCell {
-
-    public static interface PostMediaCellDelegate {
-        public abstract void didClickedImage(PostMediaCellOld cell);
-
-        public abstract void didPressedOther(PostMediaCellOld cell);
-
-        public abstract void didPressedUserAvatar(PostCell cell, User userObject);
-
-        public abstract void didPressedCancelSendButton(PostCell cell);
-
-        public abstract void didLongPressed(PostCell cell);
-
-        public abstract boolean canPerformActions();
-
-    }
-
-    private int backgroundWidth = 100;
-
-
-    private int layoutWidth;
-    //TODO height of cell?
-    private int layoutHeight;
-
-
-    private int buttonX;
-    private int buttonY;
-
-    private Post post;
-    private AvatarDrawable imageDrawable;
-
-    private static Drawable backgroundMediaDrawableOutSelected;
-
-    private static Drawable backgroundMediaDrawableOut;
-
-
-    //TODO icon on media content
-    private static TextPaint infoPaint;
-    private static TextPaint namePaint;
-
-    private RadialProgress radialProgress;
-
-    private int photoWidth;
-    private int photoHeight;
-
-    private ImageReceiver photoImage;
-    private boolean photoNotSet = false;
-    private boolean cancelLoading = false;
-
-
-    private int buttonPressed = 0;
-    private boolean imagePressed = false;
-    private boolean otherPressed = false;
-
-    private StaticLayout infoLayout;
-    private int infoWidth;
-    private int infoOffset = 0;
-    private String currentInfoString;
-
-    private StaticLayout nameLayout;
-    private int nameWidth = 0;
-    private String currentNameString;
-
-    private PostMediaCellDelegate delegate = null;
-    private RectF deleteProgressRect = new RectF();
-
-    public PostMediaCellOld(Context context) {
-        super(context);
-
-        //static
-        if (infoPaint == null) {
-
-            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            infoPaint.setTextSize(AndroidUtilities.dp(12));
-
-            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            namePaint.setColor(0xff212121);
-            namePaint.setTextSize(AndroidUtilities.dp(16));
-
-            backgroundMediaDrawableOutSelected = getResources().getDrawable(R.drawable.msg_out_photo_selected);
-            backgroundMediaDrawableOut = getResources().getDrawable(R.drawable.msg_out_photo);
-
-
-        }
-
-
-        photoImage = new ImageReceiver(this);
-        imageDrawable = new AvatarDrawable();
-
-        radialProgress = new RadialProgress(this);
-    }
-
-
-    public void setDelegate(PostMediaCellDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        if (photoImage != null) {
-            photoImage.clearImage();
-        }
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-
-        boolean result = false;
-        int side = AndroidUtilities.dp(48);
-
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (delegate == null || delegate.canPerformActions()) {
-
-                if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                    imagePressed = true;
-                    result = true;
-                }
-            }
-
-            if (result) {
-                startCheckLongPress();
-            }
-
-        } else if (event.getAction() == MotionEvent.ACTION_UP) {
-            imagePressed = false;
-            playSoundEffect(SoundEffectConstants.CLICK);
-            didClickedImage();
-            invalidate();
-        }
-
-
-        if (!result) {
-            result = super.onTouchEvent(event);
-        }
-
-        return result;
-    }
-
-    private void didClickedImage() {
-        if (this.delegate != null) {
-            this.delegate.didClickedImage(this);
-        }
-    }
-
-
-    private void didPressedButton(boolean animated) {
-    }
-
-
-    public void setPost(Post post) {
-
-        this.post = post;
-        if (this.post != null) {
-            updateSecretTimeText();
-
-            if (AndroidUtilities.isTablet()) {
-                photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
-            } else {
-                photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f); // here
-            }
-            photoHeight = photoWidth + AndroidUtilities.dp(100);
-
-            if (photoWidth > AndroidUtilities.getPhotoSize()) {
-                photoWidth = AndroidUtilities.getPhotoSize();
-            }
-            if (photoHeight > AndroidUtilities.getPhotoSize()) {
-                photoHeight = AndroidUtilities.getPhotoSize();
-            }
-
-
-            //TODO Full or Image
-            if (this.post.getPreviewImage() != null) {
-                Image previewImage = this.post.getPreviewImage();
-
-                float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
-
-                //TODO placeholder
-//                scale = 1;
-//                post.setWidth(photoWidth);
-//                post.setHeight(photoHeight);
-
-
-                if (previewImage.getSize() == 0) { // size of the file.
-                    previewImage.setSize(-1);
-                }
-
-                int w = (int) (previewImage.getWidth() / scale);
-                int h = (int) (previewImage.getHeight() / scale);
-                if (w == 0) {
-                    w = AndroidUtilities.dp(100);
-                }
-
-                if (h == 0) {
-                    h = AndroidUtilities.dp(100);
-                }
-                if (h > photoHeight) {
-                    float scale2 = h;
-                    h = photoHeight;
-                    scale2 /= h;
-                    w = (int) (w / scale2);
-                } else if (h < AndroidUtilities.dp(120)) {
-                    h = AndroidUtilities.dp(120);
-                    float hScale = (float) previewImage.getHeight() / h;
-                    if (previewImage.getWidth() / hScale < photoWidth) {
-                        w = (int) (previewImage.getWidth() / hScale);
-                    }
-                }
-
-                photoWidth = w;
-                photoHeight = h;
-                backgroundWidth = w + AndroidUtilities.dp(12);
-
-//                photoImage.setImageCoords(avatarLeft, avatarTop + AndroidUtilities.dp(52) + this.block.textLayout.getHeight(), photoWidth, photoHeight);
-
-
-                photoImage.setForcePreview(false);
-
-                int size = (int)(AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
-                photoImage.setImage(previewImage.getUrl(), String.format(Locale.US, "%d_%d", size, size), imageDrawable, null, 0); // TODO fix it. Create drawable.
-//                photoImage.setImageBitmap(previewImage.getBitmap()); // TODO fix it. Create drawable.
-
-
-                invalidate();
-            }
-        }
-
-    }
-
-    public ImageReceiver getPhotoImage() {
-        return photoImage;
-    }
-
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14));
-    }
-
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-        layoutWidth = getMeasuredWidth();
-        layoutHeight = getMeasuredHeight();
-
-
-
-        int x;
-//
-//        x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
-//        x = AndroidUtilities.dp(16);
-//        x = AndroidUtilities.dp(69);
-
-
-        x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
-
-//        x = AndroidUtilities.dp(67);
-        photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
-        int size = AndroidUtilities.dp(48);
-        buttonX = (int) (x + (photoWidth - size) / 2.0f);
-        buttonY = (int) (AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
-
-        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
-        deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
-    }
-
-    private void updateSecretTimeText() {
-        String currentInfoString = "";
-
-        if (this.post == null) {
-            return;
-        }
-        //TODO info about image. Size. or so on.
-        String str = "" + this.post.getPreviewImage().getSize();
-        if (str == null) {
-            return;
-        }
-        infoLayout = null;
-        if (!currentInfoString.equals(str)) {
-            currentInfoString = str;
-            infoOffset = 0;
-            infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-            CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-            infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            invalidate();
-        }
-    }
-
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (this.post == null) {
-            return;
-        }
-
-//        if (!wasLayout) {
-//            requestLayout();
-//            return;
-//        }
-
-
-        Drawable currentBackgroundDrawable = backgroundMediaDrawableOut;
-//        currentBackgroundDrawable = backgroundMediaDrawableOutSelected;
-
-
-        setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - AndroidUtilities.dp(9), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
-
-        // set background for message
-        currentBackgroundDrawable.draw(canvas);
-
-        onAfterBackgroundDraw(canvas);
-
-//        if (nameLayout != null) {
-//            canvas.save();
-//            canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
-//            namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
-//            nameLayout.draw(canvas);
-//            canvas.restore();
-//        }
-
-    }
-
-
-    private void onAfterBackgroundDraw(Canvas canvas) {
-
-//        photoImage.setVisible(true, false);
-
-        radialProgress.setHideCurrentDrawable(false);
-
-        radialProgress.setProgressColor(0xffffffff);
-
-
-        radialProgress.onDraw(canvas);
-
-
-        //TODO name is the name of the document in case of PDF
-//        if (infoLayout != null) {
-//            infoPaint.setColor(0xffffffff);
-//            //TODO background of the media content. without image. just gray background. as with sending pdf.
-////            setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dp(16.5f));
-////            mediaBackgroundDrawable.draw(canvas);
-//
-//            //TODO save state before change rotation or translate
-//            canvas.save();
-//            canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8) + infoOffset, photoImage.getImageY() + AndroidUtilities.dp(5.5f));
-//            infoLayout.draw(canvas);
-//            // TODO after complete draw, we can restore saved state: rotation, tranlation
-//            canvas.restore();
-//        }
-
-        photoImage.draw(canvas);
-
-
-    }
-
-
-    public Post getPost() {
-        return post;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index beadbe891..92d04daf5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -32,7 +32,6 @@
 import org.telegram.android.LocaleController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
 
 import java.util.ArrayList;
 
@@ -292,9 +291,7 @@ protected void onDetachedFromWindow() {
 
     @Override
     public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.stickersDidLoaded) {
-//            stickersGridAdapter.notifyDataSetChanged();
-        }
+
     }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 0d489fcb4..db90512d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -291,8 +291,6 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeOtherAppActivities, this);
         currentConnectionState = ConnectionsManager.getInstance().getConnectionState();
 
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mainUserInfoChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeOtherAppActivities);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didUpdatedConnectionState);
         if (Build.VERSION.SDK_INT < 14) {
@@ -703,8 +701,6 @@ private void onFinish() {
             AndroidUtilities.cancelRunOnUIThread(lockRunnable);
             lockRunnable = null;
         }
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mainUserInfoChanged);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeOtherAppActivities);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didUpdatedConnectionState);
         if (Build.VERSION.SDK_INT < 14) {
@@ -880,29 +876,7 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
     @Override
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.appDidLogout) {
-            if (drawerLayoutAdapter != null) {
-                drawerLayoutAdapter.notifyDataSetChanged();
-            }
-            for (BaseFragment fragment : actionBarLayout.fragmentsStack) {
-                fragment.onFragmentDestroy();
-            }
-            actionBarLayout.fragmentsStack.clear();
-            if (AndroidUtilities.isTablet()) {
-                for (BaseFragment fragment : layersActionBarLayout.fragmentsStack) {
-                    fragment.onFragmentDestroy();
-                }
-                layersActionBarLayout.fragmentsStack.clear();
-                for (BaseFragment fragment : rightActionBarLayout.fragmentsStack) {
-                    fragment.onFragmentDestroy();
-                }
-                rightActionBarLayout.fragmentsStack.clear();
-            }
-            Intent intent2 = new Intent(this, IntroActivity.class);
-            startActivity(intent2);
-            onFinish();
-            finish();
-        } else if (id == NotificationCenter.closeOtherAppActivities) {
+        if (id == NotificationCenter.closeOtherAppActivities) {
             if (args[0] != this) {
                 onFinish();
                 finish();
@@ -914,8 +888,6 @@ public void didReceivedNotification(int id, Object... args) {
                 currentConnectionState = state;
                 updateCurrentConnectionState();
             }
-        } else if (id == NotificationCenter.mainUserInfoChanged) {
-            drawerLayoutAdapter.notifyDataSetChanged();
         } else if (id == NotificationCenter.screenStateChanged) {
             if (!ApplicationLoader.mainInterfacePaused) {
                 if (!ApplicationLoader.isScreenOn) {
@@ -928,7 +900,6 @@ public void didReceivedNotification(int id, Object... args) {
     }
 
 
-
     private void updateCurrentConnectionState() {
         String text = null;
         if (currentConnectionState == 1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index a952e416a..f34452ef4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -92,7 +92,6 @@ public boolean onFragmentCreate() {
         loading = true;
         MediaController.loadGalleryPhotosAlbums(classGuid);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.albumsDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recentImagesDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
         return super.onFragmentCreate();
     }
@@ -100,7 +99,6 @@ public boolean onFragmentCreate() {
     @Override
     public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.albumsDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recentImagesDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
         super.onFragmentDestroy();
     }
@@ -323,21 +321,6 @@ public void didReceivedNotification(int id, Object... args) {
             }
         } else if (id == NotificationCenter.closeChats) {
             removeSelfFromStack();
-        } else if (id == NotificationCenter.recentImagesDidLoaded) {
-            int type = (Integer) args[0];
-            if (type == 0) {
-                recentWebImages = (ArrayList<MediaController.SearchImage>) args[1];
-                recentImagesWebKeys.clear();
-                for (MediaController.SearchImage searchImage : recentWebImages) {
-                    recentImagesWebKeys.put(searchImage.id, searchImage);
-                }
-            } else if (type == 1) {
-                recentGifImages = (ArrayList<MediaController.SearchImage>) args[1];
-                recentImagesGifKeys.clear();
-                for (MediaController.SearchImage searchImage : recentGifImages) {
-                    recentImagesGifKeys.put(searchImage.id, searchImage);
-                }
-            }
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index b365db5e6..ddbba64ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -122,7 +122,6 @@ public PhotoPickerActivity(int type, MediaController.AlbumEntry selectedAlbum, H
     @Override
     public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recentImagesDidLoaded);
         if (selectedAlbum == null) {
             requestQueue = Volley.newRequestQueue(ApplicationLoader.applicationContext);
             if (recentImages.isEmpty()) {
@@ -136,7 +135,6 @@ public boolean onFragmentCreate() {
     @Override
     public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recentImagesDidLoaded);
         if (requestQueue != null) {
             requestQueue.cancelAll("search");
             requestQueue.stop();
@@ -445,12 +443,6 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.closeChats) {
             removeSelfFromStack();
-        } else if (id == NotificationCenter.recentImagesDidLoaded) {
-            if (selectedAlbum == null && type == (Integer) args[0]) {
-                recentImages = (ArrayList<MediaController.SearchImage>) args[1];
-                loadingRecent = false;
-                updateSearchInterface();
-            }
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index a59f8294b..06a5edb9b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -2004,9 +2004,6 @@ public void openPhoto(final ArrayList<Object> photos, final int index, final Pho
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
 
         placeProvider = provider;
@@ -2073,9 +2070,6 @@ public void openPhoto(final Post post, final int index, final PhotoViewerProvide
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
 
         placeProvider = provider;
@@ -2269,9 +2263,6 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.userPhotosLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
         ConnectionsManager.getInstance().cancelRpcsForClassGuid(classGuid);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 896fc9cad..6cc17d626 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -186,35 +186,10 @@ public boolean onFragmentCreate() {
         //my
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.newPostSaved);
         //
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewPosts);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesRead);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByAck);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesReadEncrypted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.screenshotTook);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidStarted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateMessageMedia);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.replaceMessagesObjects);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didLoadedReplyMessages);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedWebpages);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesReadContent);
 
         super.onFragmentCreate();
 
@@ -237,35 +212,10 @@ public void onFragmentDestroy() {
         //my
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.newPostSaved);
         //
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewPosts);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesRead);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByAck);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesReadEncrypted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioProgressDidChanged);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.screenshotTook);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileNewChunkAvailable);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidStarted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateMessageMedia);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.replaceMessagesObjects);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didLoadedReplyMessages);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedWebpages);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesReadContent);
 
 
         if (!AndroidUtilities.isTablet() && getParentActivity() != null) {
@@ -988,7 +938,7 @@ public void restoreSelfArgs(Bundle args) {
     @Override
     public void didReceivedNotification(int id, final Object... args) {
         //TODO look at original implementation
-        if (id == NotificationCenter.didReceivedNewMessages) {
+        if (id == NotificationCenter.didReceivedNewPosts) {
             // add new item and then notifyDataSetChanged
             if (this.postCreateAdapter != null) {
                 postCreateAdapter.notifyDataSetChanged();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 0d374282d..485333078 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -105,7 +105,6 @@
     // Swipe Refresh Layout
     private SwipeRefreshLayout swipeRefreshLayout;
 
-    private LocationManager locationManager;
 
 
     //TODO-legacy. update according to new version.
@@ -209,18 +208,8 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.undefinedLocation);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postsNeedReload);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.openedChatChanged);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByAck);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetPasscode);
         }
 
         LocationManagerHelper.getInstance().runLocationListener();
@@ -240,18 +229,8 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.undefinedLocation);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postsNeedReload);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.openedChatChanged);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByAck);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetPasscode);
         }
         LocationManagerHelper.getInstance().stopLocationListener();
 
@@ -742,32 +721,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
         } else if (id == NotificationCenter.updateInterfaces) {
             updateVisibleRows((Integer) args[0]);
-        } else if (id == NotificationCenter.appDidLogout) {
-            postsLoaded = false;
-        } else if (id == NotificationCenter.encryptedChatUpdated) {
-            updateVisibleRows(0);
-        } else if (id == NotificationCenter.contactsDidLoaded) {
-            updateVisibleRows(0);
-        } else if (id == NotificationCenter.openedChatChanged) {
-//            if (!serverOnly && AndroidUtilities.isTablet()) {
-//                boolean close = (Boolean) args[1];
-//                String dialog_id = (String) args[0];
-//                if (close) {
-//                    if (dialog_id == openedPostId) {
-//                        openedPostId = 0;
-//                    }
-//                } else {
-//                    openedPostId = dialog_id;
-//                }
-//                if (postsAdapter != null) {
-//                    postsAdapter.setOpenedPostId(openedPostId);
-//                }
-//                updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
-//            }
-        } else if (id == NotificationCenter.notificationsSettingsUpdated) {
-            updateVisibleRows(0);
-        } else if (id == NotificationCenter.messageReceivedByAck || id == NotificationCenter.messageReceivedByServer || id == NotificationCenter.messageSendError) {
-            updateVisibleRows(PostsController.UPDATE_MASK_SEND_STATE);
         }
     }
 
