diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 13f028064..8f24270a7 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -3,7 +3,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.2.3'
+        classpath 'com.android.tools.build:gradle:1.3.1'
     }
 }
 apply plugin: 'com.android.application'
@@ -83,5 +83,29 @@ android {
         targetSdkVersion 22
         versionCode 542
         versionName "2.9.1"
+        ndk {
+            moduleName "tmessages.8"
+        }
+    }
+    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
+        def ndkDir = android.ndkDirectory
+        commandLine "$ndkDir/ndk-build.cmd",
+                '-C', file('jni').absolutePath, // Change src/main/jni the relative path to your jni source
+                '-j', Runtime.runtime.availableProcessors(),
+                'all',
+                'NDK_DEBUG=1'
+    }
+
+    task cleanNative(type: Exec, description: 'Clean JNI object files') {
+        def ndkDir = android.ndkDirectory
+        commandLine "$ndkDir/ndk-build.cmd",
+                '-C', file('jni').absolutePath, // Change src/main/jni the relative path to your jni source
+                'clean'
+    }
+
+    clean.dependsOn 'cleanNative'
+
+    tasks.withType(JavaCompile) {
+        compileTask -> compileTask.dependsOn buildNative
     }
 }
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index 33593211e..6f1c3b251 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -1,13 +1,18 @@
 #include <jni.h>
 #include <stdio.h>
 #include <setjmp.h>
+#include<libjpeg/jinclude.h>
 #include <libjpeg/jpeglib.h>
 #include <android/bitmap.h>
 #include <libwebp/webp/decode.h>
 #include <libwebp/webp/encode.h>
+
 #include "utils.h"
 #include "image.h"
-
+extern  JBLOCKARRAY get_mem_buffer(jvirt_barray_ptr jbc );
+extern JDIMENSION get_rows_in_mem(jvirt_barray_ptr jbc );
+extern JDIMENSION  get_blocksperrow(jvirt_barray_ptr jbc );
+extern jvirt_barray_ptr  get_next(jvirt_barray_ptr jbc );
 jclass jclass_NullPointerException;
 jclass jclass_RuntimeException;
 
@@ -329,7 +334,7 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_calcCDT(JNIEnv *env, jclass
 
 
     unsigned char *bytes = (*env)->GetDirectBufferAddress(env, hsvBuffer);
-
+   // LOGI("calccdt %d",bytes);
     uint32_t **hist = calloc(totalSegments, sizeof(uint32_t *));
     uint32_t **cdfs = calloc(totalSegments, sizeof(uint32_t *));
     uint32_t *cdfsMin = calloc(totalSegments, sizeof(uint32_t));
@@ -422,8 +427,8 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_calcCDT(JNIEnv *env, jclass
 }
 
 JNIEXPORT int Java_org_telegram_messenger_Utilities_pinBitmap(JNIEnv *env, jclass class, jobject bitmap) {
-    if(bitmap==null)
-        return;
+//    if(bitmap==null)
+//        return;
     unsigned char *pixels;
     return AndroidBitmap_lockPixels(env, bitmap, &pixels) >= 0 ? 1 : 0;
 }
@@ -512,31 +517,38 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jcl
         throwException(env, "AndroidBitmap_getInfo() failed ! error=%d", i);
     }
 }
-
-JNIEXPORT void Java_org_telegram_messenger_Utilities_lsbEmbed(JNIEnv *env, jclass class,
+int rowOffset;
+int blockOffset;
+/**
+ * 嵌入消息长度的最大比特表示.
+ * todo 消息长度可以从传入的bytebuffer得到.
+ */
+static const int MSG_SIZE=4;
+JNIEXPORT int Java_org_telegram_messenger_Utilities_lsbEmbed(JNIEnv *env,jclass  class,
                                                               jobject buffer, jstring key,
                                                               jstring input, jstring output,int len) {
 
     unsigned char *bytes = (*env)->GetDirectBufferAddress(env, buffer);
-    int dataLen = len * 8;
+    LOGI("bytes %s",bytes);
+//    int dataLen = len * 8;
     struct jpeg_decompress_struct srcinfo;
     struct jpeg_compress_struct dstinfo;
-    struct jvirt_barray_ptr *coef_arrays;
+    static  jvirt_barray_ptr *coef_arrays;
     struct jpeg_error_mgr jsrcerr, jdsterr;
-    struct stat ifstats;
+//    struct stat ifstats;
     FILE *input_file;
     FILE *output_file;
     char *infileName = (*env)->GetStringUTFChars(env, input, NULL);
     char *outfileName = (*env)->GetStringUTFChars(env, output, NULL);
-    input_file = fopen(infilename, "r");
+    input_file = fopen(infileName, "rb");
     if (input_file == NULL) {
-        throw Exception("Can't open input file");
-        return (1);
+        throwException(env,"Can't open input file");
+        return (-1);
     }
-    output_file = fopen(outfileName, "w");
+    output_file = fopen(outfileName, "wb");
     if (output_file == NULL) {
-        throw Exception("Can't open output file");
-        return (1);
+        throwException(env,"Can't open output file");
+        return (-1);
     }
 
     srcinfo.err = jpeg_std_error(&jsrcerr);
@@ -546,28 +558,17 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_lsbEmbed(JNIEnv *env, jclas
     jpeg_stdio_src(&srcinfo, input_file);
     jpeg_read_header(&srcinfo, TRUE);
     coef_arrays = jpeg_read_coefficients(&srcinfo);
-    jvirt_barray_ptr temp_src_coef_arrays = *coef_arrays;
-    offset = 0;
-    if (temp_src_coef_arrays && offset < dataLen) {
-        JBLOCKARRAY jbarray = (temp_src_coef_arrays)->mem_buffer;
-        JBLOCKROW jbrow = NULL;
-        for (int i = 0; (offset < dataLen) && i < (temp_src_coef_arrays)->rows_in_mem; i++) {
-            jbrow = *jbarray;
-            for (int j = 0; (offset < dataLen) && j < (temp_src_coef_arrays)->blocksperrow; j++) {
-                for (int k = 1; (offset < dataLen) && k < 64; k++) {
-                    if (((*(jbrow + j))[k] != 0) && ((*(jbrow + j))[k] != 1)) {
-                        int move = offset % 8;
-                        if (!offset && move == 0) {
-                            bytes++;
-                        }
-                        char bits = ((*bytes) >> move) & 0x01;
-                        (*(jbrow + j))[k] = ((((*(jbrow + j))[k]) >> 1) << 1) | bits;
-                    }
-                }
-            }
-            jbarray++;
-        }
-        temp_src_coef_arrays = (temp_src_coef_arrays)->next;
+    rowOffset=0;
+    blockOffset=0;
+    int dataLen=len;
+    LOGI("size of int %d %d",dataLen,sizeof(dataLen));
+    if(writeLsb(coef_arrays,(char*)&dataLen,MSG_SIZE)!=MSG_SIZE){
+        LOGE("write length error");
+        return -1;
+    }
+    if(writeLsb(coef_arrays,bytes,len)!=len){
+        LOGE("write msg error");
+        return -1;
     }
     jpeg_copy_critical_parameters(&srcinfo, &dstinfo);
     dstinfo.optimize_coding = TRUE;
@@ -580,7 +581,151 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_lsbEmbed(JNIEnv *env, jclas
 
     fclose(input_file);
     fclose(output_file);
+    return 0;
+}
+/**
+ * lsb读取嵌入的消息.
+ * buffer：写消息的buffer.
+ * len:读取消息的最大长度
+ *  分配的内存是否需要手动释放
+ */
+JNIEXPORT jobject Java_org_telegram_messenger_Utilities_lsbExtract(JNIEnv *env, jclass class,
+                                                              jstring key, jstring input) {
+    struct jpeg_decompress_struct srcinfo;
+    static  jvirt_barray_ptr *coef_arrays;
+    struct jpeg_error_mgr jsrcerr, jdsterr;
+//    struct stat ifstats;
+    FILE *input_file;
+    char *infileName = (*env)->GetStringUTFChars(env, input, NULL);
+    input_file = fopen(infileName, "rb");
+    if (input_file == NULL) {
+        throwException(env,"Can't open input file");
+        return (-1);
+    }
 
+    srcinfo.err = jpeg_std_error(&jsrcerr);
+    jpeg_create_decompress(&srcinfo);
+    jpeg_stdio_src(&srcinfo, input_file);
+    jpeg_read_header(&srcinfo, TRUE);
+    coef_arrays = jpeg_read_coefficients(&srcinfo);
+    rowOffset=0;
+    blockOffset=0;
+    int dataLen;
+    int ret=readLsb(coef_arrays,&dataLen,MSG_SIZE);
+    if(ret!=MSG_SIZE||dataLen<0){
+        return -1;
+    }
+    LOGI("extract dataLen %d",dataLen);
+    char *data=(char*)malloc(dataLen+1);
+    *(data+dataLen)=0;
+    if(readLsb(coef_arrays,data,dataLen)<dataLen){
+        free(data);
+        return -1;
+    }
+    jpeg_finish_decompress(&srcinfo);
+    jpeg_destroy_decompress(&srcinfo);
+    fclose(input_file);
+
+    jobject retO=(*env)->NewDirectByteBuffer( env,data,dataLen);
+    LOGI("extract %s",data);
+    return retO;
+}
+
+/**
+ * 返回实际写入的字节数
+ *
+ */
+int writeLsb( jvirt_barray_ptr* coef_arrays,char* data,int count){
+    char *dataEnd=data+count;
+    LOGI("data: %d end %d",data,dataEnd);
+    jvirt_barray_ptr temp_src_coef_arrays= *coef_arrays;
+    //indicate 写入到了字节中的哪一个比特.
+    int bitCount=0;
+    int ibeg=rowOffset;
+    int jbeg=blockOffset;
+    int i,j;
+    while (temp_src_coef_arrays ) {
+//        JBLOCKARRAY jbarray = (temp_src_coef_arrays)->mem_buffer;
+        JBLOCKARRAY jbarray=get_mem_buffer(temp_src_coef_arrays);
+        JBLOCKROW jbrow = NULL;
+        for ( i = ibeg; ( data<dataEnd) && i < get_rows_in_mem(temp_src_coef_arrays); i++) {
+            jbrow = *(jbarray);
+            for ( j = jbeg; ( data<dataEnd) && j < get_blocksperrow(temp_src_coef_arrays); j++) {
+                //跳过了直流分量和0系数.
+                for (int k = 1; ( data<dataEnd) && k < 64; k++) {
+                    if (((*(jbrow + j))[k] != 0) && ((*(jbrow + j))[k] != 1)) {
+                      int   move = bitCount % 8;
+                        if ( bitCount&&(bitCount%8) == 0) {
+                            data++;
+                        }
+                        char bits = ((*data) >> (7-move)) & 0x01;
+                        (*(jbrow + j))[k] = ((((*(jbrow + j))[k]) >> 1) << 1) | bits;
+
+                        bitCount++;
+
+                    }
+                }
+            }
+            jbarray++;
+            jbeg=0;
+        }
+        ibeg=0;
+        if(data>=dataEnd)
+            break;
+        temp_src_coef_arrays = get_next(temp_src_coef_arrays);
+    }
+    rowOffset=i;
+    blockOffset=j;
+    *coef_arrays=temp_src_coef_arrays;
+    LOGI("bitcount %d",bitCount);
+    return ((bitCount-1)/8);
+}
+/**
+ * 返回实际读出的字节数
+ *data:写数据的缓冲区.
+ */
+int readLsb( jvirt_barray_ptr* coef_arrays,char* data,int count){
+    char *dataEnd=data+count;
+    jvirt_barray_ptr temp_src_coef_arrays= *coef_arrays;
+    //indicate 写入到了字节中的哪一个比特.
+    int bitCount=0;
+    int ibeg=rowOffset;
+    int jbeg=blockOffset;
+    int i,j;
+    while (temp_src_coef_arrays) {
+//        JBLOCKARRAY jbarray = (temp_src_coef_arrays)->mem_buffer;
+        JBLOCKARRAY jbarray=get_mem_buffer(temp_src_coef_arrays);
+        JBLOCKROW jbrow = NULL;
+        for ( i = ibeg; ( data<dataEnd) && i < get_rows_in_mem(temp_src_coef_arrays); i++) {
+            jbrow = *(jbarray);
+            for ( j = jbeg; ( data<dataEnd) && j < get_blocksperrow(temp_src_coef_arrays); j++) {
+                //跳过了直流分量和0系数.
+                for (int k = 1; ( data<dataEnd) && k < 64; k++) {
+                    if (((*(jbrow + j))[k] != 0) && ((*(jbrow + j))[k] != 1)) {
+                        int move = bitCount % 8;
+                        char bits = ((*(jbrow + j))[k])& 0x01;
+                        if (bitCount && move == 0) {
+                            data++;
+                        }
+                        *data=(*data)<<1;
+                        *data=(*data)|bits;
+
+                        bitCount++;
+                    }
+                }
+            }
+            jbarray++;
+            jbeg=0;
+        }
+        ibeg=0;
+        if(data>=dataEnd)
+            break;
+        temp_src_coef_arrays = get_next(temp_src_coef_arrays);
+    }
+    rowOffset=i;
+    blockOffset=j;
+    *coef_arrays=temp_src_coef_arrays;
+    return ((bitCount-1)/8);
 }
 JNIEXPORT jobject Java_org_telegram_messenger_Utilities_loadWebpImage(JNIEnv *env, jclass class, jobject buffer, int len, jobject options) {
     if (!buffer) {
diff --git a/TMessagesProj/jni/libjpeg/jmemmgr.c b/TMessagesProj/jni/libjpeg/jmemmgr.c
index d801b322d..1e9886c37 100755
--- a/TMessagesProj/jni/libjpeg/jmemmgr.c
+++ b/TMessagesProj/jni/libjpeg/jmemmgr.c
@@ -1116,3 +1116,23 @@ jinit_memory_mgr (j_common_ptr cinfo)
 #endif
 
 }
+/**
+ * although it is terrible to edit the libjpeg source here,adding this methods facilitate
+ * the read and write of the coefficient of the jpeg.
+ * weiyao 2015-10-05
+ */
+JBLOCKARRAY get_mem_buffer(jvirt_barray_ptr jbc ){
+  return jbc->mem_buffer;
+
+}
+JDIMENSION get_rows_in_mem(jvirt_barray_ptr jbc ){
+  return jbc->rows_in_mem;
+
+}
+JDIMENSION  get_blocksperrow(jvirt_barray_ptr jbc ){
+  return jbc->blocksperrow;
+}
+jvirt_barray_ptr  get_next(jvirt_barray_ptr jbc ){
+  return jbc->next;
+}
+
diff --git a/TMessagesProj/libs/armeabi-v7a/gdb.setup b/TMessagesProj/libs/armeabi-v7a/gdb.setup
new file mode 100644
index 000000000..1a69ab9b6
--- /dev/null
+++ b/TMessagesProj/libs/armeabi-v7a/gdb.setup
@@ -0,0 +1,2 @@
+set solib-search-path D:/code/android/telegram/Telegram/TMessagesProj//obj/local/armeabi-v7a
+directory D:/Users/yao/AppData/Local/Android/ndk/platforms/android-9/arch-arm/usr/include D:/Users/yao/AppData/Local/Android/ndk/sources/android/cpufeatures D:/code/android/telegram/Telegram/TMessagesProj//jni D:/Users/yao/AppData/Local/Android/ndk/sources/cxx-stl/system ./opus/include ./opus/silk ./opus/silk/fixed ./opus/celt ./opus/opusfile ./libyuv/include D:/Users/yao/AppData/Local/Android/ndk/sources/cxx-stl/system/include ./libwebp/src
diff --git a/TMessagesProj/libs/armeabi-v7a/gdbserver b/TMessagesProj/libs/armeabi-v7a/gdbserver
new file mode 100644
index 000000000..527530b2e
Binary files /dev/null and b/TMessagesProj/libs/armeabi-v7a/gdbserver differ
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so
index b73f401f3..f8a221eb6 100755
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so differ
diff --git a/TMessagesProj/libs/armeabi/gdb.setup b/TMessagesProj/libs/armeabi/gdb.setup
new file mode 100644
index 000000000..b93a056fe
--- /dev/null
+++ b/TMessagesProj/libs/armeabi/gdb.setup
@@ -0,0 +1,2 @@
+set solib-search-path D:/code/android/telegram/Telegram/TMessagesProj//obj/local/armeabi
+directory D:/Users/yao/AppData/Local/Android/ndk/platforms/android-9/arch-arm/usr/include D:/Users/yao/AppData/Local/Android/ndk/sources/android/cpufeatures D:/code/android/telegram/Telegram/TMessagesProj//jni D:/Users/yao/AppData/Local/Android/ndk/sources/cxx-stl/system ./opus/include ./opus/silk ./opus/silk/fixed ./opus/celt ./opus/opusfile ./libyuv/include D:/Users/yao/AppData/Local/Android/ndk/sources/cxx-stl/system/include ./libwebp/src
diff --git a/TMessagesProj/libs/armeabi/gdbserver b/TMessagesProj/libs/armeabi/gdbserver
new file mode 100644
index 000000000..527530b2e
Binary files /dev/null and b/TMessagesProj/libs/armeabi/gdbserver differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.8.so b/TMessagesProj/libs/armeabi/libtmessages.8.so
index b720a57b4..4a09261ca 100755
Binary files a/TMessagesProj/libs/armeabi/libtmessages.8.so and b/TMessagesProj/libs/armeabi/libtmessages.8.so differ
diff --git a/TMessagesProj/libs/x86/gdb.setup b/TMessagesProj/libs/x86/gdb.setup
new file mode 100644
index 000000000..8f8356bf6
--- /dev/null
+++ b/TMessagesProj/libs/x86/gdb.setup
@@ -0,0 +1,2 @@
+set solib-search-path D:/code/android/telegram/Telegram/TMessagesProj//obj/local/x86
+directory D:/Users/yao/AppData/Local/Android/ndk/platforms/android-9/arch-x86/usr/include D:/Users/yao/AppData/Local/Android/ndk/sources/android/cpufeatures D:/code/android/telegram/Telegram/TMessagesProj//jni D:/Users/yao/AppData/Local/Android/ndk/sources/cxx-stl/system ./opus/include ./opus/silk ./opus/silk/fixed ./opus/celt ./opus/opusfile ./libyuv/include D:/Users/yao/AppData/Local/Android/ndk/sources/cxx-stl/system/include ./libwebp/src
diff --git a/TMessagesProj/libs/x86/gdbserver b/TMessagesProj/libs/x86/gdbserver
new file mode 100644
index 000000000..82dca9d0d
Binary files /dev/null and b/TMessagesProj/libs/x86/gdbserver differ
diff --git a/TMessagesProj/libs/x86/libtmessages.8.so b/TMessagesProj/libs/x86/libtmessages.8.so
index 0b3e8df01..f6386f538 100755
Binary files a/TMessagesProj/libs/x86/libtmessages.8.so and b/TMessagesProj/libs/x86/libtmessages.8.so differ
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index dd3edb66c..cdb67bcd5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -90,8 +90,8 @@
         }
     }
 
-
-    public native static void lsbEmbed(ByteBuffer buffer,String key,String input,String output,int len);
+    public native static ByteBuffer lsbExtract(String key,String input);
+    public native static int lsbEmbed(ByteBuffer buffer,String key,String input,String output,int len);
     public native static long doPQNative(long _what);
 
     public native static void loadBitmap(String path, Bitmap bitmap, int scale, int width, int height, int stride);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index e5521fa1b..a377db071 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -110,8 +110,10 @@
 import java.io.File;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.Random;
 import java.util.concurrent.Semaphore;
 
 public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate,
@@ -773,12 +775,17 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     if (id == clear_history) {
                         String inputPath="/storage/emulated/0/DCIM/Camera/xifan.jpg";
                         String outputPath="/storage/emulated/0/DCIM/Camera/stego.jpg";
-                        ByteBuffer bb=ByteBuffer.wrap("hello".getBytes());
-                        int size=bb.position();
-                        Utilities.lsbEmbed(bb,new String("fads"),inputPath,outputPath,size);
-//                        Utilities.lsbEmbed();
-//                        Utilities.pinBitmap(null);
-                     //   builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
+                        Random random=new Random();
+                        byte[] msg=new byte[5*1024];
+                        random.nextBytes(msg);
+//                        String msg="hello";
+                        ByteBuffer bb=ByteBuffer.allocateDirect(msg.length);
+                        bb.put(msg);
+                        Utilities.lsbEmbed(bb, new String("fads"), inputPath, outputPath, bb.capacity());
+                          ByteBuffer ret=Utilities.lsbExtract("", outputPath);
+                        byte[] extract=new byte[ret.capacity()];
+                        ret.get(extract);
+                        System.out.println("result " + Arrays.equals(extract,msg));
                     } else {
                         if (isChat) {
                             builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
diff --git a/gradle.properties b/gradle.properties
index 01520498d..6cf67be50 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,4 @@
 RELEASE_STORE_PASSWORD=password
 RELEASE_KEY_ALIAS=alias
-RELEASE_KEY_PASSWORD=password
\ No newline at end of file
+RELEASE_KEY_PASSWORD=password
+android.useDeprecatedNdk=true
\ No newline at end of file
