diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 01b18bb9a..1ee854d63 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -19,6 +19,7 @@
 import android.util.Base64;
 import android.util.SparseArray;
 
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -29,10 +30,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.ChatActivity;
-import org.telegram.ui.ProfileActivity;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -3977,11 +3975,11 @@ public static void openByUserName(String username, final BaseFragment fragment,
         if (user != null) {
             Bundle args = new Bundle();
             args.putInt("user_id", user.id);
-            if (type == 0) {
-                fragment.presentFragment(new ProfileActivity(args));
-            } else {
-                fragment.presentFragment(new ChatActivity(args));
-            }
+//            if (type == 0) {
+//                fragment.presentFragment(new ProfileActivity(args));
+//            } else {
+//                fragment.presentFragment(new ChatActivity(args));
+//            }
         } else {
             if (fragment.getParentActivity() == null) {
                 return;
@@ -4015,13 +4013,13 @@ public void run() {
                                 MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
                                 Bundle args = new Bundle();
                                 args.putInt("user_id", user.id);
-                                if (fragment != null) {
-                                    if (type == 0) {
-                                        fragment.presentFragment(new ProfileActivity(args));
-                                    } else if (type == 1) {
-                                        fragment.presentFragment(new ChatActivity(args));
-                                    }
-                                }
+//                                if (fragment != null) {
+//                                    if (type == 0) {
+//                                        fragment.presentFragment(new ProfileActivity(args));
+//                                    } else if (type == 1) {
+//                                        fragment.presentFragment(new ChatActivity(args));
+//                                    }
+//                                }
                             }
                         }
                     });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
deleted file mode 100644
index 1c1699d13..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ /dev/null
@@ -1,299 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextInfoCell;
-import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class BlockedUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate {
-
-    private ListView listView;
-    private ListAdapter listViewAdapter;
-    private FrameLayout progressView;
-    private TextView emptyTextView;
-    private int selectedUserId;
-
-    private final static int block_user = 1;
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
-        MessagesController.getInstance().getBlockedUsers(false);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == block_user) {
-                    Bundle args = new Bundle();
-                    args.putBoolean("onlyUsers", true);
-                    args.putBoolean("destroyAfterSelect", true);
-                    args.putBoolean("returnAsResult", true);
-                    ContactsActivity fragment = new ContactsActivity(args);
-                    fragment.setDelegate(BlockedUsersActivity.this);
-                    presentFragment(fragment);
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.addItem(block_user, R.drawable.plus);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        emptyTextView = new TextView(context);
-        emptyTextView.setTextColor(0xff808080);
-        emptyTextView.setTextSize(20);
-        emptyTextView.setGravity(Gravity.CENTER);
-        emptyTextView.setVisibility(View.INVISIBLE);
-        emptyTextView.setText(LocaleController.getString("NoBlocked", R.string.NoBlocked));
-        frameLayout.addView(emptyTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
-        emptyTextView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        progressView = new FrameLayout(context);
-        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-        ProgressBar progressBar = new ProgressBar(context);
-        progressView.addView(progressBar, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
-
-        listView = new ListView(context);
-        listView.setEmptyView(emptyTextView);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setAdapter(listViewAdapter = new ListAdapter(context));
-        if (Build.VERSION.SDK_INT >= 11) {
-            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
-        }
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                if (i < MessagesController.getInstance().blockedUsers.size()) {
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", MessagesController.getInstance().blockedUsers.get(i));
-                    presentFragment(new ProfileActivity(args));
-                }
-            }
-        });
-
-        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                if (i < 0 || i >= MessagesController.getInstance().blockedUsers.size() || getParentActivity() == null) {
-                    return true;
-                }
-                selectedUserId = MessagesController.getInstance().blockedUsers.get(i);
-
-                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                CharSequence[] items = new CharSequence[]{LocaleController.getString("Unblock", R.string.Unblock)};
-                builder.setItems(items, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        if (i == 0) {
-                            MessagesController.getInstance().unblockUser(selectedUserId);
-                        }
-                    }
-                });
-                showDialog(builder.create());
-
-                return true;
-            }
-        });
-
-        if (MessagesController.getInstance().loadingBlockedUsers) {
-            progressView.setVisibility(View.VISIBLE);
-            emptyTextView.setVisibility(View.GONE);
-            listView.setEmptyView(null);
-        } else {
-            progressView.setVisibility(View.GONE);
-            listView.setEmptyView(emptyTextView);
-        }
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                updateVisibleRows(mask);
-            }
-        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
-            if (progressView != null) {
-                progressView.setVisibility(View.GONE);
-            }
-            if (listView != null && listView.getEmptyView() == null) {
-                listView.setEmptyView(emptyTextView);
-            }
-            if (listViewAdapter != null) {
-                listViewAdapter.notifyDataSetChanged();
-            }
-        }
-    }
-
-    private void updateVisibleRows(int mask) {
-        if (listView == null) {
-            return;
-        }
-        int count = listView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View child = listView.getChildAt(a);
-            if (child instanceof UserCell) {
-                ((UserCell) child).update(mask);
-            }
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listViewAdapter != null) {
-            listViewAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public void didSelectContact(final TLRPC.User user, String param) {
-        if (user == null) {
-            return;
-        }
-        MessagesController.getInstance().blockUser(user.id);
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i != MessagesController.getInstance().blockedUsers.size();
-        }
-
-        @Override
-        public int getCount() {
-            if (MessagesController.getInstance().blockedUsers.isEmpty()) {
-                return 0;
-            }
-            return MessagesController.getInstance().blockedUsers.size() + 1;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new UserCell(mContext, 1);
-                }
-                TLRPC.User user = MessagesController.getInstance().getUser(MessagesController.getInstance().blockedUsers.get(i));
-                if (user != null) {
-                    ((UserCell) view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextInfoCell(mContext);
-                    ((TextInfoCell) view).setText(LocaleController.getString("UnblockText", R.string.UnblockText));
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if(i == MessagesController.getInstance().blockedUsers.size()) {
-                return 1;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return MessagesController.getInstance().blockedUsers.isEmpty();
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
deleted file mode 100644
index 8eb72c7e1..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.text.InputType;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class ChangeChatNameActivity extends BaseFragment {
-
-    private EditText firstNameField;
-    private View headerLabelView;
-    private int chat_id;
-    private View doneButton;
-
-    private final static int done_button = 1;
-
-    public ChangeChatNameActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        chat_id = getArguments().getInt("chat_id", 0);
-        return true;
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    if (firstNameField.getText().length() != 0) {
-                        saveName();
-                        finishFragment();
-                    }
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        TLRPC.Chat currentChat = MessagesController.getInstance().getChat(chat_id);
-
-        LinearLayout linearLayout = new LinearLayout(context);
-        fragmentView = linearLayout;
-        fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-        ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
-        fragmentView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        firstNameField = new EditText(context);
-        firstNameField.setText(currentChat.title);
-        firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        firstNameField.setHintTextColor(0xff979797);
-        firstNameField.setTextColor(0xff212121);
-        firstNameField.setMaxLines(3);
-        firstNameField.setPadding(0, 0, 0, 0);
-        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-        firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
-        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        AndroidUtilities.clearCursorDrawable(firstNameField);
-        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
-                    doneButton.performClick();
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        linearLayout.addView(firstNameField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 24, 24, 24, 0));
-
-        if (chat_id > 0) {
-            firstNameField.setHint(LocaleController.getString("GroupName", R.string.GroupName));
-        } else {
-            firstNameField.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
-        }
-        firstNameField.setSelection(firstNameField.length());
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        boolean animations = preferences.getBoolean("view_animations", true);
-        if (!animations) {
-            firstNameField.requestFocus();
-            AndroidUtilities.showKeyboard(firstNameField);
-        }
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        firstNameField.requestFocus();
-        AndroidUtilities.showKeyboard(firstNameField);
-    }
-
-    private void saveName() {
-        MessagesController.getInstance().changeChatTitle(chat_id, firstNameField.getText().toString());
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
deleted file mode 100644
index 5c0088490..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ /dev/null
@@ -1,193 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.text.InputType;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class ChangeNameActivity extends BaseFragment {
-
-    private EditText firstNameField;
-    private EditText lastNameField;
-    private View headerLabelView;
-    private View doneButton;
-
-    private final static int done_button = 1;
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    if (firstNameField.getText().length() != 0) {
-                        saveName();
-                        finishFragment();
-                    }
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-        if (user == null) {
-            user = UserConfig.getCurrentUser();
-        }
-
-        LinearLayout linearLayout = new LinearLayout(context);
-        fragmentView = linearLayout;
-        fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-        ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
-        fragmentView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        firstNameField = new EditText(context);
-        firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        firstNameField.setHintTextColor(0xff979797);
-        firstNameField.setTextColor(0xff212121);
-        firstNameField.setMaxLines(1);
-        firstNameField.setLines(1);
-        firstNameField.setSingleLine(true);
-        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-        firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-        firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
-        AndroidUtilities.clearCursorDrawable(firstNameField);
-        linearLayout.addView(firstNameField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 24, 24, 24, 0));
-        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_NEXT) {
-                    lastNameField.requestFocus();
-                    lastNameField.setSelection(lastNameField.length());
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        lastNameField = new EditText(context);
-        lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        lastNameField.setHintTextColor(0xff979797);
-        lastNameField.setTextColor(0xff212121);
-        lastNameField.setMaxLines(1);
-        lastNameField.setLines(1);
-        lastNameField.setSingleLine(true);
-        lastNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-        lastNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
-        lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
-        AndroidUtilities.clearCursorDrawable(lastNameField);
-        linearLayout.addView(lastNameField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 24, 16, 24, 0));
-        lastNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_DONE) {
-                    doneButton.performClick();
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        if (user != null) {
-            firstNameField.setText(user.first_name);
-            firstNameField.setSelection(firstNameField.length());
-            lastNameField.setText(user.last_name);
-        }
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        boolean animations = preferences.getBoolean("view_animations", true);
-        if (!animations) {
-            firstNameField.requestFocus();
-            AndroidUtilities.showKeyboard(firstNameField);
-        }
-    }
-
-    private void saveName() {
-        TLRPC.User currentUser = UserConfig.getCurrentUser();
-        if (currentUser == null || lastNameField.getText() == null || firstNameField.getText() == null) {
-            return;
-        }
-        String newFirst = firstNameField.getText().toString();
-        String newLast = lastNameField.getText().toString();
-        if (currentUser.first_name != null && currentUser.first_name.equals(newFirst) && currentUser.last_name != null && currentUser.last_name.equals(newLast)) {
-            return;
-        }
-        TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
-        currentUser.first_name = req.first_name = newFirst;
-        currentUser.last_name = req.last_name = newLast;
-        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-        if (user != null) {
-            user.first_name = req.first_name;
-            user.last_name = req.last_name;
-        }
-        UserConfig.saveConfig(true);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-
-            }
-        });
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        firstNameField.requestFocus();
-        AndroidUtilities.showKeyboard(firstNameField);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
deleted file mode 100644
index 1887a03b0..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
+++ /dev/null
@@ -1,1065 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.annotation.SuppressLint;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.os.Bundle;
-import android.telephony.TelephonyManager;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.InputType;
-import android.text.SpannableStringBuilder;
-import android.text.Spanned;
-import android.text.TextUtils;
-import android.text.TextWatcher;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.WindowManager;
-import android.view.animation.AccelerateDecelerateInterpolator;
-import android.view.inputmethod.EditorInfo;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.SlideView;
-import org.telegram.ui.Components.TypefaceSpan;
-
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class ChangePhoneActivity extends BaseFragment {
-
-    private int currentViewNum = 0;
-    private SlideView[] views = new SlideView[2];
-    private ProgressDialog progressDialog;
-
-    private final static int done_button = 1;
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        for (SlideView v : views) {
-            if (v != null) {
-                v.onDestroyActivity();
-            }
-        }
-        if (progressDialog != null) {
-            try {
-                progressDialog.dismiss();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            progressDialog = null;
-        }
-        if (!AndroidUtilities.isTablet() && getParentActivity() != null) {
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
-        }
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == done_button) {
-                    views[currentViewNum].onNextPressed();
-                } else if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        fragmentView = new ScrollView(context);
-        ScrollView scrollView = (ScrollView) fragmentView;
-        scrollView.setFillViewport(true);
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        scrollView.addView(frameLayout);
-        ScrollView.LayoutParams layoutParams = (ScrollView.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.width = ScrollView.LayoutParams.MATCH_PARENT;
-        layoutParams.height = ScrollView.LayoutParams.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        frameLayout.setLayoutParams(layoutParams);
-
-        views[0] = new PhoneView(context);
-        views[0].setVisibility(View.VISIBLE);
-        frameLayout.addView(views[0], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0));
-
-        views[1] = new LoginActivitySmsView(context);
-        views[1].setVisibility(View.GONE);
-        frameLayout.addView(views[1], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0));
-
-        try {
-            if (views[0] == null || views[1] == null) {
-                FrameLayout parent = (FrameLayout) ((ScrollView) fragmentView).getChildAt(0);
-                for (int a = 0; a < views.length; a++) {
-                    if (views[a] == null) {
-                        views[a] = (SlideView) parent.getChildAt(a);
-                    }
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        actionBar.setTitle(views[0].getHeaderName());
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (!AndroidUtilities.isTablet()) {
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
-        }
-    }
-
-    @Override
-    public boolean onBackPressed() {
-        if (currentViewNum == 0) {
-            for (SlideView v : views) {
-                if (v != null) {
-                    v.onDestroyActivity();
-                }
-            }
-            return true;
-        } else if (currentViewNum == 1) {
-            setPage(0, true, null, true);
-        }
-        return false;
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        super.onOpenAnimationEnd();
-        views[currentViewNum].onShow();
-    }
-
-    public void needShowAlert(final String text) {
-        if (text == null || getParentActivity() == null) {
-            return;
-        }
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        builder.setMessage(text);
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        showDialog(builder.create());
-    }
-
-    public void needShowProgress() {
-        if (getParentActivity() == null || getParentActivity().isFinishing() || progressDialog != null) {
-            return;
-        }
-        progressDialog = new ProgressDialog(getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-        progressDialog.show();
-    }
-
-    public void needHideProgress() {
-        if (progressDialog == null) {
-            return;
-        }
-        try {
-            progressDialog.dismiss();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        progressDialog = null;
-    }
-
-    public void setPage(int page, boolean animated, Bundle params, boolean back) {
-        if(android.os.Build.VERSION.SDK_INT > 10) {
-            final SlideView outView = views[currentViewNum];
-            final SlideView newView = views[page];
-            currentViewNum = page;
-
-            newView.setParams(params);
-            actionBar.setTitle(newView.getHeaderName());
-            newView.onShow();
-            ViewProxy.setX(newView, back ? -AndroidUtilities.displaySize.x : AndroidUtilities.displaySize.x);
-
-            AnimatorSetProxy animatorSet = new AnimatorSetProxy();
-            animatorSet.setInterpolator(new AccelerateDecelerateInterpolator());
-            animatorSet.setDuration(300);
-            animatorSet.playTogether(
-                    ObjectAnimatorProxy.ofFloat(outView, "translationX", back ? AndroidUtilities.displaySize.x : -AndroidUtilities.displaySize.x),
-                    ObjectAnimatorProxy.ofFloat(newView, "translationX", 0));
-            animatorSet.addListener(new AnimatorListenerAdapterProxy() {
-                @Override
-                public void onAnimationStart(Object animation) {
-                    newView.setVisibility(View.VISIBLE);
-                }
-
-                @SuppressLint("NewApi")
-                @Override
-                public void onAnimationEnd(Object animation) {
-                    outView.setVisibility(View.GONE);
-                    outView.setX(0);
-                }
-            });
-            animatorSet.start();
-        } else {
-            views[currentViewNum].setVisibility(View.GONE);
-            currentViewNum = page;
-            views[page].setParams(params);
-            views[page].setVisibility(View.VISIBLE);
-            actionBar.setTitle(views[page].getHeaderName());
-            views[page].onShow();
-        }
-    }
-
-    public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
-
-        private EditText codeField;
-        private EditText phoneField;
-        private TextView countryButton;
-
-        private int countryState = 0;
-
-        private ArrayList<String> countriesArray = new ArrayList<>();
-        private HashMap<String, String> countriesMap = new HashMap<>();
-        private HashMap<String, String> codesMap = new HashMap<>();
-
-        private boolean ignoreSelection = false;
-        private boolean ignoreOnTextChange = false;
-        private boolean ignoreOnPhoneChange = false;
-        private boolean nextPressed = false;
-
-        public PhoneView(Context context) {
-            super(context);
-
-            setOrientation(VERTICAL);
-
-            countryButton = new TextView(context);
-            countryButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            countryButton.setPadding(AndroidUtilities.dp(12), AndroidUtilities.dp(10), AndroidUtilities.dp(12), 0);
-            countryButton.setTextColor(0xff212121);
-            countryButton.setMaxLines(1);
-            countryButton.setSingleLine(true);
-            countryButton.setEllipsize(TextUtils.TruncateAt.END);
-            countryButton.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
-            countryButton.setBackgroundResource(R.drawable.spinner_states);
-            addView(countryButton);
-            LayoutParams layoutParams = (LayoutParams) countryButton.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.leftMargin = AndroidUtilities.dp(20);
-            layoutParams.rightMargin = AndroidUtilities.dp(20);
-            layoutParams.bottomMargin = AndroidUtilities.dp(14);
-            countryButton.setLayoutParams(layoutParams);
-            countryButton.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    CountrySelectActivity fragment = new CountrySelectActivity();
-                    fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
-                        @Override
-                        public void didSelectCountry(String name) {
-                            selectCountry(name);
-                            phoneField.requestFocus();
-                        }
-                    });
-                    presentFragment(fragment);
-                }
-            });
-
-            View view = new View(context);
-            view.setPadding(AndroidUtilities.dp(12), 0, AndroidUtilities.dp(12), 0);
-            view.setBackgroundColor(0xffdbdbdb);
-            addView(view);
-            layoutParams = (LayoutParams) view.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = 1;
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            layoutParams.topMargin = AndroidUtilities.dp(-17.5f);
-            view.setLayoutParams(layoutParams);
-
-            LinearLayout linearLayout = new LinearLayout(context);
-            linearLayout.setOrientation(HORIZONTAL);
-            addView(linearLayout);
-            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            linearLayout.setLayoutParams(layoutParams);
-
-            TextView textView = new TextView(context);
-            textView.setText("+");
-            textView.setTextColor(0xff212121);
-            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            linearLayout.addView(textView);
-            layoutParams = (LayoutParams) textView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            textView.setLayoutParams(layoutParams);
-
-            codeField = new EditText(context);
-            codeField.setInputType(InputType.TYPE_CLASS_PHONE);
-            codeField.setTextColor(0xff212121);
-            AndroidUtilities.clearCursorDrawable(codeField);
-            codeField.setPadding(AndroidUtilities.dp(10), 0, 0, 0);
-            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            codeField.setMaxLines(1);
-            codeField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
-            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            InputFilter[] inputFilters = new InputFilter[1];
-            inputFilters[0] = new InputFilter.LengthFilter(4);
-            codeField.setFilters(inputFilters);
-            linearLayout.addView(codeField);
-            layoutParams = (LayoutParams) codeField.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(55);
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.rightMargin = AndroidUtilities.dp(16);
-            layoutParams.leftMargin = AndroidUtilities.dp(-9);
-            codeField.setLayoutParams(layoutParams);
-            codeField.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                }
-
-                @Override
-                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                }
-
-                @Override
-                public void afterTextChanged(Editable editable) {
-                    if (ignoreOnTextChange) {
-                        ignoreOnTextChange = false;
-                        return;
-                    }
-                    ignoreOnTextChange = true;
-                    String text = PhoneFormat.stripExceptNumbers(codeField.getText().toString());
-                    codeField.setText(text);
-                    if (text.length() == 0) {
-                        countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                        countryState = 1;
-                    } else {
-                        String country = codesMap.get(text);
-                        if (country != null) {
-                            int index = countriesArray.indexOf(country);
-                            if (index != -1) {
-                                ignoreSelection = true;
-                                countryButton.setText(countriesArray.get(index));
-
-                                updatePhoneField();
-                                countryState = 0;
-                            } else {
-                                countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                                countryState = 2;
-                            }
-                        } else {
-                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                            countryState = 2;
-                        }
-                        codeField.setSelection(codeField.getText().length());
-                    }
-                }
-            });
-            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        phoneField.requestFocus();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            phoneField = new EditText(context);
-            phoneField.setInputType(InputType.TYPE_CLASS_PHONE);
-            phoneField.setTextColor(0xff212121);
-            phoneField.setHintTextColor(0xff979797);
-            phoneField.setPadding(0, 0, 0, 0);
-            AndroidUtilities.clearCursorDrawable(phoneField);
-            phoneField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            phoneField.setMaxLines(1);
-            phoneField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
-            phoneField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            linearLayout.addView(phoneField);
-            layoutParams = (LayoutParams) phoneField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            phoneField.setLayoutParams(layoutParams);
-            phoneField.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-                    if (ignoreOnPhoneChange) {
-                        return;
-                    }
-                    if (count == 1 && after == 0 && s.length() > 1) {
-                        String phoneChars = "0123456789";
-                        String str = s.toString();
-                        String substr = str.substring(start, start + 1);
-                        if (!phoneChars.contains(substr)) {
-                            ignoreOnPhoneChange = true;
-                            StringBuilder builder = new StringBuilder(str);
-                            int toDelete = 0;
-                            for (int a = start; a >= 0; a--) {
-                                substr = str.substring(a, a + 1);
-                                if(phoneChars.contains(substr)) {
-                                    break;
-                                }
-                                toDelete++;
-                            }
-                            builder.delete(Math.max(0, start - toDelete), start + 1);
-                            str = builder.toString();
-                            if (PhoneFormat.strip(str).length() == 0) {
-                                phoneField.setText("");
-                            } else {
-                                phoneField.setText(str);
-                                updatePhoneField();
-                            }
-                            ignoreOnPhoneChange = false;
-                        }
-                    }
-                }
-
-                @Override
-                public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-                }
-
-                @Override
-                public void afterTextChanged(Editable s) {
-                    if (ignoreOnPhoneChange) {
-                        return;
-                    }
-                    updatePhoneField();
-                }
-            });
-            phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        onNextPressed();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            textView = new TextView(context);
-            textView.setText(LocaleController.getString("StartText", R.string.StartText));
-            textView.setTextColor(0xff757575);
-            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            textView.setGravity(Gravity.LEFT);
-            textView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(textView);
-            layoutParams = (LayoutParams) textView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            layoutParams.topMargin = AndroidUtilities.dp(28);
-            layoutParams.bottomMargin = AndroidUtilities.dp(10);
-            layoutParams.gravity = Gravity.LEFT;
-            textView.setLayoutParams(layoutParams);
-
-            HashMap<String, String> languageMap = new HashMap<>();
-            try {
-                BufferedReader reader = new BufferedReader(new InputStreamReader(getResources().getAssets().open("countries.txt")));
-                String line;
-                while ((line = reader.readLine()) != null) {
-                    String[] args = line.split(";");
-                    countriesArray.add(0, args[2]);
-                    countriesMap.put(args[2], args[0]);
-                    codesMap.put(args[0], args[2]);
-                    languageMap.put(args[1], args[2]);
-                }
-                reader.close();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            Collections.sort(countriesArray, new Comparator<String>() {
-                @Override
-                public int compare(String lhs, String rhs) {
-                    return lhs.compareTo(rhs);
-                }
-            });
-
-            String country = null;
-
-            try {
-                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
-                if (telephonyManager != null) {
-                    country = telephonyManager.getSimCountryIso().toUpperCase();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            if (country != null) {
-                String countryName = languageMap.get(country);
-                if (countryName != null) {
-                    int index = countriesArray.indexOf(countryName);
-                    if (index != -1) {
-                        codeField.setText(countriesMap.get(countryName));
-                        countryState = 0;
-                    }
-                }
-            }
-            if (codeField.length() == 0) {
-                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                countryState = 1;
-            }
-
-            if (codeField.length() != 0) {
-                AndroidUtilities.showKeyboard(phoneField);
-                phoneField.requestFocus();
-            } else {
-                AndroidUtilities.showKeyboard(codeField);
-                codeField.requestFocus();
-            }
-        }
-
-        public void selectCountry(String name) {
-            int index = countriesArray.indexOf(name);
-            if (index != -1) {
-                ignoreOnTextChange = true;
-                codeField.setText(countriesMap.get(name));
-                countryButton.setText(name);
-                countryState = 0;
-            }
-        }
-
-        private void updatePhoneField() {
-            ignoreOnPhoneChange = true;
-            try {
-                String codeText = codeField.getText().toString();
-                String phone = PhoneFormat.getInstance().format("+" + codeText + phoneField.getText().toString());
-                int idx = phone.indexOf(" ");
-                if (idx != -1) {
-                    String resultCode = PhoneFormat.stripExceptNumbers(phone.substring(0, idx));
-                    if (!codeText.equals(resultCode)) {
-                        phone = PhoneFormat.getInstance().format(phoneField.getText().toString()).trim();
-                        phoneField.setText(phone);
-                        int len = phoneField.length();
-                        phoneField.setSelection(phoneField.length());
-                    } else {
-                        phoneField.setText(phone.substring(idx).trim());
-                        int len = phoneField.length();
-                        phoneField.setSelection(phoneField.length());
-                    }
-                } else {
-                    phoneField.setSelection(phoneField.length());
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            ignoreOnPhoneChange = false;
-        }
-
-        @Override
-        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-            if (ignoreSelection) {
-                ignoreSelection = false;
-                return;
-            }
-            ignoreOnTextChange = true;
-            String str = countriesArray.get(i);
-            codeField.setText(countriesMap.get(str));
-            updatePhoneField();
-        }
-
-        @Override
-        public void onNothingSelected(AdapterView<?> adapterView) {
-
-        }
-
-        @Override
-        public void onNextPressed() {
-            if (nextPressed) {
-                return;
-            }
-            if (countryState == 1) {
-                needShowAlert(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                return;
-            } else if (countryState == 2 && !BuildVars.DEBUG_VERSION) {
-                needShowAlert(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                return;
-            }
-            if (codeField.length() == 0) {
-                needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                return;
-            }
-            TLRPC.TL_account_sendChangePhoneCode req = new TLRPC.TL_account_sendChangePhoneCode();
-            String phone = PhoneFormat.stripExceptNumbers("" + codeField.getText() + phoneField.getText());
-            req.phone_number = phone;
-            final String phone2 = "+" + codeField.getText() + " " + phoneField.getText();
-
-            final Bundle params = new Bundle();
-            params.putString("phone", phone2);
-            params.putString("phoneFormated", phone);
-            nextPressed = true;
-            needShowProgress();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            nextPressed = false;
-                            if (error == null) {
-                                TLRPC.TL_account_sentChangePhoneCode res = (TLRPC.TL_account_sentChangePhoneCode)response;
-                                params.putString("phoneHash", res.phone_code_hash);
-                                params.putInt("calltime", res.send_call_timeout * 1000);
-                                setPage(1, true, params, false);
-                            } else {
-                                if (error.text != null) {
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                    } else if (error.text.startsWith("PHONE_NUMBER_OCCUPIED")) {
-                                        needShowAlert(LocaleController.formatString("ChangePhoneNumberOccupied", R.string.ChangePhoneNumberOccupied, phone2));
-                                    } else {
-                                        needShowAlert(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
-                                    }
-                                }
-                            }
-                            needHideProgress();
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-        }
-
-        @Override
-        public void onShow() {
-            super.onShow();
-            if (phoneField != null) {
-                AndroidUtilities.showKeyboard(phoneField);
-                phoneField.setSelection(phoneField.length());
-            }
-        }
-
-        @Override
-        public String getHeaderName() {
-            return LocaleController.getString("ChangePhoneNewNumber", R.string.ChangePhoneNewNumber);
-        }
-    }
-
-    public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
-
-        private String phoneHash;
-        private String requestPhone;
-        private EditText codeField;
-        private TextView confirmTextView;
-        private TextView timeText;
-        private Bundle currentParams;
-
-        private Timer timeTimer;
-        private Timer codeTimer;
-        private final Object timerSync = new Object();
-        private volatile int time = 60000;
-        private volatile int codeTime = 15000;
-        private double lastCurrentTime;
-        private double lastCodeTime;
-        private boolean waitingForSms = false;
-        private boolean nextPressed = false;
-        private String lastError = "";
-
-        public LoginActivitySmsView(Context context) {
-            super(context);
-
-            setOrientation(VERTICAL);
-
-            confirmTextView = new TextView(context);
-            confirmTextView.setTextColor(0xff757575);
-            confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            confirmTextView.setGravity(Gravity.LEFT);
-            confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(confirmTextView);
-            LayoutParams layoutParams = (LayoutParams) confirmTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.LEFT;
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            confirmTextView.setLayoutParams(layoutParams);
-
-            codeField = new EditText(context);
-            codeField.setTextColor(0xff212121);
-            codeField.setHint(LocaleController.getString("Code", R.string.Code));
-            AndroidUtilities.clearCursorDrawable(codeField);
-            codeField.setHintTextColor(0xff979797);
-            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            codeField.setInputType(InputType.TYPE_CLASS_PHONE);
-            codeField.setMaxLines(1);
-            codeField.setPadding(0, 0, 0, 0);
-            addView(codeField);
-            layoutParams = (LayoutParams) codeField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            codeField.setLayoutParams(layoutParams);
-            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        onNextPressed();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            timeText = new TextView(context);
-            timeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            timeText.setTextColor(0xff757575);
-            timeText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            timeText.setGravity(Gravity.LEFT);
-            addView(timeText);
-            layoutParams = (LayoutParams) timeText.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.LEFT;
-            layoutParams.topMargin = AndroidUtilities.dp(30);
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            timeText.setLayoutParams(layoutParams);
-
-            LinearLayout linearLayout = new LinearLayout(context);
-            linearLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER_VERTICAL);
-            addView(linearLayout);
-            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            linearLayout.setLayoutParams(layoutParams);
-
-            TextView wrongNumber = new TextView(context);
-            wrongNumber.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
-            wrongNumber.setTextColor(0xff4d83b3);
-            wrongNumber.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            wrongNumber.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            wrongNumber.setPadding(0, AndroidUtilities.dp(24), 0, 0);
-            linearLayout.addView(wrongNumber);
-            layoutParams = (LayoutParams) wrongNumber.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
-            layoutParams.bottomMargin = AndroidUtilities.dp(10);
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            wrongNumber.setLayoutParams(layoutParams);
-            wrongNumber.setText(LocaleController.getString("WrongNumber", R.string.WrongNumber));
-            wrongNumber.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    onBackPressed();
-                    setPage(0, true, null, true);
-                }
-            });
-        }
-
-        @Override
-        public String getHeaderName() {
-            return LocaleController.getString("YourCode", R.string.YourCode);
-        }
-
-        @Override
-        public void setParams(Bundle params) {
-            if (params == null) {
-                return;
-            }
-            codeField.setText("");
-            AndroidUtilities.setWaitingForSms(true);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
-            currentParams = params;
-            waitingForSms = true;
-            String phone = params.getString("phone");
-            requestPhone = params.getString("phoneFormated");
-            phoneHash = params.getString("phoneHash");
-            time = params.getInt("calltime");
-
-            if (phone == null) {
-                return;
-            }
-
-            String number = PhoneFormat.getInstance().format(phone);
-            String str = String.format(Locale.US, LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " %s", number);
-            try {
-                SpannableStringBuilder stringBuilder = new SpannableStringBuilder(str);
-                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-                int idx = str.indexOf(number);
-                stringBuilder.setSpan(span, idx, idx + number.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
-                confirmTextView.setText(stringBuilder);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                confirmTextView.setText(str);
-            }
-
-            AndroidUtilities.showKeyboard(codeField);
-            codeField.requestFocus();
-
-            destroyTimer();
-            destroyCodeTimer();
-            timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
-            lastCurrentTime = System.currentTimeMillis();
-
-            createTimer();
-        }
-
-        private void createCodeTimer() {
-            if (codeTimer != null) {
-                return;
-            }
-            codeTime = 15000;
-            codeTimer = new Timer();
-            lastCodeTime = System.currentTimeMillis();
-            codeTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    double currentTime = System.currentTimeMillis();
-                    double diff = currentTime - lastCodeTime;
-                    codeTime -= diff;
-                    lastCodeTime = currentTime;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (codeTime <= 1000) {
-                                destroyCodeTimer();
-                            }
-                        }
-                    });
-                }
-            }, 0, 1000);
-        }
-
-        private void destroyCodeTimer() {
-            try {
-                synchronized(timerSync) {
-                    if (codeTimer != null) {
-                        codeTimer.cancel();
-                        codeTimer = null;
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        private void createTimer() {
-            if (timeTimer != null) {
-                return;
-            }
-            timeTimer = new Timer();
-            timeTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    double currentTime = System.currentTimeMillis();
-                    double diff = currentTime - lastCurrentTime;
-                    time -= diff;
-                    lastCurrentTime = currentTime;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (time >= 1000) {
-                                int minutes = time / 1000 / 60;
-                                int seconds = time / 1000 - minutes * 60;
-                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
-                            } else {
-                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
-                                destroyTimer();
-                                createCodeTimer();
-                                TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
-                                req.phone_number = requestPhone;
-                                req.phone_code_hash = phoneHash;
-                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                    @Override
-                                    public void run(TLObject response, final TLRPC.TL_error error) {
-                                        if (error != null && error.text != null) {
-                                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                                @Override
-                                                public void run() {
-                                                    lastError = error.text;
-                                                }
-                                            });
-                                        }
-                                    }
-                                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-                            }
-                        }
-                    });
-                }
-            }, 0, 1000);
-        }
-
-        private void destroyTimer() {
-            try {
-                synchronized(timerSync) {
-                    if (timeTimer != null) {
-                        timeTimer.cancel();
-                        timeTimer = null;
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        @Override
-        public void onNextPressed() {
-            if (nextPressed) {
-                return;
-            }
-            nextPressed = true;
-            waitingForSms = false;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            final TLRPC.TL_account_changePhone req = new TLRPC.TL_account_changePhone();
-            req.phone_number = requestPhone;
-            req.phone_code = codeField.getText().toString();
-            req.phone_code_hash = phoneHash;
-            destroyTimer();
-            needShowProgress();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            needHideProgress();
-                            nextPressed = false;
-                            if (error == null) {
-                                TLRPC.User user = (TLRPC.User) response;
-                                destroyTimer();
-                                destroyCodeTimer();
-                                UserConfig.setCurrentUser(user);
-                                UserConfig.saveConfig(true);
-                                ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                MessagesController.getInstance().putUser(user, false);
-                                finishFragment();
-                            } else {
-                                lastError = error.text;
-                                createTimer();
-                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                    needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                    needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                } else {
-                                    needShowAlert(error.text);
-                                }
-                            }
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-        }
-
-        @Override
-        public void onBackPressed() {
-            destroyTimer();
-            destroyCodeTimer();
-            currentParams = null;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            waitingForSms = false;
-        }
-
-        @Override
-        public void onDestroyActivity() {
-            super.onDestroyActivity();
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            destroyTimer();
-            destroyCodeTimer();
-            waitingForSms = false;
-        }
-
-        @Override
-        public void onShow() {
-            super.onShow();
-            if (codeField != null) {
-                codeField.requestFocus();
-                codeField.setSelection(codeField.length());
-            }
-        }
-
-        @Override
-        public void didReceivedNotification(int id, final Object... args) {
-            if (id == NotificationCenter.didReceiveSmsCode) {
-                if (!waitingForSms) {
-                    return;
-                }
-                if (codeField != null) {
-                    codeField.setText("" + args[0]);
-                    onNextPressed();
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
deleted file mode 100644
index e4077ef3b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
+++ /dev/null
@@ -1,157 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class ChangePhoneHelpActivity extends BaseFragment {
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-
-        TLRPC.User user = UserConfig.getCurrentUser();
-        String value;
-        if (user != null && user.phone != null && user.phone.length() != 0) {
-            value = PhoneFormat.getInstance().format("+" + user.phone);
-        } else {
-            value = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
-        }
-
-        actionBar.setTitle(value);
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        fragmentView = new RelativeLayout(context);
-        fragmentView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        RelativeLayout relativeLayout = (RelativeLayout) fragmentView;
-
-        ScrollView scrollView = new ScrollView(context);
-        relativeLayout.addView(scrollView);
-        RelativeLayout.LayoutParams layoutParams3 = (RelativeLayout.LayoutParams) scrollView.getLayoutParams();
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);
-        scrollView.setLayoutParams(layoutParams3);
-
-        LinearLayout linearLayout = new LinearLayout(context);
-        linearLayout.setOrientation(LinearLayout.VERTICAL);
-        linearLayout.setPadding(0, AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20));
-        scrollView.addView(linearLayout);
-        ScrollView.LayoutParams layoutParams = (ScrollView.LayoutParams) linearLayout.getLayoutParams();
-        layoutParams.width = ScrollView.LayoutParams.MATCH_PARENT;
-        layoutParams.height = ScrollView.LayoutParams.WRAP_CONTENT;
-        linearLayout.setLayoutParams(layoutParams);
-
-        ImageView imageView = new ImageView(context);
-        imageView.setImageResource(R.drawable.phone_change);
-        linearLayout.addView(imageView);
-        LinearLayout.LayoutParams layoutParams2 = (LinearLayout.LayoutParams) imageView.getLayoutParams();
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.gravity = Gravity.CENTER_HORIZONTAL;
-        imageView.setLayoutParams(layoutParams2);
-
-        TextView textView = new TextView(context);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setGravity(Gravity.CENTER_HORIZONTAL);
-        textView.setTextColor(0xff212121);
-
-        try {
-            textView.setText(AndroidUtilities.replaceTags(LocaleController.getString("PhoneNumberHelp", R.string.PhoneNumberHelp)));
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            textView.setText(LocaleController.getString("PhoneNumberHelp", R.string.PhoneNumberHelp));
-        }
-        linearLayout.addView(textView);
-        layoutParams2 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.gravity = Gravity.CENTER_HORIZONTAL;
-        layoutParams2.leftMargin = AndroidUtilities.dp(20);
-        layoutParams2.rightMargin = AndroidUtilities.dp(20);
-        layoutParams2.topMargin = AndroidUtilities.dp(56);
-        textView.setLayoutParams(layoutParams2);
-
-        textView = new TextView(context);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        textView.setGravity(Gravity.CENTER_HORIZONTAL);
-        textView.setTextColor(0xff4d83b3);
-        textView.setText(LocaleController.getString("PhoneNumberChange", R.string.PhoneNumberChange));
-        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setPadding(0, AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10));
-        linearLayout.addView(textView);
-        layoutParams2 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.gravity = Gravity.CENTER_HORIZONTAL;
-        layoutParams2.leftMargin = AndroidUtilities.dp(20);
-        layoutParams2.rightMargin = AndroidUtilities.dp(20);
-        layoutParams2.topMargin = AndroidUtilities.dp(46);
-        textView.setLayoutParams(layoutParams2);
-
-        textView.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (getParentActivity() == null) {
-                    return;
-                }
-                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                builder.setMessage(LocaleController.getString("PhoneNumberAlert", R.string.PhoneNumberAlert));
-                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        presentFragment(new ChangePhoneActivity(), true);
-                    }
-                });
-                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                showDialog(builder.create());
-            }
-        });
-
-        return fragmentView;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
deleted file mode 100644
index 0e40b1a41..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
+++ /dev/null
@@ -1,418 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.SharedPreferences;
-import android.text.Editable;
-import android.text.InputType;
-import android.text.TextWatcher;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-
-public class ChangeUsernameActivity extends BaseFragment {
-
-    private EditText firstNameField;
-    private View doneButton;
-    private TextView checkTextView;
-    private long checkReqId = 0;
-    private String lastCheckName = null;
-    private Runnable checkRunnable = null;
-    private boolean lastNameAvailable = false;
-
-    private final static int done_button = 1;
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("Username", R.string.Username));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    saveName();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-        if (user == null) {
-            user = UserConfig.getCurrentUser();
-        }
-
-        fragmentView = new LinearLayout(context);
-        fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-        ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
-        fragmentView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        firstNameField = new EditText(context);
-        firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        firstNameField.setHintTextColor(0xff979797);
-        firstNameField.setTextColor(0xff212121);
-        firstNameField.setMaxLines(1);
-        firstNameField.setLines(1);
-        firstNameField.setPadding(0, 0, 0, 0);
-        firstNameField.setSingleLine(true);
-        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-        firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
-        firstNameField.setHint(LocaleController.getString("UsernamePlaceholder", R.string.UsernamePlaceholder));
-        AndroidUtilities.clearCursorDrawable(firstNameField);
-        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
-                    doneButton.performClick();
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        ((LinearLayout) fragmentView).addView(firstNameField);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) firstNameField.getLayoutParams();
-        layoutParams.topMargin = AndroidUtilities.dp(24);
-        layoutParams.height = AndroidUtilities.dp(36);
-        layoutParams.leftMargin = AndroidUtilities.dp(24);
-        layoutParams.rightMargin = AndroidUtilities.dp(24);
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        firstNameField.setLayoutParams(layoutParams);
-
-        if (user != null && user.username != null && user.username.length() > 0) {
-            firstNameField.setText(user.username);
-            firstNameField.setSelection(firstNameField.length());
-        }
-
-        checkTextView = new TextView(context);
-        checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-        checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        ((LinearLayout) fragmentView).addView(checkTextView);
-        layoutParams = (LinearLayout.LayoutParams) checkTextView.getLayoutParams();
-        layoutParams.topMargin = AndroidUtilities.dp(12);
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-        layoutParams.leftMargin = AndroidUtilities.dp(24);
-        layoutParams.rightMargin = AndroidUtilities.dp(24);
-        checkTextView.setLayoutParams(layoutParams);
-
-        TextView helpTextView = new TextView(context);
-        helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-        helpTextView.setTextColor(0xff6d6d72);
-        helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        helpTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("UsernameHelp", R.string.UsernameHelp)));
-        ((LinearLayout) fragmentView).addView(helpTextView);
-        layoutParams = (LinearLayout.LayoutParams) helpTextView.getLayoutParams();
-        layoutParams.topMargin = AndroidUtilities.dp(10);
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-        layoutParams.leftMargin = AndroidUtilities.dp(24);
-        layoutParams.rightMargin = AndroidUtilities.dp(24);
-        helpTextView.setLayoutParams(layoutParams);
-
-        firstNameField.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-            }
-
-            @Override
-            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-                checkUserName(firstNameField.getText().toString(), false);
-            }
-
-            @Override
-            public void afterTextChanged(Editable editable) {
-
-            }
-        });
-
-        checkTextView.setVisibility(View.GONE);
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        boolean animations = preferences.getBoolean("view_animations", true);
-        if (!animations) {
-            firstNameField.requestFocus();
-            AndroidUtilities.showKeyboard(firstNameField);
-        }
-    }
-
-    private void showErrorAlert(String error) {
-        if (getParentActivity() == null) {
-            return;
-        }
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        switch (error) {
-            case "USERNAME_INVALID":
-                builder.setMessage(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-                break;
-            case "USERNAME_OCCUPIED":
-                builder.setMessage(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
-                break;
-            case "USERNAMES_UNAVAILABLE":
-                builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
-                break;
-            default:
-                builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
-                break;
-        }
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        showDialog(builder.create());
-    }
-
-    private boolean checkUserName(final String name, boolean alert) {
-        if (name != null && name.length() > 0) {
-            checkTextView.setVisibility(View.VISIBLE);
-        } else {
-            checkTextView.setVisibility(View.GONE);
-        }
-        if (alert && name.length() == 0) {
-            return true;
-        }
-        if (checkRunnable != null) {
-            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
-            checkRunnable = null;
-            lastCheckName = null;
-            if (checkReqId != 0) {
-                ConnectionsManager.getInstance().cancelRpc(checkReqId, true);
-            }
-        }
-        lastNameAvailable = false;
-        if (name != null) {
-            if (name.startsWith("_") || name.endsWith("_")) {
-                checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-                checkTextView.setTextColor(0xffcf3030);
-                return false;
-            }
-            for (int a = 0; a < name.length(); a++) {
-                char ch = name.charAt(a);
-                if (a == 0 && ch >= '0' && ch <= '9') {
-                    if (alert) {
-                        showErrorAlert(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
-                    } else {
-                        checkTextView.setText(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
-                        checkTextView.setTextColor(0xffcf3030);
-                    }
-                    return false;
-                }
-                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
-                    if (alert) {
-                        showErrorAlert(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-                    } else {
-                        checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-                        checkTextView.setTextColor(0xffcf3030);
-                    }
-                    return false;
-                }
-            }
-        }
-        if (name == null || name.length() < 5) {
-            if (alert) {
-                showErrorAlert(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
-            } else {
-                checkTextView.setText(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
-                checkTextView.setTextColor(0xffcf3030);
-            }
-            return false;
-        }
-        if (name.length() > 32) {
-            if (alert) {
-                showErrorAlert(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
-            } else {
-                checkTextView.setText(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
-                checkTextView.setTextColor(0xffcf3030);
-            }
-            return false;
-        }
-
-        if (!alert) {
-            String currentName = UserConfig.getCurrentUser().username;
-            if (currentName == null) {
-                currentName = "";
-            }
-            if (name.equals(currentName)) {
-                checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
-                checkTextView.setTextColor(0xff26972c);
-                return true;
-            }
-
-            checkTextView.setText(LocaleController.getString("UsernameChecking", R.string.UsernameChecking));
-            checkTextView.setTextColor(0xff6d6d72);
-            lastCheckName = name;
-            checkRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    TLRPC.TL_account_checkUsername req = new TLRPC.TL_account_checkUsername();
-                    req.username = name;
-                    checkReqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                        @Override
-                        public void run(final TLObject response, final TLRPC.TL_error error) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    checkReqId = 0;
-                                    if (lastCheckName != null && lastCheckName.equals(name)) {
-                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
-                                            checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
-                                            checkTextView.setTextColor(0xff26972c);
-                                            lastNameAvailable = true;
-                                        } else {
-                                            checkTextView.setText(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
-                                            checkTextView.setTextColor(0xffcf3030);
-                                            lastNameAvailable = false;
-                                        }
-                                    }
-                                }
-                            });
-                        }
-                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-                }
-            };
-            AndroidUtilities.runOnUIThread(checkRunnable, 300);
-        }
-        return true;
-    }
-
-    private void saveName() {
-        if (!checkUserName(firstNameField.getText().toString(), true)) {
-            return;
-        }
-        TLRPC.User user = UserConfig.getCurrentUser();
-        if (getParentActivity() == null || user == null) {
-            return;
-        }
-        String currentName = user.username;
-        if (currentName == null) {
-            currentName = "";
-        }
-        String newName = firstNameField.getText().toString();
-        if (currentName.equals(newName)) {
-            finishFragment();
-            return;
-        }
-
-        final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-
-        TLRPC.TL_account_updateUsername req = new TLRPC.TL_account_updateUsername();
-        req.username = newName;
-
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
-        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, final TLRPC.TL_error error) {
-                if (error == null) {
-                    final TLRPC.User user = (TLRPC.User)response;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                progressDialog.dismiss();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            ArrayList<TLRPC.User> users = new ArrayList<>();
-                            users.add(user);
-                            MessagesController.getInstance().putUsers(users, false);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                            UserConfig.saveConfig(true);
-                            finishFragment();
-                        }
-                    });
-                } else {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                progressDialog.dismiss();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            showErrorAlert(error.text);
-                        }
-                    });
-                }
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-
-        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                try {
-                    dialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        progressDialog.show();
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        firstNameField.requestFocus();
-        AndroidUtilities.showKeyboard(firstNameField);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 133143686..cb7ccca4e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -664,234 +664,6 @@ public void didSelectLocation(TLRPC.MessageMedia location) {
                         }
                     });
                     presentFragment(fragment);
-                } else if (id == attach_document) {
-                    DocumentSelectActivity fragment = new DocumentSelectActivity();
-                    fragment.setDelegate(new DocumentSelectActivity.DocumentSelectActivityDelegate() {
-                        @Override
-                        public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
-                            activity.finishFragment();
-                            SendMessagesHelper.prepareSendingDocuments(files, files, null, null, dialog_id, replyingMessageObject);
-                            showReplyPanel(false, null, null, null, false, true);
-                        }
-
-                        @Override
-                        public void startDocumentSelectActivity() {
-                            try {
-                                Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
-                                photoPickerIntent.setType("*/*");
-                                startActivityForResult(photoPickerIntent, 21);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    });
-                    presentFragment(fragment);
-                } else if (id == copy) {
-                    String str = "";
-                    ArrayList<Integer> ids = new ArrayList<>(selectedMessagesCanCopyIds.keySet());
-                    if (currentEncryptedChat == null) {
-                        Collections.sort(ids);
-                    } else {
-                        Collections.sort(ids, Collections.reverseOrder());
-                    }
-                    for (Integer messageId : ids) {
-                        MessageObject messageObject = selectedMessagesCanCopyIds.get(messageId);
-                        if (str.length() != 0) {
-                            str += "\n";
-                        }
-                        if (messageObject.messageOwner.message != null) {
-                            str += messageObject.messageOwner.message;
-                        } else {
-                            str += messageObject.messageText;
-                        }
-                    }
-                    if (str.length() != 0) {
-                        if (Build.VERSION.SDK_INT < 11) {
-                            android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                            clipboard.setText(str);
-                        } else {
-                            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                            android.content.ClipData clip = android.content.ClipData.newPlainText("label", str);
-                            clipboard.setPrimaryClip(clip);
-                        }
-                    }
-                    selectedMessagesIds.clear();
-                    selectedMessagesCanCopyIds.clear();
-                    actionBar.hideActionMode();
-                    updateVisibleRows();
-                } else if (id == delete) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", selectedMessagesIds.size())));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            ArrayList<Integer> ids = new ArrayList<>(selectedMessagesIds.keySet());
-                            ArrayList<Long> random_ids = null;
-                            if (currentEncryptedChat != null) {
-                                random_ids = new ArrayList<>();
-                                for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds.entrySet()) {
-                                    MessageObject msg = entry.getValue();
-                                    if (msg.messageOwner.random_id != 0 && msg.type != 10) {
-                                        random_ids.add(msg.messageOwner.random_id);
-                                    }
-                                }
-                            }
-                            MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
-                            actionBar.hideActionMode();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (id == forward) {
-                    Bundle args = new Bundle();
-                    args.putBoolean("onlySelect", true);
-                    args.putBoolean("serverOnly", true);
-                    MessagesActivity fragment = new MessagesActivity(args);
-                    fragment.setDelegate(ChatActivity.this);
-                    presentFragment(fragment);
-                } else if (id == chat_enc_timer) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    showDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat).create());
-                } else if (id == clear_history || id == delete_chat) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    final boolean isChat = (int) dialog_id < 0 && (int) (dialog_id >> 32) != 1;
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    if (id == clear_history) {
-                        builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
-                    } else {
-                        if (isChat) {
-                            builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
-                        } else {
-                            builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
-                        }
-                    }
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (id != clear_history) {
-                                if (isChat) {
-                                    if (currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
-                                        MessagesController.getInstance().deleteDialog(dialog_id, 0, false);
-                                    } else {
-                                        MessagesController.getInstance().deleteUserFromChat((int) -dialog_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
-                                    }
-                                } else {
-                                    MessagesController.getInstance().deleteDialog(dialog_id, 0, false);
-                                }
-                                finishFragment();
-                            } else {
-                                MessagesController.getInstance().deleteDialog(dialog_id, 0, true);
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (id == share_contact) {
-                    if (currentUser == null || getParentActivity() == null) {
-                        return;
-                    }
-                    if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                        Bundle args = new Bundle();
-                        args.putInt("user_id", currentUser.id);
-                        args.putBoolean("addContact", true);
-                        presentFragment(new ContactAddActivity(args));
-                    } else {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id, replyingMessageObject);
-                                moveScrollToLastMessage();
-                                showReplyPanel(false, null, null, null, false, true);
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
-                    }
-                } else if (id == mute) {
-                    boolean muted = MessagesController.getInstance().isDialogMuted(dialog_id);
-                    if (!muted) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("Notifications", R.string.Notifications));
-                        CharSequence[] items = new CharSequence[]{
-                                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Hours", 1)),
-                                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Hours", 8)),
-                                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Days", 2)),
-                                LocaleController.getString("MuteDisable", R.string.MuteDisable)
-                        };
-                        builder.setItems(items, new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialogInterface, int i) {
-                                        int untilTime = ConnectionsManager.getInstance().getCurrentTime();
-                                        if (i == 0) {
-                                            untilTime += 60 * 60;
-                                        } else if (i == 1) {
-                                            untilTime += 60 * 60 * 8;
-                                        } else if (i == 2) {
-                                            untilTime += 60 * 60 * 48;
-                                        } else if (i == 3) {
-                                            untilTime = Integer.MAX_VALUE;
-                                        }
-
-                                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                        SharedPreferences.Editor editor = preferences.edit();
-                                        long flags;
-                                        if (i == 3) {
-                                            editor.putInt("notify2_" + dialog_id, 2);
-                                            flags = 1;
-                                        } else {
-                                            editor.putInt("notify2_" + dialog_id, 3);
-                                            editor.putInt("notifyuntil_" + dialog_id, untilTime);
-                                            flags = ((long) untilTime << 32) | 1;
-                                        }
-                                        MessagesStorage.getInstance().setDialogFlags(dialog_id, flags);
-                                        editor.commit();
-                                        TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(dialog_id);
-                                        if (dialog != null) {
-                                            dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
-                                            dialog.notify_settings.mute_until = untilTime;
-                                        }
-                                        NotificationsController.updateServerNotificationsSettings(dialog_id);
-                                    }
-                                }
-                        );
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
-                    } else {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        editor.putInt("notify2_" + dialog_id, 0);
-                        MessagesStorage.getInstance().setDialogFlags(dialog_id, 0);
-                        editor.commit();
-                        TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(dialog_id);
-                        if (dialog != null) {
-                            dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
-                        }
-                        NotificationsController.updateServerNotificationsSettings(dialog_id);
-                    }
-                } else if (id == reply) {
-                    if (selectedMessagesIds.size() == 1) {
-                        ArrayList<Integer> ids = new ArrayList<>(selectedMessagesIds.keySet());
-                        MessageObject messageObject = messagesDict.get(ids.get(0));
-                        if (messageObject != null && messageObject.messageOwner.id > 0) {
-                            showReplyPanel(true, messageObject, null, null, false, true);
-                        }
-                    }
-                    selectedMessagesIds.clear();
-                    selectedMessagesCanCopyIds.clear();
-                    actionBar.hideActionMode();
-                    updateVisibleRows();
                 }
             }
         });
@@ -900,25 +672,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
         avatarContainer.setBackgroundResource(R.drawable.bar_selector);
         avatarContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
         actionBar.addView(avatarContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 56, 0, 40, 0));
-        avatarContainer.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (currentUser != null) {
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", currentUser.id);
-                    if (currentEncryptedChat != null) {
-                        args.putLong("dialog_id", dialog_id);
-                    }
-                    presentFragment(new ProfileActivity(args));
-                } else if (currentChat != null) {
-                    Bundle args = new Bundle();
-                    args.putInt("chat_id", currentChat.id);
-                    ProfileActivity fragment = new ProfileActivity(args);
-                    fragment.setChatInfo(info);
-                    presentFragment(fragment);
-                }
-            }
-        });
 
         if (currentChat != null) {
             int count = currentChat.participants_count;
@@ -1318,56 +1071,6 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 updateMessagesVisisblePart();
             }
         });
-        chatListView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (openSecretPhotoRunnable != null || SecretPhotoViewer.getInstance().isVisible()) {
-                    if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL || event.getAction() == MotionEvent.ACTION_POINTER_UP) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                chatListView.setOnItemClickListener(onItemClickListener);
-                            }
-                        }, 150);
-                        if (openSecretPhotoRunnable != null) {
-                            AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
-                            openSecretPhotoRunnable = null;
-                            try {
-                                Toast.makeText(v.getContext(), LocaleController.getString("PhotoTip", R.string.PhotoTip), Toast.LENGTH_SHORT).show();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        } else {
-                            if (SecretPhotoViewer.getInstance().isVisible()) {
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        chatListView.setOnItemLongClickListener(onItemLongClickListener);
-                                        chatListView.setLongClickable(true);
-                                    }
-                                });
-                                SecretPhotoViewer.getInstance().closePhoto();
-                            }
-                        }
-                    } else if (event.getAction() != MotionEvent.ACTION_DOWN) {
-                        if (SecretPhotoViewer.getInstance().isVisible()) {
-                            return true;
-                        } else if (openSecretPhotoRunnable != null) {
-                            if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                                if (Math.hypot(startX - event.getX(), startY - event.getY()) > AndroidUtilities.dp(5)) {
-                                    AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
-                                    openSecretPhotoRunnable = null;
-                                }
-                            } else {
-                                AndroidUtilities.cancelRunOnUIThread(openSecretPhotoRunnable);
-                                openSecretPhotoRunnable = null;
-                            }
-                        }
-                    }
-                }
-                return false;
-            }
-        });
         chatListView.setOnInterceptTouchListener(new RecyclerListView.OnInterceptTouchListener() {
             @Override
             public boolean onInterceptTouchEvent(MotionEvent event) {
@@ -1415,8 +1118,6 @@ public void run() {
                                 if (sendSecretMessageRead(messageObject)) {
                                     cell.invalidate();
                                 }
-                                SecretPhotoViewer.getInstance().setParentActivity(getParentActivity());
-                                SecretPhotoViewer.getInstance().openPhoto(messageObject);
                             }
                         };
                         AndroidUtilities.runOnUIThread(openSecretPhotoRunnable, 100);
@@ -2776,34 +2477,8 @@ private void checkAndUpdateAvatar() {
     }
 
     public boolean openVideoEditor(String videoPath, boolean removeLast, boolean animated) {
-        Bundle args = new Bundle();
-        args.putString("videoPath", videoPath);
-        VideoEditorActivity fragment = new VideoEditorActivity(args);
-        fragment.setDelegate(new VideoEditorActivity.VideoEditorActivityDelegate() {
-            @Override
-            public void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration) {
-                VideoEditedInfo videoEditedInfo = new VideoEditedInfo();
-                videoEditedInfo.startTime = startTime;
-                videoEditedInfo.endTime = endTime;
-                videoEditedInfo.rotationValue = rotationValue;
-                videoEditedInfo.originalWidth = originalWidth;
-                videoEditedInfo.originalHeight = originalHeight;
-                videoEditedInfo.bitrate = bitrate;
-                videoEditedInfo.resultWidth = resultWidth;
-                videoEditedInfo.resultHeight = resultHeight;
-                videoEditedInfo.originalPath = videoPath;
-                SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id, replyingMessageObject);
-                showReplyPanel(false, null, null, null, false, true);
-            }
-        });
 
-        if (parentLayout == null || !fragment.onFragmentCreate()) {
-            SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
-            showReplyPanel(false, null, null, null, false, true);
-            return false;
-        }
-        parentLayout.presentFragment(fragment, removeLast, !animated, true);
-        return true;
+        return false;
     }
 
     private void showAttachmentError() {
@@ -4349,18 +4024,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
             }
             if (locFile != null) {
-                if (LocaleController.getInstance().applyLanguageFile(locFile)) {
-                    presentFragment(new LanguageSelectActivity());
-                } else {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                    showDialog(builder.create());
-                }
+
             }
         } else if (option == 6 || option == 7) {
             String fileName = selectedObject.getFileName();
@@ -4716,11 +4380,6 @@ public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
                             processRowSelect(cell);
                             return;
                         }
-                        if (user != null && user.id != UserConfig.getClientUserId()) {
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", user.id);
-                            presentFragment(new ProfileActivity(args));
-                        }
                     }
 
                     @Override
@@ -4872,7 +4531,6 @@ public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
                             args.putInt("user_id", messageObject.messageOwner.media.user_id);
                             args.putString("phone", messageObject.messageOwner.media.phone_number);
                             args.putBoolean("addContact", true);
-                            presentFragment(new ContactAddActivity(args));
                         }
 
                         @Override
@@ -4930,11 +4588,7 @@ public void didLongPressed(ChatActionCell cell) {
 
                     @Override
                     public void needOpenUserProfile(int uid) {
-                        if (uid != UserConfig.getClientUserId()) {
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", uid);
-                            presentFragment(new ProfileActivity(args));
-                        }
+
                     }
                 });
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
deleted file mode 100644
index c09173f9d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ /dev/null
@@ -1,305 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.text.InputType;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class ContactAddActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private View doneButton;
-    private EditText firstNameField;
-    private EditText lastNameField;
-    private BackupImageView avatarImage;
-    private TextView nameTextView;
-    private TextView onlineTextView;
-
-    private int user_id;
-    private boolean addContact;
-    private String phone = null;
-
-    private final static int done_button = 1;
-
-    public ContactAddActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        user_id = getArguments().getInt("user_id", 0);
-        phone = getArguments().getString("phone");
-        addContact = getArguments().getBoolean("addContact", false);
-        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-        return user != null && super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        if (addContact) {
-            actionBar.setTitle(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
-        } else {
-            actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
-        }
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    if (firstNameField.getText().length() != 0) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                        user.first_name = firstNameField.getText().toString();
-                        user.last_name = lastNameField.getText().toString();
-                        ContactsController.getInstance().addContact(user);
-                        finishFragment();
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
-                    }
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        fragmentView = new ScrollView(context);
-
-        LinearLayout linearLayout = new LinearLayout(context);
-        linearLayout.setOrientation(LinearLayout.VERTICAL);
-        ((ScrollView) fragmentView).addView(linearLayout);
-        ScrollView.LayoutParams layoutParams2 = (ScrollView.LayoutParams) linearLayout.getLayoutParams();
-        layoutParams2.width = ScrollView.LayoutParams.MATCH_PARENT;
-        layoutParams2.height = ScrollView.LayoutParams.WRAP_CONTENT;
-        linearLayout.setLayoutParams(layoutParams2);
-        linearLayout.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        linearLayout.addView(frameLayout);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.topMargin = AndroidUtilities.dp(24);
-        layoutParams.leftMargin = AndroidUtilities.dp(24);
-        layoutParams.rightMargin = AndroidUtilities.dp(24);
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        frameLayout.setLayoutParams(layoutParams);
-
-        avatarImage = new BackupImageView(context);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(30));
-        frameLayout.addView(avatarImage);
-        FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
-        layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP;
-        layoutParams3.width = AndroidUtilities.dp(60);
-        layoutParams3.height = AndroidUtilities.dp(60);
-        avatarImage.setLayoutParams(layoutParams3);
-
-        nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xff212121);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        nameTextView.setLines(1);
-        nameTextView.setMaxLines(1);
-        nameTextView.setSingleLine(true);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        frameLayout.addView(nameTextView);
-        layoutParams3 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
-        layoutParams3.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 80);
-        layoutParams3.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 80 : 0);
-        layoutParams3.topMargin = AndroidUtilities.dp(3);
-        layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP;
-        nameTextView.setLayoutParams(layoutParams3);
-
-        onlineTextView = new TextView(context);
-        onlineTextView.setTextColor(0xff999999);
-        onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        onlineTextView.setLines(1);
-        onlineTextView.setMaxLines(1);
-        onlineTextView.setSingleLine(true);
-        onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
-        onlineTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-        frameLayout.addView(onlineTextView);
-        layoutParams3 = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
-        layoutParams3.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 80);
-        layoutParams3.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 80 : 0);
-        layoutParams3.topMargin = AndroidUtilities.dp(32);
-        layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP;
-        onlineTextView.setLayoutParams(layoutParams3);
-
-        firstNameField = new EditText(context);
-        firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        firstNameField.setHintTextColor(0xff979797);
-        firstNameField.setTextColor(0xff212121);
-        firstNameField.setMaxLines(1);
-        firstNameField.setLines(1);
-        firstNameField.setSingleLine(true);
-        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-        firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-        firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
-        AndroidUtilities.clearCursorDrawable(firstNameField);
-        linearLayout.addView(firstNameField);
-        layoutParams = (LinearLayout.LayoutParams) firstNameField.getLayoutParams();
-        layoutParams.topMargin = AndroidUtilities.dp(24);
-        layoutParams.height = AndroidUtilities.dp(36);
-        layoutParams.leftMargin = AndroidUtilities.dp(24);
-        layoutParams.rightMargin = AndroidUtilities.dp(24);
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        firstNameField.setLayoutParams(layoutParams);
-        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_NEXT) {
-                    lastNameField.requestFocus();
-                    lastNameField.setSelection(lastNameField.length());
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        lastNameField = new EditText(context);
-        lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        lastNameField.setHintTextColor(0xff979797);
-        lastNameField.setTextColor(0xff212121);
-        lastNameField.setMaxLines(1);
-        lastNameField.setLines(1);
-        lastNameField.setSingleLine(true);
-        lastNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-        lastNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
-        lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
-        AndroidUtilities.clearCursorDrawable(lastNameField);
-        linearLayout.addView(lastNameField);
-        layoutParams = (LinearLayout.LayoutParams) lastNameField.getLayoutParams();
-        layoutParams.topMargin = AndroidUtilities.dp(16);
-        layoutParams.height = AndroidUtilities.dp(36);
-        layoutParams.leftMargin = AndroidUtilities.dp(24);
-        layoutParams.rightMargin = AndroidUtilities.dp(24);
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        lastNameField.setLayoutParams(layoutParams);
-        lastNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_DONE) {
-                    doneButton.performClick();
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-        if (user != null) {
-            if (user.phone == null) {
-                if (phone != null) {
-                    user.phone = PhoneFormat.stripExceptNumbers(phone);
-                }
-            }
-            firstNameField.setText(user.first_name);
-            firstNameField.setSelection(firstNameField.length());
-            lastNameField.setText(user.last_name);
-        }
-
-        return fragmentView;
-    }
-
-    private void updateAvatarLayout() {
-        if (nameTextView == null) {
-            return;
-        }
-        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-        if (user == null) {
-            return;
-        }
-        nameTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
-        onlineTextView.setText(LocaleController.formatUserStatus(user));
-
-        TLRPC.FileLocation photo = null;
-        if (user.photo != null) {
-            photo = user.photo.photo_small;
-        }
-        avatarImage.setImage(photo, "50_50", new AvatarDrawable(user));
-    }
-
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                updateAvatarLayout();
-            }
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        updateAvatarLayout();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        boolean animations = preferences.getBoolean("view_animations", true);
-        if (!animations) {
-            firstNameField.requestFocus();
-            AndroidUtilities.showKeyboard(firstNameField);
-        }
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        firstNameField.requestFocus();
-        AndroidUtilities.showKeyboard(firstNameField);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
deleted file mode 100644
index 99a4b4475..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ /dev/null
@@ -1,510 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.text.InputType;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.SecretChatHelper;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.ui.Adapters.BaseSectionsAdapter;
-import org.telegram.ui.Adapters.ContactsAdapter;
-import org.telegram.ui.Adapters.SearchAdapter;
-import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.LetterSectionsListView;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-
-public class ContactsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private BaseSectionsAdapter listViewAdapter;
-    private TextView emptyTextView;
-    private LetterSectionsListView listView;
-    private SearchAdapter searchListViewAdapter;
-
-    private boolean searchWas;
-    private boolean searching;
-    private boolean onlyUsers;
-    private boolean needPhonebook;
-    private boolean destroyAfterSelect;
-    private boolean returnAsResult;
-    private boolean createSecretChat;
-    private boolean creatingChat = false;
-    private int chat_id;
-    private String selectAlertString = null;
-    private HashMap<Integer, TLRPC.User> ignoreUsers;
-    private boolean allowUsernameSearch = true;
-    private ContactsActivityDelegate delegate;
-
-    public interface ContactsActivityDelegate {
-        void didSelectContact(TLRPC.User user, String param);
-    }
-
-    public ContactsActivity(Bundle args) {
-        super(args);
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        if (arguments != null) {
-            onlyUsers = getArguments().getBoolean("onlyUsers", false);
-            destroyAfterSelect = arguments.getBoolean("destroyAfterSelect", false);
-            returnAsResult = arguments.getBoolean("returnAsResult", false);
-            createSecretChat = arguments.getBoolean("createSecretChat", false);
-            selectAlertString = arguments.getString("selectAlertString");
-            allowUsernameSearch = arguments.getBoolean("allowUsernameSearch", true);
-            chat_id = arguments.getInt("chat_id", 0);
-        } else {
-            needPhonebook = true;
-        }
-
-        ContactsController.getInstance().checkInviteText();
-
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        delegate = null;
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-
-        searching = false;
-        searchWas = false;
-
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        if (destroyAfterSelect) {
-            if (returnAsResult) {
-                actionBar.setTitle(LocaleController.getString("SelectContact", R.string.SelectContact));
-            } else {
-                if (createSecretChat) {
-                    actionBar.setTitle(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
-                } else {
-                    actionBar.setTitle(LocaleController.getString("NewMessageTitle", R.string.NewMessageTitle));
-                }
-            }
-        } else {
-            actionBar.setTitle(LocaleController.getString("Contacts", R.string.Contacts));
-        }
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
-            @Override
-            public void onSearchExpand() {
-                searching = true;
-            }
-
-            @Override
-            public boolean onSearchCollapse() {
-                searchListViewAdapter.searchDialogs(null);
-                searching = false;
-                searchWas = false;
-                listView.setAdapter(listViewAdapter);
-                listViewAdapter.notifyDataSetChanged();
-                if (android.os.Build.VERSION.SDK_INT >= 11) {
-                    listView.setFastScrollAlwaysVisible(true);
-                }
-                listView.setFastScrollEnabled(true);
-                listView.setVerticalScrollBarEnabled(false);
-                emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-                return true;
-            }
-
-            @Override
-            public void onTextChanged(EditText editText) {
-                if (searchListViewAdapter == null) {
-                    return;
-                }
-                String text = editText.getText().toString();
-                if (text.length() != 0) {
-                    searchWas = true;
-                    if (listView != null) {
-                        listView.setAdapter(searchListViewAdapter);
-                        searchListViewAdapter.notifyDataSetChanged();
-                        if (android.os.Build.VERSION.SDK_INT >= 11) {
-                            listView.setFastScrollAlwaysVisible(false);
-                        }
-                        listView.setFastScrollEnabled(false);
-                        listView.setVerticalScrollBarEnabled(true);
-                    }
-                    if (emptyTextView != null) {
-                        emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-                    }
-                }
-                searchListViewAdapter.searchDialogs(text);
-            }
-        });
-        item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
-
-        searchListViewAdapter = new SearchAdapter(context, ignoreUsers, allowUsernameSearch);
-        listViewAdapter = new ContactsAdapter(context, onlyUsers, needPhonebook, ignoreUsers, chat_id != 0);
-
-        fragmentView = new FrameLayout(context);
-
-        LinearLayout emptyTextLayout = new LinearLayout(context);
-        emptyTextLayout.setVisibility(View.INVISIBLE);
-        emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
-        ((FrameLayout) fragmentView).addView(emptyTextLayout);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        emptyTextLayout.setLayoutParams(layoutParams);
-        emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        emptyTextView = new TextView(context);
-        emptyTextView.setTextColor(0xff808080);
-        emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        emptyTextView.setGravity(Gravity.CENTER);
-        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-        emptyTextLayout.addView(emptyTextView);
-        LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        layoutParams1.weight = 0.5f;
-        emptyTextView.setLayoutParams(layoutParams1);
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        emptyTextLayout.addView(frameLayout);
-        layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        layoutParams1.weight = 0.5f;
-        frameLayout.setLayoutParams(layoutParams1);
-
-        listView = new LetterSectionsListView(context);
-        listView.setEmptyView(emptyTextLayout);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setFastScrollEnabled(true);
-        listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
-        listView.setAdapter(listViewAdapter);
-        if (Build.VERSION.SDK_INT >= 11) {
-            listView.setFastScrollAlwaysVisible(true);
-            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
-        }
-        ((FrameLayout) fragmentView).addView(listView);
-        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                if (searching && searchWas) {
-                    TLRPC.User user = searchListViewAdapter.getItem(i);
-                    if (user == null) {
-                        return;
-                    }
-                    if (searchListViewAdapter.isGlobalSearch(i)) {
-                        ArrayList<TLRPC.User> users = new ArrayList<>();
-                        users.add(user);
-                        MessagesController.getInstance().putUsers(users, false);
-                        MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                    }
-                    if (returnAsResult) {
-                        if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
-                            return;
-                        }
-                        didSelectResult(user, true, null);
-                    } else {
-                        if (createSecretChat) {
-                            creatingChat = true;
-                            SecretChatHelper.getInstance().startSecretChat(getParentActivity(), user);
-                        } else {
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", user.id);
-                            presentFragment(new ChatActivity(args), true);
-                        }
-                    }
-                } else {
-                    int section = listViewAdapter.getSectionForPosition(i);
-                    int row = listViewAdapter.getPositionInSectionForPosition(i);
-                    if (row < 0 || section < 0) {
-                        return;
-                    }
-                    if ((!onlyUsers || chat_id != 0) && section == 0) {
-                        if (needPhonebook) {
-                            if (row == 0) {
-                                try {
-                                    Intent intent = new Intent(Intent.ACTION_SEND);
-                                    intent.setType("text/plain");
-                                    intent.putExtra(Intent.EXTRA_TEXT, ContactsController.getInstance().getInviteText());
-                                    getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("InviteFriends", R.string.InviteFriends)), 500);
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        } else if (chat_id != 0) {
-                            if (row == 0) {
-                                presentFragment(new GroupInviteActivity(chat_id));
-                            }
-                        } else {
-                            if (row == 0) {
-                                if (!MessagesController.isFeatureEnabled("chat_create", ContactsActivity.this)) {
-                                    return;
-                                }
-                                presentFragment(new GroupCreateActivity(), false);
-                            } else if (row == 1) {
-                                Bundle args = new Bundle();
-                                args.putBoolean("onlyUsers", true);
-                                args.putBoolean("destroyAfterSelect", true);
-                                args.putBoolean("createSecretChat", true);
-                                presentFragment(new ContactsActivity(args), false);
-                            } else if (row == 2) {
-                                if (!MessagesController.isFeatureEnabled("broadcast_create", ContactsActivity.this)) {
-                                    return;
-                                }
-                                Bundle args = new Bundle();
-                                args.putBoolean("broadcast", true);
-                                presentFragment(new GroupCreateActivity(args), false);
-                            }
-                        }
-                    } else {
-                        Object item = listViewAdapter.getItem(section, row);
-
-                        if (item instanceof TLRPC.User) {
-                            TLRPC.User user = (TLRPC.User) item;
-                            if (returnAsResult) {
-                                if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
-                                    return;
-                                }
-                                didSelectResult(user, true, null);
-                            } else {
-                                if (createSecretChat) {
-                                    creatingChat = true;
-                                    SecretChatHelper.getInstance().startSecretChat(getParentActivity(), user);
-                                } else {
-                                    Bundle args = new Bundle();
-                                    args.putInt("user_id", user.id);
-                                    presentFragment(new ChatActivity(args), true);
-                                }
-                            }
-                        } else if (item instanceof ContactsController.Contact) {
-                            ContactsController.Contact contact = (ContactsController.Contact) item;
-                            String usePhone = null;
-                            if (!contact.phones.isEmpty()) {
-                                usePhone = contact.phones.get(0);
-                            }
-                            if (usePhone == null || getParentActivity() == null) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setMessage(LocaleController.getString("InviteUser", R.string.InviteUser));
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            final String arg1 = usePhone;
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    try {
-                                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("sms", arg1, null));
-                                        intent.putExtra("sms_body", LocaleController.getString("InviteText", R.string.InviteText));
-                                        getParentActivity().startActivityForResult(intent, 500);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            });
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                            showDialog(builder.create());
-                        }
-                    }
-                }
-            }
-        });
-
-        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView absListView, int i) {
-                if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
-                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
-                }
-            }
-
-            @Override
-            public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                if (absListView.isFastScrollEnabled()) {
-                    AndroidUtilities.clearDrawableAnimation(absListView);
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    private void didSelectResult(final TLRPC.User user, boolean useAlert, String param) {
-        if (useAlert && selectAlertString != null) {
-            if (getParentActivity() == null) {
-                return;
-            }
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
-            final EditText editText = new EditText(getParentActivity());
-            if (android.os.Build.VERSION.SDK_INT < 11) {
-                editText.setBackgroundResource(android.R.drawable.editbox_background_normal);
-            }
-            editText.setTextSize(18);
-            editText.setText("50");
-            editText.setGravity(Gravity.CENTER);
-            editText.setInputType(InputType.TYPE_CLASS_NUMBER);
-            editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            builder.setView(editText);
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
-                    didSelectResult(user, false, editText.getText().toString());
-                }
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            showDialog(builder.create());
-            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
-            if (layoutParams != null) {
-                if (layoutParams instanceof FrameLayout.LayoutParams) {
-                    ((FrameLayout.LayoutParams)layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
-                }
-                layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
-                editText.setLayoutParams(layoutParams);
-            }
-            editText.setSelection(editText.getText().length());
-        } else {
-            if (delegate != null) {
-                delegate.didSelectContact(user, param);
-                delegate = null;
-            }
-            finishFragment();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listViewAdapter != null) {
-            listViewAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        if (actionBar != null) {
-            actionBar.closeSearchField();
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.contactsDidLoaded) {
-            if (listViewAdapter != null) {
-                listViewAdapter.notifyDataSetChanged();
-            }
-        } else if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                updateVisibleRows(mask);
-            }
-        } else if (id == NotificationCenter.encryptedChatCreated) {
-            if (createSecretChat && creatingChat) {
-                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
-                Bundle args2 = new Bundle();
-                args2.putInt("enc_id", encryptedChat.id);
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                presentFragment(new ChatActivity(args2), true);
-            }
-        } else if (id == NotificationCenter.closeChats) {
-            if (!creatingChat) {
-                removeSelfFromStack();
-            }
-        }
-    }
-
-    private void updateVisibleRows(int mask) {
-        if (listView != null) {
-            int count = listView.getChildCount();
-            for (int a = 0; a < count; a++) {
-                View child = listView.getChildAt(a);
-                if (child instanceof UserCell) {
-                    ((UserCell) child).update(mask);
-                }
-            }
-        }
-    }
-
-    public void setDelegate(ContactsActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public void setIgnoreUsers(HashMap<Integer, TLRPC.User> users) {
-        ignoreUsers = users;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
deleted file mode 100644
index 4bc604486..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ /dev/null
@@ -1,241 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.content.Context;
-import android.os.Build;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.ui.Adapters.CountryAdapter;
-import org.telegram.ui.Adapters.CountryAdapter.Country;
-import org.telegram.ui.Adapters.CountrySearchAdapter;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.LetterSectionsListView;
-
-public class CountrySelectActivity extends BaseFragment {
-
-    public interface CountrySelectActivityDelegate {
-        void didSelectCountry(String name);
-    }
-
-    private LetterSectionsListView listView;
-    private TextView emptyTextView;
-    private CountryAdapter listViewAdapter;
-    private CountrySearchAdapter searchListViewAdapter;
-
-    private boolean searchWas;
-    private boolean searching;
-
-    private CountrySelectActivityDelegate delegate;
-
-    @Override
-    public boolean onFragmentCreate() {
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
-            @Override
-            public void onSearchExpand() {
-                searching = true;
-            }
-
-            @Override
-            public boolean onSearchCollapse() {
-                searchListViewAdapter.search(null);
-                searching = false;
-                searchWas = false;
-                listView.setAdapter(listViewAdapter);
-                if (android.os.Build.VERSION.SDK_INT >= 11) {
-                    listView.setFastScrollAlwaysVisible(true);
-                }
-                listView.setFastScrollEnabled(true);
-                listView.setVerticalScrollBarEnabled(false);
-
-                emptyTextView.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-
-                return true;
-            }
-
-            @Override
-            public void onTextChanged(EditText editText) {
-                String text = editText.getText().toString();
-                searchListViewAdapter.search(text);
-                if (text.length() != 0) {
-                    searchWas = true;
-                    if (listView != null) {
-                        listView.setAdapter(searchListViewAdapter);
-                        if (android.os.Build.VERSION.SDK_INT >= 11) {
-                            listView.setFastScrollAlwaysVisible(false);
-                        }
-                        listView.setFastScrollEnabled(false);
-                        listView.setVerticalScrollBarEnabled(true);
-                    }
-                    if (emptyTextView != null) {
-
-                    }
-                }
-            }
-        });
-        item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
-
-        searching = false;
-        searchWas = false;
-
-        listViewAdapter = new CountryAdapter(context);
-        searchListViewAdapter = new CountrySearchAdapter(context, listViewAdapter.getCountries());
-
-        fragmentView = new FrameLayout(context);
-
-        LinearLayout emptyTextLayout = new LinearLayout(context);
-        emptyTextLayout.setVisibility(View.INVISIBLE);
-        emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
-        ((FrameLayout) fragmentView).addView(emptyTextLayout);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        emptyTextLayout.setLayoutParams(layoutParams);
-        emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        emptyTextView = new TextView(context);
-        emptyTextView.setTextColor(0xff808080);
-        emptyTextView.setTextSize(20);
-        emptyTextView.setGravity(Gravity.CENTER);
-        emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-        emptyTextLayout.addView(emptyTextView);
-        LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        layoutParams1.weight = 0.5f;
-        emptyTextView.setLayoutParams(layoutParams1);
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        emptyTextLayout.addView(frameLayout);
-        layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        layoutParams1.weight = 0.5f;
-        frameLayout.setLayoutParams(layoutParams1);
-
-        listView = new LetterSectionsListView(context);
-        listView.setEmptyView(emptyTextLayout);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setFastScrollEnabled(true);
-        listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
-        listView.setAdapter(listViewAdapter);
-        if (Build.VERSION.SDK_INT >= 11) {
-            listView.setFastScrollAlwaysVisible(true);
-            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
-        }
-        ((FrameLayout) fragmentView).addView(listView);
-        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                Country country = null;
-                if (searching && searchWas) {
-                    country = searchListViewAdapter.getItem(i);
-                } else {
-                    int section = listViewAdapter.getSectionForPosition(i);
-                    int row = listViewAdapter.getPositionInSectionForPosition(i);
-                    if (row < 0 || section < 0) {
-                        return;
-                    }
-                    country = listViewAdapter.getItem(section, row);
-                }
-                if (i < 0) {
-                    return;
-                }
-                if (country != null && delegate != null) {
-                    delegate.didSelectCountry(country.name);
-                }
-                finishFragment();
-            }
-        });
-
-        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView absListView, int i) {
-                if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
-                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
-                }
-            }
-
-            @Override
-            public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                if (absListView.isFastScrollEnabled()) {
-                    AndroidUtilities.clearDrawableAnimation(absListView);
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listViewAdapter != null) {
-            listViewAdapter.notifyDataSetChanged();
-        }
-    }
-
-    public void setCountrySelectActivityDelegate(CountrySelectActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
deleted file mode 100644
index 260092182..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ /dev/null
@@ -1,640 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.annotation.SuppressLint;
-import android.app.AlertDialog;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.Build;
-import android.os.Environment;
-import android.os.StatFs;
-import android.text.TextUtils;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Cells.SharedDocumentCell;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileReader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.HashMap;
-
-public class DocumentSelectActivity extends BaseFragment {
-
-    public interface DocumentSelectActivityDelegate {
-        void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files);
-        void startDocumentSelectActivity();
-    }
-
-    private ListView listView;
-    private ListAdapter listAdapter;
-    private TextView selectedMessagesCountTextView;
-    private TextView emptyView;
-
-    private File currentDir;
-    private ArrayList<ListItem> items = new ArrayList<>();
-    private boolean receiverRegistered = false;
-    private ArrayList<HistoryEntry> history = new ArrayList<>();
-    private long sizeLimit = 1024 * 1024 * 1536;
-    private DocumentSelectActivityDelegate delegate;
-    private HashMap<String, ListItem> selectedFiles = new HashMap<>();
-    private ArrayList<View> actionModeViews = new ArrayList<>();
-    private boolean scrolling;
-
-    private final static int done = 3;
-
-    private class ListItem {
-        int icon;
-        String title;
-        String subtitle = "";
-        String ext = "";
-        String thumb;
-        File file;
-    }
-
-    private class HistoryEntry {
-        int scrollItem, scrollOffset;
-        File dir;
-        String title;
-    }
-
-    private BroadcastReceiver receiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context arg0, Intent intent) {
-            Runnable r = new Runnable() {
-                public void run() {
-                    try {
-                        if (currentDir == null) {
-                            listRoots();
-                        } else {
-                            listFiles(currentDir);
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            };
-            if (Intent.ACTION_MEDIA_UNMOUNTED.equals(intent.getAction())) {
-                listView.postDelayed(r, 1000);
-            } else {
-                r.run();
-            }
-        }
-    };
-
-    @Override
-    public void onFragmentDestroy() {
-        try {
-            if (receiverRegistered) {
-                getParentActivity().unregisterReceiver(receiver);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        super.onFragmentDestroy();
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        if (!receiverRegistered) {
-            receiverRegistered = true;
-            IntentFilter filter = new IntentFilter();
-            filter.addAction(Intent.ACTION_MEDIA_BAD_REMOVAL);
-            filter.addAction(Intent.ACTION_MEDIA_CHECKING);
-            filter.addAction(Intent.ACTION_MEDIA_EJECT);
-            filter.addAction(Intent.ACTION_MEDIA_MOUNTED);
-            filter.addAction(Intent.ACTION_MEDIA_NOFS);
-            filter.addAction(Intent.ACTION_MEDIA_REMOVED);
-            filter.addAction(Intent.ACTION_MEDIA_SHARED);
-            filter.addAction(Intent.ACTION_MEDIA_UNMOUNTABLE);
-            filter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
-            filter.addDataScheme("file");
-            getParentActivity().registerReceiver(receiver, filter);
-        }
-
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("SelectFile", R.string.SelectFile));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == -2) {
-                    selectedFiles.clear();
-                    actionBar.hideActionMode();
-                    listView.invalidateViews();
-                } else if (id == done) {
-                    if (delegate != null) {
-                        ArrayList<String> files = new ArrayList<>();
-                        files.addAll(selectedFiles.keySet());
-                        delegate.didSelectFiles(DocumentSelectActivity.this, files);
-                    }
-                }
-            }
-        });
-        selectedFiles.clear();
-        actionModeViews.clear();
-
-        final ActionBarMenu actionMode = actionBar.createActionMode();
-        actionModeViews.add(actionMode.addItem(-2, R.drawable.ic_ab_back_grey, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
-
-        selectedMessagesCountTextView = new TextView(actionMode.getContext());
-        selectedMessagesCountTextView.setTextSize(18);
-        selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        selectedMessagesCountTextView.setTextColor(0xff737373);
-        selectedMessagesCountTextView.setSingleLine(true);
-        selectedMessagesCountTextView.setLines(1);
-        selectedMessagesCountTextView.setEllipsize(TextUtils.TruncateAt.END);
-        selectedMessagesCountTextView.setPadding(AndroidUtilities.dp(11), 0, 0, AndroidUtilities.dp(2));
-        selectedMessagesCountTextView.setGravity(Gravity.CENTER_VERTICAL);
-        selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-        actionMode.addView(selectedMessagesCountTextView);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) selectedMessagesCountTextView.getLayoutParams();
-        layoutParams.weight = 1;
-        layoutParams.width = 0;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        selectedMessagesCountTextView.setLayoutParams(layoutParams);
-
-        actionModeViews.add(actionMode.addItem(done, R.drawable.ic_ab_done_gray, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
-
-        fragmentView = inflater.inflate(R.layout.document_select_layout, null, false);
-        listAdapter = new ListAdapter(context);
-        emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
-        emptyView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-        listView = (ListView) fragmentView.findViewById(R.id.listView);
-        listView.setEmptyView(emptyView);
-        listView.setAdapter(listAdapter);
-
-        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView view, int scrollState) {
-                scrolling = scrollState != SCROLL_STATE_IDLE;
-            }
-
-            @Override
-            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-
-            }
-        });
-
-        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(AdapterView<?> parent, View view, int i, long id) {
-                if (actionBar.isActionModeShowed() || i < 0 || i >= items.size()) {
-                    return false;
-                }
-                ListItem item = items.get(i);
-                File file = item.file;
-                if (file != null && !file.isDirectory()) {
-                    if (!file.canRead()) {
-                        showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
-                        return false;
-                    }
-                    if (sizeLimit != 0) {
-                        if (file.length() > sizeLimit) {
-                            showErrorBox(LocaleController.formatString("FileUploadLimit", R.string.FileUploadLimit, AndroidUtilities.formatFileSize(sizeLimit)));
-                            return false;
-                        }
-                    }
-                    if (file.length() == 0) {
-                        return false;
-                    }
-                    selectedFiles.put(file.toString(), item);
-                    selectedMessagesCountTextView.setText(String.format("%d", selectedFiles.size()));
-                    if (Build.VERSION.SDK_INT >= 11) {
-                        AnimatorSetProxy animatorSet = new AnimatorSetProxy();
-                        ArrayList<Object> animators = new ArrayList<>();
-                        for (int a = 0; a < actionModeViews.size(); a++) {
-                            View view2 = actionModeViews.get(a);
-                            AndroidUtilities.clearDrawableAnimation(view2);
-                            if (a < 1) {
-                                animators.add(ObjectAnimatorProxy.ofFloat(view2, "translationX", -AndroidUtilities.dp(56), 0));
-                            } else {
-                                animators.add(ObjectAnimatorProxy.ofFloat(view2, "scaleY", 0.1f, 1.0f));
-                            }
-                        }
-                        animatorSet.playTogether(animators);
-                        animatorSet.setDuration(250);
-                        animatorSet.start();
-                    }
-                    scrolling = false;
-                    if (view instanceof SharedDocumentCell) {
-                        ((SharedDocumentCell) view).setChecked(true, true);
-                    }
-                    actionBar.showActionMode();
-                }
-                return true;
-            }
-        });
-
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                if (i < 0 || i >= items.size()) {
-                    return;
-                }
-                ListItem item = items.get(i);
-                File file = item.file;
-                if (file == null) {
-                    if (item.icon == R.drawable.ic_storage_gallery) {
-                        if (delegate != null) {
-                            delegate.startDocumentSelectActivity();
-                        }
-                        finishFragment(false);
-                    } else {
-                        HistoryEntry he = history.remove(history.size() - 1);
-                        actionBar.setTitle(he.title);
-                        if (he.dir != null) {
-                            listFiles(he.dir);
-                        } else {
-                            listRoots();
-                        }
-                        listView.setSelectionFromTop(he.scrollItem, he.scrollOffset);
-                    }
-                } else if (file.isDirectory()) {
-                    HistoryEntry he = new HistoryEntry();
-                    he.scrollItem = listView.getFirstVisiblePosition();
-                    he.scrollOffset = listView.getChildAt(0).getTop();
-                    he.dir = currentDir;
-                    he.title = actionBar.getTitle();
-                    history.add(he);
-                    if (!listFiles(file)) {
-                        history.remove(he);
-                        return;
-                    }
-                    actionBar.setTitle(item.title);
-                    listView.setSelection(0);
-                } else {
-                    if (!file.canRead()) {
-                        showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
-                        return;
-                    }
-                    if (sizeLimit != 0) {
-                        if (file.length() > sizeLimit) {
-                            showErrorBox(LocaleController.formatString("FileUploadLimit", R.string.FileUploadLimit, AndroidUtilities.formatFileSize(sizeLimit)));
-                            return;
-                        }
-                    }
-                    if (file.length() == 0) {
-                        return;
-                    }
-                    if (actionBar.isActionModeShowed()) {
-                        if (selectedFiles.containsKey(file.toString())) {
-                            selectedFiles.remove(file.toString());
-                        } else {
-                            selectedFiles.put(file.toString(), item);
-                        }
-                        if (selectedFiles.isEmpty()) {
-                            actionBar.hideActionMode();
-                        } else {
-                            selectedMessagesCountTextView.setText(String.format("%d", selectedFiles.size()));
-                        }
-                        scrolling = false;
-                        if (view instanceof SharedDocumentCell) {
-                            ((SharedDocumentCell) view).setChecked(selectedFiles.containsKey(item.file.toString()), true);
-                        }
-                    } else {
-                        if (delegate != null) {
-                            ArrayList<String> files = new ArrayList<>();
-                            files.add(file.getAbsolutePath());
-                            delegate.didSelectFiles(DocumentSelectActivity.this, files);
-                        }
-                    }
-                }
-            }
-        });
-
-        listRoots();
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public boolean onBackPressed() {
-        if (history.size() > 0) {
-            HistoryEntry he = history.remove(history.size() - 1);
-            actionBar.setTitle(he.title);
-            if (he.dir != null) {
-                listFiles(he.dir);
-            } else {
-                listRoots();
-            }
-            listView.setSelectionFromTop(he.scrollItem, he.scrollOffset);
-            return false;
-        }
-        return super.onBackPressed();
-    }
-
-    public void setDelegate(DocumentSelectActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    private boolean listFiles(File dir) {
-        if (!dir.canRead()) {
-            if (dir.getAbsolutePath().startsWith(Environment.getExternalStorageDirectory().toString())
-                    || dir.getAbsolutePath().startsWith("/sdcard")
-                    || dir.getAbsolutePath().startsWith("/mnt/sdcard")) {
-                if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)
-                        && !Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {
-                    currentDir = dir;
-                    items.clear();
-                    String state = Environment.getExternalStorageState();
-                    if (Environment.MEDIA_SHARED.equals(state)) {
-                        emptyView.setText(LocaleController.getString("UsbActive", R.string.UsbActive));
-                    } else {
-                        emptyView.setText(LocaleController.getString("NotMounted", R.string.NotMounted));
-                    }
-                    AndroidUtilities.clearDrawableAnimation(listView);
-                    scrolling = true;
-                    listAdapter.notifyDataSetChanged();
-                    return true;
-                }
-            }
-            showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
-            return false;
-        }
-        emptyView.setText(LocaleController.getString("NoFiles", R.string.NoFiles));
-        File[] files;
-        try {
-            files = dir.listFiles();
-        } catch(Exception e) {
-            showErrorBox(e.getLocalizedMessage());
-            return false;
-        }
-        if (files == null) {
-            showErrorBox(LocaleController.getString("UnknownError", R.string.UnknownError));
-            return false;
-        }
-        currentDir = dir;
-        items.clear();
-        Arrays.sort(files, new Comparator<File>() {
-            @Override
-            public int compare(File lhs, File rhs) {
-                if (lhs.isDirectory() != rhs.isDirectory()) {
-                    return lhs.isDirectory() ? -1 : 1;
-                }
-                return lhs.getName().compareToIgnoreCase(rhs.getName());
-                /*long lm = lhs.lastModified();
-                long rm = lhs.lastModified();
-                if (lm == rm) {
-                    return 0;
-                } else if (lm > rm) {
-                    return -1;
-                } else {
-                    return 1;
-                }*/
-            }
-        });
-        for (File file : files) {
-            if (file.getName().startsWith(".")) {
-                continue;
-            }
-            ListItem item = new ListItem();
-            item.title = file.getName();
-            item.file = file;
-            if (file.isDirectory()) {
-                item.icon = R.drawable.ic_directory;
-                item.subtitle = LocaleController.getString("Folder", R.string.Folder);
-            } else {
-                String fname = file.getName();
-                String[] sp = fname.split("\\.");
-                item.ext = sp.length > 1 ? sp[sp.length - 1] : "?";
-                item.subtitle = AndroidUtilities.formatFileSize(file.length());
-                fname = fname.toLowerCase();
-                if (fname.endsWith(".jpg") || fname.endsWith(".png") || fname.endsWith(".gif") || fname.endsWith(".jpeg")) {
-                    item.thumb = file.getAbsolutePath();
-                }
-            }
-            items.add(item);
-        }
-        ListItem item = new ListItem();
-        item.title = "..";
-        if (history.size() > 0) {
-            HistoryEntry entry = history.get(history.size() - 1);
-            if (entry.dir == null) {
-                item.subtitle = LocaleController.getString("Folder", R.string.Folder);
-            } else {
-                item.subtitle = entry.dir.toString();
-            }
-        } else {
-            item.subtitle = LocaleController.getString("Folder", R.string.Folder);
-        }
-        item.icon = R.drawable.ic_directory;
-        item.file = null;
-        items.add(0, item);
-        AndroidUtilities.clearDrawableAnimation(listView);
-        scrolling = true;
-        listAdapter.notifyDataSetChanged();
-        return true;
-    }
-
-    private void showErrorBox(String error) {
-        if (getParentActivity() == null) {
-            return;
-        }
-        new AlertDialog.Builder(getParentActivity()).setTitle(LocaleController.getString("AppName", R.string.AppName)).setMessage(error).setPositiveButton(LocaleController.getString("OK", R.string.OK), null).show();
-    }
-
-    @SuppressLint("NewApi")
-    private void listRoots() {
-        currentDir = null;
-        items.clear();
-        String extStorage = Environment.getExternalStorageDirectory().getAbsolutePath();
-        ListItem ext = new ListItem();
-        if (Build.VERSION.SDK_INT < 9 || Environment.isExternalStorageRemovable()) {
-            ext.title = LocaleController.getString("SdCard", R.string.SdCard);
-        } else {
-            ext.title = LocaleController.getString("InternalStorage", R.string.InternalStorage);
-        }
-        ext.icon = Build.VERSION.SDK_INT < 9 || Environment.isExternalStorageRemovable() ? R.drawable.ic_external_storage : R.drawable.ic_storage;
-        ext.subtitle = getRootSubtitle(extStorage);
-        ext.file = Environment.getExternalStorageDirectory();
-        items.add(ext);
-        try {
-            BufferedReader reader = new BufferedReader(new FileReader("/proc/mounts"));
-            String line;
-            HashMap<String, ArrayList<String>> aliases = new HashMap<>();
-            ArrayList<String> result = new ArrayList<>();
-            String extDevice = null;
-            while ((line = reader.readLine()) != null) {
-                if ((!line.contains("/mnt") && !line.contains("/storage") && !line.contains("/sdcard")) || line.contains("asec") || line.contains("tmpfs") || line.contains("none")) {
-                    continue;
-                }
-                String[] info = line.split(" ");
-                if (!aliases.containsKey(info[0])) {
-                    aliases.put(info[0], new ArrayList<String>());
-                }
-                aliases.get(info[0]).add(info[1]);
-                if (info[1].equals(extStorage)) {
-                    extDevice=info[0];
-                }
-                result.add(info[1]);
-            }
-            reader.close();
-            if (extDevice != null) {
-                result.removeAll(aliases.get(extDevice));
-                for (String path : result) {
-                    try {
-                        ListItem item = new ListItem();
-                        if (path.toLowerCase().contains("sd")) {
-                            ext.title = LocaleController.getString("SdCard", R.string.SdCard);
-                        } else {
-                            ext.title = LocaleController.getString("ExternalStorage", R.string.ExternalStorage);
-                        }
-                        item.icon = R.drawable.ic_external_storage;
-                        item.subtitle = getRootSubtitle(path);
-                        item.file = new File(path);
-                        items.add(item);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        ListItem fs = new ListItem();
-        fs.title = "/";
-        fs.subtitle = LocaleController.getString("SystemRoot", R.string.SystemRoot);
-        fs.icon = R.drawable.ic_directory;
-        fs.file = new File("/");
-        items.add(fs);
-
-        try {
-            File telegramPath = new File(Environment.getExternalStorageDirectory(), "Telegram");
-            if (telegramPath.exists()) {
-                fs = new ListItem();
-                fs.title = "Telegram";
-                fs.subtitle = telegramPath.toString();
-                fs.icon = R.drawable.ic_directory;
-                fs.file = telegramPath;
-                items.add(fs);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        fs = new ListItem();
-        fs.title = LocaleController.getString("Gallery", R.string.Gallery);
-        fs.subtitle = LocaleController.getString("GalleryInfo", R.string.GalleryInfo);
-        fs.icon = R.drawable.ic_storage_gallery;
-        fs.file = null;
-        items.add(fs);
-
-        AndroidUtilities.clearDrawableAnimation(listView);
-        scrolling = true;
-        listAdapter.notifyDataSetChanged();
-    }
-
-    private String getRootSubtitle(String path) {
-        StatFs stat = new StatFs(path);
-        long total = (long)stat.getBlockCount() * (long)stat.getBlockSize();
-        long free = (long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
-        if (total == 0) {
-            return "";
-        }
-        return LocaleController.formatString("FreeOfTotal", R.string.FreeOfTotal, AndroidUtilities.formatFileSize(free), AndroidUtilities.formatFileSize(total));
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public int getCount() {
-            return items.size();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return items.get(position);
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        public int getItemViewType(int pos) {
-            return items.get(pos).subtitle.length() > 0 ? 0 : 1;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            if (convertView == null) {
-                convertView = new SharedDocumentCell(mContext);
-            }
-            SharedDocumentCell textDetailCell = (SharedDocumentCell) convertView;
-            ListItem item = items.get(position);
-            if (item.icon != 0) {
-                ((SharedDocumentCell) convertView).setTextAndValueAndTypeAndThumb(item.title, item.subtitle, null, null, item.icon);
-            } else {
-                String type = item.ext.toUpperCase().substring(0, Math.min(item.ext.length(), 4));
-                ((SharedDocumentCell) convertView).setTextAndValueAndTypeAndThumb(item.title, item.subtitle, type, item.thumb, 0);
-            }
-            if (item.file != null && actionBar.isActionModeShowed()) {
-                textDetailCell.setChecked(selectedFiles.containsKey(item.file.toString()), !scrolling);
-            } else {
-                textDetailCell.setChecked(false, !scrolling);
-            }
-            return convertView;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
deleted file mode 100644
index d26744043..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ /dev/null
@@ -1,542 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Bundle;
-import android.text.Editable;
-import android.text.InputType;
-import android.text.Spannable;
-import android.text.SpannableString;
-import android.text.SpannableStringBuilder;
-import android.text.TextWatcher;
-import android.text.style.ImageSpan;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.inputmethod.EditorInfo;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.ui.Adapters.ContactsAdapter;
-import org.telegram.ui.Adapters.SearchAdapter;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.LetterSectionsListView;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-
-public class GroupCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    public interface GroupCreateActivityDelegate {
-        void didSelectUsers(ArrayList<Integer> ids);
-    }
-
-    private class XImageSpan extends ImageSpan {
-        public int uid;
-
-        public XImageSpan(Drawable d, int verticalAlignment) {
-            super(d, verticalAlignment);
-        }
-
-        @Override
-        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
-            if (fm == null) {
-                fm = new Paint.FontMetricsInt();
-            }
-
-            int sz = super.getSize(paint, text, start, end, fm);
-            int offset = AndroidUtilities.dp(6);
-            int w = (fm.bottom - fm.top) / 2;
-            fm.top = -w - offset;
-            fm.bottom = w - offset;
-            fm.ascent = -w - offset;
-            fm.leading = 0;
-            fm.descent = w - offset;
-            return sz;
-        }
-    }
-
-    private ContactsAdapter listViewAdapter;
-    private TextView emptyTextView;
-    private EditText userSelectEditText;
-    private LetterSectionsListView listView;
-    private SearchAdapter searchListViewAdapter;
-
-    private GroupCreateActivityDelegate delegate;
-
-    private int beforeChangeIndex;
-    private int maxCount = 199;
-    private boolean ignoreChange = false;
-    private boolean isBroadcast = false;
-    private boolean isAlwaysShare = false;
-    private boolean isNeverShare = false;
-    private boolean searchWas;
-    private boolean searching;
-    private CharSequence changeString;
-    private HashMap<Integer, XImageSpan> selectedContacts = new HashMap<>();
-    private ArrayList<XImageSpan> allSpans = new ArrayList<>();
-
-    private final static int done_button = 1;
-
-    public GroupCreateActivity() {
-        super();
-    }
-
-    public GroupCreateActivity(Bundle args) {
-        super(args);
-        isBroadcast = args.getBoolean("broadcast", false);
-        isAlwaysShare = args.getBoolean("isAlwaysShare", false);
-        isNeverShare = args.getBoolean("isNeverShare", false);
-        maxCount = !isBroadcast ? (MessagesController.getInstance().maxGroupCount - 1) : MessagesController.getInstance().maxBroadcastCount;
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidCreated);
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidCreated);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        searching = false;
-        searchWas = false;
-
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        if (isAlwaysShare) {
-            actionBar.setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
-        } else if (isNeverShare) {
-            actionBar.setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
-        } else {
-            actionBar.setTitle(isBroadcast ? LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList) : LocaleController.getString("NewGroup", R.string.NewGroup));
-            actionBar.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
-        }
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    if (selectedContacts.isEmpty()) {
-                        return;
-                    }
-                    ArrayList<Integer> result = new ArrayList<>();
-                    result.addAll(selectedContacts.keySet());
-                    if (isAlwaysShare || isNeverShare) {
-                        if (delegate != null) {
-                            delegate.didSelectUsers(result);
-                        }
-                        finishFragment();
-                    } else {
-                        Bundle args = new Bundle();
-                        args.putIntegerArrayList("result", result);
-                        args.putBoolean("broadcast", isBroadcast);
-                        presentFragment(new GroupCreateFinalActivity(args));
-                    }
-                }
-            }
-        });
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        searchListViewAdapter = new SearchAdapter(context, null, false);
-        searchListViewAdapter.setCheckedMap(selectedContacts);
-        searchListViewAdapter.setUseUserCell(true);
-        listViewAdapter = new ContactsAdapter(context, true, false, null, false);
-        listViewAdapter.setCheckedMap(selectedContacts);
-
-        fragmentView = new LinearLayout(context);
-        LinearLayout linearLayout = (LinearLayout) fragmentView;
-        linearLayout.setOrientation(LinearLayout.VERTICAL);
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        linearLayout.addView(frameLayout);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.TOP;
-        frameLayout.setLayoutParams(layoutParams);
-
-        userSelectEditText = new EditText(context);
-        userSelectEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        userSelectEditText.setHintTextColor(0xff979797);
-        userSelectEditText.setTextColor(0xff212121);
-        userSelectEditText.setInputType(InputType.TYPE_TEXT_VARIATION_FILTER | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS | InputType.TYPE_TEXT_FLAG_MULTI_LINE);
-        userSelectEditText.setMinimumHeight(AndroidUtilities.dp(54));
-        userSelectEditText.setSingleLine(false);
-        userSelectEditText.setLines(2);
-        userSelectEditText.setMaxLines(2);
-        userSelectEditText.setVerticalScrollBarEnabled(true);
-        userSelectEditText.setHorizontalScrollBarEnabled(false);
-        userSelectEditText.setPadding(0, 0, 0, 0);
-        userSelectEditText.setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-        userSelectEditText.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        AndroidUtilities.clearCursorDrawable(userSelectEditText);
-        frameLayout.addView(userSelectEditText);
-        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) userSelectEditText.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.leftMargin = AndroidUtilities.dp(10);
-        layoutParams1.rightMargin = AndroidUtilities.dp(10);
-        layoutParams1.gravity = Gravity.TOP;
-        userSelectEditText.setLayoutParams(layoutParams1);
-
-        if (isAlwaysShare) {
-            userSelectEditText.setHint(LocaleController.getString("AlwaysShareWithPlaceholder", R.string.AlwaysShareWithPlaceholder));
-        } else if (isNeverShare) {
-            userSelectEditText.setHint(LocaleController.getString("NeverShareWithPlaceholder", R.string.NeverShareWithPlaceholder));
-        } else {
-            userSelectEditText.setHint(LocaleController.getString("SendMessageTo", R.string.SendMessageTo));
-        }
-        if (Build.VERSION.SDK_INT >= 11) {
-            userSelectEditText.setTextIsSelectable(false);
-        }
-        userSelectEditText.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void beforeTextChanged(CharSequence charSequence, int start, int count, int after) {
-                if (!ignoreChange) {
-                    beforeChangeIndex = userSelectEditText.getSelectionStart();
-                    changeString = new SpannableString(charSequence);
-                }
-            }
-
-            @Override
-            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-            }
-
-            @Override
-            public void afterTextChanged(Editable editable) {
-                if (!ignoreChange) {
-                    boolean search = false;
-                    int afterChangeIndex = userSelectEditText.getSelectionEnd();
-                    if (editable.toString().length() < changeString.toString().length()) {
-                        String deletedString = "";
-                        try {
-                            deletedString = changeString.toString().substring(afterChangeIndex, beforeChangeIndex);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        if (deletedString.length() > 0) {
-                            if (searching && searchWas) {
-                                search = true;
-                            }
-                            Spannable span = userSelectEditText.getText();
-                            for (int a = 0; a < allSpans.size(); a++) {
-                                XImageSpan sp = allSpans.get(a);
-                                if (span.getSpanStart(sp) == -1) {
-                                    allSpans.remove(sp);
-                                    selectedContacts.remove(sp.uid);
-                                }
-                            }
-                            if (!isAlwaysShare && !isNeverShare) {
-                                actionBar.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
-                            }
-                            listView.invalidateViews();
-                        } else {
-                            search = true;
-                        }
-                    } else {
-                        search = true;
-                    }
-                    if (search) {
-                        String text = userSelectEditText.getText().toString().replace("<", "");
-                        if (text.length() != 0) {
-                            searching = true;
-                            searchWas = true;
-                            if (listView != null) {
-                                listView.setAdapter(searchListViewAdapter);
-                                searchListViewAdapter.notifyDataSetChanged();
-                                if (android.os.Build.VERSION.SDK_INT >= 11) {
-                                    listView.setFastScrollAlwaysVisible(false);
-                                }
-                                listView.setFastScrollEnabled(false);
-                                listView.setVerticalScrollBarEnabled(true);
-                            }
-                            if (emptyTextView != null) {
-                                emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-                            }
-                            searchListViewAdapter.searchDialogs(text);
-                        } else {
-                            searchListViewAdapter.searchDialogs(null);
-                            searching = false;
-                            searchWas = false;
-                            listView.setAdapter(listViewAdapter);
-                            listViewAdapter.notifyDataSetChanged();
-                            if (android.os.Build.VERSION.SDK_INT >= 11) {
-                                listView.setFastScrollAlwaysVisible(true);
-                            }
-                            listView.setFastScrollEnabled(true);
-                            listView.setVerticalScrollBarEnabled(false);
-                            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-                        }
-                    }
-                }
-            }
-        });
-
-        LinearLayout emptyTextLayout = new LinearLayout(context);
-        emptyTextLayout.setVisibility(View.INVISIBLE);
-        emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
-        linearLayout.addView(emptyTextLayout);
-        layoutParams = (LinearLayout.LayoutParams) emptyTextLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        emptyTextLayout.setLayoutParams(layoutParams);
-        emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        emptyTextView = new TextView(context);
-        emptyTextView.setTextColor(0xff808080);
-        emptyTextView.setTextSize(20);
-        emptyTextView.setGravity(Gravity.CENTER);
-        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-        emptyTextLayout.addView(emptyTextView);
-        layoutParams = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.weight = 0.5f;
-        emptyTextView.setLayoutParams(layoutParams);
-
-        FrameLayout frameLayout2 = new FrameLayout(context);
-        emptyTextLayout.addView(frameLayout2);
-        layoutParams = (LinearLayout.LayoutParams) frameLayout2.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.weight = 0.5f;
-        frameLayout2.setLayoutParams(layoutParams);
-
-        listView = new LetterSectionsListView(context);
-        listView.setEmptyView(emptyTextLayout);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setFastScrollEnabled(true);
-        listView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
-        listView.setAdapter(listViewAdapter);
-        if (Build.VERSION.SDK_INT >= 11) {
-            listView.setFastScrollAlwaysVisible(true);
-            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
-        }
-        linearLayout.addView(listView);
-        layoutParams = (LinearLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                TLRPC.User user;
-                if (searching && searchWas) {
-                    user = searchListViewAdapter.getItem(i);
-                } else {
-                    int section = listViewAdapter.getSectionForPosition(i);
-                    int row = listViewAdapter.getPositionInSectionForPosition(i);
-                    if (row < 0 || section < 0) {
-                        return;
-                    }
-                    user = (TLRPC.User) listViewAdapter.getItem(section, row);
-                }
-                if (user == null) {
-                    return;
-                }
-
-                boolean check = true;
-                if (selectedContacts.containsKey(user.id)) {
-                    check = false;
-                    try {
-                        XImageSpan span = selectedContacts.get(user.id);
-                        selectedContacts.remove(user.id);
-                        SpannableStringBuilder text = new SpannableStringBuilder(userSelectEditText.getText());
-                        text.delete(text.getSpanStart(span), text.getSpanEnd(span));
-                        allSpans.remove(span);
-                        ignoreChange = true;
-                        userSelectEditText.setText(text);
-                        userSelectEditText.setSelection(text.length());
-                        ignoreChange = false;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else {
-                    if (selectedContacts.size() == maxCount) {
-                        return;
-                    }
-                    ignoreChange = true;
-                    XImageSpan span = createAndPutChipForUser(user);
-                    span.uid = user.id;
-                    ignoreChange = false;
-                }
-                if (!isAlwaysShare && !isNeverShare) {
-                    actionBar.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
-                }
-                if (searching || searchWas) {
-                    ignoreChange = true;
-                    SpannableStringBuilder ssb = new SpannableStringBuilder("");
-                    for (ImageSpan sp : allSpans) {
-                        ssb.append("<<");
-                        ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
-                    }
-                    userSelectEditText.setText(ssb);
-                    userSelectEditText.setSelection(ssb.length());
-                    ignoreChange = false;
-
-                    searchListViewAdapter.searchDialogs(null);
-                    searching = false;
-                    searchWas = false;
-                    listView.setAdapter(listViewAdapter);
-                    listViewAdapter.notifyDataSetChanged();
-                    if (android.os.Build.VERSION.SDK_INT >= 11) {
-                        listView.setFastScrollAlwaysVisible(true);
-                    }
-                    listView.setFastScrollEnabled(true);
-                    listView.setVerticalScrollBarEnabled(false);
-                    emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-                } else {
-                    if (view instanceof UserCell) {
-                        ((UserCell) view).setChecked(check, true);
-                    }
-                }
-            }
-        });
-        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView absListView, int i) {
-                if (i == SCROLL_STATE_TOUCH_SCROLL) {
-                    AndroidUtilities.hideKeyboard(userSelectEditText);
-                }
-                if (listViewAdapter != null) {
-                    listViewAdapter.setIsScrolling(i != SCROLL_STATE_IDLE);
-                }
-            }
-
-            @Override
-            public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                if (absListView.isFastScrollEnabled()) {
-                    AndroidUtilities.clearDrawableAnimation(absListView);
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.contactsDidLoaded) {
-            if (listViewAdapter != null) {
-                listViewAdapter.notifyDataSetChanged();
-            }
-        } else if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                updateVisibleRows(mask);
-            }
-        } else if (id == NotificationCenter.chatDidCreated) {
-            removeSelfFromStack();
-        }
-    }
-
-    private void updateVisibleRows(int mask) {
-        if (listView != null) {
-            int count = listView.getChildCount();
-            for (int a = 0; a < count; a++) {
-                View child = listView.getChildAt(a);
-                if (child instanceof UserCell) {
-                    ((UserCell) child).update(mask);
-                }
-            }
-        }
-    }
-
-    public void setDelegate(GroupCreateActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    private XImageSpan createAndPutChipForUser(TLRPC.User user) {
-        LayoutInflater lf = (LayoutInflater) ApplicationLoader.applicationContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
-        View textView = lf.inflate(R.layout.group_create_bubble, null);
-        TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
-        String name = ContactsController.formatName(user.first_name, user.last_name);
-        if (name.length() == 0 && user.phone != null && user.phone.length() != 0) {
-            name = PhoneFormat.getInstance().format("+" + user.phone);
-        }
-        text.setText(name + ", ");
-
-        int spec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
-        textView.measure(spec, spec);
-        textView.layout(0, 0, textView.getMeasuredWidth(), textView.getMeasuredHeight());
-        Bitmap b = Bitmap.createBitmap(textView.getWidth(), textView.getHeight(), Bitmap.Config.ARGB_8888);
-        Canvas canvas = new Canvas(b);
-        canvas.translate(-textView.getScrollX(), -textView.getScrollY());
-        textView.draw(canvas);
-        textView.setDrawingCacheEnabled(true);
-        Bitmap cacheBmp = textView.getDrawingCache();
-        Bitmap viewBmp = cacheBmp.copy(Bitmap.Config.ARGB_8888, true);
-        textView.destroyDrawingCache();
-
-        final BitmapDrawable bmpDrawable = new BitmapDrawable(b);
-        bmpDrawable.setBounds(0, 0, b.getWidth(), b.getHeight());
-
-        SpannableStringBuilder ssb = new SpannableStringBuilder("");
-        XImageSpan span = new XImageSpan(bmpDrawable, ImageSpan.ALIGN_BASELINE);
-        allSpans.add(span);
-        selectedContacts.put(user.id, span);
-        for (ImageSpan sp : allSpans) {
-            ssb.append("<<");
-            ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
-        }
-        userSelectEditText.setText(ssb);
-        userSelectEditText.setSelection(ssb.length());
-        return span;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
deleted file mode 100644
index 93aaffa07..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ /dev/null
@@ -1,470 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Bundle;
-import android.text.Editable;
-import android.text.InputType;
-import android.text.TextWatcher;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.GreySectionCell;
-import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.AvatarUpdater;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.FrameLayoutFixed;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-import java.util.concurrent.Semaphore;
-
-public class GroupCreateFinalActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, AvatarUpdater.AvatarUpdaterDelegate {
-
-    private ListAdapter listAdapter;
-    private ListView listView;
-    private EditText nameTextView;
-    private TLRPC.FileLocation avatar;
-    private TLRPC.InputFile uploadedAvatar;
-    private ArrayList<Integer> selectedContacts;
-    private BackupImageView avatarImage;
-    private AvatarDrawable avatarDrawable;
-    private boolean createAfterUpload;
-    private boolean donePressed;
-    private AvatarUpdater avatarUpdater = new AvatarUpdater();
-    private ProgressDialog progressDialog = null;
-    private String nameToSet = null;
-    private boolean isBroadcast = false;
-
-    private final static int done_button = 1;
-
-    public GroupCreateFinalActivity(Bundle args) {
-        super(args);
-        isBroadcast = args.getBoolean("broadcast", false);
-        avatarDrawable = new AvatarDrawable();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public boolean onFragmentCreate() {
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidCreated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidFailCreate);
-        avatarUpdater.parentFragment = this;
-        avatarUpdater.delegate = this;
-        selectedContacts = getArguments().getIntegerArrayList("result");
-        final ArrayList<Integer> usersToLoad = new ArrayList<>();
-        for (Integer uid : selectedContacts) {
-            if (MessagesController.getInstance().getUser(uid) == null) {
-                usersToLoad.add(uid);
-            }
-        }
-        if (!usersToLoad.isEmpty()) {
-            final Semaphore semaphore = new Semaphore(0);
-            final ArrayList<TLRPC.User> users = new ArrayList<>();
-            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    users.addAll(MessagesStorage.getInstance().getUsers(usersToLoad));
-                    semaphore.release();
-                }
-            });
-            try {
-                semaphore.acquire();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            if (usersToLoad.size() != users.size()) {
-                return false;
-            }
-            if (!users.isEmpty()) {
-                for (TLRPC.User user : users) {
-                    MessagesController.getInstance().putUser(user, true);
-                }
-            } else {
-                return false;
-            }
-        }
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidCreated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidFailCreate);
-        avatarUpdater.clear();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        if (isBroadcast) {
-            actionBar.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
-        } else {
-            actionBar.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
-        }
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    if (donePressed) {
-                        return;
-                    }
-                    if (nameTextView.getText().length() == 0) {
-                        return;
-                    }
-                    donePressed = true;
-
-                    if (isBroadcast) {
-                        MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, isBroadcast);
-                    } else {
-                        if (avatarUpdater.uploadingAvatar != null) {
-                            createAfterUpload = true;
-                        } else {
-                            progressDialog = new ProgressDialog(getParentActivity());
-                            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-                            progressDialog.setCanceledOnTouchOutside(false);
-                            progressDialog.setCancelable(false);
-
-                            final long reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, isBroadcast);
-
-                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialog, int which) {
-                                    ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                                    donePressed = false;
-                                    try {
-                                        dialog.dismiss();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            });
-                            progressDialog.show();
-                        }
-                    }
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        fragmentView = new LinearLayout(context);
-        LinearLayout linearLayout = (LinearLayout) fragmentView;
-        linearLayout.setOrientation(LinearLayout.VERTICAL);
-
-        FrameLayout frameLayout = new FrameLayoutFixed(context);
-        linearLayout.addView(frameLayout);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        frameLayout.setLayoutParams(layoutParams);
-
-        avatarImage = new BackupImageView(context);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(32));
-        avatarDrawable.setInfo(5, null, null, isBroadcast);
-        avatarImage.setImageDrawable(avatarDrawable);
-        frameLayout.addView(avatarImage);
-        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
-        layoutParams1.width = AndroidUtilities.dp(64);
-        layoutParams1.height = AndroidUtilities.dp(64);
-        layoutParams1.topMargin = AndroidUtilities.dp(12);
-        layoutParams1.bottomMargin = AndroidUtilities.dp(12);
-        layoutParams1.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(16);
-        layoutParams1.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(16) : 0;
-        layoutParams1.gravity = Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        avatarImage.setLayoutParams(layoutParams1);
-        if (!isBroadcast) {
-            avatarDrawable.setDrawPhoto(true);
-            avatarImage.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
-                    CharSequence[] items;
-
-                    if (avatar != null) {
-                        items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
-                    } else {
-                        items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
-                    }
-
-                    builder.setItems(items, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (i == 0) {
-                                avatarUpdater.openCamera();
-                            } else if (i == 1) {
-                                avatarUpdater.openGallery();
-                            } else if (i == 2) {
-                                avatar = null;
-                                uploadedAvatar = null;
-                                avatarImage.setImage(avatar, "50_50", avatarDrawable);
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
-                }
-            });
-        }
-
-        nameTextView = new EditText(context);
-        nameTextView.setHint(isBroadcast ? LocaleController.getString("EnterListName", R.string.EnterListName) : LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
-        if (nameToSet != null) {
-            nameTextView.setText(nameToSet);
-            nameToSet = null;
-        }
-        nameTextView.setMaxLines(4);
-        nameTextView.setGravity(Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        nameTextView.setHintTextColor(0xff979797);
-        nameTextView.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-        nameTextView.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
-        nameTextView.setPadding(0, 0, 0, AndroidUtilities.dp(8));
-        AndroidUtilities.clearCursorDrawable(nameTextView);
-        nameTextView.setTextColor(0xff212121);
-        frameLayout.addView(nameTextView);
-        layoutParams1 = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.leftMargin = LocaleController.isRTL ? AndroidUtilities.dp(16) : AndroidUtilities.dp(96);
-        layoutParams1.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(96) : AndroidUtilities.dp(16);
-        layoutParams1.gravity = Gravity.CENTER_VERTICAL;
-        nameTextView.setLayoutParams(layoutParams1);
-        if (!isBroadcast) {
-            nameTextView.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-
-                }
-
-                @Override
-                public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-                }
-
-                @Override
-                public void afterTextChanged(Editable s) {
-                    avatarDrawable.setInfo(5, nameTextView.length() > 0 ? nameTextView.getText().toString() : null, null, isBroadcast);
-                    avatarImage.invalidate();
-                }
-            });
-        }
-
-        GreySectionCell sectionCell = new GreySectionCell(context);
-        sectionCell.setText(LocaleController.formatPluralString("Members", selectedContacts.size()));
-        linearLayout.addView(sectionCell);
-
-        listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setAdapter(listAdapter = new ListAdapter(context));
-        linearLayout.addView(listView);
-        layoutParams = (LinearLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didUploadedPhoto(final TLRPC.InputFile file, final TLRPC.PhotoSize small, final TLRPC.PhotoSize big) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                uploadedAvatar = file;
-                avatar = small.location;
-                avatarImage.setImage(avatar, "50_50", avatarDrawable);
-                if (createAfterUpload) {
-                    FileLog.e("tmessages", "avatar did uploaded");
-                    MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, false);
-                }
-            }
-        });
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        avatarUpdater.onActivityResult(requestCode, resultCode, data);
-    }
-
-    @Override
-    public void saveSelfArgs(Bundle args) {
-        if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
-            args.putString("path", avatarUpdater.currentPicturePath);
-        }
-        if (nameTextView != null) {
-            String text = nameTextView.getText().toString();
-            if (text != null && text.length() != 0) {
-                args.putString("nameTextView", text);
-            }
-        }
-    }
-
-    @Override
-    public void restoreSelfArgs(Bundle args) {
-        if (avatarUpdater != null) {
-            avatarUpdater.currentPicturePath = args.getString("path");
-        }
-        String text = args.getString("nameTextView");
-        if (text != null) {
-            if (nameTextView != null) {
-                nameTextView.setText(text);
-            } else {
-                nameToSet = text;
-            }
-        }
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        nameTextView.requestFocus();
-        AndroidUtilities.showKeyboard(nameTextView);
-    }
-
-    @Override
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                updateVisibleRows(mask);
-            }
-        } else if (id == NotificationCenter.chatDidFailCreate) {
-            if (progressDialog != null) {
-                try {
-                    progressDialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            donePressed = false;
-        } else if (id == NotificationCenter.chatDidCreated) {
-            if (progressDialog != null) {
-                try {
-                    progressDialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            int chat_id = (Integer)args[0];
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-            Bundle args2 = new Bundle();
-            args2.putInt("chat_id", chat_id);
-            presentFragment(new ChatActivity(args2), true);
-            if (uploadedAvatar != null) {
-                MessagesController.getInstance().changeChatAvatar(chat_id, uploadedAvatar);
-            }
-        }
-    }
-
-    private void updateVisibleRows(int mask) {
-        if (listView == null) {
-            return;
-        }
-        int count = listView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View child = listView.getChildAt(a);
-            if (child instanceof UserCell) {
-                ((UserCell) child).update(mask);
-            }
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int position) {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new UserCell(mContext, 1);
-            }
-
-            TLRPC.User user = MessagesController.getInstance().getUser(selectedContacts.get(i));
-            ((UserCell) view).setData(user, null, null, 0);
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int position) {
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public int getCount() {
-            return selectedContacts.size();
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
deleted file mode 100644
index 1ea12de42..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupInviteActivity.java
+++ /dev/null
@@ -1,339 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Build;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-import android.widget.ProgressBar;
-import android.widget.Toast;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextBlockCell;
-import org.telegram.ui.Cells.TextInfoPrivacyCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class GroupInviteActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-
-    private int chat_id;
-    private boolean loading;
-    private TLRPC.ExportedChatInvite invite;
-
-    private int linkRow;
-    private int linkInfoRow;
-    private int copyLinkRow;
-    private int revokeLinkRow;
-    private int shareLinkRow;
-    private int shadowRow;
-    private int rowCount;
-
-    public GroupInviteActivity(int cid) {
-        super();
-        chat_id = cid;
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
-        MessagesController.getInstance().loadFullChat(chat_id, classGuid, true);
-        loading = true;
-
-        rowCount = 0;
-        linkRow = rowCount++;
-        linkInfoRow = rowCount++;
-        copyLinkRow = rowCount++;
-        revokeLinkRow = rowCount++;
-        shareLinkRow = rowCount++;
-        shadowRow = rowCount++;
-
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("InviteLink", R.string.InviteLink));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        listAdapter = new ListAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(0xfff0f0f0);
-
-        FrameLayout progressView = new FrameLayout(context);
-        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-        ProgressBar progressBar = new ProgressBar(context);
-        progressView.addView(progressBar, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
-
-        ListView listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setEmptyView(progressView);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDrawSelectorOnTop(true);
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
-        listView.setAdapter(listAdapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (getParentActivity() == null) {
-                    return;
-                }
-                if (i == copyLinkRow || i == linkRow) {
-                    if (invite == null) {
-                        return;
-                    }
-                    try {
-                        if (Build.VERSION.SDK_INT < 11) {
-                            android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                            clipboard.setText(invite.link);
-                        } else {
-                            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                            android.content.ClipData clip = android.content.ClipData.newPlainText("label", invite.link);
-                            clipboard.setPrimaryClip(clip);
-                        }
-                        Toast.makeText(getParentActivity(), LocaleController.getString("LinkCopied", R.string.LinkCopied), Toast.LENGTH_SHORT).show();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else if (i == shareLinkRow) {
-                    if (invite == null) {
-                        return;
-                    }
-                    try {
-                        Intent intent = new Intent(Intent.ACTION_SEND);
-                        intent.setType("text/plain");
-                        intent.putExtra(Intent.EXTRA_TEXT, invite.link);
-                        getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink)), 500);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else if (i == revokeLinkRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("RevokeAlert", R.string.RevokeAlert));
-                    builder.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
-                    builder.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            generateLink(true);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.chatInfoDidLoaded) {
-            if (args.length != 3) {
-                return;
-            }
-            int cid = (int) args[0];
-            int guid = (int) args[2];
-            if (cid == chat_id && guid == classGuid) {
-                invite = MessagesController.getInstance().getExportedInvite(chat_id);
-                if (!(invite instanceof TLRPC.TL_chatInviteExported)) {
-                    generateLink(false);
-                } else {
-                    loading = false;
-                    if (listAdapter != null) {
-                        listAdapter.notifyDataSetChanged();
-                    }
-                }
-            }
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    private void generateLink(final boolean request) {
-        loading = true;
-        TLRPC.TL_messages_exportChatInvite req = new TLRPC.TL_messages_exportChatInvite();
-        req.chat_id = chat_id;
-        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (error == null) {
-                            invite = (TLRPC.ExportedChatInvite) response;
-                            if (request) {
-                                if (getParentActivity() == null) {
-                                    return;
-                                }
-                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                builder.setMessage(LocaleController.getString("RevokeAlertNewLink", R.string.RevokeAlertNewLink));
-                                builder.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
-                                builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
-                                showDialog(builder.create());
-                            }
-                        }
-                        loading = false;
-                        listAdapter.notifyDataSetChanged();
-                    }
-                });
-            }
-        });
-        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == revokeLinkRow || i == copyLinkRow || i == shareLinkRow || i == linkRow;
-        }
-
-        @Override
-        public int getCount() {
-            return loading ? 0 : rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new TextSettingsCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                TextSettingsCell textCell = (TextSettingsCell) view;
-                if (i == copyLinkRow) {
-                    textCell.setText(LocaleController.getString("CopyLink", R.string.CopyLink), true);
-                } else if (i == shareLinkRow) {
-                    textCell.setText(LocaleController.getString("ShareLink", R.string.ShareLink), false);
-                } else if (i == revokeLinkRow) {
-                    textCell.setText(LocaleController.getString("RevokeLink", R.string.RevokeLink), true);
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextInfoPrivacyCell(mContext);
-                }
-                if (i == shadowRow) {
-                    ((TextInfoPrivacyCell) view).setText("");
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                } else if (i == linkInfoRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("LinkInfo", R.string.LinkInfo));
-                    view.setBackgroundResource(R.drawable.greydivider);
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    view = new TextBlockCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                ((TextBlockCell) view).setText(invite != null ? invite.link : "error", false);
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == copyLinkRow || i == shareLinkRow || i == revokeLinkRow) {
-                return 0;
-            } else if (i == shadowRow || i == linkInfoRow) {
-                return 1;
-            } else if (i == linkRow) {
-                return 2;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 3;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return loading;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
deleted file mode 100644
index 10181960b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.Surface;
-import android.view.View;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.IdenticonDrawable;
-
-public class IdenticonActivity extends BaseFragment {
-    private int chat_id;
-
-    public IdenticonActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        chat_id = getArguments().getInt("chat_id");
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        fragmentView = inflater.inflate(R.layout.identicon_layout, null, false);
-        ImageView identiconView = (ImageView) fragmentView.findViewById(R.id.identicon_view);
-        TextView textView = (TextView) fragmentView.findViewById(R.id.identicon_text);
-        TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(chat_id);
-        if (encryptedChat != null) {
-            IdenticonDrawable drawable = new IdenticonDrawable();
-            identiconView.setImageDrawable(drawable);
-            drawable.setEncryptedChat(encryptedChat);
-            TLRPC.User user = MessagesController.getInstance().getUser(encryptedChat.user_id);
-            textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("EncryptionKeyDescription", R.string.EncryptionKeyDescription, user.first_name, user.first_name)));
-        }
-
-        fragmentView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        fixLayout();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        fixLayout();
-    }
-
-    private void fixLayout() {
-        ViewTreeObserver obs = fragmentView.getViewTreeObserver();
-        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                if (fragmentView != null) {
-                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
-                }
-                if (getParentActivity() == null || fragmentView == null) {
-                    return true;
-                }
-                LinearLayout layout = (LinearLayout)fragmentView;
-                WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
-                int rotation = manager.getDefaultDisplay().getRotation();
-
-                if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
-                    layout.setOrientation(LinearLayout.HORIZONTAL);
-                } else {
-                    layout.setOrientation(LinearLayout.VERTICAL);
-                }
-
-                fragmentView.setPadding(fragmentView.getPaddingLeft(), 0, fragmentView.getPaddingRight(), fragmentView.getPaddingBottom());
-                return false;
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
deleted file mode 100644
index f7f1bd2d1..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ /dev/null
@@ -1,443 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class LanguageSelectActivity extends BaseFragment {
-    private BaseFragmentAdapter listAdapter;
-    private ListView listView;
-    private boolean searchWas;
-    private boolean searching;
-    private BaseFragmentAdapter searchListViewAdapter;
-    private TextView emptyTextView;
-
-    private Timer searchTimer;
-    public ArrayList<LocaleController.LocaleInfo> searchResult;
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        searching = false;
-        searchWas = false;
-
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("Language", R.string.Language));
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
-            @Override
-            public void onSearchExpand() {
-                searching = true;
-            }
-
-            @Override
-            public boolean onSearchCollapse() {
-                search(null);
-                searching = false;
-                searchWas = false;
-                if (listView != null) {
-                    emptyTextView.setVisibility(View.GONE);
-                    listView.setAdapter(listAdapter);
-                }
-
-                return true;
-            }
-
-            @Override
-            public void onTextChanged(EditText editText) {
-                String text = editText.getText().toString();
-                search(text);
-                if (text.length() != 0) {
-                    searchWas = true;
-                    if (listView != null) {
-                        listView.setAdapter(searchListViewAdapter);
-                    }
-                }
-            }
-        });
-        item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
-
-        listAdapter = new ListAdapter(context);
-        searchListViewAdapter = new SearchAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-
-        LinearLayout emptyTextLayout = new LinearLayout(context);
-        emptyTextLayout.setVisibility(View.INVISIBLE);
-        emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
-        ((FrameLayout) fragmentView).addView(emptyTextLayout);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        emptyTextLayout.setLayoutParams(layoutParams);
-        emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        emptyTextView = new TextView(context);
-        emptyTextView.setTextColor(0xff808080);
-        emptyTextView.setTextSize(20);
-        emptyTextView.setGravity(Gravity.CENTER);
-        emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-        emptyTextLayout.addView(emptyTextView);
-        LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) emptyTextView.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        layoutParams1.weight = 0.5f;
-        emptyTextView.setLayoutParams(layoutParams1);
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        emptyTextLayout.addView(frameLayout);
-        layoutParams1 = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        layoutParams1.weight = 0.5f;
-        frameLayout.setLayoutParams(layoutParams1);
-
-        listView = new ListView(context);
-        listView.setEmptyView(emptyTextLayout);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setAdapter(listAdapter);
-        ((FrameLayout) fragmentView).addView(listView);
-        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                LocaleController.LocaleInfo localeInfo = null;
-                if (searching && searchWas) {
-                    if (i >= 0 && i < searchResult.size()) {
-                        localeInfo = searchResult.get(i);
-                    }
-                } else {
-                    if (i >= 0 && i < LocaleController.getInstance().sortedLanguages.size()) {
-                        localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
-                    }
-                }
-                if (localeInfo != null) {
-                    LocaleController.getInstance().applyLanguage(localeInfo, true);
-                    parentLayout.rebuildAllFragmentViews(false);
-                }
-                finishFragment();
-            }
-        });
-
-        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                LocaleController.LocaleInfo localeInfo = null;
-                if (searching && searchWas) {
-                    if (i >= 0 && i < searchResult.size()) {
-                        localeInfo = searchResult.get(i);
-                    }
-                } else {
-                    if (i >= 0 && i < LocaleController.getInstance().sortedLanguages.size()) {
-                        localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
-                    }
-                }
-                if (localeInfo == null || localeInfo.pathToFile == null || getParentActivity() == null) {
-                    return false;
-                }
-                final LocaleController.LocaleInfo finalLocaleInfo = localeInfo;
-                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                builder.setMessage(LocaleController.getString("DeleteLocalization", R.string.DeleteLocalization));
-                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        if (LocaleController.getInstance().deleteLanguage(finalLocaleInfo)) {
-                            if (searchResult != null) {
-                                searchResult.remove(finalLocaleInfo);
-                            }
-                            if (listAdapter != null) {
-                                listAdapter.notifyDataSetChanged();
-                            }
-                            if (searchListViewAdapter != null) {
-                                searchListViewAdapter.notifyDataSetChanged();
-                            }
-                        }
-                    }
-                });
-                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                showDialog(builder.create());
-                return true;
-            }
-        });
-
-        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView absListView, int i) {
-                if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
-                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
-                }
-            }
-
-            @Override
-            public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    public void search(final String query) {
-        if (query == null) {
-            searchResult = null;
-        } else {
-            try {
-                if (searchTimer != null) {
-                    searchTimer.cancel();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
-                        searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    processSearch(query);
-                }
-            }, 100, 300);
-        }
-    }
-
-    private void processSearch(final String query) {
-        Utilities.searchQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-
-                String q = query.trim().toLowerCase();
-                if (q.length() == 0) {
-                    updateSearchResults(new ArrayList<LocaleController.LocaleInfo>());
-                    return;
-                }
-                long time = System.currentTimeMillis();
-                ArrayList<LocaleController.LocaleInfo> resultArray = new ArrayList<>();
-
-                for (LocaleController.LocaleInfo c : LocaleController.getInstance().sortedLanguages) {
-                    if (c.name.toLowerCase().startsWith(query) || c.nameEnglish.toLowerCase().startsWith(query)) {
-                        resultArray.add(c);
-                    }
-                }
-
-                updateSearchResults(resultArray);
-            }
-        });
-    }
-
-    private void updateSearchResults(final ArrayList<LocaleController.LocaleInfo> arrCounties) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                searchResult = arrCounties;
-                searchListViewAdapter.notifyDataSetChanged();
-            }
-        });
-    }
-
-    private class SearchAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public SearchAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return true;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return true;
-        }
-
-        @Override
-        public int getCount() {
-            if (searchResult == null) {
-                return 0;
-            }
-            return searchResult.size();
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new TextSettingsCell(mContext);
-            }
-
-            LocaleController.LocaleInfo c = searchResult.get(i);
-            ((TextSettingsCell) view).setText(c.name, i != searchResult.size() - 1);
-
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return searchResult == null || searchResult.size() == 0;
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return true;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return true;
-        }
-
-        @Override
-        public int getCount() {
-            if (LocaleController.getInstance().sortedLanguages == null) {
-                return 0;
-            }
-            return LocaleController.getInstance().sortedLanguages.size();
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new TextSettingsCell(mContext);
-            }
-
-            LocaleController.LocaleInfo localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
-            ((TextSettingsCell) view).setText(localeInfo.name, i != LocaleController.getInstance().sortedLanguages.size() - 1);
-
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 1;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return LocaleController.getInstance().sortedLanguages == null || LocaleController.getInstance().sortedLanguages.size() == 0;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
deleted file mode 100644
index 1b1f81c04..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
+++ /dev/null
@@ -1,513 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.text.Spannable;
-import android.text.method.LinkMovementMethod;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.HeaderCell;
-import org.telegram.ui.Cells.TextInfoPrivacyCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-
-public class LastSeenActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-    private View doneButton;
-
-    private int currentType = 0;
-    private ArrayList<Integer> currentPlus;
-    private ArrayList<Integer> currentMinus;
-
-    private int lastSeenSectionRow;
-    private int everybodyRow;
-    private int myContactsRow;
-    private int nobodyRow;
-    private int lastSeenDetailRow;
-    private int shareSectionRow;
-    private int alwaysShareRow;
-    private int neverShareRow;
-    private int shareDetailRow;
-    private int rowCount;
-
-    private final static int done_button = 1;
-
-    private static class LinkMovementMethodMy extends LinkMovementMethod {
-        @Override
-        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
-            try {
-                return super.onTouchEvent(widget, buffer, event);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            return false;
-        }
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        checkPrivacy();
-        updateRows();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.privacyRulesUpdated);
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.privacyRulesUpdated);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-
-                    if (currentType != 0) {
-                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                        boolean showed = preferences.getBoolean("privacyAlertShowed", false);
-                        if (!showed) {
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setMessage(LocaleController.getString("CustomHelp", R.string.CustomHelp));
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    applyCurrentPrivacySettings();
-                                    preferences.edit().putBoolean("privacyAlertShowed", true).commit();
-                                }
-                            });
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                            showDialog(builder.create());
-                            return;
-                        }
-                    }
-                    applyCurrentPrivacySettings();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-        doneButton.setVisibility(View.GONE);
-
-        listAdapter = new ListAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(0xfff0f0f0);
-
-        ListView listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDrawSelectorOnTop(true);
-        frameLayout.addView(listView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        listView.setLayoutParams(layoutParams);
-        listView.setAdapter(listAdapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (i == nobodyRow || i == everybodyRow || i == myContactsRow) {
-                    int newType = currentType;
-                    if (i == nobodyRow) {
-                        newType = 1;
-                    } else if (i == everybodyRow) {
-                        newType = 0;
-                    } else if (i == myContactsRow) {
-                        newType = 2;
-                    }
-                    if (newType == currentType) {
-                        return;
-                    }
-                    doneButton.setVisibility(View.VISIBLE);
-                    currentType = newType;
-                    updateRows();
-                } else if (i == neverShareRow || i == alwaysShareRow) {
-                    ArrayList<Integer> createFromArray;
-                    if (i == neverShareRow) {
-                        createFromArray = currentMinus;
-                    } else {
-                        createFromArray = currentPlus;
-                    }
-                    if (createFromArray.isEmpty()) {
-                        Bundle args = new Bundle();
-                        args.putBoolean(i == neverShareRow ? "isNeverShare" : "isAlwaysShare", true);
-                        GroupCreateActivity fragment = new GroupCreateActivity(args);
-                        fragment.setDelegate(new GroupCreateActivity.GroupCreateActivityDelegate() {
-                            @Override
-                            public void didSelectUsers(ArrayList<Integer> ids) {
-                                if (i == neverShareRow) {
-                                    currentMinus = ids;
-                                    for (Integer id : currentMinus) {
-                                        currentPlus.remove(id);
-                                    }
-                                } else {
-                                    currentPlus = ids;
-                                    for (Integer id : currentPlus) {
-                                        currentMinus.remove(id);
-                                    }
-                                }
-                                doneButton.setVisibility(View.VISIBLE);
-                                listAdapter.notifyDataSetChanged();
-                            }
-                        });
-                        presentFragment(fragment);
-                    } else {
-                        LastSeenUsersActivity fragment = new LastSeenUsersActivity(createFromArray, i == alwaysShareRow);
-                        fragment.setDelegate(new LastSeenUsersActivity.LastSeenUsersActivityDelegate() {
-                            @Override
-                            public void didUpdatedUserList(ArrayList<Integer> ids, boolean added) {
-                                if (i == neverShareRow) {
-                                    currentMinus = ids;
-                                    if (added) {
-                                        for (Integer id : currentMinus) {
-                                            currentPlus.remove(id);
-                                        }
-                                    }
-                                } else {
-                                    currentPlus = ids;
-                                    if (added) {
-                                        for (Integer id : currentPlus) {
-                                            currentMinus.remove(id);
-                                        }
-                                    }
-                                }
-                                doneButton.setVisibility(View.VISIBLE);
-                                listAdapter.notifyDataSetChanged();
-                            }
-                        });
-                        presentFragment(fragment);
-                    }
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.privacyRulesUpdated) {
-            checkPrivacy();
-        }
-    }
-
-    private void applyCurrentPrivacySettings() {
-        TLRPC.TL_account_setPrivacy req = new TLRPC.TL_account_setPrivacy();
-        req.key = new TLRPC.TL_inputPrivacyKeyStatusTimestamp();
-        if (currentType != 0 && currentPlus.size() > 0) {
-            TLRPC.TL_inputPrivacyValueAllowUsers rule = new TLRPC.TL_inputPrivacyValueAllowUsers();
-            for (Integer uid : currentPlus) {
-                TLRPC.User user = MessagesController.getInstance().getUser(uid);
-                if (user != null) {
-                    TLRPC.InputUser inputUser = MessagesController.getInputUser(user);
-                    if (inputUser != null) {
-                        rule.users.add(inputUser);
-                    }
-                }
-            }
-            req.rules.add(rule);
-        }
-        if (currentType != 1 && currentMinus.size() > 0) {
-            TLRPC.TL_inputPrivacyValueDisallowUsers rule = new TLRPC.TL_inputPrivacyValueDisallowUsers();
-            for (Integer uid : currentMinus) {
-                TLRPC.User user = MessagesController.getInstance().getUser(uid);
-                if (user != null) {
-                    TLRPC.InputUser inputUser = MessagesController.getInputUser(user);
-                    if (inputUser != null) {
-                        rule.users.add(inputUser);
-                    }
-                }
-            }
-            req.rules.add(rule);
-        }
-        if (currentType == 0) {
-            req.rules.add(new TLRPC.TL_inputPrivacyValueAllowAll());
-        } else if (currentType == 1) {
-            req.rules.add(new TLRPC.TL_inputPrivacyValueDisallowAll());
-        } else if (currentType == 2) {
-            req.rules.add(new TLRPC.TL_inputPrivacyValueAllowContacts());
-        }
-        final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-        progressDialog.show();
-
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            progressDialog.dismiss();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        if (error == null) {
-                            finishFragment();
-                            TLRPC.TL_account_privacyRules rules = (TLRPC.TL_account_privacyRules) response;
-                            MessagesController.getInstance().putUsers(rules.users, false);
-                            ContactsController.getInstance().setPrivacyRules(rules.rules);
-                        } else {
-                            showErrorAlert();
-                        }
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-    }
-
-    private void showErrorAlert() {
-        if (getParentActivity() == null) {
-            return;
-        }
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        builder.setMessage(LocaleController.getString("PrivacyFloodControlError", R.string.PrivacyFloodControlError));
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        showDialog(builder.create());
-    }
-
-    private void checkPrivacy() {
-        currentPlus = new ArrayList<>();
-        currentMinus = new ArrayList<>();
-        ArrayList<TLRPC.PrivacyRule> privacyRules = ContactsController.getInstance().getPrivacyRules();
-        if (privacyRules.size() == 0) {
-            currentType = 1;
-            return;
-        }
-        int type = -1;
-        for (TLRPC.PrivacyRule rule : privacyRules) {
-            if (rule instanceof TLRPC.TL_privacyValueAllowUsers) {
-                currentPlus.addAll(rule.users);
-            } else if (rule instanceof TLRPC.TL_privacyValueDisallowUsers) {
-                currentMinus.addAll(rule.users);
-            } else if (rule instanceof TLRPC.TL_privacyValueAllowAll) {
-                type = 0;
-            } else if (rule instanceof TLRPC.TL_privacyValueDisallowAll) {
-                type = 1;
-            } else {
-                type = 2;
-            }
-        }
-        if (type == 0 || type == -1 && currentMinus.size() > 0) {
-            currentType = 0;
-        } else if (type == 2 || type == -1 && currentMinus.size() > 0 && currentPlus.size() > 0) {
-            currentType = 2;
-        } else if (type == 1 || type == -1 && currentPlus.size() > 0) {
-            currentType = 1;
-        }
-        if (doneButton != null) {
-            doneButton.setVisibility(View.GONE);
-        }
-        updateRows();
-    }
-
-    private void updateRows() {
-        rowCount = 0;
-        lastSeenSectionRow = rowCount++;
-        everybodyRow = rowCount++;
-        myContactsRow = rowCount++;
-        nobodyRow = rowCount++;
-        lastSeenDetailRow = rowCount++;
-        shareSectionRow = rowCount++;
-        if (currentType == 1 || currentType == 2) {
-            alwaysShareRow = rowCount++;
-        } else {
-            alwaysShareRow = -1;
-        }
-        if (currentType == 0 || currentType == 2) {
-            neverShareRow = rowCount++;
-        } else {
-            neverShareRow = -1;
-        }
-        shareDetailRow = rowCount++;
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == nobodyRow || i == everybodyRow || i == myContactsRow || i == neverShareRow || i == alwaysShareRow;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new TextSettingsCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                TextSettingsCell textCell = (TextSettingsCell) view;
-                if (i == everybodyRow) {
-                    textCell.setTextAndIcon(LocaleController.getString("LastSeenEverybody", R.string.LastSeenEverybody), currentType == 0 ? R.drawable.check_blue : 0, true);
-                } else if (i == myContactsRow) {
-                    textCell.setTextAndIcon(LocaleController.getString("LastSeenContacts", R.string.LastSeenContacts), currentType == 2 ? R.drawable.check_blue : 0, true);
-                } else if (i == nobodyRow) {
-                    textCell.setTextAndIcon(LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody), currentType == 1 ? R.drawable.check_blue : 0, false);
-                } else if (i == alwaysShareRow) {
-                    String value;
-                    if (currentPlus.size() != 0) {
-                        value = LocaleController.formatPluralString("Users", currentPlus.size());
-                    } else {
-                        value = LocaleController.getString("EmpryUsersPlaceholder", R.string.EmpryUsersPlaceholder);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("AlwaysShareWith", R.string.AlwaysShareWith), value, neverShareRow != -1);
-                } else if (i == neverShareRow) {
-                    String value;
-                    if (currentMinus.size() != 0) {
-                        value = LocaleController.formatPluralString("Users", currentMinus.size());
-                    } else {
-                        value = LocaleController.getString("EmpryUsersPlaceholder", R.string.EmpryUsersPlaceholder);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("NeverShareWith", R.string.NeverShareWith), value, false);
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextInfoPrivacyCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                if (i == lastSeenDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("CustomHelp", R.string.CustomHelp));
-                    view.setBackgroundResource(R.drawable.greydivider);
-                } else if (i == shareDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("CustomShareSettingsHelp", R.string.CustomShareSettingsHelp));
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    view = new HeaderCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                if (i == lastSeenSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("LastSeenTitle", R.string.LastSeenTitle));
-                } else if (i == shareSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("AddExceptions", R.string.AddExceptions));
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == alwaysShareRow || i == neverShareRow || i == everybodyRow || i == myContactsRow || i == nobodyRow) {
-                return 0;
-            } else if (i == shareDetailRow || i == lastSeenDetailRow) {
-                return 1;
-            } else if (i == lastSeenSectionRow || i == shareSectionRow) {
-                return 2;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 3;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
deleted file mode 100644
index b476860fc..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
+++ /dev/null
@@ -1,308 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextInfoCell;
-import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-
-public class LastSeenUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    public interface LastSeenUsersActivityDelegate {
-        void didUpdatedUserList(ArrayList<Integer> ids, boolean added);
-    }
-
-    private ListView listView;
-    private ListAdapter listViewAdapter;
-    private int selectedUserId;
-
-    private ArrayList<Integer> uidArray;
-    private boolean isAlwaysShare;
-
-    private LastSeenUsersActivityDelegate delegate;
-
-    private final static int block_user = 1;
-
-    public LastSeenUsersActivity(ArrayList<Integer> users, boolean always) {
-        super();
-        uidArray = users;
-        isAlwaysShare = always;
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        if (isAlwaysShare) {
-            actionBar.setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
-        } else {
-            actionBar.setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
-        }
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == block_user) {
-                    Bundle args = new Bundle();
-                    args.putBoolean(isAlwaysShare ? "isAlwaysShare" : "isNeverShare", true);
-                    GroupCreateActivity fragment = new GroupCreateActivity(args);
-                    fragment.setDelegate(new GroupCreateActivity.GroupCreateActivityDelegate() {
-                        @Override
-                        public void didSelectUsers(ArrayList<Integer> ids) {
-                            for (Integer id : ids) {
-                                if (uidArray.contains(id)) {
-                                    continue;
-                                }
-                                uidArray.add(id);
-                            }
-                            listViewAdapter.notifyDataSetChanged();
-                            if (delegate != null) {
-                                delegate.didUpdatedUserList(uidArray, true);
-                            }
-                        }
-                    });
-                    presentFragment(fragment);
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.addItem(block_user, R.drawable.plus);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        TextView emptyTextView = new TextView(context);
-        emptyTextView.setTextColor(0xff808080);
-        emptyTextView.setTextSize(20);
-        emptyTextView.setGravity(Gravity.CENTER);
-        emptyTextView.setVisibility(View.INVISIBLE);
-        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-        frameLayout.addView(emptyTextView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emptyTextView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        emptyTextView.setLayoutParams(layoutParams);
-        emptyTextView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        listView = new ListView(context);
-        listView.setEmptyView(emptyTextView);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setAdapter(listViewAdapter = new ListAdapter(context));
-        if (Build.VERSION.SDK_INT >= 11) {
-            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
-        }
-        frameLayout.addView(listView);
-        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                if (i < uidArray.size()) {
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", uidArray.get(i));
-                    presentFragment(new ProfileActivity(args));
-                }
-            }
-        });
-
-        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                if (i < 0 || i >= uidArray.size() || getParentActivity() == null) {
-                    return true;
-                }
-                selectedUserId = uidArray.get(i);
-
-                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                CharSequence[] items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
-                builder.setItems(items, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        if (i == 0) {
-                            uidArray.remove((Integer) selectedUserId);
-                            listViewAdapter.notifyDataSetChanged();
-                            if (delegate != null) {
-                                delegate.didUpdatedUserList(uidArray, false);
-                            }
-                        }
-                    }
-                });
-                showDialog(builder.create());
-                return true;
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                updateVisibleRows(mask);
-            }
-        }
-    }
-
-    private void updateVisibleRows(int mask) {
-        if (listView == null) {
-            return;
-        }
-        int count = listView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View child = listView.getChildAt(a);
-            if (child instanceof UserCell) {
-                ((UserCell) child).update(mask);
-            }
-        }
-    }
-
-    public void setDelegate(LastSeenUsersActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listViewAdapter != null) {
-            listViewAdapter.notifyDataSetChanged();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i != uidArray.size();
-        }
-
-        @Override
-        public int getCount() {
-            if (uidArray.isEmpty()) {
-                return 0;
-            }
-            return uidArray.size() + 1;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new UserCell(mContext, 1);
-                }
-                TLRPC.User user = MessagesController.getInstance().getUser(uidArray.get(i));
-                ((UserCell)view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextInfoCell(mContext);
-                    ((TextInfoCell) view).setText(LocaleController.getString("RemoveFromListText", R.string.RemoveFromListText));
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if(i == uidArray.size()) {
-                return 1;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return uidArray.isEmpty();
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 72ec13cd6..52caf478a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -269,31 +269,7 @@ public void onClick(View v) {
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                if (position == 2) {
-                    if (!MessagesController.isFeatureEnabled("chat_create", actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1))) {
-                        return;
-                    }
-                    presentFragment(new GroupCreateActivity());
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 3) {
-                    Bundle args = new Bundle();
-                    args.putBoolean("onlyUsers", true);
-                    args.putBoolean("destroyAfterSelect", true);
-                    args.putBoolean("createSecretChat", true);
-                    presentFragment(new ContactsActivity(args));
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 4) {
-                    if (!MessagesController.isFeatureEnabled("broadcast_create", actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1))) {
-                        return;
-                    }
-                    Bundle args = new Bundle();
-                    args.putBoolean("broadcast", true);
-                    presentFragment(new GroupCreateActivity(args));
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 6) {
-                    presentFragment(new ContactsActivity(null));
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 7) {
+                if (position == 7) {
                     try {
                         Intent intent = new Intent(Intent.ACTION_SEND);
                         intent.setType("text/plain");
@@ -303,9 +279,6 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                         FileLog.e("tmessages", e);
                     }
                     drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 8) {
-                    presentFragment(new SettingsActivity());
-                    drawerLayoutContainer.closeDrawer(false);
                 } else if (position == 9) {
                     try {
                         Intent pickIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl)));
@@ -371,34 +344,6 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                                     }
                                 }
                                 break;
-                            case "settings": {
-                                SettingsActivity settings = new SettingsActivity();
-                                actionBarLayout.addFragmentToStack(settings);
-                                settings.restoreSelfArgs(savedInstanceState);
-                                break;
-                            }
-                            case "group":
-                                if (args != null) {
-                                    GroupCreateFinalActivity group = new GroupCreateFinalActivity(args);
-                                    if (actionBarLayout.addFragmentToStack(group)) {
-                                        group.restoreSelfArgs(savedInstanceState);
-                                    }
-                                }
-                                break;
-                            case "chat_profile":
-                                if (args != null) {
-                                    ProfileActivity profile = new ProfileActivity(args);
-                                    if (actionBarLayout.addFragmentToStack(profile)) {
-                                        profile.restoreSelfArgs(savedInstanceState);
-                                    }
-                                }
-                                break;
-                            case "wallpapers": {
-                                WallpapersActivity settings = new WallpapersActivity();
-                                actionBarLayout.addFragmentToStack(settings);
-                                settings.restoreSelfArgs(savedInstanceState);
-                                break;
-                            }
                         }
                     }
                 }
@@ -821,16 +766,6 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                 } else {
                     drawerLayoutContainer.setAllowOpenDrawer(true, false);
                 }
-            } else if (open_settings != 0) {
-                actionBarLayout.presentFragment(new SettingsActivity(), false, true, true);
-                if (AndroidUtilities.isTablet()) {
-                    actionBarLayout.showLastFragment();
-                    rightActionBarLayout.showLastFragment();
-                    drawerLayoutContainer.setAllowOpenDrawer(false, false);
-                } else {
-                    drawerLayoutContainer.setAllowOpenDrawer(true, false);
-                }
-                pushOpened = true;
             }
 
             if (!pushOpened && !isNew) {
@@ -1297,7 +1232,6 @@ protected void onPause() {
     @Override
     protected void onDestroy() {
         PhotoViewer.getInstance().destroyPhotoViewer();
-        SecretPhotoViewer.getInstance().destroyPhotoViewer();
         try {
             if (visibleDialog != null) {
                 visibleDialog.dismiss();
@@ -1473,16 +1407,6 @@ protected void onSaveInstanceState(Bundle outState) {
                 if (lastFragment instanceof ChatActivity && args != null) {
                     outState.putBundle("args", args);
                     outState.putString("fragment", "chat");
-                } else if (lastFragment instanceof SettingsActivity) {
-                    outState.putString("fragment", "settings");
-                } else if (lastFragment instanceof GroupCreateFinalActivity && args != null) {
-                    outState.putBundle("args", args);
-                    outState.putString("fragment", "group");
-                } else if (lastFragment instanceof WallpapersActivity) {
-                    outState.putString("fragment", "wallpapers");
-                } else if (lastFragment instanceof ProfileActivity && ((ProfileActivity) lastFragment).isChat() && args != null) {
-                    outState.putBundle("args", args);
-                    outState.putString("fragment", "chat_profile");
                 }
                 lastFragment.saveSelfArgs(outState);
             }
@@ -1590,7 +1514,7 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {
     @Override
     public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
             if (fragment instanceof MessagesActivity) {
                 MessagesActivity messagesActivity = (MessagesActivity)fragment;
                 if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
@@ -1671,7 +1595,7 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
             }
             return true;
         } else {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity), false);
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity), false);
             return true;
         }
     }
@@ -1679,7 +1603,7 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
     @Override
     public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
             if (fragment instanceof MessagesActivity) {
                 MessagesActivity messagesActivity = (MessagesActivity)fragment;
                 if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
@@ -1736,7 +1660,7 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
             }
             return true;
         } else {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity), false);
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity), false);
             return true;
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 2ae84cf47..357947214 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -436,20 +436,6 @@ public PhoneView(Context context) {
             layoutParams.height = AndroidUtilities.dp(36);
             layoutParams.bottomMargin = AndroidUtilities.dp(14);
             countryButton.setLayoutParams(layoutParams);
-            countryButton.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    CountrySelectActivity fragment = new CountrySelectActivity();
-                    fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
-                        @Override
-                        public void didSelectCountry(String name) {
-                            selectCountry(name);
-                            phoneField.requestFocus();
-                        }
-                    });
-                    presentFragment(fragment);
-                }
-            });
 
             View view = new View(context);
             view.setPadding(AndroidUtilities.dp(12), 0, AndroidUtilities.dp(12), 0);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index ed15ce845..8df233ea7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -547,14 +547,7 @@ public void getOutline(View view, Outline outline) {
             });
         }
         frameLayout.addView(floatingButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 14 : 0, 0, LocaleController.isRTL ? 0 : 14, 14));
-        floatingButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Bundle args = new Bundle();
-                args.putBoolean("destroyAfterSelect", true);
-                presentFragment(new ContactsActivity(args));
-            }
-        });
+
 
         listView.setOnScrollListener(new RecyclerView.OnScrollListener() {
             @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
deleted file mode 100644
index a6d162c9a..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ /dev/null
@@ -1,854 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.os.Build;
-import android.provider.Settings;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.Toast;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationsController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.HeaderCell;
-import org.telegram.ui.Cells.ShadowSectionCell;
-import org.telegram.ui.Cells.TextCheckCell;
-import org.telegram.ui.Cells.TextColorCell;
-import org.telegram.ui.Cells.TextDetailSettingsCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.ColorPickerView;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class NotificationsSettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    private ListView listView;
-    private boolean reseting = false;
-
-    private int notificationsServiceRow;
-    private int messageSectionRow2;
-    private int messageSectionRow;
-    private int messageAlertRow;
-    private int messagePreviewRow;
-    private int messageVibrateRow;
-    private int messageSoundRow;
-    private int messageLedRow;
-    private int messagePopupNotificationRow;
-    private int messagePriorityRow;
-    private int groupSectionRow2;
-    private int groupSectionRow;
-    private int groupAlertRow;
-    private int groupPreviewRow;
-    private int groupVibrateRow;
-    private int groupSoundRow;
-    private int groupLedRow;
-    private int groupPopupNotificationRow;
-    private int groupPriorityRow;
-    private int inappSectionRow2;
-    private int inappSectionRow;
-    private int inappSoundRow;
-    private int inappVibrateRow;
-    private int inappPreviewRow;
-    private int inchatSoundRow;
-    private int inappPriorityRow;
-    private int eventsSectionRow2;
-    private int eventsSectionRow;
-    private int contactJoinedRow;
-    private int otherSectionRow2;
-    private int otherSectionRow;
-    private int badgeNumberRow;
-    private int pebbleAlertRow;
-    private int repeatRow;
-    private int resetSectionRow2;
-    private int resetSectionRow;
-    private int resetNotificationsRow;
-    private int rowCount = 0;
-
-    @Override
-    public boolean onFragmentCreate() {
-        notificationsServiceRow = rowCount++;
-        messageSectionRow2 = rowCount++;
-        messageSectionRow = rowCount++;
-        messageAlertRow = rowCount++;
-        messagePreviewRow = rowCount++;
-        messageLedRow = rowCount++;
-        messageVibrateRow = rowCount++;
-        messagePopupNotificationRow = rowCount++;
-        messageSoundRow = rowCount++;
-        if (Build.VERSION.SDK_INT >= 21) {
-            messagePriorityRow = rowCount++;
-        } else {
-            messagePriorityRow = -1;
-        }
-        groupSectionRow2 = rowCount++;
-        groupSectionRow = rowCount++;
-        groupAlertRow = rowCount++;
-        groupPreviewRow = rowCount++;
-        groupLedRow = rowCount++;
-        groupVibrateRow = rowCount++;
-        groupPopupNotificationRow = rowCount++;
-        groupSoundRow = rowCount++;
-        if (Build.VERSION.SDK_INT >= 21) {
-            groupPriorityRow = rowCount++;
-        } else {
-            groupPriorityRow = -1;
-        }
-        inappSectionRow2 = rowCount++;
-        inappSectionRow = rowCount++;
-        inappSoundRow = rowCount++;
-        inappVibrateRow = rowCount++;
-        inappPreviewRow = rowCount++;
-        inchatSoundRow = rowCount++;
-        if (Build.VERSION.SDK_INT >= 21) {
-            inappPriorityRow = rowCount++;
-        } else {
-            inappPriorityRow = -1;
-        }
-        eventsSectionRow2 = rowCount++;
-        eventsSectionRow = rowCount++;
-        contactJoinedRow = rowCount++;
-        otherSectionRow2 = rowCount++;
-        otherSectionRow = rowCount++;
-        badgeNumberRow = rowCount++;
-        pebbleAlertRow = rowCount++;
-        repeatRow = rowCount++;
-        resetSectionRow2 = rowCount++;
-        resetSectionRow = rowCount++;
-        resetNotificationsRow = rowCount++;
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        frameLayout.addView(listView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-        listView.setAdapter(new ListAdapter(context));
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                boolean enabled = false;
-                if (i == messageAlertRow || i == groupAlertRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    if (i == messageAlertRow) {
-                        enabled = preferences.getBoolean("EnableAll", true);
-                        editor.putBoolean("EnableAll", !enabled);
-                    } else if (i == groupAlertRow) {
-                        enabled = preferences.getBoolean("EnableGroup", true);
-                        editor.putBoolean("EnableGroup", !enabled);
-                    }
-                    editor.commit();
-                    updateServerNotificationsSettings(i == groupAlertRow);
-                } else if (i == messagePreviewRow || i == groupPreviewRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    if (i == messagePreviewRow) {
-                        enabled = preferences.getBoolean("EnablePreviewAll", true);
-                        editor.putBoolean("EnablePreviewAll", !enabled);
-                    } else if (i == groupPreviewRow) {
-                        enabled = preferences.getBoolean("EnablePreviewGroup", true);
-                        editor.putBoolean("EnablePreviewGroup", !enabled);
-                    }
-                    editor.commit();
-                    updateServerNotificationsSettings(i == groupPreviewRow);
-                } else if (i == messageSoundRow || i == groupSoundRow) {
-                    try {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
-                        Uri currentSound = null;
-
-                        String defaultPath = null;
-                        Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-                        if (defaultUri != null) {
-                            defaultPath = defaultUri.getPath();
-                        }
-
-                        if (i == messageSoundRow) {
-                            String path = preferences.getString("GlobalSoundPath", defaultPath);
-                            if (path != null && !path.equals("NoSound")) {
-                                if (path.equals(defaultPath)) {
-                                    currentSound = defaultUri;
-                                } else {
-                                    currentSound = Uri.parse(path);
-                                }
-                            }
-                        } else if (i == groupSoundRow) {
-                            String path = preferences.getString("GroupSoundPath", defaultPath);
-                            if (path != null && !path.equals("NoSound")) {
-                                if (path.equals(defaultPath)) {
-                                    currentSound = defaultUri;
-                                } else {
-                                    currentSound = Uri.parse(path);
-                                }
-                            }
-                        }
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
-                        startActivityForResult(tmpIntent, i);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else if (i == resetNotificationsRow) {
-                    if (reseting) {
-                        return;
-                    }
-                    reseting = true;
-                    TLRPC.TL_account_resetNotifySettings req = new TLRPC.TL_account_resetNotifySettings();
-                    ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                        @Override
-                        public void run(TLObject response, TLRPC.TL_error error) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    MessagesController.getInstance().enableJoined = true;
-                                    reseting = false;
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                    SharedPreferences.Editor editor = preferences.edit();
-                                    editor.clear();
-                                    editor.commit();
-                                    if (listView != null) {
-                                        listView.invalidateViews();
-                                    }
-                                    if (getParentActivity() != null) {
-                                        Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("ResetNotificationsText", R.string.ResetNotificationsText), Toast.LENGTH_SHORT);
-                                        toast.show();
-                                    }
-                                }
-                            });
-                        }
-                    });
-                } else if (i == inappSoundRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnableInAppSounds", true);
-                    editor.putBoolean("EnableInAppSounds", !enabled);
-                    editor.commit();
-                } else if (i == inappVibrateRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnableInAppVibrate", true);
-                    editor.putBoolean("EnableInAppVibrate", !enabled);
-                    editor.commit();
-                } else if (i == inappPreviewRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnableInAppPreview", true);
-                    editor.putBoolean("EnableInAppPreview", !enabled);
-                    editor.commit();
-                } else if (i == inchatSoundRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnableInChatSound", true);
-                    editor.putBoolean("EnableInChatSound", !enabled);
-                    editor.commit();
-                    NotificationsController.getInstance().setInChatSoundEnabled(!enabled);
-                } else if (i == inappPriorityRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnableInAppPriority", false);
-                    editor.putBoolean("EnableInAppPriority", !enabled);
-                    editor.commit();
-                } else if (i == contactJoinedRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnableContactJoined", true);
-                    MessagesController.getInstance().enableJoined = !enabled;
-                    editor.putBoolean("EnableContactJoined", !enabled);
-                    editor.commit();
-                } else if (i == pebbleAlertRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("EnablePebbleNotifications", false);
-                    editor.putBoolean("EnablePebbleNotifications", !enabled);
-                    editor.commit();
-                } else if (i == badgeNumberRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    enabled = preferences.getBoolean("badgeNumber", true);
-                    editor.putBoolean("badgeNumber", !enabled);
-                    editor.commit();
-                    NotificationsController.getInstance().setBadgeEnabled(!enabled);
-                } else if (i == notificationsServiceRow) {
-                    final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    enabled = preferences.getBoolean("pushService", true);
-                    if (!enabled) {
-                        final SharedPreferences.Editor editor = preferences.edit();
-                        editor.putBoolean("pushService", !enabled);
-                        editor.commit();
-                        ApplicationLoader.startPushService();
-                    } else {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("NotificationsServiceDisableInfo", R.string.NotificationsServiceDisableInfo));
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                ApplicationLoader.stopPushService();
-                                final SharedPreferences.Editor editor = preferences.edit();
-                                editor.putBoolean("pushService", false);
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
-                    }
-                } else if (i == messageLedRow || i == groupLedRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-
-                    LinearLayout linearLayout = new LinearLayout(getParentActivity());
-                    linearLayout.setOrientation(LinearLayout.VERTICAL);
-                    final ColorPickerView colorPickerView = new ColorPickerView(getParentActivity());
-                    linearLayout.addView(colorPickerView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
-
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    if (i == messageLedRow) {
-                        colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
-                    } else if (i == groupLedRow) {
-                        colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
-                    }
-
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
-                    builder.setView(linearLayout);
-                    builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int which) {
-                            final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            if (i == messageLedRow) {
-                                editor.putInt("MessagesLed", colorPickerView.getColor());
-                            } else if (i == groupLedRow) {
-                                editor.putInt("GroupLed", colorPickerView.getColor());
-                            }
-                            editor.commit();
-                            listView.invalidateViews();
-                        }
-                    });
-                    builder.setNeutralButton(LocaleController.getString("LedDisabled", R.string.LedDisabled), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            if (i == messageLedRow) {
-                                editor.putInt("MessagesLed", 0);
-                            } else if (i == groupLedRow) {
-                                editor.putInt("GroupLed", 0);
-                            }
-                            editor.commit();
-                            listView.invalidateViews();
-                        }
-                    });
-                    showDialog(builder.create());
-                } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("PopupNotification", R.string.PopupNotification));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("NoPopup", R.string.NoPopup),
-                            LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn),
-                            LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff),
-                            LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            if (i == messagePopupNotificationRow) {
-                                editor.putInt("popupAll", which);
-                            } else if (i == groupPopupNotificationRow) {
-                                editor.putInt("popupGroup", which);
-                            }
-                            editor.commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == messageVibrateRow || i == groupVibrateRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled),
-                            LocaleController.getString("Default", R.string.Default),
-                            LocaleController.getString("Short", R.string.Short),
-                            LocaleController.getString("Long", R.string.Long),
-                            LocaleController.getString("OnlyIfSilent", R.string.OnlyIfSilent)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            String param = "vibrate_messages";
-                            if (i == groupVibrateRow) {
-                                param = "vibrate_group";
-                            }
-                            if (which == 0) {
-                                editor.putInt(param, 2);
-                            } else if (which == 1) {
-                                editor.putInt(param, 0);
-                            } else if (which == 2) {
-                                editor.putInt(param, 1);
-                            } else if (which == 3) {
-                                editor.putInt(param, 3);
-                            } else if (which == 4) {
-                                editor.putInt(param, 4);
-                            }
-                            editor.commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == messagePriorityRow || i == groupPriorityRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault),
-                            LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh),
-                            LocaleController.getString("NotificationsPriorityMax", R.string.NotificationsPriorityMax)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            if (i == messagePriorityRow) {
-                                preferences.edit().putInt("priority_messages", which).commit();
-                            } else if (i == groupPriorityRow) {
-                                preferences.edit().putInt("priority_group", which).commit();
-                            }
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == repeatRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("RepeatDisabled", R.string.RepeatDisabled),
-                            LocaleController.formatPluralString("Minutes", 5),
-                            LocaleController.formatPluralString("Minutes", 10),
-                            LocaleController.formatPluralString("Minutes", 30),
-                            LocaleController.formatPluralString("Hours", 1),
-                            LocaleController.formatPluralString("Hours", 2),
-                            LocaleController.formatPluralString("Hours", 4)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            int minutes = 0;
-                            if (which == 1) {
-                                minutes = 5;
-                            } else if (which == 2) {
-                                minutes = 10;
-                            } else if (which == 3) {
-                                minutes = 30;
-                            } else if (which == 4) {
-                                minutes = 60;
-                            } else if (which == 5) {
-                                minutes = 60 * 2;
-                            } else if (which == 6) {
-                                minutes = 60 * 4;
-                            }
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            preferences.edit().putInt("repeat_messages", minutes).commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-                if (view instanceof TextCheckCell) {
-                    ((TextCheckCell) view).setChecked(!enabled);
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    public void updateServerNotificationsSettings(boolean group) {
-        //disable global settings sync
-        /*SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
-        req.settings = new TLRPC.TL_inputPeerNotifySettings();
-        req.settings.sound = "default";
-        req.settings.events_mask = 0;
-        if (!group) {
-            req.peer = new TLRPC.TL_inputNotifyUsers();
-            req.settings.mute_until = preferences.getBoolean("EnableAll", true) ? 0 : Integer.MAX_VALUE;
-            req.settings.show_previews = preferences.getBoolean("EnablePreviewAll", true);
-        } else {
-            req.peer = new TLRPC.TL_inputNotifyChats();
-            req.settings.mute_until = preferences.getBoolean("EnableGroup", true) ? 0 : Integer.MAX_VALUE;
-            req.settings.show_previews = preferences.getBoolean("EnablePreviewGroup", true);
-        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-
-            }
-        });*/
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-            String name = null;
-            if (ringtone != null) {
-                Ringtone rng = RingtoneManager.getRingtone(getParentActivity(), ringtone);
-                if (rng != null) {
-                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
-                        name = LocaleController.getString("SoundDefault", R.string.SoundDefault);
-                    } else {
-                        name = rng.getTitle(getParentActivity());
-                    }
-                    rng.stop();
-                }
-            }
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            SharedPreferences.Editor editor = preferences.edit();
-
-            if (requestCode == messageSoundRow) {
-                if (name != null && ringtone != null) {
-                    editor.putString("GlobalSound", name);
-                    editor.putString("GlobalSoundPath", ringtone.toString());
-                } else {
-                    editor.putString("GlobalSound", "NoSound");
-                    editor.putString("GlobalSoundPath", "NoSound");
-                }
-            } else if (requestCode == groupSoundRow) {
-                if (name != null && ringtone != null) {
-                    editor.putString("GroupSound", name);
-                    editor.putString("GroupSoundPath", ringtone.toString());
-                } else {
-                    editor.putString("GroupSound", "NoSound");
-                    editor.putString("GroupSoundPath", "NoSound");
-                }
-            }
-            editor.commit();
-            listView.invalidateViews();
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.notificationsSettingsUpdated) {
-            listView.invalidateViews();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow ||
-                    i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow ||
-                    i == messageSectionRow2 || i == eventsSectionRow2 || i == groupSectionRow2 ||
-                    i == inappSectionRow2 || i == otherSectionRow2 || i == resetSectionRow2);
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new HeaderCell(mContext);
-                }
-                if (i == messageSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
-                } else if (i == groupSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
-                } else if (i == inappSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
-                } else if (i == eventsSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("Events", R.string.Events));
-                } else if (i == otherSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("NotificationsOther", R.string.NotificationsOther));
-                } else if (i == resetSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("Reset", R.string.Reset));
-                }
-            } if (type == 1) {
-                if (view == null) {
-                    view = new TextCheckCell(mContext);
-                }
-                TextCheckCell checkCell = (TextCheckCell) view;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                if (i == messageAlertRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("Alert", R.string.Alert), preferences.getBoolean("EnableAll", true), true);
-                } else if (i == groupAlertRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("Alert", R.string.Alert), preferences.getBoolean("EnableGroup", true), true);
-                } else if (i == messagePreviewRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("MessagePreview", R.string.MessagePreview), preferences.getBoolean("EnablePreviewAll", true), true);
-                } else if (i == groupPreviewRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("MessagePreview", R.string.MessagePreview), preferences.getBoolean("EnablePreviewGroup", true), true);
-                } else if (i == inappSoundRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("InAppSounds", R.string.InAppSounds), preferences.getBoolean("EnableInAppSounds", true), true);
-                } else if (i == inappVibrateRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("InAppVibrate", R.string.InAppVibrate), preferences.getBoolean("EnableInAppVibrate", true), true);
-                } else if (i == inappPreviewRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("InAppPreview", R.string.InAppPreview), preferences.getBoolean("EnableInAppPreview", true), true);
-                } else if (i == inappPriorityRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), preferences.getBoolean("EnableInAppPriority", false), false);
-                } else if (i == contactJoinedRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), false);
-                } else if (i == pebbleAlertRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("Pebble", R.string.Pebble), preferences.getBoolean("EnablePebbleNotifications", false), true);
-                } else if (i == notificationsServiceRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("NotificationsService", R.string.NotificationsService), preferences.getBoolean("pushService", true), false);
-                } else if (i == badgeNumberRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("BadgeNumber", R.string.BadgeNumber), preferences.getBoolean("badgeNumber", true), true);
-                } else if (i == inchatSoundRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("InChatSound", R.string.InChatSound), preferences.getBoolean("EnableInChatSound", true), true);
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    view = new TextDetailSettingsCell(mContext);
-                }
-
-                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-                if (i == messageSoundRow || i == groupSoundRow) {
-                    textCell.setMultilineDetail(false);
-                    String value = null;
-                    if (i == messageSoundRow) {
-                        value = preferences.getString("GlobalSound", LocaleController.getString("SoundDefault", R.string.SoundDefault));
-                    } else if (i == groupSoundRow) {
-                        value = preferences.getString("GroupSound", LocaleController.getString("SoundDefault", R.string.SoundDefault));
-                    }
-                    if (value.equals("NoSound")) {
-                        value = LocaleController.getString("NoSound", R.string.NoSound);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("Sound", R.string.Sound), value, true);
-                } else if (i == resetNotificationsRow) {
-                    textCell.setMultilineDetail(true);
-                    textCell.setTextAndValue(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications), LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom), false);
-                } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
-                    textCell.setMultilineDetail(false);
-                    int option = 0;
-                    if (i == messagePopupNotificationRow) {
-                        option = preferences.getInt("popupAll", 0);
-                    } else if (i == groupPopupNotificationRow) {
-                        option = preferences.getInt("popupGroup", 0);
-                    }
-                    String value;
-                    if (option == 0) {
-                        value = LocaleController.getString("NoPopup", R.string.NoPopup);
-                    } else if (option == 1) {
-                        value = LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn);
-                    } else if (option == 2) {
-                        value = LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff);
-                    } else {
-                        value = LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("PopupNotification", R.string.PopupNotification), value, true);
-                } else if (i == messageVibrateRow || i == groupVibrateRow) {
-                    textCell.setMultilineDetail(false);
-                    int value = 0;
-                    if (i == messageVibrateRow) {
-                        value = preferences.getInt("vibrate_messages", 0);
-                    } else if (i == groupVibrateRow) {
-                        value = preferences.getInt("vibrate_group", 0);
-                    }
-                    if (value == 0) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Default", R.string.Default), true);
-                    } else if (value == 1) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
-                    } else if (value == 2) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled), true);
-                    } else if (value == 3) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), true);
-                    } else if (value == 4) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("OnlyIfSilent", R.string.OnlyIfSilent), true);
-                    }
-                } else if (i == repeatRow) {
-                    textCell.setMultilineDetail(false);
-                    int minutes = preferences.getInt("repeat_messages", 60);
-                    String value;
-                    if (minutes == 0) {
-                        value = LocaleController.getString("RepeatNotificationsNever", R.string.RepeatNotificationsNever);
-                    } else if (minutes < 60) {
-                        value = LocaleController.formatPluralString("Minutes", minutes);
-                    } else {
-                        value = LocaleController.formatPluralString("Hours", minutes / 60);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications), value, false);
-                } else if (i == messagePriorityRow || i == groupPriorityRow) {
-                    textCell.setMultilineDetail(false);
-                    int value = 0;
-                    if (i == messagePriorityRow) {
-                        value = preferences.getInt("priority_messages", 1);
-                    } else if (i == groupPriorityRow) {
-                        value = preferences.getInt("priority_group", 1);
-                    }
-                    if (value == 0) {
-                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault), false);
-                    } else if (value == 1) {
-                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh), false);
-                    } else if (value == 2) {
-                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityMax", R.string.NotificationsPriorityMax), false);
-                    }
-                }
-            } else if (type == 3) {
-                if (view == null) {
-                    view = new TextColorCell(mContext);
-                }
-
-                TextColorCell textCell = (TextColorCell) view;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                if (i == messageLedRow) {
-                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("MessagesLed", 0xff00ff00), true);
-                } else if (i == groupLedRow) {
-                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("GroupLed", 0xff00ff00), true);
-                }
-            } else if (type == 4) {
-                if (view == null) {
-                    view = new ShadowSectionCell(mContext);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == messageSectionRow || i == groupSectionRow || i == inappSectionRow ||
-                    i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow) {
-                return 0;
-            } else if (i == messageAlertRow || i == messagePreviewRow || i == groupAlertRow ||
-                    i == groupPreviewRow || i == inappSoundRow || i == inappVibrateRow ||
-                    i == inappPreviewRow || i == contactJoinedRow || i == pebbleAlertRow ||
-                    i == notificationsServiceRow || i == badgeNumberRow || i == inappPriorityRow ||
-                    i == inchatSoundRow) {
-                return 1;
-            } else if (i == messageLedRow || i == groupLedRow) {
-                return 3;
-            } else if (i == messageSectionRow2 || i == eventsSectionRow2 || i == groupSectionRow2 ||
-                    i == inappSectionRow2 || i == otherSectionRow2 || i == resetSectionRow2) {
-                return 4;
-            } else {
-                return 2;
-            }
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 5;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
deleted file mode 100644
index 49333c45b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
+++ /dev/null
@@ -1,700 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.res.Configuration;
-import android.graphics.Typeface;
-import android.os.Build;
-import android.os.Vibrator;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.InputType;
-import android.text.TextUtils;
-import android.text.TextWatcher;
-import android.text.method.DigitsKeyListener;
-import android.text.method.PasswordTransformationMethod;
-import android.util.TypedValue;
-import android.view.ActionMode;
-import android.view.ContextMenu;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.view.inputmethod.EditorInfo;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextCheckCell;
-import org.telegram.ui.Cells.TextInfoPrivacyCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.NumberPicker;
-
-public class PasscodeActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-    private ListView listView;
-    private TextView titleTextView;
-    private EditText passwordEditText;
-    private TextView dropDown;
-    private ActionBarMenuItem dropDownContainer;
-
-    private int type;
-    private int currentPasswordType = 0;
-    private String firstPassword;
-
-    private int passcodeRow;
-    private int changePasscodeRow;
-    private int passcodeDetailRow;
-    private int autoLockRow;
-    private int autoLockDetailRow;
-    private int rowCount;
-
-    private final static int done_button = 1;
-    private final static int pin_item = 2;
-    private final static int password_item = 3;
-
-    public PasscodeActivity(int type) {
-        super();
-        this.type = type;
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        updateRows();
-        if (type == 0) {
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetPasscode);
-        }
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        if (type == 0) {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetPasscode);
-        }
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        if (type != 3) {
-            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        }
-        actionBar.setAllowOverlayTitle(false);
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    if (passwordEditText.getImeOptions() == EditorInfo.IME_ACTION_NEXT) {
-                        processNext();
-                    } else if (passwordEditText.getImeOptions() == EditorInfo.IME_ACTION_DONE) {
-                        processDone();
-                    }
-                } else if (id == pin_item) {
-                    currentPasswordType = 0;
-                    updateDropDownTextView();
-                } else if (id == password_item) {
-                    currentPasswordType = 1;
-                    updateDropDownTextView();
-                }
-            }
-        });
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        if (type != 0) {
-            ActionBarMenu menu = actionBar.createMenu();
-            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-            titleTextView = new TextView(context);
-            titleTextView.setTextColor(0xff757575);
-            if (type == 1) {
-                if (UserConfig.passcodeHash.length() != 0) {
-                    titleTextView.setText(LocaleController.getString("EnterNewPasscode", R.string.EnterNewPasscode));
-                } else {
-                    titleTextView.setText(LocaleController.getString("EnterNewFirstPasscode", R.string.EnterNewFirstPasscode));
-                }
-            } else {
-                titleTextView.setText(LocaleController.getString("EnterCurrentPasscode", R.string.EnterCurrentPasscode));
-            }
-            titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            titleTextView.setGravity(Gravity.CENTER_HORIZONTAL);
-            frameLayout.addView(titleTextView);
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) titleTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
-            layoutParams.topMargin = AndroidUtilities.dp(38);
-            titleTextView.setLayoutParams(layoutParams);
-
-            passwordEditText = new EditText(context);
-            passwordEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-            passwordEditText.setTextColor(0xff000000);
-            passwordEditText.setMaxLines(1);
-            passwordEditText.setLines(1);
-            passwordEditText.setGravity(Gravity.CENTER_HORIZONTAL);
-            passwordEditText.setSingleLine(true);
-            if (type == 1) {
-                passwordEditText.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            } else {
-                passwordEditText.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            }
-            passwordEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
-            passwordEditText.setTypeface(Typeface.DEFAULT);
-            AndroidUtilities.clearCursorDrawable(passwordEditText);
-            frameLayout.addView(passwordEditText);
-            layoutParams = (FrameLayout.LayoutParams) passwordEditText.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(90);
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.leftMargin = AndroidUtilities.dp(40);
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            layoutParams.rightMargin = AndroidUtilities.dp(40);
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            passwordEditText.setLayoutParams(layoutParams);
-            passwordEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        processNext();
-                        return true;
-                    } else if (i == EditorInfo.IME_ACTION_DONE) {
-                        processDone();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-            passwordEditText.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-
-                }
-
-                @Override
-                public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-                }
-
-                @Override
-                public void afterTextChanged(Editable s) {
-                    if (passwordEditText.length() == 4) {
-                        if (type == 2 && UserConfig.passcodeType == 0) {
-                            processDone();
-                        } else if (type == 1 && currentPasswordType == 0) {
-                            if (passwordEditText.getImeOptions() == EditorInfo.IME_ACTION_NEXT) {
-                                processNext();
-                            } else if (passwordEditText.getImeOptions() == EditorInfo.IME_ACTION_DONE) {
-                                processDone();
-                            }
-                        }
-                    }
-                }
-            });
-            if (android.os.Build.VERSION.SDK_INT < 11) {
-                passwordEditText.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener() {
-                    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
-                        menu.clear();
-                    }
-                });
-            } else {
-                passwordEditText.setCustomSelectionActionModeCallback(new ActionMode.Callback() {
-                    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
-                        return false;
-                    }
-
-                    public void onDestroyActionMode(ActionMode mode) {
-                    }
-
-                    public boolean onCreateActionMode(ActionMode mode, Menu menu) {
-                        return false;
-                    }
-
-                    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-                        return false;
-                    }
-                });
-            }
-
-            if (type == 1) {
-                dropDownContainer = new ActionBarMenuItem(context, menu, R.drawable.bar_selector);
-                dropDownContainer.setSubMenuOpenSide(1);
-                dropDownContainer.addSubItem(pin_item, LocaleController.getString("PasscodePIN", R.string.PasscodePIN), 0);
-                dropDownContainer.addSubItem(password_item, LocaleController.getString("PasscodePassword", R.string.PasscodePassword), 0);
-                actionBar.addView(dropDownContainer);
-                layoutParams = (FrameLayout.LayoutParams) dropDownContainer.getLayoutParams();
-                layoutParams.height = LayoutHelper.MATCH_PARENT;
-                layoutParams.width = LayoutHelper.WRAP_CONTENT;
-                layoutParams.rightMargin = AndroidUtilities.dp(40);
-                layoutParams.leftMargin = AndroidUtilities.isTablet() ? AndroidUtilities.dp(64) : AndroidUtilities.dp(56);
-                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-                dropDownContainer.setLayoutParams(layoutParams);
-                dropDownContainer.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View view) {
-                        dropDownContainer.toggleSubMenu();
-                    }
-                });
-
-                dropDown = new TextView(context);
-                dropDown.setGravity(Gravity.LEFT);
-                dropDown.setSingleLine(true);
-                dropDown.setLines(1);
-                dropDown.setMaxLines(1);
-                dropDown.setEllipsize(TextUtils.TruncateAt.END);
-                dropDown.setTextColor(0xffffffff);
-                dropDown.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-                dropDown.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_arrow_drop_down, 0);
-                dropDown.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-                dropDown.setPadding(0, 0, AndroidUtilities.dp(10), 0);
-                dropDownContainer.addView(dropDown);
-                layoutParams = (FrameLayout.LayoutParams) dropDown.getLayoutParams();
-                layoutParams.width = LayoutHelper.WRAP_CONTENT;
-                layoutParams.height = LayoutHelper.WRAP_CONTENT;
-                layoutParams.leftMargin = AndroidUtilities.dp(16);
-                layoutParams.gravity = Gravity.CENTER_VERTICAL;
-                layoutParams.bottomMargin = AndroidUtilities.dp(1);
-                dropDown.setLayoutParams(layoutParams);
-            } else {
-                actionBar.setTitle(LocaleController.getString("Passcode", R.string.Passcode));
-            }
-
-            updateDropDownTextView();
-        } else {
-            actionBar.setTitle(LocaleController.getString("Passcode", R.string.Passcode));
-            frameLayout.setBackgroundColor(0xfff0f0f0);
-            listView = new ListView(context);
-            listView.setDivider(null);
-            listView.setDividerHeight(0);
-            listView.setVerticalScrollBarEnabled(false);
-            listView.setDrawSelectorOnTop(true);
-            frameLayout.addView(listView);
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            layoutParams.gravity = Gravity.TOP;
-            listView.setLayoutParams(layoutParams);
-            listView.setAdapter(listAdapter = new ListAdapter(context));
-            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-                @Override
-                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == changePasscodeRow) {
-                        presentFragment(new PasscodeActivity(1));
-                    } else if (i == passcodeRow) {
-                        TextCheckCell cell = (TextCheckCell) view;
-                        if (UserConfig.passcodeHash.length() != 0) {
-                            UserConfig.passcodeHash = "";
-                            UserConfig.appLocked = false;
-                            UserConfig.saveConfig(false);
-                            int count = listView.getChildCount();
-                            for (int a = 0; a < count; a++) {
-                                View child = listView.getChildAt(a);
-                                if (child instanceof TextSettingsCell) {
-                                    TextSettingsCell textCell = (TextSettingsCell) child;
-                                    textCell.setTextColor(0xffc6c6c6);
-                                    break;
-                                }
-                            }
-                            cell.setChecked(UserConfig.passcodeHash.length() != 0);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.didSetPasscode);
-                        } else {
-                            presentFragment(new PasscodeActivity(1));
-                        }
-                    } else if (i == autoLockRow) {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AutoLock", R.string.AutoLock));
-                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
-                        numberPicker.setMinValue(0);
-                        numberPicker.setMaxValue(4);
-                        if (UserConfig.autoLockIn == 0) {
-                            numberPicker.setValue(0);
-                        } else if (UserConfig.autoLockIn == 60) {
-                            numberPicker.setValue(1);
-                        } else if (UserConfig.autoLockIn == 60 * 5) {
-                            numberPicker.setValue(2);
-                        } else if (UserConfig.autoLockIn == 60 * 60) {
-                            numberPicker.setValue(3);
-                        } else if (UserConfig.autoLockIn == 60 * 60 * 5) {
-                            numberPicker.setValue(4);
-                        }
-                        numberPicker.setFormatter(new NumberPicker.Formatter() {
-                            @Override
-                            public String format(int value) {
-                                if (value == 0) {
-                                    return LocaleController.getString("Disabled", R.string.Disabled);
-                                } else if (value == 1) {
-                                    return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Minutes", 1));
-                                } else if (value == 2) {
-                                    return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Minutes", 5));
-                                } else if (value == 3) {
-                                    return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Hours", 1));
-                                } else if (value == 4) {
-                                    return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Hours", 5));
-                                }
-                                return "";
-                            }
-                        });
-                        builder.setView(numberPicker);
-                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                which = numberPicker.getValue();
-                                if (which == 0) {
-                                    UserConfig.autoLockIn = 0;
-                                } else if (which == 1) {
-                                    UserConfig.autoLockIn = 60;
-                                } else if (which == 2) {
-                                    UserConfig.autoLockIn = 60 * 5;
-                                } else if (which == 3) {
-                                    UserConfig.autoLockIn = 60 * 60;
-                                } else if (which == 4) {
-                                    UserConfig.autoLockIn = 60 * 60 * 5;
-                                }
-                                listView.invalidateViews();
-                                UserConfig.saveConfig(false);
-                            }
-                        });
-                        showDialog(builder.create());
-                    }
-                }
-            });
-        }
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-        if (type != 0) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (passwordEditText != null) {
-                        passwordEditText.requestFocus();
-                        AndroidUtilities.showKeyboard(passwordEditText);
-                    }
-                }
-            }, 200);
-        }
-        fixLayoutInternal();
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.didSetPasscode) {
-            if (type == 0) {
-                updateRows();
-                if (listAdapter != null) {
-                    listAdapter.notifyDataSetChanged();
-                }
-            }
-        }
-    }
-
-    private void updateRows() {
-        rowCount = 0;
-        passcodeRow = rowCount++;
-        changePasscodeRow = rowCount++;
-        passcodeDetailRow = rowCount++;
-        if (UserConfig.passcodeHash.length() > 0) {
-            autoLockRow = rowCount++;
-            autoLockDetailRow = rowCount++;
-        } else {
-            autoLockRow = -1;
-            autoLockDetailRow = -1;
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        if (listView != null) {
-            ViewTreeObserver obs = listView.getViewTreeObserver();
-            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    listView.getViewTreeObserver().removeOnPreDrawListener(this);
-                    fixLayoutInternal();
-                    return false;
-                }
-            });
-        }
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        super.onOpenAnimationEnd();
-        if (type != 0) {
-            AndroidUtilities.showKeyboard(passwordEditText);
-        }
-    }
-
-    private void updateDropDownTextView() {
-        if (dropDown != null) {
-            if (currentPasswordType == 0) {
-                dropDown.setText(LocaleController.getString("PasscodePIN", R.string.PasscodePIN));
-            } else if (currentPasswordType == 1) {
-                dropDown.setText(LocaleController.getString("PasscodePassword", R.string.PasscodePassword));
-            }
-        }
-        if (type == 1 && currentPasswordType == 0 || type == 2 && UserConfig.passcodeType == 0) {
-            InputFilter[] filterArray = new InputFilter[1];
-            filterArray[0] = new InputFilter.LengthFilter(4);
-            passwordEditText.setFilters(filterArray);
-            passwordEditText.setInputType(InputType.TYPE_CLASS_PHONE);
-            passwordEditText.setKeyListener(DigitsKeyListener.getInstance("1234567890"));
-        } else if (type == 1 && currentPasswordType == 1 || type == 2 && UserConfig.passcodeType == 1) {
-            passwordEditText.setFilters(new InputFilter[0]);
-            passwordEditText.setKeyListener(null);
-            passwordEditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
-        }
-        passwordEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
-    }
-
-    private void processNext() {
-        if (passwordEditText.getText().length() == 0 || currentPasswordType == 0 && passwordEditText.getText().length() != 4) {
-            onPasscodeError();
-            return;
-        }
-        if (currentPasswordType == 0) {
-            actionBar.setTitle(LocaleController.getString("PasscodePIN", R.string.PasscodePIN));
-        } else {
-            actionBar.setTitle(LocaleController.getString("PasscodePassword", R.string.PasscodePassword));
-        }
-        dropDownContainer.setVisibility(View.GONE);
-        titleTextView.setText(LocaleController.getString("ReEnterYourPasscode", R.string.ReEnterYourPasscode));
-        firstPassword = passwordEditText.getText().toString();
-        passwordEditText.setText("");
-        passwordEditText.setImeOptions(EditorInfo.IME_ACTION_DONE);
-    }
-
-    private void processDone() {
-        if (passwordEditText.getText().length() == 0) {
-            onPasscodeError();
-            return;
-        }
-        if (type == 1) {
-            if (!firstPassword.equals(passwordEditText.getText().toString())) {
-                try {
-                    Toast.makeText(getParentActivity(), LocaleController.getString("PasscodeDoNotMatch", R.string.PasscodeDoNotMatch), Toast.LENGTH_SHORT).show();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                AndroidUtilities.shakeTextView(titleTextView, 2, 0);
-                passwordEditText.setText("");
-                return;
-            }
-
-            try {
-                UserConfig.passcodeSalt = new byte[16];
-                Utilities.random.nextBytes(UserConfig.passcodeSalt);
-                byte[] passcodeBytes = firstPassword.getBytes("UTF-8");
-                byte[] bytes = new byte[32 + passcodeBytes.length];
-                System.arraycopy(UserConfig.passcodeSalt, 0, bytes, 0, 16);
-                System.arraycopy(passcodeBytes, 0, bytes, 16, passcodeBytes.length);
-                System.arraycopy(UserConfig.passcodeSalt, 0, bytes, passcodeBytes.length + 16, 16);
-                UserConfig.passcodeHash = Utilities.bytesToHex(Utilities.computeSHA256(bytes, 0, bytes.length));
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            UserConfig.passcodeType = currentPasswordType;
-            UserConfig.saveConfig(false);
-            finishFragment();
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.didSetPasscode);
-            passwordEditText.clearFocus();
-            AndroidUtilities.hideKeyboard(passwordEditText);
-        } else if (type == 2) {
-            if (!UserConfig.checkPasscode(passwordEditText.getText().toString())) {
-                passwordEditText.setText("");
-                onPasscodeError();
-                return;
-            }
-            passwordEditText.clearFocus();
-            AndroidUtilities.hideKeyboard(passwordEditText);
-            presentFragment(new PasscodeActivity(0), true);
-        }
-    }
-
-    private void onPasscodeError() {
-        if (getParentActivity() == null) {
-            return;
-        }
-        Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
-        if (v != null) {
-            v.vibrate(200);
-        }
-        AndroidUtilities.shakeTextView(titleTextView, 2, 0);
-    }
-
-    private void fixLayoutInternal() {
-        if (dropDownContainer != null) {
-            if (!AndroidUtilities.isTablet()) {
-                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) dropDownContainer.getLayoutParams();
-                layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
-                dropDownContainer.setLayoutParams(layoutParams);
-            }
-            if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                dropDown.setTextSize(18);
-            } else {
-                dropDown.setTextSize(20);
-            }
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == passcodeRow || i == autoLockRow || UserConfig.passcodeHash.length() != 0 && i == changePasscodeRow;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int viewType = getItemViewType(i);
-            if (viewType == 0) {
-                if (view == null) {
-                    view = new TextCheckCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                TextCheckCell textCell = (TextCheckCell) view;
-
-                if (i == passcodeRow) {
-                    textCell.setTextAndCheck(LocaleController.getString("Passcode", R.string.Passcode), UserConfig.passcodeHash.length() > 0, true);
-                }
-            } else if (viewType == 1) {
-                if (view == null) {
-                    view = new TextSettingsCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                TextSettingsCell textCell = (TextSettingsCell) view;
-                if (i == changePasscodeRow) {
-                    textCell.setText(LocaleController.getString("ChangePasscode", R.string.ChangePasscode), false);
-                    textCell.setTextColor(UserConfig.passcodeHash.length() == 0 ? 0xffc6c6c6 : 0xff000000);
-                } else if (i == autoLockRow) {
-                    String val;
-                    if (UserConfig.autoLockIn == 0) {
-                        val = LocaleController.formatString("AutoLockDisabled", R.string.AutoLockDisabled);
-                    } else if (UserConfig.autoLockIn < 60 * 60) {
-                        val = LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Minutes", UserConfig.autoLockIn / 60));
-                    } else if (UserConfig.autoLockIn < 60 * 60 * 24) {
-                        val = LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Hours", (int) Math.ceil(UserConfig.autoLockIn / 60.0f / 60)));
-                    } else {
-                        val = LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Days", (int) Math.ceil(UserConfig.autoLockIn / 60.0f / 60 / 24)));
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("AutoLock", R.string.AutoLock), val, true);
-                    textCell.setTextColor(0xff000000);
-                }
-            } else if (viewType == 2) {
-                if (view == null) {
-                    view = new TextInfoPrivacyCell(mContext);
-                }
-                if (i == passcodeDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ChangePasscodeInfo", R.string.ChangePasscodeInfo));
-                    if (autoLockDetailRow != -1) {
-                        view.setBackgroundResource(R.drawable.greydivider);
-                    } else {
-                        view.setBackgroundResource(R.drawable.greydivider_bottom);
-                    }
-                } else if (i == autoLockDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("AutoLockInfo", R.string.AutoLockInfo));
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == passcodeRow) {
-                return 0;
-            } else if (i == changePasscodeRow || i == autoLockRow) {
-                return 1;
-            } else if (i == passcodeDetailRow || i == autoLockDetailRow) {
-                return 2;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 3;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
deleted file mode 100644
index 6b6449365..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
+++ /dev/null
@@ -1,395 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.HeaderCell;
-import org.telegram.ui.Cells.TextInfoPrivacyCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-
-public class PrivacySettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-
-    private int privacySectionRow;
-    private int blockedRow;
-    private int lastSeenRow;
-    private int lastSeenDetailRow;
-    private int securitySectionRow;
-    private int sessionsRow;
-    private int passwordRow;
-    private int passcodeRow;
-    private int sessionsDetailRow;
-    private int deleteAccountSectionRow;
-    private int deleteAccountRow;
-    private int deleteAccountDetailRow;
-    private int rowCount;
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-
-        ContactsController.getInstance().loadPrivacySettings();
-
-        rowCount = 0;
-        privacySectionRow = rowCount++;
-        blockedRow = rowCount++;
-        lastSeenRow = rowCount++;
-        lastSeenDetailRow = rowCount++;
-        securitySectionRow = rowCount++;
-        passcodeRow = rowCount++;
-        passwordRow = rowCount++;
-        sessionsRow = rowCount++;
-        sessionsDetailRow = rowCount++;
-        deleteAccountSectionRow = rowCount++;
-        deleteAccountRow = rowCount++;
-        deleteAccountDetailRow = rowCount++;
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.privacyRulesUpdated);
-
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.privacyRulesUpdated);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("PrivacySettings", R.string.PrivacySettings));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        listAdapter = new ListAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(0xfff0f0f0);
-
-        ListView listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDrawSelectorOnTop(true);
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-        listView.setAdapter(listAdapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (i == blockedRow) {
-                    presentFragment(new BlockedUsersActivity());
-                } else if (i == sessionsRow) {
-                    presentFragment(new SessionsActivity());
-                } else if (i == deleteAccountRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("DeleteAccountTitle", R.string.DeleteAccountTitle));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.formatPluralString("Months", 1),
-                            LocaleController.formatPluralString("Months", 3),
-                            LocaleController.formatPluralString("Months", 6),
-                            LocaleController.formatPluralString("Years", 1)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            int value = 0;
-                            if (which == 0) {
-                                value = 30;
-                            } else if (which == 1) {
-                                value = 90;
-                            } else if (which == 2) {
-                                value = 182;
-                            } else if (which == 3) {
-                                value = 365;
-                            }
-                            final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
-                            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-                            progressDialog.setCanceledOnTouchOutside(false);
-                            progressDialog.setCancelable(false);
-                            progressDialog.show();
-
-                            final TLRPC.TL_account_setAccountTTL req = new TLRPC.TL_account_setAccountTTL();
-                            req.ttl = new TLRPC.TL_accountDaysTTL();
-                            req.ttl.days = value;
-                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                @Override
-                                public void run(final TLObject response, final TLRPC.TL_error error) {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            try {
-                                                progressDialog.dismiss();
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                            if (response instanceof TLRPC.TL_boolTrue) {
-                                                ContactsController.getInstance().setDeleteAccountTTL(req.ttl.days);
-                                                listAdapter.notifyDataSetChanged();
-                                            }
-                                        }
-                                    });
-                                }
-                            });
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == lastSeenRow) {
-                    presentFragment(new LastSeenActivity());
-                } else if (i == passwordRow) {
-                    presentFragment(new TwoStepVerificationActivity(0));
-                } else if (i == passcodeRow) {
-                    if (UserConfig.passcodeHash.length() > 0) {
-                        presentFragment(new PasscodeActivity(2));
-                    } else {
-                        presentFragment(new PasscodeActivity(0));
-                    }
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.privacyRulesUpdated) {
-            if (listAdapter != null) {
-                listAdapter.notifyDataSetChanged();
-            }
-        }
-    }
-
-    private String formatRulesString() {
-        ArrayList<TLRPC.PrivacyRule> privacyRules = ContactsController.getInstance().getPrivacyRules();
-        if (privacyRules.size() == 0) {
-            return LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody);
-        }
-        int type = -1;
-        int plus = 0;
-        int minus = 0;
-        for (TLRPC.PrivacyRule rule : privacyRules) {
-            if (rule instanceof TLRPC.TL_privacyValueAllowUsers) {
-                plus += rule.users.size();
-            } else if (rule instanceof TLRPC.TL_privacyValueDisallowUsers) {
-                minus += rule.users.size();
-            } else if (rule instanceof TLRPC.TL_privacyValueAllowAll) {
-                type = 0;
-            } else if (rule instanceof TLRPC.TL_privacyValueDisallowAll) {
-                type = 1;
-            } else {
-                type = 2;
-            }
-        }
-        if (type == 0 || type == -1 && minus > 0) {
-            if (minus == 0) {
-                return LocaleController.getString("LastSeenEverybody", R.string.LastSeenEverybody);
-            } else {
-                return LocaleController.formatString("LastSeenEverybodyMinus", R.string.LastSeenEverybodyMinus, minus);
-            }
-        } else if (type == 2 || type == -1 && minus > 0 && plus > 0) {
-            if (plus == 0 && minus == 0) {
-                return LocaleController.getString("LastSeenContacts", R.string.LastSeenContacts);
-            } else {
-                if (plus != 0 && minus != 0) {
-                    return LocaleController.formatString("LastSeenContactsMinusPlus", R.string.LastSeenContactsMinusPlus, minus, plus);
-                } else if (minus != 0) {
-                    return LocaleController.formatString("LastSeenContactsMinus", R.string.LastSeenContactsMinus, minus);
-                } else if (plus != 0) {
-                    return LocaleController.formatString("LastSeenContactsPlus", R.string.LastSeenContactsPlus, plus);
-                }
-            }
-        } else if (type == 1 || type == -1 && plus > 0) {
-            if (plus == 0) {
-                return LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody);
-            } else {
-                return LocaleController.formatString("LastSeenNobodyPlus", R.string.LastSeenNobodyPlus, plus);
-            }
-        }
-        return "unknown";
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == passcodeRow || i == passwordRow || i == blockedRow || i == sessionsRow || i == lastSeenRow && !ContactsController.getInstance().getLoadingLastSeenInfo() || i == deleteAccountRow && !ContactsController.getInstance().getLoadingDeleteInfo();
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new TextSettingsCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                TextSettingsCell textCell = (TextSettingsCell) view;
-                if (i == blockedRow) {
-                    textCell.setText(LocaleController.getString("BlockedUsers", R.string.BlockedUsers), true);
-                } else if (i == sessionsRow) {
-                    textCell.setText(LocaleController.getString("SessionsTitle", R.string.SessionsTitle), false);
-                } else if (i == passwordRow) {
-                    textCell.setText(LocaleController.getString("TwoStepVerification", R.string.TwoStepVerification), true);
-                } else if (i == passcodeRow) {
-                    textCell.setText(LocaleController.getString("Passcode", R.string.Passcode), true);
-                } else if (i == lastSeenRow) {
-                    String value;
-                    if (ContactsController.getInstance().getLoadingLastSeenInfo()) {
-                        value = LocaleController.getString("Loading", R.string.Loading);
-                    } else {
-                        value = formatRulesString();
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), value, false);
-                }  else if (i == deleteAccountRow) {
-                    String value;
-                    if (ContactsController.getInstance().getLoadingDeleteInfo()) {
-                        value = LocaleController.getString("Loading", R.string.Loading);
-                    } else {
-                        int ttl = ContactsController.getInstance().getDeleteAccountTTL();
-                        if (ttl <= 182) {
-                            value = LocaleController.formatPluralString("Months", ttl / 30);
-                        } else if (ttl == 365) {
-                            value = LocaleController.formatPluralString("Years", ttl / 365);
-                        } else {
-                            value = LocaleController.formatPluralString("Days", ttl);
-                        }
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("DeleteAccountIfAwayFor", R.string.DeleteAccountIfAwayFor), value, false);
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextInfoPrivacyCell(mContext);
-                }
-                if (i == deleteAccountDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("DeleteAccountHelp", R.string.DeleteAccountHelp));
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                } else if (i == lastSeenDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("LastSeenHelp", R.string.LastSeenHelp));
-                    view.setBackgroundResource(R.drawable.greydivider);
-                } else if (i == sessionsDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("SessionsInfo", R.string.SessionsInfo));
-                    view.setBackgroundResource(R.drawable.greydivider);
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    view = new HeaderCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                if (i == privacySectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("PrivacyTitle", R.string.PrivacyTitle));
-                } else if (i == securitySectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("SecurityTitle", R.string.SecurityTitle));
-                } else if (i == deleteAccountSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("DeleteAccountTitle", R.string.DeleteAccountTitle));
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == lastSeenRow || i == blockedRow || i == deleteAccountRow || i == sessionsRow || i == passwordRow || i == passcodeRow) {
-                return 0;
-            } else if (i == deleteAccountDetailRow || i == lastSeenDetailRow || i == sessionsDetailRow) {
-                return 1;
-            } else if (i == securitySectionRow || i == deleteAccountSectionRow || i == privacySectionRow) {
-                return 2;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 3;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
deleted file mode 100644
index 980c185be..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ /dev/null
@@ -1,1400 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.animation.ObjectAnimator;
-import android.animation.StateListAnimator;
-import android.annotation.SuppressLint;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.graphics.Bitmap;
-import android.graphics.Outline;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewOutlineProvider;
-import android.view.ViewTreeObserver;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.SecretChatHelper;
-import org.telegram.android.SendMessagesHelper;
-import org.telegram.android.query.SharedMediaQuery;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.android.MessageObject;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.ui.Cells.AddMemberCell;
-import org.telegram.ui.Cells.DividerCell;
-import org.telegram.ui.Cells.EmptyCell;
-import org.telegram.ui.Cells.ShadowSectionCell;
-import org.telegram.ui.Cells.TextCell;
-import org.telegram.ui.Cells.TextDetailCell;
-import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.AvatarUpdater;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.IdenticonDrawable;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.concurrent.Semaphore;
-
-public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
-
-    private ListView listView;
-    private ListAdapter listAdapter;
-    private BackupImageView avatarImage;
-    private TextView nameTextView;
-    private TextView onlineTextView;
-    private ImageView writeButton;
-
-    private int user_id;
-    private int chat_id;
-    private long dialog_id;
-    private boolean creatingChat;
-    private boolean userBlocked;
-
-    private AvatarUpdater avatarUpdater;
-    private TLRPC.ChatParticipants info;
-    private TLRPC.TL_chatParticipant selectedUser;
-    private int onlineCount = -1;
-    private ArrayList<Integer> sortedUsers;
-
-    private TLRPC.EncryptedChat currentEncryptedChat;
-    private TLRPC.Chat currentChat;
-
-    private int totalMediaCount = -1;
-
-    private final static int add_contact = 1;
-    private final static int block_contact = 2;
-    private final static int share_contact = 3;
-    private final static int edit_contact = 4;
-    private final static int delete_contact = 5;
-    private final static int add_member = 6;
-    private final static int leave_group = 7;
-    private final static int edit_name = 8;
-
-    private int overscrollRow;
-    private int emptyRow;
-    private int emptyRowChat;
-    private int emptyRowChat2;
-    private int phoneRow;
-    private int usernameRow;
-    private int settingsTimerRow;
-    private int settingsKeyRow;
-    private int settingsNotificationsRow;
-    private int sharedMediaRow;
-    private int startSecretChatRow;
-    private int sectionRow;
-    private int membersSectionRow;
-    private int membersEndRow;
-    private int addMemberRow;
-    private int rowCount = 0;
-
-    public ProfileActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        user_id = arguments.getInt("user_id", 0);
-        chat_id = getArguments().getInt("chat_id", 0);
-        if (user_id != 0) {
-            dialog_id = arguments.getLong("dialog_id", 0);
-            if (dialog_id != 0) {
-                currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
-            }
-            if (MessagesController.getInstance().getUser(user_id) == null) {
-                return false;
-            }
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
-            userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
-
-            MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid);
-        } else if (chat_id != 0) {
-            currentChat = MessagesController.getInstance().getChat(chat_id);
-            if (currentChat == null) {
-                final Semaphore semaphore = new Semaphore(0);
-                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        currentChat = MessagesStorage.getInstance().getChat(chat_id);
-                        semaphore.release();
-                    }
-                });
-                try {
-                    semaphore.acquire();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                if (currentChat != null) {
-                    MessagesController.getInstance().putChat(currentChat, true);
-                } else {
-                    return false;
-                }
-            }
-
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
-
-            sortedUsers = new ArrayList<>();
-            updateOnlineCount();
-            if (chat_id > 0) {
-                SharedMediaQuery.getMediaCount(-chat_id, SharedMediaQuery.MEDIA_PHOTOVIDEO, classGuid, true);
-            }
-
-            avatarUpdater = new AvatarUpdater();
-            avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
-                @Override
-                public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
-                    if (chat_id != 0) {
-                        MessagesController.getInstance().changeChatAvatar(chat_id, file);
-                    }
-                }
-            };
-            avatarUpdater.parentFragment = this;
-        } else {
-            return false;
-        }
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        updateRowsIds();
-
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        if (user_id != 0) {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
-            MessagesController.getInstance().cancelLoadFullUser(user_id);
-        } else if (chat_id != 0) {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
-            avatarUpdater.clear();
-        }
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(user_id != 0 ? 5 : chat_id));
-        actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(user_id != 0 ? 5 : chat_id));
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setExtraHeight(AndroidUtilities.dp(88), false);
-        if (AndroidUtilities.isTablet()) {
-            actionBar.setOccupyStatusBar(false);
-        }
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(final int id) {
-                if (getParentActivity() == null) {
-                    return;
-                }
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == block_contact) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    if (!userBlocked) {
-                        builder.setMessage(LocaleController.getString("AreYouSureBlockContact", R.string.AreYouSureBlockContact));
-                    } else {
-                        builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
-                    }
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (!userBlocked) {
-                                MessagesController.getInstance().blockUser(user_id);
-                            } else {
-                                MessagesController.getInstance().unblockUser(user_id);
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (id == add_contact) {
-                    TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", user.id);
-                    presentFragment(new ContactAddActivity(args));
-                } else if (id == share_contact) {
-                    Bundle args = new Bundle();
-                    args.putBoolean("onlySelect", true);
-                    args.putBoolean("serverOnly", true);
-                    MessagesActivity fragment = new MessagesActivity(args);
-                    fragment.setDelegate(ProfileActivity.this);
-                    presentFragment(fragment);
-                } else if (id == edit_contact) {
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", user_id);
-                    presentFragment(new ContactAddActivity(args));
-                } else if (id == delete_contact) {
-                    final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                    if (user == null || getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSureDeleteContact", R.string.AreYouSureDeleteContact));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            ArrayList<TLRPC.User> arrayList = new ArrayList<>();
-                            arrayList.add(user);
-                            ContactsController.getInstance().deleteContact(arrayList);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (id == add_member) {
-                    openAddMember();
-                } else if (id == leave_group) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            kickUser(null);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (id == edit_name) {
-                    Bundle args = new Bundle();
-                    args.putInt("chat_id", chat_id);
-                    presentFragment(new ChangeChatNameActivity(args));
-                }
-            }
-        });
-
-        createActionBarMenu();
-
-        listAdapter = new ListAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        avatarImage = new BackupImageView(context);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(30));
-        actionBar.addView(avatarImage);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
-        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
-        layoutParams.width = AndroidUtilities.dp(60);
-        layoutParams.height = AndroidUtilities.dp(60);
-        layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(17);
-        layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(17) : 0;
-        layoutParams.bottomMargin = AndroidUtilities.dp(22);
-        avatarImage.setLayoutParams(layoutParams);
-        avatarImage.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (user_id != 0) {
-                    TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                    if (user.photo != null && user.photo.photo_big != null) {
-                        PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                        PhotoViewer.getInstance().openPhoto(user.photo.photo_big, ProfileActivity.this);
-                    }
-                } else if (chat_id != 0) {
-                    TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-                    if (chat.photo != null && chat.photo.photo_big != null) {
-                        PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                        PhotoViewer.getInstance().openPhoto(chat.photo.photo_big, ProfileActivity.this);
-                    }
-                }
-            }
-        });
-
-        nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xffffffff);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        nameTextView.setLines(1);
-        nameTextView.setMaxLines(1);
-        nameTextView.setSingleLine(true);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        actionBar.addView(nameTextView);
-        layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 97);
-        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 97 : 16);
-        layoutParams.bottomMargin = AndroidUtilities.dp(51);
-        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
-        nameTextView.setLayoutParams(layoutParams);
-
-        onlineTextView = new TextView(context);
-        onlineTextView.setTextColor(AvatarDrawable.getProfileTextColorForId(user_id != 0 ? 5 : chat_id));
-        onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        onlineTextView.setLines(1);
-        onlineTextView.setMaxLines(1);
-        onlineTextView.setSingleLine(true);
-        onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
-        onlineTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-        actionBar.addView(onlineTextView);
-        layoutParams = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 97);
-        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 97 : 16);
-        layoutParams.bottomMargin = AndroidUtilities.dp(30);
-        layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
-        onlineTextView.setLayoutParams(layoutParams);
-
-        listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(user_id != 0 ? 5 : chat_id));
-        frameLayout.addView(listView);
-        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        listView.setLayoutParams(layoutParams);
-
-        listView.setAdapter(listAdapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (getParentActivity() == null) {
-                    return;
-                }
-                if (i == sharedMediaRow) {
-                    Bundle args = new Bundle();
-                    if (user_id != 0) {
-                        args.putLong("dialog_id", dialog_id != 0 ? dialog_id : user_id);
-                    } else {
-                        args.putLong("dialog_id", -chat_id);
-                    }
-                    presentFragment(new MediaActivity(args));
-                } else if (i == settingsKeyRow) {
-                    Bundle args = new Bundle();
-                    args.putInt("chat_id", (int) (dialog_id >> 32));
-                    presentFragment(new IdenticonActivity(args));
-                } else if (i == settingsTimerRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    showDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat).create());
-                } else if (i == settingsNotificationsRow) {
-                    Bundle args = new Bundle();
-                    if (user_id != 0) {
-                        args.putLong("dialog_id", dialog_id == 0 ? user_id : dialog_id);
-                    } else if (chat_id != 0) {
-                        args.putLong("dialog_id", -chat_id);
-                    }
-                    presentFragment(new ProfileNotificationsActivity(args));
-                } else if (i == startSecretChatRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSureSecretChat", R.string.AreYouSureSecretChat));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            creatingChat = true;
-                            SecretChatHelper.getInstance().startSecretChat(getParentActivity(), MessagesController.getInstance().getUser(user_id));
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == phoneRow) {
-                    final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                    if (user == null || user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
-                        return;
-                    }
-
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setItems(new CharSequence[]{LocaleController.getString("Call", R.string.Call), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (i == 0) {
-                                try {
-                                    Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:+" + user.phone));
-                                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                    getParentActivity().startActivityForResult(intent, 500);
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            } else if (i == 1) {
-                                if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
-                                    android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                    clipboard.setText("+" + user.phone);
-                                } else {
-                                    android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                    android.content.ClipData clip = android.content.ClipData.newPlainText("label", "+" + user.phone);
-                                    clipboard.setPrimaryClip(clip);
-                                }
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
-                } else if (i > emptyRowChat2 && i < membersEndRow) {
-                    int user_id = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1)).user_id;
-                    if (user_id == UserConfig.getClientUserId()) {
-                        return;
-                    }
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", user_id);
-                    presentFragment(new ProfileActivity(args));
-                } else if (i == addMemberRow) {
-                    openAddMember();
-                }
-            }
-        });
-        if (chat_id != 0) {
-            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-                @Override
-                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (i > emptyRowChat2 && i < membersEndRow) {
-                        if (getParentActivity() == null) {
-                            return false;
-                        }
-
-                        TLRPC.TL_chatParticipant user = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
-                        if (user.user_id == UserConfig.getClientUserId()) {
-                            return false;
-                        }
-                        if (info.admin_id != UserConfig.getClientUserId() && user.inviter_id != UserConfig.getClientUserId()) {
-                            return false;
-                        }
-                        selectedUser = user;
-
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        CharSequence[] items = new CharSequence[]{chat_id > 0 ? LocaleController.getString("KickFromGroup", R.string.KickFromGroup) : LocaleController.getString("KickFromBroadcast", R.string.KickFromBroadcast)};
-
-                        builder.setItems(items, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                if (i == 0) {
-                                    kickUser(selectedUser);
-                                }
-                            }
-                        });
-                        showDialog(builder.create());
-
-                        return true;
-                    }
-                    return false;
-                }
-            });
-        }
-        if (dialog_id != 0) {
-            SharedMediaQuery.getMediaCount(dialog_id, SharedMediaQuery.MEDIA_PHOTOVIDEO, classGuid, true);
-        } else {
-            SharedMediaQuery.getMediaCount(user_id, SharedMediaQuery.MEDIA_PHOTOVIDEO, classGuid, true);
-        }
-
-        frameLayout.addView(actionBar);
-
-        if (user_id != 0 || chat_id >= 0 && !currentChat.left) {
-            writeButton = new ImageView(context);
-            writeButton.setBackgroundResource(R.drawable.floating_user_states);
-            writeButton.setScaleType(ImageView.ScaleType.CENTER);
-            if (user_id != 0) {
-                writeButton.setImageResource(R.drawable.floating_message);
-                writeButton.setPadding(0, AndroidUtilities.dp(3), 0, 0);
-            } else if (chat_id != 0) {
-                writeButton.setImageResource(R.drawable.floating_camera);
-            }
-            frameLayout.addView(writeButton);
-            if (Build.VERSION.SDK_INT >= 21) {
-                StateListAnimator animator = new StateListAnimator();
-                animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(writeButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
-                animator.addState(new int[]{}, ObjectAnimator.ofFloat(writeButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
-                writeButton.setStateListAnimator(animator);
-                writeButton.setOutlineProvider(new ViewOutlineProvider() {
-                    @SuppressLint("NewApi")
-                    @Override
-                    public void getOutline(View view, Outline outline) {
-                        outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-                    }
-                });
-            }
-            layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? 16 : 0);
-            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
-            layoutParams.gravity = (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT);
-            writeButton.setLayoutParams(layoutParams);
-            writeButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    if (user_id != 0) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                        if (user == null || user instanceof TLRPC.TL_userEmpty) {
-                            return;
-                        }
-                        NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                        Bundle args = new Bundle();
-                        args.putInt("user_id", user_id);
-                        presentFragment(new ChatActivity(args), true);
-                    } else if (chat_id != 0) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        CharSequence[] items;
-                        TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-                        if (chat.photo == null || chat.photo.photo_big == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty) {
-                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
-                        } else {
-                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
-                        }
-
-                        builder.setItems(items, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                int action = 0;
-                                if (i == 0) {
-                                    avatarUpdater.openCamera();
-                                } else if (i == 1) {
-                                    avatarUpdater.openGallery();
-                                } else if (i == 2) {
-                                    MessagesController.getInstance().changeChatAvatar(chat_id, null);
-                                }
-                            }
-                        });
-                        showDialog(builder.create());
-                    }
-                }
-            });
-        }
-
-        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView view, int scrollState) {
-
-            }
-
-            @Override
-            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                checkListViewScroll();
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void saveSelfArgs(Bundle args) {
-        if (chat_id != 0) {
-            if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
-                args.putString("path", avatarUpdater.currentPicturePath);
-            }
-        }
-    }
-
-    @Override
-    public void restoreSelfArgs(Bundle args) {
-        if (chat_id != 0) {
-            MessagesController.getInstance().loadChatInfo(chat_id, null);
-            if (avatarUpdater != null) {
-                avatarUpdater.currentPicturePath = args.getString("path");
-            }
-        }
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (chat_id != 0) {
-            avatarUpdater.onActivityResult(requestCode, resultCode, data);
-        }
-    }
-
-    private void openAddMember() {
-        Bundle args = new Bundle();
-        args.putBoolean("onlyUsers", true);
-        args.putBoolean("destroyAfterSelect", true);
-        args.putBoolean("returnAsResult", true);
-        if (info != null && info.admin_id == UserConfig.getClientUserId()) {
-            args.putInt("chat_id", currentChat.id);
-        }
-        //args.putBoolean("allowUsernameSearch", false);
-        if (chat_id > 0) {
-            args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
-        }
-        ContactsActivity fragment = new ContactsActivity(args);
-        fragment.setDelegate(new ContactsActivity.ContactsActivityDelegate() {
-            @Override
-            public void didSelectContact(TLRPC.User user, String param) {
-                MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0);
-            }
-        });
-        if (info != null) {
-            HashMap<Integer, TLRPC.User> users = new HashMap<>();
-            for (TLRPC.TL_chatParticipant p : info.participants) {
-                users.put(p.user_id, null);
-            }
-            fragment.setIgnoreUsers(users);
-        }
-        presentFragment(fragment);
-    }
-
-    private void checkListViewScroll() {
-        if (listView.getChildCount() == 0) {
-            return;
-        }
-        int height = 0;
-        View child = listView.getChildAt(0);
-        if (child != null) {
-            if (listView.getFirstVisiblePosition() == 0) {
-                height = AndroidUtilities.dp(88) + (child.getTop() < 0 ? child.getTop() : 0);
-            }
-            if (actionBar.getExtraHeight() != height) {
-                actionBar.setExtraHeight(height, true);
-                needLayout();
-            }
-        }
-    }
-
-    private void needLayout() {
-        FrameLayout.LayoutParams layoutParams;
-        if (listView != null) {
-            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
-            listView.setLayoutParams(layoutParams);
-        }
-
-        if (avatarImage != null) {
-            float diff = actionBar.getExtraHeight() / (float)AndroidUtilities.dp(88);
-            float diffm = 1.0f - diff;
-
-            int avatarSize = 42 + (int)(18 * diff);
-            int avatarX = 17 + (int)(47 * diffm);
-            int avatarY = AndroidUtilities.dp(22) - (int)((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
-            int nameX = 97 + (int)(21 * diffm);
-            int nameEndX = 16 + (int)(32 * diffm);
-            int nameY = avatarY + AndroidUtilities.dp(29 - 10 * diffm);
-            int statusY = avatarY + AndroidUtilities.dp(8 - 7 * diffm);
-            float scale = 1.0f - 0.12f * diffm;
-
-            if (writeButton != null) {
-                layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
-                layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
-                writeButton.setLayoutParams(layoutParams);
-                ViewProxy.setAlpha(writeButton, diff);
-                writeButton.setVisibility(diff <= 0.02 ? View.GONE : View.VISIBLE);
-                if (writeButton.getVisibility() == View.GONE) {
-                    writeButton.clearAnimation();
-                }
-            }
-
-            avatarImage.setRoundRadius(AndroidUtilities.dp(avatarSize / 2));
-            layoutParams = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(avatarSize);
-            layoutParams.height = AndroidUtilities.dp(avatarSize);
-            layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(avatarX);
-            layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(avatarX) : 0;
-            layoutParams.bottomMargin = avatarY;
-            avatarImage.setLayoutParams(layoutParams);
-
-            ViewProxy.setPivotX(nameTextView, 0);
-            ViewProxy.setPivotY(nameTextView, 0);
-            ViewProxy.setScaleX(nameTextView, scale);
-            ViewProxy.setScaleY(nameTextView, scale);
-            layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
-            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
-            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
-            layoutParams.bottomMargin = nameY;
-            nameTextView.setLayoutParams(layoutParams);
-
-            layoutParams = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
-            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
-            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
-            layoutParams.bottomMargin = statusY;
-            onlineTextView.setLayoutParams(layoutParams);
-        }
-    }
-
-    private void fixLayout() {
-        if (fragmentView == null) {
-            return;
-        }
-        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                if (fragmentView != null) {
-                    needLayout();
-                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
-                }
-                return false;
-            }
-        });
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        fixLayout();
-    }
-
-    @Override
-    public boolean needAddActionBar() {
-        return false;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
-            if (user_id != 0) {
-                if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                    updateProfileData();
-                }
-                if ((mask & MessagesController.UPDATE_MASK_PHONE) != 0) {
-                    if (listView != null) {
-                        listView.invalidateViews();
-                    }
-                }
-            } else if (chat_id != 0) {
-                if ((mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                    updateOnlineCount();
-                    updateProfileData();
-                }
-                if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                    if (listView != null) {
-                        int count = listView.getChildCount();
-                        for (int a = 0; a < count; a++) {
-                            View child = listView.getChildAt(a);
-                            if (child instanceof UserCell) {
-                                ((UserCell) child).update(mask);
-                            }
-                        }
-                    }
-                }
-            }
-        } else if (id == NotificationCenter.contactsDidLoaded) {
-            createActionBarMenu();
-        } else if (id == NotificationCenter.mediaCountDidLoaded) {
-            long uid = (Long)args[0];
-            if (user_id != 0) {
-                if (uid > 0 && user_id == uid && dialog_id == 0 || dialog_id != 0 && dialog_id == uid) {
-                    totalMediaCount = (Integer) args[1];
-                    if (listView != null) {
-                        listView.invalidateViews();
-                    }
-                }
-            } else if (chat_id != 0) {
-                int lower_part = (int)uid;
-                if (lower_part < 0 && chat_id == -lower_part) {
-                    totalMediaCount = (Integer)args[1];
-                    if (listView != null) {
-                        listView.invalidateViews();
-                    }
-                }
-            }
-        } else if (id == NotificationCenter.encryptedChatCreated) {
-            if (creatingChat) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                        TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) args[0];
-                        Bundle args2 = new Bundle();
-                        args2.putInt("enc_id", encryptedChat.id);
-                        presentFragment(new ChatActivity(args2), true);
-                    }
-                });
-            }
-        } else if (id == NotificationCenter.encryptedChatUpdated) {
-            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)args[0];
-            if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
-                currentEncryptedChat = chat;
-                updateRowsIds();
-                if (listAdapter != null) {
-                    listAdapter.notifyDataSetChanged();
-                    checkListViewScroll();
-                }
-            }
-        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
-            boolean oldValue = userBlocked;
-            userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
-            if (oldValue != userBlocked) {
-                createActionBarMenu();
-            }
-        } else if (id == NotificationCenter.chatInfoDidLoaded) {
-            int chatId = (Integer)args[0];
-            if (chatId == chat_id) {
-                info = (TLRPC.ChatParticipants)args[1];
-                updateOnlineCount();
-                updateRowsIds();
-                if (listAdapter != null) {
-                    listAdapter.notifyDataSetChanged();
-                    checkListViewScroll();
-                }
-            }
-        } else if (id == NotificationCenter.closeChats) {
-            removeSelfFromStack();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-        updateProfileData();
-        fixLayout();
-    }
-
-    @Override
-    public void updatePhotoAtIndex(int index) {
-
-    }
-
-    @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-        if (fileLocation == null) {
-            return null;
-        }
-
-        TLRPC.FileLocation photoBig = null;
-        if (user_id != 0) {
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            if (user != null && user.photo != null && user.photo.photo_big != null) {
-                photoBig = user.photo.photo_big;
-            }
-        } else if (chat_id != 0) {
-            TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-            if (chat != null && chat.photo != null && chat.photo.photo_big != null) {
-                photoBig = chat.photo.photo_big;
-            }
-        }
-
-
-        if (photoBig != null && photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
-            int coords[] = new int[2];
-            avatarImage.getLocationInWindow(coords);
-            PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
-            object.viewX = coords[0];
-            object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
-            object.parentView = avatarImage;
-            object.imageReceiver = avatarImage.getImageReceiver();
-            object.user_id = user_id;
-            object.thumb = object.imageReceiver.getBitmap();
-            object.size = -1;
-            object.radius = avatarImage.getImageReceiver().getRoundRadius();
-            return object;
-        }
-        return null;
-    }
-
-    @Override
-    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-        return null;
-    }
-
-    @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
-
-    @Override
-    public void willHidePhotoViewer() {
-        avatarImage.getImageReceiver().setVisible(true, true);
-    }
-
-    @Override
-    public boolean isPhotoChecked(int index) { return false; }
-
-    @Override
-    public void setPhotoChecked(int index) { }
-
-    @Override
-    public void cancelButtonPressed() { }
-
-    @Override
-    public void sendButtonPressed(int index) { }
-
-    @Override
-    public int getSelectedCount() { return 0; }
-
-    private void updateOnlineCount() {
-        if (info == null) {
-            return;
-        }
-        onlineCount = 0;
-        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-        sortedUsers.clear();
-        int i = 0;
-        for (TLRPC.TL_chatParticipant participant : info.participants) {
-            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
-            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
-                onlineCount++;
-            }
-            sortedUsers.add(i);
-            i++;
-        }
-
-        try {
-            Collections.sort(sortedUsers, new Comparator<Integer>() {
-                @Override
-                public int compare(Integer lhs, Integer rhs) {
-                    TLRPC.User user1 = MessagesController.getInstance().getUser(info.participants.get(rhs).user_id);
-                    TLRPC.User user2 = MessagesController.getInstance().getUser(info.participants.get(lhs).user_id);
-                    int status1 = 0;
-                    int status2 = 0;
-                    if (user1 != null && user1.status != null) {
-                        if (user1.id == UserConfig.getClientUserId()) {
-                            status1 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
-                        } else {
-                            status1 = user1.status.expires;
-                        }
-                    }
-                    if (user2 != null && user2.status != null) {
-                        if (user2.id == UserConfig.getClientUserId()) {
-                            status2 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
-                        } else {
-                            status2 = user2.status.expires;
-                        }
-                    }
-                    if (status1 > 0 && status2 > 0) {
-                        if (status1 > status2) {
-                            return 1;
-                        } else if (status1 < status2) {
-                            return -1;
-                        }
-                        return 0;
-                    } else if (status1 < 0 && status2 < 0) {
-                        if (status1 > status2) {
-                            return 1;
-                        } else if (status1 < status2) {
-                            return -1;
-                        }
-                        return 0;
-                    } else if (status1 < 0 && status2 > 0 || status1 == 0 && status2 != 0) {
-                        return -1;
-                    } else if (status2 < 0 && status1 > 0 || status2 == 0 && status1 != 0) {
-                        return 1;
-                    }
-                    return 0;
-                }
-            });
-        } catch (Exception e) {
-            FileLog.e("tmessages", e); //TODO find crash
-        }
-
-
-        if (listView != null) {
-            listView.invalidateViews();
-        }
-    }
-
-    public void setChatInfo(TLRPC.ChatParticipants chatParticipants) {
-        info = chatParticipants;
-    }
-
-    private void kickUser(TLRPC.TL_chatParticipant user) {
-        if (user != null) {
-            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(user.user_id), info);
-        } else {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), info);
-            finishFragment();
-        }
-    }
-
-    public boolean isChat() {
-        return chat_id != 0;
-    }
-
-    private void updateRowsIds() {
-        rowCount = 0;
-        overscrollRow = rowCount++;
-        if (user_id != 0) {
-            emptyRow = rowCount++;
-            phoneRow = rowCount++;
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            if (user != null && user.username != null && user.username.length() > 0) {
-                usernameRow = rowCount++;
-            } else {
-                usernameRow = -1;
-            }
-            sectionRow = rowCount++;
-            settingsNotificationsRow = rowCount++;
-            sharedMediaRow = rowCount++;
-            if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
-                settingsTimerRow = rowCount++;
-                settingsKeyRow = rowCount++;
-            } else {
-                settingsTimerRow = -1;
-                settingsKeyRow = -1;
-            }
-            if (currentEncryptedChat == null) {
-                startSecretChatRow = rowCount++;
-            } else {
-                startSecretChatRow = -1;
-            }
-        } else if (chat_id != 0) {
-            if (chat_id > 0) {
-                emptyRow = rowCount++;
-                settingsNotificationsRow = rowCount++;
-                sharedMediaRow = rowCount++;
-                emptyRowChat = rowCount++;
-                membersSectionRow = rowCount++;
-            }
-            if (info != null && !(info instanceof TLRPC.TL_chatParticipantsForbidden)) {
-                emptyRowChat2 = rowCount++;
-                rowCount += info.participants.size();
-                membersEndRow = rowCount;
-                int maxCount = chat_id > 0 ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
-                addMemberRow = rowCount++;
-            } else {
-                membersEndRow = -1;
-                membersSectionRow = -1;
-                emptyRowChat2 = -1;
-                addMemberRow = -1;
-            }
-        }
-    }
-
-    private void updateProfileData() {
-        if (avatarImage == null || nameTextView == null) {
-            return;
-        }
-        if (user_id != 0) {
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            TLRPC.FileLocation photo = null;
-            TLRPC.FileLocation photoBig = null;
-            if (user.photo != null) {
-                photo = user.photo.photo_small;
-                photoBig = user.photo.photo_big;
-            }
-            AvatarDrawable avatarDrawable = new AvatarDrawable(user);
-            avatarImage.setImage(photo, "50_50", avatarDrawable);
-
-            if (user instanceof TLRPC.TL_userDeleted) {
-                nameTextView.setText(LocaleController.getString("HiddenName", R.string.HiddenName));
-            } else {
-                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
-            }
-            onlineTextView.setText(LocaleController.formatUserStatus(user));
-
-            avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
-        } else if (chat_id != 0) {
-            TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
-            if (chat != null) {
-                currentChat = chat;
-            } else {
-                chat = currentChat;
-            }
-            nameTextView.setText(chat.title);
-
-            int count = chat.participants_count;
-            if (info != null) {
-                count = info.participants.size();
-            }
-
-            if (count != 0 && onlineCount > 1) {
-                onlineTextView.setText(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount)));
-            } else {
-                onlineTextView.setText(LocaleController.formatPluralString("Members", count));
-            }
-
-            TLRPC.FileLocation photo = null;
-            TLRPC.FileLocation photoBig = null;
-            if (chat.photo != null) {
-                photo = chat.photo.photo_small;
-                photoBig = chat.photo.photo_big;
-            }
-            avatarImage.setImage(photo, "50_50", new AvatarDrawable(chat, true));
-
-            avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
-        }
-    }
-
-    private void createActionBarMenu() {
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.clearItems();
-
-        if (user_id != 0) {
-            if (ContactsController.getInstance().contactsDict.get(user_id) == null) {
-                TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                if (user == null) {
-                    return;
-                }
-                ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-                if (user.phone != null && user.phone.length() != 0) {
-                    item.addSubItem(add_contact, LocaleController.getString("AddContact", R.string.AddContact), 0);
-                    item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
-                    item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
-                } else {
-                    item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
-                }
-            } else {
-                ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-                item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
-                item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
-                item.addSubItem(edit_contact, LocaleController.getString("EditContact", R.string.EditContact), 0);
-                item.addSubItem(delete_contact, LocaleController.getString("DeleteContact", R.string.DeleteContact), 0);
-            }
-        } else if (chat_id != 0) {
-            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-            if (chat_id > 0) {
-                item.addSubItem(add_member, LocaleController.getString("AddMember", R.string.AddMember), 0);
-                item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
-                item.addSubItem(leave_group, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit), 0);
-            } else {
-                item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
-                item.addSubItem(add_member, LocaleController.getString("AddRecipient", R.string.AddRecipient), 0);
-            }
-        }
-    }
-
-    @Override
-    protected void onDialogDismiss() {
-        if (listView != null) {
-            listView.invalidateViews();
-        }
-    }
-
-    @Override
-    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
-        if (dialog_id != 0) {
-            Bundle args = new Bundle();
-            args.putBoolean("scrollToTopOnResume", true);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-            int lower_part = (int)dialog_id;
-            if (lower_part != 0) {
-                if (lower_part > 0) {
-                    args.putInt("user_id", lower_part);
-                } else if (lower_part < 0) {
-                    args.putInt("chat_id", -lower_part);
-                }
-            } else {
-                args.putInt("enc_id", (int)(dialog_id >> 32));
-            }
-            presentFragment(new ChatActivity(args), true);
-            removeSelfFromStack();
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, null);
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            if (user_id != 0) {
-                return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow || i == startSecretChatRow;
-            } else if (chat_id != 0) {
-                return i == settingsNotificationsRow || i == sharedMediaRow || i > emptyRowChat2 && i < membersEndRow || i == addMemberRow;
-            }
-            return false;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new EmptyCell(mContext);
-                }
-                if (i == overscrollRow) {
-                    ((EmptyCell) view).setHeight(AndroidUtilities.dp(88));
-                } else if (i == emptyRowChat || i == emptyRowChat2) {
-                    ((EmptyCell) view).setHeight(AndroidUtilities.dp(8));
-                } else {
-                    ((EmptyCell) view).setHeight(AndroidUtilities.dp(36));
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new DividerCell(mContext);
-                    view.setPadding(AndroidUtilities.dp(72), 0, 0, 0);
-                }
-            } else if (type == 2) {
-                final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                if (view == null) {
-                    view = new TextDetailCell(mContext);
-                }
-                TextDetailCell textDetailCell = (TextDetailCell) view;
-
-                if (i == phoneRow) {
-                    String text;
-                    if (user.phone != null && user.phone.length() != 0) {
-                        text = PhoneFormat.getInstance().format("+" + user.phone);
-                    } else {
-                        text = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
-                    }
-                    textDetailCell.setTextAndValueAndIcon(text, LocaleController.getString("PhoneMobile", R.string.PhoneMobile), R.drawable.phone_grey);
-                } else if (i == usernameRow) {
-                    String text;
-                    if (user != null && user.username != null && user.username.length() != 0) {
-                        text = "@" + user.username;
-                    } else {
-                        text = "-";
-                    }
-                    textDetailCell.setTextAndValue(text, LocaleController.getString("Username", R.string.Username));
-                }
-            } else if (type == 3) {
-                if (view == null) {
-                    view = new TextCell(mContext);
-                }
-                TextCell textCell = (TextCell) view;
-                textCell.setTextColor(0xff212121);
-
-                if (i == sharedMediaRow) {
-                    String value;
-                    if (totalMediaCount == -1) {
-                        value = LocaleController.getString("Loading", R.string.Loading);
-                    } else {
-                        value = String.format("%d", totalMediaCount);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("SharedMedia", R.string.SharedMedia), value);
-                } else if (i == settingsTimerRow) {
-                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
-                    String value;
-                    if (encryptedChat.ttl == 0) {
-                        value = LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
-                    } else {
-                        value = AndroidUtilities.formatTTLString(encryptedChat.ttl);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("MessageLifetime", R.string.MessageLifetime), value);
-                } else if (i == settingsNotificationsRow) {
-                    textCell.setTextAndIcon(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.profile_list);
-                } else if (i == startSecretChatRow) {
-                    textCell.setText(LocaleController.getString("StartEncryptedChat", R.string.StartEncryptedChat));
-                    textCell.setTextColor(0xff37a919);
-                } else if (i == settingsKeyRow) {
-                    IdenticonDrawable identiconDrawable = new IdenticonDrawable();
-                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
-                    identiconDrawable.setEncryptedChat(encryptedChat);
-                    textCell.setTextAndValueDrawable(LocaleController.getString("EncryptionKey", R.string.EncryptionKey), identiconDrawable);
-                }
-            } else if (type == 4) {
-                if (view == null) {
-                    view = new UserCell(mContext, 61);
-                }
-
-                TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
-                ((UserCell)view).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
-            } else if (type == 5) {
-                if (view == null) {
-                    view = new ShadowSectionCell(mContext);
-                }
-            } else if (type == 6) {
-                if (view == null) {
-                    view = new AddMemberCell(mContext);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == emptyRow || i == overscrollRow || i == emptyRowChat || i == emptyRowChat2) {
-                return 0;
-            } else if (i == sectionRow) {
-                return 1;
-            } else if (i == phoneRow || i == usernameRow) {
-                return 2;
-            } else if (i == sharedMediaRow || i == settingsTimerRow || i == settingsNotificationsRow || i == startSecretChatRow || i == settingsKeyRow) {
-                return 3;
-            } else if (i > emptyRowChat2 && i < membersEndRow) {
-                return 4;
-            } else if (i == membersSectionRow) {
-                return 5;
-            } else if (i == addMemberRow) {
-                return 6;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 7;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
deleted file mode 100644
index 103ac0c18..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ /dev/null
@@ -1,632 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.provider.Settings;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationsController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextColorCell;
-import org.telegram.ui.Cells.TextDetailSettingsCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.ColorPickerView;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.NumberPicker;
-
-public class ProfileNotificationsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListView listView;
-    private long dialog_id;
-
-    private int settingsNotificationsRow;
-    private int settingsVibrateRow;
-    private int settingsSoundRow;
-    private int settingsPriorityRow;
-    private int settingsLedRow;
-    private int smartRow;
-    private int rowCount = 0;
-
-    public ProfileNotificationsActivity(Bundle args) {
-        super(args);
-        dialog_id = args.getLong("dialog_id");
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        settingsNotificationsRow = rowCount++;
-        settingsVibrateRow = rowCount++;
-        settingsSoundRow = rowCount++;
-        if (Build.VERSION.SDK_INT >= 21) {
-            settingsPriorityRow = rowCount++;
-        } else {
-            settingsPriorityRow = -1;
-        }
-        int lower_id = (int) dialog_id;
-        if (lower_id < 0) {
-            smartRow = rowCount++;
-        } else {
-            smartRow = 1;
-        }
-        settingsLedRow = rowCount++;
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
-        frameLayout.addView(listView);
-        final FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-        listView.setAdapter(new ListAdapter(context));
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (i == settingsVibrateRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled),
-                            LocaleController.getString("SettingsDefault", R.string.SettingsDefault),
-                            LocaleController.getString("SystemDefault", R.string.SystemDefault),
-                            LocaleController.getString("Short", R.string.Short),
-                            LocaleController.getString("Long", R.string.Long)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            if (which == 0) {
-                                editor.putInt("vibrate_" + dialog_id, 2);
-                            } else if (which == 1) {
-                                editor.putInt("vibrate_" + dialog_id, 0);
-                            } else if (which == 2) {
-                                editor.putInt("vibrate_" + dialog_id, 4);
-                            } else if (which == 3) {
-                                editor.putInt("vibrate_" + dialog_id, 1);
-                            } else if (which == 4) {
-                                editor.putInt("vibrate_" + dialog_id, 3);
-                            }
-                            editor.commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == settingsNotificationsRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("Default", R.string.Default),
-                            LocaleController.getString("Enabled", R.string.Enabled),
-                            LocaleController.getString("NotificationsDisabled", R.string.NotificationsDisabled)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface d, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            editor.putInt("notify2_" + dialog_id, which);
-                            MessagesStorage.getInstance().setDialogFlags(dialog_id, which == 2 ? 1 : 0);
-                            editor.commit();
-                            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(dialog_id);
-                            if (dialog != null) {
-                                dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
-                                if (which == 2) {
-                                    dialog.notify_settings.mute_until = Integer.MAX_VALUE;
-                                }
-                            }
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                            NotificationsController.updateServerNotificationsSettings(dialog_id);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == settingsSoundRow) {
-                    try {
-                        Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        Uri currentSound = null;
-
-                        String defaultPath = null;
-                        Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-                        if (defaultUri != null) {
-                            defaultPath = defaultUri.getPath();
-                        }
-
-                        String path = preferences.getString("sound_path_" + dialog_id, defaultPath);
-                        if (path != null && !path.equals("NoSound")) {
-                            if (path.equals(defaultPath)) {
-                                currentSound = defaultUri;
-                            } else {
-                                currentSound = Uri.parse(path);
-                            }
-                        }
-
-                        tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
-                        startActivityForResult(tmpIntent, 12);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else if (i == settingsLedRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-
-                    LinearLayout linearLayout = new LinearLayout(getParentActivity());
-                    linearLayout.setOrientation(LinearLayout.VERTICAL);
-                    final ColorPickerView colorPickerView = new ColorPickerView(getParentActivity());
-                    linearLayout.addView(colorPickerView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
-
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    if (preferences.contains("color_" + dialog_id)) {
-                        colorPickerView.setOldCenterColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
-                    } else {
-                        if ((int) dialog_id < 0) {
-                            colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
-                        } else {
-                            colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
-                        }
-                    }
-
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
-                    builder.setView(linearLayout);
-                    builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int which) {
-                            final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            editor.putInt("color_" + dialog_id, colorPickerView.getColor());
-                            editor.commit();
-                            listView.invalidateViews();
-                        }
-                    });
-                    builder.setNeutralButton(LocaleController.getString("LedDisabled", R.string.LedDisabled), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            editor.putInt("color_" + dialog_id, 0);
-                            editor.commit();
-                            listView.invalidateViews();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Default", R.string.Default), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            editor.remove("color_" + dialog_id);
-                            editor.commit();
-                            listView.invalidateViews();
-                        }
-                    });
-                    showDialog(builder.create());
-                } else if (i == settingsPriorityRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("SettingsDefault", R.string.SettingsDefault),
-                            LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault),
-                            LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh),
-                            LocaleController.getString("NotificationsPriorityMax", R.string.NotificationsPriorityMax)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            if (which == 0) {
-                                which = 3;
-                            } else {
-                                which--;
-                            }
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            preferences.edit().putInt("priority_" + dialog_id, which).commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == smartRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    int notifyMaxCount = preferences.getInt("smart_max_count_" + dialog_id, 2);
-                    int notifyDelay = preferences.getInt("smart_delay_" + dialog_id, 3 * 60);
-                    if (notifyMaxCount == 0) {
-                        notifyMaxCount = 2;
-                    }
-
-                    LinearLayout linearLayout = new LinearLayout(getParentActivity());
-                    linearLayout.setOrientation(LinearLayout.VERTICAL);
-
-                    LinearLayout linearLayout2 = new LinearLayout(getParentActivity());
-                    linearLayout2.setOrientation(LinearLayout.HORIZONTAL);
-                    linearLayout.addView(linearLayout2);
-                    LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) linearLayout2.getLayoutParams();
-                    layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.gravity = Gravity.CENTER_HORIZONTAL | Gravity.TOP;
-                    linearLayout2.setLayoutParams(layoutParams1);
-
-                    TextView textView = new TextView(getParentActivity());
-                    textView.setText(LocaleController.getString("SmartNotificationsSoundAtMost", R.string.SmartNotificationsSoundAtMost));
-                    textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-                    linearLayout2.addView(textView);
-                    layoutParams1 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-                    layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.gravity = Gravity.CENTER_VERTICAL | Gravity.LEFT;
-                    textView.setLayoutParams(layoutParams1);
-
-                    final NumberPicker numberPickerTimes = new NumberPicker(getParentActivity());
-                    numberPickerTimes.setMinValue(1);
-                    numberPickerTimes.setMaxValue(10);
-                    numberPickerTimes.setValue(notifyMaxCount);
-                    linearLayout2.addView(numberPickerTimes);
-                    layoutParams1 = (LinearLayout.LayoutParams) numberPickerTimes.getLayoutParams();
-                    layoutParams1.width = AndroidUtilities.dp(50);
-                    numberPickerTimes.setLayoutParams(layoutParams1);
-
-                    textView = new TextView(getParentActivity());
-                    textView.setText(LocaleController.getString("SmartNotificationsTimes", R.string.SmartNotificationsTimes));
-                    textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-                    linearLayout2.addView(textView);
-                    layoutParams1 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-                    layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.gravity = Gravity.CENTER_VERTICAL | Gravity.LEFT;
-                    textView.setLayoutParams(layoutParams1);
-
-                    linearLayout2 = new LinearLayout(getParentActivity());
-                    linearLayout2.setOrientation(LinearLayout.HORIZONTAL);
-                    linearLayout.addView(linearLayout2);
-                    layoutParams1 = (LinearLayout.LayoutParams) linearLayout2.getLayoutParams();
-                    layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.gravity = Gravity.CENTER_HORIZONTAL | Gravity.TOP;
-                    linearLayout2.setLayoutParams(layoutParams1);
-
-                    textView = new TextView(getParentActivity());
-                    textView.setText(LocaleController.getString("SmartNotificationsWithin", R.string.SmartNotificationsWithin));
-                    textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-                    linearLayout2.addView(textView);
-                    layoutParams1 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-                    layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.gravity = Gravity.CENTER_VERTICAL | Gravity.LEFT;
-                    textView.setLayoutParams(layoutParams1);
-
-                    final NumberPicker numberPickerMinutes = new NumberPicker(getParentActivity());
-                    numberPickerMinutes.setMinValue(1);
-                    numberPickerMinutes.setMaxValue(10);
-                    numberPickerMinutes.setValue(notifyDelay / 60);
-                    linearLayout2.addView(numberPickerMinutes);
-                    layoutParams1 = (LinearLayout.LayoutParams) numberPickerMinutes.getLayoutParams();
-                    layoutParams1.width = AndroidUtilities.dp(50);
-                    numberPickerMinutes.setLayoutParams(layoutParams1);
-
-                    textView = new TextView(getParentActivity());
-                    textView.setText(LocaleController.getString("SmartNotificationsMinutes", R.string.SmartNotificationsMinutes));
-                    textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-                    linearLayout2.addView(textView);
-                    layoutParams1 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-                    layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-                    layoutParams1.gravity = Gravity.CENTER_VERTICAL | Gravity.LEFT;
-                    textView.setLayoutParams(layoutParams1);
-
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("SmartNotifications", R.string.SmartNotifications));
-                    builder.setView(linearLayout);
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            preferences.edit().putInt("smart_max_count_" + dialog_id, numberPickerTimes.getValue()).commit();
-                            preferences.edit().putInt("smart_delay_" + dialog_id, numberPickerMinutes.getValue() * 60).commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("SmartNotificationsDisabled", R.string.SmartNotificationsDisabled), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            preferences.edit().putInt("smart_max_count_" + dialog_id, 0).commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            if (data == null) {
-                return;
-            }
-            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-            String name = null;
-            if (ringtone != null) {
-                Ringtone rng = RingtoneManager.getRingtone(ApplicationLoader.applicationContext, ringtone);
-                if (rng != null) {
-                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
-                        name = LocaleController.getString("SoundDefault", R.string.SoundDefault);
-                    } else {
-                        name = rng.getTitle(getParentActivity());
-                    }
-                    rng.stop();
-                }
-            }
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            SharedPreferences.Editor editor = preferences.edit();
-
-            if (requestCode == 12) {
-                if (name != null && ringtone != null) {
-                    editor.putString("sound_" + dialog_id, name);
-                    editor.putString("sound_path_" + dialog_id, ringtone.toString());
-                } else {
-                    editor.putString("sound_" + dialog_id, "NoSound");
-                    editor.putString("sound_path_" + dialog_id, "NoSound");
-                }
-            }
-            editor.commit();
-            listView.invalidateViews();
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.notificationsSettingsUpdated) {
-            listView.invalidateViews();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return true;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return true;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new TextDetailSettingsCell(mContext);
-                }
-
-                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
-
-                SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-                if (i == settingsVibrateRow) {
-                    int value = preferences.getInt("vibrate_" + dialog_id, 0);
-                    if (value == 0) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("SettingsDefault", R.string.SettingsDefault), true);
-                    } else if (value == 1) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
-                    } else if (value == 2) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled), true);
-                    } else if (value == 3) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), true);
-                    } else if (value == 4) {
-                        textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("SystemDefault", R.string.SystemDefault), true);
-                    }
-                } else if (i == settingsNotificationsRow) {
-                    int value = preferences.getInt("notify2_" + dialog_id, 0);
-                    if (value == 0) {
-                        textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), LocaleController.getString("Default", R.string.Default), true);
-                    } else if (value == 1) {
-                        textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), LocaleController.getString("Enabled", R.string.Enabled), true);
-                    } else if (value == 2) {
-                        textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), LocaleController.getString("NotificationsDisabled", R.string.NotificationsDisabled), true);
-                    }  else if (value == 3) {
-                        int delta = preferences.getInt("notifyuntil_" + dialog_id, 0) - ConnectionsManager.getInstance().getCurrentTime();
-                        String val;
-                        if (delta <= 0) {
-                            val = LocaleController.getString("Enabled", R.string.Enabled);
-                        } else if (delta < 60 * 60) {
-                            val = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Minutes", delta / 60));
-                        } else if (delta < 60 * 60 * 24) {
-                            val = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Hours", (int) Math.ceil(delta / 60.0f / 60)));
-                        } else if (delta < 60 * 60 * 24 * 365) {
-                            val = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Days", (int) Math.ceil(delta / 60.0f / 60 / 24)));
-                        } else {
-                            val = null;
-                        }
-                        if (val != null) {
-                            textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), val, true);
-                        } else {
-                            textCell.setTextAndValue(LocaleController.getString("Notifications", R.string.Notifications), LocaleController.getString("NotificationsDisabled", R.string.NotificationsDisabled), true);
-                        }
-                    }
-                } else if (i == settingsSoundRow) {
-                    String value = preferences.getString("sound_" + dialog_id, LocaleController.getString("SoundDefault", R.string.SoundDefault));
-                    if (value.equals("NoSound")) {
-                        value = LocaleController.getString("NoSound", R.string.NoSound);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("Sound", R.string.Sound), value, true);
-                } else if (i == settingsPriorityRow) {
-                    int value = preferences.getInt("priority_" + dialog_id, 3);
-                    if (value == 0) {
-                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault), true);
-                    } else if (value == 1) {
-                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh), true);
-                    } else if (value == 2) {
-                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityMax", R.string.NotificationsPriorityMax), true);
-                    } else if (value == 3) {
-                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("SettingsDefault", R.string.SettingsDefault), true);
-                    }
-                } else if (i == smartRow) {
-                    int notifyMaxCount = preferences.getInt("smart_max_count_" + dialog_id, 2);
-                    int notifyDelay = preferences.getInt("smart_delay_" + dialog_id, 3 * 60);
-                    if (notifyMaxCount == 0) {
-                        textCell.setTextAndValue(LocaleController.getString("SmartNotifications", R.string.SmartNotifications), LocaleController.getString("SmartNotificationsDisabled", R.string.SmartNotificationsDisabled), true);
-                    } else {
-                        String times = LocaleController.formatPluralString("Times", notifyMaxCount);
-                        String minutes = LocaleController.formatPluralString("Minutes", notifyDelay / 60);
-                        textCell.setTextAndValue(LocaleController.getString("SmartNotifications", R.string.SmartNotifications), LocaleController.formatString("SmartNotificationsInfo", R.string.SmartNotificationsInfo, times, minutes), true);
-                    }
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextColorCell(mContext);
-                }
-
-                TextColorCell textCell = (TextColorCell) view;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-                if (preferences.contains("color_" + dialog_id)) {
-                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("color_" + dialog_id, 0xff00ff00), false);
-                } else {
-                    if ((int)dialog_id < 0) {
-                        textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("GroupLed", 0xff00ff00), false);
-                    } else {
-                        textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("MessagesLed", 0xff00ff00), false);
-                    }
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == settingsNotificationsRow || i == settingsVibrateRow || i == settingsSoundRow || i == settingsPriorityRow || i == smartRow) {
-                return 0;
-            } else if (i == settingsLedRow) {
-                return 1;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
deleted file mode 100644
index 368898919..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ /dev/null
@@ -1,373 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.RectF;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.util.SparseArray;
-import android.view.Gravity;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.FrameLayout;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.MessageObject;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.io.File;
-import java.util.ArrayList;
-
-public class SecretPhotoViewer implements NotificationCenter.NotificationCenterDelegate {
-
-    private class FrameLayoutDrawer extends FrameLayout {
-        public FrameLayoutDrawer(Context context) {
-            super(context);
-            setWillNotDraw(false);
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            getInstance().onDraw(canvas);
-        }
-    }
-
-    private class FrameLayoutTouchListener extends FrameLayout {
-        public FrameLayoutTouchListener(Context context) {
-            super(context);
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent event) {
-            FileLog.e("tmessages", event.toString());
-            return super.onTouchEvent(event);
-        }
-    }
-
-    private class SecretDeleteTimer extends FrameLayout {
-        private String currentInfoString;
-        private int infoWidth;
-        private TextPaint infoPaint = null;
-        private StaticLayout infoLayout = null;
-        private Paint deleteProgressPaint;
-        private RectF deleteProgressRect = new RectF();
-        private Drawable drawable = null;
-
-        public SecretDeleteTimer(Context context) {
-            super(context);
-            setWillNotDraw(false);
-
-            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            infoPaint.setTextSize(AndroidUtilities.dp(15));
-            infoPaint.setColor(0xffffffff);
-
-            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            deleteProgressPaint.setColor(0xffe6e6e6);
-
-            drawable = getResources().getDrawable(R.drawable.circle1);
-        }
-
-        private void updateSecretTimeText() {
-            if (currentMessageObject == null) {
-                return;
-            }
-            String str = currentMessageObject.getSecretTimeString();
-            if (str == null) {
-                return;
-            }
-            if (currentInfoString == null || !currentInfoString.equals(str)) {
-                currentInfoString = str;
-                infoWidth = (int)Math.ceil(infoPaint.measureText(currentInfoString));
-                CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-                infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                invalidate();
-            }
-        }
-
-        @Override
-        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-            deleteProgressRect.set(getMeasuredWidth() - AndroidUtilities.dp(30), AndroidUtilities.dp(2), getMeasuredWidth() - AndroidUtilities.dp(2), AndroidUtilities.dp(30));
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            if (currentMessageObject == null || currentMessageObject.messageOwner.destroyTime == 0) {
-                return;
-            }
-
-            if (drawable != null) {
-                drawable.setBounds(getMeasuredWidth() - AndroidUtilities.dp(32), 0, getMeasuredWidth(), AndroidUtilities.dp(32));
-                drawable.draw(canvas);
-            }
-
-            long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
-            float progress = Math.max(0, (long)currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
-            canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
-            if (progress != 0) {
-                int offset = AndroidUtilities.dp(2);
-                invalidate((int)deleteProgressRect.left - offset, (int)deleteProgressRect.top - offset, (int)deleteProgressRect.right + offset * 2, (int)deleteProgressRect.bottom + offset * 2);
-            }
-            updateSecretTimeText();
-
-            if (infoLayout != null) {
-                canvas.save();
-                canvas.translate(getMeasuredWidth() - AndroidUtilities.dp(38) - infoWidth, AndroidUtilities.dp(7));
-                infoLayout.draw(canvas);
-                canvas.restore();
-            }
-        }
-    }
-
-    private Activity parentActivity;
-    private WindowManager.LayoutParams windowLayoutParams;
-    private FrameLayoutTouchListener windowView;
-    private FrameLayoutDrawer containerView;
-    private ImageReceiver centerImage = new ImageReceiver();
-    private SecretDeleteTimer secretDeleteTimer;
-    private boolean isVisible = false;
-
-    private MessageObject currentMessageObject = null;
-
-    private static volatile SecretPhotoViewer Instance = null;
-    public static SecretPhotoViewer getInstance() {
-        SecretPhotoViewer localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (PhotoViewer.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new SecretPhotoViewer();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.messagesDeleted) {
-            if (currentMessageObject == null) {
-                return;
-            }
-            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
-            if (markAsDeletedMessages.contains(currentMessageObject.getId())) {
-                closePhoto();
-            }
-        } else if (id == NotificationCenter.didCreatedNewDeleteTask) {
-            if (currentMessageObject == null || secretDeleteTimer == null) {
-                return;
-            }
-            SparseArray<ArrayList<Integer>> mids = (SparseArray<ArrayList<Integer>>)args[0];
-            for(int i = 0; i < mids.size(); i++) {
-                int key = mids.keyAt(i);
-                ArrayList<Integer> arr = mids.get(key);
-                for (Integer mid : arr) {
-                    if (currentMessageObject.getId() == mid) {
-                        currentMessageObject.messageOwner.destroyTime = key;
-                        secretDeleteTimer.invalidate();
-                        return;
-                    }
-                }
-            }
-        }
-    }
-
-    public void setParentActivity(Activity activity) {
-        if (parentActivity == activity) {
-            return;
-        }
-        parentActivity = activity;
-
-        windowView = new FrameLayoutTouchListener(activity);
-        windowView.setBackgroundColor(0xff000000);
-        windowView.setFocusable(true);
-        windowView.setFocusableInTouchMode(true);
-
-        containerView = new FrameLayoutDrawer(activity);
-        containerView.setFocusable(false);
-        windowView.addView(containerView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)containerView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        containerView.setLayoutParams(layoutParams);
-        containerView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_POINTER_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    closePhoto();
-                }
-                return true;
-            }
-        });
-
-        secretDeleteTimer = new SecretDeleteTimer(activity);
-        containerView.addView(secretDeleteTimer);
-        layoutParams = (FrameLayout.LayoutParams)secretDeleteTimer.getLayoutParams();
-        layoutParams.gravity = Gravity.TOP | Gravity.RIGHT;
-        layoutParams.width = AndroidUtilities.dp(100);
-        layoutParams.height = AndroidUtilities.dp(32);
-        layoutParams.rightMargin = AndroidUtilities.dp(19);
-        layoutParams.topMargin = AndroidUtilities.dp(19);
-        secretDeleteTimer.setLayoutParams(layoutParams);
-
-        windowLayoutParams = new WindowManager.LayoutParams();
-        windowLayoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
-        windowLayoutParams.format = PixelFormat.TRANSLUCENT;
-        windowLayoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
-        windowLayoutParams.gravity = Gravity.TOP;
-        windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
-        windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
-
-        centerImage.setParentView(containerView);
-    }
-
-    public void openPhoto(MessageObject messageObject) {
-        if (parentActivity == null || messageObject == null || messageObject.messageOwner.media == null || messageObject.messageOwner.media.photo == null) {
-            return;
-        }
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-
-        TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
-        int size = sizeFull.size;
-        if (size == 0) {
-            size = -1;
-        }
-        BitmapDrawable drawable = ImageLoader.getInstance().getImageFromMemory(sizeFull.location, null, null);
-        if (drawable == null) {
-            File file = FileLoader.getPathToAttach(sizeFull);
-            Bitmap bitmap;
-            try {
-                bitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
-            } catch (Throwable e) {
-                ImageLoader.getInstance().clearMemory();
-                bitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
-            }
-            if (bitmap != null) {
-                drawable = new BitmapDrawable(bitmap);
-                ImageLoader.getInstance().putImageToCache(drawable, sizeFull.location.volume_id + "_" + sizeFull.location.local_id);
-            }
-        }
-        if (drawable != null) {
-            centerImage.setImageBitmap(drawable);
-        } else {
-            centerImage.setImage(sizeFull.location, null, null, size, null, false);
-        }
-
-        currentMessageObject = messageObject;
-
-        AndroidUtilities.lockOrientation(parentActivity);
-
-        try {
-            if (windowView.getParent() != null) {
-                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-                wm.removeView(windowView);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-        wm.addView(windowView, windowLayoutParams);
-        secretDeleteTimer.invalidate();
-        isVisible = true;
-    }
-
-    public boolean isVisible() {
-        return isVisible;
-    }
-
-    public void closePhoto() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        if (parentActivity == null) {
-            return;
-        }
-        currentMessageObject = null;
-        isVisible = false;
-        AndroidUtilities.unlockOrientation(parentActivity);
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                centerImage.setImageBitmap((Bitmap)null);
-            }
-        });
-        try {
-            if (windowView.getParent() != null) {
-                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-                wm.removeView(windowView);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void destroyPhotoViewer() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
-        isVisible = false;
-        currentMessageObject = null;
-        if (parentActivity == null || windowView == null) {
-            return;
-        }
-        try {
-            if (windowView.getParent() != null) {
-                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-                wm.removeViewImmediate(windowView);
-            }
-            windowView = null;
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        Instance = null;
-    }
-
-    private void onDraw(Canvas canvas) {
-        canvas.save();
-        canvas.translate(containerView.getWidth() / 2, containerView.getHeight() / 2);
-        Bitmap bitmap = centerImage.getBitmap();
-        if (bitmap != null) {
-            int bitmapWidth = bitmap.getWidth();
-            int bitmapHeight = bitmap.getHeight();
-
-            float scaleX = (float) containerView.getWidth() / (float) bitmapWidth;
-            float scaleY = (float) containerView.getHeight() / (float) bitmapHeight;
-            float scale = scaleX > scaleY ? scaleY : scaleX;
-            int width = (int) (bitmapWidth * scale);
-            int height = (int) (bitmapHeight * scale);
-
-            centerImage.setImageCoords(-width / 2, -height / 2, width, height);
-            centerImage.draw(canvas);
-        }
-        canvas.restore();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
deleted file mode 100644
index a7185bc3d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
+++ /dev/null
@@ -1,480 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.os.Build;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.HeaderCell;
-import org.telegram.ui.Cells.SessionCell;
-import org.telegram.ui.Cells.TextInfoPrivacyCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-
-public class SessionsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-    private ArrayList<TLRPC.TL_authorization> sessions = new ArrayList<>();
-    private TLRPC.TL_authorization currentSession = null;
-    private boolean loading;
-    private LinearLayout emptyLayout;
-
-    private int currentSessionSectionRow;
-    private int currentSessionRow;
-    private int terminateAllSessionsRow;
-    private int terminateAllSessionsDetailRow;
-    private int otherSessionsSectionRow;
-    private int otherSessionsStartRow;
-    private int otherSessionsEndRow;
-    private int otherSessionsTerminateDetail;
-    private int noOtherSessionsRow;
-    private int rowCount;
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        updateRows();
-        loadSessions(false);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.newSessionReceived);
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.newSessionReceived);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("SessionsTitle", R.string.SessionsTitle));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        listAdapter = new ListAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(0xfff0f0f0);
-
-        emptyLayout = new LinearLayout(context);
-        emptyLayout.setOrientation(LinearLayout.VERTICAL);
-        emptyLayout.setGravity(Gravity.CENTER);
-        emptyLayout.setBackgroundResource(R.drawable.greydivider_bottom);
-        emptyLayout.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT, AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight()));
-
-        ImageView imageView = new ImageView(context);
-        imageView.setImageResource(R.drawable.devices);
-        emptyLayout.addView(imageView);
-        LinearLayout.LayoutParams layoutParams2 = (LinearLayout.LayoutParams) imageView.getLayoutParams();
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        imageView.setLayoutParams(layoutParams2);
-
-        TextView textView = new TextView(context);
-        textView.setTextColor(0xff8a8a8a);
-        textView.setGravity(Gravity.CENTER);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
-        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setText(LocaleController.getString("NoOtherSessions", R.string.NoOtherSessions));
-        emptyLayout.addView(textView);
-        layoutParams2 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams2.topMargin = AndroidUtilities.dp(16);
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.gravity = Gravity.CENTER;
-        textView.setLayoutParams(layoutParams2);
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff8a8a8a);
-        textView.setGravity(Gravity.CENTER);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 17);
-        textView.setPadding(AndroidUtilities.dp(20), 0, AndroidUtilities.dp(20), 0);
-        textView.setText(LocaleController.getString("NoOtherSessionsInfo", R.string.NoOtherSessionsInfo));
-        emptyLayout.addView(textView);
-        layoutParams2 = (LinearLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams2.topMargin = AndroidUtilities.dp(14);
-        layoutParams2.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.gravity = Gravity.CENTER;
-        textView.setLayoutParams(layoutParams2);
-
-        FrameLayout progressView = new FrameLayout(context);
-        frameLayout.addView(progressView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        progressView.setLayoutParams(layoutParams);
-        progressView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        ProgressBar progressBar = new ProgressBar(context);
-        progressView.addView(progressBar);
-        layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER;
-        progressView.setLayoutParams(layoutParams);
-
-        ListView listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDrawSelectorOnTop(true);
-        listView.setEmptyView(progressView);
-        frameLayout.addView(listView);
-        layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP;
-        listView.setLayoutParams(layoutParams);
-        listView.setAdapter(listAdapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (i == terminateAllSessionsRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSureSessions", R.string.AreYouSureSessions));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            TLRPC.TL_auth_resetAuthorizations req = new TLRPC.TL_auth_resetAuthorizations();
-                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                @Override
-                                public void run(final TLObject response, final TLRPC.TL_error error) {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            if (getParentActivity() == null) {
-                                                return;
-                                            }
-                                            if (error == null && response instanceof TLRPC.TL_boolTrue) {
-                                                Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), Toast.LENGTH_SHORT);
-                                                toast.show();
-                                            } else {
-                                                Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnknownError", R.string.UnknownError), Toast.LENGTH_SHORT);
-                                                toast.show();
-                                            }
-                                            finishFragment();
-                                        }
-                                    });
-                                    UserConfig.registeredForPush = false;
-                                    UserConfig.registeredForInternalPush = false;
-                                    UserConfig.saveConfig(false);
-                                    MessagesController.getInstance().registerForPush(UserConfig.pushString);
-                                    ConnectionsManager.getInstance().initPushConnection();
-                                }
-                            });
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i >= otherSessionsStartRow && i < otherSessionsEndRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("TerminateSessionQuestion", R.string.TerminateSessionQuestion));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int option) {
-                            final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
-                            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-                            progressDialog.setCanceledOnTouchOutside(false);
-                            progressDialog.setCancelable(false);
-                            progressDialog.show();
-
-                            final TLRPC.TL_authorization authorization = sessions.get(i - otherSessionsStartRow);
-                            TLRPC.TL_account_resetAuthorization req = new TLRPC.TL_account_resetAuthorization();
-                            req.hash = authorization.hash;
-                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                @Override
-                                public void run(final TLObject response, final TLRPC.TL_error error) {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            try {
-                                                progressDialog.dismiss();
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                            if (error == null) {
-                                                sessions.remove(authorization);
-                                                updateRows();
-                                                if (listAdapter != null) {
-                                                    listAdapter.notifyDataSetChanged();
-                                                }
-                                            }
-                                        }
-                                    });
-                                }
-                            });
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.newSessionReceived) {
-            loadSessions(true);
-        }
-    }
-
-    private void loadSessions(boolean silent) {
-        if (loading) {
-            return;
-        }
-        if (!silent) {
-            loading = true;
-        }
-        TLRPC.TL_account_getAuthorizations req = new TLRPC.TL_account_getAuthorizations();
-        long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        loading = false;
-                        if (error == null) {
-                            sessions.clear();
-                            TLRPC.TL_account_authorizations res = (TLRPC.TL_account_authorizations) response;
-                            for (TLRPC.TL_authorization authorization : res.authorizations) {
-                                if ((authorization.flags & 1) != 0) {
-                                    currentSession = authorization;
-                                } else {
-                                    sessions.add(authorization);
-                                }
-                            }
-                            updateRows();
-                        }
-                        if (listAdapter != null) {
-                            listAdapter.notifyDataSetChanged();
-                        }
-                    }
-                });
-            }
-        });
-        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-    }
-
-    private void updateRows() {
-        rowCount = 0;
-        if (currentSession != null) {
-            currentSessionSectionRow = rowCount++;
-            currentSessionRow = rowCount++;
-        } else {
-            currentSessionRow = -1;
-            currentSessionSectionRow = -1;
-        }
-        if (sessions.isEmpty()) {
-            if (currentSession != null) {
-                noOtherSessionsRow = rowCount++;
-            } else {
-                noOtherSessionsRow = -1;
-            }
-            terminateAllSessionsRow = -1;
-            terminateAllSessionsDetailRow = -1;
-            otherSessionsSectionRow = -1;
-            otherSessionsStartRow = -1;
-            otherSessionsEndRow = -1;
-            otherSessionsTerminateDetail = -1;
-        } else {
-            noOtherSessionsRow = -1;
-            terminateAllSessionsRow = rowCount++;
-            terminateAllSessionsDetailRow = rowCount++;
-            otherSessionsSectionRow = rowCount++;
-            otherSessionsStartRow = otherSessionsSectionRow + 1;
-            otherSessionsEndRow = otherSessionsStartRow + sessions.size();
-            rowCount += sessions.size();
-            otherSessionsTerminateDetail = rowCount++;
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == terminateAllSessionsRow || i >= otherSessionsStartRow && i < otherSessionsEndRow;
-        }
-
-        @Override
-        public int getCount() {
-            return loading ? 0 : rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new TextSettingsCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                TextSettingsCell textCell = (TextSettingsCell) view;
-                if (i == terminateAllSessionsRow) {
-                    textCell.setTextColor(0xffdb5151);
-                    textCell.setText(LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), false);
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextInfoPrivacyCell(mContext);
-                }
-                if (i == terminateAllSessionsDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ClearOtherSessionsHelp", R.string.ClearOtherSessionsHelp));
-                    view.setBackgroundResource(R.drawable.greydivider);
-                } else if (i == otherSessionsTerminateDetail) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("TerminateSessionInfo", R.string.TerminateSessionInfo));
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    view = new HeaderCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                if (i == currentSessionSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("CurrentSession", R.string.CurrentSession));
-                } else if (i == otherSessionsSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("OtherSessions", R.string.OtherSessions));
-                }
-            } else if (type == 3) {
-                ViewGroup.LayoutParams layoutParams = emptyLayout.getLayoutParams();
-                if (layoutParams != null) {
-                    layoutParams.height = Math.max(AndroidUtilities.dp(220), AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(128) - (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0));
-                    emptyLayout.setLayoutParams(layoutParams);
-                }
-                return emptyLayout;
-            } else if (type == 4) {
-                if (view == null) {
-                    view = new SessionCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                if (i == currentSessionRow) {
-                    ((SessionCell) view).setSession(currentSession, !sessions.isEmpty());
-                } else {
-                    ((SessionCell) view).setSession(sessions.get(i - otherSessionsStartRow), i != otherSessionsEndRow - 1);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == terminateAllSessionsRow) {
-                return 0;
-            } else if (i == terminateAllSessionsDetailRow || i == otherSessionsTerminateDetail) {
-                return 1;
-            } else if (i == currentSessionSectionRow || i == otherSessionsSectionRow) {
-                return 2;
-            } else if (i == noOtherSessionsRow) {
-                return 3;
-            } else if (i == currentSessionRow || i >= otherSessionsStartRow && i < otherSessionsEndRow) {
-                return 4;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 5;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return loading;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
deleted file mode 100644
index a5bdf3b00..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ /dev/null
@@ -1,1220 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.animation.ObjectAnimator;
-import android.animation.StateListAnimator;
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.content.res.Configuration;
-import android.graphics.Bitmap;
-import android.graphics.Outline;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.text.Html;
-import android.text.Spannable;
-import android.text.TextUtils;
-import android.text.method.LinkMovementMethod;
-import android.util.Base64;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewOutlineProvider;
-import android.view.ViewTreeObserver;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.MediaController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.BuildVars;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.SerializedData;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.UserConfig;
-import org.telegram.android.MessageObject;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.ui.Cells.TextInfoCell;
-import org.telegram.ui.Cells.EmptyCell;
-import org.telegram.ui.Cells.HeaderCell;
-import org.telegram.ui.Cells.ShadowSectionCell;
-import org.telegram.ui.Cells.TextCheckCell;
-import org.telegram.ui.Cells.TextDetailSettingsCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.AvatarUpdater;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.NumberPicker;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Locale;
-
-public class SettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
-
-    private ListView listView;
-    private ListAdapter listAdapter;
-    private BackupImageView avatarImage;
-    private TextView nameTextView;
-    private TextView onlineTextView;
-    private ImageView writeButton;
-    private AvatarUpdater avatarUpdater = new AvatarUpdater();
-
-    private int overscrollRow;
-    private int emptyRow;
-    private int numberSectionRow;
-    private int numberRow;
-    private int usernameRow;
-    private int settingsSectionRow;
-    private int settingsSectionRow2;
-    private int enableAnimationsRow;
-    private int notificationRow;
-    private int backgroundRow;
-    private int languageRow;
-    private int privacyRow;
-    private int mediaDownloadSection;
-    private int mediaDownloadSection2;
-    private int mobileDownloadRow;
-    private int wifiDownloadRow;
-    private int roamingDownloadRow;
-    private int saveToGalleryRow;
-    private int messagesSectionRow;
-    private int messagesSectionRow2;
-    private int textSizeRow;
-    private int stickersRow;
-    private int sendByEnterRow;
-    private int supportSectionRow;
-    private int supportSectionRow2;
-    private int askQuestionRow;
-    private int telegramFaqRow;
-    private int sendLogsRow;
-    private int clearLogsRow;
-    private int switchBackendButtonRow;
-    private int versionRow;
-    private int contactsSectionRow;
-    private int contactsReimportRow;
-    private int contactsSortRow;
-    private int rowCount;
-
-    private final static int edit_name = 1;
-    private final static int logout = 2;
-
-    private static class LinkMovementMethodMy extends LinkMovementMethod {
-        @Override
-        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
-            try {
-                return super.onTouchEvent(widget, buffer, event);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            return false;
-        }
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        avatarUpdater.parentFragment = this;
-        avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
-            @Override
-            public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
-                TLRPC.TL_photos_uploadProfilePhoto req = new TLRPC.TL_photos_uploadProfilePhoto();
-                req.caption = "";
-                req.crop = new TLRPC.TL_inputPhotoCropAuto();
-                req.file = file;
-                req.geo_point = new TLRPC.TL_inputGeoPointEmpty();
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        if (error == null) {
-                            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                            if (user == null) {
-                                user = UserConfig.getCurrentUser();
-                                if (user == null) {
-                                    return;
-                                }
-                                MessagesController.getInstance().putUser(user, false);
-                            } else {
-                                UserConfig.setCurrentUser(user);
-                            }
-                            if (user == null) {
-                                return;
-                            }
-                            TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo) response;
-                            ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
-                            TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100);
-                            TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000);
-                            user.photo = new TLRPC.TL_userProfilePhoto();
-                            user.photo.photo_id = photo.photo.id;
-                            if (smallSize != null) {
-                                user.photo.photo_small = smallSize.location;
-                            }
-                            if (bigSize != null) {
-                                user.photo.photo_big = bigSize.location;
-                            } else if (smallSize != null) {
-                                user.photo.photo_small = smallSize.location;
-                            }
-                            MessagesStorage.getInstance().clearUserPhotos(user.id);
-                            ArrayList<TLRPC.User> users = new ArrayList<>();
-                            users.add(user);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
-                                    UserConfig.saveConfig(true);
-                                }
-                            });
-                        }
-                    }
-                });
-            }
-        };
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-
-        rowCount = 0;
-        overscrollRow = rowCount++;
-        emptyRow = rowCount++;
-        numberSectionRow = rowCount++;
-        numberRow = rowCount++;
-        usernameRow = rowCount++;
-        settingsSectionRow = rowCount++;
-        settingsSectionRow2 = rowCount++;
-        notificationRow = rowCount++;
-        privacyRow = rowCount++;
-        backgroundRow = rowCount++;
-        languageRow = rowCount++;
-        enableAnimationsRow = rowCount++;
-        mediaDownloadSection = rowCount++;
-        mediaDownloadSection2 = rowCount++;
-        mobileDownloadRow = rowCount++;
-        wifiDownloadRow = rowCount++;
-        roamingDownloadRow = rowCount++;
-        saveToGalleryRow = rowCount++;
-        messagesSectionRow = rowCount++;
-        messagesSectionRow2 = rowCount++;
-        textSizeRow = rowCount++;
-        stickersRow = rowCount++;
-        sendByEnterRow = rowCount++;
-        supportSectionRow = rowCount++;
-        supportSectionRow2 = rowCount++;
-        askQuestionRow = rowCount++;
-        telegramFaqRow = rowCount++;
-        if (BuildVars.DEBUG_VERSION) {
-            sendLogsRow = rowCount++;
-            clearLogsRow = rowCount++;
-            switchBackendButtonRow = rowCount++;
-        }
-        versionRow = rowCount++;
-        //contactsSectionRow = rowCount++;
-        //contactsReimportRow = rowCount++;
-        //contactsSortRow = rowCount++;
-
-        MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid);
-
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        if (avatarImage != null) {
-            avatarImage.setImageDrawable(null);
-        }
-        MessagesController.getInstance().cancelLoadFullUser(UserConfig.getClientUserId());
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        avatarUpdater.clear();
-    }
-
-    @Override
-    public boolean needAddActionBar() {
-        return false;
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(5));
-        actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setExtraHeight(AndroidUtilities.dp(88), false);
-        if (AndroidUtilities.isTablet()) {
-            actionBar.setOccupyStatusBar(false);
-        }
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == edit_name) {
-                    presentFragment(new ChangeNameActivity());
-                } else if (id == logout) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSureLogout", R.string.AreYouSureLogout));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            MessagesController.getInstance().performLogout(true);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-            }
-        });
-        ActionBarMenu menu = actionBar.createMenu();
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-        item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
-        item.addSubItem(logout, LocaleController.getString("LogOut", R.string.LogOut), 0);
-
-        listAdapter = new ListAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        avatarImage = new BackupImageView(context);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(30));
-        actionBar.addView(avatarImage, LayoutHelper.createFrame(60, 60, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM, LocaleController.isRTL ? 0 : 17, 0, LocaleController.isRTL ? 17 : 0, 22));
-        avatarImage.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                if (user.photo != null && user.photo.photo_big != null) {
-                    PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                    PhotoViewer.getInstance().openPhoto(user.photo.photo_big, SettingsActivity.this);
-                }
-            }
-        });
-
-        nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xffffffff);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        nameTextView.setLines(1);
-        nameTextView.setMaxLines(1);
-        nameTextView.setSingleLine(true);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        actionBar.addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM, LocaleController.isRTL ? 16 : 97, 0, LocaleController.isRTL ? 97 : 16, 51));
-
-        onlineTextView = new TextView(context);
-        onlineTextView.setTextColor(AvatarDrawable.getProfileTextColorForId(5));
-        onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        onlineTextView.setLines(1);
-        onlineTextView.setMaxLines(1);
-        onlineTextView.setSingleLine(true);
-        onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
-        onlineTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-        actionBar.addView(onlineTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM, LocaleController.isRTL ? 16 : 97, 0, LocaleController.isRTL ? 97 : 16, 30));
-
-        listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
-        listView.setAdapter(listAdapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (i == textSizeRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("TextSize", R.string.TextSize));
-                    final NumberPicker numberPicker = new NumberPicker(getParentActivity());
-                    numberPicker.setMinValue(12);
-                    numberPicker.setMaxValue(30);
-                    numberPicker.setValue(MessagesController.getInstance().fontSize);
-                    builder.setView(numberPicker);
-                    builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            editor.putInt("fons_size", numberPicker.getValue());
-                            MessagesController.getInstance().fontSize = numberPicker.getValue();
-                            editor.commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
-                } else if (i == enableAnimationsRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    boolean animations = preferences.getBoolean("view_animations", true);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    editor.putBoolean("view_animations", !animations);
-                    editor.commit();
-                    if (view instanceof TextCheckCell) {
-                        ((TextCheckCell) view).setChecked(!animations);
-                    }
-                } else if (i == notificationRow) {
-                    presentFragment(new NotificationsSettingsActivity());
-                } else if (i == backgroundRow) {
-                    presentFragment(new WallpapersActivity());
-                } else if (i == askQuestionRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    final TextView message = new TextView(getParentActivity());
-                    message.setText(Html.fromHtml(LocaleController.getString("AskAQuestionInfo", R.string.AskAQuestionInfo)));
-                    message.setTextSize(18);
-                    message.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(5), AndroidUtilities.dp(8), AndroidUtilities.dp(6));
-                    message.setMovementMethod(new LinkMovementMethodMy());
-
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setView(message);
-                    builder.setPositiveButton(LocaleController.getString("AskButton", R.string.AskButton), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            performAskAQuestion();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == sendLogsRow) {
-                    sendLogs();
-                } else if (i == clearLogsRow) {
-                    FileLog.cleanupLogs();
-                } else if (i == sendByEnterRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    boolean send = preferences.getBoolean("send_by_enter", false);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    editor.putBoolean("send_by_enter", !send);
-                    editor.commit();
-                    if (view instanceof TextCheckCell) {
-                        ((TextCheckCell) view).setChecked(!send);
-                    }
-                } else if (i == saveToGalleryRow) {
-                    MediaController.getInstance().toggleSaveToGallery();
-                    if (view instanceof TextCheckCell) {
-                        ((TextCheckCell) view).setChecked(MediaController.getInstance().canSaveToGallery());
-                    }
-                } else if (i == privacyRow) {
-                    presentFragment(new PrivacySettingsActivity());
-                } else if (i == languageRow) {
-                    presentFragment(new LanguageSelectActivity());
-                } else if (i == switchBackendButtonRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            ConnectionsManager.getInstance().switchBackend();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == telegramFaqRow) {
-                    try {
-                        Intent pickIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl)));
-                        getParentActivity().startActivityForResult(pickIntent, 500);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else if (i == contactsReimportRow) {
-
-                } else if (i == contactsSortRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("SortBy", R.string.SortBy));
-                    builder.setItems(new CharSequence[]{
-                            LocaleController.getString("Default", R.string.Default),
-                            LocaleController.getString("SortFirstName", R.string.SortFirstName),
-                            LocaleController.getString("SortLastName", R.string.SortLastName)
-                    }, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            editor.putInt("sortContactsBy", which);
-                            editor.commit();
-                            if (listView != null) {
-                                listView.invalidateViews();
-                            }
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
-                    int mask = 0;
-                    if (i == mobileDownloadRow) {
-                        builder.setTitle(LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData));
-                        mask = MediaController.getInstance().mobileDataDownloadMask;
-                    } else if (i == wifiDownloadRow) {
-                        builder.setTitle(LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi));
-                        mask = MediaController.getInstance().wifiDownloadMask;
-                    } else if (i == roamingDownloadRow) {
-                        builder.setTitle(LocaleController.getString("WhenRoaming", R.string.WhenRoaming));
-                        mask = MediaController.getInstance().roamingDownloadMask;
-                    }
-                    builder.setMultiChoiceItems(
-                            new CharSequence[]{LocaleController.getString("AttachPhoto", R.string.AttachPhoto), LocaleController.getString("AttachAudio", R.string.AttachAudio), LocaleController.getString("AttachVideo", R.string.AttachVideo), LocaleController.getString("AttachDocument", R.string.AttachDocument)},
-                            new boolean[]{(mask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0},
-                            new DialogInterface.OnMultiChoiceClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialog, int which, boolean isChecked) {
-                                    int mask = 0;
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                                    SharedPreferences.Editor editor = preferences.edit();
-                                    if (i == mobileDownloadRow) {
-                                        mask = MediaController.getInstance().mobileDataDownloadMask;
-                                    } else if (i == wifiDownloadRow) {
-                                        mask = MediaController.getInstance().wifiDownloadMask;
-                                    } else if (i == roamingDownloadRow) {
-                                        mask = MediaController.getInstance().roamingDownloadMask;
-                                    }
-
-                                    int maskDiff = 0;
-                                    if (which == 0) {
-                                        maskDiff = MediaController.AUTODOWNLOAD_MASK_PHOTO;
-                                    } else if (which == 1) {
-                                        maskDiff = MediaController.AUTODOWNLOAD_MASK_AUDIO;
-                                    } else if (which == 2) {
-                                        maskDiff = MediaController.AUTODOWNLOAD_MASK_VIDEO;
-                                    } else if (which == 3) {
-                                        maskDiff = MediaController.AUTODOWNLOAD_MASK_DOCUMENT;
-                                    }
-
-                                    if (isChecked) {
-                                        mask |= maskDiff;
-                                    } else {
-                                        mask &= ~maskDiff;
-                                    }
-
-                                    if (i == mobileDownloadRow) {
-                                        editor.putInt("mobileDataDownloadMask", mask);
-                                        MediaController.getInstance().mobileDataDownloadMask = mask;
-                                    } else if (i == wifiDownloadRow) {
-                                        editor.putInt("wifiDownloadMask", mask);
-                                        MediaController.getInstance().wifiDownloadMask = mask;
-                                    } else if (i == roamingDownloadRow) {
-                                        editor.putInt("roamingDownloadMask", mask);
-                                        MediaController.getInstance().roamingDownloadMask = mask;
-                                    }
-                                    editor.commit();
-                                    if (listView != null) {
-                                        listView.invalidateViews();
-                                    }
-                                }
-                            });
-                    builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
-                    showDialog(builder.create());
-                } else if (i == usernameRow) {
-                    presentFragment(new ChangeUsernameActivity());
-                } else if (i == numberRow) {
-                    presentFragment(new ChangePhoneHelpActivity());
-                } else if (i == stickersRow) {
-                    presentFragment(new StickersActivity());
-                }
-            }
-        });
-
-        frameLayout.addView(actionBar);
-
-        writeButton = new ImageView(context);
-        writeButton.setBackgroundResource(R.drawable.floating_user_states);
-        writeButton.setImageResource(R.drawable.floating_camera);
-        writeButton.setScaleType(ImageView.ScaleType.CENTER);
-        if (Build.VERSION.SDK_INT >= 21) {
-            StateListAnimator animator = new StateListAnimator();
-            animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(writeButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
-            animator.addState(new int[]{}, ObjectAnimator.ofFloat(writeButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
-            writeButton.setStateListAnimator(animator);
-            writeButton.setOutlineProvider(new ViewOutlineProvider() {
-                @SuppressLint("NewApi")
-                @Override
-                public void getOutline(View view, Outline outline) {
-                    outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-                }
-            });
-        }
-        frameLayout.addView(writeButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 16 : 0, 0, LocaleController.isRTL ? 0 : 16, 0));
-        writeButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (getParentActivity() == null) {
-                    return;
-                }
-                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
-                CharSequence[] items;
-
-                TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                if (user == null) {
-                    user = UserConfig.getCurrentUser();
-                }
-                if (user == null) {
-                    return;
-                }
-                boolean fullMenu = false;
-                if (user.photo != null && user.photo.photo_big != null && !(user.photo instanceof TLRPC.TL_userProfilePhotoEmpty)) {
-                    items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
-                    fullMenu = true;
-                } else {
-                    items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
-                }
-
-                final boolean full = fullMenu;
-                builder.setItems(items, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface, int i) {
-                        if (i == 0) {
-                            avatarUpdater.openCamera();
-                        } else if (i == 1) {
-                            avatarUpdater.openGallery();
-                        } else if (i == 2) {
-                            MessagesController.getInstance().deleteUserPhoto(null);
-                        }
-                    }
-                });
-                showDialog(builder.create());
-            }
-        });
-
-        listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView view, int scrollState) {
-
-            }
-
-            @Override
-            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                if (totalItemCount == 0) {
-                    return;
-                }
-                int height = 0;
-                View child = view.getChildAt(0);
-                if (child != null) {
-                    if (firstVisibleItem == 0) {
-                        height = AndroidUtilities.dp(88) + (child.getTop() < 0 ? child.getTop() : 0);
-                    }
-                    if (actionBar.getExtraHeight() != height) {
-                        actionBar.setExtraHeight(height, true);
-                        needLayout();
-                    }
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    protected void onDialogDismiss() {
-        MediaController.getInstance().checkAutodownloadSettings();
-    }
-
-    @Override
-    public void updatePhotoAtIndex(int index) {
-
-    }
-
-    @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-        if (fileLocation == null) {
-            return null;
-        }
-        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-        if (user != null && user.photo != null && user.photo.photo_big != null) {
-            TLRPC.FileLocation photoBig = user.photo.photo_big;
-            if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
-                int coords[] = new int[2];
-                avatarImage.getLocationInWindow(coords);
-                PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
-                object.viewX = coords[0];
-                object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
-                object.parentView = avatarImage;
-                object.imageReceiver = avatarImage.getImageReceiver();
-                object.user_id = UserConfig.getClientUserId();
-                object.thumb = object.imageReceiver.getBitmap();
-                object.size = -1;
-                object.radius = avatarImage.getImageReceiver().getRoundRadius();
-                return object;
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-        return null;
-    }
-
-    @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-    }
-
-    @Override
-    public void willHidePhotoViewer() {
-        avatarImage.getImageReceiver().setVisible(true, true);
-    }
-
-    @Override
-    public boolean isPhotoChecked(int index) {
-        return false;
-    }
-
-    @Override
-    public void setPhotoChecked(int index) {
-    }
-
-    @Override
-    public void cancelButtonPressed() {
-    }
-
-    @Override
-    public void sendButtonPressed(int index) {
-    }
-
-    @Override
-    public int getSelectedCount() {
-        return 0;
-    }
-
-    public void performAskAQuestion() {
-        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        int uid = preferences.getInt("support_id", 0);
-        TLRPC.User supportUser = null;
-        if (uid != 0) {
-            supportUser = MessagesController.getInstance().getUser(uid);
-            if (supportUser == null) {
-                String userString = preferences.getString("support_user", null);
-                if (userString != null) {
-                    try {
-                        byte[] datacentersBytes = Base64.decode(userString, Base64.DEFAULT);
-                        if (datacentersBytes != null) {
-                            SerializedData data = new SerializedData(datacentersBytes);
-                            supportUser = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
-                            if (supportUser != null && supportUser.id == 333000) {
-                                supportUser = null;
-                            }
-                            data.cleanup();
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                        supportUser = null;
-                    }
-                }
-            }
-        }
-        if (supportUser == null) {
-            final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
-            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-            progressDialog.setCanceledOnTouchOutside(false);
-            progressDialog.setCancelable(false);
-            progressDialog.show();
-            TLRPC.TL_help_getSupport req = new TLRPC.TL_help_getSupport();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-
-                        final TLRPC.TL_help_support res = (TLRPC.TL_help_support) response;
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                SharedPreferences.Editor editor = preferences.edit();
-                                editor.putInt("support_id", res.user.id);
-                                SerializedData data = new SerializedData();
-                                res.user.serializeToStream(data);
-                                editor.putString("support_user", Base64.encodeToString(data.toByteArray(), Base64.DEFAULT));
-                                editor.commit();
-                                data.cleanup();
-                                try {
-                                    progressDialog.dismiss();
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                                ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(res.user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                MessagesController.getInstance().putUser(res.user, false);
-                                Bundle args = new Bundle();
-                                args.putInt("user_id", res.user.id);
-                                presentFragment(new ChatActivity(args));
-                            }
-                        });
-                    } else {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                try {
-                                    progressDialog.dismiss();
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        });
-                    }
-                }
-            });
-        } else {
-            MessagesController.getInstance().putUser(supportUser, true);
-            Bundle args = new Bundle();
-            args.putInt("user_id", supportUser.id);
-            presentFragment(new ChatActivity(args));
-        }
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        avatarUpdater.onActivityResult(requestCode, resultCode, data);
-    }
-
-    @Override
-    public void saveSelfArgs(Bundle args) {
-        if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
-            args.putString("path", avatarUpdater.currentPicturePath);
-        }
-    }
-
-    @Override
-    public void restoreSelfArgs(Bundle args) {
-        if (avatarUpdater != null) {
-            avatarUpdater.currentPicturePath = args.getString("path");
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                updateUserData();
-            }
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-        updateUserData();
-        fixLayout();
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        fixLayout();
-    }
-
-    private void needLayout() {
-        FrameLayout.LayoutParams layoutParams;
-        if (listView != null) {
-            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
-            listView.setLayoutParams(layoutParams);
-        }
-
-        if (avatarImage != null) {
-            float diff = actionBar.getExtraHeight() / (float) AndroidUtilities.dp(88);
-            float diffm = 1.0f - diff;
-
-            int avatarSize = 42 + (int) (18 * diff);
-            int avatarX = 17 + (int) (47 * diffm);
-            int avatarY = AndroidUtilities.dp(22) - (int) ((AndroidUtilities.dp(22) - (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(42)) / 2) * (1.0f - diff));
-            int nameX = 97 + (int) (21 * diffm);
-            int nameEndX = 16 + (int) (32 * diffm);
-            int nameY = avatarY + AndroidUtilities.dp(29 - 13 * diffm);
-            int statusY = avatarY + AndroidUtilities.dp(8 - 7 * diffm);
-            float scale = 1.0f - 0.12f * diffm;
-
-            layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
-            layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
-            writeButton.setLayoutParams(layoutParams);
-            ViewProxy.setAlpha(writeButton, diff);
-            writeButton.setVisibility(diff <= 0.02 ? View.GONE : View.VISIBLE);
-            if (writeButton.getVisibility() == View.GONE) {
-                writeButton.clearAnimation();
-            }
-
-            avatarImage.setRoundRadius(AndroidUtilities.dp(avatarSize / 2));
-            layoutParams = (FrameLayout.LayoutParams) avatarImage.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(avatarSize);
-            layoutParams.height = AndroidUtilities.dp(avatarSize);
-            layoutParams.leftMargin = LocaleController.isRTL ? 0 : AndroidUtilities.dp(avatarX);
-            layoutParams.rightMargin = LocaleController.isRTL ? AndroidUtilities.dp(avatarX) : 0;
-            layoutParams.bottomMargin = avatarY;
-            avatarImage.setLayoutParams(layoutParams);
-
-            ViewProxy.setPivotX(nameTextView, 0);
-            ViewProxy.setPivotY(nameTextView, 0);
-            ViewProxy.setScaleX(nameTextView, scale);
-            ViewProxy.setScaleY(nameTextView, scale);
-            layoutParams = (FrameLayout.LayoutParams) nameTextView.getLayoutParams();
-            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
-            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
-            layoutParams.bottomMargin = nameY;
-            nameTextView.setLayoutParams(layoutParams);
-
-            layoutParams = (FrameLayout.LayoutParams) onlineTextView.getLayoutParams();
-            layoutParams.leftMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameEndX : nameX);
-            layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? nameX : nameEndX);
-            layoutParams.bottomMargin = statusY;
-            onlineTextView.setLayoutParams(layoutParams);
-        }
-    }
-
-    private void fixLayout() {
-        if (fragmentView == null) {
-            return;
-        }
-        fragmentView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                if (fragmentView != null) {
-                    needLayout();
-                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
-                }
-                return false;
-            }
-        });
-    }
-
-    private void updateUserData() {
-        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-        TLRPC.FileLocation photo = null;
-        TLRPC.FileLocation photoBig = null;
-        if (user.photo != null) {
-            photo = user.photo.photo_small;
-            photoBig = user.photo.photo_big;
-        }
-        AvatarDrawable avatarDrawable = new AvatarDrawable(user, true);
-        avatarDrawable.setColor(0xff5c98cd);
-        if (avatarImage != null) {
-            avatarImage.setImage(photo, "50_50", avatarDrawable);
-            avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
-
-            nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
-            onlineTextView.setText(LocaleController.getString("Online", R.string.Online));
-
-            avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
-        }
-    }
-
-    private void sendLogs() {
-        try {
-            ArrayList<Uri> uris = new ArrayList<>();
-            File sdCard = ApplicationLoader.applicationContext.getExternalFilesDir(null);
-            File dir = new File(sdCard.getAbsolutePath() + "/logs");
-            File[] files = dir.listFiles();
-            for (File file : files) {
-                uris.add(Uri.fromFile(file));
-            }
-
-            if (uris.isEmpty()) {
-                return;
-            }
-            Intent i = new Intent(Intent.ACTION_SEND_MULTIPLE);
-            i.setType("message/rfc822");
-            i.putExtra(Intent.EXTRA_EMAIL, new String[]{BuildVars.SEND_LOGS_EMAIL});
-            i.putExtra(Intent.EXTRA_SUBJECT, "last logs");
-            i.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris);
-            getParentActivity().startActivityForResult(Intent.createChooser(i, "Select email application."), 500);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i == textSizeRow || i == enableAnimationsRow || i == notificationRow || i == backgroundRow || i == numberRow ||
-                    i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == privacyRow || i == wifiDownloadRow ||
-                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
-                    i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow ||
-                    i == stickersRow;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new EmptyCell(mContext);
-                }
-                if (i == overscrollRow) {
-                    ((EmptyCell) view).setHeight(AndroidUtilities.dp(88));
-                } else {
-                    ((EmptyCell) view).setHeight(AndroidUtilities.dp(16));
-                }
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new ShadowSectionCell(mContext);
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    view = new TextSettingsCell(mContext);
-                }
-                TextSettingsCell textCell = (TextSettingsCell) view;
-                if (i == textSizeRow) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    int size = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
-                    textCell.setTextAndValue(LocaleController.getString("TextSize", R.string.TextSize), String.format("%d", size), true);
-                } else if (i == languageRow) {
-                    textCell.setTextAndValue(LocaleController.getString("Language", R.string.Language), LocaleController.getCurrentLanguageName(), true);
-                } else if (i == contactsSortRow) {
-                    String value;
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    int sort = preferences.getInt("sortContactsBy", 0);
-                    if (sort == 0) {
-                        value = LocaleController.getString("Default", R.string.Default);
-                    } else if (sort == 1) {
-                        value = LocaleController.getString("FirstName", R.string.SortFirstName);
-                    } else {
-                        value = LocaleController.getString("LastName", R.string.SortLastName);
-                    }
-                    textCell.setTextAndValue(LocaleController.getString("SortBy", R.string.SortBy), value, true);
-                } else if (i == notificationRow) {
-                    textCell.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), true);
-                } else if (i == backgroundRow) {
-                    textCell.setText(LocaleController.getString("ChatBackground", R.string.ChatBackground), true);
-                } else if (i == sendLogsRow) {
-                    textCell.setText("Send Logs", true);
-                } else if (i == clearLogsRow) {
-                    textCell.setText("Clear Logs", true);
-                } else if (i == askQuestionRow) {
-                    textCell.setText(LocaleController.getString("AskAQuestion", R.string.AskAQuestion), true);
-                } else if (i == privacyRow) {
-                    textCell.setText(LocaleController.getString("PrivacySettings", R.string.PrivacySettings), true);
-                } else if (i == switchBackendButtonRow) {
-                    textCell.setText("Switch Backend", true);
-                } else if (i == telegramFaqRow) {
-                    textCell.setText(LocaleController.getString("TelegramFAQ", R.string.TelegramFaq), true);
-                } else if (i == contactsReimportRow) {
-                    textCell.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts), true);
-                } else if (i == stickersRow) {
-                    textCell.setText(LocaleController.getString("Stickers", R.string.Stickers), true);
-                }
-            } else if (type == 3) {
-                if (view == null) {
-                    view = new TextCheckCell(mContext);
-                }
-                TextCheckCell textCell = (TextCheckCell) view;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                if (i == enableAnimationsRow) {
-                    textCell.setTextAndCheck(LocaleController.getString("EnableAnimations", R.string.EnableAnimations), preferences.getBoolean("view_animations", true), false);
-                } else if (i == sendByEnterRow) {
-                    textCell.setTextAndCheck(LocaleController.getString("SendByEnter", R.string.SendByEnter), preferences.getBoolean("send_by_enter", false), false);
-                } else if (i == saveToGalleryRow) {
-                    textCell.setTextAndCheck(LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings), MediaController.getInstance().canSaveToGallery(), false);
-                }
-            } else if (type == 4) {
-                if (view == null) {
-                    view = new HeaderCell(mContext);
-                }
-                if (i == settingsSectionRow2) {
-                    ((HeaderCell) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
-                } else if (i == supportSectionRow2) {
-                    ((HeaderCell) view).setText(LocaleController.getString("Support", R.string.Support));
-                } else if (i == messagesSectionRow2) {
-                    ((HeaderCell) view).setText(LocaleController.getString("MessagesSettings", R.string.MessagesSettings));
-                } else if (i == mediaDownloadSection2) {
-                    ((HeaderCell) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
-                } else if (i == numberSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("Info", R.string.Info));
-                }
-            } else if (type == 5) {
-                if (view == null) {
-                    view = new TextInfoCell(mContext);
-                    try {
-                        PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                        ((TextInfoCell) view).setText(String.format(Locale.US, "Telegram for Android v%s (%d)", pInfo.versionName, pInfo.versionCode));
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            } else if (type == 6) {
-                if (view == null) {
-                    view = new TextDetailSettingsCell(mContext);
-                }
-                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
-
-                if (i == mobileDownloadRow || i == wifiDownloadRow || i == roamingDownloadRow) {
-                    int mask;
-                    String value;
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    if (i == mobileDownloadRow) {
-                        value = LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData);
-                        mask = MediaController.getInstance().mobileDataDownloadMask;
-                    } else if (i == wifiDownloadRow) {
-                        value = LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi);
-                        mask = MediaController.getInstance().wifiDownloadMask;
-                    } else {
-                        value = LocaleController.getString("WhenRoaming", R.string.WhenRoaming);
-                        mask = MediaController.getInstance().roamingDownloadMask;
-                    }
-                    String text = "";
-                    if ((mask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0) {
-                        text += LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
-                    }
-                    if ((mask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0) {
-                        if (text.length() != 0) {
-                            text += ", ";
-                        }
-                        text += LocaleController.getString("AttachAudio", R.string.AttachAudio);
-                    }
-                    if ((mask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0) {
-                        if (text.length() != 0) {
-                            text += ", ";
-                        }
-                        text += LocaleController.getString("AttachVideo", R.string.AttachVideo);
-                    }
-                    if ((mask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
-                        if (text.length() != 0) {
-                            text += ", ";
-                        }
-                        text += LocaleController.getString("AttachDocument", R.string.AttachDocument);
-                    }
-                    if (text.length() == 0) {
-                        text = LocaleController.getString("NoMediaAutoDownload", R.string.NoMediaAutoDownload);
-                    }
-                    textCell.setTextAndValue(value, text, true);
-                } else if (i == numberRow) {
-                    TLRPC.User user = UserConfig.getCurrentUser();
-                    String value;
-                    if (user != null && user.phone != null && user.phone.length() != 0) {
-                        value = PhoneFormat.getInstance().format("+" + user.phone);
-                    } else {
-                        value = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
-                    }
-                    textCell.setTextAndValue(value, LocaleController.getString("Phone", R.string.Phone), true);
-                } else if (i == usernameRow) {
-                    TLRPC.User user = UserConfig.getCurrentUser();
-                    String value;
-                    if (user != null && user.username != null && user.username.length() != 0) {
-                        value = "@" + user.username;
-                    } else {
-                        value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
-                    }
-                    textCell.setTextAndValue(value, LocaleController.getString("Username", R.string.Username), false);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == emptyRow || i == overscrollRow) {
-                return 0;
-            }
-            if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
-                return 1;
-            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow) {
-                return 3;
-            } else if (i == notificationRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == languageRow || i == contactsSortRow || i == stickersRow) {
-                return 2;
-            } else if (i == versionRow) {
-                return 5;
-            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow || i == numberRow || i == usernameRow) {
-                return 6;
-            } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2) {
-                return 4;
-            } else {
-                return 2;
-            }
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 7;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
deleted file mode 100644
index ce76b2d02..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
+++ /dev/null
@@ -1,316 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Build;
-import android.os.Message;
-import android.text.SpannableStringBuilder;
-import android.text.Spanned;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-import android.widget.Toast;
-
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.android.query.StickersQuery;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.StickerSetCell;
-import org.telegram.ui.Cells.TextInfoPrivacyCell;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.StickersAlert;
-import org.telegram.ui.Components.URLSpanNoUnderline;
-
-import java.util.ArrayList;
-import java.util.Locale;
-
-public class StickersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-
-    private int stickersStartRow;
-    private int stickersEndRow;
-    private int stickersInfoRow;
-    private int rowCount;
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        StickersQuery.checkStickers();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.stickersDidLoaded);
-        updateRows();
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.stickersDidLoaded);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("Stickers", R.string.Stickers));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                }
-            }
-        });
-
-        listAdapter = new ListAdapter(context);
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(0xfff0f0f0);
-
-        ListView listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setDrawSelectorOnTop(true);
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-        listView.setAdapter(listAdapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                if (i >= stickersStartRow && i < stickersEndRow && getParentActivity() != null) {
-                    final TLRPC.TL_stickerSet stickerSet = StickersQuery.getStickerSets().get(i);
-                    ArrayList<TLRPC.Document> stickers = StickersQuery.getStickersForSet(stickerSet.id);
-                    if (stickers == null) {
-                        return;
-                    }
-                    StickersAlert alert = new StickersAlert(getParentActivity(), stickerSet, stickers);
-                    alert.setButton(AlertDialog.BUTTON_NEGATIVE, LocaleController.getString("Close", R.string.Close), (Message) null);
-                    if (stickerSet.id != -1) {
-                        alert.setButton(AlertDialog.BUTTON_NEUTRAL, LocaleController.getString("StickersRemove", R.string.StickersRemove), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                StickersQuery.removeStickersSet(getParentActivity(), stickerSet);
-                            }
-                        });
-                    }
-                    setVisibleDialog(alert);
-                    alert.show();
-                }
-            }
-        });
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.stickersDidLoaded) {
-            updateRows();
-        }
-    }
-
-    private void updateRows() {
-        rowCount = 0;
-        ArrayList<TLRPC.TL_stickerSet> stickerSets = StickersQuery.getStickerSets();
-        if (!stickerSets.isEmpty()) {
-            stickersStartRow = 0;
-            stickersEndRow = stickerSets.size();
-            rowCount += stickerSets.size();
-        } else {
-            stickersStartRow = -1;
-            stickersEndRow = -1;
-        }
-        stickersInfoRow = rowCount++;
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i >= stickersStartRow && i < stickersEndRow;
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    view = new StickerSetCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                    ((StickerSetCell) view).setOnOptionsClick(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View v) {
-                            StickerSetCell cell = (StickerSetCell) v.getParent();
-                            final TLRPC.TL_stickerSet stickerSet = cell.getStickersSet();
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            CharSequence[] items;
-                            if (stickerSet.id == -1) {
-                                builder.setTitle(LocaleController.getString("GeniusStickerPackName", R.string.GeniusStickerPackName));
-                                items = new CharSequence[]{
-                                        StickersQuery.getHideMainStickersPack() ? LocaleController.getString("StickersShow", R.string.StickersShow) : LocaleController.getString("StickersHide", R.string.StickersHide)
-                                };
-                            } else {
-                                builder.setTitle(stickerSet.title);
-                                items = new CharSequence[]{
-                                        LocaleController.getString("StickersRemove", R.string.StickersRemove),
-                                        LocaleController.getString("StickersShare", R.string.StickersShare),
-                                        LocaleController.getString("StickersCopy", R.string.StickersCopy),
-                                };
-                            }
-                            builder.setItems(items, new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialog, int which) {
-                                    if (which == 0) {
-                                        if (stickerSet.id == -1) {
-                                            StickersQuery.setHideMainStickersPack(!StickersQuery.getHideMainStickersPack());
-                                            listAdapter.notifyDataSetChanged();
-                                            StickersQuery.loadStickers(true, false);
-                                        } else {
-                                            StickersQuery.removeStickersSet(getParentActivity(), stickerSet);
-                                        }
-                                    } else if (which == 1) {
-                                        try {
-                                            Intent intent = new Intent(Intent.ACTION_SEND);
-                                            intent.setType("text/plain");
-                                            intent.putExtra(Intent.EXTRA_TEXT, String.format(Locale.US, "https://telegram.me/addstickers/%s", stickerSet.short_name));
-                                            getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("StickersShare", R.string.StickersShare)), 500);
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
-                                        }
-                                    } else if (which == 2) {
-                                        try {
-                                            if (Build.VERSION.SDK_INT < 11) {
-                                                android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                                clipboard.setText(String.format(Locale.US, "https://telegram.me/addstickers/%s", stickerSet.short_name));
-                                            } else {
-                                                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                                android.content.ClipData clip = android.content.ClipData.newPlainText("label", String.format(Locale.US, "https://telegram.me/addstickers/%s", stickerSet.short_name));
-                                                clipboard.setPrimaryClip(clip);
-                                            }
-                                            Toast.makeText(getParentActivity(), LocaleController.getString("LinkCopied", R.string.LinkCopied), Toast.LENGTH_SHORT).show();
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
-                                        }
-                                    }
-                                }
-                            });
-                            //builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                            showDialog(builder.create());
-                        }
-                    });
-                }
-                ArrayList<TLRPC.TL_stickerSet> arrayList = StickersQuery.getStickerSets();
-                ((StickerSetCell) view).setStickersSet(arrayList.get(i), i != arrayList.size() - 1);
-            } else if (type == 1) {
-                if (view == null) {
-                    view = new TextInfoPrivacyCell(mContext);
-                    String text = LocaleController.getString("StickersInfo", R.string.StickersInfo);
-                    String botName = "@stickers";
-                    int index = text.indexOf(botName);
-                    if (index != -1) {
-                        try {
-                            SpannableStringBuilder stringBuilder = new SpannableStringBuilder(text);
-                            URLSpanNoUnderline spanNoUnderline = new URLSpanNoUnderline("@stickers") {
-                                @Override
-                                public void onClick(View widget) {
-                                    MessagesController.openByUserName("stickers", StickersActivity.this, 1);
-                                }
-                            };
-                            stringBuilder.setSpan(spanNoUnderline, index, index + botName.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
-                            ((TextInfoPrivacyCell) view).setText(stringBuilder);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                            ((TextInfoPrivacyCell) view).setText(text);
-                        }
-                    } else {
-                        ((TextInfoPrivacyCell) view).setText(text);
-                    }
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i >= stickersStartRow && i < stickersEndRow) {
-                return 0;
-            } else if (i == stickersInfoRow) {
-                return 1;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
deleted file mode 100644
index 079bf6926..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
+++ /dev/null
@@ -1,1088 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui;
-
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.graphics.Typeface;
-import android.os.Vibrator;
-import android.text.InputType;
-import android.text.method.PasswordTransformationMethod;
-import android.util.TypedValue;
-import android.view.ActionMode;
-import android.view.ContextMenu;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.WindowManager;
-import android.view.inputmethod.EditorInfo;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.ProgressBar;
-import android.widget.ScrollView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextInfoPrivacyCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TwoStepVerificationActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-    private ListView listView;
-    private TextView titleTextView;
-    private TextView bottomTextView;
-    private TextView bottomButton;
-    private EditText passwordEditText;
-    private ProgressDialog progressDialog;
-    private FrameLayout progressView;
-    private ActionBarMenuItem doneItem;
-    private ScrollView scrollView;
-
-    private int type;
-    private int passwordSetState;
-    private String firstPassword;
-    private String hint;
-    private String email;
-    private boolean emailOnly;
-    private boolean loading;
-    private boolean destroyed;
-    private boolean waitingForEmail;
-    private TLRPC.account_Password currentPassword;
-    private boolean passwordEntered = true;
-    private byte[] currentPasswordHash = new byte[0];
-    private Runnable shortPollRunnable;
-
-    private int setPasswordRow;
-    private int setPasswordDetailRow;
-    private int changePasswordRow;
-    private int shadowRow;
-    private int turnPasswordOffRow;
-    private int setRecoveryEmailRow;
-    private int changeRecoveryEmailRow;
-    private int abortPasswordRow;
-    private int passwordSetupDetailRow;
-    private int passwordEnabledDetailRow;
-    private int passwordEmailVerifyDetailRow;
-    private int rowCount;
-
-    private final static int done_button = 1;
-
-    public TwoStepVerificationActivity(int type) {
-        super();
-        this.type = type;
-        if (type == 0) {
-            loadPasswordInfo(false);
-        }
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        updateRows();
-        if (type == 0) {
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetTwoStepPassword);
-        }
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        if (type == 0) {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetTwoStepPassword);
-            if (shortPollRunnable != null) {
-                AndroidUtilities.cancelRunOnUIThread(shortPollRunnable);
-                shortPollRunnable = null;
-            }
-            destroyed = true;
-        }
-        if (progressDialog != null) {
-            try {
-                progressDialog.dismiss();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            progressDialog = null;
-        }
-        if (!AndroidUtilities.isTablet() && getParentActivity() != null) {
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
-        }
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(false);
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    processDone();
-                }
-            }
-        });
-
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(0xfff0f0f0);
-
-        ActionBarMenu menu = actionBar.createMenu();
-        doneItem = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        scrollView = new ScrollView(context);
-        scrollView.setFillViewport(true);
-        frameLayout.addView(scrollView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) scrollView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        scrollView.setLayoutParams(layoutParams);
-
-        LinearLayout linearLayout = new LinearLayout(context);
-        linearLayout.setOrientation(LinearLayout.VERTICAL);
-        scrollView.addView(linearLayout);
-        ScrollView.LayoutParams layoutParams2 = (ScrollView.LayoutParams) linearLayout.getLayoutParams();
-        layoutParams2.width = ScrollView.LayoutParams.MATCH_PARENT;
-        layoutParams2.height = ScrollView.LayoutParams.WRAP_CONTENT;
-        linearLayout.setLayoutParams(layoutParams2);
-
-        titleTextView = new TextView(context);
-        titleTextView.setTextColor(0xff757575);
-        titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        titleTextView.setGravity(Gravity.CENTER_HORIZONTAL);
-        linearLayout.addView(titleTextView);
-        LinearLayout.LayoutParams layoutParams3 = (LinearLayout.LayoutParams) titleTextView.getLayoutParams();
-        layoutParams3.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.gravity = Gravity.CENTER_HORIZONTAL;
-        layoutParams3.topMargin = AndroidUtilities.dp(38);
-        titleTextView.setLayoutParams(layoutParams3);
-
-        passwordEditText = new EditText(context);
-        passwordEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        passwordEditText.setTextColor(0xff000000);
-        passwordEditText.setMaxLines(1);
-        passwordEditText.setLines(1);
-        passwordEditText.setGravity(Gravity.CENTER_HORIZONTAL);
-        passwordEditText.setSingleLine(true);
-        passwordEditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
-        passwordEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
-        passwordEditText.setTypeface(Typeface.DEFAULT);
-        AndroidUtilities.clearCursorDrawable(passwordEditText);
-        linearLayout.addView(passwordEditText);
-        layoutParams3 = (LinearLayout.LayoutParams) passwordEditText.getLayoutParams();
-        layoutParams3.topMargin = AndroidUtilities.dp(32);
-        layoutParams3.height = AndroidUtilities.dp(36);
-        layoutParams3.leftMargin = AndroidUtilities.dp(40);
-        layoutParams3.rightMargin = AndroidUtilities.dp(40);
-        layoutParams3.gravity = Gravity.TOP | Gravity.LEFT;
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        passwordEditText.setLayoutParams(layoutParams3);
-        passwordEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_NEXT || i == EditorInfo.IME_ACTION_DONE) {
-                    processDone();
-                    return true;
-                }
-                return false;
-            }
-        });
-        if (android.os.Build.VERSION.SDK_INT < 11) {
-            passwordEditText.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener() {
-                public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
-                    menu.clear();
-                }
-            });
-        } else {
-            passwordEditText.setCustomSelectionActionModeCallback(new ActionMode.Callback() {
-                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
-                    return false;
-                }
-
-                public void onDestroyActionMode(ActionMode mode) {
-                }
-
-                public boolean onCreateActionMode(ActionMode mode, Menu menu) {
-                    return false;
-                }
-
-                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-                    return false;
-                }
-            });
-        }
-
-        bottomTextView = new TextView(context);
-        bottomTextView.setTextColor(0xff757575);
-        bottomTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        bottomTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-        bottomTextView.setText(LocaleController.getString("YourEmailInfo", R.string.YourEmailInfo));
-        linearLayout.addView(bottomTextView);
-        layoutParams3 = (LinearLayout.LayoutParams) bottomTextView.getLayoutParams();
-        layoutParams3.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP;
-        layoutParams3.topMargin = AndroidUtilities.dp(30);
-        layoutParams3.leftMargin = AndroidUtilities.dp(40);
-        layoutParams3.rightMargin = AndroidUtilities.dp(40);
-        bottomTextView.setLayoutParams(layoutParams3);
-
-        LinearLayout linearLayout2 = new LinearLayout(context);
-        linearLayout2.setGravity(Gravity.BOTTOM | Gravity.CENTER_VERTICAL);
-        linearLayout.addView(linearLayout2);
-        layoutParams3 = (LinearLayout.LayoutParams) linearLayout2.getLayoutParams();
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = LayoutHelper.MATCH_PARENT;
-        linearLayout2.setLayoutParams(layoutParams3);
-
-        bottomButton = new TextView(context);
-        bottomButton.setTextColor(0xff4d83b3);
-        bottomButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        bottomButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM);
-        bottomButton.setText(LocaleController.getString("YourEmailSkip", R.string.YourEmailSkip));
-        bottomButton.setPadding(0, AndroidUtilities.dp(10), 0, 0);
-        linearLayout2.addView(bottomButton);
-        layoutParams3 = (LinearLayout.LayoutParams) bottomButton.getLayoutParams();
-        layoutParams3.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM;
-        layoutParams3.bottomMargin = AndroidUtilities.dp(14);
-        layoutParams3.leftMargin = AndroidUtilities.dp(40);
-        layoutParams3.rightMargin = AndroidUtilities.dp(40);
-        bottomButton.setLayoutParams(layoutParams3);
-        bottomButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (type == 0) {
-                    if (currentPassword.has_recovery) {
-                        needShowProgress();
-                        TLRPC.TL_auth_requestPasswordRecovery req = new TLRPC.TL_auth_requestPasswordRecovery();
-                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                            @Override
-                            public void run(final TLObject response, final TLRPC.TL_error error) {
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        needHideProgress();
-                                        if (error == null) {
-                                            final TLRPC.TL_auth_passwordRecovery res = (TLRPC.TL_auth_passwordRecovery) response;
-                                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                            builder.setMessage(LocaleController.formatString("RestoreEmailSent", R.string.RestoreEmailSent, res.email_pattern));
-                                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                                @Override
-                                                public void onClick(DialogInterface dialogInterface, int i) {
-                                                    TwoStepVerificationActivity fragment = new TwoStepVerificationActivity(1);
-                                                    fragment.currentPassword = currentPassword;
-                                                    fragment.currentPassword.email_unconfirmed_pattern = res.email_pattern;
-                                                    fragment.passwordSetState = 4;
-                                                    presentFragment(fragment);
-                                                }
-                                            });
-                                            Dialog dialog = showDialog(builder.create());
-                                            if (dialog != null) {
-                                                dialog.setCanceledOnTouchOutside(false);
-                                                dialog.setCancelable(false);
-                                            }
-                                        } else {
-                                            if (error.text.startsWith("FLOOD_WAIT")) {
-                                                int time = Utilities.parseInt(error.text);
-                                                String timeString;
-                                                if (time < 60) {
-                                                    timeString = LocaleController.formatPluralString("Seconds", time);
-                                                } else {
-                                                    timeString = LocaleController.formatPluralString("Minutes", time / 60);
-                                                }
-                                                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
-                                            } else {
-                                                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                            }
-                                        }
-                                    }
-                                });
-                            }
-                        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-                    } else {
-                        showAlertWithText(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle), LocaleController.getString("RestorePasswordNoEmailText", R.string.RestorePasswordNoEmailText));
-                    }
-                } else {
-                    if (passwordSetState == 4) {
-                        showAlertWithText(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle), LocaleController.getString("RestoreEmailTroubleText", R.string.RestoreEmailTroubleText));
-                    } else {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("YourEmailSkipWarningText", R.string.YourEmailSkipWarningText));
-                        builder.setTitle(LocaleController.getString("YourEmailSkipWarning", R.string.YourEmailSkipWarning));
-                        builder.setPositiveButton(LocaleController.getString("YourEmailSkip", R.string.YourEmailSkip), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                email = "";
-                                setNewPassword(false);
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
-                    }
-                }
-            }
-        });
-
-        if (type == 0) {
-            progressView = new FrameLayout(context);
-            frameLayout.addView(progressView);
-            layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            progressView.setLayoutParams(layoutParams);
-            progressView.setOnTouchListener(new View.OnTouchListener() {
-                @Override
-                public boolean onTouch(View v, MotionEvent event) {
-                    return true;
-                }
-            });
-
-            ProgressBar progressBar = new ProgressBar(context);
-            progressView.addView(progressBar);
-            layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.CENTER;
-            progressView.setLayoutParams(layoutParams);
-
-            listView = new ListView(context);
-            listView.setDivider(null);
-            listView.setEmptyView(progressView);
-            listView.setDividerHeight(0);
-            listView.setVerticalScrollBarEnabled(false);
-            listView.setDrawSelectorOnTop(true);
-            frameLayout.addView(listView);
-            layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            layoutParams.gravity = Gravity.TOP;
-            listView.setLayoutParams(layoutParams);
-            listView.setAdapter(listAdapter = new ListAdapter(context));
-            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-                @Override
-                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == setPasswordRow || i == changePasswordRow) {
-                        TwoStepVerificationActivity fragment = new TwoStepVerificationActivity(1);
-                        fragment.currentPasswordHash = currentPasswordHash;
-                        fragment.currentPassword = currentPassword;
-                        presentFragment(fragment);
-                    } else if (i == setRecoveryEmailRow || i == changeRecoveryEmailRow) {
-                        TwoStepVerificationActivity fragment = new TwoStepVerificationActivity(1);
-                        fragment.currentPasswordHash = currentPasswordHash;
-                        fragment.currentPassword = currentPassword;
-                        fragment.emailOnly = true;
-                        fragment.passwordSetState = 3;
-                        presentFragment(fragment);
-                    } else if (i == turnPasswordOffRow || i == abortPasswordRow) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("TurnPasswordOffQuestion", R.string.TurnPasswordOffQuestion));
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                setNewPassword(true);
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
-                    }
-                }
-            });
-
-            updateRows();
-
-            actionBar.setTitle(LocaleController.getString("TwoStepVerification", R.string.TwoStepVerification));
-            titleTextView.setText(LocaleController.getString("PleaseEnterCurrentPassword", R.string.PleaseEnterCurrentPassword));
-        } else if (type == 1) {
-            setPasswordSetState(passwordSetState);
-        }
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.didSetTwoStepPassword) {
-            if (args != null && args.length > 0 && args[0] != null) {
-                currentPasswordHash = (byte[]) args[0];
-            }
-            loadPasswordInfo(false);
-            updateRows();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (type == 1) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (passwordEditText != null) {
-                        passwordEditText.requestFocus();
-                        AndroidUtilities.showKeyboard(passwordEditText);
-                    }
-                }
-            }, 200);
-        }
-        if (!AndroidUtilities.isTablet()) {
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
-        }
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        super.onOpenAnimationEnd();
-        if (type == 1) {
-            AndroidUtilities.showKeyboard(passwordEditText);
-        }
-    }
-
-    private void loadPasswordInfo(final boolean silent) {
-        if (!silent) {
-            loading = true;
-        }
-        TLRPC.TL_account_getPassword req = new TLRPC.TL_account_getPassword();
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        loading = false;
-                        if (error == null) {
-                            if (!silent) {
-                                passwordEntered = currentPassword != null || currentPassword == null && response instanceof TLRPC.TL_account_noPassword;
-                            }
-                            currentPassword = (TLRPC.account_Password) response;
-                            waitingForEmail = currentPassword.email_unconfirmed_pattern.length() > 0;
-                            byte[] salt = new byte[currentPassword.new_salt.length + 8];
-                            Utilities.random.nextBytes(salt);
-                            System.arraycopy(currentPassword.new_salt, 0, salt, 0, currentPassword.new_salt.length);
-                            currentPassword.new_salt = salt;
-                        }
-                        if (type == 0 && !destroyed && shortPollRunnable == null) {
-                            shortPollRunnable = new Runnable() {
-                                @Override
-                                public void run() {
-                                    if (shortPollRunnable == null) {
-                                        return;
-                                    }
-                                    loadPasswordInfo(true);
-                                    shortPollRunnable = null;
-                                }
-                            };
-                            AndroidUtilities.runOnUIThread(shortPollRunnable, 5000);
-                        }
-                        updateRows();
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-    }
-
-    private void setPasswordSetState(int state) {
-        if (passwordEditText == null) {
-            return;
-        }
-        passwordSetState = state;
-        if (passwordSetState == 0) {
-            actionBar.setTitle(LocaleController.getString("YourPassword", R.string.YourPassword));
-            if (currentPassword instanceof TLRPC.TL_account_noPassword) {
-                titleTextView.setText(LocaleController.getString("PleaseEnterFirstPassword", R.string.PleaseEnterFirstPassword));
-            } else {
-                titleTextView.setText(LocaleController.getString("PleaseEnterPassword", R.string.PleaseEnterPassword));
-            }
-            passwordEditText.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            passwordEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
-            bottomTextView.setVisibility(View.INVISIBLE);
-            bottomButton.setVisibility(View.INVISIBLE);
-        } else if (passwordSetState == 1) {
-            actionBar.setTitle(LocaleController.getString("YourPassword", R.string.YourPassword));
-            titleTextView.setText(LocaleController.getString("PleaseReEnterPassword", R.string.PleaseReEnterPassword));
-            passwordEditText.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            passwordEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
-            bottomTextView.setVisibility(View.INVISIBLE);
-            bottomButton.setVisibility(View.INVISIBLE);
-        } else if (passwordSetState == 2) {
-            actionBar.setTitle(LocaleController.getString("PasswordHint", R.string.PasswordHint));
-            titleTextView.setText(LocaleController.getString("PasswordHintText", R.string.PasswordHintText));
-            passwordEditText.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            passwordEditText.setTransformationMethod(null);
-            bottomTextView.setVisibility(View.INVISIBLE);
-            bottomButton.setVisibility(View.INVISIBLE);
-        } else if (passwordSetState == 3) {
-            actionBar.setTitle(LocaleController.getString("RecoveryEmail", R.string.RecoveryEmail));
-            titleTextView.setText(LocaleController.getString("YourEmail", R.string.YourEmail));
-            passwordEditText.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            passwordEditText.setTransformationMethod(null);
-            passwordEditText.setInputType(EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
-            bottomTextView.setVisibility(View.VISIBLE);
-            bottomButton.setVisibility(emailOnly ? View.INVISIBLE : View.VISIBLE);
-        } else if (passwordSetState == 4) {
-            actionBar.setTitle(LocaleController.getString("PasswordRecovery", R.string.PasswordRecovery));
-            titleTextView.setText(LocaleController.getString("PasswordCode", R.string.PasswordCode));
-            bottomTextView.setText(LocaleController.getString("RestoreEmailSentInfo", R.string.RestoreEmailSentInfo));
-            bottomButton.setText(LocaleController.formatString("RestoreEmailTrouble", R.string.RestoreEmailTrouble, currentPassword.email_unconfirmed_pattern));
-            passwordEditText.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            passwordEditText.setTransformationMethod(null);
-            passwordEditText.setInputType(InputType.TYPE_CLASS_PHONE);
-            bottomTextView.setVisibility(View.VISIBLE);
-            bottomButton.setVisibility(View.VISIBLE);
-        }
-        passwordEditText.setText("");
-    }
-
-    private void updateRows() {
-        rowCount = 0;
-        setPasswordRow = -1;
-        setPasswordDetailRow = -1;
-        changePasswordRow = -1;
-        turnPasswordOffRow = -1;
-        setRecoveryEmailRow = -1;
-        changeRecoveryEmailRow = -1;
-        abortPasswordRow = -1;
-        passwordSetupDetailRow = -1;
-        passwordEnabledDetailRow = -1;
-        passwordEmailVerifyDetailRow = -1;
-        shadowRow = -1;
-        if (!loading && currentPassword != null) {
-            if (currentPassword instanceof TLRPC.TL_account_noPassword) {
-                if (waitingForEmail) {
-                    passwordSetupDetailRow = rowCount++;
-                    abortPasswordRow = rowCount++;
-                    shadowRow = rowCount++;
-                } else {
-                    setPasswordRow = rowCount++;
-                    setPasswordDetailRow = rowCount++;
-                }
-            } else if (currentPassword instanceof TLRPC.TL_account_password) {
-                changePasswordRow = rowCount++;
-                turnPasswordOffRow = rowCount++;
-                if (currentPassword.has_recovery) {
-                    changeRecoveryEmailRow = rowCount++;
-                } else {
-                    setRecoveryEmailRow = rowCount++;
-                }
-                if (waitingForEmail) {
-                    passwordEmailVerifyDetailRow = rowCount++;
-                } else {
-                    passwordEnabledDetailRow = rowCount++;
-                }
-            }
-        }
-
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-        if (passwordEntered) {
-            if (listView != null) {
-                listView.setVisibility(View.VISIBLE);
-                scrollView.setVisibility(View.INVISIBLE);
-                progressView.setVisibility(View.VISIBLE);
-                listView.setEmptyView(progressView);
-            }
-            if (passwordEditText != null) {
-                doneItem.setVisibility(View.GONE);
-                passwordEditText.setVisibility(View.INVISIBLE);
-                titleTextView.setVisibility(View.INVISIBLE);
-                bottomTextView.setVisibility(View.INVISIBLE);
-                bottomButton.setVisibility(View.INVISIBLE);
-            }
-        } else {
-            if (listView != null) {
-                listView.setEmptyView(null);
-                listView.setVisibility(View.INVISIBLE);
-                scrollView.setVisibility(View.VISIBLE);
-                progressView.setVisibility(View.INVISIBLE);
-            }
-            if (passwordEditText != null) {
-                doneItem.setVisibility(View.VISIBLE);
-                passwordEditText.setVisibility(View.VISIBLE);
-                titleTextView.setVisibility(View.VISIBLE);
-                bottomButton.setVisibility(View.VISIBLE);
-                bottomTextView.setVisibility(View.INVISIBLE);
-                bottomButton.setText(LocaleController.getString("ForgotPassword", R.string.ForgotPassword));
-                if (currentPassword.hint != null && currentPassword.hint.length() > 0) {
-                    passwordEditText.setHint(currentPassword.hint);
-                } else {
-                    passwordEditText.setHint("");
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (passwordEditText != null) {
-                            passwordEditText.requestFocus();
-                            AndroidUtilities.showKeyboard(passwordEditText);
-                        }
-                    }
-                }, 200);
-            }
-        }
-    }
-
-    private void needShowProgress() {
-        if (getParentActivity() == null || getParentActivity().isFinishing() || progressDialog != null) {
-            return;
-        }
-        progressDialog = new ProgressDialog(getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-        progressDialog.show();
-    }
-
-    private void needHideProgress() {
-        if (progressDialog == null) {
-            return;
-        }
-        try {
-            progressDialog.dismiss();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        progressDialog = null;
-    }
-
-    private boolean isValidEmail(String text) {
-        if (text == null || text.length() < 3) {
-            return false;
-        }
-        int dot = text.lastIndexOf(".");
-        int dog = text.lastIndexOf("@");
-        return !(dot < 0 || dog < 0 || dot < dog);
-    }
-
-    private void showAlertWithText(String title, String text) {
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        builder.setTitle(title);
-        builder.setMessage(text);
-        showDialog(builder.create());
-    }
-
-    private void setNewPassword(final boolean clear) {
-        final TLRPC.TL_account_updatePasswordSettings req = new TLRPC.TL_account_updatePasswordSettings();
-        req.current_password_hash = currentPasswordHash;
-        req.new_settings = new TLRPC.TL_account_passwordInputSettings();
-        if (clear) {
-            if (waitingForEmail && currentPassword instanceof TLRPC.TL_account_noPassword) {
-                req.new_settings.flags = 2;
-                req.new_settings.email = "";
-                req.current_password_hash = new byte[0];
-            } else {
-                req.new_settings.flags = 3;
-                req.new_settings.hint = "";
-                req.new_settings.new_password_hash = new byte[0];
-                req.new_settings.new_salt = new byte[0];
-                req.new_settings.email = "";
-            }
-        } else {
-            if (firstPassword != null && firstPassword.length() > 0) {
-                byte[] newPasswordBytes = null;
-                try {
-                    newPasswordBytes = firstPassword.getBytes("UTF-8");
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-
-                byte[] new_salt = currentPassword.new_salt;
-                byte[] hash = new byte[new_salt.length * 2 + newPasswordBytes.length];
-                System.arraycopy(new_salt, 0, hash, 0, new_salt.length);
-                System.arraycopy(newPasswordBytes, 0, hash, new_salt.length, newPasswordBytes.length);
-                System.arraycopy(new_salt, 0, hash, hash.length - new_salt.length, new_salt.length);
-                req.new_settings.flags |= 1;
-                req.new_settings.hint = hint;
-                req.new_settings.new_password_hash = Utilities.computeSHA256(hash, 0, hash.length);
-                req.new_settings.new_salt = new_salt;
-            }
-            if (email.length() > 0) {
-                req.new_settings.flags |= 2;
-                req.new_settings.email = email;
-            }
-        }
-        needShowProgress();
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        needHideProgress();
-                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
-                            if (clear) {
-                                currentPassword = null;
-                                currentPasswordHash = new byte[0];
-                                loadPasswordInfo(false);
-                                updateRows();
-                            } else {
-                                if (getParentActivity() == null) {
-                                    return;
-                                }
-                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialogInterface, int i) {
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didSetTwoStepPassword, (Object) req.new_settings.new_password_hash);
-                                        finishFragment();
-                                    }
-                                });
-                                builder.setMessage(LocaleController.getString("YourPasswordSuccessText", R.string.YourPasswordSuccessText));
-                                builder.setTitle(LocaleController.getString("YourPasswordSuccess", R.string.YourPasswordSuccess));
-                                Dialog dialog = showDialog(builder.create());
-                                if (dialog != null) {
-                                    dialog.setCanceledOnTouchOutside(false);
-                                    dialog.setCancelable(false);
-                                }
-                            }
-                        } else {
-                            if (error.text.equals("EMAIL_UNCONFIRMED")) {
-                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialogInterface, int i) {
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didSetTwoStepPassword, (Object) req.new_settings.new_password_hash);
-                                        finishFragment();
-                                    }
-                                });
-                                builder.setMessage(LocaleController.getString("YourEmailAlmostThereText", R.string.YourEmailAlmostThereText));
-                                builder.setTitle(LocaleController.getString("YourEmailAlmostThere", R.string.YourEmailAlmostThere));
-                                Dialog dialog = showDialog(builder.create());
-                                if (dialog != null) {
-                                    dialog.setCanceledOnTouchOutside(false);
-                                    dialog.setCancelable(false);
-                                }
-                            } else {
-                                if (error.text.equals("EMAIL_INVALID")) {
-                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("PasswordEmailInvalid", R.string.PasswordEmailInvalid));
-                                } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                    int time = Utilities.parseInt(error.text);
-                                    String timeString;
-                                    if (time < 60) {
-                                        timeString = LocaleController.formatPluralString("Seconds", time);
-                                    } else {
-                                        timeString = LocaleController.formatPluralString("Minutes", time / 60);
-                                    }
-                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
-                                } else {
-                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                }
-                            }
-                        }
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-    }
-
-    private void processDone() {
-        if (type == 0) {
-            if (!passwordEntered) {
-                String oldPassword = passwordEditText.getText().toString();
-                if (oldPassword.length() == 0) {
-                    onPasscodeError(false);
-                    return;
-                }
-                byte[] oldPasswordBytes = null;
-                try {
-                    oldPasswordBytes = oldPassword.getBytes("UTF-8");
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-
-                needShowProgress();
-                byte[] hash = new byte[currentPassword.current_salt.length * 2 + oldPasswordBytes.length];
-                System.arraycopy(currentPassword.current_salt, 0, hash, 0, currentPassword.current_salt.length);
-                System.arraycopy(oldPasswordBytes, 0, hash, currentPassword.current_salt.length, oldPasswordBytes.length);
-                System.arraycopy(currentPassword.current_salt, 0, hash, hash.length - currentPassword.current_salt.length, currentPassword.current_salt.length);
-
-                final TLRPC.TL_account_getPasswordSettings req = new TLRPC.TL_account_getPasswordSettings();
-                req.current_password_hash = Utilities.computeSHA256(hash, 0, hash.length);
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(final TLObject response, final TLRPC.TL_error error) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                needHideProgress();
-                                if (error == null) {
-                                    currentPasswordHash = req.current_password_hash;
-                                    passwordEntered = true;
-                                    AndroidUtilities.hideKeyboard(passwordEditText);
-                                    updateRows();
-                                } else {
-                                    if (error.text.equals("PASSWORD_HASH_INVALID")) {
-                                        onPasscodeError(true);
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        int time = Utilities.parseInt(error.text);
-                                        String timeString;
-                                        if (time < 60) {
-                                            timeString = LocaleController.formatPluralString("Seconds", time);
-                                        } else {
-                                            timeString = LocaleController.formatPluralString("Minutes", time / 60);
-                                        }
-                                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
-                                    } else {
-                                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                    }
-                                }
-                            }
-                        });
-                    }
-                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-            }
-        } else if (type == 1) {
-            if (passwordSetState == 0) {
-                if (passwordEditText.getText().length() == 0) {
-                    onPasscodeError(false);
-                    return;
-                }
-                titleTextView.setText(LocaleController.getString("ReEnterYourPasscode", R.string.ReEnterYourPasscode));
-                firstPassword = passwordEditText.getText().toString();
-                setPasswordSetState(1);
-            } else if (passwordSetState == 1) {
-                if (!firstPassword.equals(passwordEditText.getText().toString())) {
-                    try {
-                        Toast.makeText(getParentActivity(), LocaleController.getString("PasswordDoNotMatch", R.string.PasswordDoNotMatch), Toast.LENGTH_SHORT).show();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    onPasscodeError(true);
-                    return;
-                }
-                setPasswordSetState(2);
-            } else if (passwordSetState == 2) {
-                hint = passwordEditText.getText().toString();
-                if (hint.toLowerCase().equals(firstPassword.toLowerCase())) {
-                    try {
-                        Toast.makeText(getParentActivity(), LocaleController.getString("PasswordAsHintError", R.string.PasswordAsHintError), Toast.LENGTH_SHORT).show();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    onPasscodeError(false);
-                    return;
-                }
-                if (!currentPassword.has_recovery) {
-                    setPasswordSetState(3);
-                } else {
-                    email = "";
-                    setNewPassword(false);
-                }
-            } else if (passwordSetState == 3) {
-                email = passwordEditText.getText().toString();
-                if (!isValidEmail(email)) {
-                    onPasscodeError(false);
-                    return;
-                }
-                setNewPassword(false);
-            } else if (passwordSetState == 4) {
-                String code = passwordEditText.getText().toString();
-                if (code.length() == 0) {
-                    onPasscodeError(false);
-                    return;
-                }
-                TLRPC.TL_auth_recoverPassword req = new TLRPC.TL_auth_recoverPassword();
-                req.code = code;
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, final TLRPC.TL_error error) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (error == null) {
-                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialogInterface, int i) {
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.didSetTwoStepPassword);
-                                            finishFragment();
-                                        }
-                                    });
-                                    builder.setMessage(LocaleController.getString("PasswordReset", R.string.PasswordReset));
-                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                    Dialog dialog = showDialog(builder.create());
-                                    if (dialog != null) {
-                                        dialog.setCanceledOnTouchOutside(false);
-                                        dialog.setCancelable(false);
-                                    }
-                                } else {
-                                    if (error.text.startsWith("CODE_INVALID")) {
-                                        onPasscodeError(true);
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        int time = Utilities.parseInt(error.text);
-                                        String timeString;
-                                        if (time < 60) {
-                                            timeString = LocaleController.formatPluralString("Seconds", time);
-                                        } else {
-                                            timeString = LocaleController.formatPluralString("Minutes", time / 60);
-                                        }
-                                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
-                                    } else {
-                                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                    }
-                                }
-                            }
-                        });
-                    }
-                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-            }
-        }
-    }
-
-    private void onPasscodeError(boolean clear) {
-        if (getParentActivity() == null) {
-            return;
-        }
-        Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
-        if (v != null) {
-            v.vibrate(200);
-        }
-        if (clear) {
-            passwordEditText.setText("");
-        }
-        AndroidUtilities.shakeTextView(titleTextView, 2, 0);
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return i != setPasswordDetailRow && i != shadowRow && i != passwordSetupDetailRow && i != passwordEmailVerifyDetailRow && i != passwordEnabledDetailRow;
-        }
-
-        @Override
-        public int getCount() {
-            return loading || currentPassword == null ? 0 : rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int viewType = getItemViewType(i);
-            if (viewType == 0) {
-                if (view == null) {
-                    view = new TextSettingsCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                TextSettingsCell textCell = (TextSettingsCell) view;
-                textCell.setTextColor(0xff212121);
-                if (i == changePasswordRow) {
-                    textCell.setText(LocaleController.getString("ChangePassword", R.string.ChangePassword), true);
-                } else if (i == setPasswordRow) {
-                    textCell.setText(LocaleController.getString("SetAdditionalPassword", R.string.SetAdditionalPassword), true);
-                } else if (i == turnPasswordOffRow) {
-                    textCell.setText(LocaleController.getString("TurnPasswordOff", R.string.TurnPasswordOff), true);
-                } else if (i == changeRecoveryEmailRow) {
-                    textCell.setText(LocaleController.getString("ChangeRecoveryEmail", R.string.ChangeRecoveryEmail), abortPasswordRow != -1);
-                } else if (i == setRecoveryEmailRow) {
-                    textCell.setText(LocaleController.getString("SetRecoveryEmail", R.string.SetRecoveryEmail), false);
-                } else if (i == abortPasswordRow) {
-                    textCell.setTextColor(0xffd24949);
-                    textCell.setText(LocaleController.getString("AbortPassword", R.string.AbortPassword), false);
-                }
-            } else if (viewType == 1) {
-                if (view == null) {
-                    view = new TextInfoPrivacyCell(mContext);
-                }
-                if (i == setPasswordDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("SetAdditionalPasswordInfo", R.string.SetAdditionalPasswordInfo));
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                } else if (i == shadowRow) {
-                    ((TextInfoPrivacyCell) view).setText("");
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                } else if (i == passwordSetupDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.formatString("EmailPasswordConfirmText", R.string.EmailPasswordConfirmText, currentPassword.email_unconfirmed_pattern));
-                    view.setBackgroundResource(R.drawable.greydivider_top);
-                } else if (i == passwordEnabledDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("EnabledPasswordText", R.string.EnabledPasswordText));
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                } else if (i == passwordEmailVerifyDetailRow) {
-                    ((TextInfoPrivacyCell) view).setText(LocaleController.formatString("PendingEmailText", R.string.PendingEmailText, currentPassword.email_unconfirmed_pattern));
-                    view.setBackgroundResource(R.drawable.greydivider_bottom);
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == setPasswordDetailRow || i == shadowRow || i == passwordSetupDetailRow || i == passwordEnabledDetailRow || i == passwordEmailVerifyDetailRow) {
-                return 1;
-            }
-            return 0;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return loading || currentPassword == null;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
deleted file mode 100644
index 37fa05bf4..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ /dev/null
@@ -1,801 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.graphics.SurfaceTexture;
-import android.media.MediaCodecInfo;
-import android.media.MediaPlayer;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.Surface;
-import android.view.TextureView;
-import android.view.View;
-import android.view.ViewTreeObserver;
-import android.widget.CheckBox;
-import android.widget.CompoundButton;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.coremedia.iso.IsoFile;
-import com.coremedia.iso.boxes.Box;
-import com.coremedia.iso.boxes.MediaBox;
-import com.coremedia.iso.boxes.MediaHeaderBox;
-import com.coremedia.iso.boxes.SampleSizeBox;
-import com.coremedia.iso.boxes.TrackBox;
-import com.coremedia.iso.boxes.TrackHeaderBox;
-import com.googlecode.mp4parser.util.Matrix;
-import com.googlecode.mp4parser.util.Path;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.VideoSeekBarView;
-import org.telegram.ui.Components.VideoTimelineView;
-
-import java.io.File;
-import java.util.List;
-
-@TargetApi(16)
-public class VideoEditorActivity extends BaseFragment implements TextureView.SurfaceTextureListener, NotificationCenter.NotificationCenterDelegate {
-
-    private boolean created = false;
-    private MediaPlayer videoPlayer = null;
-    private VideoTimelineView videoTimelineView = null;
-    private View videoContainerView = null;
-    private TextView originalSizeTextView = null;
-    private TextView editedSizeTextView = null;
-    private View textContainerView = null;
-    private ImageView playButton = null;
-    private VideoSeekBarView videoSeekBarView = null;
-    private TextureView textureView = null;
-    private View controlView = null;
-    private CheckBox compressVideo = null;
-    private boolean playerPrepared = false;
-
-    private String videoPath = null;
-    private float lastProgress = 0;
-    private boolean needSeek = false;
-    private VideoEditorActivityDelegate delegate;
-
-    private final Object sync = new Object();
-    private Thread thread = null;
-
-    private int rotationValue = 0;
-    private int originalWidth = 0;
-    private int originalHeight = 0;
-    private int resultWidth = 0;
-    private int resultHeight = 0;
-    private int bitrate = 0;
-    private float videoDuration = 0;
-    private long startTime = 0;
-    private long endTime = 0;
-    private long audioFramesSize = 0;
-    private long videoFramesSize = 0;
-    private int estimatedSize = 0;
-    private long esimatedDuration = 0;
-    private long originalSize = 0;
-
-    public interface VideoEditorActivityDelegate {
-        void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration);
-    }
-
-    private Runnable progressRunnable = new Runnable() {
-        @Override
-        public void run() {
-            boolean playerCheck;
-
-            while (true) {
-                synchronized (sync) {
-                    try {
-                        playerCheck = videoPlayer != null && videoPlayer.isPlaying();
-                    } catch (Exception e) {
-                        playerCheck = false;
-                        FileLog.e("tmessages", e);
-                    }
-                }
-                if (!playerCheck) {
-                    break;
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (videoPlayer != null && videoPlayer.isPlaying()) {
-                            float startTime = videoTimelineView.getLeftProgress() * videoDuration;
-                            float endTime = videoTimelineView.getRightProgress() * videoDuration;
-                            if (startTime == endTime) {
-                                startTime = endTime - 0.01f;
-                            }
-                            float progress = (videoPlayer.getCurrentPosition() - startTime) / (endTime - startTime);
-                            float lrdiff = videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress();
-                            progress = videoTimelineView.getLeftProgress() + lrdiff * progress;
-                            if (progress > lastProgress) {
-                                videoSeekBarView.setProgress(progress);
-                                lastProgress = progress;
-                            }
-                            if (videoPlayer.getCurrentPosition() >= endTime) {
-                                try {
-                                    videoPlayer.pause();
-                                    onPlayComplete();
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        }
-                    }
-                });
-                try {
-                    Thread.sleep(50);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            synchronized (sync) {
-                thread = null;
-            }
-        }
-    };
-
-    public VideoEditorActivity(Bundle args) {
-        super(args);
-        videoPath = args.getString("videoPath");
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        if (created) {
-            return true;
-        }
-        if (videoPath == null || !processOpenVideo()) {
-            return false;
-        }
-        videoPlayer = new MediaPlayer();
-        videoPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
-            @Override
-            public void onCompletion(MediaPlayer mp) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        onPlayComplete();
-                    }
-                });
-            }
-        });
-        videoPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
-            @Override
-            public void onPrepared(MediaPlayer mp) {
-                playerPrepared = true;
-                if (videoTimelineView != null && videoPlayer != null) {
-                    videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
-                }
-            }
-        });
-        try {
-            videoPlayer.setDataSource(videoPath);
-            videoPlayer.prepareAsync();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return false;
-        }
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        created = true;
-
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        if (videoTimelineView != null) {
-            videoTimelineView.destroy();
-        }
-        if (videoPlayer != null) {
-            try {
-                videoPlayer.stop();
-                videoPlayer.release();
-                videoPlayer = null;
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        super.onFragmentDestroy();
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackgroundColor(0xff333333);
-        actionBar.setItemsBackground(R.drawable.bar_selector_white);
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setTitle(LocaleController.getString("EditVideo", R.string.EditVideo));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == 1) {
-                    synchronized (sync) {
-                        if (videoPlayer != null) {
-                            try {
-                                videoPlayer.stop();
-                                videoPlayer.release();
-                                videoPlayer = null;
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    }
-                    if (delegate != null) {
-                        if (compressVideo.getVisibility() == View.GONE || compressVideo.getVisibility() == View.VISIBLE && !compressVideo.isChecked()) {
-                            delegate.didFinishEditVideo(videoPath, startTime, endTime, originalWidth, originalHeight, rotationValue, originalWidth, originalHeight, bitrate, estimatedSize, esimatedDuration);
-                        } else {
-                            delegate.didFinishEditVideo(videoPath, startTime, endTime, resultWidth, resultHeight, rotationValue, originalWidth, originalHeight, bitrate, estimatedSize, esimatedDuration);
-                        }
-                    }
-                    finishFragment();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.addItemWithWidth(1, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        fragmentView = inflater.inflate(R.layout.video_editor_layout, null, false);
-        originalSizeTextView = (TextView) fragmentView.findViewById(R.id.original_size);
-        editedSizeTextView = (TextView) fragmentView.findViewById(R.id.edited_size);
-        videoContainerView = fragmentView.findViewById(R.id.video_container);
-        textContainerView = fragmentView.findViewById(R.id.info_container);
-        controlView = fragmentView.findViewById(R.id.control_layout);
-        compressVideo = (CheckBox) fragmentView.findViewById(R.id.compress_video);
-        compressVideo.setText(LocaleController.getString("CompressVideo", R.string.CompressVideo));
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        compressVideo.setVisibility(originalHeight != resultHeight || originalWidth != resultWidth ? View.VISIBLE : View.GONE);
-        compressVideo.setChecked(preferences.getBoolean("compress_video", true));
-        compressVideo.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
-            @Override
-            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences.edit();
-                editor.putBoolean("compress_video", isChecked);
-                editor.commit();
-                updateVideoEditedInfo();
-            }
-        });
-
-        if (Build.VERSION.SDK_INT < 18) {
-            try {
-                MediaCodecInfo codecInfo = MediaController.selectCodec(MediaController.MIME_TYPE);
-                if (codecInfo == null) {
-                    compressVideo.setVisibility(View.GONE);
-                } else {
-                    String name = codecInfo.getName();
-                    if (name.equals("OMX.google.h264.encoder") ||
-                            name.equals("OMX.ST.VFM.H264Enc") ||
-                            name.equals("OMX.Exynos.avc.enc") ||
-                            name.equals("OMX.MARVELL.VIDEO.HW.CODA7542ENCODER") ||
-                            name.equals("OMX.MARVELL.VIDEO.H264ENCODER") ||
-                            name.equals("OMX.k3.video.encoder.avc") || //fix this later
-                            name.equals("OMX.TI.DUCATI1.VIDEO.H264E")) { //fix this later
-                        compressVideo.setVisibility(View.GONE);
-                    } else {
-                        if (MediaController.selectColorFormat(codecInfo, MediaController.MIME_TYPE) == 0) {
-                            compressVideo.setVisibility(View.GONE);
-                        }
-                    }
-                }
-            } catch (Exception e) {
-                compressVideo.setVisibility(View.GONE);
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        TextView titleTextView = (TextView) fragmentView.findViewById(R.id.original_title);
-        titleTextView.setText(LocaleController.getString("OriginalVideo", R.string.OriginalVideo));
-        titleTextView = (TextView) fragmentView.findViewById(R.id.edited_title);
-        titleTextView.setText(LocaleController.getString("EditedVideo", R.string.EditedVideo));
-
-        videoTimelineView = (VideoTimelineView) fragmentView.findViewById(R.id.video_timeline_view);
-        videoTimelineView.setVideoPath(videoPath);
-        videoTimelineView.setDelegate(new VideoTimelineView.VideoTimelineViewDelegate() {
-            @Override
-            public void onLeftProgressChanged(float progress) {
-                if (videoPlayer == null || !playerPrepared) {
-                    return;
-                }
-                try {
-                    if (videoPlayer.isPlaying()) {
-                        videoPlayer.pause();
-                        playButton.setImageResource(R.drawable.video_play);
-                    }
-                    videoPlayer.setOnSeekCompleteListener(null);
-                    videoPlayer.seekTo((int) (videoDuration * progress));
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                needSeek = true;
-                videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
-                updateVideoEditedInfo();
-            }
-
-            @Override
-            public void onRifhtProgressChanged(float progress) {
-                if (videoPlayer == null || !playerPrepared) {
-                    return;
-                }
-                try {
-                    if (videoPlayer.isPlaying()) {
-                        videoPlayer.pause();
-                        playButton.setImageResource(R.drawable.video_play);
-                    }
-                    videoPlayer.setOnSeekCompleteListener(null);
-                    videoPlayer.seekTo((int) (videoDuration * progress));
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                needSeek = true;
-                videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
-                updateVideoEditedInfo();
-            }
-        });
-
-        videoSeekBarView = (VideoSeekBarView) fragmentView.findViewById(R.id.video_seekbar);
-        videoSeekBarView.delegate = new VideoSeekBarView.SeekBarDelegate() {
-            @Override
-            public void onSeekBarDrag(float progress) {
-                if (progress < videoTimelineView.getLeftProgress()) {
-                    progress = videoTimelineView.getLeftProgress();
-                    videoSeekBarView.setProgress(progress);
-                } else if (progress > videoTimelineView.getRightProgress()) {
-                    progress = videoTimelineView.getRightProgress();
-                    videoSeekBarView.setProgress(progress);
-                }
-                if (videoPlayer == null || !playerPrepared) {
-                    return;
-                }
-                if (videoPlayer.isPlaying()) {
-                    try {
-                        videoPlayer.seekTo((int) (videoDuration * progress));
-                        lastProgress = progress;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else {
-                    lastProgress = progress;
-                    needSeek = true;
-                }
-            }
-        };
-
-        playButton = (ImageView) fragmentView.findViewById(R.id.play_button);
-        playButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                play();
-            }
-        });
-
-        textureView = (TextureView) fragmentView.findViewById(R.id.video_view);
-        textureView.setSurfaceTextureListener(this);
-
-        updateVideoOriginalInfo();
-        updateVideoEditedInfo();
-
-        return fragmentView;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.closeChats) {
-            removeSelfFromStack();
-        }
-    }
-
-    private void setPlayerSurface() {
-        if (textureView == null || !textureView.isAvailable() || videoPlayer == null) {
-            return;
-        }
-        try {
-            Surface s = new Surface(textureView.getSurfaceTexture());
-            videoPlayer.setSurface(s);
-            if (playerPrepared) {
-                videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        fixLayoutInternal();
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        fixLayout();
-    }
-
-    @Override
-    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
-        setPlayerSurface();
-    }
-
-    @Override
-    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
-
-    }
-
-    @Override
-    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
-        if (videoPlayer == null) {
-            return true;
-        }
-        videoPlayer.setDisplay(null);
-        return true;
-    }
-
-    @Override
-    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
-
-    }
-
-    private void onPlayComplete() {
-        if (playButton != null) {
-            playButton.setImageResource(R.drawable.video_play);
-        }
-        if (videoSeekBarView != null && videoTimelineView != null) {
-            videoSeekBarView.setProgress(videoTimelineView.getLeftProgress());
-        }
-        try {
-            if (videoPlayer != null) {
-                if (videoTimelineView != null) {
-                    videoPlayer.seekTo((int) (videoTimelineView.getLeftProgress() * videoDuration));
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void updateVideoOriginalInfo() {
-        if (originalSizeTextView == null) {
-            return;
-        }
-        int width = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
-        int height = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
-        String videoDimension = String.format("%dx%d", width, height);
-        long duration = (long)Math.ceil(videoDuration);
-        int minutes = (int)(duration / 1000 / 60);
-        int seconds = (int) Math.ceil(duration / 1000) - minutes * 60;
-        String videoTimeSize = String.format("%d:%02d, %s", minutes, seconds, AndroidUtilities.formatFileSize(originalSize));
-        originalSizeTextView.setText(String.format("%s, %s", videoDimension, videoTimeSize));
-    }
-
-    private void updateVideoEditedInfo() {
-        if (editedSizeTextView == null) {
-            return;
-        }
-        esimatedDuration = (long)Math.ceil((videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * videoDuration);
-
-        int width;
-        int height;
-
-        if (compressVideo.getVisibility() == View.GONE || compressVideo.getVisibility() == View.VISIBLE && !compressVideo.isChecked()) {
-            width = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
-            height = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
-            estimatedSize = (int)(originalSize * ((float)esimatedDuration / videoDuration));
-        } else {
-            width = rotationValue == 90 || rotationValue == 270 ? resultHeight : resultWidth;
-            height = rotationValue == 90 || rotationValue == 270 ? resultWidth : resultHeight;
-            estimatedSize = calculateEstimatedSize((float)esimatedDuration / videoDuration);
-        }
-
-        if (videoTimelineView.getLeftProgress() == 0) {
-            startTime = -1;
-        } else {
-            startTime = (long) (videoTimelineView.getLeftProgress() * videoDuration) * 1000;
-        }
-        if (videoTimelineView.getRightProgress() == 1) {
-            endTime = -1;
-        } else {
-            endTime = (long) (videoTimelineView.getRightProgress() * videoDuration) * 1000;
-        }
-
-        String videoDimension = String.format("%dx%d", width, height);
-        int minutes = (int)(esimatedDuration / 1000 / 60);
-        int seconds = (int) Math.ceil(esimatedDuration / 1000) - minutes * 60;
-        String videoTimeSize = String.format("%d:%02d, ~%s", minutes, seconds, AndroidUtilities.formatFileSize(estimatedSize));
-        editedSizeTextView.setText(String.format("%s, %s", videoDimension, videoTimeSize));
-    }
-
-    private void fixVideoSize() {
-        if (fragmentView == null || getParentActivity() == null) {
-            return;
-        }
-        int viewHeight;
-        if (AndroidUtilities.isTablet()) {
-            viewHeight = AndroidUtilities.dp(472);
-        } else {
-            viewHeight = AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - AndroidUtilities.getCurrentActionBarHeight();
-        }
-
-        int width;
-        int height;
-        if (AndroidUtilities.isTablet()) {
-            width = AndroidUtilities.dp(490);
-            height = viewHeight - AndroidUtilities.dp(276 + (compressVideo.getVisibility() == View.VISIBLE ? 20 : 0));
-        } else {
-            if (getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                width = AndroidUtilities.displaySize.x / 3 - AndroidUtilities.dp(24);
-                height = viewHeight - AndroidUtilities.dp(32);
-            } else {
-                width = AndroidUtilities.displaySize.x;
-                height = viewHeight - AndroidUtilities.dp(276 + (compressVideo.getVisibility() == View.VISIBLE ? 20 : 0));
-            }
-        }
-
-        int aWidth = width;
-        int aHeight = height;
-        int vwidth = rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
-        int vheight = rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
-        float wr = (float) width / (float) vwidth;
-        float hr = (float) height / (float) vheight;
-        float ar = (float) vwidth / (float) vheight;
-
-        if (wr > hr) {
-            width = (int) (height * ar);
-        } else {
-            height = (int) (width / ar);
-        }
-
-        if (textureView != null) {
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textureView.getLayoutParams();
-            layoutParams.width = width;
-            layoutParams.height = height;
-            layoutParams.leftMargin = 0;
-            layoutParams.topMargin = 0;
-            textureView.setLayoutParams(layoutParams);
-        }
-    }
-
-    private void fixLayoutInternal() {
-        if (getParentActivity() == null) {
-            return;
-        }
-        if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) videoContainerView.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(16);
-            layoutParams.bottomMargin = AndroidUtilities.dp(16);
-            layoutParams.width = AndroidUtilities.displaySize.x / 3 - AndroidUtilities.dp(24);
-            layoutParams.leftMargin = AndroidUtilities.dp(16);
-            videoContainerView.setLayoutParams(layoutParams);
-
-            layoutParams = (FrameLayout.LayoutParams) controlView.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(16);
-            layoutParams.bottomMargin = 0;
-            layoutParams.width = AndroidUtilities.displaySize.x / 3 * 2 - AndroidUtilities.dp(32);
-            layoutParams.leftMargin = AndroidUtilities.displaySize.x / 3 + AndroidUtilities.dp(16);
-            layoutParams.gravity = Gravity.TOP;
-            controlView.setLayoutParams(layoutParams);
-
-            layoutParams = (FrameLayout.LayoutParams) textContainerView.getLayoutParams();
-            layoutParams.width = AndroidUtilities.displaySize.x / 3 * 2 - AndroidUtilities.dp(32);
-            layoutParams.leftMargin = AndroidUtilities.displaySize.x / 3 + AndroidUtilities.dp(16);
-            layoutParams.rightMargin = AndroidUtilities.dp(16);
-            layoutParams.bottomMargin = AndroidUtilities.dp(16);
-            textContainerView.setLayoutParams(layoutParams);
-        } else {
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) videoContainerView.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(16);
-            layoutParams.bottomMargin = AndroidUtilities.dp(260 + (compressVideo.getVisibility() == View.VISIBLE ? 20 : 0));
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.leftMargin = 0;
-            videoContainerView.setLayoutParams(layoutParams);
-
-            layoutParams = (FrameLayout.LayoutParams) controlView.getLayoutParams();
-            layoutParams.topMargin = 0;
-            layoutParams.leftMargin = 0;
-            layoutParams.bottomMargin = AndroidUtilities.dp(150 + (compressVideo.getVisibility() == View.VISIBLE ? 20 : 0));
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.gravity = Gravity.BOTTOM;
-            controlView.setLayoutParams(layoutParams);
-
-            layoutParams = (FrameLayout.LayoutParams) textContainerView.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.leftMargin = AndroidUtilities.dp(16);
-            layoutParams.rightMargin = AndroidUtilities.dp(16);
-            layoutParams.bottomMargin = AndroidUtilities.dp(16);
-            textContainerView.setLayoutParams(layoutParams);
-        }
-        fixVideoSize();
-        videoTimelineView.clearFrames();
-    }
-
-    private void fixLayout() {
-        if (fragmentView == null) {
-            return;
-        }
-        fragmentView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
-            @Override
-            public void onGlobalLayout() {
-                fixLayoutInternal();
-                if (fragmentView != null) {
-                    if (Build.VERSION.SDK_INT < 16) {
-                        fragmentView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                    } else {
-                        fragmentView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                    }
-                }
-            }
-        });
-    }
-
-    private void play() {
-        if (videoPlayer == null || !playerPrepared) {
-            return;
-        }
-        if (videoPlayer.isPlaying()) {
-            videoPlayer.pause();
-            playButton.setImageResource(R.drawable.video_play);
-        } else {
-            try {
-                playButton.setImageDrawable(null);
-                lastProgress = 0;
-                if (needSeek) {
-                    videoPlayer.seekTo((int) (videoDuration * videoSeekBarView.getProgress()));
-                    needSeek = false;
-                }
-                videoPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
-                    @Override
-                    public void onSeekComplete(MediaPlayer mp) {
-                        float startTime = videoTimelineView.getLeftProgress() * videoDuration;
-                        float endTime = videoTimelineView.getRightProgress() * videoDuration;
-                        if (startTime == endTime) {
-                            startTime = endTime - 0.01f;
-                        }
-                        lastProgress = (videoPlayer.getCurrentPosition() - startTime) / (endTime - startTime);
-                        float lrdiff = videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress();
-                        lastProgress = videoTimelineView.getLeftProgress() + lrdiff * lastProgress;
-                        videoSeekBarView.setProgress(lastProgress);
-                    }
-                });
-                videoPlayer.start();
-                synchronized (sync) {
-                    if (thread == null) {
-                        thread = new Thread(progressRunnable);
-                        thread.start();
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-    }
-
-    public void setDelegate(VideoEditorActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    private boolean processOpenVideo() {
-        try {
-            File file = new File(videoPath);
-            originalSize = file.length();
-
-            IsoFile isoFile = new IsoFile(videoPath);
-            List<Box> boxes = Path.getPaths(isoFile, "/moov/trak/");
-            TrackHeaderBox trackHeaderBox = null;
-            boolean isAvc = true;
-            boolean isMp4A = true;
-
-            Box boxTest = Path.getPath(isoFile, "/moov/trak/mdia/minf/stbl/stsd/mp4a/");
-            if (boxTest == null) {
-                isMp4A = false;
-            }
-
-            if (!isMp4A) {
-                return false;
-            }
-
-            boxTest = Path.getPath(isoFile, "/moov/trak/mdia/minf/stbl/stsd/avc1/");
-            if (boxTest == null) {
-                isAvc = false;
-            }
-
-            for (Box box : boxes) {
-                TrackBox trackBox = (TrackBox)box;
-                long sampleSizes = 0;
-                long trackBitrate = 0;
-                try {
-                    MediaBox mediaBox = trackBox.getMediaBox();
-                    MediaHeaderBox mediaHeaderBox = mediaBox.getMediaHeaderBox();
-                    SampleSizeBox sampleSizeBox = mediaBox.getMediaInformationBox().getSampleTableBox().getSampleSizeBox();
-                    for (long size : sampleSizeBox.getSampleSizes()) {
-                        sampleSizes += size;
-                    }
-                    videoDuration = (float)mediaHeaderBox.getDuration() / (float)mediaHeaderBox.getTimescale();
-                    trackBitrate = (int)(sampleSizes * 8 / videoDuration);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                TrackHeaderBox headerBox = trackBox.getTrackHeaderBox();
-                if (headerBox.getWidth() != 0 && headerBox.getHeight() != 0) {
-                    trackHeaderBox = headerBox;
-                    bitrate = (int)(trackBitrate / 100000 * 100000);
-                    if (bitrate > 900000) {
-                        bitrate = 900000;
-                    }
-                    videoFramesSize += sampleSizes;
-                } else {
-                    audioFramesSize += sampleSizes;
-                }
-            }
-            if (trackHeaderBox == null) {
-                return false;
-            }
-
-            Matrix matrix = trackHeaderBox.getMatrix();
-            if (matrix.equals(Matrix.ROTATE_90)) {
-                rotationValue = 90;
-            } else if (matrix.equals(Matrix.ROTATE_180)) {
-                rotationValue = 180;
-            } else if (matrix.equals(Matrix.ROTATE_270)) {
-                rotationValue = 270;
-            }
-            resultWidth = originalWidth = (int)trackHeaderBox.getWidth();
-            resultHeight = originalHeight = (int)trackHeaderBox.getHeight();
-
-            if (resultWidth > 640 || resultHeight > 640) {
-                float scale = resultWidth > resultHeight ? 640.0f / resultWidth : 640.0f / resultHeight;
-                resultWidth *= scale;
-                resultHeight *= scale;
-                if (bitrate != 0) {
-                    bitrate *= Math.max(0.5f, scale);
-                    videoFramesSize = (long)(bitrate / 8 * videoDuration);
-                }
-            }
-
-            if (!isAvc && (resultWidth == originalWidth || resultHeight == originalHeight)) {
-                return false;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return false;
-        }
-
-        videoDuration *= 1000;
-
-        updateVideoOriginalInfo();
-        updateVideoEditedInfo();
-
-        return true;
-    }
-
-    private int calculateEstimatedSize(float timeDelta) {
-        int size = (int)((audioFramesSize + videoFramesSize) * timeDelta);
-        size += size / (32 * 1024) * 16;
-        return size;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
deleted file mode 100644
index 1689a0e62..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ /dev/null
@@ -1,500 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.graphics.Bitmap;
-import android.graphics.Point;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.provider.MediaStore;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.ProgressBar;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.LocaleController;
-import org.telegram.android.support.widget.LinearLayoutManager;
-import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.Cells.WallpaperCell;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.RecyclerListView;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.util.ArrayList;
-import java.util.HashMap;
-
-public class WallpapersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private ListAdapter listAdapter;
-    private ImageView backgroundImage;
-    private ProgressBar progressBar;
-    private int selectedBackground;
-    private int selectedColor;
-    private ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<>();
-    private HashMap<Integer, TLRPC.WallPaper> wallpappersByIds = new HashMap<>();
-    private View doneButton;
-    private String loadingFile = null;
-    private File loadingFileObject = null;
-    private TLRPC.PhotoSize loadingSize = null;
-    private String currentPicturePath;
-
-    private final static int done_button = 1;
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.wallpapersDidLoaded);
-
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        selectedBackground = preferences.getInt("selectedBackground", 1000001);
-        selectedColor = preferences.getInt("selectedColor", 0);
-        MessagesStorage.getInstance().getWallpapers();
-        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
-        toFile.delete();
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.wallpapersDidLoaded);
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("ChatBackground", R.string.ChatBackground));
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == done_button) {
-                    boolean done;
-                    TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
-                    if (wallPaper != null && wallPaper.id != 1000001 && wallPaper instanceof TLRPC.TL_wallPaper) {
-                        int width = AndroidUtilities.displaySize.x;
-                        int height = AndroidUtilities.displaySize.y;
-                        if (width > height) {
-                            int temp = width;
-                            width = height;
-                            height = temp;
-                        }
-                        TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
-                        String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
-                        File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-                        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
-                        try {
-                            done = AndroidUtilities.copyFile(f, toFile);
-                        } catch (Exception e) {
-                            done = false;
-                            FileLog.e("tmessages", e);
-                        }
-                    } else {
-                        if (selectedBackground == -1) {
-                            File fromFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
-                            File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
-                            done = fromFile.renameTo(toFile);
-                        } else {
-                            done = true;
-                        }
-                    }
-
-                    if (done) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        editor.putInt("selectedBackground", selectedBackground);
-                        editor.putInt("selectedColor", selectedColor);
-                        editor.commit();
-                        ApplicationLoader.reloadWallpaper();
-                    }
-                    finishFragment();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        fragmentView = frameLayout;
-
-        backgroundImage = new ImageView(context);
-        backgroundImage.setScaleType(ImageView.ScaleType.CENTER_CROP);
-        frameLayout.addView(backgroundImage, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-        backgroundImage.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        progressBar = new ProgressBar(context);
-        progressBar.setPadding(AndroidUtilities.dp(6), AndroidUtilities.dp(6), AndroidUtilities.dp(6), AndroidUtilities.dp(6));
-        frameLayout.addView(progressBar, LayoutHelper.createFrame(60, 60, Gravity.CENTER, 0, 0, 0, 52));
-
-        RecyclerListView listView = new RecyclerListView(context);
-        listView.setClipToPadding(false);
-        listView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), 0);
-        LinearLayoutManager layoutManager = new LinearLayoutManager(context);
-        layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
-        listView.setLayoutManager(layoutManager);
-        listView.setClipToPadding(false);
-        listView.setDisallowInterceptTouchEvents(true);
-        if (Build.VERSION.SDK_INT >= 9) {
-            listView.setOverScrollMode(RecyclerListView.OVER_SCROLL_NEVER);
-        }
-        listView.setAdapter(listAdapter = new ListAdapter(context));
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 102, Gravity.LEFT | Gravity.BOTTOM));
-        listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
-            @Override
-            public void onItemClick(View view, int position) {
-                if (position == 0) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
-                    CharSequence[] items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("Cancel", R.string.Cancel)};
-
-                    builder.setItems(items, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            try {
-                                if (i == 0) {
-                                    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-                                    File image = AndroidUtilities.generatePicturePath();
-                                    if (image != null) {
-                                        takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
-                                        currentPicturePath = image.getAbsolutePath();
-                                    }
-                                    startActivityForResult(takePictureIntent, 10);
-                                } else if (i == 1) {
-                                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
-                                    photoPickerIntent.setType("image/*");
-                                    startActivityForResult(photoPickerIntent, 11);
-                                }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
-                } else {
-                    if (position - 1 < 0 || position - 1 >= wallPapers.size()) {
-                        return;
-                    }
-                    TLRPC.WallPaper wallPaper = wallPapers.get(position - 1);
-                    selectedBackground = wallPaper.id;
-                    listAdapter.notifyDataSetChanged();
-                    processSelectedBackground();
-                }
-            }
-        });
-
-        processSelectedBackground();
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            if (requestCode == 10) {
-                AndroidUtilities.addMediaToGallery(currentPicturePath);
-                FileOutputStream stream = null;
-                try {
-                    Point screenSize = AndroidUtilities.getRealScreenSize();
-                    Bitmap bitmap = ImageLoader.loadBitmap(currentPicturePath, null, screenSize.x, screenSize.y, true);
-                    File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
-                    stream = new FileOutputStream(toFile);
-                    bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
-                    selectedBackground = -1;
-                    selectedColor = 0;
-                    backgroundImage.setImageBitmap(bitmap);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    try {
-                        if (stream != null) {
-                            stream.close();
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-                currentPicturePath = null;
-            } else if (requestCode == 11) {
-                if (data == null || data.getData() == null) {
-                    return;
-                }
-                try {
-                    Point screenSize = AndroidUtilities.getRealScreenSize();
-                    Bitmap bitmap = ImageLoader.loadBitmap(null, data.getData(), screenSize.x, screenSize.y, true);
-                    File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
-                    FileOutputStream stream = new FileOutputStream(toFile);
-                    bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
-                    selectedBackground = -1;
-                    selectedColor = 0;
-                    backgroundImage.setImageBitmap(bitmap);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        }
-    }
-
-    @Override
-    public void saveSelfArgs(Bundle args) {
-        if (currentPicturePath != null) {
-            args.putString("path", currentPicturePath);
-        }
-    }
-
-    @Override
-    public void restoreSelfArgs(Bundle args) {
-        currentPicturePath = args.getString("path");
-    }
-
-    private void processSelectedBackground() {
-        TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
-        if (selectedBackground != -1 && selectedBackground != 1000001 && wallPaper != null && wallPaper instanceof TLRPC.TL_wallPaper) {
-            int width = AndroidUtilities.displaySize.x;
-            int height = AndroidUtilities.displaySize.y;
-            if (width > height) {
-                int temp = width;
-                width = height;
-                height = temp;
-            }
-            TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
-            String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
-            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-            if (!f.exists()) {
-                progressBar.setProgress(0);
-                loadingFile = fileName;
-                loadingFileObject = f;
-                doneButton.setEnabled(false);
-                progressBar.setVisibility(View.VISIBLE);
-                loadingSize = size;
-                selectedColor = 0;
-                FileLoader.getInstance().loadFile(size, null, true);
-                backgroundImage.setBackgroundColor(0);
-            } else {
-                if (loadingFile != null) {
-                    FileLoader.getInstance().cancelLoadFile(loadingSize);
-                }
-                loadingFileObject = null;
-                loadingFile = null;
-                loadingSize = null;
-                try {
-                    backgroundImage.setImageURI(Uri.fromFile(f));
-                } catch (Throwable e) {
-                    FileLog.e("tmessages", e);
-                }
-                backgroundImage.setBackgroundColor(0);
-                selectedColor = 0;
-                doneButton.setEnabled(true);
-                progressBar.setVisibility(View.GONE);
-            }
-        } else {
-            if (loadingFile != null) {
-                FileLoader.getInstance().cancelLoadFile(loadingSize);
-            }
-            if (selectedBackground == 1000001) {
-                backgroundImage.setImageResource(R.drawable.background_hd);
-                backgroundImage.setBackgroundColor(0);
-                selectedColor = 0;
-            } else if (selectedBackground == -1) {
-                File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
-                if (!toFile.exists()) {
-                    toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
-                }
-                if (toFile.exists()) {
-                    backgroundImage.setImageURI(Uri.fromFile(toFile));
-                } else {
-                    selectedBackground = 1000001;
-                    processSelectedBackground();
-                }
-            } else {
-                if (wallPaper == null) {
-                    return;
-                }
-                if (wallPaper instanceof TLRPC.TL_wallPaperSolid) {
-                    backgroundImage.setImageBitmap(null);
-                    selectedColor = 0xff000000 | wallPaper.bg_color;
-                    backgroundImage.setBackgroundColor(selectedColor);
-                }
-            }
-            loadingFileObject = null;
-            loadingFile = null;
-            loadingSize = null;
-            doneButton.setEnabled(true);
-            progressBar.setVisibility(View.GONE);
-        }
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.FileDidFailedLoad) {
-            String location = (String) args[0];
-            if (loadingFile != null && loadingFile.equals(location)) {
-                loadingFileObject = null;
-                loadingFile = null;
-                loadingSize = null;
-                progressBar.setVisibility(View.GONE);
-                doneButton.setEnabled(false);
-            }
-        } else if (id == NotificationCenter.FileDidLoaded) {
-            String location = (String) args[0];
-            if (loadingFile != null && loadingFile.equals(location)) {
-                backgroundImage.setImageURI(Uri.fromFile(loadingFileObject));
-                progressBar.setVisibility(View.GONE);
-                backgroundImage.setBackgroundColor(0);
-                doneButton.setEnabled(true);
-                loadingFileObject = null;
-                loadingFile = null;
-                loadingSize = null;
-            }
-        } else if (id == NotificationCenter.FileLoadProgressChanged) {
-            String location = (String) args[0];
-            if (loadingFile != null && loadingFile.equals(location)) {
-                Float progress = (Float) args[1];
-                progressBar.setProgress((int) (progress * 100));
-            }
-        } else if (id == NotificationCenter.wallpapersDidLoaded) {
-            wallPapers = (ArrayList<TLRPC.WallPaper>) args[0];
-            wallpappersByIds.clear();
-            for (TLRPC.WallPaper wallPaper : wallPapers) {
-                wallpappersByIds.put(wallPaper.id, wallPaper);
-            }
-            if (listAdapter != null) {
-                listAdapter.notifyDataSetChanged();
-            }
-            if (!wallPapers.isEmpty() && backgroundImage != null) {
-                processSelectedBackground();
-            }
-            loadWallpapers();
-        }
-    }
-
-    private void loadWallpapers() {
-        TLRPC.TL_account_getWallPapers req = new TLRPC.TL_account_getWallPapers();
-        long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    return;
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        wallPapers.clear();
-                        TLRPC.Vector res = (TLRPC.Vector) response;
-                        wallpappersByIds.clear();
-                        for (Object obj : res.objects) {
-                            wallPapers.add((TLRPC.WallPaper) obj);
-                            wallpappersByIds.put(((TLRPC.WallPaper) obj).id, (TLRPC.WallPaper) obj);
-                        }
-                        if (listAdapter != null) {
-                            listAdapter.notifyDataSetChanged();
-                        }
-                        if (backgroundImage != null) {
-                            processSelectedBackground();
-                        }
-                        MessagesStorage.getInstance().putWallpapers(wallPapers);
-                    }
-                });
-            }
-        });
-        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-        processSelectedBackground();
-    }
-
-    private class ListAdapter extends RecyclerView.Adapter {
-
-        private class Holder extends RecyclerView.ViewHolder {
-
-            public Holder(View itemView) {
-                super(itemView);
-            }
-        }
-
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public int getItemCount() {
-            return 1 + wallPapers.size();
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
-            WallpaperCell view = new WallpaperCell(mContext);
-            return new Holder(view);
-        }
-
-        @Override
-        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
-            ((WallpaperCell) viewHolder.itemView).setWallpaper(i == 0 ? null : wallPapers.get(i - 1), selectedBackground);
-        }
-    }
-}
