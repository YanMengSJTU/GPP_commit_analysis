diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index 305f2c7eb..03a4cac4c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -113,7 +113,7 @@ public static ContactsController getInstance() {
     public ContactsController() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         if (preferences.getBoolean("needGetStatuses", false)) {
-            reloadContactsStatuses();
+//            reloadContactsStatuses();
         }
 
         sectionsToReplace.put("Ã€", "A");
@@ -247,562 +247,6 @@ public void checkAppAccount() {
         }
     }
 
-    public void deleteAllAppAccounts() {
-        try {
-            AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
-            Account[] accounts = am.getAccountsByType("org.telegram.messenger");
-            for (Account c : accounts) {
-                am.removeAccount(c, null, null);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void checkContacts() {
-        Utilities.globalQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (checkContactsInternal()) {
-                    FileLog.e("tmessages", "detected contacts change");
-                    ContactsController.getInstance().performSyncPhoneBook(ContactsController.getInstance().getContactsCopy(ContactsController.getInstance().contactsBook), true, false, true);
-                }
-            }
-        });
-    }
-
-    private boolean checkContactsInternal() {
-        boolean reload = false;
-        try {
-            ContentResolver cr = ApplicationLoader.applicationContext.getContentResolver();
-            Cursor pCur = null;
-            try {
-                pCur = cr.query(ContactsContract.RawContacts.CONTENT_URI, new String[]{ContactsContract.RawContacts.VERSION}, null, null, null);
-                StringBuilder currentVersion = new StringBuilder();
-                while (pCur.moveToNext()) {
-                    int col = pCur.getColumnIndex(ContactsContract.RawContacts.VERSION);
-                    currentVersion.append(pCur.getString(col));
-                }
-                String newContactsVersion = currentVersion.toString();
-                if (lastContactsVersions.length() != 0 && !lastContactsVersions.equals(newContactsVersion)) {
-                    reload = true;
-                }
-                lastContactsVersions = newContactsVersion;
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            } finally {
-                if (pCur != null) {
-                    pCur.close();
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return reload;
-    }
-
-
-
-    private HashMap<Integer, Contact> readContactsFromPhoneBook() {
-        HashMap<Integer, Contact> contactsMap = new HashMap<>();
-        try {
-            ContentResolver cr = ApplicationLoader.applicationContext.getContentResolver();
-
-            HashMap<String, Contact> shortContacts = new HashMap<>();
-            StringBuilder ids = new StringBuilder();
-            Cursor pCur = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, projectionPhones, null, null, null);
-            if (pCur != null) {
-                if (pCur.getCount() > 0) {
-                    while (pCur.moveToNext()) {
-                        String number = pCur.getString(1);
-                        if (number == null || number.length() == 0) {
-                            continue;
-                        }
-                        number = PhoneFormat.stripExceptNumbers(number, true);
-                        if (number.length() == 0) {
-                            continue;
-                        }
-
-                        String shortNumber = number;
-
-                        if (number.startsWith("+")) {
-                            shortNumber = number.substring(1);
-                        }
-
-                        if (shortContacts.containsKey(shortNumber)) {
-                            continue;
-                        }
-
-                        Integer id = pCur.getInt(0);
-                        if (ids.length() != 0) {
-                            ids.append(",");
-                        }
-                        ids.append(id);
-
-                        int type = pCur.getInt(2);
-                        Contact contact = contactsMap.get(id);
-                        if (contact == null) {
-                            contact = new Contact();
-                            contact.first_name = "";
-                            contact.last_name = "";
-                            contact.id = id;
-                            contactsMap.put(id, contact);
-                        }
-
-                        contact.shortPhones.add(shortNumber);
-                        contact.phones.add(number);
-                        contact.phoneDeleted.add(0);
-
-                        if (type == ContactsContract.CommonDataKinds.Phone.TYPE_CUSTOM) {
-                            contact.phoneTypes.add(pCur.getString(3));
-                        } else if (type == ContactsContract.CommonDataKinds.Phone.TYPE_HOME) {
-                            contact.phoneTypes.add(LocaleController.getString("PhoneHome", R.string.PhoneHome));
-                        } else if (type == ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE) {
-                            contact.phoneTypes.add(LocaleController.getString("PhoneMobile", R.string.PhoneMobile));
-                        } else if (type == ContactsContract.CommonDataKinds.Phone.TYPE_WORK) {
-                            contact.phoneTypes.add(LocaleController.getString("PhoneWork", R.string.PhoneWork));
-                        } else if (type == ContactsContract.CommonDataKinds.Phone.TYPE_MAIN) {
-                            contact.phoneTypes.add(LocaleController.getString("PhoneMain", R.string.PhoneMain));
-                        } else {
-                            contact.phoneTypes.add(LocaleController.getString("PhoneOther", R.string.PhoneOther));
-                        }
-                        shortContacts.put(shortNumber, contact);
-                    }
-                }
-                pCur.close();
-            }
-
-            pCur = cr.query(ContactsContract.Data.CONTENT_URI, projectionNames, ContactsContract.CommonDataKinds.StructuredName.CONTACT_ID + " IN (" + ids.toString() + ") AND " + ContactsContract.Data.MIMETYPE + " = '" + ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE + "'", null, null);
-            if (pCur != null && pCur.getCount() > 0) {
-                while (pCur.moveToNext()) {
-                    int id = pCur.getInt(0);
-                    String fname = pCur.getString(1);
-                    String sname = pCur.getString(2);
-                    String sname2 = pCur.getString(3);
-                    String mname = pCur.getString(4);
-                    Contact contact = contactsMap.get(id);
-                    if (contact != null && contact.first_name.length() == 0 && contact.last_name.length() == 0) {
-                        contact.first_name = fname;
-                        contact.last_name = sname;
-                        if (contact.first_name == null) {
-                            contact.first_name = "";
-                        }
-                        if (mname != null && mname.length() != 0) {
-                            if (contact.first_name.length() != 0) {
-                                contact.first_name += " " + mname;
-                            } else {
-                                contact.first_name = mname;
-                            }
-                        }
-                        if (contact.last_name == null) {
-                            contact.last_name = "";
-                        }
-                        if (contact.last_name.length() == 0 && contact.first_name.length() == 0 && sname2 != null && sname2.length() != 0) {
-                            contact.first_name = sname2;
-                        }
-                    }
-                }
-                pCur.close();
-            }
-
-            try {
-                pCur = cr.query(ContactsContract.RawContacts.CONTENT_URI, new String[] { "display_name", ContactsContract.RawContacts.SYNC1, ContactsContract.RawContacts.CONTACT_ID }, ContactsContract.RawContacts.ACCOUNT_TYPE + " = " + "'com.whatsapp'", null, null);
-                if (pCur != null) {
-                    while ((pCur.moveToNext())) {
-                        String phone = pCur.getString(1);
-                        if (phone == null || phone.length() == 0) {
-                            continue;
-                        }
-                        boolean withPlus = phone.startsWith("+");
-                        phone = Utilities.parseIntToString(phone);
-                        if (phone == null || phone.length() == 0) {
-                            continue;
-                        }
-                        String shortPhone = phone;
-                        if (!withPlus) {
-                            phone = "+" + phone;
-                        }
-
-                        if (shortContacts.containsKey(shortPhone)) {
-                            continue;
-                        }
-
-                        String name = pCur.getString(0);
-                        if (name == null || name.length() == 0) {
-                            name = PhoneFormat.getInstance().format(phone);
-                        }
-
-                        Contact contact = new Contact();
-                        contact.first_name = name;
-                        contact.last_name = "";
-                        contact.id = pCur.getInt(2);
-                        contactsMap.put(contact.id, contact);
-
-                        contact.phoneDeleted.add(0);
-                        contact.shortPhones.add(shortPhone);
-                        contact.phones.add(phone);
-                        contact.phoneTypes.add(LocaleController.getString("PhoneMobile", R.string.PhoneMobile));
-                        shortContacts.put(shortPhone, contact);
-                    }
-                    pCur.close();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            contactsMap.clear();
-        }
-        return contactsMap;
-    }
-
-    public HashMap<Integer, Contact> getContactsCopy(HashMap<Integer, Contact> original) {
-        HashMap<Integer, Contact> ret = new HashMap<>();
-        for (HashMap.Entry<Integer, Contact> entry : original.entrySet()) {
-            Contact copyContact = new Contact();
-            Contact originalContact = entry.getValue();
-            copyContact.phoneDeleted.addAll(originalContact.phoneDeleted);
-            copyContact.phones.addAll(originalContact.phones);
-            copyContact.phoneTypes.addAll(originalContact.phoneTypes);
-            copyContact.shortPhones.addAll(originalContact.shortPhones);
-            copyContact.first_name = originalContact.first_name;
-            copyContact.last_name = originalContact.last_name;
-            copyContact.id = originalContact.id;
-            ret.put(copyContact.id, copyContact);
-        }
-        return ret;
-    }
-
-    public void performSyncPhoneBook(final HashMap<Integer, Contact> contactHashMap, final boolean requ, final boolean first, final boolean schedule) {
-        if (!first && !contactsBookLoaded) {
-            return;
-        }
-        Utilities.globalQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-
-                boolean disableDeletion = true; //disable contacts deletion, because phone numbers can't be compared due to different numbers format
-                /*if (schedule) {
-                    try {
-                        AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
-                        Account[] accounts = am.getAccountsByType("org.telegram.account");
-                        boolean recreateAccount = false;
-                        if (UserConfig.isClientActivated()) {
-                            if (accounts.length != 1) {
-                                FileLog.e("tmessages", "detected account deletion!");
-                                currentAccount = new Account(UserConfig.getCurrentUser().phone, "org.telegram.account");
-                                am.addAccountExplicitly(currentAccount, "", null);
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        performWriteContactsToPhoneBook();
-                                    }
-                                });
-                            }
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }*/
-
-                boolean request = requ;
-                if (request && first) {
-                    if (UserConfig.importHash != null && UserConfig.importHash.length() != 0 || UserConfig.contactsVersion != 1) {
-                        UserConfig.importHash = "";
-                        UserConfig.contactsVersion = 1;
-                        UserConfig.saveConfig(false);
-                        request = false;
-                    }
-                }
-
-                HashMap<String, Contact> contactShortHashMap = new HashMap<>();
-                for (HashMap.Entry<Integer, Contact> entry : contactHashMap.entrySet()) {
-                    Contact c = entry.getValue();
-                    for (String sphone : c.shortPhones) {
-                        contactShortHashMap.put(sphone, c);
-                    }
-                }
-
-                FileLog.e("tmessages", "start read contacts from phone");
-                if (!schedule) {
-                    checkContactsInternal();
-                }
-                final HashMap<Integer, Contact> contactsMap = readContactsFromPhoneBook();
-                final HashMap<String, Contact> contactsBookShort = new HashMap<>();
-                int oldCount = contactHashMap.size();
-
-                ArrayList<TLRPC.TL_inputPhoneContact> toImport = new ArrayList<>();
-                if (!contactHashMap.isEmpty()) {
-                    for (HashMap.Entry<Integer, Contact> pair : contactsMap.entrySet()) {
-                        Integer id = pair.getKey();
-                        Contact value = pair.getValue();
-                        Contact existing = contactHashMap.get(id);
-                        if (existing == null) {
-                            for (String s : value.shortPhones) {
-                                Contact c = contactShortHashMap.get(s);
-                                if (c != null) {
-                                    existing = c;
-                                    id = existing.id;
-                                    break;
-                                }
-                            }
-                        }
-
-                        boolean nameChanged = existing != null && (!existing.first_name.equals(value.first_name) || !existing.last_name.equals(value.last_name));
-                        if (existing == null || nameChanged) {
-                            for (int a = 0; a < value.phones.size(); a++) {
-                                String sphone = value.shortPhones.get(a);
-                                contactsBookShort.put(sphone, value);
-                                if (existing != null) {
-                                    int index = existing.shortPhones.indexOf(sphone);
-                                    if (index != -1) {
-                                        Integer deleted = existing.phoneDeleted.get(index);
-                                        value.phoneDeleted.set(a, deleted);
-                                        if (deleted == 1) {
-                                            continue;
-                                        }
-                                    }
-                                }
-                                if (request) {
-                                    if (!nameChanged && contactsByPhone.containsKey(sphone)) {
-                                        continue;
-                                    }
-
-                                    TLRPC.TL_inputPhoneContact imp = new TLRPC.TL_inputPhoneContact();
-                                    imp.client_id = value.id;
-                                    imp.first_name = value.first_name;
-                                    imp.last_name = value.last_name;
-                                    imp.phone = value.phones.get(a);
-                                    toImport.add(imp);
-                                }
-                            }
-                            if (existing != null) {
-                                contactHashMap.remove(id);
-                            }
-                        } else {
-                            for (int a = 0; a < value.phones.size(); a++) {
-                                String sphone = value.shortPhones.get(a);
-                                contactsBookShort.put(sphone, value);
-                                int index = existing.shortPhones.indexOf(sphone);
-                                if (index == -1) {
-                                    if (request) {
-                                        if (contactsByPhone.containsKey(sphone)) {
-                                            continue;
-                                        }
-
-                                        TLRPC.TL_inputPhoneContact imp = new TLRPC.TL_inputPhoneContact();
-                                        imp.client_id = value.id;
-                                        imp.first_name = value.first_name;
-                                        imp.last_name = value.last_name;
-                                        imp.phone = value.phones.get(a);
-                                        toImport.add(imp);
-                                    }
-                                } else {
-                                    value.phoneDeleted.set(a, existing.phoneDeleted.get(index));
-                                    existing.phones.remove(index);
-                                    existing.shortPhones.remove(index);
-                                    existing.phoneDeleted.remove(index);
-                                    existing.phoneTypes.remove(index);
-                                }
-                            }
-                            if (existing.phones.isEmpty()) {
-                                contactHashMap.remove(id);
-                            }
-                        }
-                    }
-                    if (!first && contactHashMap.isEmpty() && toImport.isEmpty() && oldCount == contactsMap.size()) {
-                        FileLog.e("tmessages", "contacts not changed!");
-                        return;
-                    }
-                    if (request && !contactHashMap.isEmpty() && !contactsMap.isEmpty()) {
-                        if (toImport.isEmpty()) {
-                        }
-                        if (!disableDeletion && !contactHashMap.isEmpty()) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    if (BuildVars.DEBUG_VERSION) {
-                                        FileLog.e("tmessages", "need delete contacts");
-                                        for (HashMap.Entry<Integer, Contact> c : contactHashMap.entrySet()) {
-                                            Contact contact = c.getValue();
-                                            FileLog.e("tmessages", "delete contact " + contact.first_name + " " + contact.last_name);
-                                            for (String phone : contact.phones) {
-                                                FileLog.e("tmessages", phone);
-                                            }
-                                        }
-                                    }
-
-                                    final ArrayList<TLRPC.User> toDelete = new ArrayList<>();
-                                    if (contactHashMap != null && !contactHashMap.isEmpty()) {
-                                        try {
-                                            final HashMap<String, TLRPC.User> contactsPhonesShort = new HashMap<>();
-
-                                            for (TLRPC.TL_contact value : contacts) {
-                                                TLRPC.User user = MessagesController.getInstance().getUser(value.user_id);
-                                                if (user == null || user.phone == null || user.phone.length() == 0) {
-                                                    continue;
-                                                }
-                                                contactsPhonesShort.put(user.phone, user);
-                                            }
-                                            int removed = 0;
-                                            for (HashMap.Entry<Integer, Contact> entry : contactHashMap.entrySet()) {
-                                                Contact contact = entry.getValue();
-                                                boolean was = false;
-                                                for (int a = 0; a < contact.shortPhones.size(); a++) {
-                                                    String phone = contact.shortPhones.get(a);
-                                                    TLRPC.User user = contactsPhonesShort.get(phone);
-                                                    if (user != null) {
-                                                        was = true;
-                                                        toDelete.add(user);
-                                                        contact.shortPhones.remove(a);
-                                                        a--;
-                                                    }
-                                                }
-                                                if (!was || contact.shortPhones.size() == 0) {
-                                                    removed++;
-                                                }
-                                            }
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
-                                        }
-                                    }
-
-                                    if (!toDelete.isEmpty()) {
-                                        deleteContact(toDelete);
-                                    }
-                                }
-                            });
-                        }
-                    }
-                } else if (request) {
-                    for (HashMap.Entry<Integer, Contact> pair : contactsMap.entrySet()) {
-                        Contact value = pair.getValue();
-                        int id = pair.getKey();
-                        for (int a = 0; a < value.phones.size(); a++) {
-                            String phone = value.shortPhones.get(a);
-                            if (contactsByPhone.containsKey(phone)) {
-                                continue;
-                            }
-                            TLRPC.TL_inputPhoneContact imp = new TLRPC.TL_inputPhoneContact();
-                            imp.client_id = id;
-                            imp.first_name = value.first_name;
-                            imp.last_name = value.last_name;
-                            imp.phone = value.phones.get(a);
-                            toImport.add(imp);
-                        }
-                    }
-                }
-
-                FileLog.e("tmessages", "done processing contacts");
-
-                if (request) {
-                    if (!toImport.isEmpty()) {
-                        if (BuildVars.DEBUG_VERSION) {
-                            FileLog.e("tmessages", "start import contacts");
-//                            for (TLRPC.TL_inputPhoneContact contact : toImport) {
-//                                FileLog.e("tmessages", "add contact " + contact.first_name + " " + contact.last_name + " " + contact.phone);
-//                            }
-                        }
-                        final int count = (int)Math.ceil(toImport.size() / 500.0f);
-                        for (int a = 0; a < count; a++) {
-                            ArrayList<TLRPC.TL_inputPhoneContact> finalToImport = new ArrayList<>();
-                            finalToImport.addAll(toImport.subList(a * 500, Math.min((a + 1) * 500, toImport.size())));
-                            TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
-                            req.contacts = finalToImport;
-                            req.replace = false;
-                            final boolean isLastQuery = a == count - 1;
-                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                @Override
-                                public void run(TLObject response, TLRPC.TL_error error) {
-                                    if (error == null) {
-                                        FileLog.e("tmessages", "contacts imported");
-                                        if (isLastQuery && !contactsMap.isEmpty()) {
-                                        }
-                                        TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
-                                        if (BuildVars.DEBUG_VERSION) {
-//                                            for (TLRPC.User user : res.users) {
-//                                                FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
-//                                            }
-                                        }
-                                        ArrayList<TLRPC.TL_contact> cArr = new ArrayList<>();
-                                        for (TLRPC.TL_importedContact c : res.imported) {
-                                            TLRPC.TL_contact contact = new TLRPC.TL_contact();
-                                            contact.user_id = c.user_id;
-                                            cArr.add(contact);
-                                        }
-                                    } else {
-                                        FileLog.e("tmessages", "import contacts error " + error.text);
-                                    }
-                                    if (isLastQuery) {
-                                        Utilities.stageQueue.postRunnable(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                contactsBookSPhones = contactsBookShort;
-                                                contactsBook = contactsMap;
-                                                contactsSyncInProgress = false;
-                                                contactsBookLoaded = true;
-                                                if (first) {
-                                                    contactsLoaded = true;
-                                                }
-                                                if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
-                                                    applyContactsUpdates(delayedContactsUpdate, null, null, null);
-                                                    delayedContactsUpdate.clear();
-                                                }
-                                            }
-                                        });
-                                    }
-                                }
-                            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassCanCompress);
-                        }
-                    } else {
-                        Utilities.stageQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                contactsBookSPhones = contactsBookShort;
-                                contactsBook = contactsMap;
-                                contactsSyncInProgress = false;
-                                contactsBookLoaded = true;
-                                if (first) {
-                                    contactsLoaded = true;
-                                }
-                                if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
-                                    applyContactsUpdates(delayedContactsUpdate, null, null, null);
-                                    delayedContactsUpdate.clear();
-                                }
-                            }
-                        });
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                updateUnregisteredContacts(contacts);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
-                            }
-                        });
-                    }
-                } else {
-                    Utilities.stageQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            contactsBookSPhones = contactsBookShort;
-                            contactsBook = contactsMap;
-                            contactsSyncInProgress = false;
-                            contactsBookLoaded = true;
-                            if (first) {
-                                contactsLoaded = true;
-                            }
-                            if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
-                                applyContactsUpdates(delayedContactsUpdate, null, null, null);
-                                delayedContactsUpdate.clear();
-                            }
-                        }
-                    });
-                    if (!contactsMap.isEmpty()) {
-                    }
-                }
-            }
-        });
-    }
-
     public boolean isLoadingContacts() {
         synchronized (loadContactsSync) {
             return loadingContacts;
@@ -813,673 +257,6 @@ public boolean isLoadingContacts() {
 
 
 
-    private void reloadContactsStatusesMaybe() {
-        try {
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-            long lastReloadStatusTime = preferences.getLong("lastReloadStatusTime", 0);
-            if (lastReloadStatusTime < System.currentTimeMillis() - 1000 * 60 * 60 * 24) {
-                reloadContactsStatuses();
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void saveContactsLoadTime() {
-        try {
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-            preferences.edit().putLong("lastReloadStatusTime", System.currentTimeMillis()).commit();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void updateUnregisteredContacts(final ArrayList<TLRPC.TL_contact> contactsArr) {
-        final HashMap<String, TLRPC.TL_contact> contactsPhonesShort = new HashMap<>();
-
-        for (TLRPC.TL_contact value : contactsArr) {
-            TLRPC.User user = MessagesController.getInstance().getUser(value.user_id);
-            if (user == null || user.phone == null || user.phone.length() == 0) {
-                continue;
-            }
-            contactsPhonesShort.put(user.phone, value);
-        }
-
-        final ArrayList<Contact> sortedPhoneBookContacts = new ArrayList<>();
-        for (HashMap.Entry<Integer, Contact> pair : contactsBook.entrySet()) {
-            Contact value = pair.getValue();
-            int id = pair.getKey();
-
-            boolean skip = false;
-            for (int a = 0; a < value.phones.size(); a++) {
-                String sphone = value.shortPhones.get(a);
-                if (contactsPhonesShort.containsKey(sphone) || value.phoneDeleted.get(a) == 1) {
-                    skip = true;
-                    break;
-                }
-            }
-            if (skip) {
-                continue;
-            }
-
-            sortedPhoneBookContacts.add(value);
-        }
-        Collections.sort(sortedPhoneBookContacts, new Comparator<Contact>() {
-            @Override
-            public int compare(Contact contact, Contact contact2) {
-                String toComapre1 = contact.first_name;
-                if (toComapre1.length() == 0) {
-                    toComapre1 = contact.last_name;
-                }
-                String toComapre2 = contact2.first_name;
-                if (toComapre2.length() == 0) {
-                    toComapre2 = contact2.last_name;
-                }
-                return toComapre1.compareTo(toComapre2);
-            }
-        });
-
-        phoneBookContacts = sortedPhoneBookContacts;
-    }
-
-    private void buildContactsSectionsArrays(boolean sort) {
-        if (sort) {
-            Collections.sort(contacts, new Comparator<TLRPC.TL_contact>() {
-                @Override
-                public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
-                    TLRPC.User user1 = MessagesController.getInstance().getUser(tl_contact.user_id);
-                    TLRPC.User user2 = MessagesController.getInstance().getUser(tl_contact2.user_id);
-                    String name1 = user1.first_name;
-                    if (name1 == null || name1.length() == 0) {
-                        name1 = user1.last_name;
-                    }
-                    String name2 = user2.first_name;
-                    if (name2 == null || name2.length() == 0) {
-                        name2 = user2.last_name;
-                    }
-                    return name1.compareTo(name2);
-                }
-            });
-        }
-
-        StringBuilder ids = new StringBuilder();
-        final HashMap<String, ArrayList<TLRPC.TL_contact>> sectionsDict = new HashMap<>();
-        final ArrayList<String> sortedSectionsArray = new ArrayList<>();
-
-        for (TLRPC.TL_contact value : contacts) {
-            TLRPC.User user = MessagesController.getInstance().getUser(value.user_id);
-            if (user == null) {
-                continue;
-            }
-
-            String key = user.first_name;
-            if (key == null || key.length() == 0) {
-                key = user.last_name;
-            }
-            if (key.length() > 1) {
-                key = key.substring(0, 1);
-            }
-            if (key.length() == 0) {
-                key = "#";
-            } else {
-                key = key.toUpperCase();
-            }
-            String replace = sectionsToReplace.get(key);
-            if (replace != null) {
-                key = replace;
-            }
-            ArrayList<TLRPC.TL_contact> arr = sectionsDict.get(key);
-            if (arr == null) {
-                arr = new ArrayList<>();
-                sectionsDict.put(key, arr);
-                sortedSectionsArray.add(key);
-            }
-            arr.add(value);
-            if (ids.length() != 0) {
-                ids.append(",");
-            }
-            ids.append(value.user_id);
-        }
-        UserConfig.contactsHash = Utilities.MD5(ids.toString());
-        UserConfig.saveConfig(false);
-
-        Collections.sort(sortedSectionsArray, new Comparator<String>() {
-            @Override
-            public int compare(String s, String s2) {
-                char cv1 = s.charAt(0);
-                char cv2 = s2.charAt(0);
-                if (cv1 == '#') {
-                    return 1;
-                } else if (cv2 == '#') {
-                    return -1;
-                }
-                return s.compareTo(s2);
-            }
-        });
-
-        usersSectionsDict = sectionsDict;
-        sortedUsersSectionsArray = sortedSectionsArray;
-    }
-
-    private void performWriteContactsToPhoneBookInternal(ArrayList<TLRPC.TL_contact> contactsArray) {
-        try {
-            Uri rawContactUri = ContactsContract.RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME, currentAccount.name).appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE, currentAccount.type).build();
-            Cursor c1 = ApplicationLoader.applicationContext.getContentResolver().query(rawContactUri, new String[]{BaseColumns._ID, ContactsContract.RawContacts.SYNC2}, null, null, null);
-            HashMap<Integer, Long> bookContacts = new HashMap<>();
-            if (c1 != null) {
-                while (c1.moveToNext()) {
-                    bookContacts.put(c1.getInt(1), c1.getLong(0));
-                }
-                c1.close();
-
-                for (TLRPC.TL_contact u : contactsArray) {
-                    if (!bookContacts.containsKey(u.user_id)) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(u.user_id);
-                        addContactToPhoneBook(user, false);
-                    }
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void performWriteContactsToPhoneBook() {
-        final ArrayList<TLRPC.TL_contact> contactsArray = new ArrayList<>();
-        contactsArray.addAll(contacts);
-        Utilities.phoneBookQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                performWriteContactsToPhoneBookInternal(contactsArray);
-            }
-        });
-    }
-
-    private void applyContactsUpdates(ArrayList<Integer> ids, ConcurrentHashMap<Integer, TLRPC.User> userDict, ArrayList<TLRPC.TL_contact> newC, ArrayList<Integer> contactsTD) {
-        if (newC == null || contactsTD == null) {
-            newC = new ArrayList<>();
-            contactsTD = new ArrayList<>();
-            for (Integer uid : ids) {
-                if (uid > 0) {
-                    TLRPC.TL_contact contact = new TLRPC.TL_contact();
-                    contact.user_id = uid;
-                    newC.add(contact);
-                } else if (uid < 0) {
-                    contactsTD.add(-uid);
-                }
-            }
-        }
-        FileLog.e("tmessages", "process update - contacts add = " + newC.size() + " delete = " + contactsTD.size());
-
-        StringBuilder toAdd = new StringBuilder();
-        StringBuilder toDelete = new StringBuilder();
-        boolean reloadContacts = false;
-
-        for (TLRPC.TL_contact newContact : newC) {
-            TLRPC.User user = null;
-            if (userDict != null) {
-                user = userDict.get(newContact.user_id);
-            }
-            if (user == null) {
-                user = MessagesController.getInstance().getUser(newContact.user_id);
-            } else {
-                MessagesController.getInstance().putUser(user, true);
-            }
-            if (user == null || user.phone == null || user.phone.length() == 0) {
-                reloadContacts = true;
-                continue;
-            }
-
-            Contact contact = contactsBookSPhones.get(user.phone);
-            if (contact != null) {
-                int index = contact.shortPhones.indexOf(user.phone);
-                if (index != -1) {
-                    contact.phoneDeleted.set(index, 0);
-                }
-            }
-            if (toAdd.length() != 0) {
-                toAdd.append(",");
-            }
-            toAdd.append(user.phone);
-        }
-
-        for (final Integer uid : contactsTD) {
-            Utilities.phoneBookQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    deleteContactFromPhoneBook(uid);
-                }
-            });
-
-            TLRPC.User user = null;
-            if (userDict != null) {
-                user = userDict.get(uid);
-            }
-            if (user == null) {
-                user = MessagesController.getInstance().getUser(uid);
-            } else {
-                MessagesController.getInstance().putUser(user, true);
-            }
-            if (user == null) {
-                reloadContacts = true;
-                continue;
-            }
-
-            if (user.phone != null && user.phone.length() > 0) {
-                Contact contact = contactsBookSPhones.get(user.phone);
-                if (contact != null) {
-                    int index = contact.shortPhones.indexOf(user.phone);
-                    if (index != -1) {
-                        contact.phoneDeleted.set(index, 1);
-                    }
-                }
-                if (toDelete.length() != 0) {
-                    toDelete.append(",");
-                }
-                toDelete.append(user.phone);
-            }
-        }
-
-        if (toAdd.length() != 0 || toDelete.length() != 0) {
-        }
-
-    }
-
-    public void processContactsUpdates(ArrayList<Integer> ids, ConcurrentHashMap<Integer, TLRPC.User> userDict) {
-        final ArrayList<TLRPC.TL_contact> newContacts = new ArrayList<>();
-        final ArrayList<Integer> contactsToDelete = new ArrayList<>();
-        for (Integer uid : ids) {
-            if (uid > 0) {
-                TLRPC.TL_contact contact = new TLRPC.TL_contact();
-                contact.user_id = uid;
-                newContacts.add(contact);
-                if (!delayedContactsUpdate.isEmpty()) {
-                    int idx = delayedContactsUpdate.indexOf(-uid);
-                    if (idx != -1) {
-                        delayedContactsUpdate.remove(idx);
-                    }
-                }
-            } else if (uid < 0) {
-                contactsToDelete.add(-uid);
-                if (!delayedContactsUpdate.isEmpty()) {
-                    int idx = delayedContactsUpdate.indexOf(-uid);
-                    if (idx != -1) {
-                        delayedContactsUpdate.remove(idx);
-                    }
-                }
-            }
-        }
-
-        if (!contactsLoaded || !contactsBookLoaded) {
-            delayedContactsUpdate.addAll(ids);
-            FileLog.e("tmessages", "delay update - contacts add = " + newContacts.size() + " delete = " + contactsToDelete.size());
-        } else {
-            applyContactsUpdates(ids, userDict, newContacts, contactsToDelete);
-        }
-    }
-
-    public long addContactToPhoneBook(TLRPC.User user, boolean check) {
-        if (currentAccount == null || user == null || user.phone == null || user.phone.length() == 0) {
-            return -1;
-        }
-        long res = -1;
-        synchronized (observerLock) {
-            ignoreChanges = true;
-        }
-        ContentResolver contentResolver = ApplicationLoader.applicationContext.getContentResolver();
-        if (check) {
-            try {
-                Uri rawContactUri = ContactsContract.RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.CALLER_IS_SYNCADAPTER, "true").appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME, currentAccount.name).appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE, currentAccount.type).build();
-                int value = contentResolver.delete(rawContactUri, ContactsContract.RawContacts.SYNC2 + " = " + user.id, null);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        ArrayList<ContentProviderOperation> query = new ArrayList<>();
-
-        ContentProviderOperation.Builder builder = ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI);
-        builder.withValue(ContactsContract.RawContacts.ACCOUNT_NAME, currentAccount.name);
-        builder.withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, currentAccount.type);
-        builder.withValue(ContactsContract.RawContacts.SYNC1, user.phone);
-        builder.withValue(ContactsContract.RawContacts.SYNC2, user.id);
-        query.add(builder.build());
-
-        builder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI);
-        builder.withValueBackReference(ContactsContract.CommonDataKinds.StructuredName.RAW_CONTACT_ID, 0);
-        builder.withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);
-        builder.withValue(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, user.first_name);
-        builder.withValue(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, user.last_name);
-        query.add(builder.build());
-
-//        builder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI);
-//        builder.withValueBackReference(ContactsContract.CommonDataKinds.StructuredName.RAW_CONTACT_ID, 0);
-//        builder.withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);
-//        builder.withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, "+" + user.phone);
-//        builder.withValue(ContactsContract.CommonDataKinds.Phone.TYPE, ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE);
-//        query.add(builder.build());
-
-        builder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI);
-        builder.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0);
-        builder.withValue(ContactsContract.Data.MIMETYPE, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
-        builder.withValue(ContactsContract.Data.DATA1, user.id);
-        builder.withValue(ContactsContract.Data.DATA2, "Telegram Profile");
-        builder.withValue(ContactsContract.Data.DATA3, "+" + user.phone);
-        builder.withValue(ContactsContract.Data.DATA4, user.id);
-        query.add(builder.build());
-        try {
-            ContentProviderResult[] result = contentResolver.applyBatch(ContactsContract.AUTHORITY, query);
-            res = Long.parseLong(result[0].uri.getLastPathSegment());
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        synchronized (observerLock) {
-            ignoreChanges = false;
-        }
-        return res;
-    }
-
-    private void deleteContactFromPhoneBook(int uid) {
-        ContentResolver contentResolver = ApplicationLoader.applicationContext.getContentResolver();
-        synchronized (observerLock) {
-            ignoreChanges = true;
-        }
-        try {
-            Uri rawContactUri = ContactsContract.RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.CALLER_IS_SYNCADAPTER, "true").appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME, currentAccount.name).appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE, currentAccount.type).build();
-            int value = contentResolver.delete(rawContactUri, ContactsContract.RawContacts.SYNC2 + " = " + uid, null);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        synchronized (observerLock) {
-            ignoreChanges = false;
-        }
-    }
-
-    protected void markAsContacted(final String contactId) {
-        if (contactId == null) {
-            return;
-        }
-        Utilities.phoneBookQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                Uri uri = Uri.parse(contactId);
-                ContentValues values = new ContentValues();
-                values.put(ContactsContract.Contacts.LAST_TIME_CONTACTED, System.currentTimeMillis());
-                ContentResolver cr = ApplicationLoader.applicationContext.getContentResolver();
-                cr.update(uri, values, null, null);
-            }
-        });
-    }
-
-    public void addContact(TLRPC.User user) {
-        if (user == null || user.phone == null) {
-            return;
-        }
-
-        TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
-        ArrayList<TLRPC.TL_inputPhoneContact> contactsParams = new ArrayList<>();
-        TLRPC.TL_inputPhoneContact c = new TLRPC.TL_inputPhoneContact();
-        c.phone = user.phone;
-        if (!c.phone.startsWith("+")) {
-            c.phone = "+" + c.phone;
-        }
-        c.first_name = user.first_name;
-        c.last_name = user.last_name;
-        c.client_id = 0;
-        contactsParams.add(c);
-        req.contacts = contactsParams;
-        req.replace = false;
-//        if (BuildVars.DEBUG_VERSION) {
-//            FileLog.e("tmessages", "add contact " + user.first_name + " " + user.last_name + " " + user.phone);
-//        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    return;
-                }
-                final TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
-
-//                if (BuildVars.DEBUG_VERSION) {
-//                    for (TLRPC.User user : res.users) {
-//                        FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
-//                    }
-//                }
-
-                for (final TLRPC.User u : res.users) {
-                    Utilities.phoneBookQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            addContactToPhoneBook(u, true);
-                        }
-                    });
-                    TLRPC.TL_contact newContact = new TLRPC.TL_contact();
-                    newContact.user_id = u.id;
-                    ArrayList<TLRPC.TL_contact> arrayList = new ArrayList<>();
-                    arrayList.add(newContact);
-
-                    if (u.phone != null && u.phone.length() > 0) {
-                        CharSequence name = formatName(u.first_name, u.last_name);
-                        Contact contact = contactsBookSPhones.get(u.phone);
-                        if (contact != null) {
-                            int index = contact.shortPhones.indexOf(u.phone);
-                            if (index != -1) {
-                                contact.phoneDeleted.set(index, 0);
-                            }
-                        }
-                    }
-                }
-
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        for (TLRPC.User u : res.users) {
-                            MessagesController.getInstance().putUser(u, false);
-                            if (contactsDict.get(u.id) == null) {
-                                TLRPC.TL_contact newContact = new TLRPC.TL_contact();
-                                newContact.user_id = u.id;
-                                contacts.add(newContact);
-                                contactsDict.put(newContact.user_id, newContact);
-                            }
-                        }
-                        buildContactsSectionsArrays(true);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassCanCompress);
-    }
-
-    public void deleteContact(final ArrayList<TLRPC.User> users) {
-        if (users == null || users.isEmpty()) {
-            return;
-        }
-        TLRPC.TL_contacts_deleteContacts req = new TLRPC.TL_contacts_deleteContacts();
-        final ArrayList<Integer> uids = new ArrayList<>();
-        for (TLRPC.User user : users) {
-            TLRPC.InputUser inputUser = MessagesController.getInputUser(user);
-            if (inputUser == null) {
-                continue;
-            }
-            uids.add(user.id);
-            req.id.add(inputUser);
-        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    return;
-                }
-                Utilities.phoneBookQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        for (TLRPC.User user : users) {
-                            deleteContactFromPhoneBook(user.id);
-                        }
-                    }
-                });
-
-                for (TLRPC.User user : users) {
-                    if (user.phone != null && user.phone.length() > 0) {
-                        CharSequence name = ContactsController.formatName(user.first_name, user.last_name);
-                        Contact contact = contactsBookSPhones.get(user.phone);
-                        if (contact != null) {
-                            int index = contact.shortPhones.indexOf(user.phone);
-                            if (index != -1) {
-                                contact.phoneDeleted.set(index, 1);
-                            }
-                        }
-                    }
-                }
-
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        boolean remove = false;
-                        for (TLRPC.User user : users) {
-                            TLRPC.TL_contact contact = contactsDict.get(user.id);
-                            if (contact != null) {
-                                remove = true;
-                                contacts.remove(contact);
-                                contactsDict.remove(user.id);
-                            }
-                        }
-                        if (remove) {
-                            buildContactsSectionsArrays(false);
-                        }
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric);
-    }
-
-    public void reloadContactsStatuses() {
-        saveContactsLoadTime();
-        MessagesController.getInstance().clearFullUsers();
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        final SharedPreferences.Editor editor = preferences.edit();
-        editor.putBoolean("needGetStatuses", true).commit();
-        TLRPC.TL_contacts_getStatuses req = new TLRPC.TL_contacts_getStatuses();
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            editor.remove("needGetStatuses").commit();
-                            TLRPC.Vector vector = (TLRPC.Vector) response;
-                            if (!vector.objects.isEmpty()) {
-                                ArrayList<TLRPC.User> dbUsersStatus = new ArrayList<>();
-                                for (Object object : vector.objects) {
-                                    TLRPC.User toDbUser = new TLRPC.User();
-                                    TLRPC.TL_contactStatus status = (TLRPC.TL_contactStatus) object;
-
-                                    if (status == null) {
-                                        continue;
-                                    }
-                                    if (status.status instanceof TLRPC.TL_userStatusRecently) {
-                                        status.status.expires = -100;
-                                    } else if (status.status instanceof TLRPC.TL_userStatusLastWeek) {
-                                        status.status.expires = -101;
-                                    } else if (status.status instanceof TLRPC.TL_userStatusLastMonth) {
-                                        status.status.expires = -102;
-                                    }
-
-                                    TLRPC.User user = MessagesController.getInstance().getUser(status.user_id);
-                                    if (user != null) {
-                                        user.status = status.status;
-                                    }
-                                    toDbUser.status = status.status;
-                                    dbUsersStatus.add(toDbUser);
-                                }
-                            }
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_STATUS);
-                        }
-                    });
-                }
-            }
-        });
-    }
-
-    public void loadPrivacySettings() {
-        if (loadingDeleteInfo == 0) {
-            loadingDeleteInfo = 1;
-            TLRPC.TL_account_getAccountTTL req = new TLRPC.TL_account_getAccountTTL();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (error == null) {
-                                TLRPC.TL_accountDaysTTL ttl = (TLRPC.TL_accountDaysTTL) response;
-                                deleteAccountTTL = ttl.days;
-                                loadingDeleteInfo = 2;
-                            } else {
-                                loadingDeleteInfo = 0;
-                            }
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
-                        }
-                    });
-                }
-            });
-        }
-        if (loadingLastSeenInfo == 0) {
-            loadingLastSeenInfo = 1;
-            TLRPC.TL_account_getPrivacy req = new TLRPC.TL_account_getPrivacy();
-            req.key = new TLRPC.TL_inputPrivacyKeyStatusTimestamp();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (error == null) {
-                                TLRPC.TL_account_privacyRules rules = (TLRPC.TL_account_privacyRules) response;
-                                MessagesController.getInstance().putUsers(rules.users, false);
-                                privacyRules = rules.rules;
-                                loadingLastSeenInfo = 2;
-                            } else {
-                                loadingLastSeenInfo = 0;
-                            }
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
-                        }
-                    });
-                }
-            });
-        }
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
-    }
-
-    public void setDeleteAccountTTL(int ttl) {
-        deleteAccountTTL = ttl;
-    }
-
-    public int getDeleteAccountTTL() {
-        return deleteAccountTTL;
-    }
-
-    public boolean getLoadingDeleteInfo() {
-        return loadingDeleteInfo != 2;
-    }
-
-    public boolean getLoadingLastSeenInfo() {
-        return loadingLastSeenInfo != 2;
-    }
-
-    public ArrayList<TLRPC.PrivacyRule> getPrivacyRules() {
-        return privacyRules;
-    }
-
-    public void setPrivacyRules(ArrayList<TLRPC.PrivacyRule> rules) {
-        privacyRules = rules;
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.privacyRulesUpdated);
-        reloadContactsStatuses();
-    }
-
     public static String formatName(String firstName, String lastName) {
         /*if ((firstName == null || firstName.length() == 0) && (lastName == null || lastName.length() == 0)) {
             return LocaleController.getString("HiddenName", R.string.HiddenName);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
index cf89fe20f..0f9133d08 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
@@ -792,42 +792,7 @@ public static String stringForMessageListDate(long date) {
         return "LOC_ERR";
     }
 
-    public static String formatUserStatus(TLRPC.User user) {
-        if (user != null && user.status != null && user.status.expires == 0) {
-            if (user.status instanceof TLRPC.TL_userStatusRecently) {
-                user.status.expires = -100;
-            } else if (user.status instanceof TLRPC.TL_userStatusLastWeek) {
-                user.status.expires = -101;
-            } else if (user.status instanceof TLRPC.TL_userStatusLastMonth) {
-                user.status.expires = -102;
-            }
-        }
-        if (user != null && user.status != null && user.status.expires <= 0) {
-            if (MessagesController.getInstance().onlinePrivacy.containsKey(user.id)) {
-                return getString("Online", R.string.Online);
-            }
-        }
-        if (user == null || user.status == null || user.status.expires == 0 || user instanceof TLRPC.TL_userDeleted || user instanceof TLRPC.TL_userEmpty) {
-            return getString("ALongTimeAgo", R.string.ALongTimeAgo);
-        } else {
-            int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-            if (user.status.expires > currentTime) {
-                return getString("Online", R.string.Online);
-            } else {
-                if (user.status.expires == -1) {
-                    return getString("Invisible", R.string.Invisible);
-                } else if (user.status.expires == -100) {
-                    return getString("Lately", R.string.Lately);
-                } else if (user.status.expires == -101) {
-                    return getString("WithinAWeek", R.string.WithinAWeek);
-                } else if (user.status.expires == -102) {
-                    return getString("WithinAMonth", R.string.WithinAMonth);
-                }  else {
-                    return formatDateOnline(user.status.expires);
-                }
-            }
-        }
-    }
+
 
     public String getTranslitString(String src) {
         if (translitChars == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index a62101c6c..387ec76d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -86,243 +86,6 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             replyMessageObject = new MessageObject(message.replyMessage, users, false);
         }
 
-        if (message instanceof TLRPC.TL_messageService) {
-            if (message.action != null) {
-                TLRPC.User fromUser = null;
-                if (users != null) {
-                    fromUser = users.get(message.from_id);
-                }
-                if (fromUser == null) {
-                    fromUser = MessagesController.getInstance().getUser(message.from_id);
-                }
-                if (message.action instanceof TLRPC.TL_messageActionChatCreate) {
-                    if (isOut()) {
-                        messageText = LocaleController.getString("ActionYouCreateGroup", R.string.ActionYouCreateGroup);
-                    } else {
-                        if (fromUser != null) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup), "un1", fromUser);
-                        } else {
-                            messageText = LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup).replace("un1", "");
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
-                    if (message.action.user_id == message.from_id) {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("ActionYouLeftUser", R.string.ActionYouLeftUser);
-                        } else {
-                            if (fromUser != null) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser), "un1", fromUser);
-                            } else {
-                                messageText = LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser).replace("un1", "");
-                            }
-                        }
-                    } else {
-                        TLRPC.User whoUser = null;
-                        if (users != null) {
-                            whoUser = users.get(message.action.user_id);
-                        }
-                        if (whoUser == null) {
-                            whoUser = MessagesController.getInstance().getUser(message.action.user_id);
-                        }
-                        if (whoUser != null && fromUser != null) {
-                            if (isOut()) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser), "un2", whoUser);
-                            } else {
-                                messageText = replaceWithLink(LocaleController.getString("ActionKickUser", R.string.ActionKickUser), "un2", whoUser);
-                                messageText = replaceWithLink(messageText, "un1", fromUser);
-                            }
-                        } else {
-                            messageText = LocaleController.getString("ActionKickUser", R.string.ActionKickUser).replace("un2", "").replace("un1", "");
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatAddUser) {
-                    TLRPC.User whoUser = null;
-                    if (users != null) {
-                        whoUser = users.get(message.action.user_id);
-                    }
-                    if (whoUser == null) {
-                        whoUser = MessagesController.getInstance().getUser(message.action.user_id);
-                    }
-                    if (whoUser != null && fromUser != null) {
-                        if (whoUser.id == fromUser.id) {
-                            if (isOut()) {
-                                messageText = LocaleController.getString("ActionAddUserSelfYou", R.string.ActionAddUserSelfYou);
-                            } else {
-                                messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelf", R.string.ActionAddUserSelf), "un1", fromUser);
-                            }
-                        } else {
-                            if (isOut()) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", whoUser);
-                            }else {
-                                messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", whoUser);
-                                messageText = replaceWithLink(messageText, "un1", fromUser);
-                            }
-                        }
-                    } else {
-                        messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", "").replace("un1", "");
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatJoinedByLink) {
-                    if (fromUser != null) {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("ActionInviteYou", R.string.ActionInviteYou);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionInviteUser", R.string.ActionInviteUser), "un1", fromUser);
-                        }
-                    } else {
-                        messageText = LocaleController.getString("ActionInviteUser", R.string.ActionInviteUser).replace("un1", "");
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
-                    if (isOut()) {
-                        messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
-                    } else {
-                        if (fromUser != null) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto), "un1", fromUser);
-                        } else {
-                            messageText = LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto).replace("un1", "");
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatEditTitle) {
-                    if (isOut()) {
-                        messageText = LocaleController.getString("ActionYouChangedTitle", R.string.ActionYouChangedTitle).replace("un2", message.action.title);
-                    } else {
-                        if (fromUser != null) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un2", message.action.title), "un1", fromUser);
-                        } else {
-                            messageText = LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un1", "").replace("un2", message.action.title);
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
-                    if (isOut()) {
-                        messageText = LocaleController.getString("ActionYouRemovedPhoto", R.string.ActionYouRemovedPhoto);
-                    } else {
-                        if (fromUser != null) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto), "un1", fromUser);
-                        } else {
-                            messageText = LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto).replace("un1", "");
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionTTLChange) {
-                    if (message.action.ttl != 0) {
-                        if (isOut()) {
-                            messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(message.action.ttl));
-                        } else {
-                            if (fromUser != null) {
-                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, fromUser.first_name, AndroidUtilities.formatTTLString(message.action.ttl));
-                            } else {
-                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(message.action.ttl));
-                            }
-                        }
-                    } else {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
-                        } else {
-                            if (fromUser != null) {
-                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, fromUser.first_name);
-                            } else {
-                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
-                            }
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                    String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long) message.date) * 1000), LocaleController.formatterDay.format(((long) message.date) * 1000));
-                    TLRPC.User to_user = null;
-                    if (to_user == null) {
-                        if (users != null) {
-                            to_user = users.get(messageOwner.to_id.user_id);
-                        }
-                        if (to_user == null) {
-                            to_user = MessagesController.getInstance().getUser(messageOwner.to_id.user_id);
-                        }
-                    }
-                    String name = "";
-                    if (to_user != null) {
-                        name = to_user.first_name;
-                    }
-                    messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, name, date, message.action.title, message.action.address);
-                } else if (message.action instanceof TLRPC.TL_messageActionUserJoined) {
-                    if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
-                    } else {
-                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, "");
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                    if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
-                    } else {
-                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, "");
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
-                    if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
-                        if (isOut()) {
-                            messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
-                        } else {
-                            if (fromUser != null) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
-                            } else {
-                                messageText = LocaleController.formatString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot).replace("un1", "");
-                            }
-                        }
-                    } else if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) message.action.encryptedAction;
-                        if (action.ttl_seconds != 0) {
-                            if (isOut()) {
-                                messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(action.ttl_seconds));
-                            } else {
-                                if (fromUser != null) {
-                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, fromUser.first_name, AndroidUtilities.formatTTLString(action.ttl_seconds));
-                                } else {
-                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(action.ttl_seconds));
-                                }
-                            }
-                        } else {
-                            if (isOut()) {
-                                messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
-                            } else {
-                                if (fromUser != null) {
-                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, fromUser.first_name);
-                                } else {
-                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
-                                }
-                            }
-                        }
-                    }
-                } else if (message.action instanceof TLRPC.TL_messageActionCreatedBroadcastList) {
-                    messageText = LocaleController.formatString("YouCreatedBroadcastList", R.string.YouCreatedBroadcastList);
-                }
-            }
-        } else if (!isMediaEmpty()) {
-            if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                messageText = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
-            } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                messageText = LocaleController.getString("AttachVideo", R.string.AttachVideo);
-            } else if (message.media instanceof TLRPC.TL_messageMediaGeo || message.media instanceof TLRPC.TL_messageMediaVenue) {
-                messageText = LocaleController.getString("AttachLocation", R.string.AttachLocation);
-            } else if (message.media instanceof TLRPC.TL_messageMediaContact) {
-                messageText = LocaleController.getString("AttachContact", R.string.AttachContact);
-            } else if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
-                messageText = LocaleController.getString("UnsuppotedMedia", R.string.UnsuppotedMedia);
-            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                if (isSticker()) {
-                    String sch = getStrickerChar();
-                    if (sch != null && sch.length() > 0) {
-                        messageText = String.format("%s %s", sch, LocaleController.getString("AttachSticker", R.string.AttachSticker));
-                    } else {
-                        messageText = LocaleController.getString("AttachSticker", R.string.AttachSticker);
-                    }
-                } else {
-                    String name = FileLoader.getDocumentFileName(message.media.document);
-                    if (name != null && name.length() > 0) {
-                        messageText = name;
-                    } else {
-                        messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
-                    }
-                }
-            } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-                messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
-            }
-        } else {
-            messageText = message.message;
-        }
         messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
 
         if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded_old2) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 1b457c2d5..c449234a7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -9,74 +9,17 @@
 package org.telegram.android;
 
 import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.DialogInterface;
 import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.Base64;
-import android.util.SparseArray;
 
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.SerializedData;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.BaseFragment;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.concurrent.ConcurrentHashMap;
-
 public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
 
-    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
-    private ConcurrentHashMap<String, TLRPC.User> usersByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
-
-    private HashMap<Integer, TLRPC.ExportedChatInvite> exportedChats = new HashMap<>();
-
-    public ArrayList<TLRPC.TL_dialog> dialogs = new ArrayList<>();
-    public ArrayList<TLRPC.TL_dialog> dialogsServerOnly = new ArrayList<>();
-    public ConcurrentHashMap<Long, TLRPC.TL_dialog> dialogs_dict = new ConcurrentHashMap<>(100, 1.0f, 2);
-    public HashMap<Integer, MessageObject> dialogMessage = new HashMap<>();
-    public ConcurrentHashMap<Long, ArrayList<PrintingUser>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
-    public HashMap<Long, CharSequence> printingStrings = new HashMap<>();
-    public HashMap<Long, Integer> printingStringsTypes = new HashMap<>();
-    public HashMap<Integer, HashMap<Long, Boolean>> sendingTypings = new HashMap<>();
-    public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
-    private int lastPrintingStringCount = 0;
-
-    public boolean loadingBlockedUsers = false;
-    public ArrayList<Integer> blockedUsers = new ArrayList<>();
 
-    private ArrayList<TLRPC.Updates> updatesQueueSeq = new ArrayList<>();
-    private ArrayList<TLRPC.Updates> updatesQueuePts = new ArrayList<>();
-    private ArrayList<TLRPC.Updates> updatesQueueQts = new ArrayList<>();
-    private long updatesStartWaitTimeSeq = 0;
-    private long updatesStartWaitTimePts = 0;
-    private long updatesStartWaitTimeQts = 0;
-    private ArrayList<Integer> loadingFullUsers = new ArrayList<>();
-    private ArrayList<Integer> loadedFullUsers = new ArrayList<>();
-    private ArrayList<Integer> loadingFullChats = new ArrayList<>();
-    private ArrayList<Integer> loadedFullChats = new ArrayList<>();
-
-    private ArrayList<Integer> reloadingMessages = new ArrayList<>();
-
-    private boolean gettingNewDeleteTask = false;
-    private int currentDeletingTaskTime = 0;
-    private ArrayList<Integer> currentDeletingTaskMids = null;
     private Runnable currentDeleteTaskRunnable = null;
 
     public int totalDialogsCount = 0;
@@ -88,26 +31,12 @@
     public boolean firstGettingTask = false;
     public boolean registeringForPush = false;
 
-    private long lastStatusUpdateTime = 0;
-    private long statusRequest = 0;
-    private int statusSettingState = 0;
-    private boolean offlineSent = false;
-    private String uploadingAvatar = null;
 
-    public boolean enableJoined = true;
     public int fontSize = AndroidUtilities.dp(16);
     public int maxGroupCount = 200;
     public int maxBroadcastCount = 100;
     public int groupBigSize;
-    private ArrayList<TLRPC.TL_disabledFeature> disabledFeatures = new ArrayList<>();
-
-    private class UserActionUpdatesSeq extends TLRPC.Updates {
-
-    }
-
-    private class UserActionUpdatesPts extends TLRPC.Updates {
 
-    }
 
     public static final int UPDATE_MASK_NAME = 1;
     public static final int UPDATE_MASK_AVATAR = 2;
@@ -124,11 +53,6 @@
     public static final int UPDATE_MASK_SEND_STATE = 4096;
     public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
 
-    public static class PrintingUser {
-        public long lastTime;
-        public int userId;
-        public TLRPC.SendMessageAction action;
-    }
 
     private static volatile MessagesController Instance = null;
 
@@ -153,9 +77,7 @@ public MessagesController() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
-        addSupportUser();
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        enableJoined = preferences.getBoolean("EnableContactJoined", true);
 
         preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         maxGroupCount = preferences.getInt("maxGroupCount", 200);
@@ -163,196 +85,24 @@ public MessagesController() {
         groupBigSize = preferences.getInt("groupBigSize", 10);
         fontSize = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
         String disabledFeaturesString = preferences.getString("disabledFeatures", null);
-        if (disabledFeaturesString != null && disabledFeaturesString.length() != 0) {
-            try {
-                byte[] bytes = Base64.decode(disabledFeaturesString, Base64.DEFAULT);
-                if (bytes != null) {
-                    SerializedData data = new SerializedData(bytes);
-                    int count = data.readInt32(false);
-                    for (int a = 0; a < count; a++) {
-                        TLRPC.TL_disabledFeature feature = TLRPC.TL_disabledFeature.TLdeserialize(data, data.readInt32(false), false);
-                        if (feature != null && feature.feature != null && feature.description != null) {
-                            disabledFeatures.add(feature);
-                        }
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
     }
 
-    public void updateConfig(final TLRPC.TL_config config) {
-        AndroidUtilities.runOnUIThread(new Runnable() { //TODO use new config params
-            @Override
-            public void run() {
-                maxBroadcastCount = config.broadcast_size_max;
-                maxGroupCount = config.chat_size_max;
-                groupBigSize = config.chat_big_size;
-                disabledFeatures = config.disabled_features;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences.edit();
-                editor.putInt("maxGroupCount", maxGroupCount);
-                editor.putInt("maxBroadcastCount", maxBroadcastCount);
-                editor.putInt("groupBigSize", groupBigSize);
-                try {
-                    SerializedData data = new SerializedData();
-                    data.writeInt32(disabledFeatures.size());
-                    for (TLRPC.TL_disabledFeature disabledFeature : disabledFeatures) {
-                        disabledFeature.serializeToStream(data);
-                    }
-                    String string = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
-                    if (string.length() != 0) {
-                        editor.putString("disabledFeatures", string);
-                    }
-                } catch (Exception e) {
-                    editor.remove("disabledFeatures");
-                    FileLog.e("tmessages", e);
-                }
-                editor.commit();
-            }
-        });
+    public void updateConfig(final String config) {
     }
 
     public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
-        if (feature == null || feature.length() == 0 || getInstance().disabledFeatures.isEmpty() || fragment == null) {
-            return true;
-        }
-        for (TLRPC.TL_disabledFeature disabledFeature : getInstance().disabledFeatures) {
-            if (disabledFeature.feature.equals(feature)) {
-                if (fragment.getParentActivity() != null) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getParentActivity());
-                    builder.setTitle("Oops!");
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                    builder.setMessage(disabledFeature.description);
-                    fragment.showDialog(builder.create());
-                }
-                return false;
-            }
-        }
         return true;
     }
 
-    public void addSupportUser() {
-        TLRPC.TL_userForeign user = new TLRPC.TL_userForeign();
-        user.phone = "333";
-        user.id = 333000;
-        user.first_name = "Telegram";
-        user.last_name = "";
-        user.status = null;
-        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
-        putUser(user, true);
-
-        user = new TLRPC.TL_userForeign();
-        user.phone = "42777";
-        user.id = 777000;
-        user.first_name = "Telegram";
-        user.last_name = "Notifications";
-        user.status = null;
-        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
-        putUser(user, true);
-    }
-
-    public static TLRPC.InputUser getInputUser(TLRPC.User user) {
-        if (user == null) {
-            return null;
-        }
-        TLRPC.InputUser inputUser;
-        if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-            inputUser = new TLRPC.TL_inputUserForeign();
-            inputUser.user_id = user.id;
-            inputUser.access_hash = user.access_hash;
-        } else {
-            inputUser = new TLRPC.TL_inputUserContact();
-            inputUser.user_id = user.id;
-        }
-        return inputUser;
-    }
 
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidUpload) {
             final String location = (String) args[0];
-            final TLRPC.InputFile file = (TLRPC.InputFile) args[1];
 
-            if (uploadingAvatar != null && uploadingAvatar.equals(location)) {
-                TLRPC.TL_photos_uploadProfilePhoto req = new TLRPC.TL_photos_uploadProfilePhoto();
-                req.caption = "";
-                req.crop = new TLRPC.TL_inputPhotoCropAuto();
-                req.file = file;
-                req.geo_point = new TLRPC.TL_inputGeoPointEmpty();
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        if (error == null) {
-                            TLRPC.User user = getUser(UserConfig.getClientUserId());
-                            if (user == null) {
-                                putUser(user, true);
-                            } else {
-//                                UserConfig.setCurrentUser(user);
-                                UserConfig.setCurrentUser(null);
-                            }
-                            if (user == null) {
-                                return;
-                            }
-                            TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo) response;
-                            ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
-                            TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100);
-                            TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000);
-                            user.photo = new TLRPC.TL_userProfilePhoto();
-                            user.photo.photo_id = photo.photo.id;
-                            if (smallSize != null) {
-                                user.photo.photo_small = smallSize.location;
-                            }
-                            if (bigSize != null) {
-                                user.photo.photo_big = bigSize.location;
-                            } else if (smallSize != null) {
-                                user.photo.photo_small = smallSize.location;
-                            }
-                            ArrayList<TLRPC.User> users = new ArrayList<>();
-                            users.add(user);
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_AVATAR);
-                                    UserConfig.saveConfig(true);
-                                }
-                            });
-                        }
-                    }
-                });
-            }
         } else if (id == NotificationCenter.FileDidFailUpload) {
-            final String location = (String) args[0];
-            if (uploadingAvatar != null && uploadingAvatar.equals(location)) {
-                uploadingAvatar = null;
-            }
-        } else if (id == NotificationCenter.messageReceivedByServer) {
-            Integer msgId = (Integer) args[0];
-            MessageObject obj = dialogMessage.get(msgId);
-            if (obj != null) {
-                Integer newMsgId = (Integer) args[1];
-                dialogMessage.remove(msgId);
-                dialogMessage.put(newMsgId, obj);
-                obj.messageOwner.id = newMsgId;
-                obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-
-                long uid;
-                if (obj.messageOwner.to_id.chat_id != 0) {
-                    uid = -obj.messageOwner.to_id.chat_id;
-                } else {
-                    uid = obj.messageOwner.to_id.user_id;
-                }
 
-                TLRPC.TL_dialog dialog = dialogs_dict.get(uid);
-                if (dialog != null) {
-                    if (dialog.top_message == msgId) {
-                        dialog.top_message = newMsgId;
-                    }
-                }
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
         }
     }
 
@@ -361,2807 +111,55 @@ public void cleanUp() {
         MediaController.getInstance().cleanup();
         NotificationsController.getInstance().cleanup();
 
-        dialogs_dict.clear();
-        exportedChats.clear();
-        dialogs.clear();
-        dialogsServerOnly.clear();
-        users.clear();
-        usersByUsernames.clear();
-        chats.clear();
-        dialogMessage.clear();
-        printingUsers.clear();
-        printingStrings.clear();
-        printingStringsTypes.clear();
-        onlinePrivacy.clear();
         totalDialogsCount = 0;
-        lastPrintingStringCount = 0;
-        updatesQueueSeq.clear();
-        updatesQueuePts.clear();
-        updatesQueueQts.clear();
-        blockedUsers.clear();
-        sendingTypings.clear();
-        loadingFullUsers.clear();
-        loadedFullUsers.clear();
-        reloadingMessages.clear();
-        loadingFullChats.clear();
-        loadedFullChats.clear();
-
-        updatesStartWaitTimeSeq = 0;
-        updatesStartWaitTimePts = 0;
-        updatesStartWaitTimeQts = 0;
-        currentDeletingTaskTime = 0;
-        currentDeletingTaskMids = null;
-        gettingNewDeleteTask = false;
         loadingDialogs = false;
         dialogsEndReached = false;
         gettingDifference = false;
         gettingDifferenceAgain = false;
-        loadingBlockedUsers = false;
         firstGettingTask = false;
         updatingState = false;
-        lastStatusUpdateTime = 0;
-        offlineSent = false;
         registeringForPush = false;
-        uploadingAvatar = null;
-        statusRequest = 0;
-        statusSettingState = 0;
 
         if (currentDeleteTaskRunnable != null) {
             Utilities.stageQueue.cancelRunnable(currentDeleteTaskRunnable);
             currentDeleteTaskRunnable = null;
         }
 
-        addSupportUser();
-    }
-
-    public TLRPC.User getUser(Integer id) {
-        return users.get(id);
-    }
-
-    public TLRPC.User getUser(String username) {
-        if (username == null || username.length() == 0) {
-            return null;
-        }
-        return usersByUsernames.get(username.toLowerCase());
-    }
-
-    public ConcurrentHashMap<Integer, TLRPC.User> getUsers() {
-        return users;
-    }
-
-    public TLRPC.Chat getChat(Integer id) {
-        return chats.get(id);
-    }
-
-    public TLRPC.EncryptedChat getEncryptedChat(Integer id) {
-        return encryptedChats.get(id);
-    }
-
-
-    public boolean putUser(TLRPC.User user, boolean fromCache) {
-        if (user == null) {
-            return false;
-        }
-        fromCache = fromCache && user.id / 1000 != 333 && user.id != 777000;
-        TLRPC.User oldUser = users.get(user.id);
-        if (oldUser != null && oldUser.username != null && oldUser.username.length() > 0) {
-            usersByUsernames.remove(oldUser.username);
-        }
-        if (user.username != null && user.username.length() > 0) {
-            usersByUsernames.put(user.username.toLowerCase(), user);
-        }
-        if (!fromCache) {
-            users.put(user.id, user);
-            if (oldUser != null && user.status != null && oldUser.status != null && user.status.expires != oldUser.status.expires) {
-                return true;
-            }
-        } else if (oldUser == null) {
-            users.put(user.id, user);
-        }
-        return false;
-    }
-
-    public void putUsers(ArrayList<TLRPC.User> users, boolean fromCache) {
-        if (users == null || users.isEmpty()) {
-            return;
-        }
-        boolean updateStatus = false;
-        for (TLRPC.User user : users) {
-            if (putUser(user, fromCache)) {
-                updateStatus = true;
-            }
-        }
-        if (updateStatus) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_STATUS);
-                }
-            });
-        }
-    }
-
-    public void putChat(TLRPC.Chat chat, boolean fromCache) {
-        if (chat == null) {
-            return;
-        }
-        if (fromCache) {
-            chats.putIfAbsent(chat.id, chat);
-        } else {
-            chats.put(chat.id, chat);
-        }
-    }
-
-    public void putChats(ArrayList<TLRPC.Chat> chats, boolean fromCache) {
-        if (chats == null || chats.isEmpty()) {
-            return;
-        }
-        for (TLRPC.Chat chat : chats) {
-            putChat(chat, fromCache);
-        }
-    }
-
-    public void putEncryptedChat(TLRPC.EncryptedChat encryptedChat, boolean fromCache) {
-        if (encryptedChat == null) {
-            return;
-        }
-        if (fromCache) {
-            encryptedChats.putIfAbsent(encryptedChat.id, encryptedChat);
-        } else {
-            encryptedChats.put(encryptedChat.id, encryptedChat);
-        }
-    }
-
-    public void putEncryptedChats(ArrayList<TLRPC.EncryptedChat> encryptedChats, boolean fromCache) {
-        if (encryptedChats == null || encryptedChats.isEmpty()) {
-            return;
-        }
-        for (TLRPC.EncryptedChat encryptedChat : encryptedChats) {
-            putEncryptedChat(encryptedChat, fromCache);
-        }
-    }
-
-
-    protected void clearFullUsers() {
-        loadedFullUsers.clear();
-        loadedFullChats.clear();
-    }
-
-    public void loadFullChat(final int chat_id, final int classGuid) {
-        loadFullChat(chat_id, classGuid, false);
-    }
-
-    public void loadFullChat(final int chat_id, final int classGuid, boolean force) {
-        if (loadingFullChats.contains(chat_id) || !force && loadedFullChats.contains(chat_id)) {
-            return;
-        }
-        loadingFullChats.add(chat_id);
-        TLRPC.TL_messages_getFullChat req = new TLRPC.TL_messages_getFullChat();
-        req.chat_id = chat_id;
-        long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    final TLRPC.TL_messages_chatFull res = (TLRPC.TL_messages_chatFull) response;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            exportedChats.put(chat_id, res.full_chat.exported_invite);
-                            loadingFullChats.remove((Integer) chat_id);
-                            loadedFullChats.add(chat_id);
-
-                            putUsers(res.users, false);
-                            putChats(res.chats, false);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, chat_id, res.full_chat.participants, classGuid);
-                        }
-                    });
-                } else {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            loadingFullChats.remove((Integer) chat_id);
-                        }
-                    });
-                }
-            }
-        });
-        if (classGuid != 0) {
-            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-        }
-    }
-
-
-    private void reloadMessages(final ArrayList<Integer> mids, final long dialog_id) {
-        final TLRPC.TL_messages_getMessages req = new TLRPC.TL_messages_getMessages();
-        for (Integer mid : mids) {
-            if (reloadingMessages.contains(mid)) {
-                continue;
-            }
-            req.id.add(mid);
-        }
-        if (req.id.isEmpty()) {
-            return;
-        }
-        reloadingMessages.addAll(req.id);
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
-                    ImageLoader.saveMessagesThumbs(messagesRes.messages);
-
-                    final ArrayList<MessageObject> objects = new ArrayList<>();
-                    for (TLRPC.Message message : messagesRes.messages) {
-                        message.dialog_id = dialog_id;
-                        final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
-                        for (TLRPC.User u : messagesRes.users) {
-                            usersLocal.put(u.id, u);
-                        }
-                        objects.add(new MessageObject(message, usersLocal, true));
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.replaceMessagesObjects, dialog_id, objects);
-                        }
-                    });
-                }
-                reloadingMessages.removeAll(req.id);
-            }
-        });
-    }
-
-    protected void processNewDifferenceParams(int seq, int pts, int date, int pts_count) {
-        FileLog.e("tmessages", "processNewDifferenceParams seq = " + seq + " pts = " + pts + " date = " + date + " pts_count = " + pts_count);
-        if (pts != -1) {
-            if (MessagesStorage.lastPtsValue + pts_count == pts) {
-                FileLog.e("tmessages", "APPLY PTS");
-                MessagesStorage.lastPtsValue = pts;
-            } else if (MessagesStorage.lastPtsValue != pts) {
-                if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
-                    FileLog.e("tmessages", "ADD UPDATE TO QUEUE pts = " + pts + " pts_count = " + pts_count);
-                    if (updatesStartWaitTimePts == 0) {
-                        updatesStartWaitTimePts = System.currentTimeMillis();
-                    }
-                    UserActionUpdatesPts updates = new UserActionUpdatesPts();
-                    updates.pts = pts;
-                    updates.pts_count = pts_count;
-                    updatesQueuePts.add(updates);
-                } else {
-                    getDifference();
-                }
-            }
-        }
-        if (seq != -1) {
-            if (MessagesStorage.lastSeqValue + 1 == seq) {
-                FileLog.e("tmessages", "APPLY SEQ");
-                MessagesStorage.lastSeqValue = seq;
-                if (date != -1) {
-                    MessagesStorage.lastDateValue = date;
-                }
-            } else if (MessagesStorage.lastSeqValue != seq) {
-                if (gettingDifference || updatesStartWaitTimeSeq == 0 || updatesStartWaitTimeSeq + 1500 > System.currentTimeMillis()) {
-                    FileLog.e("tmessages", "ADD UPDATE TO QUEUE seq = " + seq);
-                    if (updatesStartWaitTimeSeq == 0) {
-                        updatesStartWaitTimeSeq = System.currentTimeMillis();
-                    }
-                    UserActionUpdatesSeq updates = new UserActionUpdatesSeq();
-                    updates.seq = seq;
-                    updatesQueueSeq.add(updates);
-                } else {
-                    getDifference();
-                }
-            }
-        }
-    }
-
-    public void didAddedNewTask(final int minDate, final SparseArray<ArrayList<Integer>> mids) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (currentDeletingTaskMids == null && !gettingNewDeleteTask || currentDeletingTaskTime != 0 && minDate < currentDeletingTaskTime) {
-                    getNewDeleteTask(null);
-                }
-            }
-        });
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, mids);
-            }
-        });
-    }
-
-    public void getNewDeleteTask(final ArrayList<Integer> oldTask) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                gettingNewDeleteTask = true;
-            }
-        });
-    }
-
-    private boolean checkDeletingTask(boolean runnable) {
-        int currentServerTime = ConnectionsManager.getInstance().getCurrentTime();
-
-        if (currentDeletingTaskMids != null && (runnable || currentDeletingTaskTime != 0 && currentDeletingTaskTime <= currentServerTime)) {
-            currentDeletingTaskTime = 0;
-            if (currentDeleteTaskRunnable != null && !runnable) {
-                Utilities.stageQueue.cancelRunnable(currentDeleteTaskRunnable);
-            }
-            currentDeleteTaskRunnable = null;
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    deleteMessages(currentDeletingTaskMids, null, null);
-
-                    Utilities.stageQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            getNewDeleteTask(currentDeletingTaskMids);
-                            currentDeletingTaskTime = 0;
-                            currentDeletingTaskMids = null;
-                        }
-                    });
-                }
-            });
-            return true;
-        }
-        return false;
     }
 
-    public void processLoadedDeleteTask(final int taskTime, final ArrayList<Integer> messages) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                gettingNewDeleteTask = false;
-                if (messages != null) {
-                    currentDeletingTaskTime = taskTime;
-                    currentDeletingTaskMids = messages;
 
-                    if (currentDeleteTaskRunnable != null) {
-                        Utilities.stageQueue.cancelRunnable(currentDeleteTaskRunnable);
-                        currentDeleteTaskRunnable = null;
-                    }
-
-                    if (!checkDeletingTask(false)) {
-                        currentDeleteTaskRunnable = new Runnable() {
-                            @Override
-                            public void run() {
-                                checkDeletingTask(true);
-                            }
-                        };
-                        int currentServerTime = ConnectionsManager.getInstance().getCurrentTime();
-                        Utilities.stageQueue.postRunnable(currentDeleteTaskRunnable, (long) Math.abs(currentServerTime - currentDeletingTaskTime) * 1000);
-                    }
-                } else {
-                    currentDeletingTaskTime = 0;
-                    currentDeletingTaskMids = null;
-                }
-            }
-        });
-    }
+    public void unregistedPush() {
+        if (UserConfig.registeredForPush && UserConfig.pushString.length() == 0) {
 
-    public void loadUserPhotos(final int uid, final int offset, final int count, final long max_id, final boolean fromCache, final int classGuid) {
-        if (fromCache) {
-        } else {
-            TLRPC.User user = getUser(uid);
-            if (user == null) {
-                return;
-            }
-            TLRPC.TL_photos_getUserPhotos req = new TLRPC.TL_photos_getUserPhotos();
-            req.limit = count;
-            req.offset = offset;
-            req.max_id = (int) max_id;
-            req.user_id = getInputUser(user);
-            long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        TLRPC.photos_Photos res = (TLRPC.photos_Photos) response;
-                        processLoadedUserPhotos(res, uid, offset, count, max_id, false, classGuid);
-                    }
-                }
-            });
-            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
         }
     }
 
-
-
-
-
-    public void getBlockedUsers(boolean cache) {
-        if (!UserConfig.isClientActivated() || loadingBlockedUsers) {
-            return;
-        }
-        loadingBlockedUsers = true;
-        if (cache) {
+    public void performLogout(boolean byUser) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.clear().commit();
+        if (byUser) {
+            unregistedPush();
         } else {
-            TLRPC.TL_contacts_getBlocked req = new TLRPC.TL_contacts_getBlocked();
-            req.offset = 0;
-            req.limit = 200;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    ArrayList<Integer> blocked = new ArrayList<>();
-                    ArrayList<TLRPC.User> users = null;
-                    if (error == null) {
-                        final TLRPC.contacts_Blocked res = (TLRPC.contacts_Blocked) response;
-                        for (TLRPC.TL_contactBlocked contactBlocked : res.blocked) {
-                            blocked.add(contactBlocked.user_id);
-                        }
-                        users = res.users;
-                    }
-                    processLoadedBlockedUsers(blocked, users, false);
-                }
-            });
-        }
-    }
-
-    public void processLoadedBlockedUsers(final ArrayList<Integer> ids, final ArrayList<TLRPC.User> users, final boolean cache) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (users != null) {
-                    MessagesController.getInstance().putUsers(users, cache);
-                }
-                loadingBlockedUsers = false;
-                if (ids.isEmpty() && cache && !UserConfig.blockedUsersLoaded) {
-                    getBlockedUsers(false);
-                    return;
-                } else if (!cache) {
-                    UserConfig.blockedUsersLoaded = true;
-                    UserConfig.saveConfig(false);
-                }
-                blockedUsers = ids;
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.blockedUsersDidLoaded);
-            }
-        });
-    }
-
-
-
-    public void processLoadedUserPhotos(final TLRPC.photos_Photos res, final int uid, final int offset, final int count, final long max_id, final boolean fromCache, final int classGuid) {
-        if (!fromCache) {
-        } else if (res == null || res.photos.isEmpty()) {
-            loadUserPhotos(uid, offset, count, max_id, false, classGuid);
-            return;
-        }
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                putUsers(res.users, fromCache);
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.userPhotosLoaded, uid, offset, count, fromCache, classGuid, res.photos);
-            }
-        });
-    }
-
-
-
-    public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat) {
-        if (messages == null) {
-            return;
-        }
-        for (Integer id : messages) {
-            MessageObject obj = dialogMessage.get(id);
-            if (obj != null) {
-                obj.deleted = true;
-            }
-        }
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, messages);
-
-
-        ArrayList<Integer> toSend = new ArrayList<>();
-        for (Integer mid : messages) {
-            if (mid > 0) {
-                toSend.add(mid);
-            }
-        }
-        if (toSend.isEmpty()) {
-            return;
-        }
-        TLRPC.TL_messages_deleteMessages req = new TLRPC.TL_messages_deleteMessages();
-        req.id = messages;
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
-                    processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
-                }
-            }
-        });
-    }
-
-
-
-
-
-    public void processChatInfo(final int chat_id, final TLRPC.ChatParticipants info, final ArrayList<TLRPC.User> usersArr, final boolean fromCache) {
-        if (fromCache && chat_id > 0) {
-            loadFullChat(chat_id, 0);
-        }
-        if (info != null) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    putUsers(usersArr, fromCache);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, chat_id, info);
-                }
-            });
-        }
-    }
-
-    public void updateTimerProc() {
-        long currentTime = System.currentTimeMillis();
-
-        checkDeletingTask(false);
-
-        if (UserConfig.isClientActivated()) {
-            if (ConnectionsManager.getInstance().getPauseTime() == 0 && ApplicationLoader.isScreenOn && !ApplicationLoader.mainInterfacePaused) {
-                if (statusSettingState != 1 && (lastStatusUpdateTime == 0 || lastStatusUpdateTime <= System.currentTimeMillis() - 55000 || offlineSent)) {
-                    statusSettingState = 1;
-
-                    if (statusRequest != 0) {
-                        ConnectionsManager.getInstance().cancelRpc(statusRequest, true);
-                    }
-
-                    TLRPC.TL_account_updateStatus req = new TLRPC.TL_account_updateStatus();
-                    req.offline = false;
-                    statusRequest = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                        @Override
-                        public void run(TLObject response, TLRPC.TL_error error) {
-                            if (error == null) {
-                                lastStatusUpdateTime = System.currentTimeMillis();
-                                offlineSent = false;
-                                statusSettingState = 0;
-                            } else {
-                                if (lastStatusUpdateTime != 0) {
-                                    lastStatusUpdateTime += 5000;
-                                }
-                            }
-                            statusRequest = 0;
-                        }
-                    });
-                }
-            } else if (statusSettingState != 2 && !offlineSent && ConnectionsManager.getInstance().getPauseTime() <= System.currentTimeMillis() - 2000) {
-                statusSettingState = 2;
-                if (statusRequest != 0) {
-                    ConnectionsManager.getInstance().cancelRpc(statusRequest, true);
-                }
-                TLRPC.TL_account_updateStatus req = new TLRPC.TL_account_updateStatus();
-                req.offline = true;
-                statusRequest = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        if (error == null) {
-                            offlineSent = true;
-                        } else {
-                            if (lastStatusUpdateTime != 0) {
-                                lastStatusUpdateTime += 5000;
-                            }
-                        }
-                        statusRequest = 0;
-                    }
-                });
-            }
-
-            for (int a = 0; a < 3; a++) {
-                if (getUpdatesStartTime(a) != 0 && getUpdatesStartTime(a) + 1500 < currentTime) {
-                    FileLog.e("tmessages", a + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
-                    processUpdatesQueue(a, 0);
-                }
-            }
-        }
-        if (!onlinePrivacy.isEmpty()) {
-            ArrayList<Integer> toRemove = null;
-            int currentServerTime = ConnectionsManager.getInstance().getCurrentTime();
-            for (ConcurrentHashMap.Entry<Integer, Integer> entry : onlinePrivacy.entrySet()) {
-                if (entry.getValue() < currentServerTime - 30) {
-                    if (toRemove == null) {
-                        toRemove = new ArrayList<>();
-                    }
-                    toRemove.add(entry.getKey());
-                }
-            }
-            if (toRemove != null) {
-                for (Integer uid : toRemove) {
-                    onlinePrivacy.remove(uid);
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_STATUS);
-                    }
-                });
-            }
-        }
-        if (!printingUsers.isEmpty() || lastPrintingStringCount != printingUsers.size()) {
-            boolean updated = false;
-            ArrayList<Long> keys = new ArrayList<>(printingUsers.keySet());
-            for (int b = 0; b < keys.size(); b++) {
-                Long key = keys.get(b);
-                ArrayList<PrintingUser> arr = printingUsers.get(key);
-                for (int a = 0; a < arr.size(); a++) {
-                    PrintingUser user = arr.get(a);
-                    if (user.lastTime + 5900 < currentTime) {
-                        updated = true;
-                        arr.remove(user);
-                        a--;
-                    }
-                }
-                if (arr.isEmpty()) {
-                    printingUsers.remove(key);
-                    keys.remove(b);
-                    b--;
-                }
-            }
-
-            updatePrintingStrings();
-
-            if (updated) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
-                    }
-                });
-            }
-        }
-    }
-
-    private String getUserNameForTyping(TLRPC.User user) {
-        if (user == null) {
-            return "";
-        }
-        if (user.first_name != null && user.first_name.length() > 0) {
-            return user.first_name;
-        } else if (user.last_name != null && user.last_name.length() > 0) {
-            return user.last_name;
-        }
-        return "";
-    }
-
-    private void updatePrintingStrings() {
-        final HashMap<Long, CharSequence> newPrintingStrings = new HashMap<>();
-        final HashMap<Long, Integer> newPrintingStringsTypes = new HashMap<>();
-
-        ArrayList<Long> keys = new ArrayList<>(printingUsers.keySet());
-        for (HashMap.Entry<Long, ArrayList<PrintingUser>> entry : printingUsers.entrySet()) {
-            long key = entry.getKey();
-            ArrayList<PrintingUser> arr = entry.getValue();
-
-            int lower_id = (int) key;
-
-            if (lower_id > 0 || lower_id == 0 || arr.size() == 1) {
-                PrintingUser pu = arr.get(0);
-                TLRPC.User user = getUser(pu.userId);
-                if (user == null) {
-                    return;
-                }
-                if (pu.action instanceof TLRPC.TL_sendMessageUploadAudioAction || pu.action instanceof TLRPC.TL_sendMessageRecordAudioAction) {
-                    if (lower_id < 0) {
-                        newPrintingStrings.put(key, LocaleController.formatString("IsRecordingAudio", R.string.IsRecordingAudio, getUserNameForTyping(user)));
-                    } else {
-                        newPrintingStrings.put(key, LocaleController.getString("RecordingAudio", R.string.RecordingAudio));
-                    }
-                    newPrintingStringsTypes.put(key, 1);
-                } else if (pu.action instanceof TLRPC.TL_sendMessageUploadVideoAction || pu.action instanceof TLRPC.TL_sendMessageRecordVideoAction) {
-                    if (lower_id < 0) {
-                        newPrintingStrings.put(key, LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user)));
-                    } else {
-                        newPrintingStrings.put(key, LocaleController.getString("SendingVideoStatus", R.string.SendingVideoStatus));
-                    }
-                    newPrintingStringsTypes.put(key, 2);
-                } else if (pu.action instanceof TLRPC.TL_sendMessageUploadDocumentAction) {
-                    if (lower_id < 0) {
-                        newPrintingStrings.put(key, LocaleController.formatString("IsSendingFile", R.string.IsSendingFile, getUserNameForTyping(user)));
-                    } else {
-                        newPrintingStrings.put(key, LocaleController.getString("SendingFile", R.string.SendingFile));
-                    }
-                    newPrintingStringsTypes.put(key, 2);
-                } else if (pu.action instanceof TLRPC.TL_sendMessageUploadPhotoAction) {
-                    if (lower_id < 0) {
-                        newPrintingStrings.put(key, LocaleController.formatString("IsSendingPhoto", R.string.IsSendingPhoto, getUserNameForTyping(user)));
-                    } else {
-                        newPrintingStrings.put(key, LocaleController.getString("SendingPhoto", R.string.SendingPhoto));
-                    }
-                    newPrintingStringsTypes.put(key, 2);
-                } else {
-                    if (lower_id < 0) {
-                        newPrintingStrings.put(key, String.format("%s %s", getUserNameForTyping(user), LocaleController.getString("IsTyping", R.string.IsTyping)));
-                    } else {
-                        newPrintingStrings.put(key, LocaleController.getString("Typing", R.string.Typing));
-                    }
-                    newPrintingStringsTypes.put(key, 0);
-                }
-            } else {
-                int count = 0;
-                String label = "";
-                for (PrintingUser pu : arr) {
-                    TLRPC.User user = getUser(pu.userId);
-                    if (user != null) {
-                        if (label.length() != 0) {
-                            label += ", ";
-                        }
-                        label += getUserNameForTyping(user);
-                        count++;
-                    }
-                    if (count == 2) {
-                        break;
-                    }
-                }
-                if (label.length() != 0) {
-                    if (arr.size() > 2) {
-                        newPrintingStrings.put(key, String.format("%s %s", label, LocaleController.formatPluralString("AndMoreTyping", arr.size() - 2)));
-                    } else {
-                        newPrintingStrings.put(key, String.format("%s %s", label, LocaleController.getString("AreTyping", R.string.AreTyping)));
-                    }
-                    newPrintingStringsTypes.put(key, 0);
-                }
-            }
+            ConnectionsManager.getInstance().cleanUp();
         }
-
-        lastPrintingStringCount = newPrintingStrings.size();
-
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                printingStrings = newPrintingStrings;
-                printingStringsTypes = newPrintingStringsTypes;
-            }
-        });
+        UserConfig.clearConfig();
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.appDidLogout);
+        MessagesStorage.getInstance().cleanUp(false);
+        cleanUp();
+//        ContactsController.getInstance().deleteAllAppAccounts();
     }
 
 
-    public void sendTyping(final long dialog_id, final int action, int classGuid) {
-        if (dialog_id == 0) {
+    public void registerForPush(final String regid) {
+        if (regid == null || regid.length() == 0 || registeringForPush || UserConfig.getClientUserId() == null) {
             return;
         }
-        HashMap<Long, Boolean> typings = sendingTypings.get(action);
-        if (typings != null && typings.get(dialog_id) != null) {
+        if (UserConfig.registeredForPush && regid.equals(UserConfig.pushString)) {
             return;
         }
-        if (typings == null) {
-            typings = new HashMap<>();
-            sendingTypings.put(action, typings);
-        }
-        int lower_part = (int) dialog_id;
-        int high_id = (int) (dialog_id >> 32);
-        if (lower_part != 0) {
-            if (high_id == 1) {
-                return;
-            }
+        registeringForPush = true;
 
-            TLRPC.TL_messages_setTyping req = new TLRPC.TL_messages_setTyping();
-            if (lower_part < 0) {
-                req.peer = new TLRPC.TL_inputPeerChat();
-                req.peer.chat_id = -lower_part;
-            } else {
-                TLRPC.User user = getUser(lower_part);
-                if (user != null) {
-                    if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                        req.peer = new TLRPC.TL_inputPeerForeign();
-                        req.peer.user_id = user.id;
-                        req.peer.access_hash = user.access_hash;
-                    } else {
-                        req.peer = new TLRPC.TL_inputPeerContact();
-                        req.peer.user_id = user.id;
-                    }
-                } else {
-                    return;
-                }
-            }
-            if (action == 0) {
-                req.action = new TLRPC.TL_sendMessageTypingAction();
-            } else if (action == 1) {
-                req.action = new TLRPC.TL_sendMessageRecordAudioAction();
-            } else if (action == 2) {
-                req.action = new TLRPC.TL_sendMessageCancelAction();
-            } else if (action == 3) {
-                req.action = new TLRPC.TL_sendMessageUploadDocumentAction();
-            } else if (action == 4) {
-                req.action = new TLRPC.TL_sendMessageUploadPhotoAction();
-            } else if (action == 5) {
-                req.action = new TLRPC.TL_sendMessageUploadVideoAction();
-            }
-            typings.put(dialog_id, true);
-            long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            HashMap<Long, Boolean> typings = sendingTypings.get(action);
-                            if (typings != null) {
-                                typings.remove(dialog_id);
-                            }
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-            if (classGuid != 0) {
-                ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-            }
-        } else {
-            if (action != 0) {
-                return;
-            }
-            TLRPC.EncryptedChat chat = getEncryptedChat(high_id);
-            if (chat.auth_key != null && chat.auth_key.length > 1 && chat instanceof TLRPC.TL_encryptedChat) {
-                TLRPC.TL_messages_setEncryptedTyping req = new TLRPC.TL_messages_setEncryptedTyping();
-                req.peer = new TLRPC.TL_inputEncryptedChat();
-                req.peer.chat_id = chat.id;
-                req.peer.access_hash = chat.access_hash;
-                req.typing = true;
-                typings.put(dialog_id, true);
-                long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                HashMap<Long, Boolean> typings = sendingTypings.get(action);
-                                if (typings != null) {
-                                    typings.remove(dialog_id);
-                                }
-                            }
-                        });
-                    }
-                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-                if (classGuid != 0) {
-                    ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-                }
-            }
-        }
-    }
-
-    public void loadMessages(final long dialog_id, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, final int load_type, final int last_message_id, final int first_message_id, final boolean allowCache) {
-        int lower_part = (int) dialog_id;
-        if (fromCache || lower_part == 0) {
-        } else {
-            TLRPC.TL_messages_getHistory req = new TLRPC.TL_messages_getHistory();
-            if (lower_part < 0) {
-                req.peer = new TLRPC.TL_inputPeerChat();
-                req.peer.chat_id = -lower_part;
-            } else {
-                TLRPC.User user = getUser(lower_part);
-                if (user == null) {
-                    return;
-                }
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                    req.peer = new TLRPC.TL_inputPeerForeign();
-                    req.peer.user_id = user.id;
-                    req.peer.access_hash = user.access_hash;
-                } else {
-                    req.peer = new TLRPC.TL_inputPeerContact();
-                    req.peer.user_id = user.id;
-                }
-            }
-            if (load_type == 3) {
-                req.offset = -count / 2;
-            } else if (load_type == 1) {
-                req.offset = -count - 1;
-            } else {
-                req.offset = 0;
-            }
-            req.limit = count;
-            req.max_id = max_id;
-            long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        final TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
-                        processLoadedMessages(res, dialog_id, count, max_id, false, classGuid, 0, last_message_id, first_message_id, 0, 0, load_type, allowCache);
-                    }
-                }
-            });
-            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-        }
-    }
-
-    public void processLoadedMessages(final TLRPC.messages_Messages messagesRes, final long dialog_id, final int count, final int max_id, final boolean isCache, final int classGuid,
-                                      final int first_unread, final int last_message_id, final int first_message_id, final int unread_count, final int last_date, final int load_type, final boolean allowCache) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                int lower_id = (int) dialog_id;
-                int high_id = (int) (dialog_id >> 32);
-                if (!isCache) {
-                    ImageLoader.saveMessagesThumbs(messagesRes.messages);
-                }
-                if (!isCache && allowCache) {
-                }
-                if (high_id != 1 && lower_id != 0 && isCache && messagesRes.messages.size() == 0 && (load_type == 0 || load_type == 2 || load_type == 3)) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            loadMessages(dialog_id, count, max_id, false, 0, classGuid, load_type, last_message_id, first_message_id, allowCache);
-                        }
-                    });
-                    return;
-                }
-                final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
-                for (TLRPC.User u : messagesRes.users) {
-                    usersLocal.put(u.id, u);
-                }
-                final ArrayList<MessageObject> objects = new ArrayList<>();
-                ArrayList<Integer> messagesToReload = null;
-                for (TLRPC.Message message : messagesRes.messages) {
-                    message.dialog_id = dialog_id;
-                    objects.add(new MessageObject(message, usersLocal, true));
-                    if (isCache) {
-                        if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
-                            if (message.media.bytes.length == 0 || message.media.bytes.length == 1 && message.media.bytes[0] < TLRPC.LAYER) {
-                                if (messagesToReload == null) {
-                                    messagesToReload = new ArrayList<>();
-                                }
-                                messagesToReload.add(message.id);
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
-                            if (message.media.webpage instanceof TLRPC.TL_webPagePending && message.media.webpage.date <= ConnectionsManager.getInstance().getCurrentTime()) {
-                                if (messagesToReload == null) {
-                                    messagesToReload = new ArrayList<>();
-                                }
-                                messagesToReload.add(message.id);
-                            }
-                        }
-                    }
-                }
-                if (messagesToReload != null) {
-                    reloadMessages(messagesToReload, dialog_id);
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        putUsers(messagesRes.users, isCache);
-                        putChats(messagesRes.chats, isCache);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDidLoaded, dialog_id, count, objects, isCache, first_unread, last_message_id, first_message_id, unread_count, last_date, load_type);
-                    }
-                });
-            }
-        });
-    }
-
-    public void loadDialogs(final int offset, final int serverOffset, final int count, boolean fromCache) {
-        if (loadingDialogs) {
-            return;
-        }
-        loadingDialogs = true;
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-
-        if (fromCache) {
-        } else {
-            TLRPC.TL_messages_getDialogs req = new TLRPC.TL_messages_getDialogs();
-            req.offset = serverOffset;
-            req.limit = count;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        final TLRPC.messages_Dialogs dialogsRes = (TLRPC.messages_Dialogs) response;
-                        processLoadedDialogs(dialogsRes, null, offset, serverOffset, count, false, false);
-                    }
-                }
-            });
-        }
-    }
-
-    private void applyDialogsNotificationsSettings(ArrayList<TLRPC.TL_dialog> dialogs) {
-        SharedPreferences.Editor editor = null;
-        for (TLRPC.TL_dialog dialog : dialogs) {
-            if (dialog.peer != null && dialog.notify_settings instanceof TLRPC.TL_peerNotifySettings) {
-                if (editor == null) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                    editor = preferences.edit();
-                }
-                int dialog_id = dialog.peer.user_id;
-                if (dialog_id == 0) {
-                    dialog_id = -dialog.peer.chat_id;
-                }
-                if (dialog.notify_settings.mute_until != 0) {
-                    if (dialog.notify_settings.mute_until > ConnectionsManager.getInstance().getCurrentTime() + 60 * 60 * 24 * 365) {
-                        editor.putInt("notify2_" + dialog_id, 2);
-                        dialog.notify_settings.mute_until = Integer.MAX_VALUE;
-                    } else {
-                        editor.putInt("notify2_" + dialog_id, 3);
-                        editor.putInt("notifyuntil_" + dialog_id, dialog.notify_settings.mute_until);
-                    }
-                }
-            }
-        }
-        if (editor != null) {
-            editor.commit();
-        }
-    }
-
-    public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdate) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                for (HashMap.Entry<Long, Integer> entry : dialogsToUpdate.entrySet()) {
-                    TLRPC.TL_dialog currentDialog = dialogs_dict.get(entry.getKey());
-                    if (currentDialog != null) {
-                        currentDialog.unread_count = entry.getValue();
-                    }
-                }
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_READ_DIALOG_MESSAGE);
-                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-            }
-        });
-    }
-
-    public void processDialogsUpdate(final TLRPC.messages_Dialogs dialogsRes, ArrayList<TLRPC.EncryptedChat> encChats) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                final HashMap<Long, TLRPC.TL_dialog> new_dialogs_dict = new HashMap<>();
-                final HashMap<Integer, MessageObject> new_dialogMessage = new HashMap<>();
-                final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
-                final HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-
-                for (TLRPC.User u : dialogsRes.users) {
-                    usersLocal.put(u.id, u);
-                }
-
-                for (TLRPC.Message m : dialogsRes.messages) {
-                    new_dialogMessage.put(m.id, new MessageObject(m, usersLocal, false));
-                }
-                for (TLRPC.TL_dialog d : dialogsRes.dialogs) {
-                    if (d.last_message_date == 0) {
-                        MessageObject mess = new_dialogMessage.get(d.top_message);
-                        if (mess != null) {
-                            d.last_message_date = mess.messageOwner.date;
-                        }
-                    }
-                    if (d.id == 0) {
-                        if (d.peer instanceof TLRPC.TL_peerUser) {
-                            d.id = d.peer.user_id;
-                        } else if (d.peer instanceof TLRPC.TL_peerChat) {
-                            d.id = -d.peer.chat_id;
-                        }
-                    }
-                    new_dialogs_dict.put(d.id, d);
-                    dialogsToUpdate.put(d.id, d.unread_count);
-                }
-
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        putUsers(dialogsRes.users, true);
-                        putChats(dialogsRes.chats, true);
-
-                        for (HashMap.Entry<Long, TLRPC.TL_dialog> pair : new_dialogs_dict.entrySet()) {
-                            long key = pair.getKey();
-                            TLRPC.TL_dialog value = pair.getValue();
-                            TLRPC.TL_dialog currentDialog = dialogs_dict.get(key);
-                            if (currentDialog == null) {
-                                dialogs_dict.put(key, value);
-                                dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
-                            } else {
-                                currentDialog.unread_count = value.unread_count;
-                                MessageObject oldMsg = dialogMessage.get(currentDialog.top_message);
-                                if (oldMsg == null || currentDialog.top_message > 0) {
-                                    if (oldMsg != null && oldMsg.deleted || value.top_message > currentDialog.top_message) {
-                                        dialogs_dict.put(key, value);
-                                        if (oldMsg != null) {
-                                            dialogMessage.remove(oldMsg.getId());
-                                        }
-                                        dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
-                                    }
-                                } else {
-                                    MessageObject newMsg = new_dialogMessage.get(value.top_message);
-                                    if (oldMsg.deleted || newMsg == null || newMsg.messageOwner.date > oldMsg.messageOwner.date) {
-                                        dialogs_dict.put(key, value);
-                                        dialogMessage.remove(oldMsg.getId());
-                                        dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
-                                    }
-                                }
-                            }
-                        }
-
-                        dialogs.clear();
-                        dialogsServerOnly.clear();
-                        dialogs.addAll(dialogs_dict.values());
-                        Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
-                            @Override
-                            public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
-                                if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
-                                    return 0;
-                                } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
-                                    return 1;
-                                } else {
-                                    return -1;
-                                }
-                            }
-                        });
-                        for (TLRPC.TL_dialog d : dialogs) {
-                            int high_id = (int) (d.id >> 32);
-                            if ((int) d.id != 0 && high_id != 1) {
-                                dialogsServerOnly.add(d);
-                            }
-                        }
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                        NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-                    }
-                });
-            }
-        });
-    }
-
-    public void processLoadedDialogs(final TLRPC.messages_Dialogs dialogsRes, final ArrayList<TLRPC.EncryptedChat> encChats, final int offset, final int serverOffset, final int count, final boolean isCache, final boolean resetEnd) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (isCache && dialogsRes.dialogs.size() == 0) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            putUsers(dialogsRes.users, true);
-                            loadingDialogs = false;
-                            if (resetEnd) {
-                                dialogsEndReached = false;
-                            }
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                            loadDialogs(offset, serverOffset, count, false);
-                        }
-                    });
-                    return;
-                }
-                final HashMap<Long, TLRPC.TL_dialog> new_dialogs_dict = new HashMap<>();
-                final HashMap<Integer, MessageObject> new_dialogMessage = new HashMap<>();
-                final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
-                int new_totalDialogsCount;
-
-                if (!isCache) {
-                    ImageLoader.saveMessagesThumbs(dialogsRes.messages);
-                }
-
-                if (dialogsRes instanceof TLRPC.TL_messages_dialogsSlice) {
-                    TLRPC.TL_messages_dialogsSlice slice = (TLRPC.TL_messages_dialogsSlice) dialogsRes;
-                    new_totalDialogsCount = slice.count;
-                } else {
-                    new_totalDialogsCount = dialogsRes.dialogs.size();
-                }
-
-                for (TLRPC.User u : dialogsRes.users) {
-                    usersLocal.put(u.id, u);
-                }
-
-                for (TLRPC.Message m : dialogsRes.messages) {
-                    new_dialogMessage.put(m.id, new MessageObject(m, usersLocal, false));
-                }
-                for (TLRPC.TL_dialog d : dialogsRes.dialogs) {
-                    if (d.last_message_date == 0) {
-                        MessageObject mess = new_dialogMessage.get(d.top_message);
-                        if (mess != null) {
-                            d.last_message_date = mess.messageOwner.date;
-                        }
-                    }
-                    if (d.id == 0) {
-                        if (d.peer instanceof TLRPC.TL_peerUser) {
-                            d.id = d.peer.user_id;
-                        } else if (d.peer instanceof TLRPC.TL_peerChat) {
-                            d.id = -d.peer.chat_id;
-                        }
-                    }
-                    new_dialogs_dict.put(d.id, d);
-                }
-
-                final int arg1 = new_totalDialogsCount;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (!isCache) {
-                            applyDialogsNotificationsSettings(dialogsRes.dialogs);
-                        }
-                        putUsers(dialogsRes.users, isCache);
-                        putChats(dialogsRes.chats, isCache);
-                        loadingDialogs = false;
-                        totalDialogsCount = arg1;
-
-                        for (HashMap.Entry<Long, TLRPC.TL_dialog> pair : new_dialogs_dict.entrySet()) {
-                            long key = pair.getKey();
-                            TLRPC.TL_dialog value = pair.getValue();
-                            TLRPC.TL_dialog currentDialog = dialogs_dict.get(key);
-                            if (currentDialog == null) {
-                                dialogs_dict.put(key, value);
-                                dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
-                            } else {
-                                MessageObject oldMsg = dialogMessage.get(value.top_message);
-                                if (oldMsg == null || currentDialog.top_message > 0) {
-                                    if (oldMsg != null && oldMsg.deleted || value.top_message > currentDialog.top_message) {
-                                        if (oldMsg != null) {
-                                            dialogMessage.remove(oldMsg.getId());
-                                        }
-                                        dialogs_dict.put(key, value);
-                                        dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
-                                    }
-                                } else {
-                                    MessageObject newMsg = new_dialogMessage.get(value.top_message);
-                                    if (oldMsg.deleted || newMsg == null || newMsg.messageOwner.date > oldMsg.messageOwner.date) {
-                                        dialogMessage.remove(oldMsg.getId());
-                                        dialogs_dict.put(key, value);
-                                        dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
-                                    }
-                                }
-                            }
-                        }
-
-                        dialogs.clear();
-                        dialogsServerOnly.clear();
-                        dialogs.addAll(dialogs_dict.values());
-                        Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
-                            @Override
-                            public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
-                                if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
-                                    return 0;
-                                } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
-                                    return 1;
-                                } else {
-                                    return -1;
-                                }
-                            }
-                        });
-                        for (TLRPC.TL_dialog d : dialogs) {
-                            int high_id = (int) (d.id >> 32);
-                            if ((int) d.id != 0 && high_id != 1) {
-                                dialogsServerOnly.add(d);
-                            }
-                        }
-
-                        dialogsEndReached = (dialogsRes.dialogs.size() == 0 || dialogsRes.dialogs.size() != count) && !isCache;
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                        generateUpdateMessage();
-                    }
-                });
-            }
-        });
-    }
-
-
-
-
-    public void markDialogAsRead(final long dialog_id, final int max_id, final int max_positive_id, final int offset, final int max_date, final boolean was, final boolean popup) {
-        int lower_part = (int) dialog_id;
-        int high_id = (int) (dialog_id >> 32);
-
-        if (lower_part != 0) {
-            if (max_positive_id == 0 && offset == 0 || high_id == 1) {
-                return;
-            }
-            TLRPC.TL_messages_readHistory req = new TLRPC.TL_messages_readHistory();
-            if (lower_part < 0) {
-                req.peer = new TLRPC.TL_inputPeerChat();
-                req.peer.chat_id = -lower_part;
-            } else {
-                TLRPC.User user = getUser(lower_part);
-                if (user == null) {
-                    return;
-                }
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                    req.peer = new TLRPC.TL_inputPeerForeign();
-                    req.peer.user_id = user.id;
-                    req.peer.access_hash = user.access_hash;
-                } else {
-                    req.peer = new TLRPC.TL_inputPeerContact();
-                    req.peer.user_id = user.id;
-                }
-            }
-            req.max_id = max_positive_id;
-            req.offset = offset;
-            if (offset == 0) {
-                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                                if (dialog != null) {
-                                    dialog.unread_count = 0;
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_READ_DIALOG_MESSAGE);
-                                }
-                                if (!popup) {
-                                    NotificationsController.getInstance().processReadMessages(null, dialog_id, 0, max_positive_id, false);
-                                    HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-                                    dialogsToUpdate.put(dialog_id, 0);
-                                    NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-                                } else {
-                                    NotificationsController.getInstance().processReadMessages(null, dialog_id, 0, max_positive_id, true);
-                                    HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-                                    dialogsToUpdate.put(dialog_id, -1);
-                                    NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-                                }
-                            }
-                        });
-                    }
-                });
-            }
-            if (req.max_id != Integer.MAX_VALUE) {
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        if (error == null) {
-                            TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
-                            if (res.offset > 0) {
-                                markDialogAsRead(dialog_id, 0, max_positive_id, res.offset, max_date, was, popup);
-                            }
-                            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
-                        }
-                    }
-                });
-            }
-        } else {
-            if (max_date == 0) {
-                return;
-            }
-            TLRPC.EncryptedChat chat = getEncryptedChat(high_id);
-            if (chat.auth_key != null && chat.auth_key.length > 1 && chat instanceof TLRPC.TL_encryptedChat) {
-                TLRPC.TL_messages_readEncryptedHistory req = new TLRPC.TL_messages_readEncryptedHistory();
-                req.peer = new TLRPC.TL_inputEncryptedChat();
-                req.peer.chat_id = chat.id;
-                req.peer.access_hash = chat.access_hash;
-                req.max_date = max_date;
-
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        //MessagesStorage.getInstance().processPendingRead(dialog_id, max_id, max_date, true);
-                    }
-                });
-            }
-
-            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationsController.getInstance().processReadMessages(null, dialog_id, max_date, 0, popup);
-                            TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                            if (dialog != null) {
-                                dialog.unread_count = 0;
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_READ_DIALOG_MESSAGE);
-                            }
-                            HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-                            dialogsToUpdate.put(dialog_id, 0);
-                            NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-                        }
-                    });
-                }
-            });
-
-            if (chat.ttl > 0 && was) {
-                int serverTime = Math.max(ConnectionsManager.getInstance().getCurrentTime(), max_date);
-            }
-        }
-    }
-
-
-    public void unregistedPush() {
-        if (UserConfig.registeredForPush && UserConfig.pushString.length() == 0) {
-            TLRPC.TL_account_unregisterDevice req = new TLRPC.TL_account_unregisterDevice();
-            req.token = UserConfig.pushString;
-            req.token_type = 2;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-
-                }
-            });
-        }
-    }
-
-    public void performLogout(boolean byUser) {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.clear().commit();
-        if (byUser) {
-            unregistedPush();
-            TLRPC.TL_auth_logOut req = new TLRPC.TL_auth_logOut();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    ConnectionsManager.getInstance().cleanUp();
-                }
-            });
-        } else {
-            ConnectionsManager.getInstance().cleanUp();
-        }
-        UserConfig.clearConfig();
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.appDidLogout);
-        MessagesStorage.getInstance().cleanUp(false);
-        cleanUp();
-        ContactsController.getInstance().deleteAllAppAccounts();
-    }
-
-    public void generateUpdateMessage() {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    String build = LocaleController.getString("updateBuild", R.string.updateBuild);
-                    if (build != null) {
-                        int version = Utilities.parseInt(build);
-                        if (version == 0) {
-                            version = 524;
-                        }
-                        if (version <= UserConfig.lastUpdateVersion) {
-                            return;
-                        }
-                        UserConfig.lastUpdateVersion = version;
-                        UserConfig.saveConfig(false);
-                    }
-                    TLRPC.TL_updateServiceNotification update = new TLRPC.TL_updateServiceNotification();
-                    update.message = LocaleController.getString("updateText", R.string.updateText);
-                    update.media = new TLRPC.TL_messageMediaEmpty();
-                    update.type = "update";
-                    update.popup = false;
-                    ArrayList<TLRPC.Update> updates = new ArrayList<>();
-                    updates.add(update);
-                    processUpdateArray(updates, null, null);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void registerForPush(final String regid) {
-        if (regid == null || regid.length() == 0 || registeringForPush || UserConfig.getClientUserId() == null) {
-            return;
-        }
-        if (UserConfig.registeredForPush && regid.equals(UserConfig.pushString)) {
-            return;
-        }
-        registeringForPush = true;
-        TLRPC.TL_account_registerDevice req = new TLRPC.TL_account_registerDevice();
-        req.token_type = 2;
-        req.token = regid;
-        req.app_sandbox = false;
-        try {
-            req.lang_code = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
-            if (req.lang_code.length() == 0) {
-                req.lang_code = "en";
-            }
-            req.device_model = Build.MANUFACTURER + Build.MODEL;
-            req.system_version = "SDK " + Build.VERSION.SDK_INT;
-            PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-            req.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            req.lang_code = "en";
-            req.device_model = "Android unknown";
-            req.system_version = "SDK " + Build.VERSION.SDK_INT;
-            req.app_version = "App version unknown";
-        }
-
-        if (req.lang_code == null || req.lang_code.length() == 0) {
-            req.lang_code = "en";
-        }
-        if (req.device_model == null || req.device_model.length() == 0) {
-            req.device_model = "Android unknown";
-        }
-        if (req.app_version == null || req.app_version.length() == 0) {
-            req.app_version = "App version unknown";
-        }
-        if (req.system_version == null || req.system_version.length() == 0) {
-            req.system_version = "SDK Unknown";
-        }
-
-        if (req.app_version != null) {
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        FileLog.e("tmessages", "registered for push");
-                        UserConfig.registeredForPush = true;
-                        UserConfig.pushString = regid;
-                        UserConfig.saveConfig(false);
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            registeringForPush = false;
-                        }
-                    });
-                }
-            });
-        }
-    }
-
-    public void loadCurrentState() {
-        if (updatingState) {
-            return;
-        }
-        updatingState = true;
-        TLRPC.TL_updates_getState req = new TLRPC.TL_updates_getState();
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                updatingState = false;
-                if (error == null) {
-                    TLRPC.TL_updates_state res = (TLRPC.TL_updates_state) response;
-                    MessagesStorage.lastDateValue = res.date;
-                    MessagesStorage.lastPtsValue = res.pts;
-                    MessagesStorage.lastSeqValue = res.seq;
-                    MessagesStorage.lastQtsValue = res.qts;
-                    for (int a = 0; a < 3; a++) {
-                        processUpdatesQueue(a, 2);
-                    }
-                } else {
-                    if (error.code != 401) {
-                        loadCurrentState();
-                    }
-                }
-            }
-        });
-    }
-
-    private int getUpdateSeq(TLRPC.Updates updates) {
-        if (updates instanceof TLRPC.TL_updatesCombined) {
-            return updates.seq_start;
-        } else {
-            return updates.seq;
-        }
-    }
-
-    private void setUpdatesStartTime(int type, long time) {
-        if (type == 0) {
-            updatesStartWaitTimeSeq = time;
-        } else if (type == 1) {
-            updatesStartWaitTimePts = time;
-        } else if (type == 2) {
-            updatesStartWaitTimeQts = time;
-        }
-    }
-
-    public long getUpdatesStartTime(int type) {
-        if (type == 0) {
-            return updatesStartWaitTimeSeq;
-        } else if (type == 1) {
-            return updatesStartWaitTimePts;
-        } else if (type == 2) {
-            return updatesStartWaitTimeQts;
-        }
-        return 0;
-    }
-
-    private int isValidUpdate(TLRPC.Updates updates, int type) {
-        if (type == 0) {
-            int seq = getUpdateSeq(updates);
-            if (MessagesStorage.lastSeqValue + 1 == seq || MessagesStorage.lastSeqValue == seq) {
-                return 0;
-            } else if (MessagesStorage.lastSeqValue < seq) {
-                return 1;
-            } else {
-                return 2;
-            }
-        } else if (type == 1) {
-            if (updates.pts <= MessagesStorage.lastPtsValue) {
-                return 2;
-            } else if (MessagesStorage.lastPtsValue + updates.pts_count == updates.pts) {
-                return 0;
-            } else {
-                return 1;
-            }
-        } else if (type == 2) {
-            if (updates.pts <= MessagesStorage.lastQtsValue) {
-                return 2;
-            } else if (MessagesStorage.lastQtsValue + updates.updates.size() == updates.pts) {
-                return 0;
-            } else {
-                return 1;
-            }
-        }
-        return 0;
-    }
-
-    private boolean processUpdatesQueue(int type, int state) {
-        ArrayList<TLRPC.Updates> updatesQueue = null;
-        if (type == 0) {
-            updatesQueue = updatesQueueSeq;
-            Collections.sort(updatesQueue, new Comparator<TLRPC.Updates>() {
-                @Override
-                public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
-                    return AndroidUtilities.compare(getUpdateSeq(updates), getUpdateSeq(updates2));
-                }
-            });
-        } else if (type == 1) {
-            updatesQueue = updatesQueuePts;
-            Collections.sort(updatesQueue, new Comparator<TLRPC.Updates>() {
-                @Override
-                public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
-                    return AndroidUtilities.compare(updates.pts, updates2.pts);
-                }
-            });
-        } else if (type == 2) {
-            updatesQueue = updatesQueueQts;
-            Collections.sort(updatesQueue, new Comparator<TLRPC.Updates>() {
-                @Override
-                public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
-                    return AndroidUtilities.compare(updates.pts, updates2.pts);
-                }
-            });
-        }
-        if (updatesQueue != null && !updatesQueue.isEmpty()) {
-            boolean anyProceed = false;
-            if (state == 2) {
-                TLRPC.Updates updates = updatesQueue.get(0);
-                if (type == 0) {
-                    MessagesStorage.lastSeqValue = getUpdateSeq(updates);
-                } else if (type == 1) {
-                    MessagesStorage.lastPtsValue = updates.pts;
-                } else {
-                    MessagesStorage.lastQtsValue = updates.pts;
-                }
-            }
-            for (int a = 0; a < updatesQueue.size(); a++) {
-                TLRPC.Updates updates = updatesQueue.get(a);
-                int updateState = isValidUpdate(updates, type);
-                if (updateState == 0) {
-                    processUpdates(updates, true);
-                    anyProceed = true;
-                    updatesQueue.remove(a);
-                    a--;
-                } else if (updateState == 1) {
-                    if (getUpdatesStartTime(type) != 0 && (anyProceed || getUpdatesStartTime(type) + 1500 > System.currentTimeMillis())) {
-                        FileLog.e("tmessages", "HOLE IN UPDATES QUEUE - will wait more time");
-                        if (anyProceed) {
-                            setUpdatesStartTime(type, System.currentTimeMillis());
-                        }
-                        return false;
-                    } else {
-                        FileLog.e("tmessages", "HOLE IN UPDATES QUEUE - getDifference");
-                        setUpdatesStartTime(type, 0);
-                        updatesQueue.clear();
-                        getDifference();
-                        return false;
-                    }
-                } else {
-                    updatesQueue.remove(a);
-                    a--;
-                }
-            }
-            updatesQueue.clear();
-            FileLog.e("tmessages", "UPDATES QUEUE PROCEED - OK");
-        }
-        setUpdatesStartTime(type, 0);
-        return true;
-    }
-
-    public void getDifference() {
-        registerForPush(UserConfig.pushString);
-        if (MessagesStorage.lastPtsValue == 0) {
-            loadCurrentState();
-            return;
-        }
-        if (gettingDifference) {
-            return;
-        }
-        if (!firstGettingTask) {
-            getNewDeleteTask(null);
-            firstGettingTask = true;
-        }
-        gettingDifference = true;
-        TLRPC.TL_updates_getDifference req = new TLRPC.TL_updates_getDifference();
-        req.pts = MessagesStorage.lastPtsValue;
-        req.date = MessagesStorage.lastDateValue;
-        req.qts = MessagesStorage.lastQtsValue;
-        if (req.date == 0) {
-            req.date = ConnectionsManager.getInstance().getCurrentTime();
-        }
-        FileLog.e("tmessages", "start getDifference with date = " + MessagesStorage.lastDateValue + " pts = " + MessagesStorage.lastPtsValue + " seq = " + MessagesStorage.lastSeqValue);
-        if (ConnectionsManager.getInstance().getConnectionState() == 0) {
-            ConnectionsManager.getInstance().setConnectionState(3);
-            final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                }
-            });
-        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                gettingDifferenceAgain = false;
-                if (error == null) {
-                    final TLRPC.updates_Difference res = (TLRPC.updates_Difference) response;
-                    gettingDifferenceAgain = res instanceof TLRPC.TL_updates_differenceSlice;
-
-                    final HashMap<Integer, TLRPC.User> usersDict = new HashMap<>();
-                    for (TLRPC.User user : res.users) {
-                        usersDict.put(user.id, user);
-                    }
-
-                    final ArrayList<TLRPC.TL_updateMessageID> msgUpdates = new ArrayList<>();
-                    if (!res.other_updates.isEmpty()) {
-                        for (int a = 0; a < res.other_updates.size(); a++) {
-                            TLRPC.Update upd = res.other_updates.get(a);
-                            if (upd instanceof TLRPC.TL_updateMessageID) {
-                                msgUpdates.add((TLRPC.TL_updateMessageID) upd);
-                                res.other_updates.remove(a);
-                                a--;
-                            }
-                        }
-                    }
-
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            putUsers(res.users, false);
-                            putChats(res.chats, false);
-                        }
-                    });
-
-                    MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (!msgUpdates.isEmpty()) {
-                                final HashMap<Integer, Integer> corrected = new HashMap<>();
-                                for (TLRPC.TL_updateMessageID update : msgUpdates) {
-
-                                }
-
-                                if (!corrected.isEmpty()) {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            for (HashMap.Entry<Integer, Integer> entry : corrected.entrySet()) {
-                                                Integer oldId = entry.getKey();
-                                                Integer newId = entry.getValue();
-                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, newId, null, false);
-                                            }
-                                        }
-                                    });
-                                }
-                            }
-
-                            Utilities.stageQueue.postRunnable(new Runnable() {
-                                @Override
-                                public void run() {
-                                    if (!res.new_messages.isEmpty() || !res.new_encrypted_messages.isEmpty()) {
-                                        final HashMap<Long, ArrayList<MessageObject>> messages = new HashMap<>();
-                                        for (TLRPC.EncryptedMessage encryptedMessage : res.new_encrypted_messages) {
-                                        }
-
-                                        ImageLoader.saveMessagesThumbs(res.new_messages);
-
-                                        final ArrayList<MessageObject> pushMessages = new ArrayList<>();
-                                        for (TLRPC.Message message : res.new_messages) {
-                                            MessageObject obj = new MessageObject(message, usersDict, true);
-
-                                            if (!obj.isOut() && obj.isUnread()) {
-                                                pushMessages.add(obj);
-                                            }
-
-                                            long uid;
-                                            if (message.dialog_id != 0) {
-                                                uid = message.dialog_id;
-                                            } else {
-                                                if (message.to_id.chat_id != 0) {
-                                                    uid = -message.to_id.chat_id;
-                                                } else {
-
-                                                    uid = message.to_id.user_id;
-                                                }
-                                            }
-                                            ArrayList<MessageObject> arr = messages.get(uid);
-                                            if (arr == null) {
-                                                arr = new ArrayList<>();
-                                                messages.put(uid, arr);
-                                            }
-                                            arr.add(obj);
-                                        }
-
-                                        AndroidUtilities.runOnUIThread(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                for (HashMap.Entry<Long, ArrayList<MessageObject>> pair : messages.entrySet()) {
-                                                    Long key = pair.getKey();
-                                                    ArrayList<MessageObject> value = pair.getValue();
-                                                    updateInterfaceWithMessages(key, value);
-                                                }
-                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                                            }
-                                        });
-                                        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                if (!pushMessages.isEmpty()) {
-                                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                                        @Override
-                                                        public void run() {
-                                                            NotificationsController.getInstance().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice));
-                                                        }
-                                                    });
-                                                }
-                                                MessagesStorage.getInstance().startTransaction(false);
-                                                MessagesStorage.getInstance().commitTransaction(false);
-                                            }
-                                        });
-
-                                    }
-
-                                    if (!res.other_updates.isEmpty()) {
-                                        processUpdateArray(res.other_updates, res.users, res.chats);
-                                    }
-
-                                    gettingDifference = false;
-                                    if (res instanceof TLRPC.TL_updates_difference) {
-                                        MessagesStorage.lastSeqValue = res.state.seq;
-                                        MessagesStorage.lastDateValue = res.state.date;
-                                        MessagesStorage.lastPtsValue = res.state.pts;
-                                        MessagesStorage.lastQtsValue = res.state.qts;
-                                        ConnectionsManager.getInstance().setConnectionState(0);
-                                        boolean done = true;
-                                        for (int a = 0; a < 3; a++) {
-                                            if (!processUpdatesQueue(a, 1)) {
-                                                done = false;
-                                            }
-                                        }
-                                        if (done) {
-                                            final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                                @Override
-                                                public void run() {
-                                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                                                }
-                                            });
-                                        }
-                                    } else if (res instanceof TLRPC.TL_updates_differenceSlice) {
-                                        MessagesStorage.lastDateValue = res.intermediate_state.date;
-                                        MessagesStorage.lastPtsValue = res.intermediate_state.pts;
-                                        MessagesStorage.lastQtsValue = res.intermediate_state.qts;
-                                        gettingDifferenceAgain = true;
-                                        getDifference();
-                                    } else if (res instanceof TLRPC.TL_updates_differenceEmpty) {
-                                        MessagesStorage.lastSeqValue = res.seq;
-                                        MessagesStorage.lastDateValue = res.date;
-                                        ConnectionsManager.getInstance().setConnectionState(0);
-                                        boolean done = true;
-                                        for (int a = 0; a < 3; a++) {
-                                            if (!processUpdatesQueue(a, 1)) {
-                                                done = false;
-                                            }
-                                        }
-                                        if (done) {
-                                            final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                                @Override
-                                                public void run() {
-                                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                                                }
-                                            });
-                                        }
-                                    }
-                                    FileLog.e("tmessages", "received difference with date = " + MessagesStorage.lastDateValue + " pts = " + MessagesStorage.lastPtsValue + " seq = " + MessagesStorage.lastSeqValue);
-                                    FileLog.e("tmessages", "messages = " + res.new_messages.size() + " users = " + res.users.size() + " chats = " + res.chats.size() + " other updates = " + res.other_updates.size());
-                                }
-                            });
-                        }
-                    });
-                } else {
-                    gettingDifference = false;
-                    ConnectionsManager.getInstance().setConnectionState(0);
-                    final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                        }
-                    });
-                }
-            }
-        });
-    }
-
-    private int getUpdateType(TLRPC.Update update) {
-        if (update instanceof TLRPC.TL_updateNewMessage || update instanceof TLRPC.TL_updateReadMessagesContents || update instanceof TLRPC.TL_updateReadHistoryInbox ||
-                update instanceof TLRPC.TL_updateReadHistoryOutbox || update instanceof TLRPC.TL_updateDeleteMessages) {
-            return 0;
-        } else if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
-            return 1;
-        } else {
-            return 2;
-        }
-    }
-
-    public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
-        boolean needGetDiff = false;
-        boolean needReceivedQueue = false;
-        boolean updateStatus = false;
-        if (updates instanceof TLRPC.TL_updateShort) {
-            ArrayList<TLRPC.Update> arr = new ArrayList<>();
-            arr.add(updates.update);
-            processUpdateArray(arr, null, null);
-        } else if (updates instanceof TLRPC.TL_updateShortChatMessage || updates instanceof TLRPC.TL_updateShortMessage) {
-            final int user_id = updates instanceof TLRPC.TL_updateShortChatMessage ? updates.from_id : updates.user_id;
-            TLRPC.User user = getUser(user_id);
-            TLRPC.User user2 = null;
-
-            if (user == null) {
-                putUser(user, true);
-            }
-
-            boolean needFwdUser = false;
-            if (updates.fwd_from_id != 0) {
-                user2 = getUser(updates.fwd_from_id);
-                if (user2 == null) {
-                    putUser(user2, true);
-                }
-                needFwdUser = true;
-            }
-
-            boolean missingData;
-            if (updates instanceof TLRPC.TL_updateShortMessage) {
-                missingData = user == null || needFwdUser && user2 == null;
-            } else {
-                TLRPC.Chat chat = getChat(updates.chat_id);
-                if (chat == null) {
-                    putChat(chat, true);
-                }
-                missingData = chat == null || user == null || needFwdUser && user2 == null;
-            }
-            if (user != null && user.status != null && user.status.expires <= 0) {
-                onlinePrivacy.put(user.id, ConnectionsManager.getInstance().getCurrentTime());
-                updateStatus = true;
-            }
-
-            if (missingData) {
-                needGetDiff = true;
-            } else {
-                if (MessagesStorage.lastPtsValue + updates.pts_count == updates.pts) {
-                    TLRPC.TL_message message = new TLRPC.TL_message();
-                    message.id = updates.id;
-                    if (updates instanceof TLRPC.TL_updateShortMessage) {
-                        if ((updates.flags & TLRPC.MESSAGE_FLAG_OUT) != 0) {
-                        } else {
-                            message.from_id = user_id;
-                        }
-                        message.to_id = new TLRPC.TL_peerUser();
-                        message.to_id.user_id = user_id;
-                        message.dialog_id = user_id;
-                    } else {
-                        message.from_id = user_id;
-                        message.to_id = new TLRPC.TL_peerChat();
-                        message.to_id.chat_id = updates.chat_id;
-                        message.dialog_id = -updates.chat_id;
-                    }
-                    message.message = updates.message;
-                    message.date = updates.date;
-                    message.flags = updates.flags;
-                    message.fwd_from_id = updates.fwd_from_id;
-                    message.fwd_date = updates.fwd_date;
-                    message.reply_to_msg_id = updates.reply_to_msg_id;
-                    message.media = new TLRPC.TL_messageMediaEmpty();
-                    MessagesStorage.lastPtsValue = updates.pts;
-                    final MessageObject obj = new MessageObject(message, null, true);
-                    final ArrayList<MessageObject> objArr = new ArrayList<>();
-                    objArr.add(obj);
-                    ArrayList<TLRPC.Message> arr = new ArrayList<>();
-                    arr.add(message);
-                    if (updates instanceof TLRPC.TL_updateShortMessage) {
-                        final boolean printUpdate = (updates.flags & TLRPC.MESSAGE_FLAG_OUT) == 0 && updatePrintingUsersWithNewMessages(updates.user_id, objArr);
-                        if (printUpdate) {
-                            updatePrintingStrings();
-                        }
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (printUpdate) {
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
-                                }
-                                updateInterfaceWithMessages(user_id, objArr);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                            }
-                        });
-                    } else {
-                        final boolean printUpdate = updatePrintingUsersWithNewMessages(-updates.chat_id, objArr);
-                        if (printUpdate) {
-                            updatePrintingStrings();
-                        }
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (printUpdate) {
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
-                                }
-
-                                updateInterfaceWithMessages(-updates.chat_id, objArr);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                            }
-                        });
-                    }
-
-                    MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    if (!obj.isOut()) {
-                                        NotificationsController.getInstance().processNewMessages(objArr, true);
-                                    }
-                                }
-                            });
-                        }
-                    });
-                } else if (MessagesStorage.lastPtsValue != updates.pts) {
-                    FileLog.e("tmessages", "need get diff short message, pts: " + MessagesStorage.lastPtsValue + " " + updates.pts + " count = " + updates.pts_count);
-                    if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
-                        if (updatesStartWaitTimePts == 0) {
-                            updatesStartWaitTimePts = System.currentTimeMillis();
-                        }
-                        FileLog.e("tmessages", "add to queue");
-                        updatesQueuePts.add(updates);
-                    } else {
-                        needGetDiff = true;
-                    }
-                }
-            }
-        } else if (updates instanceof TLRPC.TL_updatesCombined || updates instanceof TLRPC.TL_updates) {
-            Collections.sort(updates.updates, new Comparator<TLRPC.Update>() {
-                @Override
-                public int compare(TLRPC.Update lhs, TLRPC.Update rhs) {
-                    int ltype = getUpdateType(lhs);
-                    int rtype = getUpdateType(rhs);
-                    if (ltype != rtype) {
-                        return AndroidUtilities.compare(ltype, rtype);
-                    } else if (ltype == 0) {
-                        return AndroidUtilities.compare(lhs.pts, rhs.pts);
-                    } else if (ltype == 1) {
-                        return AndroidUtilities.compare(lhs.qts, rhs.qts);
-                    }
-                    return 0;
-                }
-            });
-            for (int a = 0; a < updates.updates.size(); a++) {
-                TLRPC.Update update = updates.updates.get(a);
-                if (getUpdateType(update) == 0) {
-                    TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
-                    updatesNew.updates.add(update);
-                    updatesNew.pts = update.pts;
-                    updatesNew.pts_count = update.pts_count;
-                    for (int b = a + 1; b < updates.updates.size(); b++) {
-                        TLRPC.Update update2 = updates.updates.get(b);
-                        if (getUpdateType(update2) == 0 && updatesNew.pts + update2.pts_count == update2.pts) {
-                            updatesNew.updates.add(update2);
-                            updatesNew.pts = update2.pts;
-                            updatesNew.pts_count += update2.pts_count;
-                            updates.updates.remove(b);
-                            b--;
-                        } else {
-                            break;
-                        }
-                    }
-                    if (MessagesStorage.lastPtsValue + updatesNew.pts_count == updatesNew.pts) {
-                        if (!processUpdateArray(updatesNew.updates, updates.users, updates.chats)) {
-                            FileLog.e("tmessages", "need get diff inner TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                            needGetDiff = true;
-                        } else {
-                            MessagesStorage.lastPtsValue = updatesNew.pts;
-                        }
-                    } else if (MessagesStorage.lastPtsValue != updatesNew.pts) {
-                        FileLog.e("tmessages", update + " need get diff, pts: " + MessagesStorage.lastPtsValue + " " + updatesNew.pts + " count = " + updatesNew.pts_count);
-                        if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts != 0 && updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
-                            if (updatesStartWaitTimePts == 0) {
-                                updatesStartWaitTimePts = System.currentTimeMillis();
-                            }
-                            FileLog.e("tmessages", "add to queue");
-                            updatesQueuePts.add(updatesNew);
-                        } else {
-                            needGetDiff = true;
-                        }
-                    }
-                } else if (getUpdateType(update) == 1) {
-                    TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
-                    updatesNew.updates.add(update);
-                    updatesNew.pts = update.qts;
-                    for (int b = a + 1; b < updates.updates.size(); b++) {
-                        TLRPC.Update update2 = updates.updates.get(b);
-                        if (getUpdateType(update2) == 1 && updatesNew.pts + 1 == update2.qts) {
-                            updatesNew.updates.add(update2);
-                            updatesNew.pts = update2.qts;
-                            updates.updates.remove(b);
-                            b--;
-                        } else {
-                            break;
-                        }
-                    }
-                    if (MessagesStorage.lastQtsValue == 0 || MessagesStorage.lastQtsValue + updatesNew.updates.size() == updatesNew.pts) {
-                        processUpdateArray(updatesNew.updates, updates.users, updates.chats);
-                        MessagesStorage.lastQtsValue = updatesNew.pts;
-                        needReceivedQueue = true;
-                    } else if (MessagesStorage.lastPtsValue != updatesNew.pts) {
-                        FileLog.e("tmessages", update + " need get diff, qts: " + MessagesStorage.lastQtsValue + " " + updatesNew.pts);
-                        if (gettingDifference || updatesStartWaitTimeQts == 0 || updatesStartWaitTimeQts != 0 && updatesStartWaitTimeQts + 1500 > System.currentTimeMillis()) {
-                            if (updatesStartWaitTimeQts == 0) {
-                                updatesStartWaitTimeQts = System.currentTimeMillis();
-                            }
-                            FileLog.e("tmessages", "add to queue");
-                            updatesQueueQts.add(updatesNew);
-                        } else {
-                            needGetDiff = true;
-                        }
-                    }
-                } else {
-                    break;
-                }
-                updates.updates.remove(a);
-                a--;
-            }
-
-            boolean processUpdate;
-            if (updates instanceof TLRPC.TL_updatesCombined) {
-                processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq_start || MessagesStorage.lastSeqValue == updates.seq_start;
-            } else {
-                processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq || updates.seq == 0 || updates.seq == MessagesStorage.lastSeqValue;
-            }
-            if (processUpdate) {
-                processUpdateArray(updates.updates, updates.users, updates.chats);
-                if (updates.date != 0) {
-                    MessagesStorage.lastDateValue = updates.date;
-                }
-                if (updates.seq != 0) {
-                    MessagesStorage.lastSeqValue = updates.seq;
-                }
-            } else {
-                if (updates instanceof TLRPC.TL_updatesCombined) {
-                    FileLog.e("tmessages", "need get diff TL_updatesCombined, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq_start);
-                } else {
-                    FileLog.e("tmessages", "need get diff TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                }
-
-                if (gettingDifference || updatesStartWaitTimeSeq == 0 || updatesStartWaitTimeSeq + 1500 > System.currentTimeMillis()) {
-                    if (updatesStartWaitTimeSeq == 0) {
-                        updatesStartWaitTimeSeq = System.currentTimeMillis();
-                    }
-                    FileLog.e("tmessages", "add TL_updates/Combined to queue");
-                    updatesQueueSeq.add(updates);
-                } else {
-                    needGetDiff = true;
-                }
-            }
-        } else if (updates instanceof TLRPC.TL_updatesTooLong) {
-            FileLog.e("tmessages", "need get diff TL_updatesTooLong");
-            needGetDiff = true;
-        } else if (updates instanceof UserActionUpdatesSeq) {
-            MessagesStorage.lastSeqValue = updates.seq;
-        } else if (updates instanceof UserActionUpdatesPts) {
-            MessagesStorage.lastPtsValue = updates.pts;
-        }
-        if (!fromQueue) {
-            if (needGetDiff) {
-                getDifference();
-            } else {
-                for (int a = 0; a < 3; a++) {
-                    ArrayList<TLRPC.Updates> updatesQueue = null;
-                    if (a == 0) {
-                        updatesQueue = updatesQueueSeq;
-                    } else if (a == 1) {
-                        updatesQueue = updatesQueuePts;
-                    } else if (a == 2) {
-                        updatesQueue = updatesQueueQts;
-                    }
-                    if (updatesQueue != null && !updatesQueue.isEmpty()) {
-                        processUpdatesQueue(a, 0);
-                    }
-                }
-            }
-        }
-        if (needReceivedQueue) {
-            TLRPC.TL_messages_receivedQueue req = new TLRPC.TL_messages_receivedQueue();
-            req.max_qts = MessagesStorage.lastQtsValue;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-
-                }
-            });
-        }
-        if (updateStatus) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_STATUS);
-                }
-            });
-        }
-    }
-
-    public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayList<TLRPC.User> usersArr, final ArrayList<TLRPC.Chat> chatsArr) {
-        if (updates.isEmpty()) {
-            return true;
-        }
-        long currentTime = System.currentTimeMillis();
-
-        final HashMap<Long, ArrayList<MessageObject>> messages = new HashMap<>();
-        final HashMap<Long, TLRPC.WebPage> webPages = new HashMap<>();
-        final ArrayList<MessageObject> pushMessages = new ArrayList<>();
-        final ArrayList<TLRPC.Message> messagesArr = new ArrayList<>();
-        final HashMap<Integer, Integer> markAsReadMessagesInbox = new HashMap<>();
-        final HashMap<Integer, Integer> markAsReadMessagesOutbox = new HashMap<>();
-        final ArrayList<Integer> markAsReadMessages = new ArrayList<>();
-        final HashMap<Integer, Integer> markAsReadEncrypted = new HashMap<>();
-        final ArrayList<Integer> deletedMessages = new ArrayList<>();
-        boolean printChanged = false;
-        final ArrayList<TLRPC.ChatParticipants> chatInfoToUpdate = new ArrayList<>();
-        final ArrayList<TLRPC.Update> updatesOnMainThread = new ArrayList<>();
-        final ArrayList<TLRPC.TL_updateEncryptedMessagesRead> tasks = new ArrayList<>();
-        final ArrayList<Integer> contactsIds = new ArrayList<>();
-
-        boolean checkForUsers = true;
-        ConcurrentHashMap<Integer, TLRPC.User> usersDict;
-        ConcurrentHashMap<Integer, TLRPC.Chat> chatsDict;
-        if (usersArr != null) {
-            usersDict = new ConcurrentHashMap<>();
-            for (TLRPC.User user : usersArr) {
-                usersDict.put(user.id, user);
-            }
-        } else {
-            checkForUsers = false;
-            usersDict = users;
-        }
-        if (chatsArr != null) {
-            chatsDict = new ConcurrentHashMap<>();
-            for (TLRPC.Chat chat : chatsArr) {
-                chatsDict.put(chat.id, chat);
-            }
-        } else {
-            checkForUsers = false;
-            chatsDict = chats;
-        }
-
-        if (usersArr != null || chatsArr != null) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    putUsers(usersArr, false);
-                    putChats(chatsArr, false);
-                }
-            });
-        }
-
-        int interfaceUpdateMask = 0;
-
-        for (TLRPC.Update update : updates) {
-            if (update instanceof TLRPC.TL_updateNewMessage) {
-                TLRPC.TL_updateNewMessage upd = (TLRPC.TL_updateNewMessage) update;
-                if (checkForUsers) {
-                    TLRPC.User user = getUser(upd.message.from_id);
-                    if (usersDict.get(upd.message.from_id) == null && user == null || upd.message.to_id.chat_id != 0 && chatsDict.get(upd.message.to_id.chat_id) == null && getChat(upd.message.to_id.chat_id) == null) {
-                        return false;
-                    }
-
-                    if (user != null && user.status != null && user.status.expires <= 0) {
-                        onlinePrivacy.put(upd.message.from_id, ConnectionsManager.getInstance().getCurrentTime());
-                        interfaceUpdateMask |= UPDATE_MASK_STATUS;
-                    }
-                }
-                messagesArr.add(upd.message);
-                ImageLoader.saveMessageThumbs(upd.message);
-                MessageObject obj = new MessageObject(upd.message, usersDict, true);
-                if (obj.type == 11) {
-                    interfaceUpdateMask |= UPDATE_MASK_CHAT_AVATAR;
-                } else if (obj.type == 10) {
-                    interfaceUpdateMask |= UPDATE_MASK_CHAT_NAME;
-                }
-                long uid;
-                if (upd.message.to_id.chat_id != 0) {
-                    uid = -upd.message.to_id.chat_id;
-                } else {
-
-                    uid = upd.message.to_id.user_id;
-                }
-                ArrayList<MessageObject> arr = messages.get(uid);
-                if (arr == null) {
-                    arr = new ArrayList<>();
-                    messages.put(uid, arr);
-                }
-                arr.add(obj);
-                if (!obj.isOut() && obj.isUnread()) {
-                    pushMessages.add(obj);
-                }
-            } else if (update instanceof TLRPC.TL_updateReadMessagesContents) {
-                markAsReadMessages.addAll(update.messages);
-            } else if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
-                TLRPC.Peer peer = ((TLRPC.TL_updateReadHistoryInbox) update).peer;
-                if (peer.chat_id != 0) {
-                    markAsReadMessagesInbox.put(-peer.chat_id, update.max_id);
-                } else {
-                    markAsReadMessagesInbox.put(peer.user_id, update.max_id);
-                }
-            } else if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
-                TLRPC.Peer peer = ((TLRPC.TL_updateReadHistoryOutbox) update).peer;
-                if (peer.chat_id != 0) {
-                    markAsReadMessagesOutbox.put(-peer.chat_id, update.max_id);
-                } else {
-                    markAsReadMessagesOutbox.put(peer.user_id, update.max_id);
-                }
-            } else if (update instanceof TLRPC.TL_updateDeleteMessages) {
-                deletedMessages.addAll(update.messages);
-            } else if (update instanceof TLRPC.TL_updateUserTyping || update instanceof TLRPC.TL_updateChatUserTyping) {
-            } else if (update instanceof TLRPC.TL_updateChatParticipants) {
-                interfaceUpdateMask |= UPDATE_MASK_CHAT_MEMBERS;
-                chatInfoToUpdate.add(update.participants);
-            } else if (update instanceof TLRPC.TL_updateUserStatus) {
-                interfaceUpdateMask |= UPDATE_MASK_STATUS;
-                updatesOnMainThread.add(update);
-            } else if (update instanceof TLRPC.TL_updateUserName) {
-                interfaceUpdateMask |= UPDATE_MASK_NAME;
-                updatesOnMainThread.add(update);
-            } else if (update instanceof TLRPC.TL_updateUserPhoto) {
-                interfaceUpdateMask |= UPDATE_MASK_AVATAR;
-                updatesOnMainThread.add(update);
-            } else if (update instanceof TLRPC.TL_updateUserPhone) {
-                interfaceUpdateMask |= UPDATE_MASK_PHONE;
-                updatesOnMainThread.add(update);
-            } else if (update instanceof TLRPC.TL_updateContactRegistered) {
-                if (enableJoined && usersDict.containsKey(update.user_id)) {
-                    TLRPC.TL_messageService newMessage = new TLRPC.TL_messageService();
-                    newMessage.action = new TLRPC.TL_messageActionUserJoined();
-                    newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
-                    UserConfig.saveConfig(false);
-                    newMessage.flags = TLRPC.MESSAGE_FLAG_UNREAD;
-                    newMessage.date = update.date;
-                    newMessage.from_id = update.user_id;
-                    newMessage.to_id = new TLRPC.TL_peerUser();
-                    newMessage.dialog_id = update.user_id;
-
-                    messagesArr.add(newMessage);
-                    MessageObject obj = new MessageObject(newMessage, usersDict, true);
-                    ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
-                    if (arr == null) {
-                        arr = new ArrayList<>();
-                        messages.put(newMessage.dialog_id, arr);
-                    }
-                    arr.add(obj);
-                    pushMessages.add(obj);
-                }
-            } else if (update instanceof TLRPC.TL_updateContactLink) {
-                if (update.my_link instanceof TLRPC.TL_contactLinkContact) {
-                    int idx = contactsIds.indexOf(-update.user_id);
-                    if (idx != -1) {
-                        contactsIds.remove(idx);
-                    }
-                    if (!contactsIds.contains(update.user_id)) {
-                        contactsIds.add(update.user_id);
-                    }
-                } else {
-                    int idx = contactsIds.indexOf(update.user_id);
-                    if (idx != -1) {
-                        contactsIds.remove(idx);
-                    }
-                    if (!contactsIds.contains(update.user_id)) {
-                        contactsIds.add(-update.user_id);
-                    }
-                }
-            } else if (update instanceof TLRPC.TL_updateNewAuthorization) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.newSessionReceived);
-                    }
-                });
-                TLRPC.TL_messageService newMessage = new TLRPC.TL_messageService();
-                newMessage.action = new TLRPC.TL_messageActionLoginUnknownLocation();
-                newMessage.action.title = update.device;
-                newMessage.action.address = update.location;
-                newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
-                UserConfig.saveConfig(false);
-                newMessage.flags = TLRPC.MESSAGE_FLAG_UNREAD;
-                newMessage.date = update.date;
-                newMessage.from_id = 777000;
-                newMessage.to_id = new TLRPC.TL_peerUser();
-                newMessage.dialog_id = 777000;
-
-                messagesArr.add(newMessage);
-                MessageObject obj = new MessageObject(newMessage, usersDict, true);
-                ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
-                if (arr == null) {
-                    arr = new ArrayList<>();
-                    messages.put(newMessage.dialog_id, arr);
-                }
-                arr.add(obj);
-                pushMessages.add(obj);
-            } else if (update instanceof TLRPC.TL_updateNewGeoChatMessage) {
-                //DEPRECATED
-            }
-        }
-        if (!messages.isEmpty()) {
-            for (HashMap.Entry<Long, ArrayList<MessageObject>> pair : messages.entrySet()) {
-                Long key = pair.getKey();
-                ArrayList<MessageObject> value = pair.getValue();
-                if (updatePrintingUsersWithNewMessages(key, value)) {
-                    printChanged = true;
-                }
-            }
-        }
-
-        if (printChanged) {
-            updatePrintingStrings();
-        }
-
-        final int interfaceUpdateMaskFinal = interfaceUpdateMask;
-        final boolean printChangedArg = printChanged;
-
-        if (!contactsIds.isEmpty()) {
-            ContactsController.getInstance().processContactsUpdates(contactsIds, usersDict);
-        }
-
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (!pushMessages.isEmpty()) {
-                            NotificationsController.getInstance().processNewMessages(pushMessages, true);
-                        }
-                    }
-                });
-            }
-        });
-
-        if (!messagesArr.isEmpty()) {
-        }
-
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                int updateMask = interfaceUpdateMaskFinal;
-
-                if (!updatesOnMainThread.isEmpty()) {
-                    ArrayList<TLRPC.User> dbUsers = new ArrayList<>();
-                    ArrayList<TLRPC.User> dbUsersStatus = new ArrayList<>();
-                    SharedPreferences.Editor editor = null;
-                    for (TLRPC.Update update : updatesOnMainThread) {
-                        final TLRPC.User toDbUser = new TLRPC.User();
-                        toDbUser.id = update.user_id;
-                        final TLRPC.User currentUser = getUser(update.user_id);
-                        if (update instanceof TLRPC.TL_updatePrivacy) {
-                            if (update.key instanceof TLRPC.TL_privacyKeyStatusTimestamp) {
-                                ContactsController.getInstance().setPrivacyRules(update.rules);
-                            }
-                        } else if (update instanceof TLRPC.TL_updateUserStatus) {
-                            if (update.status instanceof TLRPC.TL_userStatusRecently) {
-                                update.status.expires = -100;
-                            } else if (update.status instanceof TLRPC.TL_userStatusLastWeek) {
-                                update.status.expires = -101;
-                            } else if (update.status instanceof TLRPC.TL_userStatusLastMonth) {
-                                update.status.expires = -102;
-                            }
-                            if (currentUser != null) {
-                                currentUser.id = update.user_id;
-                                currentUser.status = update.status;
-                            }
-                            toDbUser.status = update.status;
-                            dbUsersStatus.add(toDbUser);
-
-                        } else if (update instanceof TLRPC.TL_updateUserName) {
-                            if (currentUser != null) {
-                                if (!(currentUser instanceof TLRPC.TL_userContact)) {
-                                    currentUser.first_name = update.first_name;
-                                    currentUser.last_name = update.last_name;
-                                }
-                                if (currentUser.username != null && currentUser.username.length() > 0) {
-                                    usersByUsernames.remove(currentUser.username);
-                                }
-                                if (update.username != null && update.username.length() > 0) {
-                                    usersByUsernames.put(update.username, currentUser);
-                                }
-                                currentUser.username = update.username;
-                            }
-                            toDbUser.first_name = update.first_name;
-                            toDbUser.last_name = update.last_name;
-                            toDbUser.username = update.username;
-                            dbUsers.add(toDbUser);
-                        } else if (update instanceof TLRPC.TL_updateUserPhoto) {
-                            if (currentUser != null) {
-                                currentUser.photo = update.photo;
-                            }
-                            toDbUser.photo = update.photo;
-                            dbUsers.add(toDbUser);
-                        } else if (update instanceof TLRPC.TL_updateUserPhone) {
-                            if (currentUser != null) {
-                                currentUser.phone = update.phone;
-                                Utilities.phoneBookQueue.postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        ContactsController.getInstance().addContactToPhoneBook(currentUser, true);
-                                    }
-                                });
-                            }
-                            toDbUser.phone = update.phone;
-                            dbUsers.add(toDbUser);
-                        } else if (update instanceof TLRPC.TL_updateNotifySettings) {
-                            TLRPC.TL_updateNotifySettings updateNotifySettings = (TLRPC.TL_updateNotifySettings) update;
-                            if (update.notify_settings instanceof TLRPC.TL_peerNotifySettings && updateNotifySettings.peer instanceof TLRPC.TL_notifyPeer) {
-                                if (editor == null) {
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                    editor = preferences.edit();
-                                }
-                                long dialog_id = updateNotifySettings.peer.peer.user_id;
-                                if (dialog_id == 0) {
-                                    dialog_id = -updateNotifySettings.peer.peer.chat_id;
-                                }
-                                TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                                if (dialog != null) {
-                                    dialog.notify_settings = update.notify_settings;
-                                }
-                                if (update.notify_settings.mute_until > ConnectionsManager.getInstance().getCurrentTime()) {
-                                    int until = 0;
-                                    if (update.notify_settings.mute_until > ConnectionsManager.getInstance().getCurrentTime() + 60 * 60 * 24 * 365) {
-                                        editor.putInt("notify2_" + dialog_id, 2);
-                                        if (dialog != null) {
-                                            dialog.notify_settings.mute_until = Integer.MAX_VALUE;
-                                        }
-                                    } else {
-                                        until = update.notify_settings.mute_until;
-                                        editor.putInt("notify2_" + dialog_id, 3);
-                                        editor.putInt("notifyuntil_" + dialog_id, update.notify_settings.mute_until);
-                                        if (dialog != null) {
-                                            dialog.notify_settings.mute_until = until;
-                                        }
-                                    }
-                                } else {
-                                    if (dialog != null) {
-                                        dialog.notify_settings.mute_until = 0;
-                                    }
-                                    editor.remove("notify2_" + dialog_id);
-                                }
-
-                            }/* else if (update.peer instanceof TLRPC.TL_notifyChats) { disable global settings sync
-                                if (editor == null) {
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                    editor = preferences.edit();
-                                }
-                                editor.putBoolean("EnableGroup", update.notify_settings.mute_until == 0);
-                                editor.putBoolean("EnablePreviewGroup", update.notify_settings.show_previews);
-                            } else if (update.peer instanceof TLRPC.TL_notifyUsers) {
-                                if (editor == null) {
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                    editor = preferences.edit();
-                                }
-                                editor.putBoolean("EnableAll", update.notify_settings.mute_until == 0);
-                                editor.putBoolean("EnablePreviewAll", update.notify_settings.show_previews);
-                            }*/
-                        }
-                    }
-                    if (editor != null) {
-                        editor.commit();
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
-                    }
-                }
-
-                if (!webPages.isEmpty()) {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceivedWebpagesInUpdates, webPages);
-                }
-
-                if (!messages.isEmpty()) {
-                    for (HashMap.Entry<Long, ArrayList<MessageObject>> entry : messages.entrySet()) {
-                        Long key = entry.getKey();
-                        ArrayList<MessageObject> value = entry.getValue();
-                        updateInterfaceWithMessages(key, value);
-                    }
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                }
-                if (printChangedArg) {
-                    updateMask |= UPDATE_MASK_USER_PRINT;
-                }
-                if (!contactsIds.isEmpty()) {
-                    updateMask |= UPDATE_MASK_NAME;
-                    updateMask |= UPDATE_MASK_USER_PHONE;
-                }
-                if (!chatInfoToUpdate.isEmpty()) {
-                    for (TLRPC.ChatParticipants info : chatInfoToUpdate) {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info.chat_id, info);
-                    }
-                }
-                if (updateMask != 0) {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, updateMask);
-                }
-            }
-        });
-
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        int updateMask = 0;
-                        if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty()) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesRead, markAsReadMessagesInbox, markAsReadMessagesOutbox);
-                            NotificationsController.getInstance().processReadMessages(markAsReadMessagesInbox, 0, 0, 0, false);
-                            for (HashMap.Entry<Integer, Integer> entry : markAsReadMessagesInbox.entrySet()) {
-                                TLRPC.TL_dialog dialog = dialogs_dict.get((long) entry.getKey());
-                                if (dialog != null && dialog.top_message <= entry.getValue()) {
-                                    MessageObject obj = dialogMessage.get(dialog.top_message);
-                                    if (obj != null) {
-                                        obj.setIsRead();
-                                        updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
-                                    }
-                                }
-                            }
-                            for (HashMap.Entry<Integer, Integer> entry : markAsReadMessagesOutbox.entrySet()) {
-                                TLRPC.TL_dialog dialog = dialogs_dict.get((long) entry.getKey());
-                                if (dialog != null && dialog.top_message <= entry.getValue()) {
-                                    MessageObject obj = dialogMessage.get(dialog.top_message);
-                                    if (obj != null) {
-                                        obj.setIsRead();
-                                        updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
-                                    }
-                                }
-                            }
-                        }
-                        if (!markAsReadEncrypted.isEmpty()) {
-                            for (HashMap.Entry<Integer, Integer> entry : markAsReadEncrypted.entrySet()) {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesReadEncrypted, entry.getKey(), entry.getValue());
-                                long dialog_id = (long) (entry.getKey()) << 32;
-                                TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                                if (dialog != null) {
-                                    MessageObject message = dialogMessage.get(dialog.top_message);
-                                    if (message != null && message.messageOwner.date <= entry.getValue()) {
-                                        message.setIsRead();
-                                        updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
-                                    }
-                                }
-                            }
-                        }
-                        if (!markAsReadMessages.isEmpty()) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesReadContent, markAsReadMessages);
-                        }
-                        if (!deletedMessages.isEmpty()) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, deletedMessages);
-                            for (Integer id : deletedMessages) {
-                                MessageObject obj = dialogMessage.get(id);
-                                if (obj != null) {
-                                    obj.deleted = true;
-                                }
-                            }
-                        }
-                        if (updateMask != 0) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, updateMask);
-                        }
-                    }
-                });
-            }
-        });
-
-        return true;
-    }
-
-
-
-    private boolean updatePrintingUsersWithNewMessages(long uid, ArrayList<MessageObject> messages) {
-        if (uid > 0) {
-            ArrayList<PrintingUser> arr = printingUsers.get(uid);
-            if (arr != null) {
-                printingUsers.remove(uid);
-                return true;
-            }
-        } else if (uid < 0) {
-            ArrayList<Integer> messagesUsers = new ArrayList<>();
-            for (MessageObject message : messages) {
-                if (!messagesUsers.contains(message.messageOwner.from_id)) {
-                    messagesUsers.add(message.messageOwner.from_id);
-                }
-            }
-
-            ArrayList<PrintingUser> arr = printingUsers.get(uid);
-            boolean changed = false;
-            if (arr != null) {
-                for (int a = 0; a < arr.size(); a++) {
-                    PrintingUser user = arr.get(a);
-                    if (messagesUsers.contains(user.userId)) {
-                        arr.remove(a);
-                        a--;
-                        if (arr.isEmpty()) {
-                            printingUsers.remove(uid);
-                        }
-                        changed = true;
-                    }
-                }
-            }
-            if (changed) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    protected void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> messages) {
-        updateInterfaceWithMessages(uid, messages, false);
-    }
-
-    protected void updateInterfaceWithMessages(final long uid, final ArrayList<MessageObject> messages, boolean isBroadcast) {
-        if (messages == null || messages.isEmpty()) {
-            return;
-        }
-
-        boolean isEncryptedChat = ((int) uid) == 0;
-        MessageObject lastMessage = null;
-        for (MessageObject message : messages) {
-            if (lastMessage == null || (!isEncryptedChat && message.getId() > lastMessage.getId() || (isEncryptedChat || message.getId() < 0 && lastMessage.getId() < 0) && message.getId() < lastMessage.getId()) || message.messageOwner.date > lastMessage.messageOwner.date) {
-                lastMessage = message;
-            }
-        }
-
-        TLRPC.TL_dialog dialog = dialogs_dict.get(uid);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceivedNewMessages, uid, messages);
-
-        if (lastMessage == null) {
-            return;
-        }
-
-        boolean changed = false;
-
-        if (dialog == null) {
-            if (!isBroadcast) {
-                dialog = new TLRPC.TL_dialog();
-                dialog.id = uid;
-                dialog.unread_count = 0;
-                dialog.top_message = lastMessage.getId();
-                dialog.last_message_date = lastMessage.messageOwner.date;
-                dialogs_dict.put(uid, dialog);
-                dialogs.add(dialog);
-                dialogMessage.put(lastMessage.getId(), lastMessage);
-                changed = true;
-            }
-        } else {
-            boolean change = false;
-            if (dialog.top_message > 0 && lastMessage.getId() > 0 && lastMessage.getId() > dialog.top_message ||
-                    dialog.top_message < 0 && lastMessage.getId() < 0 && lastMessage.getId() < dialog.top_message) {
-                change = true;
-            } else {
-                MessageObject currentDialogMessage = dialogMessage.get(dialog.top_message);
-                if (currentDialogMessage != null) {
-                    if (currentDialogMessage.isSending() && lastMessage.isSending()) {
-                        change = true;
-                    } else if (dialog.last_message_date < lastMessage.messageOwner.date || dialog.last_message_date == lastMessage.messageOwner.date && lastMessage.isSending()) {
-                        change = true;
-                    }
-                } else {
-                    change = true;
-                }
-            }
-            if (change) {
-                dialogMessage.remove(dialog.top_message);
-                dialog.top_message = lastMessage.getId();
-                if (!isBroadcast) {
-                    dialog.last_message_date = lastMessage.messageOwner.date;
-                    changed = true;
-                }
-                dialogMessage.put(lastMessage.getId(), lastMessage);
-            }
-        }
-
-        if (changed) {
-            dialogsServerOnly.clear();
-            Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
-                @Override
-                public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
-                    if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
-                        return 0;
-                    } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
-                        return 1;
-                    } else {
-                        return -1;
-                    }
-                }
-            });
-            for (TLRPC.TL_dialog d : dialogs) {
-                int high_id = (int) (d.id >> 32);
-                if ((int) d.id != 0 && high_id != 1) {
-                    dialogsServerOnly.add(d);
-                }
-            }
-        }
     }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 10722d758..93a84ad11 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -414,14 +414,6 @@ public void run() {
                     cacheFile = null;
                 }
                 openDatabase();
-                if (isLogin) {
-                    Utilities.stageQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            MessagesController.getInstance().getDifference();
-                        }
-                    });
-                }
             }
         });
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 8be4589e3..b64f2894f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -150,13 +150,14 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
             }
         }
 
-        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+//        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        TLRPC.User user = null;
         if (user == null) {
             return null;
         }
         TLRPC.Chat chat = null;
         if (chat_id != 0) {
-            chat = MessagesController.getInstance().getChat(chat_id);
+//            chat = MessagesController.getInstance().getChat(chat_id);
             if (chat == null) {
                 return null;
             }
@@ -297,10 +298,11 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 user_id = lastMessageObject.messageOwner.from_id;
             }
 
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+//            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            TLRPC.User user = null;
             TLRPC.Chat chat = null;
             if (chat_id != 0) {
-                chat = MessagesController.getInstance().getChat(chat_id);
+//                chat = MessagesController.getInstance().getChat(chat_id);
             }
             TLRPC.FileLocation photoPath = null;
 
@@ -929,79 +931,7 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
         }
     }
 
-    public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs, ArrayList<TLRPC.Message> messages, ArrayList<TLRPC.User> users, ArrayList<TLRPC.Chat> chats, ArrayList<TLRPC.EncryptedChat> encryptedChats) {
-        MessagesController.getInstance().putUsers(users, true);
-        MessagesController.getInstance().putChats(chats, true);
-        MessagesController.getInstance().putEncryptedChats(encryptedChats, true);
 
-        pushDialogs.clear();
-        pushMessages.clear();
-        pushMessagesDict.clear();
-        total_unread_count = 0;
-        personal_count = 0;
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-        HashMap<Long, Boolean> settingsCache = new HashMap<>();
-
-        if (messages != null) {
-            for (TLRPC.Message message : messages) {
-                if (pushMessagesDict.containsKey(message.id)) {
-                    continue;
-                }
-                MessageObject messageObject = new MessageObject(message, null, false);
-                if (isPersonalMessage(messageObject)) {
-                    personal_count++;
-                }
-                long dialog_id = messageObject.getDialogId();
-                long original_dialog_id = dialog_id;
-                if ((messageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_MENTION) != 0) {
-                    dialog_id = messageObject.messageOwner.from_id;
-                }
-                Boolean value = settingsCache.get(dialog_id);
-                if (value == null) {
-                    int notifyOverride = getNotifyOverride(preferences, dialog_id);
-                    value = !(notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || ((int) dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0);
-                    settingsCache.put(dialog_id, value);
-                }
-                if (!value || dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
-                    continue;
-                }
-                pushMessagesDict.put(messageObject.getId(), messageObject);
-                pushMessages.add(0, messageObject);
-                if (original_dialog_id != dialog_id) {
-                    pushDialogsOverrideMention.put(original_dialog_id, 1);
-                }
-            }
-        }
-        for (HashMap.Entry<Long, Integer> entry : dialogs.entrySet()) {
-            long dialog_id = entry.getKey();
-            Boolean value = settingsCache.get(dialog_id);
-            if (value == null) {
-                int notifyOverride = getNotifyOverride(preferences, dialog_id);
-                Integer override = pushDialogsOverrideMention.get(dialog_id);
-                if (override != null && override == 1) {
-                    pushDialogsOverrideMention.put(dialog_id, 0);
-                    notifyOverride = 1;
-                }
-                value = !(notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || ((int) dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0);
-                settingsCache.put(dialog_id, value);
-            }
-            if (!value) {
-                continue;
-            }
-            int count = entry.getValue();
-            pushDialogs.put(dialog_id, count);
-            total_unread_count += count;
-        }
-        if (total_unread_count == 0) {
-            popupMessages.clear();
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
-        }
-        showOrUpdateNotification(SystemClock.uptimeMillis() / 1000 < 60);
-
-        if (preferences.getBoolean("badgeNumber", true)) {
-            setBadge(ApplicationLoader.applicationContext, total_unread_count);
-        }
-    }
 
     public void setBadgeEnabled(boolean enabled) {
         setBadge(ApplicationLoader.applicationContext, enabled ? total_unread_count : 0);
@@ -1098,7 +1028,8 @@ public static void updateServerNotificationsSettings(long dialog_id) {
             ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerChat();
             ((TLRPC.TL_inputNotifyPeer)req.peer).peer.chat_id = -(int)dialog_id;
         } else {
-            TLRPC.User user = MessagesController.getInstance().getUser((int)dialog_id);
+//            TLRPC.User user = MessagesController.getInstance().getUser((int)dialog_id);
+            TLRPC.User user = null;
             if (user == null) {
                 return;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 4ff44e874..4f801465a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -162,7 +162,7 @@ public static void postInitApplication() {
             PostsController.getInstance().setUser(UserConfig.getCurrentUser());
 //            ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
             ConnectionsManager.getInstance().initPushConnection();
-            MessagesController.getInstance().getBlockedUsers(true);
+//            MessagesController.getInstance().getBlockedUsers(true);
         }
 
         ApplicationLoader app = (ApplicationLoader)ApplicationLoader.applicationContext;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 9a0914f32..ead3e936a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -176,7 +176,7 @@ public void run() {
             }
 
             if (datacenters != null) {
-                MessagesController.getInstance().updateTimerProc();
+//                MessagesController.getInstance().updateTimerProc();
                 Datacenter datacenter = datacenterWithId(currentDatacenterId);
                 if (datacenter != null) {
                     if (datacenter.authKey != null) {
@@ -294,7 +294,7 @@ public void run() {
                     }
                     FileLog.e("tmessages", "reset app pause time");
                     if (lastPauseTime != 0 && System.currentTimeMillis() - lastPauseTime > 5000) {
-                        ContactsController.getInstance().checkContacts();
+//                        ContactsController.getInstance().checkContacts();
                     }
                     lastPauseTime = 0;
                     ConnectionsManager.getInstance().applicationMovedToForeground();
@@ -1910,7 +1910,7 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                     if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
                         registerForPush();
                     } else if ((connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
-                        MessagesController.getInstance().getDifference();
+//                        MessagesController.getInstance().getDifference();
                     }
                 }
                 connection.addProcessedSession(newSession.unique_id);
@@ -2346,7 +2346,7 @@ public void run() {
                 resumeNetworkInternal();
             } else {
                 pushMessagesReceived = true;
-                MessagesController.getInstance().processUpdates((TLRPC.Updates) message, false);
+//                MessagesController.getInstance().processUpdates((TLRPC.Updates) message, false);
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
index 24ff95ab8..a09747408 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
@@ -602,7 +602,8 @@ private void sendMessage() {
             String action;
             TLRPC.Chat currentChat;
             if ((int) dialog_id < 0) {
-                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
+//                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
+                currentChat = null;
                 if (currentChat != null && currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
                     action = "bigchat_message";
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 058e75b09..e6fa0d310 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -779,7 +779,7 @@ public void run() {
                                 }
                                 if (error == null && actionBarLayout != null) {
                                     TLRPC.User user = (TLRPC.User) response;
-                                    MessagesController.getInstance().putUser(user, false);
+//                                    MessagesController.getInstance().putUser(user, false);
                                     ArrayList<TLRPC.User> users = new ArrayList<>();
                                     users.add(user);
 //                                    MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
@@ -810,7 +810,7 @@ public void run() {
                                     if (error == null && actionBarLayout != null) {
                                         TLRPC.ChatInvite invite = (TLRPC.ChatInvite) response;
                                         if (invite.chat != null && !invite.chat.left) {
-                                            MessagesController.getInstance().putChat(invite.chat, false);
+//                                            MessagesController.getInstance().putChat(invite.chat, false);
                                             ArrayList<TLRPC.Chat> chats = new ArrayList<>();
                                             chats.add(invite.chat);
 //                                            MessagesStorage.getInstance().putUsersAndChats(null, chats, false, true);
@@ -849,7 +849,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     public void run(final TLObject response, final TLRPC.TL_error error) {
                         if (error == null) {
                             TLRPC.Updates updates = (TLRPC.Updates) response;
-                            MessagesController.getInstance().processUpdates(updates, false);
+//                            MessagesController.getInstance().processUpdates(updates, false);
                         }
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
@@ -864,8 +864,8 @@ public void run() {
                                         if (actionBarLayout != null) {
                                             TLRPC.Updates updates = (TLRPC.Updates) response;
                                             if (!updates.chats.isEmpty()) {
-                                                MessagesController.getInstance().putUsers(updates.users, false);
-                                                MessagesController.getInstance().putChats(updates.chats, false);
+//                                                MessagesController.getInstance().putUsers(updates.users, false);
+//                                                MessagesController.getInstance().putChats(updates.chats, false);
                                                 Bundle args = new Bundle();
                                                 args.putInt("chat_id", updates.chats.get(0).id);
                                             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 68a233c1d..e8f9906e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -778,14 +778,11 @@ private void updateInterfaceForCurrentMessage(int move) {
         if ((int)dialog_id != 0) {
             int lower_id = (int)dialog_id;
             if (lower_id > 0) {
-                currentUser = MessagesController.getInstance().getUser(lower_id);
+//                currentUser = MessagesController.getInstance().getUser(lower_id);
             } else {
-                currentChat = MessagesController.getInstance().getChat(-lower_id);
-                currentUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
+//                currentChat = MessagesController.getInstance().getChat(-lower_id);
+//                currentUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
             }
-        } else {
-            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
-            currentUser = MessagesController.getInstance().getUser(encryptedChat.user_id);
         }
 
         if (currentChat != null && currentUser != null) {
@@ -826,15 +823,16 @@ private void updateSubtitle() {
         } else {
             nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
         }
-        CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
+        CharSequence printString = "";
         if (printString == null || printString.length() == 0) {
             lastPrintString = null;
             setTypingAnimation(false);
-            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+//            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            TLRPC.User user = null;
             if (user != null) {
                 currentUser = user;
             }
-            onlineTextView.setText(LocaleController.formatUserStatus(currentUser));
+//            onlineTextView.setText(LocaleController.formatUserStatus(currentUser));
         } else {
             lastPrintString = printString;
             onlineTextView.setText(printString);
@@ -846,7 +844,8 @@ private void checkAndUpdateAvatar() {
         TLRPC.FileLocation newPhoto = null;
         AvatarDrawable avatarDrawable = null;
         if (currentChat != null) {
-            TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
+//            TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
+            TLRPC.Chat chat = null;
             if (chat == null) {
                 return;
             }
@@ -856,7 +855,8 @@ private void checkAndUpdateAvatar() {
             }
             avatarDrawable = new AvatarDrawable(currentChat);
         } else if (currentUser != null) {
-            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+//            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            TLRPC.User user = null;
             if (user == null) {
                 return;
             }
@@ -877,7 +877,8 @@ private void setTypingAnimation(boolean start) {
         }
         if (start) {
             try {
-                Integer type = MessagesController.getInstance().printingStringsTypes.get(currentMessageObject.getDialogId());
+//                Integer type = MessagesController.getInstance().printingStringsTypes.get(currentMessageObject.getDialogId());
+                Integer type = 0;
                 if (type == 0) {
                     onlineTextView.setCompoundDrawablesWithIntrinsicBounds(typingDotsDrawable, null, null, null);
                     onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
@@ -936,7 +937,8 @@ public void didReceivedNotification(int id, Object... args) {
                 checkAndUpdateAvatar();
             }
             if ((updateMask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
-                CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
+//                CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
+                CharSequence printString = "";
                 if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
                     updateSubtitle();
                 }
