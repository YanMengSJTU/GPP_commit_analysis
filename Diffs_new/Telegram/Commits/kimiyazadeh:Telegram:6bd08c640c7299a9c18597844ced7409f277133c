diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
index 416743649..1b4c9edf8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 2.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2015.
  */
 
 package org.telegram.ui;
@@ -415,7 +415,7 @@ private void checkIfMusicDownloaded(MessageObject messageObject) {
     private void updateTitle(boolean shutdown) {
         MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
         if (messageObject == null && shutdown || messageObject != null && !messageObject.isMusic()) {
-            if (parentLayout != null && !parentLayout.fragmentsStack.isEmpty() && parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 1) == this) {
+            if (!parentLayout.fragmentsStack.isEmpty() && parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 1) == this) {
                 finishFragment();
             } else {
                 removeSelfFromStack();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
index aaf4161af..286929828 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AudioSelectActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 2.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2015.
  */
 
 package org.telegram.ui;
@@ -77,7 +77,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
         if (playingAudio != null && MediaController.getInstance().isPlayingAudio(playingAudio)) {
-            MediaController.getInstance().cleanupPlayer(true, true);
+            MediaController.getInstance().clenupPlayer(true, true);
         }
     }
 
@@ -85,7 +85,7 @@ public void onFragmentDestroy() {
     public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("AttachMusic", R.string.AttachMusic));
+        actionBar.setTitle(LocaleController.getString("AttachAudio", R.string.AttachAudio));
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
@@ -217,7 +217,7 @@ public void run() {
                         File file = new File(audioEntry.path);
 
                         TLRPC.TL_message message = new TLRPC.TL_message();
-                        message.out = true;
+                        message.flags = TLRPC.MESSAGE_FLAG_OUT;
                         message.id = id;
                         message.to_id = new TLRPC.TL_peerUser();
                         message.to_id.user_id = message.from_id = UserConfig.getClientUserId();
@@ -243,7 +243,6 @@ public void run() {
                         attributeAudio.duration = audioEntry.duration;
                         attributeAudio.title = audioEntry.title;
                         attributeAudio.performer = audioEntry.author;
-                        attributeAudio.flags |= 3;
                         message.media.document.attributes.add(attributeAudio);
 
                         TLRPC.TL_documentAttributeFilename fileName = new TLRPC.TL_documentAttributeFilename();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index efde21e42..c5d1bf60d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 1.3.2.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013.
  */
 
 package org.telegram.ui;
@@ -263,19 +263,11 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    view = new UserCell(mContext, 1, 0, false);
+                    view = new UserCell(mContext, 1);
                 }
                 TLRPC.User user = MessagesController.getInstance().getUser(MessagesController.getInstance().blockedUsers.get(i));
                 if (user != null) {
-                    String number;
-                    if (user.bot) {
-                        number = LocaleController.getString("Bot", R.string.Bot).substring(0, 1).toUpperCase() + LocaleController.getString("Bot", R.string.Bot).substring(1);
-                    } else if (user.phone != null && user.phone.length() != 0) {
-                        number = PhoneFormat.getInstance().format("+" + user.phone);
-                    } else {
-                        number = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
-                    }
-                    ((UserCell) view).setData(user, null, number, 0);
+                    ((UserCell) view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
                 }
             } else if (type == 1) {
                 if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
index cff4907c0..ac1fcbdb2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 1.3.2.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013.
  */
 
 package org.telegram.ui;
@@ -137,18 +137,9 @@ public void onResume() {
     }
 
     @Override
-    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
-        if (isOpen) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (firstNameField != null) {
-                        firstNameField.requestFocus();
-                        AndroidUtilities.showKeyboard(firstNameField);
-                    }
-                }
-            }, 100);
-        }
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
     }
 
     private void saveName() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index 3af498a7f..9c1c9712e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 1.3.2.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013.
  */
 
 package org.telegram.ui;
@@ -166,7 +166,6 @@ private void saveName() {
             return;
         }
         TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
-        req.flags = 3;
         currentUser.first_name = req.first_name = newFirst;
         currentUser.last_name = req.last_name = newLast;
         TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
@@ -186,17 +185,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
     }
 
     @Override
-    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
-        if (isOpen) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (firstNameField != null) {
-                        firstNameField.requestFocus();
-                        AndroidUtilities.showKeyboard(firstNameField);
-                    }
-                }
-            }, 100);
-        }
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
index 037b50730..5e3ba8e2a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
@@ -1,32 +1,24 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 2.0.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2014.
  */
 
 package org.telegram.ui;
 
-import android.Manifest;
 import android.annotation.SuppressLint;
-import android.app.Activity;
 import android.app.AlertDialog;
-import android.app.Dialog;
 import android.app.ProgressDialog;
 import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.os.Build;
 import android.os.Bundle;
 import android.telephony.TelephonyManager;
 import android.text.Editable;
 import android.text.InputFilter;
 import android.text.InputType;
+import android.text.SpannableStringBuilder;
+import android.text.Spanned;
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.util.TypedValue;
@@ -38,7 +30,6 @@
 import android.widget.AdapterView;
 import android.widget.EditText;
 import android.widget.FrameLayout;
-import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
@@ -65,9 +56,9 @@
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.AnimationCompat.ViewProxy;
-import org.telegram.ui.Components.HintEditText;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.SlideView;
+import org.telegram.ui.Components.TypefaceSpan;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
@@ -82,21 +73,17 @@
 public class ChangePhoneActivity extends BaseFragment {
 
     private int currentViewNum = 0;
-    private SlideView[] views = new SlideView[5];
+    private SlideView[] views = new SlideView[2];
     private ProgressDialog progressDialog;
-    private Dialog permissionsDialog;
-    private ArrayList<String> permissionsItems = new ArrayList<>();
-    private boolean checkPermissions = true;
-    private View doneButton;
 
     private final static int done_button = 1;
 
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
-        for (int a = 0; a < views.length; a++) {
-            if (views[a] != null) {
-                views[a].onDestroyActivity();
+        for (SlideView v : views) {
+            if (v != null) {
+                v.onDestroyActivity();
             }
         }
         if (progressDialog != null) {
@@ -126,25 +113,39 @@ public void onItemClick(int id) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
         fragmentView = new ScrollView(context);
         ScrollView scrollView = (ScrollView) fragmentView;
         scrollView.setFillViewport(true);
 
         FrameLayout frameLayout = new FrameLayout(context);
-        scrollView.addView(frameLayout, LayoutHelper.createScroll(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT));
+        scrollView.addView(frameLayout);
+        ScrollView.LayoutParams layoutParams = (ScrollView.LayoutParams) frameLayout.getLayoutParams();
+        layoutParams.width = ScrollView.LayoutParams.MATCH_PARENT;
+        layoutParams.height = ScrollView.LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        frameLayout.setLayoutParams(layoutParams);
 
         views[0] = new PhoneView(context);
-        views[1] = new LoginActivitySmsView(context, 1);
-        views[2] = new LoginActivitySmsView(context, 2);
-        views[3] = new LoginActivitySmsView(context, 3);
-        views[4] = new LoginActivitySmsView(context, 4);
-
-        for (int a = 0; a < views.length; a++) {
-            views[a].setVisibility(a == 0 ? View.VISIBLE : View.GONE);
-            frameLayout.addView(views[a], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, a == 0 ? LayoutHelper.WRAP_CONTENT : LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 26 : 18, 30, AndroidUtilities.isTablet() ? 26 : 18, 0));
-            //LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0)
+        views[0].setVisibility(View.VISIBLE);
+        frameLayout.addView(views[0], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0));
+
+        views[1] = new LoginActivitySmsView(context);
+        views[1].setVisibility(View.GONE);
+        frameLayout.addView(views[1], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0));
+
+        try {
+            if (views[0] == null || views[1] == null) {
+                FrameLayout parent = (FrameLayout) ((ScrollView) fragmentView).getChildAt(0);
+                for (int a = 0; a < views.length; a++) {
+                    if (views[a] == null) {
+                        views[a] = (SlideView) parent.getChildAt(a);
+                    }
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
         }
 
         actionBar.setTitle(views[0].getHeaderName());
@@ -158,44 +159,25 @@ public void onResume() {
         AndroidUtilities.requestAdjustResize(getParentActivity(), classGuid);
     }
 
-    @Override
-    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
-        if (requestCode == 6) {
-            checkPermissions = false;
-            if (currentViewNum == 0) {
-                views[currentViewNum].onNextPressed();
-            }
-        }
-    }
-
-    @Override
-    protected void onDialogDismiss(Dialog dialog) {
-        if (Build.VERSION.SDK_INT >= 23 && dialog == permissionsDialog && !permissionsItems.isEmpty()) {
-            getParentActivity().requestPermissions(permissionsItems.toArray(new String[permissionsItems.size()]), 6);
-        }
-    }
-
     @Override
     public boolean onBackPressed() {
         if (currentViewNum == 0) {
-            for (int a = 0; a < views.length; a++) {
-                if (views[a] != null) {
-                    views[a].onDestroyActivity();
+            for (SlideView v : views) {
+                if (v != null) {
+                    v.onDestroyActivity();
                 }
             }
             return true;
-        } else {
-            views[currentViewNum].onBackPressed();
+        } else if (currentViewNum == 1) {
             setPage(0, true, null, true);
         }
         return false;
     }
 
     @Override
-    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
-        if (isOpen) {
-            views[currentViewNum].onShow();
-        }
+    public void onOpenAnimationEnd() {
+        super.onOpenAnimationEnd();
+        views[currentViewNum].onShow();
     }
 
     public void needShowAlert(final String text) {
@@ -233,14 +215,6 @@ public void needHideProgress() {
     }
 
     public void setPage(int page, boolean animated, Bundle params, boolean back) {
-        if (page == 3) {
-            doneButton.setVisibility(View.GONE);
-        } else {
-            if (page == 0) {
-                checkPermissions = true;
-            }
-            doneButton.setVisibility(View.VISIBLE);
-        }
         if(android.os.Build.VERSION.SDK_INT > 10) {
             final SlideView outView = views[currentViewNum];
             final SlideView newView = views[page];
@@ -281,44 +255,10 @@ public void onAnimationEnd(Object animation) {
         }
     }
 
-    private void fillNextCodeParams(Bundle params, TLRPC.TL_auth_sentCode res) {
-        params.putString("phoneHash", res.phone_code_hash);
-        if (res.next_type instanceof TLRPC.TL_auth_codeTypeCall) {
-            params.putInt("nextType", 4);
-        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeFlashCall) {
-            params.putInt("nextType", 3);
-        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeSms) {
-            params.putInt("nextType", 2);
-        }
-        if (res.type instanceof TLRPC.TL_auth_sentCodeTypeApp) {
-            params.putInt("type", 1);
-            params.putInt("length", res.type.length);
-            setPage(1, true, params, false);
-        } else {
-            if (res.timeout == 0) {
-                res.timeout = 60;
-            }
-            params.putInt("timeout", res.timeout * 1000);
-            if (res.type instanceof TLRPC.TL_auth_sentCodeTypeCall) {
-                params.putInt("type", 4);
-                params.putInt("length", res.type.length);
-                setPage(4, true, params, false);
-            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeFlashCall) {
-                params.putInt("type", 3);
-                params.putString("pattern", res.type.pattern);
-                setPage(3, true, params, false);
-            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeSms) {
-                params.putInt("type", 2);
-                params.putInt("length", res.type.length);
-                setPage(2, true, params, false);
-            }
-        }
-    }
-
     public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
 
         private EditText codeField;
-        private HintEditText phoneField;
+        private EditText phoneField;
         private TextView countryButton;
 
         private int countryState = 0;
@@ -326,7 +266,6 @@ private void fillNextCodeParams(Bundle params, TLRPC.TL_auth_sentCode res) {
         private ArrayList<String> countriesArray = new ArrayList<>();
         private HashMap<String, String> countriesMap = new HashMap<>();
         private HashMap<String, String> codesMap = new HashMap<>();
-        private HashMap<String, String> phoneFormatMap = new HashMap<>();
 
         private boolean ignoreSelection = false;
         private boolean ignoreOnTextChange = false;
@@ -345,9 +284,16 @@ public PhoneView(Context context) {
             countryButton.setMaxLines(1);
             countryButton.setSingleLine(true);
             countryButton.setEllipsize(TextUtils.TruncateAt.END);
-            countryButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_HORIZONTAL);
+            countryButton.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
             countryButton.setBackgroundResource(R.drawable.spinner_states);
-            addView(countryButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 0, 0, 0, 14));
+            addView(countryButton);
+            LayoutParams layoutParams = (LayoutParams) countryButton.getLayoutParams();
+            layoutParams.width = LayoutHelper.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.leftMargin = AndroidUtilities.dp(20);
+            layoutParams.rightMargin = AndroidUtilities.dp(20);
+            layoutParams.bottomMargin = AndroidUtilities.dp(14);
+            countryButton.setLayoutParams(layoutParams);
             countryButton.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View view) {
@@ -356,14 +302,7 @@ public void onClick(View view) {
                         @Override
                         public void didSelectCountry(String name) {
                             selectCountry(name);
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    AndroidUtilities.showKeyboard(phoneField);
-                                }
-                            }, 300);
                             phoneField.requestFocus();
-                            phoneField.setSelection(phoneField.length());
                         }
                     });
                     presentFragment(fragment);
@@ -373,17 +312,34 @@ public void run() {
             View view = new View(context);
             view.setPadding(AndroidUtilities.dp(12), 0, AndroidUtilities.dp(12), 0);
             view.setBackgroundColor(0xffdbdbdb);
-            addView(view, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1, 4, -17.5f, 4, 0));
+            addView(view);
+            layoutParams = (LayoutParams) view.getLayoutParams();
+            layoutParams.width = LayoutHelper.MATCH_PARENT;
+            layoutParams.height = 1;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.topMargin = AndroidUtilities.dp(-17.5f);
+            view.setLayoutParams(layoutParams);
 
             LinearLayout linearLayout = new LinearLayout(context);
             linearLayout.setOrientation(HORIZONTAL);
-            addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 20, 0, 0));
+            addView(linearLayout);
+            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
+            layoutParams.width = LayoutHelper.MATCH_PARENT;
+            layoutParams.height = LayoutHelper.WRAP_CONTENT;
+            layoutParams.topMargin = AndroidUtilities.dp(20);
+            linearLayout.setLayoutParams(layoutParams);
 
             TextView textView = new TextView(context);
             textView.setText("+");
             textView.setTextColor(0xff212121);
             textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            linearLayout.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
+            linearLayout.addView(textView);
+            layoutParams = (LayoutParams) textView.getLayoutParams();
+            layoutParams.width = LayoutHelper.WRAP_CONTENT;
+            layoutParams.height = LayoutHelper.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            textView.setLayoutParams(layoutParams);
 
             codeField = new EditText(context);
             codeField.setInputType(InputType.TYPE_CLASS_PHONE);
@@ -395,9 +351,15 @@ public void run() {
             codeField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
             codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
             InputFilter[] inputFilters = new InputFilter[1];
-            inputFilters[0] = new InputFilter.LengthFilter(5);
+            inputFilters[0] = new InputFilter.LengthFilter(4);
             codeField.setFilters(inputFilters);
-            linearLayout.addView(codeField, LayoutHelper.createLinear(55, 36, -9, 0, 16, 0));
+            linearLayout.addView(codeField);
+            layoutParams = (LayoutParams) codeField.getLayoutParams();
+            layoutParams.width = AndroidUtilities.dp(55);
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.rightMargin = AndroidUtilities.dp(16);
+            layoutParams.leftMargin = AndroidUtilities.dp(-9);
+            codeField.setLayoutParams(layoutParams);
             codeField.addTextChangedListener(new TextWatcher() {
                 @Override
                 public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
@@ -412,6 +374,7 @@ public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                 @Override
                 public void afterTextChanged(Editable editable) {
                     if (ignoreOnTextChange) {
+                        ignoreOnTextChange = false;
                         return;
                     }
                     ignoreOnTextChange = true;
@@ -419,59 +382,27 @@ public void afterTextChanged(Editable editable) {
                     codeField.setText(text);
                     if (text.length() == 0) {
                         countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                        phoneField.setHintText(null);
                         countryState = 1;
                     } else {
-                        String country;
-                        boolean ok = false;
-                        String textToSet = null;
-                        if (text.length() > 4) {
-                            ignoreOnTextChange = true;
-                            for (int a = 4; a >= 1; a--) {
-                                String sub = text.substring(0, a);
-                                country = codesMap.get(sub);
-                                if (country != null) {
-                                    ok = true;
-                                    textToSet = text.substring(a, text.length()) + phoneField.getText().toString();
-                                    codeField.setText(text = sub);
-                                    break;
-                                }
-                            }
-                            if (!ok) {
-                                ignoreOnTextChange = true;
-                                textToSet = text.substring(1, text.length()) + phoneField.getText().toString();
-                                codeField.setText(text = text.substring(0, 1));
-                            }
-                        }
-                        country = codesMap.get(text);
+                        String country = codesMap.get(text);
                         if (country != null) {
                             int index = countriesArray.indexOf(country);
                             if (index != -1) {
                                 ignoreSelection = true;
                                 countryButton.setText(countriesArray.get(index));
-                                String hint = phoneFormatMap.get(text);
-                                phoneField.setHintText(hint != null ? hint.replace('X', '–') : null);
+
+                                updatePhoneField();
                                 countryState = 0;
                             } else {
                                 countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                                phoneField.setHintText(null);
                                 countryState = 2;
                             }
                         } else {
                             countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                            phoneField.setHintText(null);
                             countryState = 2;
                         }
-                        if (!ok) {
-                            codeField.setSelection(codeField.getText().length());
-                        }
-                        if (textToSet != null) {
-                            phoneField.requestFocus();
-                            phoneField.setText(textToSet);
-                            phoneField.setSelection(phoneField.length());
-                        }
+                        codeField.setSelection(codeField.getText().length());
                     }
-                    ignoreOnTextChange = false;
                 }
             });
             codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
@@ -479,14 +410,13 @@ public void afterTextChanged(Editable editable) {
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     if (i == EditorInfo.IME_ACTION_NEXT) {
                         phoneField.requestFocus();
-                        phoneField.setSelection(phoneField.length());
                         return true;
                     }
                     return false;
                 }
             });
 
-            phoneField = new HintEditText(context);
+            phoneField = new EditText(context);
             phoneField.setInputType(InputType.TYPE_CLASS_PHONE);
             phoneField.setTextColor(0xff212121);
             phoneField.setHintTextColor(0xff979797);
@@ -496,25 +426,43 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             phoneField.setMaxLines(1);
             phoneField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
             phoneField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            linearLayout.addView(phoneField, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 36));
+            linearLayout.addView(phoneField);
+            layoutParams = (LayoutParams) phoneField.getLayoutParams();
+            layoutParams.width = LayoutHelper.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            phoneField.setLayoutParams(layoutParams);
             phoneField.addTextChangedListener(new TextWatcher() {
-
-                private int characterAction = -1;
-                private int actionPosition;
-
                 @Override
                 public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-                    if (count == 0 && after == 1) {
-                        characterAction = 1;
-                    } else if (count == 1 && after == 0) {
-                        if (s.charAt(start) == ' ' && start > 0) {
-                            characterAction = 3;
-                            actionPosition = start - 1;
-                        } else {
-                            characterAction = 2;
+                    if (ignoreOnPhoneChange) {
+                        return;
+                    }
+                    if (count == 1 && after == 0 && s.length() > 1) {
+                        String phoneChars = "0123456789";
+                        String str = s.toString();
+                        String substr = str.substring(start, start + 1);
+                        if (!phoneChars.contains(substr)) {
+                            ignoreOnPhoneChange = true;
+                            StringBuilder builder = new StringBuilder(str);
+                            int toDelete = 0;
+                            for (int a = start; a >= 0; a--) {
+                                substr = str.substring(a, a + 1);
+                                if(phoneChars.contains(substr)) {
+                                    break;
+                                }
+                                toDelete++;
+                            }
+                            builder.delete(Math.max(0, start - toDelete), start + 1);
+                            str = builder.toString();
+                            if (PhoneFormat.strip(str).length() == 0) {
+                                phoneField.setText("");
+                            } else {
+                                phoneField.setText(str);
+                                updatePhoneField();
+                            }
+                            ignoreOnPhoneChange = false;
                         }
-                    } else {
-                        characterAction = -1;
                     }
                 }
 
@@ -528,47 +476,7 @@ public void afterTextChanged(Editable s) {
                     if (ignoreOnPhoneChange) {
                         return;
                     }
-                    int start = phoneField.getSelectionStart();
-                    String phoneChars = "0123456789";
-                    String str = phoneField.getText().toString();
-                    if (characterAction == 3) {
-                        str = str.substring(0, actionPosition) + str.substring(actionPosition + 1, str.length());
-                        start--;
-                    }
-                    StringBuilder builder = new StringBuilder(str.length());
-                    for (int a = 0; a < str.length(); a++) {
-                        String ch = str.substring(a, a + 1);
-                        if (phoneChars.contains(ch)) {
-                            builder.append(ch);
-                        }
-                    }
-                    ignoreOnPhoneChange = true;
-                    String hint = phoneField.getHintText();
-                    if (hint != null) {
-                        for (int a = 0; a < builder.length(); a++) {
-                            if (a < hint.length()) {
-                                if (hint.charAt(a) == ' ') {
-                                    builder.insert(a, ' ');
-                                    a++;
-                                    if (start == a && characterAction != 2 && characterAction != 3) {
-                                        start++;
-                                    }
-                                }
-                            } else {
-                                builder.insert(a, ' ');
-                                if (start == a + 1 && characterAction != 2 && characterAction != 3) {
-                                    start++;
-                                }
-                                break;
-                            }
-                        }
-                    }
-                    phoneField.setText(builder);
-                    if (start >= 0) {
-                        phoneField.setSelection(start <= phoneField.length() ? start : phoneField.length());
-                    }
-                    phoneField.onTextChange();
-                    ignoreOnPhoneChange = false;
+                    updatePhoneField();
                 }
             });
             phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
@@ -586,9 +494,18 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             textView.setText(LocaleController.getString("ChangePhoneHelp", R.string.ChangePhoneHelp));
             textView.setTextColor(0xff757575);
             textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            textView.setGravity(Gravity.LEFT);
             textView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 28, 0, 10));
+            addView(textView);
+            layoutParams = (LayoutParams) textView.getLayoutParams();
+            layoutParams.width = LayoutHelper.WRAP_CONTENT;
+            layoutParams.height = LayoutHelper.WRAP_CONTENT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            layoutParams.topMargin = AndroidUtilities.dp(28);
+            layoutParams.bottomMargin = AndroidUtilities.dp(10);
+            layoutParams.gravity = Gravity.LEFT;
+            textView.setLayoutParams(layoutParams);
 
             HashMap<String, String> languageMap = new HashMap<>();
             try {
@@ -599,9 +516,6 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     countriesArray.add(0, args[2]);
                     countriesMap.put(args[2], args[0]);
                     codesMap.put(args[0], args[2]);
-                    if (args.length > 3) {
-                        phoneFormatMap.put(args[0], args[3]);
-                    }
                     languageMap.put(args[1], args[2]);
                 }
                 reader.close();
@@ -619,7 +533,7 @@ public int compare(String lhs, String rhs) {
             String country = null;
 
             try {
-                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
                 if (telephonyManager != null) {
                     country = telephonyManager.getSimCountryIso().toUpperCase();
                 }
@@ -639,14 +553,12 @@ public int compare(String lhs, String rhs) {
             }
             if (codeField.length() == 0) {
                 countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                phoneField.setHintText(null);
                 countryState = 1;
             }
 
             if (codeField.length() != 0) {
                 AndroidUtilities.showKeyboard(phoneField);
                 phoneField.requestFocus();
-                phoneField.setSelection(phoneField.length());
             } else {
                 AndroidUtilities.showKeyboard(codeField);
                 codeField.requestFocus();
@@ -657,16 +569,39 @@ public void selectCountry(String name) {
             int index = countriesArray.indexOf(name);
             if (index != -1) {
                 ignoreOnTextChange = true;
-                String code = countriesMap.get(name);
-                codeField.setText(code);
+                codeField.setText(countriesMap.get(name));
                 countryButton.setText(name);
-                String hint = phoneFormatMap.get(code);
-                phoneField.setHintText(hint != null ? hint.replace('X', '–') : null);
                 countryState = 0;
-                ignoreOnTextChange = false;
             }
         }
 
+        private void updatePhoneField() {
+            ignoreOnPhoneChange = true;
+            try {
+                String codeText = codeField.getText().toString();
+                String phone = PhoneFormat.getInstance().format("+" + codeText + phoneField.getText().toString());
+                int idx = phone.indexOf(" ");
+                if (idx != -1) {
+                    String resultCode = PhoneFormat.stripExceptNumbers(phone.substring(0, idx));
+                    if (!codeText.equals(resultCode)) {
+                        phone = PhoneFormat.getInstance().format(phoneField.getText().toString()).trim();
+                        phoneField.setText(phone);
+                        int len = phoneField.length();
+                        phoneField.setSelection(phoneField.length());
+                    } else {
+                        phoneField.setText(phone.substring(idx).trim());
+                        int len = phoneField.length();
+                        phoneField.setSelection(phoneField.length());
+                    }
+                } else {
+                    phoneField.setSelection(phoneField.length());
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            ignoreOnPhoneChange = false;
+        }
+
         @Override
         public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
             if (ignoreSelection) {
@@ -676,7 +611,7 @@ public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l)
             ignoreOnTextChange = true;
             String str = countriesArray.get(i);
             codeField.setText(countriesMap.get(str));
-            ignoreOnTextChange = false;
+            updatePhoneField();
         }
 
         @Override
@@ -686,46 +621,9 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
         @Override
         public void onNextPressed() {
-            if (getParentActivity() == null || nextPressed) {
+            if (nextPressed) {
                 return;
             }
-            TelephonyManager tm = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
-            boolean simcardAvailable = tm.getSimState() != TelephonyManager.SIM_STATE_ABSENT && tm.getPhoneType() != TelephonyManager.PHONE_TYPE_NONE;
-            boolean allowCall = true;
-            if (Build.VERSION.SDK_INT >= 23 && simcardAvailable) {
-                allowCall = getParentActivity().checkSelfPermission(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED;
-                boolean allowSms = getParentActivity().checkSelfPermission(Manifest.permission.RECEIVE_SMS) == PackageManager.PERMISSION_GRANTED;
-                if (checkPermissions) {
-                    permissionsItems.clear();
-                    if (!allowCall) {
-                        permissionsItems.add(Manifest.permission.READ_PHONE_STATE);
-                    }
-                    if (!allowSms) {
-                        permissionsItems.add(Manifest.permission.RECEIVE_SMS);
-                    }
-                    if (!permissionsItems.isEmpty()) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                        if (preferences.getBoolean("firstlogin", true) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.READ_PHONE_STATE) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.RECEIVE_SMS)) {
-                            preferences.edit().putBoolean("firstlogin", false).commit();
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                            if (permissionsItems.size() == 2) {
-                                builder.setMessage(LocaleController.getString("AllowReadCallAndSms", R.string.AllowReadCallAndSms));
-                            } else if (!allowSms) {
-                                builder.setMessage(LocaleController.getString("AllowReadSms", R.string.AllowReadSms));
-                            } else {
-                                builder.setMessage(LocaleController.getString("AllowReadCall", R.string.AllowReadCall));
-                            }
-                            permissionsDialog = showDialog(builder.create());
-                        } else {
-                            getParentActivity().requestPermissions(permissionsItems.toArray(new String[permissionsItems.size()]), 6);
-                        }
-                        return;
-                    }
-                }
-            }
-
             if (countryState == 1) {
                 needShowAlert(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
                 return;
@@ -740,20 +638,10 @@ public void onNextPressed() {
             TLRPC.TL_account_sendChangePhoneCode req = new TLRPC.TL_account_sendChangePhoneCode();
             String phone = PhoneFormat.stripExceptNumbers("" + codeField.getText() + phoneField.getText());
             req.phone_number = phone;
-            req.allow_flashcall = simcardAvailable && allowCall;
-            if (req.allow_flashcall) {
-                String number = tm.getLine1Number();
-                req.current_number = number != null && number.length() != 0 && (phone.contains(number) || number.contains(phone));
-            }
+            final String phone2 = "+" + codeField.getText() + " " + phoneField.getText();
 
             final Bundle params = new Bundle();
-            params.putString("phone", "+" + codeField.getText() + phoneField.getText());
-            try {
-                params.putString("ephone", "+" + PhoneFormat.stripExceptNumbers(codeField.getText().toString()) + " " + PhoneFormat.stripExceptNumbers(phoneField.getText().toString()));
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                params.putString("ephone", "+" + phone);
-            }
+            params.putString("phone", phone2);
             params.putString("phoneFormated", phone);
             nextPressed = true;
             needShowProgress();
@@ -765,7 +653,10 @@ public void run(final TLObject response, final TLRPC.TL_error error) {
                         public void run() {
                             nextPressed = false;
                             if (error == null) {
-                                fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
+                                TLRPC.TL_account_sentChangePhoneCode res = (TLRPC.TL_account_sentChangePhoneCode)response;
+                                params.putString("phoneHash", res.phone_code_hash);
+                                params.putInt("calltime", res.send_call_timeout * 1000);
+                                setPage(1, true, params, false);
                             } else {
                                 if (error.text != null) {
                                     if (error.text.contains("PHONE_NUMBER_INVALID")) {
@@ -777,7 +668,7 @@ public void run() {
                                     } else if (error.text.startsWith("FLOOD_WAIT")) {
                                         needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
                                     } else if (error.text.startsWith("PHONE_NUMBER_OCCUPIED")) {
-                                        needShowAlert(LocaleController.formatString("ChangePhoneNumberOccupied", R.string.ChangePhoneNumberOccupied, params.getString("phone")));
+                                        needShowAlert(LocaleController.formatString("ChangePhoneNumberOccupied", R.string.ChangePhoneNumberOccupied, phone2));
                                     } else {
                                         needShowAlert(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
                                     }
@@ -794,14 +685,8 @@ public void run() {
         public void onShow() {
             super.onShow();
             if (phoneField != null) {
-                if (codeField.length() != 0) {
-                    AndroidUtilities.showKeyboard(phoneField);
-                    phoneField.requestFocus();
-                    phoneField.setSelection(phoneField.length());
-                } else {
-                    AndroidUtilities.showKeyboard(codeField);
-                    codeField.requestFocus();
-                }
+                AndroidUtilities.showKeyboard(phoneField);
+                phoneField.setSelection(phoneField.length());
             }
         }
 
@@ -813,88 +698,42 @@ public String getHeaderName() {
 
     public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
 
-        private class ProgressView extends View {
-
-            private Paint paint = new Paint();
-            private Paint paint2 = new Paint();
-            private float progress;
-
-            public ProgressView(Context context) {
-                super(context);
-                paint.setColor(0xffe1eaf2);
-                paint2.setColor(0xff62a0d0);
-            }
-
-            public void setProgress(float value) {
-                progress = value;
-                invalidate();
-            }
-
-            @Override
-            protected void onDraw(Canvas canvas) {
-                int start = (int) (getMeasuredWidth() * progress);
-                canvas.drawRect(0, 0, start, getMeasuredHeight(), paint2);
-                canvas.drawRect(start, 0, getMeasuredWidth(), getMeasuredHeight(), paint);
-            }
-        }
-
-        private String phone;
         private String phoneHash;
         private String requestPhone;
-        private String emailPhone;
         private EditText codeField;
         private TextView confirmTextView;
         private TextView timeText;
-        private TextView problemText;
         private Bundle currentParams;
-        private ProgressView progressView;
 
         private Timer timeTimer;
         private Timer codeTimer;
-        private int openTime;
         private final Object timerSync = new Object();
         private volatile int time = 60000;
         private volatile int codeTime = 15000;
         private double lastCurrentTime;
         private double lastCodeTime;
-        private boolean ignoreOnTextChange;
-        private boolean waitingForEvent;
-        private boolean nextPressed;
+        private boolean waitingForSms = false;
+        private boolean nextPressed = false;
         private String lastError = "";
-        private int currentType;
-        private int nextType;
-        private String pattern = "*";
-        private int length;
-        private int timeout;
 
-        public LoginActivitySmsView(Context context, final int type) {
+        public LoginActivitySmsView(Context context) {
             super(context);
 
-            currentType = type;
             setOrientation(VERTICAL);
 
             confirmTextView = new TextView(context);
             confirmTextView.setTextColor(0xff757575);
             confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            confirmTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            confirmTextView.setGravity(Gravity.LEFT);
             confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-
-            if (currentType == 3) {
-                FrameLayout frameLayout = new FrameLayout(context);
-
-                ImageView imageView = new ImageView(context);
-                imageView.setImageResource(R.drawable.phone_activate);
-                if (LocaleController.isRTL) {
-                    frameLayout.addView(imageView, LayoutHelper.createFrame(64, 76, Gravity.LEFT | Gravity.CENTER_VERTICAL, 2, 2, 0, 0));
-                    frameLayout.addView(confirmTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 64 + 18, 0, 0, 0));
-                } else {
-                    frameLayout.addView(confirmTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 0, 64 + 18, 0));
-                    frameLayout.addView(imageView, LayoutHelper.createFrame(64, 76, Gravity.RIGHT | Gravity.CENTER_VERTICAL, 0, 2, 0, 2));
-                }
-                addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-            } else {
-                addView(confirmTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-            }
+            addView(confirmTextView);
+            LayoutParams layoutParams = (LayoutParams) confirmTextView.getLayoutParams();
+            layoutParams.width = LayoutHelper.WRAP_CONTENT;
+            layoutParams.height = LayoutHelper.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.LEFT;
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            confirmTextView.setLayoutParams(layoutParams);
 
             codeField = new EditText(context);
             codeField.setTextColor(0xff212121);
@@ -906,28 +745,15 @@ public LoginActivitySmsView(Context context, final int type) {
             codeField.setInputType(InputType.TYPE_CLASS_PHONE);
             codeField.setMaxLines(1);
             codeField.setPadding(0, 0, 0, 0);
-            addView(codeField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, Gravity.CENTER_HORIZONTAL, 0, 20, 0, 0));
-            codeField.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-
-                }
-
-                @Override
-                public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-                }
-
-                @Override
-                public void afterTextChanged(Editable s) {
-                    if (ignoreOnTextChange) {
-                        return;
-                    }
-                    if (length != 0 && codeField.length() == length) {
-                        onNextPressed();
-                    }
-                }
-            });
+            addView(codeField);
+            layoutParams = (LayoutParams) codeField.getLayoutParams();
+            layoutParams.width = LayoutHelper.MATCH_PARENT;
+            layoutParams.height = AndroidUtilities.dp(36);
+            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
+            layoutParams.topMargin = AndroidUtilities.dp(20);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            codeField.setLayoutParams(layoutParams);
             codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -938,133 +764,55 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
-            if (currentType == 3) {
-                codeField.setEnabled(false);
-                codeField.setInputType(InputType.TYPE_NULL);
-                codeField.setVisibility(GONE);
-            }
 
             timeText = new TextView(context);
             timeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             timeText.setTextColor(0xff757575);
             timeText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            timeText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            addView(timeText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 30, 0, 0));
-
-            if (currentType == 3) {
-                progressView = new ProgressView(context);
-                addView(progressView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 3, 0, 12, 0, 0));
-            }
-
-            problemText = new TextView(context);
-            problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
-            problemText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            problemText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            problemText.setTextColor(0xff4d83b3);
-            problemText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            problemText.setPadding(0, AndroidUtilities.dp(2), 0, AndroidUtilities.dp(12));
-            addView(problemText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 20, 0, 0));
-            problemText.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (nextPressed) {
-                        return;
-                    }
-                    if (nextType != 0 && nextType != 4) {
-                        resendCode();
-                    } else {
-                        try {
-                            PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                            String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
-
-                            Intent mailer = new Intent(Intent.ACTION_SEND);
-                            mailer.setType("message/rfc822");
-                            mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@stel.com"});
-                            mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + emailPhone);
-                            mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
-                            getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
-                        } catch (Exception e) {
-                            needShowAlert(LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
-                        }
-                    }
-                }
-            });
+            timeText.setGravity(Gravity.LEFT);
+            addView(timeText);
+            layoutParams = (LayoutParams) timeText.getLayoutParams();
+            layoutParams.width = LayoutHelper.WRAP_CONTENT;
+            layoutParams.height = LayoutHelper.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.LEFT;
+            layoutParams.topMargin = AndroidUtilities.dp(30);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            timeText.setLayoutParams(layoutParams);
 
             LinearLayout linearLayout = new LinearLayout(context);
-            linearLayout.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-            addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            linearLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER_VERTICAL);
+            addView(linearLayout);
+            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
+            layoutParams.width = LayoutHelper.MATCH_PARENT;
+            layoutParams.height = LayoutHelper.MATCH_PARENT;
+            linearLayout.setLayoutParams(layoutParams);
 
             TextView wrongNumber = new TextView(context);
-            wrongNumber.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_HORIZONTAL);
+            wrongNumber.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
             wrongNumber.setTextColor(0xff4d83b3);
             wrongNumber.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             wrongNumber.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
             wrongNumber.setPadding(0, AndroidUtilities.dp(24), 0, 0);
-            linearLayout.addView(wrongNumber, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), 0, 0, 0, 10));
+            linearLayout.addView(wrongNumber);
+            layoutParams = (LayoutParams) wrongNumber.getLayoutParams();
+            layoutParams.width = LayoutHelper.WRAP_CONTENT;
+            layoutParams.height = LayoutHelper.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
+            layoutParams.bottomMargin = AndroidUtilities.dp(10);
+            layoutParams.leftMargin = AndroidUtilities.dp(24);
+            layoutParams.rightMargin = AndroidUtilities.dp(24);
+            wrongNumber.setLayoutParams(layoutParams);
             wrongNumber.setText(LocaleController.getString("WrongNumber", R.string.WrongNumber));
             wrongNumber.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    TLRPC.TL_auth_cancelCode req = new TLRPC.TL_auth_cancelCode();
-                    req.phone_number = requestPhone;
-                    req.phone_code_hash = phoneHash;
-                    ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                        @Override
-                        public void run(TLObject response, TLRPC.TL_error error) {
-
-                        }
-                    }, ConnectionsManager.RequestFlagFailOnServerErrors);
                     onBackPressed();
                     setPage(0, true, null, true);
                 }
             });
         }
 
-        private void resendCode() {
-            final Bundle params = new Bundle();
-            params.putString("phone", phone);
-            params.putString("ephone", emailPhone);
-            params.putString("phoneFormated", requestPhone);
-
-            nextPressed = true;
-            needShowProgress();
-
-            TLRPC.TL_auth_resendCode req = new TLRPC.TL_auth_resendCode();
-            req.phone_number = requestPhone;
-            req.phone_code_hash = phoneHash;
-            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            nextPressed = false;
-                            if (error == null) {
-                                fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
-                            } else {
-                                if (error.text != null) {
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        onBackPressed();
-                                        setPage(0, true, null, true);
-                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                    } else if (error.code != -1000) {
-                                        needShowAlert(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
-                                    }
-                                }
-                            }
-                            needHideProgress();
-                        }
-                    });
-                }
-            }, ConnectionsManager.RequestFlagFailOnServerErrors);
-        }
-
         @Override
         public String getHeaderName() {
             return LocaleController.getString("YourCode", R.string.YourCode);
@@ -1076,87 +824,41 @@ public void setParams(Bundle params) {
                 return;
             }
             codeField.setText("");
-            waitingForEvent = true;
-            if (currentType == 2) {
-                AndroidUtilities.setWaitingForSms(true);
-                NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
-            } else if (currentType == 3) {
-                AndroidUtilities.setWaitingForCall(true);
-                NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveCall);
-            }
-
+            AndroidUtilities.setWaitingForSms(true);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
             currentParams = params;
-            phone = params.getString("phone");
-            emailPhone = params.getString("ephone");
+            waitingForSms = true;
+            String phone = params.getString("phone");
             requestPhone = params.getString("phoneFormated");
             phoneHash = params.getString("phoneHash");
-            timeout = time = params.getInt("timeout");
-            openTime = (int) (System.currentTimeMillis() / 1000);
-            nextType = params.getInt("nextType");
-            pattern = params.getString("pattern");
-            length = params.getInt("length");
-
-            if (length != 0) {
-                InputFilter[] inputFilters = new InputFilter[1];
-                inputFilters[0] = new InputFilter.LengthFilter(length);
-                codeField.setFilters(inputFilters);
-            } else {
-                codeField.setFilters(new InputFilter[0]);
-            }
-            if (progressView != null) {
-                progressView.setVisibility(nextType != 0 ? VISIBLE : GONE);
-            }
+            time = params.getInt("calltime");
 
             if (phone == null) {
                 return;
             }
 
             String number = PhoneFormat.getInstance().format(phone);
-            CharSequence str = "";
-            if (currentType == 1) {
-                str = AndroidUtilities.replaceTags(LocaleController.getString("SentAppCode", R.string.SentAppCode));
-            } else if (currentType == 2) {
-                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentSmsCode", R.string.SentSmsCode, number));
-            } else if (currentType == 3) {
-                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallCode", R.string.SentCallCode, number));
-            } else if (currentType == 4) {
-                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallOnly", R.string.SentCallOnly, number));
+            String str = String.format(Locale.US, LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " %s", number);
+            try {
+                SpannableStringBuilder stringBuilder = new SpannableStringBuilder(str);
+                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+                int idx = str.indexOf(number);
+                stringBuilder.setSpan(span, idx, idx + number.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
+                confirmTextView.setText(stringBuilder);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                confirmTextView.setText(str);
             }
-            confirmTextView.setText(str);
 
-            if (currentType != 3) {
-                AndroidUtilities.showKeyboard(codeField);
-                codeField.requestFocus();
-            } else {
-                AndroidUtilities.hideKeyboard(codeField);
-            }
+            AndroidUtilities.showKeyboard(codeField);
+            codeField.requestFocus();
 
             destroyTimer();
             destroyCodeTimer();
-
+            timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
             lastCurrentTime = System.currentTimeMillis();
-            if (currentType == 1) {
-                problemText.setVisibility(VISIBLE);
-                timeText.setVisibility(GONE);
-            } else if (currentType == 3 && (nextType == 4 || nextType == 2)) {
-                problemText.setVisibility(GONE);
-                timeText.setVisibility(VISIBLE);
-                if (nextType == 4) {
-                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
-                } else if (nextType == 2) {
-                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 1, 0));
-                }
-                createTimer();
-            } else if (currentType == 2 && nextType == 4) {
-                timeText.setVisibility(VISIBLE);
-                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
-                problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
-                createTimer();
-            } else {
-                timeText.setVisibility(GONE);
-                problemText.setVisibility(GONE);
-                createCodeTimer();
-            }
+
+            createTimer();
         }
 
         private void createCodeTimer() {
@@ -1177,7 +879,6 @@ public void run() {
                         @Override
                         public void run() {
                             if (codeTime <= 1000) {
-                                problemText.setVisibility(VISIBLE);
                                 destroyCodeTimer();
                             }
                         }
@@ -1188,7 +889,7 @@ public void run() {
 
         private void destroyCodeTimer() {
             try {
-                synchronized (timerSync) {
+                synchronized(timerSync) {
                     if (codeTimer != null) {
                         codeTimer.cancel();
                         codeTimer = null;
@@ -1207,10 +908,7 @@ private void createTimer() {
             timeTimer.schedule(new TimerTask() {
                 @Override
                 public void run() {
-                    if (timeTimer == null) {
-                        return;
-                    }
-                    final double currentTime = System.currentTimeMillis();
+                    double currentTime = System.currentTimeMillis();
                     double diff = currentTime - lastCurrentTime;
                     time -= diff;
                     lastCurrentTime = currentTime;
@@ -1220,45 +918,27 @@ public void run() {
                             if (time >= 1000) {
                                 int minutes = time / 1000 / 60;
                                 int seconds = time / 1000 - minutes * 60;
-                                if (nextType == 4) {
-                                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
-                                } else if (nextType == 2) {
-                                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, minutes, seconds));
-                                }
-                                if (progressView != null) {
-                                    progressView.setProgress(1.0f - (float) time / (float) timeout);
-                                }
+                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
                             } else {
-                                if (progressView != null) {
-                                    progressView.setProgress(1.0f);
-                                }
+                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
                                 destroyTimer();
-                                if (currentType == 3) {
-                                    AndroidUtilities.setWaitingForCall(false);
-                                    NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
-                                    waitingForEvent = false;
-                                    destroyCodeTimer();
-                                    resendCode();
-                                } else {
-                                    timeText.setText(LocaleController.getString("Calling", R.string.Calling));
-                                    createCodeTimer();
-                                    TLRPC.TL_auth_resendCode req = new TLRPC.TL_auth_resendCode();
-                                    req.phone_number = requestPhone;
-                                    req.phone_code_hash = phoneHash;
-                                    ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                                        @Override
-                                        public void run(TLObject response, final TLRPC.TL_error error) {
-                                            if (error != null && error.text != null) {
-                                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                                    @Override
-                                                    public void run() {
-                                                        lastError = error.text;
-                                                    }
-                                                });
-                                            }
+                                createCodeTimer();
+                                TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
+                                req.phone_number = requestPhone;
+                                req.phone_code_hash = phoneHash;
+                                ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                                    @Override
+                                    public void run(TLObject response, final TLRPC.TL_error error) {
+                                        if (error != null && error.text != null) {
+                                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    lastError = error.text;
+                                                }
+                                            });
                                         }
-                                    }, ConnectionsManager.RequestFlagFailOnServerErrors);
-                                }
+                                    }
+                                }, ConnectionsManager.RequestFlagFailOnServerErrors);
                             }
                         }
                     });
@@ -1268,7 +948,7 @@ public void run() {
 
         private void destroyTimer() {
             try {
-                synchronized (timerSync) {
+                synchronized(timerSync) {
                     if (timeTimer != null) {
                         timeTimer.cancel();
                         timeTimer = null;
@@ -1285,14 +965,9 @@ public void onNextPressed() {
                 return;
             }
             nextPressed = true;
-            if (currentType == 2) {
-                AndroidUtilities.setWaitingForSms(false);
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            } else if (currentType == 3) {
-                AndroidUtilities.setWaitingForCall(false);
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
-            }
-            waitingForEvent = false;
+            waitingForSms = false;
+            AndroidUtilities.setWaitingForSms(false);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
             final TLRPC.TL_account_changePhone req = new TLRPC.TL_account_changePhone();
             req.phone_number = requestPhone;
             req.phone_code = codeField.getText().toString();
@@ -1320,29 +995,17 @@ public void run() {
                                 finishFragment();
                             } else {
                                 lastError = error.text;
-                                if (currentType == 3 && (nextType == 4 || nextType == 2) || currentType == 2 && nextType == 4) {
-                                    createTimer();
-                                }
-                                if (currentType == 2) {
-                                    AndroidUtilities.setWaitingForSms(true);
-                                    NotificationCenter.getInstance().addObserver(LoginActivitySmsView.this, NotificationCenter.didReceiveSmsCode);
-                                } else if (currentType == 3) {
-                                    AndroidUtilities.setWaitingForCall(true);
-                                    NotificationCenter.getInstance().addObserver(LoginActivitySmsView.this, NotificationCenter.didReceiveCall);
-                                }
-                                waitingForEvent = true;
-                                if (currentType != 3) {
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                    } else {
-                                        needShowAlert(error.text);
-                                    }
+                                createTimer();
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                    needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                } else {
+                                    needShowAlert(error.text);
                                 }
                             }
                         }
@@ -1356,29 +1019,19 @@ public void onBackPressed() {
             destroyTimer();
             destroyCodeTimer();
             currentParams = null;
-            if (currentType == 2) {
-                AndroidUtilities.setWaitingForSms(false);
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            } else if (currentType == 3) {
-                AndroidUtilities.setWaitingForCall(false);
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
-            }
-            waitingForEvent = false;
+            AndroidUtilities.setWaitingForSms(false);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            waitingForSms = false;
         }
 
         @Override
         public void onDestroyActivity() {
             super.onDestroyActivity();
-            if (currentType == 2) {
-                AndroidUtilities.setWaitingForSms(false);
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            } else if (currentType == 3) {
-                AndroidUtilities.setWaitingForCall(false);
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
-            }
-            waitingForEvent = false;
+            AndroidUtilities.setWaitingForSms(false);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
             destroyTimer();
             destroyCodeTimer();
+            waitingForSms = false;
         }
 
         @Override
@@ -1392,26 +1045,14 @@ public void onShow() {
 
         @Override
         public void didReceivedNotification(int id, final Object... args) {
-            if (!waitingForEvent || codeField == null) {
-                return;
-            }
             if (id == NotificationCenter.didReceiveSmsCode) {
-                ignoreOnTextChange = true;
-                codeField.setText("" + args[0]);
-                ignoreOnTextChange = false;
-                onNextPressed();
-            } else if (id == NotificationCenter.didReceiveCall) {
-                String num = "" + args[0];
-                if (!pattern.equals("*")) {
-                    String patternNumbers = pattern.replace("*", "");
-                    if (!num.contains(patternNumbers)) {
-                        return;
-                    }
+                if (!waitingForSms) {
+                    return;
+                }
+                if (codeField != null) {
+                    codeField.setText("" + args[0]);
+                    onNextPressed();
                 }
-                ignoreOnTextChange = true;
-                codeField.setText(num);
-                ignoreOnTextChange = false;
-                onNextPressed();
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
index bb14930ad..3107c6ae2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneHelpActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 1.7.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2014.
  */
 
 package org.telegram.ui;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
index ccdf81dfc..905a31b8d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 1.7.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2014.
  */
 
 package org.telegram.ui;
@@ -385,10 +385,8 @@ public void onClick(DialogInterface dialog, int which) {
     }
 
     @Override
-    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
-        if (isOpen) {
-            firstNameField.requestFocus();
-            AndroidUtilities.showKeyboard(firstNameField);
-        }
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java
index 13b2b705b..7ee04976e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelCreateActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 2.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2015.
  */
 
 package org.telegram.ui;
@@ -155,6 +155,7 @@ public void run() {
                     });
                 }
             });
+
         } else {
             if (currentStep == 1) {
                 canCreatePublic = args.getBoolean("canCreatePublic", true);
@@ -252,7 +253,7 @@ public void onClick(DialogInterface dialog, int which) {
                             progressDialog.show();
                             return;
                         }
-                        final int reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), new ArrayList<Integer>(), descriptionTextView.getText().toString(), ChatObject.CHAT_TYPE_CHANNEL, ChannelCreateActivity.this);
+                        final int reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), new ArrayList<Integer>(), descriptionTextView.getText().toString(), ChatObject.CHAT_TYPE_CHANNEL);
                         progressDialog = new ProgressDialog(getParentActivity());
                         progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
                         progressDialog.setCanceledOnTouchOutside(false);
@@ -307,7 +308,7 @@ public void onClick(DialogInterface dialog, int which) {
                                 result.add(user);
                             }
                         }
-                        MessagesController.getInstance().addUsersToChannel(chatId, result, null);
+                        MessagesController.getInstance().addUsersToChannel(chatId, result);
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                         Bundle args2 = new Bundle();
                         args2.putInt("chat_id", chatId);
@@ -655,7 +656,7 @@ public void onClick(View v) {
             actionBar.setTitle(LocaleController.getString("ChannelAddMembers", R.string.ChannelAddMembers));
             actionBar.setSubtitle(LocaleController.formatPluralString("Members", selectedContacts.size()));
 
-            searchListViewAdapter = new SearchAdapter(context, null, false, false, false, false);
+            searchListViewAdapter = new SearchAdapter(context, null, false, false, false);
             searchListViewAdapter.setCheckedMap(selectedContacts);
             searchListViewAdapter.setUseUserCell(true);
             listViewAdapter = new ContactsAdapter(context, 1, false, null, false);
@@ -840,11 +841,9 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         ChipSpan span = createAndPutChipForUser(user);
                         if (span != null) {
                             span.uid = user.id;
-                        }
-                        ignoreChange = false;
-                        if (span == null) {
                             return;
                         }
+                        ignoreChange = false;
                     }
                     actionBar.setSubtitle(LocaleController.formatPluralString("Members", selectedContacts.size()));
                     if (searching || searchWas) {
@@ -998,8 +997,8 @@ public void restoreSelfArgs(Bundle args) {
     }
 
     @Override
-    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
-        if (isOpen && currentStep != 1) {
+    public void onOpenAnimationEnd() {
+        if (currentStep != 1) {
             nameTextView.requestFocus();
             AndroidUtilities.showKeyboard(nameTextView);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
index 825fb18e1..ccbafce95 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 2.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2015.
  */
 
 package org.telegram.ui;
@@ -39,12 +39,14 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Cells.ShadowSectionCell;
-import org.telegram.ui.Cells.TextCheckCell;
 import org.telegram.ui.Cells.TextInfoPrivacyCell;
 import org.telegram.ui.Cells.TextSettingsCell;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -60,20 +62,25 @@
     private View doneButton;
     private EditText nameTextView;
     private EditText descriptionTextView;
+    private EditText userNameTextView;
     private BackupImageView avatarImage;
     private AvatarDrawable avatarDrawable;
     private AvatarUpdater avatarUpdater;
-    private ProgressDialog progressDialog;
-    private TextSettingsCell typeCell;
-    private TextSettingsCell adminCell;
+    private TextView checkTextView;
+    private ProgressDialog progressDialog = null;
 
     private TLRPC.FileLocation avatar;
+    private int checkReqId = 0;
+    private String lastCheckName = null;
+    private Runnable checkRunnable = null;
+    private boolean lastNameAvailable = false;
     private TLRPC.Chat currentChat;
     private TLRPC.ChatFull info;
     private int chatId;
     private boolean allowComments = true;
     private TLRPC.InputFile uploadedAvatar;
-    private boolean signMessages;
+    private boolean wasPrivate;
+    private boolean privateAlertShown;
 
     private boolean createAfterUpload;
     private boolean donePressed;
@@ -111,7 +118,7 @@ public void run() {
                 return false;
             }
             if (info == null) {
-                MessagesStorage.getInstance().loadChatInfo(chatId, semaphore, false, false);
+                MessagesStorage.getInstance().loadChatInfo(chatId, semaphore, false);
                 try {
                     semaphore.acquire();
                 } catch (Exception e) {
@@ -122,23 +129,23 @@ public void run() {
                 }
             }
         }
+        wasPrivate = currentChat.username == null || currentChat.username.length() == 0;
         avatarUpdater.parentFragment = this;
         avatarUpdater.delegate = this;
-        allowComments = !currentChat.broadcast;
-        signMessages = currentChat.signatures;
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        allowComments = (currentChat.flags & TLRPC.CHAT_FLAG_IS_BROADCAST) == 0;
         return super.onFragmentCreate();
     }
 
+    public void setInfo(TLRPC.ChatFull chatFull) {
+        info = chatFull;
+    }
+
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
         if (avatarUpdater != null) {
             avatarUpdater.clear();
         }
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         AndroidUtilities.removeAdjustResize(getParentActivity(), classGuid);
     }
 
@@ -162,6 +169,7 @@ public void onItemClick(int id) {
                     if (donePressed) {
                         return;
                     }
+                    donePressed = true;
                     if (nameTextView.length() == 0) {
                         Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
                         if (v != null) {
@@ -170,7 +178,16 @@ public void onItemClick(int id) {
                         AndroidUtilities.shakeView(nameTextView, 2, 0);
                         return;
                     }
-                    donePressed = true;
+                    if ((currentChat.username == null && userNameTextView.length() != 0) || (currentChat.username != null && !currentChat.username.equalsIgnoreCase(userNameTextView.getText().toString()))) {
+                        if (userNameTextView.length() != 0 && !lastNameAvailable) {
+                            Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
+                            if (v != null) {
+                                v.vibrate(200);
+                            }
+                            AndroidUtilities.shakeView(checkTextView, 2, 0);
+                            return;
+                        }
+                    }
 
                     if (avatarUpdater.uploadingAvatar != null) {
                         createAfterUpload = true;
@@ -194,7 +211,7 @@ public void onClick(DialogInterface dialog, int which) {
                         progressDialog.show();
                         return;
                     }
-                    boolean currentAllowComments = !currentChat.broadcast;
+                    boolean currentAllowComments = (currentChat.flags & TLRPC.CHAT_FLAG_IS_BROADCAST) == 0;
                     if (allowComments != currentAllowComments) {
                         MessagesController.getInstance().toogleChannelComments(chatId, allowComments);
                     }
@@ -204,9 +221,9 @@ public void onClick(DialogInterface dialog, int which) {
                     if (info != null && !info.about.equals(descriptionTextView.getText().toString())) {
                         MessagesController.getInstance().updateChannelAbout(chatId, descriptionTextView.getText().toString(), info);
                     }
-                    if (signMessages != currentChat.signatures) {
-                        currentChat.signatures = true;
-                        MessagesController.getInstance().toogleChannelSignatures(chatId, signMessages);
+                    String oldUserName = currentChat.username != null ? currentChat.username : "";
+                    if (!oldUserName.equals(userNameTextView.getText().toString())) {
+                        MessagesController.getInstance().updateChannelUserName(chatId, userNameTextView.getText().toString());
                     }
                     if (uploadedAvatar != null) {
                         MessagesController.getInstance().changeChatAvatar(chatId, uploadedAvatar);
@@ -282,11 +299,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
         });
 
         nameTextView = new EditText(context);
-        if (currentChat.megagroup) {
-            nameTextView.setHint(LocaleController.getString("GroupName", R.string.GroupName));
-        } else {
-            nameTextView.setHint(LocaleController.getString("EnterChannelName", R.string.EnterChannelName));
-        }
+        nameTextView.setHint(LocaleController.getString("EnterChannelName", R.string.EnterChannelName));
         nameTextView.setMaxLines(4);
         nameTextView.setGravity(Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
         nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
@@ -318,9 +331,8 @@ public void afterTextChanged(Editable s) {
             }
         });
 
-        View lineView = new View(context);
-        lineView.setBackgroundColor(0xffcfcfcf);
-        linearLayout.addView(lineView, new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1));
+        ShadowSectionCell sectionCell = new ShadowSectionCell(context);
+        linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
         linearLayout2 = new LinearLayout(context);
         linearLayout2.setOrientation(LinearLayout.VERTICAL);
@@ -328,7 +340,7 @@ public void afterTextChanged(Editable s) {
         linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
         descriptionTextView = new EditText(context);
-        descriptionTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+        descriptionTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
         descriptionTextView.setHintTextColor(0xff979797);
         descriptionTextView.setTextColor(0xff212121);
         descriptionTextView.setPadding(0, 0, 0, AndroidUtilities.dp(6));
@@ -337,9 +349,9 @@ public void afterTextChanged(Editable s) {
         descriptionTextView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
         descriptionTextView.setImeOptions(EditorInfo.IME_ACTION_DONE);
         inputFilters = new InputFilter[1];
-        inputFilters[0] = new InputFilter.LengthFilter(255);
+        inputFilters[0] = new InputFilter.LengthFilter(120);
         descriptionTextView.setFilters(inputFilters);
-        descriptionTextView.setHint(LocaleController.getString("DescriptionOptionalPlaceholder", R.string.DescriptionOptionalPlaceholder));
+        descriptionTextView.setHint(LocaleController.getString("DescriptionPlaceholder", R.string.DescriptionPlaceholder));
         AndroidUtilities.clearCursorDrawable(descriptionTextView);
         linearLayout2.addView(descriptionTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 17, 12, 17, 6));
         descriptionTextView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
@@ -369,121 +381,92 @@ public void afterTextChanged(Editable editable) {
             }
         });
 
-        ShadowSectionCell sectionCell = new ShadowSectionCell(context);
-        sectionCell.setSize(20);
-        linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        TextInfoPrivacyCell infoCell = new TextInfoPrivacyCell(context);
+        infoCell.setText(LocaleController.getString("DescriptionInfo", R.string.DescriptionInfo));
+        infoCell.setBackgroundResource(R.drawable.greydivider);
+        linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
-        if (currentChat.megagroup || !currentChat.megagroup) {
-            frameLayout = new FrameLayoutFixed(context);
-            frameLayout.setBackgroundColor(0xffffffff);
-            linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-            typeCell = new TextSettingsCell(context);
-            updateTypeCell();
-            typeCell.setBackgroundResource(R.drawable.list_selector);
-            frameLayout.addView(typeCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-            //TODO
-
-            lineView = new View(context);
-            lineView.setBackgroundColor(0xffcfcfcf);
-            linearLayout.addView(lineView, new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1));
-
-            frameLayout = new FrameLayoutFixed(context);
-            frameLayout.setBackgroundColor(0xffffffff);
-            linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-            if (!currentChat.megagroup) {
-                TextCheckCell textCheckCell = new TextCheckCell(context);
-                textCheckCell.setBackgroundResource(R.drawable.list_selector);
-                textCheckCell.setTextAndCheck(LocaleController.getString("ChannelSignMessages", R.string.ChannelSignMessages), signMessages, false);
-                frameLayout.addView(textCheckCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-                textCheckCell.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        signMessages = !signMessages;
-                        ((TextCheckCell) v).setChecked(signMessages);
-                    }
-                });
 
-                TextInfoPrivacyCell infoCell = new TextInfoPrivacyCell(context);
-                infoCell.setBackgroundResource(R.drawable.greydivider);
-                infoCell.setText(LocaleController.getString("ChannelSignMessagesInfo", R.string.ChannelSignMessagesInfo));
-                linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-            } else {
-                adminCell = new TextSettingsCell(context);
-                updateAdminCell();
-                adminCell.setBackgroundResource(R.drawable.list_selector);
-                frameLayout.addView(adminCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-                adminCell.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        Bundle args = new Bundle();
-                        args.putInt("chat_id", chatId);
-                        args.putInt("type", 1);
-                        presentFragment(new ChannelUsersActivity(args));
-                    }
-                });
+        linearLayout2 = new LinearLayout(context);
+        linearLayout2.setOrientation(LinearLayout.VERTICAL);
+        linearLayout2.setBackgroundColor(0xffffffff);
+        linearLayout2.setPadding(0, 0, 0, AndroidUtilities.dp(7));
+        linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
-                sectionCell = new ShadowSectionCell(context);
-                sectionCell.setSize(20);
-                linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-                if (!currentChat.creator) {
-                    sectionCell.setBackgroundResource(R.drawable.greydivider_bottom);
+        LinearLayout publicContainer = new LinearLayout(context);
+        publicContainer.setOrientation(LinearLayout.HORIZONTAL);
+        linearLayout2.addView(publicContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 17, 7, 17, 0));
+
+        EditText editText = new EditText(context);
+        editText.setText("telegram.me/");
+        editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        editText.setHintTextColor(0xff979797);
+        editText.setTextColor(0xff212121);
+        editText.setMaxLines(1);
+        editText.setLines(1);
+        editText.setEnabled(false);
+        editText.setBackgroundDrawable(null);
+        editText.setPadding(0, 0, 0, 0);
+        editText.setSingleLine(true);
+        editText.setInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+        editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+        publicContainer.addView(editText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 36));
+
+        userNameTextView = new EditText(context);
+        userNameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        userNameTextView.setHintTextColor(0xff979797);
+        userNameTextView.setTextColor(0xff212121);
+        userNameTextView.setMaxLines(1);
+        userNameTextView.setLines(1);
+        userNameTextView.setBackgroundDrawable(null);
+        userNameTextView.setPadding(0, 0, 0, 0);
+        userNameTextView.setSingleLine(true);
+        userNameTextView.setText(currentChat.username);
+        userNameTextView.setInputType(InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+        userNameTextView.setImeOptions(EditorInfo.IME_ACTION_DONE);
+        userNameTextView.setHint(LocaleController.getString("ChannelUsernamePlaceholder", R.string.ChannelUsernamePlaceholder));
+        userNameTextView.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (wasPrivate && hasFocus && !privateAlertShown) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setMessage(LocaleController.getString("ChannelWasPrivateAlert", R.string.ChannelWasPrivateAlert));
+                    builder.setPositiveButton(LocaleController.getString("Close", R.string.Close), null);
+                    showDialog(builder.create());
                 }
             }
-        }
+        });
+        AndroidUtilities.clearCursorDrawable(userNameTextView);
+        publicContainer.addView(userNameTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36));
+        userNameTextView.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
 
-        if (currentChat.creator) {
-            frameLayout = new FrameLayoutFixed(context);
-            frameLayout.setBackgroundColor(0xffffffff);
-            linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+            }
 
-            TextSettingsCell textCell = new TextSettingsCell(context);
-            textCell.setTextColor(0xffed3d39);
-            textCell.setBackgroundResource(R.drawable.list_selector);
-            if (currentChat.megagroup) {
-                textCell.setText(LocaleController.getString("DeleteMega", R.string.DeleteMega), false);
-            } else {
-                textCell.setText(LocaleController.getString("ChannelDelete", R.string.ChannelDelete), false);
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+                checkUserName(userNameTextView.getText().toString(), false);
             }
-            frameLayout.addView(textCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-            textCell.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    if (currentChat.megagroup) {
-                        builder.setMessage(LocaleController.getString("MegaDeleteAlert", R.string.MegaDeleteAlert));
-                    } else {
-                        builder.setMessage(LocaleController.getString("ChannelDeleteAlert", R.string.ChannelDeleteAlert));
-                    }
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-                            if (AndroidUtilities.isTablet()) {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, -(long) chatId);
-                            } else {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                            }
-                            MessagesController.getInstance().deleteUserFromChat(chatId, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), info);
-                            finishFragment();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-            });
 
-            TextInfoPrivacyCell infoCell = new TextInfoPrivacyCell(context);
-            infoCell.setBackgroundResource(R.drawable.greydivider_bottom);
-            if (currentChat.megagroup) {
-                infoCell.setText(LocaleController.getString("MegaDeleteInfo", R.string.MegaDeleteInfo));
-            } else {
-                infoCell.setText(LocaleController.getString("ChannelDeleteInfo", R.string.ChannelDeleteInfo));
+            @Override
+            public void afterTextChanged(Editable editable) {
+
             }
-            linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-        }
+        });
+
+        checkTextView = new TextView(context);
+        checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        checkTextView.setVisibility(View.GONE);
+        linearLayout2.addView(checkTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 17, 3, 17, 7));
+
+        infoCell = new TextInfoPrivacyCell(context);
+        infoCell.setBackgroundResource(R.drawable.greydivider);
+        infoCell.setText(LocaleController.getString("ChannelUsernameHelp", R.string.ChannelUsernameHelp));
+        linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
 
         /*frameLayout = new FrameLayoutFixed(context);
         frameLayout.setBackgroundColor(0xffffffff);
@@ -506,6 +489,44 @@ public void onClick(View v) {
         infoCell.setBackgroundResource(R.drawable.greydivider);
         linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));*/
 
+        frameLayout = new FrameLayoutFixed(context);
+        frameLayout.setBackgroundColor(0xffffffff);
+        linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextSettingsCell textCell = new TextSettingsCell(context);
+        textCell.setTextColor(0xffed3d39);
+        textCell.setBackgroundResource(R.drawable.list_selector);
+        textCell.setText(LocaleController.getString("ChannelDelete", R.string.ChannelDelete), false);
+        frameLayout.addView(textCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        textCell.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                builder.setMessage(LocaleController.getString("ChannelDeleteAlert", R.string.ChannelDeleteAlert));
+                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+                        if (AndroidUtilities.isTablet()) {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, -(long) chatId);
+                        } else {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        }
+                        MessagesController.getInstance().deleteUserFromChat(chatId, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), info);
+                        finishFragment();
+                    }
+                });
+                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                showDialog(builder.create());
+            }
+        });
+
+        infoCell = new TextInfoPrivacyCell(context);
+        infoCell.setBackgroundResource(R.drawable.greydivider_bottom);
+        infoCell.setText(LocaleController.getString("ChannelDeleteInfo", R.string.ChannelDeleteInfo));
+        linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
         nameTextView.setText(currentChat.title);
         nameTextView.setSelection(nameTextView.length());
         if (info != null) {
@@ -530,13 +551,6 @@ public void didReceivedNotification(int id, Object... args) {
                     descriptionTextView.setText(chatFull.about);
                 }
                 info = chatFull;
-                updateAdminCell();
-                updateTypeCell();
-            }
-        } else if (id == NotificationCenter.updateInterfaces) {
-            int updateMask = (Integer) args[0];
-            if ((updateMask & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
-                updateTypeCell();
             }
         }
     }
@@ -589,46 +603,135 @@ public void restoreSelfArgs(Bundle args) {
         }
     }
 
-    public void setInfo(TLRPC.ChatFull chatFull) {
-        info = chatFull;
-    }
-
-    private void updateTypeCell() {
-        String type = currentChat.username == null || currentChat.username.length() == 0 ? LocaleController.getString("ChannelTypePrivate", R.string.ChannelTypePrivate) : LocaleController.getString("ChannelTypePublic", R.string.ChannelTypePublic);
-        if (currentChat.megagroup) {
-            typeCell.setTextAndValue(LocaleController.getString("GroupType", R.string.GroupType), type, false);
+    private boolean checkUserName(final String name, boolean alert) {
+        if (name != null && name.length() > 0) {
+            checkTextView.setVisibility(View.VISIBLE);
         } else {
-            typeCell.setTextAndValue(LocaleController.getString("ChannelType", R.string.ChannelType), type, false);
+            checkTextView.setVisibility(View.GONE);
+        }
+        if (alert && name.length() == 0) {
+            return true;
+        }
+        if (checkRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
+            checkRunnable = null;
+            lastCheckName = null;
+            if (checkReqId != 0) {
+                ConnectionsManager.getInstance().cancelRequest(checkReqId, true);
+            }
+        }
+        lastNameAvailable = false;
+        if (name != null) {
+            if (name.startsWith("_") || name.endsWith("_")) {
+                checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                checkTextView.setTextColor(0xffcf3030);
+                return false;
+            }
+            for (int a = 0; a < name.length(); a++) {
+                char ch = name.charAt(a);
+                if (a == 0 && ch >= '0' && ch <= '9') {
+                    if (alert) {
+                        showErrorAlert(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
+                    } else {
+                        checkTextView.setText(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
+                        checkTextView.setTextColor(0xffcf3030);
+                    }
+                    return false;
+                }
+                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
+                    if (alert) {
+                        showErrorAlert(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                    } else {
+                        checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                        checkTextView.setTextColor(0xffcf3030);
+                    }
+                    return false;
+                }
+            }
+        }
+        if (name == null || name.length() < 5) {
+            if (alert) {
+                showErrorAlert(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
+            } else {
+                checkTextView.setText(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
+                checkTextView.setTextColor(0xffcf3030);
+            }
+            return false;
+        }
+        if (name.length() > 32) {
+            if (alert) {
+                showErrorAlert(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
+            } else {
+                checkTextView.setText(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
+                checkTextView.setTextColor(0xffcf3030);
+            }
+            return false;
         }
 
-        if (currentChat.creator && (info == null || info.can_set_username)) {
-            typeCell.setOnClickListener(new View.OnClickListener() {
+        if (!alert) {
+            checkTextView.setText(LocaleController.getString("LinkChecking", R.string.LinkChecking));
+            checkTextView.setTextColor(0xff6d6d72);
+            lastCheckName = name;
+            checkRunnable = new Runnable() {
                 @Override
-                public void onClick(View v) {
-                    Bundle args = new Bundle();
-                    args.putInt("chat_id", chatId);
-                    ChannelEditTypeActivity fragment = new ChannelEditTypeActivity(args);
-                    fragment.setInfo(info);
-                    presentFragment(fragment);
+                public void run() {
+                    TLRPC.TL_channels_checkUsername req = new TLRPC.TL_channels_checkUsername();
+                    req.username = name;
+                    req.channel = MessagesController.getInputChannel(chatId);
+                    checkReqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                        @Override
+                        public void run(final TLObject response, final TLRPC.TL_error error) {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    checkReqId = 0;
+                                    if (lastCheckName != null && lastCheckName.equals(name)) {
+                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                            checkTextView.setText(LocaleController.formatString("LinkAvailable", R.string.LinkAvailable, name));
+                                            checkTextView.setTextColor(0xff26972c);
+                                            lastNameAvailable = true;
+                                        } else {
+                                            if (error != null && error.text.equals("CHANNELS_ADMIN_PUBLIC_TOO_MUCH")) {
+                                                checkTextView.setText(LocaleController.getString("ChannelPublicLimitReached", R.string.ChannelPublicLimitReached));
+                                            } else {
+                                                checkTextView.setText(LocaleController.getString("LinkInUse", R.string.LinkInUse));
+                                            }
+                                            checkTextView.setTextColor(0xffcf3030);
+                                            lastNameAvailable = false;
+                                        }
+                                    }
+                                }
+                            });
+                        }
+                    }, ConnectionsManager.RequestFlagFailOnServerErrors);
                 }
-            });
-            typeCell.setTextColor(0xff212121);
-            typeCell.setTextValueColor(0xff2f8cc9);
-        } else {
-            typeCell.setOnClickListener(null);
-            typeCell.setTextColor(0xffa8a8a8);
-            typeCell.setTextValueColor(0xffa8a8a8);
+            };
+            AndroidUtilities.runOnUIThread(checkRunnable, 300);
         }
+        return true;
     }
 
-    private void updateAdminCell() {
-        if (adminCell == null) {
+    private void showErrorAlert(String error) {
+        if (getParentActivity() == null) {
             return;
         }
-        if (info != null) {
-            adminCell.setTextAndValue(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), String.format("%d", info.admins_count), false);
-        } else {
-            adminCell.setText(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), false);
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        switch (error) {
+            case "USERNAME_INVALID":
+                builder.setMessage(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                break;
+            case "USERNAME_OCCUPIED":
+                builder.setMessage(LocaleController.getString("LinkInUse", R.string.LinkInUse));
+                break;
+            case "USERNAMES_UNAVAILABLE":
+                builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
+                break;
+            default:
+                builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
+                break;
         }
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showDialog(builder.create());
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
index 1c1b286c0..f9cdacdda 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 2.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2015.
  */
 
 package org.telegram.ui;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
index fe51b1ce5..21f160389 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
@@ -1,9 +1,9 @@
 /*
- * This is the source code of Telegram for Android v. 3.x.x.
+ * This is the source code of Telegram for Android v. 2.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2015.
  */
 
 package org.telegram.ui;
@@ -36,10 +36,7 @@
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.HeaderCell;
-import org.telegram.ui.Cells.RadioCell;
 import org.telegram.ui.Cells.ShadowSectionCell;
-import org.telegram.ui.Cells.TextCell;
 import org.telegram.ui.Cells.TextInfoPrivacyCell;
 import org.telegram.ui.Cells.TextSettingsCell;
 import org.telegram.ui.Cells.UserCell;
@@ -60,10 +57,8 @@
     private int chatId;
     private int type;
     private boolean loadingUsers;
-    private boolean firstLoaded;
     private boolean isAdmin;
     private boolean isPublic;
-    private boolean isMegagroup;
     private int participantsStartRow;
 
     public ChannelUsersActivity(Bundle args) {
@@ -71,17 +66,14 @@ public ChannelUsersActivity(Bundle args) {
         chatId = arguments.getInt("chat_id");
         type = arguments.getInt("type");
         TLRPC.Chat chat = MessagesController.getInstance().getChat(chatId);
-        if (chat != null) {
-            if (chat.creator) {
-                isAdmin = true;
-                isPublic = (chat.flags & TLRPC.CHAT_FLAG_IS_PUBLIC) != 0;
-            }
-            isMegagroup = chat.megagroup;
+        if (chat != null && (chat.flags & TLRPC.CHAT_FLAG_ADMIN) != 0) {
+            isAdmin = true;
+            isPublic = (chat.flags & TLRPC.CHAT_FLAG_IS_PUBLIC) != 0;
         }
         if (type == 0) {
             participantsStartRow = 0;
         } else if (type == 1) {
-            participantsStartRow = isAdmin && isMegagroup ? 4 : 0;
+            participantsStartRow = isAdmin ? 2 : 0;
         } else if (type == 2) {
             participantsStartRow = isAdmin ? (isPublic ? 2 : 3) : 0;
         }
@@ -129,15 +121,11 @@ public void onItemClick(int id) {
 
         emptyView = new EmptyTextProgressView(context);
         if (type == 0) {
-            if (isMegagroup) {
-                emptyView.setText(LocaleController.getString("NoBlockedGroup", R.string.NoBlockedGroup));
-            } else {
-                emptyView.setText(LocaleController.getString("NoBlocked", R.string.NoBlocked));
-            }
+            emptyView.setText(LocaleController.getString("NoBlocked", R.string.NoBlocked));
         }
         frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
-        final ListView listView = new ListView(context);
+        ListView listView = new ListView(context);
         listView.setEmptyView(emptyView);
         listView.setDivider(null);
         listView.setDividerHeight(0);
@@ -151,6 +139,7 @@ public void onItemClick(int id) {
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+
                 if (type == 2) {
                     if (isAdmin) {
                         if (i == 0) {
@@ -176,42 +165,13 @@ public void didSelectContact(TLRPC.User user, String param) {
 
                 } else if (type == 1) {
                     if (isAdmin) {
-                        if (isMegagroup && (i == 1 || i == 2)) {
-                            TLRPC.Chat chat = MessagesController.getInstance().getChat(chatId);
-                            if (chat == null) {
-                                return;
-                            }
-                            boolean changed = false;
-                            if (i == 1 && !chat.democracy) {
-                                chat.democracy = true;
-                                changed = true;
-                            } else if (i == 2 && chat.democracy) {
-                                chat.democracy = false;
-                                changed = true;
-                            }
-                            if (changed) {
-                                MessagesController.getInstance().toogleChannelInvites(chatId, chat.democracy);
-                                int count = listView.getChildCount();
-                                for (int a = 0; a < count; a++) {
-                                    View child = listView.getChildAt(a);
-                                    if (child instanceof RadioCell) {
-                                        int num = (Integer) child.getTag();
-                                        ((RadioCell) child).setChecked(num == 0 && chat.democracy || num == 1 && !chat.democracy, true);
-                                    }
-                                }
-                            }
-                            return;
-                        }
-                        if (i == participantsStartRow + participants.size()) {
+                        if (i == 0) {
                             Bundle args = new Bundle();
                             args.putBoolean("onlyUsers", true);
                             args.putBoolean("destroyAfterSelect", true);
                             args.putBoolean("returnAsResult", true);
                             args.putBoolean("needForwardCount", false);
-                            args.putBoolean("allowUsernameSearch", true);
-                            if (isMegagroup) {
-                                args.putBoolean("allowBots", false);
-                            }
+                            args.putBoolean("allowUsernameSearch", false);
                             args.putString("selectAlertString", LocaleController.getString("ChannelAddUserAdminAlert", R.string.ChannelAddUserAdminAlert));
                             ContactsActivity fragment = new ContactsActivity(args);
                             fragment.setDelegate(new ContactsActivity.ContactsActivityDelegate() {
@@ -221,7 +181,6 @@ public void didSelectContact(TLRPC.User user, String param) {
                                 }
                             });
                             presentFragment(fragment);
-                            return;
                         }
                     }
                 }
@@ -237,7 +196,7 @@ public void didSelectContact(TLRPC.User user, String param) {
             }
         });
 
-        if (isAdmin || isMegagroup && type == 0) {
+        if (isAdmin) {
             listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                 @Override
                 public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
@@ -273,18 +232,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                         ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                                             @Override
                                             public void run(TLObject response, TLRPC.TL_error error) {
-                                                if (response != null) {
-                                                    final TLRPC.Updates updates = (TLRPC.Updates) response;
-                                                    MessagesController.getInstance().processUpdates(updates, false);
-                                                    if (!updates.chats.isEmpty()) {
-                                                        AndroidUtilities.runOnUIThread(new Runnable() {
-                                                            @Override
-                                                            public void run() {
-                                                                TLRPC.Chat chat = updates.chats.get(0);
-                                                                MessagesController.getInstance().loadFullChat(chat.id, 0, true);
-                                                            }
-                                                        }, 1000);
-                                                    }
+                                                final TLRPC.Updates updates = (TLRPC.Updates) response;
+                                                MessagesController.getInstance().processUpdates(updates, false);
+                                                if (!updates.chats.isEmpty()) {
+                                                    AndroidUtilities.runOnUIThread(new Runnable() {
+                                                        @Override
+                                                        public void run() {
+                                                            TLRPC.Chat chat = updates.chats.get(0);
+                                                            MessagesController.getInstance().loadFullChat(chat.id, 0, true);
+                                                        }
+                                                    }, 1000);
                                                 }
                                             }
                                         });
@@ -324,19 +281,18 @@ public void setUserChannelRole(TLRPC.User user, TLRPC.ChannelParticipantRole rol
         ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
             @Override
             public void run(TLObject response, final TLRPC.TL_error error) {
-                if (error == null) {
-                    MessagesController.getInstance().processUpdates((TLRPC.Updates) response, false);
+                if (response instanceof TLRPC.TL_boolTrue) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
                             MessagesController.getInstance().loadFullChat(chatId, 0, true);
                         }
                     }, 1000);
-                } else {
+                } else if (error != null) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            AlertsCreator.showAddUserAlert(error.text, ChannelUsersActivity.this, !isMegagroup);
+                            AlertsCreator.showAddUserAlert(error.text, ChannelUsersActivity.this);
                         }
                     });
                 }
@@ -374,7 +330,7 @@ private void getChannelParticipants(int offset, int count) {
             return;
         }
         loadingUsers = true;
-        if (emptyView != null && !firstLoaded) {
+        if (emptyView != null) {
             emptyView.showProgress();
         }
         if (listViewAdapter != null) {
@@ -466,7 +422,6 @@ public int compare(TLRPC.ChannelParticipant lhs, TLRPC.ChannelParticipant rhs) {
                             }
                         }
                         loadingUsers = false;
-                        firstLoaded = true;
                         if (emptyView != null) {
                             emptyView.showTextView();
                         }
@@ -519,12 +474,12 @@ public boolean isEnabled(int i) {
                     }
                 }
             } else if (type == 1) {
-                if (i == participantsStartRow + participants.size()) {
-                    return isAdmin;
-                } else if (i == participantsStartRow + participants.size() + 1) {
-                    return false;
-                } else if (isMegagroup && isAdmin && i < 4) {
-                    return i == 1 || i == 2;
+                if (isAdmin) {
+                    if (i == 0) {
+                        return true;
+                    } else if (i == 1) {
+                        return false;
+                    }
                 }
             }
             return i != participants.size() + participantsStartRow && participants.get(i - participantsStartRow).user_id != UserConfig.getClientUserId();
@@ -532,10 +487,8 @@ public boolean isEnabled(int i) {
 
         @Override
         public int getCount() {
-            if (participants.isEmpty() && type == 0 || loadingUsers && !firstLoaded) {
+            if (participants.isEmpty() && type == 0 || loadingUsers) {
                 return 0;
-            } else if (type == 1) {
-                return participants.size() + (isAdmin ? 2 : 1) + (isAdmin && isMegagroup ? 4 : 0);
             }
             return participants.size() + participantsStartRow + 1;
         }
@@ -560,7 +513,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int viewType = getItemViewType(i);
             if (viewType == 0) {
                 if (view == null) {
-                    view = new UserCell(mContext, 1, 0, false);
+                    view = new UserCell(mContext, 1);
                     view.setBackgroundColor(0xffffffff);
                 }
                 UserCell userCell = (UserCell) view;
@@ -588,28 +541,19 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     view = new TextInfoPrivacyCell(mContext);
                 }
                 if (type == 0) {
-                    ((TextInfoPrivacyCell) view).setText(String.format("%1$s\n\n%2$s", LocaleController.getString("NoBlockedGroup", R.string.NoBlockedGroup), LocaleController.getString("UnblockText", R.string.UnblockText)));
+                    ((TextInfoPrivacyCell) view).setText(LocaleController.getString("UnblockText", R.string.UnblockText));
                     view.setBackgroundResource(R.drawable.greydivider_bottom);
                 } else if (type == 1) {
-                    if (isAdmin) {
-                        if (isMegagroup) {
-                            ((TextInfoPrivacyCell) view).setText(LocaleController.getString("MegaAdminsInfo", R.string.MegaAdminsInfo));
-                            view.setBackgroundResource(R.drawable.greydivider_bottom);
-                        } else {
-                            ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ChannelAdminsInfo", R.string.ChannelAdminsInfo));
-                            view.setBackgroundResource(R.drawable.greydivider_bottom);
-                        }
+                    if (i == 1 && isAdmin) {
+                        ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ChannelAdminsInfo", R.string.ChannelAdminsInfo));
+                        view.setBackgroundResource(R.drawable.greydivider);
                     } else {
                         ((TextInfoPrivacyCell) view).setText("");
                         view.setBackgroundResource(R.drawable.greydivider_bottom);
                     }
                 } else if (type == 2) {
-                    if ((!isPublic && i == 2 || i == 1) && isAdmin) {
-                        if (isMegagroup) {
-                            ((TextInfoPrivacyCell) view).setText("");
-                        } else {
-                            ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ChannelMembersInfo", R.string.ChannelMembersInfo));
-                        }
+                    if ((!isPublic && i == 2 || i == 1) &&isAdmin) {
+                        ((TextInfoPrivacyCell) view).setText(LocaleController.getString("ChannelMembersInfo", R.string.ChannelMembersInfo));
                         view.setBackgroundResource(R.drawable.greydivider);
                     } else {
                         ((TextInfoPrivacyCell) view).setText("");
@@ -629,38 +573,12 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         actionCell.setText(LocaleController.getString("ChannelInviteViaLink", R.string.ChannelInviteViaLink), false);
                     }
                 } else if (type == 1) {
-                    actionCell.setTextAndIcon(LocaleController.getString("ChannelAddAdmin", R.string.ChannelAddAdmin), R.drawable.managers, false);
+                    actionCell.setText(LocaleController.getString("ChannelAddAdmin", R.string.ChannelAddAdmin), true);
                 }
             } else if (viewType == 3) {
                 if (view == null) {
                     view = new ShadowSectionCell(mContext);
                 }
-            } else if (viewType == 4) {
-                if (view == null) {
-                    view = new TextCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                ((TextCell) view).setTextAndIcon(LocaleController.getString("ChannelAddAdmin", R.string.ChannelAddAdmin), R.drawable.managers);
-            } else if (viewType == 5) {
-                if (view == null) {
-                    view = new HeaderCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                ((HeaderCell) view).setText(LocaleController.getString("WhoCanAddMembers", R.string.WhoCanAddMembers));
-            } else if (viewType == 6) {
-                if (view == null) {
-                    view = new RadioCell(mContext);
-                    view.setBackgroundColor(0xffffffff);
-                }
-                RadioCell radioCell = (RadioCell) view;
-                TLRPC.Chat chat = MessagesController.getInstance().getChat(chatId);
-                if (i == 1) {
-                    radioCell.setTag(0);
-                    radioCell.setText(LocaleController.getString("WhoCanAddMembersAllMembers", R.string.WhoCanAddMembersAllMembers), chat != null && chat.democracy, true);
-                } else if (i == 2) {
-                    radioCell.setTag(1);
-                    radioCell.setText(LocaleController.getString("WhoCanAddMembersAdmins", R.string.WhoCanAddMembersAdmins), chat != null && !chat.democracy, false);
-                }
             }
             return view;
         }
@@ -669,18 +587,9 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         public int getItemViewType(int i) {
             if (type == 1) {
                 if (isAdmin) {
-                    if (isMegagroup) {
-                        if (i == 0) {
-                            return 5;
-                        } else if (i == 1 || i == 2) {
-                            return 6;
-                        } else if (i == 3) {
-                            return 3;
-                        }
-                    }
-                    if (i == participantsStartRow + participants.size()) {
-                        return 4;
-                    } else if (i == participantsStartRow + participants.size() + 1) {
+                    if (i == 0) {
+                        return 2;
+                    } else if (i == 1) {
                         return 1;
                     }
                 }
@@ -709,12 +618,12 @@ public int getItemViewType(int i) {
 
         @Override
         public int getViewTypeCount() {
-            return 7;
+            return 4;
         }
 
         @Override
         public boolean isEmpty() {
-            return getCount() == 0 || participants.isEmpty() && loadingUsers;
+            return participants.isEmpty();
         }
     }
 }
