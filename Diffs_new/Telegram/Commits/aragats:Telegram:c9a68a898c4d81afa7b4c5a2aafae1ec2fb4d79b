diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 17e573fae..7f80df5c0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -760,8 +760,8 @@ public boolean canSaveToGallery() {
 
     //TODO why it is static
     //TODO what is it guid. I need guid in postNotification. I should pass this parameter in args to say to which activiy I send the notification, because many activities could subscribe to the same notification, but not all of them must receive the response
-    public static void loadGeoTaggedGalleryPhotos(final int guid) {
-        if (getInstance().rTree != null || getInstance().isRTreeloaded()) {
+    public static void loadGeoTaggedGalleryPhotos(final int guid, final boolean forceReSync) {
+        if (!forceReSync && (getInstance().rTree != null || getInstance().isRTreeloaded())) {
             AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
@@ -774,7 +774,10 @@ public void run() {
             @Override
             public void run() {
                 List<Post> posts = new ArrayList<Post>();
-                RTree<Post, Geometry> rTree = getInstance().restoreRTree();
+                RTree<Post, Geometry> rTree = null;
+                if (!forceReSync) {
+                    rTree = getInstance().restoreRTree();
+                }
                 if (rTree == null) {
                     rTree = RTree.create();
                     String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
@@ -819,7 +822,7 @@ public boolean accept(File dir, String name) {
                 }
 //                restoreObject(Constants.LOCAL_POSTS_FILENAME);
                 getInstance().setRTree(rTree);
-                getInstance().saveLocalPosts(posts);
+                getInstance().saveLocalPosts(posts, forceReSync);
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
@@ -851,12 +854,12 @@ private void setRTree(RTree<Post, Geometry> rTree) {
     }
 
 
-    public void saveLocalPosts(final List<Post> posts) {
+    public void saveLocalPosts(final List<Post> posts, final boolean forceReSync) {
         if (CollectionUtils.isEmpty(posts)) {
             return;
         }
         long diff = new Date().getTime() - getInstance().rTreeLastDateUpdate;
-        if (diff > Constants.TIME_DIFFERENCE) {
+        if (forceReSync || diff > Constants.TIME_DIFFERENCE) {
             new Thread(new Runnable() {
                 @Override
                 public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 98c80785e..f2afed43f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -33,6 +33,7 @@
 import retrofit.Retrofit;
 import ru.aragats.wgo.ApplicationLoader;
 import ru.aragats.wgo.comparator.PostDateComparator;
+import ru.aragats.wgo.comparator.PostDistanceComparator;
 import ru.aragats.wgo.converter.vk.VKPhotoResponseToPostListConverter;
 import ru.aragats.wgo.dto.Coordinates;
 import ru.aragats.wgo.dto.FileUploadRequest;
@@ -250,20 +251,39 @@ private void loadLocalPosts(final PostRequest postRequest, final boolean reload)
                 Geometries.point(postRequest.getLongitude(), postRequest.getLatitude()), Constants.MAX_DISTANCE_DEGREE)
                 .toList().toBlocking().single();
 
-        int start = postRequest.getOffset();
-        int end = postRequest.getOffset() + postRequest.getCount();
-        if (end > entries.size()) {
-            end = entries.size();
-        }
-        if (!entries.isEmpty()) {
-            entries = entries.subList(start, end);
-        }
+//        Collections.sort(entries, new Comparator<Entry<Post, Geometry>>() {
+//            @Override
+//            public int compare(Entry<Post, Geometry> lhs, Entry<Post, Geometry> rhs) {
+//                return rhs.value().;
+//            }
+//        });
 
+
+        Location userLocation = LocationManagerHelper.getInstance().getLastSavedLocation();
+
+        //TODO duplicate in PostCell. But not for case when load data from server.
         for (Entry<Post, Geometry> entry : entries) {
             Post post = entry.value();
+            if (userLocation != null && post.getPostCoordinates() != null) {
+                Coordinates coordinates = post.getPostCoordinates();
+                Location location = new Location("network");
+                location.setLongitude(coordinates.getCoordinates().get(0));
+                location.setLatitude(coordinates.getCoordinates().get(1));
+                float distance = location.distanceTo(userLocation);
+                post.setDistance(distance);
+            }
             results.add(post);
         }
+        Collections.sort(results, new PostDistanceComparator());
 
+        int start = postRequest.getOffset();
+        int end = postRequest.getOffset() + postRequest.getCount();
+        if (end > results.size()) {
+            end = results.size();
+        }
+        if (!results.isEmpty()) {
+            results = results.subList(start, end);
+        }
 
         PostResponse postResponse = new PostResponse();
         postResponse.setPosts(results);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 857eb82d6..050dec05d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -258,7 +258,7 @@ public boolean onFragmentCreate() {
         }
 
         if (offlineMode) {
-            MediaController.loadGeoTaggedGalleryPhotos(classGuid);
+            MediaController.loadGeoTaggedGalleryPhotos(classGuid, false);
         }
         LocationManagerHelper.getInstance().runLocationListener();
 
@@ -404,9 +404,14 @@ public void onItemClick(int id) {
                         parentLayout.getDrawerLayoutContainer().openDrawer(false);
                     }
                 } else if (id == list_menu_synchronize) {
-                    System.out.println();
+                    if (offlineMode) {
+                        showProgressView();
+                        MediaController.loadGeoTaggedGalleryPhotos(0, true);
+                    } else {
+                        refreshPosts(true);
+                    }
                 } else if (id == list_menu_map) {
-                    System.out.println();
+                    openLocationChooser();
                 } else if (id == action_bar_menu_location) {
                     openLocationChooser();
                 } else if (id == 1) {
@@ -819,6 +824,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
             stopRefreshingProgressView();
         } else if (id == NotificationCenter.postsNeedReload) {
+//            hideProgressView();
             boolean scrollToTop = false;
             if (args != null && args.length != 0) {
                 scrollToTop = (boolean) args[0];
@@ -827,11 +833,11 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 layoutManager.scrollToPosition(0);
             }
             if (postsAdapter != null) {
-                if (postsAdapter.isDataSetChanged()) {
+//                if (postsAdapter.isDataSetChanged()) {
                     postsAdapter.notifyDataSetChanged();
-                } else {
-                    updateVisibleRows(PostsController.UPDATE_MASK_NEW_MESSAGE);
-                }
+//                } else {
+//                    updateVisibleRows(PostsController.UPDATE_MASK_NEW_MESSAGE);
+//                }
             }
             if (postsSearchAdapter != null) {
                 postsSearchAdapter.notifyDataSetChanged();
@@ -889,7 +895,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         postListView.setVisibility(View.INVISIBLE);
                     }
                 }
-                MediaController.loadGeoTaggedGalleryPhotos(0);
+                MediaController.loadGeoTaggedGalleryPhotos(0, false);
             }
 
 
@@ -917,6 +923,20 @@ private void refreshPosts(boolean force) {
         }
     }
 
+    private void showProgressView() {
+        if (progressView != null && postListView != null) {
+            progressView.setVisibility(View.VISIBLE);
+            postListView.setVisibility(View.INVISIBLE);
+        }
+    }
+
+    private void hideProgressView() {
+        if (progressView != null && postListView != null) {
+            progressView.setVisibility(View.INVISIBLE);
+            postListView.setVisibility(View.VISIBLE);
+        }
+    }
+
 
     private void hideFloatingButton(boolean hide) {
         if (floatingHidden == hide) {
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDateComparator.java b/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDateComparator.java
index 3ce11e17f..3a201b3c2 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDateComparator.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDateComparator.java
@@ -10,6 +10,15 @@
 public class PostDateComparator implements Comparator<Post> {
     @Override
     public int compare(Post lhs, Post rhs) {
-        return (int) (rhs.getCreatedDate() - lhs.getCreatedDate());
+        long leftDate = lhs.getCreatedDate();
+        long rightDate = rhs.getCreatedDate();
+        if (rightDate > leftDate) {
+            return 1;
+        } else if (rightDate < leftDate) {
+            return -1;
+        } else {
+            return 0;
+        }
+//                    return (int) (rhs.getCreatedDate() - lhs.getCreatedDate());
     }
 }
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDistanceComparator.java b/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDistanceComparator.java
new file mode 100644
index 000000000..60323e519
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDistanceComparator.java
@@ -0,0 +1,24 @@
+package ru.aragats.wgo.comparator;
+
+import java.util.Comparator;
+
+import ru.aragats.wgo.dto.Post;
+
+/**
+ * Created by aragats on 05/03/16.
+ */
+public class PostDistanceComparator implements Comparator<Post> {
+    @Override
+    public int compare(Post lhs, Post rhs) {
+        float leftDistance = lhs.getDistance();
+        float rightDistance = rhs.getDistance();
+        if (leftDistance > rightDistance) {
+            return 1;
+        } else if (leftDistance < rightDistance) {
+            return -1;
+        } else {
+            return 0;
+        }
+//                    return (int) (rhs.getCreatedDate() - lhs.getCreatedDate());
+    }
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java
index 9541d6f4b..d97ce3994 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java
@@ -9,7 +9,7 @@
 /**
  * Created by aragats on 27/12/14.
  */
-public class Post implements Serializable{
+public class Post implements Serializable {
 
     private String id;
     private String text;
@@ -19,6 +19,9 @@
     private List<Image> images;
     private long createdDate;
 
+//  transient
+    private transient float distance;
+
 
     public Post() {
 
@@ -112,4 +115,13 @@ public Coordinates getPostCoordinates() {
     public void setImages(List<Image> images) {
         this.images = images;
     }
+
+
+    public float getDistance() {
+        return distance;
+    }
+
+    public void setDistance(float distance) {
+        this.distance = distance;
+    }
 }
