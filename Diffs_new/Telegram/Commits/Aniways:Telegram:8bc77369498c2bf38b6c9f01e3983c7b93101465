diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 69c4febcd..db5e5eab8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -46,7 +46,8 @@
     public static final int MESSAGE_SEND_STATE_SENT = 0;
     public static final int MESSAGE_SEND_STATE_SEND_ERROR = 2;
 
-    private Editable mDecodedMessageCache;
+    private Editable mDecodedMessageBigIconsCache;
+    private Editable mDecodedMessageSmallIconsCache;
 
     public TLRPC.Message messageOwner;
     public CharSequence messageText;
@@ -368,9 +369,9 @@ public CharSequence getAniwaysDecodedMessageTextBigIcons(IAniwaysTextContainer t
             return this.messageText;
         }
 
-        if(mDecodedMessageCache == null){
+        if(mDecodedMessageBigIconsCache == null){
             try {
-                mDecodedMessageCache = Aniways.decodeMessage(this.messageText, new AniwaysIconInfoDisplayer(), textContainer, false);
+                mDecodedMessageBigIconsCache = Aniways.decodeMessage(this.messageText, new AniwaysIconInfoDisplayer(), textContainer, false);
             }
             catch(AniwaysNotInitializedException ex){
                 Log.e(true, TAG, "Caught aniways not initialized exception", ex);
@@ -378,7 +379,25 @@ public CharSequence getAniwaysDecodedMessageTextBigIcons(IAniwaysTextContainer t
             }
         }
 
-        return mDecodedMessageCache;
+        return mDecodedMessageBigIconsCache;
+    }
+
+    public CharSequence getAniwaysDecodedMessageTextSmallIcons(IAniwaysTextContainer textContainer){
+        if(textContainer == null){
+            return this.messageText;
+        }
+
+        if(mDecodedMessageSmallIconsCache == null){
+            try {
+                mDecodedMessageSmallIconsCache = Aniways.decodeMessage(this.messageText, new AniwaysIconInfoDisplayer(), textContainer, true);
+            }
+            catch(AniwaysNotInitializedException ex){
+                Log.e(true, TAG, "Caught aniways not initialized exception", ex);
+                return this.messageText;
+            }
+        }
+
+        return mDecodedMessageSmallIconsCache;
     }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index ef1e7a367..7509652fa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -175,6 +175,7 @@ private void init() {
     public DialogCell(Context context) {
         super(context);
         mDynamicImageSpansContainer = new AniwaysDynamicImageSpansContainer(this);
+        mIconInfoDisplayer = new AniwaysIconInfoDisplayer();
         init();
         avatarImage = new ImageReceiver(this);
         avatarImage.setRoundRadius(AndroidUtilities.dp(26));
@@ -349,15 +350,15 @@ public void buildLayout() {
                         checkMessage = false;
                         if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
                             currentMessagePaint = messagePrintingPaint;
-                            messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#4d83b3>%s</font>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                            messageString = Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#4d83b3>%s</font>", name, message.messageText));
                         } else {
                             if (message.messageOwner.message != null) {
                                 String mess = message.messageOwner.message;
-                                if (mess.length() > 150) {
-                                    mess = mess.substring(0, 150);
-                                }
+                                //if (mess.length() > 150) {
+                                //    mess = mess.substring(0, 150);
+                                //}
                                 mess = mess.replace("\n", " ");
-                                messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#808080>%s</font>", name, mess.replace("<", "&lt;").replace(">", "&gt;"))), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                                messageString = Html.fromHtml(String.format("<font color=#4d83b3>%s:</font> <font color=#808080>%s</font>", name, mess.replace("<", "&lt;").replace(">", "&gt;")));
                             }
                         }
                     } else {
@@ -535,20 +536,33 @@ public void buildLayout() {
                 messageString = "";
             }
             String mess = messageString.toString();
-            if (mess.length() > 150) {
-                mess = mess.substring(0, 150);
-            }
+            //if (mess.length() > 150) {
+            //    mess = mess.substring(0, 150);
+            //}
             mess = mess.replace("\n", " ");
-            messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17));
+            //messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17));
+            messageString = mess;
         }
         messageWidth = Math.max(AndroidUtilities.dp(12), messageWidth);
-        CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        //CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        Spannable oldText = this.getText();
+        //CharSequence messageStringFinal = Aniways.decodeMessage(messageString, this.mIconInfoDisplayer, this, true);
+        CharSequence messageStringFinal = message.getAniwaysDecodedMessageTextSmallIcons(this);
         try {
             messageLayout = new StaticLayout(messageStringFinal, currentMessagePaint, messageWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
 
+        this.getDynamicImageSpansContainer().onSetText(this.getText(), oldText);
+
+        // Call liteners
+        if(mSetTextListeners != null){
+            for(AniwaysMessageListViewItemWrapperLayout.OnSetTextListener listener : mSetTextListeners){
+                listener.onSetText(this.getText());
+            }
+        }
+
         double widthpx = 0;
         float left = 0;
         if (LocaleController.isRTL) {
@@ -762,7 +776,7 @@ public Spannable getText() {
         if(message == null){
             return null;
         }
-        return (Spannable) this.message.getAniwaysDecodedMessageTextBigIcons(this);
+        return (Spannable) this.message.getAniwaysDecodedMessageTextSmallIcons(this);
     }
 
     /** Return the point (in pixels) of the received char position as it is displayed
@@ -792,19 +806,15 @@ public void removeTextWatchers() {
 
     @Override
     public void addBackTheTextWatchers() {
-        //TODO: temp!!
-        //setDialog(currentDialog);
         message.generateLayout(this);
-        //setMessageObject(currentMessageObject, true);
+        setDialog(currentDialogId, message, allowPrintStrings, lastMessageDate, unreadCount);
     }
 
     @Override
     public void onLoadedImageSuccessfuly() {
         Log.i("AniwaysDialogCell", "Successfully loaded image");
-        //setDialog(currentDialog);
-
-        message.generateLayout(DialogCell.this);
-        //setMessageObject(message, true);
+        message.generateLayout(this);
+        setDialog(currentDialogId, message, allowPrintStrings, lastMessageDate, unreadCount);
     }
 
     @Override
@@ -815,6 +825,7 @@ public void onErrorLoadingImage() {
     @Override
     public void registerSetTextListener(AniwaysMessageListViewItemWrapperLayout.OnSetTextListener textChangedListener) {
         this.mSetTextListeners.add(textChangedListener);
+        textChangedListener.onSetText(getText());
 
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 125a9b9b4..4e029f1d8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -41,6 +41,9 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.NotificationCenter;
+
+import com.aniways.Aniways;
+import com.aniways.AniwaysEditText;
 import com.aniways.anigram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
@@ -62,7 +65,7 @@
     private EditText messsageEditText;
     private ImageButton sendButton;
     private ImageView emojiButton;
-    private EmojiView emojiView;
+    //private EmojiView emojiView;
     private TextView recordTimeText;
     private ImageButton audioSendButton;
     private View recordPanel;
@@ -127,7 +130,7 @@ public void onDestroy() {
         if (sizeNotifierRelativeLayout != null) {
             sizeNotifierRelativeLayout.delegate = null;
         }
-        removeEmojiWindow();
+        //removeEmojiWindow();
     }
 
     public void setContainerView(Activity activity, View containerView) {
@@ -161,22 +164,27 @@ public void setContainerView(Activity activity, View containerView) {
         TextView textView = (TextView) containerView.findViewById(R.id.slideToCancelTextView);
         textView.setText(LocaleController.getString("SlideToCancel", R.string.SlideToCancel));
 
+        Aniways.makeButtonAniwaysEmoticonsButton(emojiButton, (ViewGroup) sizeNotifierRelativeLayout, (AniwaysEditText) messsageEditText, null, true);
+
+        /*
         emojiButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 showEmojiPopup(!showingEmoji);
             }
         });
+        */
 
         messsageEditText.setOnKeyListener(new View.OnKeyListener() {
             @Override
             public boolean onKey(View view, int i, KeyEvent keyEvent) {
-                if (i == 4 && !keyboardVisible && showingEmoji) {
-                    if (keyEvent.getAction() == 1) {
-                        showEmojiPopup(false);
-                    }
-                    return true;
-                } else if (i == KeyEvent.KEYCODE_ENTER && sendByEnter && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
+                //if (i == 4 && !keyboardVisible && showingEmoji) {
+                //    if (keyEvent.getAction() == 1) {
+                //        showEmojiPopup(false);
+                //    }
+                //    return true;
+                //} else
+                if (i == KeyEvent.KEYCODE_ENTER && sendByEnter && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
                     sendMessage();
                     return true;
                 }
@@ -184,6 +192,7 @@ public boolean onKey(View view, int i, KeyEvent keyEvent) {
             }
         });
 
+        /*
         messsageEditText.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -192,6 +201,7 @@ public void onClick(View view) {
                 }
             }
         });
+        */
 
         messsageEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
             @Override
@@ -306,6 +316,7 @@ public void afterTextChanged(Editable editable) {
                 if (sendByEnter && editable.length() > 0 && editable.charAt(editable.length() - 1) == '\n') {
                     sendMessage();
                 }
+                /*
                 int i = 0;
                 ImageSpan[] arrayOfImageSpan = editable.getSpans(0, editable.length(), ImageSpan.class);
                 int j = arrayOfImageSpan.length;
@@ -317,6 +328,7 @@ public void afterTextChanged(Editable editable) {
                     editable.removeSpan(arrayOfImageSpan[i]);
                     i++;
                 }
+                */
             }
         });
 
@@ -324,7 +336,7 @@ public void afterTextChanged(Editable editable) {
     }
 
     private void sendMessage() {
-        if (processSendingText(messsageEditText.getText().toString())) {
+        if (processSendingText(Aniways.encodeMessage(messsageEditText.getText()))) {
             messsageEditText.setText("");
             lastTypingTimeSend = 0;
             if (delegate != null) {
@@ -608,6 +620,7 @@ public void onAnimationEnd(Object animator) {
         }
     }
 
+    /*
     private void showEmojiPopup(boolean show) {
         showingEmoji = show;
         if (show) {
@@ -717,11 +730,14 @@ private void removeEmojiWindow() {
             FileLog.e("tmessages", e);
         }
     }
+       */
 
     public void hideEmojiPopup() {
-        if (showingEmoji) {
-            showEmojiPopup(false);
-        }
+
+        //TODO: relay this to the Aniways emoji popup somehow..
+        //if (showingEmoji) {
+        //    showEmojiPopup(false);
+        //}
     }
 
     public void setDelegate(ChatActivityEnterViewDelegate delegate) {
@@ -801,6 +817,7 @@ public void addToAttachLayout(View view) {
 
     @Override
     public void onSizeChanged(int height) {
+        /*
         Rect localRect = new Rect();
         parentActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(localRect);
 
@@ -852,15 +869,17 @@ public void run() {
         } else if (!keyboardVisible && keyboardVisible != oldValue && showingEmoji) {
             showEmojiPopup(false);
         }
+        */
     }
 
     @Override
     public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.emojiDidLoaded) {
-            if (emojiView != null) {
-                emojiView.invalidateViews();
-            }
-        } else if (id == NotificationCenter.recordProgressChanged) {
+        //if (id == NotificationCenter.emojiDidLoaded) {
+            //if (emojiView != null) {
+            //    emojiView.invalidateViews();
+            //}
+        //} else
+        if (id == NotificationCenter.recordProgressChanged) {
             Long time = (Long) args[0] / 1000;
             String str = String.format("%02d:%02d", time / 60, time % 60);
             if (lastTimeString == null || !lastTimeString.equals(str)) {
