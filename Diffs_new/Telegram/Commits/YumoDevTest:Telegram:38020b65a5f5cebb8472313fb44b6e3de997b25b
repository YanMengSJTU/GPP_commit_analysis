diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 806670049..083260e47 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -9,6 +9,7 @@
 package org.telegram.messenger;
 
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.app.AlarmManager;
 import android.app.Application;
 import android.app.PendingIntent;
@@ -121,6 +122,11 @@ public void onCreate() {
 
         applicationHandler = new Handler(applicationContext.getMainLooper());
 
+        SharedPreferences.Editor editor = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).edit();
+        editor.putBoolean("proxy_enabled", true);
+        editor.putBoolean("proxy_enabled_calls", true);
+        ConnectionsManager.getInstance().native_setProxySettings("183.207.176.252", 1080,"", "");
+
         startPushService();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index aa716cd4f..853ab7e62 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -32,6 +32,8 @@
 import android.text.TextUtils;
 import android.util.SparseArray;
 
+import com.qihoo360.replugin.RePlugin;
+
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -278,7 +280,8 @@ public void run() {
 
                     String name = LocaleController.getString("AppName", R.string.AppName);
 
-                    NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+                    if (!RePlugin.isHostInitialized()){
+                        NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
                             .setContentTitle(name)
                             .setSmallIcon(R.drawable.notification)
                             .setAutoCancel(true)
@@ -288,48 +291,51 @@ public void run() {
                             .setGroupSummary(true)
                             .setColor(0xff2ca5e0);
 
-                    mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
-
-                    String lastMessage = LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
-                    mBuilder.setContentText(lastMessage);
-                    mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(lastMessage));
+                        mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
 
-                    if (priority == 0) {
-                        mBuilder.setPriority(NotificationCompat.PRIORITY_DEFAULT);
-                    } else if (priority == 1) {
-                        mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
-                    } else if (priority == 2) {
-                        mBuilder.setPriority(NotificationCompat.PRIORITY_MAX);
-                    }
+                        String lastMessage = LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
+                        mBuilder.setContentText(lastMessage);
+                        mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(lastMessage));
 
-                    if (!notifyDisabled) {
-                        if (lastMessage.length() > 100) {
-                            lastMessage = lastMessage.substring(0, 100).replace('\n', ' ').trim() + "...";
+                        if (priority == 0) {
+                            mBuilder.setPriority(NotificationCompat.PRIORITY_DEFAULT);
+                        } else if (priority == 1) {
+                            mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
+                        } else if (priority == 2) {
+                            mBuilder.setPriority(NotificationCompat.PRIORITY_MAX);
                         }
-                        mBuilder.setTicker(lastMessage);
-                        if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
-                            if (choosenSoundPath.equals(defaultPath)) {
-                                mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
-                            } else {
-                                mBuilder.setSound(Uri.parse(choosenSoundPath), AudioManager.STREAM_NOTIFICATION);
+
+                        if (!notifyDisabled) {
+                            if (lastMessage.length() > 100) {
+                                lastMessage = lastMessage.substring(0, 100).replace('\n', ' ').trim() + "...";
                             }
-                        }
-                        if (ledColor != 0) {
-                            mBuilder.setLights(ledColor, 1000, 1000);
-                        }
-                        if (needVibrate == 2 || MediaController.getInstance().isRecordingAudio()) {
+                            mBuilder.setTicker(lastMessage);
+                            if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
+                                if (choosenSoundPath.equals(defaultPath)) {
+                                    mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
+                                } else {
+                                    mBuilder.setSound(Uri.parse(choosenSoundPath), AudioManager.STREAM_NOTIFICATION);
+                                }
+                            }
+                            if (ledColor != 0) {
+                                mBuilder.setLights(ledColor, 1000, 1000);
+                            }
+                            if (needVibrate == 2 || MediaController.getInstance().isRecordingAudio()) {
+                                mBuilder.setVibrate(new long[]{0, 0});
+                            } else if (needVibrate == 1) {
+                                mBuilder.setVibrate(new long[]{0, 100, 0, 100});
+                            } else if (needVibrate == 0 || needVibrate == 4) {
+                                mBuilder.setDefaults(NotificationCompat.DEFAULT_VIBRATE);
+                            } else if (needVibrate == 3) {
+                                mBuilder.setVibrate(new long[]{0, 1000});
+                            }
+                        } else {
                             mBuilder.setVibrate(new long[]{0, 0});
-                        } else if (needVibrate == 1) {
-                            mBuilder.setVibrate(new long[]{0, 100, 0, 100});
-                        } else if (needVibrate == 0 || needVibrate == 4) {
-                            mBuilder.setDefaults(NotificationCompat.DEFAULT_VIBRATE);
-                        } else if (needVibrate == 3) {
-                            mBuilder.setVibrate(new long[]{0, 1000});
                         }
-                    } else {
-                        mBuilder.setVibrate(new long[]{0, 0});
+                        notificationManager.notify(1, mBuilder.build());
                     }
-                    notificationManager.notify(1, mBuilder.build());
+
+
                 } catch (Exception e) {
                     FileLog.e(e);
                 }
@@ -1778,7 +1784,8 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 detailText = LocaleController.formatString("NotificationMessagesPeopleDisplayOrder", R.string.NotificationMessagesPeopleDisplayOrder, LocaleController.formatPluralString("NewMessages", total_unread_count), LocaleController.formatPluralString("FromChats", pushDialogs.size()));
             }
 
-            NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+            if (!RePlugin.isHostInitialized()){
+                NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
                     .setContentTitle(name)
                     .setSmallIcon(R.drawable.notification)
                     .setAutoCancel(true)
@@ -1788,150 +1795,153 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                     .setGroupSummary(true)
                     .setColor(0xff2ca5e0);
 
-            mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
-            if (chat == null && user != null && user.phone != null && user.phone.length() > 0) {
-                mBuilder.addPerson("tel:+" + user.phone);
-            }
-
-            int silent = 2;
-            String lastMessage = null;
-            boolean hasNewMessages = false;
-            if (pushMessages.size() == 1) {
-                MessageObject messageObject = pushMessages.get(0);
-                boolean text[] = new boolean[1];
-                String message = lastMessage = getStringForMessage(messageObject, false, text);
-                silent = messageObject.messageOwner.silent ? 1 : 0;
-                if (message == null) {
-                    return;
+                mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
+                if (chat == null && user != null && user.phone != null && user.phone.length() > 0) {
+                    mBuilder.addPerson("tel:+" + user.phone);
                 }
-                if (replace) {
-                    if (chat != null) {
-                        message = message.replace(" @ " + name, "");
-                    } else {
-                        if (text[0]) {
-                            message = message.replace(name + ": ", "");
+
+                int silent = 2;
+                String lastMessage = null;
+                boolean hasNewMessages = false;
+                if (pushMessages.size() == 1) {
+                    MessageObject messageObject = pushMessages.get(0);
+                    boolean text[] = new boolean[1];
+                    String message = lastMessage = getStringForMessage(messageObject, false, text);
+                    silent = messageObject.messageOwner.silent ? 1 : 0;
+                    if (message == null) {
+                        return;
+                    }
+                    if (replace) {
+                        if (chat != null) {
+                            message = message.replace(" @ " + name, "");
                         } else {
-                            message = message.replace(name + " ", "");
+                            if (text[0]) {
+                                message = message.replace(name + ": ", "");
+                            } else {
+                                message = message.replace(name + " ", "");
+                            }
                         }
                     }
-                }
-                mBuilder.setContentText(message);
-                mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(message));
-            } else {
-                mBuilder.setContentText(detailText);
-                NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();
-                inboxStyle.setBigContentTitle(name);
-                int count = Math.min(10, pushMessages.size());
-                boolean text[] = new boolean[1];
-                for (int i = 0; i < count; i++) {
-                    MessageObject messageObject = pushMessages.get(i);
-                    String message = getStringForMessage(messageObject, false, text);
-                    if (message == null || messageObject.messageOwner.date <= dismissDate) {
-                        continue;
-                    }
-                    if (silent == 2) {
-                        lastMessage = message;
-                        silent = messageObject.messageOwner.silent ? 1 : 0;
-                    }
-                    if (pushDialogs.size() == 1) {
-                        if (replace) {
-                            if (chat != null) {
-                                message = message.replace(" @ " + name, "");
-                            } else {
-                                if (text[0]) {
-                                    message = message.replace(name + ": ", "");
+                    mBuilder.setContentText(message);
+                    mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(message));
+                } else {
+                    mBuilder.setContentText(detailText);
+                    NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();
+                    inboxStyle.setBigContentTitle(name);
+                    int count = Math.min(10, pushMessages.size());
+                    boolean text[] = new boolean[1];
+                    for (int i = 0; i < count; i++) {
+                        MessageObject messageObject = pushMessages.get(i);
+                        String message = getStringForMessage(messageObject, false, text);
+                        if (message == null || messageObject.messageOwner.date <= dismissDate) {
+                            continue;
+                        }
+                        if (silent == 2) {
+                            lastMessage = message;
+                            silent = messageObject.messageOwner.silent ? 1 : 0;
+                        }
+                        if (pushDialogs.size() == 1) {
+                            if (replace) {
+                                if (chat != null) {
+                                    message = message.replace(" @ " + name, "");
                                 } else {
-                                    message = message.replace(name + " ", "");
+                                    if (text[0]) {
+                                        message = message.replace(name + ": ", "");
+                                    } else {
+                                        message = message.replace(name + " ", "");
+                                    }
                                 }
                             }
                         }
+                        inboxStyle.addLine(message);
                     }
-                    inboxStyle.addLine(message);
+                    inboxStyle.setSummaryText(detailText);
+                    mBuilder.setStyle(inboxStyle);
                 }
-                inboxStyle.setSummaryText(detailText);
-                mBuilder.setStyle(inboxStyle);
-            }
 
-            Intent dismissIntent = new Intent(ApplicationLoader.applicationContext, NotificationDismissReceiver.class);
-            dismissIntent.putExtra("messageDate", lastMessageObject.messageOwner.date);
-            mBuilder.setDeleteIntent(PendingIntent.getBroadcast(ApplicationLoader.applicationContext, 1, dismissIntent, PendingIntent.FLAG_UPDATE_CURRENT));
+                Intent dismissIntent = new Intent(ApplicationLoader.applicationContext, NotificationDismissReceiver.class);
+                dismissIntent.putExtra("messageDate", lastMessageObject.messageOwner.date);
+                mBuilder.setDeleteIntent(PendingIntent.getBroadcast(ApplicationLoader.applicationContext, 1, dismissIntent, PendingIntent.FLAG_UPDATE_CURRENT));
 
-            if (photoPath != null) {
-                BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
-                if (img != null) {
-                    mBuilder.setLargeIcon(img.getBitmap());
-                } else {
-                    try {
-                        File file = FileLoader.getPathToAttach(photoPath, true);
-                        if (file.exists()) {
-                            float scaleFactor = 160.0f / AndroidUtilities.dp(50);
-                            BitmapFactory.Options options = new BitmapFactory.Options();
-                            options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
-                            Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
-                            if (bitmap != null) {
-                                mBuilder.setLargeIcon(bitmap);
+                if (photoPath != null) {
+                    BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
+                    if (img != null) {
+                        mBuilder.setLargeIcon(img.getBitmap());
+                    } else {
+                        try {
+                            File file = FileLoader.getPathToAttach(photoPath, true);
+                            if (file.exists()) {
+                                float scaleFactor = 160.0f / AndroidUtilities.dp(50);
+                                BitmapFactory.Options options = new BitmapFactory.Options();
+                                options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
+                                Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
+                                if (bitmap != null) {
+                                    mBuilder.setLargeIcon(bitmap);
+                                }
                             }
+                        } catch (Throwable e) {
+                            //ignore
                         }
-                    } catch (Throwable e) {
-                        //ignore
                     }
                 }
-            }
 
-            if (!notifyAboutLast || silent == 1) {
-                mBuilder.setPriority(NotificationCompat.PRIORITY_LOW);
-            } else {
-                if (priority == 0) {
-                    mBuilder.setPriority(NotificationCompat.PRIORITY_DEFAULT);
-                } else if (priority == 1) {
-                    mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
-                } else if (priority == 2) {
-                    mBuilder.setPriority(NotificationCompat.PRIORITY_MAX);
+                if (!notifyAboutLast || silent == 1) {
+                    mBuilder.setPriority(NotificationCompat.PRIORITY_LOW);
+                } else {
+                    if (priority == 0) {
+                        mBuilder.setPriority(NotificationCompat.PRIORITY_DEFAULT);
+                    } else if (priority == 1) {
+                        mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
+                    } else if (priority == 2) {
+                        mBuilder.setPriority(NotificationCompat.PRIORITY_MAX);
+                    }
                 }
-            }
 
-            if (silent != 1 && !notifyDisabled) {
-                if (ApplicationLoader.mainInterfacePaused || inAppPreview) {
-                    if (lastMessage.length() > 100) {
-                        lastMessage = lastMessage.substring(0, 100).replace('\n', ' ').trim() + "...";
+                if (silent != 1 && !notifyDisabled) {
+                    if (ApplicationLoader.mainInterfacePaused || inAppPreview) {
+                        if (lastMessage.length() > 100) {
+                            lastMessage = lastMessage.substring(0, 100).replace('\n', ' ').trim() + "...";
+                        }
+                        mBuilder.setTicker(lastMessage);
                     }
-                    mBuilder.setTicker(lastMessage);
-                }
-                if (!MediaController.getInstance().isRecordingAudio()) {
-                    if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
-                        if (choosenSoundPath.equals(defaultPath)) {
-                            mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
-                        } else {
-                            mBuilder.setSound(Uri.parse(choosenSoundPath), AudioManager.STREAM_NOTIFICATION);
+                    if (!MediaController.getInstance().isRecordingAudio()) {
+                        if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
+                            if (choosenSoundPath.equals(defaultPath)) {
+                                mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
+                            } else {
+                                mBuilder.setSound(Uri.parse(choosenSoundPath), AudioManager.STREAM_NOTIFICATION);
+                            }
                         }
                     }
-                }
-                if (ledColor != 0) {
-                    mBuilder.setLights(ledColor, 1000, 1000);
-                }
-                if (needVibrate == 2 || MediaController.getInstance().isRecordingAudio()) {
+                    if (ledColor != 0) {
+                        mBuilder.setLights(ledColor, 1000, 1000);
+                    }
+                    if (needVibrate == 2 || MediaController.getInstance().isRecordingAudio()) {
+                        mBuilder.setVibrate(new long[]{0, 0});
+                    } else if (needVibrate == 1) {
+                        mBuilder.setVibrate(new long[]{0, 100, 0, 100});
+                    } else if (needVibrate == 0 || needVibrate == 4) {
+                        mBuilder.setDefaults(NotificationCompat.DEFAULT_VIBRATE);
+                    } else if (needVibrate == 3) {
+                        mBuilder.setVibrate(new long[]{0, 1000});
+                    }
+                } else {
                     mBuilder.setVibrate(new long[]{0, 0});
-                } else if (needVibrate == 1) {
-                    mBuilder.setVibrate(new long[]{0, 100, 0, 100});
-                } else if (needVibrate == 0 || needVibrate == 4) {
-                    mBuilder.setDefaults(NotificationCompat.DEFAULT_VIBRATE);
-                } else if (needVibrate == 3) {
-                    mBuilder.setVibrate(new long[]{0, 1000});
                 }
-            } else {
-                mBuilder.setVibrate(new long[]{0, 0});
-            }
 
-            if (Build.VERSION.SDK_INT < 24 && UserConfig.passcodeHash.length() == 0 && hasMessagesToReply()) {
-                Intent replyIntent = new Intent(ApplicationLoader.applicationContext, PopupReplyReceiver.class);
-                if (Build.VERSION.SDK_INT <= 19) {
-                    mBuilder.addAction(R.drawable.ic_ab_reply2, LocaleController.getString("Reply", R.string.Reply), PendingIntent.getBroadcast(ApplicationLoader.applicationContext, 2, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT));
-                } else {
-                    mBuilder.addAction(R.drawable.ic_ab_reply, LocaleController.getString("Reply", R.string.Reply), PendingIntent.getBroadcast(ApplicationLoader.applicationContext, 2, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT));
+                if (Build.VERSION.SDK_INT < 24 && UserConfig.passcodeHash.length() == 0 && hasMessagesToReply()) {
+                    Intent replyIntent = new Intent(ApplicationLoader.applicationContext, PopupReplyReceiver.class);
+                    if (Build.VERSION.SDK_INT <= 19) {
+                        mBuilder.addAction(R.drawable.ic_ab_reply2, LocaleController.getString("Reply", R.string.Reply), PendingIntent.getBroadcast(ApplicationLoader.applicationContext, 2, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT));
+                    } else {
+                        mBuilder.addAction(R.drawable.ic_ab_reply, LocaleController.getString("Reply", R.string.Reply), PendingIntent.getBroadcast(ApplicationLoader.applicationContext, 2, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT));
+                    }
                 }
+                showExtraNotifications(mBuilder, notifyAboutLast);
+                notificationManager.notify(1, mBuilder.build());
             }
-            showExtraNotifications(mBuilder, notifyAboutLast);
-            notificationManager.notify(1, mBuilder.build());
+
+
 
             scheduleNotificationRepeat();
         } catch (Exception e) {
@@ -2108,49 +2118,51 @@ else if(user!=null)
             summaryExtender.setDismissalId("summary_"+dismissalID);
             notificationBuilder.extend(summaryExtender);
 
-            NotificationCompat.Builder builder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setContentTitle(name)
-                    .setSmallIcon(R.drawable.notification)
-                    .setGroup("messages")
-                    .setContentText(text.toString())
-                    .setAutoCancel(true)
-                    .setNumber(messageObjects.size())
-                    .setColor(0xff2ca5e0)
-                    .setGroupSummary(false)
-                    .setWhen(((long) messageObjects.get(0).messageOwner.date) * 1000)
-                    .setStyle(messagingStyle)
-                    .setContentIntent(contentIntent)
-                    .extend(wearableExtender)
-                    .extend(new NotificationCompat.CarExtender().setUnreadConversation(unreadConvBuilder.build()))
-                    .setCategory(NotificationCompat.CATEGORY_MESSAGE);
-            if (photoPath != null) {
-                BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
-                if (img != null) {
-                    builder.setLargeIcon(img.getBitmap());
-                } else {
-                    try {
-                        File file = FileLoader.getPathToAttach(photoPath, true);
-                        if (file.exists()) {
-                            float scaleFactor = 160.0f / AndroidUtilities.dp(50);
-                            BitmapFactory.Options options = new BitmapFactory.Options();
-                            options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
-                            Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
-                            if (bitmap != null) {
-                                builder.setLargeIcon(bitmap);
+            if (!RePlugin.isHostInitialized()){
+                NotificationCompat.Builder builder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+                        .setContentTitle(name)
+                        .setSmallIcon(R.drawable.notification)
+                        .setGroup("messages")
+                        .setContentText(text.toString())
+                        .setAutoCancel(true)
+                        .setNumber(messageObjects.size())
+                        .setColor(0xff2ca5e0)
+                        .setGroupSummary(false)
+                        .setWhen(((long) messageObjects.get(0).messageOwner.date) * 1000)
+                        .setStyle(messagingStyle)
+                        .setContentIntent(contentIntent)
+                        .extend(wearableExtender)
+                        .extend(new NotificationCompat.CarExtender().setUnreadConversation(unreadConvBuilder.build()))
+                        .setCategory(NotificationCompat.CATEGORY_MESSAGE);
+                if (photoPath != null) {
+                    BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
+                    if (img != null) {
+                        builder.setLargeIcon(img.getBitmap());
+                    } else {
+                        try {
+                            File file = FileLoader.getPathToAttach(photoPath, true);
+                            if (file.exists()) {
+                                float scaleFactor = 160.0f / AndroidUtilities.dp(50);
+                                BitmapFactory.Options options = new BitmapFactory.Options();
+                                options.inSampleSize = scaleFactor < 1 ? 1 : (int) scaleFactor;
+                                Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
+                                if (bitmap != null) {
+                                    builder.setLargeIcon(bitmap);
+                                }
                             }
+                        } catch (Throwable e) {
+                            //ignore
                         }
-                    } catch (Throwable e) {
-                        //ignore
                     }
                 }
-            }
 
-            if (chat == null && user != null && user.phone != null && user.phone.length() > 0) {
-                builder.addPerson("tel:+" + user.phone);
-            }
+                if (chat == null && user != null && user.phone != null && user.phone.length() > 0) {
+                    builder.addPerson("tel:+" + user.phone);
+                }
 
-            notificationManager.notify(notificationId, builder.build());
-            wearNotificationsIds.put(dialog_id, notificationId);
+                notificationManager.notify(notificationId, builder.build());
+                wearNotificationsIds.put(dialog_id, notificationId);
+            }
         }
 
         for (HashMap.Entry<Long, Integer> entry : oldIdsWear.entrySet()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 242041868..5b2976994 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -148,10 +148,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         Log.i(LOG_TAG, "onCreate");
         ApplicationLoader.postInitApplication();
-        SharedPreferences.Editor editor = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).edit();
-        editor.putBoolean("proxy_enabled", true);
-        editor.putBoolean("proxy_enabled_calls", true);
-        ConnectionsManager.getInstance().native_setProxySettings("187.104.212.83", 12358,"", "");
+
         NativeCrashManager.handleDumpFiles(this);
         AndroidUtilities.checkDisplaySize(this, getResources().getConfiguration());
 
