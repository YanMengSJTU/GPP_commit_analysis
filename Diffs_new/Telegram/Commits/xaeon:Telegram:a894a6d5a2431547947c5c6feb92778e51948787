diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
deleted file mode 100644
index 37f2589a8..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 5.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2018.
- */
-
-package org.telegram.messenger;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-
-public class BuildVars {
-
-    public static boolean DEBUG_VERSION = false;
-    public static boolean DEBUG_PRIVATE_VERSION = false;
-    public static boolean LOGS_ENABLED = false;
-    public static boolean USE_CLOUD_STRINGS = true;
-    public static boolean CHECK_UPDATES = false;
-    public static int BUILD_VERSION = 1608;
-    public static String BUILD_VERSION_STRING = "5.7.0";
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
-    public static String HOCKEY_APP_HASH_DEBUG = "your-hockeyapp-api-key-here";
-    public static String SMS_HASH = ""; //https://developers.google.com/identity/sms-retriever/overview
-    public static String PLAYSTORE_APP_URL = "";
-
-    static {
-        if (ApplicationLoader.applicationContext != null) {
-            SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("systemConfig", Context.MODE_PRIVATE);
-            LOGS_ENABLED = sharedPreferences.getBoolean("logsEnabled", DEBUG_VERSION);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index b039d2ece..579bf33b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -9,14 +9,18 @@
 package org.telegram.ui.ActionBar;
 
 import android.content.Context;
+import android.graphics.Color;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
+import android.graphics.drawable.ShapeDrawable;
+import android.graphics.drawable.shapes.RoundRectShape;
 import android.os.Build;
 import android.text.Editable;
 import android.text.TextUtils;
 import android.text.TextWatcher;
+import android.util.DisplayMetrics;
 import android.util.TypedValue;
 import android.view.ActionMode;
 import android.view.Gravity;
@@ -34,6 +38,9 @@
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import android.widget.Toast;
+
+import androidx.appcompat.widget.TooltipCompat;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
@@ -42,6 +49,8 @@
 import org.telegram.ui.Components.EditTextBoldCursor;
 import org.telegram.ui.Components.LayoutHelper;
 
+import java.util.Arrays;
+
 public class ActionBarMenuItem extends FrameLayout {
 
     public static class ActionBarMenuItemSearchListener {
@@ -88,6 +97,8 @@ public boolean forceShowClear() {
     private int[] location;
     private View selectedMenuView;
     private Runnable showMenuRunnable;
+    private Runnable showTooltipRunnable;
+    private long touchDownTime;
     private int subMenuOpenSide;
     private int yOffset;
     private ActionBarMenuItemDelegate delegate;
@@ -102,6 +113,8 @@ public boolean forceShowClear() {
     private boolean longClickEnabled = true;
     private boolean animateClear = true;
 
+    private static long LONG_PRESS_TOOLTIP_DURATION = 500L;
+
     public ActionBarMenuItem(Context context, ActionBarMenu menu, int backgroundColor, int iconColor) {
         super(context);
         if (backgroundColor != 0) {
@@ -124,6 +137,8 @@ public void setLongClickEnabled(boolean value) {
     @Override
     public boolean onTouchEvent(MotionEvent event) {
         if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
+            touchDownTime = System.currentTimeMillis();
+
             if (longClickEnabled && hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
                 showMenuRunnable = () -> {
                     if (getParent() != null) {
@@ -132,6 +147,12 @@ public boolean onTouchEvent(MotionEvent event) {
                     toggleSubMenu();
                 };
                 AndroidUtilities.runOnUIThread(showMenuRunnable, 200);
+            } else if (longClickEnabled) {
+                CharSequence tooltipText = getContentDescription();
+                if (!TextUtils.isEmpty(tooltipText)) {
+                    showTooltipRunnable = () -> { showTooltip(tooltipText); };
+                    AndroidUtilities.runOnUIThread(showTooltipRunnable, LONG_PRESS_TOOLTIP_DURATION);
+                }
             }
         } else if (event.getActionMasked() == MotionEvent.ACTION_MOVE) {
             if (hasSubMenu() && (popupWindow == null || popupWindow != null && !popupWindow.isShowing())) {
@@ -192,6 +213,27 @@ public boolean onTouchEvent(MotionEvent event) {
                 selectedMenuView = null;
             }
         }
+
+        final int action = event.getActionMasked();
+        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
+            if (showTooltipRunnable != null) {
+                AndroidUtilities.cancelRunOnUIThread(showTooltipRunnable);
+                showTooltipRunnable = null;
+            }
+
+            if (action == MotionEvent.ACTION_UP) {
+                long delta = System.currentTimeMillis() - touchDownTime;
+                if (delta >= LONG_PRESS_TOOLTIP_DURATION) {
+                    // We have shown a tooltip. So gracefully prevent default onClickListener from triggering
+                    MotionEvent mock = MotionEvent.obtain(event);
+                    mock.setAction(MotionEvent.ACTION_CANCEL);
+                    super.onTouchEvent(mock);
+                    mock.recycle();
+                    return true;
+                }
+            }
+        }
+
         return super.onTouchEvent(event);
     }
 
@@ -214,6 +256,60 @@ public void setLayoutInScreen(boolean value) {
         layoutInScreen = value;
     }
 
+    private void showTooltip(CharSequence text) {
+        int sidePadding = AndroidUtilities.dp(16.0f);
+        int verticalPadding = AndroidUtilities.dp(6.5f);
+        float cornerRadius = AndroidUtilities.dp(2.0f);
+        float[] rectRadii = new float[8];
+        Arrays.fill(rectRadii, cornerRadius);
+
+        ShapeDrawable backgroundDrawable = new ShapeDrawable(new RoundRectShape(rectRadii, null, null));
+        backgroundDrawable.getPaint().setColor(0xe6616161); // 0xe6FFFFFF
+
+        TextView textView = new TextView(getContext());
+        textView.setText(text);
+        textView.setTextColor(Color.WHITE);
+        textView.setTextSize(14.0f);
+        textView.setPadding(sidePadding, verticalPadding, sidePadding, verticalPadding);
+        textView.setBackground(backgroundDrawable);
+
+        Rect frame = new Rect(); // A bounding frame where we are going to show our tooltip
+        View root = getRootView();
+        if (root != null && root != this) {
+            root.getWindowVisibleDisplayFrame(frame);
+        } else {
+            DisplayMetrics metrics = getResources().getDisplayMetrics();
+            frame.set(0, 0, metrics.widthPixels, metrics.heightPixels);
+        }
+
+        frame.left += sidePadding;
+        frame.right -= sidePadding;
+
+        int[] position = new int[2];
+        getLocationOnScreen(position);
+
+        position[1] += getHeight() + AndroidUtilities.dp(8.0f) - frame.top;
+
+        textView.measure(MeasureSpec.makeMeasureSpec(frame.width(), MeasureSpec.AT_MOST),
+                MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
+
+        int textWidth = textView.getMeasuredWidth();
+        position[0] += getWidth() / 2 - textWidth / 2;
+
+        if (position[0] < frame.left) {
+            position[0] = frame.left;
+        }
+
+        if (position[0] > frame.right - textWidth) {
+            position[0] = frame.right - textWidth;
+        }
+
+        Toast toast = new Toast(getContext());
+        toast.setView(textView);
+        toast.setGravity(Gravity.LEFT | Gravity.TOP, position[0], position[1]);
+        toast.show();
+    }
+
     private void createPopupLayout() {
         if (popupLayout != null) {
             return;
diff --git a/gradle.properties b/gradle.properties
deleted file mode 100644
index dd536b86e..000000000
--- a/gradle.properties
+++ /dev/null
@@ -1,25 +0,0 @@
-## Project-wide Gradle settings.
-#
-# For more details on how to configure your build environment visit
-# http://www.gradle.org/docs/current/userguide/build_environment.html
-#
-# Specifies the JVM arguments used for the daemon process.
-# The setting is particularly useful for tweaking memory settings.
-# Default value: -Xmx10248m -XX:MaxPermSize=256m
-# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
-#
-# When configured, Gradle will run in incubating parallel mode.
-# This option should only be used with decoupled projects. More details, visit
-# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
-#Sat Mar 12 05:53:50 MSK 2016
-RELEASE_KEY_PASSWORD=password
-RELEASE_KEY_ALIAS=alias
-RELEASE_STORE_PASSWORD=password
-android.useDeprecatedNdk=true
-org.gradle.jvmargs=-Xmx4096M -XX:MaxPermSize=4096m
-org.gradle.daemon=true
-org.gradle.parallel=true
-org.gradle.configureondemand=false
-android.useAndroidX=true
-android.enableJetifier=true
