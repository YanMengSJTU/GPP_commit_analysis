diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index 2672bd7e5..cd92b9681 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -286,7 +286,11 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             textHeight = 0;
             marginHeight = AndroidUtilities.dp(85); //0 was
         }
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + marginHeight + textHeight + (useSeparator ? 1 : 0));
+        int photoHeightForDimension = 0;
+        if (post != null && post.getPreviewImage() != null) {
+            photoHeightForDimension = photoHeight;
+        }
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeightForDimension + marginHeight + textHeight + (useSeparator ? 1 : 0));
 
     }
 
@@ -318,7 +322,7 @@ public boolean onTouchEvent(MotionEvent event) {
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
             if (delegate == null || delegate.canPerformActions()) {
 
-                if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                if (post.getPreviewImage() != null && x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
                     clickedArea = ClickedArea.IMAGE;
                     result = true;
                     // click on part upper to image // address, name of the place and venue photo.
@@ -647,7 +651,7 @@ public void buildLayout() {
         /// TEXT
         //Photo
 
-        if (this.post != null) {
+        if (this.post != null && post.getPreviewImage() != null) {
 
             if (AndroidUtilities.isTablet()) {
                 photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 1.0f); //0.7f
@@ -682,10 +686,9 @@ public void buildLayout() {
             }
 
 
-            if (post.getPreviewImage() != null) {
-                Image previewImage = this.post.getPreviewImage();
+            Image previewImage = this.post.getPreviewImage();
 
-                //TODO could be use in case of over scaling when real photo less then the phone screen.
+            //TODO could be use in case of over scaling when real photo less then the phone screen.
 //                if (photoWidth > previewImage.getWidth()) {
 //                    photoWidth = previewImage.getWidth();
 //                }
@@ -694,27 +697,27 @@ public void buildLayout() {
 //                }
 
 
-                float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
+            float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
 
 //                if (previewImage.getWidth() < 800 && scale < 1) {
 //                    scale = 1;
 //                }
 
 
-                if (previewImage.getSize() == 0) { // size of the file.
-                    previewImage.setSize(-1);
-                }
+            if (previewImage.getSize() == 0) { // size of the file.
+                previewImage.setSize(-1);
+            }
 
-                int w = (int) (previewImage.getWidth() / scale);
-                int h = (int) (previewImage.getHeight() / scale);
-                if (w == 0) {
-                    w = AndroidUtilities.dp(100);
-                }
+            int w = (int) (previewImage.getWidth() / scale);
+            int h = (int) (previewImage.getHeight() / scale);
+            if (w == 0) {
+                w = AndroidUtilities.dp(100);
+            }
 
-                if (h == 0) {
-                    h = AndroidUtilities.dp(100);
-                }
-                //TODO it is important part to prevent very high and small images!!
+            if (h == 0) {
+                h = AndroidUtilities.dp(100);
+            }
+            //TODO it is important part to prevent very high and small images!!
 //                if (h > photoHeight) {
 //                    float scale2 = h;
 //                    h = photoHeight;
@@ -728,25 +731,28 @@ public void buildLayout() {
 //                    }
 //                }
 
-                photoWidth = w;
-                photoHeight = h;
-                backgroundWidth = w + AndroidUtilities.dp(12);
+            photoWidth = w;
+            photoHeight = h;
+            backgroundWidth = w + AndroidUtilities.dp(12);
 
 //                photoImage.setImageCoords(avatarLeft, avatarTop + AndroidUtilities.dp(62) + this.textLayoutBlock.textLayout.getHeight(), photoWidth, photoHeight);
 //                photoImage.setImageCoords(0, avatarTop + AndroidUtilities.dp(62) + this.textLayoutBlock.textLayout.getHeight(), photoWidth, photoHeight);
-                // orientation of image in the center of the screen.
-                int x = (getMeasuredWidth() - photoWidth) / 2;
-                photoImage.setImageCoords(x, avatarTop + AndroidUtilities.dp(47), photoWidth, photoHeight);
+            // orientation of image in the center of the screen.
+            int x = (getMeasuredWidth() - photoWidth) / 2;
+            photoImage.setImageCoords(x, avatarTop + AndroidUtilities.dp(47), photoWidth, photoHeight);
 //                photoImage.setImageCoords(x, avatarTop + AndroidUtilities.dp(45), photoWidth, photoHeight);
 
 
-                photoImage.setForcePreview(false);
+            photoImage.setForcePreview(false);
 //                photoImage.setImage(post.getFullImage(), null, imageDrawable); // TODO fix it. Create drawable.
 
-                invalidate();
-            }
+            invalidate();
+
 
             textTop = AndroidUtilities.dp(75) + photoHeight;
+        } else {
+            //Post without image.
+            textTop = AndroidUtilities.dp(65);
         }
 
     }
@@ -831,8 +837,9 @@ public void update(int mask) {
         //TODO mock. above correct version.
         size = calculateSizeForOfflineImage(size, post); // TODO TEMP. rethink it.  // TODO it reduces the size and we have less sized image to display in UI. !!!
         //TODO size parameter in filter influences on loading time. Than less than faster. File size does not effect. ??
-        photoImage.setImage(post.getPreviewImageUrl(), String.format(Locale.US, "%d_%d", size, size), imageDrawable, null, (int) post.getPreviewImage().getSize()); // TODO fix it. Create drawable.
-
+        if (post.getPreviewImage() != null) {
+            photoImage.setImage(post.getPreviewImageUrl(), String.format(Locale.US, "%d_%d", size, size), imageDrawable, null, (int) post.getPreviewImage().getSize()); // TODO fix it. Create drawable.
+        }
 
         //3 method Thumbnail
 //        Bitmap bitmap = MediaStore.Images.Thumbnails.getThumbnail(
@@ -910,10 +917,11 @@ protected void onDraw(Canvas canvas) {
 
         Drawable currentImageBackgroundDrawable = ResourceLoader.backgroundBlue;
 //        Drawable currentImageBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOut;
-        setDrawableBounds(currentImageBackgroundDrawable, photoImage.getImageX(), photoImage.getImageY(), photoWidth, photoHeight);
-
-        // set background for image
-        currentImageBackgroundDrawable.draw(canvas);
+        if (post.getPreviewImage() != null) {
+            setDrawableBounds(currentImageBackgroundDrawable, photoImage.getImageX(), photoImage.getImageY(), photoWidth, photoHeight);
+            // set background for image
+            currentImageBackgroundDrawable.draw(canvas);
+        }
 
         if (isSelected) {
             canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), backPaint);
@@ -961,7 +969,9 @@ protected void onDraw(Canvas canvas) {
 
         avatarImage.draw(canvas);
         //Photo
-        photoImage.draw(canvas);
+        if (post.getPreviewImage() != null) {
+            photoImage.draw(canvas);
+        }
 
 
         // TEXT
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/newsfeed/PhotoToImagesConverter.java b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/newsfeed/PhotoToImagesConverter.java
index ad7230a65..e15ef4baf 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/newsfeed/PhotoToImagesConverter.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/newsfeed/PhotoToImagesConverter.java
@@ -16,9 +16,7 @@
 public class PhotoToImagesConverter extends AbstractConverter<Photo, List<Image>> {
     @Override
     public List<Image> convertIntern(Photo source) {
-        if (StringUtils.isEmpty(source.getPhoto604())
-                || StringUtils.isEmpty(source.getPhoto807())
-                || StringUtils.isEmpty(source.getPhoto1280())) {
+        if (StringUtils.isEmpty(source.getPhoto604())) {
             return null;
         }
 
@@ -31,6 +29,12 @@
 
         Image image = new Image();
         image.setUrl(source.getPhoto1280());
+        if (StringUtils.isEmpty(image.getUrl())) {
+            image.setUrl(source.getPhoto807());
+        }
+        if (StringUtils.isEmpty(image.getUrl())) {
+            image.setUrl(source.getPhoto604());
+        }
         image.setWidth(source.getWidth());   // TODO wrong
         image.setHeight(source.getHeight()); // TODO wrong
         target.add(image);
