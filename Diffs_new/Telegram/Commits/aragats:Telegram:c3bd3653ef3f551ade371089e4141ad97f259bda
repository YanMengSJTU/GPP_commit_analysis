diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 2009cf46a..0a1d54b00 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -135,12 +135,6 @@
             </intent-filter>
         </receiver>
 
-        <receiver android:name="org.telegram.android.SmsListener">
-            <intent-filter>
-                <action android:name="android.provider.Telephony.SMS_RECEIVED" />
-            </intent-filter>
-        </receiver>
-
         <service android:name="org.telegram.android.AuthenticatorService" android:exported="true">
             <intent-filter>
                 <action android:name="android.accounts.AccountAuthenticator"/>
@@ -162,7 +156,6 @@
         <service android:name="org.telegram.android.NotificationsService" android:enabled="true"/>
         <service android:name="org.telegram.android.NotificationRepeat" android:exported="false"/>
         <service android:name="org.telegram.android.NotificationDelay" android:exported="false"/>
-        <service android:name="org.telegram.android.VideoEncodingService" android:enabled="true"/>
 
         <receiver android:name="org.telegram.android.AppStartReceiver" android:enabled="true">
             <intent-filter>
@@ -171,8 +164,6 @@
             </intent-filter>
         </receiver>
 
-        <receiver android:name="org.telegram.android.WearReplyReceiver" android:enabled="true"/>
-
         <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
         <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
         <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 17acc3426..87c79489b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -426,75 +426,6 @@ public static String formatTTLString(int ttl) {
         }
     }
 
-    public static AlertDialog.Builder buildTTLAlert(final Context context, final TLRPC.EncryptedChat encryptedChat) {
-        AlertDialog.Builder builder = new AlertDialog.Builder(context);
-        builder.setTitle(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
-        final NumberPicker numberPicker = new NumberPicker(context);
-        numberPicker.setMinValue(0);
-        numberPicker.setMaxValue(20);
-        if (encryptedChat.ttl > 0 && encryptedChat.ttl < 16) {
-            numberPicker.setValue(encryptedChat.ttl);
-        } else if (encryptedChat.ttl == 30) {
-            numberPicker.setValue(16);
-        } else if (encryptedChat.ttl == 60) {
-            numberPicker.setValue(17);
-        } else if (encryptedChat.ttl == 60 * 60) {
-            numberPicker.setValue(18);
-        } else if (encryptedChat.ttl == 60 * 60 * 24) {
-            numberPicker.setValue(19);
-        } else if (encryptedChat.ttl == 60 * 60 * 24 * 7) {
-            numberPicker.setValue(20);
-        } else if (encryptedChat.ttl == 0) {
-            numberPicker.setValue(0);
-        }
-        numberPicker.setFormatter(new NumberPicker.Formatter() {
-            @Override
-            public String format(int value) {
-                if (value == 0) {
-                    return LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
-                } else if (value >= 1 && value < 16) {
-                    return AndroidUtilities.formatTTLString(value);
-                } else if (value == 16) {
-                    return AndroidUtilities.formatTTLString(30);
-                } else if (value == 17) {
-                    return AndroidUtilities.formatTTLString(60);
-                } else if (value == 18) {
-                    return AndroidUtilities.formatTTLString(60 * 60);
-                } else if (value == 19) {
-                    return AndroidUtilities.formatTTLString(60 * 60 * 24);
-                } else if (value == 20) {
-                    return AndroidUtilities.formatTTLString(60 * 60 * 24 * 7);
-                }
-                return "";
-            }
-        });
-        builder.setView(numberPicker);
-        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                int oldValue = encryptedChat.ttl;
-                which = numberPicker.getValue();
-                if (which >= 0 && which < 16) {
-                    encryptedChat.ttl = which;
-                } else if (which == 16) {
-                    encryptedChat.ttl = 30;
-                } else if (which == 17) {
-                    encryptedChat.ttl = 60;
-                } else if (which == 18) {
-                    encryptedChat.ttl = 60 * 60;
-                } else if (which == 19) {
-                    encryptedChat.ttl = 60 * 60 * 24;
-                } else if (which == 20) {
-                    encryptedChat.ttl = 60 * 60 * 24 * 7;
-                }
-                if (oldValue != encryptedChat.ttl) {
-                    SecretChatHelper.getInstance().sendTTLMessage(encryptedChat, null);
-                    MessagesStorage.getInstance().updateEncryptedChatTTL(encryptedChat);
-                }
-            }
-        });
-        return builder;
-    }
 
     public static void clearCursorDrawable(EditText editText) {
         if (editText == null || Build.VERSION.SDK_INT < 12) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AutoMessageReplyReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/AutoMessageReplyReceiver.java
index c8411de73..d38b131a8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AutoMessageReplyReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AutoMessageReplyReceiver.java
@@ -31,7 +31,6 @@ public void onReceive(Context context, Intent intent) {
         if (dialog_id == 0 || max_id == 0) {
             return;
         }
-        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, null, null, true);
         MessagesController.getInstance().markDialogAsRead(dialog_id, max_id, max_id, 0, 0, true, false);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index da56c872d..7d9845b62 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -219,7 +219,7 @@ public void checkAppAccount() {
         if (UserConfig.isClientActivated()) {
             if (accounts.length == 1) {
                 Account acc = accounts[0];
-                if (!acc.name.equals(UserConfig.getCurrentUser().phone)) {
+                if (!acc.name.equals(UserConfig.getCurrentUser().getPhone())) {
                     recreateAccount = true;
                 } else {
                     currentAccount = acc;
@@ -227,7 +227,6 @@ public void checkAppAccount() {
             } else {
                 recreateAccount = true;
             }
-            readContacts();
         } else {
             if (accounts.length > 0) {
                 recreateAccount = true;
@@ -239,7 +238,7 @@ public void checkAppAccount() {
             }
             if (UserConfig.isClientActivated()) {
                 try {
-                    currentAccount = new Account(UserConfig.getCurrentUser().phone, "org.telegram.messenger");
+                    currentAccount = new Account(UserConfig.getCurrentUser().getPhone(), "org.telegram.messenger");
                     am.addAccountExplicitly(currentAccount, "", null);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -302,27 +301,7 @@ private boolean checkContactsInternal() {
         return reload;
     }
 
-    public void readContacts() {
-        synchronized (loadContactsSync) {
-            if (loadingContacts) {
-                return;
-            }
-            loadingContacts = true;
-        }
 
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (!contacts.isEmpty() || contactsLoaded) {
-                    synchronized (loadContactsSync) {
-                        loadingContacts = false;
-                    }
-                    return;
-                }
-                loadContacts(true, false);
-            }
-        });
-    }
 
     private HashMap<Integer, Contact> readContactsFromPhoneBook() {
         HashMap<Integer, Contact> contactsMap = new HashMap<>();
@@ -754,7 +733,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                             contact.user_id = c.user_id;
                                             cArr.add(contact);
                                         }
-                                        processLoadedContacts(cArr, res.users, 2);
                                     } else {
                                         FileLog.e("tmessages", "import contacts error " + error.text);
                                     }
@@ -835,254 +813,9 @@ public boolean isLoadingContacts() {
         }
     }
 
-    public void loadContacts(boolean fromCache, boolean cacheEmpty) {
-        synchronized (loadContactsSync) {
-            loadingContacts = true;
-        }
-        if (fromCache) {
-            FileLog.e("tmessages", "load contacts from cache");
-            MessagesStorage.getInstance().getContacts();
-        } else {
-            FileLog.e("tmessages", "load contacts from server");
-            TLRPC.TL_contacts_getContacts req = new TLRPC.TL_contacts_getContacts();
-            req.hash = cacheEmpty ? "" : UserConfig.contactsHash;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        TLRPC.contacts_Contacts res = (TLRPC.contacts_Contacts)response;
-                        if (res instanceof TLRPC.TL_contacts_contactsNotModified) {
-                            contactsLoaded = true;
-                            if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
-                                applyContactsUpdates(delayedContactsUpdate, null, null, null);
-                                delayedContactsUpdate.clear();
-                            }
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    synchronized (loadContactsSync) {
-                                        loadingContacts = false;
-                                    }
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
-                                }
-                            });
-                            FileLog.e("tmessages", "load contacts don't change");
-                            return;
-                        }
-                        processLoadedContacts(res.contacts, res.users, 0);
-                    }
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric);
-        }
-    }
-
-    public void processLoadedContacts(final ArrayList<TLRPC.TL_contact> contactsArr, final ArrayList<TLRPC.User> usersArr, final int from) {
-        //from: 0 - from server, 1 - from db, 2 - from imported contacts
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                MessagesController.getInstance().putUsers(usersArr, from == 1);
 
-                final HashMap<Integer, TLRPC.User> usersDict = new HashMap<>();
 
-                final boolean isEmpty = contactsArr.isEmpty();
 
-                if (!contacts.isEmpty()) {
-                    for (int a = 0; a < contactsArr.size(); a++) {
-                        TLRPC.TL_contact contact = contactsArr.get(a);
-                        if (contactsDict.get(contact.user_id) != null) {
-                            contactsArr.remove(a);
-                            a--;
-                        }
-                    }
-                    contactsArr.addAll(contacts);
-                }
-
-                for (TLRPC.TL_contact contact : contactsArr) {
-                    TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
-                    if (user != null) {
-                        usersDict.put(user.id, user);
-
-//                        if (BuildVars.DEBUG_VERSION) {
-//                            FileLog.e("tmessages", "loaded user contact " + user.first_name + " " + user.last_name + " " + user.phone);
-//                        }
-                    }
-                }
-
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        FileLog.e("tmessages", "done loading contacts");
-                        if (from == 1 && contactsArr.isEmpty()) {
-                            loadContacts(false, true);
-                            return;
-                        }
-
-                        for (TLRPC.TL_contact contact : contactsArr) {
-                            if (usersDict.get(contact.user_id) == null && contact.user_id != UserConfig.getClientUserId()) {
-                                loadContacts(false, true);
-                                FileLog.e("tmessages", "contacts are broken, load from server");
-                                return;
-                            }
-                        }
-
-                        if (from != 1) {
-                            MessagesStorage.getInstance().putUsersAndChats(usersArr, null, true, true);
-                            MessagesStorage.getInstance().putContacts(contactsArr, from != 2);
-                            Collections.sort(contactsArr, new Comparator<TLRPC.TL_contact>() {
-                                @Override
-                                public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
-                                    if (tl_contact.user_id > tl_contact2.user_id) {
-                                        return 1;
-                                    } else if (tl_contact.user_id < tl_contact2.user_id) {
-                                        return -1;
-                                    }
-                                    return 0;
-                                }
-                            });
-                            StringBuilder ids = new StringBuilder();
-                            for (TLRPC.TL_contact aContactsArr : contactsArr) {
-                                if (ids.length() != 0) {
-                                    ids.append(",");
-                                }
-                                ids.append(aContactsArr.user_id);
-                            }
-                            UserConfig.contactsHash = Utilities.MD5(ids.toString());
-                            UserConfig.saveConfig(false);
-                        }
-
-                        Collections.sort(contactsArr, new Comparator<TLRPC.TL_contact>() {
-                            @Override
-                            public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
-                                TLRPC.User user1 = usersDict.get(tl_contact.user_id);
-                                TLRPC.User user2 = usersDict.get(tl_contact2.user_id);
-                                String name1 = user1.first_name;
-                                if (name1 == null || name1.length() == 0) {
-                                    name1 = user1.last_name;
-                                }
-                                String name2 = user2.first_name;
-                                if (name2 == null || name2.length() == 0) {
-                                    name2 = user2.last_name;
-                                }
-                                return name1.compareTo(name2);
-                            }
-                        });
-
-                        final SparseArray<TLRPC.TL_contact> contactsDictionary = new SparseArray<>();
-                        final HashMap<String, ArrayList<TLRPC.TL_contact>> sectionsDict = new HashMap<>();
-                        final ArrayList<String> sortedSectionsArray = new ArrayList<>();
-                        HashMap<String, TLRPC.TL_contact> contactsByPhonesDict = null;
-
-                        if (!contactsBookLoaded) {
-                            contactsByPhonesDict = new HashMap<>();
-                        }
-
-                        final HashMap<String, TLRPC.TL_contact> contactsByPhonesDictFinal = contactsByPhonesDict;
-
-                        for (TLRPC.TL_contact value : contactsArr) {
-                            TLRPC.User user = usersDict.get(value.user_id);
-                            if (user == null) {
-                                continue;
-                            }
-                            contactsDictionary.put(value.user_id, value);
-                            if (contactsByPhonesDict != null) {
-                                contactsByPhonesDict.put(user.phone, value);
-                            }
-
-                            String key = user.first_name;
-                            if (key == null || key.length() == 0) {
-                                key = user.last_name;
-                            }
-                            if (key.length() > 1) {
-                                key = key.substring(0, 1);
-                            }
-                            if (key.length() == 0) {
-                                key = "#";
-                            } else {
-                                key = key.toUpperCase();
-                            }
-                            String replace = sectionsToReplace.get(key);
-                            if (replace != null) {
-                                key = replace;
-                            }
-                            ArrayList<TLRPC.TL_contact> arr = sectionsDict.get(key);
-                            if (arr == null) {
-                                arr = new ArrayList<>();
-                                sectionsDict.put(key, arr);
-                                sortedSectionsArray.add(key);
-                            }
-                            arr.add(value);
-                        }
-
-                        Collections.sort(sortedSectionsArray, new Comparator<String>() {
-                            @Override
-                            public int compare(String s, String s2) {
-                                char cv1 = s.charAt(0);
-                                char cv2 = s2.charAt(0);
-                                if (cv1 == '#') {
-                                    return 1;
-                                } else if (cv2 == '#') {
-                                    return -1;
-                                }
-                                return s.compareTo(s2);
-                            }
-                        });
-
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                contacts = contactsArr;
-                                contactsDict = contactsDictionary;
-                                usersSectionsDict = sectionsDict;
-                                sortedUsersSectionsArray = sortedSectionsArray;
-                                if (from != 2) {
-                                    synchronized (loadContactsSync) {
-                                        loadingContacts = false;
-                                    }
-                                }
-                                performWriteContactsToPhoneBook();
-                                updateUnregisteredContacts(contactsArr);
-
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
-
-                                if (from != 1 && !isEmpty) {
-                                    saveContactsLoadTime();
-                                } else {
-                                    reloadContactsStatusesMaybe();
-                                }
-                            }
-                        });
-
-                        if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
-                            applyContactsUpdates(delayedContactsUpdate, null, null, null);
-                            delayedContactsUpdate.clear();
-                        }
-
-                        if (contactsByPhonesDictFinal != null) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    Utilities.globalQueue.postRunnable(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            contactsByPhone = contactsByPhonesDictFinal;
-                                        }
-                                    });
-                                    if (contactsSyncInProgress) {
-                                        return;
-                                    }
-                                    contactsSyncInProgress = true;
-                                    MessagesStorage.getInstance().getCachedPhoneBook();
-                                }
-                            });
-                        } else {
-                            contactsLoaded = true;
-                        }
-                    }
-                });
-            }
-        });
-    }
 
     private void reloadContactsStatusesMaybe() {
         try {
@@ -1355,42 +1088,6 @@ public void run() {
             MessagesStorage.getInstance().applyPhoneBookUpdates(toAdd.toString(), toDelete.toString());
         }
 
-        if (reloadContacts) {
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    loadContacts(false, true);
-                }
-            });
-        } else {
-            final ArrayList<TLRPC.TL_contact> newContacts = newC;
-            final ArrayList<Integer> contactsToDelete = contactsTD;
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    for (TLRPC.TL_contact contact : newContacts) {
-                        if (contactsDict.get(contact.user_id) == null) {
-                            contacts.add(contact);
-                            contactsDict.put(contact.user_id, contact);
-                        }
-                    }
-                    for (Integer uid : contactsToDelete) {
-                        TLRPC.TL_contact contact = contactsDict.get(uid);
-                        if (contact != null) {
-                            contacts.remove(contact);
-                            contactsDict.remove(uid);
-                        }
-                    }
-                    if (!newContacts.isEmpty()) {
-                        updateUnregisteredContacts(contacts);
-                        performWriteContactsToPhoneBook();
-                    }
-                    performSyncPhoneBook(getContactsCopy(contactsBook), false, false, false);
-                    buildContactsSectionsArrays(!newContacts.isEmpty());
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
-                }
-            });
-        }
     }
 
     public void processContactsUpdates(ArrayList<Integer> ids, ConcurrentHashMap<Integer, TLRPC.User> userDict) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
index f0a133beb..9b2ac6dd7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
@@ -18,53 +18,13 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ApplicationLoader;
 
+//TODO delete
 public class GcmBroadcastReceiver extends BroadcastReceiver {
 
     public static final int NOTIFICATION_ID = 1;
 
     @Override
     public void onReceive(final Context context, final Intent intent) {
-        FileLog.d("tmessages", "GCM received intent: " + intent);
 
-        if (intent.getAction().equals("com.google.android.c2dm.intent.RECEIVE")) {
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    ApplicationLoader.postInitApplication();
-
-                    try {
-                        String key = intent.getStringExtra("loc_key");
-                        if ("DC_UPDATE".equals(key)) {
-                            String data = intent.getStringExtra("custom");
-                            JSONObject object = new JSONObject(data);
-                            int dc = object.getInt("dc");
-                            String addr = object.getString("addr");
-                            String[] parts = addr.split(":");
-                            if (parts.length != 2) {
-                                return;
-                            }
-                            String ip = parts[0];
-                            int port = Integer.parseInt(parts[1]);
-                            ConnectionsManager.getInstance().applyDcPushUpdate(dc, ip, port);
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-
-                    ConnectionsManager.getInstance().resumeNetworkMaybe();
-                }
-            });
-        } else if (intent.getAction().equals("com.google.android.c2dm.intent.REGISTRATION")) {
-            String registration = intent.getStringExtra("registration_id");
-            if (intent.getStringExtra("error") != null) {
-                FileLog.e("tmessages", "Registration failed, should try again later.");
-            } else if (intent.getStringExtra("unregistered") != null) {
-                FileLog.e("tmessages", "unregistration done, new messages from the authorized sender will be rejected");
-            } else if (registration != null) {
-                FileLog.e("tmessages", "registration id = " + registration);
-            }
-        }
-
-        setResultCode(Activity.RESULT_OK);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index a0ff51259..e2212399b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -56,10 +56,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.ui.Cells.ChatMediaCell;
-import org.telegram.ui.Components.GifDrawable;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -227,10 +224,6 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private ArrayList<FileDownloadProgressListener> deleteLaterArray = new ArrayList<>();
     private int lastTag = 0;
 
-    private GifDrawable currentGifDrawable;
-    private MessageObject currentGifMessageObject;
-    private ChatMediaCell currentMediaCell;
-
     private boolean isPaused = false;
     private MediaPlayer audioPlayer = null;
     private AudioTrack audioTrackPlayer = null;
@@ -325,7 +318,6 @@ public void run() {
                     });
                 } else {
                     recordBuffers.add(buffer);
-                    stopRecordingInternal(sendAfterDone);
                 }
             }
         }
@@ -556,12 +548,6 @@ private void stopProgressTimer() {
 
     public void cleanup() {
         clenupPlayer(false);
-        if (currentGifDrawable != null) {
-            currentGifDrawable.recycle();
-            currentGifDrawable = null;
-        }
-        currentMediaCell = null;
-        currentGifMessageObject = null;
         photoDownloadQueue.clear();
         audioDownloadQueue.clear();
         documentDownloadQueue.clear();
@@ -862,9 +848,6 @@ private void checkScreenshots(ArrayList<Long> dates) {
                 }
             }
         }
-        if (send) {
-            SecretChatHelper.getInstance().sendScreenshotMessage(lastSecretChat, lastSecretChatVisibleMessages, null);
-        }
     }
 
     public void setLastEncryptedChatParams(long enterTime, long leaveTime, TLRPC.EncryptedChat encryptedChat, ArrayList<Long> visibleMessages) {
@@ -995,25 +978,6 @@ public void didReceivedNotification(int id, Object... args) {
             listenerInProgress = false;
             processLaterArrays();
             try {
-                ArrayList<SendMessagesHelper.DelayedMessage> delayedMessages = SendMessagesHelper.getInstance().getDelayedMessages(fileName);
-                if (delayedMessages != null) {
-                    for (SendMessagesHelper.DelayedMessage delayedMessage : delayedMessages) {
-                        if (delayedMessage.encryptedChat == null) {
-                            long dialog_id = delayedMessage.obj.getDialogId();
-                            Long lastTime = typingTimes.get(dialog_id);
-                            if (lastTime == null || lastTime + 4000 < System.currentTimeMillis()) {
-                                if (delayedMessage.videoLocation != null) {
-                                    MessagesController.getInstance().sendTyping(dialog_id, 5, 0);
-                                } else if (delayedMessage.documentLocation != null) {
-                                    MessagesController.getInstance().sendTyping(dialog_id, 3, 0);
-                                } else if (delayedMessage.location != null) {
-                                    MessagesController.getInstance().sendTyping(dialog_id, 4, 0);
-                                }
-                                typingTimes.put(dialog_id, System.currentTimeMillis());
-                            }
-                        }
-                    }
-                }
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
@@ -1522,127 +1486,8 @@ public boolean isAudioPaused() {
         return isPaused;
     }
 
-    public void startRecording(final long dialog_id, final MessageObject reply_to_msg) {
-        clenupPlayer(true);
-
-        try {
-            Vibrator v = (Vibrator) ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
-            v.vibrate(20);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        recordQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (audioRecorder != null) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
-                        }
-                    });
-                    return;
-                }
-
-                recordingAudio = new TLRPC.TL_audio();
-                recordingAudio.dc_id = Integer.MIN_VALUE;
-                recordingAudio.id = UserConfig.lastLocalId;
-                recordingAudio.user_id = UserConfig.getClientUserId();
-                recordingAudio.mime_type = "audio/ogg";
-                UserConfig.lastLocalId--;
-                UserConfig.saveConfig(false);
 
-                recordingAudioFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), FileLoader.getAttachFileName(recordingAudio));
-
-                try {
-                    if (startRecord(recordingAudioFile.getAbsolutePath()) == 0) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
-                            }
-                        });
-                        return;
-                    }
-                    audioRecorder = new AudioRecord(MediaRecorder.AudioSource.MIC, 16000, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT, recordBufferSize * 10);
-                    recordStartTime = System.currentTimeMillis();
-                    recordTimeCount = 0;
-                    recordDialogId = dialog_id;
-                    recordReplyingMessageObject = reply_to_msg;
-                    fileBuffer.rewind();
-
-                    audioRecorder.startRecording();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                    recordingAudio = null;
-                    stopRecord();
-                    recordingAudioFile.delete();
-                    recordingAudioFile = null;
-                    try {
-                        audioRecorder.release();
-                        audioRecorder = null;
-                    } catch (Exception e2) {
-                        FileLog.e("tmessages", e2);
-                    }
-
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStartError);
-                        }
-                    });
-                    return;
-                }
-
-                recordQueue.postRunnable(recordRunnable);
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStarted);
-                    }
-                });
-            }
-        });
-    }
 
-    private void stopRecordingInternal(final boolean send) {
-        if (send) {
-            final TLRPC.TL_audio audioToSend = recordingAudio;
-            final File recordingAudioFileToSend = recordingAudioFile;
-            fileEncodingQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    stopRecord();
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            audioToSend.date = ConnectionsManager.getInstance().getCurrentTime();
-                            audioToSend.size = (int) recordingAudioFileToSend.length();
-                            long duration = recordTimeCount;
-                            audioToSend.duration = (int) (duration / 1000);
-                            if (duration > 700) {
-                                SendMessagesHelper.getInstance().sendMessage(audioToSend, recordingAudioFileToSend.getAbsolutePath(), recordDialogId, recordReplyingMessageObject);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidSent);
-                            } else {
-                                recordingAudioFileToSend.delete();
-                            }
-                        }
-                    });
-                }
-            });
-        }
-        try {
-            if (audioRecorder != null) {
-                audioRecorder.release();
-                audioRecorder = null;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        recordingAudio = null;
-        recordingAudioFile = null;
-    }
 
     public void stopRecording(final boolean send) {
         recordQueue.postRunnable(new Runnable() {
@@ -1661,7 +1506,6 @@ public void run() {
                     }
                 }
                 if (!send) {
-                    stopRecordingInternal(false);
                 }
                 try {
                     Vibrator v = (Vibrator) ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
@@ -1794,75 +1638,9 @@ public void run() {
         }
     }
 
-    public GifDrawable getGifDrawable(ChatMediaCell cell, boolean create) {
-        if (cell == null) {
-            return null;
-        }
-
-        MessageObject messageObject = cell.getMessageObject();
-        if (messageObject == null) {
-            return null;
-        }
-
-        if (currentGifDrawable != null && currentGifMessageObject != null && messageObject.getId() == currentGifMessageObject.getId()) {
-            currentMediaCell = cell;
-            currentGifDrawable.parentView = new WeakReference<View>(cell);
-            return currentGifDrawable;
-        }
-
-        if (create) {
-            if (currentMediaCell != null) {
-                if (currentGifDrawable != null) {
-                    currentGifDrawable.stop();
-                    currentGifDrawable.recycle();
-                }
-                currentMediaCell.clearGifImage();
-            }
-            currentGifMessageObject = cell.getMessageObject();
-            currentMediaCell = cell;
-
-            File cacheFile = null;
-            if (currentGifMessageObject.messageOwner.attachPath != null && currentGifMessageObject.messageOwner.attachPath.length() != 0) {
-                File f = new File(currentGifMessageObject.messageOwner.attachPath);
-                if (f.length() > 0) {
-                    cacheFile = f;
-                }
-            }
-            if (cacheFile == null) {
-                cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
-            }
-            try {
-                currentGifDrawable = new GifDrawable(cacheFile);
-                currentGifDrawable.parentView = new WeakReference<View>(cell);
-                return currentGifDrawable;
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        return null;
-    }
 
-    public void clearGifDrawable(ChatMediaCell cell) {
-        if (cell == null) {
-            return;
-        }
 
-        MessageObject messageObject = cell.getMessageObject();
-        if (messageObject == null) {
-            return;
-        }
 
-        if (currentGifMessageObject != null && messageObject.getId() == currentGifMessageObject.getId()) {
-            if (currentGifDrawable != null) {
-                currentGifDrawable.stop();
-                currentGifDrawable.recycle();
-                currentGifDrawable = null;
-            }
-            currentMediaCell = null;
-            currentGifMessageObject = null;
-        }
-    }
 
     public static boolean isWebp(Uri uri) {
         ParcelFileDescriptor parcelFD = null;
@@ -2163,12 +1941,6 @@ public void run() {
         }).start();
     }
 
-    public void scheduleVideoConvert(MessageObject messageObject) {
-        videoConvertQueue.add(messageObject);
-        if (videoConvertQueue.size() == 1) {
-            startVideoConvertFromQueue();
-        }
-    }
 
     public void cancelVideoConvert(MessageObject messageObject) {
         if (messageObject == null) {
@@ -2187,18 +1959,6 @@ public void cancelVideoConvert(MessageObject messageObject) {
         }
     }
 
-    private void startVideoConvertFromQueue() {
-        if (!videoConvertQueue.isEmpty()) {
-            synchronized (videoConvertSync) {
-                cancelCurrentVideoConversion = false;
-            }
-            MessageObject messageObject = videoConvertQueue.get(0);
-            Intent intent = new Intent(ApplicationLoader.applicationContext, VideoEncodingService.class);
-            intent.putExtra("path", messageObject.messageOwner.attachPath);
-            ApplicationLoader.applicationContext.startService(intent);
-            VideoConvertRunnable.runConversion(messageObject);
-        }
-    }
 
     @SuppressLint("NewApi")
     public static MediaCodecInfo selectCodec(String mimeType) {
@@ -2293,7 +2053,6 @@ public void run() {
                         cancelCurrentVideoConversion = false;
                     }
                     videoConvertQueue.remove(messageObject);
-                    startVideoConvertFromQueue();
                 }
             }
         });
@@ -2369,7 +2128,6 @@ private VideoConvertRunnable(MessageObject message) {
 
         @Override
         public void run() {
-            MediaController.getInstance().convertVideo(messageObject);
         }
 
         public static void runConversion(final MessageObject obj) {
@@ -2399,446 +2157,5 @@ private void checkConversionCanceled() throws Exception {
         }
     }
 
-    @TargetApi(16)
-    private boolean convertVideo(final MessageObject messageObject) {
-        String videoPath = messageObject.videoEditedInfo.originalPath;
-        long startTime = messageObject.videoEditedInfo.startTime;
-        long endTime = messageObject.videoEditedInfo.endTime;
-        int resultWidth = messageObject.videoEditedInfo.resultWidth;
-        int resultHeight = messageObject.videoEditedInfo.resultHeight;
-        int rotationValue = messageObject.videoEditedInfo.rotationValue;
-        int originalWidth = messageObject.videoEditedInfo.originalWidth;
-        int originalHeight = messageObject.videoEditedInfo.originalHeight;
-        int bitrate = messageObject.videoEditedInfo.bitrate;
-        int rotateRender = 0;
-        File cacheFile = new File(messageObject.messageOwner.attachPath);
-
-        if (Build.VERSION.SDK_INT < 18 && resultHeight > resultWidth && resultWidth != originalWidth && resultHeight != originalHeight) {
-            int temp = resultHeight;
-            resultHeight = resultWidth;
-            resultWidth = temp;
-            rotationValue = 90;
-            rotateRender = 270;
-        } else if (Build.VERSION.SDK_INT > 20) {
-            if (rotationValue == 90) {
-                int temp = resultHeight;
-                resultHeight = resultWidth;
-                resultWidth = temp;
-                rotationValue = 0;
-                rotateRender = 270;
-            } else if (rotationValue == 180) {
-                rotateRender = 180;
-                rotationValue = 0;
-            } else if (rotationValue == 270) {
-                int temp = resultHeight;
-                resultHeight = resultWidth;
-                resultWidth = temp;
-                rotationValue = 0;
-                rotateRender = 90;
-            }
-        }
-
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("videoconvert", Activity.MODE_PRIVATE);
-        boolean isPreviousOk = preferences.getBoolean("isPreviousOk", true);
-        preferences.edit().putBoolean("isPreviousOk", false).commit();
-
-        File inputFile = new File(videoPath);
-        if (!inputFile.canRead() || !isPreviousOk) {
-            didWriteData(messageObject, cacheFile, true, true);
-            preferences.edit().putBoolean("isPreviousOk", true).commit();
-            return false;
-        }
-
-        videoConvertFirstWrite = true;
-        boolean error = false;
-        long videoStartTime = startTime;
-
-        long time = System.currentTimeMillis();
-
-        if (resultWidth != 0 && resultHeight != 0) {
-            MP4Builder mediaMuxer = null;
-            MediaExtractor extractor = null;
-
-            try {
-                MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();
-                Mp4Movie movie = new Mp4Movie();
-                movie.setCacheFile(cacheFile);
-                movie.setRotation(rotationValue);
-                movie.setSize(resultWidth, resultHeight);
-                mediaMuxer = new MP4Builder().createMovie(movie);
-                extractor = new MediaExtractor();
-                extractor.setDataSource(inputFile.toString());
-
-                checkConversionCanceled();
-
-                if (resultWidth != originalWidth || resultHeight != originalHeight) {
-                    int videoIndex;
-                    videoIndex = selectTrack(extractor, false);
-                    if (videoIndex >= 0) {
-                        MediaCodec decoder = null;
-                        MediaCodec encoder = null;
-                        InputSurface inputSurface = null;
-                        OutputSurface outputSurface = null;
-
-                        try {
-                            long videoTime = -1;
-                            boolean outputDone = false;
-                            boolean inputDone = false;
-                            boolean decoderDone = false;
-                            int swapUV = 0;
-                            int videoTrackIndex = -5;
-
-                            int colorFormat;
-                            int processorType = PROCESSOR_TYPE_OTHER;
-                            String manufacturer = Build.MANUFACTURER.toLowerCase();
-                            if (Build.VERSION.SDK_INT < 18) {
-                                MediaCodecInfo codecInfo = selectCodec(MIME_TYPE);
-                                colorFormat = selectColorFormat(codecInfo, MIME_TYPE);
-                                if (colorFormat == 0) {
-                                    throw new RuntimeException("no supported color format");
-                                }
-                                String codecName = codecInfo.getName();
-                                if (codecName.contains("OMX.qcom.")) {
-                                    processorType = PROCESSOR_TYPE_QCOM;
-                                    if (Build.VERSION.SDK_INT == 16) {
-                                        if (manufacturer.equals("lge") || manufacturer.equals("nokia")) {
-                                            swapUV = 1;
-                                        }
-                                    }
-                                } else if (codecName.contains("OMX.Intel.")) {
-                                    processorType = PROCESSOR_TYPE_INTEL;
-                                } else if (codecName.equals("OMX.MTK.VIDEO.ENCODER.AVC")) {
-                                    processorType = PROCESSOR_TYPE_MTK;
-                                } else if (codecName.equals("OMX.SEC.AVC.Encoder")) {
-                                    processorType = PROCESSOR_TYPE_SEC;
-                                    swapUV = 1;
-                                } else if (codecName.equals("OMX.TI.DUCATI1.VIDEO.H264E")) {
-                                    processorType = PROCESSOR_TYPE_TI;
-                                }
-                                FileLog.e("tmessages", "codec = " + codecInfo.getName() + " manufacturer = " + manufacturer + "device = " + Build.MODEL);
-                            } else {
-                                colorFormat = MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface;
-                            }
-                            FileLog.e("tmessages", "colorFormat = " + colorFormat);
-
-                            int resultHeightAligned = resultHeight;
-                            int padding = 0;
-                            int bufferSize = resultWidth * resultHeight * 3 / 2;
-                            if (processorType == PROCESSOR_TYPE_OTHER) {
-                                if (resultHeight % 16 != 0) {
-                                    resultHeightAligned += (16 - (resultHeight % 16));
-                                    padding = resultWidth * (resultHeightAligned - resultHeight);
-                                    bufferSize += padding * 5 / 4;
-                                }
-                            } else if (processorType == PROCESSOR_TYPE_QCOM) {
-                                if (!manufacturer.toLowerCase().equals("lge")) {
-                                    int uvoffset = (resultWidth * resultHeight + 2047) & ~2047;
-                                    padding = uvoffset - (resultWidth * resultHeight);
-                                    bufferSize += padding;
-                                }
-                            } else if (processorType == PROCESSOR_TYPE_TI) {
-                                //resultHeightAligned = 368;
-                                //bufferSize = resultWidth * resultHeightAligned * 3 / 2;
-                                //resultHeightAligned += (16 - (resultHeight % 16));
-                                //padding = resultWidth * (resultHeightAligned - resultHeight);
-                                //bufferSize += padding * 5 / 4;
-                            } else if (processorType == PROCESSOR_TYPE_MTK) {
-                                if (manufacturer.equals("baidu")) {
-                                    resultHeightAligned += (16 - (resultHeight % 16));
-                                    padding = resultWidth * (resultHeightAligned - resultHeight);
-                                    bufferSize += padding * 5 / 4;
-                                }
-                            }
-
-                            extractor.selectTrack(videoIndex);
-                            if (startTime > 0) {
-                                extractor.seekTo(startTime, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
-                            } else {
-                                extractor.seekTo(0, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
-                            }
-                            MediaFormat inputFormat = extractor.getTrackFormat(videoIndex);
-
-                            MediaFormat outputFormat = MediaFormat.createVideoFormat(MIME_TYPE, resultWidth, resultHeight);
-                            outputFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, colorFormat);
-                            outputFormat.setInteger(MediaFormat.KEY_BIT_RATE, bitrate != 0 ? bitrate : 921600);
-                            outputFormat.setInteger(MediaFormat.KEY_FRAME_RATE, 25);
-                            outputFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 10);
-                            if (Build.VERSION.SDK_INT < 18) {
-                                outputFormat.setInteger("stride", resultWidth + 32);
-                                outputFormat.setInteger("slice-height", resultHeight);
-                            }
-
-                            encoder = MediaCodec.createEncoderByType(MIME_TYPE);
-                            encoder.configure(outputFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
-                            if (Build.VERSION.SDK_INT >= 18) {
-                                inputSurface = new InputSurface(encoder.createInputSurface());
-                                inputSurface.makeCurrent();
-                            }
-                            encoder.start();
-
-                            decoder = MediaCodec.createDecoderByType(inputFormat.getString(MediaFormat.KEY_MIME));
-                            if (Build.VERSION.SDK_INT >= 18) {
-                                outputSurface = new OutputSurface();
-                            } else {
-                                outputSurface = new OutputSurface(resultWidth, resultHeight, rotateRender);
-                            }
-                            decoder.configure(inputFormat, outputSurface.getSurface(), null, 0);
-                            decoder.start();
-
-                            final int TIMEOUT_USEC = 2500;
-                            ByteBuffer[] decoderInputBuffers = null;
-                            ByteBuffer[] encoderOutputBuffers = null;
-                            ByteBuffer[] encoderInputBuffers = null;
-                            if (Build.VERSION.SDK_INT < 21) {
-                                decoderInputBuffers = decoder.getInputBuffers();
-                                encoderOutputBuffers = encoder.getOutputBuffers();
-                                if (Build.VERSION.SDK_INT < 18) {
-                                    encoderInputBuffers = encoder.getInputBuffers();
-                                }
-                            }
-
-                            checkConversionCanceled();
-
-                            while (!outputDone) {
-                                checkConversionCanceled();
-                                if (!inputDone) {
-                                    boolean eof = false;
-                                    int index = extractor.getSampleTrackIndex();
-                                    if (index == videoIndex) {
-                                        int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
-                                        if (inputBufIndex >= 0) {
-                                            ByteBuffer inputBuf;
-                                            if (Build.VERSION.SDK_INT < 21) {
-                                                inputBuf = decoderInputBuffers[inputBufIndex];
-                                            } else {
-                                                inputBuf = decoder.getInputBuffer(inputBufIndex);
-                                            }
-                                            int chunkSize = extractor.readSampleData(inputBuf, 0);
-                                            if (chunkSize < 0) {
-                                                decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
-                                                inputDone = true;
-                                            } else {
-                                                decoder.queueInputBuffer(inputBufIndex, 0, chunkSize, extractor.getSampleTime(), 0);
-                                                extractor.advance();
-                                            }
-                                        }
-                                    } else if (index == -1) {
-                                        eof = true;
-                                    }
-                                    if (eof) {
-                                        int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
-                                        if (inputBufIndex >= 0) {
-                                            decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
-                                            inputDone = true;
-                                        }
-                                    }
-                                }
-
-                                boolean decoderOutputAvailable = !decoderDone;
-                                boolean encoderOutputAvailable = true;
-                                while (decoderOutputAvailable || encoderOutputAvailable) {
-                                    checkConversionCanceled();
-                                    int encoderStatus = encoder.dequeueOutputBuffer(info, TIMEOUT_USEC);
-                                    if (encoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
-                                        encoderOutputAvailable = false;
-                                    } else if (encoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
-                                        if (Build.VERSION.SDK_INT < 21) {
-                                            encoderOutputBuffers = encoder.getOutputBuffers();
-                                        }
-                                    } else if (encoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
-                                        MediaFormat newFormat = encoder.getOutputFormat();
-                                        if (videoTrackIndex == -5) {
-                                            videoTrackIndex = mediaMuxer.addTrack(newFormat, false);
-                                        }
-                                    } else if (encoderStatus < 0) {
-                                        throw new RuntimeException("unexpected result from encoder.dequeueOutputBuffer: " + encoderStatus);
-                                    } else {
-                                        ByteBuffer encodedData;
-                                        if (Build.VERSION.SDK_INT < 21) {
-                                            encodedData = encoderOutputBuffers[encoderStatus];
-                                        } else {
-                                            encodedData = encoder.getOutputBuffer(encoderStatus);
-                                        }
-                                        if (encodedData == null) {
-                                            throw new RuntimeException("encoderOutputBuffer " + encoderStatus + " was null");
-                                        }
-                                        if (info.size > 1) {
-                                            if ((info.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) == 0) {
-                                                if (mediaMuxer.writeSampleData(videoTrackIndex, encodedData, info, false)) {
-                                                    didWriteData(messageObject, cacheFile, false, false);
-                                                }
-                                            } else if (videoTrackIndex == -5) {
-                                                byte[] csd = new byte[info.size];
-                                                encodedData.limit(info.offset + info.size);
-                                                encodedData.position(info.offset);
-                                                encodedData.get(csd);
-                                                ByteBuffer sps = null;
-                                                ByteBuffer pps = null;
-                                                for (int a = info.size - 1; a >= 0; a--) {
-                                                    if (a > 3) {
-                                                        if (csd[a] == 1 && csd[a - 1] == 0 && csd[a - 2] == 0 && csd[a - 3] == 0) {
-                                                            sps = ByteBuffer.allocate(a - 3);
-                                                            pps = ByteBuffer.allocate(info.size - (a - 3));
-                                                            sps.put(csd, 0, a - 3).position(0);
-                                                            pps.put(csd, a - 3, info.size - (a - 3)).position(0);
-                                                            break;
-                                                        }
-                                                    } else {
-                                                        break;
-                                                    }
-                                                }
 
-                                                MediaFormat newFormat = MediaFormat.createVideoFormat(MIME_TYPE, resultWidth, resultHeight);
-                                                if (sps != null && pps != null) {
-                                                    newFormat.setByteBuffer("csd-0", sps);
-                                                    newFormat.setByteBuffer("csd-1", pps);
-                                                }
-                                                videoTrackIndex = mediaMuxer.addTrack(newFormat, false);
-                                            }
-                                        }
-                                        outputDone = (info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;
-                                        encoder.releaseOutputBuffer(encoderStatus, false);
-                                    }
-                                    if (encoderStatus != MediaCodec.INFO_TRY_AGAIN_LATER) {
-                                        continue;
-                                    }
-
-                                    if (!decoderDone) {
-                                        int decoderStatus = decoder.dequeueOutputBuffer(info, TIMEOUT_USEC);
-                                        if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
-                                            decoderOutputAvailable = false;
-                                        } else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
-
-                                        } else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
-                                            MediaFormat newFormat = decoder.getOutputFormat();
-                                            FileLog.e("tmessages", "newFormat = " + newFormat);
-                                        } else if (decoderStatus < 0) {
-                                            throw new RuntimeException("unexpected result from decoder.dequeueOutputBuffer: " + decoderStatus);
-                                        } else {
-                                            boolean doRender;
-                                            if (Build.VERSION.SDK_INT >= 18) {
-                                                doRender = info.size != 0;
-                                            } else {
-                                                doRender = info.size != 0 || info.presentationTimeUs != 0;
-                                            }
-                                            if (endTime > 0 && info.presentationTimeUs >= endTime) {
-                                                inputDone = true;
-                                                decoderDone = true;
-                                                doRender = false;
-                                                info.flags |= MediaCodec.BUFFER_FLAG_END_OF_STREAM;
-                                            }
-                                            if (startTime > 0 && videoTime == -1) {
-                                                if (info.presentationTimeUs < startTime) {
-                                                    doRender = false;
-                                                    FileLog.e("tmessages", "drop frame startTime = " + startTime + " present time = " + info.presentationTimeUs);
-                                                } else {
-                                                    videoTime = info.presentationTimeUs;
-                                                }
-                                            }
-                                            decoder.releaseOutputBuffer(decoderStatus, doRender);
-                                            if (doRender) {
-                                                boolean errorWait = false;
-                                                try {
-                                                    outputSurface.awaitNewImage();
-                                                } catch (Exception e) {
-                                                    errorWait = true;
-                                                    FileLog.e("tmessages", e);
-                                                }
-                                                if (!errorWait) {
-                                                    if (Build.VERSION.SDK_INT >= 18) {
-                                                        outputSurface.drawImage(false);
-                                                        inputSurface.setPresentationTime(info.presentationTimeUs * 1000);
-                                                        inputSurface.swapBuffers();
-                                                    } else {
-                                                        int inputBufIndex = encoder.dequeueInputBuffer(TIMEOUT_USEC);
-                                                        if (inputBufIndex >= 0) {
-                                                            outputSurface.drawImage(true);
-                                                            ByteBuffer rgbBuf = outputSurface.getFrame();
-                                                            ByteBuffer yuvBuf = encoderInputBuffers[inputBufIndex];
-                                                            yuvBuf.clear();
-                                                            Utilities.convertVideoFrame(rgbBuf, yuvBuf, colorFormat, resultWidth, resultHeight, padding, swapUV);
-                                                            encoder.queueInputBuffer(inputBufIndex, 0, bufferSize, info.presentationTimeUs, 0);
-                                                        } else {
-                                                            FileLog.e("tmessages", "input buffer not available");
-                                                        }
-                                                    }
-                                                }
-                                            }
-                                            if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
-                                                decoderOutputAvailable = false;
-                                                FileLog.e("tmessages", "decoder stream end");
-                                                if (Build.VERSION.SDK_INT >= 18) {
-                                                    encoder.signalEndOfInputStream();
-                                                } else {
-                                                    int inputBufIndex = encoder.dequeueInputBuffer(TIMEOUT_USEC);
-                                                    if (inputBufIndex >= 0) {
-                                                        encoder.queueInputBuffer(inputBufIndex, 0, 1, info.presentationTimeUs, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
-                                                    }
-                                                }
-                                            }
-                                        }
-                                    }
-                                }
-                            }
-                            if (videoTime != -1) {
-                                videoStartTime = videoTime;
-                            }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                            error = true;
-                        }
-
-                        extractor.unselectTrack(videoIndex);
-
-                        if (outputSurface != null) {
-                            outputSurface.release();
-                        }
-                        if (inputSurface != null) {
-                            inputSurface.release();
-                        }
-                        if (decoder != null) {
-                            decoder.stop();
-                            decoder.release();
-                        }
-                        if (encoder != null) {
-                            encoder.stop();
-                            encoder.release();
-                        }
-
-                        checkConversionCanceled();
-                    }
-                } else {
-                    long videoTime = readAndWriteTrack(messageObject, extractor, mediaMuxer, info, startTime, endTime, cacheFile, false);
-                    if (videoTime != -1) {
-                        videoStartTime = videoTime;
-                    }
-                }
-                if (!error) {
-                    readAndWriteTrack(messageObject, extractor, mediaMuxer, info, videoStartTime, endTime, cacheFile, true);
-                }
-            } catch (Exception e) {
-                error = true;
-                FileLog.e("tmessages", e);
-            } finally {
-                if (extractor != null) {
-                    extractor.release();
-                }
-                if (mediaMuxer != null) {
-                    try {
-                        mediaMuxer.finishMovie(false);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-                FileLog.e("tmessages", "time = " + (System.currentTimeMillis() - time));
-            }
-        } else {
-            preferences.edit().putBoolean("isPreviousOk", true).commit();
-            didWriteData(messageObject, cacheFile, true, true);
-            return false;
-        }
-        preferences.edit().putBoolean("isPreviousOk", true).commit();
-        didWriteData(messageObject, cacheFile, true, error);
-        return true;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index ed916003e..a62101c6c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -53,7 +53,6 @@
     public float audioProgress;
     public int audioProgressSec;
     public ArrayList<TLRPC.PhotoSize> photoThumbs;
-    public VideoEditedInfo videoEditedInfo;
 
     public static TextPaint textPaint;
     public int lastLineWidth;
@@ -128,8 +127,6 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (whoUser != null && fromUser != null) {
                             if (isOut()) {
                                 messageText = replaceWithLink(LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser), "un2", whoUser);
-                            } else if (message.action.user_id == UserConfig.getClientUserId()) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou), "un1", fromUser);
                             } else {
                                 messageText = replaceWithLink(LocaleController.getString("ActionKickUser", R.string.ActionKickUser), "un2", whoUser);
                                 messageText = replaceWithLink(messageText, "un1", fromUser);
@@ -156,9 +153,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         } else {
                             if (isOut()) {
                                 messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", whoUser);
-                            } else if (message.action.user_id == UserConfig.getClientUserId()) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou), "un1", fromUser);
-                            } else {
+                            }else {
                                 messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", whoUser);
                                 messageText = replaceWithLink(messageText, "un1", fromUser);
                             }
@@ -230,7 +225,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                     String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long) message.date) * 1000), LocaleController.formatterDay.format(((long) message.date) * 1000));
-                    TLRPC.User to_user = UserConfig.getCurrentUser();
+                    TLRPC.User to_user = null;
                     if (to_user == null) {
                         if (users != null) {
                             to_user = users.get(messageOwner.to_id.user_id);
@@ -396,8 +391,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         }
 
         if (messageOwner.message != null && messageOwner.id < 0 && messageOwner.message.length() > 6 && messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-            videoEditedInfo = new VideoEditedInfo();
-            videoEditedInfo.parseString(messageOwner.message);
+
         }
 
         generateCaption();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 1ee854d63..692476a0d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -37,7 +37,6 @@
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.Semaphore;
 
 public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
 
@@ -260,9 +259,7 @@ public void addSupportUser() {
             return null;
         }
         TLRPC.InputUser inputUser;
-        if (user.id == UserConfig.getClientUserId()) {
-            inputUser = new TLRPC.TL_inputUserSelf();
-        } else if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+        if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
             inputUser = new TLRPC.TL_inputUserForeign();
             inputUser.user_id = user.id;
             inputUser.access_hash = user.access_hash;
@@ -291,10 +288,10 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         if (error == null) {
                             TLRPC.User user = getUser(UserConfig.getClientUserId());
                             if (user == null) {
-                                user = UserConfig.getCurrentUser();
                                 putUser(user, true);
                             } else {
-                                UserConfig.setCurrentUser(user);
+//                                UserConfig.setCurrentUser(user);
+                                UserConfig.setCurrentUser(null);
                             }
                             if (user == null) {
                                 return;
@@ -347,9 +344,6 @@ public void run() {
                 if (obj.messageOwner.to_id.chat_id != 0) {
                     uid = -obj.messageOwner.to_id.chat_id;
                 } else {
-                    if (obj.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
-                        obj.messageOwner.to_id.user_id = obj.messageOwner.from_id;
-                    }
                     uid = obj.messageOwner.to_id.user_id;
                 }
 
@@ -368,8 +362,6 @@ public void cleanUp() {
         ContactsController.getInstance().cleanup();
         MediaController.getInstance().cleanup();
         NotificationsController.getInstance().cleanup();
-        SendMessagesHelper.getInstance().cleanUp();
-        SecretChatHelper.getInstance().cleanUp();
 
         dialogs_dict.clear();
         exportedChats.clear();
@@ -447,30 +439,6 @@ public void cleanUp() {
         return encryptedChats.get(id);
     }
 
-    public TLRPC.EncryptedChat getEncryptedChatDB(int chat_id) {
-        TLRPC.EncryptedChat chat = encryptedChats.get(chat_id);
-        if (chat == null) {
-            Semaphore semaphore = new Semaphore(0);
-            ArrayList<TLObject> result = new ArrayList<>();
-            MessagesStorage.getInstance().getEncryptedChat(chat_id, semaphore, result);
-            try {
-                semaphore.acquire();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            if (result.size() == 2) {
-                chat = (TLRPC.EncryptedChat) result.get(0);
-                TLRPC.User user = (TLRPC.User) result.get(1);
-                putEncryptedChat(chat, false);
-                putUser(user, true);
-            }
-        }
-        return chat;
-    }
-
-    public TLRPC.ExportedChatInvite getExportedInvite(int chat_id) {
-        return exportedChats.get(chat_id);
-    }
 
     public boolean putUser(TLRPC.User user, boolean fromCache) {
         if (user == null) {
@@ -486,10 +454,6 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
         }
         if (!fromCache) {
             users.put(user.id, user);
-            if (user.id == UserConfig.getClientUserId()) {
-                UserConfig.setCurrentUser(user);
-                UserConfig.saveConfig(true);
-            }
             if (oldUser != null && user.status != null && oldUser.status != null && user.status.expires != oldUser.status.expires) {
                 return true;
             }
@@ -559,13 +523,6 @@ public void putEncryptedChats(ArrayList<TLRPC.EncryptedChat> encryptedChats, boo
         }
     }
 
-    public void cancelLoadFullUser(int uid) {
-        loadingFullUsers.remove((Integer) uid);
-    }
-
-    public void cancelLoadFullChat(int cid) {
-        loadingFullChats.remove((Integer) cid);
-    }
 
     protected void clearFullUsers() {
         loadedFullUsers.clear();
@@ -617,45 +574,6 @@ public void run() {
         }
     }
 
-    public void loadFullUser(final TLRPC.User user, final int classGuid) {
-        if (user == null || loadingFullUsers.contains(user.id) || loadedFullUsers.contains(user.id)) {
-            return;
-        }
-        loadingFullUsers.add(user.id);
-        TLRPC.TL_users_getFullUser req = new TLRPC.TL_users_getFullUser();
-        req.id = getInputUser(user);
-        long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            loadingFullUsers.remove((Integer) user.id);
-                            loadedFullUsers.add(user.id);
-                            String names = user.first_name + user.last_name + user.username;
-                            TLRPC.TL_userFull userFull = (TLRPC.TL_userFull) response;
-                            ArrayList<TLRPC.User> users = new ArrayList<>();
-                            users.add(userFull.user);
-                            putUsers(users, false);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                            if (!names.equals(userFull.user.first_name + userFull.user.last_name + userFull.user.username)) {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_NAME);
-                            }
-                        }
-                    });
-                } else {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            loadingFullUsers.remove((Integer) user.id);
-                        }
-                    });
-                }
-            }
-        });
-        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-    }
 
     private void reloadMessages(final ArrayList<Integer> mids, final long dialog_id) {
         final TLRPC.TL_messages_getMessages req = new TLRPC.TL_messages_getMessages();
@@ -678,7 +596,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     MessagesStorage.getInstance().putMessages(messagesRes, dialog_id);
 
                     final ArrayList<MessageObject> objects = new ArrayList<>();
-                    ArrayList<Integer> messagesToReload = null;
                     for (TLRPC.Message message : messagesRes.messages) {
                         message.dialog_id = dialog_id;
                         final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
@@ -859,43 +776,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
-    public void blockUser(int user_id) {
-        final TLRPC.User user = getUser(user_id);
-        if (user == null || MessagesController.getInstance().blockedUsers.contains(user_id)) {
-            return;
-        }
-        blockedUsers.add(user_id);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.blockedUsersDidLoaded);
-        TLRPC.TL_contacts_block req = new TLRPC.TL_contacts_block();
-        req.id = MessagesController.getInputUser(user);
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    ArrayList<Integer> ids = new ArrayList<>();
-                    ids.add(user.id);
-                    MessagesStorage.getInstance().putBlockedUsers(ids, false);
-                }
-            }
-        });
-    }
 
-    public void unblockUser(int user_id) {
-        TLRPC.TL_contacts_unblock req = new TLRPC.TL_contacts_unblock();
-        final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-        if (user == null) {
-            return;
-        }
-        blockedUsers.remove((Integer) user.id);
-        req.id = MessagesController.getInputUser(user);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.blockedUsersDidLoaded);
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                MessagesStorage.getInstance().deleteBlockedUser(user.id);
-            }
-        });
-    }
+
+
 
     public void getBlockedUsers(boolean cache) {
         if (!UserConfig.isClientActivated() || loadingBlockedUsers) {
@@ -949,63 +832,7 @@ public void run() {
         });
     }
 
-    public void deleteUserPhoto(TLRPC.InputPhoto photo) {
-        if (photo == null) {
-            TLRPC.TL_photos_updateProfilePhoto req = new TLRPC.TL_photos_updateProfilePhoto();
-            req.id = new TLRPC.TL_inputPhotoEmpty();
-            req.crop = new TLRPC.TL_inputPhotoCropAuto();
-            UserConfig.getCurrentUser().photo = new TLRPC.TL_userProfilePhotoEmpty();
-            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-            if (user == null) {
-                user = UserConfig.getCurrentUser();
-            }
-            if (user == null) {
-                return;
-            }
-            user.photo = UserConfig.getCurrentUser().photo;
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                        if (user == null) {
-                            user = UserConfig.getCurrentUser();
-                            MessagesController.getInstance().putUser(user, false);
-                        } else {
-                            UserConfig.setCurrentUser(user);
-                        }
-                        if (user == null) {
-                            return;
-                        }
-                        MessagesStorage.getInstance().clearUserPhotos(user.id);
-                        ArrayList<TLRPC.User> users = new ArrayList<>();
-                        users.add(user);
-                        MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                        user.photo = (TLRPC.UserProfilePhoto) response;
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
-                                UserConfig.saveConfig(true);
-                            }
-                        });
-                    }
-                }
-            });
-        } else {
-            TLRPC.TL_photos_deletePhotos req = new TLRPC.TL_photos_deletePhotos();
-            req.id.add(photo);
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
 
-                }
-            });
-        }
-    }
 
     public void processLoadedUserPhotos(final TLRPC.photos_Photos res, final int uid, final int offset, final int count, final long max_id, final boolean fromCache, final int classGuid) {
         if (!fromCache) {
@@ -1024,12 +851,7 @@ public void run() {
         });
     }
 
-    public void uploadAndApplyUserAvatar(TLRPC.PhotoSize bigPhoto) {
-        if (bigPhoto != null) {
-            uploadingAvatar = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
-            FileLoader.getInstance().uploadFile(uploadingAvatar, false, true);
-        }
-    }
+
 
     public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat) {
         if (messages == null) {
@@ -1045,9 +867,6 @@ public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms,
         MessagesStorage.getInstance().updateDialogsWithDeletedMessages(messages, true);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, messages);
 
-        if (randoms != null && encryptedChat != null && !randoms.isEmpty()) {
-            SecretChatHelper.getInstance().sendMessagesDeleteMessage(encryptedChat, randoms, null);
-        }
 
         ArrayList<Integer> toSend = new ArrayList<>();
         for (Integer mid : messages) {
@@ -1071,88 +890,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
         });
     }
 
-    public void deleteDialog(final long did, int offset, final boolean onlyHistory) {
-        int lower_part = (int) did;
-        int high_id = (int) (did >> 32);
 
-        if (offset == 0) {
-            TLRPC.TL_dialog dialog = dialogs_dict.get(did);
-            if (dialog != null) {
-                if (!onlyHistory) {
-                    dialogs.remove(dialog);
-                    dialogsServerOnly.remove(dialog);
-                    dialogs_dict.remove(did);
-                    totalDialogsCount--;
-                } else {
-                    dialog.unread_count = 0;
-                }
-                dialogMessage.remove(dialog.top_message);
-                dialog.top_message = 0;
-            }
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, did);
-            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
-                            HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-                            dialogsToUpdate.put(did, 0);
-                            NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-                        }
-                    });
-                }
-            });
 
-            MessagesStorage.getInstance().deleteDialog(did, onlyHistory);
-        }
 
-        if (high_id == 1) {
-            return;
-        }
-
-        if (lower_part != 0) {
-            TLRPC.TL_messages_deleteHistory req = new TLRPC.TL_messages_deleteHistory();
-            req.offset = offset;
-            if (did < 0) {
-                req.peer = new TLRPC.TL_inputPeerChat();
-                req.peer.chat_id = -lower_part;
-            } else {
-                TLRPC.User user = getUser(lower_part);
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                    req.peer = new TLRPC.TL_inputPeerForeign();
-                    req.peer.access_hash = user.access_hash;
-                } else {
-                    req.peer = new TLRPC.TL_inputPeerContact();
-                }
-                req.peer.user_id = lower_part;
-            }
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
-                        if (res.offset > 0) {
-                            deleteDialog(did, res.offset, onlyHistory);
-                        }
-                        processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
-                    }
-                }
-            });
-        } else {
-            if (onlyHistory) {
-                SecretChatHelper.getInstance().sendClearHistoryMessage(getEncryptedChat(high_id), null);
-            } else {
-                SecretChatHelper.getInstance().declineSecretChat(high_id);
-            }
-        }
-    }
-
-    public void loadChatInfo(final int chat_id, Semaphore semaphore) {
-        MessagesStorage.getInstance().loadChatInfo(chat_id, semaphore);
-    }
 
     public void processChatInfo(final int chat_id, final TLRPC.ChatParticipants info, final ArrayList<TLRPC.User> usersArr, final boolean fromCache) {
         if (fromCache && chat_id > 0) {
@@ -1390,12 +1130,6 @@ public void run() {
         });
     }
 
-    public void cancelTyping(int action, long dialog_id) {
-        HashMap<Long, Boolean> typings = sendingTypings.get(action);
-        if (typings != null) {
-            typings.remove(dialog_id);
-        }
-    }
 
     public void sendTyping(final long dialog_id, final int action, int classGuid) {
         if (dialog_id == 0) {
@@ -1844,14 +1578,6 @@ public void run() {
                         }
                         putUsers(dialogsRes.users, isCache);
                         putChats(dialogsRes.chats, isCache);
-                        if (encChats != null) {
-                            for (TLRPC.EncryptedChat encryptedChat : encChats) {
-                                if (encryptedChat instanceof TLRPC.TL_encryptedChat && AndroidUtilities.getMyLayerVersion(encryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
-                                    SecretChatHelper.getInstance().sendNotifyLayerMessage(encryptedChat, null);
-                                }
-                                putEncryptedChat(encryptedChat, true);
-                            }
-                        }
                         loadingDialogs = false;
                         totalDialogsCount = arg1;
 
@@ -1914,41 +1640,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
         });
     }
 
-    public void markMessageContentAsRead(int mid) {
-        TLRPC.TL_messages_readMessageContents req = new TLRPC.TL_messages_readMessageContents();
-        req.id.add(mid);
-        MessagesStorage.getInstance().markMessagesContentAsRead(req.id);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesReadContent, req.id);
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
-                    processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
-                }
-            }
-        });
-    }
 
-    public void markMessageAsRead(final long dialog_id, final long random_id, int ttl) {
-        if (random_id == 0 || dialog_id == 0 || ttl <= 0) {
-            return;
-        }
-        int lower_part = (int) dialog_id;
-        int high_id = (int) (dialog_id >> 32);
-        if (lower_part != 0) {
-            return;
-        }
-        TLRPC.EncryptedChat chat = getEncryptedChat(high_id);
-        if (chat == null) {
-            return;
-        }
-        ArrayList<Long> random_ids = new ArrayList<>();
-        random_ids.add(random_id);
-        SecretChatHelper.getInstance().sendMessagesReadMessage(chat, random_ids, null);
-        int time = ConnectionsManager.getInstance().getCurrentTime();
-        MessagesStorage.getInstance().createTaskForSecretChat(chat.id, time, time, 0, random_ids);
-    }
+
 
     public void markDialogAsRead(final long dialog_id, final int max_id, final int max_positive_id, final int offset, final int max_date, final boolean was, final boolean popup) {
         int lower_part = (int) dialog_id;
@@ -2070,242 +1763,6 @@ public void run() {
         }
     }
 
-    public long createChat(String title, ArrayList<Integer> selectedContacts, boolean isBroadcast) {
-        if (isBroadcast) {
-            TLRPC.TL_chat chat = new TLRPC.TL_chat();
-            chat.id = UserConfig.lastBroadcastId;
-            chat.title = title;
-            chat.photo = new TLRPC.TL_chatPhotoEmpty();
-            chat.participants_count = selectedContacts.size();
-            chat.date = (int) (System.currentTimeMillis() / 1000);
-            chat.left = false;
-            chat.version = 1;
-            UserConfig.lastBroadcastId--;
-            putChat(chat, false);
-            ArrayList<TLRPC.Chat> chatsArrays = new ArrayList<>();
-            chatsArrays.add(chat);
-            MessagesStorage.getInstance().putUsersAndChats(null, chatsArrays, true, true);
-
-            TLRPC.TL_chatParticipants participants = new TLRPC.TL_chatParticipants();
-            participants.chat_id = chat.id;
-            participants.admin_id = UserConfig.getClientUserId();
-            participants.version = 1;
-            for (Integer id : selectedContacts) {
-                TLRPC.TL_chatParticipant participant = new TLRPC.TL_chatParticipant();
-                participant.user_id = id;
-                participant.inviter_id = UserConfig.getClientUserId();
-                participant.date = (int) (System.currentTimeMillis() / 1000);
-                participants.participants.add(participant);
-            }
-            MessagesStorage.getInstance().updateChatInfo(chat.id, participants, false);
-
-            TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
-            newMsg.action = new TLRPC.TL_messageActionCreatedBroadcastList();
-            newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-            newMsg.from_id = UserConfig.getClientUserId();
-            newMsg.dialog_id = AndroidUtilities.makeBroadcastId(chat.id);
-            newMsg.to_id = new TLRPC.TL_peerChat();
-            newMsg.to_id.chat_id = chat.id;
-            newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
-            newMsg.random_id = 0;
-            UserConfig.saveConfig(false);
-            MessageObject newMsgObj = new MessageObject(newMsg, users, true);
-            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-
-            ArrayList<MessageObject> objArr = new ArrayList<>();
-            objArr.add(newMsgObj);
-            ArrayList<TLRPC.Message> arr = new ArrayList<>();
-            arr.add(newMsg);
-            MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-            updateInterfaceWithMessages(newMsg.dialog_id, objArr);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatDidCreated, chat.id);
-
-            return 0;
-        } else {
-            TLRPC.TL_messages_createChat req = new TLRPC.TL_messages_createChat();
-            req.title = title;
-            for (Integer uid : selectedContacts) {
-                TLRPC.User user = getUser(uid);
-                if (user == null) {
-                    continue;
-                }
-                req.users.add(getInputUser(user));
-            }
-            return ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error != null) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatDidFailCreate);
-                            }
-                        });
-                        return;
-                    }
-                    final TLRPC.Updates updates = (TLRPC.Updates) response;
-                    processUpdates(updates, false);
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            putUsers(updates.users, false);
-                            putChats(updates.chats, false);
-                            if (updates.chats != null && !updates.chats.isEmpty()) {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatDidCreated, updates.chats.get(0).id);
-                            } else {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatDidFailCreate);
-                            }
-                        }
-                    });
-                }
-            });
-        }
-    }
-
-    public void addUserToChat(int chat_id, final TLRPC.User user, final TLRPC.ChatParticipants info, int count_fwd) {
-        if (user == null) {
-            return;
-        }
-
-        if (chat_id > 0) {
-            TLRPC.TL_messages_addChatUser req = new TLRPC.TL_messages_addChatUser();
-            req.chat_id = chat_id;
-            req.fwd_limit = count_fwd;
-            req.user_id = getInputUser(user);
-
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error != null) {
-                        return;
-                    }
-                    processUpdates((TLRPC.Updates) response, false);
-                }
-            });
-        } else {
-            if (info != null) {
-                for (TLRPC.TL_chatParticipant p : info.participants) {
-                    if (p.user_id == user.id) {
-                        return;
-                    }
-                }
-
-                TLRPC.Chat chat = getChat(chat_id);
-                chat.participants_count++;
-                ArrayList<TLRPC.Chat> chatArrayList = new ArrayList<>();
-                chatArrayList.add(chat);
-                MessagesStorage.getInstance().putUsersAndChats(null, chatArrayList, true, true);
-
-                TLRPC.TL_chatParticipant newPart = new TLRPC.TL_chatParticipant();
-                newPart.user_id = user.id;
-                newPart.inviter_id = UserConfig.getClientUserId();
-                newPart.date = ConnectionsManager.getInstance().getCurrentTime();
-                info.participants.add(0, newPart);
-                MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info.chat_id, info);
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
-            }
-        }
-    }
-
-    public void deleteUserFromChat(final int chat_id, final TLRPC.User user, final TLRPC.ChatParticipants info) {
-        if (user == null) {
-            return;
-        }
-        if (chat_id > 0) {
-            TLRPC.TL_messages_deleteChatUser req = new TLRPC.TL_messages_deleteChatUser();
-            req.chat_id = chat_id;
-            req.user_id = getInputUser(user);
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error != null) {
-                        return;
-                    }
-                    final TLRPC.Updates updates = (TLRPC.Updates) response;
-                    processUpdates(updates, false);
-                    if (user.id == UserConfig.getClientUserId()) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                MessagesController.getInstance().deleteDialog(-chat_id, 0, false);
-                            }
-                        });
-                    }
-                }
-            });
-        } else {
-            if (info != null) {
-                TLRPC.Chat chat = getChat(chat_id);
-                chat.participants_count--;
-                ArrayList<TLRPC.Chat> chatArrayList = new ArrayList<>();
-                chatArrayList.add(chat);
-                MessagesStorage.getInstance().putUsersAndChats(null, chatArrayList, true, true);
-
-                boolean changed = false;
-                for (int a = 0; a < info.participants.size(); a++) {
-                    TLRPC.TL_chatParticipant p = info.participants.get(a);
-                    if (p.user_id == user.id) {
-                        info.participants.remove(a);
-                        changed = true;
-                        break;
-                    }
-                }
-                if (changed) {
-                    MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info.chat_id, info);
-                }
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
-            }
-        }
-    }
-
-    public void changeChatTitle(int chat_id, String title) {
-        if (chat_id > 0) {
-            TLRPC.TL_messages_editChatTitle req = new TLRPC.TL_messages_editChatTitle();
-            req.chat_id = chat_id;
-            req.title = title;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error != null) {
-                        return;
-                    }
-                    processUpdates((TLRPC.Updates) response, false);
-                }
-            });
-        } else {
-            TLRPC.Chat chat = getChat(chat_id);
-            chat.title = title;
-            ArrayList<TLRPC.Chat> chatArrayList = new ArrayList<>();
-            chatArrayList.add(chat);
-            MessagesStorage.getInstance().putUsersAndChats(null, chatArrayList, true, true);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_CHAT_NAME);
-        }
-    }
-
-    public void changeChatAvatar(int chat_id, TLRPC.InputFile uploadedAvatar) {
-        TLRPC.TL_messages_editChatPhoto req2 = new TLRPC.TL_messages_editChatPhoto();
-        req2.chat_id = chat_id;
-        if (uploadedAvatar != null) {
-            req2.photo = new TLRPC.TL_inputChatUploadedPhoto();
-            req2.photo.file = uploadedAvatar;
-            req2.photo.crop = new TLRPC.TL_inputPhotoCropAuto();
-        } else {
-            req2.photo = new TLRPC.TL_inputChatPhotoEmpty();
-        }
-        ConnectionsManager.getInstance().performRpc(req2, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error != null) {
-                    return;
-                }
-                processUpdates((TLRPC.Updates) response, false);
-            }
-        });
-    }
 
     public void unregistedPush() {
         if (UserConfig.registeredForPush && UserConfig.pushString.length() == 0) {
@@ -2377,7 +1834,7 @@ public void run() {
     }
 
     public void registerForPush(final String regid) {
-        if (regid == null || regid.length() == 0 || registeringForPush || UserConfig.getClientUserId() == 0) {
+        if (regid == null || regid.length() == 0 || registeringForPush || UserConfig.getClientUserId() == null) {
             return;
         }
         if (UserConfig.registeredForPush && regid.equals(UserConfig.pushString)) {
@@ -2683,7 +2140,6 @@ public void run() {
                                         public void run() {
                                             for (HashMap.Entry<Integer, Integer> entry : corrected.entrySet()) {
                                                 Integer oldId = entry.getKey();
-                                                SendMessagesHelper.getInstance().processSentMessage(oldId);
                                                 Integer newId = entry.getValue();
                                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, newId, null, false);
                                             }
@@ -2698,12 +2154,6 @@ public void run() {
                                     if (!res.new_messages.isEmpty() || !res.new_encrypted_messages.isEmpty()) {
                                         final HashMap<Long, ArrayList<MessageObject>> messages = new HashMap<>();
                                         for (TLRPC.EncryptedMessage encryptedMessage : res.new_encrypted_messages) {
-                                            ArrayList<TLRPC.Message> decryptedMessages = SecretChatHelper.getInstance().decryptMessage(encryptedMessage);
-                                            if (decryptedMessages != null && !decryptedMessages.isEmpty()) {
-                                                for (TLRPC.Message message : decryptedMessages) {
-                                                    res.new_messages.add(message);
-                                                }
-                                            }
                                         }
 
                                         ImageLoader.saveMessagesThumbs(res.new_messages);
@@ -2723,9 +2173,7 @@ public void run() {
                                                 if (message.to_id.chat_id != 0) {
                                                     uid = -message.to_id.chat_id;
                                                 } else {
-                                                    if (message.to_id.user_id == UserConfig.getClientUserId()) {
-                                                        message.to_id.user_id = message.from_id;
-                                                    }
+
                                                     uid = message.to_id.user_id;
                                                 }
                                             }
@@ -2766,7 +2214,6 @@ public void run() {
                                             }
                                         });
 
-                                        SecretChatHelper.getInstance().processPendingEncMessages();
                                     }
 
                                     if (!res.other_updates.isEmpty()) {
@@ -2906,7 +2353,6 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
                     message.id = updates.id;
                     if (updates instanceof TLRPC.TL_updateShortMessage) {
                         if ((updates.flags & TLRPC.MESSAGE_FLAG_OUT) != 0) {
-                            message.from_id = UserConfig.getClientUserId();
                         } else {
                             message.from_id = user_id;
                         }
@@ -3124,7 +2570,6 @@ public int compare(TLRPC.Update lhs, TLRPC.Update rhs) {
         } else if (updates instanceof UserActionUpdatesPts) {
             MessagesStorage.lastPtsValue = updates.pts;
         }
-        SecretChatHelper.getInstance().processPendingEncMessages();
         if (!fromQueue) {
             if (needGetDiff) {
                 getDifference();
@@ -3246,9 +2691,7 @@ public void run() {
                 if (upd.message.to_id.chat_id != 0) {
                     uid = -upd.message.to_id.chat_id;
                 } else {
-                    if (upd.message.to_id.user_id == UserConfig.getClientUserId()) {
-                        upd.message.to_id.user_id = upd.message.from_id;
-                    }
+
                     uid = upd.message.to_id.user_id;
                 }
                 ArrayList<MessageObject> arr = messages.get(uid);
@@ -3279,51 +2722,6 @@ public void run() {
             } else if (update instanceof TLRPC.TL_updateDeleteMessages) {
                 deletedMessages.addAll(update.messages);
             } else if (update instanceof TLRPC.TL_updateUserTyping || update instanceof TLRPC.TL_updateChatUserTyping) {
-                if (update.user_id != UserConfig.getClientUserId()) {
-                    long uid = -update.chat_id;
-                    if (uid == 0) {
-                        uid = update.user_id;
-                    }
-                    ArrayList<PrintingUser> arr = printingUsers.get(uid);
-                    if (update.action instanceof TLRPC.TL_sendMessageCancelAction) {
-                        if (arr != null) {
-                            for (int a = 0; a < arr.size(); a++) {
-                                PrintingUser pu = arr.get(a);
-                                if (pu.userId == update.user_id) {
-                                    arr.remove(a);
-                                    printChanged = true;
-                                    break;
-                                }
-                            }
-                            if (arr.isEmpty()) {
-                                printingUsers.remove(uid);
-                            }
-                        }
-                    } else {
-                        if (arr == null) {
-                            arr = new ArrayList<>();
-                            printingUsers.put(uid, arr);
-                        }
-                        boolean exist = false;
-                        for (PrintingUser u : arr) {
-                            if (u.userId == update.user_id) {
-                                exist = true;
-                                u.lastTime = currentTime;
-                                u.action = update.action;
-                                break;
-                            }
-                        }
-                        if (!exist) {
-                            PrintingUser newUser = new PrintingUser();
-                            newUser.userId = update.user_id;
-                            newUser.lastTime = currentTime;
-                            newUser.action = update.action;
-                            arr.add(newUser);
-                            printChanged = true;
-                        }
-                    }
-                    onlinePrivacy.put(update.user_id, ConnectionsManager.getInstance().getCurrentTime());
-                }
             } else if (update instanceof TLRPC.TL_updateChatParticipants) {
                 interfaceUpdateMask |= UPDATE_MASK_CHAT_MEMBERS;
                 chatInfoToUpdate.add(update.participants);
@@ -3350,7 +2748,6 @@ public void run() {
                     newMessage.date = update.date;
                     newMessage.from_id = update.user_id;
                     newMessage.to_id = new TLRPC.TL_peerUser();
-                    newMessage.to_id.user_id = UserConfig.getClientUserId();
                     newMessage.dialog_id = update.user_id;
 
                     messagesArr.add(newMessage);
@@ -3398,7 +2795,6 @@ public void run() {
                 newMessage.date = update.date;
                 newMessage.from_id = 777000;
                 newMessage.to_id = new TLRPC.TL_peerUser();
-                newMessage.to_id.user_id = UserConfig.getClientUserId();
                 newMessage.dialog_id = 777000;
 
                 messagesArr.add(newMessage);
@@ -3412,119 +2808,6 @@ public void run() {
                 pushMessages.add(obj);
             } else if (update instanceof TLRPC.TL_updateNewGeoChatMessage) {
                 //DEPRECATED
-            } else if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
-                ArrayList<TLRPC.Message> decryptedMessages = SecretChatHelper.getInstance().decryptMessage(((TLRPC.TL_updateNewEncryptedMessage) update).message);
-                if (decryptedMessages != null && !decryptedMessages.isEmpty()) {
-                    int cid = ((TLRPC.TL_updateNewEncryptedMessage) update).message.chat_id;
-                    long uid = ((long) cid) << 32;
-                    ArrayList<MessageObject> arr = messages.get(uid);
-                    if (arr == null) {
-                        arr = new ArrayList<>();
-                        messages.put(uid, arr);
-                    }
-                    for (TLRPC.Message message : decryptedMessages) {
-                        ImageLoader.saveMessageThumbs(message);
-                        messagesArr.add(message);
-                        MessageObject obj = new MessageObject(message, usersDict, true);
-                        arr.add(obj);
-                        pushMessages.add(obj);
-                    }
-                }
-            } else if (update instanceof TLRPC.TL_updateEncryptedChatTyping) {
-                TLRPC.EncryptedChat encryptedChat = getEncryptedChatDB(update.chat_id);
-                if (encryptedChat != null) {
-                    update.user_id = encryptedChat.user_id;
-                    long uid = ((long) update.chat_id) << 32;
-                    ArrayList<PrintingUser> arr = printingUsers.get(uid);
-                    if (arr == null) {
-                        arr = new ArrayList<>();
-                        printingUsers.put(uid, arr);
-                    }
-                    boolean exist = false;
-                    for (PrintingUser u : arr) {
-                        if (u.userId == update.user_id) {
-                            exist = true;
-                            u.lastTime = currentTime;
-                            u.action = new TLRPC.TL_sendMessageTypingAction();
-                            break;
-                        }
-                    }
-                    if (!exist) {
-                        PrintingUser newUser = new PrintingUser();
-                        newUser.userId = update.user_id;
-                        newUser.lastTime = currentTime;
-                        newUser.action = new TLRPC.TL_sendMessageTypingAction();
-                        arr.add(newUser);
-                        printChanged = true;
-                    }
-                    onlinePrivacy.put(update.user_id, ConnectionsManager.getInstance().getCurrentTime());
-                }
-            } else if (update instanceof TLRPC.TL_updateEncryptedMessagesRead) {
-                markAsReadEncrypted.put(update.chat_id, Math.max(update.max_date, update.date));
-                tasks.add((TLRPC.TL_updateEncryptedMessagesRead) update);
-            } else if (update instanceof TLRPC.TL_updateChatParticipantAdd) {
-                MessagesStorage.getInstance().updateChatInfo(update.chat_id, update.user_id, false, update.inviter_id, update.version);
-            } else if (update instanceof TLRPC.TL_updateChatParticipantDelete) {
-                MessagesStorage.getInstance().updateChatInfo(update.chat_id, update.user_id, true, 0, update.version);
-            } else if (update instanceof TLRPC.TL_updateDcOptions) {
-                ConnectionsManager.getInstance().updateDcSettings(0);
-            } else if (update instanceof TLRPC.TL_updateEncryption) {
-                SecretChatHelper.getInstance().processUpdateEncryption((TLRPC.TL_updateEncryption) update, usersDict);
-            } else if (update instanceof TLRPC.TL_updateUserBlocked) {
-                final TLRPC.TL_updateUserBlocked finalUpdate = (TLRPC.TL_updateUserBlocked) update;
-                if (finalUpdate.blocked) {
-                    ArrayList<Integer> ids = new ArrayList<>();
-                    ids.add(finalUpdate.user_id);
-                    MessagesStorage.getInstance().putBlockedUsers(ids, false);
-                } else {
-                    MessagesStorage.getInstance().deleteBlockedUser(finalUpdate.user_id);
-                }
-                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (finalUpdate.blocked) {
-                                    if (!blockedUsers.contains(finalUpdate.user_id)) {
-                                        blockedUsers.add(finalUpdate.user_id);
-                                    }
-                                } else {
-                                    blockedUsers.remove((Integer) finalUpdate.user_id);
-                                }
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.blockedUsersDidLoaded);
-                            }
-                        });
-                    }
-                });
-            } else if (update instanceof TLRPC.TL_updateNotifySettings) {
-                updatesOnMainThread.add(update);
-            } else if (update instanceof TLRPC.TL_updateServiceNotification) {
-                TLRPC.TL_message newMessage = new TLRPC.TL_message();
-                newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
-                UserConfig.saveConfig(false);
-                newMessage.flags = TLRPC.MESSAGE_FLAG_UNREAD;
-                newMessage.date = ConnectionsManager.getInstance().getCurrentTime();
-                newMessage.from_id = 777000;
-                newMessage.to_id = new TLRPC.TL_peerUser();
-                newMessage.to_id.user_id = UserConfig.getClientUserId();
-                newMessage.dialog_id = 777000;
-                newMessage.media = update.media;
-                newMessage.message = ((TLRPC.TL_updateServiceNotification) update).message;
-
-                messagesArr.add(newMessage);
-                MessageObject obj = new MessageObject(newMessage, usersDict, true);
-                ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
-                if (arr == null) {
-                    arr = new ArrayList<>();
-                    messages.put(newMessage.dialog_id, arr);
-                }
-                arr.add(obj);
-                pushMessages.add(obj);
-            } else if (update instanceof TLRPC.TL_updatePrivacy) {
-                updatesOnMainThread.add(update);
-            } else if (update instanceof TLRPC.TL_updateWebPage) {
-                webPages.put(update.webpage.id, update.webpage);
             }
         }
         if (!messages.isEmpty()) {
@@ -3597,9 +2880,7 @@ public void run() {
                             }
                             toDbUser.status = update.status;
                             dbUsersStatus.add(toDbUser);
-                            if (update.user_id == UserConfig.getClientUserId()) {
-                                NotificationsController.getInstance().setLastOnlineFromOtherDevice(update.status.expires);
-                            }
+
                         } else if (update instanceof TLRPC.TL_updateUserName) {
                             if (currentUser != null) {
                                 if (!(currentUser instanceof TLRPC.TL_userContact)) {
@@ -3815,31 +3096,13 @@ public void run() {
             MessagesStorage.getInstance().updateDialogsWithDeletedMessages(deletedMessages, true);
         }
         if (!tasks.isEmpty()) {
-            for (TLRPC.TL_updateEncryptedMessagesRead update : tasks) {
-                MessagesStorage.getInstance().createTaskForSecretChat(update.chat_id, update.max_date, update.date, 1, null);
-            }
+
         }
 
         return true;
     }
 
-    private boolean isNotifySettingsMuted(TLRPC.PeerNotifySettings settings) {
-        return settings instanceof TLRPC.TL_peerNotifySettings && settings.mute_until > ConnectionsManager.getInstance().getCurrentTime();
-    }
 
-    public boolean isDialogMuted(long dialog_id) {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        int mute_type = preferences.getInt("notify2_" + dialog_id, 0);
-        if (mute_type == 2) {
-            return true;
-        } else if (mute_type == 3) {
-            int mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
-            if (mute_until >= ConnectionsManager.getInstance().getCurrentTime()) {
-                return true;
-            }
-        }
-        return false;
-    }
 
     private boolean updatePrintingUsersWithNewMessages(long uid, ArrayList<MessageObject> messages) {
         if (uid > 0) {
@@ -3967,80 +3230,5 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
         }
     }
 
-    public static void openByUserName(String username, final BaseFragment fragment, final int type) {
-        if (username == null || fragment == null) {
-            return;
-        }
-        TLRPC.User user = MessagesController.getInstance().getUser(username);
-        if (user != null) {
-            Bundle args = new Bundle();
-            args.putInt("user_id", user.id);
-//            if (type == 0) {
-//                fragment.presentFragment(new ProfileActivity(args));
-//            } else {
-//                fragment.presentFragment(new ChatActivity(args));
-//            }
-        } else {
-            if (fragment.getParentActivity() == null) {
-                return;
-            }
-            final ProgressDialog progressDialog = new ProgressDialog(fragment.getParentActivity());
-            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-            progressDialog.setCanceledOnTouchOutside(false);
-            progressDialog.setCancelable(false);
 
-            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
-            req.username = username;
-            final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                progressDialog.dismiss();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            if (fragment != null) {
-                                fragment.setVisibleDialog(null);
-                            }
-                            if (error == null) {
-                                TLRPC.User user = (TLRPC.User) response;
-                                MessagesController.getInstance().putUser(user, false);
-                                ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                                Bundle args = new Bundle();
-                                args.putInt("user_id", user.id);
-//                                if (fragment != null) {
-//                                    if (type == 0) {
-//                                        fragment.presentFragment(new ProfileActivity(args));
-//                                    } else if (type == 1) {
-//                                        fragment.presentFragment(new ChatActivity(args));
-//                                    }
-//                                }
-                            }
-                        }
-                    });
-                }
-            });
-            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                    try {
-                        dialog.dismiss();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    if (fragment != null) {
-                        fragment.setVisibleDialog(null);
-                    }
-                }
-            });
-            fragment.setVisibleDialog(progressDialog);
-            progressDialog.show();
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 7cde65697..ef7ed557b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -1600,7 +1600,6 @@ public void run() {
                     users.clear();
                     FileLog.e("tmessages", e);
                 }
-                ContactsController.getInstance().processLoadedContacts(contacts, users, 1);
             }
         });
     }
@@ -1717,7 +1716,6 @@ public void run() {
                         getChatsInternal(stringToLoad.toString(), chats);
                     }
 
-                    SendMessagesHelper.getInstance().processUnsentMessages(messages, users, chats, encryptedChats);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -3737,7 +3735,6 @@ public void run() {
                 ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
                 try {
                     ArrayList<Integer> usersToLoad = new ArrayList<>();
-                    usersToLoad.add(UserConfig.getClientUserId());
                     ArrayList<Integer> chatsToLoad = new ArrayList<>();
                     ArrayList<Integer> encryptedToLoad = new ArrayList<>();
                     SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did ORDER BY d.date DESC LIMIT %d,%d", offset, count));
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 67fb8fb3f..8be4589e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -140,8 +140,6 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
         int user_id = messageObject.messageOwner.to_id.user_id;
         if (user_id == 0) {
             user_id = messageObject.messageOwner.from_id;
-        } else if (user_id == UserConfig.getClientUserId()) {
-            user_id = messageObject.messageOwner.from_id;
         }
 
         if (dialog_id == 0) {
@@ -178,7 +176,7 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                             msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(user.first_name, user.last_name));
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                             String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long) messageObject.messageOwner.date) * 1000), LocaleController.formatterDay.format(((long) messageObject.messageOwner.date) * 1000));
-                            msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
+                            msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().getFirstName(), date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
                         }
                     } else {
                         if (messageObject.isMediaEmpty()) {
@@ -212,73 +210,6 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                 } else {
                     msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
                 }
-            } else if (chat_id != 0) {
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-                if (preferences.getBoolean("EnablePreviewGroup", true)) {
-                    if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
-                        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
-                            if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                            } else {
-                                TLRPC.User u2 = MessagesController.getInstance().getUser(messageObject.messageOwner.action.user_id);
-                                if (u2 == null) {
-                                    return null;
-                                }
-                                if (user.id == u2.id) {
-                                    msg = LocaleController.formatString("NotificationGroupAddSelf", R.string.NotificationGroupAddSelf, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                                } else {
-                                    msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, ContactsController.formatName(user.first_name, user.last_name), chat.title, ContactsController.formatName(u2.first_name, u2.last_name));
-                                }
-                            }
-                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatJoinedByLink) {
-                            msg = LocaleController.formatString("NotificationInvitedToGroupByLink", R.string.NotificationInvitedToGroupByLink, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditTitle) {
-                            msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, ContactsController.formatName(user.first_name, user.last_name), messageObject.messageOwner.action.title);
-                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
-                            msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
-                            if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                            } else if (messageObject.messageOwner.action.user_id == user.id) {
-                                msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                            } else {
-                                TLRPC.User u2 = MessagesController.getInstance().getUser(messageObject.messageOwner.action.user_id);
-                                if (u2 == null) {
-                                    return null;
-                                }
-                                msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, ContactsController.formatName(user.first_name, user.last_name), chat.title, ContactsController.formatName(u2.first_name, u2.last_name));
-                            }
-                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatCreate) {
-                            msg = messageObject.messageText.toString();
-                        }
-                    } else {
-                        if (messageObject.isMediaEmpty()) {
-                            if (!shortMessage && messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, ContactsController.formatName(user.first_name, user.last_name), chat.title, messageObject.messageOwner.message);
-                            } else {
-                                msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                            }
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                            msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                            msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
-                            msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            if (messageObject.isSticker()) {
-                                msg = LocaleController.formatString("NotificationMessageGroupSticker", R.string.NotificationMessageGroupSticker, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                            } else {
-                                msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                            }
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                            msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                        }
-                    }
-                } else {
-                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, ContactsController.formatName(user.first_name, user.last_name), chat.title);
-                }
             }
         }
         return msg;
@@ -364,8 +295,6 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             int user_id = lastMessageObject.messageOwner.to_id.user_id;
             if (user_id == 0) {
                 user_id = lastMessageObject.messageOwner.from_id;
-            } else if (user_id == UserConfig.getClientUserId()) {
-                user_id = lastMessageObject.messageOwner.from_id;
             }
 
             TLRPC.User user = MessagesController.getInstance().getUser(user_id);
@@ -656,7 +585,6 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 mBuilder.setVibrate(new long[]{0, 0});
             }
 
-            showExtraNotifications(mBuilder, notifyAboutLast);
             notificationManager.notify(1, mBuilder.build());
             if (preferences.getBoolean("EnablePebbleNotifications", false)) {
                 sendAlertToPebble(lastMessageFull);
@@ -668,199 +596,6 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
         }
     }
 
-    @SuppressLint("InlinedApi")
-    public void showExtraNotifications(NotificationCompat.Builder notificationBuilder, boolean notifyAboutLast) {
-        if (Build.VERSION.SDK_INT < 19) {
-            return;
-        }
-        ArrayList<Long> sortedDialogs = new ArrayList<>();
-        HashMap<Long, ArrayList<MessageObject>> messagesByDialogs = new HashMap<>();
-        for (MessageObject messageObject : pushMessages) {
-            long dialog_id = messageObject.getDialogId();
-            if ((int)dialog_id == 0) {
-                continue;
-            }
-
-            ArrayList<MessageObject> arrayList = messagesByDialogs.get(dialog_id);
-            if (arrayList == null) {
-                arrayList = new ArrayList<>();
-                messagesByDialogs.put(dialog_id, arrayList);
-                sortedDialogs.add(0, dialog_id);
-            }
-            arrayList.add(messageObject);
-        }
-
-        HashMap<Long, Integer> oldIdsWear = new HashMap<>();
-        oldIdsWear.putAll(wearNotificationsIds);
-        wearNotificationsIds.clear();
-
-        HashMap<Long, Integer> oldIdsAuto = new HashMap<>();
-        oldIdsAuto.putAll(autoNotificationsIds);
-        autoNotificationsIds.clear();
-
-        for (long dialog_id : sortedDialogs) {
-            ArrayList<MessageObject> messageObjects = messagesByDialogs.get(dialog_id);
-            int max_id = messageObjects.get(0).getId();
-            int max_date = messageObjects.get(0).messageOwner.date;
-            TLRPC.Chat chat = null;
-            TLRPC.User user = null;
-            String name;
-            if (dialog_id > 0) {
-                user = MessagesController.getInstance().getUser((int)dialog_id);
-                if (user == null) {
-                    continue;
-                }
-            } else {
-                chat = MessagesController.getInstance().getChat(-(int)dialog_id);
-                if (chat == null) {
-                    continue;
-                }
-            }
-            if (chat != null) {
-                name = chat.title;
-            } else {
-                name = ContactsController.formatName(user.first_name, user.last_name);
-            }
-
-            Integer notificationIdWear = oldIdsWear.get(dialog_id);
-            if (notificationIdWear == null) {
-                notificationIdWear = wearNotificationId++;
-            } else {
-                oldIdsWear.remove(dialog_id);
-            }
-
-            Integer notificationIdAuto = oldIdsAuto.get(dialog_id);
-            if (notificationIdAuto == null) {
-                notificationIdAuto = autoNotificationId++;
-            } else {
-                oldIdsAuto.remove(dialog_id);
-            }
-
-            Intent replyIntent = new Intent(ApplicationLoader.applicationContext, WearReplyReceiver.class);
-            replyIntent.putExtra("dialog_id", dialog_id);
-            replyIntent.putExtra("max_id", max_id);
-            PendingIntent replyPendingIntent = PendingIntent.getBroadcast(ApplicationLoader.applicationContext, notificationIdWear, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-            RemoteInput remoteInputWear = new RemoteInput.Builder(EXTRA_VOICE_REPLY).setLabel(LocaleController.getString("Reply", R.string.Reply)).build();
-            String replyToString;
-            if (chat != null) {
-                replyToString = LocaleController.formatString("ReplyToGroup", R.string.ReplyToGroup, name);
-            } else {
-                replyToString = LocaleController.formatString("ReplyToUser", R.string.ReplyToUser, name);
-            }
-            NotificationCompat.Action action = new NotificationCompat.Action.Builder(R.drawable.ic_reply_icon, replyToString, replyPendingIntent).addRemoteInput(remoteInputWear).build();
-
-            Intent msgHeardIntent = new Intent();
-            msgHeardIntent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
-            msgHeardIntent.setAction("org.telegram.messenger.ACTION_MESSAGE_HEARD");
-            msgHeardIntent.putExtra("dialog_id", dialog_id);
-            msgHeardIntent.putExtra("max_id", max_id);
-            PendingIntent msgHeardPendingIntent = PendingIntent.getBroadcast(ApplicationLoader.applicationContext, notificationIdAuto, msgHeardIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-
-            Intent msgReplyIntent = new Intent();
-            msgReplyIntent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
-            msgReplyIntent.setAction("org.telegram.messenger.ACTION_MESSAGE_REPLY");
-            msgReplyIntent.putExtra("dialog_id", dialog_id);
-            msgReplyIntent.putExtra("max_id", max_id);
-            PendingIntent msgReplyPendingIntent = PendingIntent.getBroadcast(ApplicationLoader.applicationContext, notificationIdAuto, msgReplyIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-            RemoteInput remoteInputAuto = new RemoteInput.Builder(NotificationsController.EXTRA_VOICE_REPLY).setLabel(LocaleController.getString("Reply", R.string.Reply)).build();
-
-            NotificationCompat.CarExtender.UnreadConversation.Builder unreadConvBuilder = new NotificationCompat.CarExtender.UnreadConversation.Builder(name)
-            .setReadPendingIntent(msgHeardPendingIntent)
-            .setReplyAction(msgReplyPendingIntent, remoteInputAuto)
-            .setLatestTimestamp((long) max_date * 1000);
-
-            String text = "";
-            for (int a = messageObjects.size() - 1; a >= 0; a--) {
-                MessageObject messageObject = messageObjects.get(a);
-                String message = getStringForMessage(messageObject, false);
-                if (message == null) {
-                    continue;
-                }
-                if (chat != null) {
-                    message = message.replace(" @ " + name, "");
-                } else {
-                    message = message.replace(name + ": ", "").replace(name + " ", "");
-                }
-                if (text.length() > 0) {
-                    text += "\n\n";
-                }
-                text += message;
-
-                unreadConvBuilder.addMessage(message);
-            }
-
-
-
-            TLRPC.FileLocation photoPath = null;
-            if (chat != null) {
-                if (chat.photo != null && chat.photo.photo_small != null && chat.photo.photo_small.volume_id != 0 && chat.photo.photo_small.local_id != 0) {
-                    photoPath = chat.photo.photo_small;
-                }
-            } else {
-                if (user.photo != null && user.photo.photo_small != null && user.photo.photo_small.volume_id != 0 && user.photo.photo_small.local_id != 0) {
-                    photoPath = user.photo.photo_small;
-                }
-            }
-            //notificationBuilder.extend(new NotificationCompat.CarExtender().setUnreadConversation(unreadConvBuilder.build()));
-            NotificationCompat.Builder builderAuto = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setSmallIcon(R.drawable.notification)
-                    .setColor(0xff2ca5e0)
-                    .setGroup("messages")
-                    .setLocalOnly(true)
-                    //.setGroupSummary(false)
-                    //.setCategory(NotificationCompat.CATEGORY_MESSAGE)
-                    .extend(new NotificationCompat.CarExtender().setUnreadConversation(unreadConvBuilder.build()));
-            if (photoPath != null) {
-                BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
-                if (img != null) {
-                    builderAuto.setLargeIcon(img.getBitmap());
-                }
-            }
-            notificationManager.notify("android_auto", notificationIdAuto, builderAuto.build());
-            autoNotificationsIds.put(dialog_id, notificationIdAuto);
-
-            Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
-            intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
-            intent.setFlags(32768);
-            if (chat != null) {
-                intent.putExtra("chatId", chat.id);
-            } else if (user != null) {
-                intent.putExtra("userId", user.id);
-            }
-            PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, intent, PendingIntent.FLAG_ONE_SHOT);
-
-            NotificationCompat.Builder builder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setContentTitle(name)
-                    .setSmallIcon(R.drawable.notification)
-                    .setGroup("messages")
-                    .setContentText(text)
-                    .setColor(0xff2ca5e0)
-                    .setGroupSummary(false)
-                    .setContentIntent(contentIntent)
-                    .extend(new NotificationCompat.WearableExtender().addAction(action))
-                    .setCategory(NotificationCompat.CATEGORY_MESSAGE);
-            if (photoPath != null) {
-                BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
-                if (img != null) {
-                    builder.setLargeIcon(img.getBitmap());
-                }
-            }
-
-            if (chat == null && user != null && user.phone != null && user.phone.length() > 0) {
-                builder.addPerson("tel:+" + user.phone);
-            }
-
-            notificationManager.notify(notificationIdWear, builder.build());
-            wearNotificationsIds.put(dialog_id, notificationIdWear);
-        }
-
-        for (HashMap.Entry<Long, Integer> entry : oldIdsAuto.entrySet()) {
-            notificationManager.cancel(entry.getValue());
-        }
-        for (HashMap.Entry<Long, Integer> entry : oldIdsWear.entrySet()) {
-            notificationManager.cancel(entry.getValue());
-        }
-    }
 
     private void dismissNotification() {
         try {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index a43f357ff..65c36d1ec 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -239,10 +239,14 @@ public void setLoadingPosts(boolean loadingPosts) {
         this.loadingPosts = loadingPosts;
     }
 
-    public User getUser(Integer id) {
+    public User getUser(String id) {
         return UserServiceMock.getRandomUser();
     }
 
+    public void setUser(User user) {
+//        return UserServiceMock.getRandomUser();
+    }
+
 //    public TLRPC.User getUser(Integer id) {
 //        return users.get(id);
 //    }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
deleted file mode 100644
index 5d793ea3d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/SecretChatHelper.java
+++ /dev/null
@@ -1,1788 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-
-import org.telegram.messenger.BuffersStorage;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.MessageKeyData;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLClassStore;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-
-import java.io.File;
-import java.math.BigInteger;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.concurrent.ConcurrentHashMap;
-
-public class SecretChatHelper {
-
-    public static final int CURRENT_SECRET_CHAT_LAYER = 23;
-
-    private ArrayList<Integer> sendingNotifyLayer = new ArrayList<>();
-    private HashMap<Integer, ArrayList<TLRPC.TL_decryptedMessageHolder>> secretHolesQueue = new HashMap<>();
-    private HashMap<Integer, TLRPC.EncryptedChat> acceptingChats = new HashMap<>();
-    public ArrayList<TLRPC.Update> delayedEncryptedChatUpdates = new ArrayList<>();
-    private ArrayList<Long> pendingEncMessagesToDelete = new ArrayList<>();
-    private boolean startingSecretChat = false;
-
-    private static volatile SecretChatHelper Instance = null;
-
-    public static SecretChatHelper getInstance() {
-        SecretChatHelper localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (SecretChatHelper.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new SecretChatHelper();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    public void cleanUp() {
-        sendingNotifyLayer.clear();
-        acceptingChats.clear();
-        secretHolesQueue.clear();
-        delayedEncryptedChatUpdates.clear();
-        pendingEncMessagesToDelete.clear();
-
-        startingSecretChat = false;
-    }
-
-    protected void processPendingEncMessages() {
-        if (!pendingEncMessagesToDelete.isEmpty()) {
-            ArrayList<Long> arr = new ArrayList<>(pendingEncMessagesToDelete);
-            MessagesStorage.getInstance().markMessagesAsDeletedByRandoms(arr);
-            pendingEncMessagesToDelete.clear();
-        }
-    }
-
-    private TLRPC.TL_messageService createServiceSecretMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.DecryptedMessageAction decryptedMessage) {
-        TLRPC.TL_messageService newMsg = new TLRPC.TL_messageService();
-
-        newMsg.action = new TLRPC.TL_messageEncryptedAction();
-        newMsg.action.encryptedAction = decryptedMessage;
-        newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-        newMsg.from_id = UserConfig.getClientUserId();
-        newMsg.flags = TLRPC.MESSAGE_FLAG_UNREAD | TLRPC.MESSAGE_FLAG_OUT;
-        newMsg.dialog_id = ((long) encryptedChat.id) << 32;
-        newMsg.to_id = new TLRPC.TL_peerUser();
-        newMsg.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
-        if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
-            newMsg.to_id.user_id = encryptedChat.admin_id;
-        } else {
-            newMsg.to_id.user_id = encryptedChat.participant_id;
-        }
-        if (decryptedMessage instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || decryptedMessage instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-            newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
-        } else {
-            newMsg.date = 0;
-        }
-        newMsg.random_id = SendMessagesHelper.getInstance().getNextRandomId();
-        UserConfig.saveConfig(false);
-
-        ArrayList<TLRPC.Message> arr = new ArrayList<>();
-        arr.add(newMsg);
-        MessagesStorage.getInstance().putMessages(arr, false, true, true, 0);
-
-        return newMsg;
-    }
-
-    public void sendMessagesReadMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionReadMessages();
-            reqSend.action.random_ids = random_ids;
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    protected void processUpdateEncryption(TLRPC.TL_updateEncryption update, ConcurrentHashMap<Integer, TLRPC.User> usersDict) {
-        final TLRPC.EncryptedChat newChat = update.chat;
-        long dialog_id = ((long) newChat.id) << 32;
-        TLRPC.EncryptedChat existingChat = MessagesController.getInstance().getEncryptedChatDB(newChat.id);
-
-        if (newChat instanceof TLRPC.TL_encryptedChatRequested && existingChat == null) {
-            int user_id = newChat.participant_id;
-            if (user_id == UserConfig.getClientUserId()) {
-                user_id = newChat.admin_id;
-            }
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            if (user == null) {
-                user = usersDict.get(user_id);
-            }
-            newChat.user_id = user_id;
-            final TLRPC.TL_dialog dialog = new TLRPC.TL_dialog();
-            dialog.id = dialog_id;
-            dialog.unread_count = 0;
-            dialog.top_message = 0;
-            dialog.last_message_date = update.date;
-
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    MessagesController.getInstance().dialogs_dict.put(dialog.id, dialog);
-                    MessagesController.getInstance().dialogs.add(dialog);
-                    MessagesController.getInstance().putEncryptedChat(newChat, false);
-                    Collections.sort(MessagesController.getInstance().dialogs, new Comparator<TLRPC.TL_dialog>() {
-                        @Override
-                        public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
-                            if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
-                                return 0;
-                            } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
-                                return 1;
-                            } else {
-                                return -1;
-                            }
-                        }
-                    });
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                }
-            });
-            MessagesStorage.getInstance().putEncryptedChat(newChat, user, dialog);
-            SecretChatHelper.getInstance().acceptSecretChat(newChat);
-        } else if (newChat instanceof TLRPC.TL_encryptedChat) {
-            if (existingChat != null && existingChat instanceof TLRPC.TL_encryptedChatWaiting && (existingChat.auth_key == null || existingChat.auth_key.length == 1)) {
-                newChat.a_or_b = existingChat.a_or_b;
-                newChat.user_id = existingChat.user_id;
-                SecretChatHelper.getInstance().processAcceptedSecretChat(newChat);
-            } else if (existingChat == null && startingSecretChat) {
-                delayedEncryptedChatUpdates.add(update);
-            }
-        } else {
-            final TLRPC.EncryptedChat exist = existingChat;
-            if (exist != null) {
-                newChat.user_id = exist.user_id;
-                newChat.auth_key = exist.auth_key;
-                newChat.key_create_date = exist.key_create_date;
-                newChat.key_use_count_in = exist.key_use_count_in;
-                newChat.key_use_count_out = exist.key_use_count_out;
-                newChat.ttl = exist.ttl;
-                newChat.seq_in = exist.seq_in;
-                newChat.seq_out = exist.seq_out;
-            }
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (exist != null) {
-                        MessagesController.getInstance().putEncryptedChat(newChat, false);
-                    }
-                    MessagesStorage.getInstance().updateEncryptedChat(newChat);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, newChat);
-                }
-            });
-        }
-    }
-
-    public void sendMessagesDeleteMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionDeleteMessages();
-            reqSend.action.random_ids = random_ids;
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionFlushHistory();
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendNotifyLayerMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-        if (sendingNotifyLayer.contains(encryptedChat.id)) {
-            return;
-        }
-        sendingNotifyLayer.add(encryptedChat.id);
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionNotifyLayer();
-            reqSend.action.layer = CURRENT_SECRET_CHAT_LAYER;
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendRequestKeyMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionRequestKey();
-            reqSend.action.exchange_id = encryptedChat.exchange_id;
-            reqSend.action.g_a = encryptedChat.g_a;
-
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendAcceptKeyMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionAcceptKey();
-            reqSend.action.exchange_id = encryptedChat.exchange_id;
-            reqSend.action.key_fingerprint = encryptedChat.future_key_fingerprint;
-            reqSend.action.g_b = encryptedChat.g_a_or_b;
-
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendCommitKeyMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionCommitKey();
-            reqSend.action.exchange_id = encryptedChat.exchange_id;
-            reqSend.action.key_fingerprint = encryptedChat.future_key_fingerprint;
-
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendAbortKeyMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage, long excange_id) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionAbortKey();
-            reqSend.action.exchange_id = excange_id;
-
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendNoopMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionNoop();
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionSetMessageTTL();
-            reqSend.action.ttl_seconds = encryptedChat.ttl;
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-
-            MessageObject newMsgObj = new MessageObject(message, null, false);
-            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
-            ArrayList<MessageObject> objArr = new ArrayList<>();
-            objArr.add(newMsgObj);
-            MessagesController.getInstance().updateInterfaceWithMessages(message.dialog_id, objArr);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<Long> random_ids, TLRPC.Message resendMessage) {
-        if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-
-        TLRPC.TL_decryptedMessageService reqSend;
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-            reqSend = new TLRPC.TL_decryptedMessageService();
-        } else {
-            reqSend = new TLRPC.TL_decryptedMessageService_old();
-            reqSend.random_bytes = new byte[15];
-            Utilities.random.nextBytes(reqSend.random_bytes);
-        }
-
-        TLRPC.Message message;
-
-        if (resendMessage != null) {
-            message = resendMessage;
-            reqSend.action = message.action.encryptedAction;
-        } else {
-            reqSend.action = new TLRPC.TL_decryptedMessageActionScreenshotMessages();
-            reqSend.action.random_ids = random_ids;
-            message = createServiceSecretMessage(encryptedChat, reqSend.action);
-
-            MessageObject newMsgObj = new MessageObject(message, null, false);
-            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
-            ArrayList<MessageObject> objArr = new ArrayList<>();
-            objArr.add(newMsgObj);
-            MessagesController.getInstance().updateInterfaceWithMessages(message.dialog_id, objArr);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-        }
-        reqSend.random_id = message.random_id;
-
-        performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
-    }
-
-    private void processSentMessage(TLRPC.Message newMsg, TLRPC.EncryptedFile file, TLRPC.DecryptedMessage decryptedMessage, String originalPath) {
-        if (file != null) {
-            if (newMsg.media instanceof TLRPC.TL_messageMediaPhoto && newMsg.media.photo != null) {
-                TLRPC.PhotoSize size = newMsg.media.photo.sizes.get(newMsg.media.photo.sizes.size() - 1);
-                String fileName = size.location.volume_id + "_" + size.location.local_id;
-                size.location = new TLRPC.TL_fileEncryptedLocation();
-                size.location.key = decryptedMessage.media.key;
-                size.location.iv = decryptedMessage.media.iv;
-                size.location.dc_id = file.dc_id;
-                size.location.volume_id = file.id;
-                size.location.secret = file.access_hash;
-                size.location.local_id = file.key_fingerprint;
-                String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
-                File cacheFile2 = FileLoader.getPathToAttach(size);
-                cacheFile.renameTo(cacheFile2);
-                ImageLoader.getInstance().replaceImageInCache(fileName, fileName2, size.location);
-                ArrayList<TLRPC.Message> arr = new ArrayList<>();
-                arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-
-                //MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.photo, 3);
-            } else if (newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
-                TLRPC.Video video = newMsg.media.video;
-                newMsg.media.video = new TLRPC.TL_videoEncrypted();
-                newMsg.media.video.duration = video.duration;
-                newMsg.media.video.thumb = video.thumb;
-                newMsg.media.video.dc_id = file.dc_id;
-                newMsg.media.video.w = video.w;
-                newMsg.media.video.h = video.h;
-                newMsg.media.video.date = video.date;
-                newMsg.media.caption = video.caption != null ? video.caption : "";
-                newMsg.media.video.user_id = video.user_id;
-                newMsg.media.video.size = file.size;
-                newMsg.media.video.id = file.id;
-                newMsg.media.video.access_hash = file.access_hash;
-                newMsg.media.video.key = decryptedMessage.media.key;
-                newMsg.media.video.iv = decryptedMessage.media.iv;
-                newMsg.media.video.mime_type = video.mime_type;
-                newMsg.media.video.caption = video.caption != null ? video.caption : "";
-
-                if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
-                    File cacheFile = new File(newMsg.attachPath);
-                    File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.video);
-                    if (cacheFile.renameTo(cacheFile2)) {
-                        newMsg.attachPath = "";
-                    }
-                }
-
-                ArrayList<TLRPC.Message> arr = new ArrayList<>();
-                arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-
-                //MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.video, 5);
-            } else if (newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
-                TLRPC.Document document = newMsg.media.document;
-                newMsg.media.document = new TLRPC.TL_documentEncrypted();
-                newMsg.media.document.id = file.id;
-                newMsg.media.document.access_hash = file.access_hash;
-                newMsg.media.document.date = document.date;
-                newMsg.media.document.attributes = document.attributes;
-                newMsg.media.document.mime_type = document.mime_type;
-                newMsg.media.document.size = file.size;
-                newMsg.media.document.key = decryptedMessage.media.key;
-                newMsg.media.document.iv = decryptedMessage.media.iv;
-                newMsg.media.document.thumb = document.thumb;
-                newMsg.media.document.dc_id = file.dc_id;
-
-                if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
-                    File cacheFile = new File(newMsg.attachPath);
-                    File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.document);
-                    if (cacheFile.renameTo(cacheFile2)) {
-                        newMsg.attachPath = "";
-                    }
-                }
-
-                ArrayList<TLRPC.Message> arr = new ArrayList<>();
-                arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-
-                //MessagesStorage.getInstance().putSentFile(originalPath, newMsg.media.document, 4);
-            } else if (newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
-                TLRPC.Audio audio = newMsg.media.audio;
-                newMsg.media.audio = new TLRPC.TL_audioEncrypted();
-                newMsg.media.audio.id = file.id;
-                newMsg.media.audio.access_hash = file.access_hash;
-                newMsg.media.audio.user_id = audio.user_id;
-                newMsg.media.audio.date = audio.date;
-                newMsg.media.audio.duration = audio.duration;
-                newMsg.media.audio.size = file.size;
-                newMsg.media.audio.dc_id = file.dc_id;
-                newMsg.media.audio.key = decryptedMessage.media.key;
-                newMsg.media.audio.iv = decryptedMessage.media.iv;
-                newMsg.media.audio.mime_type = audio.mime_type;
-
-                String fileName = audio.dc_id + "_" + audio.id + ".ogg";
-                String fileName2 = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".ogg";
-                if (!fileName.equals(fileName2)) {
-                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-                    File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.audio);
-                    if (cacheFile.renameTo(cacheFile2)) {
-                        newMsg.attachPath = "";
-                    }
-                }
-
-                ArrayList<TLRPC.Message> arr = new ArrayList<>();
-                arr.add(newMsg);
-                MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-            }
-        }
-    }
-
-    public static boolean isSecretVisibleMessage(TLRPC.Message message) {
-        return message.action instanceof TLRPC.TL_messageEncryptedAction && (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL);
-    }
-
-    public static boolean isSecretInvisibleMessage(TLRPC.Message message) {
-        return message.action instanceof TLRPC.TL_messageEncryptedAction && !(message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL);
-    }
-
-    protected void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final TLRPC.Message newMsgObj, final TLRPC.EncryptedChat chat, final TLRPC.InputEncryptedFile encryptedFile, final String originalPath) {
-        if (req == null || chat.auth_key == null || chat instanceof TLRPC.TL_encryptedChatRequested || chat instanceof TLRPC.TL_encryptedChatWaiting) {
-            return;
-        }
-        SendMessagesHelper.getInstance().putToSendingMessages(newMsgObj);
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                TLObject toEncryptObject;
-                if (AndroidUtilities.getPeerLayerVersion(chat.layer) >= 17) {
-                    TLRPC.TL_decryptedMessageLayer layer = new TLRPC.TL_decryptedMessageLayer();
-                    int myLayer = Math.max(17, AndroidUtilities.getMyLayerVersion(chat.layer));
-                    layer.layer = Math.min(myLayer, AndroidUtilities.getPeerLayerVersion(chat.layer));
-                    layer.message = req;
-                    layer.random_bytes = new byte[15];
-                    Utilities.random.nextBytes(layer.random_bytes);
-                    toEncryptObject = layer;
-
-                    if (chat.seq_in == 0 && chat.seq_out == 0) {
-                        if (chat.admin_id == UserConfig.getClientUserId()) {
-                            chat.seq_out = 1;
-                        } else {
-                            chat.seq_in = 1;
-                        }
-                    }
-
-                    if (newMsgObj.seq_in == 0 && newMsgObj.seq_out == 0) {
-                        layer.in_seq_no = chat.seq_in;
-                        layer.out_seq_no = chat.seq_out;
-                        chat.seq_out += 2;
-                        if (AndroidUtilities.getPeerLayerVersion(chat.layer) >= 20) {
-                            if (chat.key_create_date == 0) {
-                                chat.key_create_date = ConnectionsManager.getInstance().getCurrentTime();
-                            }
-                            chat.key_use_count_out++;
-                            if ((chat.key_use_count_out >= 100 || chat.key_create_date < ConnectionsManager.getInstance().getCurrentTime() - 60 * 60 * 24 * 7) && chat.exchange_id == 0 && chat.future_key_fingerprint == 0) {
-                                requestNewSecretChatKey(chat);
-                            }
-                        }
-                        MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
-                        if (newMsgObj != null) {
-                            newMsgObj.seq_in = layer.in_seq_no;
-                            newMsgObj.seq_out = layer.out_seq_no;
-                            MessagesStorage.getInstance().setMessageSeq(newMsgObj.id, newMsgObj.seq_in, newMsgObj.seq_out);
-                        }
-                    } else {
-                        layer.in_seq_no = newMsgObj.seq_in;
-                        layer.out_seq_no = newMsgObj.seq_out;
-                    }
-                    FileLog.e("tmessages", req + " send message with in_seq = " + layer.in_seq_no + " out_seq = " + layer.out_seq_no);
-                } else {
-                    toEncryptObject = req;
-                }
-
-
-                int len = toEncryptObject.getObjectSize();
-                ByteBufferDesc toEncrypt = BuffersStorage.getInstance().getFreeBuffer(4 + len);
-                toEncrypt.writeInt32(len);
-                toEncryptObject.serializeToStream(toEncrypt);
-
-                byte[] messageKeyFull = Utilities.computeSHA1(toEncrypt.buffer);
-                byte[] messageKey = new byte[16];
-                System.arraycopy(messageKeyFull, messageKeyFull.length - 16, messageKey, 0, 16);
-
-                MessageKeyData keyData = MessageKeyData.generateMessageKeyData(chat.auth_key, messageKey, false);
-
-                len = toEncrypt.length();
-                int extraLen = len % 16 != 0 ? 16 - len % 16 : 0;
-                ByteBufferDesc dataForEncryption = BuffersStorage.getInstance().getFreeBuffer(len + extraLen);
-                toEncrypt.position(0);
-                dataForEncryption.writeRaw(toEncrypt);
-                if (extraLen != 0) {
-                    byte[] b = new byte[extraLen];
-                    Utilities.random.nextBytes(b);
-                    dataForEncryption.writeRaw(b);
-                }
-                BuffersStorage.getInstance().reuseFreeBuffer(toEncrypt);
-
-                Utilities.aesIgeEncryption(dataForEncryption.buffer, keyData.aesKey, keyData.aesIv, true, false, 0, dataForEncryption.limit());
-
-                ByteBufferDesc data = BuffersStorage.getInstance().getFreeBuffer(8 + messageKey.length + dataForEncryption.length());
-                dataForEncryption.position(0);
-                data.writeInt64(chat.key_fingerprint);
-                data.writeRaw(messageKey);
-                data.writeRaw(dataForEncryption);
-                BuffersStorage.getInstance().reuseFreeBuffer(dataForEncryption);
-                data.position(0);
-
-                TLObject reqToSend;
-
-                if (encryptedFile == null) {
-                    if (req instanceof TLRPC.TL_decryptedMessageService) {
-                        TLRPC.TL_messages_sendEncryptedService req2 = new TLRPC.TL_messages_sendEncryptedService();
-                        req2.data = data;
-                        req2.random_id = req.random_id;
-                        req2.peer = new TLRPC.TL_inputEncryptedChat();
-                        req2.peer.chat_id = chat.id;
-                        req2.peer.access_hash = chat.access_hash;
-                        reqToSend = req2;
-                    } else {
-                        TLRPC.TL_messages_sendEncrypted req2 = new TLRPC.TL_messages_sendEncrypted();
-                        req2.data = data;
-                        req2.random_id = req.random_id;
-                        req2.peer = new TLRPC.TL_inputEncryptedChat();
-                        req2.peer.chat_id = chat.id;
-                        req2.peer.access_hash = chat.access_hash;
-                        reqToSend = req2;
-                    }
-                } else {
-                    TLRPC.TL_messages_sendEncryptedFile req2 = new TLRPC.TL_messages_sendEncryptedFile();
-                    req2.data = data;
-                    req2.random_id = req.random_id;
-                    req2.peer = new TLRPC.TL_inputEncryptedChat();
-                    req2.peer.chat_id = chat.id;
-                    req2.peer.access_hash = chat.access_hash;
-                    req2.file = encryptedFile;
-                    reqToSend = req2;
-                }
-                ConnectionsManager.getInstance().performRpc(reqToSend, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        if (error == null) {
-                            if (req.action instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
-                                TLRPC.EncryptedChat currentChat = MessagesController.getInstance().getEncryptedChat(chat.id);
-                                sendingNotifyLayer.remove((Integer) currentChat.id);
-                                currentChat.layer = AndroidUtilities.setMyLayerVersion(currentChat.layer, CURRENT_SECRET_CHAT_LAYER);
-                                MessagesStorage.getInstance().updateEncryptedChatLayer(currentChat);
-                            }
-                        }
-                        if (newMsgObj != null) {
-                            if (error == null) {
-                                final String attachPath = newMsgObj.attachPath;
-                                final TLRPC.messages_SentEncryptedMessage res = (TLRPC.messages_SentEncryptedMessage) response;
-                                if (isSecretVisibleMessage(newMsgObj)) {
-                                    newMsgObj.date = res.date;
-                                }
-                                if (res.file instanceof TLRPC.TL_encryptedFile) {
-                                    processSentMessage(newMsgObj, res.file, req, originalPath);
-                                }
-                                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        if (isSecretInvisibleMessage(newMsgObj)) {
-                                            res.date = 0;
-                                        }
-                                        MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, newMsgObj.id, newMsgObj.id, res.date, false);
-                                        AndroidUtilities.runOnUIThread(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, newMsgObj.id, newMsgObj.id, newMsgObj, false);
-                                                SendMessagesHelper.getInstance().processSentMessage(newMsgObj.id);
-                                                if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                                    SendMessagesHelper.getInstance().stopVideoService(attachPath);
-                                                }
-                                                SendMessagesHelper.getInstance().removeFromSendingMessages(newMsgObj.id);
-                                            }
-                                        });
-                                    }
-                                });
-                            } else {
-                                MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
-                                        SendMessagesHelper.getInstance().processSentMessage(newMsgObj.id);
-                                        if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                            SendMessagesHelper.getInstance().stopVideoService(newMsgObj.attachPath);
-                                        }
-                                        SendMessagesHelper.getInstance().removeFromSendingMessages(newMsgObj.id);
-                                    }
-                                });
-                            }
-                        }
-                    }
-                });
-            }
-        });
-    }
-
-    public TLRPC.Message processDecryptedObject(final TLRPC.EncryptedChat chat, final TLRPC.EncryptedFile file, int date, long random_id, TLObject object, boolean new_key_used) {
-        if (object != null) {
-            int from_id = chat.admin_id;
-            if (from_id == UserConfig.getClientUserId()) {
-                from_id = chat.participant_id;
-            }
-
-            if (AndroidUtilities.getPeerLayerVersion(chat.layer) >= 20 && chat.exchange_id == 0 && chat.future_key_fingerprint == 0 && chat.key_use_count_in >= 120) {
-                requestNewSecretChatKey(chat);
-            }
-
-            if (chat.exchange_id == 0 && chat.future_key_fingerprint != 0 && !new_key_used) {
-                chat.future_auth_key = new byte[256];
-                chat.future_key_fingerprint = 0;
-                MessagesStorage.getInstance().updateEncryptedChat(chat);
-            } else if (chat.exchange_id != 0 && new_key_used) {
-                chat.key_fingerprint = chat.future_key_fingerprint;
-                chat.auth_key = chat.future_auth_key;
-                chat.key_create_date = ConnectionsManager.getInstance().getCurrentTime();
-                chat.future_auth_key = new byte[256];
-                chat.future_key_fingerprint = 0;
-                chat.key_use_count_in = 0;
-                chat.key_use_count_out = 0;
-                chat.exchange_id = 0;
-
-                MessagesStorage.getInstance().updateEncryptedChat(chat);
-            }
-
-            if (object instanceof TLRPC.TL_decryptedMessage) {
-                TLRPC.TL_decryptedMessage decryptedMessage = (TLRPC.TL_decryptedMessage) object;
-                TLRPC.TL_message newMessage;
-                if (AndroidUtilities.getPeerLayerVersion(chat.layer) >= 17) {
-                    newMessage = new TLRPC.TL_message_secret();
-                    newMessage.ttl = decryptedMessage.ttl;
-                } else {
-                    newMessage = new TLRPC.TL_message();
-                    newMessage.ttl = chat.ttl;
-                }
-                newMessage.message = decryptedMessage.message;
-                newMessage.date = date;
-                newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
-                UserConfig.saveConfig(false);
-                newMessage.from_id = from_id;
-                newMessage.to_id = new TLRPC.TL_peerUser();
-                newMessage.random_id = random_id;
-                newMessage.to_id.user_id = UserConfig.getClientUserId();
-                newMessage.flags = TLRPC.MESSAGE_FLAG_UNREAD;
-                newMessage.dialog_id = ((long) chat.id) << 32;
-                if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaEmpty) {
-                    newMessage.media = new TLRPC.TL_messageMediaEmpty();
-                } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaContact) {
-                    newMessage.media = new TLRPC.TL_messageMediaContact();
-                    newMessage.media.last_name = decryptedMessage.media.last_name;
-                    newMessage.media.first_name = decryptedMessage.media.first_name;
-                    newMessage.media.phone_number = decryptedMessage.media.phone_number;
-                    newMessage.media.user_id = decryptedMessage.media.user_id;
-                } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaGeoPoint) {
-                    newMessage.media = new TLRPC.TL_messageMediaGeo();
-                    newMessage.media.geo = new TLRPC.TL_geoPoint();
-                    newMessage.media.geo.lat = decryptedMessage.media.lat;
-                    newMessage.media.geo._long = decryptedMessage.media._long;
-                } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaPhoto) {
-                    if (decryptedMessage.media.key == null || decryptedMessage.media.key.length != 32 || decryptedMessage.media.iv == null || decryptedMessage.media.iv.length != 32) {
-                        return null;
-                    }
-                    newMessage.media = new TLRPC.TL_messageMediaPhoto();
-                    newMessage.media.caption = "";
-                    newMessage.media.photo = new TLRPC.TL_photo();
-                    newMessage.media.photo.user_id = newMessage.from_id;
-                    newMessage.media.photo.date = newMessage.date;
-                    newMessage.media.photo.geo = new TLRPC.TL_geoPointEmpty();
-                    byte[] thumb = ((TLRPC.TL_decryptedMessageMediaPhoto) decryptedMessage.media).thumb;
-                    if (thumb != null && thumb.length != 0 && thumb.length <= 6000 && decryptedMessage.media.thumb_w <= 100 && decryptedMessage.media.thumb_h <= 100) {
-                        TLRPC.TL_photoCachedSize small = new TLRPC.TL_photoCachedSize();
-                        small.w = decryptedMessage.media.thumb_w;
-                        small.h = decryptedMessage.media.thumb_h;
-                        small.bytes = thumb;
-                        small.type = "s";
-                        small.location = new TLRPC.TL_fileLocationUnavailable();
-                        newMessage.media.photo.sizes.add(small);
-                    }
-
-                    TLRPC.TL_photoSize big = new TLRPC.TL_photoSize();
-                    big.w = decryptedMessage.media.w;
-                    big.h = decryptedMessage.media.h;
-                    big.type = "x";
-                    big.size = file.size;
-                    big.location = new TLRPC.TL_fileEncryptedLocation();
-                    big.location.key = decryptedMessage.media.key;
-                    big.location.iv = decryptedMessage.media.iv;
-                    big.location.dc_id = file.dc_id;
-                    big.location.volume_id = file.id;
-                    big.location.secret = file.access_hash;
-                    big.location.local_id = file.key_fingerprint;
-                    newMessage.media.photo.sizes.add(big);
-                } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaVideo) {
-                    if (decryptedMessage.media.key == null || decryptedMessage.media.key.length != 32 || decryptedMessage.media.iv == null || decryptedMessage.media.iv.length != 32) {
-                        return null;
-                    }
-                    newMessage.media = new TLRPC.TL_messageMediaVideo();
-                    newMessage.media.caption = "";
-                    newMessage.media.video = new TLRPC.TL_videoEncrypted();
-                    byte[] thumb = ((TLRPC.TL_decryptedMessageMediaVideo) decryptedMessage.media).thumb;
-                    if (thumb != null && thumb.length != 0 && thumb.length <= 6000 && decryptedMessage.media.thumb_w <= 100 && decryptedMessage.media.thumb_h <= 100) {
-                        newMessage.media.video.thumb = new TLRPC.TL_photoCachedSize();
-                        newMessage.media.video.thumb.bytes = thumb;
-                        newMessage.media.video.thumb.w = decryptedMessage.media.thumb_w;
-                        newMessage.media.video.thumb.h = decryptedMessage.media.thumb_h;
-                        newMessage.media.video.thumb.type = "s";
-                        newMessage.media.video.thumb.location = new TLRPC.TL_fileLocationUnavailable();
-                    } else {
-                        newMessage.media.video.thumb = new TLRPC.TL_photoSizeEmpty();
-                        newMessage.media.video.thumb.type = "s";
-                    }
-                    newMessage.media.video.duration = decryptedMessage.media.duration;
-                    newMessage.media.video.dc_id = file.dc_id;
-                    newMessage.media.video.w = decryptedMessage.media.w;
-                    newMessage.media.video.h = decryptedMessage.media.h;
-                    newMessage.media.video.date = date;
-                    newMessage.media.video.user_id = from_id;
-                    newMessage.media.video.size = file.size;
-                    newMessage.media.video.id = file.id;
-                    newMessage.media.video.access_hash = file.access_hash;
-                    newMessage.media.video.key = decryptedMessage.media.key;
-                    newMessage.media.video.iv = decryptedMessage.media.iv;
-                    newMessage.media.video.mime_type = decryptedMessage.media.mime_type;
-                    newMessage.media.video.caption = "";
-                    if (newMessage.ttl != 0) {
-                        newMessage.ttl = Math.max(newMessage.media.video.duration + 1, newMessage.ttl);
-                    }
-                    if (newMessage.media.video.mime_type == null) {
-                        newMessage.media.video.mime_type = "video/mp4";
-                    }
-                } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaDocument) {
-                    if (decryptedMessage.media.key == null || decryptedMessage.media.key.length != 32 || decryptedMessage.media.iv == null || decryptedMessage.media.iv.length != 32) {
-                        return null;
-                    }
-                    newMessage.media = new TLRPC.TL_messageMediaDocument();
-                    newMessage.media.document = new TLRPC.TL_documentEncrypted();
-                    newMessage.media.document.id = file.id;
-                    newMessage.media.document.access_hash = file.access_hash;
-                    newMessage.media.document.date = date;
-                    TLRPC.TL_documentAttributeFilename fileName = new TLRPC.TL_documentAttributeFilename();
-                    fileName.file_name = decryptedMessage.media.file_name;
-                    newMessage.media.document.attributes.add(fileName);
-                    newMessage.media.document.mime_type = decryptedMessage.media.mime_type;
-                    newMessage.media.document.size = file.size;
-                    newMessage.media.document.key = decryptedMessage.media.key;
-                    newMessage.media.document.iv = decryptedMessage.media.iv;
-                    byte[] thumb = ((TLRPC.TL_decryptedMessageMediaDocument) decryptedMessage.media).thumb;
-                    if (thumb != null && thumb.length != 0 && thumb.length <= 6000 && decryptedMessage.media.thumb_w <= 100 && decryptedMessage.media.thumb_h <= 100) {
-                        newMessage.media.document.thumb = new TLRPC.TL_photoCachedSize();
-                        newMessage.media.document.thumb.bytes = thumb;
-                        newMessage.media.document.thumb.w = decryptedMessage.media.thumb_w;
-                        newMessage.media.document.thumb.h = decryptedMessage.media.thumb_h;
-                        newMessage.media.document.thumb.type = "s";
-                        newMessage.media.document.thumb.location = new TLRPC.TL_fileLocationUnavailable();
-                    } else {
-                        newMessage.media.document.thumb = new TLRPC.TL_photoSizeEmpty();
-                        newMessage.media.document.thumb.type = "s";
-                    }
-                    newMessage.media.document.dc_id = file.dc_id;
-                } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaExternalDocument) {
-                    newMessage.media = new TLRPC.TL_messageMediaDocument();
-                    newMessage.media.document = new TLRPC.TL_document();
-                    newMessage.media.document.id = decryptedMessage.media.id;
-                    newMessage.media.document.access_hash = decryptedMessage.media.access_hash;
-                    newMessage.media.document.date = decryptedMessage.media.date;
-                    newMessage.media.document.attributes = decryptedMessage.media.attributes;
-                    newMessage.media.document.mime_type = decryptedMessage.media.mime_type;
-                    newMessage.media.document.dc_id = decryptedMessage.media.dc_id;
-                    newMessage.media.document.size = decryptedMessage.media.size;
-                    newMessage.media.document.thumb = ((TLRPC.TL_decryptedMessageMediaExternalDocument) decryptedMessage.media).thumb;
-                } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaAudio) {
-                    if (decryptedMessage.media.key == null || decryptedMessage.media.key.length != 32 || decryptedMessage.media.iv == null || decryptedMessage.media.iv.length != 32) {
-                        return null;
-                    }
-                    newMessage.media = new TLRPC.TL_messageMediaAudio();
-                    newMessage.media.audio = new TLRPC.TL_audioEncrypted();
-                    newMessage.media.audio.id = file.id;
-                    newMessage.media.audio.access_hash = file.access_hash;
-                    newMessage.media.audio.user_id = from_id;
-                    newMessage.media.audio.date = date;
-                    newMessage.media.audio.size = file.size;
-                    newMessage.media.audio.key = decryptedMessage.media.key;
-                    newMessage.media.audio.iv = decryptedMessage.media.iv;
-                    newMessage.media.audio.dc_id = file.dc_id;
-                    newMessage.media.audio.duration = decryptedMessage.media.duration;
-                    newMessage.media.audio.mime_type = decryptedMessage.media.mime_type;
-                    if (newMessage.ttl != 0) {
-                        newMessage.ttl = Math.max(newMessage.media.audio.duration + 1, newMessage.ttl);
-                    }
-                    if (newMessage.media.audio.mime_type == null) {
-                        newMessage.media.audio.mime_type = "audio/ogg";
-                    }
-                } else {
-                    return null;
-                }
-                return newMessage;
-            } else if (object instanceof TLRPC.TL_decryptedMessageService) {
-                final TLRPC.TL_decryptedMessageService serviceMessage = (TLRPC.TL_decryptedMessageService) object;
-                if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL || serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
-                    TLRPC.TL_messageService newMessage = new TLRPC.TL_messageService();
-                    if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                        newMessage.action = new TLRPC.TL_messageEncryptedAction();
-                        if (serviceMessage.action.ttl_seconds < 0 || serviceMessage.action.ttl_seconds > 60 * 60 * 24 * 365) {
-                            serviceMessage.action.ttl_seconds = 60 * 60 * 24 * 365;
-                        }
-                        chat.ttl = serviceMessage.action.ttl_seconds;
-                        newMessage.action.encryptedAction = serviceMessage.action;
-                        MessagesStorage.getInstance().updateEncryptedChatTTL(chat);
-                    } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
-                        newMessage.action = new TLRPC.TL_messageEncryptedAction();
-                        newMessage.action.encryptedAction = serviceMessage.action;
-                    }
-                    newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
-                    UserConfig.saveConfig(false);
-                    newMessage.flags = TLRPC.MESSAGE_FLAG_UNREAD;
-                    newMessage.date = date;
-                    newMessage.from_id = from_id;
-                    newMessage.to_id = new TLRPC.TL_peerUser();
-                    newMessage.to_id.user_id = UserConfig.getClientUserId();
-                    newMessage.dialog_id = ((long) chat.id) << 32;
-                    return newMessage;
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
-                    final long did = ((long) chat.id) << 32;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(did);
-                            if (dialog != null) {
-                                dialog.unread_count = 0;
-                                MessagesController.getInstance().dialogMessage.remove(dialog.top_message);
-                            }
-                            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                                @Override
-                                public void run() {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
-                                            HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-                                            dialogsToUpdate.put(did, 0);
-                                            NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-                                        }
-                                    });
-                                }
-                            });
-                            MessagesStorage.getInstance().deleteDialog(did, true);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, did);
-                        }
-                    });
-                    return null;
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionDeleteMessages) {
-                    if (!serviceMessage.action.random_ids.isEmpty()) {
-                        pendingEncMessagesToDelete.addAll(serviceMessage.action.random_ids);
-                    }
-                    return null;
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionReadMessages) {
-                    if (!serviceMessage.action.random_ids.isEmpty()) {
-                        MessagesStorage.getInstance().createTaskForSecretChat(chat.id, ConnectionsManager.getInstance().getCurrentTime(), ConnectionsManager.getInstance().getCurrentTime(), 1, serviceMessage.action.random_ids);
-                    }
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
-                    int currentPeerLayer = AndroidUtilities.getPeerLayerVersion(chat.layer);
-                    chat.layer = AndroidUtilities.setPeerLayerVersion(chat.layer, serviceMessage.action.layer);
-                    MessagesStorage.getInstance().updateEncryptedChatLayer(chat);
-                    if (currentPeerLayer < CURRENT_SECRET_CHAT_LAYER) {
-                        sendNotifyLayerMessage(chat, null);
-                    }
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionRequestKey) {
-                    if (chat.exchange_id != 0) {
-                        if (chat.exchange_id > serviceMessage.action.exchange_id) {
-                            FileLog.e("tmessages", "we already have request key with higher exchange_id");
-                            return null;
-                        } else {
-                            sendAbortKeyMessage(chat, null, chat.exchange_id);
-                        }
-                    }
-
-                    byte[] salt = new byte[256];
-                    Utilities.random.nextBytes(salt);
-                    BigInteger p = new BigInteger(1, MessagesStorage.secretPBytes);
-                    BigInteger g_b = BigInteger.valueOf(MessagesStorage.secretG);
-                    g_b = g_b.modPow(new BigInteger(1, salt), p);
-                    BigInteger g_a = new BigInteger(1, serviceMessage.action.g_a);
-
-                    if (!Utilities.isGoodGaAndGb(g_a, p)) {
-                        sendAbortKeyMessage(chat, null, serviceMessage.action.exchange_id);
-                        return null;
-                    }
-
-                    byte[] g_b_bytes = g_b.toByteArray();
-                    if (g_b_bytes.length > 256) {
-                        byte[] correctedAuth = new byte[256];
-                        System.arraycopy(g_b_bytes, 1, correctedAuth, 0, 256);
-                        g_b_bytes = correctedAuth;
-                    }
-
-                    g_a = g_a.modPow(new BigInteger(1, salt), p);
-
-                    byte[] authKey = g_a.toByteArray();
-                    if (authKey.length > 256) {
-                        byte[] correctedAuth = new byte[256];
-                        System.arraycopy(authKey, authKey.length - 256, correctedAuth, 0, 256);
-                        authKey = correctedAuth;
-                    } else if (authKey.length < 256) {
-                        byte[] correctedAuth = new byte[256];
-                        System.arraycopy(authKey, 0, correctedAuth, 256 - authKey.length, authKey.length);
-                        for (int a = 0; a < 256 - authKey.length; a++) {
-                            authKey[a] = 0;
-                        }
-                        authKey = correctedAuth;
-                    }
-                    byte[] authKeyHash = Utilities.computeSHA1(authKey);
-                    byte[] authKeyId = new byte[8];
-                    System.arraycopy(authKeyHash, authKeyHash.length - 8, authKeyId, 0, 8);
-
-                    chat.exchange_id = serviceMessage.action.exchange_id;
-                    chat.future_auth_key = authKey;
-                    chat.future_key_fingerprint = Utilities.bytesToLong(authKeyId);
-                    chat.g_a_or_b = g_b_bytes;
-
-                    MessagesStorage.getInstance().updateEncryptedChat(chat);
-
-                    sendAcceptKeyMessage(chat, null);
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionAcceptKey) {
-                    if (chat.exchange_id == serviceMessage.action.exchange_id) {
-
-                        BigInteger p = new BigInteger(1, MessagesStorage.secretPBytes);
-                        BigInteger i_authKey = new BigInteger(1, serviceMessage.action.g_b);
-
-                        if (!Utilities.isGoodGaAndGb(i_authKey, p)) {
-                            chat.future_auth_key = new byte[256];
-                            chat.future_key_fingerprint = 0;
-                            chat.exchange_id = 0;
-                            MessagesStorage.getInstance().updateEncryptedChat(chat);
-
-                            sendAbortKeyMessage(chat, null, serviceMessage.action.exchange_id);
-                            return null;
-                        }
-
-                        i_authKey = i_authKey.modPow(new BigInteger(1, chat.a_or_b), p);
-
-                        byte[] authKey = i_authKey.toByteArray();
-                        if (authKey.length > 256) {
-                            byte[] correctedAuth = new byte[256];
-                            System.arraycopy(authKey, authKey.length - 256, correctedAuth, 0, 256);
-                            authKey = correctedAuth;
-                        } else if (authKey.length < 256) {
-                            byte[] correctedAuth = new byte[256];
-                            System.arraycopy(authKey, 0, correctedAuth, 256 - authKey.length, authKey.length);
-                            for (int a = 0; a < 256 - authKey.length; a++) {
-                                authKey[a] = 0;
-                            }
-                            authKey = correctedAuth;
-                        }
-                        byte[] authKeyHash = Utilities.computeSHA1(authKey);
-                        byte[] authKeyId = new byte[8];
-                        System.arraycopy(authKeyHash, authKeyHash.length - 8, authKeyId, 0, 8);
-                        long fingerprint = Utilities.bytesToLong(authKeyId);
-                        if (serviceMessage.action.key_fingerprint == fingerprint) {
-                            chat.future_auth_key = authKey;
-                            chat.future_key_fingerprint = fingerprint;
-                            MessagesStorage.getInstance().updateEncryptedChat(chat);
-                            sendCommitKeyMessage(chat, null);
-                        } else {
-                            chat.future_auth_key = new byte[256];
-                            chat.future_key_fingerprint = 0;
-                            chat.exchange_id = 0;
-                            MessagesStorage.getInstance().updateEncryptedChat(chat);
-                            sendAbortKeyMessage(chat, null, serviceMessage.action.exchange_id);
-                        }
-                    } else {
-                        chat.future_auth_key = new byte[256];
-                        chat.future_key_fingerprint = 0;
-                        chat.exchange_id = 0;
-                        MessagesStorage.getInstance().updateEncryptedChat(chat);
-                        sendAbortKeyMessage(chat, null, serviceMessage.action.exchange_id);
-                    }
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionCommitKey) {
-                    if (chat.exchange_id == serviceMessage.action.exchange_id && chat.future_key_fingerprint == serviceMessage.action.key_fingerprint) {
-                        long old_fingerpring = chat.key_fingerprint;
-                        byte[] old_key = chat.auth_key;
-                        chat.key_fingerprint = chat.future_key_fingerprint;
-                        chat.auth_key = chat.future_auth_key;
-                        chat.key_create_date = ConnectionsManager.getInstance().getCurrentTime();
-                        chat.future_auth_key = old_key;
-                        chat.future_key_fingerprint = old_fingerpring;
-                        chat.key_use_count_in = 0;
-                        chat.key_use_count_out = 0;
-                        chat.exchange_id = 0;
-
-                        MessagesStorage.getInstance().updateEncryptedChat(chat);
-
-                        sendNoopMessage(chat, null);
-                    } else {
-                        chat.future_auth_key = new byte[256];
-                        chat.future_key_fingerprint = 0;
-                        chat.exchange_id = 0;
-                        MessagesStorage.getInstance().updateEncryptedChat(chat);
-                        sendAbortKeyMessage(chat, null, serviceMessage.action.exchange_id);
-                    }
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionAbortKey) {
-                    if (chat.exchange_id == serviceMessage.action.exchange_id) {
-                        chat.future_auth_key = new byte[256];
-                        chat.future_key_fingerprint = 0;
-                        chat.exchange_id = 0;
-                        MessagesStorage.getInstance().updateEncryptedChat(chat);
-                    }
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionNoop) {
-                    //do nothing
-                } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionResend) {
-
-                } else {
-                    return null;
-                }
-            } else {
-                FileLog.e("tmessages", "unknown message " + object);
-            }
-        } else {
-            FileLog.e("tmessages", "unknown TLObject");
-        }
-        return null;
-    }
-
-    public void checkSecretHoles(TLRPC.EncryptedChat chat, ArrayList<TLRPC.Message> messages) {
-        ArrayList<TLRPC.TL_decryptedMessageHolder> holes = secretHolesQueue.get(chat.id);
-        if (holes == null) {
-            return;
-        }
-        Collections.sort(holes, new Comparator<TLRPC.TL_decryptedMessageHolder>() {
-            @Override
-            public int compare(TLRPC.TL_decryptedMessageHolder lhs, TLRPC.TL_decryptedMessageHolder rhs) {
-                if (lhs.layer.out_seq_no > rhs.layer.out_seq_no) {
-                    return 1;
-                } else if (lhs.layer.out_seq_no < rhs.layer.out_seq_no) {
-                    return -1;
-                }
-                return 0;
-            }
-        });
-
-        boolean update = false;
-        for (int a = 0; a < holes.size(); a++) {
-            TLRPC.TL_decryptedMessageHolder holder = holes.get(a);
-            if (holder.layer.out_seq_no == chat.seq_in || chat.seq_in == holder.layer.out_seq_no - 2) {
-                chat.seq_in = holder.layer.out_seq_no;
-                holes.remove(a);
-                a--;
-                update = true;
-
-                TLRPC.Message message = processDecryptedObject(chat, holder.file, holder.date, holder.random_id, holder.layer.message, holder.new_key_used);
-                if (message != null) {
-                    messages.add(message);
-                }
-            } else {
-                break;
-            }
-        }
-        if (holes.isEmpty()) {
-            secretHolesQueue.remove(chat.id);
-        }
-        if (update) {
-            MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
-        }
-    }
-
-    protected ArrayList<TLRPC.Message> decryptMessage(TLRPC.EncryptedMessage message) {
-        final TLRPC.EncryptedChat chat = MessagesController.getInstance().getEncryptedChatDB(message.chat_id);
-        if (chat == null || chat instanceof TLRPC.TL_encryptedChatDiscarded) {
-            return null;
-        }
-
-        ByteBufferDesc is = BuffersStorage.getInstance().getFreeBuffer(message.bytes.length);
-        is.writeRaw(message.bytes);
-        is.position(0);
-        long fingerprint = is.readInt64(false);
-        byte[] keyToDecrypt = null;
-        boolean new_key_used = false;
-        if (chat.key_fingerprint == fingerprint) {
-            keyToDecrypt = chat.auth_key;
-        } else if (chat.future_key_fingerprint != 0 && chat.future_key_fingerprint == fingerprint) {
-            keyToDecrypt = chat.future_auth_key;
-            new_key_used = true;
-        }
-
-        if (keyToDecrypt != null) {
-            byte[] messageKey = is.readData(16, false);
-            MessageKeyData keyData = MessageKeyData.generateMessageKeyData(keyToDecrypt, messageKey, false);
-
-            Utilities.aesIgeEncryption(is.buffer, keyData.aesKey, keyData.aesIv, false, false, 24, is.limit() - 24);
-
-            int len = is.readInt32(false);
-            if (len < 0 || len > is.limit() - 28) {
-                return null;
-            }
-            byte[] messageKeyFull = Utilities.computeSHA1(is.buffer, 24, Math.min(len + 4 + 24, is.buffer.limit()));
-            if (!Utilities.arraysEquals(messageKey, 0, messageKeyFull, messageKeyFull.length - 16)) {
-                return null;
-            }
-
-            TLObject object = TLClassStore.Instance().TLdeserialize(is, is.readInt32(false), false);
-
-            BuffersStorage.getInstance().reuseFreeBuffer(is);
-            if (!new_key_used && AndroidUtilities.getPeerLayerVersion(chat.layer) >= 20) {
-                chat.key_use_count_in++;
-            }
-            if (object instanceof TLRPC.TL_decryptedMessageLayer) {
-                final TLRPC.TL_decryptedMessageLayer layer = (TLRPC.TL_decryptedMessageLayer) object;
-                if (chat.seq_in == 0 && chat.seq_out == 0) {
-                    if (chat.admin_id == UserConfig.getClientUserId()) {
-                        chat.seq_out = 1;
-                    } else {
-                        chat.seq_in = 1;
-                    }
-                }
-                FileLog.e("tmessages", "current chat in_seq = " + chat.seq_in + " out_seq = " + chat.seq_out);
-                FileLog.e("tmessages", "got message with in_seq = " + layer.in_seq_no + " out_seq = " + layer.out_seq_no);
-                if (layer.out_seq_no < chat.seq_in) {
-                    return null;
-                }
-                if (chat.seq_in != layer.out_seq_no && chat.seq_in != layer.out_seq_no - 2) {
-                    FileLog.e("tmessages", "got hole");
-                    ArrayList<TLRPC.TL_decryptedMessageHolder> arr = secretHolesQueue.get(chat.id);
-                    if (arr == null) {
-                        arr = new ArrayList<>();
-                        secretHolesQueue.put(chat.id, arr);
-                    }
-                    if (arr.size() >= 10) {
-                        secretHolesQueue.remove(chat.id);
-                        final TLRPC.TL_encryptedChatDiscarded newChat = new TLRPC.TL_encryptedChatDiscarded();
-                        newChat.id = chat.id;
-                        newChat.user_id = chat.user_id;
-                        newChat.auth_key = chat.auth_key;
-                        newChat.key_create_date = chat.key_create_date;
-                        newChat.key_use_count_in = chat.key_use_count_in;
-                        newChat.key_use_count_out = chat.key_use_count_out;
-                        newChat.seq_in = chat.seq_in;
-                        newChat.seq_out = chat.seq_out;
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                MessagesController.getInstance().putEncryptedChat(newChat, false);
-                                MessagesStorage.getInstance().updateEncryptedChat(newChat);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, newChat);
-                            }
-                        });
-                        declineSecretChat(chat.id);
-                        return null;
-                    }
-
-                    TLRPC.TL_decryptedMessageHolder holder = new TLRPC.TL_decryptedMessageHolder();
-                    holder.layer = layer;
-                    holder.file = message.file;
-                    holder.random_id = message.random_id;
-                    holder.date = message.date;
-                    holder.new_key_used = new_key_used;
-                    arr.add(holder);
-                    return null;
-                }
-                chat.seq_in = layer.out_seq_no;
-                MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
-                object = layer.message;
-            }
-            ArrayList<TLRPC.Message> messages = new ArrayList<>();
-            TLRPC.Message decryptedMessage = processDecryptedObject(chat, message.file, message.date, message.random_id, object, new_key_used);
-            if (decryptedMessage != null) {
-                messages.add(decryptedMessage);
-            }
-            checkSecretHoles(chat, messages);
-            return messages;
-        } else {
-            BuffersStorage.getInstance().reuseFreeBuffer(is);
-            FileLog.e("tmessages", "fingerprint mismatch " + fingerprint);
-        }
-        return null;
-    }
-
-    public void requestNewSecretChatKey(final TLRPC.EncryptedChat encryptedChat) {
-        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) < 20) {
-            return;
-        }
-        final byte[] salt = new byte[256];
-        Utilities.random.nextBytes(salt);
-
-        BigInteger i_g_a = BigInteger.valueOf(MessagesStorage.secretG);
-        i_g_a = i_g_a.modPow(new BigInteger(1, salt), new BigInteger(1, MessagesStorage.secretPBytes));
-        byte[] g_a = i_g_a.toByteArray();
-        if (g_a.length > 256) {
-            byte[] correctedAuth = new byte[256];
-            System.arraycopy(g_a, 1, correctedAuth, 0, 256);
-            g_a = correctedAuth;
-        }
-
-        encryptedChat.exchange_id = SendMessagesHelper.getInstance().getNextRandomId();
-        encryptedChat.a_or_b = salt;
-        encryptedChat.g_a = g_a;
-
-        MessagesStorage.getInstance().updateEncryptedChat(encryptedChat);
-
-        sendRequestKeyMessage(encryptedChat, null);
-    }
-
-    public void processAcceptedSecretChat(final TLRPC.EncryptedChat encryptedChat) {
-        BigInteger p = new BigInteger(1, MessagesStorage.secretPBytes);
-        BigInteger i_authKey = new BigInteger(1, encryptedChat.g_a_or_b);
-
-        if (!Utilities.isGoodGaAndGb(i_authKey, p)) {
-            declineSecretChat(encryptedChat.id);
-            return;
-        }
-
-        i_authKey = i_authKey.modPow(new BigInteger(1, encryptedChat.a_or_b), p);
-
-        byte[] authKey = i_authKey.toByteArray();
-        if (authKey.length > 256) {
-            byte[] correctedAuth = new byte[256];
-            System.arraycopy(authKey, authKey.length - 256, correctedAuth, 0, 256);
-            authKey = correctedAuth;
-        } else if (authKey.length < 256) {
-            byte[] correctedAuth = new byte[256];
-            System.arraycopy(authKey, 0, correctedAuth, 256 - authKey.length, authKey.length);
-            for (int a = 0; a < 256 - authKey.length; a++) {
-                authKey[a] = 0;
-            }
-            authKey = correctedAuth;
-        }
-        byte[] authKeyHash = Utilities.computeSHA1(authKey);
-        byte[] authKeyId = new byte[8];
-        System.arraycopy(authKeyHash, authKeyHash.length - 8, authKeyId, 0, 8);
-        long fingerprint = Utilities.bytesToLong(authKeyId);
-        if (encryptedChat.key_fingerprint == fingerprint) {
-            encryptedChat.auth_key = authKey;
-            encryptedChat.key_create_date = ConnectionsManager.getInstance().getCurrentTime();
-            encryptedChat.seq_in = 0;
-            encryptedChat.seq_out = 1;
-            MessagesStorage.getInstance().updateEncryptedChat(encryptedChat);
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    MessagesController.getInstance().putEncryptedChat(encryptedChat, false);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, encryptedChat);
-                    sendNotifyLayerMessage(encryptedChat, null);
-                }
-            });
-        } else {
-            final TLRPC.TL_encryptedChatDiscarded newChat = new TLRPC.TL_encryptedChatDiscarded();
-            newChat.id = encryptedChat.id;
-            newChat.user_id = encryptedChat.user_id;
-            newChat.auth_key = encryptedChat.auth_key;
-            newChat.key_create_date = encryptedChat.key_create_date;
-            newChat.key_use_count_in = encryptedChat.key_use_count_in;
-            newChat.key_use_count_out = encryptedChat.key_use_count_out;
-            newChat.seq_in = encryptedChat.seq_in;
-            newChat.seq_out = encryptedChat.seq_out;
-            MessagesStorage.getInstance().updateEncryptedChat(newChat);
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    MessagesController.getInstance().putEncryptedChat(newChat, false);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, newChat);
-                }
-            });
-            declineSecretChat(encryptedChat.id);
-        }
-    }
-
-    public void declineSecretChat(int chat_id) {
-        TLRPC.TL_messages_discardEncryption req = new TLRPC.TL_messages_discardEncryption();
-        req.chat_id = chat_id;
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-
-            }
-        });
-    }
-
-    public void acceptSecretChat(final TLRPC.EncryptedChat encryptedChat) {
-        if (acceptingChats.get(encryptedChat.id) != null) {
-            return;
-        }
-        acceptingChats.put(encryptedChat.id, encryptedChat);
-        TLRPC.TL_messages_getDhConfig req = new TLRPC.TL_messages_getDhConfig();
-        req.random_length = 256;
-        req.version = MessagesStorage.lastSecretVersion;
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    TLRPC.messages_DhConfig res = (TLRPC.messages_DhConfig) response;
-                    if (response instanceof TLRPC.TL_messages_dhConfig) {
-                        if (!Utilities.isGoodPrime(res.p, res.g)) {
-                            acceptingChats.remove(encryptedChat.id);
-                            declineSecretChat(encryptedChat.id);
-                            return;
-                        }
-
-                        MessagesStorage.secretPBytes = res.p;
-                        MessagesStorage.secretG = res.g;
-                        MessagesStorage.lastSecretVersion = res.version;
-                        MessagesStorage.getInstance().saveSecretParams(MessagesStorage.lastSecretVersion, MessagesStorage.secretG, MessagesStorage.secretPBytes);
-                    }
-                    byte[] salt = new byte[256];
-                    for (int a = 0; a < 256; a++) {
-                        salt[a] = (byte) ((byte) (Utilities.random.nextDouble() * 256) ^ res.random[a]);
-                    }
-                    encryptedChat.a_or_b = salt;
-                    encryptedChat.seq_in = 1;
-                    encryptedChat.seq_out = 0;
-                    BigInteger p = new BigInteger(1, MessagesStorage.secretPBytes);
-                    BigInteger g_b = BigInteger.valueOf(MessagesStorage.secretG);
-                    g_b = g_b.modPow(new BigInteger(1, salt), p);
-                    BigInteger g_a = new BigInteger(1, encryptedChat.g_a);
-
-                    if (!Utilities.isGoodGaAndGb(g_a, p)) {
-                        acceptingChats.remove(encryptedChat.id);
-                        declineSecretChat(encryptedChat.id);
-                        return;
-                    }
-
-                    byte[] g_b_bytes = g_b.toByteArray();
-                    if (g_b_bytes.length > 256) {
-                        byte[] correctedAuth = new byte[256];
-                        System.arraycopy(g_b_bytes, 1, correctedAuth, 0, 256);
-                        g_b_bytes = correctedAuth;
-                    }
-
-                    g_a = g_a.modPow(new BigInteger(1, salt), p);
-
-                    byte[] authKey = g_a.toByteArray();
-                    if (authKey.length > 256) {
-                        byte[] correctedAuth = new byte[256];
-                        System.arraycopy(authKey, authKey.length - 256, correctedAuth, 0, 256);
-                        authKey = correctedAuth;
-                    } else if (authKey.length < 256) {
-                        byte[] correctedAuth = new byte[256];
-                        System.arraycopy(authKey, 0, correctedAuth, 256 - authKey.length, authKey.length);
-                        for (int a = 0; a < 256 - authKey.length; a++) {
-                            authKey[a] = 0;
-                        }
-                        authKey = correctedAuth;
-                    }
-                    byte[] authKeyHash = Utilities.computeSHA1(authKey);
-                    byte[] authKeyId = new byte[8];
-                    System.arraycopy(authKeyHash, authKeyHash.length - 8, authKeyId, 0, 8);
-                    encryptedChat.auth_key = authKey;
-                    encryptedChat.key_create_date = ConnectionsManager.getInstance().getCurrentTime();
-
-                    TLRPC.TL_messages_acceptEncryption req2 = new TLRPC.TL_messages_acceptEncryption();
-                    req2.g_b = g_b_bytes;
-                    req2.peer = new TLRPC.TL_inputEncryptedChat();
-                    req2.peer.chat_id = encryptedChat.id;
-                    req2.peer.access_hash = encryptedChat.access_hash;
-                    req2.key_fingerprint = Utilities.bytesToLong(authKeyId);
-                    ConnectionsManager.getInstance().performRpc(req2, new RPCRequest.RPCRequestDelegate() {
-                        @Override
-                        public void run(TLObject response, TLRPC.TL_error error) {
-                            acceptingChats.remove(encryptedChat.id);
-                            if (error == null) {
-                                final TLRPC.EncryptedChat newChat = (TLRPC.EncryptedChat) response;
-                                newChat.auth_key = encryptedChat.auth_key;
-                                newChat.user_id = encryptedChat.user_id;
-                                newChat.seq_in = encryptedChat.seq_in;
-                                newChat.seq_out = encryptedChat.seq_out;
-                                newChat.key_create_date = encryptedChat.key_create_date;
-                                newChat.key_use_count_in = encryptedChat.key_use_count_in;
-                                newChat.key_use_count_out = encryptedChat.key_use_count_out;
-                                MessagesStorage.getInstance().updateEncryptedChat(newChat);
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        MessagesController.getInstance().putEncryptedChat(newChat, false);
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, newChat);
-                                        sendNotifyLayerMessage(newChat, null);
-                                    }
-                                });
-                            }
-                        }
-                    });
-                } else {
-                    acceptingChats.remove(encryptedChat.id);
-                }
-            }
-        });
-    }
-
-    public void startSecretChat(final Context context, final TLRPC.User user) {
-        if (user == null || context == null) {
-            return;
-        }
-        startingSecretChat = true;
-        final ProgressDialog progressDialog = new ProgressDialog(context);
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-        TLRPC.TL_messages_getDhConfig req = new TLRPC.TL_messages_getDhConfig();
-        req.random_length = 256;
-        req.version = MessagesStorage.lastSecretVersion;
-        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (error == null) {
-                    TLRPC.messages_DhConfig res = (TLRPC.messages_DhConfig) response;
-                    if (response instanceof TLRPC.TL_messages_dhConfig) {
-                        if (!Utilities.isGoodPrime(res.p, res.g)) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    try {
-                                        if (!((Activity) context).isFinishing()) {
-                                            progressDialog.dismiss();
-                                        }
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            });
-                            return;
-                        }
-                        MessagesStorage.secretPBytes = res.p;
-                        MessagesStorage.secretG = res.g;
-                        MessagesStorage.lastSecretVersion = res.version;
-                        MessagesStorage.getInstance().saveSecretParams(MessagesStorage.lastSecretVersion, MessagesStorage.secretG, MessagesStorage.secretPBytes);
-                    }
-                    final byte[] salt = new byte[256];
-                    for (int a = 0; a < 256; a++) {
-                        salt[a] = (byte) ((byte) (Utilities.random.nextDouble() * 256) ^ res.random[a]);
-                    }
-
-                    BigInteger i_g_a = BigInteger.valueOf(MessagesStorage.secretG);
-                    i_g_a = i_g_a.modPow(new BigInteger(1, salt), new BigInteger(1, MessagesStorage.secretPBytes));
-                    byte[] g_a = i_g_a.toByteArray();
-                    if (g_a.length > 256) {
-                        byte[] correctedAuth = new byte[256];
-                        System.arraycopy(g_a, 1, correctedAuth, 0, 256);
-                        g_a = correctedAuth;
-                    }
-
-                    TLRPC.TL_messages_requestEncryption req2 = new TLRPC.TL_messages_requestEncryption();
-                    req2.g_a = g_a;
-                    req2.user_id = MessagesController.getInputUser(user);
-                    req2.random_id = Utilities.random.nextInt();
-                    ConnectionsManager.getInstance().performRpc(req2, new RPCRequest.RPCRequestDelegate() {
-                        @Override
-                        public void run(final TLObject response, TLRPC.TL_error error) {
-                            if (error == null) {
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        startingSecretChat = false;
-                                        if (!((Activity) context).isFinishing()) {
-                                            try {
-                                                progressDialog.dismiss();
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                        }
-                                        TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) response;
-                                        chat.user_id = chat.participant_id;
-                                        chat.seq_in = 0;
-                                        chat.seq_out = 1;
-                                        chat.a_or_b = salt;
-                                        MessagesController.getInstance().putEncryptedChat(chat, false);
-                                        TLRPC.TL_dialog dialog = new TLRPC.TL_dialog();
-                                        dialog.id = ((long) chat.id) << 32;
-                                        dialog.unread_count = 0;
-                                        dialog.top_message = 0;
-                                        dialog.last_message_date = ConnectionsManager.getInstance().getCurrentTime();
-                                        MessagesController.getInstance().dialogs_dict.put(dialog.id, dialog);
-                                        MessagesController.getInstance().dialogs.add(dialog);
-                                        Collections.sort(MessagesController.getInstance().dialogs, new Comparator<TLRPC.TL_dialog>() {
-                                            @Override
-                                            public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
-                                                if (tl_dialog.last_message_date == tl_dialog2.last_message_date) {
-                                                    return 0;
-                                                } else if (tl_dialog.last_message_date < tl_dialog2.last_message_date) {
-                                                    return 1;
-                                                } else {
-                                                    return -1;
-                                                }
-                                            }
-                                        });
-                                        MessagesStorage.getInstance().putEncryptedChat(chat, user, dialog);
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatCreated, chat);
-                                        Utilities.stageQueue.postRunnable(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                if (!delayedEncryptedChatUpdates.isEmpty()) {
-                                                    MessagesController.getInstance().processUpdateArray(delayedEncryptedChatUpdates, null, null);
-                                                    delayedEncryptedChatUpdates.clear();
-                                                }
-                                            }
-                                        });
-                                    }
-                                });
-                            } else {
-                                delayedEncryptedChatUpdates.clear();
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        if (!((Activity) context).isFinishing()) {
-                                            startingSecretChat = false;
-                                            try {
-                                                progressDialog.dismiss();
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                            AlertDialog.Builder builder = new AlertDialog.Builder(context);
-                                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                            builder.setMessage(LocaleController.getString("CreateEncryptedChatError", R.string.CreateEncryptedChatError));
-                                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                                            builder.show().setCanceledOnTouchOutside(true);
-                                        }
-                                    }
-                                });
-                            }
-                        }
-                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-                } else {
-                    delayedEncryptedChatUpdates.clear();
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            startingSecretChat = false;
-                            if (!((Activity) context).isFinishing()) {
-                                try {
-                                    progressDialog.dismiss();
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        }
-                    });
-                }
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                try {
-                    dialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        try {
-            progressDialog.show();
-        } catch (Exception e) {
-            //don't promt
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
deleted file mode 100644
index 3aa324556..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ /dev/null
@@ -1,2403 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.media.MediaMetadataRetriever;
-import android.media.MediaPlayer;
-import android.media.ThumbnailUtils;
-import android.net.Uri;
-import android.os.Build;
-import android.provider.MediaStore;
-import android.webkit.MimeTypeMap;
-import android.widget.Toast;
-
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.messenger.ApplicationLoader;
-
-import java.io.File;
-import java.io.RandomAccessFile;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-import java.util.ArrayList;
-import java.util.HashMap;
-
-public class SendMessagesHelper implements NotificationCenter.NotificationCenterDelegate {
-
-    private TLRPC.ChatParticipants currentChatInfo = null;
-    private HashMap<String, ArrayList<DelayedMessage>> delayedMessages = new HashMap<>();
-    private HashMap<Integer, MessageObject> unsentMessages = new HashMap<>();
-    private HashMap<Integer, TLRPC.Message> sendingMessages = new HashMap<>();
-
-    protected class DelayedMessage {
-        public TLObject sendRequest;
-        public TLRPC.TL_decryptedMessage sendEncryptedRequest;
-        public int type;
-        public String originalPath;
-        public TLRPC.FileLocation location;
-        public TLRPC.TL_video videoLocation;
-        public TLRPC.TL_audio audioLocation;
-        public TLRPC.TL_document documentLocation;
-        public String httpLocation;
-        public MessageObject obj;
-        public TLRPC.EncryptedChat encryptedChat;
-        public VideoEditedInfo videoEditedInfo;
-    }
-
-    private static volatile SendMessagesHelper Instance = null;
-
-    public static SendMessagesHelper getInstance() {
-        SendMessagesHelper localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (SendMessagesHelper.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new SendMessagesHelper();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    public SendMessagesHelper() {
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FilePreparingStarted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FilePreparingFailed);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.httpFileDidFailedLoad);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.httpFileDidLoaded);
-    }
-
-    public void cleanUp() {
-        delayedMessages.clear();
-        unsentMessages.clear();
-        sendingMessages.clear();
-        currentChatInfo = null;
-    }
-
-    public void setCurrentChatInfo(TLRPC.ChatParticipants info) {
-        currentChatInfo = info;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.FileDidUpload) {
-            final String location = (String) args[0];
-            final TLRPC.InputFile file = (TLRPC.InputFile) args[1];
-            final TLRPC.InputEncryptedFile encryptedFile = (TLRPC.InputEncryptedFile) args[2];
-            ArrayList<DelayedMessage> arr = delayedMessages.get(location);
-            if (arr != null) {
-                for (int a = 0; a < arr.size(); a++) {
-                    DelayedMessage message = arr.get(a);
-                    TLRPC.InputMedia media = null;
-                    if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
-                        media = ((TLRPC.TL_messages_sendMedia) message.sendRequest).media;
-                    } else if (message.sendRequest instanceof TLRPC.TL_messages_sendBroadcast) {
-                        media = ((TLRPC.TL_messages_sendBroadcast) message.sendRequest).media;
-                    }
-
-                    if (file != null && media != null) {
-                        if (message.type == 0) {
-                            media.file = file;
-                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                        } else if (message.type == 1) {
-                            if (media.file == null) {
-                                media.file = file;
-                                if (media.thumb == null && message.location != null) {
-                                    performSendDelayedMessage(message);
-                                } else {
-                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                }
-                            } else {
-                                media.thumb = file;
-                                performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                            }
-                        } else if (message.type == 2) {
-                            if (media.file == null) {
-                                media.file = file;
-                                if (media.thumb == null && message.location != null) {
-                                    performSendDelayedMessage(message);
-                                } else {
-                                    performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                                }
-                            } else {
-                                media.thumb = file;
-                                performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                            }
-                        } else if (message.type == 3) {
-                            media.file = file;
-                            performSendMessageRequest(message.sendRequest, message.obj.messageOwner, message.originalPath);
-                        }
-                        arr.remove(a);
-                        a--;
-                    } else if (encryptedFile != null && message.sendEncryptedRequest != null) {
-                        message.sendEncryptedRequest.media.key = (byte[]) args[3];
-                        message.sendEncryptedRequest.media.iv = (byte[]) args[4];
-                        SecretChatHelper.getInstance().performSendEncryptedRequest(message.sendEncryptedRequest, message.obj.messageOwner, message.encryptedChat, encryptedFile, message.originalPath);
-                        arr.remove(a);
-                        a--;
-                    }
-                }
-                if (arr.isEmpty()) {
-                    delayedMessages.remove(location);
-                }
-            }
-        } else if (id == NotificationCenter.FileDidFailUpload) {
-            final String location = (String) args[0];
-            final boolean enc = (Boolean) args[1];
-            ArrayList<DelayedMessage> arr = delayedMessages.get(location);
-            if (arr != null) {
-                for (int a = 0; a < arr.size(); a++) {
-                    DelayedMessage obj = arr.get(a);
-                    if (enc && obj.sendEncryptedRequest != null || !enc && obj.sendRequest != null) {
-                        MessagesStorage.getInstance().markMessageAsSendError(obj.obj.getId());
-                        obj.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                        arr.remove(a);
-                        a--;
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, obj.obj.getId());
-                        processSentMessage(obj.obj.getId());
-                    }
-                }
-                if (arr.isEmpty()) {
-                    delayedMessages.remove(location);
-                }
-            }
-        } else if (id == NotificationCenter.FilePreparingStarted) {
-            MessageObject messageObject = (MessageObject) args[0];
-            String finalPath = (String) args[1];
-
-            ArrayList<DelayedMessage> arr = delayedMessages.get(messageObject.messageOwner.attachPath);
-            if (arr != null) {
-                for (int a = 0; a < arr.size(); a++) {
-                    DelayedMessage message = arr.get(a);
-                    if (message.obj == messageObject) {
-                        message.videoEditedInfo = null;
-                        performSendDelayedMessage(message);
-                        arr.remove(a);
-                        break;
-                    }
-                }
-                if (arr.isEmpty()) {
-                    delayedMessages.remove(messageObject.messageOwner.attachPath);
-                }
-            }
-        } else if (id == NotificationCenter.FileNewChunkAvailable) {
-            MessageObject messageObject = (MessageObject) args[0];
-            String finalPath = (String) args[1];
-            long finalSize = (Long) args[2];
-            boolean isEncrypted = ((int) messageObject.getDialogId()) == 0;
-            FileLoader.getInstance().checkUploadNewDataAvailable(finalPath, isEncrypted, finalSize);
-            if (finalSize != 0) {
-                ArrayList<DelayedMessage> arr = delayedMessages.get(messageObject.messageOwner.attachPath);
-                if (arr != null) {
-                    for (DelayedMessage message : arr) {
-                        if (message.obj == messageObject) {
-                            message.obj.videoEditedInfo = null;
-                            message.obj.messageOwner.message = "-1";
-                            message.obj.messageOwner.media.video.size = (int) finalSize;
-
-                            ArrayList<TLRPC.Message> messages = new ArrayList<>();
-                            messages.add(message.obj.messageOwner);
-                            MessagesStorage.getInstance().putMessages(messages, false, true, false, 0);
-                            break;
-                        }
-                    }
-                    if (arr.isEmpty()) {
-                        delayedMessages.remove(messageObject.messageOwner.attachPath);
-                    }
-                }
-            }
-        } else if (id == NotificationCenter.FilePreparingFailed) {
-            MessageObject messageObject = (MessageObject) args[0];
-            String finalPath = (String) args[1];
-            stopVideoService(messageObject.messageOwner.attachPath);
-
-            ArrayList<DelayedMessage> arr = delayedMessages.get(finalPath);
-            if (arr != null) {
-                for (int a = 0; a < arr.size(); a++) {
-                    DelayedMessage message = arr.get(a);
-                    if (message.obj == messageObject) {
-                        MessagesStorage.getInstance().markMessageAsSendError(message.obj.getId());
-                        message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                        arr.remove(a);
-                        a--;
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.getId());
-                        processSentMessage(message.obj.getId());
-                    }
-                }
-                if (arr.isEmpty()) {
-                    delayedMessages.remove(finalPath);
-                }
-            }
-        } else if (id == NotificationCenter.httpFileDidLoaded) {
-            String path = (String) args[0];
-            String file = (String) args[1];
-            ArrayList<DelayedMessage> arr = delayedMessages.get(path);
-            if (arr != null) {
-                for (final DelayedMessage message : arr) {
-                    if (message.type == 0) {
-                        String md5 = Utilities.MD5(message.httpLocation) + ".jpg";
-                        final File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), md5);
-                        Utilities.globalQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                final TLRPC.TL_photo photo = SendMessagesHelper.getInstance().generatePhotoSizes(cacheFile.toString(), null);
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        if (photo != null) {
-                                            message.httpLocation = null;
-                                            message.obj.messageOwner.media.photo = photo;
-                                            message.obj.messageOwner.attachPath = cacheFile.toString();
-                                            message.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                                            ArrayList<TLRPC.Message> messages = new ArrayList<>();
-                                            messages.add(message.obj.messageOwner);
-                                            MessagesStorage.getInstance().putMessages(messages, false, true, false, 0);
-                                            performSendDelayedMessage(message);
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, message.obj);
-                                        } else {
-                                            FileLog.e("tmessages", "can't load image " + message.httpLocation + " to file " + cacheFile.toString());
-                                            MessagesStorage.getInstance().markMessageAsSendError(message.obj.getId());
-                                            message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.getId());
-                                            processSentMessage(message.obj.getId());
-                                        }
-                                    }
-                                });
-                            }
-                        });
-                    } else if (message.type == 2) {
-                        String md5 = Utilities.MD5(message.httpLocation) + ".gif";
-                        final File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), md5);
-                        Utilities.globalQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (message.documentLocation.thumb.location instanceof TLRPC.TL_fileLocationUnavailable) {
-                                    try {
-                                        Bitmap bitmap = ImageLoader.loadBitmap(cacheFile.getAbsolutePath(), null, 90, 90, true);
-                                        if (bitmap != null) {
-                                            message.documentLocation.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, message.sendEncryptedRequest != null);
-                                        }
-                                    } catch (Exception e) {
-                                        message.documentLocation.thumb = null;
-                                        FileLog.e("tmessages", e);
-                                    }
-                                    if (message.documentLocation.thumb == null) {
-                                        message.documentLocation.thumb = new TLRPC.TL_photoSizeEmpty();
-                                        message.documentLocation.thumb.type = "s";
-                                    }
-                                }
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        message.httpLocation = null;
-                                        message.obj.messageOwner.attachPath = cacheFile.toString();
-                                        message.location = message.documentLocation.thumb.location;
-                                        ArrayList<TLRPC.Message> messages = new ArrayList<>();
-                                        messages.add(message.obj.messageOwner);
-                                        MessagesStorage.getInstance().putMessages(messages, false, true, false, 0);
-                                        performSendDelayedMessage(message);
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, message.obj);
-                                    }
-                                });
-                            }
-                        });
-                    }
-                }
-                delayedMessages.remove(path);
-            }
-        } else if (id == NotificationCenter.httpFileDidFailedLoad) {
-            String path = (String) args[0];
-
-            ArrayList<DelayedMessage> arr = delayedMessages.get(path);
-            if (arr != null) {
-                for (DelayedMessage message : arr) {
-                    MessagesStorage.getInstance().markMessageAsSendError(message.obj.getId());
-                    message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.getId());
-                    processSentMessage(message.obj.getId());
-                }
-                delayedMessages.remove(path);
-            }
-        }
-    }
-
-    public void cancelSendingMessage(MessageObject object) {
-        String keyToRemvoe = null;
-        boolean enc = false;
-        for (HashMap.Entry<String, ArrayList<DelayedMessage>> entry : delayedMessages.entrySet()) {
-            ArrayList<DelayedMessage> messages = entry.getValue();
-            for (int a = 0; a < messages.size(); a++) {
-                DelayedMessage message = messages.get(a);
-                if (message.obj.getId() == object.getId()) {
-                    messages.remove(a);
-                    MediaController.getInstance().cancelVideoConvert(message.obj);
-                    if (messages.size() == 0) {
-                        keyToRemvoe = entry.getKey();
-                        if (message.sendEncryptedRequest != null) {
-                            enc = true;
-                        }
-                    }
-                    break;
-                }
-            }
-        }
-        if (keyToRemvoe != null) {
-            if (keyToRemvoe.startsWith("http")) {
-                ImageLoader.getInstance().cancelLoadHttpFile(keyToRemvoe);
-            } else {
-                FileLoader.getInstance().cancelUploadFile(keyToRemvoe, enc);
-            }
-            stopVideoService(keyToRemvoe);
-        }
-        ArrayList<Integer> messages = new ArrayList<>();
-        messages.add(object.getId());
-        MessagesController.getInstance().deleteMessages(messages, null, null);
-    }
-
-    public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
-        if (messageObject.getId() >= 0) {
-            return false;
-        }
-        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction) {
-            int enc_id = (int) (messageObject.getDialogId() >> 32);
-            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(enc_id);
-            if (encryptedChat == null) {
-                MessagesStorage.getInstance().markMessageAsSendError(messageObject.getId());
-                messageObject.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, messageObject.getId());
-                processSentMessage(messageObject.getId());
-                return false;
-            }
-            if (messageObject.messageOwner.random_id == 0) {
-                messageObject.messageOwner.random_id = getNextRandomId();
-            }
-            if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                SecretChatHelper.getInstance().sendTTLMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionDeleteMessages) {
-                SecretChatHelper.getInstance().sendMessagesDeleteMessage(encryptedChat, null, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
-                SecretChatHelper.getInstance().sendClearHistoryMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
-                SecretChatHelper.getInstance().sendNotifyLayerMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionReadMessages) {
-                SecretChatHelper.getInstance().sendMessagesReadMessage(encryptedChat, null, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
-                SecretChatHelper.getInstance().sendScreenshotMessage(encryptedChat, null, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionTyping) {
-
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionResend) {
-
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionCommitKey) {
-                SecretChatHelper.getInstance().sendCommitKeyMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionAbortKey) {
-                SecretChatHelper.getInstance().sendAbortKeyMessage(encryptedChat, messageObject.messageOwner, 0);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionRequestKey) {
-                SecretChatHelper.getInstance().sendRequestKeyMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionAcceptKey) {
-                SecretChatHelper.getInstance().sendAcceptKeyMessage(encryptedChat, messageObject.messageOwner);
-            } else if (messageObject.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionNoop) {
-                SecretChatHelper.getInstance().sendNoopMessage(encryptedChat, messageObject.messageOwner);
-            }
-            return true;
-        }
-        if (unsent) {
-            unsentMessages.put(messageObject.getId(), messageObject);
-        }
-        sendMessage(messageObject);
-        return true;
-    }
-
-    protected void processSentMessage(int id) {
-        int prevSize = unsentMessages.size();
-        unsentMessages.remove(id);
-        if (prevSize != 0 && unsentMessages.size() == 0) {
-            checkUnsentMessages();
-        }
-    }
-
-    public void processForwardFromMyName(MessageObject messageObject, long did) {
-        if (messageObject == null) {
-            return;
-        }
-        if (messageObject.messageOwner.media != null && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage)) {
-            if (messageObject.messageOwner.media.photo instanceof TLRPC.TL_photo) {
-                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, null, did, messageObject.replyMessageObject);
-            } else if (messageObject.messageOwner.media.audio instanceof TLRPC.TL_audio) {
-                sendMessage((TLRPC.TL_audio) messageObject.messageOwner.media.audio, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject);
-            } else if (messageObject.messageOwner.media.video instanceof TLRPC.TL_video) {
-                TLRPC.TL_video video = (TLRPC.TL_video) messageObject.messageOwner.media.video;
-                sendMessage(video, messageObject.videoEditedInfo, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject);
-            } else if (messageObject.messageOwner.media.document instanceof TLRPC.TL_document) {
-                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject);
-            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                sendMessage(messageObject.messageOwner.media, did, messageObject.replyMessageObject);
-            } else if (messageObject.messageOwner.media.phone_number != null) {
-                TLRPC.User user = new TLRPC.TL_userContact();
-                user.phone = messageObject.messageOwner.media.phone_number;
-                user.first_name = messageObject.messageOwner.media.first_name;
-                user.last_name = messageObject.messageOwner.media.last_name;
-                user.id = messageObject.messageOwner.media.user_id;
-                sendMessage(user, did, messageObject.replyMessageObject);
-            } else {
-                sendMessage(messageObject, did);
-            }
-        } else if (messageObject.messageOwner.message != null) {
-            TLRPC.WebPage webPage = null;
-            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
-                webPage = messageObject.messageOwner.media.webpage;
-            }
-            sendMessage(messageObject.messageOwner.message, did, messageObject.replyMessageObject, webPage, true);
-        } else {
-            sendMessage(messageObject, did);
-        }
-    }
-
-    public void sendSticker(TLRPC.Document document, long peer, MessageObject replyingMessageObject) {
-        if (document == null) {
-            return;
-        }
-        if (((int) peer) == 0 && document.thumb instanceof TLRPC.TL_photoSize) {
-            File file = FileLoader.getPathToAttach(document.thumb, true);
-            if (file.exists()) {
-                try {
-                    int len = (int) file.length();
-                    byte[] arr = new byte[(int) file.length()];
-                    RandomAccessFile reader = new RandomAccessFile(file, "r");
-                    reader.readFully(arr);
-                    TLRPC.TL_document newDocument = new TLRPC.TL_document();
-                    newDocument.thumb = new TLRPC.TL_photoCachedSize();
-                    newDocument.thumb.location = document.thumb.location;
-                    newDocument.thumb.size = document.thumb.size;
-                    newDocument.thumb.w = document.thumb.w;
-                    newDocument.thumb.h = document.thumb.h;
-                    newDocument.thumb.type = document.thumb.type;
-                    newDocument.thumb.bytes = arr;
-
-                    newDocument.id = document.id;
-                    newDocument.access_hash = document.access_hash;
-                    newDocument.date = document.date;
-                    newDocument.mime_type = document.mime_type;
-                    newDocument.size = document.size;
-                    newDocument.dc_id = document.dc_id;
-                    newDocument.attributes = document.attributes;
-                    document = newDocument;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        }
-        for (int a = 0; a < document.attributes.size(); a++) {
-            TLRPC.DocumentAttribute attribute = document.attributes.get(a);
-            if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                document.attributes.remove(a);
-                document.attributes.add(new TLRPC.TL_documentAttributeSticker_old());
-                break;
-            }
-        }
-        SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, peer, replyingMessageObject);
-    }
-
-    public void sendMessage(TLRPC.User user, long peer, MessageObject reply_to_msg) {
-        sendMessage(null, null, null, null, null, null, user, null, null, null, peer, false, null, reply_to_msg, null, true);
-    }
-
-    public void sendMessage(ArrayList<MessageObject> messages, long peer) {
-        if ((int) peer == 0 || messages == null || messages.isEmpty()) {
-            return;
-        }
-        int lower_id = (int) peer;
-        TLRPC.Peer to_id;
-        TLRPC.InputPeer sendToPeer;
-        if (lower_id < 0) {
-            to_id = new TLRPC.TL_peerChat();
-            to_id.chat_id = -lower_id;
-            sendToPeer = new TLRPC.TL_inputPeerChat();
-            sendToPeer.chat_id = -lower_id;
-        } else {
-            to_id = new TLRPC.TL_peerUser();
-            to_id.user_id = lower_id;
-            TLRPC.User sendToUser = MessagesController.getInstance().getUser(lower_id);
-            if (sendToUser == null) {
-                return;
-            }
-            if (sendToUser instanceof TLRPC.TL_userForeign || sendToUser instanceof TLRPC.TL_userRequest) {
-                sendToPeer = new TLRPC.TL_inputPeerForeign();
-                sendToPeer.user_id = sendToUser.id;
-                sendToPeer.access_hash = sendToUser.access_hash;
-            } else {
-                sendToPeer = new TLRPC.TL_inputPeerContact();
-                sendToPeer.user_id = sendToUser.id;
-            }
-        }
-
-        ArrayList<MessageObject> objArr = new ArrayList<>();
-        ArrayList<TLRPC.Message> arr = new ArrayList<>();
-        ArrayList<Long> randomIds = new ArrayList<>();
-        ArrayList<Integer> ids = new ArrayList<>();
-        HashMap<Long, TLRPC.Message> messagesByRandomIds = new HashMap<>();
-
-        for (int a = 0; a < messages.size(); a++) {
-            MessageObject msgObj = messages.get(a);
-
-            final TLRPC.Message newMsg = new TLRPC.TL_message();
-            newMsg.flags |= TLRPC.MESSAGE_FLAG_FWD;
-            if (msgObj.isForwarded()) {
-                newMsg.fwd_from_id = msgObj.messageOwner.fwd_from_id;
-                newMsg.fwd_date = msgObj.messageOwner.fwd_date;
-            } else {
-                newMsg.fwd_from_id = msgObj.messageOwner.from_id;
-                newMsg.fwd_date = msgObj.messageOwner.date;
-            }
-            newMsg.media = msgObj.messageOwner.media;
-            newMsg.message = msgObj.messageOwner.message;
-            newMsg.fwd_msg_id = msgObj.getId();
-            newMsg.attachPath = msgObj.messageOwner.attachPath;
-            if (newMsg.attachPath == null) {
-                newMsg.attachPath = "";
-            }
-            newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-            newMsg.from_id = UserConfig.getClientUserId();
-            newMsg.flags |= TLRPC.MESSAGE_FLAG_OUT;
-            if (newMsg.random_id == 0) {
-                newMsg.random_id = getNextRandomId();
-            }
-            randomIds.add(newMsg.random_id);
-            messagesByRandomIds.put(newMsg.random_id, newMsg);
-            ids.add(newMsg.fwd_msg_id);
-            newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
-            newMsg.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
-            if (newMsg.media instanceof TLRPC.TL_messageMediaAudio) {
-                newMsg.flags |= TLRPC.MESSAGE_FLAG_CONTENT_UNREAD;
-            }
-            newMsg.dialog_id = peer;
-            newMsg.to_id = to_id;
-            MessageObject newMsgObj = new MessageObject(newMsg, null, true);
-            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
-            objArr.add(newMsgObj);
-            arr.add(newMsg);
-
-            putToSendingMessages(newMsg);
-
-            if (arr.size() == 100 || a == messages.size() - 1) {
-                MessagesStorage.getInstance().putMessages(new ArrayList<>(arr), false, true, false, 0);
-                MessagesController.getInstance().updateInterfaceWithMessages(peer, objArr);
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                UserConfig.saveConfig(false);
-
-                TLRPC.TL_messages_forwardMessages req = new TLRPC.TL_messages_forwardMessages();
-                req.peer = sendToPeer;
-                req.random_id = randomIds;
-                req.id = ids;
-
-                final ArrayList<TLRPC.Message> newMsgObjArr = arr;
-                final HashMap<Long, TLRPC.Message> messagesByRandomIdsFinal = messagesByRandomIds;
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        if (error == null) {
-                            HashMap<Integer, Long> newMessagesByIds = new HashMap<>();
-                            TLRPC.Updates updates = (TLRPC.Updates) response;
-                            for (int a = 0; a < updates.updates.size(); a++) {
-                                TLRPC.Update update = updates.updates.get(a);
-                                if (update instanceof TLRPC.TL_updateMessageID) {
-                                    newMessagesByIds.put(update.id, update.random_id);
-                                    updates.updates.remove(a);
-                                    a--;
-                                }
-                            }
-                            for (TLRPC.Update update : updates.updates) {
-                                if (update instanceof TLRPC.TL_updateNewMessage) {
-                                    MessagesController.getInstance().processNewDifferenceParams(-1, update.pts, -1, update.pts_count);
-                                    TLRPC.Message message = ((TLRPC.TL_updateNewMessage) update).message;
-                                    Long random_id = newMessagesByIds.get(message.id);
-                                    if (random_id != null) {
-                                        final TLRPC.Message newMsgObj = messagesByRandomIdsFinal.get(random_id);
-                                        if (newMsgObj == null) {
-                                            continue;
-                                        }
-                                        newMsgObjArr.remove(newMsgObj);
-                                        final int oldId = newMsgObj.id;
-                                        final ArrayList<TLRPC.Message> sentMessages = new ArrayList<>();
-                                        sentMessages.add(message);
-                                        newMsgObj.id = message.id;
-                                        processSentMessage(newMsgObj, message, null);
-                                        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, oldId, newMsgObj.id, 0, false);
-                                                MessagesStorage.getInstance().putMessages(sentMessages, true, false, false, 0);
-                                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                                    @Override
-                                                    public void run() {
-                                                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, newMsgObj.id, newMsgObj, false);
-                                                        processSentMessage(oldId);
-                                                        removeFromSendingMessages(oldId);
-                                                    }
-                                                });
-                                                if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                                    stopVideoService(newMsgObj.attachPath);
-                                                }
-                                            }
-                                        });
-                                    }
-                                }
-                            }
-                        }
-                        for (final TLRPC.Message newMsgObj : newMsgObjArr) {
-                            MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
-                                    processSentMessage(newMsgObj.id);
-                                    if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                        stopVideoService(newMsgObj.attachPath);
-                                    }
-                                    removeFromSendingMessages(newMsgObj.id);
-                                }
-                            });
-                        }
-                    }
-                }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress, ConnectionsManager.DEFAULT_DATACENTER_ID);
-
-                if (a != messages.size() - 1) {
-                    objArr = new ArrayList<>();
-                    arr = new ArrayList<>();
-                    randomIds = new ArrayList<>();
-                    ids = new ArrayList<>();
-                    messagesByRandomIds = new HashMap<>();
-                }
-            }
-        }
-    }
-
-    public void sendMessage(MessageObject message) {
-        sendMessage(null, null, null, null, null, message, null, null, null, null, message.getDialogId(), true, message.messageOwner.attachPath, null, null, true);
-    }
-
-    public void sendMessage(MessageObject message, long peer) {
-        sendMessage(null, null, null, null, null, message, null, null, null, null, peer, false, message.messageOwner.attachPath, null, null, true);
-    }
-
-    public void sendMessage(TLRPC.TL_document document, String originalPath, String path, long peer, MessageObject reply_to_msg) {
-        sendMessage(null, null, null, null, null, null, null, document, null, originalPath, peer, false, path, reply_to_msg, null, true);
-    }
-
-    public void sendMessage(String message, long peer, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks) {
-        sendMessage(message, null, null, null, null, null, null, null, null, null, peer, false, null, reply_to_msg, webPage, searchLinks);
-    }
-
-    public void sendMessage(TLRPC.MessageMedia location, long peer, MessageObject reply_to_msg) {
-        sendMessage(null, location, null, null, null, null, null, null, null, null, peer, false, null, reply_to_msg, null, true);
-    }
-
-    public void sendMessage(TLRPC.TL_photo photo, String originalPath, String path, long peer, MessageObject reply_to_msg) {
-        sendMessage(null, null, photo, null, null, null, null, null, null, originalPath, peer, false, path, reply_to_msg, null, true);
-    }
-
-    public void sendMessage(TLRPC.TL_video video, VideoEditedInfo videoEditedInfo, String originalPath, String path, long peer, MessageObject reply_to_msg) {
-        sendMessage(null, null, null, video, videoEditedInfo, null, null, null, null, originalPath, peer, false, path, reply_to_msg, null, true);
-    }
-
-    public void sendMessage(TLRPC.TL_audio audio, String path, long peer, MessageObject reply_to_msg) {
-        sendMessage(null, null, null, null, null, null, null, null, audio, null, peer, false, path, reply_to_msg, null, true);
-    }
-
-    private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_photo photo, TLRPC.TL_video video, VideoEditedInfo videoEditedInfo, MessageObject msgObj, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer, boolean retry, String path, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks) {
-        if (peer == 0) {
-            return;
-        }
-
-        TLRPC.Message newMsg = null;
-        int type = -1;
-        int lower_id = (int) peer;
-        int high_id = (int) (peer >> 32);
-        TLRPC.EncryptedChat encryptedChat = null;
-        TLRPC.InputPeer sendToPeer = null;
-        ArrayList<TLRPC.InputUser> sendToPeers = null;
-        if (lower_id == 0) {
-            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
-        }
-
-        if (retry) {
-            newMsg = msgObj.messageOwner;
-
-            if (msgObj.type == 0) {
-                if (msgObj.isForwarded()) {
-                    type = 4;
-                } else {
-                    message = newMsg.message;
-                    type = 0;
-                }
-            } else if (msgObj.type == 4) {
-                location = newMsg.media;
-                type = 1;
-            } else if (msgObj.type == 1) {
-                if (msgObj.isForwarded()) {
-                    type = 4;
-                } else {
-                    photo = (TLRPC.TL_photo) newMsg.media.photo;
-                    type = 2;
-                }
-            } else if (msgObj.type == 3) {
-                if (msgObj.isForwarded()) {
-                    type = 4;
-                } else {
-                    type = 3;
-                    video = (TLRPC.TL_video) newMsg.media.video;
-                }
-            } else if (msgObj.type == 12) {
-                user = new TLRPC.TL_userRequest();
-                user.phone = newMsg.media.phone_number;
-                user.first_name = newMsg.media.first_name;
-                user.last_name = newMsg.media.last_name;
-                user.id = newMsg.media.user_id;
-                type = 6;
-            } else if (msgObj.type == 8 || msgObj.type == 9 || msgObj.type == 13) {
-                document = (TLRPC.TL_document) newMsg.media.document;
-                type = 7;
-            } else if (msgObj.type == 2) {
-                audio = (TLRPC.TL_audio) newMsg.media.audio;
-                type = 8;
-            }
-        } else {
-            if (message != null) {
-                if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                    newMsg = new TLRPC.TL_message_secret();
-                } else {
-                    newMsg = new TLRPC.TL_message();
-                }
-                if (encryptedChat != null || webPage == null) {
-                    newMsg.media = new TLRPC.TL_messageMediaEmpty();
-                } else {
-                    newMsg.media = new TLRPC.TL_messageMediaWebPage();
-                    newMsg.media.webpage = webPage;
-                }
-                type = 0;
-                newMsg.message = message;
-            } else if (location != null) {
-                if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                    newMsg = new TLRPC.TL_message_secret();
-                } else {
-                    newMsg = new TLRPC.TL_message();
-                }
-                newMsg.media = location;
-                newMsg.message = "";
-                type = 1;
-            } else if (photo != null) {
-                if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                    newMsg = new TLRPC.TL_message_secret();
-                } else {
-                    newMsg = new TLRPC.TL_message();
-                }
-                newMsg.media = new TLRPC.TL_messageMediaPhoto();
-                newMsg.media.caption = photo.caption != null ? photo.caption : "";
-                newMsg.media.photo = photo;
-                type = 2;
-                newMsg.message = "-1";
-                if (path != null && path.length() > 0 && path.startsWith("http")) {
-                    newMsg.attachPath = path;
-                } else {
-                    TLRPC.FileLocation location1 = photo.sizes.get(photo.sizes.size() - 1).location;
-                    newMsg.attachPath = FileLoader.getPathToAttach(location1, true).toString();
-                }
-            } else if (video != null) {
-                if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                    newMsg = new TLRPC.TL_message_secret();
-                } else {
-                    newMsg = new TLRPC.TL_message();
-                }
-                newMsg.media = new TLRPC.TL_messageMediaVideo();
-                newMsg.media.caption = video.caption != null ? video.caption : "";
-                newMsg.media.video = video;
-                type = 3;
-                if (videoEditedInfo == null) {
-                    newMsg.message = "-1";
-                } else {
-                    newMsg.message = videoEditedInfo.getString();
-                }
-                newMsg.attachPath = path;
-            } else if (msgObj != null) {
-                newMsg = new TLRPC.TL_message();
-                newMsg.flags |= TLRPC.MESSAGE_FLAG_FWD;
-                if (msgObj.isForwarded()) {
-                    newMsg.fwd_from_id = msgObj.messageOwner.fwd_from_id;
-                    newMsg.fwd_date = msgObj.messageOwner.fwd_date;
-                } else {
-                    newMsg.fwd_from_id = msgObj.messageOwner.from_id;
-                    newMsg.fwd_date = msgObj.messageOwner.date;
-                }
-                newMsg.media = msgObj.messageOwner.media;
-                newMsg.message = msgObj.messageOwner.message;
-                newMsg.fwd_msg_id = msgObj.getId();
-                newMsg.attachPath = msgObj.messageOwner.attachPath;
-                type = 4;
-            } else if (user != null) {
-                if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                    newMsg = new TLRPC.TL_message_secret();
-                } else {
-                    newMsg = new TLRPC.TL_message();
-                }
-                newMsg.media = new TLRPC.TL_messageMediaContact();
-                newMsg.media.phone_number = user.phone;
-                newMsg.media.first_name = user.first_name;
-                newMsg.media.last_name = user.last_name;
-                newMsg.media.user_id = user.id;
-                newMsg.message = "";
-                type = 6;
-            } else if (document != null) {
-                if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                    newMsg = new TLRPC.TL_message_secret();
-                } else {
-                    newMsg = new TLRPC.TL_message();
-                }
-                newMsg.media = new TLRPC.TL_messageMediaDocument();
-                newMsg.media.document = document;
-                type = 7;
-                newMsg.message = "-1";
-                newMsg.attachPath = path;
-            } else if (audio != null) {
-                if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                    newMsg = new TLRPC.TL_message_secret();
-                } else {
-                    newMsg = new TLRPC.TL_message();
-                }
-                newMsg.media = new TLRPC.TL_messageMediaAudio();
-                newMsg.media.audio = audio;
-                type = 8;
-                newMsg.message = "-1";
-                newMsg.attachPath = path;
-            }
-            if (newMsg.attachPath == null) {
-                newMsg.attachPath = "";
-            }
-            newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
-            newMsg.from_id = UserConfig.getClientUserId();
-            newMsg.flags |= TLRPC.MESSAGE_FLAG_OUT;
-            UserConfig.saveConfig(false);
-        }
-        if (newMsg.random_id == 0) {
-            newMsg.random_id = getNextRandomId();
-        }
-        newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
-        newMsg.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
-        if (encryptedChat == null && high_id != 1 && newMsg.media instanceof TLRPC.TL_messageMediaAudio) {
-            newMsg.flags |= TLRPC.MESSAGE_FLAG_CONTENT_UNREAD;
-        }
-        newMsg.dialog_id = peer;
-        if (reply_to_msg != null) {
-            newMsg.flags |= TLRPC.MESSAGE_FLAG_REPLY;
-            newMsg.reply_to_msg_id = reply_to_msg.getId();
-        }
-        if (lower_id != 0) {
-            if (high_id == 1) {
-                if (currentChatInfo == null) {
-                    MessagesStorage.getInstance().markMessageAsSendError(newMsg.id);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsg.id);
-                    processSentMessage(newMsg.id);
-                    return;
-                }
-                sendToPeers = new ArrayList<>();
-                for (TLRPC.TL_chatParticipant participant : currentChatInfo.participants) {
-                    TLRPC.User sendToUser = MessagesController.getInstance().getUser(participant.user_id);
-                    TLRPC.InputUser peerUser = MessagesController.getInputUser(sendToUser);
-                    if (peerUser != null) {
-                        sendToPeers.add(peerUser);
-                    }
-                }
-                newMsg.to_id = new TLRPC.TL_peerChat();
-                newMsg.to_id.chat_id = lower_id;
-            } else {
-                if (lower_id < 0) {
-                    newMsg.to_id = new TLRPC.TL_peerChat();
-                    newMsg.to_id.chat_id = -lower_id;
-                    sendToPeer = new TLRPC.TL_inputPeerChat();
-                    sendToPeer.chat_id = -lower_id;
-                } else {
-                    newMsg.to_id = new TLRPC.TL_peerUser();
-                    newMsg.to_id.user_id = lower_id;
-
-                    TLRPC.User sendToUser = MessagesController.getInstance().getUser(lower_id);
-                    if (sendToUser == null) {
-                        processSentMessage(newMsg.id);
-                        return;
-                    }
-                    if (sendToUser instanceof TLRPC.TL_userForeign || sendToUser instanceof TLRPC.TL_userRequest) {
-                        sendToPeer = new TLRPC.TL_inputPeerForeign();
-                        sendToPeer.user_id = sendToUser.id;
-                        sendToPeer.access_hash = sendToUser.access_hash;
-                    } else {
-                        sendToPeer = new TLRPC.TL_inputPeerContact();
-                        sendToPeer.user_id = sendToUser.id;
-                    }
-                }
-            }
-        } else {
-            newMsg.to_id = new TLRPC.TL_peerUser();
-            if (encryptedChat.participant_id == UserConfig.getClientUserId()) {
-                newMsg.to_id.user_id = encryptedChat.admin_id;
-            } else {
-                newMsg.to_id.user_id = encryptedChat.participant_id;
-            }
-            newMsg.ttl = encryptedChat.ttl;
-            if (newMsg.ttl != 0) {
-                if (newMsg.media instanceof TLRPC.TL_messageMediaAudio) {
-                    newMsg.ttl = Math.max(encryptedChat.ttl, newMsg.media.audio.duration + 1);
-                } else if (newMsg.media instanceof TLRPC.TL_messageMediaVideo) {
-                    newMsg.ttl = Math.max(encryptedChat.ttl, newMsg.media.video.duration + 1);
-                }
-            }
-        }
-
-        MessageObject newMsgObj = new MessageObject(newMsg, null, true);
-        newMsgObj.replyMessageObject = reply_to_msg;
-        newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
-
-        ArrayList<MessageObject> objArr = new ArrayList<>();
-        objArr.add(newMsgObj);
-        ArrayList<TLRPC.Message> arr = new ArrayList<>();
-        arr.add(newMsg);
-        MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-        MessagesController.getInstance().updateInterfaceWithMessages(peer, objArr);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-
-        try {
-            if (type == 0) {
-                if (encryptedChat == null) {
-                    if (sendToPeers != null) {
-                        TLRPC.TL_messages_sendBroadcast reqSend = new TLRPC.TL_messages_sendBroadcast();
-                        ArrayList<Long> random_ids = new ArrayList<>();
-                        for (int a = 0; a < sendToPeers.size(); a++) {
-                            random_ids.add(Utilities.random.nextLong());
-                        }
-                        reqSend.message = message;
-                        reqSend.contacts = sendToPeers;
-                        reqSend.media = new TLRPC.TL_inputMediaEmpty();
-                        reqSend.random_id = random_ids;
-                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                    } else {
-                        TLRPC.TL_messages_sendMessage reqSend = new TLRPC.TL_messages_sendMessage();
-                        reqSend.message = message;
-                        reqSend.peer = sendToPeer;
-                        reqSend.random_id = newMsg.random_id;
-                        if (reply_to_msg != null) {
-                            reqSend.flags |= 1;
-                            reqSend.reply_to_msg_id = reply_to_msg.getId();
-                        }
-                        if (!searchLinks) {
-                            reqSend.flags |= 2;
-                        }
-                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                    }
-                } else {
-                    TLRPC.TL_decryptedMessage reqSend;
-                    if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                        reqSend = new TLRPC.TL_decryptedMessage();
-                        reqSend.ttl = newMsg.ttl;
-                    } else {
-                        reqSend = new TLRPC.TL_decryptedMessage_old();
-                        reqSend.random_bytes = new byte[15];
-                        Utilities.random.nextBytes(reqSend.random_bytes);
-                    }
-                    reqSend.random_id = newMsg.random_id;
-                    reqSend.message = message;
-                    reqSend.media = new TLRPC.TL_decryptedMessageMediaEmpty();
-                    SecretChatHelper.getInstance().performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, null, null);
-                }
-            } else if (type >= 1 && type <= 3 || type >= 5 && type <= 8) {
-                if (encryptedChat == null) {
-                    TLRPC.InputMedia inputMedia = null;
-                    DelayedMessage delayedMessage = null;
-                    if (type == 1) {
-                        if (location instanceof TLRPC.TL_messageMediaVenue) {
-                            inputMedia = new TLRPC.TL_inputMediaVenue();
-                            inputMedia.address = location.address;
-                            inputMedia.title = location.title;
-                            inputMedia.provider = location.provider;
-                            inputMedia.venue_id = location.venue_id;
-                        } else {
-                            inputMedia = new TLRPC.TL_inputMediaGeoPoint();
-                        }
-                        inputMedia.geo_point = new TLRPC.TL_inputGeoPoint();
-                        inputMedia.geo_point.lat = location.geo.lat;
-                        inputMedia.geo_point._long = location.geo._long;
-                    } else if (type == 2) {
-                        if (photo.access_hash == 0) {
-                            inputMedia = new TLRPC.TL_inputMediaUploadedPhoto();
-                            inputMedia.caption = photo.caption != null ? photo.caption : "";
-                            delayedMessage = new DelayedMessage();
-                            delayedMessage.originalPath = originalPath;
-                            delayedMessage.type = 0;
-                            delayedMessage.obj = newMsgObj;
-                            if (path != null && path.length() > 0 && path.startsWith("http")) {
-                                delayedMessage.httpLocation = path;
-                            } else {
-                                delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                            }
-                        } else {
-                            TLRPC.TL_inputMediaPhoto media = new TLRPC.TL_inputMediaPhoto();
-                            media.id = new TLRPC.TL_inputPhoto();
-                            media.caption = photo.caption != null ? photo.caption : "";
-                            media.id.id = photo.id;
-                            media.id.access_hash = photo.access_hash;
-                            inputMedia = media;
-                        }
-                    } else if (type == 3) {
-                        if (video.access_hash == 0) {
-                            if (video.thumb.location != null) {
-                                inputMedia = new TLRPC.TL_inputMediaUploadedThumbVideo();
-                            } else {
-                                inputMedia = new TLRPC.TL_inputMediaUploadedVideo();
-                            }
-                            inputMedia.caption = video.caption != null ? video.caption : "";
-                            inputMedia.duration = video.duration;
-                            inputMedia.w = video.w;
-                            inputMedia.h = video.h;
-                            inputMedia.mime_type = video.mime_type;
-                            delayedMessage = new DelayedMessage();
-                            delayedMessage.originalPath = originalPath;
-                            delayedMessage.type = 1;
-                            delayedMessage.obj = newMsgObj;
-                            delayedMessage.location = video.thumb.location;
-                            delayedMessage.videoLocation = video;
-                            delayedMessage.videoEditedInfo = videoEditedInfo;
-                        } else {
-                            TLRPC.TL_inputMediaVideo media = new TLRPC.TL_inputMediaVideo();
-                            media.id = new TLRPC.TL_inputVideo();
-                            media.caption = video.caption != null ? video.caption : "";
-                            media.id.id = video.id;
-                            media.id.access_hash = video.access_hash;
-                            inputMedia = media;
-                        }
-                    } else if (type == 6) {
-                        inputMedia = new TLRPC.TL_inputMediaContact();
-                        inputMedia.phone_number = user.phone;
-                        inputMedia.first_name = user.first_name;
-                        inputMedia.last_name = user.last_name;
-                    } else if (type == 7) {
-                        if (document.access_hash == 0) {
-                            if (document.thumb.location != null && document.thumb.location instanceof TLRPC.TL_fileLocation) {
-                                inputMedia = new TLRPC.TL_inputMediaUploadedThumbDocument();
-                            } else {
-                                inputMedia = new TLRPC.TL_inputMediaUploadedDocument();
-                            }
-                            inputMedia.mime_type = document.mime_type;
-                            inputMedia.attributes = document.attributes;
-                            delayedMessage = new DelayedMessage();
-                            delayedMessage.originalPath = originalPath;
-                            delayedMessage.type = 2;
-                            delayedMessage.obj = newMsgObj;
-                            if (path != null && path.length() > 0 && path.startsWith("http")) {
-                                delayedMessage.httpLocation = path;
-                            }
-                            delayedMessage.documentLocation = document;
-                            delayedMessage.location = document.thumb.location;
-                        } else {
-                            TLRPC.TL_inputMediaDocument media = new TLRPC.TL_inputMediaDocument();
-                            media.id = new TLRPC.TL_inputDocument();
-                            media.id.id = document.id;
-                            media.id.access_hash = document.access_hash;
-                            inputMedia = media;
-                        }
-                    } else if (type == 8) {
-                        if (audio.access_hash == 0) {
-                            inputMedia = new TLRPC.TL_inputMediaUploadedAudio();
-                            inputMedia.duration = audio.duration;
-                            inputMedia.mime_type = audio.mime_type;
-                            delayedMessage = new DelayedMessage();
-                            delayedMessage.type = 3;
-                            delayedMessage.obj = newMsgObj;
-                            delayedMessage.audioLocation = audio;
-                        } else {
-                            TLRPC.TL_inputMediaAudio media = new TLRPC.TL_inputMediaAudio();
-                            media.id = new TLRPC.TL_inputAudio();
-                            media.id.id = audio.id;
-                            media.id.access_hash = audio.access_hash;
-                            inputMedia = media;
-                        }
-                    }
-
-                    TLObject reqSend;
-
-                    if (sendToPeers != null) {
-                        TLRPC.TL_messages_sendBroadcast request = new TLRPC.TL_messages_sendBroadcast();
-                        ArrayList<Long> random_ids = new ArrayList<>();
-                        for (int a = 0; a < sendToPeers.size(); a++) {
-                            random_ids.add(Utilities.random.nextLong());
-                        }
-                        request.contacts = sendToPeers;
-                        request.media = inputMedia;
-                        request.random_id = random_ids;
-                        request.message = "";
-                        if (delayedMessage != null) {
-                            delayedMessage.sendRequest = request;
-                        }
-                        reqSend = request;
-                    } else {
-                        TLRPC.TL_messages_sendMedia request = new TLRPC.TL_messages_sendMedia();
-                        request.peer = sendToPeer;
-                        request.random_id = newMsg.random_id;
-                        request.media = inputMedia;
-                        if (reply_to_msg != null) {
-                            request.flags |= 1;
-                            request.reply_to_msg_id = reply_to_msg.getId();
-                        }
-                        if (delayedMessage != null) {
-                            delayedMessage.sendRequest = request;
-                        }
-                        reqSend = request;
-                    }
-                    if (type == 1) {
-                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                    } else if (type == 2) {
-                        if (photo.access_hash == 0) {
-                            performSendDelayedMessage(delayedMessage);
-                        } else {
-                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                        }
-                    } else if (type == 3) {
-                        if (video.access_hash == 0) {
-                            performSendDelayedMessage(delayedMessage);
-                        } else {
-                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                        }
-                    } else if (type == 6) {
-                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                    } else if (type == 7) {
-                        if (document.access_hash == 0) {
-                            performSendDelayedMessage(delayedMessage);
-                        } else {
-                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, originalPath);
-                        }
-                    } else if (type == 8) {
-                        if (audio.access_hash == 0) {
-                            performSendDelayedMessage(delayedMessage);
-                        } else {
-                            performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                        }
-                    }
-                } else {
-                    TLRPC.TL_decryptedMessage reqSend;
-                    if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                        reqSend = new TLRPC.TL_decryptedMessage();
-                        reqSend.ttl = newMsg.ttl;
-                    } else {
-                        reqSend = new TLRPC.TL_decryptedMessage_old();
-                        reqSend.random_bytes = new byte[15];
-                        Utilities.random.nextBytes(reqSend.random_bytes);
-                    }
-                    reqSend.random_id = newMsg.random_id;
-                    reqSend.message = "";
-                    if (type == 1) {
-                        reqSend.media = new TLRPC.TL_decryptedMessageMediaGeoPoint();
-                        reqSend.media.lat = location.geo.lat;
-                        reqSend.media._long = location.geo._long;
-                        SecretChatHelper.getInstance().performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, null, null);
-                    } else if (type == 2) {
-                        TLRPC.PhotoSize small = photo.sizes.get(0);
-                        TLRPC.PhotoSize big = photo.sizes.get(photo.sizes.size() - 1);
-                        reqSend.media = new TLRPC.TL_decryptedMessageMediaPhoto();
-                        ImageLoader.fillPhotoSizeWithBytes(small);
-                        if (small.bytes != null) {
-                            ((TLRPC.TL_decryptedMessageMediaPhoto) reqSend.media).thumb = small.bytes;
-                        } else {
-                            ((TLRPC.TL_decryptedMessageMediaPhoto) reqSend.media).thumb = new byte[0];
-                        }
-                        reqSend.media.thumb_h = small.h;
-                        reqSend.media.thumb_w = small.w;
-                        reqSend.media.w = big.w;
-                        reqSend.media.h = big.h;
-                        reqSend.media.size = big.size;
-                        if (big.location.key == null) {
-                            DelayedMessage delayedMessage = new DelayedMessage();
-                            delayedMessage.originalPath = originalPath;
-                            delayedMessage.sendEncryptedRequest = reqSend;
-                            delayedMessage.type = 0;
-                            delayedMessage.obj = newMsgObj;
-                            delayedMessage.encryptedChat = encryptedChat;
-                            if (path != null && path.length() > 0 && path.startsWith("http")) {
-                                delayedMessage.httpLocation = path;
-                            } else {
-                                delayedMessage.location = photo.sizes.get(photo.sizes.size() - 1).location;
-                            }
-                            performSendDelayedMessage(delayedMessage);
-                        } else {
-                            TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
-                            encryptedFile.id = big.location.volume_id;
-                            encryptedFile.access_hash = big.location.secret;
-                            reqSend.media.key = big.location.key;
-                            reqSend.media.iv = big.location.iv;
-                            SecretChatHelper.getInstance().performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, encryptedFile, null);
-                        }
-                    } else if (type == 3) {
-                        ImageLoader.fillPhotoSizeWithBytes(video.thumb);
-                        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                            reqSend.media = new TLRPC.TL_decryptedMessageMediaVideo();
-                            if (video.thumb != null && video.thumb.bytes != null) {
-                                ((TLRPC.TL_decryptedMessageMediaVideo) reqSend.media).thumb = video.thumb.bytes;
-                            } else {
-                                ((TLRPC.TL_decryptedMessageMediaVideo) reqSend.media).thumb = new byte[0];
-                            }
-                        } else {
-                            reqSend.media = new TLRPC.TL_decryptedMessageMediaVideo_old();
-                            if (video.thumb != null && video.thumb.bytes != null) {
-                                ((TLRPC.TL_decryptedMessageMediaVideo_old) reqSend.media).thumb = video.thumb.bytes;
-                            } else {
-                                ((TLRPC.TL_decryptedMessageMediaVideo_old) reqSend.media).thumb = new byte[0];
-                            }
-                        }
-                        reqSend.media.duration = video.duration;
-                        reqSend.media.size = video.size;
-                        reqSend.media.w = video.w;
-                        reqSend.media.h = video.h;
-                        reqSend.media.thumb_h = video.thumb.h;
-                        reqSend.media.thumb_w = video.thumb.w;
-                        reqSend.media.mime_type = "video/mp4";
-                        if (video.access_hash == 0) {
-                            DelayedMessage delayedMessage = new DelayedMessage();
-                            delayedMessage.originalPath = originalPath;
-                            delayedMessage.sendEncryptedRequest = reqSend;
-                            delayedMessage.type = 1;
-                            delayedMessage.obj = newMsgObj;
-                            delayedMessage.encryptedChat = encryptedChat;
-                            delayedMessage.videoLocation = video;
-                            delayedMessage.videoEditedInfo = videoEditedInfo;
-                            performSendDelayedMessage(delayedMessage);
-                        } else {
-                            TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
-                            encryptedFile.id = video.id;
-                            encryptedFile.access_hash = video.access_hash;
-                            reqSend.media.key = video.key;
-                            reqSend.media.iv = video.iv;
-                            SecretChatHelper.getInstance().performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, encryptedFile, null);
-                        }
-                    } else if (type == 6) {
-                        reqSend.media = new TLRPC.TL_decryptedMessageMediaContact();
-                        reqSend.media.phone_number = user.phone;
-                        reqSend.media.first_name = user.first_name;
-                        reqSend.media.last_name = user.last_name;
-                        reqSend.media.user_id = user.id;
-                        SecretChatHelper.getInstance().performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, null, null);
-                    } else if (type == 7) {
-                        boolean isSticker = false;
-                        for (TLRPC.DocumentAttribute attribute : document.attributes) {
-                            if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                                isSticker = true;
-                            }
-                        }
-                        if (isSticker) {
-                            reqSend.media = new TLRPC.TL_decryptedMessageMediaExternalDocument();
-                            reqSend.media.id = document.id;
-                            reqSend.media.date = document.date;
-                            reqSend.media.access_hash = document.access_hash;
-                            reqSend.media.mime_type = document.mime_type;
-                            reqSend.media.size = document.size;
-                            reqSend.media.dc_id = document.dc_id;
-                            reqSend.media.attributes = document.attributes;
-                            if (document.thumb == null) {
-                                ((TLRPC.TL_decryptedMessageMediaExternalDocument) reqSend.media).thumb = new TLRPC.TL_photoSizeEmpty();
-                            } else {
-                                ((TLRPC.TL_decryptedMessageMediaExternalDocument) reqSend.media).thumb = document.thumb;
-                            }
-                            SecretChatHelper.getInstance().performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, null, null);
-                        } else {
-                            ImageLoader.fillPhotoSizeWithBytes(document.thumb);
-                            reqSend.media = new TLRPC.TL_decryptedMessageMediaDocument();
-                            reqSend.media.size = document.size;
-                            if (document.thumb != null && document.thumb.bytes != null) {
-                                ((TLRPC.TL_decryptedMessageMediaDocument) reqSend.media).thumb = document.thumb.bytes;
-                                reqSend.media.thumb_h = document.thumb.h;
-                                reqSend.media.thumb_w = document.thumb.w;
-                            } else {
-                                ((TLRPC.TL_decryptedMessageMediaDocument) reqSend.media).thumb = new byte[0];
-                                reqSend.media.thumb_h = 0;
-                                reqSend.media.thumb_w = 0;
-                            }
-                            reqSend.media.file_name = FileLoader.getDocumentFileName(document);
-                            reqSend.media.mime_type = document.mime_type;
-
-                            if (document.access_hash == 0) {
-                                DelayedMessage delayedMessage = new DelayedMessage();
-                                delayedMessage.originalPath = originalPath;
-                                delayedMessage.sendEncryptedRequest = reqSend;
-                                delayedMessage.type = 2;
-                                delayedMessage.obj = newMsgObj;
-                                delayedMessage.encryptedChat = encryptedChat;
-                                if (path != null && path.length() > 0 && path.startsWith("http")) {
-                                    delayedMessage.httpLocation = path;
-                                }
-                                delayedMessage.documentLocation = document;
-                                performSendDelayedMessage(delayedMessage);
-                            } else {
-                                TLRPC.TL_inputEncryptedFile encryptedFile = new TLRPC.TL_inputEncryptedFile();
-                                encryptedFile.id = document.id;
-                                encryptedFile.access_hash = document.access_hash;
-                                reqSend.media.key = document.key;
-                                reqSend.media.iv = document.iv;
-                                SecretChatHelper.getInstance().performSendEncryptedRequest(reqSend, newMsgObj.messageOwner, encryptedChat, encryptedFile, null);
-                            }
-                        }
-                    } else if (type == 8) {
-                        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
-                            reqSend.media = new TLRPC.TL_decryptedMessageMediaAudio();
-                        } else {
-                            reqSend.media = new TLRPC.TL_decryptedMessageMediaAudio_old();
-                        }
-                        reqSend.media.duration = audio.duration;
-                        reqSend.media.size = audio.size;
-                        reqSend.media.mime_type = "audio/ogg";
-
-                        DelayedMessage delayedMessage = new DelayedMessage();
-                        delayedMessage.sendEncryptedRequest = reqSend;
-                        delayedMessage.type = 3;
-                        delayedMessage.obj = newMsgObj;
-                        delayedMessage.encryptedChat = encryptedChat;
-                        delayedMessage.audioLocation = audio;
-                        performSendDelayedMessage(delayedMessage);
-                    }
-                }
-            } else if (type == 4) {
-                TLRPC.TL_messages_forwardMessage reqSend = new TLRPC.TL_messages_forwardMessage();
-                reqSend.peer = sendToPeer;
-                reqSend.random_id = newMsg.random_id;
-                if (msgObj.getId() >= 0) {
-                    reqSend.id = msgObj.getId();
-                } else {
-                    reqSend.id = msgObj.messageOwner.fwd_msg_id;
-                }
-                performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.getId());
-            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.getId());
-            processSentMessage(newMsgObj.getId());
-        }
-    }
-
-    private void performSendDelayedMessage(final DelayedMessage message) {
-        if (message.type == 0) {
-            if (message.httpLocation != null) {
-                putToDelayedMessages(message.httpLocation, message);
-                ImageLoader.getInstance().loadHttpFile(message.httpLocation, "jpg");
-            } else {
-                String location = FileLoader.getPathToAttach(message.location, true).toString();
-                putToDelayedMessages(location, message);
-                if (message.sendRequest != null) {
-                    FileLoader.getInstance().uploadFile(location, false, true);
-                } else {
-                    FileLoader.getInstance().uploadFile(location, true, true);
-                }
-            }
-        } else if (message.type == 1) {
-            if (message.videoEditedInfo != null) {
-                String location = message.obj.messageOwner.attachPath;
-                if (location == null) {
-                    location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
-                }
-                putToDelayedMessages(location, message);
-                MediaController.getInstance().scheduleVideoConvert(message.obj);
-            } else {
-                if (message.sendRequest != null) {
-                    TLRPC.InputMedia media;
-                    if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
-                        media = ((TLRPC.TL_messages_sendMedia) message.sendRequest).media;
-                    } else {
-                        media = ((TLRPC.TL_messages_sendBroadcast) message.sendRequest).media;
-                    }
-                    if (media.file == null) {
-                        String location = message.obj.messageOwner.attachPath;
-                        if (location == null) {
-                            location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
-                        }
-                        putToDelayedMessages(location, message);
-                        if (message.obj.videoEditedInfo != null) {
-                            FileLoader.getInstance().uploadFile(location, false, false, message.videoLocation.size);
-                        } else {
-                            FileLoader.getInstance().uploadFile(location, false, false);
-                        }
-                    } else {
-                        String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
-                        putToDelayedMessages(location, message);
-                        FileLoader.getInstance().uploadFile(location, false, true);
-                    }
-                } else {
-                    String location = message.obj.messageOwner.attachPath;
-                    if (location == null) {
-                        location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.videoLocation.id + ".mp4";
-                    }
-                    putToDelayedMessages(location, message);
-                    if (message.obj.videoEditedInfo != null) {
-                        FileLoader.getInstance().uploadFile(location, true, false, message.videoLocation.size);
-                    } else {
-                        FileLoader.getInstance().uploadFile(location, true, false);
-                    }
-                }
-            }
-        } else if (message.type == 2) {
-            if (message.httpLocation != null) {
-                putToDelayedMessages(message.httpLocation, message);
-                ImageLoader.getInstance().loadHttpFile(message.httpLocation, "gif");
-            } else {
-                if (message.sendRequest != null) {
-                    TLRPC.InputMedia media;
-                    if (message.sendRequest instanceof TLRPC.TL_messages_sendMedia) {
-                        media = ((TLRPC.TL_messages_sendMedia) message.sendRequest).media;
-                    } else {
-                        media = ((TLRPC.TL_messages_sendBroadcast) message.sendRequest).media;
-                    }
-                    if (media.file == null) {
-                        String location = message.obj.messageOwner.attachPath;
-                        putToDelayedMessages(location, message);
-                        if (message.sendRequest != null) {
-                            FileLoader.getInstance().uploadFile(location, false, false);
-                        } else {
-                            FileLoader.getInstance().uploadFile(location, true, false);
-                        }
-                    } else if (media.thumb == null && message.location != null) {
-                        String location = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + message.location.volume_id + "_" + message.location.local_id + ".jpg";
-                        putToDelayedMessages(location, message);
-                        FileLoader.getInstance().uploadFile(location, false, true);
-                    }
-                } else {
-                    String location = message.obj.messageOwner.attachPath;
-                    putToDelayedMessages(location, message);
-                    FileLoader.getInstance().uploadFile(location, true, false);
-                }
-            }
-        } else if (message.type == 3) {
-            String location = message.obj.messageOwner.attachPath;
-            putToDelayedMessages(location, message);
-            if (message.sendRequest != null) {
-                FileLoader.getInstance().uploadFile(location, false, true);
-            } else {
-                FileLoader.getInstance().uploadFile(location, true, true);
-            }
-        }
-    }
-
-    protected void stopVideoService(final String path) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.stopEncodingService, path);
-                    }
-                });
-            }
-        });
-    }
-
-    protected void putToSendingMessages(TLRPC.Message message) {
-        sendingMessages.put(message.id, message);
-    }
-
-    protected void removeFromSendingMessages(int mid) {
-        sendingMessages.remove(mid);
-    }
-
-    public boolean isSendingMessage(int mid) {
-        return sendingMessages.containsKey(mid);
-    }
-
-    private void performSendMessageRequest(final TLObject req, final TLRPC.Message newMsgObj, final String originalPath) {
-        putToSendingMessages(newMsgObj);
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                boolean isSentError = false;
-                if (error == null) {
-                    final int oldId = newMsgObj.id;
-                    final boolean isBroadcast = req instanceof TLRPC.TL_messages_sendBroadcast;
-                    final ArrayList<TLRPC.Message> sentMessages = new ArrayList<>();
-                    final String attachPath = newMsgObj.attachPath;
-                    final boolean mediaUpdated = response instanceof TLRPC.messages_SentMessage && !(((TLRPC.messages_SentMessage) response).media instanceof TLRPC.TL_messageMediaEmpty);
-                    if (response instanceof TLRPC.messages_SentMessage) {
-                        TLRPC.messages_SentMessage res = (TLRPC.messages_SentMessage) response;
-                        newMsgObj.local_id = newMsgObj.id = res.id;
-                        newMsgObj.date = res.date;
-                        newMsgObj.media = res.media;
-                        if (res instanceof TLRPC.TL_messages_sentMessage) {
-                            MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.date, res.pts_count);
-                        } else if (res instanceof TLRPC.TL_messages_sentMessageLink) {
-                            MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.date, res.pts_count);
-                        }
-                        sentMessages.add(newMsgObj);
-                    } else if (response instanceof TLRPC.Updates) {
-                        TLRPC.TL_updateNewMessage newMessage = null;
-                        for (TLRPC.Update update : ((TLRPC.Updates) response).updates) {
-                            if (update instanceof TLRPC.TL_updateNewMessage) {
-                                newMessage = (TLRPC.TL_updateNewMessage) update;
-                                break;
-                            }
-                        }
-                        if (newMessage != null) {
-                            sentMessages.add(newMessage.message);
-                            newMsgObj.id = newMessage.message.id;
-                            processSentMessage(newMsgObj, newMessage.message, originalPath);
-                            MessagesController.getInstance().processNewDifferenceParams(-1, newMessage.pts, -1, newMessage.pts_count);
-                        } else {
-                            isSentError = true;
-                        }
-                    }
-
-                    if (!isSentError) {
-                        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, oldId, (isBroadcast ? oldId : newMsgObj.id), 0, false);
-                                MessagesStorage.getInstance().putMessages(sentMessages, true, false, isBroadcast, 0);
-                                if (isBroadcast) {
-                                    ArrayList<TLRPC.Message> currentMessage = new ArrayList<>();
-                                    currentMessage.add(newMsgObj);
-                                    newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                                    MessagesStorage.getInstance().putMessages(currentMessage, true, false, false, 0);
-                                }
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                                        if (isBroadcast) {
-                                            for (TLRPC.Message message : sentMessages) {
-                                                ArrayList<MessageObject> arr = new ArrayList<>();
-                                                MessageObject messageObject = new MessageObject(message, null, false);
-                                                arr.add(messageObject);
-                                                MessagesController.getInstance().updateInterfaceWithMessages(messageObject.getDialogId(), arr, true);
-                                            }
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                                        }
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.id), newMsgObj, mediaUpdated);
-                                        processSentMessage(oldId);
-                                        removeFromSendingMessages(oldId);
-                                    }
-                                });
-                                if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                    stopVideoService(attachPath);
-                                }
-                            }
-                        });
-                    }
-                } else {
-                    isSentError = true;
-                }
-                if (isSentError) {
-                    MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
-                            processSentMessage(newMsgObj.id);
-                            if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
-                                stopVideoService(newMsgObj.attachPath);
-                            }
-                            removeFromSendingMessages(newMsgObj.id);
-                        }
-                    });
-                }
-            }
-        }, new RPCRequest.RPCQuickAckDelegate() {
-            @Override
-            public void quickAck() {
-                final int msg_id = newMsgObj.id;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByAck, msg_id);
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress, ConnectionsManager.DEFAULT_DATACENTER_ID);
-    }
-
-    private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage, String originalPath) {
-        if (sentMessage == null) {
-            return;
-        }
-        if (sentMessage.media instanceof TLRPC.TL_messageMediaPhoto && sentMessage.media.photo != null && newMsg.media instanceof TLRPC.TL_messageMediaPhoto && newMsg.media.photo != null) {
-            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.photo, 0);
-
-            for (TLRPC.PhotoSize size : sentMessage.media.photo.sizes) {
-                if (size == null || size instanceof TLRPC.TL_photoSizeEmpty || size.type == null) {
-                    continue;
-                }
-                for (TLRPC.PhotoSize size2 : newMsg.media.photo.sizes) {
-                    if (size2 == null || size2.location == null || size2.type == null) {
-                        continue;
-                    }
-                    if (size2.location.volume_id == Integer.MIN_VALUE && size.type.equals(size2.type) || size.w == size2.w && size.h == size2.h) {
-                        String fileName = size2.location.volume_id + "_" + size2.location.local_id;
-                        String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                        if (fileName.equals(fileName2)) {
-                            break;
-                        }
-                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
-                        File cacheFile2;
-                        if (sentMessage.media.photo.sizes.size() == 1 || size.w > 90 || size.h > 90) {
-                            cacheFile2 = FileLoader.getPathToAttach(size);
-                        } else {
-                            cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
-                        }
-                        cacheFile.renameTo(cacheFile2);
-                        ImageLoader.getInstance().replaceImageInCache(fileName, fileName2, size.location);
-                        size2.location = size.location;
-                        break;
-                    }
-                }
-            }
-            sentMessage.message = newMsg.message;
-            sentMessage.attachPath = newMsg.attachPath;
-            newMsg.media.photo.id = sentMessage.media.photo.id;
-            newMsg.media.photo.access_hash = sentMessage.media.photo.access_hash;
-        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaVideo && sentMessage.media.video != null && newMsg.media instanceof TLRPC.TL_messageMediaVideo && newMsg.media.video != null) {
-            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.video, 2);
-
-            TLRPC.PhotoSize size2 = newMsg.media.video.thumb;
-            TLRPC.PhotoSize size = sentMessage.media.video.thumb;
-            if (size2.location != null && size2.location.volume_id == Integer.MIN_VALUE && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
-                String fileName = size2.location.volume_id + "_" + size2.location.local_id;
-                String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                if (!fileName.equals(fileName2)) {
-                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
-                    File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
-                    cacheFile.renameTo(cacheFile2);
-                    ImageLoader.getInstance().replaceImageInCache(fileName, fileName2, size.location);
-                    size2.location = size.location;
-                }
-            }
-
-            sentMessage.message = newMsg.message;
-            newMsg.media.video.dc_id = sentMessage.media.video.dc_id;
-            newMsg.media.video.id = sentMessage.media.video.id;
-            newMsg.media.video.access_hash = sentMessage.media.video.access_hash;
-
-            if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
-                File cacheFile = new File(newMsg.attachPath);
-                File cacheFile2 = FileLoader.getPathToAttach(newMsg.media.video);
-                if (!cacheFile.renameTo(cacheFile2)) {
-                    sentMessage.attachPath = newMsg.attachPath;
-                }
-            } else {
-                sentMessage.attachPath = newMsg.attachPath;
-            }
-        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaDocument && sentMessage.media.document != null && newMsg.media instanceof TLRPC.TL_messageMediaDocument && newMsg.media.document != null) {
-            MessagesStorage.getInstance().putSentFile(originalPath, sentMessage.media.document, 1);
-
-            TLRPC.PhotoSize size2 = newMsg.media.document.thumb;
-            TLRPC.PhotoSize size = sentMessage.media.document.thumb;
-            if (size2.location != null && size2.location.volume_id == Integer.MIN_VALUE && size.location != null && !(size instanceof TLRPC.TL_photoSizeEmpty) && !(size2 instanceof TLRPC.TL_photoSizeEmpty)) {
-                String fileName = size2.location.volume_id + "_" + size2.location.local_id;
-                String fileName2 = size.location.volume_id + "_" + size.location.local_id;
-                if (!fileName.equals(fileName2)) {
-                    File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName + ".jpg");
-                    File cacheFile2 = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName2 + ".jpg");
-                    cacheFile.renameTo(cacheFile2);
-                    ImageLoader.getInstance().replaceImageInCache(fileName, fileName2, size.location);
-                    size2.location = size.location;
-                }
-            } else if (MessageObject.isStickerMessage(sentMessage) && size2.location != null) {
-                size.location = size2.location;
-            }
-
-            newMsg.media.document.dc_id = sentMessage.media.document.dc_id;
-            newMsg.media.document.id = sentMessage.media.document.id;
-            newMsg.media.document.access_hash = sentMessage.media.document.access_hash;
-            newMsg.media.document.attributes = sentMessage.media.document.attributes;
-
-            if (newMsg.attachPath != null && newMsg.attachPath.startsWith(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE).getAbsolutePath())) {
-                File cacheFile = new File(newMsg.attachPath);
-                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.document);
-                if (!cacheFile.renameTo(cacheFile2)) {
-                    sentMessage.attachPath = newMsg.attachPath;
-                    sentMessage.message = newMsg.message;
-                } else {
-                    newMsg.attachPath = "";
-                    if (originalPath != null && originalPath.startsWith("http")) {
-                        MessagesStorage.getInstance().addRecentLocalFile(originalPath, cacheFile2.toString());
-                    }
-                }
-            } else {
-                sentMessage.attachPath = newMsg.attachPath;
-                sentMessage.message = newMsg.message;
-            }
-        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaAudio && sentMessage.media.audio != null && newMsg.media instanceof TLRPC.TL_messageMediaAudio && newMsg.media.audio != null) {
-            sentMessage.message = newMsg.message;
-
-            String fileName = newMsg.media.audio.dc_id + "_" + newMsg.media.audio.id + ".ogg";
-            newMsg.media.audio.dc_id = sentMessage.media.audio.dc_id;
-            newMsg.media.audio.id = sentMessage.media.audio.id;
-            newMsg.media.audio.access_hash = sentMessage.media.audio.access_hash;
-            String fileName2 = sentMessage.media.audio.dc_id + "_" + sentMessage.media.audio.id + ".ogg";
-            if (!fileName.equals(fileName2)) {
-                File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-                File cacheFile2 = FileLoader.getPathToAttach(sentMessage.media.audio);
-                if (!cacheFile.renameTo(cacheFile2)) {
-                    sentMessage.attachPath = newMsg.attachPath;
-                }
-            }
-        }
-    }
-
-    private void putToDelayedMessages(String location, DelayedMessage message) {
-        ArrayList<DelayedMessage> arrayList = delayedMessages.get(location);
-        if (arrayList == null) {
-            arrayList = new ArrayList<>();
-            delayedMessages.put(location, arrayList);
-        }
-        arrayList.add(message);
-    }
-
-    protected ArrayList<DelayedMessage> getDelayedMessages(String location) {
-        return delayedMessages.get(location);
-    }
-
-    protected long getNextRandomId() {
-        long val = 0;
-        while (val == 0) {
-            val = Utilities.random.nextLong();
-        }
-        return val;
-    }
-
-    public void checkUnsentMessages() {
-        MessagesStorage.getInstance().getUnsentMessages(1000);
-    }
-
-    protected void processUnsentMessages(final ArrayList<TLRPC.Message> messages, final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final ArrayList<TLRPC.EncryptedChat> encryptedChats) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                MessagesController.getInstance().putUsers(users, true);
-                MessagesController.getInstance().putChats(chats, true);
-                MessagesController.getInstance().putEncryptedChats(encryptedChats, true);
-                for (TLRPC.Message message : messages) {
-                    MessageObject messageObject = new MessageObject(message, null, false);
-                    retrySendMessage(messageObject, true);
-                }
-            }
-        });
-    }
-
-    public TLRPC.TL_photo generatePhotoSizes(String path, Uri imageUri) {
-        Bitmap bitmap = ImageLoader.loadBitmap(path, imageUri, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), true);
-        if (bitmap == null && AndroidUtilities.getPhotoSize() != 800) {
-            bitmap = ImageLoader.loadBitmap(path, imageUri, 800, 800, true);
-        }
-        ArrayList<TLRPC.PhotoSize> sizes = new ArrayList<>();
-        TLRPC.PhotoSize size = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, true);
-        if (size != null) {
-            sizes.add(size);
-        }
-        size = ImageLoader.scaleAndSaveImage(bitmap, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 80, false, 101, 101);
-        if (size != null) {
-            sizes.add(size);
-        }
-        if (bitmap != null) {
-            bitmap.recycle();
-        }
-        if (sizes.isEmpty()) {
-            return null;
-        } else {
-            UserConfig.saveConfig(false);
-            TLRPC.TL_photo photo = new TLRPC.TL_photo();
-            photo.user_id = UserConfig.getClientUserId();
-            photo.date = ConnectionsManager.getInstance().getCurrentTime();
-            photo.sizes = sizes;
-            photo.geo = new TLRPC.TL_geoPointEmpty();
-            return photo;
-        }
-    }
-
-    private static boolean prepareSendingDocumentInternal(String path, String originalPath, Uri uri, String mime, final long dialog_id, final MessageObject reply_to_msg) {
-        if ((path == null || path.length() == 0) && uri == null) {
-            return false;
-        }
-        MimeTypeMap myMime = MimeTypeMap.getSingleton();
-        if (uri != null) {
-            String extension = null;
-            if (mime != null) {
-                extension = myMime.getExtensionFromMimeType(mime);
-            }
-            if (extension == null) {
-                extension = "txt";
-            }
-            path = MediaController.copyDocumentToCache(uri, extension);
-            if (path == null) {
-                return false;
-            }
-        }
-        final File f = new File(path);
-        if (!f.exists() || f.length() == 0) {
-            return false;
-        }
-
-        boolean isEncrypted = (int) dialog_id == 0;
-        boolean allowSticker = !isEncrypted;
-
-        String name = f.getName();
-        String ext = "";
-        int idx = path.lastIndexOf(".");
-        if (idx != -1) {
-            ext = path.substring(idx + 1);
-        }
-        if (originalPath != null) {
-            originalPath += "" + f.length();
-        }
-
-        TLRPC.TL_document document = null;
-        if (!isEncrypted) {
-            document = (TLRPC.TL_document) MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 1 : 4);
-            if (document == null && !path.equals(originalPath) && !isEncrypted) {
-                document = (TLRPC.TL_document) MessagesStorage.getInstance().getSentFile(path + f.length(), !isEncrypted ? 1 : 4);
-            }
-        }
-        if (document == null) {
-            document = new TLRPC.TL_document();
-            document.id = 0;
-            document.date = ConnectionsManager.getInstance().getCurrentTime();
-            TLRPC.TL_documentAttributeFilename fileName = new TLRPC.TL_documentAttributeFilename();
-            fileName.file_name = name;
-            document.attributes.add(fileName);
-            document.size = (int) f.length();
-            document.dc_id = 0;
-            if (ext.length() != 0) {
-                if (ext.toLowerCase().equals("webp")) {
-                    document.mime_type = "image/webp";
-                } else {
-                    String mimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
-                    if (mimeType != null) {
-                        document.mime_type = mimeType;
-                    } else {
-                        document.mime_type = "application/octet-stream";
-                    }
-                }
-            } else {
-                document.mime_type = "application/octet-stream";
-            }
-            if (document.mime_type.equals("image/gif")) {
-                try {
-                    Bitmap bitmap = ImageLoader.loadBitmap(f.getAbsolutePath(), null, 90, 90, true);
-                    if (bitmap != null) {
-                        fileName.file_name = "animation.gif";
-                        document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, isEncrypted);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            if (document.mime_type.equals("image/webp") && allowSticker) {
-                BitmapFactory.Options bmOptions = new BitmapFactory.Options();
-                try {
-                    bmOptions.inJustDecodeBounds = true;
-                    RandomAccessFile file = new RandomAccessFile(path, "r");
-                    ByteBuffer buffer = file.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, path.length());
-                    Utilities.loadWebpImage(buffer, buffer.limit(), bmOptions);
-                    file.close();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                if (bmOptions.outWidth != 0 && bmOptions.outHeight != 0 && bmOptions.outWidth <= 800 && bmOptions.outHeight <= 800) {
-                    TLRPC.TL_documentAttributeSticker attributeSticker;
-                    if (isEncrypted) {
-                        attributeSticker = new TLRPC.TL_documentAttributeSticker_old();
-                    } else {
-                        attributeSticker = new TLRPC.TL_documentAttributeSticker();
-                        attributeSticker.alt = "";
-                        attributeSticker.stickerset = new TLRPC.TL_inputStickerSetEmpty();
-                    }
-                    document.attributes.add(attributeSticker);
-                    TLRPC.TL_documentAttributeImageSize attributeImageSize = new TLRPC.TL_documentAttributeImageSize();
-                    attributeImageSize.w = bmOptions.outWidth;
-                    attributeImageSize.h = bmOptions.outHeight;
-                    document.attributes.add(attributeImageSize);
-                }
-            }
-            if (document.thumb == null) {
-                document.thumb = new TLRPC.TL_photoSizeEmpty();
-                document.thumb.type = "s";
-            }
-        }
-
-        final TLRPC.TL_document documentFinal = document;
-        final String originalPathFinal = originalPath;
-        final String pathFinal = path;
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id, reply_to_msg);
-            }
-        });
-        return true;
-    }
-
-    public static void prepareSendingDocument(String path, String originalPath, Uri uri, String mine, long dialog_id, MessageObject reply_to_msg) {
-        if ((path == null || originalPath == null) && uri == null) {
-            return;
-        }
-        ArrayList<String> paths = new ArrayList<>();
-        ArrayList<String> originalPaths = new ArrayList<>();
-        ArrayList<Uri> uris = null;
-        if (uri != null) {
-            uris = new ArrayList<>();
-        }
-        paths.add(path);
-        originalPaths.add(originalPath);
-        prepareSendingDocuments(paths, originalPaths, uris, mine, dialog_id, reply_to_msg);
-    }
-
-    public static void prepareSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths, final ArrayList<Uri> uris, final String mime, final long dialog_id, final MessageObject reply_to_msg) {
-        if (paths == null && originalPaths == null && uris == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
-            return;
-        }
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean error = false;
-                if (paths != null) {
-                    for (int a = 0; a < paths.size(); a++) {
-                        if (!prepareSendingDocumentInternal(paths.get(a), originalPaths.get(a), null, mime, dialog_id, reply_to_msg)) {
-                            error = true;
-                        }
-                    }
-                }
-                if (uris != null) {
-                    for (int a = 0; a < uris.size(); a++) {
-                        if (!prepareSendingDocumentInternal(null, null, uris.get(a), mime, dialog_id, reply_to_msg)) {
-                            error = true;
-                        }
-                    }
-                }
-                if (error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                Toast toast = Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
-                                toast.show();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    });
-                }
-            }
-        }).start();
-    }
-
-    public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long dialog_id, MessageObject reply_to_msg, CharSequence caption) {
-        ArrayList<String> paths = null;
-        ArrayList<Uri> uris = null;
-        ArrayList<String> captions = null;
-        if (imageFilePath != null && imageFilePath.length() != 0) {
-            paths = new ArrayList<>();
-            paths.add(imageFilePath);
-        }
-        if (imageUri != null) {
-            uris = new ArrayList<>();
-            uris.add(imageUri);
-        }
-        if (caption != null) {
-            captions = new ArrayList<>();
-            captions.add(caption.toString());
-        }
-        prepareSendingPhotos(paths, uris, dialog_id, reply_to_msg, captions);
-    }
-
-    public static void prepareSendingPhotosSearch(final ArrayList<MediaController.SearchImage> photos, final long dialog_id, final MessageObject reply_to_msg) {
-        if (photos == null || photos.isEmpty()) {
-            return;
-        }
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean isEncrypted = (int) dialog_id == 0;
-                for (int a = 0; a < photos.size(); a++) {
-                    final MediaController.SearchImage searchImage = photos.get(a);
-                    if (searchImage.type == 1) {
-                        TLRPC.TL_document document = null;
-                        if (!isEncrypted) {
-                            document = (TLRPC.TL_document) MessagesStorage.getInstance().getSentFile(searchImage.imageUrl, !isEncrypted ? 1 : 4);
-                        }
-                        String md5 = Utilities.MD5(searchImage.imageUrl) + "." + ImageLoader.getHttpUrlExtension(searchImage.imageUrl);
-                        File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), md5);
-                        if (document == null) {
-                            File thumbFile;
-                            document = new TLRPC.TL_document();
-                            document.id = 0;
-                            document.date = ConnectionsManager.getInstance().getCurrentTime();
-                            TLRPC.TL_documentAttributeFilename fileName = new TLRPC.TL_documentAttributeFilename();
-                            fileName.file_name = "animation.gif";
-                            document.attributes.add(fileName);
-                            document.size = searchImage.size;
-                            document.dc_id = 0;
-                            document.mime_type = "image/gif";
-                            if (cacheFile.exists()) {
-                                thumbFile = cacheFile;
-                            } else {
-                                cacheFile = null;
-                                String thumb = Utilities.MD5(searchImage.thumbUrl) + "." + ImageLoader.getHttpUrlExtension(searchImage.imageUrl);
-                                thumbFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), thumb);
-                                if (!thumbFile.exists()) {
-                                    thumbFile = null;
-                                }
-                            }
-                            if (thumbFile != null) {
-                                try {
-                                    Bitmap bitmap = ImageLoader.loadBitmap(thumbFile.getAbsolutePath(), null, 90, 90, true);
-                                    if (bitmap != null) {
-                                        document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, isEncrypted);
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            } else {
-                                document.thumb = new TLRPC.TL_photoSize();
-                                document.thumb.w = searchImage.width;
-                                document.thumb.h = searchImage.height;
-                                document.thumb.size = 0;
-                                document.thumb.location = new TLRPC.TL_fileLocationUnavailable();
-                                document.thumb.type = "x";
-                            }
-                        }
-
-                        final TLRPC.TL_document documentFinal = document;
-                        final String originalPathFinal = searchImage.imageUrl;
-                        final String pathFinal = cacheFile == null ? searchImage.imageUrl : cacheFile.toString();
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id, reply_to_msg);
-                            }
-                        });
-                    } else {
-                        boolean needDownloadHttp = true;
-                        TLRPC.TL_photo photo = null;
-                        if (!isEncrypted) {
-                            photo = (TLRPC.TL_photo) MessagesStorage.getInstance().getSentFile(searchImage.imageUrl, !isEncrypted ? 0 : 3);
-                        }
-                        if (photo == null) {
-                            String md5 = Utilities.MD5(searchImage.imageUrl) + "." + ImageLoader.getHttpUrlExtension(searchImage.imageUrl);
-                            File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), md5);
-                            if (cacheFile.exists() && cacheFile.length() != 0) {
-                                photo = SendMessagesHelper.getInstance().generatePhotoSizes(cacheFile.toString(), null);
-                                if (photo != null) {
-                                    needDownloadHttp = false;
-                                }
-                            }
-                            if (photo == null) {
-                                md5 = Utilities.MD5(searchImage.thumbUrl) + "." + ImageLoader.getHttpUrlExtension(searchImage.thumbUrl);
-                                cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), md5);
-                                if (cacheFile.exists()) {
-                                    photo = SendMessagesHelper.getInstance().generatePhotoSizes(cacheFile.toString(), null);
-                                }
-                                if (photo == null) {
-                                    photo = new TLRPC.TL_photo();
-                                    photo.user_id = UserConfig.getClientUserId();
-                                    photo.date = ConnectionsManager.getInstance().getCurrentTime();
-                                    photo.geo = new TLRPC.TL_geoPointEmpty();
-                                    TLRPC.TL_photoSize photoSize = new TLRPC.TL_photoSize();
-                                    photoSize.w = searchImage.width;
-                                    photoSize.h = searchImage.height;
-                                    photoSize.size = 0;
-                                    photoSize.location = new TLRPC.TL_fileLocationUnavailable();
-                                    photoSize.type = "x";
-                                    photo.sizes.add(photoSize);
-                                }
-                            }
-                        }
-                        if (photo != null) {
-                            if (searchImage.caption != null) {
-                                photo.caption = searchImage.caption.toString();
-                            }
-                            final String originalPathFinal = searchImage.imageUrl;
-                            final TLRPC.TL_photo photoFinal = photo;
-                            final boolean needDownloadHttpFinal = needDownloadHttp;
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, needDownloadHttpFinal ? searchImage.imageUrl : null, dialog_id, reply_to_msg);
-                                }
-                            });
-                        }
-                    }
-                }
-            }
-        }).start();
-    }
-
-    private static String getTrimmedString(String src) {
-        String result = src.trim();
-        if (result.length() == 0) {
-            return result;
-        }
-        while (src.startsWith("\n")) {
-            src = src.substring(1);
-        }
-        while (src.endsWith("\n")) {
-            src = src.substring(0, src.length() - 1);
-        }
-        return src;
-    }
-
-    public static void prepareSendingText(String text, long dialog_id) {
-        text = getTrimmedString(text);
-        if (text.length() != 0) {
-            int count = (int) Math.ceil(text.length() / 4096.0f);
-            for (int a = 0; a < count; a++) {
-                String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
-                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, null, null, true);
-            }
-        }
-    }
-
-    public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id, final MessageObject reply_to_msg, final ArrayList<String> captions) {
-        if (paths == null && uris == null || paths != null && paths.isEmpty() || uris != null && uris.isEmpty()) {
-            return;
-        }
-        final ArrayList<String> pathsCopy = new ArrayList<>();
-        final ArrayList<Uri> urisCopy = new ArrayList<>();
-        if (paths != null) {
-            pathsCopy.addAll(paths);
-        }
-        if (uris != null) {
-            urisCopy.addAll(uris);
-        }
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean isEncrypted = (int) dialog_id == 0;
-
-                ArrayList<String> sendAsDocuments = null;
-                ArrayList<String> sendAsDocumentsOriginal = null;
-                int count = !pathsCopy.isEmpty() ? pathsCopy.size() : urisCopy.size();
-                String path = null;
-                Uri uri = null;
-                String extension = null;
-                for (int a = 0; a < count; a++) {
-                    if (!pathsCopy.isEmpty()) {
-                        path = pathsCopy.get(a);
-                    } else if (!urisCopy.isEmpty()) {
-                        uri = urisCopy.get(a);
-                    }
-
-                    String originalPath = path;
-                    String tempPath = path;
-                    if (tempPath == null && uri != null) {
-                        tempPath = AndroidUtilities.getPath(uri);
-                        originalPath = uri.toString();
-                    }
-
-                    boolean isDocument = false;
-                    if (tempPath != null && (tempPath.endsWith(".gif") || tempPath.endsWith(".webp"))) {
-                        if (tempPath.endsWith(".gif")) {
-                            extension = "gif";
-                        } else {
-                            extension = "webp";
-                        }
-                        isDocument = true;
-                    } else if (tempPath == null && uri != null) {
-                        if (MediaController.isGif(uri)) {
-                            isDocument = true;
-                            originalPath = uri.toString();
-                            tempPath = MediaController.copyDocumentToCache(uri, "gif");
-                            extension = "gif";
-                        } else if (MediaController.isWebp(uri)) {
-                            isDocument = true;
-                            originalPath = uri.toString();
-                            tempPath = MediaController.copyDocumentToCache(uri, "webp");
-                            extension = "webp";
-                        }
-                    }
-
-                    if (isDocument) {
-                        if (sendAsDocuments == null) {
-                            sendAsDocuments = new ArrayList<>();
-                            sendAsDocumentsOriginal = new ArrayList<>();
-                        }
-                        sendAsDocuments.add(tempPath);
-                        sendAsDocumentsOriginal.add(originalPath);
-                    } else {
-                        if (tempPath != null) {
-                            File temp = new File(tempPath);
-                            originalPath += temp.length() + "_" + temp.lastModified();
-                        } else {
-                            originalPath = null;
-                        }
-                        TLRPC.TL_photo photo = null;
-                        if (!isEncrypted) {
-                            photo = (TLRPC.TL_photo) MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 0 : 3);
-                            if (photo == null && uri != null) {
-                                photo = (TLRPC.TL_photo) MessagesStorage.getInstance().getSentFile(AndroidUtilities.getPath(uri), !isEncrypted ? 0 : 3);
-                            }
-                        }
-                        if (photo == null) {
-                            photo = SendMessagesHelper.getInstance().generatePhotoSizes(path, uri);
-                        }
-                        if (photo != null) {
-                            if (captions != null) {
-                                photo.caption = captions.get(a);
-                            }
-                            final String originalPathFinal = originalPath;
-                            final TLRPC.TL_photo photoFinal = photo;
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, null, dialog_id, reply_to_msg);
-                                }
-                            });
-                        }
-                    }
-                }
-                if (sendAsDocuments != null && !sendAsDocuments.isEmpty()) {
-                    for (int a = 0; a < sendAsDocuments.size(); a++) {
-                        prepareSendingDocumentInternal(sendAsDocuments.get(a), sendAsDocumentsOriginal.get(a), null, extension, dialog_id, reply_to_msg);
-                    }
-                }
-            }
-        }).start();
-    }
-
-    public static void prepareSendingVideo(final String videoPath, final long estimatedSize, final long duration, final int width, final int height, final VideoEditedInfo videoEditedInfo, final long dialog_id, final MessageObject reply_to_msg) {
-        if (videoPath == null || videoPath.length() == 0) {
-            return;
-        }
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-
-                boolean isEncrypted = (int) dialog_id == 0;
-
-                if (videoEditedInfo != null || videoPath.endsWith("mp4")) {
-                    String path = videoPath;
-                    String originalPath = videoPath;
-                    File temp = new File(originalPath);
-                    originalPath += temp.length() + "_" + temp.lastModified();
-                    if (videoEditedInfo != null) {
-                        originalPath += duration + "_" + videoEditedInfo.startTime + "_" + videoEditedInfo.endTime;
-                        if (videoEditedInfo.resultWidth == videoEditedInfo.originalWidth) {
-                            originalPath += "_" + videoEditedInfo.resultWidth;
-                        }
-                    }
-                    TLRPC.TL_video video = null;
-                    if (!isEncrypted) {
-                        video = (TLRPC.TL_video) MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 2 : 5);
-                    }
-                    if (video == null) {
-                        Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
-                        TLRPC.PhotoSize size = ImageLoader.scaleAndSaveImage(thumb, 90, 90, 55, isEncrypted);
-                        video = new TLRPC.TL_video();
-                        video.thumb = size;
-                        if (video.thumb == null) {
-                            video.thumb = new TLRPC.TL_photoSizeEmpty();
-                            video.thumb.type = "s";
-                        } else {
-                            video.thumb.type = "s";
-                        }
-                        video.mime_type = "video/mp4";
-                        video.id = 0;
-                        UserConfig.saveConfig(false);
-
-                        if (videoEditedInfo != null) {
-                            video.duration = (int) (duration / 1000);
-                            if (videoEditedInfo.rotationValue == 90 || videoEditedInfo.rotationValue == 270) {
-                                video.w = height;
-                                video.h = width;
-                            } else {
-                                video.w = width;
-                                video.h = height;
-                            }
-                            video.size = (int) estimatedSize;
-                            String fileName = Integer.MIN_VALUE + "_" + UserConfig.lastLocalId + ".mp4";
-                            UserConfig.lastLocalId--;
-                            File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-                            UserConfig.saveConfig(false);
-                            path = cacheFile.getAbsolutePath();
-                        } else {
-                            if (temp.exists()) {
-                                video.size = (int) temp.length();
-                            }
-                            boolean infoObtained = false;
-                            if (Build.VERSION.SDK_INT >= 14) {
-                                MediaMetadataRetriever mediaMetadataRetriever = null;
-                                try {
-                                    mediaMetadataRetriever = new MediaMetadataRetriever();
-                                    mediaMetadataRetriever.setDataSource(videoPath);
-                                    String width = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH);
-                                    if (width != null) {
-                                        video.w = Integer.parseInt(width);
-                                    }
-                                    String height = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT);
-                                    if (height != null) {
-                                        video.h = Integer.parseInt(height);
-                                    }
-                                    String duration = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
-                                    if (duration != null) {
-                                        video.duration = (int) Math.ceil(Long.parseLong(duration) / 1000.0f);
-                                    }
-                                    infoObtained = true;
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                } finally {
-                                    try {
-                                        if (mediaMetadataRetriever != null) {
-                                            mediaMetadataRetriever.release();
-                                        }
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            }
-                            if (!infoObtained) {
-                                try {
-                                    MediaPlayer mp = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(videoPath)));
-                                    if (mp != null) {
-                                        video.duration = (int) Math.ceil(mp.getDuration() / 1000.0f);
-                                        video.w = mp.getVideoWidth();
-                                        video.h = mp.getVideoHeight();
-                                        mp.release();
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        }
-                    }
-                    final TLRPC.TL_video videoFinal = video;
-                    final String originalPathFinal = originalPath;
-                    final String finalPath = path;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            SendMessagesHelper.getInstance().sendMessage(videoFinal, videoEditedInfo, originalPathFinal, finalPath, dialog_id, reply_to_msg);
-                        }
-                    });
-                } else {
-                    prepareSendingDocumentInternal(videoPath, videoPath, null, null, dialog_id, reply_to_msg);
-                }
-            }
-        }).start();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java b/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
deleted file mode 100644
index 0c1df4802..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.android;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.telephony.SmsMessage;
-
-import org.telegram.messenger.FileLog;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class SmsListener extends BroadcastReceiver {
-
-    private SharedPreferences preferences;
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        if(intent.getAction().equals("android.provider.Telephony.SMS_RECEIVED")) {
-            if (!AndroidUtilities.isWaitingForSms()) {
-                return;
-            }
-            Bundle bundle = intent.getExtras();
-            SmsMessage[] msgs;
-            if (bundle != null) {
-                try {
-                    Object[] pdus = (Object[]) bundle.get("pdus");
-                    msgs = new SmsMessage[pdus.length];
-                    String wholeString = "";
-                    for(int i = 0; i < msgs.length; i++){
-                        msgs[i] = SmsMessage.createFromPdu((byte[])pdus[i]);
-                        wholeString += msgs[i].getMessageBody();
-                    }
-
-                    try {
-                        Pattern pattern = Pattern.compile("[0-9]+");
-                        final Matcher matcher = pattern.matcher(wholeString);
-                        if (matcher.find()) {
-                            String str = matcher.group(0);
-                            if (str.length() >= 3) {
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceiveSmsCode, matcher.group(0));
-                                    }
-                                });
-                            }
-                        }
-                    } catch (Throwable e) {
-                        FileLog.e("tmessages", e);
-                    }
-
-                } catch(Throwable e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/VideoEditedInfo.java b/TMessagesProj/src/main/java/org/telegram/android/VideoEditedInfo.java
deleted file mode 100644
index ef14750e3..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/VideoEditedInfo.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import java.util.Locale;
-
-public class VideoEditedInfo {
-    public long startTime;
-    public long endTime;
-    public int rotationValue;
-    public int originalWidth;
-    public int originalHeight;
-    public int resultWidth;
-    public int resultHeight;
-    public int bitrate;
-    public String originalPath;
-
-    public String getString() {
-        return String.format(Locale.US, "-1_%d_%d_%d_%d_%d_%d_%d_%d_%s", startTime, endTime, rotationValue, originalWidth, originalHeight, bitrate, resultWidth, resultHeight, originalPath);
-    }
-
-    public void parseString(String string) {
-        if (string.length() < 6) {
-            return;
-        }
-        String args[] = string.split("_");
-        if (args.length >= 10) {
-            startTime = Long.parseLong(args[1]);
-            endTime = Long.parseLong(args[2]);
-            rotationValue = Integer.parseInt(args[3]);
-            originalWidth = Integer.parseInt(args[4]);
-            originalHeight = Integer.parseInt(args[5]);
-            bitrate = Integer.parseInt(args[6]);
-            resultWidth = Integer.parseInt(args[7]);
-            resultHeight = Integer.parseInt(args[8]);
-            for (int a = 9; a < args.length; a++) {
-                if (originalPath == null) {
-                    originalPath = args[a];
-                } else {
-                    originalPath += "_" + args[a];
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java b/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java
deleted file mode 100644
index 734fbf202..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.app.Service;
-import android.content.Intent;
-import android.os.IBinder;
-import android.support.v4.app.NotificationCompat;
-import android.support.v4.app.NotificationManagerCompat;
-
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.ApplicationLoader;
-
-public class VideoEncodingService extends Service implements NotificationCenter.NotificationCenterDelegate {
-
-    private NotificationCompat.Builder builder = null;
-    private String path = null;
-    private int currentProgress = 0;
-
-    public VideoEncodingService() {
-        super();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileUploadProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.stopEncodingService);
-    }
-
-    public IBinder onBind(Intent arg2) {
-        return null;
-    }
-
-    public void onDestroy() {
-        stopForeground(true);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileUploadProgressChanged);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.stopEncodingService);
-        FileLog.e("tmessages", "destroy video service");
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.FileUploadProgressChanged) {
-            String fileName = (String)args[0];
-            if (path != null && path.equals(fileName)) {
-                Float progress = (Float) args[1];
-                Boolean enc = (Boolean) args[2];
-                currentProgress = (int)(progress * 100);
-                builder.setProgress(100, currentProgress, currentProgress == 0);
-                NotificationManagerCompat.from(ApplicationLoader.applicationContext).notify(4, builder.build());
-            }
-        } else if (id == NotificationCenter.stopEncodingService) {
-            String filepath = (String)args[0];
-            if (filepath == null || filepath.equals(path)) {
-                stopSelf();
-            }
-        }
-    }
-
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        path = intent.getStringExtra("path");
-        if (path == null) {
-            stopSelf();
-            return Service.START_NOT_STICKY;
-        }
-        FileLog.e("tmessages", "start video service");
-        if (builder == null) {
-            builder = new NotificationCompat.Builder(ApplicationLoader.applicationContext);
-            builder.setSmallIcon(android.R.drawable.stat_sys_upload);
-            builder.setWhen(System.currentTimeMillis());
-            builder.setContentTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setTicker(LocaleController.getString("SendingVideo", R.string.SendingVideo));
-            builder.setContentText(LocaleController.getString("SendingVideo", R.string.SendingVideo));
-        }
-        currentProgress = 0;
-        builder.setProgress(100, currentProgress, currentProgress == 0);
-        startForeground(4, builder.build());
-        NotificationManagerCompat.from(ApplicationLoader.applicationContext).notify(4, builder.build());
-        return Service.START_NOT_STICKY;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java
deleted file mode 100644
index dfde54421..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.RemoteInput;
-
-public class WearReplyReceiver extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);
-        if (remoteInput == null) {
-            return;
-        }
-        CharSequence text = remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
-        if (text == null || text.length() == 0) {
-            return;
-        }
-        long dialog_id = intent.getLongExtra("dialog_id", 0);
-        int max_id = intent.getIntExtra("max_id", 0);
-        if (dialog_id == 0 || max_id == 0) {
-            return;
-        }
-        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, null, null, true);
-        MessagesController.getInstance().markDialogAsRead(dialog_id, max_id, max_id, 0, 0, true, false);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/query/StickersQuery.java b/TMessagesProj/src/main/java/org/telegram/android/query/StickersQuery.java
deleted file mode 100644
index 9b247d8e8..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/query/StickersQuery.java
+++ /dev/null
@@ -1,437 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.android.query;
-
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.os.Message;
-import android.widget.Toast;
-
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.StickersAlert;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-
-public class StickersQuery {
-
-    private static String hash;
-    private static int loadDate;
-    private static ArrayList<TLRPC.Document> stickers = new ArrayList<>();
-    private static HashMap<String, ArrayList<TLRPC.Document>> allStickers = new HashMap<>();
-    private static ArrayList<TLRPC.TL_stickerPack> stickerPacks = new ArrayList<>();
-    private static ArrayList<TLRPC.TL_stickerSet> stickerSets = new ArrayList<>();
-    private static HashMap<Long, ArrayList<TLRPC.Document>> stickersBySets = new HashMap<>();
-    private static HashMap<Long, String> stickersByEmoji = new HashMap<>();
-    private static boolean loadingStickers;
-    private static boolean stickersLoaded;
-    private static boolean hideMainStickersPack;
-
-    public static void checkStickers() {
-        if (!loadingStickers && (!stickersLoaded || loadDate < (System.currentTimeMillis() / 1000 - 60 * 60))) {
-            loadStickers(true, false);
-        }
-    }
-
-    public static boolean isLoadingStickers() {
-        return loadingStickers;
-    }
-
-    public static HashMap<String, ArrayList<TLRPC.Document>> getAllStickers() {
-        return allStickers;
-    }
-
-    public static ArrayList<TLRPC.Document> getStickersForSet(long id) {
-        return stickersBySets.get(id);
-    }
-
-    public static ArrayList<TLRPC.TL_stickerPack> getStickerPacks() {
-        return stickerPacks;
-    }
-
-    public static ArrayList<TLRPC.Document> getStickers() {
-        return stickers;
-    }
-
-    public static ArrayList<TLRPC.TL_stickerSet> getStickerSets() {
-        return stickerSets;
-    }
-
-    public static boolean isStickerPackInstalled(long id) {
-        return stickersBySets.containsKey(id);
-    }
-
-    public static String getEmojiForSticker(long id) {
-        String value = stickersByEmoji.get(id);
-        return value != null ? value : "";
-    }
-
-    public static void loadStickers(boolean cache, boolean force) {
-        if (loadingStickers) {
-            return;
-        }
-        loadingStickers = true;
-        if (cache) {
-            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    TLRPC.messages_AllStickers result = null;
-                    int date = 0;
-                    try {
-                        SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT value FROM keyvalue WHERE id = 'hide_stickers'");
-                        if (cursor.next()) {
-                            int value = Utilities.parseInt(cursor.stringValue(0));
-                            hideMainStickersPack = value == 1;
-                        }
-                        cursor.dispose();
-
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT data, date FROM stickers WHERE 1");
-                        ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
-                        if (cursor.next()) {
-                            ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                result = TLRPC.messages_AllStickers.TLdeserialize(data, data.readInt32(false), false);
-                            }
-                            date = cursor.intValue(1);
-                            MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    processLoadedStickers(result, true, date);
-                }
-            });
-        } else {
-            TLRPC.TL_messages_getAllStickers req = new TLRPC.TL_messages_getAllStickers();
-            req.hash = hash == null || force ? "" : hash;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            processLoadedStickers((TLRPC.messages_AllStickers) response, false, (int) (System.currentTimeMillis() / 1000));
-                        }
-                    });
-                }
-            });
-        }
-    }
-
-    private static void putStickersToCache(final TLRPC.TL_messages_allStickers stickers) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO stickers VALUES(?, ?, ?)");
-                    state.requery();
-                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(stickers.getObjectSize());
-                    stickers.serializeToStream(data);
-                    state.bindInteger(1, 1);
-                    state.bindByteBuffer(2, data.buffer);
-                    state.bindInteger(3, (int) (System.currentTimeMillis() / 1000));
-                    state.step();
-                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                    state.dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private static long getStickerSetId(TLRPC.Document document) {
-        for (TLRPC.DocumentAttribute attribute : document.attributes) {
-            if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                if (attribute.stickerset instanceof TLRPC.TL_inputStickerSetID) {
-                    return attribute.stickerset.id;
-                }
-                break;
-            }
-        }
-        return -1;
-    }
-
-    private static void processLoadedStickers(final TLRPC.messages_AllStickers res, final boolean cache, final int date) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                loadingStickers = false;
-                stickersLoaded = true;
-            }
-        });
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if ((res == null || date < (int) (System.currentTimeMillis() / 1000 - 60 * 60)) && cache) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            loadStickers(false, false);
-                        }
-                    });
-                    if (res == null) {
-                        return;
-                    }
-                }
-                if (res instanceof TLRPC.TL_messages_allStickers) {
-                    HashMap<Long, TLRPC.Document> documents = new HashMap<>();
-                    final HashMap<Long, ArrayList<TLRPC.Document>> sets = new HashMap<>();
-                    final ArrayList<TLRPC.Document> allDocuments = new ArrayList<>();
-                    final HashMap<Long, String> stickersEmoji = new HashMap<>();
-                    for (TLRPC.Document document : res.documents) {
-                        if (document == null) {
-                            continue;
-                        }
-
-                        documents.put(document.id, document);
-                        long setId = getStickerSetId(document);
-                        if (setId != -1 || setId == -1 && !hideMainStickersPack) {
-                            allDocuments.add(document);
-                        }
-                        ArrayList<TLRPC.Document> docs = sets.get(setId);
-                        if (docs == null) {
-                            docs = new ArrayList<>();
-                            sets.put(setId, docs);
-                            if (setId == -1) {
-                                boolean contain = false;
-                                for (TLRPC.TL_stickerSet set : res.sets) {
-                                    if (set.id == setId) {
-                                        contain = true;
-                                        break;
-                                    }
-                                }
-                                if (!contain) {
-                                    TLRPC.TL_stickerSet set = new TLRPC.TL_stickerSet();
-                                    set.title = set.short_name = "";
-                                    set.id = -1;
-                                    res.sets.add(0, set);
-                                }
-                            }
-                        }
-                        docs.add(document);
-                    }
-                    final HashMap<String, ArrayList<TLRPC.Document>> result = new HashMap<>();
-                    for (TLRPC.TL_stickerPack stickerPack : res.packs) {
-                        if (stickerPack != null && stickerPack.emoticon != null) {
-                            stickerPack.emoticon = stickerPack.emoticon.replace("\uFE0F", "");
-                            ArrayList<TLRPC.Document> arrayList = result.get(stickerPack.emoticon);
-                            for (Long id : stickerPack.documents) {
-                                if (!stickersEmoji.containsKey(id)) {
-                                    stickersEmoji.put(id, stickerPack.emoticon);
-                                }
-                                TLRPC.Document document = documents.get(id);
-                                if (document != null) {
-                                    long setId = getStickerSetId(document);
-                                    if (setId == -1 && hideMainStickersPack) {
-                                        continue;
-                                    }
-
-                                    if (arrayList == null) {
-                                        arrayList = new ArrayList<>();
-                                        result.put(stickerPack.emoticon, arrayList);
-                                    }
-                                    arrayList.add(document);
-                                }
-                            }
-                        }
-                    }
-                    Collections.sort(allDocuments, new Comparator<TLRPC.Document>() {
-                        @Override
-                        public int compare(TLRPC.Document lhs, TLRPC.Document rhs) {
-                            long lid = getStickerSetId(lhs);
-                            long rid = getStickerSetId(rhs);
-                            if (lid < rid) {
-                                return -1;
-                            } else if (lid > rid) {
-                                return 1;
-                            }
-                            return 0;
-                        }
-                    });
-                    if (!cache) {
-                        putStickersToCache((TLRPC.TL_messages_allStickers) res);
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            stickerSets = res.sets;
-                            allStickers = result;
-                            stickers = allDocuments;
-                            stickersBySets = sets;
-                            stickersByEmoji = stickersEmoji;
-                            hash = res.hash;
-                            loadDate = date;
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.stickersDidLoaded);
-                        }
-                    });
-                }
-            }
-        });
-    }
-
-    public static void loadStickers(final BaseFragment fragment, final TLRPC.InputStickerSet stickerSet) {
-        if (fragment == null || stickerSet == null) {
-            return;
-        }
-
-        final ProgressDialog progressDialog = new ProgressDialog(fragment.getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-
-        TLRPC.TL_messages_getStickerSet req = new TLRPC.TL_messages_getStickerSet();
-        req.stickerset = stickerSet;
-
-        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            progressDialog.dismiss();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        if (fragment != null && fragment.getParentActivity() != null && !fragment.getParentActivity().isFinishing()) {
-                            if (error == null) {
-                                final TLRPC.TL_messages_stickerSet res = (TLRPC.TL_messages_stickerSet) response;
-
-                                StickersAlert alert = new StickersAlert(fragment.getParentActivity(), res.set, res.documents);
-                                if (res.set == null || !StickersQuery.isStickerPackInstalled(res.set.id)) {
-                                    alert.setButton(AlertDialog.BUTTON_POSITIVE, LocaleController.getString("AddStickers", R.string.AddStickers), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            TLRPC.TL_messages_installStickerSet req = new TLRPC.TL_messages_installStickerSet();
-                                            req.stickerset = stickerSet;
-                                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                                @Override
-                                                public void run(TLObject response, final TLRPC.TL_error error) {
-                                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                                        @Override
-                                                        public void run() {
-                                                            if (fragment != null && fragment.getParentActivity() != null) {
-                                                                if (error == null) {
-                                                                    Toast.makeText(fragment.getParentActivity(), LocaleController.getString("AddStickersInstalled", R.string.AddStickersInstalled), Toast.LENGTH_SHORT).show();
-                                                                } else {
-                                                                    Toast.makeText(fragment.getParentActivity(), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
-                                                                }
-                                                            }
-                                                            loadStickers(false, true);
-                                                        }
-                                                    });
-                                                }
-                                            });
-                                        }
-                                    });
-                                } else {
-                                    alert.setButton(AlertDialog.BUTTON_NEUTRAL, LocaleController.getString("StickersRemove", R.string.StickersRemove), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            removeStickersSet(fragment.getParentActivity(), res.set);
-                                        }
-                                    });
-                                }
-                                alert.setButton(AlertDialog.BUTTON_NEGATIVE, LocaleController.getString("Close", R.string.Close), (Message) null);
-                                fragment.setVisibleDialog(alert);
-                                alert.show();
-                            } else {
-                                Toast.makeText(fragment.getParentActivity(), LocaleController.getString("AddStickersNotFound", R.string.AddStickersNotFound), Toast.LENGTH_SHORT).show();
-                            }
-                        }
-                    }
-                });
-            }
-        });
-
-        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                try {
-                    dialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        fragment.setVisibleDialog(progressDialog);
-        progressDialog.show();
-    }
-
-    public static void setHideMainStickersPack(final boolean value) {
-        hideMainStickersPack = value;
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO keyvalue VALUES(?, ?)");
-                    state.requery();
-                    state.bindString(1, "hide_stickers");
-                    state.bindString(2, value ? "1" : "0");
-                    state.step();
-                    state.dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public static void removeStickersSet(final Context context, TLRPC.TL_stickerSet stickerSet) {
-        TLRPC.TL_messages_uninstallStickerSet req = new TLRPC.TL_messages_uninstallStickerSet();
-        req.stickerset = new TLRPC.TL_inputStickerSetID();
-        req.stickerset.access_hash = stickerSet.access_hash;
-        req.stickerset.id = stickerSet.id;
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            if (error == null) {
-                                Toast.makeText(context, LocaleController.getString("StickersRemoved", R.string.StickersRemoved), Toast.LENGTH_SHORT).show();
-                            } else {
-                                Toast.makeText(context, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
-                            }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        loadStickers(false, true);
-                    }
-                });
-            }
-        });
-    }
-
-    public static boolean getHideMainStickersPack() {
-        return hideMainStickersPack;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index c7b0937a6..4ff44e874 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -33,10 +33,10 @@
 import org.telegram.android.ContactsController;
 import org.telegram.android.MediaController;
 import org.telegram.android.NotificationsService;
-import org.telegram.android.SendMessagesHelper;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NativeLoader;
+import org.telegram.android.PostsController;
 import org.telegram.android.ScreenReceiver;
 import org.telegram.ui.Components.ForegroundDetector;
 
@@ -159,11 +159,10 @@ public static void postInitApplication() {
         UserConfig.loadConfig();
         MessagesController.getInstance();
         if (UserConfig.getCurrentUser() != null) {
-            MessagesController.getInstance().putUser(UserConfig.getCurrentUser(), true);
-            ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
+            PostsController.getInstance().setUser(UserConfig.getCurrentUser());
+//            ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
             ConnectionsManager.getInstance().initPushConnection();
             MessagesController.getInstance().getBlockedUsers(true);
-            SendMessagesHelper.getInstance().checkUnsentMessages();
         }
 
         ApplicationLoader app = (ApplicationLoader)ApplicationLoader.applicationContext;
@@ -329,7 +328,7 @@ public void run() {
                 UserConfig.pushString = regid;
                 UserConfig.registeredForPush = !isNew;
                 UserConfig.saveConfig(false);
-                if (UserConfig.getClientUserId() != 0) {
+                if (UserConfig.getClientUserId() != null) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 658896f07..9a0914f32 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -185,7 +185,6 @@ public void run() {
                             generatePing();
                         }
                         if (!updatingDcSettings && lastDcUpdateTime < (int) (System.currentTimeMillis() / 1000) - DC_UPDATE_TIME) {
-                            updateDcSettings(0);
                         }
                         processRequestQueue(0, 0);
                     } else {
@@ -771,23 +770,7 @@ public void run() {
         });
     }
 
-    public void applyDcPushUpdate(final int dc, final String ip_address, final int port) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                Datacenter exist = datacenterWithId(dc);
-                if (exist != null) {
-                    ArrayList<String> addresses = new ArrayList<>();
-                    HashMap<String, Integer> ports = new HashMap<>();
-                    addresses.add(ip_address);
-                    ports.put(ip_address, port);
-                    exist.replaceAddressesAndPorts(addresses, ports, 0);
-                    exist.suspendConnections();
-                    updateDcSettings(dc);
-                }
-            }
-        });
-    }
+
 
     public void initPushConnection() {
         Utilities.stageQueue.postRunnable(new Runnable() {
@@ -812,89 +795,9 @@ public void run() {
         });
     }
 
-    public void applyCountryPortNumber(final String phone) {
-        if (phone == null || phone.length() == 0) {
-            return;
-        }
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (phone.startsWith("968")) {
-                    for (HashMap.Entry<Integer, Datacenter> entry : datacenters.entrySet()) {
-                        Datacenter datacenter = entry.getValue();
-                        datacenter.overridePort = 8888;
-                        datacenter.suspendConnections();
-                    }
-                } else {
-                    for (HashMap.Entry<Integer, Datacenter> entry : datacenters.entrySet()) {
-                        Datacenter datacenter = entry.getValue();
-                        datacenter.overridePort = -1;
-                    }
-                }
-            }
-        });
-    }
 
-    public void updateDcSettings(int dcNum) {
-        if (updatingDcSettings) {
-            return;
-        }
-        updatingDcStartTime = (int) (System.currentTimeMillis() / 1000);
-        updatingDcSettings = true;
-        TLRPC.TL_help_getConfig getConfig = new TLRPC.TL_help_getConfig();
 
-        ConnectionsManager.getInstance().performRpc(getConfig, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                if (!updatingDcSettings) {
-                    return;
-                }
-                if (error == null) {
-                    TLRPC.TL_config config = (TLRPC.TL_config) response;
-                    int updateIn = config.expires - getCurrentTime();
-                    if (updateIn <= 0) {
-                        updateIn = 120;
-                    }
-                    lastDcUpdateTime = (int) (System.currentTimeMillis() / 1000) - DC_UPDATE_TIME + updateIn;
-                    ArrayList<Datacenter> datacentersArr = new ArrayList<>();
-                    HashMap<Integer, Datacenter> datacenterMap = new HashMap<>();
-                    for (TLRPC.TL_dcOption datacenterDesc : config.dc_options) {
-                        Datacenter existing = datacenterMap.get(datacenterDesc.id);
-                        if (existing == null) {
-                            existing = new Datacenter();
-                            existing.datacenterId = datacenterDesc.id;
-                            datacentersArr.add(existing);
-                            datacenterMap.put(existing.datacenterId, existing);
-                        }
-                        existing.addAddressAndPort(datacenterDesc.ip_address, datacenterDesc.port, datacenterDesc.flags);
-                    }
 
-                    if (!datacentersArr.isEmpty()) {
-                        for (Datacenter datacenter : datacentersArr) {
-                            Datacenter exist = datacenterWithId(datacenter.datacenterId);
-                            if (exist == null) {
-                                datacenters.put(datacenter.datacenterId, datacenter);
-                            } else {
-                                exist.replaceAddressesAndPorts(datacenter.addressesIpv4, datacenter.ports, 0);
-                                exist.replaceAddressesAndPorts(datacenter.addressesIpv6, datacenter.ports, 1);
-                                exist.replaceAddressesAndPorts(datacenter.addressesIpv4Download, datacenter.ports, 2);
-                                exist.replaceAddressesAndPorts(datacenter.addressesIpv6Download, datacenter.ports, 3);
-                            }
-                            if (datacenter.datacenterId == movingToDatacenterId) {
-                                movingToDatacenterId = DEFAULT_DATACENTER_ID;
-                                moveToDatacenter(datacenter.datacenterId);
-                            }
-                        }
-                        saveSession();
-
-                        processRequestQueue(RPCRequest.RPCRequestClassTransportMask, 0);
-                    }
-                    MessagesController.getInstance().updateConfig(config);
-                }
-                updatingDcSettings = false;
-            }
-        }, null, true, RPCRequest.RPCRequestClassEnableUnauthorized | RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassTryDifferentDc, dcNum == 0 ? currentDatacenterId : dcNum);
-    }
 
     private TLObject wrapInLayer(TLObject object, int datacenterId, RPCRequest request) {
         if (object.layer() > 0) {
@@ -1561,7 +1464,6 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         }
 
         if (!unknownDatacenterIds.isEmpty() && !updatingDcSettings) {
-            updateDcSettings(0);
         }
 
         for (int num : neededDatacenterIds) {
@@ -2142,7 +2044,6 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
 
                 if (migrateToDatacenterId != DEFAULT_DATACENTER_ID) {
                     ignoreResult = true;
-                    moveToDatacenter(migrateToDatacenterId);
                 }
             }
 
@@ -2264,7 +2165,8 @@ public void run() {
                                         AndroidUtilities.runOnUIThread(new Runnable() {
                                             @Override
                                             public void run() {
-                                                MessagesController.getInstance().performLogout(false);
+//                                                MessagesController.getInstance().performLogout(false);
+//                                                MessagesController.getInstance().performLogout(false);
                                             }
                                         });
                                     }
@@ -2788,83 +2690,9 @@ public TLObject getRequestWithMessageId(long msgId) {
     // Move to datacenter manage
     //================================================================================
 
-    void moveToDatacenter(final int datacenterId) {
-        if (movingToDatacenterId == datacenterId) {
-            return;
-        }
-        movingToDatacenterId = datacenterId;
 
-        Datacenter currentDatacenter = datacenterWithId(currentDatacenterId);
-        clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, currentDatacenter);
-        clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, currentDatacenter);
-        clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, currentDatacenter);
 
-        if (UserConfig.isClientActivated()) {
-            TLRPC.TL_auth_exportAuthorization exportAuthorization = new TLRPC.TL_auth_exportAuthorization();
-            exportAuthorization.dc_id = datacenterId;
 
-            performRpc(exportAuthorization, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        movingAuthorization = (TLRPC.TL_auth_exportedAuthorization) response;
-                        authorizeOnMovingDatacenter();
-                    } else {
-                        Utilities.stageQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                moveToDatacenter(datacenterId);
-                            }
-                        }, 1000);
-                    }
-                }
-            }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin, currentDatacenterId);
-        } else {
-            authorizeOnMovingDatacenter();
-        }
-    }
-
-    void authorizeOnMovingDatacenter() {
-        Datacenter datacenter = datacenterWithId(movingToDatacenterId);
-        if (datacenter == null) {
-            if (!updatingDcSettings) {
-                updateDcSettings(0);
-            }
-            return;
-        }
-
-        datacenter.recreateSessions();
-
-        clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
-        clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
-        clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, datacenter);
-
-        if (datacenter.authKey == null) {
-            datacenter.clearServerSalts();
-            HandshakeAction actor = new HandshakeAction(datacenter);
-            actor.delegate = this;
-            dequeueActor(actor, true);
-        }
-
-        if (movingAuthorization != null) {
-            TLRPC.TL_auth_importAuthorization importAuthorization = new TLRPC.TL_auth_importAuthorization();
-            importAuthorization.id = UserConfig.getClientUserId();
-            importAuthorization.bytes = movingAuthorization.bytes;
-            performRpc(importAuthorization, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    movingAuthorization = null;
-                    if (error == null) {
-                        authorizedOnMovingDatacenter();
-                    } else {
-                        moveToDatacenter(movingToDatacenterId);
-                    }
-                }
-            }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin, datacenter.datacenterId);
-        } else {
-            authorizedOnMovingDatacenter();
-        }
-    }
 
     void authorizedOnMovingDatacenter() {
         Datacenter datacenter = datacenterWithId(currentDatacenterId);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index b8a4e30bd..6a918fd6e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -13,12 +13,14 @@
 import android.util.Base64;
 
 import org.telegram.android.MessagesStorage;
+import org.telegram.messenger.dto.User;
+import org.telegram.messenger.service.mock.UserServiceMock;
 
 import java.io.File;
 
 public class UserConfig {
 
-    private static TLRPC.User currentUser;
+    private static User currentUser;
     public static boolean registeredForPush = false;
     public static boolean registeredForInternalPush = false;
     public static String pushString = "";
@@ -80,7 +82,7 @@ public static void saveConfig(boolean withFile, File oldFile) {
                 if (currentUser != null) {
                     if (withFile) {
                         SerializedData data = new SerializedData();
-                        currentUser.serializeToStream(data);
+//                        currentUser.serializeToStream(data);
                         String userString = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
                         editor.putString("user", userString);
                         data.cleanup();
@@ -101,24 +103,27 @@ public static void saveConfig(boolean withFile, File oldFile) {
 
     //TODO activated user.
     public static boolean isClientActivated() {
+        if(true){
+            return true;
+        }
         synchronized (sync) {
             return currentUser != null;
         }
     }
 
-    public static int getClientUserId() {
+    public static String getClientUserId() {
         synchronized (sync) {
-            return currentUser != null ? currentUser.id : 0;
+            return currentUser != null ? currentUser.getId() : null;
         }
     }
 
-    public static TLRPC.User getCurrentUser() {
+    public static User getCurrentUser() {
         synchronized (sync) {
             return currentUser;
         }
     }
 
-    public static void setCurrentUser(TLRPC.User user) {
+    public static void setCurrentUser(User user) {
         synchronized (sync) {
             currentUser = user;
         }
@@ -133,7 +138,8 @@ public static void loadConfig() {
                     int ver = data.readInt32(false);
                     if (ver == 1) {
                         int constructor = data.readInt32(false);
-                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, constructor, false);
+//                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, constructor, false);
+                        currentUser = UserServiceMock.getRandomUser();
                         MessagesStorage.lastDateValue = data.readInt32(false);
                         MessagesStorage.lastPtsValue = data.readInt32(false);
                         MessagesStorage.lastSeqValue = data.readInt32(false);
@@ -160,7 +166,8 @@ public void run() {
                         });
                     } else if (ver == 2) {
                         int constructor = data.readInt32(false);
-                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, constructor, false);
+//                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, constructor, false);
+                        currentUser = UserServiceMock.getRandomUser();
 
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("userconfing", Context.MODE_PRIVATE);
                         registeredForPush = preferences.getBoolean("registeredForPush", false);
@@ -212,7 +219,8 @@ public void run() {
                     byte[] userBytes = Base64.decode(user, Base64.DEFAULT);
                     if (userBytes != null) {
                         SerializedData data = new SerializedData(userBytes);
-                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, data.readInt32(false), false);
+//                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, data.readInt32(false), false);
+                        currentUser = UserServiceMock.getRandomUser();
                         data.cleanup();
                     }
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
deleted file mode 100644
index 312038997..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
+++ /dev/null
@@ -1,275 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.MentionCell;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-
-public class MentionsAdapter extends BaseSearchAdapter {
-
-    public interface MentionsAdapterDelegate {
-        void needChangePanelVisibility(boolean show);
-    }
-
-    private Context mContext;
-    private TLRPC.ChatParticipants info;
-    private ArrayList<TLRPC.User> searchResultUsernames;
-    private ArrayList<String> searchResultHashtags;
-    private MentionsAdapterDelegate delegate;
-    private int resultStartPosition;
-    private int resultLength;
-    private String lastText;
-    private int lastPosition;
-    private ArrayList<MessageObject> messages;
-    private boolean needUsernames = true;
-    private boolean isDarkTheme;
-
-    public MentionsAdapter(Context context, boolean isDarkTheme, MentionsAdapterDelegate delegate) {
-        mContext = context;
-        this.delegate = delegate;
-        this.isDarkTheme = isDarkTheme;
-    }
-
-    public void setChatInfo(TLRPC.ChatParticipants chatParticipants) {
-        info = chatParticipants;
-        if (lastText != null) {
-            searchUsernameOrHashtag(lastText, lastPosition, messages);
-        }
-    }
-
-    public void setNeedUsernames(boolean value) {
-        needUsernames = value;
-    }
-
-    @Override
-    public void clearRecentHashtags() {
-        super.clearRecentHashtags();
-        searchResultHashtags.clear();
-        notifyDataSetChanged();
-        if (delegate != null) {
-            delegate.needChangePanelVisibility(false);
-        }
-    }
-
-    @Override
-    protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, HashtagObject> hashMap) {
-        super.setHashtags(arrayList, hashMap);
-        if (lastText != null) {
-            searchUsernameOrHashtag(lastText, lastPosition, messages);
-        }
-    }
-
-    public void searchUsernameOrHashtag(String text, int position, ArrayList<MessageObject> messageObjects) {
-        if (text == null || text.length() == 0) {
-            delegate.needChangePanelVisibility(false);
-            lastText = null;
-            return;
-        }
-        int searchPostion = position;
-        if (text.length() > 0) {
-            searchPostion--;
-        }
-        lastText = null;
-        StringBuilder result = new StringBuilder();
-        int foundType = -1;
-        boolean hasIllegalUsernameCharacters = false;
-        for (int a = searchPostion; a >= 0; a--) {
-            if (a >= text.length()) {
-                continue;
-            }
-            char ch = text.charAt(a);
-            if (a == 0 || text.charAt(a - 1) == ' ' || text.charAt(a - 1) == '\n') {
-                if (needUsernames && ch == '@') {
-                    if (hasIllegalUsernameCharacters) {
-                        delegate.needChangePanelVisibility(false);
-                        return;
-                    }
-                    if (info == null) {
-                        lastText = text;
-                        lastPosition = position;
-                        messages = messageObjects;
-                        delegate.needChangePanelVisibility(false);
-                        return;
-                    }
-                    foundType = 0;
-                    resultStartPosition = a;
-                    resultLength = result.length() + 1;
-                    break;
-                } else if (ch == '#') {
-                    if (!hashtagsLoadedFromDb) {
-                        loadRecentHashtags();
-                        lastText = text;
-                        lastPosition = position;
-                        messages = messageObjects;
-                        delegate.needChangePanelVisibility(false);
-                        return;
-                    }
-                    foundType = 1;
-                    resultStartPosition = a;
-                    resultLength = result.length() + 1;
-                    result.insert(0, ch);
-                    break;
-                }
-            }
-            if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
-                hasIllegalUsernameCharacters = true;
-            }
-            result.insert(0, ch);
-        }
-        if (foundType == -1) {
-            delegate.needChangePanelVisibility(false);
-            return;
-        }
-        if (foundType == 0) {
-            final ArrayList<Integer> users = new ArrayList<>();
-            for (int a = 0; a < Math.min(100, messageObjects.size()); a++) {
-                int from_id = messageObjects.get(a).messageOwner.from_id;
-                if (!users.contains(from_id)) {
-                    users.add(from_id);
-                }
-            }
-            String usernameString = result.toString().toLowerCase();
-            ArrayList<TLRPC.User> newResult = new ArrayList<>();
-            for (TLRPC.TL_chatParticipant chatParticipant : info.participants) {
-                TLRPC.User user = MessagesController.getInstance().getUser(chatParticipant.user_id);
-                if (user == null || user instanceof TLRPC.TL_userSelf) {
-                    continue;
-                }
-                if (user.username != null && user.username.length() > 0 && (usernameString.length() > 0 && user.username.toLowerCase().startsWith(usernameString) || usernameString.length() == 0)) {
-                    newResult.add(user);
-                }
-            }
-            searchResultHashtags = null;
-            searchResultUsernames = newResult;
-            Collections.sort(searchResultUsernames, new Comparator<TLRPC.User>() {
-                @Override
-                public int compare(TLRPC.User lhs, TLRPC.User rhs) {
-                    int lhsNum = users.indexOf(lhs.id);
-                    int rhsNum = users.indexOf(rhs.id);
-                    if (lhsNum != -1 && rhsNum != -1) {
-                        return lhsNum < rhsNum ? -1 : (lhsNum == rhsNum ? 0 : 1);
-                    } else if (lhsNum != -1 && rhsNum == -1) {
-                        return -1;
-                    } else if (lhsNum == -1 && rhsNum != -1) {
-                        return 1;
-                    }
-                    return 0;
-                }
-            });
-            notifyDataSetChanged();
-            delegate.needChangePanelVisibility(!newResult.isEmpty());
-        } else {
-            ArrayList<String> newResult = new ArrayList<>();
-            String hashtagString = result.toString().toLowerCase();
-            for (HashtagObject hashtagObject : hashtags) {
-                if (hashtagString != null && hashtagObject.hashtag != null && hashtagObject.hashtag.startsWith(hashtagString)) {
-                    newResult.add(hashtagObject.hashtag);
-                }
-            }
-            searchResultHashtags = newResult;
-            searchResultUsernames = null;
-            notifyDataSetChanged();
-            delegate.needChangePanelVisibility(!newResult.isEmpty());
-        }
-    }
-
-    public int getResultStartPosition() {
-        return resultStartPosition;
-    }
-
-    public int getResultLength() {
-        return resultLength;
-    }
-
-    @Override
-    public int getViewTypeCount() {
-        return 1;
-    }
-
-    @Override
-    public int getCount() {
-        if (searchResultUsernames != null) {
-            return searchResultUsernames.size();
-        } else if (searchResultHashtags != null) {
-            return searchResultHashtags.size();
-        }
-        return 0;
-    }
-
-    @Override
-    public boolean isEmpty() {
-        if (searchResultUsernames != null) {
-            return searchResultUsernames.isEmpty();
-        } else if (searchResultHashtags != null) {
-            return searchResultHashtags.isEmpty();
-        }
-        return true;
-    }
-
-    @Override
-    public int getItemViewType(int position) {
-        return 0;
-    }
-
-    @Override
-    public boolean hasStableIds() {
-        return true;
-    }
-
-    @Override
-    public boolean areAllItemsEnabled() {
-        return true;
-    }
-
-    @Override
-    public boolean isEnabled(int position) {
-        return true;
-    }
-
-    @Override
-    public Object getItem(int i) {
-        if (searchResultUsernames != null) {
-            if (i < 0 || i >= searchResultUsernames.size()) {
-                return null;
-            }
-            return searchResultUsernames.get(i);
-        } else if (searchResultHashtags != null) {
-            if (i < 0 || i >= searchResultHashtags.size()) {
-                return null;
-            }
-            return searchResultHashtags.get(i);
-        }
-        return null;
-    }
-
-    @Override
-    public View getView(int i, View view, ViewGroup viewGroup) {
-        if (view == null) {
-            view = new MentionCell(mContext);
-            ((MentionCell) view).setIsDarkTheme(isDarkTheme);
-        }
-        if (searchResultUsernames != null) {
-            ((MentionCell) view).setUser(searchResultUsernames.get(i));
-        } else if (searchResultHashtags != null) {
-            ((MentionCell) view).setText(searchResultHashtags.get(i));
-        }
-        return view;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
deleted file mode 100644
index 5b8f96c46..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ /dev/null
@@ -1,896 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Path;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.text.style.ClickableSpan;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.Emoji;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.android.MessageObject;
-import org.telegram.android.ImageReceiver;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.StaticLayoutEx;
-
-public class ChatBaseCell extends BaseCell {
-
-    public interface ChatBaseCellDelegate {
-        void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user);
-        void didPressedCancelSendButton(ChatBaseCell cell);
-        void didLongPressed(ChatBaseCell cell);
-        void didPressReplyMessage(ChatBaseCell cell, int id);
-        void didPressUrl(String url);
-        void needOpenWebView(String url, String title, String originalUrl, int w, int h);
-        boolean canPerformActions();
-    }
-
-    protected class MyPath extends Path {
-
-        private StaticLayout currentLayout;
-        private int currentLine;
-        private float lastTop = -1;
-
-        public void setCurrentLayout(StaticLayout layout, int start) {
-            currentLayout = layout;
-            currentLine = layout.getLineForOffset(start);
-            lastTop = -1;
-        }
-
-        @Override
-        public void addRect(float left, float top, float right, float bottom, Direction dir) {
-            if (lastTop == -1) {
-                lastTop = top;
-            } else if (lastTop != top) {
-                lastTop = top;
-                currentLine++;
-            }
-            float lineRight = currentLayout.getLineRight(currentLine);
-            float lineLeft = currentLayout.getLineLeft(currentLine);
-            if (left >= lineRight) {
-                return;
-            }
-            if (right > lineRight) {
-                right = lineRight;
-            }
-            if (left < lineLeft) {
-                left = lineLeft;
-            }
-            super.addRect(left, top, right, bottom, dir);
-        }
-    }
-
-    protected ClickableSpan pressedLink;
-    protected boolean linkPreviewPressed;
-    protected MyPath urlPath = new MyPath();
-    protected static Paint urlPaint;
-
-    public boolean isChat = false;
-    protected boolean isPressed = false;
-    protected boolean forwardName = false;
-    protected boolean isHighlighted = false;
-    protected boolean media = false;
-    protected boolean isCheckPressed = true;
-    private boolean wasLayout = false;
-    protected boolean isAvatarVisible = false;
-    protected boolean drawBackground = true;
-    protected MessageObject currentMessageObject;
-
-    private static TextPaint timePaintIn;
-    private static TextPaint timePaintOut;
-    private static TextPaint timeMediaPaint;
-    private static TextPaint namePaint;
-    private static TextPaint forwardNamePaint;
-    protected static TextPaint replyNamePaint;
-    protected static TextPaint replyTextPaint;
-    protected static Paint replyLinePaint;
-
-    protected int backgroundWidth = 100;
-
-    protected int layoutWidth;
-    protected int layoutHeight;
-
-    private ImageReceiver avatarImage;
-    private AvatarDrawable avatarDrawable;
-    private boolean avatarPressed = false;
-    private boolean forwardNamePressed = false;
-
-    private StaticLayout replyNameLayout;
-    private StaticLayout replyTextLayout;
-    private ImageReceiver replyImageReceiver;
-    private int replyStartX;
-    private int replyStartY;
-    protected int replyNameWidth;
-    private float replyNameOffset;
-    protected int replyTextWidth;
-    private float replyTextOffset;
-    private boolean needReplyImage = false;
-    private boolean replyPressed = false;
-    private TLRPC.FileLocation currentReplyPhoto;
-
-    private StaticLayout nameLayout;
-    protected int nameWidth;
-    private float nameOffsetX = 0;
-    protected boolean drawName = false;
-
-    private StaticLayout forwardedNameLayout;
-    protected int forwardedNameWidth;
-    protected boolean drawForwardedName = false;
-    private int forwardNameX;
-    private int forwardNameY;
-    private float forwardNameOffsetX = 0;
-
-    private StaticLayout timeLayout;
-    protected int timeWidth;
-    private int timeX;
-    private TextPaint currentTimePaint;
-    private String currentTimeString;
-    protected boolean drawTime = true;
-
-    private TLRPC.User currentUser;
-    private TLRPC.FileLocation currentPhoto;
-    private String currentNameString;
-
-    private TLRPC.User currentForwardUser;
-    private String currentForwardNameString;
-
-    protected ChatBaseCellDelegate delegate;
-
-    protected int namesOffset = 0;
-
-    private int last_send_state = 0;
-    private int last_delete_date = 0;
-
-    public ChatBaseCell(Context context) {
-        super(context);
-        if (timePaintIn == null) {
-            timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaintIn.setTextSize(AndroidUtilities.dp(12));
-            timePaintIn.setColor(0xffa1aab3);
-
-            timePaintOut = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaintOut.setTextSize(AndroidUtilities.dp(12));
-            timePaintOut.setColor(0xff70b15c);
-
-            timeMediaPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timeMediaPaint.setTextSize(AndroidUtilities.dp(12));
-            timeMediaPaint.setColor(0xffffffff);
-
-            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(15));
-
-            forwardNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            forwardNamePaint.setTextSize(AndroidUtilities.dp(14));
-
-            replyNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            replyNamePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            replyNamePaint.setTextSize(AndroidUtilities.dp(14));
-
-            replyTextPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            replyTextPaint.setTextSize(AndroidUtilities.dp(14));
-            replyTextPaint.linkColor = 0xff316f9f;
-
-            replyLinePaint = new Paint();
-
-            urlPaint = new Paint();
-            urlPaint.setColor(0x33316f9f);
-        }
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(21));
-        avatarDrawable = new AvatarDrawable();
-        replyImageReceiver = new ImageReceiver(this);
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        avatarImage.onDetachedFromWindow();
-        replyImageReceiver.onDetachedFromWindow();
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        avatarImage.onAttachedToWindow();
-        replyImageReceiver.onAttachedToWindow();
-    }
-
-    @Override
-    public void setPressed(boolean pressed) {
-        super.setPressed(pressed);
-        invalidate();
-    }
-
-    protected void resetPressedLink() {
-        if (pressedLink != null) {
-            pressedLink = null;
-        }
-        linkPreviewPressed = false;
-        invalidate();
-    }
-
-    public void setDelegate(ChatBaseCellDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public void setHighlighted(boolean value) {
-        if (isHighlighted == value) {
-            return;
-        }
-        isHighlighted = value;
-        invalidate();
-    }
-
-    public void setCheckPressed(boolean value, boolean pressed) {
-        isCheckPressed = value;
-        isPressed = pressed;
-        invalidate();
-    }
-
-    protected boolean isUserDataChanged() {
-        if (currentMessageObject == null || currentUser == null) {
-            return false;
-        }
-        if (last_send_state != currentMessageObject.messageOwner.send_state) {
-            return true;
-        }
-        if (last_delete_date != currentMessageObject.messageOwner.destroyTime) {
-            return true;
-        }
-
-        TLRPC.User newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
-        TLRPC.FileLocation newPhoto = null;
-
-        if (isAvatarVisible && newUser != null && newUser.photo != null) {
-            newPhoto = newUser.photo.photo_small;
-        }
-
-        if (replyTextLayout == null && currentMessageObject.replyMessageObject != null) {
-            return true;
-        }
-
-        if (currentPhoto == null && newPhoto != null || currentPhoto != null && newPhoto == null || currentPhoto != null && newPhoto != null && (currentPhoto.local_id != newPhoto.local_id || currentPhoto.volume_id != newPhoto.volume_id)) {
-            return true;
-        }
-
-        TLRPC.FileLocation newReplyPhoto = null;
-
-        if (currentMessageObject.replyMessageObject != null) {
-            TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(currentMessageObject.replyMessageObject.photoThumbs, 80);
-            if (photoSize != null && currentMessageObject.replyMessageObject.type != 13) {
-                newReplyPhoto = photoSize.location;
-            }
-        }
-
-        if (currentReplyPhoto == null && newReplyPhoto != null) {
-            return true;
-        }
-
-        String newNameString = null;
-        if (drawName && isChat && newUser != null && !currentMessageObject.isOut()) {
-            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
-        }
-
-        if (currentNameString == null && newNameString != null || currentNameString != null && newNameString == null || currentNameString != null && newNameString != null && !currentNameString.equals(newNameString)) {
-            return true;
-        }
-
-        newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.fwd_from_id);
-        newNameString = null;
-        if (newUser != null && drawForwardedName && currentMessageObject.messageOwner.fwd_from_id != 0) {
-            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
-        }
-        return currentForwardNameString == null && newNameString != null || currentForwardNameString != null && newNameString == null || currentForwardNameString != null && newNameString != null && !currentForwardNameString.equals(newNameString);
-    }
-
-    protected void measureTime(MessageObject messageObject) {
-        if (!media) {
-            if (messageObject.isOut()) {
-                currentTimePaint = timePaintOut;
-            } else {
-                currentTimePaint = timePaintIn;
-            }
-        } else {
-            currentTimePaint = timeMediaPaint;
-        }
-        currentTimeString = LocaleController.formatterDay.format((long) (messageObject.messageOwner.date) * 1000);
-        timeWidth = (int)Math.ceil(currentTimePaint.measureText(currentTimeString));
-    }
-
-    public void setMessageObject(MessageObject messageObject) {
-        currentMessageObject = messageObject;
-        last_send_state = messageObject.messageOwner.send_state;
-        last_delete_date = messageObject.messageOwner.destroyTime;
-        isPressed = false;
-        isCheckPressed = true;
-        isAvatarVisible = false;
-        wasLayout = false;
-        replyNameLayout = null;
-        replyTextLayout = null;
-        replyNameWidth = 0;
-        replyTextWidth = 0;
-        currentReplyPhoto = null;
-
-        currentUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
-        if (isChat && !messageObject.isOut()) {
-            isAvatarVisible = true;
-            if (currentUser != null) {
-                if (currentUser.photo != null) {
-                    currentPhoto = currentUser.photo.photo_small;
-                } else {
-                    currentPhoto = null;
-                }
-                avatarDrawable.setInfo(currentUser);
-            } else {
-                currentPhoto = null;
-                avatarDrawable.setInfo(messageObject.messageOwner.from_id, null, null, false);
-            }
-            avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, null, false);
-        }
-
-        if (!media) {
-            if (currentMessageObject.isOut()) {
-                currentTimePaint = timePaintOut;
-            } else {
-                currentTimePaint = timePaintIn;
-            }
-        } else {
-            currentTimePaint = timeMediaPaint;
-        }
-
-        currentTimeString = LocaleController.formatterDay.format((long) (currentMessageObject.messageOwner.date) * 1000);
-        timeWidth = (int)Math.ceil(currentTimePaint.measureText(currentTimeString));
-
-        namesOffset = 0;
-
-        if (drawName && isChat && currentUser != null && !currentMessageObject.isOut()) {
-            currentNameString = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
-            nameWidth = getMaxNameWidth();
-
-            CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-            nameLayout = new StaticLayout(nameStringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (nameLayout.getLineCount() > 0) {
-                nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
-                namesOffset += AndroidUtilities.dp(19);
-                nameOffsetX = nameLayout.getLineLeft(0);
-            } else {
-                nameWidth = 0;
-            }
-        } else {
-            currentNameString = null;
-            nameLayout = null;
-            nameWidth = 0;
-        }
-
-        if (drawForwardedName && messageObject.isForwarded()) {
-            currentForwardUser = MessagesController.getInstance().getUser(messageObject.messageOwner.fwd_from_id);
-            if (currentForwardUser != null) {
-                currentForwardNameString = ContactsController.formatName(currentForwardUser.first_name, currentForwardUser.last_name);
-
-                forwardedNameWidth = getMaxNameWidth();
-
-                CharSequence str = TextUtils.ellipsize(currentForwardNameString.replace("\n", " "), forwardNamePaint, forwardedNameWidth - AndroidUtilities.dp(40), TextUtils.TruncateAt.END);
-                str = AndroidUtilities.replaceTags(String.format("%s\n%s <b>%s</b>", LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage), LocaleController.getString("From", R.string.From), str));
-                forwardedNameLayout = StaticLayoutEx.createStaticLayout(str, forwardNamePaint, forwardedNameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, forwardedNameWidth, 2);
-                if (forwardedNameLayout.getLineCount() > 1) {
-                    forwardedNameWidth = Math.max((int) Math.ceil(forwardedNameLayout.getLineWidth(0)), (int) Math.ceil(forwardedNameLayout.getLineWidth(1)));
-                    namesOffset += AndroidUtilities.dp(36);
-                    forwardNameOffsetX = Math.min(forwardedNameLayout.getLineLeft(0), forwardedNameLayout.getLineLeft(1));
-                } else {
-                    forwardedNameWidth = 0;
-                }
-            } else {
-                currentForwardNameString = null;
-                forwardedNameLayout = null;
-                forwardedNameWidth = 0;
-            }
-        } else {
-            currentForwardNameString = null;
-            forwardedNameLayout = null;
-            forwardedNameWidth = 0;
-        }
-
-        if (messageObject.isReply()) {
-            namesOffset += AndroidUtilities.dp(42);
-            if (messageObject.contentType == 2 || messageObject.contentType == 3) {
-                namesOffset += AndroidUtilities.dp(4);
-            } else if (messageObject.contentType == 1) {
-                if (messageObject.type == 13) {
-                    namesOffset -= AndroidUtilities.dp(42);
-                } else {
-                    namesOffset += AndroidUtilities.dp(5);
-                }
-            }
-
-            int maxWidth;
-            if (messageObject.type == 13) {
-                int width;
-                if (AndroidUtilities.isTablet()) {
-                    if (AndroidUtilities.isSmallTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
-                        width = AndroidUtilities.displaySize.x;
-                    } else {
-                        int leftWidth = AndroidUtilities.displaySize.x / 100 * 35;
-                        if (leftWidth < AndroidUtilities.dp(320)) {
-                            leftWidth = AndroidUtilities.dp(320);
-                        }
-                        width = AndroidUtilities.displaySize.x - leftWidth;
-                    }
-                } else {
-                    width = AndroidUtilities.displaySize.x;
-                }
-                if (messageObject.isOut()) {
-                    maxWidth = width - backgroundWidth - AndroidUtilities.dp(60);
-                } else {
-                    maxWidth = width - backgroundWidth - AndroidUtilities.dp(56 + (isChat ? 61 : 0));
-                }
-            } else {
-                maxWidth = getMaxNameWidth() - AndroidUtilities.dp(22);
-            }
-            if (!media && messageObject.contentType != 0) {
-                maxWidth -= AndroidUtilities.dp(8);
-            }
-
-            CharSequence stringFinalName = null;
-            CharSequence stringFinalText = null;
-            if (messageObject.replyMessageObject != null) {
-                TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs, 80);
-                if (photoSize == null || messageObject.replyMessageObject.type == 13 || messageObject.type == 13 && !AndroidUtilities.isTablet()) {
-                    replyImageReceiver.setImageBitmap((Drawable) null);
-                    needReplyImage = false;
-                } else {
-                    currentReplyPhoto = photoSize.location;
-                    replyImageReceiver.setImage(photoSize.location, "50_50", null, null, true);
-                    needReplyImage = true;
-                    maxWidth -= AndroidUtilities.dp(44);
-                }
-
-                TLRPC.User user = MessagesController.getInstance().getUser(messageObject.replyMessageObject.messageOwner.from_id);
-                if (user != null) {
-                    stringFinalName = TextUtils.ellipsize(ContactsController.formatName(user.first_name, user.last_name).replace("\n", " "), replyNamePaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
-                }
-                if (messageObject.replyMessageObject.messageText != null && messageObject.replyMessageObject.messageText.length() > 0) {
-                    String mess = messageObject.replyMessageObject.messageText.toString();
-                    if (mess.length() > 150) {
-                        mess = mess.substring(0, 150);
-                    }
-                    mess = mess.replace("\n", " ");
-                    stringFinalText = Emoji.replaceEmoji(mess, replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14));
-                    stringFinalText = TextUtils.ellipsize(stringFinalText, replyTextPaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
-                }
-            }
-            if (stringFinalName == null) {
-                stringFinalName = LocaleController.getString("Loading", R.string.Loading);
-            }
-            try {
-                replyNameLayout = new StaticLayout(stringFinalName, replyNamePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                if (replyNameLayout.getLineCount() > 0) {
-                    replyNameWidth = (int)Math.ceil(replyNameLayout.getLineWidth(0)) + AndroidUtilities.dp(12 + (needReplyImage ? 44 : 0));
-                    replyNameOffset = replyNameLayout.getLineLeft(0);
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            try {
-                if (stringFinalText != null) {
-                    replyTextLayout = new StaticLayout(stringFinalText, replyTextPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                    if (replyTextLayout.getLineCount() > 0) {
-                        replyTextWidth = (int) Math.ceil(replyTextLayout.getLineWidth(0)) + AndroidUtilities.dp(12 + (needReplyImage ? 44 : 0));
-                        replyTextOffset = replyTextLayout.getLineLeft(0);
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        requestLayout();
-    }
-
-    public final MessageObject getMessageObject() {
-        return currentMessageObject;
-    }
-
-    protected int getMaxNameWidth() {
-        return backgroundWidth - AndroidUtilities.dp(8);
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        boolean result = false;
-        float x = event.getX();
-        float y = event.getY();
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (delegate == null || delegate.canPerformActions()) {
-                if (isAvatarVisible && avatarImage.isInsideImage(x, y)) {
-                    avatarPressed = true;
-                    result = true;
-                } else if (drawForwardedName && forwardedNameLayout != null) {
-                    if (x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32)) {
-                        forwardNamePressed = true;
-                        result = true;
-                    }
-                } else if (currentMessageObject.isReply()) {
-                    if (x >= replyStartX && x <= replyStartX + Math.max(replyNameWidth, replyTextWidth) && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35)) {
-                        replyPressed = true;
-                        result = true;
-                    }
-                }
-                if (result) {
-                    startCheckLongPress();
-                }
-            }
-        } else {
-            if (event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (avatarPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    avatarPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (delegate != null) {
-                        delegate.didPressedUserAvatar(this, currentUser);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    avatarPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (isAvatarVisible && !avatarImage.isInsideImage(x, y)) {
-                        avatarPressed = false;
-                    }
-                }
-            } else if (forwardNamePressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    forwardNamePressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (delegate != null) {
-                        delegate.didPressedUserAvatar(this, currentForwardUser);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    forwardNamePressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32))) {
-                        forwardNamePressed = false;
-                    }
-                }
-            } else if (replyPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    replyPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (delegate != null) {
-                        delegate.didPressReplyMessage(this, currentMessageObject.messageOwner.reply_to_msg_id);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    replyPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= replyStartX && x <= replyStartX + Math.max(replyNameWidth, replyTextWidth) && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35))) {
-                        replyPressed = false;
-                    }
-                }
-            }
-        }
-        return result;
-    }
-
-    @SuppressLint("DrawAllocation")
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (currentMessageObject == null) {
-            super.onLayout(changed, left, top, right, bottom);
-            return;
-        }
-
-        if (changed || !wasLayout) {
-            layoutWidth = getMeasuredWidth();
-            layoutHeight = getMeasuredHeight();
-
-            timeLayout = new StaticLayout(currentTimeString, currentTimePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (!media) {
-                if (!currentMessageObject.isOut()) {
-                    timeX = backgroundWidth - AndroidUtilities.dp(9) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
-                } else {
-                    timeX = layoutWidth - timeWidth - AndroidUtilities.dp(38.5f);
-                }
-            } else {
-                if (!currentMessageObject.isOut()) {
-                    timeX = backgroundWidth - AndroidUtilities.dp(4) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
-                } else {
-                    timeX = layoutWidth - timeWidth - AndroidUtilities.dp(42.0f);
-                }
-            }
-
-            if (isAvatarVisible) {
-                avatarImage.setImageCoords(AndroidUtilities.dp(6), layoutHeight - AndroidUtilities.dp(45), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
-            }
-
-            wasLayout = true;
-        }
-    }
-
-    protected void onAfterBackgroundDraw(Canvas canvas) {
-
-    }
-
-    @Override
-    protected void onLongPress() {
-        if (delegate != null) {
-            delegate.didLongPressed(this);
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        if (!wasLayout) {
-            requestLayout();
-            return;
-        }
-
-        if (isAvatarVisible) {
-            avatarImage.draw(canvas);
-        }
-
-        Drawable currentBackgroundDrawable;
-        if (currentMessageObject.isOut()) {
-            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableOutSelected;
-                } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOutSelected;
-                }
-            } else {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableOut;
-                } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOut;
-                }
-            }
-            setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
-        } else {
-            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableInSelected;
-                } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableInSelected;
-                }
-            } else {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableIn;
-                } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableIn;
-                }
-            }
-            if (isChat) {
-                setDrawableBounds(currentBackgroundDrawable, AndroidUtilities.dp(52 + (!media ? 0 : 9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
-            } else {
-                setDrawableBounds(currentBackgroundDrawable, (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
-            }
-        }
-        if (drawBackground) {
-            currentBackgroundDrawable.draw(canvas);
-        }
-
-        onAfterBackgroundDraw(canvas);
-
-        if (drawName && nameLayout != null) {
-            canvas.save();
-            canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
-            namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
-            nameLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        if (drawForwardedName && forwardedNameLayout != null) {
-            forwardNameY = AndroidUtilities.dp(10 + (drawName ? 19 : 0));
-            if (currentMessageObject.isOut()) {
-                forwardNamePaint.setColor(0xff4a923c);
-                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10);
-            } else {
-                forwardNamePaint.setColor(0xff006fc8);
-                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19);
-            }
-            canvas.save();
-            canvas.translate(forwardNameX - forwardNameOffsetX, forwardNameY);
-            forwardedNameLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        if (currentMessageObject.isReply()) {
-            if (currentMessageObject.type == 13) {
-                replyLinePaint.setColor(0xffffffff);
-                replyNamePaint.setColor(0xffffffff);
-                replyTextPaint.setColor(0xffffffff);
-                int backWidth;
-                if (currentMessageObject.isOut()) {
-                    backWidth = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(32);
-                    replyStartX = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(9) - backWidth;
-                } else {
-                    backWidth = getWidth() - currentBackgroundDrawable.getBounds().right - AndroidUtilities.dp(32);
-                    replyStartX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(23);
-                }
-                Drawable back;
-                if (ApplicationLoader.isCustomTheme()) {
-                    back = ResourceLoader.backgroundBlack;
-                } else {
-                    back = ResourceLoader.backgroundBlue;
-                }
-                replyStartY = layoutHeight - AndroidUtilities.dp(58);
-                back.setBounds(replyStartX - AndroidUtilities.dp(7), replyStartY - AndroidUtilities.dp(6), replyStartX - AndroidUtilities.dp(7) + backWidth, replyStartY + AndroidUtilities.dp(41));
-                back.draw(canvas);
-            } else {
-                if (currentMessageObject.isOut()) {
-                    replyLinePaint.setColor(0xff8dc97a);
-                    replyNamePaint.setColor(0xff61a349);
-                    if (currentMessageObject.replyMessageObject != null && currentMessageObject.replyMessageObject.type == 0) {
-                        replyTextPaint.setColor(0xff000000);
-                    } else {
-                        replyTextPaint.setColor(0xff70b15c);
-                    }
-                    replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
-                } else {
-                    replyLinePaint.setColor(0xff6c9fd2);
-                    replyNamePaint.setColor(0xff377aae);
-                    if (currentMessageObject.replyMessageObject != null && currentMessageObject.replyMessageObject.type == 0) {
-                        replyTextPaint.setColor(0xff000000);
-                    } else {
-                        replyTextPaint.setColor(0xff999999);
-                    }
-                    if (currentMessageObject.contentType == 1 && media) {
-                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
-                    } else {
-                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(20);
-                    }
-                }
-                replyStartY = AndroidUtilities.dp(12 + (drawForwardedName && forwardedNameLayout != null ? 36 : 0) + (drawName && nameLayout != null ? 20 : 0));
-            }
-            canvas.drawRect(replyStartX, replyStartY, replyStartX + AndroidUtilities.dp(2), replyStartY + AndroidUtilities.dp(35), replyLinePaint);
-            if (needReplyImage) {
-                replyImageReceiver.setImageCoords(replyStartX + AndroidUtilities.dp(10), replyStartY, AndroidUtilities.dp(35), AndroidUtilities.dp(35));
-                replyImageReceiver.draw(canvas);
-            }
-            if (replyNameLayout != null) {
-                canvas.save();
-                canvas.translate(replyStartX - replyNameOffset + AndroidUtilities.dp(10 + (needReplyImage ? 44 : 0)), replyStartY);
-                replyNameLayout.draw(canvas);
-                canvas.restore();
-            }
-            if (replyTextLayout != null) {
-                canvas.save();
-                canvas.translate(replyStartX - replyTextOffset + AndroidUtilities.dp(10 + (needReplyImage ? 44 : 0)), replyStartY + AndroidUtilities.dp(19));
-                replyTextLayout.draw(canvas);
-                canvas.restore();
-            }
-        }
-
-        if (drawTime || !media) {
-            if (media) {
-                setDrawableBounds(ResourceLoader.mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOut() ? 20 : 0)), AndroidUtilities.dp(16.5f));
-                ResourceLoader.mediaBackgroundDrawable.draw(canvas);
-
-                canvas.save();
-                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(12.0f) - timeLayout.getHeight());
-                timeLayout.draw(canvas);
-                canvas.restore();
-            } else {
-                canvas.save();
-                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight());
-                timeLayout.draw(canvas);
-                canvas.restore();
-            }
-
-            if (currentMessageObject.isOut()) {
-                boolean drawCheck1 = false;
-                boolean drawCheck2 = false;
-                boolean drawClock = false;
-                boolean drawError = false;
-                boolean isBroadcast = (int)(currentMessageObject.getDialogId() >> 32) == 1;
-
-                if (currentMessageObject.isSending()) {
-                    drawCheck1 = false;
-                    drawCheck2 = false;
-                    drawClock = true;
-                    drawError = false;
-                } else if (currentMessageObject.isSendError()) {
-                    drawCheck1 = false;
-                    drawCheck2 = false;
-                    drawClock = false;
-                    drawError = true;
-                } else if (currentMessageObject.isSent()) {
-                    if (!currentMessageObject.isUnread()) {
-                        drawCheck1 = true;
-                        drawCheck2 = true;
-                    } else {
-                        drawCheck1 = false;
-                        drawCheck2 = true;
-                    }
-                    drawClock = false;
-                    drawError = false;
-                }
-
-                if (drawClock) {
-                    if (!media) {
-                        setDrawableBounds(ResourceLoader.clockDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - ResourceLoader.clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - ResourceLoader.clockDrawable.getIntrinsicHeight());
-                        ResourceLoader.clockDrawable.draw(canvas);
-                    } else {
-                        setDrawableBounds(ResourceLoader.clockMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - ResourceLoader.clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.clockMediaDrawable.getIntrinsicHeight());
-                        ResourceLoader.clockMediaDrawable.draw(canvas);
-                    }
-                }
-                if (isBroadcast) {
-                    if (drawCheck1 || drawCheck2) {
-                        if (!media) {
-                            setDrawableBounds(ResourceLoader.broadcastDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.broadcastDrawable.getIntrinsicHeight());
-                            ResourceLoader.broadcastDrawable.draw(canvas);
-                        } else {
-                            setDrawableBounds(ResourceLoader.broadcastMediaDrawable, layoutWidth - AndroidUtilities.dp(24.0f) - ResourceLoader.broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.broadcastMediaDrawable.getIntrinsicHeight());
-                            ResourceLoader.broadcastMediaDrawable.draw(canvas);
-                        }
-                    }
-                } else {
-                    if (drawCheck2) {
-                        if (!media) {
-                            if (drawCheck1) {
-                                setDrawableBounds(ResourceLoader.checkDrawable, layoutWidth - AndroidUtilities.dp(22.5f) - ResourceLoader.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.checkDrawable.getIntrinsicHeight());
-                            } else {
-                                setDrawableBounds(ResourceLoader.checkDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - ResourceLoader.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.checkDrawable.getIntrinsicHeight());
-                            }
-                            ResourceLoader.checkDrawable.draw(canvas);
-                        } else {
-                            if (drawCheck1) {
-                                setDrawableBounds(ResourceLoader.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(26.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicHeight());
-                            } else {
-                                setDrawableBounds(ResourceLoader.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicHeight());
-                            }
-                            ResourceLoader.checkMediaDrawable.draw(canvas);
-                        }
-                    }
-                    if (drawCheck1) {
-                        if (!media) {
-                            setDrawableBounds(ResourceLoader.halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - ResourceLoader.halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.halfCheckDrawable.getIntrinsicHeight());
-                            ResourceLoader.halfCheckDrawable.draw(canvas);
-                        } else {
-                            setDrawableBounds(ResourceLoader.halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.halfCheckMediaDrawable.getIntrinsicHeight());
-                            ResourceLoader.halfCheckMediaDrawable.draw(canvas);
-                        }
-                    }
-                }
-                if (drawError) {
-                    if (!media) {
-                        setDrawableBounds(ResourceLoader.errorDrawable, layoutWidth - AndroidUtilities.dp(18) - ResourceLoader.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(6.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
-                        ResourceLoader.errorDrawable.draw(canvas);
-                    } else {
-                        setDrawableBounds(ResourceLoader.errorDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
-                        ResourceLoader.errorDrawable.draw(canvas);
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
deleted file mode 100644
index df409c4b7..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ /dev/null
@@ -1,1164 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.RectF;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.Spannable;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.text.style.ClickableSpan;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.LocaleController;
-import org.telegram.android.SendMessagesHelper;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.android.MediaController;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessageObject;
-import org.telegram.ui.Components.RadialProgress;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.StaticLayoutEx;
-import org.telegram.ui.Components.URLSpanNoUnderline;
-import org.telegram.ui.PhotoViewer;
-import org.telegram.ui.Components.GifDrawable;
-import org.telegram.android.ImageReceiver;
-
-import java.io.File;
-import java.util.Locale;
-
-public class ChatMediaCell extends ChatBaseCell implements MediaController.FileDownloadProgressListener {
-
-    public interface ChatMediaCellDelegate {
-        void didClickedImage(ChatMediaCell cell);
-
-        void didPressedOther(ChatMediaCell cell);
-    }
-
-    private static TextPaint infoPaint;
-    private static MessageObject lastDownloadedGifMessage = null;
-    private static TextPaint namePaint;
-    private static Paint docBackPaint;
-    private static Paint deleteProgressPaint;
-    private static TextPaint locationTitlePaint;
-    private static TextPaint locationAddressPaint;
-
-    private GifDrawable gifDrawable = null;
-    private RadialProgress radialProgress;
-
-    private int photoWidth;
-    private int photoHeight;
-    private TLRPC.PhotoSize currentPhotoObject;
-    private TLRPC.PhotoSize currentPhotoObjectThumb;
-    private String currentUrl;
-    private String currentPhotoFilter;
-    private ImageReceiver photoImage;
-    private boolean photoNotSet = false;
-    private boolean cancelLoading = false;
-    private int additionHeight;
-
-    private boolean allowedToSetPhoto = true;
-
-    private int TAG;
-
-    private int buttonState = 0;
-    private int buttonPressed = 0;
-    private boolean imagePressed = false;
-    private boolean otherPressed = false;
-    private int buttonX;
-    private int buttonY;
-
-    private StaticLayout infoLayout;
-    private int infoWidth;
-    private int infoOffset = 0;
-    private String currentInfoString;
-
-    private StaticLayout nameLayout;
-    private int nameWidth = 0;
-    private String currentNameString;
-
-    private ChatMediaCellDelegate mediaDelegate = null;
-    private RectF deleteProgressRect = new RectF();
-
-    private int captionX;
-    private int captionY;
-    private int captionHeight;
-
-    public ChatMediaCell(Context context) {
-        super(context);
-
-        if (infoPaint == null) {
-            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            infoPaint.setTextSize(AndroidUtilities.dp(12));
-
-            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            namePaint.setColor(0xff212121);
-            namePaint.setTextSize(AndroidUtilities.dp(16));
-
-            docBackPaint = new Paint();
-
-            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            deleteProgressPaint.setColor(0xffe4e2e0);
-
-            locationTitlePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            locationTitlePaint.setTextSize(AndroidUtilities.dp(14));
-            locationTitlePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            locationAddressPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            locationAddressPaint.setTextSize(AndroidUtilities.dp(14));
-        }
-
-        TAG = MediaController.getInstance().generateObserverTag();
-
-        photoImage = new ImageReceiver(this);
-        radialProgress = new RadialProgress(this);
-    }
-
-    public void clearGifImage() {
-        if (currentMessageObject != null && currentMessageObject.type == 8) {
-            gifDrawable = null;
-            buttonState = 2;
-            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-            invalidate();
-        }
-    }
-
-    public void setMediaDelegate(ChatMediaCellDelegate delegate) {
-        this.mediaDelegate = delegate;
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        photoImage.onDetachedFromWindow();
-        if (gifDrawable != null) {
-            MediaController.getInstance().clearGifDrawable(this);
-            gifDrawable = null;
-        }
-        MediaController.getInstance().removeLoadingFileObserver(this);
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        if (photoImage.onAttachedToWindow()) {
-            updateButtonState(false);
-        }
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-
-        boolean result = false;
-        int side = AndroidUtilities.dp(48);
-        if (currentMessageObject.caption instanceof Spannable && !isPressed) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN || (linkPreviewPressed || pressedLink != null) && event.getAction() == MotionEvent.ACTION_UP) {
-                if (nameLayout != null && x >= captionX && x <= captionX + backgroundWidth && y >= captionY && y <= captionY + captionHeight) {
-                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                        resetPressedLink();
-                        try {
-                            int x2 = (int) (x - captionX);
-                            int y2 = (int) (y - captionY);
-                            final int line = nameLayout.getLineForVertical(y2);
-                            final int off = nameLayout.getOffsetForHorizontal(line, x2);
-
-                            final float left = nameLayout.getLineLeft(line);
-                            if (left <= x2 && left + nameLayout.getLineWidth(line) >= x2) {
-                                Spannable buffer = (Spannable) currentMessageObject.caption;
-                                ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
-                                if (link.length != 0) {
-                                    resetPressedLink();
-                                    pressedLink = link[0];
-                                    linkPreviewPressed = true;
-                                    result = true;
-                                    try {
-                                        int start = buffer.getSpanStart(pressedLink);
-                                        urlPath.setCurrentLayout(nameLayout, start);
-                                        nameLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), urlPath);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                } else {
-                                    resetPressedLink();
-                                }
-                            } else {
-                                resetPressedLink();
-                            }
-                        } catch (Exception e) {
-                            resetPressedLink();
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (linkPreviewPressed) {
-                        try {
-                            if (pressedLink instanceof URLSpanNoUnderline) {
-                                String url = ((URLSpanNoUnderline) pressedLink).getURL();
-                                if (url.startsWith("@") || url.startsWith("#")) {
-                                    if (delegate != null) {
-                                        delegate.didPressUrl(url);
-                                    }
-                                }
-                            } else {
-                                pressedLink.onClick(this);
-                            }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        resetPressedLink();
-                        result = true;
-                    }
-                } else {
-                    resetPressedLink();
-                }
-            } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                resetPressedLink();
-            }
-
-            if (result && event.getAction() == MotionEvent.ACTION_DOWN) {
-                startCheckLongPress();
-            }
-            if (event.getAction() != MotionEvent.ACTION_DOWN && event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (result) {
-                return result;
-            }
-        }
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (delegate == null || delegate.canPerformActions()) {
-                if (buttonState != -1 && x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
-                    buttonPressed = 1;
-                    invalidate();
-                    result = true;
-                } else {
-                    if (currentMessageObject.type == 9) {
-                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                            imagePressed = true;
-                            result = true;
-                        } else if (x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                            otherPressed = true;
-                            result = true;
-                        }
-                    } else if (currentMessageObject.type != 13) {
-                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                            imagePressed = true;
-                            result = true;
-                        }
-                    }
-                }
-                if (imagePressed && currentMessageObject.isSecretPhoto()) {
-                    imagePressed = false;
-                } else if (result) {
-                    startCheckLongPress();
-                }
-            }
-        } else {
-            if (event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (buttonPressed == 1) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = 0;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    didPressedButton(false);
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = 0;
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
-                        buttonPressed = 0;
-                        invalidate();
-                    }
-                }
-            } else if (imagePressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    imagePressed = false;
-                    if (buttonState == -1 || buttonState == 2 || buttonState == 3) {
-                        playSoundEffect(SoundEffectConstants.CLICK);
-                        didClickedImage();
-                    }
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    imagePressed = false;
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (currentMessageObject.type == 9) {
-                        if (!(x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
-                            imagePressed = false;
-                            invalidate();
-                        }
-                    } else {
-                        if (!photoImage.isInsideImage(x, y)) {
-                            imagePressed = false;
-                            invalidate();
-                        }
-                    }
-                }
-            } else if (otherPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    otherPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (mediaDelegate != null) {
-                        mediaDelegate.didPressedOther(this);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    otherPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (currentMessageObject.type == 9) {
-                        if (!(x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
-                            otherPressed = false;
-                        }
-                    }
-                }
-            }
-        }
-        if (!result) {
-            result = super.onTouchEvent(event);
-        }
-
-        return result;
-    }
-
-    private void didClickedImage() {
-        if (currentMessageObject.type == 1) {
-            if (buttonState == -1) {
-                if (mediaDelegate != null) {
-                    mediaDelegate.didClickedImage(this);
-                }
-            } else if (buttonState == 0) {
-                didPressedButton(false);
-            }
-        } else if (currentMessageObject.type == 8) {
-            if (buttonState == -1) {
-                buttonState = 2;
-                if (gifDrawable != null) {
-                    gifDrawable.pause();
-                }
-                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-                invalidate();
-            } else if (buttonState == 2 || buttonState == 0) {
-                didPressedButton(false);
-            }
-        } else if (currentMessageObject.type == 3) {
-            if (buttonState == 0 || buttonState == 3) {
-                didPressedButton(false);
-            }
-        } else if (currentMessageObject.type == 4) {
-            if (mediaDelegate != null) {
-                mediaDelegate.didClickedImage(this);
-            }
-        } else if (currentMessageObject.type == 9) {
-            if (buttonState == -1) {
-                if (mediaDelegate != null) {
-                    mediaDelegate.didClickedImage(this);
-                }
-            }
-        }
-    }
-
-    private Drawable getDrawableForCurrentState() {
-        if (buttonState >= 0 && buttonState < 4) {
-            Drawable currentButtonDrawable = null;
-            if (currentMessageObject.type == 9 && gifDrawable == null) {
-                if (buttonState == 1 && !currentMessageObject.isSending()) {
-                    return ResourceLoader.buttonStatesDrawablesDoc[2][currentMessageObject.isOut() ? 1 : 0];
-                } else {
-                    return ResourceLoader.buttonStatesDrawablesDoc[buttonState][currentMessageObject.isOut() ? 1 : 0];
-                }
-            } else {
-                if (buttonState == 1 && !currentMessageObject.isSending()) {
-                    return ResourceLoader.buttonStatesDrawables[4];
-                } else {
-                    return ResourceLoader.buttonStatesDrawables[buttonState];
-                }
-            }
-        } else if (buttonState == -1) {
-            if (currentMessageObject.type == 9 && gifDrawable == null) {
-                return currentMessageObject.isOut() ? ResourceLoader.placeholderDocOutDrawable : ResourceLoader.placeholderDocInDrawable;
-            }
-        }
-        return null;
-    }
-
-    private void didPressedButton(boolean animated) {
-        if (buttonState == 0) {
-            cancelLoading = false;
-            radialProgress.setProgress(0, false);
-            if (currentMessageObject.type == 1) {
-                photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilter, currentPhotoObject.size, null, false);
-            } else if (currentMessageObject.type == 8 || currentMessageObject.type == 9) {
-                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
-                lastDownloadedGifMessage = currentMessageObject;
-            } else if (currentMessageObject.type == 3) {
-                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.video, true);
-            }
-            buttonState = 1;
-            radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-            invalidate();
-        } else if (buttonState == 1) {
-            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-                if (delegate != null) {
-                    delegate.didPressedCancelSendButton(this);
-                }
-            } else {
-                cancelLoading = true;
-                if (currentMessageObject.type == 1) {
-                    photoImage.cancelLoadImage();
-                } else if (currentMessageObject.type == 8 || currentMessageObject.type == 9) {
-                    FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
-                    if (lastDownloadedGifMessage != null && lastDownloadedGifMessage.getId() == currentMessageObject.getId()) {
-                        lastDownloadedGifMessage = null;
-                    }
-                } else if (currentMessageObject.type == 3) {
-                    FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.video);
-                }
-                buttonState = 0;
-                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-                invalidate();
-            }
-        } else if (buttonState == 2) {
-            if (gifDrawable == null) {
-                gifDrawable = MediaController.getInstance().getGifDrawable(this, true);
-            }
-            if (gifDrawable != null) {
-                gifDrawable.start();
-                gifDrawable.invalidateSelf();
-                buttonState = -1;
-                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-            }
-        } else if (buttonState == 3) {
-            if (mediaDelegate != null) {
-                mediaDelegate.didClickedImage(this);
-            }
-        }
-    }
-
-    private boolean isPhotoDataChanged(MessageObject object) {
-        if (object.type == 4) {
-            if (currentUrl == null) {
-                return true;
-            }
-            double lat = object.messageOwner.media.geo.lat;
-            double lon = object.messageOwner.media.geo._long;
-            String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
-            if (!url.equals(currentUrl)) {
-                return true;
-            }
-        } else if (currentPhotoObject == null || currentPhotoObject.location instanceof TLRPC.TL_fileLocationUnavailable) {
-            return true;
-        } else if (currentMessageObject != null && photoNotSet) {
-            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-            if (cacheFile.exists()) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        boolean dataChanged = currentMessageObject == messageObject && (isUserDataChanged() || photoNotSet);
-        if (currentMessageObject != messageObject || isPhotoDataChanged(messageObject) || dataChanged) {
-            media = messageObject.type != 9;
-            cancelLoading = false;
-            additionHeight = 0;
-            resetPressedLink();
-
-            buttonState = -1;
-            gifDrawable = null;
-            currentPhotoObject = null;
-            currentPhotoObjectThumb = null;
-            currentUrl = null;
-            photoNotSet = false;
-            drawBackground = true;
-
-            photoImage.setForcePreview(messageObject.isSecretPhoto());
-            if (messageObject.type == 9) {
-                String name = messageObject.getDocumentName();
-                if (name == null || name.length() == 0) {
-                    name = LocaleController.getString("AttachDocument", R.string.AttachDocument);
-                }
-                int maxWidth;
-                if (AndroidUtilities.isTablet()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122 + 86 + 24);
-                } else {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122 + 86 + 24);
-                }
-                if (currentNameString == null || !currentNameString.equals(name)) {
-                    currentNameString = name;
-                    nameLayout = StaticLayoutEx.createStaticLayout(currentNameString, namePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth, 1);
-                    if (nameLayout.getLineCount() > 0) {
-                        nameWidth = Math.min(maxWidth, (int) Math.ceil(nameLayout.getLineWidth(0)));
-                    } else {
-                        nameWidth = maxWidth;
-                    }
-                }
-
-                String fileName = messageObject.getFileName();
-                int idx = fileName.lastIndexOf(".");
-                String ext = null;
-                if (idx != -1) {
-                    ext = fileName.substring(idx + 1);
-                }
-                if (ext == null || ext.length() == 0) {
-                    ext = messageObject.messageOwner.media.document.mime_type;
-                }
-                ext = ext.toUpperCase();
-
-                String str = AndroidUtilities.formatFileSize(messageObject.messageOwner.media.document.size) + " " + ext;
-
-                if (currentInfoString == null || !currentInfoString.equals(str)) {
-                    currentInfoString = str;
-                    infoOffset = 0;
-                    infoWidth = Math.min(maxWidth, (int) Math.ceil(infoPaint.measureText(currentInfoString)));
-                    CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-                    infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                }
-            } else if (messageObject.type == 8) {
-                gifDrawable = MediaController.getInstance().getGifDrawable(this, false);
-
-                String str = AndroidUtilities.formatFileSize(messageObject.messageOwner.media.document.size);
-                if (currentInfoString == null || !currentInfoString.equals(str)) {
-                    currentInfoString = str;
-                    infoOffset = 0;
-                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                }
-                nameLayout = null;
-                currentNameString = null;
-            } else if (messageObject.type == 3) {
-                int duration = messageObject.messageOwner.media.video.duration;
-                int minutes = duration / 60;
-                int seconds = duration - minutes * 60;
-                String str = String.format("%d:%02d, %s", minutes, seconds, AndroidUtilities.formatFileSize(messageObject.messageOwner.media.video.size));
-                if (currentInfoString == null || !currentInfoString.equals(str)) {
-                    currentInfoString = str;
-                    infoOffset = ResourceLoader.videoIconDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4);
-                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                }
-                nameLayout = null;
-                currentNameString = null;
-            } else {
-                currentInfoString = null;
-                currentNameString = null;
-                infoLayout = null;
-                nameLayout = null;
-                updateSecretTimeText();
-            }
-            if (messageObject.type == 9) { //doc
-                photoWidth = AndroidUtilities.dp(86);
-                photoHeight = AndroidUtilities.dp(86);
-                backgroundWidth = photoWidth + Math.max(nameWidth, infoWidth) + AndroidUtilities.dp(68);
-                currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
-                photoImage.setNeedsQualityThumb(true);
-                photoImage.setShouldGenerateQualityThumb(true);
-                photoImage.setParentMessageObject(messageObject);
-                if (currentPhotoObject != null) {
-                    currentPhotoFilter = String.format(Locale.US, "%d_%d_b", photoWidth, photoHeight);
-                    photoImage.setImage(null, null, null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, true);
-                } else {
-                    photoImage.setImageBitmap((BitmapDrawable) null);
-                }
-            } else if (messageObject.type == 4) { //geo
-                double lat = messageObject.messageOwner.media.geo.lat;
-                double lon = messageObject.messageOwner.media.geo._long;
-
-                if (messageObject.messageOwner.media.title != null && messageObject.messageOwner.media.title.length() > 0) {
-                    int maxWidth = (AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y)) - AndroidUtilities.dp((isChat && !messageObject.isOut() ? 102 : 40) + 86 + 24);
-                    nameLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.title, locationTitlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth - AndroidUtilities.dp(4), 3);
-                    int lineCount = nameLayout.getLineCount();
-                    if (messageObject.messageOwner.media.address != null && messageObject.messageOwner.media.address.length() > 0) {
-                        infoLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.address, locationAddressPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth - AndroidUtilities.dp(4), Math.min(3, 4 - lineCount));
-                    } else {
-                        infoLayout = null;
-                    }
-
-                    media = false;
-                    measureTime(messageObject);
-                    photoWidth = AndroidUtilities.dp(86);
-                    photoHeight = AndroidUtilities.dp(86);
-                    maxWidth = timeWidth + AndroidUtilities.dp(messageObject.isOut() ? 29 : 9);
-                    for (int a = 0; a < lineCount; a++) {
-                        maxWidth = (int) Math.max(maxWidth, nameLayout.getLineWidth(a) + AndroidUtilities.dp(16));
-                    }
-                    if (infoLayout != null) {
-                        for (int a = 0; a < infoLayout.getLineCount(); a++) {
-                            maxWidth = (int) Math.max(maxWidth, infoLayout.getLineWidth(a) + AndroidUtilities.dp(16));
-                        }
-                    }
-                    backgroundWidth = photoWidth + AndroidUtilities.dp(21) + maxWidth;
-                    currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=72x72&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
-                } else {
-                    photoWidth = AndroidUtilities.dp(200);
-                    photoHeight = AndroidUtilities.dp(100);
-                    backgroundWidth = photoWidth + AndroidUtilities.dp(12);
-                    currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=200x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
-                }
-
-                photoImage.setNeedsQualityThumb(false);
-                photoImage.setShouldGenerateQualityThumb(false);
-                photoImage.setParentMessageObject(null);
-                photoImage.setImage(currentUrl, null, messageObject.isOut() ? ResourceLoader.geoOutDrawable : ResourceLoader.geoInDrawable, null, 0);
-            } else if (messageObject.type == 13) { //webp
-                drawBackground = false;
-                for (TLRPC.DocumentAttribute attribute : messageObject.messageOwner.media.document.attributes) {
-                    if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
-                        photoWidth = attribute.w;
-                        photoHeight = attribute.h;
-                        break;
-                    }
-                }
-                float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
-                float maxWidth;
-                if (AndroidUtilities.isTablet()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() * 0.5f;
-                } else {
-                    maxWidth = AndroidUtilities.displaySize.x * 0.5f;
-                }
-                if (photoWidth == 0) {
-                    photoHeight = (int) maxHeight;
-                    photoWidth = photoHeight + AndroidUtilities.dp(100);
-                }
-                if (photoHeight > maxHeight) {
-                    photoWidth *= maxHeight / photoHeight;
-                    photoHeight = (int) maxHeight;
-                }
-                if (photoWidth > maxWidth) {
-                    photoHeight *= maxWidth / photoWidth;
-                    photoWidth = (int) maxWidth;
-                }
-                backgroundWidth = photoWidth + AndroidUtilities.dp(12);
-                currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                photoImage.setNeedsQualityThumb(false);
-                photoImage.setShouldGenerateQualityThumb(false);
-                photoImage.setParentMessageObject(null);
-                if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
-                    File f = new File(messageObject.messageOwner.attachPath);
-                    if (f.exists()) {
-                        photoImage.setImage(null, messageObject.messageOwner.attachPath,
-                                String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
-                                null,
-                                currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
-                                "b1",
-                                messageObject.messageOwner.media.document.size, "webp", true);
-                    }
-                } else if (messageObject.messageOwner.media.document.id != 0) {
-                    photoImage.setImage(messageObject.messageOwner.media.document, null,
-                            String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
-                            null,
-                            currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
-                            "b1",
-                            messageObject.messageOwner.media.document.size, "webp", true);
-                }
-            } else {
-                if (AndroidUtilities.isTablet()) {
-                    photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
-                } else {
-                    photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
-                }
-                photoHeight = photoWidth + AndroidUtilities.dp(100);
-
-                if (photoWidth > AndroidUtilities.getPhotoSize()) {
-                    photoWidth = AndroidUtilities.getPhotoSize();
-                }
-                if (photoHeight > AndroidUtilities.getPhotoSize()) {
-                    photoHeight = AndroidUtilities.getPhotoSize();
-                }
-
-                if (messageObject.type == 1) {
-                    photoImage.setNeedsQualityThumb(false);
-                    photoImage.setShouldGenerateQualityThumb(false);
-                    photoImage.setParentMessageObject(null);
-                    currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                } else if (messageObject.type == 3) {
-                    photoImage.setNeedsQualityThumb(true);
-                    photoImage.setShouldGenerateQualityThumb(true);
-                    photoImage.setParentMessageObject(messageObject);
-                } else if (messageObject.type == 8) {
-                    photoImage.setNeedsQualityThumb(true);
-                    photoImage.setShouldGenerateQualityThumb(true);
-                    photoImage.setParentMessageObject(messageObject);
-                }
-                //8 - gif, 1 - photo, 3 - video
-
-                if (messageObject.caption != null) {
-                    media = false;
-                }
-
-                currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
-
-                if (currentPhotoObject != null) {
-                    if (currentPhotoObject == currentPhotoObjectThumb) {
-                        currentPhotoObjectThumb = null;
-                    }
-                    boolean noSize = false;
-                    if (messageObject.type == 3 || messageObject.type == 8) {
-                        noSize = true;
-                    }
-                    float scale = (float) currentPhotoObject.w / (float) photoWidth;
-
-                    if (!noSize && currentPhotoObject.size == 0) {
-                        currentPhotoObject.size = -1;
-                    }
-
-                    int w = (int) (currentPhotoObject.w / scale);
-                    int h = (int) (currentPhotoObject.h / scale);
-                    if (w == 0) {
-                        if (messageObject.type == 3) {
-                            w = infoWidth + infoOffset + AndroidUtilities.dp(16);
-                        } else {
-                            w = AndroidUtilities.dp(100);
-                        }
-                    }
-                    if (h == 0) {
-                        h = AndroidUtilities.dp(100);
-                    }
-                    if (h > photoHeight) {
-                        float scale2 = h;
-                        h = photoHeight;
-                        scale2 /= h;
-                        w = (int) (w / scale2);
-                    } else if (h < AndroidUtilities.dp(120)) {
-                        h = AndroidUtilities.dp(120);
-                        float hScale = (float) currentPhotoObject.h / h;
-                        if (currentPhotoObject.w / hScale < photoWidth) {
-                            w = (int) (currentPhotoObject.w / hScale);
-                        }
-                    }
-                    measureTime(messageObject);
-                    int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (messageObject.isOut() ? 20 : 0));
-                    if (w < timeWidthTotal) {
-                        w = timeWidthTotal;
-                    }
-
-                    if (messageObject.isSecretPhoto()) {
-                        if (AndroidUtilities.isTablet()) {
-                            w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
-                        } else {
-                            w = h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
-                        }
-                    }
-
-                    photoWidth = w;
-                    photoHeight = h;
-                    backgroundWidth = w + AndroidUtilities.dp(12);
-                    if (!media) {
-                        backgroundWidth += AndroidUtilities.dp(9);
-                    }
-                    if (messageObject.caption != null) {
-                        nameLayout = new StaticLayout(messageObject.caption, MessageObject.textPaint, photoWidth - AndroidUtilities.dp(10), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                        if (nameLayout.getLineCount() > 0) {
-                            captionHeight = nameLayout.getHeight();
-                            additionHeight += captionHeight + AndroidUtilities.dp(9);
-                            float lastLineWidth = nameLayout.getLineWidth(nameLayout.getLineCount() - 1) + nameLayout.getLineLeft(nameLayout.getLineCount() - 1);
-                            if (photoWidth - AndroidUtilities.dp(8) - lastLineWidth < timeWidthTotal) {
-                                additionHeight += AndroidUtilities.dp(14);
-                            }
-                        }
-                    }
-
-                    currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
-                    if (messageObject.photoThumbs.size() > 1 || messageObject.type == 3 || messageObject.type == 8) {
-                        if (messageObject.isSecretPhoto()) {
-                            currentPhotoFilter += "_b2";
-                        } else {
-                            currentPhotoFilter += "_b";
-                        }
-                    }
-
-                    String fileName = FileLoader.getAttachFileName(currentPhotoObject);
-                    if (messageObject.type == 1) {
-                        boolean photoExist = true;
-                        File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
-                        if (!cacheFile.exists()) {
-                            photoExist = false;
-                        } else {
-                            MediaController.getInstance().removeLoadingFileObserver(this);
-                        }
-
-                        if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
-                            if (allowedToSetPhoto || ImageLoader.getInstance().getImageFromMemory(currentPhotoObject.location, null, currentPhotoFilter) != null) {
-                                allowedToSetPhoto = true;
-                                photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilter, noSize ? 0 : currentPhotoObject.size, null, false);
-                            } else if (currentPhotoObjectThumb != null) {
-                                photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
-                            } else {
-                                photoImage.setImageBitmap((Drawable) null);
-                            }
-                        } else {
-                            photoNotSet = true;
-                            if (currentPhotoObjectThumb != null) {
-                                photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
-                            } else {
-                                photoImage.setImageBitmap((Drawable) null);
-                            }
-                        }
-                    } else {
-                        photoImage.setImage(null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, false);
-                    }
-                } else {
-                    photoImage.setImageBitmap((Bitmap) null);
-                }
-            }
-            super.setMessageObject(messageObject);
-
-            invalidate();
-        }
-        updateButtonState(dataChanged);
-    }
-
-    public ImageReceiver getPhotoImage() {
-        return photoImage;
-    }
-
-    public void updateButtonState(boolean animated) {
-        String fileName = null;
-        File cacheFile = null;
-        if (currentMessageObject.type == 1) {
-            if (currentPhotoObject == null) {
-                return;
-            }
-            fileName = FileLoader.getAttachFileName(currentPhotoObject);
-            cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-        } else if (currentMessageObject.type == 8 || currentMessageObject.type == 3 || currentMessageObject.type == 9) {
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
-                File f = new File(currentMessageObject.messageOwner.attachPath);
-                if (f.exists()) {
-                    fileName = currentMessageObject.messageOwner.attachPath;
-                    cacheFile = f;
-                }
-            }
-            if (fileName == null) {
-                fileName = currentMessageObject.getFileName();
-                cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-            }
-        }
-        if (fileName == null) {
-            radialProgress.setBackground(null, false, false);
-            return;
-        }
-        if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
-                MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
-                buttonState = 1;
-                radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-                Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
-                if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
-                    progress = 1.0f;
-                }
-                radialProgress.setProgress(progress != null ? progress : 0, false);
-                invalidate();
-            }
-        } else {
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
-                MediaController.getInstance().removeLoadingFileObserver(this);
-            }
-            if (cacheFile.exists() && cacheFile.length() == 0) {
-                cacheFile.delete();
-            }
-            if (!cacheFile.exists()) {
-                MediaController.getInstance().addLoadingFileObserver(fileName, this);
-                float setProgress = 0;
-                boolean progressVisible = false;
-                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                    if (cancelLoading || currentMessageObject.type != 1 || !MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
-                        buttonState = 0;
-                    } else {
-                        progressVisible = true;
-                        buttonState = 1;
-                    }
-                } else {
-                    progressVisible = true;
-                    buttonState = 1;
-                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                    setProgress = progress != null ? progress : 0;
-                }
-                radialProgress.setProgress(setProgress, false);
-                radialProgress.setBackground(getDrawableForCurrentState(), progressVisible, animated);
-                invalidate();
-            } else {
-                MediaController.getInstance().removeLoadingFileObserver(this);
-                if (currentMessageObject.type == 8 && (gifDrawable == null || gifDrawable != null && !gifDrawable.isRunning())) {
-                    buttonState = 2;
-                } else if (currentMessageObject.type == 3) {
-                    buttonState = 3;
-                } else {
-                    buttonState = -1;
-                }
-                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-                invalidate();
-            }
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14) + namesOffset + additionHeight);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        int x;
-        if (currentMessageObject.isOut()) {
-            if (media) {
-                x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
-            } else {
-                x = layoutWidth - backgroundWidth + AndroidUtilities.dp(6);
-            }
-        } else {
-            if (isChat) {
-                x = AndroidUtilities.dp(67);
-            } else {
-                x = AndroidUtilities.dp(15);
-            }
-        }
-        photoImage.setImageCoords(x, AndroidUtilities.dp(7) + namesOffset, photoWidth, photoHeight);
-        int size = AndroidUtilities.dp(48);
-        buttonX = (int) (x + (photoWidth - size) / 2.0f);
-        buttonY = (int) (AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f) + namesOffset;
-
-        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
-        deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
-    }
-
-    private void updateSecretTimeText() {
-        if (currentMessageObject == null || currentMessageObject.isOut()) {
-            return;
-        }
-        String str = currentMessageObject.getSecretTimeString();
-        if (str == null) {
-            return;
-        }
-        if (currentInfoString == null || !currentInfoString.equals(str)) {
-            currentInfoString = str;
-            infoOffset = 0;
-            infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-            CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-            infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            invalidate();
-        }
-    }
-
-    public void setAllowedToSetPhoto(boolean value) {
-        if (allowedToSetPhoto == value) {
-            return;
-        }
-        if (currentMessageObject != null && currentMessageObject.type == 1) {
-            allowedToSetPhoto = value;
-            if (value) {
-                MessageObject temp = currentMessageObject;
-                currentMessageObject = null;
-                setMessageObject(temp);
-            }
-        }
-    }
-
-    @Override
-    protected void onAfterBackgroundDraw(Canvas canvas) {
-        boolean imageDrawn = false;
-        if (gifDrawable != null) {
-            drawTime = !gifDrawable.isPlaying();
-            canvas.save();
-            gifDrawable.setBounds(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoWidth, photoImage.getImageY() + photoHeight);
-            gifDrawable.draw(canvas);
-            canvas.restore();
-        } else {
-            photoImage.setPressed(isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted);
-            photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
-            imageDrawn = photoImage.draw(canvas);
-            drawTime = photoImage.getVisible();
-        }
-
-        radialProgress.setHideCurrentDrawable(false);
-
-        if (currentMessageObject.type == 9) {
-            Drawable menuDrawable;
-            if (currentMessageObject.isOut()) {
-                infoPaint.setColor(0xff70b15c);
-                docBackPaint.setColor(0xffdaf5c3);
-                menuDrawable = ResourceLoader.docMenuOutDrawable;
-            } else {
-                infoPaint.setColor(0xffa1adbb);
-                docBackPaint.setColor(0xffebf0f5);
-                menuDrawable = ResourceLoader.docMenuInDrawable;
-            }
-
-            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(44), AndroidUtilities.dp(10) + namesOffset);
-            menuDrawable.draw(canvas);
-
-            if (buttonState >= 0 && buttonState < 4) {
-                if (!imageDrawn) {
-                    if (buttonState == 1 && !currentMessageObject.isSending()) {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawablesDoc[2][currentMessageObject.isOut() ? 1 : 0]);
-                    } else {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawablesDoc[buttonState][currentMessageObject.isOut() ? 1 : 0]);
-                    }
-                } else {
-                    if (buttonState == 1 && !currentMessageObject.isSending()) {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawables[4]);
-                    } else {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawables[buttonState]);
-                    }
-                }
-            }
-
-            if (!imageDrawn) {
-                canvas.drawRect(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoImage.getImageWidth(), photoImage.getImageY() + photoImage.getImageHeight(), docBackPaint);
-                if (currentMessageObject.isOut()) {
-                    radialProgress.setProgressColor(0xff81bd72);
-                } else {
-                    radialProgress.setProgressColor(0xffadbdcc);
-                }
-            } else {
-                if (buttonState == -1) {
-                    radialProgress.setHideCurrentDrawable(true);
-                }
-                radialProgress.setProgressColor(0xffffffff);
-            }
-        } else {
-            radialProgress.setProgressColor(0xffffffff);
-        }
-
-        if (buttonState == -1 && currentMessageObject.isSecretPhoto()) {
-            int drawable = 5;
-            if (currentMessageObject.messageOwner.destroyTime != 0) {
-                if (currentMessageObject.isOut()) {
-                    drawable = 7;
-                } else {
-                    drawable = 6;
-                }
-            }
-            setDrawableBounds(ResourceLoader.buttonStatesDrawables[drawable], buttonX, buttonY);
-            ResourceLoader.buttonStatesDrawables[drawable].setAlpha((int) (255 * (1.0f - radialProgress.getAlpha())));
-            ResourceLoader.buttonStatesDrawables[drawable].draw(canvas);
-            if (!currentMessageObject.isOut() && currentMessageObject.messageOwner.destroyTime != 0) {
-                long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
-                float progress = Math.max(0, (long) currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
-                canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
-                if (progress != 0) {
-                    int offset = AndroidUtilities.dp(2);
-                    invalidate((int) deleteProgressRect.left - offset, (int) deleteProgressRect.top - offset, (int) deleteProgressRect.right + offset * 2, (int) deleteProgressRect.bottom + offset * 2);
-                }
-                updateSecretTimeText();
-            }
-        }
-
-        radialProgress.onDraw(canvas);
-
-        if (currentMessageObject.type == 1 || currentMessageObject.type == 3) {
-            if (nameLayout != null) {
-                canvas.save();
-                canvas.translate(captionX = photoImage.getImageX() + AndroidUtilities.dp(5), captionY = photoImage.getImageY() + photoHeight + AndroidUtilities.dp(6));
-                if (pressedLink != null) {
-                    canvas.drawPath(urlPath, urlPaint);
-                }
-                nameLayout.draw(canvas);
-                canvas.restore();
-            }
-            if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto())) {
-                infoPaint.setColor(0xffffffff);
-                setDrawableBounds(ResourceLoader.mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dp(16.5f));
-                ResourceLoader.mediaBackgroundDrawable.draw(canvas);
-
-                if (currentMessageObject.type == 3) {
-                    setDrawableBounds(ResourceLoader.videoIconDrawable, photoImage.getImageX() + AndroidUtilities.dp(8), photoImage.getImageY() + AndroidUtilities.dp(7.5f));
-                    ResourceLoader.videoIconDrawable.draw(canvas);
-                }
-
-                canvas.save();
-                canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8) + infoOffset, photoImage.getImageY() + AndroidUtilities.dp(5.5f));
-                infoLayout.draw(canvas);
-                canvas.restore();
-            }
-        } else if (currentMessageObject.type == 4) {
-            if (nameLayout != null) {
-                locationAddressPaint.setColor(currentMessageObject.isOut() ? 0xff70b15c : 0xff999999);
-
-                canvas.save();
-                canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(3));
-                nameLayout.draw(canvas);
-                canvas.restore();
-
-                if (infoLayout != null) {
-                    canvas.save();
-                    canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(nameLayout.getLineCount() * 16 + 5));
-                    infoLayout.draw(canvas);
-                    canvas.restore();
-                }
-            }
-        } else if (nameLayout != null) {
-            canvas.save();
-            canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(8));
-            nameLayout.draw(canvas);
-            canvas.restore();
-
-            if (infoLayout != null) {
-                canvas.save();
-                canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(30));
-                infoLayout.draw(canvas);
-                canvas.restore();
-            }
-        }
-    }
-
-    @Override
-    public void onFailedDownload(String fileName) {
-        updateButtonState(false);
-    }
-
-    @Override
-    public void onSuccessDownload(String fileName) {
-        radialProgress.setProgress(1, true);
-        if (currentMessageObject.type == 8 && lastDownloadedGifMessage != null && lastDownloadedGifMessage.getId() == currentMessageObject.getId()) {
-            buttonState = 2;
-            didPressedButton(true);
-        } else if (!photoNotSet) {
-            updateButtonState(true);
-        }
-        if (photoNotSet) {
-            setMessageObject(currentMessageObject);
-        }
-    }
-
-    @Override
-    public void onProgressDownload(String fileName, float progress) {
-        radialProgress.setProgress(progress, true);
-        if (buttonState != 1) {
-            updateButtonState(false);
-        }
-    }
-
-    @Override
-    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-        radialProgress.setProgress(progress, true);
-    }
-
-    @Override
-    public int getObserverTag() {
-        return TAG;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
deleted file mode 100644
index 7a477eafb..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class MentionCell extends LinearLayout {
-
-    private BackupImageView imageView;
-    private TextView nameTextView;
-    private TextView usernameTextView;
-    private AvatarDrawable avatarDrawable;
-
-    public MentionCell(Context context) {
-        super(context);
-
-        setOrientation(HORIZONTAL);
-
-        avatarDrawable = new AvatarDrawable();
-        avatarDrawable.setSmallStyle(true);
-
-        imageView = new BackupImageView(context);
-        imageView.setRoundRadius(AndroidUtilities.dp(14));
-        addView(imageView, LayoutHelper.createLinear(28, 28, 12, 4, 0, 0));
-
-        nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xff000000);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-        nameTextView.setSingleLine(true);
-        nameTextView.setGravity(Gravity.LEFT);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        addView(nameTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 12, 0, 0, 0));
-
-        usernameTextView = new TextView(context);
-        usernameTextView.setTextColor(0xff999999);
-        usernameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-        usernameTextView.setSingleLine(true);
-        usernameTextView.setGravity(Gravity.LEFT);
-        usernameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        addView(usernameTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 12, 0, 0, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(36), MeasureSpec.EXACTLY));
-    }
-
-    public void setUser(TLRPC.User user) {
-        if (user == null) {
-            nameTextView.setText("");
-            usernameTextView.setText("");
-            imageView.setImageDrawable(null);
-            return;
-        }
-        avatarDrawable.setInfo(user);
-        if (user.photo != null && user.photo.photo_small != null) {
-            imageView.setImage(user.photo.photo_small, "50_50", avatarDrawable);
-        } else {
-            imageView.setImageDrawable(avatarDrawable);
-        }
-        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
-        usernameTextView.setText("@" + user.username);
-        imageView.setVisibility(VISIBLE);
-        usernameTextView.setVisibility(VISIBLE);
-    }
-
-    public void setText(String text) {
-        imageView.setVisibility(INVISIBLE);
-        usernameTextView.setVisibility(INVISIBLE);
-        nameTextView.setText(text);
-    }
-
-    public void setIsDarkTheme(boolean isDarkTheme) {
-        if (isDarkTheme) {
-            nameTextView.setTextColor(0xffffffff);
-            usernameTextView.setTextColor(0xff999999);
-        } else {
-            nameTextView.setTextColor(0xff000000);
-            usernameTextView.setTextColor(0xff999999);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
deleted file mode 100644
index ce803d315..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.Emoji;
-import org.telegram.android.query.StickersQuery;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class StickerEmojiCell extends FrameLayout {
-
-    private BackupImageView imageView;
-    private TLRPC.Document sticker;
-    private TextView emojiTextView;
-
-    public StickerEmojiCell(Context context) {
-        super(context);
-
-        imageView = new BackupImageView(context);
-        imageView.setAspectFit(true);
-        addView(imageView, LayoutHelper.createFrame(66, 66, Gravity.CENTER));
-
-        emojiTextView = new TextView(context);
-        emojiTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        addView(emojiTextView, LayoutHelper.createFrame(28, 28, Gravity.BOTTOM | Gravity.RIGHT));
-    }
-
-    @Override
-    public void setPressed(boolean pressed) {
-        if (imageView.getImageReceiver().getPressed() != pressed) {
-            imageView.getImageReceiver().setPressed(pressed);
-            imageView.invalidate();
-        }
-        super.setPressed(pressed);
-    }
-
-    public TLRPC.Document getSticker() {
-        return sticker;
-    }
-
-    public void setSticker(TLRPC.Document document, boolean showEmoji) {
-        if (document != null) {
-            sticker = document;
-            imageView.setImage(document.thumb.location, null, "webp", null);
-
-
-            if (showEmoji) {
-                boolean set = false;
-                for (TLRPC.DocumentAttribute attribute : document.attributes) {
-                    if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                        if (attribute.alt != null && attribute.alt.length() > 0) {
-                            emojiTextView.setText(Emoji.replaceEmoji(attribute.alt, emojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16)));
-                            set = true;
-                        }
-                        break;
-                    }
-                }
-                if (!set) {
-                    emojiTextView.setText(Emoji.replaceEmoji(StickersQuery.getEmojiForSticker(sticker.id), emojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(16)));
-                }
-                emojiTextView.setVisibility(VISIBLE);
-            } else {
-                emojiTextView.setVisibility(INVISIBLE);
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
deleted file mode 100644
index 4d6580a2e..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ /dev/null
@@ -1,1356 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Components;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.media.AudioManager;
-import android.os.PowerManager;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.text.style.ImageSpan;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
-import android.view.animation.AccelerateDecelerateInterpolator;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.PopupWindow;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.Emoji;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.SendMessagesHelper;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.messenger.ApplicationLoader;
-
-public class ChatActivityEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
-
-    public interface ChatActivityEnterViewDelegate {
-        void onMessageSend(String message);
-        void needSendTyping();
-        void onTextChanged(CharSequence text, boolean bigChange);
-        void onAttachButtonHidden();
-        void onAttachButtonShow();
-        void onWindowSizeChanged(int size);
-    }
-
-    private EditText messageEditText;
-    private ImageView sendButton;
-    private PopupWindow emojiPopup;
-    private ImageView emojiButton;
-    private EmojiView emojiView;
-    private TextView recordTimeText;
-    private ImageView audioSendButton;
-    private FrameLayout recordPanel;
-    private LinearLayout slideText;
-    private View sizeNotifierLayout;
-    private FrameLayout attachButton;
-    private LinearLayout textFieldContainer;
-    private View topView;
-
-    private int framesDroped;
-
-    private int keyboardTransitionState;
-    private boolean showKeyboardOnEmojiButton;
-    private ViewTreeObserver.OnPreDrawListener onPreDrawListener;
-
-    private PowerManager.WakeLock mWakeLock;
-    private AnimatorSetProxy runningAnimation;
-    private AnimatorSetProxy runningAnimation2;
-    private ObjectAnimatorProxy runningAnimationAudio;
-    private int runningAnimationType;
-    private int audioInterfaceState;
-
-    private int keyboardHeight;
-    private int keyboardHeightLand;
-    private boolean keyboardVisible;
-    private boolean sendByEnter;
-    private long lastTypingTimeSend;
-    private String lastTimeString;
-    private float startedDraggingX = -1;
-    private float distCanMove = AndroidUtilities.dp(80);
-    private boolean recordingAudio;
-    private boolean forceShowSendButton;
-    private boolean allowStickers;
-
-    private Activity parentActivity;
-    private BaseFragment parentFragment;
-    private long dialog_id;
-    private boolean ignoreTextChange;
-    private MessageObject replyingMessageObject;
-    private TLRPC.WebPage messageWebPage;
-    private boolean messageWebPageSearch = true;
-    private ChatActivityEnterViewDelegate delegate;
-
-    private float topViewAnimation;
-    private boolean topViewShowed;
-    private boolean needShowTopView;
-    private boolean allowShowTopView;
-    private AnimatorSetProxy currentTopViewAnimation;
-
-    public ChatActivityEnterView(Activity context, View parent, BaseFragment fragment, boolean isChat) {
-        super(context);
-        setBackgroundResource(R.drawable.compose_panel);
-        setFocusable(true);
-        setFocusableInTouchMode(true);
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStarted);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStartError);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStopped);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidSent);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.hideEmojiKeyboard);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioRouteChanged);
-        parentActivity = context;
-        parentFragment = fragment;
-        sizeNotifierLayout = parent;
-        if (sizeNotifierLayout instanceof SizeNotifierRelativeLayout) {
-            ((SizeNotifierRelativeLayout) sizeNotifierLayout).setDelegate(this);
-        } else if (sizeNotifierLayout instanceof SizeNotifierFrameLayout) {
-            ((SizeNotifierFrameLayout) sizeNotifierLayout).setDelegate(this);
-        }
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        sendByEnter = preferences.getBoolean("send_by_enter", false);
-
-        parent.getViewTreeObserver().addOnPreDrawListener(onPreDrawListener = new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                if (keyboardTransitionState == 1) {
-                    if (keyboardVisible || framesDroped >= 60) {
-                        showEmojiPopup(false, false);
-                        keyboardTransitionState = 0;
-                    } else {
-                        openKeyboard();
-                    }
-                    framesDroped++;
-                    return false;
-                } else if (keyboardTransitionState == 2) {
-                    if (!keyboardVisible || framesDroped >= 60) {
-                        int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-                        sizeNotifierLayout.setPadding(0, 0, 0, currentHeight);
-                        keyboardTransitionState = 0;
-                    }
-                    framesDroped++;
-                    return false;
-                }
-                return true;
-            }
-        });
-
-        textFieldContainer = new LinearLayout(context);
-        textFieldContainer.setBackgroundColor(0xffffffff);
-        textFieldContainer.setOrientation(LinearLayout.HORIZONTAL);
-        addView(textFieldContainer);
-        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
-        layoutParams2.gravity = Gravity.LEFT | Gravity.TOP;
-        layoutParams2.width = LayoutHelper.MATCH_PARENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.topMargin = AndroidUtilities.dp(2);
-        textFieldContainer.setLayoutParams(layoutParams2);
-
-        FrameLayoutFixed frameLayout = new FrameLayoutFixed(context);
-        textFieldContainer.addView(frameLayout);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.width = 0;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.weight = 1;
-        frameLayout.setLayoutParams(layoutParams);
-
-        emojiButton = new ImageView(context);
-        emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
-        emojiButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        emojiButton.setPadding(AndroidUtilities.dp(4), AndroidUtilities.dp(1), 0, 0);
-        frameLayout.addView(emojiButton);
-        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) emojiButton.getLayoutParams();
-        layoutParams1.width = AndroidUtilities.dp(48);
-        layoutParams1.height = AndroidUtilities.dp(48);
-        layoutParams1.gravity = Gravity.BOTTOM;
-        emojiButton.setLayoutParams(layoutParams1);
-        emojiButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (showKeyboardOnEmojiButton) {
-                    setKeyboardTransitionState(1);
-                    int selection = messageEditText.getSelectionStart();
-                    MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, 0, 0, 0);
-                    messageEditText.onTouchEvent(event);
-                    event.recycle();
-                    messageEditText.setSelection(selection);
-                } else {
-                    showEmojiPopup(emojiPopup == null || !emojiPopup.isShowing(), true);
-                }
-            }
-        });
-
-        messageEditText = new EditText(context);
-        messageEditText.setHint(LocaleController.getString("TypeMessage", R.string.TypeMessage));
-        messageEditText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-        messageEditText.setInputType(messageEditText.getInputType() | EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES | EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE);
-        messageEditText.setSingleLine(false);
-        messageEditText.setMaxLines(4);
-        messageEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        messageEditText.setGravity(Gravity.BOTTOM);
-        messageEditText.setPadding(0, AndroidUtilities.dp(11), 0, AndroidUtilities.dp(12));
-        messageEditText.setBackgroundDrawable(null);
-        AndroidUtilities.clearCursorDrawable(messageEditText);
-        messageEditText.setTextColor(0xff000000);
-        messageEditText.setHintTextColor(0xffb2b2b2);
-        frameLayout.addView(messageEditText);
-        layoutParams1 = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.gravity = Gravity.BOTTOM;
-        layoutParams1.leftMargin = AndroidUtilities.dp(52);
-        layoutParams1.rightMargin = AndroidUtilities.dp(isChat ? 50 : 2);
-        messageEditText.setLayoutParams(layoutParams1);
-        messageEditText.setOnKeyListener(new View.OnKeyListener() {
-            @Override
-            public boolean onKey(View view, int i, KeyEvent keyEvent) {
-                if (i == 4 && !keyboardVisible && emojiPopup != null && emojiPopup.isShowing()) {
-                    if (keyEvent.getAction() == 1) {
-                        showEmojiPopup(false, true);
-                    }
-                    return true;
-                } else if (i == KeyEvent.KEYCODE_ENTER && sendByEnter && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
-                    sendMessage();
-                    return true;
-                }
-                return false;
-            }
-        });
-        messageEditText.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (emojiPopup != null && emojiPopup.isShowing()) {
-                    setKeyboardTransitionState(1);
-                }
-            }
-        });
-        messageEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_SEND) {
-                    sendMessage();
-                    return true;
-                } else if (sendByEnter) {
-                    if (keyEvent != null && i == EditorInfo.IME_NULL && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
-                        sendMessage();
-                        return true;
-                    }
-                }
-                return false;
-            }
-        });
-        messageEditText.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-            }
-
-            @Override
-            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
-                String message = getTrimmedString(charSequence.toString());
-                checkSendButton(true);
-
-                if (delegate != null) {
-                    if (count > 2 || charSequence == null || charSequence.length() == 0) {
-                        messageWebPageSearch = true;
-                    }
-                    delegate.onTextChanged(charSequence, before > count + 1 || (count - before) > 2);
-                }
-
-                if (message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
-                    int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-                    TLRPC.User currentUser = null;
-                    if ((int) dialog_id > 0) {
-                        currentUser = MessagesController.getInstance().getUser((int) dialog_id);
-                    }
-                    if (currentUser != null && (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires < currentTime)) {
-                        return;
-                    }
-                    lastTypingTimeSend = System.currentTimeMillis();
-                    if (delegate != null) {
-                        delegate.needSendTyping();
-                    }
-                }
-            }
-
-            @Override
-            public void afterTextChanged(Editable editable) {
-                if (sendByEnter && editable.length() > 0 && editable.charAt(editable.length() - 1) == '\n') {
-                    sendMessage();
-                }
-                int i = 0;
-                ImageSpan[] arrayOfImageSpan = editable.getSpans(0, editable.length(), ImageSpan.class);
-                int j = arrayOfImageSpan.length;
-                while (true) {
-                    if (i >= j) {
-                        Emoji.replaceEmoji(editable, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
-                        return;
-                    }
-                    editable.removeSpan(arrayOfImageSpan[i]);
-                    i++;
-                }
-            }
-        });
-
-        if (isChat) {
-            attachButton = new FrameLayout(context);
-            attachButton.setEnabled(false);
-            ViewProxy.setPivotX(attachButton, AndroidUtilities.dp(48));
-            frameLayout.addView(attachButton);
-            layoutParams1 = (FrameLayout.LayoutParams) attachButton.getLayoutParams();
-            layoutParams1.width = AndroidUtilities.dp(48);
-            layoutParams1.height = AndroidUtilities.dp(48);
-            layoutParams1.gravity = Gravity.BOTTOM | Gravity.RIGHT;
-            attachButton.setLayoutParams(layoutParams1);
-        }
-
-        recordPanel = new FrameLayoutFixed(context);
-        recordPanel.setVisibility(GONE);
-        recordPanel.setBackgroundColor(0xffffffff);
-        frameLayout.addView(recordPanel);
-        layoutParams1 = (FrameLayout.LayoutParams) recordPanel.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = AndroidUtilities.dp(48);
-        layoutParams1.gravity = Gravity.BOTTOM;
-        recordPanel.setLayoutParams(layoutParams1);
-
-        slideText = new LinearLayout(context);
-        slideText.setOrientation(LinearLayout.HORIZONTAL);
-        recordPanel.addView(slideText);
-        layoutParams1 = (FrameLayout.LayoutParams) slideText.getLayoutParams();
-        layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.gravity = Gravity.CENTER;
-        layoutParams1.leftMargin = AndroidUtilities.dp(30);
-        slideText.setLayoutParams(layoutParams1);
-
-        ImageView imageView = new ImageView(context);
-        imageView.setImageResource(R.drawable.slidearrow);
-        slideText.addView(imageView);
-        layoutParams = (LinearLayout.LayoutParams) imageView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.topMargin = AndroidUtilities.dp(1);
-        imageView.setLayoutParams(layoutParams);
-
-        TextView textView = new TextView(context);
-        textView.setText(LocaleController.getString("SlideToCancel", R.string.SlideToCancel));
-        textView.setTextColor(0xff999999);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
-        slideText.addView(textView);
-        layoutParams = (LinearLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.leftMargin = AndroidUtilities.dp(6);
-        textView.setLayoutParams(layoutParams);
-
-        LinearLayout linearLayout = new LinearLayout(context);
-        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
-        linearLayout.setPadding(AndroidUtilities.dp(13), 0, 0, 0);
-        linearLayout.setBackgroundColor(0xffffffff);
-        recordPanel.addView(linearLayout);
-        layoutParams1 = (FrameLayout.LayoutParams) linearLayout.getLayoutParams();
-        layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.gravity = Gravity.CENTER_VERTICAL;
-        linearLayout.setLayoutParams(layoutParams1);
-
-        imageView = new ImageView(context);
-        imageView.setImageResource(R.drawable.rec);
-        linearLayout.addView(imageView);
-        layoutParams = (LinearLayout.LayoutParams) imageView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.topMargin = AndroidUtilities.dp(1);
-        imageView.setLayoutParams(layoutParams);
-
-        recordTimeText = new TextView(context);
-        recordTimeText.setText("00:00");
-        recordTimeText.setTextColor(0xff4d4c4b);
-        recordTimeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        linearLayout.addView(recordTimeText);
-        layoutParams = (LinearLayout.LayoutParams) recordTimeText.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.leftMargin = AndroidUtilities.dp(6);
-        recordTimeText.setLayoutParams(layoutParams);
-
-        FrameLayout frameLayout1 = new FrameLayout(context);
-        textFieldContainer.addView(frameLayout1);
-        layoutParams = (LinearLayout.LayoutParams) frameLayout1.getLayoutParams();
-        layoutParams.width = AndroidUtilities.dp(48);
-        layoutParams.height = AndroidUtilities.dp(48);
-        layoutParams.gravity = Gravity.BOTTOM;
-        frameLayout1.setLayoutParams(layoutParams);
-
-        audioSendButton = new ImageView(context);
-        audioSendButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        audioSendButton.setImageResource(R.drawable.mic_button_states);
-        audioSendButton.setBackgroundColor(0xffffffff);
-        audioSendButton.setSoundEffectsEnabled(false);
-        audioSendButton.setPadding(0, 0, AndroidUtilities.dp(4), 0);
-        frameLayout1.addView(audioSendButton);
-        layoutParams1 = (FrameLayout.LayoutParams) audioSendButton.getLayoutParams();
-        layoutParams1.width = AndroidUtilities.dp(48);
-        layoutParams1.height = AndroidUtilities.dp(48);
-        audioSendButton.setLayoutParams(layoutParams1);
-        audioSendButton.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View view, MotionEvent motionEvent) {
-                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
-                    if (parentFragment != null) {
-                        String action;
-                        TLRPC.Chat currentChat;
-                        if ((int) dialog_id < 0) {
-                            currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
-                            if (currentChat != null && currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
-                                action = "bigchat_upload_audio";
-                            } else {
-                                action = "chat_upload_audio";
-                            }
-                        } else {
-                            action = "pm_upload_audio";
-                        }
-                        if (!MessagesController.isFeatureEnabled(action, parentFragment)) {
-                            return false;
-                        }
-                    }
-                    startedDraggingX = -1;
-                    MediaController.getInstance().startRecording(dialog_id, replyingMessageObject);
-                    updateAudioRecordIntefrace();
-                    audioSendButton.getParent().requestDisallowInterceptTouchEvent(true);
-                } else if (motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
-                    startedDraggingX = -1;
-                    MediaController.getInstance().stopRecording(true);
-                    recordingAudio = false;
-                    updateAudioRecordIntefrace();
-                } else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE && recordingAudio) {
-                    float x = motionEvent.getX();
-                    if (x < -distCanMove) {
-                        MediaController.getInstance().stopRecording(false);
-                        recordingAudio = false;
-                        updateAudioRecordIntefrace();
-                    }
-
-                    x = x + ViewProxy.getX(audioSendButton);
-                    FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
-                    if (startedDraggingX != -1) {
-                        float dist = (x - startedDraggingX);
-                        params.leftMargin = AndroidUtilities.dp(30) + (int) dist;
-                        slideText.setLayoutParams(params);
-                        float alpha = 1.0f + dist / distCanMove;
-                        if (alpha > 1) {
-                            alpha = 1;
-                        } else if (alpha < 0) {
-                            alpha = 0;
-                        }
-                        ViewProxy.setAlpha(slideText, alpha);
-                    }
-                    if (x <= ViewProxy.getX(slideText) + slideText.getWidth() + AndroidUtilities.dp(30)) {
-                        if (startedDraggingX == -1) {
-                            startedDraggingX = x;
-                            distCanMove = (recordPanel.getMeasuredWidth() - slideText.getMeasuredWidth() - AndroidUtilities.dp(48)) / 2.0f;
-                            if (distCanMove <= 0) {
-                                distCanMove = AndroidUtilities.dp(80);
-                            } else if (distCanMove > AndroidUtilities.dp(80)) {
-                                distCanMove = AndroidUtilities.dp(80);
-                            }
-                        }
-                    }
-                    if (params.leftMargin > AndroidUtilities.dp(30)) {
-                        params.leftMargin = AndroidUtilities.dp(30);
-                        slideText.setLayoutParams(params);
-                        ViewProxy.setAlpha(slideText, 1);
-                        startedDraggingX = -1;
-                    }
-                }
-                view.onTouchEvent(motionEvent);
-                return true;
-            }
-        });
-
-        sendButton = new ImageView(context);
-        sendButton.setVisibility(View.INVISIBLE);
-        sendButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        sendButton.setImageResource(R.drawable.ic_send);
-        sendButton.setSoundEffectsEnabled(false);
-        ViewProxy.setScaleX(sendButton, 0.1f);
-        ViewProxy.setScaleY(sendButton, 0.1f);
-        ViewProxy.setAlpha(sendButton, 0.0f);
-        sendButton.clearAnimation();
-        frameLayout1.addView(sendButton);
-        layoutParams1 = (FrameLayout.LayoutParams) sendButton.getLayoutParams();
-        layoutParams1.width = AndroidUtilities.dp(48);
-        layoutParams1.height = AndroidUtilities.dp(48);
-        sendButton.setLayoutParams(layoutParams1);
-        sendButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                sendMessage();
-            }
-        });
-
-        checkSendButton(false);
-    }
-
-    private void setKeyboardTransitionState(int state) {
-        if (AndroidUtilities.usingHardwareInput) {
-            if (state == 1) {
-                showEmojiPopup(false, false);
-                keyboardTransitionState = 0;
-
-            } else if (state == 2) {
-                int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-                sizeNotifierLayout.setPadding(0, 0, 0, currentHeight);
-                keyboardTransitionState = 0;
-            }
-        } else {
-            framesDroped = 0;
-            keyboardTransitionState = state;
-            if (state == 1) {
-                sizeNotifierLayout.setPadding(0, 0, 0, 0);
-            }
-        }
-    }
-
-    public void addTopView(View view, int height) {
-        if (view == null) {
-            return;
-        }
-        addView(view, 0);
-        topView = view;
-        topView.setVisibility(GONE);
-        needShowTopView = false;
-        LayoutParams layoutParams = (LayoutParams) topView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = height;
-        layoutParams.topMargin = AndroidUtilities.dp(2);
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        topView.setLayoutParams(layoutParams);
-    }
-
-    public void setTopViewAnimation(float progress) {
-        topViewAnimation = progress;
-        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
-        layoutParams2.topMargin = AndroidUtilities.dp(2) + (int) (topView.getLayoutParams().height * progress);
-        textFieldContainer.setLayoutParams(layoutParams2);
-    }
-
-    public float getTopViewAnimation() {
-        return topViewAnimation;
-    }
-
-    public void setForceShowSendButton(boolean value, boolean animated) {
-        forceShowSendButton = value;
-        checkSendButton(animated);
-    }
-
-    public void setAllowStickers(boolean value) {
-        allowStickers = value;
-    }
-
-    public void showTopView(boolean animated) {
-        if (topView == null || topViewShowed) {
-            return;
-        }
-        needShowTopView = true;
-        topViewShowed = true;
-        if (allowShowTopView) {
-            topView.setVisibility(VISIBLE);
-            if (currentTopViewAnimation != null) {
-                currentTopViewAnimation.cancel();
-                currentTopViewAnimation = null;
-            }
-            if (animated) {
-                if (keyboardVisible || emojiPopup != null && emojiPopup.isShowing()) {
-                    currentTopViewAnimation = new AnimatorSetProxy();
-                    currentTopViewAnimation.playTogether(
-                            ObjectAnimatorProxy.ofFloat(ChatActivityEnterView.this, "topViewAnimation", 1.0f)
-                    );
-                    currentTopViewAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                        @Override
-                        public void onAnimationEnd(Object animation) {
-                            if (animation == currentTopViewAnimation) {
-                                setTopViewAnimation(1.0f);
-                                if (!forceShowSendButton) {
-                                    openKeyboard();
-                                }
-                                currentTopViewAnimation = null;
-                            }
-                        }
-                    });
-                    currentTopViewAnimation.setDuration(200);
-                    currentTopViewAnimation.start();
-                } else {
-                    setTopViewAnimation(1.0f);
-                    if (!forceShowSendButton) {
-                        openKeyboard();
-                    }
-                }
-            } else {
-                setTopViewAnimation(1.0f);
-            }
-        }
-    }
-
-    public void hideTopView(final boolean animated) {
-        if (topView == null || !topViewShowed) {
-            return;
-        }
-
-        topViewShowed = false;
-        needShowTopView = false;
-        if (allowShowTopView) {
-            float resumeValue = 1.0f;
-            if (currentTopViewAnimation != null) {
-                resumeValue = topViewAnimation;
-                currentTopViewAnimation.cancel();
-                currentTopViewAnimation = null;
-            }
-            if (animated) {
-                currentTopViewAnimation = new AnimatorSetProxy();
-                currentTopViewAnimation.playTogether(
-                        ObjectAnimatorProxy.ofFloat(ChatActivityEnterView.this, "topViewAnimation", resumeValue, 0.0f)
-                );
-                currentTopViewAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                    @Override
-                    public void onAnimationEnd(Object animation) {
-                        if (animation == currentTopViewAnimation) {
-                            topView.setVisibility(GONE);
-                            setTopViewAnimation(0.0f);
-                            currentTopViewAnimation = null;
-                        }
-                    }
-                });
-                currentTopViewAnimation.setDuration(200);
-                currentTopViewAnimation.start();
-            } else {
-                topView.setVisibility(GONE);
-                setTopViewAnimation(0.0f);
-            }
-        }
-    }
-
-    public boolean isTopViewVisible() {
-        return topView != null && topView.getVisibility() == VISIBLE;
-    }
-
-    private void onWindowSizeChanged(int size) {
-        if (delegate != null) {
-            delegate.onWindowSizeChanged(size);
-        }
-        if (topView != null) {
-            if (size < AndroidUtilities.dp(72) + AndroidUtilities.getCurrentActionBarHeight()) {
-                if (allowShowTopView) {
-                    allowShowTopView = false;
-                    if (needShowTopView) {
-                        topView.setVisibility(View.GONE);
-                        setTopViewAnimation(0.0f);
-                    }
-                }
-            } else {
-                if (!allowShowTopView) {
-                    allowShowTopView = true;
-                    if (needShowTopView) {
-                        topView.setVisibility(View.VISIBLE);
-                        setTopViewAnimation(1.0f);
-                    }
-                }
-            }
-        }
-    }
-
-    public void onDestroy() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStarted);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStartError);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStopped);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordProgressChanged);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidSent);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.hideEmojiKeyboard);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioRouteChanged);
-        sizeNotifierLayout.getViewTreeObserver().removeOnPreDrawListener(onPreDrawListener);
-        if (mWakeLock != null) {
-            try {
-                mWakeLock.release();
-                mWakeLock = null;
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-        if (sizeNotifierLayout != null) {
-            if (sizeNotifierLayout instanceof SizeNotifierRelativeLayout) {
-                ((SizeNotifierRelativeLayout) sizeNotifierLayout).setDelegate(null);
-            } else if (sizeNotifierLayout instanceof SizeNotifierFrameLayout) {
-                ((SizeNotifierFrameLayout) sizeNotifierLayout).setDelegate(null);
-            }
-        }
-    }
-
-    public void setDialogId(long id) {
-        dialog_id = id;
-    }
-
-    public void setReplyingMessageObject(MessageObject messageObject) {
-        replyingMessageObject = messageObject;
-    }
-
-    public void setWebPage(TLRPC.WebPage webPage, boolean searchWebPages) {
-        messageWebPage = webPage;
-        messageWebPageSearch = searchWebPages;
-    }
-
-    public boolean isMessageWebPageSearchEnabled() {
-        return messageWebPageSearch;
-    }
-
-    private void sendMessage() {
-        if (parentFragment != null) {
-            String action;
-            TLRPC.Chat currentChat;
-            if ((int) dialog_id < 0) {
-                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
-                if (currentChat != null && currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
-                    action = "bigchat_message";
-                } else {
-                    action = "chat_message";
-                }
-            } else {
-                action = "pm_message";
-            }
-            if (!MessagesController.isFeatureEnabled(action, parentFragment)) {
-                return;
-            }
-        }
-        String message = messageEditText.getText().toString();
-        if (processSendingText(message)) {
-            messageEditText.setText("");
-            lastTypingTimeSend = 0;
-            if (delegate != null) {
-                delegate.onMessageSend(message);
-            }
-        } else if (forceShowSendButton) {
-            if (delegate != null) {
-                delegate.onMessageSend(null);
-            }
-        }
-    }
-
-    public boolean processSendingText(String text) {
-        text = getTrimmedString(text);
-        if (text.length() != 0) {
-            int count = (int) Math.ceil(text.length() / 4096.0f);
-            for (int a = 0; a < count; a++) {
-                String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
-                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch);
-            }
-            return true;
-        }
-        return false;
-    }
-
-    private String getTrimmedString(String src) {
-        String result = src.trim();
-        if (result.length() == 0) {
-            return result;
-        }
-        while (src.startsWith("\n")) {
-            src = src.substring(1);
-        }
-        while (src.endsWith("\n")) {
-            src = src.substring(0, src.length() - 1);
-        }
-        return src;
-    }
-
-    private void checkSendButton(final boolean animated) {
-        String message = getTrimmedString(messageEditText.getText().toString());
-        if (message.length() > 0 || forceShowSendButton) {
-            if (audioSendButton.getVisibility() == View.VISIBLE) {
-                if (animated) {
-                    if (runningAnimationType == 1) {
-                        return;
-                    }
-                    if (runningAnimation != null) {
-                        runningAnimation.cancel();
-                        runningAnimation = null;
-                    }
-                    if (runningAnimation2 != null) {
-                        runningAnimation2.cancel();
-                        runningAnimation2 = null;
-                    }
-
-                    if (attachButton != null) {
-                        runningAnimation2 = new AnimatorSetProxy();
-                        runningAnimation2.playTogether(
-                                ObjectAnimatorProxy.ofFloat(attachButton, "alpha", 0.0f),
-                                ObjectAnimatorProxy.ofFloat(attachButton, "scaleX", 0.0f)
-                        );
-                        runningAnimation2.setDuration(100);
-                        runningAnimation2.addListener(new AnimatorListenerAdapterProxy() {
-                            @Override
-                            public void onAnimationEnd(Object animation) {
-                                if (runningAnimation2.equals(animation)) {
-                                    attachButton.setVisibility(View.GONE);
-                                    attachButton.clearAnimation();
-                                }
-                            }
-                        });
-                        runningAnimation2.start();
-
-                        if (messageEditText != null) {
-                            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-                            layoutParams.rightMargin = AndroidUtilities.dp(0);
-                            messageEditText.setLayoutParams(layoutParams);
-                        }
-
-                        delegate.onAttachButtonHidden();
-                    }
-
-                    sendButton.setVisibility(View.VISIBLE);
-                    runningAnimation = new AnimatorSetProxy();
-                    runningAnimationType = 1;
-
-                    runningAnimation.playTogether(
-                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 0.1f),
-                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 0.1f),
-                            ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 0.0f),
-                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 1.0f),
-                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 1.0f),
-                            ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 1.0f)
-                    );
-
-                    runningAnimation.setDuration(150);
-                    runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                        @Override
-                        public void onAnimationEnd(Object animation) {
-                            if (runningAnimation.equals(animation)) {
-                                sendButton.setVisibility(View.VISIBLE);
-                                audioSendButton.setVisibility(View.GONE);
-                                audioSendButton.clearAnimation();
-                                runningAnimation = null;
-                                runningAnimationType = 0;
-                            }
-                        }
-                    });
-                    runningAnimation.start();
-                } else {
-                    ViewProxy.setScaleX(audioSendButton, 0.1f);
-                    ViewProxy.setScaleY(audioSendButton, 0.1f);
-                    ViewProxy.setAlpha(audioSendButton, 0.0f);
-                    ViewProxy.setScaleX(sendButton, 1.0f);
-                    ViewProxy.setScaleY(sendButton, 1.0f);
-                    ViewProxy.setAlpha(sendButton, 1.0f);
-                    sendButton.setVisibility(View.VISIBLE);
-                    audioSendButton.setVisibility(View.GONE);
-                    audioSendButton.clearAnimation();
-                    if (attachButton != null) {
-                        attachButton.setVisibility(View.GONE);
-                        attachButton.clearAnimation();
-                        delegate.onAttachButtonHidden();
-                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-                        layoutParams.rightMargin = AndroidUtilities.dp(0);
-                        messageEditText.setLayoutParams(layoutParams);
-                    }
-                }
-            }
-        } else if (sendButton.getVisibility() == View.VISIBLE) {
-            if (animated) {
-                if (runningAnimationType == 2) {
-                    return;
-                }
-
-                if (runningAnimation != null) {
-                    runningAnimation.cancel();
-                    runningAnimation = null;
-                }
-                if (runningAnimation2 != null) {
-                    runningAnimation2.cancel();
-                    runningAnimation2 = null;
-                }
-
-                if (attachButton != null) {
-                    attachButton.setVisibility(View.VISIBLE);
-                    runningAnimation2 = new AnimatorSetProxy();
-                    runningAnimation2.playTogether(
-                            ObjectAnimatorProxy.ofFloat(attachButton, "alpha", 1.0f),
-                            ObjectAnimatorProxy.ofFloat(attachButton, "scaleX", 1.0f)
-                    );
-                    runningAnimation2.setDuration(100);
-                    runningAnimation2.start();
-
-                    if (messageEditText != null) {
-                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-                        layoutParams.rightMargin = AndroidUtilities.dp(50);
-                        messageEditText.setLayoutParams(layoutParams);
-                    }
-
-                    delegate.onAttachButtonShow();
-                }
-
-                audioSendButton.setVisibility(View.VISIBLE);
-                runningAnimation = new AnimatorSetProxy();
-                runningAnimationType = 2;
-
-                runningAnimation.playTogether(
-                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 0.1f),
-                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 0.1f),
-                        ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 0.0f),
-                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 1.0f),
-                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 1.0f),
-                        ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 1.0f)
-                );
-
-                runningAnimation.setDuration(150);
-                runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                    @Override
-                    public void onAnimationEnd(Object animation) {
-                        if (runningAnimation.equals(animation)) {
-                            sendButton.setVisibility(View.GONE);
-                            sendButton.clearAnimation();
-                            audioSendButton.setVisibility(View.VISIBLE);
-                            runningAnimation = null;
-                            runningAnimationType = 0;
-                        }
-                    }
-                });
-                runningAnimation.start();
-            } else {
-                ViewProxy.setScaleX(sendButton, 0.1f);
-                ViewProxy.setScaleY(sendButton, 0.1f);
-                ViewProxy.setAlpha(sendButton, 0.0f);
-                ViewProxy.setScaleX(audioSendButton, 1.0f);
-                ViewProxy.setScaleY(audioSendButton, 1.0f);
-                ViewProxy.setAlpha(audioSendButton, 1.0f);
-                sendButton.setVisibility(View.GONE);
-                sendButton.clearAnimation();
-                audioSendButton.setVisibility(View.VISIBLE);
-                if (attachButton != null) {
-                    delegate.onAttachButtonShow();
-                    attachButton.setVisibility(View.VISIBLE);
-                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-                    layoutParams.rightMargin = AndroidUtilities.dp(50);
-                    messageEditText.setLayoutParams(layoutParams);
-                }
-            }
-        }
-    }
-
-    private void updateAudioRecordIntefrace() {
-        if (recordingAudio) {
-            if (audioInterfaceState == 1) {
-                return;
-            }
-            audioInterfaceState = 1;
-            try {
-                if (mWakeLock == null) {
-                    PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
-                    mWakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, "audio record lock");
-                    mWakeLock.acquire();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            AndroidUtilities.lockOrientation(parentActivity);
-
-            recordPanel.setVisibility(View.VISIBLE);
-            recordTimeText.setText("00:00");
-            lastTimeString = null;
-
-            FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
-            params.leftMargin = AndroidUtilities.dp(30);
-            slideText.setLayoutParams(params);
-            ViewProxy.setAlpha(slideText, 1);
-            ViewProxy.setX(recordPanel, AndroidUtilities.displaySize.x);
-            if (runningAnimationAudio != null) {
-                runningAnimationAudio.cancel();
-            }
-            runningAnimationAudio = ObjectAnimatorProxy.ofFloatProxy(recordPanel, "translationX", 0).setDuration(300);
-            runningAnimationAudio.addListener(new AnimatorListenerAdapterProxy() {
-                @Override
-                public void onAnimationEnd(Object animator) {
-                    if (runningAnimationAudio != null && runningAnimationAudio.equals(animator)) {
-                        ViewProxy.setX(recordPanel, 0);
-                    }
-                }
-            });
-            runningAnimationAudio.setInterpolator(new AccelerateDecelerateInterpolator());
-            runningAnimationAudio.start();
-        } else {
-            if (mWakeLock != null) {
-                try {
-                    mWakeLock.release();
-                    mWakeLock = null;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            AndroidUtilities.unlockOrientation(parentActivity);
-            if (audioInterfaceState == 0) {
-                return;
-            }
-            audioInterfaceState = 0;
-
-            if (runningAnimationAudio != null) {
-                runningAnimationAudio.cancel();
-            }
-            runningAnimationAudio = ObjectAnimatorProxy.ofFloatProxy(recordPanel, "translationX", AndroidUtilities.displaySize.x).setDuration(300);
-            runningAnimationAudio.addListener(new AnimatorListenerAdapterProxy() {
-                @Override
-                public void onAnimationEnd(Object animator) {
-                    if (runningAnimationAudio != null && runningAnimationAudio.equals(animator)) {
-                        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
-                        params.leftMargin = AndroidUtilities.dp(30);
-                        slideText.setLayoutParams(params);
-                        ViewProxy.setAlpha(slideText, 1);
-                        recordPanel.setVisibility(View.GONE);
-                    }
-                }
-            });
-            runningAnimationAudio.setInterpolator(new AccelerateDecelerateInterpolator());
-            runningAnimationAudio.start();
-        }
-    }
-
-    private void showEmojiPopup(boolean show, boolean post) {
-        if (show) {
-            if (emojiPopup == null) {
-                if (parentActivity == null) {
-                    return;
-                }
-                emojiView = new EmojiView(allowStickers, parentActivity);
-                emojiView.setListener(new EmojiView.Listener() {
-                    public boolean onBackspace() {
-                        if (messageEditText.length() == 0) {
-                            return false;
-                        }
-                        messageEditText.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));
-                        return true;
-                    }
-
-                    public void onEmojiSelected(String symbol) {
-                        int i = messageEditText.getSelectionEnd();
-                        if (i < 0) {
-                            i = 0;
-                        }
-                        try {//TODO check
-                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol/* + "\uFE0F"*/, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
-                            messageEditText.setText(messageEditText.getText().insert(i, localCharSequence));
-                            int j = i + localCharSequence.length();
-                            messageEditText.setSelection(j, j);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    }
-
-                    public void onStickerSelected(TLRPC.Document sticker) {
-                        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
-                        if (delegate != null) {
-                            delegate.onMessageSend(null);
-                        }
-                    }
-                });
-                emojiPopup = new PopupWindow(emojiView);
-            }
-
-            if (keyboardHeight <= 0) {
-                keyboardHeight = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height", AndroidUtilities.dp(200));
-            }
-            if (keyboardHeightLand <= 0) {
-                keyboardHeightLand = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height_land3", AndroidUtilities.dp(200));
-            }
-            int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-            FileLog.e("tmessages", "show emoji with height = " + currentHeight);
-            emojiPopup.setHeight(View.MeasureSpec.makeMeasureSpec(currentHeight, View.MeasureSpec.EXACTLY));
-            if (sizeNotifierLayout != null) {
-                emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.EXACTLY));
-            }
-
-            emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.LEFT, 0, 0);
-
-            if (!keyboardVisible) {
-                if (sizeNotifierLayout != null) {
-                    sizeNotifierLayout.setPadding(0, 0, 0, currentHeight);
-                    emojiButton.setImageResource(R.drawable.ic_msg_panel_hide);
-                    showKeyboardOnEmojiButton = false;
-                    onWindowSizeChanged(sizeNotifierLayout.getHeight() - sizeNotifierLayout.getPaddingBottom());
-                }
-                return;
-            } else {
-                setKeyboardTransitionState(2);
-                AndroidUtilities.hideKeyboard(messageEditText);
-            }
-            emojiButton.setImageResource(R.drawable.ic_msg_panel_kb);
-            showKeyboardOnEmojiButton = true;
-            return;
-        }
-        if (emojiButton != null) {
-            showKeyboardOnEmojiButton = false;
-            emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
-        }
-        if (emojiPopup != null) {
-            try {
-                emojiPopup.dismiss();
-            } catch (Exception e) {
-                //don't promt
-            }
-        }
-        if (keyboardTransitionState == 0) {
-            if (sizeNotifierLayout != null) {
-                if (post) {
-                    sizeNotifierLayout.post(new Runnable() {
-                        public void run() {
-                            if (sizeNotifierLayout != null) {
-                                sizeNotifierLayout.setPadding(0, 0, 0, 0);
-                                onWindowSizeChanged(sizeNotifierLayout.getHeight());
-                            }
-                        }
-                    });
-                } else {
-                    sizeNotifierLayout.setPadding(0, 0, 0, 0);
-                    onWindowSizeChanged(sizeNotifierLayout.getHeight());
-                }
-            }
-        }
-    }
-
-    public void hideEmojiPopup() {
-        if (emojiPopup != null && emojiPopup.isShowing()) {
-            showEmojiPopup(false, true);
-        }
-    }
-
-    public void openKeyboard() {
-        AndroidUtilities.showKeyboard(messageEditText);
-    }
-
-    public void setDelegate(ChatActivityEnterViewDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public void setFieldText(String text) {
-        if (messageEditText == null) {
-            return;
-        }
-        ignoreTextChange = true;
-        messageEditText.setText(text);
-        messageEditText.setSelection(messageEditText.getText().length());
-        ignoreTextChange = false;
-        if (delegate != null) {
-            delegate.onTextChanged(messageEditText.getText(), true);
-        }
-    }
-
-    public int getCursorPosition() {
-        if (messageEditText == null) {
-            return 0;
-        }
-        return messageEditText.getSelectionStart();
-    }
-
-    public void replaceWithText(int start, int len, String text) {
-        try {
-            StringBuilder builder = new StringBuilder(messageEditText.getText());
-            builder.replace(start, start + len, text);
-            messageEditText.setText(builder);
-            messageEditText.setSelection(start + text.length());
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void setFieldFocused(boolean focus) {
-        if (messageEditText == null) {
-            return;
-        }
-        if (focus) {
-            if (!messageEditText.isFocused()) {
-                messageEditText.postDelayed(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (messageEditText != null) {
-                            try {
-                                messageEditText.requestFocus();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    }
-                }, 600);
-            }
-        } else {
-            if (messageEditText.isFocused() && !keyboardVisible) {
-                messageEditText.clearFocus();
-            }
-        }
-    }
-
-    public boolean hasText() {
-        return messageEditText != null && messageEditText.length() > 0;
-    }
-
-    public String getFieldText() {
-        if (messageEditText != null && messageEditText.length() > 0) {
-            return messageEditText.getText().toString();
-        }
-        return null;
-    }
-
-    public boolean isEmojiPopupShowing() {
-        return emojiPopup != null && emojiPopup.isShowing();
-    }
-
-    public void addToAttachLayout(View view) {
-        if (attachButton == null) {
-            return;
-        }
-        if (view.getParent() != null) {
-            ViewGroup viewGroup = (ViewGroup) view.getParent();
-            viewGroup.removeView(view);
-        }
-        attachButton.addView(view);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) view.getLayoutParams();
-        layoutParams.gravity = Gravity.CENTER;
-        layoutParams.width = AndroidUtilities.dp(48);
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        view.setLayoutParams(layoutParams);
-    }
-
-    @Override
-    public void onSizeChanged(int height, boolean isWidthGreater) {
-        if (height > AndroidUtilities.dp(50) && keyboardVisible) {
-            if (isWidthGreater) {
-                keyboardHeightLand = height;
-                ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).edit().putInt("kbd_height_land3", keyboardHeightLand).commit();
-            } else {
-                keyboardHeight = height;
-                ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).edit().putInt("kbd_height", keyboardHeight).commit();
-            }
-        }
-
-        if (emojiPopup != null && emojiPopup.isShowing()) {
-            int newHeight = isWidthGreater ? keyboardHeightLand : keyboardHeight;
-            final WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams) emojiPopup.getContentView().getLayoutParams();
-            FileLog.e("tmessages", "update emoji height to = " + newHeight);
-            if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
-                layoutParams.width = AndroidUtilities.displaySize.x;
-                layoutParams.height = newHeight;
-                WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
-                if (wm != null) {
-                    wm.updateViewLayout(emojiPopup.getContentView(), layoutParams);
-                    if (!keyboardVisible) {
-                        if (sizeNotifierLayout != null) {
-                            sizeNotifierLayout.setPadding(0, 0, 0, layoutParams.height);
-                            sizeNotifierLayout.requestLayout();
-                            onWindowSizeChanged(sizeNotifierLayout.getHeight() - sizeNotifierLayout.getPaddingBottom());
-                        }
-                    }
-                }
-            }
-        }
-
-        boolean oldValue = keyboardVisible;
-        keyboardVisible = height > 0;
-        if (keyboardVisible && (sizeNotifierLayout.getPaddingBottom() > 0 || keyboardTransitionState == 1)) {
-            setKeyboardTransitionState(1);
-        } else if (keyboardTransitionState != 2 && !keyboardVisible && keyboardVisible != oldValue && emojiPopup != null && emojiPopup.isShowing()) {
-            showEmojiPopup(false, true);
-        }
-        if (keyboardTransitionState == 0) {
-            onWindowSizeChanged(sizeNotifierLayout.getHeight() - sizeNotifierLayout.getPaddingBottom());
-        }
-    }
-
-    public int getEmojiHeight() {
-        if (AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y) {
-            return keyboardHeightLand;
-        } else {
-            return keyboardHeight;
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.emojiDidLoaded) {
-            if (emojiView != null) {
-                emojiView.invalidateViews();
-            }
-        } else if (id == NotificationCenter.recordProgressChanged) {
-            Long time = (Long) args[0] / 1000;
-            String str = String.format("%02d:%02d", time / 60, time % 60);
-            if (lastTimeString == null || !lastTimeString.equals(str)) {
-                if (time % 5 == 0) {
-                    MessagesController.getInstance().sendTyping(dialog_id, 1, 0);
-                }
-                if (recordTimeText != null) {
-                    recordTimeText.setText(str);
-                }
-            }
-        } else if (id == NotificationCenter.closeChats) {
-            if (messageEditText != null && messageEditText.isFocused()) {
-                AndroidUtilities.hideKeyboard(messageEditText);
-            }
-        } else if (id == NotificationCenter.recordStartError || id == NotificationCenter.recordStopped) {
-            if (recordingAudio) {
-                MessagesController.getInstance().sendTyping(dialog_id, 2, 0);
-                recordingAudio = false;
-                updateAudioRecordIntefrace();
-            }
-        } else if (id == NotificationCenter.recordStarted) {
-            if (!recordingAudio) {
-                recordingAudio = true;
-                updateAudioRecordIntefrace();
-            }
-        } else if (id == NotificationCenter.audioDidSent) {
-            if (delegate != null) {
-                delegate.onMessageSend(null);
-            }
-        } else if (id == NotificationCenter.hideEmojiKeyboard) {
-            hideEmojiPopup();
-        } else if (id == NotificationCenter.audioRouteChanged) {
-            if (parentActivity != null) {
-                boolean frontSpeaker = (Boolean) args[0];
-                parentActivity.setVolumeControlStream(frontSpeaker ? AudioManager.STREAM_VOICE_CALL : AudioManager.USE_DEFAULT_STREAM_TYPE);
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 260b398c1..0696571ce 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -31,16 +31,11 @@
 import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
 import org.telegram.android.NotificationCenter;
-import org.telegram.android.query.StickersQuery;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.StickerEmojiCell;
 
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
 
 public class EmojiView extends LinearLayout implements NotificationCenter.NotificationCenterDelegate {
 
@@ -51,9 +46,6 @@
     }
 
     private ArrayList<EmojiGridAdapter> adapters = new ArrayList<>();
-    private StickersGridAdapter stickersGridAdapter;
-    private HashMap<Long, Integer> stickersUseHistory = new HashMap<>();
-    private ArrayList<TLRPC.Document> stickers;
 
     private int[] icons = {
             R.drawable.ic_emoji_recent,
@@ -73,12 +65,10 @@
 
     private boolean backspacePressed;
     private boolean backspaceOnce;
-    private boolean showStickers;
 
     public EmojiView(boolean needStickers, Context context) {
         super(context);
 
-        showStickers = needStickers;
 
         setOrientation(LinearLayout.VERTICAL);
         for (int i = 0; i < Emoji.data.length; i++) {
@@ -97,20 +87,6 @@ public EmojiView(boolean needStickers, Context context) {
             adapters.add(emojiGridAdapter);
         }
 
-        if (showStickers) {
-            StickersQuery.checkStickers();
-            stickers = StickersQuery.getStickers();
-            GridView gridView = new GridView(context);
-            gridView.setColumnWidth(AndroidUtilities.dp(72));
-            gridView.setNumColumns(-1);
-            gridView.setPadding(0, AndroidUtilities.dp(4), 0, 0);
-            gridView.setClipToPadding(false);
-            views.add(gridView);
-            stickersGridAdapter = new StickersGridAdapter(context);
-            gridView.setAdapter(stickersGridAdapter);
-            AndroidUtilities.setListViewEdgeEffectColor(gridView, 0xfff5f6f7);
-        }
-
         setBackgroundColor(0xfff5f6f7);
 
         pager = new ViewPager(context);
@@ -258,55 +234,8 @@ private void saveRecents() {
         getContext().getSharedPreferences("emoji", 0).edit().putString("recents", TextUtils.join(",", arrayList)).commit();
     }
 
-    private void saveRecentStickers() {
-        SharedPreferences preferences = getContext().getSharedPreferences("emoji", Activity.MODE_PRIVATE);
-        StringBuilder stringBuilder = new StringBuilder();
-        for (HashMap.Entry<Long, Integer> entry : stickersUseHistory.entrySet()) {
-            if (stringBuilder.length() != 0) {
-                stringBuilder.append(",");
-            }
-            stringBuilder.append(entry.getKey());
-            stringBuilder.append("=");
-            stringBuilder.append(entry.getValue());
-        }
-        getContext().getSharedPreferences("emoji", 0).edit().putString("stickers", stringBuilder.toString()).commit();
-    }
 
-    private void sortStickers() {
-        HashMap<Long, Integer> hashMap = new HashMap<>();
-        for (TLRPC.Document document : stickers) {
-            Integer count = stickersUseHistory.get(document.id);
-            if (count != null) {
-                hashMap.put(document.id, count);
-                stickersUseHistory.remove(document.id);
-            }
-        }
-        if (!stickersUseHistory.isEmpty()) {
-            stickersUseHistory = hashMap;
-            saveRecents();
-        } else {
-            stickersUseHistory = hashMap;
-        }
-        Collections.sort(stickers, new Comparator<TLRPC.Document>() {
-            @Override
-            public int compare(TLRPC.Document lhs, TLRPC.Document rhs) {
-                Integer count1 = stickersUseHistory.get(lhs.id);
-                Integer count2 = stickersUseHistory.get(rhs.id);
-                if (count1 == null) {
-                    count1 = 0;
-                }
-                if (count2 == null) {
-                    count2 = 0;
-                }
-                if (count1 > count2) {
-                    return -1;
-                } else if (count1 < count2) {
-                    return 1;
-                }
-                return 0;
-            }
-        });
-    }
+
 
     public void loadRecents() {
         SharedPreferences preferences = getContext().getSharedPreferences("emoji", Activity.MODE_PRIVATE);
@@ -332,22 +261,6 @@ public void loadRecents() {
             FileLog.e("tmessages", e);
         }
 
-        if (showStickers) {
-            try {
-                stickersUseHistory.clear();
-                str = preferences.getString("stickers", "");
-                if (str != null && str.length() > 0) {
-                    String[] args = str.split(",");
-                    for (String arg : args) {
-                        String[] args2 = arg.split("=");
-                        stickersUseHistory.put(Long.parseLong(args2[0]), Integer.parseInt(args2[1]));
-                    }
-                }
-                sortStickers();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
     }
 
     public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
@@ -369,83 +282,21 @@ public void invalidateViews() {
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
-        if (stickersGridAdapter != null) {
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.stickersDidLoaded);
-            stickers = StickersQuery.getStickers();
-            sortStickers();
-            stickersGridAdapter.notifyDataSetChanged();
-        }
     }
 
     @Override
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
-        if (stickersGridAdapter != null) {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.stickersDidLoaded);
-        }
     }
 
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.stickersDidLoaded) {
-            stickersGridAdapter.notifyDataSetChanged();
+//            stickersGridAdapter.notifyDataSetChanged();
         }
     }
 
-    private class StickersGridAdapter extends BaseAdapter {
-
-        Context context;
 
-        public StickersGridAdapter(Context context) {
-            this.context = context;
-        }
-
-        public int getCount() {
-            return stickers.size();
-        }
-
-        public Object getItem(int i) {
-            return stickers.get(i);
-        }
-
-        public long getItemId(int i) {
-            return stickers.get(i).id;
-        }
-
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new StickerEmojiCell(context) {
-                    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(82), MeasureSpec.EXACTLY));
-                    }
-                };
-                view.setOnClickListener(new OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        if (listener != null) {
-                            TLRPC.Document document = ((StickerEmojiCell) v).getSticker();
-                            Integer count = stickersUseHistory.get(document.id);
-                            if (count == null) {
-                                count = 0;
-                            }
-                            stickersUseHistory.put(document.id, ++count);
-                            saveRecentStickers();
-                            listener.onStickerSelected(document);
-                        }
-                    }
-                });
-            }
-            ((StickerEmojiCell) view).setSticker(stickers.get(i), false);
-            return view;
-        }
-
-        @Override
-        public void unregisterDataSetObserver(DataSetObserver observer) {
-            if (observer != null) {
-                super.unregisterDataSetObserver(observer);
-            }
-        }
-    }
 
     private class EmojiGridAdapter extends BaseAdapter {
         long[] data;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/GifDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/GifDrawable.java
deleted file mode 100644
index 2462db98f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/GifDrawable.java
+++ /dev/null
@@ -1,409 +0,0 @@
-/*
-https://github.com/koral--/android-gif-drawable/
-MIT License
-Copyright (c)
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
- */
-
-package org.telegram.ui.Components;
-
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.Rect;
-import android.graphics.drawable.Animatable;
-import android.graphics.drawable.Drawable;
-import android.os.Handler;
-import android.os.Looper;
-import android.view.View;
-import android.widget.MediaController;
-
-import java.io.File;
-import java.lang.ref.WeakReference;
-import java.util.Locale;
-
-public class GifDrawable extends Drawable implements Animatable, MediaController.MediaPlayerControl {
-
-    private static native void renderFrame(int[] pixels, int gifFileInPtr, int[] metaData);
-    private static native int openFile(int[] metaData, String filePath);
-    private static native void free(int gifFileInPtr);
-    private static native void reset(int gifFileInPtr);
-    private static native void setSpeedFactor(int gifFileInPtr, float factor);
-    private static native String getComment(int gifFileInPtr);
-    private static native int getLoopCount(int gifFileInPtr);
-    private static native int getDuration(int gifFileInPtr);
-    private static native int getCurrentPosition(int gifFileInPtr);
-    private static native int seekToTime(int gifFileInPtr, int pos, int[] pixels);
-    private static native int seekToFrame(int gifFileInPtr, int frameNr, int[] pixels);
-    private static native int saveRemainder(int gifFileInPtr);
-    private static native int restoreRemainder(int gifFileInPtr);
-    private static native long getAllocationByteCount(int gifFileInPtr);
-
-    private static final Handler UI_HANDLER = new Handler(Looper.getMainLooper());
-
-    private volatile int mGifInfoPtr;
-    private volatile boolean mIsRunning = true;
-
-    private final int[] mMetaData = new int[5];//[w, h, imageCount, errorCode, post invalidation time]
-    private final long mInputSourceLength;
-
-    private float mSx = 1f;
-    private float mSy = 1f;
-    private boolean mApplyTransformation;
-    private final Rect mDstRect = new Rect();
-
-    public WeakReference<View> parentView = null;
-
-    protected final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG);
-    protected final int[] mColors;
-
-    private final Runnable mResetTask = new Runnable() {
-        @Override
-        public void run() {
-            reset(mGifInfoPtr);
-        }
-    };
-
-    private final Runnable mStartTask = new Runnable() {
-        @Override
-        public void run() {
-            restoreRemainder(mGifInfoPtr);
-            if (parentView != null && parentView.get() != null) {
-                parentView.get().invalidate();
-            }
-            mMetaData[4] = 0;
-        }
-    };
-
-    private final Runnable mSaveRemainderTask = new Runnable() {
-        @Override
-        public void run() {
-            saveRemainder(mGifInfoPtr);
-        }
-    };
-
-    private final Runnable mInvalidateTask = new Runnable() {
-        @Override
-        public void run() {
-            if (parentView != null && parentView.get() != null) {
-                parentView.get().invalidate();
-            }
-        }
-    };
-
-    private static void runOnUiThread(Runnable task) {
-        if (Looper.myLooper() == UI_HANDLER.getLooper()) {
-            task.run();
-        } else {
-            UI_HANDLER.post(task);
-        }
-    }
-
-    public GifDrawable(String filePath) throws Exception {
-        mInputSourceLength = new File(filePath).length();
-        mGifInfoPtr = openFile(mMetaData, filePath);
-        mColors = new int[mMetaData[0] * mMetaData[1]];
-    }
-
-    public GifDrawable(File file) throws Exception {
-        mInputSourceLength = file.length();
-        mGifInfoPtr = openFile(mMetaData, file.getPath());
-        mColors = new int[mMetaData[0] * mMetaData[1]];
-    }
-
-    public void recycle() {
-        mIsRunning = false;
-        int tmpPtr = mGifInfoPtr;
-        mGifInfoPtr = 0;
-        free(tmpPtr);
-    }
-
-    @Override
-    protected void finalize() throws Throwable {
-        try {
-            recycle();
-        } finally {
-            super.finalize();
-        }
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return mMetaData[1];
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return mMetaData[0];
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-        mPaint.setAlpha(alpha);
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-        mPaint.setColorFilter(cf);
-    }
-
-    @Override
-    public int getOpacity() {
-        return PixelFormat.TRANSPARENT;
-    }
-
-    @Override
-    public void start() {
-        if (mIsRunning) {
-            return;
-        }
-        mIsRunning = true;
-        runOnUiThread(mStartTask);
-    }
-
-    public void reset() {
-        runOnUiThread(mResetTask);
-    }
-
-    @Override
-    public void stop() {
-        mIsRunning = false;
-        runOnUiThread(mSaveRemainderTask);
-    }
-
-    @Override
-    public boolean isRunning() {
-        return mIsRunning;
-    }
-
-    public String getComment() {
-        return getComment(mGifInfoPtr);
-    }
-
-    public int getLoopCount() {
-        return getLoopCount(mGifInfoPtr);
-    }
-
-    @Override
-    public String toString() {
-        return String.format(Locale.US, "Size: %dx%d, %d frames, error: %d", mMetaData[0], mMetaData[1], mMetaData[2], mMetaData[3]);
-    }
-
-    public int getNumberOfFrames() {
-        return mMetaData[2];
-    }
-
-    public int getError() {
-        return mMetaData[3];
-    }
-
-    public void setSpeed(float factor) {
-        if (factor <= 0f) {
-            throw new IllegalArgumentException("Speed factor is not positive");
-        }
-        setSpeedFactor(mGifInfoPtr, factor);
-    }
-
-    @Override
-    public void pause() {
-        stop();
-    }
-
-    @Override
-    public int getDuration() {
-        return getDuration(mGifInfoPtr);
-    }
-
-    @Override
-    public int getCurrentPosition() {
-        return getCurrentPosition(mGifInfoPtr);
-    }
-
-    @Override
-    public void seekTo(final int position) {
-        if (position < 0) {
-            throw new IllegalArgumentException("Position is not positive");
-        }
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                seekToTime(mGifInfoPtr, position, mColors);
-                if (parentView != null && parentView.get() != null) {
-                    parentView.get().invalidate();
-                }
-            }
-        });
-    }
-
-    public void seekToFrame(final int frameIndex) {
-        if (frameIndex < 0) {
-            throw new IllegalArgumentException("frameIndex is not positive");
-        }
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                seekToFrame(mGifInfoPtr, frameIndex, mColors);
-                if (parentView != null && parentView.get() != null) {
-                    parentView.get().invalidate();
-                }
-            }
-        });
-    }
-
-    @Override
-    public boolean isPlaying() {
-        return mIsRunning;
-    }
-
-    @Override
-    public int getBufferPercentage() {
-        return 100;
-    }
-
-    @Override
-    public boolean canPause() {
-        return true;
-    }
-
-    @Override
-    public boolean canSeekBackward() {
-        return false;
-    }
-
-    @Override
-    public boolean canSeekForward() {
-        return getNumberOfFrames() > 1;
-    }
-
-    @Override
-    public int getAudioSessionId() {
-        return 0;
-    }
-
-    public int getFrameByteCount() {
-        return mMetaData[0] * mMetaData[1] * 4;
-    }
-
-    public long getAllocationByteCount() {
-        return getAllocationByteCount(mGifInfoPtr) + mColors.length * 4L;
-    }
-
-    public long getInputSourceByteCount() {
-        return mInputSourceLength;
-    }
-
-    public void getPixels(int[] pixels) {
-        if (pixels.length < mColors.length) {
-            throw new ArrayIndexOutOfBoundsException("Pixels array is too small. Required length: " + mColors.length);
-        }
-        System.arraycopy(mColors, 0, pixels, 0, mColors.length);
-    }
-
-    public int getPixel(int x, int y) {
-        if (x < 0) {
-            throw new IllegalArgumentException("x must be >= 0");
-        }
-        if (y < 0) {
-            throw new IllegalArgumentException("y must be >= 0");
-        }
-        if (x >= mMetaData[0]) {
-            throw new IllegalArgumentException("x must be < GIF width");
-        }
-        if (y >= mMetaData[1]) {
-            throw new IllegalArgumentException("y must be < GIF height");
-        }
-        return mColors[mMetaData[1] * y + x];
-    }
-
-    public Bitmap getBitmap() {
-        seekToFrame(mGifInfoPtr, 0, mColors);
-        return Bitmap.createBitmap(mColors, 0, mMetaData[0], mMetaData[0], mMetaData[1], Bitmap.Config.ARGB_8888);
-    }
-
-    @Override
-    protected void onBoundsChange(Rect bounds) {
-        super.onBoundsChange(bounds);
-        mApplyTransformation = true;
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        if (mApplyTransformation) {
-            mDstRect.set(getBounds());
-            mSx = (float) mDstRect.width() / mMetaData[0];
-            mSy = (float) mDstRect.height() / mMetaData[1];
-            mApplyTransformation = false;
-        }
-        if (mPaint.getShader() == null) {
-            if (mIsRunning) {
-                renderFrame(mColors, mGifInfoPtr, mMetaData);
-            } else {
-                mMetaData[4] = -1;
-            }
-            canvas.translate(mDstRect.left, mDstRect.top);
-            canvas.scale(mSx, mSy);
-            if (mMetaData[0] > 0 && mMetaData[1] > 0) {
-                canvas.drawBitmap(mColors, 0, mMetaData[0], 0f, 0f, mMetaData[0], mMetaData[1], true, mPaint);
-            }
-            if (mMetaData[4] >= 0 && mMetaData[2] > 1) {
-                UI_HANDLER.postDelayed(mInvalidateTask, mMetaData[4]);
-            }
-        } else {
-            canvas.drawRect(mDstRect, mPaint);
-        }
-    }
-
-    public final Paint getPaint() {
-        return mPaint;
-    }
-
-    @Override
-    public int getAlpha() {
-        return mPaint.getAlpha();
-    }
-
-    @Override
-    public void setFilterBitmap(boolean filter) {
-        mPaint.setFilterBitmap(filter);
-        if (parentView != null && parentView.get() != null) {
-            parentView.get().invalidate();
-        }
-    }
-
-    @Override
-    public void setDither(boolean dither) {
-        mPaint.setDither(dither);
-        if (parentView != null && parentView.get() != null) {
-            parentView.get().invalidate();
-        }
-    }
-
-    @Override
-    public int getMinimumHeight() {
-        return mMetaData[1];
-    }
-
-    @Override
-    public int getMinimumWidth() {
-        return mMetaData[0];
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/IdenticonDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/IdenticonDrawable.java
deleted file mode 100644
index b1a04b8e4..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/IdenticonDrawable.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Components;
-
-import android.graphics.Canvas;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.Utilities;
-
-public class IdenticonDrawable extends Drawable {
-
-    private byte[] data;
-    private Paint paint = new Paint();
-    private int colors[] = {
-            0xffffffff,
-            0xffd5e6f3,
-            0xff2d5775,
-            0xff2f99c9
-    };
-
-    private int getBits(int bitOffset) {
-        return (data[bitOffset / 8] >> (bitOffset % 8)) & 0x3;
-    }
-
-    public void setEncryptedChat(TLRPC.EncryptedChat encryptedChat) {
-        data = encryptedChat.key_hash;
-        if (data == null) {
-            byte[] sha1 = Utilities.computeSHA1(encryptedChat.auth_key);
-            encryptedChat.key_hash = data = new byte[16];
-            System.arraycopy(sha1, 0, data, 0, data.length);
-        }
-        invalidateSelf();
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        if (data == null) {
-            return;
-        }
-
-        int bitPointer = 0;
-        float rectSize = (float)Math.floor(Math.min(getBounds().width(), getBounds().height()) / 8.0f);
-        float xOffset = Math.max(0, (getBounds().width() - rectSize * 8) / 2);
-        float yOffset = Math.max(0, (getBounds().height() - rectSize * 8) / 2);
-        for (int iy = 0; iy < 8; iy++) {
-            for (int ix = 0; ix < 8; ix++) {
-                int byteValue = getBits(bitPointer);
-                bitPointer += 2;
-                int colorIndex = Math.abs(byteValue) % 4;
-                paint.setColor(colors[colorIndex]);
-                canvas.drawRect(xOffset + ix * rectSize, iy * rectSize + yOffset, xOffset + ix * rectSize + rectSize, iy * rectSize + rectSize + yOffset, paint);
-            }
-        }
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-
-    }
-
-    @Override
-    public int getOpacity() {
-        return 0;
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return AndroidUtilities.dp(32);
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return AndroidUtilities.dp(32);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterSectionsListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterSectionsListView.java
deleted file mode 100644
index aedc5bcd6..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterSectionsListView.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.util.AttributeSet;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AbsListView;
-import android.widget.ListAdapter;
-import android.widget.ListView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.Adapters.BaseSectionsAdapter;
-
-import java.util.ArrayList;
-
-public class LetterSectionsListView extends ListView implements AbsListView.OnScrollListener {
-
-    private ArrayList<View> headers = new ArrayList<>();
-    private ArrayList<View> headersCache = new ArrayList<>();
-    private OnScrollListener mOnScrollListener;
-    private BaseSectionsAdapter mAdapter;
-    private int currentFirst = -1;
-    private int currentVisible = -1;
-    private int startSection;
-    private int sectionsCount;
-
-    public LetterSectionsListView(Context context) {
-        super(context);
-        super.setOnScrollListener(this);
-    }
-
-    public LetterSectionsListView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        super.setOnScrollListener(this);
-    }
-
-    public LetterSectionsListView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        super.setOnScrollListener(this);
-    }
-
-    @Override
-    public void setAdapter(ListAdapter adapter) {
-        if (mAdapter == adapter) {
-            return;
-        }
-        headers.clear();
-        headersCache.clear();
-        if (adapter instanceof BaseSectionsAdapter) {
-            mAdapter = (BaseSectionsAdapter) adapter;
-        } else {
-            mAdapter = null;
-        }
-        super.setAdapter(adapter);
-    }
-
-    @Override
-    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-        if (mOnScrollListener != null) {
-            mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
-        }
-        if (mAdapter == null) {
-            return;
-        }
-
-        headersCache.addAll(headers);
-        headers.clear();
-
-        if (mAdapter.getCount() == 0) {
-            return;
-        }
-
-        if (currentFirst != firstVisibleItem || currentVisible != visibleItemCount) {
-            currentFirst = firstVisibleItem;
-            currentVisible = visibleItemCount;
-
-            sectionsCount = 1;
-            startSection = mAdapter.getSectionForPosition(firstVisibleItem);
-            int itemNum = firstVisibleItem + mAdapter.getCountForSection(startSection) - mAdapter.getPositionInSectionForPosition(firstVisibleItem);
-            while (true) {
-                if (itemNum >= firstVisibleItem + visibleItemCount) {
-                    break;
-                }
-                itemNum += mAdapter.getCountForSection(startSection + sectionsCount);
-                sectionsCount++;
-            }
-        }
-
-        int itemNum = firstVisibleItem;
-        for (int a = startSection; a < startSection + sectionsCount; a++) {
-            View header = null;
-            if (!headersCache.isEmpty()) {
-                header = headersCache.get(0);
-                headersCache.remove(0);
-            }
-            header = getSectionHeaderView(a, header);
-            headers.add(header);
-            int count = mAdapter.getCountForSection(a);
-            if (a == startSection) {
-                int pos = mAdapter.getPositionInSectionForPosition(itemNum);
-                if (pos == count - 1) {
-                    header.setTag(-header.getHeight());
-                } else if (pos == count - 2) {
-                    View child = getChildAt(itemNum - firstVisibleItem);
-                    int headerTop = 0;
-                    if (child != null) {
-                        headerTop = child.getTop();
-                    } else {
-                        headerTop = -AndroidUtilities.dp(100);
-                    }
-                    if (headerTop < 0) {
-                        header.setTag(headerTop);
-                    } else {
-                        header.setTag(0);
-                    }
-                } else {
-                    header.setTag(0);
-                }
-                itemNum += count - mAdapter.getPositionInSectionForPosition(firstVisibleItem);
-            } else {
-                View child = getChildAt(itemNum - firstVisibleItem);
-                if (child != null) {
-                    header.setTag(child.getTop());
-                } else {
-                    header.setTag(-AndroidUtilities.dp(100));
-                }
-                itemNum += count;
-            }
-        }
-    }
-
-    @Override
-    public void onScrollStateChanged(AbsListView view, int scrollState) {
-        if (mOnScrollListener != null) {
-            mOnScrollListener.onScrollStateChanged(view, scrollState);
-        }
-    }
-
-    private View getSectionHeaderView(int section, View oldView) {
-        boolean shouldLayout = oldView == null;
-        View view = mAdapter.getSectionHeaderView(section, oldView, this);
-        if (shouldLayout) {
-            ensurePinnedHeaderLayout(view, false);
-        }
-        return view;
-    }
-
-    @Override
-    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
-        super.onSizeChanged(w, h, oldw, oldh);
-        if (mAdapter == null || headers.isEmpty()) {
-            return;
-        }
-        for (View header : headers) {
-            ensurePinnedHeaderLayout(header, true);
-        }
-    }
-
-    private void ensurePinnedHeaderLayout(View header, boolean forceLayout) {
-        if (header.isLayoutRequested() || forceLayout) {
-            ViewGroup.LayoutParams layoutParams = header.getLayoutParams();
-            int heightSpec = MeasureSpec.makeMeasureSpec(layoutParams.height, MeasureSpec.EXACTLY);
-            int widthSpec = MeasureSpec.makeMeasureSpec(layoutParams.width, MeasureSpec.EXACTLY);
-            try {
-                header.measure(widthSpec, heightSpec);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            header.layout(0, 0, header.getMeasuredWidth(), header.getMeasuredHeight());
-        }
-    }
-
-    @Override
-    protected void dispatchDraw(Canvas canvas) {
-        super.dispatchDraw(canvas);
-        if (mAdapter == null || headers.isEmpty()) {
-            return;
-        }
-        for (View header : headers) {
-            int saveCount = canvas.save();
-            int top = (Integer)header.getTag();
-            canvas.translate(LocaleController.isRTL ? getWidth() - header.getWidth() : 0, top);
-            canvas.clipRect(0, 0, getWidth(), header.getMeasuredHeight());
-            if (top < 0) {
-                canvas.saveLayerAlpha(0, top, header.getWidth(), top + canvas.getHeight(), (int)(255 * (1.0f + (float)top / (float)header.getMeasuredHeight())), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
-            }
-            header.draw(canvas);
-            canvas.restoreToCount(saveCount);
-        }
-    }
-
-    @Override
-    public void setOnScrollListener(OnScrollListener l) {
-        mOnScrollListener = l;
-    }
-
-    public void setOnItemClickListener(LetterSectionsListView.OnItemClickListener listener) {
-        super.setOnItemClickListener(listener);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LineProgressView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LineProgressView.java
deleted file mode 100644
index 60c2522eb..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LineProgressView.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.view.View;
-import android.view.animation.DecelerateInterpolator;
-
-import org.telegram.android.AndroidUtilities;
-
-public class LineProgressView extends View {
-
-    private long lastUpdateTime = 0;
-    private float currentProgress = 0;
-    private float animationProgressStart = 0;
-    private long currentProgressTime = 0;
-    private float animatedProgressValue = 0;
-    private float animatedAlphaValue = 1.0f;
-
-    private static DecelerateInterpolator decelerateInterpolator = null;
-    private static Paint progressPaint = null;
-
-    public LineProgressView(Context context) {
-        super(context);
-
-        if (decelerateInterpolator == null) {
-            decelerateInterpolator = new DecelerateInterpolator();
-            progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            progressPaint.setStyle(Paint.Style.STROKE);
-            progressPaint.setStrokeCap(Paint.Cap.ROUND);
-            progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
-            progressPaint.setColor(0xff36a2ee);
-        }
-    }
-
-    private void updateAnimation() {
-        long newTime = System.currentTimeMillis();
-        long dt = newTime - lastUpdateTime;
-        lastUpdateTime = newTime;
-
-        if (animatedProgressValue != 1 && animatedProgressValue != currentProgress) {
-            float progressDiff = currentProgress - animationProgressStart;
-            if (progressDiff > 0) {
-                currentProgressTime += dt;
-                if (currentProgressTime >= 300) {
-                    animatedProgressValue = currentProgress;
-                    animationProgressStart = currentProgress;
-                    currentProgressTime = 0;
-                } else {
-                    animatedProgressValue = animationProgressStart + progressDiff * decelerateInterpolator.getInterpolation(currentProgressTime / 300.0f);
-                }
-            }
-            invalidate();
-        }
-        if (animatedProgressValue >= 1 && animatedProgressValue == 1 && animatedAlphaValue != 0) {
-            animatedAlphaValue -= dt / 200.0f;
-            if (animatedAlphaValue <= 0) {
-                animatedAlphaValue = 0.0f;
-            }
-            invalidate();
-        }
-    }
-
-    public void setProgressColor(int color) {
-        progressPaint.setColor(color);
-    }
-
-    public void setProgress(float value, boolean animated) {
-        if (!animated) {
-            animatedProgressValue = value;
-            animationProgressStart = value;
-        } else {
-            animationProgressStart = animatedProgressValue;
-        }
-        if (value != 1) {
-            animatedAlphaValue = 1;
-        }
-        currentProgress = value;
-        currentProgressTime = 0;
-
-        lastUpdateTime = System.currentTimeMillis();
-        invalidate();
-    }
-
-    public void onDraw(Canvas canvas) {
-        progressPaint.setAlpha((int)(255 * animatedAlphaValue));
-        canvas.drawRect(0, 0, getWidth() * animatedProgressValue, getHeight(), progressPaint);
-        updateAnimation();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
deleted file mode 100644
index c6f7bb038..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
+++ /dev/null
@@ -1,361 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.R;
-import org.telegram.android.MessageObject;
-import org.telegram.ui.Cells.BaseCell;
-
-import java.io.File;
-
-public class PopupAudioView extends BaseCell implements SeekBar.SeekBarDelegate, MediaController.FileDownloadProgressListener {
-
-    private boolean wasLayout = false;
-    protected MessageObject currentMessageObject;
-
-    private static Drawable backgroundMediaDrawableIn;
-
-    private static Drawable[][] statesDrawable = new Drawable[8][2];
-    private static TextPaint timePaint;
-
-    private SeekBar seekBar;
-    private ProgressView progressView;
-    private int seekBarX;
-    private int seekBarY;
-
-    private int buttonState = 0;
-    private int buttonX;
-    private int buttonY;
-    private int buttonPressed = 0;
-
-    private StaticLayout timeLayout;
-    private int timeX;
-    int timeWidth = 0;
-    private String lastTimeString = null;
-
-    private int TAG;
-
-    public PopupAudioView(Context context) {
-        super(context);
-        if (backgroundMediaDrawableIn == null) {
-            backgroundMediaDrawableIn = getResources().getDrawable(R.drawable.msg_in_photo);
-            statesDrawable[0][0] = getResources().getDrawable(R.drawable.play_w2);
-            statesDrawable[0][1] = getResources().getDrawable(R.drawable.play_w2_pressed);
-            statesDrawable[1][0] = getResources().getDrawable(R.drawable.pause_w2);
-            statesDrawable[1][1] = getResources().getDrawable(R.drawable.pause_w2_pressed);
-            statesDrawable[2][0] = getResources().getDrawable(R.drawable.download_g);
-            statesDrawable[2][1] = getResources().getDrawable(R.drawable.download_g_pressed);
-            statesDrawable[3][0] = getResources().getDrawable(R.drawable.pause_g);
-            statesDrawable[3][1] = getResources().getDrawable(R.drawable.pause_g_pressed);
-
-            statesDrawable[4][0] = getResources().getDrawable(R.drawable.play_w);
-            statesDrawable[4][1] = getResources().getDrawable(R.drawable.play_w_pressed);
-            statesDrawable[5][0] = getResources().getDrawable(R.drawable.pause_w);
-            statesDrawable[5][1] = getResources().getDrawable(R.drawable.pause_w_pressed);
-            statesDrawable[6][0] = getResources().getDrawable(R.drawable.download_b);
-            statesDrawable[6][1] = getResources().getDrawable(R.drawable.download_b_pressed);
-            statesDrawable[7][0] = getResources().getDrawable(R.drawable.pause_b);
-            statesDrawable[7][1] = getResources().getDrawable(R.drawable.pause_b_pressed);
-
-            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(16));
-        }
-
-        TAG = MediaController.getInstance().generateObserverTag();
-
-        seekBar = new SeekBar(getContext());
-        seekBar.delegate = this;
-        progressView = new ProgressView();
-    }
-
-    public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject != messageObject) {
-            int uid = messageObject.messageOwner.media.audio.user_id;
-            if (uid == 0) {
-                uid = messageObject.messageOwner.from_id;
-            }
-
-            seekBar.type = 1;
-            progressView.setProgressColors(0xffd9e2eb, 0xff86c5f8);
-
-            currentMessageObject = messageObject;
-            wasLayout = false;
-
-            requestLayout();
-        }
-        updateButtonState();
-    }
-
-    public final MessageObject getMessageObject() {
-        return currentMessageObject;
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int width = MeasureSpec.getSize(widthMeasureSpec);
-        setMeasuredDimension(width, AndroidUtilities.dp(56));
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (currentMessageObject == null) {
-            super.onLayout(changed, left, top, right, bottom);
-            return;
-        }
-
-        seekBarX = AndroidUtilities.dp(54);
-        buttonX = AndroidUtilities.dp(10);
-        timeX = getMeasuredWidth() - timeWidth - AndroidUtilities.dp(16);
-
-        seekBar.width = getMeasuredWidth() - AndroidUtilities.dp(70) - timeWidth;
-        seekBar.height = AndroidUtilities.dp(30);
-        progressView.width = getMeasuredWidth() - AndroidUtilities.dp(94) - timeWidth;
-        progressView.height = AndroidUtilities.dp(30);
-        seekBarY = AndroidUtilities.dp(13);
-        buttonY = AndroidUtilities.dp(10);
-
-        updateProgress();
-
-        if (changed || !wasLayout) {
-            wasLayout = true;
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        if (!wasLayout) {
-            requestLayout();
-            return;
-        }
-
-        setDrawableBounds(backgroundMediaDrawableIn, 0, 0, getMeasuredWidth(), getMeasuredHeight());
-        backgroundMediaDrawableIn.draw(canvas);
-
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        canvas.save();
-        if (buttonState == 0 || buttonState == 1) {
-            canvas.translate(seekBarX, seekBarY);
-            seekBar.draw(canvas);
-        } else {
-            canvas.translate(seekBarX + AndroidUtilities.dp(12), seekBarY);
-            progressView.draw(canvas);
-        }
-        canvas.restore();
-
-        int state = buttonState + 4;
-        timePaint.setColor(0xffa1aab3);
-        Drawable buttonDrawable = statesDrawable[state][buttonPressed];
-        int side = AndroidUtilities.dp(36);
-        int x = (side - buttonDrawable.getIntrinsicWidth()) / 2;
-        int y = (side - buttonDrawable.getIntrinsicHeight()) / 2;
-        setDrawableBounds(buttonDrawable, x + buttonX, y + buttonY);
-        buttonDrawable.draw(canvas);
-
-        canvas.save();
-        canvas.translate(timeX, AndroidUtilities.dp(18));
-        timeLayout.draw(canvas);
-        canvas.restore();
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        MediaController.getInstance().removeLoadingFileObserver(this);
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-        boolean result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
-        if (result) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                getParent().requestDisallowInterceptTouchEvent(true);
-            }
-            invalidate();
-        } else {
-            int side = AndroidUtilities.dp(36);
-            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                if (x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
-                    buttonPressed = 1;
-                    invalidate();
-                    result = true;
-                }
-            } else if (buttonPressed == 1) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = 0;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    didPressedButton();
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = 0;
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
-                        buttonPressed = 0;
-                        invalidate();
-                    }
-                }
-            }
-            if (!result) {
-                result = super.onTouchEvent(event);
-            }
-        }
-
-        return result;
-    }
-
-    private void didPressedButton() {
-        if (buttonState == 0) {
-            boolean result = MediaController.getInstance().playAudio(currentMessageObject);
-            if (!currentMessageObject.isOut() && currentMessageObject.isContentUnread()) {
-                MessagesController.getInstance().markMessageContentAsRead(currentMessageObject.getId());
-                currentMessageObject.setContentIsRead();
-            }
-            if (result) {
-                buttonState = 1;
-                invalidate();
-            }
-        } else if (buttonState == 1) {
-            boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
-            if (result) {
-                buttonState = 0;
-                invalidate();
-            }
-        } else if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
-            buttonState = 3;
-            invalidate();
-        } else if (buttonState == 3) {
-            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
-            buttonState = 2;
-            invalidate();
-        }
-    }
-
-    public void updateProgress() {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        if (!seekBar.isDragging()) {
-            seekBar.setProgress(currentMessageObject.audioProgress);
-        }
-
-        int duration = 0;
-        if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
-            duration = currentMessageObject.messageOwner.media.audio.duration;
-        } else {
-            duration = currentMessageObject.audioProgressSec;
-        }
-        String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
-        if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
-            timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
-            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        }
-        invalidate();
-    }
-
-    public void downloadAudioIfNeed() {
-        if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
-            buttonState = 3;
-            invalidate();
-        }
-    }
-
-    public void updateButtonState() {
-        String fileName = currentMessageObject.getFileName();
-        File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-        if (cacheFile.exists()) {
-            MediaController.getInstance().removeLoadingFileObserver(this);
-            boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
-            if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
-                buttonState = 0;
-            } else {
-                buttonState = 1;
-            }
-            progressView.setProgress(0);
-        } else {
-            MediaController.getInstance().addLoadingFileObserver(fileName, this);
-            if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                buttonState = 2;
-                progressView.setProgress(0);
-            } else {
-                buttonState = 3;
-                Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                if (progress != null) {
-                    progressView.setProgress(progress);
-                } else {
-                    progressView.setProgress(0);
-                }
-            }
-        }
-        updateProgress();
-    }
-
-    @Override
-    public void onFailedDownload(String fileName) {
-        updateButtonState();
-    }
-
-    @Override
-    public void onSuccessDownload(String fileName) {
-        updateButtonState();
-    }
-
-    @Override
-    public void onProgressDownload(String fileName, float progress) {
-        progressView.setProgress(progress);
-        if (buttonState != 3) {
-            updateButtonState();
-        }
-        invalidate();
-    }
-
-    @Override
-    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-
-    }
-
-    @Override
-    public int getObserverTag() {
-        return TAG;
-    }
-
-    @Override
-    public void onSeekBarDrag(float progress) {
-        if (currentMessageObject == null) {
-            return;
-        }
-        currentMessageObject.audioProgress = progress;
-        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
index fc9680fd2..24ff95ab8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
@@ -41,7 +41,6 @@
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
-import org.telegram.android.SendMessagesHelper;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
@@ -286,13 +285,8 @@ public void onTextChanged(CharSequence charSequence, int start, int before, int
 
                 if (message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
                     int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-                    TLRPC.User currentUser = null;
-                    if ((int) dialog_id > 0) {
-                        currentUser = MessagesController.getInstance().getUser((int) dialog_id);
-                    }
-                    if (currentUser != null && (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires < currentTime)) {
-                        return;
-                    }
+
+
                     lastTypingTimeSend = System.currentTimeMillis();
                     if (delegate != null) {
                         delegate.needSendTyping();
@@ -642,7 +636,7 @@ public boolean processSendingText(String text) {
             int count = (int) Math.ceil(text.length() / 4096.0f);
             for (int a = 0; a < count; a++) {
                 String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
-                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch);
+//                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch);
             }
             return true;
         }
@@ -878,7 +872,7 @@ public void onEmojiSelected(String symbol) {
                     }
 
                     public void onStickerSelected(TLRPC.Document sticker) {
-                        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
+//                        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
                         if (delegate != null) {
                             delegate.onMessageSend(null);
                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecordStatusDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecordStatusDrawable.java
deleted file mode 100644
index b224eb3e5..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecordStatusDrawable.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.graphics.Canvas;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.RectF;
-import android.graphics.drawable.Drawable;
-
-import org.telegram.android.AndroidUtilities;
-
-public class RecordStatusDrawable extends Drawable {
-
-    private boolean isChat = false;
-    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-    private long lastUpdateTime = 0;
-    private boolean started = false;
-    private RectF rect = new RectF();
-    private float progress;
-
-    public RecordStatusDrawable() {
-        super();
-        paint.setColor(0xffd7e8f7);
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(AndroidUtilities.dp(2));
-        paint.setStrokeCap(Paint.Cap.ROUND);
-    }
-
-    public void setIsChat(boolean value) {
-        isChat = value;
-    }
-
-    private void update() {
-        long newTime = System.currentTimeMillis();
-        long dt = newTime - lastUpdateTime;
-        lastUpdateTime = newTime;
-        if (dt > 50) {
-            dt = 50;
-        }
-        progress += dt / 300.0f;
-        while (progress > 1.0f) {
-            progress -= 1.0f;
-        }
-        invalidateSelf();
-    }
-
-    public void start() {
-        lastUpdateTime = System.currentTimeMillis();
-        started = true;
-        invalidateSelf();
-    }
-
-    public void stop() {
-        started = false;
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        canvas.save();
-        canvas.translate(0, getIntrinsicHeight() / 2 + AndroidUtilities.dp(isChat ? 1 : 2));
-        for (int a = 0; a < 4; a++) {
-            if (a == 0) {
-                paint.setAlpha((int) (255 * progress));
-            } else if (a == 3) {
-                paint.setAlpha((int) (255 * (1.0f - progress)));
-            } else {
-                paint.setAlpha(255);
-            }
-            float side = AndroidUtilities.dp(4) * a + AndroidUtilities.dp(4) * progress;
-            rect.set(-side, -side, side, side);
-            canvas.drawArc(rect, -15, 30, false, paint);
-        }
-        canvas.restore();
-        if (started) {
-            update();
-        }
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-
-    }
-
-    @Override
-    public int getOpacity() {
-        return 0;
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return AndroidUtilities.dp(18);
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return AndroidUtilities.dp(14);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SectionsListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SectionsListView.java
deleted file mode 100644
index a9d4daf79..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SectionsListView.java
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.util.AttributeSet;
-import android.view.View;
-import android.widget.AbsListView;
-import android.widget.ListAdapter;
-import android.widget.ListView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.Adapters.BaseSectionsAdapter;
-
-public class SectionsListView extends ListView implements AbsListView.OnScrollListener {
-
-    private View pinnedHeader;
-    private OnScrollListener mOnScrollListener;
-    private BaseSectionsAdapter mAdapter;
-    private int currentStartSection = -1;
-
-    public SectionsListView(Context context) {
-        super(context);
-        super.setOnScrollListener(this);
-    }
-
-    public SectionsListView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        super.setOnScrollListener(this);
-    }
-
-    public SectionsListView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        super.setOnScrollListener(this);
-    }
-
-    @Override
-    public void setAdapter(ListAdapter adapter) {
-        if (mAdapter == adapter) {
-            return;
-        }
-        pinnedHeader = null;
-        if (adapter instanceof BaseSectionsAdapter) {
-            mAdapter = (BaseSectionsAdapter) adapter;
-        } else {
-            mAdapter = null;
-        }
-        super.setAdapter(adapter);
-    }
-
-    @Override
-    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-        if (mOnScrollListener != null) {
-            mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
-        }
-        if (mAdapter == null) {
-            return;
-        }
-
-        if (mAdapter.getCount() == 0) {
-            return;
-        }
-
-        int startSection = mAdapter.getSectionForPosition(firstVisibleItem);
-        if (currentStartSection != startSection || pinnedHeader == null) {
-            pinnedHeader = getSectionHeaderView(startSection, pinnedHeader);
-            currentStartSection = startSection;
-        }
-
-        int count = mAdapter.getCountForSection(startSection);
-
-        int pos = mAdapter.getPositionInSectionForPosition(firstVisibleItem);
-        if (pos == count - 1) {
-            View child = getChildAt(0);
-            int headerHeight = pinnedHeader.getHeight();
-            int headerTop = 0;
-            if (child != null) {
-                int available = child.getTop() + child.getHeight();
-                if (available < headerHeight) {
-                    headerTop = available - headerHeight;
-                }
-            } else {
-                headerTop = -AndroidUtilities.dp(100);
-            }
-            if (headerTop < 0) {
-                pinnedHeader.setTag(headerTop);
-            } else {
-                pinnedHeader.setTag(0);
-            }
-        } else {
-            pinnedHeader.setTag(0);
-        }
-
-        invalidate();
-    }
-
-    @Override
-    public void onScrollStateChanged(AbsListView view, int scrollState) {
-        if (mOnScrollListener != null) {
-            mOnScrollListener.onScrollStateChanged(view, scrollState);
-        }
-    }
-
-    private View getSectionHeaderView(int section, View oldView) {
-        boolean shouldLayout = oldView == null;
-        View view = mAdapter.getSectionHeaderView(section, oldView, this);
-        if (shouldLayout) {
-            ensurePinnedHeaderLayout(view, false);
-        }
-        return view;
-    }
-
-    @Override
-    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
-        super.onSizeChanged(w, h, oldw, oldh);
-        if (mAdapter == null || pinnedHeader == null) {
-            return;
-        }
-        ensurePinnedHeaderLayout(pinnedHeader, true);
-    }
-
-    private void ensurePinnedHeaderLayout(View header, boolean forceLayout) {
-        if (header.isLayoutRequested() || forceLayout) {
-            int widthSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth(), MeasureSpec.EXACTLY);
-            int heightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
-            try {
-                header.measure(widthSpec, heightSpec);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            header.layout(0, 0, header.getMeasuredWidth(), header.getMeasuredHeight());
-        }
-    }
-
-    @Override
-    protected void dispatchDraw(Canvas canvas) {
-        super.dispatchDraw(canvas);
-        if (mAdapter == null || pinnedHeader == null) {
-            return;
-        }
-        int saveCount = canvas.save();
-        int top = (Integer)pinnedHeader.getTag();
-        canvas.translate(LocaleController.isRTL ? getWidth() - pinnedHeader.getWidth() : 0, top);
-        canvas.clipRect(0, 0, getWidth(), pinnedHeader.getMeasuredHeight());
-        pinnedHeader.draw(canvas);
-        canvas.restoreToCount(saveCount);
-    }
-
-    @Override
-    public void setOnScrollListener(OnScrollListener l) {
-        mOnScrollListener = l;
-    }
-
-    public void setOnItemClickListener(OnItemClickListener listener) {
-        super.setOnItemClickListener(listener);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
deleted file mode 100644
index bc15136a0..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.view.MotionEvent;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
-
-public class SeekBar {
-
-    public interface SeekBarDelegate {
-        void onSeekBarDrag(float progress);
-    }
-
-    private static Drawable thumbDrawable1;
-    private static Drawable thumbDrawablePressed1;
-    private static Drawable thumbDrawable2;
-    private static Drawable thumbDrawablePressed2;
-    private static Paint innerPaint1 = new Paint();
-    private static Paint outerPaint1 = new Paint();
-    private static Paint innerPaint2 = new Paint();
-    private static Paint outerPaint2 = new Paint();
-    private static int thumbWidth;
-    private static int thumbHeight;
-    public int type;
-    public int thumbX = 0;
-    public int thumbDX = 0;
-    private boolean pressed = false;
-    public int width;
-    public int height;
-    public SeekBarDelegate delegate;
-
-    public SeekBar(Context context) {
-        if (thumbDrawable1 == null) {
-            thumbDrawable1 = context.getResources().getDrawable(R.drawable.player1);
-            thumbDrawablePressed1 = context.getResources().getDrawable(R.drawable.player1_pressed);
-            thumbDrawable2 = context.getResources().getDrawable(R.drawable.player2);
-            thumbDrawablePressed2 = context.getResources().getDrawable(R.drawable.player2_pressed);
-            innerPaint1.setColor(0xffb4e396);
-            outerPaint1.setColor(0xff6ac453);
-            innerPaint2.setColor(0xffd9e2eb);
-            outerPaint2.setColor(0xff86c5f8);
-            thumbWidth = thumbDrawable1.getIntrinsicWidth();
-            thumbHeight = thumbDrawable1.getIntrinsicHeight();
-        }
-    }
-
-    public boolean onTouch(int action, float x, float y) {
-        if (action == MotionEvent.ACTION_DOWN) {
-            int additionWidth = (height - thumbWidth) / 2;
-            if (thumbX - additionWidth <= x && x <= thumbX + thumbWidth + additionWidth && y >= 0 && y <= height) {
-                pressed = true;
-                thumbDX = (int)(x - thumbX);
-                return true;
-            }
-        } else if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
-            if (pressed) {
-                if (action == MotionEvent.ACTION_UP && delegate != null) {
-                    delegate.onSeekBarDrag((float)thumbX / (float)(width - thumbWidth));
-                }
-                pressed = false;
-                return true;
-            }
-        } else if (action == MotionEvent.ACTION_MOVE) {
-            if (pressed) {
-                thumbX = (int)(x - thumbDX);
-                if (thumbX < 0) {
-                    thumbX = 0;
-                } else if (thumbX > width - thumbWidth) {
-                    thumbX = width - thumbWidth;
-                }
-                return true;
-            }
-        }
-        return false;
-    }
-
-    public void setProgress(float progress) {
-        thumbX = (int)Math.ceil((width - thumbWidth) * progress);
-        if (thumbX < 0) {
-            thumbX = 0;
-        } else if (thumbX > width - thumbWidth) {
-            thumbX = width - thumbWidth;
-        }
-    }
-
-    public boolean isDragging() {
-        return pressed;
-    }
-
-    public void draw(Canvas canvas) {
-        Drawable thumb = null;
-        Paint inner = null;
-        Paint outer = null;
-        if (type == 0) {
-            if (!pressed) {
-                thumb = thumbDrawable1;
-            } else {
-                thumb = thumbDrawablePressed1;
-            }
-            inner = innerPaint1;
-            outer = outerPaint1;
-        } else if (type == 1) {
-            if (!pressed) {
-                thumb = thumbDrawable2;
-            } else {
-                thumb = thumbDrawablePressed2;
-            }
-            inner = innerPaint2;
-            outer = outerPaint2;
-        }
-        int y = (height - thumbHeight) / 2;
-        canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), width - thumbWidth / 2, height / 2 + AndroidUtilities.dp(1), inner);
-        canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), thumbWidth / 2 + thumbX, height / 2 + AndroidUtilities.dp(1), outer);
-        thumb.setBounds(thumbX, y, thumbX + thumbWidth, y + thumbHeight);
-        thumb.draw(canvas);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
deleted file mode 100644
index 49ace5b72..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.database.DataSetObserver;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.BaseAdapter;
-import android.widget.FrameLayout;
-import android.widget.GridView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.StickerEmojiCell;
-
-import java.util.ArrayList;
-
-public class StickersAlert extends AlertDialog implements NotificationCenter.NotificationCenterDelegate {
-
-    private ArrayList<TLRPC.Document> stickers;
-    private GridView gridView;
-
-    public StickersAlert(Context context, TLRPC.TL_stickerSet set, ArrayList<TLRPC.Document> arrayList) {
-        super(context);
-        stickers = arrayList;
-
-        FrameLayout container = new FrameLayout(context) {
-            @Override
-            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec((int) Math.min(Math.ceil(stickers.size() / 4.0f) * AndroidUtilities.dp(82), AndroidUtilities.displaySize.y / 5 * 3), MeasureSpec.EXACTLY));
-            }
-        };
-        setView(container, AndroidUtilities.dp(16), 0, AndroidUtilities.dp(16), 0);
-
-        gridView = new GridView(context);
-        gridView.setNumColumns(4);
-        gridView.setAdapter(new GridAdapter(context));
-        gridView.setVerticalScrollBarEnabled(false);
-        container.addView(gridView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-        if (set.id == -1) {
-            setTitle(LocaleController.getString("GeniusStickerPackName", R.string.GeniusStickerPackName));
-        } else {
-            setTitle(set.title);
-        }
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
-
-        setOnShowListener(new OnShowListener() {
-            @Override
-            public void onShow(DialogInterface arg0) {
-                if (getButton(AlertDialog.BUTTON_NEUTRAL) != null) {
-                    getButton(AlertDialog.BUTTON_NEUTRAL).setTextColor(0xffcd5a5a);
-                }
-                if (getButton(AlertDialog.BUTTON_POSITIVE) != null) {
-                    getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(0xff37a919);
-                }
-            }
-        });
-    }
-
-    @Override
-    public void dismiss() {
-        super.dismiss();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.emojiDidLoaded) {
-            if (gridView != null) {
-                gridView.invalidateViews();
-            }
-        }
-    }
-
-    private class GridAdapter extends BaseAdapter {
-
-        Context context;
-
-        public GridAdapter(Context context) {
-            this.context = context;
-        }
-
-        public int getCount() {
-            return stickers.size();
-        }
-
-        public Object getItem(int i) {
-            return stickers.get(i);
-        }
-
-        public long getItemId(int i) {
-            return stickers.get(i).id;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int position) {
-            return false;
-        }
-
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new StickerEmojiCell(context) {
-                    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(82), MeasureSpec.EXACTLY));
-                    }
-                };
-            }
-            ((StickerEmojiCell) view).setSticker(stickers.get(i), true);
-            return view;
-        }
-
-        @Override
-        public void unregisterDataSetObserver(DataSetObserver observer) {
-            if (observer != null) {
-                super.unregisterDataSetObserver(observer);
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index fae581a02..bf80ac570 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -44,8 +44,6 @@
 import org.telegram.android.ContactsController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.SendMessagesHelper;
-import org.telegram.android.query.StickersQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
@@ -889,13 +887,6 @@ public void run() {
                     }
                 });
             }
-        } else if (sticker != null) {
-            if (!mainFragmentsStack.isEmpty()) {
-                TLRPC.TL_inputStickerSetShortName stickerset = new TLRPC.TL_inputStickerSetShortName();
-                stickerset.short_name = sticker;
-                StickersQuery.loadStickers(mainFragmentsStack.get(0), stickerset);
-            }
-            return;
         }
 
         final long reqId = requestId;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index bbf3bb36f..986339a86 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -488,7 +488,7 @@ private PhotoPickerPhotoCell getCellForIndex(int index) {
     }
 
     @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(int index) {
         PhotoPickerPhotoCell cell = getCellForIndex(index);
         if (cell != null) {
             int coords[] = new int[2];
@@ -544,7 +544,7 @@ public void updatePhotoAtIndex(int index) {
     }
 
     @Override
-    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+    public Bitmap getThumbForPhoto(int index) {
         PhotoPickerPhotoCell cell = getCellForIndex(index);
         if (cell != null) {
             return cell.photoImage.getImageReceiver().getBitmap();
@@ -553,7 +553,7 @@ public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation f
     }
 
     @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+    public void willSwitchFromPhoto(int index) {
         int count = listView.getChildCount();
         for (int a = 0; a < count; a++) {
             View view = listView.getChildAt(a);
@@ -797,7 +797,7 @@ private void searchBingImages(String query, int offset, int count) {
                 url = nextSearchBingString;
             } else {
                 boolean adult;
-                String phone = UserConfig.getCurrentUser().phone;
+                String phone = UserConfig.getCurrentUser().getPhone();
                 adult = phone.startsWith("44") || phone.startsWith("49") || phone.startsWith("43") || phone.startsWith("31") || phone.startsWith("1");
                 url = String.format(Locale.US, "https://api.datamarket.azure.com/Bing/Search/v1/Image?Query='%s'&$skip=%d&$top=%d&$format=json%s", URLEncoder.encode(query, "UTF-8"), offset, count, adult ? "" : "&Adult='Off'");
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index f470d0ed8..61ac4f240 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -25,7 +25,6 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
-import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.GestureDetector;
@@ -39,56 +38,49 @@
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.view.animation.DecelerateInterpolator;
-import android.widget.AdapterView;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.ListView;
 import android.widget.RelativeLayout;
 import android.widget.Scroller;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.android.AnimationCompat.AnimatorSetProxy;
+import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.ContactsController;
 import org.telegram.android.ImageLoader;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
 import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.android.MessageObject;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.dto.Post;
-import org.telegram.ui.Adapters.MentionsAdapter;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.ClippingImageView;
-import org.telegram.android.ImageReceiver;
-import org.telegram.ui.Components.GifDrawable;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PhotoCropView;
 import org.telegram.ui.Components.PhotoFilterView;
 import org.telegram.ui.Components.PhotoPickerBottomLayout;
 import org.telegram.ui.Components.PhotoViewerCaptionEnterView;
 import org.telegram.ui.Components.SizeNotifierRelativeLayoutPhoto;
-import org.telegram.utils.StringUtils;
 
 import java.io.File;
-import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
@@ -132,7 +124,6 @@
     private PhotoPickerBottomLayout pickerView;
     private PhotoPickerBottomLayout editorDoneLayout;
     private RadialProgressView radialProgressViews[] = new RadialProgressView[3];
-    private GifDrawable gifDrawable;
     private ActionBarMenuItem cropItem;
     private ActionBarMenuItem tuneItem;
     private ActionBarMenuItem captionItem;
@@ -151,8 +142,6 @@
 
     private float animationValues[][] = new float[2][8];
 
-    private MentionsAdapter mentionsAdapter;
-    private ListView mentionListView;
     private AnimatorSetProxy mentionListAnimation;
     private boolean allowMentions;
 
@@ -171,8 +160,6 @@
     private ImageReceiver centerImage = new ImageReceiver();
     private ImageReceiver rightImage = new ImageReceiver();
     private int currentIndex;
-    private MessageObject currentMessageObject;
-    private TLRPC.FileLocation currentFileLocation;
     private String currentFileNames[] = new String[3];
     private PlaceProviderObject currentPlaceObject;
     private String currentPathObject;
@@ -226,12 +213,6 @@
     private VelocityTracker velocityTracker = null;
     private Scroller scroller = null;
 
-    private ArrayList<MessageObject> imagesArrTemp = new ArrayList<>();
-    private HashMap<Integer, MessageObject> imagesByIdsTemp = new HashMap<>();
-    private ArrayList<MessageObject> imagesArr = new ArrayList<>();
-    private HashMap<Integer, MessageObject> imagesByIds = new HashMap<>();
-    private ArrayList<TLRPC.FileLocation> imagesArrLocations = new ArrayList<>();
-    private ArrayList<TLRPC.Photo> avatarsArr = new ArrayList<>();
     private ArrayList<Integer> imagesArrLocationsSizes = new ArrayList<>();
     private ArrayList<Object> imagesArrLocals = new ArrayList<>();
     private TLRPC.FileLocation currentUserAvatarLocation = null;
@@ -423,17 +404,17 @@ public void onDraw(Canvas canvas) {
 
     public static class EmptyPhotoViewerProvider implements PhotoViewerProvider {
         @Override
-        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        public PlaceProviderObject getPlaceForPhoto(int index) {
             return null;
         }
 
         @Override
-        public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        public Bitmap getThumbForPhoto(int index) {
             return null;
         }
 
         @Override
-        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        public void willSwitchFromPhoto(int index) {
 
         }
 
@@ -474,11 +455,12 @@ public void updatePhotoAtIndex(int index) {
     }
 
     public interface PhotoViewerProvider {
-        PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
 
-        Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        PlaceProviderObject getPlaceForPhoto(int index);
+
+        Bitmap getThumbForPhoto(int index);
 
-        void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        void willSwitchFromPhoto(int index);
 
         void willHidePhotoViewer();
 
@@ -541,7 +523,7 @@ protected void onDraw(Canvas canvas) {
 
         @Override
         protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
-            if ((child == captionEditText || child == pickerView || child == captionTextView || child == mentionListView)) {
+            if ((child == captionEditText || child == pickerView || child == captionTextView)) {
                 int state = captionEditText.getKeyboardTransitionState();
                 if (!(state == 0 || state == 1 || state == 2)) {
                     if (child == captionTextView) {
@@ -595,7 +577,6 @@ public void didReceivedNotification(int id, Object... args) {
                     radialProgressViews[a].setProgress(1.0f, true);
                     checkProgress(a, true);
                     if (a == 0) {
-                        createGifForCurrentImage();
                     }
                     break;
                 }
@@ -619,40 +600,23 @@ public void didReceivedNotification(int id, Object... args) {
                 if (photos.isEmpty()) {
                     return;
                 }
-                imagesArrLocations.clear();
                 imagesArrLocationsSizes.clear();
-                avatarsArr.clear();
                 for (TLRPC.Photo photo : photos) {
                     if (photo == null || photo instanceof TLRPC.TL_photoEmpty || photo.sizes == null) {
                         continue;
                     }
                     TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 640);
                     if (sizeFull != null) {
-                        if (currentFileLocation != null) {
-                            for (TLRPC.PhotoSize size : photo.sizes) {
-                                if (size.location.local_id == currentFileLocation.local_id && size.location.volume_id == currentFileLocation.volume_id) {
-                                    setToImage = imagesArrLocations.size();
-                                    break;
-                                }
-                            }
-                        }
-                        imagesArrLocations.add(sizeFull.location);
                         imagesArrLocationsSizes.add(sizeFull.size);
-                        avatarsArr.add(photo);
                     }
                 }
-                if (!avatarsArr.isEmpty()) {
-                    menuItem.showSubItem(gallery_menu_delete);
-                } else {
-                    menuItem.hideSubItem(gallery_menu_delete);
-                }
+
+                menuItem.hideSubItem(gallery_menu_delete);
                 needSearchImageInArr = false;
                 currentIndex = -1;
                 if (setToImage != -1) {
                     setImageIndex(setToImage, true);
                 } else {
-                    avatarsArr.add(0, new TLRPC.TL_photoEmpty());
-                    imagesArrLocations.add(0, currentFileLocation);
                     imagesArrLocationsSizes.add(0, 0);
                     setImageIndex(0, true);
                 }
@@ -671,108 +635,10 @@ public void didReceivedNotification(int id, Object... args) {
                     isFirstLoading = false;
                     loadingMoreImages = true;
                     SharedMediaQuery.loadMedia(currentDialogId, 0, 100, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
-                } else if (!imagesArr.isEmpty()) {
-                    if (opennedFromMedia) {
-                        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, totalImagesCount));
-                    } else {
-                        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
-                    }
                 }
             }
         } else if (id == NotificationCenter.mediaDidLoaded) {
-            long uid = (Long) args[0];
-            int guid = (Integer) args[4];
-            if (uid == currentDialogId && guid == classGuid) {
-                loadingMoreImages = false;
-                ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[2];
-                boolean fromCache = (Boolean) args[3];
-                cacheEndReached = !fromCache;
-                if (needSearchImageInArr) {
-                    if (arr.isEmpty()) {
-                        needSearchImageInArr = false;
-                        return;
-                    }
-                    int foundIndex = -1;
-
-                    MessageObject currentMessage = imagesArr.get(currentIndex);
-
-                    int added = 0;
-                    for (MessageObject message : arr) {
-                        if (!imagesByIdsTemp.containsKey(message.getId())) {
-                            imagesByIdsTemp.put(message.getId(), message);
-                            if (opennedFromMedia) {
-                                imagesArrTemp.add(message);
-                                if (message.getId() == currentMessage.getId()) {
-                                    foundIndex = added;
-                                }
-                                added++;
-                            } else {
-                                added++;
-                                imagesArrTemp.add(0, message);
-                                if (message.getId() == currentMessage.getId()) {
-                                    foundIndex = arr.size() - added;
-                                }
-                            }
-                        }
-                    }
-                    if (added == 0) {
-                        totalImagesCount = imagesArr.size();
-                    }
 
-                    if (foundIndex != -1) {
-                        imagesArr.clear();
-                        imagesArr.addAll(imagesArrTemp);
-                        imagesByIds.clear();
-                        imagesByIds.putAll(imagesByIdsTemp);
-                        imagesArrTemp.clear();
-                        imagesByIdsTemp.clear();
-                        needSearchImageInArr = false;
-                        currentIndex = -1;
-                        if (foundIndex >= imagesArr.size()) {
-                            foundIndex = imagesArr.size() - 1;
-                        }
-                        setImageIndex(foundIndex, true);
-                    } else {
-                        if (!cacheEndReached || !arr.isEmpty() && added != 0) {
-                            loadingMoreImages = true;
-                            if (opennedFromMedia) {
-                                SharedMediaQuery.loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(imagesArrTemp.size() - 1).getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
-                            } else {
-                                SharedMediaQuery.loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(0).getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
-                            }
-                        }
-                    }
-                } else {
-                    int added = 0;
-                    for (MessageObject message : arr) {
-                        if (!imagesByIds.containsKey(message.getId())) {
-                            added++;
-                            if (opennedFromMedia) {
-                                imagesArr.add(message);
-                            } else {
-                                imagesArr.add(0, message);
-                            }
-                            imagesByIds.put(message.getId(), message);
-                        }
-                    }
-                    if (arr.isEmpty() && !fromCache) {
-                        totalImagesCount = arr.size();
-                    }
-                    if (opennedFromMedia) {
-                        if (added == 0) {
-                            totalImagesCount = imagesArr.size();
-                        }
-                    } else {
-                        if (added != 0) {
-                            int index = currentIndex;
-                            currentIndex = -1;
-                            setImageIndex(index + added, true);
-                        } else {
-                            totalImagesCount = imagesArr.size();
-                        }
-                    }
-                }
-            }
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (captionTextView != null) {
                 captionTextView.invalidate();
@@ -853,13 +719,7 @@ public void onItemClick(int id) {
                     if (currentPost != null) {
                         currentFileNames[0] = Utilities.MD5(currentPost.getImage().getUrl()) + ".jpg";
                         f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), currentFileNames[0]);
-                    } else
-                        //new
-                        if (currentMessageObject != null) {
-                            f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-                        } else if (currentFileLocation != null) {
-                            f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
-                        }
+                    }
 
                     if (f != null && f.exists()) {
                         MediaController.saveFile(f.toString(), parentActivity, currentFileNames[0].endsWith("mp4") ? 1 : 0, null);
@@ -923,72 +783,6 @@ public void onItemClick(int id) {
                     builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialogInterface, int i) {
-                            if (!imagesArr.isEmpty()) {
-                                if (currentIndex < 0 || currentIndex >= imagesArr.size()) {
-                                    return;
-                                }
-                                MessageObject obj = imagesArr.get(currentIndex);
-                                if (obj.isSent()) {
-                                    ArrayList<Integer> arr = new ArrayList<>();
-                                    arr.add(obj.getId());
-
-                                    ArrayList<Long> random_ids = null;
-                                    TLRPC.EncryptedChat encryptedChat = null;
-                                    if ((int) obj.getDialogId() == 0 && obj.messageOwner.random_id != 0) {
-                                        random_ids = new ArrayList<>();
-                                        random_ids.add(obj.messageOwner.random_id);
-                                        encryptedChat = MessagesController.getInstance().getEncryptedChat((int) (obj.getDialogId() >> 32));
-                                    }
-
-                                    MessagesController.getInstance().deleteMessages(arr, random_ids, encryptedChat);
-                                    closePhoto(false, false);
-                                }
-                            } else if (!avatarsArr.isEmpty()) {
-                                if (currentIndex < 0 || currentIndex >= avatarsArr.size()) {
-                                    return;
-                                }
-                                TLRPC.Photo photo = avatarsArr.get(currentIndex);
-                                TLRPC.FileLocation currentLocation = imagesArrLocations.get(currentIndex);
-                                if (photo instanceof TLRPC.TL_photoEmpty) {
-                                    photo = null;
-                                }
-                                boolean current = false;
-                                if (currentUserAvatarLocation != null) {
-                                    if (photo != null) {
-                                        for (TLRPC.PhotoSize size : photo.sizes) {
-                                            if (size.location.local_id == currentUserAvatarLocation.local_id && size.location.volume_id == currentUserAvatarLocation.volume_id) {
-                                                current = true;
-                                                break;
-                                            }
-                                        }
-                                    } else if (currentLocation.local_id == currentUserAvatarLocation.local_id && currentLocation.volume_id == currentUserAvatarLocation.volume_id) {
-                                        current = true;
-                                    }
-                                }
-                                if (current) {
-                                    MessagesController.getInstance().deleteUserPhoto(null);
-                                    closePhoto(false, false);
-                                } else if (photo != null) {
-                                    TLRPC.TL_inputPhoto inputPhoto = new TLRPC.TL_inputPhoto();
-                                    inputPhoto.id = photo.id;
-                                    inputPhoto.access_hash = photo.access_hash;
-                                    MessagesController.getInstance().deleteUserPhoto(inputPhoto);
-                                    MessagesStorage.getInstance().clearUserPhoto(avatarsUserId, photo.id);
-                                    imagesArrLocations.remove(currentIndex);
-                                    imagesArrLocationsSizes.remove(currentIndex);
-                                    avatarsArr.remove(currentIndex);
-                                    if (imagesArrLocations.isEmpty()) {
-                                        closePhoto(false, false);
-                                    } else {
-                                        int index = currentIndex;
-                                        if (index >= avatarsArr.size()) {
-                                            index = avatarsArr.size() - 1;
-                                        }
-                                        currentIndex = -1;
-                                        setImageIndex(index, true);
-                                    }
-                                }
-                            }
                         }
                     });
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
@@ -1015,17 +809,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
 
             @Override
             public boolean canOpenMenu() {
-                if (currentMessageObject != null) {
-                    File f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-                    if (f.exists()) {
-                        return true;
-                    }
-                } else if (currentFileLocation != null) {
-                    File f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
-                    if (f.exists()) {
-                        return true;
-                    }
-                }
                 return false;
             }
         });
@@ -1091,11 +874,7 @@ public void onClick(View v) {
                     File f = null;
 //                    String text = null;
 
-                    if (currentMessageObject != null) {
-                        f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-                    } else if (currentFileLocation != null) {
-                        f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
-                    } else if (currentPost != null) {
+                    if (currentPost != null) {
                         //TODO-aragats new. It is important do not save again from the internet but use saved in cache. But actually it load the file from cache, because already loaded.
                         currentFileNames[0] = Utilities.MD5(currentPost.getImage().getUrl()) + ".jpg";
                         f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), currentFileNames[0]);
@@ -1250,148 +1029,18 @@ public void onTextChanged(CharSequence text, boolean bigChange) {
 
             @Override
             public void onWindowSizeChanged(int size) {
-                int height = AndroidUtilities.dp(36 * Math.min(3, mentionsAdapter.getCount()) + (mentionsAdapter.getCount() > 3 ? 18 : 0));
+//                int height = AndroidUtilities.dp(36 * Math.min(3, mentionsAdapter.getCount()) + (mentionsAdapter.getCount() > 3 ? 18 : 0));
+                int height = AndroidUtilities.dp(36 * Math.min(3, 0) + (0 > 3 ? 18 : 0));
                 if (size - AndroidUtilities.getCurrentActionBarHeight() * 2 < height) {
                     allowMentions = false;
-                    if (mentionListView != null && mentionListView.getVisibility() == View.VISIBLE) {
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.INVISIBLE);
-                    }
                 } else {
                     allowMentions = true;
-                    if (mentionListView != null && mentionListView.getVisibility() == View.INVISIBLE) {
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.VISIBLE);
-                    }
                 }
             }
         });
         containerView.addView(captionEditText, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, -400, RelativeLayout.ALIGN_PARENT_BOTTOM));
 
-        mentionListView = new ListView(parentActivity);
-        mentionListView.setBackgroundColor(0x7f000000);
-        mentionListView.setVisibility(View.GONE);
-        mentionListView.setClipToPadding(true);
-        mentionListView.setDividerHeight(0);
-        mentionListView.setDivider(null);
-        if (Build.VERSION.SDK_INT > 8) {
-            mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
-        }
-        containerView.addView(mentionListView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 110, 0, -110, 0, 0, RelativeLayout.ALIGN_TOP, 1000));
-
-        mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(parentActivity, true, new MentionsAdapter.MentionsAdapterDelegate() {
-            @Override
-            public void needChangePanelVisibility(boolean show) {
-                if (show) {
-                    RelativeLayout.LayoutParams layoutParams3 = (RelativeLayout.LayoutParams) mentionListView.getLayoutParams();
-                    int height = 36 * Math.min(3, mentionsAdapter.getCount()) + (mentionsAdapter.getCount() > 3 ? 18 : 0);
-                    layoutParams3.height = AndroidUtilities.dp(height);
-                    layoutParams3.topMargin = -AndroidUtilities.dp(height);
-                    mentionListView.setLayoutParams(layoutParams3);
-
-                    if (mentionListAnimation != null) {
-                        mentionListAnimation.cancel();
-                        mentionListAnimation = null;
-                    }
-
-                    if (mentionListView.getVisibility() == View.VISIBLE) {
-                        ViewProxy.setAlpha(mentionListView, 1.0f);
-                        return;
-                    }
-                    if (allowMentions) {
-                        mentionListView.setVisibility(View.VISIBLE);
-                        mentionListAnimation = new AnimatorSetProxy();
-                        mentionListAnimation.playTogether(
-                                ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f, 1.0f)
-                        );
-                        mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                            @Override
-                            public void onAnimationEnd(Object animation) {
-                                if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                    mentionListView.clearAnimation();
-                                    mentionListAnimation = null;
-                                }
-                            }
-                        });
-                        mentionListAnimation.setDuration(200);
-                        mentionListAnimation.start();
-                    } else {
-                        ViewProxy.setAlpha(mentionListView, 1.0f);
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.INVISIBLE);
-                    }
-                } else {
-                    if (mentionListAnimation != null) {
-                        mentionListAnimation.cancel();
-                        mentionListAnimation = null;
-                    }
-
-                    if (mentionListView.getVisibility() == View.GONE) {
-                        return;
-                    }
-                    if (allowMentions) {
-                        mentionListAnimation = new AnimatorSetProxy();
-                        mentionListAnimation.playTogether(
-                                ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f)
-                        );
-                        mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                            @Override
-                            public void onAnimationEnd(Object animation) {
-                                if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                    mentionListView.clearAnimation();
-                                    mentionListView.setVisibility(View.GONE);
-                                    mentionListAnimation = null;
-                                }
-                            }
-                        });
-                        mentionListAnimation.setDuration(200);
-                        mentionListAnimation.start();
-                    } else {
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.GONE);
-                    }
-                }
-            }
-        }));
 
-        mentionListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                Object object = mentionsAdapter.getItem(position);
-                int start = mentionsAdapter.getResultStartPosition();
-                int len = mentionsAdapter.getResultLength();
-                if (object instanceof TLRPC.User) {
-                    TLRPC.User user = (TLRPC.User) object;
-                    if (user != null) {
-                        captionEditText.replaceWithText(start, len, "@" + user.username + " ");
-                    }
-                } else if (object instanceof String) {
-                    captionEditText.replaceWithText(start, len, object + " ");
-                }
-            }
-        });
-
-        mentionListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
-                Object object = mentionsAdapter.getItem(position);
-                if (object instanceof String) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
-                    builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            mentionsAdapter.clearRecentHashtags();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showAlertDialog(builder);
-                    return true;
-                }
-                return false;
-            }
-        });
     }
 
     private void updateCaptionTextForCurrentPhoto(Object object) {
@@ -1947,157 +1596,9 @@ private String getFileName(int index) {
         if (index < 0) {
             return null;
         }
-        if (!imagesArrLocations.isEmpty() || !imagesArr.isEmpty()) {
-            TLRPC.InputFileLocation file = getInputFileLocation(index);
-            if (file == null) {
-                return null;
-            }
-            if (!imagesArrLocations.isEmpty()) {
-                return file.volume_id + "_" + file.local_id + ".jpg";
-            } else if (!imagesArr.isEmpty()) {
-                MessageObject message = imagesArr.get(index);
-                if (message.messageOwner instanceof TLRPC.TL_messageService) {
-                    return file.volume_id + "_" + file.local_id + ".jpg";
-                } else if (message.messageOwner.media != null) {
-                    if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                        return file.volume_id + "_" + file.id + ".mp4";
-                    } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                        return file.volume_id + "_" + file.local_id + ".jpg";
-                    }
-                }
-            }
-        } else if (!imagesArrLocals.isEmpty()) {
-            if (index >= imagesArrLocals.size()) {
-                return null;
-            }
-            Object object = imagesArrLocals.get(index);
-            if (object instanceof MediaController.SearchImage) {
-                MediaController.SearchImage searchImage = ((MediaController.SearchImage) object);
-                if (searchImage.localUrl != null && searchImage.localUrl.length() > 0) {
-                    File file = new File(searchImage.localUrl);
-                    if (file.exists()) {
-                        return file.getName();
-                    } else {
-                        searchImage.localUrl = "";
-                    }
-                }
-                return Utilities.MD5(searchImage.imageUrl) + "." + ImageLoader.getHttpUrlExtension(searchImage.imageUrl);
-            }
-        }
         return null;
     }
 
-    private TLRPC.FileLocation getFileLocation(int index, int size[]) {
-        if (index < 0) {
-            return null;
-        }
-        if (!imagesArrLocations.isEmpty()) {
-            if (index >= imagesArrLocations.size()) {
-                return null;
-            }
-            size[0] = imagesArrLocationsSizes.get(index);
-            return imagesArrLocations.get(index);
-        } else if (!imagesArr.isEmpty()) {
-            if (index >= imagesArr.size()) {
-                return null;
-            }
-            MessageObject message = imagesArr.get(index);
-            if (message.messageOwner instanceof TLRPC.TL_messageService) {
-                if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                    return message.messageOwner.action.newUserPhoto.photo_big;
-                } else {
-                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.photoThumbs, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        size[0] = sizeFull.size;
-                        if (size[0] == 0) {
-                            size[0] = -1;
-                        }
-                        return sizeFull.location;
-                    } else {
-                        size[0] = -1;
-                    }
-                }
-            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && message.messageOwner.media.photo != null) {
-                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.photoThumbs, AndroidUtilities.getPhotoSize());
-                if (sizeFull != null) {
-                    size[0] = sizeFull.size;
-                    if (size[0] == 0) {
-                        size[0] = -1;
-                    }
-                    return sizeFull.location;
-                } else {
-                    size[0] = -1;
-                }
-            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo && message.messageOwner.media.video != null && message.messageOwner.media.video.thumb != null) {
-                size[0] = message.messageOwner.media.video.thumb.size;
-                if (size[0] == 0) {
-                    size[0] = -1;
-                }
-                return message.messageOwner.media.video.thumb.location;
-            }
-        }
-        return null;
-    }
-
-    private TLRPC.InputFileLocation getInputFileLocation(int index) {
-        if (index < 0) {
-            return null;
-        }
-        if (!imagesArrLocations.isEmpty()) {
-            if (index >= imagesArrLocations.size()) {
-                return null;
-            }
-            TLRPC.FileLocation sizeFull = imagesArrLocations.get(index);
-            TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
-            location.local_id = sizeFull.local_id;
-            location.volume_id = sizeFull.volume_id;
-            location.id = sizeFull.dc_id;
-            location.secret = sizeFull.secret;
-            return location;
-        } else if (!imagesArr.isEmpty()) {
-            if (index >= imagesArr.size()) {
-                return null;
-            }
-            MessageObject message = imagesArr.get(index);
-            if (message.messageOwner instanceof TLRPC.TL_messageService) {
-                if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                    TLRPC.FileLocation sizeFull = message.messageOwner.action.newUserPhoto.photo_big;
-                    TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
-                    location.local_id = sizeFull.local_id;
-                    location.volume_id = sizeFull.volume_id;
-                    location.id = sizeFull.dc_id;
-                    location.secret = sizeFull.secret;
-                    return location;
-                } else {
-                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.photoThumbs, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
-                        location.local_id = sizeFull.location.local_id;
-                        location.volume_id = sizeFull.location.volume_id;
-                        location.id = sizeFull.location.dc_id;
-                        location.secret = sizeFull.location.secret;
-                        return location;
-                    }
-                }
-            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.photoThumbs, AndroidUtilities.getPhotoSize());
-                if (sizeFull != null) {
-                    TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
-                    location.local_id = sizeFull.location.local_id;
-                    location.volume_id = sizeFull.location.volume_id;
-                    location.id = sizeFull.location.dc_id;
-                    location.secret = sizeFull.location.secret;
-                    return location;
-                }
-            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                TLRPC.TL_inputVideoFileLocation location = new TLRPC.TL_inputVideoFileLocation();
-                location.volume_id = message.messageOwner.media.video.dc_id;
-                location.id = message.messageOwner.media.video.id;
-                return location;
-            }
-        }
-        return null;
-    }
 
     private void updateSelectedCount() {
         if (placeProvider == null) {
@@ -2110,11 +1611,9 @@ private void updateSelectedCount() {
     //TODO-aragats new
     private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
-        currentMessageObject = null;
         //TODO-aragat new
         currentPost = null;
         //
-        currentFileLocation = null;
         currentPathObject = null;
         currentIndex = -1;
         currentFileNames[0] = null;
@@ -2131,17 +1630,11 @@ private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
         opennedFromMedia = false;
         needCaptionLayout = false;
         canShowBottom = true;
-        imagesArr.clear();
         //TODO-aragats new
         imagesPostArr.clear();
         //
-        imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
-        avatarsArr.clear();
         imagesArrLocals.clear();
-        imagesByIds.clear();
-        imagesArrTemp.clear();
-        imagesByIdsTemp.clear();
         currentUserAvatarLocation = null;
         containerView.setPadding(0, 0, 0, 0);
         currentThumb = object != null ? object.thumb : null;
@@ -2165,7 +1658,6 @@ private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
         captionDoneItem.setVisibility(View.GONE);
         captionEditText.clearAnimation();
         captionEditText.setVisibility(View.GONE);
-        mentionListView.setVisibility(View.GONE);
         editorDoneLayout.setVisibility(View.GONE);
         captionTextView.setTag(null);
         captionTextView.clearAnimation();
@@ -2194,13 +1686,11 @@ private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
     }
 
 
-    private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<MessageObject> messages, final ArrayList<Object> photos, int index, final PlaceProviderObject object) {
+    private void onPhotoShow(final ArrayList<Object> photos, int index, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
-        currentMessageObject = null;
         //TODO-aragat new
         currentPost = null;
         //
-        currentFileLocation = null;
         currentPathObject = null;
         currentIndex = -1;
         currentFileNames[0] = null;
@@ -2217,17 +1707,11 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         opennedFromMedia = false;
         needCaptionLayout = false;
         canShowBottom = true;
-        imagesArr.clear();
         //TODO-aragats new
         imagesPostArr.clear();
         //
-        imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
-        avatarsArr.clear();
         imagesArrLocals.clear();
-        imagesByIds.clear();
-        imagesArrTemp.clear();
-        imagesByIdsTemp.clear();
         currentUserAvatarLocation = null;
         containerView.setPadding(0, 0, 0, 0);
         currentThumb = object != null ? object.thumb : null;
@@ -2250,7 +1734,6 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         captionDoneItem.setVisibility(View.GONE);
         captionEditText.clearAnimation();
         captionEditText.setVisibility(View.GONE);
-        mentionListView.setVisibility(View.GONE);
         editorDoneLayout.setVisibility(View.GONE);
         captionTextView.setTag(null);
         captionTextView.clearAnimation();
@@ -2270,70 +1753,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
             }
         }
 
-        if (messageObject != null && messages == null) {
-            imagesArr.add(messageObject);
-            if (messageObject.messageOwner.action == null || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty) {
-                needSearchImageInArr = true;
-                imagesByIds.put(messageObject.getId(), messageObject);
-                if (messageObject.messageOwner.dialog_id != 0) {
-                    currentDialogId = messageObject.messageOwner.dialog_id;
-                } else {
-                    if (messageObject.messageOwner.to_id.chat_id != 0) {
-                        currentDialogId = -messageObject.messageOwner.to_id.chat_id;
-                    } else {
-                        if (messageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
-                            currentDialogId = messageObject.messageOwner.from_id;
-                        } else {
-                            currentDialogId = messageObject.messageOwner.to_id.user_id;
-                        }
-                    }
-                }
-                menuItem.showSubItem(gallery_menu_showall);
-            } else {
-                menuItem.hideSubItem(gallery_menu_showall);
-            }
-            setImageIndex(0, true);
-        } else if (fileLocation != null) {
-            avatarsUserId = object.user_id;
-            imagesArrLocations.add(fileLocation);
-            imagesArrLocationsSizes.add(object.size);
-            avatarsArr.add(new TLRPC.TL_photoEmpty());
-            bottomLayout.clearAnimation();
-            shareButton.setVisibility(View.VISIBLE);
-            menuItem.hideSubItem(gallery_menu_showall);
-            setImageIndex(0, true);
-            currentUserAvatarLocation = fileLocation;
-        } else if (messages != null) {
-            menuItem.showSubItem(gallery_menu_showall);
-            opennedFromMedia = true;
-            imagesArr.addAll(messages);
-            if (!opennedFromMedia) {
-                Collections.reverse(imagesArr);
-                index = imagesArr.size() - index - 1;
-            }
-            for (MessageObject message : imagesArr) {
-                imagesByIds.put(message.getId(), message);
-            }
-
-            if (messageObject.messageOwner.dialog_id != 0) {
-                currentDialogId = messageObject.messageOwner.dialog_id;
-            } else {
-                if (messageObject.messageOwner.to_id == null) {
-                    closePhoto(false, false);
-                    return;
-                }
-                if (messageObject.messageOwner.to_id.chat_id != 0) {
-                    currentDialogId = -messageObject.messageOwner.to_id.chat_id;
-                } else {
-                    if (messageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
-                        currentDialogId = messageObject.messageOwner.from_id;
-                    } else {
-                        currentDialogId = messageObject.messageOwner.to_id.user_id;
-                    }
-                }
-            }
-            setImageIndex(index, true);
-        } else if (photos != null) {
+        if (photos != null) {
             if (sendPhotoType == 0) {
                 checkImageView.setVisibility(View.VISIBLE);
             }
@@ -2400,80 +1820,13 @@ private void setImageIndex(int index, boolean init) {
         currentFileNames[0] = getFileName(index);
         currentFileNames[1] = getFileName(index + 1);
         currentFileNames[2] = getFileName(index - 1);
-        placeProvider.willSwitchFromPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        placeProvider.willSwitchFromPhoto(currentIndex);
         int prevIndex = currentIndex;
         currentIndex = index;
 
         boolean sameImage = false;
 
-        if (!imagesArr.isEmpty()) {
-            menuItem.showSubItem(gallery_menu_delete);
-            if (currentIndex < 0 || currentIndex >= imagesArr.size()) {
-                closePhoto(false, false);
-                return;
-            }
-            currentMessageObject = imagesArr.get(currentIndex);
-            TLRPC.User user = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
-            if (user != null) {
-                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
-            } else {
-                nameTextView.setText("");
-            }
-            long date = (long) currentMessageObject.messageOwner.date * 1000;
-            String dateString = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(new Date(date)), LocaleController.formatterDay.format(new Date(date)));
-            if (currentFileNames[0] != null && currentFileNames[0].endsWith("mp4")) {
-                dateTextView.setText(String.format("%s (%s)", dateString, AndroidUtilities.formatFileSize(currentMessageObject.messageOwner.media.video.size)));
-            } else {
-                dateTextView.setText(dateString);
-            }
-            CharSequence caption = currentMessageObject.caption;
-            setCurrentCaption(caption);
-
-            if (totalImagesCount != 0 && !needSearchImageInArr) {
-                if (opennedFromMedia) {
-                    if (imagesArr.size() < totalImagesCount && !loadingMoreImages && currentIndex > imagesArr.size() - 5) {
-                        MessageObject lastMessage = imagesArr.get(imagesArr.size() - 1);
-                        SharedMediaQuery.loadMedia(currentDialogId, 0, 100, lastMessage.getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, !cacheEndReached, classGuid);
-                        loadingMoreImages = true;
-                    }
-                    actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, totalImagesCount));
-                } else {
-                    if (imagesArr.size() < totalImagesCount && !loadingMoreImages && currentIndex < 5) {
-                        MessageObject lastMessage = imagesArr.get(0);
-                        SharedMediaQuery.loadMedia(currentDialogId, 0, 100, lastMessage.getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, !cacheEndReached, classGuid);
-                        loadingMoreImages = true;
-                    }
-                    actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
-                }
-            }
-            if (currentMessageObject.messageOwner.ttl != 0) {
-                menuItem.hideSubItem(gallery_menu_save);
-                shareButton.setVisibility(View.GONE);
-            } else {
-                menuItem.showSubItem(gallery_menu_save);
-                shareButton.setVisibility(View.VISIBLE);
-            }
-        } else if (!imagesArrLocations.isEmpty()) {
-            nameTextView.setText("");
-            dateTextView.setText("");
-            if (avatarsUserId == UserConfig.getClientUserId() && !avatarsArr.isEmpty()) {
-                menuItem.showSubItem(gallery_menu_delete);
-            } else {
-                menuItem.hideSubItem(gallery_menu_delete);
-            }
-            TLRPC.FileLocation old = currentFileLocation;
-            if (index < 0 || index >= imagesArrLocations.size()) {
-                closePhoto(false, false);
-                return;
-            }
-            currentFileLocation = imagesArrLocations.get(index);
-            if (old != null && currentFileLocation != null && old.local_id == currentFileLocation.local_id && old.volume_id == currentFileLocation.volume_id) {
-                sameImage = true;
-            }
-            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocations.size()));
-            menuItem.showSubItem(gallery_menu_save);
-            shareButton.setVisibility(View.VISIBLE);
-        } else if (!imagesArrLocals.isEmpty()) {
+        if (!imagesArrLocals.isEmpty()) {
             Object object = imagesArrLocals.get(index);
             if (index < 0 || index >= imagesArrLocals.size()) {
                 closePhoto(false, false);
@@ -2510,7 +1863,7 @@ private void setImageIndex(int index, boolean init) {
                 showAfterAnimation = currentPlaceObject;
             }
         }
-        currentPlaceObject = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        currentPlaceObject = placeProvider.getPlaceForPhoto(currentIndex);
         if (currentPlaceObject != null) {
             if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(false, true);
@@ -2587,7 +1940,6 @@ private void setImageIndex(int index, boolean init) {
             }
         }
 
-        createGifForCurrentImage();
     }
 
 
@@ -2759,37 +2111,6 @@ public void run() {
         }
     }
 
-    private void createGifForCurrentImage() {
-        if (gifDrawable != null) {
-            gifDrawable.recycle();
-            gifDrawable = null;
-        }
-        if (!imagesArrLocals.isEmpty()) {
-            if (currentIndex >= 0 && currentIndex < imagesArrLocals.size()) {
-                Object object = imagesArrLocals.get(currentIndex);
-                if (!(object instanceof MediaController.SearchImage)) {
-                    return;
-                }
-                if (((MediaController.SearchImage) object).type == 1) {
-                    File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_DOCUMENT), currentFileNames[0]);
-                    if (!f.exists()) {
-                        f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), currentFileNames[0]);
-                    }
-                    if (f.exists()) {
-                        try {
-                            gifDrawable = new GifDrawable(f);
-                            gifDrawable.parentView = new WeakReference<View>(containerView);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        if (gifDrawable != null) {
-                            gifDrawable.start();
-                        }
-                    }
-                }
-            }
-        }
-    }
 
     private void checkProgress(int a, boolean animated) {
         if (currentFileNames[a] != null) {
@@ -2800,13 +2121,7 @@ private void checkProgress(int a, boolean animated) {
                 index -= 1;
             }
             File f = null;
-            if (currentMessageObject != null) {
-                MessageObject messageObject = imagesArr.get(index);
-                f = FileLoader.getPathToMessage(messageObject.messageOwner);
-            } else if (currentFileLocation != null) {
-                TLRPC.FileLocation location = imagesArrLocations.get(index);
-                f = FileLoader.getPathToAttach(location, avatarsUserId != 0);
-            } else if (currentPathObject != null) {
+            if (currentPathObject != null) {
                 f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_DOCUMENT), currentFileNames[a]);
                 if (!f.exists()) {
                     f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), currentFileNames[a]);
@@ -2854,7 +2169,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
                     placeHolder = currentThumb;
                 }
                 if (placeHolder == null) {
-                    placeHolder = placeProvider.getThumbForPhoto(null, null, index);
+                    placeHolder = placeProvider.getThumbForPhoto(index);
                 }
                 String path = null;
                 int imageSize = 0;
@@ -2881,51 +2196,14 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
             }
         } else {
             int size[] = new int[1];
-            TLRPC.FileLocation fileLocation = getFileLocation(index, size);
-
-            if (fileLocation != null) {
-                MessageObject messageObject = null;
-                if (!imagesArr.isEmpty()) {
-                    messageObject = imagesArr.get(index);
-                }
-                imageReceiver.setParentMessageObject(messageObject);
-                if (messageObject != null) {
-                    imageReceiver.setShouldGenerateQualityThumb(true);
-                }
-
-                if (messageObject != null && messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                    imageReceiver.setNeedsQualityThumb(true);
-                    if (messageObject.messageOwner.media.video.thumb != null) {
-                        Bitmap placeHolder = null;
-                        if (currentThumb != null && imageReceiver == centerImage) {
-                            placeHolder = currentThumb;
-                        }
-                        TLRPC.PhotoSize thumbLocation = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100);
-                        imageReceiver.setImage(null, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation.location, "b", 0, null, true);
-                    } else {
-                        imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
-                    }
-                } else {
-                    imageReceiver.setNeedsQualityThumb(false);
-                    Bitmap placeHolder = null;
-                    if (currentThumb != null && imageReceiver == centerImage) {
-                        placeHolder = currentThumb;
-                    }
-                    if (size[0] == 0) {
-                        size[0] = -1;
-                    }
-                    TLRPC.PhotoSize thumbLocation = messageObject != null ? FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100) : null;
-                    imageReceiver.setImage(fileLocation, null, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, thumbLocation != null ? thumbLocation.location : null, "b", size[0], null, avatarsUserId != 0);
-                }
+            imageReceiver.setNeedsQualityThumb(false);
+            imageReceiver.setParentMessageObject(null);
+            if (size[0] == 0) {
+                imageReceiver.setImageBitmap((Bitmap) null);
             } else {
-                imageReceiver.setNeedsQualityThumb(false);
-                imageReceiver.setParentMessageObject(null);
-                if (size[0] == 0) {
-                    imageReceiver.setImageBitmap((Bitmap) null);
-                } else {
-                    imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
-                }
+                imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
             }
+
         }
     }
 
@@ -2970,36 +2248,18 @@ private void setIndexToImagePostNew(ImageReceiver imageReceiver, int index) {
 
     }
 
-    public boolean isShowingImage(MessageObject object) {
-        return isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.getId() == object.getId();
-    }
-
-    public boolean isShowingImage(TLRPC.FileLocation object) {
-        return isVisible && !disableShowCheck && object != null && currentFileLocation != null && object.local_id == currentFileLocation.local_id && object.volume_id == currentFileLocation.volume_id && object.dc_id == currentFileLocation.dc_id;
-    }
 
     public boolean isShowingImage(String object) {
         return isVisible && !disableShowCheck && object != null && currentPathObject != null && object.equals(currentPathObject);
     }
 
-    public void openPhoto(final MessageObject messageObject, final PhotoViewerProvider provider) {
-        openPhoto(messageObject, null, null, null, 0, provider);
-    }
-
-    public void openPhoto(final TLRPC.FileLocation fileLocation, final PhotoViewerProvider provider) {
-        openPhoto(null, fileLocation, null, null, 0, provider);
-    }
-
-    public void openPhoto(final ArrayList<MessageObject> messages, final int index, final PhotoViewerProvider provider) {
-        openPhoto(messages.get(index), null, messages, null, index, provider);
-    }
 
     public void openPhotoForSelect(final ArrayList<Object> photos, final int index, int type, final PhotoViewerProvider provider) {
         sendPhotoType = type;
         if (pickerView != null) {
             pickerView.doneButtonTextView.setText(sendPhotoType == 1 ? LocaleController.getString("Set", R.string.Set).toUpperCase() : LocaleController.getString("Send", R.string.Send).toUpperCase());
         }
-        openPhoto(null, null, null, photos, index, provider);
+        openPhoto(photos, index, provider);
     }
 
     private boolean checkAnimation() {
@@ -3015,12 +2275,13 @@ private boolean checkAnimation() {
         return animationInProgress != 0;
     }
 
-    public void openPhoto(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<MessageObject> messages, final ArrayList<Object> photos, final int index, final PhotoViewerProvider provider) {
-        if (parentActivity == null || isVisible || provider == null && checkAnimation() || messageObject == null && fileLocation == null && messages == null && photos == null) {
+    public void openPhoto(final ArrayList<Object> photos, final int index, final PhotoViewerProvider provider) {
+        if (parentActivity == null || isVisible || provider == null && checkAnimation() && photos == null) {
             return;
         }
 
-        final PlaceProviderObject object = provider.getPlaceForPhoto(messageObject, fileLocation, index);
+        // immer null.
+        final PlaceProviderObject object = provider.getPlaceForPhoto(index);
         if (object == null && photos == null) {
             return;
         }
@@ -3074,147 +2335,9 @@ public void openPhoto(final MessageObject messageObject, final TLRPC.FileLocatio
 
         isVisible = true;
         toggleActionBar(true, false);
-
-        if (object != null) {
-            disableShowCheck = true;
-            animationInProgress = 1;
-            onPhotoShow(messageObject, fileLocation, messages, photos, index, object);
-
-            final Rect drawRegion = object.imageReceiver.getDrawRegion();
-            int orientation = object.imageReceiver.getOrientation();
-
-            animatingImageView.setVisibility(View.VISIBLE);
-            animatingImageView.setRadius(object.radius);
-            animatingImageView.setOrientation(orientation);
-            animatingImageView.setNeedRadius(object.radius != 0);
-            animatingImageView.setImageBitmap(object.thumb);
-
-            ViewProxy.setAlpha(animatingImageView, 1.0f);
-            ViewProxy.setPivotX(animatingImageView, 0.0f);
-            ViewProxy.setPivotY(animatingImageView, 0.0f);
-            ViewProxy.setScaleX(animatingImageView, 1.0f);
-            ViewProxy.setScaleY(animatingImageView, 1.0f);
-            ViewProxy.setTranslationX(animatingImageView, object.viewX + drawRegion.left);
-            ViewProxy.setTranslationY(animatingImageView, object.viewY + drawRegion.top);
-            final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
-            layoutParams.width = drawRegion.right - drawRegion.left;
-            layoutParams.height = drawRegion.bottom - drawRegion.top;
-            animatingImageView.setLayoutParams(layoutParams);
-
-            float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
-            float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
-            float scale = scaleX > scaleY ? scaleY : scaleX;
-            float width = layoutParams.width * scale;
-            float height = layoutParams.height * scale;
-            float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
-            float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
-            int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
-            int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
-
-            int coords2[] = new int[2];
-            object.parentView.getLocationInWindow(coords2);
-            int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
-            if (clipTop < 0) {
-                clipTop = 0;
-            }
-            int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
-            if (clipBottom < 0) {
-                clipBottom = 0;
-            }
-            clipTop = Math.max(clipTop, clipVertical);
-            clipBottom = Math.max(clipBottom, clipVertical);
-
-            animationValues[0][0] = ViewProxy.getScaleX(animatingImageView);
-            animationValues[0][1] = ViewProxy.getScaleY(animatingImageView);
-            animationValues[0][2] = ViewProxy.getTranslationX(animatingImageView);
-            animationValues[0][3] = ViewProxy.getTranslationY(animatingImageView);
-            animationValues[0][4] = clipHorizontal;
-            animationValues[0][5] = clipTop;
-            animationValues[0][6] = clipBottom;
-            animationValues[0][7] = animatingImageView.getRadius();
-
-            animationValues[1][0] = scale;
-            animationValues[1][1] = scale;
-            animationValues[1][2] = xPos;
-            animationValues[1][3] = yPos;
-            animationValues[1][4] = 0;
-            animationValues[1][5] = 0;
-            animationValues[1][6] = 0;
-            animationValues[1][7] = 0;
-
-            animatingImageView.setAnimationProgress(0);
-            backgroundDrawable.setAlpha(0);
-            ViewProxy.setAlpha(containerView, 0);
-
-            final AnimatorSetProxy animatorSet = new AnimatorSetProxy();
-            animatorSet.playTogether(
-                    ObjectAnimatorProxy.ofFloat(animatingImageView, "animationProgress", 0.0f, 1.0f),
-                    ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0, 255),
-                    ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f, 1.0f)
-            );
-
-            animationEndRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    if (containerView == null) {
-                        return;
-                    }
-                    animationInProgress = 0;
-                    transitionAnimationStartTime = 0;
-                    setImages();
-                    containerView.invalidate();
-                    animatingImageView.setVisibility(View.GONE);
-                    if (showAfterAnimation != null) {
-                        showAfterAnimation.imageReceiver.setVisible(true, true);
-                    }
-                    if (hideAfterAnimation != null) {
-                        hideAfterAnimation.imageReceiver.setVisible(false, true);
-                    }
-                }
-            };
-
-            animatorSet.setDuration(200);
-            animatorSet.addListener(new AnimatorListenerAdapterProxy() {
-                @Override
-                public void onAnimationEnd(Object animation) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().setAnimationInProgress(false);
-                            if (animationEndRunnable != null) {
-                                animationEndRunnable.run();
-                                animationEndRunnable = null;
-                            }
-                        }
-                    });
-                }
-
-                @Override
-                public void onAnimationCancel(Object animation) {
-                    onAnimationEnd(animation);
-                }
-            });
-            transitionAnimationStartTime = System.currentTimeMillis();
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    NotificationCenter.getInstance().setAnimationInProgress(true);
-                    animatorSet.start();
-                }
-            });
-
-            backgroundDrawable.drawRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    disableShowCheck = false;
-                    object.imageReceiver.setVisible(false, true);
-                }
-            };
-        } else {
-            backgroundDrawable.setAlpha(255);
-            ViewProxy.setAlpha(containerView, 1.0f);
-            onPhotoShow(messageObject, fileLocation, messages, photos, index, object);
-        }
+        backgroundDrawable.setAlpha(255);
+        ViewProxy.setAlpha(containerView, 1.0f);
+        onPhotoShow(photos, index, object);
     }
 
 
@@ -3592,7 +2715,6 @@ public void onAnimationCancel(Object animation) {
     private void onPhotoShow(final Post post, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
 //        currentMessageObject = null;  // TODO I removed it because it break getting  currentPlaceObject
-        currentFileLocation = null;
         currentPathObject = null;
         currentIndex = -1;
         currentFileNames[0] = null;
@@ -3607,16 +2729,10 @@ private void onPhotoShow(final Post post, final PlaceProviderObject object) {
         cacheEndReached = false;
         opennedFromMedia = false;
         canShowBottom = true;
-        imagesArr.clear();
         //new
         imagesPostArr.clear();
-        imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
-        avatarsArr.clear();
         imagesArrLocals.clear();
-        imagesByIds.clear();
-        imagesArrTemp.clear();
-        imagesByIdsTemp.clear();
         currentUserAvatarLocation = null;
         currentThumb = object.thumb;
         menuItem.setVisibility(View.VISIBLE);
@@ -3841,7 +2957,7 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
         //NOW
         PlaceProviderObject object1 = null;
         if (placeProvider != null) {
-            object1 = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+            object1 = placeProvider.getPlaceForPhoto(currentIndex);
         } else if (this.postPlaceProvider != null) {
             object1 = this.postPlaceProvider.getPlaceForPhoto(currentPost);
         }
@@ -4025,17 +3141,11 @@ public void destroyPhotoViewer() {
     private void onPhotoClosed(PlaceProviderObject object) {
         isVisible = false;
         disableShowCheck = true;
-        currentMessageObject = null;
         //TODO-aragats my custom
         currentPost = null;
         //
-        currentFileLocation = null;
         currentPathObject = null;
         currentThumb = null;
-        if (gifDrawable != null) {
-            gifDrawable.recycle();
-            gifDrawable = null;
-        }
         for (int a = 0; a < 3; a++) {
             if (radialProgressViews[a] != null) {
                 radialProgressViews[a].setBackgroundState(-1, false);
@@ -4604,17 +3714,11 @@ private void onDraw(Canvas canvas) {
             int width = (int) (bitmapWidth * scale);
             int height = (int) (bitmapHeight * scale);
 
-            if (gifDrawable != null) {
-                canvas.save();
-                gifDrawable.setAlpha((int) (alpha * 255));
-                gifDrawable.setBounds(-width / 2, -height / 2, width / 2, height / 2);
-                gifDrawable.draw(canvas);
-                canvas.restore();
-            } else {
-                centerImage.setAlpha(alpha);
-                centerImage.setImageCoords(-width / 2, -height / 2, width, height);
-                centerImage.draw(canvas);
-            }
+
+            centerImage.setAlpha(alpha);
+            centerImage.setImageCoords(-width / 2, -height / 2, width, height);
+            centerImage.draw(canvas);
+
             canvas.restore();
         }
         canvas.save();
@@ -4678,36 +3782,6 @@ public void run() {
     }
 
     private void onActionClick() {
-        if (currentMessageObject == null || currentFileNames[0] == null) {
-            return;
-        }
-        boolean loadFile = false;
-        if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
-            File f = new File(currentMessageObject.messageOwner.attachPath);
-            if (f.exists()) {
-                Intent intent = new Intent(Intent.ACTION_VIEW);
-                intent.setDataAndType(Uri.fromFile(f), "video/mp4");
-                parentActivity.startActivityForResult(intent, 500);
-            } else {
-                loadFile = true;
-            }
-        } else {
-            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-            if (cacheFile.exists()) {
-                Intent intent = new Intent(Intent.ACTION_VIEW);
-                intent.setDataAndType(Uri.fromFile(cacheFile), "video/mp4");
-                parentActivity.startActivityForResult(intent, 500);
-            } else {
-                loadFile = true;
-            }
-        }
-        if (loadFile) {
-            if (!FileLoader.getInstance().isLoadingFile(currentFileNames[0])) {
-                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.video, true);
-            } else {
-                FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.video);
-            }
-        }
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index d06f17a6d..68a233c1d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -50,11 +50,8 @@
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.ChatActivityEnterView;
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.PopupAudioView;
-import org.telegram.ui.Components.RecordStatusDrawable;
 import org.telegram.ui.Components.SizeNotifierRelativeLayout;
 import org.telegram.ui.Components.TypingDotsDrawable;
 
@@ -62,10 +59,10 @@
 import java.util.ArrayList;
 import java.util.Locale;
 
+// TODO ChatActivityEnterView was used here /// Why ?? Investigate.
 public class PopupNotificationActivity extends Activity implements NotificationCenter.NotificationCenterDelegate {
 
     private ActionBar actionBar;
-    private ChatActivityEnterView chatActivityEnterView;
     private BackupImageView avatarImageView;
     private TextView nameTextView;
     private TextView onlineTextView;
@@ -80,7 +77,6 @@
     private ArrayList<ViewGroup> audioViews = new ArrayList<>();
     private VelocityTracker velocityTracker = null;
     private TypingDotsDrawable typingDotsDrawable;
-    private RecordStatusDrawable recordStatusDrawable;
 
     private int classGuid;
     private TLRPC.User currentUser;
@@ -162,7 +158,6 @@ protected void onCreate(Bundle savedInstanceState) {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
 
         typingDotsDrawable = new TypingDotsDrawable();
-        recordStatusDrawable = new RecordStatusDrawable();
 
         SizeNotifierRelativeLayout contentView = new SizeNotifierRelativeLayout(this);
         setContentView(contentView);
@@ -186,57 +181,9 @@ protected void onCreate(Bundle savedInstanceState) {
         layoutParams3.addRule(RelativeLayout.CENTER_IN_PARENT);
         popupContainer.setLayoutParams(layoutParams3);
 
-        if (chatActivityEnterView != null) {
-            chatActivityEnterView.onDestroy();
-        }
-        chatActivityEnterView = new ChatActivityEnterView(this, contentView, null, false);
-        popupContainer.addView(chatActivityEnterView);
-        layoutParams3 = (RelativeLayout.LayoutParams) chatActivityEnterView.getLayoutParams();
         layoutParams3.width = LayoutHelper.MATCH_PARENT;
         layoutParams3.height = LayoutHelper.WRAP_CONTENT;
         layoutParams3.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
-        chatActivityEnterView.setLayoutParams(layoutParams3);
-        chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
-            @Override
-            public void onMessageSend(String message) {
-                if (currentMessageObject == null) {
-                    return;
-                }
-                if (currentMessageNum >= 0 && currentMessageNum < NotificationsController.getInstance().popupMessages.size()) {
-                    NotificationsController.getInstance().popupMessages.remove(currentMessageNum);
-                }
-                MessagesController.getInstance().markDialogAsRead(currentMessageObject.getDialogId(), currentMessageObject.getId(), Math.max(0, currentMessageObject.getId()), 0, currentMessageObject.messageOwner.date, true, true);
-                currentMessageObject = null;
-                getNewMessage();
-            }
-
-            @Override
-            public void onTextChanged(CharSequence text, boolean big) {
-
-            }
-
-            @Override
-            public void needSendTyping() {
-                if (currentMessageObject != null) {
-                    MessagesController.getInstance().sendTyping(currentMessageObject.getDialogId(), 0, classGuid);
-                }
-            }
-
-            @Override
-            public void onAttachButtonHidden() {
-
-            }
-
-            @Override
-            public void onAttachButtonShow() {
-
-            }
-
-            @Override
-            public void onWindowSizeChanged(int size) {
-
-            }
-        });
 
         messageContainer = new FrameLayoutTouch(this);
         popupContainer.addView(messageContainer, 0);
@@ -594,34 +541,6 @@ public void onClick(View v) {
                 String currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
                 imageView.setImage(currentUrl, null, null);
             }
-        } else if (messageObject.type == 2) {
-            PopupAudioView cell;
-            if (audioViews.size() > 0) {
-                view = audioViews.get(0);
-                audioViews.remove(0);
-                cell = (PopupAudioView)view.findViewWithTag(300);
-            } else {
-                view = new FrameLayoutAnimationListener(this);
-                view.addView(getLayoutInflater().inflate(R.layout.popup_audio_layout, null));
-                view.setTag(3);
-
-                view.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        openCurrentMessage();
-                    }
-                });
-
-                ViewGroup audioContainer = (ViewGroup)view.findViewById(R.id.audio_container);
-                cell = new PopupAudioView(this);
-                cell.setTag(300);
-                audioContainer.addView(cell);
-            }
-
-            cell.setMessageObject(messageObject);
-            if (MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
-                cell.downloadAudioIfNeed();
-            }
         } else {
             if (textViews.size() > 0) {
                 view = textViews.get(0);
@@ -803,7 +722,7 @@ private void getNewMessage() {
         }
 
         boolean found = false;
-        if ((currentMessageNum != 0 || chatActivityEnterView.hasText() || startedMoving) && currentMessageObject != null) {
+        if ((currentMessageNum != 0 || startedMoving) && currentMessageObject != null) {
             for (int a = 0; a < NotificationsController.getInstance().popupMessages.size(); a++) {
                 if (NotificationsController.getInstance().popupMessages.get(a).getId() == currentMessageObject.getId()) {
                     currentMessageNum = a;
@@ -856,7 +775,6 @@ private void updateInterfaceForCurrentMessage(int move) {
         currentChat = null;
         currentUser = null;
         long dialog_id = currentMessageObject.getDialogId();
-        chatActivityEnterView.setDialogId(dialog_id);
         if ((int)dialog_id != 0) {
             int lower_id = (int)dialog_id;
             if (lower_id > 0) {
@@ -964,11 +882,8 @@ private void setTypingAnimation(boolean start) {
                     onlineTextView.setCompoundDrawablesWithIntrinsicBounds(typingDotsDrawable, null, null, null);
                     onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
                     typingDotsDrawable.start();
-                    recordStatusDrawable.stop();
                 } else if (type == 1) {
-                    onlineTextView.setCompoundDrawablesWithIntrinsicBounds(recordStatusDrawable, null, null, null);
                     onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-                    recordStatusDrawable.start();
                     typingDotsDrawable.stop();
                 }
             } catch (Exception e) {
@@ -978,25 +893,17 @@ private void setTypingAnimation(boolean start) {
             onlineTextView.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
             onlineTextView.setCompoundDrawablePadding(0);
             typingDotsDrawable.stop();
-            recordStatusDrawable.stop();
         }
     }
 
     @Override
     public void onBackPressed() {
-        if (chatActivityEnterView.isEmojiPopupShowing()) {
-            chatActivityEnterView.hideEmojiPopup();
-            return;
-        }
         super.onBackPressed();
     }
 
     @Override
     protected void onResume() {
         super.onResume();
-        if (chatActivityEnterView != null) {
-            chatActivityEnterView.setFieldFocused(true);
-        }
         ConnectionsManager.getInstance().setAppPaused(false, false);
         fixLayout();
         checkAndUpdateAvatar();
@@ -1007,10 +914,6 @@ protected void onResume() {
     protected void onPause() {
         super.onPause();
         overridePendingTransition(0, 0);
-        if (chatActivityEnterView != null) {
-            chatActivityEnterView.hideEmojiPopup();
-            chatActivityEnterView.setFieldFocused(false);
-        }
         ConnectionsManager.getInstance().setAppPaused(true, false);
     }
 
@@ -1038,36 +941,6 @@ public void didReceivedNotification(int id, Object... args) {
                     updateSubtitle();
                 }
             }
-        } else if (id == NotificationCenter.audioDidReset) {
-            Integer mid = (Integer)args[0];
-            if (messageContainer != null) {
-                int count = messageContainer.getChildCount();
-                for (int a = 0; a < count; a++) {
-                    View view = messageContainer.getChildAt(a);
-                    if ((Integer)view.getTag() == 3) {
-                        PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
-                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
-                            cell.updateButtonState();
-                            break;
-                        }
-                    }
-                }
-            }
-        } else if (id == NotificationCenter.audioProgressDidChanged) {
-            Integer mid = (Integer)args[0];
-            if (messageContainer != null) {
-                int count = messageContainer.getChildCount();
-                for (int a = 0; a < count; a++) {
-                    View view = messageContainer.getChildAt(a);
-                    if ((Integer)view.getTag() == 3) {
-                        PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
-                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
-                            cell.updateProgress();
-                            break;
-                        }
-                    }
-                }
-            }
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (messageContainer != null) {
                 int count = messageContainer.getChildCount();
@@ -1110,9 +983,6 @@ protected void onFinish() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-        if (chatActivityEnterView != null) {
-            chatActivityEnterView.onDestroy();
-        }
         if (wakeLock.isHeld()) {
             wakeLock.release();
         }
