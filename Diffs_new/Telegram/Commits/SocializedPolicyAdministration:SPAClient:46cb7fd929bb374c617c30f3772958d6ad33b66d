diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 9790bc7b6..0106c72ea 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -79,7 +79,7 @@ android {
     }
 
     defaultConfig {
-        minSdkVersion 8
+        minSdkVersion 12
         targetSdkVersion 22
         versionCode 627
         versionName "3.2.2"
diff --git a/TMessagesProj/src/main/java/org/paillier/PaillierPublicKey.java b/TMessagesProj/src/main/java/org/paillier/PaillierPublicKey.java
new file mode 100644
index 000000000..82284d4af
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/paillier/PaillierPublicKey.java
@@ -0,0 +1,40 @@
+package org.paillier;
+
+import java.math.BigInteger;
+import java.util.Random;
+
+/**
+ * Created by gzq on 16-1-11.
+ */
+public class PaillierPublicKey {
+    private final BigInteger n;
+    private final BigInteger g;
+    private final BigInteger nSquared;
+    private final int bits;
+
+    public PaillierPublicKey(BigInteger n, BigInteger g) {
+        this.n = n;
+        this.g = g;
+        nSquared = n.pow(2);
+        bits = n.bitLength();
+    }
+
+    public BigInteger encrypt(BigInteger m) {
+        BigInteger r;
+        do {
+            r = new BigInteger(bits, new Random());
+        } while (r.compareTo(n) >= 0);
+
+        BigInteger result = g.modPow(m, nSquared);
+        BigInteger x = r.modPow(n, nSquared);
+
+        result = result.multiply(x);
+        result = result.mod(nSquared);
+
+        return result;
+    }
+
+    public BigInteger multiple(BigInteger m1, BigInteger m2) {
+        return m1.modPow(m2, nSquared);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
index 679347a19..ade699a07 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
@@ -10,6 +10,7 @@
     public static String pollingKeyManager = "http://10.131.1.38:8000/pollingKeyManager/";
     // POST method
     public static String sendSPARequest = "http://10.131.1.38:8000/getSPARequest/";
+    public static String sendSPAResponse = "http://10.131.1.38:8000/getSPAResponse/";
     public static String resultMergeServer = "http://10.131.1.38/results/";
     public static String SPA_PREFERENCE = "spaconfig";
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
index c83628751..5576addfa 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
@@ -1,10 +1,13 @@
 package org.telegram.messenger;
 
+import android.app.Activity;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.os.IBinder;
 import android.util.Log;
+import android.widget.Toast;
 
 import org.telegram.messenger.volley.Request;
 import org.telegram.messenger.volley.RequestQueue;
@@ -16,6 +19,8 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
 
 /**
  * Created by gzq on 15-11-24.
@@ -47,9 +52,19 @@ public void run() {
                     new Response.Listener<String>() {
                         @Override
                         public void onResponse(String response) {
-                            if (response.compareTo("ok") == 0) {
-                            } else {
+                            if (response.compareTo("ok") != 0) {
+                                CharSequence text = "Get an SPA request, please go to SPA setting to response it";
+                                int duration = Toast.LENGTH_SHORT;
+                                Toast toast = Toast.makeText(context, text, duration);
+                                toast.show();
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                Set<String> set = preferences.getStringSet("spa_request_poll_service", new TreeSet<String>());
+                                set.add(response);
+                                editor.putStringSet("spa_request_poll_service", set);
+                                editor.commit();
                                 Log.v("spa", "get keys: " + response);
+                            } else {
                             }
                         }
                     }, new Response.ErrorListener() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index ced4d6630..0482a1a23 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -464,7 +464,7 @@ public void onClick(View v) {
             ViewServer.get(this).addWindow(this);
         }*/
 
-        SPAPollingUtils.startPollingService(this, 5, SPAKeyManagePollingService.class, SPAKeyManagePollingService.ACTION);
+        SPAPollingUtils.startPollingService(this, 1, SPAKeyManagePollingService.class, SPAKeyManagePollingService.ACTION);
 
         handleIntent(getIntent(), false, savedInstanceState != null, false);
         needLayout();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
index 05720780f..c9642c194 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
@@ -17,15 +17,19 @@
 import android.widget.ListView;
 import android.widget.ProgressBar;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import org.json.JSONArray;
+import org.json.JSONException;
 import org.json.JSONObject;
+import org.paillier.PaillierPublicKey;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.SPAConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.volley.Request;
 import org.telegram.messenger.volley.RequestQueue;
 import org.telegram.messenger.volley.Response;
@@ -42,6 +46,7 @@
 import org.telegram.ui.Cells.UserCell;
 import org.telegram.ui.Components.LayoutHelper;
 
+import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
@@ -75,7 +80,7 @@
     // in order to get users' phone number for `sendSPARequest`
     private ArrayList<String[]> usersPhoneAndWeight = new ArrayList<>();
 
-    private final int leastNumberForSendSPARequest = 3;
+    private final int leastNumberForSendSPARequest = 1;
 
     private final static int invite_friends = 1;
 
@@ -162,8 +167,13 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
                     boolean containsLastSeen = preferences.contains("last_seen_setting");
                     boolean containsPasscodeLock = preferences.contains("passcode_lock_setting");
-                    if (usersSize >= leastNumberForSendSPARequest) {
-                        if (sendSPARequest(containsLastSeen, containsPasscodeLock, context)) {
+                    boolean containsAverage = preferences.contains("average_policy");
+                    boolean containsMinMax = preferences.contains("maximum_minimum_policy");
+                    if (usersSize >= leastNumberForSendSPARequest &&
+                            (containsLastSeen || containsPasscodeLock
+                            || containsAverage || containsMinMax)) {
+                        if (sendSPARequest(containsLastSeen, containsPasscodeLock,
+                                containsAverage, containsMinMax, context)) {
                             // TODO: 15-11-25 Toast success
                         } else {
                             // TODO: 15-11-25 Toast fail
@@ -217,27 +227,61 @@ public void onClick(DialogInterface dialogInterface, int i) {
         return fragmentView;
     }
 
-    private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscodeLock, Context context) {
+    private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscodeLock,
+                                   boolean containsAverage, boolean containsMinMax, final Context context) {
+        SharedPreferences preferences =
+                ApplicationLoader. applicationContext.
+                        getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+
         // generate json request
         RequestQueue queue = Volley.newRequestQueue(context);
-        final String sendContent;
-        JSONArray settings = new JSONArray();
+        ArrayList<String> settings = new ArrayList<>();
+        ArrayList<String> policies = new ArrayList<>();
+        ArrayList<String> respondentsId = new ArrayList<>();
+        ArrayList<String> respondentsWeight = new ArrayList<>();
+
         if (containsLastSeen) {
-            if (containsPasscodeLock) {
-                settings.put("last_seen_setting");
-                settings.put("passcode_lock_setting");
-            } else {
-                settings.put("last_seen_setting");
-            }
-        } else {
-            if (containsPasscodeLock) {
-                settings.put("passcode_lock_setting");
-            } else {
-                // cannot arrive here, guard by caller
-            }
+            settings.add("last_seen_setting");
+            policies.add(preferences.getString("last_seen_setting_policy", "MajorityPreferred"));
+        }
+        if (containsPasscodeLock) {
+            settings.add("passcode_lock_setting");
+            policies.add(preferences.getString("passcode_lock_setting_policy", "MajorityPreferred"));
+        }
+        if (containsAverage) {
+            settings.add("average");
+            policies.add("Average");
         }
-        JSONArray persons = new JSONArray(usersPhoneAndWeight);
-        sendContent = "[settings:" + settings.toString() + ",persons:" + persons.toString() + "]";
+        if (containsMinMax) {
+            settings.add("maximum_minimum_policy");
+            policies.add(preferences.getString("maximum_minimum_policy_policy", "MaximumValue"));
+        }
+        TLRPC.User user = UserConfig.getCurrentUser();
+        int respondentsSize = usersPhoneAndWeight.size();
+        String paillierN = preferences.getString("paillier_n", "1");
+        String paillierG = preferences.getString("paillier_g", "1");
+        String opeK = preferences.getString("ope_key", "1");
+        PaillierPublicKey pk = new PaillierPublicKey(new BigInteger(paillierN),
+                new BigInteger(paillierG));
+        for (int i = 0; i < respondentsSize; ++i) {
+            String[] cu = usersPhoneAndWeight.get(i);
+            respondentsId.add(cu[0]);
+            BigInteger w = pk.encrypt(new BigInteger(cu[1]));
+            respondentsWeight.add(w.toString());
+        }
+        final JSONObject sendC = new JSONObject();
+        try {
+            sendC.put("settings", new JSONArray(settings));
+            sendC.put("policies", new JSONArray(policies));
+            sendC.put("requester", user.phone);
+            sendC.put("paillier_g", paillierG);
+            sendC.put("paillier_n", paillierN);
+            sendC.put("ope_key", opeK);
+            sendC.put("respondents", new JSONArray(respondentsId));
+            sendC.put("weights", new JSONArray(respondentsWeight));
+        } catch (JSONException e) {}
+        Log.v("spa", sendC.toString());
+
         StringRequest stringRequest = new StringRequest(
                 Request.Method.POST,
                 SPAConfig.sendSPARequest,
@@ -245,21 +289,31 @@ private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscod
                     @Override
                     public void onResponse(String response) {
                         if (response.compareTo("ok") == 0) {
-                            // TODO: 15-11-25 Toast for success
+                            CharSequence text = "Send request successfully";
+                            int duration = Toast.LENGTH_SHORT;
+                            Toast toast = Toast.makeText(context, text, duration);
+                            toast.show();
                         } else {
-                            // TODO: 15-11-25 Toast for failure
+                            CharSequence text = "You have send request before";
+                            int duration = Toast.LENGTH_SHORT;
+                            Toast toast = Toast.makeText(context, text, duration);
+                            toast.show();
                         }
                     }
                 },
                 new Response.ErrorListener() {
                     @Override
                     public void onErrorResponse(VolleyError error) {
+                        CharSequence text = "Cannot connect server";
+                        int duration = Toast.LENGTH_SHORT;
+                        Toast toast = Toast.makeText(context, text, duration);
+                        toast.show();
                         Log.v("SPA", "SPA friend list activity cannot connect keymanager!");
                     }
                 }) {
             protected Map<String, String> getParams() {
                 Map<String, String> params = new HashMap<>();
-                params.put("content", sendContent);
+                params.put("content", sendC.toString());
                 return params;
             }
         };
@@ -349,7 +403,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     view = new TextSettingsCell(mContext);
                     view.setBackgroundColor(0xffffffff);
                     TextSettingsCell textCell = (TextSettingsCell) view;
-                    textCell.setText(LocaleController.getString("SPASendRequest", R.string.SPASendRequest), true);
+                    textCell.setText(LocaleController.getString("SPASendRequest", R.string.SPAReceivedRequest), true);
                 }
             }
             return view;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAReceivedSPARequest.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAReceivedSPARequest.java
new file mode 100644
index 000000000..43b0aba13
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAReceivedSPARequest.java
@@ -0,0 +1,190 @@
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.SPAConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.Iterator;
+import java.util.Set;
+import java.util.TreeSet;
+
+/**
+ * Created by gzq on 16-1-12.
+ */
+public class SPAReceivedSPARequest extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listAdapter;
+    int listSize = 0;
+    String[] requests;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+        Set<String> set = preferences.getStringSet("spa_request_poll_service", new TreeSet<String>());
+        listSize = set.size();
+        requests = new String[listSize];
+        int i = 0;
+        Iterator<String> iterator = set.iterator();
+        while (iterator.hasNext()) {
+            requests[i] = iterator.next();
+        }
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.spaSettings);
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+
+        if (id == NotificationCenter.spaSettings) {
+            if (listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("ReceivedSPARequest", R.string.SPAReceivedRequest));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+
+        ListView listView = new ListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDrawSelectorOnTop(true);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                Bundle args = new Bundle();
+                args.putString("request", requests[i]);
+                SPARequest fragment = new SPARequest(args);
+                presentFragment(fragment);
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i < listSize;
+        }
+
+        @Override
+        public int getCount() {
+            return listSize;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (view == null) {
+                view = new TextSettingsCell(mContext);
+                view.setBackgroundColor(0xffffffff);
+            }
+            TextSettingsCell textCell = (TextSettingsCell) view;
+
+            String[] request = requests[i].split(" ");
+            String userId = request[0];
+            textCell.setText("request from: " + userId, true);
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java b/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
new file mode 100644
index 000000000..43c4591d1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
@@ -0,0 +1,339 @@
+package org.telegram.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import org.paillier.PaillierPublicKey;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.SPAConfig;
+import org.telegram.messenger.volley.Request;
+import org.telegram.messenger.volley.RequestQueue;
+import org.telegram.messenger.volley.Response;
+import org.telegram.messenger.volley.VolleyError;
+import org.telegram.messenger.volley.toolbox.StringRequest;
+import org.telegram.messenger.volley.toolbox.Volley;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberPicker;
+
+import java.math.BigInteger;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by gzq on 16-1-12.
+ */
+public class SPARequest extends BaseFragment {
+
+    private ListAdapter listAdapter;
+    private String[] request;
+    private String[] settings;
+    private int[] settingsValues;
+    private boolean[] clickValues;
+    private String paillier_n;
+    private String paillier_g;
+    private String ope_key;
+    private String requester;
+    private String weight;
+    private int settingSize;
+
+    public SPARequest(Bundle args) {
+        super(args);
+    }
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        if (arguments != null) {
+            request = arguments.getString("request", "").split(" ");
+            requester = request[0];
+            weight = request[1];
+            paillier_n = request[2];
+            paillier_g = request[3];
+            ope_key = request[4];
+            settings = request[5].split(",");
+            settingSize = settings.length;
+            settingsValues = new int[settingSize];
+            clickValues = new boolean[settingSize];
+        } else {}
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+    @Override
+    public View createView(final Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("SPARequest", R.string.SPAReceivedRequest));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+
+        ListView listView = new ListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDrawSelectorOnTop(true);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if (i < 0 || i > settingSize || getParentActivity() == null) {
+                    return;
+                }
+                if (i < settingSize) {
+                    String setting = settings[i];
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle("Set value");
+                    if (setting.compareTo("last_seen_setting") == 0) {
+                        CharSequence[] items = new CharSequence[]{"Everybody", "My Contacts", "Nobody"};
+
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int j) {
+                                // 001, 010, 100 for "Everybody", "My Contacts", "Nobody" respectively
+                                settingsValues[i] = 0x1 << j;
+                                clickValues[i] = true;
+                            }
+                        });
+                        showDialog(builder.create());
+                    } else if (setting.compareTo("passcode_lock_setting") == 0) {
+                        CharSequence[] items = new CharSequence[]{"on", "off"};
+
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int j) {
+                                // 01, 10 for "on", "off" respectively
+                                settingsValues[i] = 0x1 << j;
+                                clickValues[i] = true;
+                            }
+                        });
+                        showDialog(builder.create());
+
+                    } else if (setting.compareTo("average") == 0 || setting.compareTo("maximum_minimum_policy") == 0) {
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        numberPicker.setMinValue(10);
+                        numberPicker.setMaxValue(30);
+                        numberPicker.setValue(MessagesController.getInstance().fontSize);
+                        builder.setView(numberPicker);
+
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                settingsValues[i] = numberPicker.getValue();
+                                clickValues[i] = true;
+                            }
+                        });
+                        showDialog(builder.create());
+                    }
+                } else if (i == settingSize) {
+                    for (int j = 0; j < settingSize; ++j) {
+                        if (!clickValues[j]) {
+                            return;
+                        }
+                    }
+                    String[] values = new String[settingSize];
+                    PaillierPublicKey paillier = new PaillierPublicKey(new BigInteger(paillier_n),
+                            new BigInteger(paillier_g));
+                    final String req;
+
+                    for (int j = 0; j < settingSize; ++j) {
+                        String setting = settings[j];
+                        if (setting.compareTo("last_seen_setting") == 0) {
+                            if (settingsValues[j] == 0x001) {
+                                values[j] = paillier.encrypt(new BigInteger("0")).toString()
+                                        + " " + paillier.encrypt(new BigInteger("0")).toString()
+                                        + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString();
+                            } else if (settingsValues[j] == 0x010) {
+                                values[j] = paillier.encrypt(new BigInteger("0")).toString()
+                                        + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
+                                        + " " + paillier.encrypt(new BigInteger("0")).toString();
+                            } else if (settingsValues[j] == 0x100) {
+                                values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
+                                        + " " + paillier.encrypt(new BigInteger("0")).toString()
+                                        + " " + paillier.encrypt(new BigInteger("0")).toString();
+                            }
+                        } else if (setting.compareTo("passcode_lock_setting") == 0) {
+                            if (settingsValues[j] == 0x01) {
+                                values[j] = paillier.encrypt(new BigInteger("0")).toString()
+                                        + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString();
+                            } else if (settingsValues[j] == 0x10) {
+                                values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
+                                        + " " + paillier.encrypt(new BigInteger("0")).toString();
+                            }
+                        } else if (setting.compareTo("average") == 0) {
+                            values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("" +settingsValues[j])).toString();
+                        } else if (setting.compareTo("maximum_minimum_policy") == 0) {
+                            values[j] = paillier.encrypt(new BigInteger("" + settingsValues[j])).toString();
+                        }
+                    }
+
+                    String localReq = values[0];
+                    for (int j = 1; j < settingSize; ++j) {
+                        localReq = localReq + "," + values[j];
+                    }
+                    req = localReq;
+
+                    StringRequest stringRequest = new StringRequest(
+                            Request.Method.POST,
+                            SPAConfig.sendSPAResponse,
+                            new Response.Listener<String>() {
+                                @Override
+                                public void onResponse(String response) {
+                                    if (response.compareTo("ok") == 0) {
+                                        CharSequence text = "Send request successfully";
+                                        int duration = Toast.LENGTH_SHORT;
+                                        Toast toast = Toast.makeText(context, text, duration);
+                                        toast.show();
+                                    } else {
+                                        CharSequence text = "You have send request before";
+                                        int duration = Toast.LENGTH_SHORT;
+                                        Toast toast = Toast.makeText(context, text, duration);
+                                        toast.show();
+                                    }
+                                }
+                            },
+                            new Response.ErrorListener() {
+                                @Override
+                                public void onErrorResponse(VolleyError error) {
+                                    CharSequence text = "Cannot connect server";
+                                    int duration = Toast.LENGTH_SHORT;
+                                    Toast toast = Toast.makeText(context, text, duration);
+                                    toast.show();
+                                    Log.v("SPA", "SPA friend list activity cannot connect keymanager!");
+                                }
+                            }) {
+                        protected Map<String, String> getParams() {
+                            Map<String, String> params = new HashMap<>();
+                            params.put("values", req);
+                            params.put("requester", requester);
+                            return params;
+                        }
+                    };
+                    RequestQueue queue = Volley.newRequestQueue(context);
+                    queue.add(stringRequest);
+                }
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i <= settingSize;
+        }
+
+        @Override
+        public int getCount() {
+            return settingSize + 1;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+
+                String setting = settings[i];
+                textCell.setText(setting, true);
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+
+                textCell.setText("Send response", true);
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position < settingSize) {
+                return 0;
+            } else {
+                return 1;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java
index 49cdb3c18..1770e1ea6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java
@@ -43,6 +43,10 @@
     private int passcodeLock;
     private int securityDetailRow;
     private int rowCount;
+    private int testSectionRow;
+    private int average;
+    private int minMax;
+    private int testDetailedRow;
 
     private final int LAST_SEEN = 0;
     private final int PASSCODE_LOCK = 1;
@@ -58,6 +62,10 @@ public boolean onFragmentCreate() {
         securitySectionRow = rowCount++;
         passcodeLock = rowCount++;
         securityDetailRow = rowCount++;
+        testSectionRow = rowCount++;
+        average = rowCount++;
+        minMax = rowCount++;
+        testDetailedRow = rowCount++;
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
 
@@ -120,6 +128,24 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(!passcode_setting);
                     }
+                } else if (i == average) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                    boolean passcode_setting = preferences.getBoolean("average_policy", false);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("average_policy", !passcode_setting);
+                    editor.commit();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!passcode_setting);
+                    }
+                } else if (i == minMax) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                    boolean passcode_setting = preferences.getBoolean("maximum_minimum_policy", false);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("maximum_minimum_policy", !passcode_setting);
+                    editor.commit();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!passcode_setting);
+                    }
                 }
             }
         });
@@ -133,9 +159,6 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                     CharSequence[] items = new CharSequence[]{
                             LocaleController.getString("MajorityPreferred", R.string.MajorityPreferred),
                             LocaleController.getString("MinorityPreferred", R.string.MinorityPreferred),
-                            LocaleController.getString("MaximumValue", R.string.MaximumValue),
-                            LocaleController.getString("MinimumValue", R.string.MinimumValue),
-                            LocaleController.getString("Average", R.string.Average)
                     };
                     final int selectItem = i;
                     builder.setItems(items, new DialogInterface.OnClickListener() {
@@ -144,28 +167,46 @@ public void onClick(DialogInterface dialogInterface, int j) {
                             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
                             SharedPreferences.Editor editor = preferences.edit();
                             String selectOne;
-                            if (selectItem == 0) {
-                                selectOne = "LAST_SEEN";
+                            if (selectItem == passcodeLock) {
+                                selectOne = "passcode_lock_setting_policy";
+                            } else if (selectItem == lastSeenRow) {
+                                selectOne = "last_seen_setting_policy";
                             } else {
-                                selectOne = "PASSCODE_LOCK";
+                                return;
                             }
                             if (j == 0) {
                                 editor.putString(selectOne, "MajorityPreferred");
                             } else if (j == 1) {
                                 editor.putString(selectOne, "MinorityPreferred");
-                            } else if (j == 2) {
+                            }
+                            editor.commit();
+                        }
+                    });
+                    showDialog(builder.create());
+                } else if (i == minMax) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                    CharSequence[] items = new CharSequence[]{
+                            LocaleController.getString("MaximumValue", R.string.MaximumValue),
+                            LocaleController.getString("MinimumValue", R.string.MinimumValue)
+                    };
+                    builder.setItems(items, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int j) {
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                            SharedPreferences.Editor editor = preferences.edit();
+                            String selectOne = "maximum_minimum_policy_policy";
+                            if (j == 0) {
                                 editor.putString(selectOne, "MaximumValue");
-                            } else if (j == 3) {
+                            } else if (j == 1) {
                                 editor.putString(selectOne, "MinimumValue");
-                            } else if (j == 4) {
-                                editor.putString(selectOne, "Average");
                             }
                             editor.commit();
                         }
                     });
                     showDialog(builder.create());
                 } else {
-                    // pass
+                    // do nothing
                 }
 
                 return true;
@@ -207,7 +248,9 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == privacyDetailRow || i == privacySectionRow || i == lastSeenRow || i == securityDetailRow || i == securitySectionRow || i == passcodeLock;
+            return i == privacyDetailRow || i == privacySectionRow || i == lastSeenRow
+                    || i == securityDetailRow || i == securitySectionRow || i == passcodeLock
+                    || i == testSectionRow || i == average || i == minMax || i == testDetailedRow;
         }
 
         @Override
@@ -243,7 +286,11 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 if (i == lastSeenRow) {
                     textCell.setTextAndCheck(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), preferences.getBoolean("last_seen_setting", false), false);
                 } else if (i == passcodeLock) {
-                    textCell.setTextAndCheck(LocaleController.getString("Passcode", R.string.Passcode), preferences.getBoolean("passcode_setting", false), false);
+                    textCell.setTextAndCheck(LocaleController.getString("Passcode", R.string.Passcode), preferences.getBoolean("passcode_lock_setting", false), false);
+                } else if (i == average) {
+                    textCell.setTextAndCheck("Average Policy", preferences.getBoolean("average_policy", false), false);
+                } else if (i == minMax) {
+                    textCell.setTextAndCheck("Maximum/Minimum Policy", preferences.getBoolean("maximum_minimum_policy", false), false);
                 }
             } else if (type == 1) {
                 if (view == null) {
@@ -255,6 +302,9 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else if (i == securityDetailRow) {
                     ((TextInfoPrivacyCell) view).setText(LocaleController.getString("SPASecurityDetailHelp", R.string.SPASecurityDetailHelp));
                     view.setBackgroundResource(R.drawable.greydivider_bottom);
+                } else if (i == testDetailedRow) {
+                    ((TextInfoPrivacyCell) view).setText("Test Average policy and Maximum/Minimum policy. Long tap for policy type");
+                    view.setBackgroundResource(R.drawable.greydivider_bottom);
                 }
             } else if (type == 2) {
                 if (view == null) {
@@ -265,6 +315,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     ((HeaderCell) view).setText(LocaleController.getString("PrivacyTitle", R.string.PrivacyTitle));
                 } else if (i == securitySectionRow) {
                     ((HeaderCell) view).setText(LocaleController.getString("SecurityTitle", R.string.SecurityTitle));
+                } else if (i == testSectionRow) {
+                    ((HeaderCell) view).setText("Test");
                 }
             }
             return view;
@@ -272,11 +324,14 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         @Override
         public int getItemViewType(int position) {
-            if (position == lastSeenRow || position == passcodeLock) {
+            if (position == lastSeenRow || position == passcodeLock
+                    || position == average || position == minMax) {
                 return 0;
-            } else if (position == privacyDetailRow || position == securityDetailRow) {
+            } else if (position == privacyDetailRow || position == securityDetailRow
+                    || position == testDetailedRow) {
                 return 1;
-            } else if (position == privacySectionRow || position == securitySectionRow)  {
+            } else if (position == privacySectionRow || position == securitySectionRow
+                    || position == testSectionRow)  {
                 return 2;
             }
             return 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
index f30340e4c..f3dac67b7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
@@ -43,7 +43,7 @@
     private int spaRequstRow;
     private int selectPrivacyItemsRow;
     private int friendsListRow;
-    private int sendSpaRequstRow;
+    private int receivedSpaRequstRow;
     private int spaRequstDetailRow;
     private int spaResultRow;
     private int spaResultRow2;
@@ -60,7 +60,7 @@ public boolean onFragmentCreate() {
         spaRequstRow = rowCount++;
         selectPrivacyItemsRow = rowCount++;
         friendsListRow = rowCount++;
-        sendSpaRequstRow = rowCount++;
+        receivedSpaRequstRow = rowCount++;
         spaRequstDetailRow = rowCount++;
         spaResultRow = rowCount++;
         spaResultRow2 = rowCount++;
@@ -154,15 +154,15 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                 } else if (i == friendsListRow) {
                     Log.v("SPA", "friends list");
                     presentFragment(new SPAFriendListActivity());
-                } else if (i == sendSpaRequstRow) {
-                    Log.v("SPA", "send spa request");
+                } else if (i == receivedSpaRequstRow) {
+                    Log.v("SPA", "received spa request");
+                    presentFragment(new SPAReceivedSPARequest());
                 } else if (i == spaResultRow2) {
                     Log.v("SPA", "spa result");
                 }
             }
         });
 
-
         return fragmentView;
     }
 
@@ -197,7 +197,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == spaRequstRow || i == selectPrivacyItemsRow || i == friendsListRow || i == spaRequstDetailRow || i == sendSpaRequstRow || i == spaResultRow || i == spaResultRow2 || i == spaResultDetailRow;
+            return i == spaRequstRow || i == selectPrivacyItemsRow || i == friendsListRow || i == spaRequstDetailRow || i == receivedSpaRequstRow || i == spaResultRow || i == spaResultRow2 || i == spaResultDetailRow;
         }
 
         @Override
@@ -233,8 +233,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setText(LocaleController.getString("SPASelectItems", R.string.SPASelectItems), true);
                 } else if (i == friendsListRow) {
                     textCell.setText(LocaleController.getString("SPAFriendsList", R.string.SPAFriendsList), true);
-                } else if (i == sendSpaRequstRow) {
-                    textCell.setText(LocaleController.getString("SPASendRequest", R.string.SPASendRequest), true);
+                } else if (i == receivedSpaRequstRow) {
+                    textCell.setText(LocaleController.getString("SPAReceivedRequest", R.string.SPAReceivedRequest), true);
                 } else if (i == spaResultRow2) {
                     textCell.setText(LocaleController.getString("SPAResult", R.string.SPAResult), true);
                 }
@@ -265,7 +265,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         @Override
         public int getItemViewType(int position) {
-            if (position == selectPrivacyItemsRow || position == friendsListRow || position == sendSpaRequstRow || position == spaResultRow2) {
+            if (position == selectPrivacyItemsRow || position == friendsListRow || position == receivedSpaRequstRow || position == spaResultRow2) {
                 return 0;
             } else if (position == spaRequstDetailRow || position == spaResultDetailRow) {
                 return 1;
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index d87f5fed2..8aff2a97a 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -474,10 +474,10 @@
     <string name="SPAResultTitle">SPA Result</string>
     <string name="SPASelectItems">Select SPA Items</string>
     <string name="SPAFriendsList">Friends List</string>
-    <string name="SPASendRequest">Send SPA Requests</string>
+    <string name="SPAReceivedRequest">Received SPA Requests</string>
     <string name="SPAResult">SPA Result</string>
-    <string name="SPAPrivacyDetailHelp">Choose privacy settings being proposed by SPA.</string>
-    <string name="SPASecurityDetailHelp">Choose security settings being proposed by SPA.</string>
+    <string name="SPAPrivacyDetailHelp">Choose privacy settings being proposed by SPA. Long tap for policy type.</string>
+    <string name="SPASecurityDetailHelp">Choose security settings being proposed by SPA. Long tap for policy type.</string>
     <string name="CancelUserText">Tap and hold on user to deselect.</string>
     <string name="NoSelected">No Selected User yet</string>
     <string name="Deselect">Deselect</string>
