diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 9bbefe8e4..56a25128c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -25,6 +25,7 @@
 import android.os.Environment;
 import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
+import android.widget.Toast;
 
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
@@ -1109,6 +1110,8 @@ public void run() {
                                 }
                             }
                         }
+                        //todo 在此解出隐写消息,并显示.
+                        extractMsg(finalFile);
                         ImageLoader.this.fileDidLoaded(location, finalFile, type);
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidLoaded, location);
                     }
@@ -1176,6 +1179,25 @@ public void run() {
         FileLoader.getInstance().setMediaDirs(createMediaPaths());
     }
 
+    /**
+     * 检测图像是否含有消息，提取并显示.
+     */
+    private void extractMsg(File file) {
+        if(!file.getName().endsWith(".jpg"))
+            return;
+        if(Utilities.isStego("",file.getAbsolutePath()))
+        {
+            ByteBuffer ret=Utilities.lsbExtract("", file.getAbsolutePath());
+            if(ret!=null) {
+                byte[] extract = new byte[ret.capacity()];
+                ret.get(extract);
+                String msg = new String(extract);
+                Toast.makeText(ApplicationLoader.applicationContext, msg, Toast.LENGTH_LONG).show();
+            }
+        }
+
+    }
+
     private HashMap<Integer, File> createMediaPaths() {
         HashMap<Integer, File> mediaDirs = new HashMap<>();
         File cachePath = AndroidUtilities.getCacheDir();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 01b18bb9a..5e712b036 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -1500,7 +1500,7 @@ public void run() {
             }
         }
     }
-
+//貌似是加载已读和未读消息的地方.
     public void loadMessages(final long dialog_id, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, final int load_type, final int last_message_id, final int first_message_id, final boolean allowCache) {
         int lower_part = (int) dialog_id;
         if (fromCache || lower_part == 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index b664ffdd6..ad9955f8f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -1966,7 +1966,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
             }, true, RPCRequest.RPCRequestClassGeneric);
         }
     }
-//todo mark
+//todo mark 处理下层数据.
     void processMessage(TLObject message, long messageId, int messageSeqNo, long messageSalt, TcpConnection connection, long innerMsgId, long containerMessageId) {
         if (message == null) {
             FileLog.e("tmessages", "message is null");
@@ -2630,7 +2630,7 @@ public void run() {
             }
         }
     }
-//todo tcp connection received data
+//todo tcp connection received data 处理接收到的数据.
     @Override
     public void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length) {
         if (connection.getDatacenterId() == currentDatacenterId && (connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
@@ -2671,6 +2671,7 @@ public void run() {
                 connection.addProcessedMessageId(messageId);
             }
         } else {
+            //加密数据.
             if (datacenter.authKeyId == 0 || keyId != datacenter.authKeyId) {
                 FileLog.e("tmessages", "Error: invalid auth key id " + connection);
                 datacenter.switchTo443Port();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
index 217e63fb1..0dd434010 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
@@ -374,7 +374,7 @@ public void run() {
             }
         });
     }
-
+//处理底层的数据.
     private void readData(ByteBuffer buffer) throws Exception {
         buffer.order(ByteOrder.LITTLE_ENDIAN);
         buffer.rewind();
@@ -529,7 +529,7 @@ public void run() {
             toProceed.put(buffer);
             buffer.limit(old);
             toProceed.rewind();
-
+//将数据交到上层.
             if (delegate != null) {
                 final TcpConnectionDelegate finalDelegate = delegate;
                 Utilities.stageQueue.postRunnable(new Runnable() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index bca761556..1fbbc579f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -554,15 +554,18 @@ public void onClick(View view) {
     }
 
     private void sendStegoMsg() {
-        String inputPath = "/mnt/sdcard/DCIM/Camera/cover1.jpg";
+//        String inputPath = "/mnt/sdcard/DCIM/Camera/cover1.jpg";
         String outputPath = "/mnt/sdcard/DCIM/Camera/stego1.jpg";
-        byte[] msg = "hello".getBytes();
+        String inputPath="/mnt/sdcard/DCIM/Camera/desk.jpg";
+
+        byte[] msg = messageEditText.getText().toString().getBytes();
         ByteBuffer bb = ByteBuffer.allocateDirect(msg.length);
         bb.put(msg);
         Utilities.lsbEmbed(bb, "", inputPath, outputPath, bb.capacity());
         ArrayList<String> files = new ArrayList<String>();
         files.add(outputPath);
         SendMessagesHelper.prepareSendingDocuments(files, files, null, null, dialog_id, replyingMessageObject);
+        messageEditText.setText("");
 //        SendMessagesHelper.prepareSendingPhoto(path, null, dialog_id, replyingMessageObject, null);
     }
 
