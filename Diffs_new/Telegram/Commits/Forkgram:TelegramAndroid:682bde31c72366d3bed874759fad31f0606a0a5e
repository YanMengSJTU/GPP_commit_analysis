diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 93e337e25..282d2b361 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -867,6 +867,16 @@ public boolean onItemClick(View view, int position, float x, float y) {
 
                     final boolean hasUnread = dialog.unread_count != 0 || dialog.unread_mark;
 
+                    //Mute item
+                    boolean muted = MessagesController.getInstance(currentAccount).isDialogMuted(selectedDialog);
+                    String muteString = "";
+                    if (muted) {
+                        muteString = LocaleController.getString("UnmuteNotifications", R.string.UnmuteNotifications);
+                    } else {
+                        muteString = LocaleController.getString("MuteNotifications", R.string.MuteNotifications);
+                    }
+                    /////
+
                     if (DialogObject.isChannel(dialog)) {
                         final TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(-lower_id);
                         CharSequence items[];
@@ -874,26 +884,30 @@ public boolean onItemClick(View view, int position, float x, float y) {
                                 dialog.pinned ? R.drawable.chats_unpin : R.drawable.chats_pin,
                                 R.drawable.chats_clear,
                                 hasUnread ? R.drawable.menu_read : R.drawable.menu_unread,
-                                R.drawable.chats_leave
+                                R.drawable.chats_leave,
+                                muted ? R.drawable.notify_members_off : R.drawable.notify_members_on
                         };
                         if (MessagesController.getInstance(currentAccount).isProxyDialog(dialog.id)) {
                             items = new CharSequence[]{
                                     null,
                                     LocaleController.getString("ClearHistoryCache", R.string.ClearHistoryCache),
                                     hasUnread ? LocaleController.getString("MarkAsRead", R.string.MarkAsRead) : LocaleController.getString("MarkAsUnread", R.string.MarkAsUnread),
-                                    null};
+                                    null,
+                                    muteString};
                         } else if (chat != null && chat.megagroup) {
                             items = new CharSequence[]{
                                     dialog.pinned || MessagesController.getInstance(currentAccount).canPinDialog(false) ? (dialog.pinned ? LocaleController.getString("UnpinFromTop", R.string.UnpinFromTop) : LocaleController.getString("PinToTop", R.string.PinToTop)) : null,
                                     TextUtils.isEmpty(chat.username) ? LocaleController.getString("ClearHistory", R.string.ClearHistory) : LocaleController.getString("ClearHistoryCache", R.string.ClearHistoryCache),
                                     hasUnread ? LocaleController.getString("MarkAsRead", R.string.MarkAsRead) : LocaleController.getString("MarkAsUnread", R.string.MarkAsUnread),
-                                    LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu)};
+                                    LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu),
+                                    muteString};
                         } else {
                             items = new CharSequence[]{
                                     dialog.pinned || MessagesController.getInstance(currentAccount).canPinDialog(false) ? (dialog.pinned ? LocaleController.getString("UnpinFromTop", R.string.UnpinFromTop) : LocaleController.getString("PinToTop", R.string.PinToTop)) : null,
                                     LocaleController.getString("ClearHistoryCache", R.string.ClearHistoryCache),
                                     hasUnread ? LocaleController.getString("MarkAsRead", R.string.MarkAsRead) : LocaleController.getString("MarkAsUnread", R.string.MarkAsUnread),
-                                    LocaleController.getString("LeaveChannelMenu", R.string.LeaveChannelMenu)};
+                                    LocaleController.getString("LeaveChannelMenu", R.string.LeaveChannelMenu),
+                                    muteString};
                         }
                         builder.setItems(items, icons, (d, which) -> {
                             if (which == 0) {
@@ -908,6 +922,8 @@ public boolean onItemClick(View view, int position, float x, float y) {
                                 } else {
                                     MessagesController.getInstance(currentAccount).markDialogAsUnread(selectedDialog, null, 0);
                                 }
+                            } else if (which == 4) {
+                                toggleMute(selectedDialog);
                             } else {
                                 AlertDialog.Builder builder1 = new AlertDialog.Builder(getParentActivity());
                                 builder1.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -968,13 +984,15 @@ public boolean onItemClick(View view, int position, float x, float y) {
                                 LocaleController.getString("ClearHistory", R.string.ClearHistory),
                                 hasUnread ? LocaleController.getString("MarkAsRead", R.string.MarkAsRead) : LocaleController.getString("MarkAsUnread", R.string.MarkAsUnread),
                                 isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : isBot ? LocaleController.getString("DeleteAndStop", R.string.DeleteAndStop) : LocaleController.getString("Delete", R.string.Delete),
-                                isAlreadyHided ? removeHideMode : addHideMode
+                                isAlreadyHided ? removeHideMode : addHideMode,
+                                muteString
                         }, new int[]{
                                 dialog.pinned ? R.drawable.chats_unpin : R.drawable.chats_pin,
                                 R.drawable.chats_clear,
                                 hasUnread ? R.drawable.menu_read : R.drawable.menu_unread,
                                 isChat ? R.drawable.chats_leave : R.drawable.chats_delete,
-                                R.drawable.chats_clear
+                                R.drawable.chats_clear,
+                                muted ? R.drawable.notify_members_off : R.drawable.notify_members_on
                         }, (d, which) -> {
                             if (which == 0) {
                                 if (MessagesController.getInstance(currentAccount).pinDialog(selectedDialog, !pinned, null, 0) && !pinned) {
@@ -997,6 +1015,8 @@ public boolean onItemClick(View view, int position, float x, float y) {
                                 SharedPreferences.Editor editor = MessagesController.getGlobalMainSettings().edit();
                                 editor.putStringSet("setOfDialogsToHide", setStr);
                                 editor.commit();
+                            } else if (which == 5) {
+                                toggleMute(selectedDialog);
                             } else {
                                 AlertDialog.Builder builder12 = new AlertDialog.Builder(getParentActivity());
                                 builder12.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -1526,6 +1546,24 @@ public void onPause() {
         }
     }
 
+    private void toggleMute(long dialog_id) {
+        boolean muted = MessagesController.getInstance(currentAccount).isDialogMuted(dialog_id);
+        if (!muted) {
+            showDialog(AlertsCreator.createMuteAlert(getParentActivity(), dialog_id));
+        } else {
+            SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.putInt("notify2_" + dialog_id, 0);
+            org.telegram.messenger.MessagesStorage.getInstance(currentAccount).setDialogFlags(dialog_id, 0);
+            editor.commit();
+            TLRPC.TL_dialog dialog = MessagesController.getInstance(currentAccount).dialogs_dict.get(dialog_id);
+            if (dialog != null) {
+                dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
+            }
+            org.telegram.messenger.NotificationsController.getInstance(currentAccount).updateServerNotificationsSettings(dialog_id);
+        }
+    }
+
     private void checkUnreadCount(boolean animated) {
         if (!BuildVars.DEBUG_PRIVATE_VERSION) {
             return;
