diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 1c79b9a8c..0f535a81d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -17,8 +17,10 @@
 import android.content.SharedPreferences;
 import android.database.ContentObserver;
 import android.database.Cursor;
+import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Point;
+import android.media.ExifInterface;
 import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.Build;
@@ -26,33 +28,54 @@
 import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
 
+import com.github.davidmoten.rtree.Entry;
+import com.github.davidmoten.rtree.RTree;
+import com.github.davidmoten.rtree.geometry.Geometries;
+import com.github.davidmoten.rtree.geometry.Geometry;
+
 import ru.aragats.wgo.ApplicationLoader;
 import ru.aragats.wgo.R;
+import ru.aragats.wgo.dto.Image;
+import ru.aragats.wgo.dto.Post;
 
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.UserConfig;
 import org.telegram.utils.Constants;
+import org.telegram.utils.StringUtils;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.FilenameFilter;
+import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.HashMap;
+import java.util.Locale;
+import java.util.UUID;
 
 public class MediaController implements NotificationCenter.NotificationCenterDelegate {
 
+    private static RTree<Post, Geometry> rTree;
+
 
     public static int[] readArgs = new int[3];
 
     public interface FileDownloadProgressListener {
         void onFailedDownload(String fileName);
+
         void onSuccessDownload(String fileName);
+
         void onProgressDownload(String fileName, float progress);
+
         void onProgressUpload(String fileName, float progress, boolean isEncrypted);
+
         int getObserverTag();
     }
 
@@ -182,6 +205,7 @@ public void onChange(boolean selfChange) {
     private InternalObserver internalObserver = null;
     private int startObserverToken = 0;
     private StopMediaObserverRunnable stopMediaObserverRunnable = null;
+
     private final class StopMediaObserverRunnable implements Runnable {
         public int currentObserverToken = 0;
 
@@ -207,9 +231,11 @@ public void run() {
             }
         }
     }
+
     private String[] mediaProjections = null;
 
     private static volatile MediaController Instance = null;
+
     public static MediaController getInstance() {
         MediaController localInstance = Instance;
         if (localInstance == null) {
@@ -252,7 +278,7 @@ public void onReceive(Context context, Intent intent) {
         }
 
         if (Build.VERSION.SDK_INT >= 16) {
-            mediaProjections = new String[] {
+            mediaProjections = new String[]{
                     MediaStore.Images.ImageColumns.DATA,
                     MediaStore.Images.ImageColumns.DISPLAY_NAME,
                     MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
@@ -262,7 +288,7 @@ public void onReceive(Context context, Intent intent) {
                     MediaStore.Images.ImageColumns.HEIGHT
             };
         } else {
-            mediaProjections = new String[] {
+            mediaProjections = new String[]{
                     MediaStore.Images.ImageColumns.DATA,
                     MediaStore.Images.ImageColumns.DISPLAY_NAME,
                     MediaStore.Images.ImageColumns.BUCKET_DISPLAY_NAME,
@@ -310,7 +336,7 @@ public boolean canDownloadMedia(int type) {
     private int getCurrentDownloadMask() {
         if (ConnectionsManager.isConnectedToWiFi()) {
             return wifiDownloadMask;
-        } else if(ConnectionsManager.isRoaming()) {
+        } else if (ConnectionsManager.isRoaming()) {
             return roamingDownloadMask;
         } else {
             return mobileDataDownloadMask;
@@ -476,7 +502,7 @@ private void processLaterArrays() {
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidFailedLoad) {
             listenerInProgress = true;
-            String fileName = (String)args[0];
+            String fileName = (String) args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
@@ -489,10 +515,10 @@ public void didReceivedNotification(int id, Object... args) {
             }
             listenerInProgress = false;
             processLaterArrays();
-            checkDownloadFinished(fileName, (Integer)args[1]);
+            checkDownloadFinished(fileName, (Integer) args[1]);
         } else if (id == NotificationCenter.FileDidLoaded) {
             listenerInProgress = true;
-            String fileName = (String)args[0];
+            String fileName = (String) args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
@@ -508,10 +534,10 @@ public void didReceivedNotification(int id, Object... args) {
             checkDownloadFinished(fileName, 0);
         } else if (id == NotificationCenter.FileLoadProgressChanged) {
             listenerInProgress = true;
-            String fileName = (String)args[0];
+            String fileName = (String) args[0];
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
-                Float progress = (Float)args[1];
+                Float progress = (Float) args[1];
                 for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
                     if (reference.get() != null) {
                         reference.get().onProgressDownload(fileName, progress);
@@ -524,7 +550,6 @@ public void didReceivedNotification(int id, Object... args) {
     }
 
 
-
     public static void saveFile(String fullPath, Context context, final int type, final String name) {
         if (fullPath == null) {
             return;
@@ -575,7 +600,7 @@ public void run() {
                             destFile = new File(f, name);
                         }
 
-                        if(!destFile.exists()) {
+                        if (!destFile.exists()) {
                             destFile.createNewFile();
                         }
                         FileChannel source = null;
@@ -641,9 +666,6 @@ public void run() {
     }
 
 
-
-
-
     public static boolean isWebp(Uri uri) {
         ParcelFileDescriptor parcelFD = null;
         FileInputStream input = null;
@@ -656,7 +678,7 @@ public static boolean isWebp(Uri uri) {
                 String str = new String(header);
                 if (str != null) {
                     str = str.toLowerCase();
-                    if (str.startsWith("riff") && str.endsWith("webp")){
+                    if (str.startsWith("riff") && str.endsWith("webp")) {
                         return true;
                     }
                 }
@@ -683,8 +705,6 @@ public static boolean isWebp(Uri uri) {
     }
 
 
-
-
     public void toggleSaveToGallery() {
         saveToGallery = !saveToGallery;
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -726,6 +746,91 @@ public boolean canSaveToGallery() {
         return saveToGallery;
     }
 
+    //TODO why it is static
+    //TODO what is it guid. I need guid in postNotification. I should pass this parameter in args to say to which activiy I send the notification, because many activities could subscribe to the same notification, but not all of them must receive the response
+    public static void loadGeoTaggedGalleryPhotos(final int guid) {
+        if (rTree != null) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.offlinePostsLoaded);
+                }
+            });
+            return;
+        }
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                RTree<Post, Geometry> rTree = RTree.create();
+                String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
+
+                // TODO filter files list. and in parallel check time of the last update?
+//               TODO  Or update rTree one per week ! (per day). OR if the number of files is changed. new photo added or something deleted. !!
+                String[] fileNames = new File(cameraFolder).list(new FilenameFilter() {
+                    public boolean accept(File dir, String name) {
+                        return name.toLowerCase().endsWith(Constants.EXTENSION_JPG) ||
+                                name.toLowerCase().endsWith(Constants.EXTENSION_JPEG)
+                                || name.toLowerCase().endsWith(Constants.EXTENSION_PNG);
+                    }
+                });
+                for (String fileName : fileNames) {
+                    ExifInterface exif;
+                    try {
+                        exif = new ExifInterface(cameraFolder + File.separator + fileName);
+                    } catch (IOException e) {
+                        //TODO handle exception.
+                        e.printStackTrace();
+                        continue;
+                    }
+                    String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME);
+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd hh:mm:ss", Locale.getDefault());
+                    Date date;
+                    try {
+                        date = simpleDateFormat.parse(datetime);
+                    } catch (ParseException e) {
+                        //TODO handle exception
+                        e.printStackTrace();
+                        continue;
+                    }
+                    float[] coordinates = new float[2];
+                    boolean result = exif.getLatLong(coordinates);
+                    if (result) {
+                        Post post = PostsController.getInstance().createPost(cameraFolder, fileName, coordinates[0], coordinates[1], date);
+                        rTree = rTree.add(Entry.entry(post, Geometries.point(coordinates[1], coordinates[0])));
+                    }
+                }
+                setrTree(rTree);
+
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.offlinePostsLoaded);
+                    }
+                });
+
+
+//                AndroidUtilities.runOnUIThread(new Runnable() {
+//                    @Override
+//                    public void run() {
+//                        //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
+//                        if (!postResponse.getPosts().isEmpty() || reload) {
+//                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);
+//                        } else {
+////            NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);  //TODO hide progress view does not work !!!
+//                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.postRequestFinished);
+//                        }
+//
+//                    }
+//                });
+            }
+        }).start();
+    }
+
+    private static void setrTree(RTree<Post, Geometry> rTree) {
+        MediaController.rTree = rTree;
+
+    }
+
     public static void loadGalleryPhotosAlbums(final int guid) {
         new Thread(new Runnable() {
             @Override
@@ -869,5 +974,76 @@ public void run() {
         }).start();
     }
 
+    public boolean validateImage(Image image) {
+        return (image.getWidth() > Constants.PHOTO_WIDTH_MIN) && ((image.getSize() / 1014) / 1024 <= 10);
+    }
+
 
+    //TODO works not properly. int increase the size of the file.
+    public void saveBitmap(Image image) {
+        FileOutputStream out = null;
+        try {
+            File telegramPath = new File(Environment.getExternalStorageDirectory(), Constants.WGO);
+            telegramPath.mkdirs();
+            File imagePath = new File(telegramPath, Constants.WGO_IMAGE);
+            imagePath.mkdirs();
+
+            File resizedImage = new File(imagePath, UUID.randomUUID().toString() + ".jpg");
+            out = new FileOutputStream(resizedImage);
+            int width = image.getWidth();
+            int height = image.getHeight();
+            if (image.getWidth() > Constants.PHOTO_WIDTH_MAX) {
+                width = Constants.PHOTO_WIDTH_MAX;
+                float scale = (float) image.getWidth() / (float) Constants.PHOTO_WIDTH_MAX; // scale calculate
+                height = (int) (height / scale);
+            }
+
+//            BitmapFactory.Options options = new BitmapFactory.Options();
+
+//            Bitmap bitmap = BitmapFactory.decodeFile(image.getUrl(), options);
+            //options.inScaled = false; ?? better quality
+//            http://stackoverflow.com/questions/4821488/bad-image-quality-after-resizing-scaling-bitmap
+
+            Bitmap resized = Bitmap.createScaledBitmap(image.getBitmap(), width, height, true);
+            Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.PNG;
+            String type = image.getType();
+            if (!StringUtils.isEmpty(type) &&
+                    (type.toLowerCase().contains("jpeg") || type.toLowerCase().contains("jpg"))) {
+                compressFormat = Bitmap.CompressFormat.JPEG;
+            }
+
+//            http://www.hongkiat.com/blog/jpeg-optimization-guide/
+
+//            Low – 10%
+//                    Medium – 30%
+//                    High – 60%
+//                    Very High – 80%
+//                    Maximum – 100%
+//                    Even in Adobe Photoshop 60% image quality is considered ‘high’. Many web developers will vouch between 50% – 70% is a safe range to stick with.
+            resized.compress(compressFormat, Constants.PHOTO_QUALITY, out); // bmp is your Bitmap instance
+            // PNG is a lossless format, the compression factor (100) is ignored
+
+            image.setBitmap(resized);
+            image.setUrl(resizedImage.getAbsolutePath());
+            image.setWidth(width);
+            image.setHeight(height);
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            try {
+                if (out != null) {
+                    out.close();
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+
+    }
+
+
+    public static RTree<Post, Geometry> getrTree() {
+        return rTree;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 6ee91aa0e..1a810799b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -22,12 +22,16 @@
 
     private static int totalEvents = 1;
 
+    public static final int switchToOfflineMode = totalEvents++;
+    public static final int switchToOnlineMode = totalEvents++;
+    public static final int stopRefreshingView = totalEvents++;
     public static final int venuesNeedReload = totalEvents++;
     public static final int postsNeedReload = totalEvents++;
     public static final int postRequestFinished = totalEvents++;
     public static final int undefinedLocation = totalEvents++;
     public static final int newPostSaved = totalEvents++;
     public static final int postsRefresh = totalEvents++;
+    public static final int offlinePostsLoaded = totalEvents++;
 
     public static final int savePostError = totalEvents++;
     public static final int loadPostsError = totalEvents++;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 5589d1549..bde5e8e5d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -10,12 +10,22 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.location.Location;
 
+import com.github.davidmoten.rtree.Entry;
+import com.github.davidmoten.rtree.RTree;
+import com.github.davidmoten.rtree.geometry.Geometries;
+import com.github.davidmoten.rtree.geometry.Geometry;
+
 import org.telegram.android.location.LocationManagerHelper;
 import org.telegram.utils.Constants;
 
+import java.io.File;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -23,6 +33,7 @@
 import retrofit.Response;
 import retrofit.Retrofit;
 import ru.aragats.wgo.ApplicationLoader;
+import ru.aragats.wgo.dto.Coordinates;
 import ru.aragats.wgo.dto.FileUploadRequest;
 import ru.aragats.wgo.dto.Image;
 import ru.aragats.wgo.dto.Post;
@@ -45,8 +56,8 @@
     private VKPhotoResponseToPostListConverter vkPhotoResponseConverter = new VKPhotoResponseToPostListConverter();
     private Venue lastVenue;
 
-    public List<Post> posts = new ArrayList<>();
-    public ConcurrentHashMap<String, Post> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private List<Post> posts = new ArrayList<>();
+//    public ConcurrentHashMap<String, Post> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
 
     private boolean loadingPosts = false;
 
@@ -112,7 +123,6 @@ public void didReceivedNotification(int id, Object... args) {
     public void cleanUp() {
         MediaController.getInstance().cleanup();
 
-        postsMap.clear();
         posts.clear();
 
         loadingPosts = false;
@@ -122,6 +132,10 @@ public void cleanUp() {
 
     public void addPost(final Post post) {
 
+
+        MediaController.getInstance().saveBitmap(post.getImage());
+
+
         RestManager.getInstance().uploadImage(new FileUploadRequest(post.getImage().getUrl(), post.getImage().getType()), new Callback<List<Image>>() {
             @Override
             public void onResponse(Response<List<Image>> response, Retrofit retrofit) {
@@ -193,10 +207,15 @@ public void deletePost(final String did, int offset, final boolean onlyHistory)
     }
 
 
-    public void loadPosts(final String idOffset, final int offset, final int count, final boolean reload, boolean fromCache) {
-        if (loadingPosts) {
+    public void loadPosts(final String idOffset, final int offset, final int count, final boolean reload, final boolean offlineMode) {
+        if (loadingPosts || offlineMode && MediaController.getrTree() == null) {
             return;
         }
+        //TODO rethink this.
+//        if (offlineMode && MediaController.getrTree() == null) {
+//            NotificationCenter.getInstance().postNotificationName(NotificationCenter.stopRefreshingView);
+//            return;
+//        }
         loadingPosts = true;
         Location location = LocationManagerHelper.getInstance().getLastLocation();
         if (location == null) {
@@ -211,6 +230,44 @@ public void loadPosts(final String idOffset, final int offset, final int count,
         postRequest.setIdOffset(idOffset);
         postRequest.setOffset(offset);
         postRequest.setDistance(Constants.RADIUS);
+        if (offlineMode) {
+            loadLocalPosts(postRequest, reload);
+        } else {
+            loadPostFromServer(postRequest, reload);
+        }
+
+
+    }
+
+    private void loadLocalPosts(final PostRequest postRequest, final boolean reload) {
+        List<Post> results = new ArrayList<>();
+        RTree<Post, Geometry> rTree = MediaController.getrTree();
+        if (rTree == null) {
+            return;
+        }
+        List<Entry<Post, Geometry>> entries = rTree.search(
+                Geometries.point(postRequest.getLongitude(), postRequest.getLatitude()), Constants.MAX_DISTANCE_DEGREE)
+                .toList().toBlocking().single();
+        for (Entry<Post, Geometry> entry : entries) {
+            Post post = entry.value();
+            results.add(post);
+        }
+        int start = postRequest.getOffset();
+        int end = postRequest.getOffset() + postRequest.getCount();
+        if (end > results.size()) {
+            end = results.size();
+        }
+        if (!results.isEmpty()) {
+            results = results.subList(start, end);
+        }
+        PostResponse postResponse = new PostResponse();
+        postResponse.setPosts(results);
+        processLoadedPosts(postResponse, reload);
+
+    }
+
+
+    private void loadPostFromServer(final PostRequest postRequest, final boolean reload) {
         RestManager.getInstance().findNearPosts(postRequest, new Callback<PostResponse>() {
             @Override
             public void onResponse(Response<PostResponse> response, Retrofit retrofit) {
@@ -224,8 +281,6 @@ public void onFailure(Throwable t) {
                 loadVKPhotos(postRequest, reload);
             }
         });
-
-
     }
 
 
@@ -252,7 +307,7 @@ public void onFailure(Throwable t) {
     }
 
 
-    public void loadPostsMock(final int offset, final int count, boolean reload, boolean fromCache) {
+    public void loadPostsMock(final int offset, final int count, boolean reload) {
         if (loadingPosts) {
             return;
         }
@@ -273,12 +328,11 @@ public void loadPostsMock(final int offset, final int count, boolean reload, boo
     public void processLoadedPosts(PostResponse postResponse, boolean reload) {
         if (reload) {
             posts.clear();
-            postsMap.clear();
         }
         posts.addAll(postResponse.getPosts());
-        for (Post post : posts) {
-            postsMap.putIfAbsent(post.getId(), post);
-        }
+//        for (Post post : posts) {
+//            postsMap.putIfAbsent(post.getId(), post);
+//        }
         loadingPosts = false;
         //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
         if (!postResponse.getPosts().isEmpty() || reload) {
@@ -334,4 +388,49 @@ public Venue getLastVenue() {
     public void setLastVenue(Venue lastVenue) {
         this.lastVenue = lastVenue;
     }
+
+    public List<Post> getPosts() {
+        return posts;
+    }
+
+    public Post createPost(String dir, String photo, double latitude, double longitude, Date date) {
+        Post post = new Post();
+        post.setId(photo);
+        Coordinates coordinates = new Coordinates();
+        coordinates.setType("Point");
+        coordinates.setCoordinates(Arrays.asList(longitude, latitude));
+        post.setCoordinates(coordinates);
+        post.setText("");
+        post.setCreatedDate(date.getTime());
+        Venue venue = new Venue();
+        venue.setCoordinates(coordinates);
+        venue.setName("Local");
+        venue.setAddress("");
+        post.setVenue(venue);
+
+        File file = new File(dir, photo);
+        String photoUrl = dir + File.separator + photo;
+        Image image = new Image();
+        image.setUrl(photoUrl);
+        image.setSize(file.length());
+
+        BitmapFactory.Options options = new BitmapFactory.Options();
+        // TODO THIS Do not allow decode the file.
+//            options.inJustDecodeBounds = true;
+
+//Returns null, sizes are in the options variable
+        Bitmap bitmap = BitmapFactory.decodeFile(photoUrl, options);
+        int width = options.outWidth;
+        int height = options.outHeight;
+//If you want, the MIME type will also be decoded (if possible)
+        String type = options.outMimeType;
+//            String type = getMimeType(photoUrl
+
+        image.setWidth(width);
+        image.setHeight(height);
+        post.setImages(Arrays.asList(image, image));
+        return post;
+
+
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
index 361734efb..fa3b16d52 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
@@ -43,7 +43,7 @@ public boolean isEnabled(int i) {
     //TODO-aragats
     @Override
     public int getCount() {
-        return UserConfig.isClientActivated() ? 6 : 0;
+        return UserConfig.isClientActivated() ? 7 : 0;
     }
 
     @Override
@@ -92,6 +92,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             } else if (i == 5) {
                 actionCell.setTextAndIcon(LocaleController.getString("TelegramFaq", R.string.WGOFaq), R.drawable.menu_help);
 
+            } else if (i == 6) {
+                actionCell.setTextAndIcon(LocaleController.getString("Posts", R.string.Posts), R.drawable.menu_broadcast);
             }
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
index b8ecda9ae..3106890ca 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -17,7 +17,9 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.PostsController;
 import org.telegram.android.support.widget.RecyclerView;
+
 import ru.aragats.wgo.dto.Post;
+
 import org.telegram.ui.Cells.PostCell;
 import org.telegram.ui.Cells.LoadingCell;
 import org.telegram.ui.LocationActivityAragats;
@@ -57,7 +59,7 @@ public boolean isDataSetChanged() {
 
     @Override
     public int getItemCount() {
-        int count = PostsController.getInstance().posts.size();
+        int count = PostsController.getInstance().getPosts().size();
         if (count == 0 && PostsController.getInstance().isLoadingPosts()) {
             return 0;
         }
@@ -70,10 +72,10 @@ public int getItemCount() {
 
     public Post getItem(int i) {
 
-        if (i < 0 || i >= PostsController.getInstance().posts.size()) {
+        if (i < 0 || i >= PostsController.getInstance().getPosts().size()) {
             return null;
         }
-        return PostsController.getInstance().posts.get(i);
+        return PostsController.getInstance().getPosts().get(i);
 
     }
 
@@ -98,7 +100,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
         if (viewHolder.getItemViewType() == 0) {
             PostCell cell = (PostCell) viewHolder.itemView;
             cell.useSeparator = (i != getItemCount() - 1);
-            Post post = PostsController.getInstance().posts.get(i);
+            Post post = PostsController.getInstance().getPosts().get(i);
             if (AndroidUtilities.isTablet()) {
                 cell.setPostSelected(!StringUtils.isEmpty(post.getId()) && post.getId().equals(openedPostId));
             }
@@ -166,7 +168,7 @@ public boolean canPerformActions() {
 
     @Override
     public int getItemViewType(int i) {
-        if (i == PostsController.getInstance().posts.size()) {
+        if (i == PostsController.getInstance().getPosts().size()) {
             return 1; //LoadingCell
         }
         return 0; //PostCell
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index c2e1b0c38..965f37b37 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -727,8 +727,8 @@ public void setPostSelected(boolean value) {
     public void checkCurrentPostIndex() {
         Post post = null;
 
-        if (index < PostsController.getInstance().posts.size()) {
-            post = PostsController.getInstance().posts.get(index);
+        if (index < PostsController.getInstance().getPosts().size()) {
+            post = PostsController.getInstance().getPosts().get(index);
         }
 
         if (post != null) {
@@ -786,8 +786,13 @@ public void update(int mask) {
         }
 
         //Photo
+        //1 original - slow
         // TODO null ?
-        photoImage.setImage(post.getPreviewImageUrl(), null, imageDrawable, null, 0); // TODO fix it. Create drawable.
+//        photoImage.setImage(post.getPreviewImageUrl(), null, imageDrawable, null, 0); // TODO fix it. Create drawable.
+
+        //2. from postMediaCell . works faster
+        int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
+        photoImage.setImage(post.getPreviewImageUrl(), String.format(Locale.US, "%d_%d", size, size), imageDrawable, null, (int) post.getPreviewImage().getSize()); // TODO fix it. Create drawable.
 
         //Photo
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index d3243ad4c..54b1e9899 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -248,7 +248,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                     //TODO Update opened PostsActivity and close drawer.
 //                    Bundle args = new Bundle();
 //                    presentFragment(new PostsActivity(args));
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsRefresh);
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.switchToOnlineMode);
                     drawerLayoutContainer.closeDrawer(false);
                 } else if (position == 3) {
 
@@ -270,6 +270,14 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                         FileLog.e("tmessages", e);
                     }
                     drawerLayoutContainer.closeDrawer(false);
+                } else if (position == 6) {
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.switchToOfflineMode);
+                    drawerLayoutContainer.closeDrawer(false);
+//
+//                    Bundle bundle = new Bundle();
+//                    bundle.putBoolean("offlineMode", true);
+//                    presentFragment(new PostsActivity(bundle));
+//                    drawerLayoutContainer.closeDrawer(false);
                 }
             }
         });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index de4395ab4..287359d8b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -1480,6 +1480,8 @@ private void didSelectPhotos(ArrayList<String> photos) {
             if (!file.exists()) {
                 return;
             }
+//            long megaBytes = (file.length()/1024)/1024;
+            long bytes = file.length();
 
             BitmapFactory.Options options = new BitmapFactory.Options();
             // TODO THIS Do not allow decode the file.
@@ -1497,7 +1499,7 @@ private void didSelectPhotos(ArrayList<String> photos) {
 //            MediaStore.Files.probeContentType(path);
 
             //
-            bitmap = Bitmap.createScaledBitmap(bitmap, 100, 100, true);
+//            bitmap = Bitmap.createScaledBitmap(bitmap, 100, 100, true);
 
 
             Post post = new Post();
@@ -1508,6 +1510,7 @@ private void didSelectPhotos(ArrayList<String> photos) {
             image.setHeight(height);
             image.setBitmap(bitmap);
             image.setType(type);
+            image.setSize(bytes);
 //            image = ImageServiceMock.getRandomImage();
             List<Image> images = new ArrayList<>();
             images.add(image); // preview
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index e427f2534..2220f5f69 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -46,6 +46,7 @@
 import org.telegram.android.ContactsController;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.PostsController;
 import org.telegram.android.location.LocationManagerHelper;
@@ -108,6 +109,7 @@
     // Swipe Refresh Layout
     private SwipeRefreshLayout swipeRefreshLayout;
 
+    private boolean offlineMode;
 
     //TODO-legacy. update according to new version.
     @Override
@@ -195,6 +197,9 @@ public void updatePhotoAtIndex(int index) {
 
     public PostsActivity(Bundle args) {
         super(args);
+        if (args != null) {
+            offlineMode = args.getBoolean("offlineMode", false);
+        }
     }
 
     @Override
@@ -207,6 +212,10 @@ public boolean onFragmentCreate() {
 
         if (searchString == null) {
             //TODO learn NotificationCenter class especiallu case when post notification. There is different situations when notify when animation or not.
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.switchToOfflineMode);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.switchToOnlineMode);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.stopRefreshingView);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.offlinePostsLoaded);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postsRefresh);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.undefinedLocation);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postRequestFinished);
@@ -216,10 +225,13 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         }
 
+        if (offlineMode) {
+            MediaController.loadGeoTaggedGalleryPhotos(classGuid);
+        }
         LocationManagerHelper.getInstance().runLocationListener();
 
-        if (!postsLoaded) {
-            PostsController.getInstance().loadPosts(null, 0, Constants.POST_COUNT, true, true);
+        if (!offlineMode && !postsLoaded) {
+            PostsController.getInstance().loadPosts(null, 0, Constants.POST_COUNT, true, offlineMode);
             ContactsController.getInstance().checkInviteText();
             postsLoaded = true;
         }
@@ -230,6 +242,10 @@ public boolean onFragmentCreate() {
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
         if (searchString == null) {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.switchToOfflineMode);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.switchToOnlineMode);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.stopRefreshingView);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.offlinePostsLoaded);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postsRefresh);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.undefinedLocation);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postRequestFinished);
@@ -275,7 +291,7 @@ public boolean onSearchCollapse() {
                 searchWas = false;
                 if (postListView != null) {
                     searchEmptyView.setVisibility(View.INVISIBLE);
-                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
+                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().getPosts().isEmpty()) {
                         emptyView.setVisibility(View.INVISIBLE);
                         postListView.setEmptyView(progressView);
                     } else {
@@ -366,7 +382,7 @@ public void onItemClick(int id) {
             public void onRefresh() {
                 // TODO temp test
 //                new RestTask().execute("param");
-                PostsController.getInstance().loadPosts(null, 0, Constants.POST_COUNT, true, true);
+                PostsController.getInstance().loadPosts(null, 0, Constants.POST_COUNT, true, offlineMode);
 
 //                RestManager.getInstance().uploadTest(new PostRequest(), new Callback<PostResponse>() {
 //                    @Override
@@ -576,9 +592,9 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 }
                 //TODO fix it.
                 if (visibleItemCount > 0) {
-                    if (layoutManager.findLastVisibleItemPosition() == PostsController.getInstance().posts.size() - 1) {
-                        String offset = PostsController.getInstance().posts.get(PostsController.getInstance().posts.size() - 1).getId(); // TODO When empty list. java.lang.ArrayIndexOutOfBoundsException: length=12; index=-1
-                        PostsController.getInstance().loadPosts(offset, PostsController.getInstance().posts.size(), Constants.POST_COUNT, false, true);
+                    if (layoutManager.findLastVisibleItemPosition() == PostsController.getInstance().getPosts().size() - 1) {
+                        String offset = PostsController.getInstance().getPosts().get(PostsController.getInstance().getPosts().size() - 1).getId(); // TODO When empty list. java.lang.ArrayIndexOutOfBoundsException: length=12; index=-1
+                        PostsController.getInstance().loadPosts(offset, PostsController.getInstance().getPosts().size(), Constants.POST_COUNT, false, offlineMode);
                     }
                 }
 
@@ -635,7 +651,7 @@ public void searchStateChanged(boolean search) {
             }
         });
 
-        if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
+        if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().getPosts().isEmpty()) {
             searchEmptyView.setVisibility(View.INVISIBLE);
             emptyView.setVisibility(View.INVISIBLE);
             postListView.setEmptyView(progressView);
@@ -686,7 +702,15 @@ public void onGlobalLayout() {
     @Override
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.undefinedLocation) {
+//        int guid = 0;
+//        if(args !=null && args.length != 0) {
+//            guid  = (int)args[0];
+//        }
+        if (id == NotificationCenter.stopRefreshingView) {
+            if (swipeRefreshLayout != null) {
+                swipeRefreshLayout.setRefreshing(false);
+            }
+        } else if (id == NotificationCenter.undefinedLocation) {
 //            Toast.makeText(((Context) getParentActivity()), "Please, enable gps on your phone", Toast.LENGTH_SHORT).show();
             if (swipeRefreshLayout != null) {
                 swipeRefreshLayout.setRefreshing(false);
@@ -713,7 +737,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             //TODO duplicates
             if (postListView != null) {
                 try {
-                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
+                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().getPosts().isEmpty()) {
                         searchEmptyView.setVisibility(View.INVISIBLE);
                         emptyView.setVisibility(View.INVISIBLE);
                         postListView.setEmptyView(progressView);
@@ -748,7 +772,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             // TODO duplicates
             if (postListView != null) {
                 try {
-                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
+                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().getPosts().isEmpty()) {
                         searchEmptyView.setVisibility(View.INVISIBLE);
                         emptyView.setVisibility(View.INVISIBLE);
                         postListView.setEmptyView(progressView);
@@ -787,15 +811,32 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 force = args[0] == null ? false : (Boolean) args[0];
             }
             refreshPosts(force);
+        } else if (id == NotificationCenter.offlinePostsLoaded) {
+            PostsController.getInstance().loadPosts(null, 0, Constants.POST_COUNT, true, offlineMode); // TODO why offlineMode is false /// aaa becaue different instances !!!
+        } else if (id == NotificationCenter.switchToOfflineMode) {
+            MediaController.loadGeoTaggedGalleryPhotos(0);
+            boolean force = false;
+            if (!this.offlineMode) {
+                force = true;
+            }
+            this.offlineMode = true;
+//            refreshPosts(force);
+        } else if (id == NotificationCenter.switchToOnlineMode) {
+            boolean force = false;
+            if (this.offlineMode) {
+                force = true;
+            }
+            this.offlineMode = false;
+            refreshPosts(force);
         }
     }
 
     private void refreshPosts(boolean force) {
-        if (PostsController.getInstance().posts.isEmpty() || force) {
+        if (PostsController.getInstance().getPosts().isEmpty() || force) {
             if (swipeRefreshLayout != null) {
                 swipeRefreshLayout.setRefreshing(true);
             }
-            PostsController.getInstance().loadPosts(null, 0, Constants.POST_COUNT, true, true);
+            PostsController.getInstance().loadPosts(null, 0, Constants.POST_COUNT, true, offlineMode);
         }
     }
 
@@ -885,7 +926,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
             return;
         }
-        Post post = PostsController.getInstance().posts.get(position);
+        Post post = PostsController.getInstance().getPosts().get(position);
 
         selectedPost = post.getId();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index c2c1ba8cc..943976ab7 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -20,8 +20,29 @@
     public static int POST_COUNT = 20;
 
     public static final int RADIUS = 800; // meters 8000 for VK
+    public static final double MAX_DISTANCE_DEGREE = 0.01;
 
 
     public static final String RESTRICTED_AREA = "restricted_area";
     public static final String RADIUS_ARG = "radius";
-}
+
+
+    // sizes from VK
+    public static final int PHOTO_WIDTH_2560 = 2560;
+    public static final int PHOTO_WIDTH_1280 = 1280;
+    public static final int PHOTO_WIDTH_807 = 807;
+    public static final int PHOTO_WIDTH_604 = 604;
+
+
+    public static final int PHOTO_WIDTH_MAX = PHOTO_WIDTH_2560;
+
+    public static final int PHOTO_WIDTH_MIN = PHOTO_WIDTH_604;
+    public static final int PHOTO_HEIGHT_MIN = PHOTO_WIDTH_604;
+
+    public static final int PHOTO_QUALITY = 70;
+
+
+    public static final String EXTENSION_JPG = ".jpg";
+    public static final String EXTENSION_JPEG = ".jpeg";
+    public static final String EXTENSION_PNG = ".png";
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java
index 9588b6f70..2a99a645b 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java
@@ -19,7 +19,7 @@
     public Post convertIntern(PhotoItem source) {
         Post result = new Post();
         result.setId("" + source.getId());
-        result.setCreatedDate(( (long)source.getDate() * 1000));
+        result.setCreatedDate(((long) source.getDate() * 1000));
         Coordinates coordinates = new Coordinates();
         coordinates.setType("Point");
         coordinates.setCoordinates(Arrays.asList(source.getLong(), source.getLat()));
@@ -27,12 +27,13 @@ public Post convertIntern(PhotoItem source) {
         result.setText(source.getText());
         Venue venue = new Venue();
         venue.setCoordinates(coordinates);
-        venue.setName("");
+        venue.setName("VK");
         venue.setAddress("");
         result.setVenue(venue);
 
         List<Image> images = new ArrayList<>();
         Image previewImage = new Image();
+        //TODO if height or width  == 0 then throw this item
         previewImage.setHeight(source.getHeight());
         previewImage.setWidth(source.getWidth());
         previewImage.setUrl(source.getPhoto604());
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java
index c099f9c8f..1ad48d94b 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java
@@ -22,7 +22,12 @@
             return result;
         }
         for (PhotoItem photoItem : source.getItems()) {
-            result.add(photoItemToPostConverter.convert(photoItem));
+            try {
+                result.add(photoItemToPostConverter.convert(photoItem));
+            } catch (NullPointerException ex) {
+                ex.printStackTrace();
+                // TODO handle exception
+            }
         }
         return result;
 
