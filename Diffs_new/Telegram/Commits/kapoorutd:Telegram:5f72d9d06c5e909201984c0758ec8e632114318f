diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index cf9848807..28abaf958 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -10,12 +10,19 @@ dependencies {
     compile "com.google.android.gms:play-services-maps:8.4.0"
     compile 'net.hockeyapp.android:HockeySDK:4.0.1'
     compile 'com.googlecode.mp4parser:isoparser:1.0.6'
+
+    compile 'com.google.code.gson:gson:2.2.4'
+    compile 'com.paypal.sdk:paypal-android-sdk:2.14.2'
+    compile 'com.google.android.gms:play-services-ads:8.4.0'
+
 }
 
 android {
     compileSdkVersion 23
     buildToolsVersion '23.0.3'
 
+
+
     useLibrary 'org.apache.http.legacy'
     defaultConfig.applicationId = "org.telegram.messenger"
 
@@ -26,34 +33,34 @@ android {
 
     signingConfigs {
         debug {
-            storeFile file("config/release.keystore")
+          /*  storeFile file("config/release.keystore")
             storePassword RELEASE_STORE_PASSWORD
             keyAlias RELEASE_KEY_ALIAS
-            keyPassword RELEASE_KEY_PASSWORD
+            keyPassword RELEASE_KEY_PASSWORD*/
         }
 
         release {
-            storeFile file("config/release.keystore")
+     /*       storeFile file("config/release.keystore")
             storePassword RELEASE_STORE_PASSWORD
             keyAlias RELEASE_KEY_ALIAS
-            keyPassword RELEASE_KEY_PASSWORD
+            keyPassword RELEASE_KEY_PASSWORD*/
         }
     }
 
     buildTypes {
         debug {
-            debuggable true
+        /*    debuggable true
             jniDebuggable true
             signingConfig signingConfigs.debug
-            applicationIdSuffix ".beta"
+            applicationIdSuffix ".beta"*/
         }
 
-        release {
+        release {/*
             debuggable false
             jniDebuggable false
             signingConfig signingConfigs.release
             minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'*/
         }
 
         foss {
@@ -116,6 +123,12 @@ android {
         targetSdkVersion 23
         versionName "3.10.1"
     }
+
+
+    dexOptions {
+        jumboMode true
+    }
+
 }
 
 apply plugin: 'com.google.gms.google-services'
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.22.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.22.so
new file mode 100644
index 000000000..28c76cb4f
Binary files /dev/null and b/TMessagesProj/libs/armeabi-v7a/libtmessages.22.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.22.so b/TMessagesProj/libs/armeabi/libtmessages.22.so
new file mode 100644
index 000000000..b3123862d
Binary files /dev/null and b/TMessagesProj/libs/armeabi/libtmessages.22.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.22.so b/TMessagesProj/libs/x86/libtmessages.22.so
new file mode 100644
index 000000000..70e079899
Binary files /dev/null and b/TMessagesProj/libs/x86/libtmessages.22.so differ
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index abf2f25ad..a3ac2a653 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -1,8 +1,12 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.telegram.messenger"
+    xmlns:tools="http://schemas.android.com/tools"
     android:installLocation="auto">
 
+    <uses-sdk android:minSdkVersion="9"
+        tools:overrideLibrary="com.paypal.android.sdk.payments"/>
+
     <supports-screens android:anyDensity="true"
                       android:largeScreens="true"
                       android:normalScreens="true"
@@ -53,6 +57,12 @@
         android:theme="@style/Theme.TMessages.Start"
         android:manageSpaceActivity="org.telegram.ui.ManageSpaceActivity">
 
+
+        <activity
+            android:name="com.google.android.gms.ads.AdActivity"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize"
+            android:theme="@android:style/Theme.Translucent" />
+
         <activity
             android:name="org.telegram.ui.LaunchActivity"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
@@ -116,6 +126,11 @@
             </intent-filter>
             <meta-data android:name="android.service.chooser.chooser_target_service" android:value=".TgChooserTargetService" />
         </activity>
+
+
+        <activity android:name="org.telegram.payment.PaymentManager"
+            android:label=""></activity>
+
         <activity
             android:name="org.telegram.ui.ManageSpaceActivity"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index 8fa36b6b8..d6dfe21ba 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -1069,24 +1069,24 @@ public void onAnimationEnd(Animator animation) {
     }*/
 
     public static void checkForCrashes(Activity context) {
-        CrashManager.register(context, BuildVars.DEBUG_VERSION ? BuildVars.HOCKEY_APP_HASH_DEBUG : BuildVars.HOCKEY_APP_HASH, new CrashManagerListener() {
+       /* CrashManager.register(context, BuildVars.DEBUG_VERSION ? BuildVars.HOCKEY_APP_HASH_DEBUG : BuildVars.HOCKEY_APP_HASH, new CrashManagerListener() {
             @Override
             public boolean includeDeviceData() {
                 return true;
             }
-        });
+        });*/
     }
 
     public static void checkForUpdates(Activity context) {
-        if (BuildVars.DEBUG_VERSION) {
+       /* if (BuildVars.DEBUG_VERSION) {
             UpdateManager.register(context, BuildVars.DEBUG_VERSION ? BuildVars.HOCKEY_APP_HASH_DEBUG : BuildVars.HOCKEY_APP_HASH);
-        }
+        }*/
     }
 
     public static void unregisterUpdates() {
-        if (BuildVars.DEBUG_VERSION) {
+  /*      if (BuildVars.DEBUG_VERSION) {
             UpdateManager.unregister();
-        }
+        }*/
     }
 
     public static void addToClipboard(CharSequence str) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index b98ccbf85..ed2e6c085 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -44,7 +44,7 @@
     private static int selectedColor;
     private static boolean isCustomTheme;
     private static final Object sync = new Object();
-
+    private static ApplicationLoader _instance;
     private static int serviceMessageColor;
     private static int serviceSelectedMessageColor;
 
@@ -139,6 +139,19 @@ public static Drawable getCachedWallpaper() {
         }
     }
 
+
+    public static ApplicationLoader getInstance() {
+        if(_instance == null) {
+            _instance = new ApplicationLoader();
+        }
+        return _instance;
+    }
+
+    public String getHttpServer(){
+        return "107.170.73.149:8080/socialshareupapi/";
+    }
+
+
     private static void convertConfig() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("dataconfig", Context.MODE_PRIVATE);
         if (preferences.contains("currentDatacenterId")) {
@@ -287,6 +300,8 @@ public static void postInitApplication() {
     public void onCreate() {
         super.onCreate();
 
+    //    ACRA.init(this);
+
         applicationContext = getApplicationContext();
         NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
         ConnectionsManager.native_setJava(Build.VERSION.SDK_INT == 14 || Build.VERSION.SDK_INT == 15);
@@ -356,7 +371,8 @@ public void run() {
                         FileLog.d("tmessages", "GCM Registration not found.");
                     }
 
-                    //if (UserConfig.pushString == null || UserConfig.pushString.length() == 0) {
+                    //if (UserConfig.pushString == null || UserConfig
+                    // .pushString.length() == 0) {
                     Intent intent = new Intent(applicationContext, GcmRegistrationIntentService.class);
                     startService(intent);
                     //} else {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index f872d49bd..e4a8f9405 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -3,17 +3,17 @@
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
- * Copyright Nikolai Kudashov, 2013-2016.
+ * Copyright Nikolai Kudashov, 2013-2015.
  */
 
 package org.telegram.messenger;
 
 public class BuildVars {
-    public static boolean DEBUG_VERSION = false;
-    public static int BUILD_VERSION = 821;
-    public static String BUILD_VERSION_STRING = "3.10";
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    //public static boolean DEBUG_VERSION = false;
+    public static int BUILD_VERSION = 753;
+    public static String BUILD_VERSION_STRING = "3.6";
+    //  public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+//    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
     public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
     public static String HOCKEY_APP_HASH_DEBUG = "your-hockeyapp-api-key-here";
     public static String GCM_SENDER_ID = "760348033672";
@@ -22,4 +22,8 @@
     public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
     public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
     public static String FOURSQUARE_API_VERSION = "20150326";
+    public static boolean DEBUG_VERSION = false;
+    public static int APP_ID =10661; //obtaion your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH ="ccc55b3bfab7976cd5aee1190a8506ee"; //obtaion your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index 3e8b51257..8ac0b2bc5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -26,6 +26,7 @@
 import android.util.SparseArray;
 
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.socialuser.OnTelegramSync;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -1988,4 +1989,48 @@ public static String formatName(String firstName, String lastName) {
         }
         return result.toString();
     }
+
+
+    public void telegramResponse(String name,String no , final OnTelegramSync activity) {
+        ArrayList<TLRPC.TL_inputPhoneContact> toImport = new ArrayList<>();
+
+        TLRPC.TL_inputPhoneContact imp = new TLRPC.TL_inputPhoneContact();
+        imp.client_id = 5914;
+        imp.first_name = name;
+        imp.last_name = "";
+        imp.phone = no;
+        toImport.add(imp);
+
+
+        ArrayList<TLRPC.TL_inputPhoneContact> finalToImport = new ArrayList<>();
+        finalToImport.addAll(toImport.subList(0 * 500, Math.min((0 + 1) * 500, toImport.size())));
+        TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
+        req.contacts = finalToImport;
+        req.replace = false;
+        // final boolean isLastQuery = a == count - 1;
+
+
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    FileLog.e("tmessages", "contacts imported");
+                    /*if (isLastQuery && !contactsMap.isEmpty()) {
+                        MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
+                    }*/
+
+
+                    ArrayList<TLRPC.User> list=((TLRPC.TL_contacts_importedContacts) response).users;
+
+                    if(list.size()>0 ){
+                        activity.onUserSyncSuccess((list.get(0)));
+                    }
+                    //activity
+
+                }
+            }
+        });
+    }
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
index b12dc6099..52e7fdd76 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
@@ -568,6 +568,146 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha, BitmapSha
         }
     }
 
+    ///////////////////////////////////////////\
+
+
+    public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawable thumb,
+                         TLRPC.FileLocation thumbLocation, String thumbFilter, int size, String ext,
+                         boolean cacheOnly, boolean showSocialImage) {
+        if (setImageBackup != null) {
+            setImageBackup.fileLocation = null;
+            setImageBackup.httpUrl = null;
+            setImageBackup.thumbLocation = null;
+            setImageBackup.thumb = null;
+        }
+
+        if ((fileLocation == null && httpUrl == null && thumbLocation == null)
+                || (fileLocation != null && !(fileLocation instanceof TLRPC.FileLocation)
+                && !(fileLocation instanceof TLRPC.TL_fileEncryptedLocation)
+                && !(fileLocation instanceof TLRPC.TL_document))) {
+            recycleBitmap(null, false);
+            recycleBitmap(null, true);
+            currentKey = null;
+            currentExt = ext;
+            currentThumbKey = null;
+            currentThumbFilter = null;
+            currentImageLocation = null;
+            currentHttpUrl = null;
+            currentFilter = null;
+            currentCacheOnly = false;
+            staticThumb = thumb;
+            currentAlpha = 1;
+            currentThumbLocation = null;
+            currentSize = 0;
+            currentImage = null;
+            bitmapShader = null;
+            ImageLoader.getInstance().cancelLoadingForImageReceiver(this, 0);
+            if (parentView != null) {
+                if (invalidateAll) {
+                    parentView.invalidate();
+                } else {
+                    parentView.invalidate(imageX, imageY, imageX + imageW, imageY + imageH);
+                }
+            }
+            if (delegate != null) {
+                delegate.didSetImage(this, currentImage != null || currentThumb != null || staticThumb != null, currentImage == null);
+            }
+            return;
+        }
+
+
+
+        if (!(thumbLocation instanceof TLRPC.FileLocation)) {
+            thumbLocation = null;
+        }
+
+        String key = null;
+        if (fileLocation != null) {
+            if (fileLocation instanceof TLRPC.FileLocation) {
+                TLRPC.FileLocation location = (TLRPC.FileLocation) fileLocation;
+                key = location.volume_id + "_" + location.local_id;
+            } else {
+                TLRPC.Document location = (TLRPC.Document) fileLocation;
+                key = location.dc_id + "_" + location.id;
+            }
+        } else if (httpUrl != null) {
+            key = Utilities.MD5(httpUrl);
+        }
+        if (key != null) {
+            if (filter != null) {
+                key += "@" + filter;
+            }
+        }
+
+        if (currentKey != null && key != null && currentKey.equals(key)) {
+            if (delegate != null) {
+                delegate.didSetImage(this, currentImage != null || currentThumb != null || staticThumb != null, currentImage == null);
+            }
+            if (!canceledLoading && !forcePreview) {
+                return;
+            }
+        }
+
+        String thumbKey = null;
+        if (thumbLocation != null) {
+            thumbKey = thumbLocation.volume_id + "_" + thumbLocation.local_id;
+            if (thumbFilter != null) {
+                thumbKey += "@" + thumbFilter;
+            }
+        }
+
+        recycleBitmap(key, false);
+        recycleBitmap(thumbKey, true);
+
+        currentThumbKey = thumbKey;
+        currentKey = key;
+        currentExt = ext;
+        currentImageLocation = fileLocation;
+        currentHttpUrl = httpUrl;
+        currentFilter = filter;
+        currentThumbFilter = thumbFilter;
+        currentSize = size;
+        currentCacheOnly = cacheOnly;
+        currentThumbLocation = thumbLocation;
+        staticThumb = thumb;
+        bitmapShader = null;
+        currentAlpha = 1.0f;
+
+        if (delegate != null) {
+            delegate.didSetImage(this, currentImage != null || currentThumb != null || staticThumb != null, currentImage == null);
+        }
+
+        ImageLoader.getInstance().loadImageForImageReceiver(this);
+        if (parentView != null) {
+            if (invalidateAll) {
+                parentView.invalidate();
+            } else {
+                parentView.invalidate(imageX, imageY, imageX + imageW, imageY + imageH);
+            }
+        }
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
     private void checkAlphaAnimation(boolean skip) {
         if (currentAlpha != 1) {
             if (!skip) {
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumListener.java b/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumListener.java
new file mode 100644
index 000000000..938f6e0b9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumListener.java
@@ -0,0 +1,12 @@
+package org.telegram.payment;
+
+/**
+ * Created by craterzone3 on 22/6/16.
+ */
+
+public interface CheckPremiumListener {
+
+    public void onPremiumUser();
+    public void onGeneralUser();
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumUserRequester.java b/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumUserRequester.java
new file mode 100644
index 000000000..71fe093de
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumUserRequester.java
@@ -0,0 +1,79 @@
+package org.telegram.payment;
+
+import android.content.Context;
+
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.CustomHttpParams;
+
+import java.util.ArrayList;
+
+
+
+
+public class CheckPremiumUserRequester implements Runnable {
+
+    private  CheckPremiumListener mListener;
+    private PaymentConfirmationListener listener;
+    private ArrayList<CustomHttpParams> params =new ArrayList<>();
+    String userId;
+    private  Context mContext ;
+
+
+
+
+    public CheckPremiumUserRequester( String userId){
+        this.userId=userId ;
+       params.add(new CustomHttpParams("userId",userId));
+
+    }
+
+
+    public CheckPremiumUserRequester( String userId,CheckPremiumListener listener){
+        mListener=listener ;
+        params.add(new CustomHttpParams("userId",userId));
+        this.userId=userId ;
+    }
+    @Override
+    public void run() {
+
+    if( userId != ""){
+
+        CZResponse data1 = HttpUrlConnectionUtil.get(UriUtil.getPaymentUrl(),"application/json",params);
+        if(data1.getResponseCode() == 200) {
+            try {
+             if (data1.getResponseString().contains("true")){
+                 if(mListener!=null){
+                 mListener.onPremiumUser();
+                 }
+
+                UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.paidUser);
+             }
+                else{ UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.unPaidUser);
+                 if(mListener!=null){
+                 mListener.onGeneralUser();
+                 }
+             }
+            } catch (Exception e) {
+
+            }
+        }
+        else {
+            UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.unPaidUser);
+        }
+
+
+    }
+
+
+}
+
+}
+
+
+
+
+
+
+
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/ConfirmationRequester.java b/TMessagesProj/src/main/java/org/telegram/payment/ConfirmationRequester.java
new file mode 100644
index 000000000..76b5d266f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/ConfirmationRequester.java
@@ -0,0 +1,50 @@
+package org.telegram.payment;
+
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.CustomHttpParams;
+
+import java.util.ArrayList;
+
+
+public class ConfirmationRequester implements Runnable {
+
+    private PaymentConfirmationListener listener;
+    private ArrayList<CustomHttpParams> params =new ArrayList<>();
+
+
+    public ConfirmationRequester(String paymentId, String userId )
+    {
+
+
+        params.add(new CustomHttpParams("paymentId",paymentId));
+        params.add(new CustomHttpParams("userId",userId));
+
+    }
+    @Override
+    public void run() {
+
+        //post(String urlString, String body, String contentType, String acceptType, ArrayList<CustomHttpParams> httpParams
+        CZResponse data1 = HttpUrlConnectionUtil.post(UriUtil.getPaymentUrl(),null,"application/json","application/json",params);
+        if(data1.getResponseCode() == 200) {
+            try {
+                UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.paidUser);
+            } catch (Exception e) {
+
+            }
+        }
+  else {
+                UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.unPaidUser);
+                }
+            }
+
+
+
+    }
+
+
+
+
+
+
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/PaymentConfirmationListener.java b/TMessagesProj/src/main/java/org/telegram/payment/PaymentConfirmationListener.java
new file mode 100644
index 000000000..b4a22ee8f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/PaymentConfirmationListener.java
@@ -0,0 +1,14 @@
+package org.telegram.payment;
+
+/**
+ * Created by craterzone3 on 17/6/16.
+ */
+public interface PaymentConfirmationListener {
+
+    public void onPaymentConfirmationSuccess();
+    public void onPaymentConfirmationFailed();
+
+
+}
+
+
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/PaymentManager.java b/TMessagesProj/src/main/java/org/telegram/payment/PaymentManager.java
new file mode 100644
index 000000000..0a63e242a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/PaymentManager.java
@@ -0,0 +1,358 @@
+package org.telegram.payment;
+
+import android.annotation.TargetApi;
+import android.app.ActionBar;
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.ActivityOptionsCompat;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.google.gson.Gson;
+import com.paypal.android.sdk.payments.PayPalAuthorization;
+import com.paypal.android.sdk.payments.PayPalConfiguration;
+import com.paypal.android.sdk.payments.PayPalFuturePaymentActivity;
+import com.paypal.android.sdk.payments.PayPalPayment;
+import com.paypal.android.sdk.payments.PayPalProfileSharingActivity;
+import com.paypal.android.sdk.payments.PayPalService;
+import com.paypal.android.sdk.payments.PaymentActivity;
+import com.paypal.android.sdk.payments.PaymentConfirmation;
+
+import org.json.JSONException;
+import org.telegram.messenger.R;
+import org.telegram.payment.billingModel.PaymentResponse;
+import org.telegram.socialuser.BackgroundExecuter;
+
+import java.math.BigDecimal;
+
+/**
+ * Created by craterzone3 on 13/6/16.
+ */
+
+public class PaymentManager extends Activity implements PaymentConfirmationListener {
+
+    public static final String TAG = PaymentManager.class.getName().toString();
+
+    /**
+     * - Set to PayPalConfiguration.ENVIRONMENT_PRODUCTION to move real money.
+     *
+     * - Set to PayPalConfiguration.ENVIRONMENT_SANDBOX to use your test credentials
+     *
+     *
+     * - Set to PayPalConfiguration.ENVIRONMENT_NO_NETWORK to kick the tires
+     *    without communicating to PayPal's servers.
+     */
+
+    private static final String CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_PRODUCTION ;
+
+
+    // note that these credentials will differ between live & sandbox environments.
+
+    //   /*"AZcFLUiVZaHz3darBCvBVrVT3o9yoCffywiqrBflBRy7V_1JSvHSJ9kV2Fo_bPNkkTXWynmbByW3JX5K";*//*//"AZcFLUiVZaHz3darBCvBVrVT3o9yoCffywiqrBflBRy7V_1JSvHSJ9kV2Fo_bPNkkTXWynmbByW3JX5K";//"ARafipSb7SknBnBKsQY1Na9CvKZPypeHORyOQ-f-1sEAfwt0NEymuOniy4__9oIJ1JYEleESrqSkESGB";*/"Acv-mIu5gkIOQStmK8CAco1p-h1geAElqFCOUEl0EQcdhSKsCmam5Z_IoZ0QiF0F4lu9YBZ2mT3KqQQJ";
+
+
+    /**
+     * live client id of IM for Telegram
+     */
+
+
+    private static final String CONFIG_CLIENT_ID ="ARafipSb7SknBnBKsQY1Na9CvKZPypeHORyOQ-f-1sEAfwt0NEymuOniy4__9oIJ1JYEleESrqSkESGB";
+    private static final int REQUEST_CODE_PAYMENT = 1;
+    private static final int REQUEST_CODE_FUTURE_PAYMENT = 2;
+    private static final int REQUEST_CODE_PROFILE_SHARING = 3;
+    private TextView buyContent;
+    private TextView success;
+    private Button payButton;
+    private Button cancelButton;
+
+
+    private static PayPalConfiguration config = new PayPalConfiguration()
+            .environment(CONFIG_ENVIRONMENT)
+            .clientId(CONFIG_CLIENT_ID)
+            // The following are only used in PayPalFuturePaymentActivity.
+            .merchantName("CRATERZONE PVT LTD").acceptCreditCards(true);
+
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        Intent intent = new Intent(this, PayPalService.class);
+        intent.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION, config);
+        startService(intent);
+        acttionBarSetup();
+        findViewById(R.id.backview).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                finish();
+            }
+        });
+    }
+
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    private void acttionBarSetup(){
+        // getActionBar().setTitle(" Premium");
+        getActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
+        getActionBar().setCustomView(R.layout.custom_actionbar);
+
+    }
+
+
+    public static void createIntent(Activity activity) {
+        ActivityCompat.startActivity(activity, new Intent(activity, PaymentManager.class),
+                ActivityOptionsCompat.makeCustomAnimation(activity, android.R.anim.slide_in_left, android.R.anim.slide_out_right).toBundle());
+    }
+
+
+    public void onBuyPressed(View pressed) {
+        /*
+         * PAYMENT_INTENT_SALE will cause the payment to complete immediately.
+         * Change PAYMENT_INTENT_SALE to
+         *   - PAYMENT_INTENT_AUTHORIZE to only authorize payment and capture funds later.
+         *   - PAYMENT_INTENT_ORDER to create a payment for authorization and capture
+         *     later via calls from your server.
+         *
+         * Also, to include additional payment details and an item list, see getStuffToBuy() below.
+         */
+
+        PayPalPayment thingToBuy = getThingToBuy(PayPalPayment.PAYMENT_INTENT_SALE);
+
+        /*
+         * See getStuffToBuy(..) for examples of some available payment options.
+         */
+        Intent intent = new Intent(PaymentManager.this, PaymentActivity.class);
+
+        // send the same configuration for restart resiliency
+        intent.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION, config);
+
+        intent.putExtra(PaymentActivity.EXTRA_PAYMENT, thingToBuy);
+
+        startActivityForResult(intent, REQUEST_CODE_PAYMENT);
+    }
+
+    /**
+     * @param paymentIntent
+     * @return
+     */
+
+
+    private PayPalPayment getThingToBuy(String paymentIntent) {
+        return new PayPalPayment(new BigDecimal("2.00"), "USD", "PREMIUM FEATURES",
+                paymentIntent);
+    }
+
+
+
+
+
+    public void onHomePressed(View view){
+        finish();
+    }
+
+
+
+    /*
+     * This method shows use of optional payment details and item list.
+     */
+    /*private PayPalPayment getStuffToBuy(String paymentIntent) {
+        //--- include an item list, payment amount details
+        PayPalItem[] items =
+                {
+                        new PayPalItem("sample item #1", 2, new BigDecimal("87.50"), "USD",
+                                "s
+                                ku-12345678"),
+                        new PayPalItem("free sample item #2", 1, new BigDecimal("0.00"),
+                                "USD", "sku-zero-price"),
+                        new PayPalItem("sample item #3 with a longer name", 6, new BigDecimal("37.99"),
+                                "USD", "sku-33333")
+                };
+        BigDecimal subtotal = PayPalItem.getItemTotal(items);
+        BigDecimasrivastavaaal shipping = new BigDecimal("7.21");
+        BigDecimal tax = new BigDecimal("4.67");
+        PayPalPaymentDetails paymentDetails = new PayPalPaymentDetails(shipping, subtotal, tax);
+        BigDecimal amount = subtotal.add(shipping).add(tax);
+        PayPalPayment payment = new PayPalPayment(amount, "USD", "sample item", paymentIntent);
+        payment.items(items).paymentDetails(paymentDetails);
+
+        //--- set other optional fields like invoice_number, custom field, and soft_descriptor
+        payment.custom("This is text that will be associated with the payment that the app can use.");
+
+        return payment;
+    }
+*/
+    /*protected void displayResultText(String result) {
+     *//*   ((TextView)findViewById(R.id.txtResult)).setText("Result : " + result);
+        Toast.makeText(
+                getApplicationContext(),
+                result, Toast.LENGTH_LONG)
+                .show();*//*
+    }
+*/
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == REQUEST_CODE_PAYMENT) {
+            if (resultCode == Activity.RESULT_OK) {
+                PaymentConfirmation confirm =
+                        data.getParcelableExtra(PaymentActivity.EXTRA_RESULT_CONFIRMATION);
+                if (confirm != null) {
+                    try {
+                        Gson gson =  new Gson(); // new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
+                        PaymentResponse response =  gson.fromJson(confirm.toJSONObject().toString(), PaymentResponse.class);
+
+                        UserPaymentInfo.getInstatance().setPaymentId(response.getResponse().getId());
+                        UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.paidUser);
+                        findViewById(R.id.buyItBtn).setVisibility(View.GONE);
+                        findViewById(R.id.cancelBtn).setVisibility(View.VISIBLE);
+                        sendAuthorizationToServer();
+                        findViewById(R.id.content).setVisibility(View.GONE);
+                        findViewById(R.id.done_content).setVisibility(View.VISIBLE);
+
+                        //  cancelButton.setVisibility(View.VISIBLE);
+
+                        Log.i(TAG, confirm.toJSONObject().toString(4));
+                        Log.i(TAG, confirm.getPayment().toJSONObject().toString(4));
+
+                        //confirm.getProofOfPayment()
+
+                        /**
+                         *  TODO: send 'confirm' (and possibly confirm.getPayment() to your server for verification
+                         * or consent completion.
+                         * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/verify-mobile-payment/
+                         * for more details.
+                         *
+                         * For sample mobile backend interactions, see
+                         * https://github.com/paypal/rest-api-sdk-python/tree/master/samples/mobile_backend
+                         */
+                        //  displayResultText("PaymentConfirmation info received from PayPal");
+
+                    } catch (JSONException e) {
+                        Log.e(TAG, "an extremely unlikely failure occurred: ", e);
+                    }
+                }
+            } else if (resultCode == Activity.RESULT_CANCELED) {
+                Log.i(TAG, "The user canceled.");
+            } else if (resultCode == PaymentActivity.RESULT_EXTRAS_INVALID) {
+                Log.i(TAG,
+                        "An invalid Payment or PayPalConfiguration was submitted.");
+            }
+        } else if (requestCode == REQUEST_CODE_FUTURE_PAYMENT) {
+            if (resultCode == Activity.RESULT_OK) {
+                PayPalAuthorization auth =
+                        data.getParcelableExtra(PayPalFuturePaymentActivity.EXTRA_RESULT_AUTHORIZATION);
+                if (auth != null) {
+                    try {
+                        Log.i("FuturePaymentExample", auth.toJSONObject().toString(4));
+
+                        String authorization_code = auth.getAuthorizationCode();
+                        Log.i("FuturePaymentExample", authorization_code);
+
+                        //  sendAuthorizationToServer(auth);
+                        //  displayResultText("Future Payment code received from PayPal");
+
+                    } catch (JSONException e) {
+                        Log.e("FuturePaymentExample", "an extremely unlikely failure occurred: ", e);
+                    }
+                }
+            } else if (resultCode == Activity.RESULT_CANCELED) {
+                Log.i("FuturePaymentExample", "The user canceled.");
+            } else if (resultCode == PayPalFuturePaymentActivity.RESULT_EXTRAS_INVALID) {
+                Log.i(
+                        "FuturePaymentExample",
+                        "Probably the attempt to previously start the PayPalService had an invalid PayPalConfiguration.");
+            }
+        } else if (requestCode == REQUEST_CODE_PROFILE_SHARING) {
+            if (resultCode == Activity.RESULT_OK) {
+                PayPalAuthorization auth =
+                        data.getParcelableExtra(PayPalProfileSharingActivity.EXTRA_RESULT_AUTHORIZATION);
+                if (auth != null) {
+                    try {
+                        Log.i("ProfileSharingExample", auth.toJSONObject().toString(4));
+
+                        String authorization_code = auth.getAuthorizationCode();
+                        Log.i("ProfileSharingExample", authorization_code);
+
+                        // sendAuthorizationToServer(auth);
+                        //  displayResultText("Profile Sharing code received from PayPal");
+
+                    } catch (JSONException e) {
+                        Log.e("ProfileSharingExample", "an extremely unlikely failure occurred: ", e);
+                    }
+                }
+            } else if (resultCode == Activity.RESULT_CANCELED) {
+                Log.i("ProfileSharingExample", "The user canceled.");
+            } else if (resultCode == PayPalFuturePaymentActivity.RESULT_EXTRAS_INVALID) {
+                Log.i(
+                        "ProfileSharingExample",
+                        "Probably the attempt to previously start the PayPalService had an invalid PayPalConfiguration. Please see the docs.");
+            }
+        }
+        //   String s = UserPaymentInfo.getInstatance().getPaymentId();
+    }
+
+
+
+
+    private void sendAuthorizationToServer(/*PayPalAuthorization authorization*/) {
+        /**
+         * TODO: Send the authorization response to your server, where it can
+         * exchange the authorization code for OAuth access and refresh tokens.
+         *
+         * Your server must then store these tokens, so that your server code
+         * can execute payments for this user in the future.
+         *
+         * A more complete example that includes the required app-server to
+         * PayPal-server integration is available from
+         * https://github.com/paypal/rest-api-sdk-python/tree/master/samples/mobile_backend
+         */
+
+
+
+        String id=UserPaymentInfo.getInstatance().getUserId();
+        if(! id.equalsIgnoreCase("")) {
+            BackgroundExecuter.getInstance().execute(new
+                    ConfirmationRequester(UserPaymentInfo.getInstatance().getPaymentId(), id));
+        }
+
+    }
+
+    /*
+    public void onFuturePaymentPurchasePressed(View pressed) {
+        // Get the Client Metadata ID from the SDK
+        String metadataId = PayPalConfiguration.getClientMetadataId(this);
+
+        Log.i("FuturePaymentExample", "Client Metadata ID: " + metadataId);
+
+        // TODO: Send metadataId and transaction details to your server for processing with
+        // PayPal...
+        displayResultText("Client Metadata Id received from SDK");
+    }*/
+
+
+    @Override
+    public void onDestroy() {
+        // Stop service when done
+        stopService(new Intent(this, PayPalService.class));
+        super.onDestroy();
+    }
+
+
+    @Override
+    public void onPaymentConfirmationSuccess() {
+        UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.paidUser);
+    }
+
+    @Override
+    public void onPaymentConfirmationFailed() {
+        UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.unPaidUser);
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/UserPaymentInfo.java b/TMessagesProj/src/main/java/org/telegram/payment/UserPaymentInfo.java
new file mode 100644
index 000000000..1fb4b9b7e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/UserPaymentInfo.java
@@ -0,0 +1,73 @@
+package org.telegram.payment;
+
+/**
+ * Created by craterzone3 on 14/6/16.
+ */
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import org.telegram.messenger.ApplicationLoader;
+
+/**
+ *     This class will store all the
+ *     information about  user
+ *     paid , unpaid or his paid
+ *     verification is in pending
+ *     from server.
+ *
+ */
+
+
+    public class UserPaymentInfo {
+
+
+
+    public static final int paidUser        = 1 ;
+    public static final int unPaidUser      = 2 ;
+    public static final int pendingUser     = 3 ;
+
+
+    private static UserPaymentInfo _paymentInfo ;
+
+    public static UserPaymentInfo getInstatance() {
+        if (_paymentInfo == null) {
+            _paymentInfo = new UserPaymentInfo();
+            return _paymentInfo;
+        }
+    return _paymentInfo;
+
+    }
+
+
+    SharedPreferences
+ preferences = ApplicationLoader.applicationContext.getSharedPreferences("userpaymentinfo", Context.MODE_PRIVATE);
+    SharedPreferences.Editor editor = preferences.edit();
+
+    public void setPaymentId(String paymentId){
+      editor.putString("payment_id",paymentId).commit();
+    }
+
+    public void setPaymentStatus(int paymentStatus){
+        editor.putInt("payment_status",paymentStatus).commit();
+    }
+
+    //  pushString = preferences.getString("pushString", "");
+
+    public String getPaymentId(){
+       return preferences.getString("payment_id","");
+    }
+
+    public int getPaymentStatus(){
+        return preferences.getInt("payment_status",0);
+
+    }
+
+     public String getUserId(){
+         return  ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE)
+              .getString("social_id","");
+
+}
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/billingModel/ClientResponse.java b/TMessagesProj/src/main/java/org/telegram/payment/billingModel/ClientResponse.java
new file mode 100644
index 000000000..0d2b7edbf
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/billingModel/ClientResponse.java
@@ -0,0 +1,16 @@
+package org.telegram.payment.billingModel;
+
+/**
+ * Created by craterzone3 on 15/6/16.
+ */
+
+public class ClientResponse {
+
+    private String platform;
+    private String paypal_sdk_version;
+    private String product_name;
+    private String environment;
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/billingModel/PaymentResponse.java b/TMessagesProj/src/main/java/org/telegram/payment/billingModel/PaymentResponse.java
new file mode 100644
index 000000000..5ff4e486d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/billingModel/PaymentResponse.java
@@ -0,0 +1,33 @@
+package org.telegram.payment.billingModel;
+
+/**
+ * Created by craterzone3 on 14/6/16.
+ */
+
+public class PaymentResponse {
+
+    private Response response;
+
+    private ClientResponse client ;
+
+
+
+
+    public Response getResponse() {
+        return response;
+    }
+
+    public void setResponse(Response response) {
+        this.response = response;
+    }
+
+    public ClientResponse getClient() {
+        return client;
+    }
+
+    public void setClient(ClientResponse client) {
+        this.client = client;
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/billingModel/Response.java b/TMessagesProj/src/main/java/org/telegram/payment/billingModel/Response.java
new file mode 100644
index 000000000..16066fcfb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/payment/billingModel/Response.java
@@ -0,0 +1,50 @@
+package org.telegram.payment.billingModel;
+
+/**
+ * Created by craterzone3 on 15/6/16.
+ */
+
+public class Response {
+
+    private String state;
+    private String id;
+    private String create_time;
+    private String intent;
+
+
+    public String getState() {
+        return state;
+    }
+
+    public void setState(String state) {
+        this.state = state;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getCreate_time() {
+        return create_time;
+    }
+
+    public void setCreate_time(String create_time) {
+        this.create_time = create_time;
+    }
+
+    public String getIntent() {
+        return intent;
+    }
+
+    public void setIntent(String intent) {
+        this.intent = intent;
+    }
+
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/rangeseekbar/MultiSlider.java b/TMessagesProj/src/main/java/org/telegram/rangeseekbar/MultiSlider.java
new file mode 100644
index 000000000..92e0e5698
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/rangeseekbar/MultiSlider.java
@@ -0,0 +1,1405 @@
+/*
+ * Copyright (C) 2015 AppTik Project
+ * Copyright (C) 2014 Kalin Maldzhanski
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.rangeseekbar;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.graphics.drawable.DrawableCompat;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.ViewGroup;
+import android.view.ViewParent;
+
+import org.telegram.messenger.R;
+
+import java.util.LinkedList;
+
+public class MultiSlider extends View {
+
+    public interface OnThumbValueChangeListener {
+        void onValueChanged(MultiSlider multiSlider, Thumb thumb, int thumbIndex, int value);
+
+        void onStartTrackingTouch(MultiSlider multiSlider, Thumb thumb, int value);
+
+        void onStopTrackingTouch(MultiSlider multiSlider, Thumb thumb, int value);
+    }
+
+    private OnThumbValueChangeListener mOnThumbValueChangeListener;
+
+    int mMinWidth;
+    int mMaxWidth;
+    int mMinHeight;
+    int mMaxHeight;
+
+    /**
+     * global Min and Max
+     */
+    private int mScaleMin;
+    private int mScaleMax;
+    private int mStep;
+    private int mStepsThumbsApart;
+    private boolean mDrawThumbsApart;
+
+    private Drawable mTrack;
+
+    //used in constructor to prevent invalidating before ready state
+    private boolean mNoInvalidate;
+    private long mUiThreadId;
+
+    private boolean mInDrawing;
+    private boolean mAttached;
+    private boolean mRefreshIsPosted;
+
+    boolean mMirrorForRtl = false;
+
+    //list of all the loaded thumbs
+    private LinkedList<Thumb> mThumbs;
+
+
+    /**
+     * Whether this is user seekable.
+     */
+    boolean mIsUserSeekable = true;
+
+    /**
+     * On key presses (right or left), the amount to increment/decrement the
+     * progress.
+     */
+    private int mKeyProgressIncrement = 1;
+
+    private static final int NO_ALPHA = 0xFF;
+    private float mDisabledAlpha = 0.5f;
+
+    private int mScaledTouchSlop;
+    private float mTouchDownX;
+    //thumbs that are currently being dragged
+    private LinkedList<Thumb> mDraggingThumbs = new LinkedList<Thumb>();
+    //thumbs that are currently being touched
+    LinkedList<Thumb> exactTouched = null;
+
+    private final TypedArray a;
+
+    public class Thumb {
+        //abs min value for this thumb
+        private int min;
+        //abs max value for this thumb
+        private int max;
+        //current value of this thumb
+        private int value;
+        //thumb drawable, can be shared
+        private Drawable thumb;
+        //thumb range drawable, can also be shared
+        //this is the line from the beginning or the previous thumb if any until the this one.
+        private Drawable range;
+        private int thumbOffset;
+
+        //cannot be moved if invisible
+        private boolean invisibleThumb = false;
+
+        public Drawable getRange() {
+            return range;
+        }
+
+        public Thumb setRange(Drawable range) {
+            this.range = range;
+            return this;
+        }
+
+        public Thumb() {
+        }
+
+        public boolean isInvisibleThumb() {
+            return invisibleThumb;
+        }
+
+        public void setInvisibleThumb(boolean invisibleThumb) {
+            this.invisibleThumb = invisibleThumb;
+        }
+
+
+        public int getDrawableValue() {
+            if (thumb == null) return 0;
+            return Math.round(getScaleSize() * thumb.getBounds().width() / getWidth());
+        }
+
+
+        /**
+         * Only useful the keepThumbsApart is set, otherwise return ScaleMin
+         *
+         * @return the minimum value a thumb can obtain depending on other thumbs before it
+         */
+        public int getPossibleMin() {
+            int res = mScaleMin;
+            res += mThumbs.indexOf(this) * mStepsThumbsApart;
+            return res;
+        }
+
+        /**
+         * Only useful the keepThumbsApart is set, otherwise return ScaleMax
+         *
+         * @return the maximum value a thumb can have depending the thumbs after it
+         */
+        public int getPossibleMax() {
+            int res = mScaleMax;
+            res -= (mThumbs.size() - 1 - mThumbs.indexOf(this)) * mStepsThumbsApart;
+            return res;
+        }
+
+        public int getMin() {
+            return min;
+        }
+
+        public Thumb setMin(int min) {
+            if (min > this.max) {
+                min = this.max;
+            }
+            if (min < mScaleMin) {
+                min = mScaleMin;
+            }
+            if (this.min != min) {
+                this.min = min;
+                if (value < this.min) {
+                    value = this.min;
+                    invalidate();
+                }
+            }
+            return this;
+        }
+
+        public int getMax() {
+            return max;
+        }
+
+        public Thumb setMax(int max) {
+            if (max < this.min) {
+                max = this.min;
+            }
+            if (max > mScaleMax) {
+                max = mScaleMax;
+            }
+            if (this.max != max) {
+                this.max = max;
+                if (value > this.max) {
+                    value = this.max;
+                    invalidate();
+                }
+            }
+            return this;
+        }
+
+        public int getValue() {
+            return value;
+        }
+
+        public Thumb setValue(int value) {
+            setThumbValue(this, value, false);
+            return this;
+        }
+
+        public Drawable getThumb() {
+            return thumb;
+        }
+
+        public Thumb setThumb(Drawable mThumb) {
+            this.thumb = mThumb;
+            return this;
+        }
+
+        public int getThumbOffset() {
+            return thumbOffset;
+        }
+
+        public Thumb setThumbOffset(int mThumbOffset) {
+            this.thumbOffset = mThumbOffset;
+            return this;
+        }
+
+
+    }
+
+    public MultiSlider(Context context) {
+        this(context, null);
+    }
+
+    public MultiSlider(Context context, AttributeSet attrs) {
+        this(context, attrs, R.attr.multiSliderStyle);
+    }
+
+    public MultiSlider(Context context, AttributeSet attrs, int defStyle) {
+        this(context, attrs, defStyle, 0);
+    }
+
+    public MultiSlider(Context context, AttributeSet attrs, int defStyle, int styleRes) {
+        super(context, attrs, defStyle);
+
+        mUiThreadId = Thread.currentThread().getId();
+
+        a = context.obtainStyledAttributes(attrs, R.styleable.MultiSlider, defStyle, styleRes);
+        mNoInvalidate = true;
+        int numThumbs = a.getInt(R.styleable.MultiSlider_thumbNumber, 2);
+        initMultiSlider(numThumbs);
+
+        Drawable trackDrawable = a.getDrawable(R.styleable.MultiSlider_android_track);
+        if (trackDrawable == null) {
+            trackDrawable = ContextCompat.getDrawable(getContext(), R.drawable.multislider_scrubber_track_holo_light);
+        }
+
+        setTrackDrawable(getTintedDrawable(trackDrawable, a.getColor(R.styleable.MultiSlider_trackColor, 0)));
+
+        //TODO
+//        mMinWidth = a.getDimensionPixelSize(R.styleable.MultiSlider_minWidth, mMinWidth);
+//        mMaxWidth = a.getDimensionPixelSize(R.styleable.MultiSlider_maxWidth, mMaxWidth);
+//        mMinHeight = a.getDimensionPixelSize(R.styleable.MultiSlider_minHeight, mMinHeight);
+//        mMaxHeight = a.getDimensionPixelSize(R.styleable.MultiSlider_maxHeight, mMaxHeight);
+
+
+        setStep(a.getInt(R.styleable.MultiSlider_scaleStep, mStep));
+        setStepsThumbsApart(a.getInt(R.styleable.MultiSlider_stepsThumbsApart, mStepsThumbsApart));
+        setDrawThumbsApart(a.getBoolean(R.styleable.MultiSlider_drawThumbsApart, mDrawThumbsApart));
+        setMax(a.getInt(R.styleable.MultiSlider_scaleMax, mScaleMax), true);
+        setMin(a.getInt(R.styleable.MultiSlider_scaleMin, mScaleMin), true);
+
+
+        mMirrorForRtl = a.getBoolean(R.styleable.MultiSlider_mirrorForRTL, mMirrorForRtl);
+
+        // --> now place thumbs
+
+        Drawable thumbDrawable = a.getDrawable(R.styleable.MultiSlider_android_thumb);
+
+        if (thumbDrawable == null) {
+            thumbDrawable = ContextCompat.getDrawable(getContext(), R.drawable.multislider_scrubber_control_selector_holo_light);
+        }
+
+        Drawable range = a.getDrawable(R.styleable.MultiSlider_range);
+        if (range == null) {
+            range = ContextCompat.getDrawable(getContext(), R.drawable.multislider_scrubber_primary_holo);
+        }
+
+        Drawable range1 = a.getDrawable(R.styleable.MultiSlider_range1);
+        Drawable range2 = a.getDrawable(R.styleable.MultiSlider_range2);
+
+        setThumbDrawables(thumbDrawable, range, range1, range2); // will guess thumbOffset if thumb != null...
+        // ...but allow layout to override this
+
+        int thumbOffset = a.getDimensionPixelOffset(R.styleable.MultiSlider_android_thumbOffset, thumbDrawable.getIntrinsicWidth() / 2);
+        setThumbOffset(thumbOffset);
+
+        positionThumbs();
+
+        mScaledTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
+        mNoInvalidate = false;
+        a.recycle();
+    }
+
+    public int getStepsThumbsApart() {
+        return mStepsThumbsApart;
+    }
+
+    public void setStepsThumbsApart(int stepsThumbsApart) {
+        if (stepsThumbsApart < 0) stepsThumbsApart = 0;
+        this.mStepsThumbsApart = stepsThumbsApart;
+    }
+
+    public int getStep() {
+        return mStep;
+    }
+
+    public void setStep(int mStep) {
+        this.mStep = mStep;
+    }
+
+    private int getScaleSize() {
+        return mScaleMax - mScaleMin;
+    }
+
+    private void positionThumbs() {
+        if (mThumbs == null || mThumbs.isEmpty()) return;
+
+        if (mThumbs.size() > 0) {
+            mThumbs.getFirst().setValue(mScaleMin);
+        }
+        if (mThumbs.size() > 1) {
+            mThumbs.getLast().setValue(mScaleMax);
+        }
+        if (mThumbs.size() > 2) {
+            int even = (mScaleMax - mScaleMin) / (mThumbs.size() - 1);
+            int lastPos = mScaleMax - even;
+            for (int i = mThumbs.size() - 2; i > 0; i--) {
+                mThumbs.get(i).setValue(lastPos);
+                lastPos -= even;
+            }
+        }
+    }
+
+    public void setOnThumbValueChangeListener(OnThumbValueChangeListener l) {
+        mOnThumbValueChangeListener = l;
+    }
+
+    public boolean isDrawThumbsApart() {
+        return mDrawThumbsApart;
+    }
+
+    public void setDrawThumbsApart(boolean drawThumbsApart) {
+        this.mDrawThumbsApart = drawThumbsApart;
+    }
+
+    private void initMultiSlider(int numThumbs) {
+        mStep = 1;
+        mStepsThumbsApart = 0;
+        mDrawThumbsApart = false;
+        mScaleMin = 0;
+        mScaleMax = 100;
+        mMinWidth = 24;
+        mMaxWidth = 48;
+        mMinHeight = 24;
+        mMaxHeight = 48;
+        mThumbs = new LinkedList<Thumb>();
+        for (int i = 0; i < numThumbs; i++) {
+            mThumbs.add(new Thumb().setMin(mScaleMin).setMax(mScaleMax));
+        }
+    }
+
+    public void setThumbOffset(int thumbOffset) {
+        for (Thumb thumb : mThumbs) {
+            thumb.setThumbOffset(thumbOffset);
+        }
+        invalidate();
+    }
+
+    public void setTrackDrawable(Drawable d) {
+        boolean needUpdate;
+        if (mTrack != null && d != mTrack) {
+            mTrack.setCallback(null);
+            needUpdate = true;
+        } else {
+            needUpdate = false;
+        }
+
+        if (d != null) {
+            d.setCallback(this);
+//            if (canResolveLayoutDirection()) {
+//                d.setLayoutDirection(getLayoutDirection());
+//            }
+
+            // Make sure the ProgressBar is always tall enough
+            int drawableHeight = d.getMinimumHeight();
+            if (mMaxHeight < drawableHeight) {
+                mMaxHeight = drawableHeight;
+                requestLayout();
+            }
+        }
+        mTrack = d;
+
+        if (needUpdate) {
+            updateTrackBounds(getWidth(), getHeight());
+            updateTrackState();
+            //TODO update all thumbs with their range tracks also
+        }
+    }
+
+    private int optThumbValue(Thumb thumb, int value) {
+        if (thumb == null || thumb.getThumb() == null) return value;
+        int currIdx = mThumbs.indexOf(thumb);
+
+
+        if (mThumbs.size() > currIdx + 1 && value > mThumbs.get(currIdx + 1).getValue() - mStepsThumbsApart * mStep) {
+            value = mThumbs.get(currIdx + 1).getValue() - mStepsThumbsApart * mStep;
+        }
+
+        if (currIdx > 0 && value < mThumbs.get(currIdx - 1).getValue() + mStepsThumbsApart * mStep) {
+            value = mThumbs.get(currIdx - 1).getValue() + mStepsThumbsApart * mStep;
+        }
+
+        if ((value - mScaleMin) % mStep != 0) {
+            value += mStep - ((value - mScaleMin) % mStep);
+        }
+
+        if (value < thumb.getMin()) {
+            value = thumb.getMin();
+        }
+
+        if (value > thumb.getMax()) {
+            value = thumb.getMax();
+        }
+
+        return value;
+    }
+
+
+    /**
+     * Refreshes the value for the specific thumb
+     *
+     * @param thumb    the thumb which value is going to be changed
+     * @param value    the new value
+     * @param fromUser if the request is coming form the user or the client
+     */
+    private synchronized void setThumbValue(Thumb thumb, int value, boolean fromUser) {
+        if (thumb == null || thumb.getThumb() == null) return;
+
+        value = optThumbValue(thumb, value);
+
+        if (value != thumb.getValue()) {
+            thumb.value = value;
+        }
+        if (hasOnThumbValueChangeListener()) {
+            mOnThumbValueChangeListener.onValueChanged(this, thumb, mThumbs.indexOf(thumb), thumb.getValue());
+        }
+        updateThumb(thumb, getWidth(), getHeight());
+    }
+
+    private synchronized void setThumbValue(int thumb, int value, boolean fromUser) {
+        setThumbValue(mThumbs.get(thumb), value, fromUser);
+    }
+
+    private void updateTrackBounds(int w, int h) {
+        // onDraw will translate the canvas so we draw starting at 0,0.
+        // Subtract out padding for the purposes of the calculations below.
+        w -= getPaddingRight() + getPaddingLeft();
+        h -= getPaddingTop() + getPaddingBottom();
+
+        int right = w;
+        int bottom = h;
+        int top = 0;
+        int left = 0;
+
+        if (mTrack != null) {
+            mTrack.setBounds(0, 0, right, bottom);
+        }
+    }
+
+    private void updateTrackState() {
+        int[] state = getDrawableState();
+
+        if (mTrack != null && mTrack.isStateful()) {
+            mTrack.setState(state);
+        }
+    }
+
+    /**
+     * Sets the thumb drawable for all thumbs
+     * <p/>
+     * If the thumb is a valid drawable (i.e. not null), half its width will be
+     * used as the new thumb offset (@see #setThumbOffset(int)).
+     *
+     * @param thumb Drawable representing the thumb
+     */
+    private void setThumbDrawables(Drawable thumb, Drawable range, Drawable range1, Drawable range2) {
+        if (thumb == null) return;
+        boolean needUpdate;
+        Drawable rangeDrawable;
+
+        // This way, calling setThumbDrawables again with the same bitmap will result in
+        // it recalculating thumbOffset (if for example it the bounds of the
+        // drawable changed)
+        int curr = 0;
+        int padding = 0;
+        for (Thumb mThumb : mThumbs) {
+            curr++;
+            if (mThumb.getThumb() != null && thumb != mThumb.getThumb()) {
+                mThumb.getThumb().setCallback(null);
+                needUpdate = true;
+            } else {
+                needUpdate = false;
+            }
+
+            if (curr == 1 && range1 != null) {
+                rangeDrawable = getTintedDrawable(range1, a.getColor(R.styleable.MultiSlider_range1Color, 0));
+            } else if (curr == 2 && range2 != null) {
+                rangeDrawable = getTintedDrawable(range2, a.getColor(R.styleable.MultiSlider_range2Color, 0));
+            } else {
+                rangeDrawable = getTintedDrawable(range.getConstantState().newDrawable(), a.getColor(R.styleable.MultiSlider_rangeColor, 0));
+            }
+
+            mThumb.setRange(rangeDrawable);
+
+            Drawable newDrawable = getTintedDrawable(thumb.getConstantState().newDrawable(), a.getColor(R.styleable.MultiSlider_thumbColor, 0));
+            newDrawable.setCallback(this);
+
+            // Assuming the thumb drawable is symmetric, set the thumb offset
+            // such that the thumb will hang halfway off either edge of the
+            // progress bar.
+            mThumb.setThumbOffset(thumb.getIntrinsicWidth() / 2);
+
+            padding = Math.max(padding, mThumb.getThumbOffset());
+            // If we're updating get the new states
+            if (needUpdate &&
+                    (newDrawable.getIntrinsicWidth() != mThumb.getThumb().getIntrinsicWidth()
+                            || newDrawable.getIntrinsicHeight() != mThumb.getThumb().getIntrinsicHeight())) {
+                requestLayout();
+            }
+            mThumb.setThumb(newDrawable);
+
+            if (needUpdate) {
+                invalidate();
+                if (thumb != null && thumb.isStateful()) {
+                    // Note that if the states are different this won't work.
+                    // For now, let's consider that an app bug.
+                    int[] state = getDrawableState();
+                    thumb.setState(state);
+                }
+
+            }
+        }
+        setPadding(padding, getPaddingTop(), padding, getPaddingBottom());
+
+    }
+
+    /**
+     * Return the drawable used to represent the scroll thumb - the component that
+     * the user can drag back and forth indicating the current value by its position.
+     *
+     * @return The thumb at position pos
+     */
+    public Thumb getThumb(int pos) {
+        return mThumbs.get(pos);
+    }
+
+    /**
+     * Sets the amount of progress changed via the arrow keys.
+     *
+     * @param increment The amount to increment or decrement when the user
+     *                  presses the arrow keys.
+     */
+    public void setKeyProgressIncrement(int increment) {
+        mKeyProgressIncrement = increment < 0 ? -increment : increment;
+    }
+
+    /**
+     * Returns the amount of progress changed via the arrow keys.
+     * <p/>
+     * By default, this will be a value that is derived from the max progress.
+     *
+     * @return The amount to increment or decrement when the user presses the
+     * arrow keys. This will be positive.
+     */
+    public int getKeyProgressIncrement() {
+        return mKeyProgressIncrement;
+    }
+
+    public synchronized void setMax(int max) {
+        setMax(max, true, false);
+    }
+
+    public synchronized void setMax(int max, boolean extendMaxForThumbs) {
+        setMax(max, extendMaxForThumbs, false);
+    }
+
+    public synchronized void setMax(int max, boolean extendMaxForThumbs, boolean repositionThumbs) {
+        if (max < mScaleMin) {
+            max = mScaleMin;
+        }
+
+        if (max != mScaleMax) {
+            mScaleMax = max;
+
+            //check for thumbs out of bounds and adjust the max for those exceeding the new one
+            for (Thumb thumb : mThumbs) {
+                if (extendMaxForThumbs) {
+                    thumb.setMax(max);
+                } else if (thumb.getMax() > max) {
+                    thumb.setMax(max);
+                }
+
+                if (thumb.getValue() > max) {
+                    setThumbValue(thumb, max, false);
+                }
+
+
+            }
+            if (repositionThumbs)
+                positionThumbs();
+
+            postInvalidate();
+        }
+
+        if ((mKeyProgressIncrement == 0) || (mScaleMax / mKeyProgressIncrement > 20)) {
+            // It will take the user too long to change this via keys, change it
+            // to something more reasonable
+            setKeyProgressIncrement(Math.max(1, Math.round((float) mScaleMax / 20)));
+        }
+    }
+
+    public synchronized void setMin(int min) {
+        setMin(min, true, false);
+    }
+
+    public synchronized void setMin(int min, boolean extendMaxForThumbs) {
+        setMin(min, extendMaxForThumbs, false);
+    }
+
+    public synchronized void setMin(int min, boolean extendMaxForThumbs, boolean repositionThumbs) {
+        if (min > mScaleMax) {
+            min = mScaleMax;
+        }
+
+        if (min != mScaleMin) {
+            mScaleMin = min;
+
+            //check for thumbs out of bounds and adjust the max for those exceeding the new one
+            for (Thumb thumb : mThumbs) {
+                if (extendMaxForThumbs) {
+                    thumb.setMin(min);
+                } else if (thumb.getMin() < min) {
+                    thumb.setMin(min);
+                }
+
+                if (thumb.getValue() < min) {
+                    setThumbValue(thumb, min, false);
+                }
+
+            }
+            if (repositionThumbs)
+                positionThumbs();
+
+            postInvalidate();
+        }
+
+        if ((mKeyProgressIncrement == 0) || (mScaleMax / mKeyProgressIncrement > 20)) {
+            // It will take the user too long to change this via keys, change it
+            // to something more reasonable
+            setKeyProgressIncrement(Math.max(1, Math.round((float) mScaleMax / 20)));
+        }
+    }
+
+    @Override
+    protected boolean verifyDrawable(Drawable who) {
+        for (Thumb thumb : mThumbs) {
+            if (thumb.getThumb() != null && who == thumb.getThumb()) return true;
+        }
+        return who == mTrack || super.verifyDrawable(who);
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    @Override
+    public void jumpDrawablesToCurrentState() {
+        super.jumpDrawablesToCurrentState();
+        for (Thumb thumb : mThumbs) {
+            if (thumb.getThumb() != null) thumb.getThumb().jumpToCurrentState();
+        }
+    }
+
+    @Override
+    protected void drawableStateChanged() {
+        super.drawableStateChanged();
+        if (mDraggingThumbs != null && !mDraggingThumbs.isEmpty()) {
+            int[] state = getDrawableState();
+            for (Thumb thumb : mDraggingThumbs) {
+                if (thumb.getThumb() != null)
+                    thumb.getThumb().setState(state);
+            }
+            for (Thumb thumb : mThumbs) {
+                if (!mDraggingThumbs.contains(thumb) && thumb.getThumb() != null && thumb.getThumb().isStateful()) {
+                    thumb.getThumb().setState(new int[]{android.R.attr.state_enabled});
+                }
+            }
+        } else {
+            int[] state = getDrawableState();
+            for (Thumb thumb : mThumbs) {
+                if (thumb.getThumb() != null && thumb.getThumb().isStateful()) {
+                    thumb.getThumb().setState(state);
+                }
+            }
+        }
+    }
+
+
+    /**
+     * Updates Thumb drawable position according to the new w,h
+     *
+     * @param thumb the thumb object
+     * @param w     width
+     * @param h     height
+     */
+    private void updateThumb(Thumb thumb, int w, int h) {
+        int thumbHeight = thumb == null ? 0 : thumb.getThumb().getIntrinsicHeight();
+        // The max height does not incorporate padding, whereas the height
+        // parameter does
+        int trackHeight = h - getPaddingTop() - getPaddingBottom();
+
+        float scale = getScaleSize() > 0 ? (float) thumb.getValue() / (float) getScaleSize() : 0;
+
+        Drawable prevThumb = null;
+        int currIdx = mThumbs.indexOf(thumb);
+        if (currIdx > 0) {
+            prevThumb = mThumbs.get(currIdx - 1).getThumb();
+        }
+
+        if (thumbHeight > trackHeight) {
+            if (thumb != null) {
+                setThumbPos(w, h, thumb.getThumb(), prevThumb, thumb.getRange(), scale, 0, thumb.getThumbOffset(), getThumbOptOffset(thumb));
+            }
+            int gapForCenteringTrack = (thumbHeight - trackHeight) / 2;
+            if (mTrack != null) {
+                // Canvas will be translated by the padding, so 0,0 is where we start drawing
+                mTrack.setBounds(0, gapForCenteringTrack,
+                        w - getPaddingRight() - getPaddingLeft(), h - getPaddingBottom() - gapForCenteringTrack
+                                - getPaddingTop());
+            }
+        } else {
+            if (mTrack != null) {
+                // Canvas will be translated by the padding, so 0,0 is where we start drawing
+                mTrack.setBounds(0, 0, w - getPaddingRight() - getPaddingLeft(), h - getPaddingBottom()
+                        - getPaddingTop());
+            }
+            int gap = (trackHeight - thumbHeight) / 2;
+            if (thumb != null) {
+                setThumbPos(w, h, thumb.getThumb(), prevThumb, thumb.getRange(), scale, gap, thumb.getThumbOffset(), getThumbOptOffset(thumb));
+            }
+        }
+
+        //update thumbs after it
+        for (int i = currIdx + 1; i < mThumbs.size(); i++) {
+            int gap = (trackHeight - thumbHeight) / 2;
+            scale = getScaleSize() > 0 ? (float) mThumbs.get(i).getValue() / (float) getScaleSize() : 0;
+            setThumbPos(w, h, mThumbs.get(i).getThumb(), mThumbs.get(i - 1).getThumb(), mThumbs.get(i).getRange(), scale, gap, mThumbs.get(i).getThumbOffset(), getThumbOptOffset(mThumbs.get(i)));
+        }
+    }
+
+
+    /**
+     * @param gap If set to {@link Integer#MIN_VALUE}, this will be ignored and
+     */
+    private void setThumbPos(int w, int h, Drawable thumb, Drawable prevThumb, Drawable range, float scale, int gap, int thumbOffset, int optThumbOffset) {
+        final int available = getAvailable();
+        int thumbWidth = thumb.getIntrinsicWidth();
+        int thumbHeight = thumb.getIntrinsicHeight();
+
+        //todo change available before also
+
+
+        float scaleOffset = getScaleSize() > 0 ? (float) mScaleMin / (float) getScaleSize() : 0;
+
+        int thumbPos = (int) (scale * available - scaleOffset * available + 0.5f);
+
+        int topBound, bottomBound;
+        if (gap == Integer.MIN_VALUE) {
+            Rect oldBounds = thumb.getBounds();
+            topBound = oldBounds.top;
+            bottomBound = oldBounds.bottom;
+        } else {
+            topBound = gap;
+            bottomBound = gap + thumbHeight;
+        }
+
+        // Canvas will be translated, so 0,0 is where we start drawing
+        final int left = (isLayoutRtl() && mMirrorForRtl) ? available - thumbPos - optThumbOffset : thumbPos + optThumbOffset;
+
+        thumb.setBounds(left, topBound, left + thumbWidth, bottomBound);
+
+        w -= getPaddingRight() + getPaddingLeft();
+        h -= getPaddingTop() + getPaddingBottom();
+
+        int right = w;
+        int bottom = h;
+
+        int leftRange = 0;
+        if (prevThumb != null) {
+            leftRange = prevThumb.getBounds().left;
+        }
+        if (range != null) {
+            range.setBounds(leftRange, 0, left, bottom);
+        }
+
+        invalidate();
+    }
+
+    @Override
+    protected synchronized void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        // --> draw track
+        if (mTrack != null) {
+            // Translate canvas so a indeterminate circular progress bar with padding
+            // rotates properly in its animation
+            canvas.save();
+            if (isLayoutRtl() && mMirrorForRtl) {
+                canvas.translate(getWidth() - getPaddingRight(), getPaddingTop());
+                canvas.scale(-1.0f, 1.0f);
+            } else {
+                canvas.translate(getPaddingLeft(), getPaddingTop());
+            }
+            mTrack.draw(canvas);
+            canvas.restore();
+        }
+
+        // --> draw ranges
+
+        for (Thumb thumb : mThumbs) {
+            if (thumb.getRange() != null) {
+                canvas.save();
+                if (isLayoutRtl() && mMirrorForRtl) {
+                    canvas.translate(getWidth() - getPaddingRight(), getPaddingTop());
+                    canvas.scale(-1.0f, 1.0f);
+                } else {
+                    canvas.translate(getPaddingLeft(), getPaddingTop());
+                }
+                thumb.getRange().draw(canvas);
+
+                canvas.restore();
+            }
+        }
+
+        // --> then draw thumbs
+        for (Thumb thumb : mThumbs) {
+            if (thumb.getThumb() != null && !thumb.isInvisibleThumb()) {
+                canvas.save();
+                // Translate the padding. For the x, we need to allow the thumb to
+                // draw in its extra space
+                canvas.translate(getPaddingLeft() - thumb.getThumbOffset(), getPaddingTop());
+                // float scale = mScaleMax > 0 ? (float) thumb.getValue() / (float) mScaleMax : 0;
+                thumb.getThumb().draw(canvas);
+
+                canvas.restore();
+            }
+        }
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    @Override
+    protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+
+        int maxThumbHeight = 0;
+        int maxRangeHeight = 0;
+        for (Thumb thumb : mThumbs) {
+            if (thumb.getThumb() != null) {
+                maxThumbHeight = Math.max(thumb.getThumb().getIntrinsicHeight(), maxThumbHeight);
+                maxRangeHeight = Math.max(thumb.getThumb().getIntrinsicHeight(), maxRangeHeight);
+
+            }
+        }
+
+        int dw = 0;
+        int dh = 0;
+        if (mTrack != null) {
+            dw = Math.max(mMinWidth, Math.min(mMaxWidth, mTrack.getIntrinsicWidth()));
+            dh = Math.max(mMinHeight, Math.min(mMaxHeight, mTrack.getIntrinsicHeight()));
+            dh = Math.max(maxRangeHeight, dh);
+            dh = Math.max(maxThumbHeight, dh);
+        }
+        dw += getPaddingLeft() + getPaddingRight();
+        dh += getPaddingTop() + getPaddingBottom();
+
+        setMeasuredDimension(resolveSizeAndState(dw, widthMeasureSpec, 0),
+                resolveSizeAndState(dh, heightMeasureSpec, 0));
+    }
+
+
+    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    public boolean isInScrollingContainer() {
+        ViewParent p = getParent();
+        while (p != null && p instanceof ViewGroup) {
+            if (((ViewGroup) p).shouldDelayChildPressedState()) {
+                return true;
+            }
+            p = p.getParent();
+        }
+        return false;
+    }
+
+    private int getAvailable() {
+        int available = getWidth() - getPaddingLeft() - getPaddingRight();
+        if (mThumbs != null && mThumbs.size() > 0) {
+            available -= getThumbOptOffset(mThumbs.getLast());
+        }
+        //TODO check for the offset
+        return available;
+    }
+
+    /**
+     * Get closest thumb to play with,
+     * incase more than one get the last one
+     *
+     * @param x X coordinate of the touch
+     * @return
+     */
+    private LinkedList<Thumb> getClosestThumb(int x) {
+        LinkedList<Thumb> exact = new LinkedList<Thumb>();
+        Thumb closest = null;
+        int currDistance = getAvailable() + 1;
+
+        for (Thumb thumb : mThumbs) {
+            if (thumb.getThumb() == null || thumb.isInvisibleThumb()) continue;
+
+            int minV = x - thumb.getThumb().getIntrinsicWidth();
+            int maxV = x + thumb.getThumb().getIntrinsicWidth();
+            if (thumb.getThumb().getBounds().centerX() >= minV && thumb.getThumb().getBounds().centerX() <= maxV) {
+                //we have exact match
+                // we add them all so we can choose later which one to move
+                exact.add(thumb);
+            } else if (Math.abs(thumb.getThumb().getBounds().centerX() - x) <= currDistance) {
+                if (Math.abs(thumb.getThumb().getBounds().centerX() - x) == currDistance) {
+                    if (x > getWidth() / 2) {
+                        //left one(s) has more place to move
+                        closest = thumb;
+                    } else {
+                        //right one(s) has more place to move
+
+                    }
+                } else {
+                    if (thumb.getThumb() != null) {
+                        currDistance = Math.abs(thumb.getThumb().getBounds().centerX() - x);
+                        closest = thumb;
+                    }
+                }
+            }
+        }
+
+        if (exact.isEmpty() && closest != null) {
+            exact.add(closest);
+        }
+        return exact;
+    }
+
+    private Thumb getMostMovable(LinkedList<Thumb> thumbs, MotionEvent event) {
+        Thumb res = null;
+        int maxChange = 0;
+        if (thumbs != null && !thumbs.isEmpty()) {
+
+            if (thumbs.getFirst().getValue() == getValue(event, thumbs.getFirst())) return null;
+
+            for (Thumb thumb : thumbs) {
+                int optValue = (getValue(event, thumbs.getFirst()) > thumb.getValue()) ? mScaleMax : mScaleMin;
+                int currChange = Math.abs(thumb.getValue() - optThumbValue(thumb, optValue));
+                if (currChange > maxChange) {
+                    maxChange = currChange;
+                    res = thumb;
+                }
+            }
+        }
+        return res;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (!mIsUserSeekable || !isEnabled()) {
+            return false;
+        }
+
+        int pointerIdx = event.getActionIndex();
+
+
+        Thumb currThumb = null;
+        if (mDraggingThumbs.size() > pointerIdx) {
+            currThumb = mDraggingThumbs.get(pointerIdx);
+        } else {
+
+            LinkedList<Thumb> closestOnes = getClosestThumb((int) event.getX(event.getActionIndex()));
+            if (closestOnes != null && !closestOnes.isEmpty()) {
+                if (event.getActionMasked() == MotionEvent.ACTION_DOWN || event.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN) {
+                    if (closestOnes.size() == 1) {
+                        currThumb = closestOnes.getFirst();
+                        onStartTrackingTouch(currThumb);
+                        drawableStateChanged();
+                    } else {
+                        //we have more than one thumb at the same place and we touched there
+                        exactTouched = closestOnes;
+                    }
+                } else if (exactTouched != null && !exactTouched.isEmpty() && event.getActionMasked() == MotionEvent.ACTION_MOVE) {
+                    //we have thumbs waiting to be selected to move
+                    currThumb = getMostMovable(exactTouched, event);
+                    //check if move actually changed value
+                    if (currThumb == null) return false;
+                    exactTouched = null;
+                    onStartTrackingTouch(currThumb);
+                    drawableStateChanged();
+                } else {
+                    currThumb = closestOnes.getFirst();
+                    onStartTrackingTouch(currThumb);
+                    drawableStateChanged();
+                }
+            }
+
+
+        }
+
+
+        switch (event.getActionMasked()) {
+            case MotionEvent.ACTION_DOWN:
+                if (isInScrollingContainer()) {
+                    mTouchDownX = event.getX();
+                } else {
+                    //currThumb = getClosestThumb(newValue);
+                    //onStartTrackingTouch(currThumb);
+                    setPressed(true);
+                    if (currThumb != null && currThumb.getThumb() != null) {
+                        invalidate(currThumb.getThumb().getBounds()); // This may be within the padding region
+                    }
+
+                    int value = getValue(event, currThumb);
+                    setThumbValue(currThumb, value, true);
+                    attemptClaimDrag();
+                }
+                break;
+
+            case MotionEvent.ACTION_POINTER_DOWN:
+                if (isInScrollingContainer()) {
+                    mTouchDownX = event.getX();
+                } else {
+                    //currThumb = getClosestThumb(newValue);
+                    //onStartTrackingTouch(currThumb);
+                    setPressed(true);
+                    if (currThumb != null && currThumb.getThumb() != null) {
+                        invalidate(currThumb.getThumb().getBounds()); // This may be within the padding region
+                    }
+
+                    setThumbValue(currThumb, getValue(event, currThumb), true);
+                    attemptClaimDrag();
+                }
+                invalidate();
+                break;
+
+            //with move we dont have pointer action so set them all
+            case MotionEvent.ACTION_MOVE:
+                if (!mDraggingThumbs.isEmpty()) {
+
+                    //need the index
+                    for (int i = 0; i < mDraggingThumbs.size(); i++) {
+                        setPressed(true);
+                        if (mDraggingThumbs.get(i) != null && mDraggingThumbs.get(i).getThumb() != null) {
+                            invalidate(mDraggingThumbs.get(i).getThumb().getBounds()); // This may be within the padding region
+                        }
+                        setThumbValue(mDraggingThumbs.get(i), getValue(event, i, mDraggingThumbs.get(i)), true);
+                        attemptClaimDrag();
+                    }
+
+                } else {
+                    final float x = event.getX();
+                    if (Math.abs(x - mTouchDownX) > mScaledTouchSlop) {
+                        //currThumb = getClosestThumb(newValue);
+                        //onStartTrackingTouch(currThumb);
+                        setPressed(true);
+                        if (currThumb != null && currThumb.getThumb() != null) {
+                            invalidate(currThumb.getThumb().getBounds()); // This may be within the padding region
+                        }
+
+                        setThumbValue(currThumb, getValue(event, currThumb), true);
+                        attemptClaimDrag();
+                    }
+                }
+
+                break;
+
+            //there are other pointers left
+            case MotionEvent.ACTION_POINTER_UP:
+                if (currThumb != null) {
+                    setThumbValue(currThumb, getValue(event, currThumb), true);
+                    onStopTrackingTouch(currThumb);
+                } else {
+//                    currThumb = getClosestThumb(newValue);
+//                    // Touch up when we never crossed the touch slop threshold should
+//                    // be interpreted as a tap-seek to that location.
+//                    onStartTrackingTouch(currThumb);
+//                    setThumbValue(currThumb, newValue, true);
+//                    onStopTrackingTouch(currThumb);
+                }
+
+                // ProgressBar doesn't know to repaint the thumb drawable
+                // in its inactive state when the touch stops (because the
+                // value has not apparently changed)
+                invalidate();
+                break;
+
+            //we normally have one single pointer here and its gone now
+            case MotionEvent.ACTION_UP:
+                if (currThumb != null) {
+                    int value = getValue(event, currThumb);
+                    setThumbValue(currThumb, value, true);
+                    onStopTrackingTouch(currThumb);
+                } else {
+//                    currThumb = getClosestThumb(newValue);
+//                    // Touch up when we never crossed the touch slop threshold should
+//                    // be interpreted as a tap-seek to that location.
+//                    onStartTrackingTouch(currThumb);
+//                    setThumbValue(currThumb, newValue, true);
+//                    onStopTrackingTouch();
+                }
+                setPressed(false);
+                // ProgressBar doesn't know to repaint the thumb drawable
+                // in its inactive state when the touch stops (because the
+                // value has not apparently changed)
+                invalidate();
+                break;
+
+            case MotionEvent.ACTION_CANCEL:
+                if (mDraggingThumbs != null) {
+                    onStopTrackingTouch();
+                    setPressed(false);
+                }
+                invalidate(); // see above explanation
+                break;
+        }
+        return true;
+    }
+
+    private int getValue(MotionEvent event, Thumb thumb) {
+        return getValue(event, event.getActionIndex(), thumb);
+    }
+
+
+    int getThumbOptOffset(Thumb thumb) {
+        if (!mDrawThumbsApart) return 0;
+        if (thumb == null || thumb.getThumb() == null) return 0;
+        int thumbIdx = mThumbs.indexOf(thumb);
+        if (isLayoutRtl()) {
+            return (thumbIdx == mThumbs.size() - 1) ? 0 : (getThumbOptOffset(mThumbs.get(thumbIdx + 1)) + thumb.getThumb().getIntrinsicWidth());
+        } else {
+            return (thumbIdx == 0) ? 0 : (getThumbOptOffset(mThumbs.get(thumbIdx - 1)) + thumb.getThumb().getIntrinsicWidth());
+        }
+    }
+
+    private int getValue(MotionEvent event, int pointerIndex, Thumb thumb) {
+        final int width = getWidth();
+        final int available = getAvailable();
+
+        int optThumbOffset = getThumbOptOffset(thumb);
+
+        int x = (int) event.getX(pointerIndex);
+        float scale;
+        float progress = mScaleMin;
+        if (isLayoutRtl()) {
+            if (x > width - getPaddingRight()) {
+                scale = 0.0f;
+            } else if (x < getPaddingLeft()) {
+                scale = 1.0f;
+            } else {
+                scale = (float) (available - x + getPaddingLeft() + optThumbOffset) / (float) available;
+                progress = mScaleMin;
+            }
+        } else {
+            if (x < getPaddingLeft()) {
+                scale = 0.0f;
+            } else if (x > width - getPaddingRight()) {
+                scale = 1.0f;
+            } else {
+                scale = (float) (x - getPaddingLeft() - optThumbOffset) / (float) available;
+                progress = mScaleMin;
+            }
+        }
+
+        progress += scale * getScaleSize();
+
+        return Math.round(progress);
+    }
+
+    /**
+     * Tries to claim the user's drag motion, and requests disallowing any
+     * ancestors from stealing events in the drag.
+     */
+    private void attemptClaimDrag() {
+        if (getParent() != null) {
+            getParent().requestDisallowInterceptTouchEvent(true);
+        }
+    }
+
+    /**
+     * This is called when the user has started touching this widget.
+     */
+    void onStartTrackingTouch(Thumb thumb) {
+        if (thumb!=null) {
+            if(hasOnThumbValueChangeListener()) {
+                mOnThumbValueChangeListener.onStartTrackingTouch(this, thumb, thumb.getValue());
+            }
+            mDraggingThumbs.add(thumb);
+        }
+    }
+
+    /**
+     * This is called when the user either releases his touch or the touch is
+     * canceled.
+     */
+    void onStopTrackingTouch(Thumb thumb) {
+        if (thumb!=null) {
+            mDraggingThumbs.remove(thumb);
+            if(hasOnThumbValueChangeListener()) {
+                mOnThumbValueChangeListener.onStopTrackingTouch(this, thumb, thumb.getValue());
+            }
+        }
+        drawableStateChanged();
+    }
+
+    void onStopTrackingTouch() {
+        mDraggingThumbs.clear();
+    }
+
+    private boolean hasOnThumbValueChangeListener() {
+        return mOnThumbValueChangeListener != null;
+    }
+
+
+//   void onKeyChange() {
+//   }
+//
+//    @Override
+//    public boolean onKeyDown(int keyCode, KeyEvent event) {
+//        if (isEnabled()) {
+//            int progress = getProgress();
+//            switch (keyCode) {
+//                case KeyEvent.KEYCODE_DPAD_LEFT:
+//                    if (progress <= 0) break;
+//                    //setProgress(progress - mKeyProgressIncrement, true);
+//                    onKeyChange();
+//                    return true;
+//
+//                case KeyEvent.KEYCODE_DPAD_RIGHT:
+//                    if (progress >= getMax()) break;
+//                    //setProgress(progress + mKeyProgressIncrement, true);
+//                    onKeyChange();
+//                    return true;
+//            }
+//        }
+//
+//        return super.onKeyDown(keyCode, event);
+//    }
+
+//    @Override
+//    public void onInitializeAccessibilityEvent(AccessibilityEvent event) {
+//        super.onInitializeAccessibilityEvent(event);
+//        event.setClassName(MultiSlider.class.getName());
+//    }
+//
+//    @Override
+//    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
+//        super.onInitializeAccessibilityNodeInfo(info);
+//        info.setClassName(MultiSlider.class.getName());
+//
+//        if (isEnabled()) {
+//            final int progress = getProgress();
+//            if (progress > 0) {
+//                info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD);
+//            }
+//            if (progress < getMax()) {
+//                info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);
+//            }
+//        }
+//    }
+////
+//    @Override
+//    public boolean performAccessibilityAction(int action, Bundle arguments) {
+//        if(Build.VERSION.SDK_INT>=16) {
+//            if (super.performAccessibilityAction(action, arguments)) {
+//                return true;
+//            }
+//        }
+//        if (!isEnabled()) {
+//            return false;
+//        }
+//        final int progress = getProgress();
+//        final int increment = Math.max(1, Math.round((float) getMax() / 5));
+//        switch (action) {
+//            case AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD: {
+//                if (progress <= 0) {
+//                    return false;
+//                }
+//                //setProgress(progress - increment, true);
+//                onKeyChange();
+//                return true;
+//            }
+//            case AccessibilityNodeInfo.ACTION_SCROLL_FORWARD: {
+//                if (progress >= getMax()) {
+//                    return false;
+//                }
+//                //setProgress(progress + increment, true);
+//                onKeyChange();
+//                return true;
+//            }
+//        }
+//        return false;
+//    }
+
+//    @Override
+//    public void onRtlPropertiesChanged(int layoutDirection) {
+//        if(Build.VERSION.SDK_INT>=17){
+//            super.onRtlPropertiesChanged(layoutDirection);
+//        }
+//
+//        int max = getMax();
+//        float scale = max > 0 ? (float) getProgress() / (float) max : 0;
+//
+//        Drawable thumb = mThumb;
+//        if (thumb != null) {
+//            setThumbPos(getWidth(), thumb, scale, Integer.MIN_VALUE);
+//            /*
+//             * Since we draw translated, the drawable's bounds that it signals
+//             * for invalidation won't be the actual bounds we want invalidated,
+//             * so just invalidate this whole view.
+//             */
+//            invalidate();
+//        }
+//    }
+
+    public boolean isLayoutRtl() {
+        if (Build.VERSION.SDK_INT >= 17) {
+            return (getLayoutDirection() == LAYOUT_DIRECTION_RTL);
+        }
+
+        return false;
+    }
+
+    @Override
+    public void invalidateDrawable(Drawable dr) {
+        if (!mInDrawing) {
+            if (verifyDrawable(dr)) {
+                final Rect dirty = dr.getBounds();
+                final int scrollX = getScrollX() + getPaddingLeft();
+                final int scrollY = getScrollY() + getPaddingTop();
+
+                invalidate(dirty.left + scrollX, dirty.top + scrollY,
+                        dirty.right + scrollX, dirty.bottom + scrollY);
+            } else {
+                super.invalidateDrawable(dr);
+            }
+        }
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        updateTrackBounds(w, h);
+        for (Thumb thumb : mThumbs) {
+            updateThumb(thumb, w, h);
+        }
+    }
+
+    private Drawable getTintedDrawable(Drawable drawable, int tintColor) {
+        if (drawable != null && tintColor != 0) {
+            Drawable wrappedDrawable = DrawableCompat.wrap(drawable.mutate());
+            DrawableCompat.setTint(wrappedDrawable, tintColor);
+            return wrappedDrawable;
+        }
+        return drawable;
+    }
+
+    public static class SimpleOnThumbValueChangeListener implements OnThumbValueChangeListener {
+
+        @Override
+        public void onValueChanged(MultiSlider multiSlider, Thumb thumb, int thumbIndex, int value) {}
+
+        @Override
+        public void onStartTrackingTouch(MultiSlider multiSlider, Thumb thumb, int value) {}
+
+        @Override
+        public void onStopTrackingTouch(MultiSlider multiSlider, Thumb thumb, int value) {}
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/rangeseekbar/RangeSeekBar.java b/TMessagesProj/src/main/java/org/telegram/rangeseekbar/RangeSeekBar.java
new file mode 100644
index 000000000..f9f1865c7
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/rangeseekbar/RangeSeekBar.java
@@ -0,0 +1,664 @@
+/*
+Copyright 2014 Stephan Tittel and Yahoo Inc.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package org.telegram.rangeseekbar;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Paint.Style;
+import android.graphics.RectF;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.view.MotionEvent;
+import android.view.ViewConfiguration;
+import android.widget.ImageView;
+
+import org.telegram.messenger.R;
+
+import java.math.BigDecimal;
+
+/**
+ * Widget that lets users select a minimum and maximum value on a given numerical range. The range value types can be one of Long, Double, Integer, Float, Short, Byte or BigDecimal.<br />
+ * <br />
+ * Improved {@link MotionEvent} handling for smoother use, anti-aliased painting for improved aesthetics.
+ *
+ * @author Stephan Tittel (stephan.tittel@kom.tu-darmstadt.de)
+ * @author Peter Sinnott (psinnott@gmail.com)
+ * @author Thomas Barrasso (tbarrasso@sevenplusandroid.org)
+ *
+ * @param <T>
+ *            The Number type of the range values. One of Long, Double, Integer, Float, Short, Byte or BigDecimal.
+ */
+public class RangeSeekBar<T extends Number> extends ImageView {
+    private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private final Bitmap thumbImage = BitmapFactory.decodeResource(getResources(), R.drawable.seek_thumb_normal);
+    private final Bitmap thumbPressedImage = BitmapFactory.decodeResource(getResources(), R.drawable.seek_thumb_normal);
+    private final float thumbWidth = thumbImage.getWidth();
+    private final float thumbHalfWidth = 0.5f * thumbWidth;
+    private final float thumbHalfHeight = 0.5f * thumbImage.getHeight();
+    private final float lineHeight = 0.2f * thumbHalfHeight;
+    private final float padding = thumbHalfWidth;
+    private final T absoluteMinValue, absoluteMaxValue;
+    private final NumberType numberType;
+    private final double absoluteMinValuePrim, absoluteMaxValuePrim;
+    private double normalizedMinValue = 0d;
+    private double normalizedMaxValue = 1d;
+    private Thumb pressedThumb = null;
+    private boolean notifyWhileDragging = false;
+    private OnRangeSeekBarChangeListener<T> listener;
+
+    /**
+     * Default color of a {@link RangeSeekBar}, #FF33B5E5. This is also known as "Ice Cream Sandwich" blue.
+     */
+    private static final int DEFAULT_COLOR = Color.rgb(84, 117, 158);
+
+    /**
+     * An invalid pointer id.
+     */
+    private static final int INVALID_POINTER_ID = 255;
+
+    // Localized constants from MotionEvent for compatibility
+    // with API < 8 "Froyo".
+    private static final int ACTION_POINTER_UP = 0x6, ACTION_POINTER_INDEX_MASK = 0x0000ff00, ACTION_POINTER_INDEX_SHIFT = 8;
+
+    private float mDownMotionX;
+    private int mActivePointerId = INVALID_POINTER_ID;
+
+    /**
+     * On touch, this offset plus the scaled value from the position of the touch will form the progress value. Usually 0.
+     */
+    float mTouchProgressOffset;
+
+    private int mScaledTouchSlop;
+    private boolean mIsDragging;
+
+    /**
+     * Creates a new RangeSeekBar.
+     *
+     * @param absoluteMinValue
+     *            The minimum value of the selectable range.
+     * @param absoluteMaxValue
+     *            The maximum value of the selectable range.
+     * @param context
+     * @throws IllegalArgumentException
+     *             Will be thrown if min/max value type is not one of Long, Double, Integer, Float, Short, Byte or BigDecimal.
+     */
+    public RangeSeekBar(T absoluteMinValue, T absoluteMaxValue, Context context) throws IllegalArgumentException {
+        super(context);
+        this.absoluteMinValue = absoluteMinValue;
+        this.absoluteMaxValue = absoluteMaxValue;
+        absoluteMinValuePrim = absoluteMinValue.doubleValue();
+        absoluteMaxValuePrim = absoluteMaxValue.doubleValue();
+        numberType = NumberType.fromNumber(absoluteMinValue);
+
+        // make RangeSeekBar focusable. This solves focus handling issues in case EditText widgets are being used along with the RangeSeekBar within ScollViews.
+        setFocusable(true);
+        setFocusableInTouchMode(true);
+        init();
+    }
+
+    private final void init() {
+        mScaledTouchSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();
+    }
+
+    public boolean isNotifyWhileDragging() {
+        return notifyWhileDragging;
+    }
+
+    /**
+     * Should the widget notify the listener callback while the user is still dragging a thumb? Default is false.
+     *
+     * @param flag
+     */
+    public void setNotifyWhileDragging(boolean flag) {
+        this.notifyWhileDragging = flag;
+    }
+
+    /**
+     * Returns the absolute minimum value of the range that has been set at construction time.
+     *
+     * @return The absolute minimum value of the range.
+     */
+    public T getAbsoluteMinValue() {
+        return absoluteMinValue;
+    }
+
+    /**
+     * Returns the absolute maximum value of the range that has been set at construction time.
+     *
+     * @return The absolute maximum value of the range.
+     */
+    public T getAbsoluteMaxValue() {
+        return absoluteMaxValue;
+    }
+
+    /**
+     * Returns the currently selected min value.
+     *
+     * @return The currently selected min value.
+     */
+    public T getSelectedMinValue() {
+        return normalizedToValue(normalizedMinValue);
+    }
+
+    /**
+     * Sets the currently selected minimum value. The widget will be invalidated and redrawn.
+     *
+     * @param value
+     *            The Number value to set the minimum value to. Will be clamped to given absolute minimum/maximum range.
+     */
+    public void setSelectedMinValue(T value) {
+        // in case absoluteMinValue == absoluteMaxValue, avoid division by zero when normalizing.
+        if (0 == (absoluteMaxValuePrim - absoluteMinValuePrim)) {
+            setNormalizedMinValue(0d);
+        }
+        else {
+            setNormalizedMinValue(valueToNormalized(value));
+        }
+    }
+
+    public void setSelectedMinValue() {
+        // in case absoluteMinValue == absoluteMaxValue, avoid division by zero when normalizing.
+        if (0 == (absoluteMaxValuePrim - absoluteMinValuePrim)) {
+            setNormalizedMinValue(0d);
+        }
+        else {
+            normalizedMinValue = normalizedMaxValue - Math.abs((4) / (absoluteMaxValuePrim - absoluteMinValuePrim));
+            invalidate();
+        }
+    }
+
+    /**
+     * Returns the currently selected max value.
+     *
+     * @return The currently selected max value.
+     */
+    public T getSelectedMaxValue() {
+        return normalizedToValue(normalizedMaxValue);
+    }
+
+    /**
+     * Sets the currently selected maximum value. The widget will be invalidated and redrawn.
+     *
+     * @param value
+     *            The Number value to set the maximum value to. Will be clamped to given absolute minimum/maximum range.
+     */
+    public void setSelectedMaxValue(T value) {
+        // in case absoluteMinValue == absoluteMaxValue, avoid division by zero when normalizing.
+        if (0 == (absoluteMaxValuePrim - absoluteMinValuePrim)) {
+            setNormalizedMaxValue(1d);
+        }
+        else {
+            setNormalizedMaxValue(valueToNormalized(value));
+        }
+    }
+
+    public void setSelectedMaxValue() {
+        // in case absoluteMinValue == absoluteMaxValue, avoid division by zero when normalizing.
+        if (0 == (absoluteMaxValuePrim - absoluteMinValuePrim)) {
+            setNormalizedMaxValue(1d);
+        }
+        else {
+            normalizedMaxValue = normalizedMinValue + Math.abs((4) / (absoluteMaxValuePrim - absoluteMinValuePrim));
+            invalidate();
+        }
+    }
+
+    /**
+     * Registers given listener callback to notify about changed selected values.
+     *
+     * @param listener
+     *            The listener to notify about changed selected values.
+     */
+    public void setOnRangeSeekBarChangeListener(OnRangeSeekBarChangeListener<T> listener) {
+        this.listener = listener;
+    }
+
+    /**
+     * Handles thumb selection and movement. Notifies listener callback on certain events.
+     */
+    @SuppressLint("ClickableViewAccessibility")
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+
+        if (!isEnabled())
+            return false;
+
+        int pointerIndex;
+
+        final int action = event.getAction();
+        switch (action & MotionEvent.ACTION_MASK) {
+
+            case MotionEvent.ACTION_DOWN:
+                // Remember where the motion event started
+                mActivePointerId = event.getPointerId(event.getPointerCount() - 1);
+                pointerIndex = event.findPointerIndex(mActivePointerId);
+                mDownMotionX = event.getX(pointerIndex);
+
+                pressedThumb = evalPressedThumb(mDownMotionX);
+
+                // Only handle thumb presses.
+                if (pressedThumb == null)
+                    return super.onTouchEvent(event);
+
+                setPressed(true);
+                invalidate();
+                onStartTrackingTouch();
+                trackTouchEvent(event);
+                attemptClaimDrag();
+
+                break;
+            case MotionEvent.ACTION_MOVE:
+                if (pressedThumb != null) {
+
+                    if (mIsDragging) {
+                        trackTouchEvent(event);
+                    }
+                    else {
+                        // Scroll to follow the motion event
+                        pointerIndex = event.findPointerIndex(mActivePointerId);
+                        final float x = event.getX(pointerIndex);
+
+                        if (Math.abs(x - mDownMotionX) > mScaledTouchSlop) {
+                            setPressed(true);
+                            invalidate();
+                            onStartTrackingTouch();
+                            trackTouchEvent(event);
+                            attemptClaimDrag();
+                        }
+                    }
+
+                    if (listener != null) {
+                        listener.onRangeSeekBarValuesChanged(this, getSelectedMinValue(), getSelectedMaxValue());
+                    }
+                }
+                break;
+            case MotionEvent.ACTION_UP:
+                if (mIsDragging) {
+                    trackTouchEvent(event);
+                    onStopTrackingTouch();
+                    setPressed(false);
+                }
+                else {
+                    // Touch up when we never crossed the touch slop threshold
+                    // should be interpreted as a tap-seek to that location.
+                    onStartTrackingTouch();
+                    trackTouchEvent(event);
+                    onStopTrackingTouch();
+                }
+
+                pressedThumb = null;
+                invalidate();
+                if (listener != null) {
+                    listener.onRangeSeekBarValuesChanged(this, getSelectedMinValue(), getSelectedMaxValue());
+                }
+                break;
+            case MotionEvent.ACTION_POINTER_DOWN: {
+                final int index = event.getPointerCount() - 1;
+                // final int index = ev.getActionIndex();
+                mDownMotionX = event.getX(index);
+                mActivePointerId = event.getPointerId(index);
+                invalidate();
+                break;
+            }
+            case MotionEvent.ACTION_POINTER_UP:
+                onSecondaryPointerUp(event);
+                invalidate();
+                break;
+            case MotionEvent.ACTION_CANCEL:
+                if (mIsDragging) {
+                    onStopTrackingTouch();
+                    setPressed(false);
+                }
+                invalidate(); // see above explanation
+                break;
+        }
+        return true;
+    }
+
+    private final void onSecondaryPointerUp(MotionEvent ev) {
+        final int pointerIndex = (ev.getAction() & ACTION_POINTER_INDEX_MASK) >> ACTION_POINTER_INDEX_SHIFT;
+
+        final int pointerId = ev.getPointerId(pointerIndex);
+        if (pointerId == mActivePointerId) {
+            // This was our active pointer going up. Choose
+            // a new active pointer and adjust accordingly.
+            // TODO: Make this decision more intelligent.
+            final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
+            mDownMotionX = ev.getX(newPointerIndex);
+            mActivePointerId = ev.getPointerId(newPointerIndex);
+        }
+    }
+
+    private final void trackTouchEvent(MotionEvent event) {
+        final int pointerIndex = event.findPointerIndex(mActivePointerId);
+        final float x = event.getX(pointerIndex);
+
+        if (Thumb.MIN.equals(pressedThumb)) {
+            setNormalizedMinValue(screenToNormalized(x));
+        }
+        else if (Thumb.MAX.equals(pressedThumb)) {
+            setNormalizedMaxValue(screenToNormalized(x));
+        }
+    }
+
+    /**
+     * Tries to claim the user's drag motion, and requests disallowing any ancestors from stealing events in the drag.
+     */
+    private void attemptClaimDrag() {
+        if (getParent() != null) {
+            getParent().requestDisallowInterceptTouchEvent(true);
+        }
+    }
+
+    /**
+     * This is called when the user has started touching this widget.
+     */
+    void onStartTrackingTouch() {
+        mIsDragging = true;
+    }
+
+    /**
+     * This is called when the user either releases his touch or the touch is canceled.
+     */
+    void onStopTrackingTouch() {
+        mIsDragging = false;
+    }
+
+    /**
+     * Ensures correct size of the widget.
+     */
+    @Override
+    protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = 200;
+        if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(widthMeasureSpec)) {
+            width = MeasureSpec.getSize(widthMeasureSpec);
+        }
+        int height = thumbImage.getHeight();
+        if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(heightMeasureSpec)) {
+            height = Math.min(height, MeasureSpec.getSize(heightMeasureSpec));
+        }
+        setMeasuredDimension(width, height);
+    }
+
+    /**
+     * Draws the widget on the given canvas.
+     */
+    @SuppressLint("DrawAllocation")
+    @Override
+    protected synchronized void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        //canvas.drawColor(mContext.getResources().get);
+        int backColors = Color.rgb(153, 204, 255);
+        // draw seek bar background line
+        final RectF rect = new RectF(padding, 0.5f * (getHeight() - lineHeight), getWidth() - padding, 0.5f * (getHeight() + lineHeight));
+        paint.setStyle(Style.FILL);
+        paint.setColor(backColors);
+        paint.setAntiAlias(true);
+        canvas.drawRect(rect, paint);
+
+        // draw seek bar active range line
+        rect.left = normalizedToScreen(normalizedMinValue);
+        rect.right = normalizedToScreen(normalizedMaxValue);
+
+        // orange color
+        paint.setColor(DEFAULT_COLOR);
+        canvas.drawRect(rect, paint);
+
+        // draw minimum thumb
+        drawThumb(normalizedToScreen(normalizedMinValue), Thumb.MIN.equals(pressedThumb), canvas);
+
+        // draw maximum thumb
+        drawThumb(normalizedToScreen(normalizedMaxValue), Thumb.MAX.equals(pressedThumb), canvas);
+    }
+
+    /**
+     * Overridden to save instance state when device orientation changes. This method is called automatically if you assign an id to the RangeSeekBar widget using the {@link #setId(int)} method. Other members of this class than the normalized min and max values don't need to be saved.
+     */
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        final Bundle bundle = new Bundle();
+        bundle.putParcelable("SUPER", super.onSaveInstanceState());
+        bundle.putDouble("MIN", normalizedMinValue);
+        bundle.putDouble("MAX", normalizedMaxValue);
+        return bundle;
+    }
+
+    /**
+     * Overridden to restore instance state when device orientation changes. This method is called automatically if you assign an id to the RangeSeekBar widget using the {@link #setId(int)} method.
+     */
+    @Override
+    protected void onRestoreInstanceState(Parcelable parcel) {
+        final Bundle bundle = (Bundle) parcel;
+        super.onRestoreInstanceState(bundle.getParcelable("SUPER"));
+        normalizedMinValue = bundle.getDouble("MIN");
+        normalizedMaxValue = bundle.getDouble("MAX");
+    }
+
+    /**
+     * Draws the "normal" resp. "pressed" thumb image on specified x-coordinate.
+     *
+     * @param screenCoord
+     *            The x-coordinate in screen space where to draw the image.
+     * @param pressed
+     *            Is the thumb currently in "pressed" state?
+     * @param canvas
+     *            The canvas to draw upon.
+     */
+    private void drawThumb(float screenCoord, boolean pressed, Canvas canvas) {
+
+        canvas.drawBitmap(pressed ? thumbPressedImage : thumbImage, screenCoord - thumbHalfWidth, (0.5f * getHeight()) - thumbHalfHeight, paint);
+    }
+
+    /**
+     * Decides which (if any) thumb is touched by the given x-coordinate.
+     *
+     * @param touchX
+     *            The x-coordinate of a touch event in screen space.
+     * @return The pressed thumb or null if none has been touched.
+     */
+    private Thumb evalPressedThumb(float touchX) {
+        Thumb result = null;
+        boolean minThumbPressed = isInThumbRange(touchX, normalizedMinValue);
+        boolean maxThumbPressed = isInThumbRange(touchX, normalizedMaxValue);
+        if (minThumbPressed && maxThumbPressed) {
+            // if both thumbs are pressed (they lie on top of each other), choose the one with more room to drag. this avoids "stalling" the thumbs in a corner, not being able to drag them apart anymore.
+            result = (touchX / getWidth() > 0.5f) ? Thumb.MIN : Thumb.MAX;
+        }
+        else if (minThumbPressed) {
+            result = Thumb.MIN;
+        }
+        else if (maxThumbPressed) {
+            result = Thumb.MAX;
+        }
+        return result;
+    }
+
+    /**
+     * Decides if given x-coordinate in screen space needs to be interpreted as "within" the normalized thumb x-coordinate.
+     *
+     * @param touchX
+     *            The x-coordinate in screen space to check.
+     * @param normalizedThumbValue
+     *            The normalized x-coordinate of the thumb to check.
+     * @return true if x-coordinate is in thumb range, false otherwise.
+     */
+    private boolean isInThumbRange(float touchX, double normalizedThumbValue) {
+        return Math.abs(touchX - normalizedToScreen(normalizedThumbValue)) <= thumbHalfWidth;
+    }
+
+    /**
+     * Sets normalized min value to value so that 0 <= value <= normalized max value <= 1. The View will get invalidated when calling this method.
+     *
+     * @param value
+     *            The new normalized min value to set.
+     */
+    public void setNormalizedMinValue(double value) {
+        normalizedMinValue = Math.max(0d, Math.min(1d, Math.min(value, normalizedMaxValue)));
+        invalidate();
+    }
+
+    /**
+     * Sets normalized max value to value so that 0 <= normalized min value <= value <= 1. The View will get invalidated when calling this method.
+     *
+     * @param value
+     *            The new normalized max value to set.
+     */
+    public void setNormalizedMaxValue(double value) {
+        normalizedMaxValue = Math.max(0d, Math.min(1d, Math.max(value, normalizedMinValue)));
+        invalidate();
+    }
+
+    /**
+     * Converts a normalized value to a Number object in the value space between absolute minimum and maximum.
+     *
+     * @param normalized
+     * @return
+     */
+    @SuppressWarnings("unchecked")
+    private T normalizedToValue(double normalized) {
+        return (T) numberType.toNumber(absoluteMinValuePrim + normalized * (absoluteMaxValuePrim - absoluteMinValuePrim));
+    }
+
+    /**
+     * Converts the given Number value to a normalized double.
+     *
+     * @param value
+     *            The Number value to normalize.
+     * @return The normalized double.
+     */
+    private double valueToNormalized(T value) {
+        if (0 == absoluteMaxValuePrim - absoluteMinValuePrim) {
+            // prevent division by zero, simply return 0.
+            return 0d;
+        }
+        return (value.doubleValue() - absoluteMinValuePrim) / (absoluteMaxValuePrim - absoluteMinValuePrim);
+    }
+
+    /**
+     * Converts a normalized value into screen space.
+     *
+     * @param normalizedCoord
+     *            The normalized value to convert.
+     * @return The converted value in screen space.
+     */
+    private float normalizedToScreen(double normalizedCoord) {
+        return (float) (padding + normalizedCoord * (getWidth() - 2 * padding));
+    }
+
+    /**
+     * Converts screen space x-coordinates into normalized values.
+     *
+     * @param screenCoord
+     *            The x-coordinate in screen space to convert.
+     * @return The normalized value.
+     */
+    private double screenToNormalized(float screenCoord) {
+        int width = getWidth();
+        if (width <= 2 * padding) {
+            // prevent division by zero, simply return 0.
+            return 0d;
+        }
+        else {
+            double result = (screenCoord - padding) / (width - 2 * padding);
+            return Math.min(1d, Math.max(0d, result));
+        }
+    }
+
+    /**
+     * Callback listener interface to notify about changed range values.
+     *
+     * @author Stephan Tittel (stephan.tittel@kom.tu-darmstadt.de)
+     *
+     * @param <T>
+     *            The Number type the RangeSeekBar has been declared with.
+     */
+    public interface OnRangeSeekBarChangeListener<T> {
+        void onRangeSeekBarValuesChanged(RangeSeekBar<?> bar, T minValue, T maxValue);
+    }
+
+    /**
+     * Thumb constants (min and max).
+     */
+    private enum Thumb {
+        MIN, MAX
+    }
+
+    /**
+     * Utility enumaration used to convert between Numbers and doubles.
+     *
+     * @author Stephan Tittel (stephan.tittel@kom.tu-darmstadt.de)
+     *
+     */
+    private enum NumberType {
+        LONG, DOUBLE, INTEGER, FLOAT, SHORT, BYTE, BIG_DECIMAL;
+
+        public static <E extends Number> NumberType fromNumber(E value) throws IllegalArgumentException {
+            if (value instanceof Long) {
+                return LONG;
+            }
+            if (value instanceof Double) {
+                return DOUBLE;
+            }
+            if (value instanceof Integer) {
+                return INTEGER;
+            }
+            if (value instanceof Float) {
+                return FLOAT;
+            }
+            if (value instanceof Short) {
+                return SHORT;
+            }
+            if (value instanceof Byte) {
+                return BYTE;
+            }
+            if (value instanceof BigDecimal) {
+                return BIG_DECIMAL;
+            }
+            throw new IllegalArgumentException("Number class '" + value.getClass().getName() + "' is not supported");
+        }
+
+        public Number toNumber(double value) {
+            switch (this) {
+                case LONG:
+                    return Long.valueOf((long) value);
+                case DOUBLE:
+                    return value;
+                case INTEGER:
+                    return Integer.valueOf((int) value);
+                case FLOAT:
+                    return Float.valueOf((float) value);
+                case SHORT:
+                    return Short.valueOf((short) value);
+                case BYTE:
+                    return Byte.valueOf((byte) value);
+                case BIG_DECIMAL:
+                    return new BigDecimal(value);
+            }
+            throw new InstantiationError("can't convert " + this + " to a Number object");
+        }
+    }
+
+    public int getPressedThumb() {
+        return pressedThumb == null ? 0 : (pressedThumb.equals(Thumb.MAX) ? 1 : -1);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/BackgroundExecuter.java b/TMessagesProj/src/main/java/org/telegram/socialuser/BackgroundExecuter.java
new file mode 100755
index 000000000..2f6544e71
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/BackgroundExecuter.java
@@ -0,0 +1,28 @@
+package org.telegram.socialuser;
+
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+public class BackgroundExecuter {
+
+	private static BackgroundExecuter mInstance;
+	private ExecutorService executorService;
+
+	private BackgroundExecuter() {
+		executorService = Executors.newFixedThreadPool(5);
+	}
+
+	public static BackgroundExecuter getInstance() {
+		if (mInstance == null) {
+			mInstance = new BackgroundExecuter();
+		}
+		return mInstance;
+	}
+
+	public void execute(Runnable runnable) {
+		if (executorService == null) {
+			executorService = Executors.newFixedThreadPool(5);
+		}
+		executorService.submit(runnable);
+	}
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/CustomGridAdapter.java b/TMessagesProj/src/main/java/org/telegram/socialuser/CustomGridAdapter.java
new file mode 100644
index 000000000..dea4efc9c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/CustomGridAdapter.java
@@ -0,0 +1,69 @@
+package org.telegram.socialuser;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.R;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.BackupImageView;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 3/6/16.
+ */
+public class CustomGridAdapter extends ArrayAdapter<TLRPC.TelegramUsers> {
+    private Context mContext;
+    private LayoutInflater inflater;
+
+    public CustomGridAdapter(Context context, ArrayList<TLRPC.TelegramUsers> users) {
+        super(context, 0, users);
+        mContext = context;
+        inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+    }
+
+   public static class ViewHolder {
+        TextView textView1;
+        BackupImageView avatarImageView1;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        // TODO Auto-generated method stub
+        ViewHolder viewHolder = null;
+        if (convertView == null) {
+            viewHolder = new ViewHolder();
+            convertView = inflater.inflate(R.layout.grid_single, null);
+            viewHolder.textView1 = (TextView) convertView.findViewById(R.id.grid_text);
+            viewHolder.avatarImageView1 = (BackupImageView) convertView.findViewById(R.id.grid_image);
+            viewHolder.avatarImageView1.setRoundRadius(AndroidUtilities.dp(30));
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder) convertView.getTag();
+        }
+
+             TLRPC.TelegramUsers user = getItem(position);
+
+              viewHolder.avatarImageView1.setImage(user.photo != null ? user.photo.photo_small : null, "50_50", new AvatarDrawable(user, false), true);
+             if(user !=null &&  user.getname()!=null ) {
+                 viewHolder.textView1.setText(user.getname());
+
+                 if(user.photo !=null && user.photo.photo_id != 0){
+            viewHolder.avatarImageView1.setImage(user.photo.photo_small, "50_50",new AvatarDrawable(user,false),true);
+
+                 }
+                 else if(user.photo.photo_id == 0){
+                     viewHolder.avatarImageView1.setImage(null, "50_50",new AvatarDrawable(user,false),true);
+                 }
+             }
+
+            //checkAndUpdateAvatar(viewHolder.avatarImageView1, user);
+        return convertView;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/GridViewWithHeaderAndFooter.java b/TMessagesProj/src/main/java/org/telegram/socialuser/GridViewWithHeaderAndFooter.java
new file mode 100644
index 000000000..f51af6530
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/GridViewWithHeaderAndFooter.java
@@ -0,0 +1,895 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.socialuser;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.database.DataSetObservable;
+import android.database.DataSetObserver;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.Filter;
+import android.widget.Filterable;
+import android.widget.FrameLayout;
+import android.widget.GridView;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+import android.widget.WrapperListAdapter;
+
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+
+/**
+ * A {@link GridView} that supports adding header rows in a
+ * very similar way to {@link ListView}.
+ * See {@link GridViewWithHeaderAndFooter#addHeaderView(View, Object, boolean)}
+ * See {@link GridViewWithHeaderAndFooter#addFooterView(View, Object, boolean)}
+ */
+public class GridViewWithHeaderAndFooter extends GridView {
+
+    public static boolean DEBUG = false;
+    private OnItemClickListener mOnItemClickListener;
+    private OnItemLongClickListener mOnItemLongClickListener;
+
+    /**
+     * A class that represents a fixed view in a list, for example a header at the top
+     * or a footer at the bottom.
+     */
+    private static class FixedViewInfo {
+        /**
+         * The view to add to the grid
+         */
+        public View view;
+        public ViewGroup viewContainer;
+        /**
+         * The data backing the view. This is returned from {@link ListAdapter#getItem(int)}.
+         */
+        public Object data;
+        /**
+         * <code>true</code> if the fixed view should be selectable in the grid
+         */
+        public boolean isSelectable;
+    }
+
+    private int mNumColumns = AUTO_FIT;
+    private View mViewForMeasureRowHeight = null;
+    private int mRowHeight = -1;
+    //log tag can be at most 23 characters
+    private static final String LOG_TAG = "GridViewHeaderAndFooter";
+
+    private ArrayList<FixedViewInfo> mHeaderViewInfos = new ArrayList<FixedViewInfo>();
+    private ArrayList<FixedViewInfo> mFooterViewInfos = new ArrayList<FixedViewInfo>();
+    private ListAdapter mOriginalAdapter;
+    private ItemClickHandler mItemClickHandler;
+
+    private void initHeaderGridView() {
+    }
+
+    public GridViewWithHeaderAndFooter(Context context) {
+        super(context);
+        initHeaderGridView();
+    }
+
+    public GridViewWithHeaderAndFooter(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initHeaderGridView();
+    }
+
+    public GridViewWithHeaderAndFooter(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        initHeaderGridView();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        ListAdapter adapter = getAdapter();
+        if (adapter != null && adapter instanceof HeaderViewGridAdapter) {
+            ((HeaderViewGridAdapter) adapter).setNumColumns(getNumColumnsCompatible());
+            ((HeaderViewGridAdapter) adapter).setRowHeight(getRowHeight());
+        }
+    }
+
+    @Override
+    public void setClipChildren(boolean clipChildren) {
+        // Ignore, since the header rows depend on not being clipped
+    }
+
+    /**
+     * Do not call this method unless you know how it works.
+     *
+     * @param clipChildren
+     */
+    public void setClipChildrenSupper(boolean clipChildren) {
+        super.setClipChildren(false);
+    }
+
+    /**
+     * Add a fixed view to appear at the top of the grid. If addHeaderView is
+     * called more than once, the views will appear in the order they were
+     * added. Views added using this call can take focus if they want.
+     * <p/>
+     * NOTE: Call this before calling setAdapter. This is so HeaderGridView can wrap
+     * the supplied cursor with one that will also account for header views.
+     *
+     * @param v The view to add.
+     */
+    public void addHeaderView(View v) {
+        addHeaderView(v, null, true);
+    }
+
+    /**
+     * Add a fixed view to appear at the top of the grid. If addHeaderView is
+     * called more than once, the views will appear in the order they were
+     * added. Views added using this call can take focus if they want.
+     * <p/>
+     * NOTE: Call this before calling setAdapter. This is so HeaderGridView can wrap
+     * the supplied cursor with one that will also account for header views.
+     *
+     * @param v            The view to add.
+     * @param data         Data to associate with this view
+     * @param isSelectable whether the item is selectable
+     */
+    public void addHeaderView(View v, Object data, boolean isSelectable) {
+        ListAdapter adapter = getAdapter();
+        if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {
+            throw new IllegalStateException(
+                    "Cannot add header view to grid -- setAdapter has already been called.");
+        }
+
+        ViewGroup.LayoutParams lyp = v.getLayoutParams();
+
+        FixedViewInfo info = new FixedViewInfo();
+        FrameLayout fl = new FullWidthFixedViewLayout(getContext());
+
+        if (lyp != null) {
+            v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width, lyp.height));
+            fl.setLayoutParams(new LayoutParams(lyp.width, lyp.height));
+        }
+        fl.addView(v);
+        info.view = v;
+        info.viewContainer = fl;
+        info.data = data;
+        info.isSelectable = isSelectable;
+        mHeaderViewInfos.add(info);
+        // in the case of re-adding a header view, or adding one later on,
+        // we need to notify the observer
+        if (adapter != null) {
+            ((HeaderViewGridAdapter) adapter).notifyDataSetChanged();
+        }
+    }
+
+    public void addFooterView(View v) {
+        addFooterView(v, null, true);
+    }
+
+    public void addFooterView(View v, Object data, boolean isSelectable) {
+        ListAdapter mAdapter = getAdapter();
+        if (mAdapter != null && !(mAdapter instanceof HeaderViewGridAdapter)) {
+            throw new IllegalStateException(
+                    "Cannot add header view to grid -- setAdapter has already been called.");
+        }
+
+        ViewGroup.LayoutParams lyp = v.getLayoutParams();
+
+        FixedViewInfo info = new FixedViewInfo();
+        FrameLayout fl = new FullWidthFixedViewLayout(getContext());
+
+        if (lyp != null) {
+            v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width, lyp.height));
+            fl.setLayoutParams(new LayoutParams(lyp.width, lyp.height));
+        }
+        fl.addView(v);
+        info.view = v;
+        info.viewContainer = fl;
+        info.data = data;
+        info.isSelectable = isSelectable;
+        mFooterViewInfos.add(info);
+
+        if (mAdapter != null) {
+            ((HeaderViewGridAdapter) mAdapter).notifyDataSetChanged();
+        }
+    }
+
+    public int getHeaderViewCount() {
+        return mHeaderViewInfos.size();
+    }
+
+    public int getFooterViewCount() {
+        return mFooterViewInfos.size();
+    }
+
+    /**
+     * Removes a previously-added header view.
+     *
+     * @param v The view to remove
+     * @return true if the view was removed, false if the view was not a header
+     * view
+     */
+    public boolean removeHeaderView(View v) {
+        if (mHeaderViewInfos.size() > 0) {
+            boolean result = false;
+            ListAdapter adapter = getAdapter();
+            if (adapter != null && ((HeaderViewGridAdapter) adapter).removeHeader(v)) {
+                result = true;
+            }
+            removeFixedViewInfo(v, mHeaderViewInfos);
+            return result;
+        }
+        return false;
+    }
+
+    /**
+     * Removes a previously-added footer view.
+     *
+     * @param v The view to remove
+     * @return true if the view was removed, false if the view was not a header
+     * view
+     */
+    public boolean removeFooterView(View v) {
+        if (mFooterViewInfos.size() > 0) {
+            boolean result = false;
+            ListAdapter adapter = getAdapter();
+            if (adapter != null && ((HeaderViewGridAdapter) adapter).removeFooter(v)) {
+                result = true;
+            }
+            removeFixedViewInfo(v, mFooterViewInfos);
+            return result;
+        }
+        return false;
+    }
+
+    private void removeFixedViewInfo(View v, ArrayList<FixedViewInfo> where) {
+        int len = where.size();
+        for (int i = 0; i < len; ++i) {
+            FixedViewInfo info = where.get(i);
+            if (info.view == v) {
+                where.remove(i);
+                break;
+            }
+        }
+    }
+
+    @TargetApi(11)
+    private int getNumColumnsCompatible() {
+        if (Build.VERSION.SDK_INT >= 11) {
+            return super.getNumColumns();
+        } else {
+            try {
+                Field numColumns = GridView.class.getDeclaredField("mNumColumns");
+                numColumns.setAccessible(true);
+                return numColumns.getInt(this);
+            } catch (Exception e) {
+                if (mNumColumns != -1) {
+                    return mNumColumns;
+                }
+                throw new RuntimeException("Can not determine the mNumColumns for this API platform, please call setNumColumns to set it.");
+            }
+        }
+    }
+
+    @TargetApi(16)
+    private int getColumnWidthCompatible() {
+        if (Build.VERSION.SDK_INT >= 16) {
+            return super.getColumnWidth();
+        } else {
+            try {
+                Field numColumns = GridView.class.getDeclaredField("mColumnWidth");
+                numColumns.setAccessible(true);
+                return numColumns.getInt(this);
+            } catch (NoSuchFieldException e) {
+                throw new RuntimeException(e);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        mViewForMeasureRowHeight = null;
+    }
+
+    public void invalidateRowHeight() {
+        mRowHeight = -1;
+    }
+
+    public int getHeaderHeight(int row) {
+        if (row >= 0) {
+            return mHeaderViewInfos.get(row).view.getMeasuredHeight();
+        }
+
+        return 0;
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    public int getVerticalSpacing() {
+        int value = 0;
+
+        try {
+            int currentapiVersion = Build.VERSION.SDK_INT;
+            if (currentapiVersion < Build.VERSION_CODES.JELLY_BEAN) {
+                Field field = GridView.class.getDeclaredField("mVerticalSpacing");
+                field.setAccessible(true);
+                value = field.getInt(this);
+            } else {
+                value = super.getVerticalSpacing();
+            }
+
+        } catch (Exception ignore) {
+        }
+
+        return value;
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    public int getHorizontalSpacing() {
+        int value = 0;
+
+        try {
+            int currentapiVersion = Build.VERSION.SDK_INT;
+            if (currentapiVersion < Build.VERSION_CODES.JELLY_BEAN) {
+                Field field = GridView.class.getDeclaredField("mHorizontalSpacing");
+                field.setAccessible(true);
+                value = field.getInt(this);
+            } else {
+                value = super.getHorizontalSpacing();
+            }
+
+        } catch (Exception ignore) {
+        }
+
+        return value;
+    }
+
+    public int getRowHeight() {
+        if (mRowHeight > 0) {
+            return mRowHeight;
+        }
+        ListAdapter adapter = getAdapter();
+        int numColumns = getNumColumnsCompatible();
+
+        // adapter has not been set or has no views in it;
+        if (adapter == null || adapter.getCount() <= numColumns * (mHeaderViewInfos.size() + mFooterViewInfos.size())) {
+            return -1;
+        }
+        int mColumnWidth = getColumnWidthCompatible();
+        View view = getAdapter().getView(numColumns * mHeaderViewInfos.size(), mViewForMeasureRowHeight, this);
+        LayoutParams p = (LayoutParams) view.getLayoutParams();
+        if (p == null) {
+            p = new LayoutParams(-1, -2, 0);
+            view.setLayoutParams(p);
+        }
+        int childHeightSpec = getChildMeasureSpec(
+                MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), 0, p.height);
+        int childWidthSpec = getChildMeasureSpec(
+                MeasureSpec.makeMeasureSpec(mColumnWidth, MeasureSpec.EXACTLY), 0, p.width);
+        view.measure(childWidthSpec, childHeightSpec);
+        mViewForMeasureRowHeight = view;
+        mRowHeight = view.getMeasuredHeight();
+        return mRowHeight;
+    }
+
+    @TargetApi(11)
+    public void tryToScrollToBottomSmoothly() {
+        int lastPos = getAdapter().getCount() - 1;
+        if (Build.VERSION.SDK_INT >= 11) {
+            smoothScrollToPositionFromTop(lastPos, 0);
+        } else {
+            setSelection(lastPos);
+        }
+    }
+
+    @TargetApi(11)
+    public void tryToScrollToBottomSmoothly(int duration) {
+        int lastPos = getAdapter().getCount() - 1;
+        if (Build.VERSION.SDK_INT >= 11) {
+            smoothScrollToPositionFromTop(lastPos, 0, duration);
+        } else {
+            setSelection(lastPos);
+        }
+    }
+
+    @Override
+    public void setAdapter(ListAdapter adapter) {
+        mOriginalAdapter = adapter;
+        if (mHeaderViewInfos.size() > 0 || mFooterViewInfos.size() > 0) {
+            HeaderViewGridAdapter headerViewGridAdapter = new HeaderViewGridAdapter(mHeaderViewInfos, mFooterViewInfos, adapter);
+            int numColumns = getNumColumnsCompatible();
+            if (numColumns > 1) {
+                headerViewGridAdapter.setNumColumns(numColumns);
+            }
+            headerViewGridAdapter.setRowHeight(getRowHeight());
+            super.setAdapter(headerViewGridAdapter);
+        } else {
+            super.setAdapter(adapter);
+        }
+    }
+
+    /**
+     * Return original adapter for convenience.
+     *
+     * @return
+     */
+    public ListAdapter getOriginalAdapter() {
+        return mOriginalAdapter;
+    }
+
+    /**
+     * full width
+     */
+    private class FullWidthFixedViewLayout extends FrameLayout {
+
+        public FullWidthFixedViewLayout(Context context) {
+            super(context);
+        }
+
+        @Override
+        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+            int realLeft = GridViewWithHeaderAndFooter.this.getPaddingLeft() + getPaddingLeft();
+            // Try to make where it should be, from left, full width
+            if (realLeft != left) {
+                offsetLeftAndRight(realLeft - left);
+            }
+            super.onLayout(changed, left, top, right, bottom);
+        }
+
+        @Override
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            int targetWidth = GridViewWithHeaderAndFooter.this.getMeasuredWidth()
+                    - GridViewWithHeaderAndFooter.this.getPaddingLeft()
+                    - GridViewWithHeaderAndFooter.this.getPaddingRight();
+            widthMeasureSpec = MeasureSpec.makeMeasureSpec(targetWidth,
+                    MeasureSpec.getMode(widthMeasureSpec));
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        }
+    }
+
+    @Override
+    public void setNumColumns(int numColumns) {
+        super.setNumColumns(numColumns);
+        mNumColumns = numColumns;
+        ListAdapter adapter = getAdapter();
+        if (adapter != null && adapter instanceof HeaderViewGridAdapter) {
+            ((HeaderViewGridAdapter) adapter).setNumColumns(numColumns);
+        }
+    }
+
+    /**
+     * ListAdapter used when a HeaderGridView has header views. This ListAdapter
+     * wraps another one and also keeps track of the header views and their
+     * associated data objects.
+     * <p>This is intended as a base class; you will probably not need to
+     * use this class directly in your own code.
+     */
+    private static class HeaderViewGridAdapter implements WrapperListAdapter, Filterable {
+        // This is used to notify the container of updates relating to number of columns
+        // or headers changing, which changes the number of placeholders needed
+        private final DataSetObservable mDataSetObservable = new DataSetObservable();
+        private final ListAdapter mAdapter;
+        static final ArrayList<FixedViewInfo> EMPTY_INFO_LIST =
+                new ArrayList<FixedViewInfo>();
+
+        // This ArrayList is assumed to NOT be null.
+        ArrayList<FixedViewInfo> mHeaderViewInfos;
+        ArrayList<FixedViewInfo> mFooterViewInfos;
+        private int mNumColumns = 1;
+        private int mRowHeight = -1;
+        boolean mAreAllFixedViewsSelectable;
+        private final boolean mIsFilterable;
+        private boolean mCachePlaceHoldView = true;
+        // From Recycle Bin or calling getView, this a question...
+        private boolean mCacheFirstHeaderView = false;
+
+        public HeaderViewGridAdapter(ArrayList<FixedViewInfo> headerViewInfos, ArrayList<FixedViewInfo> footViewInfos, ListAdapter adapter) {
+            mAdapter = adapter;
+            mIsFilterable = adapter instanceof Filterable;
+            if (headerViewInfos == null) {
+                mHeaderViewInfos = EMPTY_INFO_LIST;
+            } else {
+                mHeaderViewInfos = headerViewInfos;
+            }
+
+            if (footViewInfos == null) {
+                mFooterViewInfos = EMPTY_INFO_LIST;
+            } else {
+                mFooterViewInfos = footViewInfos;
+            }
+            mAreAllFixedViewsSelectable = areAllListInfosSelectable(mHeaderViewInfos)
+                    && areAllListInfosSelectable(mFooterViewInfos);
+        }
+
+        public void setNumColumns(int numColumns) {
+            if (numColumns < 1) {
+                return;
+            }
+            if (mNumColumns != numColumns) {
+                mNumColumns = numColumns;
+                notifyDataSetChanged();
+            }
+        }
+
+        public void setRowHeight(int height) {
+            mRowHeight = height;
+        }
+
+        public int getHeadersCount() {
+            return mHeaderViewInfos.size();
+        }
+
+        public int getFootersCount() {
+            return mFooterViewInfos.size();
+        }
+
+        /**
+         * @return true if this adapter doesn't contain any data.  This is used to determine
+         * whether the empty view should be displayed.  A typical implementation will return
+         * getCount() == 0 but since getCount() includes the headers and footers, specialized
+         * adapters might want a different behavior.
+         */
+        @Override
+        public boolean isEmpty() {
+            return (mAdapter == null || mAdapter.isEmpty());
+        }
+
+        private boolean areAllListInfosSelectable(ArrayList<FixedViewInfo> infos) {
+            if (infos != null) {
+                for (FixedViewInfo info : infos) {
+                    if (!info.isSelectable) {
+                        return false;
+                    }
+                }
+            }
+            return true;
+        }
+
+        public boolean removeHeader(View v) {
+            for (int i = 0; i < mHeaderViewInfos.size(); i++) {
+                FixedViewInfo info = mHeaderViewInfos.get(i);
+                if (info.view == v) {
+                    mHeaderViewInfos.remove(i);
+                    mAreAllFixedViewsSelectable =
+                            areAllListInfosSelectable(mHeaderViewInfos) && areAllListInfosSelectable(mFooterViewInfos);
+                    mDataSetObservable.notifyChanged();
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        public boolean removeFooter(View v) {
+            for (int i = 0; i < mFooterViewInfos.size(); i++) {
+                FixedViewInfo info = mFooterViewInfos.get(i);
+                if (info.view == v) {
+                    mFooterViewInfos.remove(i);
+                    mAreAllFixedViewsSelectable =
+                            areAllListInfosSelectable(mHeaderViewInfos) && areAllListInfosSelectable(mFooterViewInfos);
+                    mDataSetObservable.notifyChanged();
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        @Override
+        public int getCount() {
+            if (mAdapter != null) {
+                return (getFootersCount() + getHeadersCount()) * mNumColumns + getAdapterAndPlaceHolderCount();
+            } else {
+                return (getFootersCount() + getHeadersCount()) * mNumColumns;
+            }
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return mAdapter == null || mAreAllFixedViewsSelectable && mAdapter.areAllItemsEnabled();
+        }
+
+        private int getAdapterAndPlaceHolderCount() {
+            return (int) (Math.ceil(1f * mAdapter.getCount() / mNumColumns) * mNumColumns);
+        }
+
+        @Override
+        public boolean isEnabled(int position) {
+            // Header (negative positions will throw an IndexOutOfBoundsException)
+            int numHeadersAndPlaceholders = getHeadersCount() * mNumColumns;
+            if (position < numHeadersAndPlaceholders) {
+                return position % mNumColumns == 0
+                        && mHeaderViewInfos.get(position / mNumColumns).isSelectable;
+            }
+
+            // Adapter
+            final int adjPosition = position - numHeadersAndPlaceholders;
+            int adapterCount = 0;
+            if (mAdapter != null) {
+                adapterCount = getAdapterAndPlaceHolderCount();
+                if (adjPosition < adapterCount) {
+                    return adjPosition < mAdapter.getCount() && mAdapter.isEnabled(adjPosition);
+                }
+            }
+
+            // Footer (off-limits positions will throw an IndexOutOfBoundsException)
+            final int footerPosition = adjPosition - adapterCount;
+            return footerPosition % mNumColumns == 0
+                    && mFooterViewInfos.get(footerPosition / mNumColumns).isSelectable;
+        }
+
+        @Override
+        public Object getItem(int position) {
+            // Header (negative positions will throw an ArrayIndexOutOfBoundsException)
+            int numHeadersAndPlaceholders = getHeadersCount() * mNumColumns;
+            if (position < numHeadersAndPlaceholders) {
+                if (position % mNumColumns == 0) {
+                    return mHeaderViewInfos.get(position / mNumColumns).data;
+                }
+                return null;
+            }
+
+            // Adapter
+            final int adjPosition = position - numHeadersAndPlaceholders;
+            int adapterCount = 0;
+            if (mAdapter != null) {
+                adapterCount = getAdapterAndPlaceHolderCount();
+                if (adjPosition < adapterCount) {
+                    if (adjPosition < mAdapter.getCount()) {
+                        return mAdapter.getItem(adjPosition);
+                    } else {
+                        return null;
+                    }
+                }
+            }
+
+            // Footer (off-limits positions will throw an IndexOutOfBoundsException)
+            final int footerPosition = adjPosition - adapterCount;
+            if (footerPosition % mNumColumns == 0) {
+                return mFooterViewInfos.get(footerPosition).data;
+            } else {
+                return null;
+            }
+        }
+
+        @Override
+        public long getItemId(int position) {
+            int numHeadersAndPlaceholders = getHeadersCount() * mNumColumns;
+            if (mAdapter != null && position >= numHeadersAndPlaceholders) {
+                int adjPosition = position - numHeadersAndPlaceholders;
+                int adapterCount = mAdapter.getCount();
+                if (adjPosition < adapterCount) {
+                    return mAdapter.getItemId(adjPosition);
+                }
+            }
+            return -1;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return mAdapter != null && mAdapter.hasStableIds();
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            if (DEBUG) {
+                Log.d(LOG_TAG, String.format("getView: %s, reused: %s", position, convertView == null));
+            }
+            // Header (negative positions will throw an ArrayIndexOutOfBoundsException)
+            int numHeadersAndPlaceholders = getHeadersCount() * mNumColumns;
+            if (position < numHeadersAndPlaceholders) {
+                View headerViewContainer = mHeaderViewInfos
+                        .get(position / mNumColumns).viewContainer;
+                if (position % mNumColumns == 0) {
+                    return headerViewContainer;
+                } else {
+                    if (convertView == null) {
+                        convertView = new View(parent.getContext());
+                    }
+                    // We need to do this because GridView uses the height of the last item
+                    // in a row to determine the height for the entire row.
+                    convertView.setVisibility(View.INVISIBLE);
+                    convertView.setMinimumHeight(headerViewContainer.getHeight());
+                    return convertView;
+                }
+            }
+            // Adapter
+            final int adjPosition = position - numHeadersAndPlaceholders;
+            int adapterCount = 0;
+            if (mAdapter != null) {
+                adapterCount = getAdapterAndPlaceHolderCount();
+                if (adjPosition < adapterCount) {
+                    if (adjPosition < mAdapter.getCount()) {
+                        return mAdapter.getView(adjPosition, convertView, parent);
+                    } else {
+                        if (convertView == null) {
+                            convertView = new View(parent.getContext());
+                        }
+                        convertView.setVisibility(View.INVISIBLE);
+                        convertView.setMinimumHeight(mRowHeight);
+                        return convertView;
+                    }
+                }
+            }
+            // Footer
+            final int footerPosition = adjPosition - adapterCount;
+            if (footerPosition < getCount()) {
+                View footViewContainer = mFooterViewInfos
+                        .get(footerPosition / mNumColumns).viewContainer;
+                if (position % mNumColumns == 0) {
+                    return footViewContainer;
+                } else {
+                    if (convertView == null) {
+                        convertView = new View(parent.getContext());
+                    }
+                    // We need to do this because GridView uses the height of the last item
+                    // in a row to determine the height for the entire row.
+                    convertView.setVisibility(View.INVISIBLE);
+                    convertView.setMinimumHeight(footViewContainer.getHeight());
+                    return convertView;
+                }
+            }
+            throw new ArrayIndexOutOfBoundsException(position);
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+
+            final int numHeadersAndPlaceholders = getHeadersCount() * mNumColumns;
+            final int adapterViewTypeStart = mAdapter == null ? 0 : mAdapter.getViewTypeCount() - 1;
+            int type = AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER;
+            if (mCachePlaceHoldView) {
+                // Header
+                if (position < numHeadersAndPlaceholders) {
+                    if (position == 0) {
+                        if (mCacheFirstHeaderView) {
+                            type = adapterViewTypeStart + mHeaderViewInfos.size() + mFooterViewInfos.size() + 1 + 1;
+                        }
+                    }
+                    if (position % mNumColumns != 0) {
+                        type = adapterViewTypeStart + (position / mNumColumns + 1);
+                    }
+                }
+            }
+
+            // Adapter
+            final int adjPosition = position - numHeadersAndPlaceholders;
+            int adapterCount = 0;
+            if (mAdapter != null) {
+                adapterCount = getAdapterAndPlaceHolderCount();
+                if (adjPosition >= 0 && adjPosition < adapterCount) {
+                    if (adjPosition < mAdapter.getCount()) {
+                        type = mAdapter.getItemViewType(adjPosition);
+                    } else {
+                        if (mCachePlaceHoldView) {
+                            type = adapterViewTypeStart + mHeaderViewInfos.size() + 1;
+                        }
+                    }
+                }
+            }
+
+            if (mCachePlaceHoldView) {
+                // Footer
+                final int footerPosition = adjPosition - adapterCount;
+                if (footerPosition >= 0 && footerPosition < getCount() && (footerPosition % mNumColumns) != 0) {
+                    type = adapterViewTypeStart + mHeaderViewInfos.size() + 1 + (footerPosition / mNumColumns + 1);
+                }
+            }
+            if (DEBUG) {
+                Log.d(LOG_TAG, String.format("getItemViewType: pos: %s, result: %s", position, type, mCachePlaceHoldView, mCacheFirstHeaderView));
+            }
+            return type;
+        }
+
+        /**
+         * content view, content view holder, header[0], header and footer placeholder(s)
+         *
+         * @return
+         */
+        @Override
+        public int getViewTypeCount() {
+            int count = mAdapter == null ? 1 : mAdapter.getViewTypeCount();
+            if (mCachePlaceHoldView) {
+                int offset = mHeaderViewInfos.size() + 1 + mFooterViewInfos.size();
+                if (mCacheFirstHeaderView) {
+                    offset += 1;
+                }
+                count += offset;
+            }
+            if (DEBUG) {
+                Log.d(LOG_TAG, String.format("getViewTypeCount: %s", count));
+            }
+            return count;
+        }
+
+        @Override
+        public void registerDataSetObserver(DataSetObserver observer) {
+            mDataSetObservable.registerObserver(observer);
+            if (mAdapter != null) {
+                mAdapter.registerDataSetObserver(observer);
+            }
+        }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            mDataSetObservable.unregisterObserver(observer);
+            if (mAdapter != null) {
+                mAdapter.unregisterDataSetObserver(observer);
+            }
+        }
+
+        @Override
+        public Filter getFilter() {
+            if (mIsFilterable) {
+                return ((Filterable) mAdapter).getFilter();
+            }
+            return null;
+        }
+
+        @Override
+        public ListAdapter getWrappedAdapter() {
+            return mAdapter;
+        }
+
+        public void notifyDataSetChanged() {
+            mDataSetObservable.notifyChanged();
+        }
+    }
+
+    @Override
+    public void setOnItemClickListener(OnItemClickListener l) {
+        mOnItemClickListener = l;
+        super.setOnItemClickListener(getItemClickHandler());
+    }
+
+    @Override
+    public void setOnItemLongClickListener(OnItemLongClickListener listener) {
+        mOnItemLongClickListener = listener;
+        super.setOnItemLongClickListener(getItemClickHandler());
+    }
+
+    private ItemClickHandler getItemClickHandler() {
+        if (mItemClickHandler == null) {
+            mItemClickHandler = new ItemClickHandler();
+        }
+        return mItemClickHandler;
+    }
+
+    private class ItemClickHandler implements OnItemClickListener, OnItemLongClickListener {
+
+        @Override
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            if (mOnItemClickListener != null) {
+                int resPos = position - getHeaderViewCount() * getNumColumnsCompatible();
+                if (resPos >= 0) {
+                    mOnItemClickListener.onItemClick(parent, view, resPos, id);
+                }
+            }
+        }
+
+        @Override
+        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+            if (mOnItemLongClickListener != null) {
+                int resPos = position - getHeaderViewCount() * getNumColumnsCompatible();
+                if (resPos >= 0) {
+                    mOnItemLongClickListener.onItemLongClick(parent, view, resPos, id);
+                }
+            }
+            return true;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/HttpUrlConnectionUtil.java b/TMessagesProj/src/main/java/org/telegram/socialuser/HttpUrlConnectionUtil.java
new file mode 100755
index 000000000..b792023d6
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/HttpUrlConnectionUtil.java
@@ -0,0 +1,456 @@
+package org.telegram.socialuser;
+
+import android.os.Build;
+
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.CustomHttpParams;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+
+import javax.net.ssl.HttpsURLConnection;
+
+/**
+ * This class handle server request and response.
+ * @author craterzone
+ *
+ */
+public class HttpUrlConnectionUtil {
+	
+	
+public static final String TAG = HttpUrlConnectionUtil.class.getName();
+	
+	public static final String HEADER_ACCEPT = "Accept";
+	public static final String CONTENT_TYPE = "Content-type";
+	public static final String PUT = "PUT";
+	public static final String POST = "POST";
+	public static final String GET = "GET";
+	public static final int TIME_OUT = 2 * 60 * 1000;
+	private static final int _4KB = 4 * 1024;
+	
+	
+	/**
+	 * Request to server using POST method
+	 * @param urlString
+	 * @param body
+	 * @param contentType
+	 * @param acceptType
+	 * @param httpParams :can be null
+	 * @return
+	 */
+	public static CZResponse post(String urlString, String body, String contentType, String acceptType, ArrayList<CustomHttpParams> httpParams) {
+		return post(urlString, body, contentType, acceptType, httpParams, true);
+	}
+	
+	private static CZResponse post(String urlString, String body, String contentType,
+								   String acceptType, ArrayList<CustomHttpParams> httpParams, boolean retryOnEOF) {
+		
+		HttpURLConnection conn = null;
+		try {
+			URL url = new URL(urlString);
+			System.setProperty("http.keepAlive", "false");
+			if(checkHTTPS(urlString)){
+				conn = (HttpsURLConnection) url.openConnection();
+			} else{
+				conn = (HttpURLConnection) url.openConnection();
+			}
+			conn.setReadTimeout(TIME_OUT);
+			conn.setConnectTimeout(TIME_OUT);
+			conn.setRequestMethod(POST);
+			conn.setRequestProperty(CONTENT_TYPE,contentType);  
+			conn.setRequestProperty(HEADER_ACCEPT,acceptType); 
+			if(httpParams != null && httpParams.size() >0){
+				for(CustomHttpParams params : httpParams){
+					conn.setRequestProperty(params.getKey(), params.getValue());
+				}
+			}
+			if ( Build.VERSION.SDK_INT > 13) {
+				conn.setRequestProperty("Connection", "close");
+			 }
+			conn.setDoInput(true);
+			conn.setDoOutput(true);
+			body = (body != null) ? body : "";
+			byte[] outputInBytes = body.getBytes("UTF-8");
+			OutputStream os = conn.getOutputStream();
+			os.write(outputInBytes);
+			BufferedWriter writer = new BufferedWriter(
+			        new OutputStreamWriter(os, "UTF-8"));
+			
+			writer.flush();
+			writer.close();
+			os.close();
+			conn.connect();
+			int statusCode = conn.getResponseCode();
+			Logger.d(TAG, "Status Code is: " + statusCode);
+	        switch (statusCode) {
+	            case 200:
+	            	String response = new String(readFullyBytes(conn.getInputStream(), 2 * _4KB));
+	            	Logger.d(TAG, "Response String is : " + response);
+	            	return new CZResponse(statusCode, response);
+	            default:
+	            	return new CZResponse(statusCode, "");
+	            		
+	        }
+		} catch (Exception e) {
+			Logger.e(TAG, "Error in getting response", e);
+			if(retryOnEOF) {
+				Logger.e(TAG, "EOF Exception while making request. Retrying ..");
+				return put(urlString, body, contentType, acceptType, httpParams, false);
+			} else {
+				Logger.e(TAG, "EOF Exception while making request.", e);
+			}
+		} finally {
+			if(conn!=null)
+				conn.disconnect();
+		}
+		return null; 
+	}
+	
+	/**
+	 * Request to server using PUT method
+	 * @param urlString
+	 * @param body
+	 * @param contentType
+	 * @param acceptType
+	 * @param httpParams :can be null
+	 * @return
+	 */
+	public static CZResponse put(String urlString, String body, String contentType, String acceptType, ArrayList<CustomHttpParams> httpParams) {
+		return put(urlString, body, contentType, acceptType, httpParams, true);
+	}
+	private static CZResponse put(String urlString, String body, String contentType,
+								  String acceptType, ArrayList<CustomHttpParams> httpParams, boolean retryOnEOF) {
+		HttpURLConnection conn = null;
+		try { 
+			URL url = new URL(urlString);
+			System.setProperty("http.keepAlive", "false");
+			if(checkHTTPS(urlString)){
+				conn = (HttpsURLConnection) url.openConnection();
+			} else{
+				conn = (HttpURLConnection) url.openConnection();
+			}
+			conn.setReadTimeout(TIME_OUT);
+			conn.setConnectTimeout(TIME_OUT);
+			conn.setRequestMethod(PUT);
+			conn.setRequestProperty(CONTENT_TYPE,contentType);  
+			conn.setRequestProperty(HEADER_ACCEPT,acceptType);  
+			if(httpParams != null && httpParams.size() >0){
+				for(CustomHttpParams params : httpParams){
+					conn.setRequestProperty(params.getKey(), params.getValue());
+				}
+			}
+			if ( Build.VERSION.SDK_INT > 13) {
+				conn.setRequestProperty("Connection", "close");
+			 }
+			conn.setDoInput(true);
+			conn.setDoOutput(true);
+			body = (body != null) ? body : "";
+			byte[] outputInBytes = body.getBytes("UTF-8");
+			OutputStream os = conn.getOutputStream();
+			os.write(outputInBytes);
+			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, "UTF-8"));
+			writer.flush();
+			writer.close();
+			os.close();
+			conn.connect();
+			int statusCode = conn.getResponseCode();
+			Logger.d(TAG, "Status code is : " + statusCode);
+	        switch (statusCode) {
+	            case 200:
+	            	String response = new String(readFullyBytes(conn.getInputStream(), 2 * _4KB));
+	            	Logger.d(TAG, "Response String is : " + response);
+	            	return new CZResponse(statusCode, response);
+	            default:
+	            	return new CZResponse(statusCode, "");
+	        }
+		
+		}catch (Exception e) {
+			Logger.e(TAG, "Error in getting response", e);
+			if(retryOnEOF) {
+				Logger.e(TAG, "EOF Exception while making request. Retrying ..");
+				return put(urlString, body, contentType, acceptType, httpParams, false);
+			} else {
+				Logger.e(TAG, "EOF Exception while making request.", e);
+			}
+		} finally {
+			if(conn!=null)
+				conn.disconnect();
+		}
+		return null; 
+	}
+	
+	
+	/**
+	 * Request to server using GET method
+	 * @param urlString
+	 * @param acceptType
+	 * @return
+	 */
+	public static CZResponse get(String urlString, String acceptType) {
+		HttpURLConnection conn = null;
+		try {
+			URL url = new URL(urlString);
+			System.setProperty("http.keepAlive", "false");
+			if(checkHTTPS(urlString)){
+				conn = (HttpsURLConnection) url.openConnection();
+			} else{
+				conn = (HttpURLConnection) url.openConnection();
+			}
+			conn.setRequestMethod(GET);
+			conn.setReadTimeout(TIME_OUT);
+			conn.setConnectTimeout(TIME_OUT);
+			conn.connect();
+			int statusCode = conn.getResponseCode();
+			Logger.d(TAG, "Status is" + statusCode);
+	        switch (statusCode) {
+	            case 200:
+	            	String response = new String(readFullyBytes(conn.getInputStream(), 2 * _4KB));
+	            	Logger.d(TAG, "Response String is : " + response);
+	            	return new CZResponse(statusCode, response);
+	            default:
+	            	return new CZResponse(statusCode, "");
+	        }
+		} catch (Exception e) {
+			Logger.e(TAG, "Error in getting response", e);
+		} finally {
+			if(conn!=null)
+				conn.disconnect();
+		}
+		return null; 
+	}
+	
+	
+	/**
+	 * Request to server using GET method accept custom parameter
+	 * @param urlString
+	 * @param acceptType
+	 * @return
+	 */
+	public static CZResponse get(String urlString, String acceptType, ArrayList<CustomHttpParams> httpParams) {
+		HttpURLConnection conn = null;
+		try {
+			URL url = new URL(urlString);
+			if(checkHTTPS(urlString)){
+				conn = (HttpsURLConnection) url.openConnection();
+			} else{
+				conn = (HttpURLConnection) url.openConnection();
+			}
+			conn.setRequestMethod(GET);
+			conn.setReadTimeout(TIME_OUT);
+			conn.setConnectTimeout(TIME_OUT);
+			conn.setRequestProperty(HEADER_ACCEPT,acceptType); 
+			if(httpParams != null && httpParams.size() >0){
+				for(CustomHttpParams params : httpParams){
+					conn.setRequestProperty(params.getKey(), params.getValue());
+				}
+			}
+			conn.connect();
+			int statusCode = conn.getResponseCode();
+			Logger.d(TAG, "Status is" + statusCode);
+	        switch (statusCode) {
+	            case 200:
+	            	String response = new String(readFullyBytes(conn.getInputStream(), 2 * _4KB));
+	            	Logger.d(TAG, "Response String is : " + response);
+	            	return new CZResponse(statusCode, response);
+	            default:
+	            	return new CZResponse(statusCode, "");
+	        }
+		} catch (Exception e) {
+			Logger.e(TAG, "Error in getting response", e);
+		} finally {
+			if(conn!=null)
+				conn.disconnect();
+		}
+		return null; 
+	}
+	
+	
+	public static String convertStreamToString(InputStream is) {
+		StringBuilder sb = new StringBuilder();
+		String line = null;
+		try {
+			BufferedReader reader = new BufferedReader(
+					new InputStreamReader(is));
+			while ((line = reader.readLine()) != null) {
+				sb.append(line + "\n");
+			}
+		} catch (IOException e) {
+			Logger.e(TAG, "Error in converting stream to string", e);
+			return null;
+		} catch (IllegalStateException e) {
+			Logger.e(TAG, "Error in converting stream to string", e);
+			return null;
+		} finally {
+			try {
+				is.close();
+			} catch (IOException e) {
+				Logger.e(TAG, "Error in closing Input Stream", e);
+			}
+		}
+		return sb.toString();
+	}
+	
+	public static boolean checkHTTPS(String url){
+		if(url.contains("https")){
+			return true;
+		}
+		return false;
+		
+	}
+	
+	  /**
+     * Read bytes from InputStream efficiently. All data will be read from
+     * stream. This method return the bytes or null. This method will not close
+     * the stream.
+     */
+    public static byte[] readFullyBytes(InputStream is, int blockSize) {
+        byte[] bytes = null;
+        if (is != null) {
+            try {
+                int readed = 0;
+                byte[] buffer = new byte[blockSize];
+                ByteArrayOutputStream bos = new ByteArrayOutputStream();
+                while ((readed = is.read(buffer)) >= 0) {
+                    bos.write(buffer, 0, readed);
+                }
+                bos.flush();
+                bytes = bos.toByteArray();
+            } catch (IOException e) {
+                Logger.e(TAG, " : readFullyBytes: ", e);
+            }
+        }
+        return bytes;
+    }
+  
+    /**
+     * This method upload mutipart file.
+     * @param urlString
+     * @param filePath
+     * @return
+     */
+    public static CZResponse postMultiPartFileUpload(String urlString, String filePath) {
+
+        HttpURLConnection conn = null;
+        DataOutputStream dos = null;
+        String lineEnd = "\r\n";
+        String twoHyphens = "--";
+        String boundary = "*****";
+        int bytesRead, bytesAvailable, bufferSize;
+        byte[] buffer;
+        int maxBufferSize = 1 * 1024 * 1024;
+        File sourceFile = new File(filePath);
+         try {
+	         URL url = new URL(urlString);
+	 		 if(checkHTTPS(urlString)){
+	 			conn = (HttpsURLConnection) url.openConnection();
+	 		 } else{
+	 			conn = (HttpURLConnection) url.openConnection();
+	 		 }
+             FileInputStream fileInputStream = new FileInputStream(sourceFile);
+             conn.setDoInput(true); // Allow Inputs
+             conn.setDoOutput(true); // Allow Outputs
+             conn.setUseCaches(false); // Don't use a Cached Copy
+             conn.setRequestMethod("POST");
+             conn.setRequestProperty("Connection", "Keep-Alive");
+             conn.setRequestProperty("ENCTYPE", "multipart/form-data");
+             conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
+             conn.setRequestProperty("file", filePath);
+             dos = new DataOutputStream(conn.getOutputStream());
+             dos.writeBytes(twoHyphens + boundary + lineEnd);
+             dos.writeBytes("Content-Disposition: form-data; name=\"file\";filename=\""
+                                           + filePath + "\"" + lineEnd);
+             dos.writeBytes(lineEnd);
+             // create a buffer of  maximum size
+             bytesAvailable = fileInputStream.available();
+             bufferSize = Math.min(bytesAvailable, maxBufferSize);
+             buffer = new byte[bufferSize];
+             // read file and write it into form...
+             bytesRead = fileInputStream.read(buffer, 0, bufferSize); 
+             while (bytesRead > 0) {
+               dos.write(buffer, 0, bufferSize);
+               bytesAvailable = fileInputStream.available();
+               bufferSize = Math.min(bytesAvailable, maxBufferSize);
+               bytesRead = fileInputStream.read(buffer, 0, bufferSize);  
+              }
+             dos.writeBytes(lineEnd);
+             dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
+             fileInputStream.close();
+             dos.flush();
+             dos.close();
+             int  statusCode = conn.getResponseCode();
+             Logger.d(TAG, "Status is" + statusCode);
+ 	         switch (statusCode) {
+ 	            case 200:
+ 	            	String response = new String(readFullyBytes(conn.getInputStream(), 2 * _4KB));
+ 	            	Logger.d(TAG, "Response String is : " + response);
+ 	            	return new CZResponse(statusCode, response);
+ 	            default:
+ 	            	return new CZResponse(statusCode, "");
+ 	            }
+         } catch (MalformedURLException ex) {
+          Logger.e(TAG, "error: " + ex.getMessage(), ex); 
+        } catch (Exception e) {
+            Logger.e(TAG, "Exception : "  + e.getMessage(), e); 
+        }
+        return null;
+  }
+    /**
+	 * Request to server using GET method accept custom parameter
+	 * @param urlString
+	 * @param acceptType
+	 * @return
+	 */
+	public static CZResponse get(String urlString, String acceptType, String contentType, ArrayList<CustomHttpParams> httpParams) {
+		HttpURLConnection conn = null;
+		try {
+			URL url = new URL(urlString);
+			if(checkHTTPS(urlString)){
+				conn = (HttpsURLConnection) url.openConnection();
+			} else{
+				conn = (HttpURLConnection) url.openConnection();
+			}
+			conn.setRequestMethod(GET);
+			conn.setReadTimeout(TIME_OUT);
+			conn.setConnectTimeout(TIME_OUT);
+			conn.setRequestProperty(CONTENT_TYPE,contentType);  
+			conn.setRequestProperty(HEADER_ACCEPT,acceptType); 
+			if(httpParams != null && httpParams.size() >0){
+				for(CustomHttpParams params : httpParams){
+					conn.setRequestProperty(params.getKey(), params.getValue());
+				}
+			}
+			conn.connect();
+			int statusCode = conn.getResponseCode();
+			Logger.d(TAG, "Status is" + statusCode);
+	        switch (statusCode) {
+	            case 200:
+	            	String response = new String(readFullyBytes(conn.getInputStream(), 2 * _4KB));
+	            	Logger.d(TAG, "Response String is : " + response);
+	            	return new CZResponse(statusCode, response);
+	            default:
+	            	return new CZResponse(statusCode, "");
+	        }
+		} catch (Exception e) {
+			Logger.e(TAG, "Error in getting response", e);
+		} finally {
+			if(conn!=null)
+				conn.disconnect();
+		}
+		return null; 
+	}
+    
+       
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/Logger.java b/TMessagesProj/src/main/java/org/telegram/socialuser/Logger.java
new file mode 100755
index 000000000..4c7002f36
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/Logger.java
@@ -0,0 +1,74 @@
+package org.telegram.socialuser;
+
+import org.telegram.messenger.BuildConfig;
+
+/**
+ * This is Custom Log class it avoid logs on live build
+ *
+ */
+public class Logger {
+
+    private static final boolean ENABLE_LOGS = BuildConfig.DEBUG;
+
+    public static void v(String TAG, String message) {
+        if (ENABLE_LOGS) {
+            android.util.Log.v(TAG, message);
+        }
+    }
+
+    public static void v(String TAG, String message, Throwable t) {
+        if (ENABLE_LOGS) {
+            android.util.Log.v(TAG, message, t);
+        }
+    }
+
+    public static void d(String TAG, String message) {
+        if (ENABLE_LOGS) {
+            android.util.Log.d(TAG, message);
+        }
+    }
+
+    public static void d(String TAG, String message, Throwable t) {
+        if (ENABLE_LOGS) {
+            android.util.Log.d(TAG, message, t);
+        }
+    }
+
+    public static void e(String TAG, String message) {
+        if (ENABLE_LOGS) {
+            android.util.Log.e(TAG, message);
+        }
+    }
+
+    public static void e(String TAG, String message, Throwable t) {
+        if (ENABLE_LOGS) {
+            android.util.Log.e(TAG, message, t);
+        }
+    }
+
+    public static void i(String TAG, String message) {
+        if (ENABLE_LOGS) {
+            android.util.Log.i(TAG, message);
+        }
+    }
+
+    public static void i(String TAG, String message, Throwable t) {
+        if (ENABLE_LOGS) {
+            android.util.Log.i(TAG, message, t);
+        }
+    }
+
+    public static void w(String TAG, String message) {
+        if (ENABLE_LOGS) {
+            android.util.Log.w(TAG, message);
+        }
+    }
+
+    public static void w(String TAG, String message, Throwable t) {
+        if (ENABLE_LOGS) {
+            android.util.Log.w(TAG, message, t);
+        }
+    }
+
+}
+
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/OnTelegramSync.java b/TMessagesProj/src/main/java/org/telegram/socialuser/OnTelegramSync.java
new file mode 100644
index 000000000..89a8b7172
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/OnTelegramSync.java
@@ -0,0 +1,16 @@
+package org.telegram.socialuser;
+
+import org.telegram.tgnet.TLRPC;
+
+/**
+ * Created by home on 6/26/16.
+ */
+public interface OnTelegramSync {
+
+
+    public void onUserSyncSuccess(TLRPC.User user);
+    public void onUserSyncFailed();
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/UriUtil.java b/TMessagesProj/src/main/java/org/telegram/socialuser/UriUtil.java
new file mode 100755
index 000000000..29d6f42f4
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/UriUtil.java
@@ -0,0 +1,37 @@
+package org.telegram.socialuser;
+
+import org.telegram.messenger.ApplicationLoader;
+
+/**
+ * Created by ram on 20/2/16.
+ */
+public class UriUtil {
+    //http://107.170.73.149:8080/socialshareupapi/user
+    private static String getHTTPRootPath() {
+        return new StringBuilder()
+                .append("http://")
+                .append(ApplicationLoader.getInstance().getHttpServer())
+                .append("user").toString();
+    }
+
+    public static String getHttpUrl(String uid) {
+        return new StringBuilder()
+                .append(getHTTPRootPath())
+                .append("/").append(uid).toString();
+    }
+    public static String getHttpUrl(String uid,int count) {
+        return new StringBuilder()
+                .append(getHTTPRootPath())
+                .append("/").append(uid).append("?count=").append(count).toString();
+    }
+
+//http://{{host}}/socialshareupapi/user/premiumuser
+
+    public static String getPaymentUrl() {
+        return new StringBuilder().append(getHTTPRootPath()).append("/").append("premiumuser").toString();
+
+    }
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/Util.java b/TMessagesProj/src/main/java/org/telegram/socialuser/Util.java
new file mode 100644
index 000000000..312780548
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/Util.java
@@ -0,0 +1,174 @@
+package org.telegram.socialuser;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.ui.Adapters.CountryAdapter;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+
+/**
+ * Created by ram on 13/6/16.
+ */
+public class Util {
+    public static String getDate(String val){
+
+        if(val!=null &&!val.equalsIgnoreCase("")) {
+            Long value = Long.parseLong(val);
+            Date date=new Date(value);
+            SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MMM-dd");
+            String dateText = df2.format(date);
+            return dateText;
+        }
+        return "2001-jun-20";
+    }
+    public static String getNumber(String code) {
+        SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+        String pcode =p.getString("pCode","911");
+        String cCode =p.getString("cCode","AU");
+        //int index = code.indexOf(pcode);
+        code = code.substring(pcode.length(),code.length());
+        return cCode+"_"+code;
+    }
+    public static String getDateforserver(int yr,int mt,int day){
+       Calendar cc =  Calendar.getInstance();
+        cc.set(yr,mt,day);
+        Long value =cc.getTimeInMillis();
+        Date date=new Date(value);
+        SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MMM-dd");
+        String dateText = df2.format(date);
+        return dateText;
+    }
+
+    public static String getMonth(int no){
+        switch (no){
+
+            case 0: return "Jan";
+            case 1:return "Feb";
+            case 2 : return "Mar";
+            case 3 : return  "Apr";
+            case 4: return "May";
+            case 5: return "Jun";
+            case 6 : return "Jul";
+            case 7: return "Aug";
+            case 8:return "Sep";
+            case 9 : return "Oct";
+            case 10 : return  "Nov";
+            case 11: return "Dec";
+            default:return "Mon";
+        }
+    }
+
+    public static String getCountryName(String shortname) {
+        ArrayList<CountryAdapter.Country> arr = new ArrayList<>();
+        try {
+
+            InputStream stream = ApplicationLoader.applicationContext.getResources().getAssets().open("countries.txt");
+            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] args = line.split(";");
+                CountryAdapter.Country c = new CountryAdapter.Country();
+                c.name = args[2];
+                c.code = args[0];
+                c.shortname = args[1];
+                arr.add(c);
+            }
+            reader.close();
+            stream.close();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        for(CountryAdapter.Country cc:arr){
+            if(shortname.equalsIgnoreCase(cc.shortname)){
+                return cc.name;
+            }
+        }
+   return "India";
+    }
+
+    public static CountryAdapter.Country getcountry(String name){
+        ArrayList<CountryAdapter.Country> arr = new ArrayList<>();
+        try {
+
+            InputStream stream = ApplicationLoader.applicationContext.getResources().getAssets().open("countries.txt");
+            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] args = line.split(";");
+                CountryAdapter.Country c = new CountryAdapter.Country();
+                c.name = args[2];
+                c.code = args[0];
+                c.shortname = args[1];
+                arr.add(c);
+            }
+            reader.close();
+            stream.close();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        for(CountryAdapter.Country cc:arr){
+            if(name.equalsIgnoreCase(cc.name)){
+                return cc;
+            }
+        }
+        return null;
+    }
+
+    public static String getMobileNumber(String number) {
+        if (number==null){
+            return number;
+        }
+        if(number.startsWith("0")){
+            number = number.substring(1);
+            SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+            String pcode =p.getString("pCode","911");
+            number = pcode+number;
+            return number;
+        } else{
+            return number;
+        }
+    }
+
+    public static String convertDate(String input) {
+       try{
+           String date[] = input.split("-");
+           return date[0]+"-"+getMonthvalue(date[1])+"-"+date[2];
+       } catch (Exception e){
+           return "2001-jun-20";
+       }
+    }
+        private static String getMonthvalue(String month) {
+            switch(month) {
+                case "Jan": return "01";
+                case "Feb":return "02";
+                case "Mar" : return "03";
+                case  "Apr" : return  "04";
+                case "May": return "05";
+                case "Jun": return "06";
+                case "Jul" : return "07";
+                case "Aug": return "08";
+                case "Sep":return "09";
+                case "Oct" : return "10";
+                case "Nov" : return  "11";
+                case "Dec": return "12";
+                default:return "00";
+            }
+        }
+
+    private String getDatetoserver(int year, int month, int day) {
+        return (new StringBuilder().append(year+"").append("-")
+                .append(month+"".length()==1?"0"+month:month+"").append("-").append(day+"".length()==1?"0"+day:day+"")).toString();
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/model/CZResponse.java b/TMessagesProj/src/main/java/org/telegram/socialuser/model/CZResponse.java
new file mode 100755
index 000000000..4dfabcf54
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/model/CZResponse.java
@@ -0,0 +1,29 @@
+package org.telegram.socialuser.model;
+
+
+public class CZResponse {
+	private int responseCode;
+	private String responseString;
+	
+	
+	public CZResponse(int responseCode, String responseString) {
+		super();
+		this.responseCode = responseCode;
+		this.responseString = responseString;
+	}
+	public int getResponseCode() {
+		return responseCode;
+	}
+	public void setResponseCode(int responseCode) {
+		this.responseCode = responseCode;
+	}
+	public String getResponseString() {
+		return responseString;
+	}
+	public void setResponseString(String responseString) {
+		this.responseString = responseString;
+	}
+	
+	
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/model/ContactsRequest.java b/TMessagesProj/src/main/java/org/telegram/socialuser/model/ContactsRequest.java
new file mode 100644
index 000000000..7f4849c94
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/model/ContactsRequest.java
@@ -0,0 +1,27 @@
+package org.telegram.socialuser.model;
+
+import com.google.gson.annotations.Expose;
+
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 10/6/16.
+ */
+public class ContactsRequest {
+
+    @Expose
+    private ArrayList<TLRPC.TelegramUsers> telegramUsers;
+
+    public ArrayList<TLRPC.TelegramUsers> getTelegramUsers ()
+    {
+        return telegramUsers;
+    }
+
+    public void setTelegramUsers (ArrayList<TLRPC.TelegramUsers> telegramUsers)
+    {
+        this.telegramUsers = telegramUsers;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/model/CustomHttpParams.java b/TMessagesProj/src/main/java/org/telegram/socialuser/model/CustomHttpParams.java
new file mode 100755
index 000000000..d1e6aa098
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/model/CustomHttpParams.java
@@ -0,0 +1,27 @@
+package org.telegram.socialuser.model;
+
+public class CustomHttpParams {
+
+	private String key;
+	private String value;
+	
+	public CustomHttpParams(String key, String value){
+		this.key = key;
+		this.value = value;
+	}
+	
+	public String getKey() {
+		return key;
+	}
+	public void setKey(String key) {
+		this.key = key;
+	}
+	public String getValue() {
+		return value;
+	}
+	public void setValue(String value) {
+		this.value = value;
+	}
+	
+	
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/model/DataCenter.java b/TMessagesProj/src/main/java/org/telegram/socialuser/model/DataCenter.java
new file mode 100644
index 000000000..c60c624e1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/model/DataCenter.java
@@ -0,0 +1,42 @@
+package org.telegram.socialuser.model;
+
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * Created by ram on 19/6/16.
+ */
+public class DataCenter {
+
+
+    public static HashMap<String,ArrayList<TLRPC.TelegramUsers>> getBigdata(){
+        HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = ContactsController.getInstance().usersSectionsDict;
+        ArrayList<ContactsController.Contact> contactses = ContactsController.getInstance().phoneBookContacts;
+        HashMap<String,ArrayList<TLRPC.TelegramUsers>> bigList =new HashMap<>();
+        ArrayList<String> sortedUsersSectionsArray = ContactsController.getInstance().sortedUsersSectionsArray;
+        final ArrayList<TLRPC.User> userArrayList = new ArrayList<>();
+        ArrayList<TLRPC.TelegramUsers> telegramUserses = new ArrayList<>();
+        for (String index : sortedUsersSectionsArray) {
+            for (TLRPC.TL_contact con : usersSectionsDict.get(index)) {
+                userArrayList.add(MessagesController.getInstance().getUser(con.user_id));
+                TLRPC.TelegramUsers uu = new TLRPC.TelegramUsers();
+                TLRPC.User usertemp = MessagesController.getInstance().getUser(con.user_id);
+                uu.setPhoto(usertemp.photo);
+                uu.setPhone(usertemp.phone);
+                uu.setUsername(usertemp.username);
+                uu.setname(usertemp.first_name + " " + (usertemp.last_name!=null?usertemp.last_name:""));
+                uu.setId(usertemp.id + "");
+                telegramUserses.add(uu);
+            }
+        }
+
+        for(int i =0;i<5;i++){
+            bigList.put(i+"",telegramUserses);
+        }
+        return bigList;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddContactRequester.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddContactRequester.java
new file mode 100644
index 000000000..c506fee46
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddContactRequester.java
@@ -0,0 +1,43 @@
+package org.telegram.socialuser.runable;
+
+
+import android.app.Activity;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.ContactsRequest;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 2/6/16.
+ */
+public class AddContactRequester implements Runnable {
+    private ArrayList<TLRPC.TelegramUsers> userList;
+    private ArrayList<CustomHttpParams> params;
+
+    public AddContactRequester(ArrayList<TLRPC.TelegramUsers> uList, ArrayList<CustomHttpParams> params) {
+        this.userList = uList;
+        this.params = params;
+    }
+
+    @Override
+    public void run() {
+        ContactsRequest model = new ContactsRequest();
+        model.setTelegramUsers(userList);
+        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
+        String json = gson.toJson(model);
+        CZResponse data1 = HttpUrlConnectionUtil.post(UriUtil.getHttpUrl("contact"),json,null,"application/json",params);
+
+        if(data1.getResponseCode() == 200){
+            ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit().putBoolean("datasend",true).commit();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddUserRequester.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddUserRequester.java
new file mode 100644
index 000000000..67f4d898c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddUserRequester.java
@@ -0,0 +1,71 @@
+package org.telegram.socialuser.runable;
+
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.Logger;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.Util;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.listners.OnAddUserListner;
+
+/**
+ * Created by ram on 2/6/16.
+ */
+public class AddUserRequester implements Runnable {
+    private TLRPC.TelegramUsers user;
+
+    public AddUserRequester(TLRPC.TelegramUsers user, String url) {
+        this.user = user;
+    }
+
+    @Override
+    public void run() {
+        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
+        String json = gson.toJson(user);
+       CZResponse data1 = HttpUrlConnectionUtil.post(UriUtil.getHttpUrl("register"),json,null,"application/json", null);
+        if(data1.getResponseCode() == 200){
+            SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+            try {
+                TLRPC.SocialUserResponse resUser = gson.fromJson(data1.getResponseString(), TLRPC.SocialUserResponse.class);
+                p.edit().putBoolean("Login_Status",false).commit();
+                p.edit().putString("sex",resUser.sex).commit();
+                if(resUser.dob!=null) {
+                    p.edit().putString("dob", Util.getDate(resUser.dob)).commit();
+                }
+                p.edit().putString("social_id",resUser.userId).commit();
+                p.edit().putString("visibility",resUser.visibility).commit();
+                p.edit().putString("userHash",resUser.userHash).commit();
+
+          /*      for(OnAddUserListner listner : ApplicationLoader.getInstance().getUIListeners(OnAddUserListner.class)){
+
+                    listner.setUserAddSuccess();
+                }*/
+
+
+            }catch (Exception e){
+            Logger.d("UserRegistration",e.getStackTrace().toString());
+            }
+
+        }
+        else{
+
+        /*    for(OnAddUserListner listner : ApplicationLoader.getInstance().getUIListeners(OnAddUserListner.class)){
+
+                listner.setUserAddFailed();
+            }
+*/
+
+        }
+
+
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetMutualFriendRq.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetMutualFriendRq.java
new file mode 100644
index 000000000..dea72ca6f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetMutualFriendRq.java
@@ -0,0 +1,76 @@
+package org.telegram.socialuser.runable;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.Logger;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.ContactsRequest;
+import org.telegram.ui.UserProfileActivity;
+import org.telegram.ui.listners.OnServerResponse;
+
+/**
+ * Created by ram on 15/6/16.
+ */
+public class GetMutualFriendRq implements Runnable{
+
+    public boolean isMore = false;
+    public boolean isPending = false;
+    public int ofset = 0;
+    private OnServerResponse listner;
+    private Gson gson;
+    private ContactsRequest contactsRequest = null;
+    private String url;
+    private UserProfileActivity.MutualFriend mutualFriend;
+
+
+    public GetMutualFriendRq(UserProfileActivity.MutualFriend mutualFriend, OnServerResponse listner, String url) {
+        this.listner = listner;
+        this.mutualFriend = mutualFriend;
+        gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
+        this.url = url;
+    }
+    @Override
+    public void run() {
+        if(isPending){
+            return;
+        }
+        isPending = true;
+        if(isPending) {
+            try {
+                Gson gson = new Gson();
+                String body = gson.toJson(mutualFriend);
+                CZResponse data1 = HttpUrlConnectionUtil.post(UriUtil.getHttpUrl(url,ofset),body,null, "application/json",null);
+                if (data1.getResponseCode() == 200) {
+                    if (data1.getResponseString() != null) {
+                        contactsRequest = gson.fromJson(data1.getResponseString(), ContactsRequest.class);
+                        if (contactsRequest.getTelegramUsers().isEmpty()) {
+                            isMore = false;
+                            isPending= false;
+                            listner.setErrorList();
+
+                        } else {
+
+                                isMore = true;
+                            listner.setFriendList(contactsRequest.getTelegramUsers());
+                                isPending = false;
+                                //listner.setFriendList(bigData.get(ofset + ""));
+                        }
+                    }
+                } else {
+                    listner.setErrorList();
+                }
+            } catch (Exception e){
+                listner.setErrorList();
+                Logger.d("Get_Mutual_friend",e.getStackTrace().toString());
+            }
+        }
+
+    }
+    public GetMutualFriendRq loadMore() {
+        this.ofset++;
+        return this;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetPreferenceRq.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetPreferenceRq.java
new file mode 100644
index 000000000..05da6972d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetPreferenceRq.java
@@ -0,0 +1,47 @@
+package org.telegram.socialuser.runable;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+
+import com.google.gson.Gson;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.Logger;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.ui.PreferencesActivity;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 2/6/16.
+ */
+public class GetPreferenceRq implements Runnable {
+    private ArrayList<CustomHttpParams> params;
+    private PreferencesActivity listner;
+    public GetPreferenceRq(ArrayList<CustomHttpParams> params,PreferencesActivity listner)
+    {
+        this.params = params;
+        this.listner =listner;
+    }
+    @Override
+    public void run() {
+        try {
+            CZResponse data1 = HttpUrlConnectionUtil.get(UriUtil.getHttpUrl("preference"), "application/json", params);
+            if (data1.getResponseCode() == 200) {
+                Gson gson = new Gson();
+                PreferencesActivity.PreferenceData JsonData = gson.fromJson(data1.getResponseString(), PreferencesActivity.PreferenceData.class);
+                SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("preferences", Activity.MODE_PRIVATE);
+                p.edit().putString("minage", JsonData.getMinage()).commit();
+                p.edit().putString("maxage", JsonData.getMaxage()).commit();
+                p.edit().putString("sexPreferences", JsonData.getSex()).commit();
+                p.edit().putString("preferencecCode", JsonData.getcCode()).commit();
+                listner.onGetpreferencessuccess();
+            }
+        } catch (Exception e) {
+            Logger.d("Get_preferences",e.getStackTrace().toString());
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetSuggestFriendsRq.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetSuggestFriendsRq.java
new file mode 100644
index 000000000..51984b6c6
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetSuggestFriendsRq.java
@@ -0,0 +1,78 @@
+package org.telegram.socialuser.runable;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.Logger;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.ContactsRequest;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.ui.listners.OnServerResponse;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 15/6/16.
+ */
+public class GetSuggestFriendsRq implements Runnable{
+
+
+
+    public boolean isMore = false;
+    public boolean isPending = false;
+    public int ofset = 0;
+    private ArrayList<CustomHttpParams> param;
+    private OnServerResponse listner;
+    private Gson gson;
+    private ContactsRequest contactsRequest = null;
+    private String url;
+
+    public GetSuggestFriendsRq(ArrayList<CustomHttpParams> param, OnServerResponse listner,String url) {
+        this.listner = listner;
+        this.param = param;
+        gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
+        this.url = url;
+    }
+    @Override
+    public void run() {
+        if(isPending){
+            return;
+        }
+        isPending = true;
+        if(isPending) {
+            try {
+
+               CZResponse data1 = HttpUrlConnectionUtil.get(UriUtil.getHttpUrl(url,ofset), "application/json",param);
+                if (data1.getResponseCode() == 200) {
+                    if (data1.getResponseString() != null) {
+                        contactsRequest = gson.fromJson(data1.getResponseString(), ContactsRequest.class);
+                        if (contactsRequest.getTelegramUsers().isEmpty()) {
+                            isMore = false;
+                            isPending= false;
+                            listner.setErrorList();
+
+                        } else {
+
+                                isMore = true;
+                                 listner.setFriendList(contactsRequest.getTelegramUsers());
+                                isPending = false;
+
+                        }
+                    }
+                } else {
+                    listner.setErrorList();
+                }
+            } catch (Exception e){
+                Logger.d("Get_Suggested_friend",e.getStackTrace().toString());
+                listner.setErrorList();
+            }
+        }
+
+    }
+    public GetSuggestFriendsRq loadMore() {
+        this.ofset++;
+        return this;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetUserRequester.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetUserRequester.java
new file mode 100644
index 000000000..d5f58943c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/GetUserRequester.java
@@ -0,0 +1,63 @@
+package org.telegram.socialuser.runable;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.Logger;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.Util;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.listners.OnSocialLogin;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 13/6/16.
+ */
+public class GetUserRequester implements Runnable {
+
+    private ArrayList<CustomHttpParams> params;
+    private OnSocialLogin login;
+    public GetUserRequester(ArrayList<CustomHttpParams> params, OnSocialLogin login){
+        this.params = params;
+        this.login = login;
+    }
+
+
+    @Override
+    public void run() {
+        CZResponse data1 = HttpUrlConnectionUtil.get(UriUtil.getHttpUrl("getUser"),"application/json",params);
+        if(data1.getResponseCode() == 200){
+            SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+            try {
+                Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
+                TLRPC.SocialUserResponse resUser = gson.fromJson(data1.getResponseString(), TLRPC.SocialUserResponse.class);
+                if(resUser.id!=null) {
+                    p.edit().putBoolean("Login_Status",false).commit();
+                    p.edit().putString("social_id", resUser.userId).commit();
+                    p.edit().putString("sex", resUser.sex).commit();
+                    if(resUser.dob!=null){
+                        p.edit().putString("dob", Util.getDate(resUser.dob)).commit();
+                    }
+                    p.edit().putString("visibility", resUser.visibility).commit();
+                    p.edit().putString("userHash", resUser.userHash).commit();
+
+                    login.onSocialFailer(resUser.userId);
+                } else {
+                  login.onSocialLoginSuccess();
+
+                }
+            }catch (Exception e){
+                Logger.d("GetUserRequester",e.getStackTrace().toString());
+            }
+        }
+       // login.onSocialLoginError();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/PreferencesRequester.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/PreferencesRequester.java
new file mode 100644
index 000000000..922a1ac11
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/PreferencesRequester.java
@@ -0,0 +1,44 @@
+package org.telegram.socialuser.runable;
+
+import com.google.gson.Gson;
+
+import org.telegram.socialuser.HttpUrlConnectionUtil;
+import org.telegram.socialuser.UriUtil;
+import org.telegram.socialuser.model.CZResponse;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.ui.PreferencesActivity;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 2/6/16.
+ */
+public class PreferencesRequester implements Runnable {
+    private PreferencesActivity.PreferenceData data;
+    private ArrayList<CustomHttpParams> params;
+    private PreferencesActivity listner;
+
+
+    public PreferencesRequester(PreferencesActivity.PreferenceData data,ArrayList<CustomHttpParams> params,PreferencesActivity listner) {
+        this.data = data;
+        this.params =params;
+        this.listner = listner;
+
+    }
+
+    @Override
+    public void run() {
+        Gson gson = new Gson();
+        String body = gson.toJson(data);
+        CZResponse data1 = HttpUrlConnectionUtil.post(UriUtil.getHttpUrl("preference"),body,null,"application/json",params);
+        if(data1.getResponseCode() == 200){
+            listner.setPreferencesSuccess();
+        }else {
+            listner.setPreferencesFailed();
+        }
+   if(data1==null){
+       listner.setPreferencesFailed();
+   }
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
index fc2342996..15e5a6534 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
@@ -8,6 +8,8 @@
 
 package org.telegram.tgnet;
 
+import com.google.gson.annotations.Expose;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 
@@ -13853,6 +13855,175 @@ public void serializeToStream(AbstractSerializedData stream) {
 			}
 		}
 	}
+
+
+
+
+	//////////////////////////////////////////////////////////////////////////
+
+
+
+
+
+	public static class TelegramUsers{
+
+
+		@Expose
+		public String name;
+		@Expose public String username;
+		@Expose public String phone;
+		@Expose public String cCode;
+		@Expose public String sex;
+		@Expose public String dob;
+		@Expose public String id;
+		@Expose public UserProfilePhoto photo;
+		@Expose public String userId;
+		@Expose public String visibility;
+		@Expose public String userHash;
+
+		public String getUserId() {
+			return userId;
+		}
+
+		public void setUserId(String userId) {
+			this.userId = userId;
+		}
+
+		public String getVisibility() {
+			return visibility;
+		}
+
+		public void setVisibility(String visibility) {
+			this.visibility = visibility;
+		}
+
+		public String getUserHash() {
+			return userHash;
+		}
+
+		public void setUserHash(String userHash) {
+			this.userHash = userHash;
+		}
+
+		public String getname() {
+			return name;
+		}
+
+		public void setname(String first_name) {
+			this.name = first_name;
+		}
+
+		/*public String getLast_name() {
+			return last_name;
+		}*/
+
+		/*//public void setLast_name(String last_name) {
+			this.last_name = last_name;
+		}*/
+
+		public String getUsername() {
+			return username;
+		}
+
+		public void setUsername(String username) {
+			this.username = username;
+		}
+
+		public String getPhone() {
+			return phone;
+		}
+
+		public void setPhone(String phone) {
+			this.phone = phone;
+		}
+
+		public String getcCode() {
+			return cCode;
+		}
+
+		public void setcCode(String cCode) {
+			this.cCode = cCode;
+		}
+
+		public String getSex() {
+			return sex;
+		}
+
+		public void setSex(String sex) {
+			this.sex = sex;
+		}
+
+		public String getDob() {
+			return dob;
+		}
+
+		public void setDob(String dob) {
+			this.dob = dob;
+		}
+
+		public String getId() {
+			return id;
+		}
+
+		public void setId(String id) {
+			this.id = id;
+		}
+
+		public UserProfilePhoto getPhoto() {
+			return photo;
+		}
+
+		public void setPhoto(UserProfilePhoto photo) {
+			this.photo = photo;
+		}
+
+	}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+	/////////////////////////////////////////////////////////////////////////////////////////////////
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 	public static class TL_geoChat extends Chat {
 		public static int constructor = 0x75eaea5a;
@@ -20953,6 +21124,134 @@ public void serializeToStream(AbstractSerializedData stream) {
         }
     }
 
+
+	////////////////////////////////////////////
+
+
+	public static class SocialUserResponse {
+
+
+		@Expose public String name;
+		@Expose public String username;
+		@Expose public String phone;
+		@Expose public String cCode;
+		@Expose public String sex;
+		@Expose public String dob;
+		@Expose public String id;
+		@Expose public UserProfilePhoto photo;
+		@Expose public String userId;
+		@Expose public String visibility;
+		@Expose public String userHash;
+
+		public String getUserId() {
+			return userId;
+		}
+
+		public void setUserId(String userId) {
+			this.userId = userId;
+		}
+
+		public String getVisibility() {
+			return visibility;
+		}
+
+		public void setVisibility(String visibility) {
+			this.visibility = visibility;
+		}
+
+		public String getUserHash() {
+			return userHash;
+		}
+
+		public void setUserHash(String userHash) {
+			this.userHash = userHash;
+		}
+
+		public String getname() {
+			return name;
+		}
+
+		public void setname(String first_name) {
+			this.name = first_name;
+		}
+
+		/*public String getLast_name() {
+			return last_name;
+		}*/
+
+		/*//public void setLast_name(String last_name) {
+			this.last_name = last_name;
+		}*/
+
+		public String getUsername() {
+			return username;
+		}
+
+		public void setUsername(String username) {
+			this.username = username;
+		}
+
+		public String getPhone() {
+			return phone;
+		}
+
+		public void setPhone(String phone) {
+			this.phone = phone;
+		}
+
+		public String getcCode() {
+			return cCode;
+		}
+
+		public void setcCode(String cCode) {
+			this.cCode = cCode;
+		}
+
+		public String getSex() {
+			return sex;
+		}
+
+		public void setSex(String sex) {
+			this.sex = sex;
+		}
+
+		public String getDob() {
+			return dob;
+		}
+
+		public void setDob(String dob) {
+			this.dob = dob;
+		}
+
+		public String getId() {
+			return id;
+		}
+
+		public void setId(String id) {
+			this.id = id;
+		}
+
+		public UserProfilePhoto getPhoto() {
+			return photo;
+		}
+
+		public void setPhoto(UserProfilePhoto photo) {
+			this.photo = photo;
+		}
+	}
+
+
+
+	///////////////////////////////////////////////////
+
+
+
+
+
+
+
+
+
     public static class TL_message_old3 extends TL_message {
         public static int constructor = 0xa7ab1991;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index 8d420f95a..beb15846f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -20,6 +20,7 @@
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
+import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimatorListenerAdapterProxy;
@@ -56,7 +57,7 @@ public boolean canOpenMenu() {
     private boolean allowOverlayTitle;
     private CharSequence lastTitle;
     private boolean castShadows = true;
-
+    private  TextView textView;
     protected boolean isSearchFieldVisible;
     protected int itemsBackgroundColor;
     private boolean isBackOverlayVisible;
@@ -218,6 +219,45 @@ public ActionBarMenu createActionMode() {
         return actionMode;
     }
 
+
+    ////////////////////////////////////////////////////////
+
+    public void setTextLast(String text) {
+        if (textView == null) {
+            createTextLast();
+        }
+        textView.setText(text);
+        textView.setTextColor(0xffffffff);
+    }
+
+    private void createTextLast() {
+        if (textView != null) {
+            return;
+        }
+        textView = new TextView(getContext());
+        textView.setPadding(0,30,AndroidUtilities.dp(1), 0);
+        addView(textView, LayoutHelper.createFrame(54, 54, Gravity.RIGHT | Gravity.TOP));
+
+       /* backButtonImageView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (isSearchFieldVisible) {
+                    closeSearchField();
+                    return;
+                }
+                if (actionBarMenuOnItemClick != null) {
+                    actionBarMenuOnItemClick.onItemClick(-1);
+                }
+            }
+        });*/
+    }
+
+    ///////////////////////////////////////////////////////////
+
+
+
+
+
     public void showActionMode() {
         if (actionMode == null || actionModeVisible) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
index ade259fc5..961e5761c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
@@ -9,6 +9,7 @@
 package org.telegram.ui.Adapters;
 
 import android.content.Context;
+import android.os.Build;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -18,6 +19,7 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
+import org.telegram.ui.Cells.AdvertiesmentCell;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.GreySectionCell;
 import org.telegram.ui.Cells.LetterSectionCell;
@@ -28,7 +30,6 @@
 import java.util.HashMap;
 
 public class ContactsAdapter extends BaseSectionsAdapter {
-
     private Context mContext;
     private int onlyUsers;
     private boolean needPhonebook;
@@ -72,8 +73,13 @@ public Object getItem(int section, int position) {
             } else {
                 if (section - 1 < sortedUsersSectionsArray.size()) {
                     ArrayList<TLRPC.TL_contact> arr = usersSectionsDict.get(sortedUsersSectionsArray.get(section - 1));
-                    if (position < arr.size()) {
-                        return MessagesController.getInstance().getUser(arr.get(position).user_id);
+
+                    if(position != 0 && position % 5 == 0){
+                        return null;
+                    }
+                    int index = position - position/5;
+                    if (index < arr.size()) {
+                        return MessagesController.getInstance().getUser(arr.get(index).user_id);
                     }
                     return null;
                 }
@@ -95,7 +101,14 @@ public boolean isRowEnabled(int section, int row) {
             return row < arr.size();
         } else {
             if (section == 0) {
-                if (needPhonebook || isAdmin) {
+                if (needPhonebook) {
+                    if (row == 1) {
+                        return true;
+                    } else if (row == 2) {
+
+                        return false;
+                    }
+                } else  if (isAdmin) {
                     if (row == 1) {
                         return false;
                     }
@@ -107,7 +120,7 @@ public boolean isRowEnabled(int section, int row) {
                 return true;
             } else if (section - 1 < sortedUsersSectionsArray.size()) {
                 ArrayList<TLRPC.TL_contact> arr = usersSectionsDict.get(sortedUsersSectionsArray.get(section - 1));
-                return row < arr.size();
+                return (row  - row /5)< arr.size();
             }
         }
         return true;
@@ -145,9 +158,11 @@ public int getCountForSection(int section) {
             }
         } else {
             if (section == 0) {
-                if (needPhonebook || isAdmin) {
+                if (needPhonebook) {
+                    return 3;
+                } if(isAdmin){
                     return 2;
-                } else {
+                }else {
                     return 4;
                 }
             } else if (section - 1 < sortedUsersSectionsArray.size()) {
@@ -156,6 +171,7 @@ public int getCountForSection(int section) {
                 if (section - 1 != (sortedUsersSectionsArray.size() - 1) || needPhonebook) {
                     count++;
                 }
+                count = count + count / 5;
                 return count;
             }
         }
@@ -210,7 +226,13 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
             }
             TextCell actionCell = (TextCell) convertView;
             if (needPhonebook) {
-                actionCell.setTextAndIcon(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_invite);
+                if(position == 0) {
+                    actionCell.setTextAndIcon(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_invite);
+                } else if(position == 1){
+                    actionCell.setTextAndPremiumIcon(LocaleController.getString("peopleyoumayknow", R.string.peopleyoumayknow),R.drawable.premium1, R.drawable.ic_group);
+
+                }
+
             } else if (isAdmin) {
                 actionCell.setTextAndIcon(LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink), R.drawable.menu_invite);
             } else {
@@ -227,17 +249,16 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
                 convertView = new TextCell(mContext);
             }
             ContactsController.Contact contact = ContactsController.getInstance().phoneBookContacts.get(position);
-            TextCell textCell = (TextCell) convertView;
             if (contact.first_name != null && contact.last_name != null) {
-                textCell.setText(contact.first_name + " " + contact.last_name);
+                ((TextCell) convertView).setText(contact.first_name + " " + contact.last_name);
             } else if (contact.first_name != null && contact.last_name == null) {
-                textCell.setText(contact.first_name);
+                ((TextCell) convertView).setText(contact.first_name);
             } else {
-                textCell.setText(contact.last_name);
+                ((TextCell) convertView).setText(contact.last_name);
             }
         } else if (type == 0) {
             if (convertView == null) {
-                convertView = new UserCell(mContext, 58, 1, false);
+                convertView = new UserCell(mContext, 58, 1,false);
                 ((UserCell) convertView).setStatusColors(0xffa8a8a8, 0xff3b84c0);
             }
 
@@ -245,17 +266,23 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
             ArrayList<String> sortedUsersSectionsArray = onlyUsers == 2 ? ContactsController.getInstance().sortedUsersMutualSectionsArray : ContactsController.getInstance().sortedUsersSectionsArray;
 
             ArrayList<TLRPC.TL_contact> arr = usersSectionsDict.get(sortedUsersSectionsArray.get(section - (onlyUsers != 0 && !isAdmin ? 0 : 1)));
-            TLRPC.User user = MessagesController.getInstance().getUser(arr.get(position).user_id);
+            int index = position - position/5;
+            TLRPC.User user = MessagesController.getInstance().getUser(arr.get(index).user_id);
             ((UserCell) convertView).setData(user, null, null, 0);
             if (checkedMap != null) {
-                ((UserCell) convertView).setChecked(checkedMap.containsKey(user.id), !scrolling);
+                ((UserCell) convertView).setChecked(checkedMap.containsKey(user.id), !scrolling && Build.VERSION.SDK_INT > 10);
             }
             if (ignoreUsers != null) {
-                if (ignoreUsers.containsKey(user.id)) {
-                    convertView.setAlpha(0.5f);
+               /* if (ignoreUsers.containsKey(user.id)) {
+                    ViewProxy.setAlpha(convertView, 0.5f);
                 } else {
-                    convertView.setAlpha(1.0f);
-                }
+                    ViewProxy.setAlpha(convertView, 1.0f);
+                }*/
+            }
+        }else if(type == 5){
+            if(convertView == null){
+                //if()
+                convertView = new AdvertiesmentCell(mContext);
             }
         }
         return convertView;
@@ -270,26 +297,36 @@ public int getItemViewType(int section, int position) {
             return position < arr.size() ? 0 : 4;
         } else {
             if (section == 0) {
-                if (needPhonebook || isAdmin) {
-                    if (position == 1) {
+                if (needPhonebook) {
+                    if (position == 2) {
                         return 3;
                     }
-                } else {
-                    if (position == 3) {
+                }else if (isAdmin) {
+                    if (position == 2) {
+                        return 3;
+                    }
+                }  else {
+                    if (position == 4) {
                         return 3;
                     }
                 }
                 return 2;
             } else if (section - 1 < sortedUsersSectionsArray.size()) {
+                if(position != 0 && position % 5 == 0){
+                    return 5;
+                }
                 ArrayList<TLRPC.TL_contact> arr = usersSectionsDict.get(sortedUsersSectionsArray.get(section - 1));
-                return position < arr.size() ? 0 : 4;
+                return position  < (arr.size() + arr.size()/5) ? 0 : 4;
             }
         }
+        if(position != 0 && position % 10 == 0){
+            return 5;
+        }
         return 1;
     }
 
     @Override
     public int getViewTypeCount() {
-        return 5;
+        return 6;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index 46557a3ac..30126cac5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -16,6 +16,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Cells.AdvertiesmentCell;
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.LoadingCell;
 
@@ -69,16 +70,18 @@ public int getItemCount() {
         if (!MessagesController.getInstance().dialogsEndReached) {
             count++;
         }
+        count = count + count/5 -1;
         currentCount = count;
         return count;
     }
 
     public TLRPC.TL_dialog getItem(int i) {
         ArrayList<TLRPC.TL_dialog> arrayList = getDialogsArray();
-        if (i < 0 || i >= arrayList.size()) {
+        /*if (i < 0 || i >= arrayList.size()) {
             return null;
-        }
-        return arrayList.get(i);
+        }*/
+        int itemId = i - (i+1)/6;
+        return arrayList.get(itemId);
     }
 
     @Override
@@ -101,30 +104,55 @@ public long getItemId(int i) {
         } else if (viewType == 1) {
             view = new LoadingCell(mContext);
         }
+        else if(viewType == 2){
+            view = new AdvertiesmentCell(mContext);
+        }
         view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
         return new Holder(view);
     }
 
     @Override
     public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
+        int position = i;
         if (viewHolder.getItemViewType() == 0) {
             DialogCell cell = (DialogCell) viewHolder.itemView;
-            cell.useSeparator = (i != getItemCount() - 1);
-            TLRPC.TL_dialog dialog = getItem(i);
+
+            cell.useSeparator = (position != getItemCount() - 1);
+            //TLRPC.TL_dialog dialog = getItem(i);
+            TLRPC.TL_dialog dialog = getItem(position);
+            /*ell.useSeparator = (i != getItemCount() - 1);
+            TLRPC.TL_dialog dialog = getItem(i);*/
             if (dialogsType == 0) {
                 if (AndroidUtilities.isTablet()) {
                     cell.setDialogSelected(dialog.id == openedDialogId);
                 }
             }
-            cell.setDialog(dialog, i, dialogsType);
+
+            cell.setDialog(dialog, position - (position+1)/6, dialogsType);
+            // cell.setDialog(dialog, i, dialogsType);
         }
     }
 
     @Override
     public int getItemViewType(int i) {
-        if (i == getDialogsArray().size()) {
-            return 1;
+        if( i != 0 && (i+1)%6 == 0)
+        {
+            return 2;
         }
+        else {
+            if (i == getDialogsArray().size() + getDialogsArray().size()/5) {
+                return 1;
+
+            }		}
         return 0;
     }
+
 }
+
+
+        /*    if (i == getDialogsArray().size()) {
+            return 1;
+        }
+        return 0;
+    }*/
+
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AdvertiesmentCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AdvertiesmentCell.java
new file mode 100644
index 000000000..0724e0c26
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AdvertiesmentCell.java
@@ -0,0 +1,61 @@
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.view.View;
+import android.widget.FrameLayout;
+
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.AdView;
+
+import org.telegram.messenger.R;
+import org.telegram.payment.CheckPremiumListener;
+import org.telegram.payment.CheckPremiumUserRequester;
+import org.telegram.payment.UserPaymentInfo;
+import org.telegram.socialuser.BackgroundExecuter;
+
+//import com.smaato.soma.AdDimension;
+//import com.smaato.soma.BannerView;
+
+/**
+ * Created by craterzone3 on 20/5/16.
+ */
+public class AdvertiesmentCell extends FrameLayout implements CheckPremiumListener {
+
+    private AdView mAdView;
+
+    public AdvertiesmentCell(Context mContext) {
+        super(mContext);
+        View mView = View.inflate(mContext, R.layout.layout_ad, null);
+        addView(mView);
+        mAdView = (AdView) findViewById(R.id.adView);
+
+        if( UserPaymentInfo.getInstatance().getPaymentStatus()==UserPaymentInfo.unPaidUser) {
+            AdRequest adRequest = new AdRequest.Builder().build();
+            mAdView.loadAd(adRequest);
+        }
+        else if(!UserPaymentInfo.getInstatance().getUserId().equalsIgnoreCase("") && UserPaymentInfo.getInstatance().getPaymentStatus()==UserPaymentInfo.paidUser){
+            mAdView.setVisibility(GONE);
+        }
+
+
+
+        if(UserPaymentInfo.getInstatance().getPaymentStatus() == 0){
+            BackgroundExecuter.getInstance()
+                    .execute(new CheckPremiumUserRequester
+                            (UserPaymentInfo.getInstatance().getUserId(),this));
+
+        }
+    }
+
+    @Override
+    public void onPremiumUser() {
+        mAdView.setVisibility(GONE);
+        UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.paidUser);
+    }
+
+    @Override
+    public void onGeneralUser() {
+        UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.unPaidUser);
+    }
+
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
index cb9751307..845565e27 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
@@ -106,6 +106,15 @@ public void setTextAndIcon(String text, int resId) {
         imageView.setPadding(0, AndroidUtilities.dp(7), 0, 0);
     }
 
+    public void setTextAndPremiumIcon(String text, int resId,int res1) {
+        textView.setText(text);
+        imageView.setImageResource(res1);
+        imageView.setVisibility(VISIBLE);
+        //  valueTextView.setVisibility(INVISIBLE);
+        valueImageView.setImageResource(resId);
+        valueImageView.setVisibility(VISIBLE);
+        imageView.setPadding(0, AndroidUtilities.dp(7), 0, 0);
+    }
     public void setTextAndValue(String text, String value) {
         textView.setText(text);
         valueTextView.setText(value);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 86aeb29c2..c67049cd9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -2203,6 +2203,12 @@ public void onClick(View view) {
         chatActivityEnterView.setBotsCount(botsCount, hasBotsCommands);
         chatActivityEnterView.setAllowStickersAndGifs(currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 23, currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46);
         contentView.addView(chatActivityEnterView, contentView.getChildCount() - 1, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM));
+
+        if(arguments.getBoolean("social_invite",false)) {
+            chatActivityEnterView.processSendingText(LocaleController.getString("InviteTextsocial", R.string.InviteTextsocial));
+        }
+
+
         chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
             @Override
             public void onMessageSend(CharSequence message) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index cd1f12515..743404afb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -77,6 +77,8 @@ public AvatarDrawable(TLRPC.Chat chat) {
         this(chat, false);
     }
 
+
+
     public AvatarDrawable(TLRPC.User user, boolean profile) {
         this();
         isProfile = profile;
@@ -85,6 +87,27 @@ public AvatarDrawable(TLRPC.User user, boolean profile) {
         }
     }
 
+
+    public AvatarDrawable(TLRPC.TelegramUsers user, boolean profile) {
+        this();
+        isProfile = profile;
+        if (user != null) {
+            try {
+                String name[] = user.name.split(" ");
+                setInfo(Integer.parseInt(user.id), name[0],name.length!=1?name[1]:null, false);
+            } catch (Exception e) {
+                try {
+                    setInfo(Integer.parseInt(user.id), "default", "default", false);
+                } catch (Exception eee){
+
+                }
+            }
+        }
+    }
+
+
+
+
     public AvatarDrawable(TLRPC.Chat chat, boolean profile) {
         this();
         isProfile = profile;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
index 8664e8b1e..f0a273621 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
@@ -73,6 +73,11 @@ public void setImage(String path, String filter, Drawable thumb) {
         setImage(null, path, filter, thumb, null, null, null, null, 0);
     }
 
+
+    public void setImage(TLObject path, String filter, Drawable thumb, boolean showSocialImage) {
+        setImage(path, null, filter, thumb, null, null, null, null, 0, showSocialImage);
+    }
+
     public void setOrientation(int angle, boolean center) {
         imageReceiver.setOrientation(angle, center);
     }
@@ -133,5 +138,24 @@ protected void onDraw(Canvas canvas) {
             imageReceiver.setImageCoords(0, 0, getWidth(), getHeight());
         }
         imageReceiver.draw(canvas);
+
     }
+
+
+
+
+
+
+    public void setImage(TLObject path, String httpUrl, String filter, Drawable thumb, Bitmap thumbBitmap, TLRPC.FileLocation thumbLocation, String thumbFilter,
+                         String ext, int size, boolean showSocialImage) {
+        if (thumbBitmap != null) {
+            thumb = new BitmapDrawable(null, thumbBitmap);
+        }
+        imageReceiver.setImage(path, httpUrl, filter, thumb, thumbLocation, thumbFilter, size, ext, false, showSocialImage);
+    }
+
+
+
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index e5c2b090c..3b1a2ccca 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -314,6 +314,24 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                     FileLog.e("tmessages", e);
                                 }
                             }
+
+                            else if(row == 1){
+                                try {
+                                    SharedPreferences pp  = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+                                    if(false/*pp.getString("social_id","").equals("")*/) {
+                                       // presentFragment(new MyProfileActivity());
+                                    }
+                                    else{
+                                        Bundle args22 = new Bundle();
+                                        args22.putString("s_friend","sf");
+                                        presentFragment(new SocialFriendActivity(args22));
+                                    }
+
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+
                         } else if (chat_id != 0) {
                             if (row == 0) {
                                 presentFragment(new GroupInviteActivity(chat_id));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 8561d288d..05cd1bc47 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -50,6 +50,9 @@
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.messenger.FileLog;
+import org.telegram.payment.CheckPremiumUserRequester;
+import org.telegram.payment.UserPaymentInfo;
+import org.telegram.socialuser.BackgroundExecuter;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.MessagesController;
@@ -196,6 +199,9 @@ public void run() {
             }
         });
 
+        BackgroundExecuter.getInstance().execute(new CheckPremiumUserRequester(UserPaymentInfo.getInstatance().getUserId()));
+
+
         ActionBarMenu menu = actionBar.createMenu();
         if (!onlySelect && searchString == null) {
             passcodeItem = menu.addItem(1, R.drawable.lock_close);
@@ -257,6 +263,10 @@ public void onSearchCollapse() {
                 updatePasscodeButton();
             }
 
+
+
+
+
             @Override
             public void onTextChanged(EditText editText) {
                 String text = editText.getText().toString();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 3a8a413dc..5965224df 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -62,6 +62,9 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.query.DraftQuery;
+import org.telegram.payment.CheckPremiumUserRequester;
+import org.telegram.payment.UserPaymentInfo;
+import org.telegram.socialuser.BackgroundExecuter;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -75,6 +78,7 @@
 import org.telegram.ui.Components.PasscodeView;
 import org.telegram.ui.Components.StickersAlert;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.listners.OnSocialLogin;
 
 import java.io.BufferedReader;
 import java.io.InputStream;
@@ -84,7 +88,7 @@
 import java.util.List;
 import java.util.Map;
 
-public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate {
+public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate,OnSocialLogin {
 
     private boolean finished;
     private String videoPath;
@@ -144,6 +148,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 }
             }
         }
+        BackgroundExecuter.getInstance().execute(new CheckPremiumUserRequester(UserPaymentInfo.getInstatance().getUserId()));
 
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         setTheme(R.style.Theme_TMessages);
@@ -498,6 +503,24 @@ public void didAcceptedPassword() {
         });
     }
 
+    @Override
+    public void onSocialLoginSuccess() {
+
+    }
+
+    @Override
+    public void onSocialLoginError() {
+
+    }
+
+    @Override
+    public void onSocialFailer(String userid) {
+        BackgroundExecuter.getInstance().execute(new CheckPremiumUserRequester(userid));
+
+    }
+
+
+
     private class VcardData {
         String name;
         ArrayList<String> phones = new ArrayList<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MyProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MyProfileActivity.java
new file mode 100644
index 000000000..1d8fa6831
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MyProfileActivity.java
@@ -0,0 +1,557 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.DatePickerDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.view.View;
+import android.widget.Button;
+import android.widget.DatePicker;
+import android.widget.FrameLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.messenger.AndroidUtilities;
+//import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.socialuser.BackgroundExecuter;
+import org.telegram.socialuser.Util;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.socialuser.runable.AddContactRequester;
+import org.telegram.socialuser.runable.AddUserRequester;
+import org.telegram.tgnet.TLRPC;
+//import org.telegram.tracker.AnalyticsTrackers;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.CountryAdapter;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.BackupImageView;
+//import org.telegram.ui.Components.FrameLayoutFixed;
+import org.telegram.ui.listners.OnAddUserListner;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.HashMap;
+
+public class MyProfileActivity extends BaseFragment implements OnAddUserListner,PhotoViewer.PhotoViewerProvider,View.OnClickListener,NotificationCenter.NotificationCenterDelegate{
+    private BackupImageView avatarImageView;
+    private TextView statusTextView,nameTextView;
+    private FrameLayout avatarContainer;
+    private RelativeLayout phone;
+    private RelativeLayout location;
+    private RelativeLayout gender;
+    private RelativeLayout dob;
+    private TextView country_txt;
+    private TextView gender_txt;
+    private TextView dob_txt;
+    private View doneButton;
+    private final static int done_button = 1;
+    private TextView phone_txt;
+    protected TLRPC.Chat currentChat;
+    protected TLRPC.User currentUser;
+    private Context mcContext;
+    private DatePicker datePicker;
+    private Calendar calendar;
+    private int year, month, day;
+    private int selectedgender;
+    private Button save_btn;
+    private static int selectSex;
+
+
+
+    @Override
+    public View createView(final Context context) {
+
+     //   hideTabsAnsMenu();
+        mcContext = context;
+        currentUser = UserConfig.getCurrentUser();
+        //actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setBackButtonImage(0x00000000);//todo
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("myprofile", R.string.myprofile));
+
+        /* ActionBarMenu menu = actionBar.createMenu();
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+*/
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        avatarContainer = new FrameLayout(context);
+        /* avatarContainer.setBackgroundResource(R.drawable.bar_selector);*/
+        avatarContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
+
+        fragmentView = View.inflate(context, R.layout.myprofile_layout, null);
+        location = (RelativeLayout)fragmentView.findViewById(R.id.location);
+        country_txt= (TextView)fragmentView.findViewById(R.id.id_country) ;
+        gender = (RelativeLayout)fragmentView.findViewById(R.id.gender);
+        gender_txt = (TextView)fragmentView.findViewById(R.id.id_gender) ;
+        dob = (RelativeLayout)fragmentView.findViewById(R.id.age);
+        dob_txt = (TextView)fragmentView.findViewById(R.id.id_age) ;
+        phone = (RelativeLayout)fragmentView.findViewById(R.id.number);
+        save_btn  = (Button)fragmentView.findViewById(R.id.save);
+        phone_txt = (TextView)fragmentView.findViewById(R.id.id_number) ;
+        avatarImageView = (BackupImageView)fragmentView.findViewById(R.id.user_avatar_view);
+        nameTextView=(TextView)fragmentView.findViewById(R.id.user_name_label);
+        statusTextView =(TextView)fragmentView.findViewById(R.id.user_staus_label);
+        avatarImageView.setRoundRadius(AndroidUtilities.dp(30));
+        fragmentView.findViewById(R.id.black_view).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+            }
+        });
+
+        location.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                CountrySelectActivity fragment = new CountrySelectActivity();
+                fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
+                    @Override
+                    public void didSelectCountry(String name) {
+                        //   cName = name;
+                        ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit().putString("country",name).commit();;
+                        country_txt.setText(name);
+                    }
+                });
+                presentFragment(fragment);
+            }
+        });
+
+    //  phone_txt.setText("+"+currentUser.phone);
+        gender.setOnClickListener(this);
+        dob.setOnClickListener(this);
+        save_btn.setOnClickListener(this);
+        checkAndUpdateAvatar();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+
+        country_txt.setText(preferences.getString("country","Indonesia"));
+        calendar = Calendar.getInstance();
+        year = calendar.get(Calendar.YEAR);
+        month = calendar.get(Calendar.MONTH);
+        day = calendar.get(Calendar.DAY_OF_MONTH);
+        dob_txt.setText(preferences.getString("dob",""));
+        gender_txt.setText(getGender(preferences.getString("sex","")));
+        if(currentUser!=null&&currentUser.username!= null) {
+            nameTextView.setText(currentUser.username);
+        } else {
+            nameTextView.setText(currentUser.first_name);
+        }
+        nameTextView.setOnClickListener(this);
+        avatarImageView.setOnClickListener(this);
+        phone.setOnClickListener(this);
+             statusTextView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (getParentActivity() == null) {
+                    return;
+                }
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder.setMessage(LocaleController.getString("PhoneNumberAlert", R.string.PhoneNumberAlert));
+                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        presentFragment(new ChangePhoneActivity(), true);
+                    }
+                });
+                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                showDialog(builder.create());
+            }
+        });
+
+       fragmentView.findViewById(R.id.backview).setOnClickListener(this);
+
+     //   ApplicationLoader.getInstance().addUIListener(OnAddUserListner.class,MyProfileActivity.this);
+
+
+
+        return fragmentView;
+
+
+
+
+    }
+
+
+
+
+
+    @Override
+    public void onClick(View v) {
+        switch (v.getId()){
+            case R.id.user_name_label:
+                presentFragment(new ChangeUsernameActivity());
+                break;
+            case R.id.backview:
+              //  showTabsAndmenu();
+                removeUIListeners();
+                break;
+            case R.id.number:
+                presentFragment(new ChangePhoneHelpActivity());
+                break;
+            case R.id.user_avatar_view:
+                if (currentUser.id != 0) {
+                    // TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                    if (currentUser.photo != null && currentUser.photo.photo_big != null) {
+                        PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                        PhotoViewer.getInstance().openPhoto(currentUser.photo.photo_big,MyProfileActivity.this);
+                    }
+                }
+                break;
+            case R.id.age:
+                final Calendar c = Calendar.getInstance();
+               year = c.get(Calendar.YEAR);
+               month = c.get(Calendar.MONTH);
+               day = c.get(Calendar.DAY_OF_MONTH);
+
+                DatePickerDialog dpd = new DatePickerDialog(mcContext,
+                        new DatePickerDialog.OnDateSetListener() {
+
+                            @Override
+                            public void onDateSet(DatePicker view, int year1,
+                                                  int monthOfYear, int dayOfMonth) {
+                                year =year1;
+                                month = monthOfYear;
+                                day= dayOfMonth;
+                                if(dateValidater(year1,monthOfYear,dayOfMonth)){
+                                    ApplicationLoader.applicationContext.
+                                            getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit()
+                                            .putString("dob", Util.getDateforserver(year1,monthOfYear,dayOfMonth)).commit();
+                                    dob_txt.setText(Util.getDateforserver(year1,monthOfYear,dayOfMonth));
+                                } else{
+                                    Toast.makeText(mcContext, LocaleController.getString("pleaseselectvaliddate", R.string.pleaseselectvaliddate),Toast.LENGTH_SHORT).show();
+                                    return;
+                                }
+
+
+                            }
+                        }, year,month, day);
+                dpd.show();
+                break;
+            case R.id.gender:
+                showDialogForSelection(new String[]{"Male","Female"});
+                break;
+            case R.id.save:
+                currentUser = UserConfig.getCurrentUser();
+                SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+                setContact();
+                currentUser = UserConfig.getCurrentUser();
+
+               TLRPC.TelegramUsers newuser = new TLRPC.TelegramUsers();
+                //String dob =Util.convertDate(p.getString("dob",showDate(year,month,day)));
+                newuser.setDob(Util.convertDate(p.getString("dob","2000-02-02")));
+                newuser.setSex(p.getString("sex",getGender()));
+                newuser.setId(currentUser.id+"");
+                // p.edit().putString("country",name).commit();
+                CountryAdapter.Country cu =getcountry((ApplicationLoader.
+                        applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getString("country","india")));
+                newuser.setcCode(cu.shortname);
+                newuser.setname((currentUser.first_name!=null?currentUser.first_name:"")+" "+(currentUser.last_name!=null?currentUser.last_name:""));
+                newuser.setPhoto(currentUser.photo);
+                newuser.setPhone(currentUser.phone);
+                newuser.setUsername(currentUser.username);
+                BackgroundExecuter.getInstance().execute(new AddUserRequester(newuser,null));
+             //   finishFragment();
+                break;
+        }
+    }
+    @Override
+    public void onResume() {
+        super.onResume();
+     //   hideTabsAnsMenu();
+        currentUser = UserConfig.getCurrentUser();
+       // ApplicationLoader.getInstance().trackScreenView(AnalyticsTrackers.CHANGE_PHONE_HELP);
+        statusTextView.setText(LocaleController.formatUserStatus(currentUser));
+        phone_txt.setText("+"+currentUser.phone);
+        phone_txt.setText("+"+currentUser.phone);
+    }
+
+    private void checkAndUpdateAvatar() {
+        TLRPC.FileLocation newPhoto = null;
+        AvatarDrawable avatarDrawable = null;
+        if (currentUser != null) {
+            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            if (user == null) {
+                return;
+            }
+            currentUser = user;
+            if (currentUser.photo != null) {
+                newPhoto = currentUser.photo.photo_small;
+            }
+            avatarDrawable = new AvatarDrawable(currentUser);
+        }
+        if (avatarImageView != null) {
+            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
+        }
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index){
+        if (fileLocation == null) {
+        return null;
+    }
+
+    TLRPC.FileLocation photoBig = null;
+    if (currentUser.id != 0) {
+        TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+        if (user != null && user.photo != null && user.photo.photo_big != null) {
+            photoBig = user.photo.photo_big;
+        }
+    }
+
+    if (photoBig != null && photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
+        int coords[] = new int[2];
+        avatarImageView.getLocationInWindow(coords);
+        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+        object.viewX = coords[0];
+        object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+        object.parentView = avatarImageView;
+        object.imageReceiver = avatarImageView.getImageReceiver();
+        object.user_id = currentUser.id;
+        object.thumb = object.imageReceiver.getBitmap();
+        object.size = -1;
+        object.radius = avatarImageView.getImageReceiver().getRoundRadius();
+      //  object.scale = ViewProxy.getScaleX(avatarImageView);
+        return object;
+    }
+    return null;
+}
+
+
+    @Override
+    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+
+    }
+
+    @Override
+    public void willHidePhotoViewer() {
+
+    }
+
+    @Override
+    public boolean isPhotoChecked(int index) {
+        return false;
+    }
+
+    @Override
+    public void setPhotoChecked(int index) {
+
+    }
+
+    @Override
+    public boolean cancelButtonPressed() {
+        return false;
+    }
+
+    @Override
+    public void sendButtonPressed(int index) {
+
+    }
+
+    @Override
+    public int getSelectedCount() {
+        return 0;
+    }
+
+    @Override
+    public void updatePhotoAtIndex(int index) {
+
+    }
+
+    /*private String showDate(int year, int month, int day) {
+        return (new StringBuilder().append(year+"").append("-")
+                .append(Util.getMonth(month)).append("-").append(day+"".length()==1?"0"+day:day+"")).toString();
+    }*/
+
+    private String getDatetoserver(int year, int month, int day) {
+        return (new StringBuilder().append(year+"").append("-")
+                .append(month+"".length()==1?"0"+month:month+"").append("-").append(day+"".length()==1?"0"+day:day+"")).toString();
+    }
+    private void showDialogForSelection(final String[] items) {
+        AlertDialog.Builder alt_bld = new AlertDialog.Builder(mcContext);
+        alt_bld.setTitle(mcContext.getResources().getString(R.string.gender));
+        alt_bld.setSingleChoiceItems(items, selectSex, new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int item) {
+                selectedgender = item;
+                selectSex =item;
+                if(fragmentView !=null){
+                    ApplicationLoader.applicationContext.
+                            getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit().putString("sex",getGender()).commit();
+                    gender_txt.setText(items[selectedgender]);
+                    dialog.dismiss();
+                }
+
+            }
+        });
+   /*     alt_bld.setPositiveButton("ok", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                if(fragmentView !=null){
+                    ApplicationLoader.applicationContext.
+                            getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit().putString("sex",getGender()).commit();
+                    gender_txt.setText(items[selectedgender]);
+                }
+
+            }
+        });*/
+        AlertDialog alert = alt_bld.create();
+        alert.show();
+        alert.setCancelable(false);
+    }
+
+    private String getGender(){
+        return selectedgender==0?"M":"F";
+    }
+    public CountryAdapter.Country getcountry(String name){
+        CountryAdapter k = new CountryAdapter(mcContext);
+        HashMap<String, ArrayList<CountryAdapter.Country>> countries = k.getCountries();
+      //  ArrayList<String> sortedCountries = k.getSortedCountries();
+        String s = name.substring(0,1).toUpperCase();
+        ArrayList<CountryAdapter.Country> dd = countries.get(s);
+        for(CountryAdapter.Country selectcountry:dd){
+            if(selectcountry.name.equalsIgnoreCase(name)){
+                return selectcountry;
+            }
+        }
+        return null;
+    }
+
+private String getGender(String g){
+    if(!g.equalsIgnoreCase("")) {
+        return g.equalsIgnoreCase("m")?"Male":"Female";
+    }
+    return "Gender";
+}
+
+    private boolean dateValidater(int yr,int mn,int dt){
+        try {
+            Calendar calendar = Calendar.getInstance();
+            calendar.set(yr, mn, dt);
+            long startDate = calendar.getTimeInMillis();
+            if(startDate > Calendar.getInstance().getTimeInMillis()){
+                return false;
+            } else {
+                return true;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+
+    }
+
+    void setContact(){
+        ArrayList<TLRPC.TelegramUsers> telegramUserses = new ArrayList<>();
+        SharedPreferences pp = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+        if(!pp.getBoolean("datasend",false)) {
+            HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = ContactsController.getInstance().usersSectionsDict;
+            ArrayList<ContactsController.Contact> contactses = ContactsController.getInstance().phoneBookContacts;
+
+            ArrayList<String> sortedUsersSectionsArray = ContactsController.getInstance().sortedUsersSectionsArray;
+            final ArrayList<TLRPC.User> userArrayList = new ArrayList<>();
+            for (String index : sortedUsersSectionsArray) {
+                for (TLRPC.TL_contact con : usersSectionsDict.get(index)) {
+                    userArrayList.add(MessagesController.getInstance().getUser(con.user_id));
+                    TLRPC.TelegramUsers tUser = new TLRPC.TelegramUsers();
+                    TLRPC.User usertemp = MessagesController.getInstance().getUser(con.user_id);
+                    tUser.setPhoto(usertemp.photo);
+                    tUser.setPhone(usertemp.phone);
+                    tUser.setUsername(usertemp.username);
+                    tUser.setname((usertemp.first_name!=null?usertemp.first_name:"") + " " + (usertemp.last_name!=null?usertemp.last_name:""));
+                    tUser.setId(usertemp.id + "");
+                    telegramUserses.add(tUser);
+                }
+            }
+
+            for(int i=0 ; i< contactses.size(); i++){
+                TLRPC.TelegramUsers  tUser = new TLRPC.TelegramUsers();
+                tUser.setname(contactses.get(i).first_name +" " +(contactses.get(i).last_name!=null?contactses.get(i).last_name:""));
+                tUser.setPhone(Util.getMobileNumber(contactses.get(i).phones.get(0)));
+                tUser.setId(null);
+                tUser.setPhoto(null);
+                tUser.setUsername(null);
+                telegramUserses.add(tUser);
+            }
+            ArrayList<CustomHttpParams> params = new ArrayList<>();
+            params.add(new CustomHttpParams("userId", pp.getString("social_id", "")));
+            BackgroundExecuter.getInstance().execute(new AddContactRequester(telegramUserses, params));
+        }
+
+    }
+
+
+
+
+
+
+    @Override
+    public void setUserAddSuccess() {
+      getParentActivity().runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+         Toast.makeText(getParentActivity(),"Profile Saved !!",Toast.LENGTH_LONG).show();
+              removeUIListeners();
+
+                      }
+        });
+    }
+
+    @Override
+    public void setUserAddFailed() {
+
+        getParentActivity().runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+
+                Toast.makeText(getParentActivity(),"Error in save profile !",Toast.LENGTH_LONG).show();
+
+            }
+        });
+
+     //   removeUIListeners();
+    }
+
+
+
+
+   public void removeUIListeners(){
+    //   ApplicationLoader.getInstance().removeUIListener(OnAddUserListner.class,MyProfileActivity.this);
+         finishFragment();
+
+   }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index b4d701d92..06c547fbf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -456,6 +456,7 @@ public void onDraw(Canvas canvas) {
         public Bitmap thumb;
         public int dialogId;
         public int index;
+        public int user_id;
         public int size;
         public int radius;
         public int clipBottomAddition;
@@ -756,6 +757,7 @@ public void didReceivedNotification(int id, Object... args) {
                     TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 640);
                     if (sizeFull != null) {
                         if (setToImage == -1 && currentFileLocation != null) {
+
                             for (int b = 0; b < photo.sizes.size(); b++) {
                                 TLRPC.PhotoSize size = photo.sizes.get(b);
                                 if (size.location.local_id == currentFileLocation.local_id && size.location.volume_id == currentFileLocation.volume_id) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PreferencesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PreferencesActivity.java
new file mode 100644
index 000000000..034915980
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PreferencesActivity.java
@@ -0,0 +1,372 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+//import org.telegram.rangeseekbar.RangeSeekBar;
+import org.telegram.rangeseekbar.RangeSeekBar;
+import org.telegram.socialuser.BackgroundExecuter;
+import org.telegram.socialuser.Util;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.socialuser.runable.GetPreferenceRq;
+import org.telegram.socialuser.runable.PreferencesRequester;
+//import org.telegram.tracker.AnalyticsTrackers;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.CountryAdapter;
+import org.telegram.ui.listners.OnGetpreferences;
+import org.telegram.ui.listners.OnPreferencesListner;
+import org.telegram.ui.listners.PreferencesListner;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class PreferencesActivity extends BaseFragment implements OnPreferencesListner,OnGetpreferences {
+
+
+    @Override
+    public void setPreferencesSuccess() {
+        getParentActivity().runOnUiThread(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        progressBar.setVisibility(View.GONE);
+                        Bundle args2 = new Bundle();
+                        args2.putString("s_friend","wink");
+                        presentFragment(new SocialFriendActivity(args2));
+
+                    }
+                }
+        );
+    }
+
+    @Override
+    public void setPreferencesFailed() {
+        getParentActivity().runOnUiThread(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        progressBar.setVisibility(View.GONE);
+                        Toast.makeText(getParentActivity(),"Please try again",Toast.LENGTH_SHORT).show();
+                    }
+                }
+        );
+
+
+    }
+
+    public static class PreferenceData{
+
+        private String cCode;
+        private String sex;
+        private String minage;
+        private String maxage;
+
+
+        public String getcCode() {
+            return cCode;
+        }
+
+        public void setcCode(String cCode) {
+            this.cCode = cCode;
+        }
+
+        public String getSex() {
+            return sex;
+        }
+
+        public void setSex(String sex) {
+            this.sex = sex;
+        }
+
+        public String getMinage() {
+            return minage;
+        }
+
+        public void setMinage(String minage) {
+            this.minage = minage;
+        }
+
+        public String getMaxage() {
+            return maxage;
+        }
+
+        public void setMaxage(String maxage) {
+            this.maxage = maxage;
+        }
+    }
+    private  TextView txt_Age;
+    private TextView txtGender;
+    private Context mContext;
+    private String cName;
+    private TextView txt_country;
+    private LinearLayout location_layout;
+    private LinearLayout gender_layout;
+    private LinearLayout age_layout;
+    private Button button;
+    private int selectedgender;
+    private static PreferencesListner launcherActivity;
+    private TextView min1;
+    private TextView max1;
+    int minvalue1,maxvalue1;
+    private static int  sexselected;
+    private boolean isAgeGroupChange;
+    private RangeSeekBar<Integer> multiSlider1;
+    ProgressBar progressBar;
+    //private RangeSeekBar<Integer> seekBar = new RangeSeekBar<Integer>(15, 60, mContext);
+    private ArrayList<CountryAdapter.Country> contrys = new ArrayList<>();
+
+
+    @Override
+    public View createView(Context context) {
+
+     //   hideTabsAnsMenu();
+        mContext = context;
+        //actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setBackButtonImage(0x00000000);//todo
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("preferences", R.string.preferences));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        fragmentView = View.inflate(context, R.layout.preferences_layout, null);
+        txt_country =(TextView) fragmentView.findViewById(R.id.id_location_txt);
+        progressBar = (ProgressBar)fragmentView.findViewById(R.id.pb_load);
+        initRangeBar();
+        min1 = (TextView) fragmentView.findViewById(R.id.minValue1);
+        max1 = (TextView) fragmentView.findViewById(R.id.maxValue1);
+        txtGender =(TextView) fragmentView.findViewById(R.id.gender_txt);
+        location_layout = (LinearLayout)fragmentView.findViewById(R.id.location_layout);
+        gender_layout = (LinearLayout)fragmentView.findViewById(R.id.gender_layout) ;
+        button = (Button)fragmentView.findViewById(R.id.id_btn_preferences);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("preferences", Activity.MODE_PRIVATE);
+        txtGender.setText(preferences.getString("sexPreferences","").equals("M")?"Male":"Female");
+        txt_country.setText(preferences.getString("preferenceCountry","India"));
+
+        cName = preferences.getString("preferenceCountry","India");
+        min1.setText(preferences.getString("minage",18+""));
+        max1.setText(preferences.getString("maxage",30+""));
+        ArrayList<CustomHttpParams> params = new ArrayList<>();
+        params.add(new CustomHttpParams("userId",ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getString("social_id","")));
+        BackgroundExecuter.getInstance().execute(new GetPreferenceRq(params,PreferencesActivity.this));
+        fragmentView.findViewById(R.id.black_view).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+            }
+        });
+        gender_layout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showDialogForSelection(new String[]{"Male","Female"});
+            }
+        });
+        location_layout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                CountrySelectActivity fragment = new CountrySelectActivity();
+                fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
+                    @Override
+                    public void didSelectCountry(String name) {
+                        cName = name;
+                        ApplicationLoader.applicationContext.getSharedPreferences("preferences", Activity.MODE_PRIVATE).edit().putString("preferenceCountry",cName).commit();
+                        txt_country.setText(name);
+                    }
+                });
+                presentFragment(fragment);
+            }
+        });
+        button.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                progressBar.setVisibility(View.VISIBLE);
+                PreferenceData u = new PreferenceData();
+                if(cName==null){
+                    Toast.makeText(mContext,LocaleController.getString("pleaseselectcountry", R.string.pleaseselectcountry),Toast.LENGTH_SHORT).show();
+                    return;
+                }else {
+
+                    SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("preferences", Activity.MODE_PRIVATE);
+                    CountryAdapter.Country c = getcountrybyName(p.getString("preferenceCountry",cName));
+                    u.setcCode(c!=null?c.shortname:"IN");
+                    if(isAgeGroupChange) {
+                        u.setMinage(minvalue1+"");
+                        u.setMaxage(maxvalue1+"");
+                    } else {
+                        u.setMinage(p.getString("minage",minvalue1+""));
+                        u.setMaxage(p.getString("maxage",maxvalue1+""));
+                    }
+                    u.setSex(p.getString("sexPreferences",getGender()));
+                }
+                SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+                ArrayList<CustomHttpParams> params = new ArrayList<>();
+                params.add(new CustomHttpParams("userId",p.getString("social_id","")));
+                BackgroundExecuter.getInstance().execute(new PreferencesRequester(u,params,PreferencesActivity.this));
+                //finishFragment();
+
+            }
+        });
+        fragmentView.findViewById(R.id.backview).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+               // showTabsAndmenu();
+                finishFragment();
+            }
+        });
+
+        return fragmentView;
+    }
+    @Override
+    public void onResume() {
+        super.onResume();
+      //  ApplicationLoader.getInstance().trackScreenView(AnalyticsTrackers.CHANGE_PHONE_HELP);
+    }
+
+
+
+    private void showDialogForSelection(final String[] items) {
+        final AlertDialog.Builder alt_bld = new AlertDialog.Builder(mContext);
+        alt_bld.setTitle(mContext.getResources().getString(R.string.gender));
+        alt_bld.setSingleChoiceItems(items, sexselected, new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int item) {
+                selectedgender = item;
+                sexselected =item;
+                if(fragmentView !=null){
+                    txtGender.setText(items[selectedgender]);
+                    SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("preferences", Activity.MODE_PRIVATE);
+                    p.edit().putString("sexPreferences",getGender()).commit();
+                }
+                dialog.dismiss();
+
+            }
+        });
+
+        AlertDialog alert = alt_bld.create();
+        alert.show();
+
+
+    }
+
+    public CountryAdapter.Country getcountrybyName(String name){
+        CountryAdapter k = new CountryAdapter(mContext);
+        HashMap<String, ArrayList<CountryAdapter.Country>> countries = k.getCountries();
+       // ArrayList<String> sortedCountries = k.getSortedCountries();
+        String s = name.substring(0,1).toUpperCase();
+        ArrayList<CountryAdapter.Country> dd = countries.get(s);
+        for(CountryAdapter.Country selectcountry:dd){
+            if(selectcountry.name.equalsIgnoreCase(name)){
+                return selectcountry;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void onGetpreferencessuccess() {
+        getParentActivity().runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("preferences", Activity.MODE_PRIVATE);
+                txtGender.setText(preferences.getString("sexPreferences","").equals("M")?"Male":"Female");
+                String cName = Util.getCountryName(preferences.getString("preferencecCode","IN"));
+                txt_country.setText(cName);
+                preferences.edit().putString("preferenceCountry",cName);
+                min1.setText(preferences.getString("minage",18+""));
+                max1.setText(preferences.getString("maxage",30+""));
+                //initRangeBar();
+                minvalue1 = Integer.parseInt(preferences.getString("minage",18+""));//settings.getAgeMin();
+                maxvalue1 = Integer.parseInt(preferences.getString("maxage",30+""));//settings.getAgeMax();
+                //RangeSeekBar<Integer> seekBar = (RangeSeekBar<Integer>)fragmentView.findViewById(R.id.id_age_range);
+                if(multiSlider1!=null) {
+                    multiSlider1.setSelectedMinValue(minvalue1);
+                    multiSlider1.setSelectedMaxValue(maxvalue1);
+                }
+            }
+        });
+
+    }
+    private String getGender(){
+        return selectedgender==0?"M":"F";
+    }
+
+    public static void setLauncherInstanse(PreferencesListner launcherInstanse){
+        launcherActivity = launcherInstanse;
+    }
+
+    private int previousThumb;
+    private void initRangeBar() {
+        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("preferences", Activity.MODE_PRIVATE);
+        RangeSeekBar<Integer> seekBar = new RangeSeekBar<Integer>(15, 60, mContext);
+
+        multiSlider1 =seekBar;
+        minvalue1 = Integer.parseInt(preferences.getString("minage",18+""));//settings.getAgeMin();
+        maxvalue1 = Integer.parseInt(preferences.getString("maxage",30+""));//settings.getAgeMax();
+        seekBar.setSelectedMinValue(minvalue1);
+        seekBar.setSelectedMaxValue(maxvalue1);
+
+        //seekBar.set
+
+        seekBar.setOnRangeSeekBarChangeListener(new RangeSeekBar.OnRangeSeekBarChangeListener<Integer>() {
+            @Override
+            public void onRangeSeekBarValuesChanged(RangeSeekBar<?> bar, Integer minValue, Integer maxValue) {
+                if ((maxValue - minValue) < 4) {
+                    if(bar.getPressedThumb() == -1) {
+                        minValue = maxValue - 4;
+                        bar.setSelectedMinValue();
+                        previousThumb = -1;
+                    } else if(bar.getPressedThumb() == 1) {
+                        maxValue = minValue + 4;
+                        if(maxValue>58)
+                            maxValue=58;
+                        bar.setSelectedMaxValue();
+                        previousThumb = 1;
+
+                    } else {
+                        if(previousThumb == -1) {
+                            minValue = maxValue - 4;
+                            bar.setSelectedMinValue();
+                        } else {
+                            maxValue = minValue + 4;
+                            bar.setSelectedMaxValue();
+                        }
+                    }
+                }
+                isAgeGroupChange = true;
+                minvalue1 = minValue;
+                maxvalue1 =maxValue;
+                min1.setText(minValue+"");
+                max1.setText(maxValue+"");
+            }
+        });
+
+        ((LinearLayout) fragmentView.findViewById(R.id.id_age_range)).addView(seekBar);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 9bd62fcf6..64d0c5ad0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -64,6 +64,8 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.browser.Browser;
+import org.telegram.payment.PaymentManager;
+import org.telegram.payment.UserPaymentInfo;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.SerializedData;
@@ -119,8 +121,12 @@
     private int overscrollRow;
     private int emptyRow;
     private int numberSectionRow;
-    private int numberRow;
-    private int usernameRow;
+  //  private int numberRow;
+    private int myprofileRow;
+    private int premiumFeature;
+
+    private int preferencerow;
+  //  private int usernameRow;
     private int settingsSectionRow;
     private int settingsSectionRow2;
     private int enableAnimationsRow;
@@ -236,8 +242,12 @@ public void run() {
         overscrollRow = rowCount++;
         emptyRow = rowCount++;
         numberSectionRow = rowCount++;
-        numberRow = rowCount++;
-        usernameRow = rowCount++;
+      /*  numberRow = rowCount++;
+        usernameRow = rowCount++;*/
+          myprofileRow = rowCount++;
+          preferencerow = rowCount++;
+
+        premiumFeature=rowCount++;
         settingsSectionRow = rowCount++;
         settingsSectionRow2 = rowCount++;
         notificationRow = rowCount++;
@@ -414,7 +424,28 @@ public void onClick(DialogInterface dialog, int which) {
                     presentFragment(new NotificationsSettingsActivity());
                 } else if (i == backgroundRow) {
                     presentFragment(new WallpapersActivity());
-                } else if (i == askQuestionRow) {
+                }
+
+                else if(i==premiumFeature){
+
+                    SharedPreferences pp  = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+                    if(false/*pp.getString("social_id","").equals("")*/) {
+                        presentFragment(new MyProfileActivity());
+                    }
+                    else
+                    {
+                        if(UserPaymentInfo.getInstatance().getPaymentStatus() ==UserPaymentInfo.paidUser  && (!UserPaymentInfo.getInstatance().getUserId().equalsIgnoreCase("")) ){
+                            Toast.makeText(getParentActivity(),"YOU HAVE ALREADY SUBSCRIBED",Toast.LENGTH_SHORT).show();
+                        }else {
+                            PaymentManager.createIntent(getParentActivity());
+                        }
+
+                        // PaymentManager.createIntent(getParentActivity());
+                    }
+                }
+
+
+                else if (i == askQuestionRow) {
                     if (getParentActivity() == null) {
                         return;
                     }
@@ -630,11 +661,27 @@ public void onClick(View v) {
                     linearLayout.addView(cell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
                     builder.setCustomView(linearLayout);
                     showDialog(builder.create());
-                } else if (i == usernameRow) {
+                } /*else if (i == usernameRow) {
                     presentFragment(new ChangeUsernameActivity());
                 } else if (i == numberRow) {
                     presentFragment(new ChangePhoneHelpActivity());
-                } else if (i == stickersRow) {
+                }*/
+
+                else if (i == preferencerow) {
+                    SharedPreferences pp  = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+                    if(pp.getString("social_id","").equals("")) {
+                        presentFragment(new MyProfileActivity());
+                    }
+                    else {
+                        presentFragment(new PreferencesActivity());
+                    }
+                } else if (i ==myprofileRow /*numberRow*/) {
+
+                    presentFragment(new MyProfileActivity());
+                }
+
+
+                else if (i == stickersRow) {
                     presentFragment(new StickersActivity());
                 } else if (i == cacheRow) {
                     presentFragment(new CacheControlActivity());
@@ -1178,9 +1225,9 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == textSizeRow || i == enableAnimationsRow || i == notificationRow || i == backgroundRow || i == numberRow ||
+            return i == textSizeRow || i == enableAnimationsRow || i == notificationRow || i == backgroundRow || i == myprofileRow || i==premiumFeature /*|| i == numberRow*/ ||
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == autoplayGifsRow || i == privacyRow || i == wifiDownloadRow ||
-                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
+                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == preferencerow/*|| i == usernameRow*/ ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow ||
                     i == stickersRow || i == cacheRow || i == raiseToSpeakRow || i == privacyPolicyRow || i == customTabsRow || i == directShareRow || i == versionRow;
         }
@@ -1304,7 +1351,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else if (i == mediaDownloadSection2) {
                     ((HeaderCell) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
                 } else if (i == numberSectionRow) {
-                    ((HeaderCell) view).setText(LocaleController.getString("Info", R.string.Info));
+                    ((HeaderCell) view).setText(LocaleController.getString("socialsetting", R.string.socialsetting));
+                 // ((HeaderCell) view).setText(LocaleController.getString("Info", R.string.Info));
                 }
             } else if (type == 5) {
                 if (view == null) {
@@ -1390,7 +1438,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         text = LocaleController.getString("NoMediaAutoDownload", R.string.NoMediaAutoDownload);
                     }
                     textCell.setTextAndValue(value, text, true);
-                } else if (i == numberRow) {
+                } /*else if (i == numberRow) {
                     TLRPC.User user = UserConfig.getCurrentUser();
                     String value;
                     if (user != null && user.phone != null && user.phone.length() != 0) {
@@ -1408,11 +1456,28 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
                     }
                     textCell.setTextAndValue(value, LocaleController.getString("Username", R.string.Username), false);
-                }
+                }*/
             }
+
+            else if(type == 7){
+                    if (view == null) {
+                        view = new TextSettingsCell(mContext);
+                    }
+                    TextSettingsCell textCell = (TextSettingsCell) view;
+
+                    if(i==premiumFeature){
+                        textCell.setTextAndIcon("Upgrade to Premium",R.drawable.icpre,true);
+                    }else if (i == myprofileRow/*numberRow*/) {
+                        textCell.setText(LocaleController.getString("myprofile", R.string.myprofile), true);
+                    } else if (i == preferencerow) {
+                        textCell.setText(LocaleController.getString("preferences", R.string.preferences), true);
+                    }
+                }
+
             return view;
         }
 
+
         @Override
         public int getItemViewType(int i) {
             if (i == emptyRow || i == overscrollRow) {
@@ -1426,18 +1491,22 @@ public int getItemViewType(int i) {
                 return 2;
             } else if (i == versionRow) {
                 return 5;
-            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow || i == numberRow || i == usernameRow) {
+            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow /*||*/ /*i == numberRow || i == usernameRow*/) {
                 return 6;
             } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2) {
                 return 4;
-            } else {
+            }
+            else if (i == myprofileRow || i == preferencerow|| i==premiumFeature) {
+                return 7;
+            }
+            else {
                 return 2;
             }
         }
 
         @Override
         public int getViewTypeCount() {
-            return 7;
+            return 8;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SocialFriendActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SocialFriendActivity.java
new file mode 100644
index 000000000..6cc16cc0b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SocialFriendActivity.java
@@ -0,0 +1,324 @@
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.GridView;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.payment.PaymentManager;
+import org.telegram.payment.UserPaymentInfo;
+import org.telegram.socialuser.BackgroundExecuter;
+import org.telegram.socialuser.CustomGridAdapter;
+import org.telegram.socialuser.GridViewWithHeaderAndFooter;
+import org.telegram.socialuser.OnTelegramSync;
+import org.telegram.socialuser.Util;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.socialuser.runable.AddContactRequester;
+import org.telegram.socialuser.runable.GetSuggestFriendsRq;
+import org.telegram.tgnet.TLRPC;
+
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.listners.OnServerResponse;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+/**
+ * Created by ram on 3/6/16.
+ */
+public class SocialFriendActivity extends BaseFragment implements OnServerResponse,OnTelegramSync {
+    private static boolean isSend;
+    private Context mContext;
+    private ImageView img_Back;
+    private CustomGridAdapter adapter;
+    private static TLRPC.TelegramUsers response = null;
+    private GetSuggestFriendsRq reqester;
+    private GridView grid;
+    private Button paybutton;
+    private Bundle bundle;
+    ProgressBar progressBar;
+    private ArrayList<TLRPC.TelegramUsers> listnew;
+    GridViewWithHeaderAndFooter gr_View;
+    private ArrayList<TLRPC.TelegramUsers> telegramUsersesList = new ArrayList<>();
+    private String friendId;
+    private TextView emptyView;
+    private static int remPosition = -1;
+
+    public SocialFriendActivity(Bundle args){
+        this.bundle = args;
+    }
+
+    @Override
+    public View createView(final Context context) {
+        mContext = context;
+        SharedPreferences pp = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+        if(!pp.getBoolean("datasend",false)) {
+            HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = ContactsController.getInstance().usersSectionsDict;
+            ArrayList<ContactsController.Contact> contactses = ContactsController.getInstance().phoneBookContacts;
+
+            ArrayList<String> sortedUsersSectionsArray = ContactsController.getInstance().sortedUsersSectionsArray;
+            final ArrayList<TLRPC.User> userArrayList = new ArrayList<>();
+            for (String index : sortedUsersSectionsArray) {
+                for (TLRPC.TL_contact con : usersSectionsDict.get(index)) {
+                    userArrayList.add(MessagesController.getInstance().getUser(con.user_id));
+                    TLRPC.TelegramUsers telegramuser = new TLRPC.TelegramUsers();
+                    TLRPC.User usertemp = MessagesController.getInstance().getUser(con.user_id);
+                    telegramuser.setPhoto(usertemp.photo);
+                    telegramuser.setPhone(usertemp.phone);
+                    telegramuser.setUsername(usertemp.username);
+                    telegramuser.setname((usertemp.first_name!=null?usertemp.first_name:"") + " " + (usertemp.last_name!=null?usertemp.last_name:""));
+                    telegramuser.setId(usertemp.id + "");
+                    telegramUsersesList.add(telegramuser);
+                }
+            }
+
+            for(int i=0 ; i< contactses.size(); i++){
+                TLRPC.TelegramUsers  uu = new TLRPC.TelegramUsers();
+                uu.setname(contactses.get(i).first_name +" " +(contactses.get(i).last_name!=null?contactses.get(i).last_name:""));
+                uu.setPhone(Util.getMobileNumber(contactses.get(i).phones.get(0)));
+                uu.setId(null);
+                uu.setPhoto(null);
+                uu.setUsername(null);
+                telegramUsersesList.add(uu);
+            }
+            ArrayList<CustomHttpParams> params = new ArrayList<>();
+            params.add(new CustomHttpParams("userId", pp.getString("social_id", "")));
+            BackgroundExecuter.getInstance().execute(new AddContactRequester(telegramUsersesList, params));
+        }
+
+      //  hideTabsAnsMenu();
+        //ArrayList<CustomHttpParams> parem = new ArrayList<>();
+        ArrayList<CustomHttpParams> params = new ArrayList<>();
+        params.add(new CustomHttpParams("userId", pp.getString("social_id", "")));
+        if(bundle.get("s_friend").equals("wink")){
+            reqester = new GetSuggestFriendsRq(params,SocialFriendActivity.this,"search");
+        } else {
+            reqester = new GetSuggestFriendsRq(params,SocialFriendActivity.this,"searchdgree");
+        }
+
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);//todo
+        actionBar.setAllowOverlayTitle(true);
+    //    actionBar.setTextLast("");
+        final TLRPC.User user = UserConfig.getCurrentUser();
+        if(bundle.get("s_friend").equals("wink")){
+            actionBar.setTitle(LocaleController.getString("yourpreferences", R.string.yourpreferences));
+        } else {
+            actionBar.setTitle(LocaleController.getString("social_friend", R.string.social_friend));
+        }
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+         listnew = new ArrayList<>();
+
+        fragmentView = View.inflate(getParentActivity(), R.layout.gridview, null);
+
+
+        gr_View = (GridViewWithHeaderAndFooter)fragmentView.findViewById(R.id.grid);
+        paybutton =(Button)fragmentView.findViewById(R.id.paypal_btn_id) ;
+        progressBar = (ProgressBar)fragmentView.findViewById(R.id.pb_load);
+        progressBar.setVisibility(View.VISIBLE);
+
+        if(UserPaymentInfo.getInstatance().getPaymentStatus()!= UserPaymentInfo.paidUser){
+            gr_View.setPadding(0,0,0,0);
+            paybutton.setVisibility(View.VISIBLE);
+            paybutton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    PaymentManager.createIntent(getParentActivity());
+                }
+            });
+        } else {
+            paybutton.setVisibility(View.GONE);
+            gr_View.setPadding(0,0,0,0);
+        }
+        img_Back = (ImageView)fragmentView.findViewById(R.id.backview) ;
+        adapter = new CustomGridAdapter(mContext,listnew);
+        emptyView = (TextView)fragmentView.findViewById(R.id.empty_view);
+        grid=(GridView)fragmentView.findViewById(R.id.grid);
+        grid.setAdapter(adapter);
+        fragmentView.findViewById(R.id.black_view).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+            }
+        });
+        BackgroundExecuter.getInstance().execute(reqester);
+
+        grid.setOnScrollListener(new AbsListView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(AbsListView view, int scrollState) {
+
+            }
+
+            @Override
+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+
+                if (UserPaymentInfo.getInstatance().getPaymentStatus() != UserPaymentInfo.paidUser) {
+                    paybutton.setVisibility(View.VISIBLE);
+
+                    paybutton.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            PaymentManager.createIntent(getParentActivity());
+                        }
+                    });
+                } else {
+                    paybutton.setVisibility(View.GONE);
+
+                    if (reqester.isMore)
+                        BackgroundExecuter.getInstance().execute(reqester.loadMore());
+                }
+
+            }
+        });
+
+
+        grid.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view,
+                                    int position, long id) {
+
+                remPosition = position;
+
+                Bundle args = new Bundle();
+                try {
+                    final int pos=position;
+                    TLRPC.TelegramUsers u = listnew.get(pos);
+                    if (u !=null) {
+                        args.putInt("user_id", Integer.parseInt(listnew.get(pos).id));
+                        args.putString("friendId", listnew.get(pos).getUserId());
+                        presentFragment(new UserProfileActivity(args,listnew.get(pos)));
+                        ArrayList<CustomHttpParams> params = new ArrayList<>();
+                        params.add(new CustomHttpParams("userId", ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getString("social_id", "")));
+                        ArrayList<TLRPC.TelegramUsers> telegramList = new ArrayList<>();
+                        telegramList.add(listnew.get(pos));
+                       BackgroundExecuter.getInstance().execute(new AddContactRequester(telegramList, params));
+                        listnew.remove(listnew.get(pos));
+
+                } else {
+
+                        Toast.makeText(mContext,"Invalid user",Toast.LENGTH_SHORT).show();
+                }
+            } catch (Exception e) {
+                Log.d("User_Key", e.getStackTrace().toString());
+            }
+
+        }
+    });
+    img_Back.setOnClickListener(new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            finishFragment();
+        }
+    });
+
+    return fragmentView;
+}
+
+    @Override
+    public void onResume() {
+        super.onResume();
+   //     ApplicationLoader.getInstance().trackScreenView(AnalyticsTrackers.CHANGE_PHONE_HELP);
+
+   if(isSend && remPosition!= -1)
+   {
+       listnew.remove(listnew.get(remPosition));
+       isSend=false;
+       remPosition= -1;
+   }
+     if(listnew.size()<21 && UserPaymentInfo.getInstatance().getPaymentStatus()!=1){
+            actionBar.setTextLast(listnew.size()+"/20");
+        }else{ actionBar.setTextLast("");
+        }
+    }
+
+
+    public static void getResponse(TLRPC.TelegramUsers respon){
+        response = respon;
+    }
+
+    @Override
+    public void setFriendList(final ArrayList<TLRPC.TelegramUsers> users) {
+        getParentActivity().runOnUiThread(
+                new Runnable() {
+                    @Override
+                    public void run() {
+
+                        progressBar.setVisibility(View.GONE);
+
+                        listnew.addAll(users);
+                        if(listnew.size()<21 && UserPaymentInfo.getInstatance().getPaymentStatus()!=1){
+                        actionBar.setTextLast(listnew.size()+"/20");
+                        }
+                        else{ actionBar.setTextLast("");
+                        }
+
+                        adapter.notifyDataSetChanged();
+
+                    }
+                }
+        );
+    }
+
+    @Override
+    public void setErrorList(){
+        getParentActivity().runOnUiThread(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        progressBar.setVisibility(View.GONE);
+                        if(listnew.size()== 0){
+                            emptyView.setVisibility(View.VISIBLE);
+                        }else{emptyView.setVisibility(View.GONE);
+                        }
+                    }
+                }
+        );
+    }
+
+
+
+
+
+
+
+    @Override
+    public void onUserSyncSuccess(final TLRPC.User user) {
+
+    }
+
+    @Override
+    public void onUserSyncFailed() {
+
+    }
+
+    public static  void setMessageSend(boolean isMessageSend){
+    isSend = isMessageSend;
+    }
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
new file mode 100644
index 000000000..e550e0c33
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -0,0 +1,420 @@
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.os.Handler;
+import android.view.View;
+import android.widget.AbsListView;
+import android.widget.FrameLayout;
+import android.widget.GridView;
+import android.widget.ProgressBar;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+//import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.socialuser.BackgroundExecuter;
+import org.telegram.socialuser.CustomGridAdapter;
+import org.telegram.socialuser.GridViewWithHeaderAndFooter;
+import org.telegram.socialuser.OnTelegramSync;
+import org.telegram.socialuser.model.CustomHttpParams;
+import org.telegram.socialuser.runable.AddContactRequester;
+import org.telegram.socialuser.runable.GetMutualFriendRq;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.BackupImageView;
+//import org.telegram.ui.Components.FrameLayoutFixed;
+import org.telegram.ui.listners.OnServerResponse;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 11/6/16.
+ */
+public class UserProfileActivity extends BaseFragment implements PhotoViewer.PhotoViewerProvider,View.OnClickListener,OnServerResponse,OnTelegramSync {
+    private BackupImageView avatarImageView;
+    private TextView statusTextView,nameTextView;
+    private FrameLayout avatarContainer;
+    private RelativeLayout phone;
+    private RelativeLayout location;
+    private TextView country_txt;
+    private TextView phone_txt;
+    protected TLRPC.Chat currentChat;
+    protected TLRPC.User currentUser;
+    private Context mcContext;
+    /*private DatePicker datePicker;
+    private Calendar calendar;
+    private int year, month, day;
+    private int selectedgender;
+    private Button save_btn;
+    */private  GridView grid;
+    private CustomGridAdapter adapter;
+    private GetMutualFriendRq reqester;
+    private View doneButton;
+    private final static int done_button = 1;
+    private String friendId;
+    ProgressBar progressBar;
+    private static TLRPC.User currUserTemp;
+//    public static int ii;
+    //  private static TLRPC.TelegramUsers telegramUsers = null;
+
+    private static TLRPC.TelegramUsers user = null;
+    private boolean isMessageSend ;
+    private TextView emptyView;
+
+    @Override
+    public void onUserSyncSuccess(TLRPC.User user) {
+
+    }
+
+    @Override
+    public void onUserSyncFailed() {
+
+    }
+
+
+
+    public class MutualFriend {
+        public  String userId;
+        public String friendId;
+
+    }
+
+
+    final ArrayList<TLRPC.TelegramUsers> listnew = new ArrayList<>();
+    Bundle bundle;
+
+    public UserProfileActivity(Bundle args,TLRPC.TelegramUsers telegramUser ) {
+        user=telegramUser ;
+        friendId  = args.getString("friendId");
+    }
+
+
+
+    @Override
+    public View createView(final Context context) {
+
+        //hideTabsAnsMenu();
+        mcContext = context;
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);//todo
+
+        actionBar.setAllowOverlayTitle(true);
+        ActionBarMenu menu = actionBar.createMenu();
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_add_user, AndroidUtilities.dp(56));
+
+        if( user != null) {
+            actionBar.setTitle(user.getname());
+        } else {
+            actionBar.setTitle("Unknown");
+        }
+
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+
+        avatarContainer = new FrameLayout(context);
+        avatarContainer.setBackgroundResource(R.drawable.bar_selector);
+        avatarContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
+
+        fragmentView = View.inflate(context, R.layout.usernw_profile_layout, null);
+
+        View viewf =View.inflate(getParentActivity(), R.layout.footer_of_gridview, null);
+        GridViewWithHeaderAndFooter gr_View = (GridViewWithHeaderAndFooter)fragmentView.findViewById(R.id.grid);
+        gr_View.addFooterView(viewf);
+        location = (RelativeLayout)fragmentView.findViewById(R.id.location);
+
+        progressBar = (ProgressBar)fragmentView.findViewById(R.id.pb_load);
+        progressBar.setVisibility(View.VISIBLE);
+
+        country_txt= (TextView)fragmentView.findViewById(R.id.id_country) ;
+
+        avatarImageView = (BackupImageView)fragmentView.findViewById(R.id.user_avatar_view);
+        nameTextView=(TextView)fragmentView.findViewById(R.id.user_name_label);
+        statusTextView =(TextView)fragmentView.findViewById(R.id.user_staus_label);
+        avatarImageView.setRoundRadius(AndroidUtilities.dp(30));
+        //   emptyView=(TextView)fragmentView.findViewById(R.id.empty_view);
+        checkAndUpdateAvatar();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+        country_txt.setText(preferences.getString("country","Nepal"));
+        adapter = new CustomGridAdapter(mcContext,listnew);
+        grid=(GridView)fragmentView.findViewById(R.id.grid);
+        emptyView=(TextView)fragmentView.findViewById(R.id.empty_view);
+        grid.setAdapter(adapter);
+        MutualFriend m = new MutualFriend();
+        m.friendId  = friendId;
+        m.userId = preferences.getString("social_id","");
+        reqester = new GetMutualFriendRq(m,UserProfileActivity.this,"getmutual");
+        BackgroundExecuter.getInstance().execute(reqester);
+        fragmentView.findViewById(R.id.black_view).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+            }
+        });
+        doneButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+                ContactsController.getInstance().telegramResponse(user.name,user.phone,UserProfileActivity.this);
+
+                final ProgressDialog dialog = ProgressDialog.show(v.getContext(), "", "Loading...",
+                        true);
+
+                dialog.show();
+                Handler handler = new Handler();
+                handler.postDelayed(new Runnable() {
+                    public void run() {
+                        dialog.dismiss();
+
+                        TLRPC.User u = MessagesController.getInstance().getUser(Integer.parseInt(user.getId()));
+                        if (u != null) {
+                            isMessageSend=true;
+                            Bundle args = new Bundle();
+                            args.putBoolean("social_invite",true);
+                            args.putInt("user_id", u != null ? u.id : 179338637);
+                            presentFragment(new ChatActivity(args));
+                            ArrayList<CustomHttpParams> params = new ArrayList<>();
+                            params.add(new CustomHttpParams("userId", ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getString("social_id", "")));
+                            ArrayList<TLRPC.TelegramUsers> telegramList = new ArrayList<>();
+                            telegramList.add(user);
+                            SocialFriendActivity.setMessageSend(true);
+                            BackgroundExecuter.getInstance().execute(new AddContactRequester(telegramList, params));
+                        } else {
+                            SocialFriendActivity.setMessageSend(false);
+                        }
+                    }
+                },5000);
+
+            }
+        });
+
+
+
+
+        grid.setOnScrollListener(new AbsListView.OnScrollListener() {
+            @Override
+            public void onScrollStateChanged(AbsListView view, int scrollState) {
+
+            }
+
+            @Override
+            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                if(reqester.isMore)
+                    BackgroundExecuter.getInstance().execute(reqester.loadMore());
+            }
+        });
+
+
+        if(user!=null) {
+            nameTextView.setText(user.getname());
+        } else {
+            nameTextView.setText(LocaleController.getString("Username", R.string.Username));
+        }
+
+        avatarImageView.setOnClickListener(this);
+        fragmentView.findViewById(R.id.backview).setOnClickListener(this);
+        return fragmentView;
+    }
+
+
+
+
+    @Override
+    public void onClick(View v) {
+        switch (v.getId()){
+            case R.id.backview:
+
+                if(!isMessageSend){
+                    SocialFriendActivity.setMessageSend(false);
+                }
+                finishFragment();
+                break;
+            case R.id.user_avatar_view:
+                if (currentUser!=null&&currentUser.id != 0) {
+                    if (currentUser!=null&&currentUser.photo != null && currentUser.photo.photo_big != null) {
+                        PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                        PhotoViewer.getInstance().openPhoto(currentUser.photo.photo_big,UserProfileActivity.this);
+                    }
+                }
+                break;
+            case R.id.save:
+                Bundle args = new Bundle();
+                args.putBoolean("social_invite",true);
+                args.putInt("user_id",currentUser!=null?currentUser.id:179338637);
+                presentFragment(new ChatActivity(args));
+                break;
+        }
+    }
+    @Override
+    public void onResume() {
+        super.onResume();
+        ContactsController.getInstance().checkContacts();
+        statusTextView.setText(LocaleController.formatUserStatus(currentUser));
+      //  hideTabsAnsMenu();
+
+    }
+
+
+
+
+
+
+
+    private void checkAndUpdateAvatar() {
+
+
+        if(user.photo !=null && user.photo.photo_id != 0){
+            avatarImageView.setImage(user.photo.photo_small, "50_50",new AvatarDrawable(user,false),true);
+
+        }
+        else if(user.photo.photo_id == 0){
+            avatarImageView.setImage(null, "50_50",new AvatarDrawable(user,false),true);
+        }
+    }
+
+
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index){
+        if (fileLocation == null) {
+            return null;
+        }
+
+        TLRPC.FileLocation photoBig = null;
+        if (currentUser.id != 0) {
+            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            if (user != null && user.photo != null && user.photo.photo_big != null) {
+                photoBig = user.photo.photo_big;
+            }
+        }
+        if (photoBig != null && photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
+            int coords[] = new int[2];
+            avatarImageView.getLocationInWindow(coords);
+            PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+            object.viewX = coords[0];
+            object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+            object.parentView = avatarImageView;
+            object.imageReceiver = avatarImageView.getImageReceiver();
+            object.user_id = currentUser.id;
+            object.thumb = object.imageReceiver.getBitmap();
+            object.size = -1;
+            object.radius = avatarImageView.getImageReceiver().getRoundRadius();
+           // object.scale = ViewProxy.getScaleX(avatarImageView);
+            return object;
+        }
+        return null;
+    }
+
+
+    @Override
+    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+
+    }
+
+    @Override
+    public void willHidePhotoViewer() {
+
+    }
+
+    @Override
+    public boolean isPhotoChecked(int index) {
+        return false;
+    }
+
+    @Override
+    public void setPhotoChecked(int index) {
+
+    }
+
+    @Override
+    public boolean cancelButtonPressed() {
+        return false;
+    }
+
+    @Override
+    public void sendButtonPressed(int index) {
+
+    }
+
+    @Override
+    public int getSelectedCount() {
+        return 0;
+    }
+
+    @Override
+    public void updatePhotoAtIndex(int index) {
+
+    }
+
+    @Override
+    public void setFriendList(final ArrayList<TLRPC.TelegramUsers> usersList) {
+        getParentActivity().runOnUiThread(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        listnew.addAll(usersList);
+                        progressBar.setVisibility(View.GONE);
+                        adapter.clear();
+                        adapter.addAll(usersList);
+                        if(usersList.size()==0){
+                            emptyView.setVisibility(View.VISIBLE);
+                        } else{
+                            emptyView.setVisibility(View.GONE);
+                        }
+
+                        //notify();
+
+                    }
+                }
+        );
+    }
+    @Override
+    public void setErrorList(){
+        getParentActivity().runOnUiThread(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        progressBar.setVisibility(View.GONE);
+                        if(listnew.size()==0){
+                            emptyView.setVisibility(View.VISIBLE);
+                        }
+                    }
+                }
+        );
+    }
+
+
+
+
+
+    /*public static void setCurrentUser(TLRPC.User user, TLRPC.TelegramUsers telegramUsers1) {
+
+        currUserTemp = user;
+        telegramUsers = telegramUsers1;
+    }*/
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/BaseUiListener.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/BaseUiListener.java
new file mode 100644
index 000000000..2621f9664
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/BaseUiListener.java
@@ -0,0 +1,13 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by Ashish Srivastava  on 16/9/16.
+ */
+
+public interface BaseUiListener {
+
+    /**
+     * this is base ui listener which will extended by all classes where
+     */
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAddUserListner.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAddUserListner.java
new file mode 100644
index 000000000..55957ec57
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAddUserListner.java
@@ -0,0 +1,9 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by ram on 28/6/16.
+ */
+public interface OnAddUserListner extends BaseUiListener {
+    void setUserAddSuccess();
+    void setUserAddFailed();
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAttachListner.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAttachListner.java
new file mode 100644
index 000000000..707d0860c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAttachListner.java
@@ -0,0 +1,8 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by ram on 2/5/16.
+ */
+public interface OnAttachListner {
+    public void onAttachlistner();
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnGetpreferences.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnGetpreferences.java
new file mode 100644
index 000000000..c5be899f2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnGetpreferences.java
@@ -0,0 +1,8 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by ram on 16/6/16.
+ */
+public interface OnGetpreferences {
+    void onGetpreferencessuccess();
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnMutualFriendListner.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnMutualFriendListner.java
new file mode 100644
index 000000000..9f663b192
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnMutualFriendListner.java
@@ -0,0 +1,12 @@
+package org.telegram.ui.listners;
+
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 18/6/16.
+ */
+public interface OnMutualFriendListner {
+    void onMutualfriendList(ArrayList<TLRPC.TelegramUsers> list);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnPreferencesListner.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnPreferencesListner.java
new file mode 100644
index 000000000..118996e64
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnPreferencesListner.java
@@ -0,0 +1,10 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by ram on 28/6/16.
+ */
+public interface OnPreferencesListner {
+
+    void setPreferencesSuccess();
+    void setPreferencesFailed();
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnServerResponse.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnServerResponse.java
new file mode 100644
index 000000000..855ca55f0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnServerResponse.java
@@ -0,0 +1,15 @@
+package org.telegram.ui.listners;
+
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ram on 15/6/16.
+ */
+public interface OnServerResponse {
+
+    void setFriendList(ArrayList<TLRPC.TelegramUsers> users);
+    void setErrorList();
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnSocialLogin.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnSocialLogin.java
new file mode 100644
index 000000000..101bee506
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnSocialLogin.java
@@ -0,0 +1,10 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by ram on 14/6/16.
+ */
+public interface OnSocialLogin {
+    public void onSocialLoginSuccess();
+    void onSocialLoginError();
+    void onSocialFailer(String userid);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnclicklistnerOnChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnclicklistnerOnChatActivity.java
new file mode 100644
index 000000000..962f22ba8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnclicklistnerOnChatActivity.java
@@ -0,0 +1,9 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by ram on 28/4/16.
+ */
+public interface OnclicklistnerOnChatActivity {
+
+    public void onClickListnerOnUi(int index);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/PreferencesListner.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/PreferencesListner.java
new file mode 100644
index 000000000..9eb99868b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/PreferencesListner.java
@@ -0,0 +1,8 @@
+package org.telegram.ui.listners;
+
+/**
+ * Created by ram on 13/6/16.
+ */
+public interface PreferencesListner {
+    void onsetWink();
+}
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attrs.xml b/TMessagesProj/src/main/res/drawable-hdpi/attrs.xml
new file mode 100644
index 000000000..97de9e5f0
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-hdpi/attrs.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 Kalin Maldzhanski
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <declare-styleable name="MultiSlider">
+
+
+        <attr name="scaleMin" format="integer"/>
+        <attr name="scaleMax" format="integer"/>
+        <attr name="scaleStep" format="integer"/>
+
+
+        <attr name="stepsThumbsApart" format="integer"/>
+        <attr name="drawThumbsApart" format="boolean"/>
+
+        <attr name="android:thumb"/>
+        <attr name="thumbNumber" format="integer"/>
+        <attr name="android:thumbOffset"/>
+
+        <attr name="thumbValue1" format="integer"/>
+        <attr name="thumbValue2" format="integer"/>
+        <attr name="range1" format="reference"/>
+        <attr name="range2" format="reference"/>
+
+        <attr name="android:track"/>
+
+        <attr name="range" format="reference"/>
+
+        <attr name="mirrorForRTL" format="boolean"/>
+
+        <attr name="thumbColor" format="color" />
+        <attr name="trackColor" format="color" />
+        <attr name="rangeColor" format="color" />
+        <attr name="range1Color" format="color" />
+        <attr name="range2Color" format="color" />
+    </declare-styleable>
+    <!-- style reference -->
+<declare-styleable name="MultiSliderTheme">
+        <attr name="multiSliderStyle" format="reference"/>
+</declare-styleable>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bools.xml b/TMessagesProj/src/main/res/drawable-hdpi/bools.xml
new file mode 100644
index 000000000..9e9160ec0
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-hdpi/bools.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+    <bool name="useHardwareAcceleration">true</bool>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_add_user.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_add_user.png
new file mode 100644
index 000000000..12e9257c5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_add_user.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_bullet.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_bullet.png
new file mode 100644
index 000000000..f66a22396
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_bullet.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_call.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_call.png
new file mode 100644
index 000000000..65e89b544
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_call.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_dob.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_dob.png
new file mode 100644
index 000000000..8246d65e6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_dob.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_gender.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_gender.png
new file mode 100644
index 000000000..6859d7b19
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_gender.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_group.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_group.png
new file mode 100644
index 000000000..521f38e8c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_location.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_location.png
new file mode 100755
index 000000000..f43b437bb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_location_earth.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_location_earth.png
new file mode 100644
index 000000000..c956eff81
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_location_earth.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/icpre.png b/TMessagesProj/src/main/res/drawable-hdpi/icpre.png
new file mode 100644
index 000000000..44fc67341
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/icpre.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_disabled_holo.png b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_disabled_holo.png
new file mode 100644
index 000000000..fff490d0c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_disabled_holo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_focused_holo.png b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_focused_holo.png
new file mode 100644
index 000000000..add59cb34
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_focused_holo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_normal_holo.png b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_normal_holo.png
new file mode 100644
index 000000000..987a86e1e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_normal_holo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_pressed_holo.png b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_pressed_holo.png
new file mode 100644
index 000000000..c94f582f2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_control_pressed_holo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_primary_holo.9.png b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_primary_holo.9.png
new file mode 100644
index 000000000..eb8b3ab78
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_primary_holo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_secondary_holo.9.png b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_secondary_holo.9.png
new file mode 100644
index 000000000..3a0ca297e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_secondary_holo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_track_holo_light.9.png b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_track_holo_light.9.png
new file mode 100644
index 000000000..90528b130
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/multislider_scrubber_track_holo_light.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/premium1.png b/TMessagesProj/src/main/res/drawable-hdpi/premium1.png
new file mode 100644
index 000000000..7d3a0b87d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/premium1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/seek_thumb_normal.png b/TMessagesProj/src/main/res/drawable-hdpi/seek_thumb_normal.png
new file mode 100644
index 000000000..37809000a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/seek_thumb_normal.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/seek_thumb_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/seek_thumb_pressed.png
new file mode 100644
index 000000000..1d018a8e1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/seek_thumb_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector.xml b/TMessagesProj/src/main/res/drawable/bar_selector.xml
new file mode 100644
index 000000000..961d245f2
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/bar_selector.xml
@@ -0,0 +1,19 @@
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff45658d" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff45658d" />
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#ff45658d" />
+        </shape>
+    </item>
+    <item android:drawable="@drawable/transparent" />
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/button_selector1.xml b/TMessagesProj/src/main/res/drawable/button_selector1.xml
new file mode 100644
index 000000000..733e586ee
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/button_selector1.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#4285F4" />
+            <corners
+                android:radius="11dp"   >
+            </corners>
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#4285F4" />
+            <corners
+                android:radius="11dp"   >
+            </corners>
+        </shape>
+    </item>
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <solid android:color="#4285F4" />
+            <corners
+                android:radius="11dp"   >
+            </corners>
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="#54759E" />
+            <corners
+                android:radius="11dp"   >
+            </corners>
+        </shape>
+    </item>
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/multislider_scrubber_control_selector_holo_light.xml b/TMessagesProj/src/main/res/drawable/multislider_scrubber_control_selector_holo_light.xml
new file mode 100644
index 000000000..70b1ff98e
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/multislider_scrubber_control_selector_holo_light.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="false" android:drawable="@drawable/multislider_scrubber_control_disabled_holo" />
+    <item android:state_pressed="true" android:drawable="@drawable/multislider_scrubber_control_pressed_holo" />
+    <item android:state_selected="true" android:drawable="@drawable/multislider_scrubber_control_focused_holo" />
+    <item android:drawable="@drawable/multislider_scrubber_control_normal_holo" />
+</selector>
diff --git a/TMessagesProj/src/main/res/drawable/multislider_scrubber_progress_horizontal_holo_light.xml b/TMessagesProj/src/main/res/drawable/multislider_scrubber_progress_horizontal_holo_light.xml
new file mode 100644
index 000000000..2bde15daf
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/multislider_scrubber_progress_horizontal_holo_light.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@android:id/background"
+            android:drawable="@drawable/multislider_scrubber_track_holo_light" />
+    <item android:id="@android:id/secondaryProgress">
+        <scale android:scaleWidth="100%"
+                android:drawable="@drawable/multislider_scrubber_secondary_holo" />
+    </item>
+    <item android:id="@android:id/progress">
+        <scale android:scaleWidth="100%"
+                android:drawable="@drawable/multislider_scrubber_primary_holo" />
+    </item>
+</layer-list>
diff --git a/TMessagesProj/src/main/res/layout/activity_main.xml b/TMessagesProj/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..f94c0f11d
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/activity_main.xml
@@ -0,0 +1,204 @@
+<RelativeLayout
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:scrollbarAlwaysDrawVerticalTrack="true"
+    xmlns:android="http://schemas.android.com/apk/res/android" >
+
+
+
+   <ScrollView
+       android:layout_width="match_parent"
+       android:layout_above="@+id/buttons"
+       android:layout_alignParentTop="true"
+       android:paddingBottom="10dp"
+       android:id="@+id/sv_content"
+       android:layout_height="wrap_content">
+
+       <LinearLayout
+           android:layout_width="match_parent"
+           android:orientation="vertical"
+           android:layout_height="wrap_content">
+
+
+
+           <TextView
+               android:id="@+id/done_content"
+               android:layout_width="match_parent"
+               android:textSize="16sp"
+               android:layout_marginLeft="20dp"
+               android:textColor="@color/header"
+               android:visibility="gone"
+               android:layout_marginTop="50dp"
+               android:gravity="center"
+               android:text="Yippie! Now you are good to go and chat with 20+ friends, on Ad-Free Screen!"
+               android:layout_height="wrap_content" />
+
+
+
+
+
+           <LinearLayout
+           android:layout_width="match_parent"
+           android:orientation="vertical"
+           android:id="@+id/content"
+           android:layout_height="wrap_content">
+           <TextView
+           android:id="@+id/buy_content"
+           android:layout_width="match_parent"
+          android:layout_marginLeft="20dp"
+           android:textSize="16sp"
+           android:textColor="#9b9b9b"
+           android:layout_marginTop="20dp"
+           android:text="@string/buy_premium_content"
+           android:layout_height="wrap_content" />
+
+
+
+       <TextView
+           android:id="@+id/buy_content1"
+           android:layout_width="match_parent"
+           android:textSize="16sp"
+           android:layout_marginLeft="20dp"
+           android:textColor="#9b9b9b"
+           android:layout_marginTop="10dp"
+           android:text=" Be smart!\n Opt for Paid Version in just 2$ and  get :"
+           android:layout_height="wrap_content" />
+
+
+
+     <LinearLayout
+
+    android:layout_below="@+id/buy_content1"
+    android:layout_width="match_parent"
+    android:orientation="vertical"
+    android:layout_marginTop="10dp"
+    android:gravity="center_vertical"
+    android:paddingLeft="20dp"
+    android:paddingTop="10dp"
+    android:paddingBottom="10dp"
+    android:background="#f0f8ff"
+    android:layout_height="wrap_content">
+
+
+       <TextView
+           android:id="@+id/buy_content2"
+           android:layout_width="match_parent"
+           android:textSize="14sp"
+           android:textColor="#2e2e2e"
+           android:singleLine="true"
+           android:drawableLeft="@drawable/ic_bullet"
+           android:drawablePadding="2dp"
+           android:text="Access to 20+ profiles to build beautiful friendship"
+           android:layout_height="wrap_content" />
+
+
+
+
+       <TextView
+           android:id="@+id/buy_content3"
+           android:drawableLeft="@drawable/ic_bullet"
+           android:singleLine="true"
+           android:layout_width="match_parent"
+           android:textSize="14sp"
+           android:drawablePadding="2dp"
+           android:textColor="#2e2e2e"
+           android:layout_marginTop="16sp"
+           android:text="Ad-Free screens all the time "
+           android:layout_height="wrap_content" />
+
+
+</LinearLayout></LinearLayout>
+
+<!--
+       <TextView
+           android:id="@+id/done_content"
+           android:layout_width="match_parent"
+           android:gravity="center"
+           android:textSize="16sp"
+           android:visibility="gone"
+           android:textColor="@color/header"
+           android:layout_marginTop="150dp"
+           android:text="Yippie! Now you are good to go and chat with 20+ friends, on Ad-Free Screen!"
+           android:layout_height="wrap_content" />-->
+
+
+       </LinearLayout>
+
+
+   </ScrollView>
+
+
+       <LinearLayout
+           android:layout_width="match_parent"
+           android:orientation="horizontal"
+           android:gravity="center"
+           android:id="@+id/buttons"
+
+           android:layout_above="@+id/back"
+           android:layout_alignParentBottom="true"
+           android:layout_marginBottom="50dp"
+           android:layout_height="wrap_content">
+
+
+              <Button
+                  android:id="@+id/buyItBtn"
+                  android:layout_width="200dp"
+                  android:layout_height="wrap_content"
+                  android:onClick="onBuyPressed"
+                  android:background="@color/header"
+                  android:textSize="20sp"
+                  android:layout_margin="10dp"
+                  android:textColor="@color/common_plus_signin_btn_text_dark_focused"
+                  android:text="buy" />
+
+
+           <Button
+               android:id="@+id/cancelBtn"
+               android:layout_width="200dp"
+               android:layout_height="wrap_content"
+               android:onClick="onHomePressed"
+               android:background="@color/header"
+               android:visibility="gone"
+               android:layout_margin="10dp"
+               android:textColor="@color/common_plus_signin_btn_text_dark_focused"
+               android:text="HOME" />
+
+
+
+       </LinearLayout>
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_gravity="bottom"
+        android:id="@+id/back"
+        android:layout_height="match_parent">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:focusable="true"
+            android:layout_gravity="bottom"
+            android:focusableInTouchMode="true"
+            android:gravity="bottom"
+            android:orientation="horizontal"
+            android:layout_alignParentBottom="true"
+            android:id="@+id/bottom_panel"
+            >
+            <ImageView
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:layout_weight="1"
+                android:id="@+id/backview"
+
+                />
+            <View
+                android:id="@+id/black_view"
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:background="#ff252525"
+                android:layout_weight="3"></View>
+
+        </LinearLayout>
+
+    </FrameLayout>
+</RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/custom_actionbar.xml b/TMessagesProj/src/main/res/layout/custom_actionbar.xml
new file mode 100644
index 000000000..28dd42a8a
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/custom_actionbar.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:orientation="vertical">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="15dp"
+        android:text="Premium Benefits"
+        android:textColor="#ffffff"
+        android:textSize="20sp" />
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/footer_of_gridview.xml b/TMessagesProj/src/main/res/layout/footer_of_gridview.xml
new file mode 100644
index 000000000..802c516ad
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/footer_of_gridview.xml
@@ -0,0 +1,19 @@
+<RelativeLayout android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <Button
+        android:id="@+id/paypal_btn_id"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/premium_features"
+        android:visibility="gone"
+        android:background="@drawable/button_selector1"
+        android:layout_alignParentBottom="true"
+        android:paddingLeft="15dp"
+        android:paddingRight="15dp"
+        android:textColor="#ffffff"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="20dp"
+        android:layout_marginBottom="50dp"
+        />
+</RelativeLayout>
diff --git a/TMessagesProj/src/main/res/layout/grid_single.xml b/TMessagesProj/src/main/res/layout/grid_single.xml
new file mode 100644
index 000000000..835841fbf
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/grid_single.xml
@@ -0,0 +1,30 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="5dp" >
+
+    <org.telegram.ui.Components.BackupImageView
+        android:id="@+id/grid_image"
+        android:layout_gravity="center_horizontal"
+        android:layout_width="50dp"
+        android:layout_height="50dp"
+    />
+
+    <TextView
+        android:id="@+id/grid_text"
+        android:gravity="center_horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dp"
+        android:singleLine="true"
+        android:textSize="9sp" >
+    </TextView>
+
+
+
+
+
+
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/gridview.xml b/TMessagesProj/src/main/res/layout/gridview.xml
new file mode 100644
index 000000000..e7dd96f2d
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/gridview.xml
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent">
+
+
+
+    <ProgressBar
+        android:id="@+id/pb_load"
+        android:layout_width="50dp"
+        android:layout_centerInParent="true"
+       android:visibility="gone"
+        android:layout_height="50dp" />
+
+
+    <TextView
+        android:id="@+id/empty_view"
+        android:layout_width="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:visibility="gone"
+        android:background="@drawable/cats"
+        android:textSize="18sp"
+        android:textColor="@color/common_plus_signin_btn_text_dark"
+        android:text="No Friends found."
+        android:layout_height="wrap_content" />
+
+
+
+
+    <org.telegram.socialuser.GridViewWithHeaderAndFooter
+        android:numColumns="auto_fit"
+        android:gravity="center"
+        android:columnWidth="70dp"
+
+        android:stretchMode="columnWidth"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_above="@+id/back_panel"
+        android:id="@+id/grid"
+        />
+
+
+    <FrameLayout
+        android:id="@+id/back_panel"
+        android:layout_width="match_parent"
+        android:layout_alignParentBottom="true"
+        android:layout_height="wrap_content">
+
+        <Button
+            android:id="@+id/paypal_btn_id"
+            android:layout_width="200dp"
+            android:paddingLeft="10dp"
+            android:paddingRight="10dp"
+            android:visibility="gone"
+            android:layout_height="wrap_content"
+            android:text="@string/premium_features"
+            android:layout_alignBottom="@+id/grid"
+            android:layout_alignParentBottom="true"
+            android:background="@color/header"
+            android:layout_marginBottom="60dp"
+            android:textColor="#ffffff"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="10dp"
+            />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:focusable="true"
+            android:layout_gravity="bottom"
+            android:focusableInTouchMode="true"
+            android:gravity="bottom"
+            android:orientation="horizontal"
+            android:layout_alignParentBottom="true"
+            android:id="@+id/bottom_panel"
+            >
+            <ImageView
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:layout_weight="1"
+                android:id="@+id/backview"
+
+                />
+            <View
+                android:id="@+id/black_view"
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:background="#ff252525"
+                android:layout_weight="3"></View>
+        </LinearLayout>
+    </FrameLayout></RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/layout_ad.xml b/TMessagesProj/src/main/res/layout/layout_ad.xml
new file mode 100644
index 000000000..6ba2e2ad4
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/layout_ad.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:ads="http://schemas.android.com/apk/res-auto"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+
+<!--
+    <com.smaato.soma.BannerView
+        android:id="@+id/bannerView"
+        android:layout_width="match_parent"
+        android:paddingLeft="10dp"
+        android:paddingRight="10dp"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:paddingBottom="5dp"
+        android:layout_centerHorizontal="true" >
+    </com.smaato.soma.BannerView>
+-->
+
+
+<!--
+    <com.google.android.gms.ads.AdView
+        android:id="@+id/adView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        ads:adSize="BANNER"
+        android:paddingLeft="10dp"
+        android:paddingRight="10dp"
+        android:gravity="center"
+        android:paddingBottom="5dp"
+        ads:adUnitId="@string/banner_home_footer">
+    </com.google.android.gms.ads.AdView>-->
+
+
+    <com.google.android.gms.ads.AdView
+        android:id="@+id/adView"
+        android:layout_gravity="center_horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerHorizontal="true"
+        ads:adSize="BANNER"
+        android:layout_marginLeft="10dp"
+        android:gravity="center"
+        ads:adUnitId="@string/banner_home_footer">
+    </com.google.android.gms.ads.AdView>
+
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/layout_ad_onchat.xml b/TMessagesProj/src/main/res/layout/layout_ad_onchat.xml
new file mode 100644
index 000000000..0a6cdbc14
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/layout_ad_onchat.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:BannerView="http://schemas.android.com/apk/lib/com.smaato.soma"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+
+
+    <com.smaato.soma.BannerView
+        android:id="@+id/bannerView"
+        android:layout_width="match_parent"
+        android:paddingLeft="10dp"
+        android:paddingRight="10dp"
+        android:layout_height="50dip"
+        android:gravity="center"
+        BannerView:autoReloadFrequency="10"
+        BannerView:adSpaceId="130134592"
+        BannerView:publisherId="1100022161"
+        BannerView:loadNewBanner="true"
+        >
+
+
+    </com.smaato.soma.BannerView>
+
+
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/myprofile_layout.xml b/TMessagesProj/src/main/res/layout/myprofile_layout.xml
new file mode 100644
index 000000000..0de4da33f
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/myprofile_layout.xml
@@ -0,0 +1,305 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="match_parent"
+    android:background="#ffffff"
+    android:layout_width="match_parent">
+    <ProgressBar
+        android:id="@+id/pb_load"
+        android:layout_width="50dp"
+        android:layout_centerInParent="true"
+        android:background="#ffffff"
+        android:visibility="gone"
+        android:layout_height="50dp" />
+
+
+    <ScrollView
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:layout_marginBottom="150dp"
+        android:scrollbars="vertical"
+        >
+        <LinearLayout
+        android:orientation="vertical"
+            android:layout_width="match_parent"
+            android:layout_marginTop="25dp"
+            android:layout_margin="10dp"
+            android:background="#ffffff"
+        android:layout_height="wrap_content">
+
+            <FrameLayout
+                android:layout_width="fill_parent"
+                android:layout_height="80dp"
+                android:layout_above="@+id/map_view"
+                android:id="@+id/location_bottom_view"
+                android:layout_alignParentBottom="true"
+                android:layout_alignParentLeft="true"
+                android:layout_alignParentStart="true">
+
+                <org.telegram.ui.Components.BackupImageView
+                    android:layout_width="54dp"
+                    android:layout_height="54dp"
+                    android:id="@+id/user_avatar_view"
+                    android:layout_marginLeft="12dp"
+
+                    android:layout_gravity="center_vertical"/>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textSize="22dp"
+                    android:textColor="#000000"
+                    android:layout_marginLeft="88dp"
+                    android:layout_marginTop="20dp"
+                    android:layout_marginRight="12dp"
+                    android:id="@+id/user_name_label"
+                    android:text="Ram Bhawan"
+                    android:layout_gravity="top"
+                    android:maxLines="1"/>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textSize="15dp"
+                    android:layout_marginLeft="88dp"
+                    android:layout_marginTop="52dp"
+                    android:layout_marginRight="12dp"
+                    android:textColor="#999999"
+                    android:text="@string/Online"
+                    android:id="@+id/user_staus_label"
+                    android:layout_gravity="top"
+                    android:maxLines="1"/>
+
+            </FrameLayout>
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:padding="10dp"
+                android:background="#F1F0F0"/>
+           <RelativeLayout
+               android:id="@+id/location"
+               android:layout_width="match_parent"
+               android:layout_height="wrap_content"
+               android:padding="8dp"
+                >
+                <ImageView
+                    android:id="@+id/country_image"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:paddingRight="20dp"
+                    android:src="@drawable/ic_location_earth"/>
+                <TextView
+                    android:id="@+id/id_country"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="India"
+                    android:layout_toRightOf="@id/country_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="@color/black">
+
+                </TextView>
+               <TextView
+                   android:id="@+id/id_country_name"
+                   android:layout_height="wrap_content"
+                   android:layout_width="wrap_content"
+                   android:text="@string/AttachLocation"
+                   android:layout_below="@id/id_country"
+                   android:layout_toRightOf="@id/country_image"
+                   android:layout_gravity="center_vertical"
+                   android:textColor="#999898">
+
+               </TextView>
+
+            </RelativeLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:padding="10dp"
+                android:background="#F1F0F0"/>
+            <RelativeLayout
+                android:id="@+id/gender"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:padding="8dp"
+                >
+                <ImageView
+                    android:id="@+id/gender_image"
+                    android:layout_width="wrap_content"
+                    android:paddingRight="20dp"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:src="@drawable/ic_gender"/>
+                <TextView
+                    android:id="@+id/id_gender"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="Male"
+                    android:layout_toRightOf="@id/gender_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="@color/black">
+
+                </TextView>
+                <TextView
+                    android:id="@+id/id_gender_name"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="@string/gender"
+                    android:layout_below="@id/id_gender"
+                    android:layout_toRightOf="@id/gender_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="#999898">
+
+                </TextView>
+
+            </RelativeLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:padding="10dp"
+                android:background="#F1F0F0"/>
+
+            <RelativeLayout
+                android:id="@+id/age"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:padding="8dp"
+                >
+                <ImageView
+                    android:id="@+id/age_image"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:paddingRight="20dp"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:src="@drawable/ic_dob"/>
+                <TextView
+                    android:id="@+id/id_age"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="XX/MM/YYYY"
+                    android:layout_toRightOf="@id/age_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="@color/black">
+
+                </TextView>
+               <!-- <DatePicker
+                    android:id="@+id/datepicker"
+                    android:layout_width="wrap_content"
+                    android:visibility="gone"
+                    android:layout_height="wrap_content">
+
+                </DatePicker>-->
+                <TextView
+                    android:id="@+id/id_age_name"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="@string/dob"
+                    android:layout_below="@id/id_age"
+                    android:layout_toRightOf="@id/age_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="#999898">
+                </TextView>
+
+            </RelativeLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:padding="10dp"
+                android:background="#F1F0F0"/>
+            <RelativeLayout
+                android:id="@+id/number"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:padding="8dp"
+                >
+                <ImageView
+                    android:id="@+id/number_image"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:paddingRight="20dp"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:src="@drawable/ic_call"/>
+                <TextView
+                    android:id="@+id/id_number"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="9452414322"
+                    android:layout_toRightOf="@id/number_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="@color/black">
+
+                </TextView>
+                <TextView
+                    android:id="@+id/id_number_name"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="@string/Phone"
+                    android:layout_below="@id/id_number"
+                    android:layout_toRightOf="@id/number_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="#999898">
+
+                </TextView>
+
+            </RelativeLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:padding="10dp"
+                android:background="#F1F0F0"/>
+
+       </LinearLayout>
+    </ScrollView>
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_gravity="bottom"
+        android:id="@+id/bottom_penel"
+        android:layout_height="match_parent">
+
+            <Button
+                android:id="@+id/save"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="0dp"
+                android:background="@color/header"
+                android:textColor="#ffffff"
+                android:gravity="center"
+                android:layout_gravity="bottom|center_horizontal"
+                android:layout_marginBottom="60dp"
+                android:text="SAVE"
+                />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:focusable="true"
+            android:layout_gravity="bottom"
+            android:focusableInTouchMode="true"
+            android:gravity="bottom"
+            android:orientation="horizontal"
+            android:layout_alignParentBottom="true"
+            android:id="@+id/bottom_panel"
+            >
+            <ImageView
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:layout_weight="1"
+                android:id="@+id/backview"
+
+                />
+            <View
+                android:id="@+id/black_view"
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:background="#ff252525"
+                android:layout_weight="3"></View>
+
+        </LinearLayout>
+
+    </FrameLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/preferences_layout.xml b/TMessagesProj/src/main/res/layout/preferences_layout.xml
new file mode 100644
index 000000000..a344be85b
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/preferences_layout.xml
@@ -0,0 +1,248 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    android:background="#ffffff">
+    <ProgressBar
+        android:id="@+id/pb_load"
+        android:layout_width="50dp"
+        android:layout_centerInParent="true"
+        android:visibility="gone"
+        android:background="#ffffff"
+        android:layout_height="50dp" />
+    <ScrollView
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:layout_marginBottom="100dp"
+        android:scrollbars="vertical"
+        ><LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+        <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="match_parent"
+            android:layout_marginLeft="20dp"
+
+            android:background="#ffffff"
+            android:layout_height="wrap_content">
+
+
+            <TextView
+                android:id="@+id/tv_below"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_horizontal"
+                android:gravity="clip_horizontal"
+                android:textColor="#999898"
+                android:layout_marginTop="10dp"
+                android:text="@string/preferences_contant"
+                /> </LinearLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:layout_marginTop="20dp"
+                android:background="@color/common_plus_signin_btn_text_dark_disabled"/>
+
+        />
+            <LinearLayout
+                android:id="@+id/location_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="20dp"
+                android:layout_marginTop="10dp"
+                android:layout_marginBottom="10dp"
+                android:orientation="vertical">
+               <TextView
+                   android:id="@+id/id_location_txt"
+                   android:layout_width="wrap_content"
+                   android:layout_height="wrap_content"
+                   android:text="Delhi"
+                   android:textColor="@color/black"/>
+                <TextView
+                     android:layout_width="wrap_content"
+                     android:layout_height="wrap_content"
+                     android:text="@string/AttachLocation"
+                     android:textColor="#999898"/>
+            </LinearLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:background="@color/common_plus_signin_btn_text_dark_disabled"/>
+        />
+            <LinearLayout
+                android:id="@+id/gender_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="20dp"
+                android:layout_marginTop="10dp"
+                android:layout_marginBottom="10dp"
+                android:orientation="vertical">
+                <TextView
+                    android:id="@+id/gender_txt"
+                    android:layout_width="wrap_content"
+                    android:text="Male"
+                    android:layout_height="wrap_content"
+                    android:textColor="@color/black"/>
+                <TextView
+                    android:id="@+id/id_gender"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/gender"
+                    android:textColor="#999898"/>
+            </LinearLayout>
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:background="#F1F0F0"/>
+
+           <!-- <LinearLayout
+                android:id="@+id/age_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="20dp"
+                android:layout_marginTop="10dp"
+                android:layout_marginBottom="10dp"
+                android:orientation="vertical">
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/age"
+                    android:textColor="@color/black"/>
+                <TextView
+                    android:id="@+id/age_taxt"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="18-25"
+                    android:textColor="#999898"/>
+            </LinearLayout>-->
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginRight="5dp"
+            android:layout_marginTop="10dp"
+            android:layout_marginBottom="10dp"
+            android:orientation="vertical">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_marginLeft="20dp"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal">
+
+                <TextView
+                    android:layout_width="0dp"
+                    android:layout_weight="1"
+                    android:gravity="left"
+                    android:layout_height="wrap_content"
+                    android:text="@string/age_group"/>
+
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_weight="1"
+                    android:gravity="right"
+                    android:paddingRight="20dp"
+                    android:orientation="horizontal"
+                    android:layout_height="wrap_content">
+                <TextView
+                    android:id="@+id/minValue1"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="min"
+                    android:paddingLeft="10dp"
+                    />
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text=" - "/>
+                <TextView
+                    android:id="@+id/maxValue1"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="max" />
+                </LinearLayout>
+            </LinearLayout>
+
+            <LinearLayout
+                android:id="@+id/id_age_range"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginRight="4dp"
+                android:layout_marginLeft="16dp"
+                android:layout_marginTop="4dp"
+                android:orientation="vertical" >
+
+            </LinearLayout>
+
+
+        </LinearLayout>
+
+        <View
+            android:layout_width="match_parent"
+            android:layout_height="1dp"
+            android:background="@color/common_plus_signin_btn_text_dark_disabled"/>
+
+        </LinearLayout>
+    </ScrollView>
+
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_gravity="bottom"
+        android:layout_height="match_parent">
+
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom"
+            android:gravity="center_horizontal"
+            android:layout_marginBottom="50dp"
+            android:layout_alignParentBottom="true"
+           >
+            <Button
+                android:id="@+id/id_btn_preferences"
+                android:layout_width="200dp"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:background="@color/header"
+                android:gravity="center"
+
+                android:layout_marginBottom="10dp"
+                android:textColor="#ffffff"
+                android:text="SEARCH NOW"
+                />
+        </LinearLayout>
+
+   <!--     android:background="@drawable/button_selector1"-->
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:focusable="true"
+            android:layout_gravity="bottom"
+            android:focusableInTouchMode="true"
+            android:gravity="bottom"
+            android:orientation="horizontal"
+            android:layout_alignParentBottom="true"
+            android:id="@+id/bottom_panel"
+            >
+            <ImageView
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:layout_weight="1"
+                android:id="@+id/backview"
+
+                />
+            <View
+                android:id="@+id/black_view"
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:background="#ff252525"
+                android:layout_weight="3"></View>
+
+        </LinearLayout>
+
+    </FrameLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/usernw_profile_layout.xml b/TMessagesProj/src/main/res/layout/usernw_profile_layout.xml
new file mode 100644
index 000000000..12d2f964d
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/usernw_profile_layout.xml
@@ -0,0 +1,263 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="match_parent"
+    android:background="#ffffff"
+    android:layout_width="match_parent">
+
+     <ScrollView
+         android:layout_width="match_parent"
+         android:layout_height="match_parent">
+
+
+      <LinearLayout
+           android:orientation="vertical"
+            android:layout_width="match_parent"
+            android:layout_marginTop="0dp"
+
+            android:background="#ffffff"
+            android:layout_height="wrap_content">
+
+            <FrameLayout
+                android:layout_margin="10dp"
+                android:layout_width="fill_parent"
+                android:layout_height="100dp"
+                android:id="@+id/location_bottom_view"
+                android:layout_alignParentBottom="true"
+                android:layout_alignParentLeft="true"
+                android:layout_alignParentStart="true">
+
+                <org.telegram.ui.Components.BackupImageView
+                    android:layout_width="64dp"
+                    android:layout_height="64dp"
+                    android:id="@+id/user_avatar_view"
+                    android:layout_marginLeft="12dp"
+                    android:layout_marginTop="13dp"
+                    android:layout_gravity="top"/>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textSize="22dp"
+                    android:textColor="#000000"
+                    android:layout_marginLeft="88dp"
+                    android:layout_marginTop="12dp"
+                    android:layout_marginRight="12dp"
+                    android:id="@+id/user_name_label"
+                    android:text="Ram Bhawan"
+                    android:layout_gravity="top"
+                    android:maxLines="1"/>
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textSize="15dp"
+                    android:layout_marginLeft="88dp"
+                    android:layout_marginTop="40dp"
+                    android:layout_marginRight="12dp"
+                    android:textColor="#999999"
+                    android:text="@string/Online"
+                    android:id="@+id/user_staus_label"
+                    android:layout_gravity="top"
+                    android:maxLines="1"/>
+
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textSize="15dp"
+                    android:layout_marginLeft="88dp"
+                    android:layout_marginTop="60dp"
+                    android:layout_marginRight="12dp"
+                    android:textColor="#999999"
+                    android:text="India"
+                    android:id="@+id/id_country"
+                    android:layout_gravity="top"
+                    android:maxLines="1"/>
+
+            </FrameLayout>
+<!--
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:padding="10dp"
+                android:background="#F1F0F0"/>-->
+         <!--  <RelativeLayout
+               android:id="@+id/location"
+               android:layout_width="match_parent"
+               android:layout_height="wrap_content"
+               android:padding="8dp"
+                >
+                <ImageView
+                    android:id="@+id/country_image"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:paddingRight="20dp"
+                    android:src="@drawable/ic_location_earth"/>
+                <TextView
+                    android:id="@+id/id_country"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="India"
+                    android:layout_toRightOf="@id/country_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="@color/black">
+
+                </TextView>
+               <TextView
+                   android:id="@+id/id_country_name"
+                   android:layout_height="wrap_content"
+                   android:layout_width="wrap_content"
+                   android:text="@string/AttachLocation"
+                   android:layout_below="@id/id_country"
+                   android:layout_toRightOf="@id/country_image"
+                   android:layout_gravity="center_vertical"
+                   android:textColor="#999898">
+
+               </TextView>
+
+           </RelativeLayout>-->
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp"
+                android:padding="10dp"
+                android:background="#F1F0F0"/>
+
+          <!--  <RelativeLayout
+                android:id="@+id/number"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:padding="8dp"
+                >
+                <ImageView
+                    android:id="@+id/number_image"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:paddingRight="20dp"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentLeft="true"
+                    android:src="@drawable/ic_call"/>
+                <TextView
+                    android:id="@+id/id_number"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="9452414322"
+                    android:layout_toRightOf="@id/number_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="@color/black">
+
+                </TextView>
+                <TextView
+                    android:id="@+id/id_number_name"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:text="@string/Phone"
+                    android:layout_below="@id/id_number"
+                    android:layout_toRightOf="@id/number_image"
+                    android:layout_gravity="center_vertical"
+                    android:textColor="#999898">
+
+                </TextView>
+
+            </RelativeLayout>-->
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="@string/mutualfrinds"
+                android:layout_marginTop="10dp"
+
+                android:layout_marginBottom="10dp"
+                android:layout_marginLeft="30dp"
+                android:textColor="@color/black"/>
+
+            <ProgressBar
+                android:id="@+id/pb_load"
+                android:layout_width="50dp"
+                android:layout_gravity="center"
+                android:layout_centerInParent="true"
+                android:visibility="gone"
+                android:layout_height="50dp" />
+
+            <org.telegram.socialuser.GridViewWithHeaderAndFooter
+                android:numColumns="auto_fit"
+                android:gravity="center"
+                android:columnWidth="70dp"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp"
+                android:stretchMode="columnWidth"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:id="@+id/grid"
+                />
+
+            <TextView
+                android:id="@+id/empty_view"
+                android:layout_width="match_parent"
+                android:gravity="center"
+                android:visibility="gone"
+                android:background="@drawable/cats"
+                android:textSize="18sp"
+                android:textColor="@color/common_plus_signin_btn_text_dark"
+                android:text="No Mutual Friends found.."
+                android:layout_height="match_parent" />
+
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="10dp"
+                android:orientation="vertical">
+              <!--  <Button
+                    android:id="@+id/save"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginLeft="0dp"
+                    android:background="@drawable/button_selector1"
+                    android:textColor="#ffffff"
+                    android:paddingRight="10dp"
+                    android:paddingLeft="10dp"
+                    android:layout_gravity="center"
+                    android:layout_marginBottom="20dp"
+                    android:text="Wink"
+                    />-->
+            </LinearLayout>
+       </LinearLayout></ScrollView>
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_gravity="bottom"
+        android:layout_height="match_parent">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:focusable="true"
+            android:layout_gravity="bottom"
+            android:focusableInTouchMode="true"
+            android:gravity="bottom"
+            android:orientation="horizontal"
+            android:layout_alignParentBottom="true"
+            android:id="@+id/bottom_panel"
+            >
+            <ImageView
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:layout_weight="1"
+                android:id="@+id/backview"
+
+                />
+            <View
+                android:id="@+id/black_view"
+                android:layout_width="0dp"
+                android:layout_height="48dp"
+                android:background="#ff252525"
+                android:layout_weight="3"></View>
+
+        </LinearLayout>
+
+    </FrameLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/attrs.xml b/TMessagesProj/src/main/res/values/attrs.xml
new file mode 100644
index 000000000..97de9e5f0
--- /dev/null
+++ b/TMessagesProj/src/main/res/values/attrs.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 Kalin Maldzhanski
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <declare-styleable name="MultiSlider">
+
+
+        <attr name="scaleMin" format="integer"/>
+        <attr name="scaleMax" format="integer"/>
+        <attr name="scaleStep" format="integer"/>
+
+
+        <attr name="stepsThumbsApart" format="integer"/>
+        <attr name="drawThumbsApart" format="boolean"/>
+
+        <attr name="android:thumb"/>
+        <attr name="thumbNumber" format="integer"/>
+        <attr name="android:thumbOffset"/>
+
+        <attr name="thumbValue1" format="integer"/>
+        <attr name="thumbValue2" format="integer"/>
+        <attr name="range1" format="reference"/>
+        <attr name="range2" format="reference"/>
+
+        <attr name="android:track"/>
+
+        <attr name="range" format="reference"/>
+
+        <attr name="mirrorForRTL" format="boolean"/>
+
+        <attr name="thumbColor" format="color" />
+        <attr name="trackColor" format="color" />
+        <attr name="rangeColor" format="color" />
+        <attr name="range1Color" format="color" />
+        <attr name="range2Color" format="color" />
+    </declare-styleable>
+    <!-- style reference -->
+<declare-styleable name="MultiSliderTheme">
+        <attr name="multiSliderStyle" format="reference"/>
+</declare-styleable>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index b4eac3ecb..124448c0a 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -1,4 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <color name="divider">#dcdcdc</color>
+    <color name="black">#000000</color>
+    <color name="light_black">#ff252525</color>
+    <color name="header">#ff5374a0</color>
+    <color name="gallery_background_color">#ff000000</color>
+    <color name="divider_drawer">#262626</color>
+
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 5ae5eb962..49e8f6aad 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1203,4 +1203,51 @@
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
+
+    /////////////////////////////
+
+
+    <string name="updateText">Social Telegram for Android has been updated. New in version 3.3.2:\n\n- Cache management: Control how much disk space Telegram uses on your device, delete cache for specific types of content.\n- Delete cache from supergroups and channels: Tap and hold on them in the chats list and \'Delete from Cache\'.\n- Sticker management: Manually rearrange your sticker packs. Pack order is now synced across all your devices.\n\nMore about this update:\nhttps://telegram.org/blog/cache-and-stickers</string>
+    <string name="updateBuild">693</string>
+
+    <!-- update strings for blackberry    -->
+    <string name="ContactUs">Contact Us</string>
+    <string name="new_chat" translatable="false">New Chat</string>
+    <string name="add_new_contact" translatable ="false">Add New Contact</string>
+    <string name="About" translatable ="false">About</string>
+    <string name="AddParticipant" translatable ="false">Add Participant</string>
+    <string name="CreateChannel" translatable ="false">Create Channel</string>
+    <string name="MailContent" translatable="false"><![CDATA[Please provide below information so we can help you to resolve your problem.<br></br>   1. Whats your Blackberry OS version?<br></br>   2. Whats your Android runtime OS version?<br></br>   3. Any Feedback/Concerns or issues?]]></string>
+
+
+    <string name="myprofile">My Profile</string>
+    <string name="preferences">Looking For Someone</string>
+    <string name="premium_features"><U>View More</U></string>
+    <string name="social_friend">Social Friends</string>
+    <string name="looking_for_someone">"Looking For Someone"</string>
+    <string name="age_group">Age</string>
+    <string name="gender">Gender</string>
+    <string name="age">Age</string>
+    <string name="lets_start">Let\'s Play</string>
+    <string name="male">Male</string>
+    <string name="female">Female</string>
+    <string name="pleaseselectagegroup">Please select age group</string>
+    <string name="dob">Date of birth</string>
+    <string name="preferences_contant">Lets connect you to the people you always wanted to befriended with! Simply enter your choice below.</string>
+    <string name="InviteTextsocial">Hey, I found this app really fun-filled &amp; exciting, to socialize with my-kinda-people! Give a try, you too!: http://blck.by/29ei2Kq </string>
+    <string name="InviteFriends1">Invite Friends</string>
+    <string name="wink">Play</string>
+    <string name="pleaseselectvaliddate">Please select valid date</string>
+    <string name="yourpreferences">Your Preferences</string>
+    <string name="pleaseselectcountry">please select country</string>
+    <string name="mutualfrinds">Mutual Friends</string>
+    <string name="peopleyoumayknow">People you may know</string>
+
+
+    <string name="banner_home_footer">ca-app-pub-2963488631481072/3850621745<!--ca-app-pub-2963488631481072/3850621745--></string> <!--ca-app-pub-3120536913205473/5975042732-->
+    <string name="socialsetting">Social Settings</string>
+    <string name="buy_premium_content">Want to befriend with more interesting people?
+    \nTime to Switch to the paid version !
+    </string>
+
 </resources>
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index cc551aed8..525ae5bde 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
-        classpath 'com.google.gms:google-services:2.1.2'
+        classpath 'com.android.tools.build:gradle:2.1.0'
+        classpath 'com.google.gms:google-services:2.1.0'
     }
 }
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 08f287cfb..1a55eceac 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -5,15 +5,12 @@
 #
 # Specifies the JVM arguments used for the daemon process.
 # The setting is particularly useful for tweaking memory settings.
-# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# Default value: -Xmx1024m -XX:MaxPermSize=256m
 # org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
 #
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-#Sat Mar 12 05:53:50 MSK 2016
-RELEASE_KEY_PASSWORD=password
-RELEASE_KEY_ALIAS=alias
-RELEASE_STORE_PASSWORD=password
+#Mon Aug 08 16:52:56 IST 2016
 android.useDeprecatedNdk=true
