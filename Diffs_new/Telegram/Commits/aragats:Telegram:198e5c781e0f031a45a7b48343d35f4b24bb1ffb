diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index d7884f75e..2bf11599c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -11,82 +11,23 @@
 import android.accounts.Account;
 import android.accounts.AccountManager;
 import android.app.Activity;
-import android.content.ContentProviderOperation;
-import android.content.ContentProviderResult;
-import android.content.ContentResolver;
-import android.content.ContentValues;
 import android.content.SharedPreferences;
-import android.database.Cursor;
-import android.net.Uri;
-import android.provider.BaseColumns;
-import android.provider.ContactsContract;
-import android.util.SparseArray;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.messenger.ApplicationLoader;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashMap;
-import java.util.concurrent.ConcurrentHashMap;
 
 public class ContactsController {
 
     private Account currentAccount;
-    private boolean loadingContacts = false;
-    private static final Object loadContactsSync = new Object();
-    public boolean contactsLoaded = false;
-    private ArrayList<Integer> delayedContactsUpdate = new ArrayList<>();
     private String inviteText;
     private boolean updatingInviteText = false;
     private HashMap<String, String> sectionsToReplace = new HashMap<>();
 
 
-    public static class Contact {
-        public int id;
-        public ArrayList<String> phones = new ArrayList<>();
-        public ArrayList<String> phoneTypes = new ArrayList<>();
-        public ArrayList<String> shortPhones = new ArrayList<>();
-        public ArrayList<Integer> phoneDeleted = new ArrayList<>();
-        public String first_name;
-        public String last_name;
-    }
-
-    private String[] projectionPhones = {
-        ContactsContract.CommonDataKinds.Phone.CONTACT_ID,
-        ContactsContract.CommonDataKinds.Phone.NUMBER,
-        ContactsContract.CommonDataKinds.Phone.TYPE,
-        ContactsContract.CommonDataKinds.Phone.LABEL
-    };
-    private String[] projectionNames = {
-        ContactsContract.CommonDataKinds.StructuredName.CONTACT_ID,
-        ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME,
-        ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME,
-        ContactsContract.Data.DISPLAY_NAME,
-        ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME
-    };
-
-    public HashMap<Integer, Contact> contactsBook = new HashMap<>();
-    public HashMap<String, Contact> contactsBookSPhones = new HashMap<>();
-    public ArrayList<Contact> phoneBookContacts = new ArrayList<>();
-
-    public ArrayList<TLRPC.TL_contact> contacts = new ArrayList<>();
-    public SparseArray<TLRPC.TL_contact> contactsDict = new SparseArray<>();
-    public HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = new HashMap<>();
-    public ArrayList<String> sortedUsersSectionsArray = new ArrayList<>();
-
-    public HashMap<String, TLRPC.TL_contact> contactsByPhone = new HashMap<>();
-
     private static volatile ContactsController Instance = null;
     public static ContactsController getInstance() {
         ContactsController localInstance = Instance;
@@ -131,18 +72,7 @@ public ContactsController() {
     }
 
     public void cleanup() {
-        contactsBook.clear();
-        contactsBookSPhones.clear();
-        phoneBookContacts.clear();
-        contacts.clear();
-        contactsDict.clear();
-        usersSectionsDict.clear();
-        sortedUsersSectionsArray.clear();
-        delayedContactsUpdate.clear();
-        contactsByPhone.clear();
 
-        loadingContacts = false;
-        contactsLoaded = false;
     }
 
     public void checkInviteText() {
@@ -169,6 +99,7 @@ public String getInviteText() {
         return inviteText != null ? inviteText : LocaleController.getString("InviteText", R.string.InviteText);
     }
 
+    //TODO check accounts receiving from AccountManager
     public void checkAppAccount() {
         AccountManager am = AccountManager.get(ApplicationLoader.applicationContext);
         Account[] accounts;
@@ -207,6 +138,7 @@ public void checkAppAccount() {
             }
             if (UserConfig.isClientActivated()) {
                 try {
+                    //TODO UserConfig.getCurrentUser() is null. Deshalb Method wirft Exception.
                     currentAccount = new Account(UserConfig.getCurrentUser().getPhone(), "org.telegram.messenger");
                     am.addAccountExplicitly(currentAccount, "", null);
                 } catch (Exception e) {
@@ -216,16 +148,6 @@ public void checkAppAccount() {
         }
     }
 
-    public boolean isLoadingContacts() {
-        synchronized (loadContactsSync) {
-            return loadingContacts;
-        }
-    }
-
-
-
-
-
     public static String formatName(String firstName, String lastName) {
         /*if ((firstName == null || firstName.length() == 0) && (lastName == null || lastName.length() == 0)) {
             return LocaleController.getString("HiddenName", R.string.HiddenName);
