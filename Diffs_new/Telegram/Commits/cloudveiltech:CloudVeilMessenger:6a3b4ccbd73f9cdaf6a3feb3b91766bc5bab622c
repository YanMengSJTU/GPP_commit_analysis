diff --git a/.gitignore b/.gitignore
index 1f4151cd4..cb17e63ad 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,4 @@ local.properties
 gradle.properties
 
 TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+TMessagesProj/.externalNativeBuild
diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index df848cc7f..5ced55c1a 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -1,9 +1,25 @@
+def keystorePropertiesFile = rootProject.file("../keystore.properties");
+def keystoreProperties = new Properties()
+keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
+
+
+buildscript {
+    repositories {
+        maven { url 'https://maven.fabric.io/public' }
+    }
+
+    dependencies {
+        classpath 'io.fabric.tools:gradle:1.+'
+    }
+}
 apply plugin: 'com.android.application'
+apply plugin: 'io.fabric'
 
 repositories {
     mavenCentral()
     google()
     jcenter()
+    maven { url 'https://maven.fabric.io/public' }
 }
 
 configurations {
@@ -11,28 +27,36 @@ configurations {
 }
 
 dependencies {
-    compile 'com.google.firebase:firebase-messaging:17.1.0'
-    compile 'com.google.firebase:firebase-config:16.0.0'
-    compile 'com.google.android.gms:play-services-maps:15.0.1'
-    compile 'com.google.android.gms:play-services-vision:15.0.2'
-    compile 'com.google.android.gms:play-services-wallet:15.0.1'
-    compile 'com.google.android.gms:play-services-wearable:15.0.1'
+    compile 'com.android.support:multidex:1.0.3'
+    implementation 'com.google.firebase:firebase-messaging:17.1.0'
+    implementation 'com.google.firebase:firebase-config:16.0.0'
+    implementation 'com.google.android.gms:play-services-maps:15.0.1'
+    implementation 'com.google.android.gms:play-services-vision:15.0.2'
+    implementation 'com.google.android.gms:play-services-wallet:15.0.1'
+    implementation 'com.google.android.gms:play-services-wearable:15.0.1'
     implementation 'com.android.support:support-core-ui:27.1.1'
     implementation 'com.android.support:support-compat:27.1.1'
     implementation 'com.android.support:support-core-utils:27.1.1'
     implementation 'com.android.support:support-v13:27.1.1'
     implementation 'com.android.support:palette-v7:27.1.1'
     implementation 'com.android.support:exifinterface:27.1.1'
-    compile 'net.hockeyapp.android:HockeySDK:5.1.0'
-    compile 'com.googlecode.mp4parser:isoparser:1.0.6'
-    compile 'com.stripe:stripe-android:2.0.2'
+    implementation 'net.hockeyapp.android:HockeySDK:5.1.0'
+    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
+    implementation 'com.stripe:stripe-android:2.0.2'
+    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
+    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
+    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
+    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
+    implementation('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
+        transitive = true;
+    }
 }
 
 android {
     compileSdkVersion 27
     buildToolsVersion '27.0.3'
 
-    defaultConfig.applicationId = "org.telegram.messenger"
+    defaultConfig.applicationId = "org.cloudveil.messenger"
 
     sourceSets.main.jniLibs.srcDirs = ['./jni/']
 
@@ -58,17 +82,17 @@ android {
 
     signingConfigs {
         debug {
-            storeFile file("config/release.keystore")
-            storePassword RELEASE_STORE_PASSWORD
-            keyAlias RELEASE_KEY_ALIAS
-            keyPassword RELEASE_KEY_PASSWORD
+            storeFile file(keystoreProperties['storeFileCloudVeil'])
+            storePassword keystoreProperties['storePasswordCloudVeil']
+            keyAlias keystoreProperties['keyAliasCloudVeil']
+            keyPassword keystoreProperties['keyPasswordCloudVeil']
         }
 
         release {
-            storeFile file("config/release.keystore")
-            storePassword RELEASE_STORE_PASSWORD
-            keyAlias RELEASE_KEY_ALIAS
-            keyPassword RELEASE_KEY_PASSWORD
+            storeFile file(keystoreProperties['storeFileCloudVeil'])
+            storePassword keystoreProperties['storePasswordCloudVeil']
+            keyAlias keystoreProperties['keyAliasCloudVeil']
+            keyPassword keystoreProperties['keyPasswordCloudVeil']
         }
     }
 
@@ -78,7 +102,7 @@ android {
             jniDebuggable true
             signingConfig signingConfigs.debug
             applicationIdSuffix ".beta"
-            minifyEnabled true
+            minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
 
@@ -86,7 +110,7 @@ android {
             debuggable false
             jniDebuggable false
             signingConfig signingConfigs.release
-            minifyEnabled true
+            minifyEnabled false
             shrinkResources false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
@@ -236,12 +260,13 @@ android {
         minSdkVersion 16
         targetSdkVersion 27
         versionName "4.9.0"
+        multiDexEnabled true
 
 		vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']
 
         externalNativeBuild {
             ndkBuild {
-                arguments "NDK_APPLICATION_MK:=jni/Application.mk", "APP_PLATFORM:=android-16", "-j8"
+                arguments "NDK_APPLICATION_MK:=jni/Application.mk", "APP_PLATFORM:=android-16", "-j8", "LOCAL_SHORT_COMMANDS=true", "APP_SHORT_COMMANDS=true"
                 abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
             }
         }
diff --git a/TMessagesProj/jni/Application.mk b/TMessagesProj/jni/Application.mk
index a5d4a6427..d60a78ee3 100644
--- a/TMessagesProj/jni/Application.mk
+++ b/TMessagesProj/jni/Application.mk
@@ -1,3 +1,4 @@
 APP_PLATFORM := android-14
+APP_ABI := armeabi armeabi-v7a x86
 NDK_TOOLCHAIN_VERSION := 4.9
 APP_STL := gnustl_static
\ No newline at end of file
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index cc2840793..278334b6f 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -302,8 +302,9 @@
                 <action android:name="android.telecom.ConnectionService" />
             </intent-filter>
         </service>
+        <service android:name="org.cloudveil.messenger.service.ChannelCheckingService" />
 
-		<receiver android:name=".MusicPlayerReceiver" >
+        <receiver android:name=".MusicPlayerReceiver" >
             <intent-filter>
                 <action android:name="org.telegram.android.musicplayer.close" />
                 <action android:name="org.telegram.android.musicplayer.pause" />
@@ -376,6 +377,9 @@
         <meta-data android:name="com.samsung.android.icon_container.has_icon_container" android:value="true"/>
         <meta-data android:name="android.max_aspect" android:value="2.5" />
 
+        <meta-data
+            android:name="io.fabric.ApiKey"
+            android:value="4c97095717c496e2a456216afde05cc8bb101711" />
     </application>
 
 </manifest>
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
index 743e74d6b..3a3575a9f 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
@@ -14,17 +14,15 @@
     public static final boolean LOCK_DISABLE_FORWARD_CHAT = false;
     public static final boolean LOCK_DISABLE_BOTS = false;
     public static final boolean LOCK_DISABLE_YOUTUBE_VIDEO = true;
-    private static final boolean DEFAULT_MANAGE_USERS = false;
-
-
-    private static boolean DEFAULT_LOCK_DISABLE_SECRET_CHAT = false;
-    private static int DEFAULT_MIN_SECRET_CHAT_TTL = 0;
     public static final boolean LOCK_DISABLE_IN_APP_BROWSER = true;
     public static final boolean LOCK_DISABLE_AUTOPLAY_GIFS = true;
-    private static final boolean DEFAULT_LOCK_DISABLE_GIFS = true;
     public static final boolean LOCK_DISABLE_GLOBAL_SEARCH = true;
-    private static final boolean DEFAULT_LOCK_DISABLE_STICKERS = false;
 
+    private static final boolean DEFAULT_LOCK_DISABLE_STICKERS = false;
+    private static final boolean DEFAULT_LOCK_DISABLE_GIFS = true;
+    private static boolean DEFAULT_LOCK_DISABLE_SECRET_CHAT = false;
+    private static int DEFAULT_MIN_SECRET_CHAT_TTL = 0;
+    private static final boolean DEFAULT_MANAGE_USERS = false;
     private static final boolean DEFAULT_LOCK_DISABLE_OWN_BIO = true;
     private static final boolean DEFAULT_LOCK_DISABLE_OWN_PHOTO = true;
     private static final boolean DEFAULT_LOCK_DISABLE_OTHERS_BIO = true;
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index dec8d3c67..6cdc9a234 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -17,10 +17,10 @@
 import org.cloudveil.messenger.api.model.response.SettingsResponse;
 import org.cloudveil.messenger.api.service.holder.ServiceClientHolders;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
 
@@ -41,13 +41,14 @@
 public class ChannelCheckingService extends Service {
     private static final String ACTION_CHECK_CHANNELS = "org.cloudveil.messenger.service.check.channels";
     private static final String EXTRA_ADDITION_DIALOG_ID = "extra_dialog_id";
+    private static final String EXTRA_ACCOUNT_NUMBER = "extra_account_number";
     private static final long DEBOUNCE_TIME_MS = 200;
 
     private Disposable subscription;
     Handler handler = new Handler();
     private long additionalDialogId = 0;
     private boolean firstCall = true;
-
+    private int accountNumber = 0;
 
     @Nullable
     @Override
@@ -55,20 +56,21 @@ public IBinder onBind(Intent intent) {
         return null;
     }
 
-    public static void startDataChecking(@NonNull Context context) {
+    public static void startDataChecking(int accountNum, @NonNull Context context) {
         Intent intent = new Intent(ACTION_CHECK_CHANNELS);
+        intent.putExtra(EXTRA_ACCOUNT_NUMBER, accountNum);
         intent.setClass(context, ChannelCheckingService.class);
         context.startService(intent);
     }
 
-    public static void startDataChecking(long dialogId, @NonNull Context context) {
+    public static void startDataChecking(int accountNum, long dialogId, @NonNull Context context) {
         Intent intent = new Intent(ACTION_CHECK_CHANNELS);
         intent.setClass(context, ChannelCheckingService.class);
         intent.putExtra(EXTRA_ADDITION_DIALOG_ID, dialogId);
+        intent.putExtra(EXTRA_ACCOUNT_NUMBER, accountNum);
         context.startService(intent);
     }
 
-
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
         if (intent != null && intent.getAction() != null && intent.getAction().equals(ACTION_CHECK_CHANNELS)) {
@@ -78,6 +80,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {
                 additionalDialogId = additionalId;
             }
 
+            accountNumber = intent.getIntExtra(EXTRA_ACCOUNT_NUMBER, 0);
+
             handler.postDelayed(checkDataRunnable, DEBOUNCE_TIME_MS);
         }
         return super.onStartCommand(intent, flags, startId);
@@ -96,12 +100,12 @@ private void sendDataCheckRequest() {
         addInlineBotsToRequest(request);
         addStickersToRequest(request);
 
-        request.userPhone = UserConfig.getCurrentUser().phone;
-        request.userId = UserConfig.getCurrentUser().id;
-        request.userName = UserConfig.getCurrentUser().username;
+        request.userPhone = UserConfig.getInstance(accountNumber).getCurrentUser().phone;
+        request.userId = UserConfig.getInstance(accountNumber).getCurrentUser().id;
+        request.userName = UserConfig.getInstance(accountNumber).getCurrentUser().username;
 
         if (request.isEmpty()) {
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
+            NotificationCenter.getInstance(accountNumber).postNotificationName(NotificationCenter.filterDialogsReady);
             return;
         }
 
@@ -114,7 +118,7 @@ private void sendDataCheckRequest() {
             return;
         }
 
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
+        NotificationCenter.getInstance(accountNumber).postNotificationName(NotificationCenter.filterDialogsReady);
         subscription = ServiceClientHolders.getSettingsService().loadSettings(request).
                 subscribeOn(Schedulers.io()).
                 observeOn(AndroidSchedulers.mainThread()).
@@ -136,7 +140,7 @@ public void accept(Throwable throwable) throws Exception {
     }
 
     private void addInlineBotsToRequest(SettingsRequest request) {
-        Collection<TLRPC.User> values = MessagesController.getInstance().getUsers().values();
+        Collection<TLRPC.User> values = MessagesController.getInstance(accountNumber).getUsers().values();
         for (TLRPC.User user : values) {
             if (user.bot) {
                 SettingsRequest.Row row = new SettingsRequest.Row();
@@ -150,13 +154,13 @@ private void addInlineBotsToRequest(SettingsRequest request) {
     }
 
     private void addStickersToRequest(SettingsRequest request) {
-        for (int i = 0; i < StickersQuery.getStickersSetTypesCount(); i++) {
-            addStickerSetToRequest(StickersQuery.getStickerSets(i), request);
+        for (int i = 0; i < DataQuery.getInstance(accountNumber).getStickersSetTypesCount(); i++) {
+            addStickerSetToRequest(DataQuery.getInstance(accountNumber).getStickerSets(i), request);
         }
 
-        addStickerSetToRequest(StickersQuery.newStickerSets, request);
+        addStickerSetToRequest(DataQuery.getInstance(accountNumber).newStickerSets, request);
 
-        ArrayList<TLRPC.StickerSetCovered> featuredStickerSets = StickersQuery.getFeaturedStickerSetsUnfiltered();
+        ArrayList<TLRPC.StickerSetCovered> featuredStickerSets = DataQuery.getInstance(accountNumber).getFeaturedStickerSetsUnfiltered();
         for (TLRPC.StickerSetCovered stickerSetCovered : featuredStickerSets) {
             addStickerSetToRequest(stickerSetCovered.set, request);
         }
@@ -178,26 +182,26 @@ private void addStickerSetToRequest(TLRPC.StickerSet stickerSet, SettingsRequest
     }
 
     private void processResponse(@NonNull SettingsResponse settingsResponse) {
-        if(settingsResponse.access == null || !settingsResponse.access.isValid()) {
+        if (settingsResponse.access == null || !settingsResponse.access.isValid()) {
             return;
         }
 
-        ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
+        ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance(accountNumber).allowedDialogs;
         allowedDialogs.clear();
 
         appendAllowedDialogs(allowedDialogs, settingsResponse.access.channels);
         appendAllowedDialogs(allowedDialogs, settingsResponse.access.groups);
         appendAllowedDialogs(allowedDialogs, settingsResponse.access.users);
 
-        if(settingsResponse.access.bots != null) {
-            ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
+        if (settingsResponse.access.bots != null) {
+            ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance(accountNumber).allowedBots;
             allowedBots.clear();
             appendAllowedDialogs(allowedBots, settingsResponse.access.bots);
         }
 
-        if(settingsResponse.access.stickers != null) {
-            StickersQuery.allowedStickerSets.clear();
-            appendAllowedDialogs(StickersQuery.allowedStickerSets, settingsResponse.access.stickers);
+        if (settingsResponse.access.stickers != null) {
+            DataQuery.getInstance(accountNumber).allowedStickerSets.clear();
+            appendAllowedDialogs(DataQuery.getInstance(accountNumber).allowedStickerSets, settingsResponse.access.stickers);
         }
 
         GlobalSecuritySettings.setDisableSecretChat(!settingsResponse.secretChat);
@@ -212,7 +216,7 @@ private void processResponse(@NonNull SettingsResponse settingsResponse) {
         GlobalSecuritySettings.setManageUsers(settingsResponse.manageUsers);
         GlobalSecuritySettings.setBlockedImageUrl(settingsResponse.disableStickersImage);
 
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
+        NotificationCenter.getInstance(accountNumber).postNotificationName(NotificationCenter.filterDialogsReady);
     }
 
     private void appendAllowedDialogs(ConcurrentHashMap<Long, Boolean> allowedDialogs, ArrayList<HashMap<Long, Boolean>> groups) {
@@ -225,7 +229,7 @@ private void appendAllowedDialogs(ConcurrentHashMap<Long, Boolean> allowedDialog
 
     private SettingsResponse loadFromCache() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(this.getClass().getCanonicalName(), Activity.MODE_PRIVATE);
-        String json = preferences.getString("settings", null);
+        String json = preferences.getString("settings." + accountNumber, null);
         if (json == null) {
             return null;
         }
@@ -235,7 +239,7 @@ private SettingsResponse loadFromCache() {
     private void saveToCache(@NonNull SettingsResponse settings) {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(this.getClass().getCanonicalName(), Activity.MODE_PRIVATE);
         String json = new Gson().toJson(settings);
-        preferences.edit().putString("settings", json).apply();
+        preferences.edit().putString("settings." + accountNumber, json).apply();
     }
 
     private void freeSubscription() {
@@ -252,10 +256,10 @@ public void onDestroy() {
     }
 
     private void addDialogsToRequest(@NonNull SettingsRequest request) {
-        addDialogsToRequest(request, MessagesController.getInstance().dialogs);
-        addDialogsToRequest(request, MessagesController.getInstance().dialogsForward);
-        addDialogsToRequest(request, MessagesController.getInstance().dialogsGroupsOnly);
-        addDialogsToRequest(request, MessagesController.getInstance().dialogsServerOnly);
+        addDialogsToRequest(request, MessagesController.getInstance(accountNumber).dialogs);
+        addDialogsToRequest(request, MessagesController.getInstance(accountNumber).dialogsForward);
+        addDialogsToRequest(request, MessagesController.getInstance(accountNumber).dialogsGroupsOnly);
+        addDialogsToRequest(request, MessagesController.getInstance(accountNumber).dialogsServerOnly);
 
         if (additionalDialogId != 0) {
             addDialogToRequest(additionalDialogId, request);
@@ -278,24 +282,24 @@ private void addDialogToRequest(long currentDialogId, @NonNull SettingsRequest r
         TLRPC.User user = null;
         if (lower_id != 0) {
             if (high_id == 1) {
-                chat = MessagesController.getInstance().getChat(lower_id);
+                chat = MessagesController.getInstance(accountNumber).getChat(lower_id);
             } else {
                 if (lower_id < 0) {
-                    chat = MessagesController.getInstance().getChat(-lower_id);
+                    chat = MessagesController.getInstance(accountNumber).getChat(-lower_id);
                     if (chat != null && chat.migrated_to != null) {
-                        TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
+                        TLRPC.Chat chat2 = MessagesController.getInstance(accountNumber).getChat(chat.migrated_to.channel_id);
                         if (chat2 != null) {
                             chat = chat2;
                         }
                     }
                 } else {
-                    user = MessagesController.getInstance().getUser(lower_id);
+                    user = MessagesController.getInstance(accountNumber).getUser(lower_id);
                 }
             }
         } else {
-            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance(accountNumber).getEncryptedChat(high_id);
             if (encryptedChat != null) {
-                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                user = MessagesController.getInstance(accountNumber).getUser(encryptedChat.user_id);
             }
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 90406534e..c41832446 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -21,19 +21,23 @@
 import android.content.res.Configuration;
 import android.os.Handler;
 import android.os.PowerManager;
+import android.support.multidex.MultiDex;
+import android.support.multidex.MultiDexApplication;
 import android.text.TextUtils;
 
+import com.crashlytics.android.Crashlytics;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GooglePlayServicesUtil;
 import com.google.firebase.iid.FirebaseInstanceId;
 
+import io.fabric.sdk.android.Fabric;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.ForegroundDetector;
 
 import java.io.File;
 
-public class ApplicationLoader extends Application {
+public class ApplicationLoader extends MultiDexApplication {
 
     @SuppressLint("StaticFieldLeak")
     public static volatile Context applicationContext;
@@ -46,6 +50,12 @@
     public static volatile boolean mainInterfacePausedStageQueue = true;
     public static volatile long mainInterfacePausedStageQueueTime;
 
+    @Override
+    protected void attachBaseContext(Context base) {
+        super.attachBaseContext(base);
+        MultiDex.install(this);
+    }
+
     public static File getFilesDirFixed() {
         for (int a = 0; a < 10; a++) {
             File path = ApplicationLoader.applicationContext.getFilesDir();
@@ -127,6 +137,7 @@ public static void postInitApplication() {
     @Override
     public void onCreate() {
         super.onCreate();
+        Fabric.with(this, new Crashlytics());
 
         applicationContext = getApplicationContext();
         NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 52ff34169..281450cc3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -18,6 +18,8 @@
     public static boolean LOGS_ENABLED = false;
     public static boolean CHECK_UPDATES = false;
     public static int BUILD_VERSION = 1340;
+    public static String BUILD_VERSION_STRING = "4.9.0";
+    public static int APP_ID = 66408;
     public static String APP_HASH = "2db8d372e3978a884a38ee57d04d4ee1"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
     public static String HOCKEY_APP_HASH = "e683f2bc25474272a9d987ffc3c73763";
     public static String HOCKEY_APP_HASH_DEBUG = "e683f2bc25474272a9d987ffc3c73763";
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java
index cc55fb07b..23a185b82 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/DataQuery.java
@@ -37,6 +37,8 @@
 import android.util.SparseArray;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
+import org.cloudveil.messenger.service.ChannelCheckingService;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
@@ -63,6 +65,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 @SuppressWarnings("unchecked")
 public class DataQuery {
@@ -154,6 +157,11 @@ public DataQuery(int num) {
     private boolean loadingFeaturedStickers;
     private boolean featuredStickersLoaded;
 
+    //CloudVeil start
+    public ConcurrentHashMap<Long, Boolean> allowedStickerSets = new ConcurrentHashMap<>();//Cl
+    public ArrayList<TLRPC.TL_messages_stickerSet> newStickerSets = new ArrayList<>();
+    //CloudVeil end
+
     public void cleanup() {
         for (int a = 0; a < 3; a++) {
             recentStickers[a].clear();
@@ -213,15 +221,97 @@ public void checkFeaturedStickers() {
         }
     }
 
+    //CloudVeil Start
+    public int getStickersSetTypesCount() {
+        return stickerSets.length;
+    }
+
+    public boolean isStickerAllowed(TLRPC.Document doc) {
+        if(doc == null) {
+            return true;
+        }
+        long id = getStickerSetId(doc);
+        if(id < 0) {
+            return true;
+        }
+        return isStickerAllowed(id);
+    }
+
+    public boolean isStickerAllowed(TLRPC.TL_messages_stickerSet stickerSet) {
+        return isStickerAllowed(stickerSet.set.id);
+    }
+
+    public boolean isStickerAllowed(long id) {
+        return !GlobalSecuritySettings.isLockDisableStickers() && allowedStickerSets.containsKey(id) && allowedStickerSets.get(id);
+    }
+
+
     public ArrayList<TLRPC.Document> getRecentStickers(int type) {
-        ArrayList<TLRPC.Document> arrayList = recentStickers[type];
-        return new ArrayList<>(arrayList.subList(0, Math.min(arrayList.size(), 20)));
+        ArrayList<TLRPC.Document> stickers = new ArrayList<>();
+        for (TLRPC.Document doc : recentStickers[type]) {
+            if (isStickerAllowed(doc)) {
+                stickers.add(doc);
+            }
+        }
+        return new ArrayList<>(stickers.subList(0, Math.min(stickers.size(), 20)));
     }
 
     public ArrayList<TLRPC.Document> getRecentStickersNoCopy(int type) {
         return recentStickers[type];
     }
 
+
+    public void loadStickerSetAndSendToServer(TLRPC.InputStickerSet inputStickerSet) {
+        TLRPC.TL_messages_stickerSet stickerSet = null;
+
+        if (inputStickerSet.short_name != null) {
+            stickerSet = getStickerSetByName(inputStickerSet.short_name);
+        }
+        if (stickerSet == null) {
+            stickerSet = getStickerSetById(inputStickerSet.id);
+        }
+        for(TLRPC.TL_messages_stickerSet s : newStickerSets) {
+            if(s.set.id == inputStickerSet.id) {
+                return;
+            }
+        }
+        if (stickerSet == null) {
+            TLRPC.TL_messages_getStickerSet req = new TLRPC.TL_messages_getStickerSet();
+            req.stickerset = inputStickerSet;
+            ConnectionsManager.getInstance(currentAccount).sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    TLRPC.TL_messages_stickerSet stickerSet = (TLRPC.TL_messages_stickerSet) response;
+
+                    for(TLRPC.TL_messages_stickerSet s : newStickerSets) {
+                        if(s.set.id == stickerSet.set.id) {
+                            return;
+                        }
+                    }
+                    newStickerSets.add(stickerSet);
+                    ChannelCheckingService.startDataChecking(currentAccount, ApplicationLoader.applicationContext);
+                }
+            });
+        }
+    }
+
+    public boolean isStickerSetKnown(TLRPC.Document doc) {
+        if(doc == null) {
+            return true;
+        }
+        if(GlobalSecuritySettings.isLockDisableStickers()) {
+            return true;
+        }
+        long id = getStickerSetId(doc);
+        return allowedStickerSets.containsKey(id);
+    }
+
+
+    public boolean isStickerAllowed(TLRPC.InputStickerSet inputStickerSet) {
+        return isStickerAllowed(inputStickerSet.id);
+    }
+    //CloudVeil end
+
     public boolean isStickerInFavorites(TLRPC.Document document) {
         for (int a = 0; a < recentStickers[TYPE_FAVE].size(); a++) {
             TLRPC.Document d = recentStickers[TYPE_FAVE].get(a);
@@ -496,10 +586,22 @@ public boolean canAddStickerToFavorites() {
         }
     }
 
-    public ArrayList<TLRPC.StickerSetCovered> getFeaturedStickerSets() {
+    //CloudVeil start
+    public ArrayList<TLRPC.StickerSetCovered> getFeaturedStickerSetsUnfiltered() {
         return featuredStickerSets;
     }
 
+    public ArrayList<TLRPC.StickerSetCovered> getFeaturedStickerSets() {
+        ArrayList<TLRPC.StickerSetCovered> res = new ArrayList<>();
+        for(TLRPC.StickerSetCovered covered : featuredStickerSets) {
+            if(isStickerAllowed(covered.set.id)) {
+                res.add(covered);
+            }
+        }
+        return res;
+    }
+    //CloudVeil end
+
     public ArrayList<Long> getUnreadStickerSets() {
         return unreadStickerSets;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index a4e684117..73c4e6838 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -538,6 +538,16 @@ private void readSms() {
         }*/
     }
 
+    //CloudVeil start
+    public boolean isAudioTrackPlaying() {
+        if (audioPlayer == null && videoPlayer == null || playingMessageObject == null) {
+            return false;
+        }
+        return !isPaused && !downloadingCurrentMessage;
+    }
+
+    //CloudVeil end
+
     private class InternalObserver extends ContentObserver {
         public InternalObserver() {
             super(null);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 2e36cd583..32b5a8b39 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -24,6 +24,7 @@
 import android.util.SparseIntArray;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.messenger.support.SparseLongArray;
 import org.telegram.messenger.voip.VoIPService;
@@ -321,6 +322,7 @@ public int compare(TLRPC.Update lhs, TLRPC.Update rhs) {
 
     private int currentAccount;
     private static volatile MessagesController[] Instance = new MessagesController[UserConfig.MAX_ACCOUNT_COUNT];
+
     public static MessagesController getInstance(int num) {
         MessagesController localInstance = Instance[num];
         if (localInstance == null) {
@@ -982,7 +984,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
                         oldUser.photo = user.photo;
                         oldUser.flags |= 32;
                     } else {
-                        oldUser.flags = oldUser.flags &~ 32;
+                        oldUser.flags = oldUser.flags & ~32;
                         oldUser.photo = null;
                     }
                 }
@@ -1016,7 +1018,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
                     user.photo = oldUser.photo;
                     user.flags |= 32;
                 } else {
-                    user.flags = user.flags &~ 32;
+                    user.flags = user.flags & ~32;
                     user.photo = null;
                 }
                 users.put(user.id, user);
@@ -1074,7 +1076,7 @@ public void putChat(final TLRPC.Chat chat, boolean fromCache) {
                         oldChat.username = chat.username;
                         oldChat.flags |= 64;
                     } else {
-                        oldChat.flags = oldChat.flags &~ 64;
+                        oldChat.flags = oldChat.flags & ~64;
                         oldChat.username = null;
                     }
                     if (chat.participants_count != 0) {
@@ -1120,7 +1122,7 @@ public void run() {
                     chat.username = oldChat.username;
                     chat.flags |= 64;
                 } else {
-                    chat.flags = chat.flags &~ 64;
+                    chat.flags = chat.flags & ~64;
                     chat.username = null;
                 }
                 if (oldChat.participants_count != 0 && chat.participants_count == 0) {
@@ -9571,7 +9573,7 @@ public void run() {
                                     continue;
                                 }
                                 TelephonyManager tm = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
-                                if (svc != null || VoIPService.callIShouldHavePutIntoIntent!=null || tm.getCallState() != TelephonyManager.CALL_STATE_IDLE) {
+                                if (svc != null || VoIPService.callIShouldHavePutIntoIntent != null || tm.getCallState() != TelephonyManager.CALL_STATE_IDLE) {
                                     if (BuildVars.LOGS_ENABLED) {
                                         FileLog.d("Auto-declining call " + call.id + " because there's already active one");
                                     }
@@ -9600,9 +9602,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                 intent.putExtra("user_id", call.participant_id == UserConfig.getInstance(currentAccount).getClientUserId() ? call.admin_id : call.participant_id);
                                 intent.putExtra("account", currentAccount);
                                 try {
-                                    if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.O){
+                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                         ApplicationLoader.applicationContext.startForegroundService(intent);
-                                    }else{
+                                    } else {
                                         ApplicationLoader.applicationContext.startService(intent);
                                     }
                                 } catch (Throwable e) {
@@ -10359,7 +10361,7 @@ public void openByUserName(String username, final BaseFragment fragment, final i
             if (fragment.getParentActivity() == null) {
                 return;
             }
-            final AlertDialog progressDialog[] = new AlertDialog[] {new AlertDialog(fragment.getParentActivity(), 1)};
+            final AlertDialog progressDialog[] = new AlertDialog[]{new AlertDialog(fragment.getParentActivity(), 1)};
 
             TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
             req.username = username;
@@ -10427,16 +10429,16 @@ public void onClick(DialogInterface dialog, int which) {
 
     //CLoudVeil start
     public boolean isUserAllowed(TLRPC.User user) {
-        if(user == null) {
+        if (user == null) {
             return true;
-}
+        }
         if (user.bot) {
             if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
                 return false;
             }
             long id = (long) user.id;
             return !allowedBots.containsKey(id) || allowedBots.get(id);
-        } else if(GlobalSecuritySettings.getManageUsers()) {
+        } else if (GlobalSecuritySettings.getManageUsers()) {
             long id = (long) user.id;
             return !allowedDialogs.containsKey(id) || allowedDialogs.get(id);
         }
@@ -10451,24 +10453,24 @@ public boolean isDialogIdAllowed(long currentDialogId) {
         TLRPC.EncryptedChat encryptedChat = null;
         if (lower_id != 0) {
             if (high_id == 1) {
-                chat = MessagesController.getInstance().getChat(lower_id);
+                chat = getChat(lower_id);
             } else {
                 if (lower_id < 0) {
-                    chat = MessagesController.getInstance().getChat(-lower_id);
+                    chat = getChat(-lower_id);
                     if (chat != null && chat.migrated_to != null) {
-                        TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
+                        TLRPC.Chat chat2 = getChat(chat.migrated_to.channel_id);
                         if (chat2 != null) {
                             chat = chat2;
                         }
                     }
                 } else {
-                    user = MessagesController.getInstance().getUser(lower_id);
+                    user = getUser(lower_id);
                 }
             }
         } else {
-            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            encryptedChat = getEncryptedChat(high_id);
             if (encryptedChat != null) {
-                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                user = getUser(encryptedChat.user_id);
             }
         }
 
@@ -10490,24 +10492,24 @@ public boolean isDialogCheckedOnServer(long currentDialogId) {
         TLRPC.EncryptedChat encryptedChat = null;
         if (lower_id != 0) {
             if (high_id == 1) {
-                chat = MessagesController.getInstance().getChat(lower_id);
+                chat = getChat(lower_id);
             } else {
                 if (lower_id < 0) {
-                    chat = MessagesController.getInstance().getChat(-lower_id);
+                    chat = getChat(-lower_id);
                     if (chat != null && chat.migrated_to != null) {
-                        TLRPC.Chat chat2 = MessagesController.getInstance().getChat(chat.migrated_to.channel_id);
+                        TLRPC.Chat chat2 = getChat(chat.migrated_to.channel_id);
                         if (chat2 != null) {
                             chat = chat2;
                         }
                     }
                 } else {
-                    user = MessagesController.getInstance().getUser(lower_id);
+                    user = getUser(lower_id);
                 }
             }
         } else {
-            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            encryptedChat = getEncryptedChat(high_id);
             if (encryptedChat != null) {
-                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                user = getUser(encryptedChat.user_id);
             }
         }
 
@@ -10517,7 +10519,7 @@ public boolean isDialogCheckedOnServer(long currentDialogId) {
             if (user.bot) {
                 long id = (long) user.id;
                 return allowedBots.containsKey(id);
-            } else if(GlobalSecuritySettings.getManageUsers()) {
+            } else if (GlobalSecuritySettings.getManageUsers()) {
                 return allowedDialogs.containsKey(currentDialogId);
             }
             return true;
@@ -10532,8 +10534,9 @@ public boolean isDialogCheckedOnServer(long currentDialogId) {
 
 
     public boolean isMessageAllowed(MessageObject messageObject) {
-        if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.document != null && !StickersQuery.isStickerAllowed(messageObject.messageOwner.media.document)) {
-            if(TextUtils.isEmpty(GlobalSecuritySettings.getBlockedImageUrl())) {
+        if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.document != null
+                && !DataQuery.getInstance(currentAccount).isStickerAllowed(messageObject.messageOwner.media.document)) {
+            if (TextUtils.isEmpty(GlobalSecuritySettings.getBlockedImageUrl())) {
                 return false;
             }
         }
@@ -10542,7 +10545,7 @@ public boolean isMessageAllowed(MessageObject messageObject) {
             return true;
         }
 
-        TLRPC.User botUser = MessagesController.getInstance().getUser(messageObject.messageOwner.via_bot_id);
+        TLRPC.User botUser = getUser(messageObject.messageOwner.via_bot_id);
         if (botUser != null && botUser.username != null && botUser.username.length() > 0) {
             return isUserAllowed(botUser);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
index e4a3b5351..2df60c984 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
@@ -146,6 +146,10 @@
     public static final int playerDidStartPlaying = totalEvents++;
     public static final int closeSearchByActiveAction = totalEvents++;
 
+    //CloudVeil start
+    public static final int filterDialogsReady = totalEvents++;
+    //CloudVeil end
+
     private SparseArray<ArrayList<Object>> observers = new SparseArray<>();
     private SparseArray<ArrayList<Object>> removeAfterBroadcast = new SparseArray<>();
     private SparseArray<ArrayList<Object>> addAfterBroadcast = new SparseArray<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index 68436cb98..e8a48d46a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -656,7 +656,7 @@ public void run() {
                             popupArrayAdd.add(0, messageObject);
                         }
                         //CloudVeil start
-                        if(MessagesController.getInstance().isDialogIdAllowed(dialog_id)) {
+                        if(MessagesController.getInstance(currentAccount).isDialogIdAllowed(dialog_id)) {
                             delayedPushMessages.add(messageObject);
                             pushMessages.add(0, messageObject);
                         if (mid != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
index 408c8d58f..8bf48c6e1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
@@ -9,6 +9,7 @@
 package org.telegram.messenger;
 
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -1888,13 +1889,14 @@ public void run() {
                             sendCallback(false, messageObject, button, parentFragment);
                         } else if (response != null) {
                             if (button instanceof TLRPC.TL_keyboardButtonBuy) {
-                                if (response instanceof TLRPC.TL_payments_paymentForm) {
-                                    final TLRPC.TL_payments_paymentForm form = (TLRPC.TL_payments_paymentForm) response;
-                                    MessagesController.getInstance(currentAccount).putUsers(form.users, false);
-                                    parentFragment.presentFragment(new PaymentFormActivity(form, messageObject));
-                                } else if (response instanceof TLRPC.TL_payments_paymentReceipt) {
-                                    parentFragment.presentFragment(new PaymentFormActivity(messageObject, (TLRPC.TL_payments_paymentReceipt) response));
-                                }
+                                //CloudVeil start
+                                AlertDialog.Builder builder = new AlertDialog.Builder(parentFragment.getParentActivity());
+                                builder.setTitle(parentFragment.getParentActivity().getString(R.string.warning))
+                                        .setMessage(parentFragment.getParentActivity().getString(R.string.cloudveil_disabled_for_protection))
+                                        .setPositiveButton(parentFragment.getParentActivity().getString(R.string.OK), new DialogInterface.OnClickListener() {
+                                            public void onClick(DialogInterface dialog, int which) {
+                                                dialog.dismiss();
+                                            }
                                         });
 
                                 parentFragment.showDialog(builder.create(), new DialogInterface.OnDismissListener() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
index 764629442..f0b74b70a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
@@ -23,6 +23,7 @@
 import android.provider.MediaStore;
 import android.util.Base64;
 
+import org.cloudveil.messenger.util.CameraUtil;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.Bitmaps;
@@ -156,9 +157,9 @@ public int compare(Size o1, Size o2) {
                                 if (ApplicationLoader.mainInterfacePaused && ApplicationLoader.externalInterfacePaused) {
                                     throw new RuntimeException("app paused");
                                 }
-                            //CloudVeil start
-                            CameraUtil.guardCameraEnabled(ApplicationLoader.applicationContext);
-                            //CloudVeil end
+                                //CloudVeil start
+                                CameraUtil.guardCameraEnabled(ApplicationLoader.applicationContext);
+                                //CloudVeil end
                                 Camera camera = Camera.open(cameraInfo.getCameraId());
                                 Camera.Parameters params = camera.getParameters();
 
@@ -261,31 +262,31 @@ public boolean isCameraInitied() {
     public void close(final CameraSession session, final CountDownLatch countDownLatch, final Runnable beforeDestroyRunnable) {
         session.destroy();
         threadPool.execute(new Runnable() {
-                               @Override
-                               public void run() {
-                                   if (beforeDestroyRunnable != null) {
-                                       beforeDestroyRunnable.run();
-                                   }
-                                   if (session.cameraInfo.camera == null) {
-                                       return;
-                                   }
-                                   try {
-                                       session.cameraInfo.camera.stopPreview();
-                                       session.cameraInfo.camera.setPreviewCallbackWithBuffer(null);
-                                   } catch (Exception e) {
-                                       FileLog.e(e);
-                                   }
-                                   try {
-                                       session.cameraInfo.camera.release();
-                                   } catch (Exception e) {
-                                       FileLog.e(e);
-                                   }
-                                   session.cameraInfo.camera = null;
-                                   if (countDownLatch != null) {
-                                       countDownLatch.countDown();
-                                   }
-                               }
-                           });
+            @Override
+            public void run() {
+                if (beforeDestroyRunnable != null) {
+                    beforeDestroyRunnable.run();
+                }
+                if (session.cameraInfo.camera == null) {
+                    return;
+                }
+                try {
+                    session.cameraInfo.camera.stopPreview();
+                    session.cameraInfo.camera.setPreviewCallbackWithBuffer(null);
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+                try {
+                    session.cameraInfo.camera.release();
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+                session.cameraInfo.camera = null;
+                if (countDownLatch != null) {
+                    countDownLatch.countDown();
+                }
+            }
+        });
         if (countDownLatch != null) {
             try {
                 countDownLatch.await();
@@ -509,7 +510,7 @@ public void stopPreview(final CameraSession session) {
             public void run() {
                 Camera camera = session.cameraInfo.camera;
                 try {
-    				//CloudVeil start
+                    //CloudVeil start
                     CameraUtil.guardCameraEnabled(ApplicationLoader.applicationContext);
                     //CloudVeil end
                     if (camera == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index 87d6040f5..86526a210 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -99,17 +99,17 @@ public boolean isDataSetChanged() {
         //CloudVeil start
         ArrayList<TLRPC.TL_dialog> dialogs = null;
         if (dialogsType == 0) {
-            return MessagesController.getInstance(currentAccount).dialogs;
+            dialogs = MessagesController.getInstance(currentAccount).dialogs;
         } else if (dialogsType == 1) {
-            return MessagesController.getInstance(currentAccount).dialogsServerOnly;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsServerOnly;
         } else if (dialogsType == 2) {
-            return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
         } else if (dialogsType == 3) {
-            return MessagesController.getInstance(currentAccount).dialogsForward;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsForward;
+        } else {
+            return null;
         }
-        return null;
-    }
-        dialogs = MessagesController.getInstance().filterDialogs(dialogs);
+        dialogs = MessagesController.getInstance(currentAccount).filterDialogs(dialogs);
         //CloudVeil end
         return dialogs;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
index eca394cc5..fdd937879 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
@@ -58,7 +58,9 @@
 
     public interface MentionsAdapterDelegate {
         void needChangePanelVisibility(boolean show);
+
         void onContextSearch(boolean searching);
+
         void onContextClick(TLRPC.BotInlineResult result);
     }
 
@@ -298,7 +300,7 @@ public void onDismiss(DialogInterface dialog) {
         }
 
         //CloudVeil start
-        if(!MessagesController.getInstance().isUserAllowed(foundContextBot)) {
+        if (!MessagesController.getInstance(currentAccount).isUserAllowed(foundContextBot)) {
             foundContextBot = null;
         }
         //CloudVeil end
@@ -317,8 +319,9 @@ private void searchForContextBot(final String username, final String query) {
         if (foundContextBot != null && foundContextBot.username != null && foundContextBot.username.equals(username) && searchingContextQuery != null && searchingContextQuery.equals(query)) {
             return;
         }
+
         //CloudVeil start
-        if(!MessagesController.getInstance().isUserAllowed(foundContextBot)) {
+        if (!MessagesController.getInstance(currentAccount).isUserAllowed(foundContextBot)) {
             foundContextBot = null;
         }
         //CloudVeil end
@@ -720,7 +723,7 @@ public void searchUsernameOrHashtag(String text, int position, ArrayList<Message
                 for (int a = 0; a < inlineBots.size(); a++) {
                     TLRPC.User user = messagesController.getUser(inlineBots.get(a).peer.user_id);
                     //CloudVeil start
-                    if(!MessagesController.getInstance().isUserAllowed(user)) {
+                    if (!MessagesController.getInstance(currentAccount).isUserAllowed(user)) {
                         continue;
                     }
                     //CloudVeil end
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java
index 1d4211064..df640d73f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapterHelper.java
@@ -8,9 +8,9 @@
 
 package org.telegram.ui.Adapters;
 
-import org.cloudveil.messenger.GlobalSecuritySettings;
 import android.util.SparseArray;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLitePreparedStatement;
 import org.telegram.messenger.AndroidUtilities;
@@ -39,6 +39,7 @@
 
     public interface SearchAdapterHelperDelegate {
         void onDataSetChanged();
+
         void onSetHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, HashtagObject> hashMap);
     }
 
@@ -196,16 +197,8 @@ public void run() {
                                         SparseArray<TLRPC.Chat> chatsMap = new SparseArray<>();
                                         SparseArray<TLRPC.User> usersMap = new SparseArray<>();
                                         for (int a = 0; a < res.chats.size(); a++) {
- //CloudVeil Start
-                                                if (!GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
                                             TLRPC.Chat chat = res.chats.get(a);
                                             chatsMap.put(chat.id, chat);
-
-                                               
-                                        }
-                                }
-                                                //CloudVeil End
-                                        }
                                         }
                                         for (int a = 0; a < res.users.size(); a++) {
                                             TLRPC.User user = res.users.get(a);
@@ -236,18 +229,23 @@ public void run() {
                                                     if (!allowChats) {
                                                         continue;
                                                     }
-                                                    globalSearch.add(chat);
+                                                    //globalSearch.add(chat);
+                                                    //CloudVeil Start
+                                                    if (!GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
+                                                        globalSearch.add(chat);
+                                                    }
+                                                    //CloudVeil End
                                                     globalSearchMap.put(-chat.id, chat);
                                                 } else if (user != null) {
                                                     if (!allowBots && user.bot || !allowSelf && user.self) {
                                                         continue;
                                                     }
-                                                      //CloudVeil Start
-                                            if (!GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
-                                                    globalSearch.add(user);
-                                            }
-                                lastFoundUsername = query;
-                                            //CloudVeil End
+                                                    //globalSearch.add(user);
+                                                    //CloudVeil Start
+                                                    if (!GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
+                                                        globalSearch.add(user);
+                                                    }
+                                                    //CloudVeil End
                                                     globalSearchMap.put(user.id, user);
                                                 }
                                             }
@@ -497,4 +495,4 @@ public void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, Hash
         hashtagsLoadedFromDb = true;
         delegate.onSetHashtags(arrayList, hashMap);
     }
-}
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 9d647ccee..4d13598ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -45,6 +45,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.DownloadController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.ImageLoader;
@@ -78,6 +79,7 @@
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanMono;
 import org.telegram.ui.Components.URLSpanNoUnderline;
+import org.telegram.ui.Components.WebPlayerView;
 import org.telegram.ui.PhotoViewer;
 import org.telegram.ui.SecretMediaViewer;
 
@@ -878,6 +880,7 @@ private boolean checkLinkPreviewMotionEvent(MotionEvent event) {
         return false;
     }
 
+
     private boolean checkInstantButtonMotionEvent(MotionEvent event) {
         if (!drawInstantView || currentMessageObject.type == 0) {
             return false;
@@ -3286,15 +3289,15 @@ public void setMessageObject(MessageObject messageObject, MessageObject.GroupedM
                     currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
 
                     //CloudVeil start
-                    if ((!StickersQuery.isStickerAllowed(messageObject.messageOwner.media.document)) && !TextUtils.isEmpty(GlobalSecuritySettings.getBlockedImageUrl())) {
+                    if ((!DataQuery.getInstance(currentAccount).isStickerAllowed(messageObject.messageOwner.media.document)) && !TextUtils.isEmpty(GlobalSecuritySettings.getBlockedImageUrl())) {
                         photoImage.setImage(null, GlobalSecuritySettings.getBlockedImageUrl(),
                                 String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
                                 null,
                                 null,
                                 null,
                                 0, "png", 1);
-                        if (!StickersQuery.isStickerSetKnown(messageObject.messageOwner.media.document)) {
-                            StickersQuery.loadStickerSetAndSendToServer(messageObject.getInputStickerSet());
+                        if (!DataQuery.getInstance(currentAccount).isStickerSetKnown(messageObject.messageOwner.media.document)) {
+                            DataQuery.getInstance(currentAccount).loadStickerSetAndSendToServer(messageObject.getInputStickerSet());
                         }
                     } else {
                     if (messageObject.attachPathExists) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index b9f14c915..ffe3209ec 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -898,17 +898,17 @@ public void setDialogSelected(boolean value) {
         //CloudVeil start
         ArrayList<TLRPC.TL_dialog> dialogs = null;
         if (dialogsType == 0) {
-            return MessagesController.getInstance(currentAccount).dialogs;
+            dialogs = MessagesController.getInstance(currentAccount).dialogs;
         } else if (dialogsType == 1) {
-            return MessagesController.getInstance(currentAccount).dialogsServerOnly;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsServerOnly;
         } else if (dialogsType == 2) {
-            return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
         } else if (dialogsType == 3) {
-            return MessagesController.getInstance(currentAccount).dialogsForward;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsForward;
+        } else {
+            return null;
         }
-        return null;
-    }
-        dialogs = MessagesController.getInstance().filterDialogs(dialogs);
+        dialogs = MessagesController.getInstance(currentAccount).filterDialogs(dialogs);
         //CloudVeil end
         return dialogs;
     }
@@ -1076,7 +1076,7 @@ public void update(int mask) {
 
             //CloudVeil start
             boolean allowPhoto =  !GlobalSecuritySettings.getLockDisableOthersPhoto();
-            if(user != null && user.id == UserConfig.getCurrentUser().id) {
+            if(user != null && user.id == UserConfig.getInstance(currentAccount).getCurrentUser().id) {
                 allowPhoto = !GlobalSecuritySettings.getLockDisableOwnPhoto();
             }
             if(!allowPhoto) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
index 5fff2120f..f9897db06 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
@@ -17,6 +17,7 @@
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.Emoji;
@@ -66,7 +67,7 @@ public void setRecent(boolean value) {
 
     public void setSticker(TLRPC.Document document, boolean showEmoji) {
         //CloudVeil start
-        if (!GlobalSecuritySettings.isLockDisableStickers() && StickersQuery.isStickerAllowed(document)) {
+        if (!GlobalSecuritySettings.isLockDisableStickers() && DataQuery.getInstance(currentAccount).isStickerAllowed(document)) {
         if (document != null) {
             sticker = document;
             if (document.thumb != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 4a79cebbd..dd0bdbe23 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -80,6 +80,7 @@
 
 import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.cloudveil.messenger.service.ChannelCheckingService;
+import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.BuildVars;
@@ -440,6 +441,12 @@
 
         @Override
         public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+            //CloudVeil start
+            if (GlobalSecuritySettings.getLockDisableOthersPhoto()) {
+                return null;
+            }
+            //CloudVeil end
+
             int count = chatListView.getChildCount();
 
             for (int a = 0; a < count; a++) {
@@ -751,9 +758,6 @@ public void run() {
         if (currentUser != null) {
             MediaController.getInstance().startMediaObserver();
         }
-        //CloudVeil start
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.filterDialogsReady);
-        //CloudVeil end
 
         NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.messagesDidLoaded);
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
@@ -800,6 +804,10 @@ public void run() {
         NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.channelRightsUpdated);
         NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.updateMentionsCount);
 
+        //CloudVeil start
+        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.filterDialogsReady);
+        //CloudVeil end
+
         super.onFragmentCreate();
 
         if (currentEncryptedChat == null && !isBroadcast) {
@@ -935,8 +943,9 @@ public void onFragmentDestroy() {
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
         NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.channelRightsUpdated);
         NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.updateMentionsCount);
+
         //CloudVeil start
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
+        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.filterDialogsReady);
         //CloudVeil end
 
         if (AndroidUtilities.isTablet()) {
@@ -1065,10 +1074,9 @@ public void onItemClick(final int id) {
                     if (getParentActivity() == null) {
                         return;
                     }
-                    // createDeleteMessagesAlert(null, null);
                     //CloudVeil Start
                     if (!GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
-                    createDeleteMessagesAlert(null, null);
+                        createDeleteMessagesAlert(null, null);
                     }
                     //CloudVeil End
                 } else if (id == forward) {
@@ -1480,9 +1488,6 @@ public boolean onTouch(View v, MotionEvent event) {
         actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
         actionMode.getItem(star).setVisibility(selectedMessagesCanStarIds[0].size() + selectedMessagesCanStarIds[1].size() != 0 ? View.VISIBLE : View.GONE);
         actionMode.getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
-        if (GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
-            actionMode.getItem(delete).setVisibility(View.GONE);
-        }
         checkActionBarMenu();
 
         fragmentView = new SizeNotifierFrameLayout(context) {
@@ -1807,8 +1812,9 @@ public boolean onTouch(View v, MotionEvent event) {
                 } else {
                     emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
                 }
+
                 //CloudVeil start
-                if (!MessagesController.getInstance().isDialogCheckedOnServer(dialog_id)) {
+                if (!MessagesController.getInstance(currentAccount).isDialogCheckedOnServer(dialog_id)) {
                     emptyView.setText(LocaleController.getString("cloudveil_hidden_for_protection", R.string.cloudveil_hidden_for_protection));
                 }
                 //CloudVeil end
@@ -4145,8 +4151,8 @@ public void run() {
                     int oldTtl = currentEncryptedChat.ttl;
                     currentEncryptedChat.ttl = Math.max(currentEncryptedChat.ttl, GlobalSecuritySettings.getMinSecretChatTtl());
                     if (oldTtl != currentEncryptedChat.ttl) {
-                        SecretChatHelper.getInstance().sendTTLMessage(currentEncryptedChat, null);
-                        MessagesStorage.getInstance().updateEncryptedChatTTL(currentEncryptedChat);
+                        SecretChatHelper.getInstance(currentAccount).sendTTLMessage(currentEncryptedChat, null);
+                        MessagesStorage.getInstance(currentAccount).updateEncryptedChatTTL(currentEncryptedChat);
                     }
                 }
             }, 1000);
@@ -4775,6 +4781,7 @@ private void showGifHint() {
             return;
         }
         //CloudVeil End
+
         preferences.edit().putBoolean("gifhint", true).commit();
 
         if (getParentActivity() == null || fragmentView == null || gifHintTextView != null) {
@@ -5378,7 +5385,7 @@ private void checkBotKeyboard() {
             chatActivityEnterView.setButtons(botButtons);
         }
     }
-    
+
     public void hideFieldPanel() {
         showFieldPanel(false, null, null, null, null, false);
     }
@@ -6681,9 +6688,6 @@ private void addToSelectedMessages(MessageObject messageObject, boolean outside,
                 int newCopyVisible = copyItem.getVisibility();
                 int newStarVisible = starItem.getVisibility();
                 actionBar.createActionMode().getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
-				if (GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
-                    actionBar.createActionMode().getItem(delete).setVisibility(View.GONE);
-                }
                 if (editItem != null) {
                     editItem.setVisibility(canEditMessagesCount == 1 && selectedMessagesIds[0].size() + selectedMessagesIds[1].size() == 1 ? View.VISIBLE : View.GONE);
                 }
@@ -7065,7 +7069,7 @@ public boolean processSendingText(String text) {
     public void didReceivedNotification(int id, int account, final Object... args) {
         //CloudVeil start
         if (id == NotificationCenter.filterDialogsReady) {
-            MessagesController messagesController = MessagesController.getInstance();
+            MessagesController messagesController = MessagesController.getInstance(currentAccount);
             boolean isDialogAllowed = messagesController.isDialogIdAllowed(dialog_id);
             if (messagesController.isDialogCheckedOnServer(dialog_id) && isDialogAllowed) {
                 chatAdapter.notifyDataSetChanged();
@@ -9276,19 +9280,53 @@ public void run() {
                 }
             }
         }
-  
- //CloudVeil start
-        if (MessagesController.getInstance().isDialogCheckedOnServer(dialog_id)) {
-            messages = MessagesController.getInstance().filterMessages(messages);
+
+
+
+        //CloudVeil start
+        if (MessagesController.getInstance(currentAccount).isDialogCheckedOnServer(dialog_id)) {
+            messages = MessagesController.getInstance(currentAccount).filterMessages(messages);
         } else {
-            ChannelCheckingService.startDataChecking(dialog_id, getParentActivity());
-    }
+            ChannelCheckingService.startDataChecking(currentAccount, dialog_id, getParentActivity());
+        }
         if(chatAdapter != null) {
             chatAdapter.notifyDataSetChanged();
         }
         //CloudVeil end
     }
 
+    //CloudVeil start
+    private void showWarning(Context context) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(context.getString(R.string.warning))
+                .setMessage(context.getString(R.string.cloudveil_message_dialog_forbidden))
+                .setPositiveButton(context.getString(R.string.OK), new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.dismiss();
+                        finishFragment();
+                    }
+                })
+                .setOnDismissListener(new DialogInterface.OnDismissListener() {
+                    @Override
+                    public void onDismiss(DialogInterface dialog) {
+                        finishFragment();
+                    }
+                })
+                .setOnBackButtonListener(new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        finishFragment();
+                    }
+                });
+        showDialog(builder.create(), new DialogInterface.OnDismissListener() {
+            @Override
+            public void onDismiss(DialogInterface dialog) {
+                finishFragment();
+            }
+        });
+    }
+    //CloudVeil end
+
     private void checkSecretMessageForLocation(MessageObject messageObject) {
         if (messageObject.type != 4 || locationAlertShown || SharedConfig.isSecretMapPreviewSet()) {
             return;
@@ -10033,7 +10071,7 @@ public void onResume() {
         super.onResume();
 
         //CloudVeil start
-        if (!MessagesController.getInstance().isDialogIdAllowed(dialog_id)) {
+        if (!MessagesController.getInstance(currentAccount).isDialogIdAllowed(dialog_id)) {
             showWarning(getParentActivity());
         }
         //CloudVeil end
@@ -11099,6 +11137,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             item.setVisibility(View.GONE);
         }
         //CloudVeil End
+
         actionBar.showActionMode();
         updatePinnedMessageView(true);
 
@@ -11140,7 +11179,7 @@ private void startEditingMessageObject(MessageObject messageObject) {
         checkEditTimer();
 
         chatActivityEnterView.setAllowStickersAndGifs(false, false);
-        
+
         updatePinnedMessageView(true);
         updateVisibleRows();
 
@@ -11247,7 +11286,13 @@ private void processSelectedOption(int option) {
                     selectedObjectGroup = null;
                     return;
                 }
-                createDeleteMessagesAlert(selectedObject, selectedObjectGroup);
+
+                //CloudVeil Start
+                if (!GlobalSecuritySettings.LOCK_DISABLE_DELETE_CHAT) {
+                    createDeleteMessagesAlert(selectedObject, selectedObjectGroup);
+                }
+                //CloudVeil End
+
                 break;
             }
             case 2: {
@@ -11499,12 +11544,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 /*if (!TextUtils.isEmpty(selectedObject.messageOwner.media.vcard)) {
                     openVCard(selectedObject.messageOwner.media.vcard, selectedObject.messageOwner.media.first_name, selectedObject.messageOwner.media.last_name);
                 } else {*/
-                    Bundle args = new Bundle();
-                    args.putInt("user_id", selectedObject.messageOwner.media.user_id);
-                    args.putString("phone", selectedObject.messageOwner.media.phone_number);
-                    args.putBoolean("addContact", true);
-                    presentFragment(new ContactAddActivity(args));
-                    break;
+                Bundle args = new Bundle();
+                args.putInt("user_id", selectedObject.messageOwner.media.user_id);
+                args.putString("phone", selectedObject.messageOwner.media.phone_number);
+                args.putBoolean("addContact", true);
+                presentFragment(new ContactAddActivity(args));
+                break;
                 //}
             }
             case 16: {
@@ -12086,10 +12131,6 @@ public void updateRows() {
 
         @Override
         public int getItemCount() {
-            if(!MessagesController.getInstance().isDialogCheckedOnServer(dialog_id) ||
-                    !MessagesController.getInstance().isDialogIdAllowed(dialog_id)) {
-                return 0;
-            }
             return rowCount;
         }
 
@@ -12347,11 +12388,11 @@ public void didPressedImage(ChatMessageCell cell) {
                             SecretMediaViewer.getInstance().setParentActivity(getParentActivity());
                             SecretMediaViewer.getInstance().openMedia(message, photoViewerProvider);
                         } else if (message.type == 13) {
-							//cloudveil start
-                            if(StickersQuery.isStickerAllowed(message.getInputStickerSet())) {
-                            showDialog(new StickersAlert(getParentActivity(), ChatActivity.this, message.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE && ChatObject.canSendStickers(currentChat) ? chatActivityEnterView : null));
+                            //cloudveil start
+                            if(DataQuery.getInstance(currentAccount).isStickerAllowed(message.getInputStickerSet())) {
+                                showDialog(new StickersAlert(getParentActivity(), ChatActivity.this, message.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE && ChatObject.canSendStickers(currentChat) ? chatActivityEnterView : null));
                             }
-                            //cloudveil end                         
+                            //cloudveil end
                         } else if (message.isVideo() || message.type == 1 || message.type == 0 && !message.isWebpageDocument() || message.isGif()) {
                             if (message.isVideo()) {
                                 sendSecretMessageRead(message);
@@ -13341,4 +13382,4 @@ public void didSetColor() {
                 new ThemeDescription(null, 0, null, null, null, attachAlertDelegate, Theme.key_dialogCameraIcon),
         };
     }
-}
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
index b79bbe905..b49879482 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
@@ -21,6 +21,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 9fb15f6be..2091e5cc2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -60,9 +60,9 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
-import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.LocaleController;
@@ -1630,7 +1630,8 @@ public void setAllowStickersAndGifs(boolean value, boolean value2) {
             sizeNotifierLayout.removeView(emojiView);
             emojiView = null;
         }
-        allowStickers = value;
+
+        //CloudVeil start
         if (!GlobalSecuritySettings.isLockDisableStickers()) {
             allowStickers = value;
         } else {
@@ -1638,10 +1639,12 @@ public void setAllowStickersAndGifs(boolean value, boolean value2) {
         }
 
         if (!GlobalSecuritySettings.isLockDisableGifs()) {
-        allowGifs = value2;
+            allowGifs = value2;
         } else {
             allowGifs = false;
         }
+        //CloudVeil end
+
         setEmojiButtonImage();
     }
 
@@ -2020,11 +2023,13 @@ public void checkRoundVideo() {
         if (!SharedConfig.inappCamera) {
             hasRecordVideo = false;
         }
-     //CloudVeil start
+
+        //CloudVeil start
         if(GlobalSecuritySettings.getDisabledVideoInlineRecording()) {
             hasRecordVideo = false;
         }
         //CloudVeil end
+
         if (hasRecordVideo) {
             if (SharedConfig.hasCameraCache) {
                 CameraController.getInstance().initCamera(null);
@@ -2904,7 +2909,7 @@ public void setFieldFocused(boolean focus) {
             return;
         }
         if (focus) {
-             if (!searchingStickers && !messageEditText.isFocused()) {
+            if (!searchingStickers && !messageEditText.isFocused()) {
                 messageEditText.postDelayed(new Runnable() {
                     @Override
                     public void run() {
@@ -3160,6 +3165,13 @@ private void createEmojiView() {
             return;
         }
         emojiView = new EmojiView(allowStickers, allowGifs, parentActivity, info);
+        //CloudVeil start
+        if (!GlobalSecuritySettings.isLockDisableStickers()) {
+            emojiView = new EmojiView(allowStickers, allowGifs, parentActivity,info);
+        } else {
+            emojiView = new EmojiView(false, false, parentActivity,info);
+        }
+        //CloudVeil end
         emojiView.setVisibility(GONE);
         emojiView.setListener(new EmojiView.Listener() {
 
@@ -3274,13 +3286,17 @@ public void onShowStickerSet(TLRPC.StickerSet stickerSet, TLRPC.InputStickerSet
                 if (parentFragment == null || parentActivity == null) {
                     return;
                 }
+
+                //CloudVeil start
                 if (!GlobalSecuritySettings.isLockDisableStickers()) {
-                if (stickerSet != null) {
-                    inputStickerSet = new TLRPC.TL_inputStickerSetID();
-                    inputStickerSet.access_hash = stickerSet.access_hash;
-                    inputStickerSet.id = stickerSet.id;
-                }
+                    if (stickerSet != null) {
+                        inputStickerSet = new TLRPC.TL_inputStickerSetID();
+                        inputStickerSet.access_hash = stickerSet.access_hash;
+                        inputStickerSet.id = stickerSet.id;
+                    }
                 }
+                //CloudVeil end
+
                 parentFragment.showDialog(new StickersAlert(parentActivity, parentFragment, inputStickerSet, null, ChatActivityEnterView.this));
             }
 
@@ -3394,10 +3410,6 @@ private boolean allowDragging() {
 
     @Override
     public void onStickerSelected(TLRPC.Document sticker) {
- if (!GlobalSecuritySettings.isLockDisableStickers()) {
-            SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
-        }
-
         if (searchingStickers) {
             searchingStickers = false;
             emojiView.closeSearch(true);
@@ -3405,7 +3417,6 @@ public void onStickerSelected(TLRPC.Document sticker) {
         }
         setStickersExpanded(false, true);
         SendMessagesHelper.getInstance(currentAccount).sendSticker(sticker, dialog_id, replyingMessageObject);
-        }
         if (delegate != null) {
             delegate.onMessageSend(null);
         }
@@ -3413,10 +3424,8 @@ public void onStickerSelected(TLRPC.Document sticker) {
 
     public void addStickerToRecent(TLRPC.Document sticker) {
         createEmojiView();
-        if (!GlobalSecuritySettings.isLockDisableStickers()) {
         emojiView.addRecentSticker(sticker);
     }
-    }
 
     private void showPopup(int show, int contentType) {
         if (show == 1) {
@@ -3513,9 +3522,7 @@ private void setEmojiButtonImage() {
         if (currentPage == 0 || !allowStickers && !allowGifs) {
             emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
         } else if (currentPage == 1) {
-            if (!GlobalSecuritySettings.isLockDisableStickers()) {
             emojiButton.setImageResource(R.drawable.ic_msg_panel_stickers);
-            }
         } else if (currentPage == 2) {
             emojiButton.setImageResource(R.drawable.ic_msg_panel_gif);
         }
@@ -4002,4 +4009,4 @@ public int getOpacity() {
             return PixelFormat.TRANSPARENT;
         }
     }
-}
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
index 16b4e06ea..9524cd7a8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
@@ -18,6 +18,7 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.FileLog;
@@ -351,8 +352,8 @@ public void setChatAvatar(TLRPC.Chat chat) {
         if (chat.photo != null) {
             //CloudVeil start
             if (!GlobalSecuritySettings.getLockDisableOthersPhoto()) {
-            newPhoto = chat.photo.photo_small;
-        }
+                newPhoto = chat.photo.photo_small;
+            }
             //CloudVeil end
         }
         avatarDrawable.setInfo(chat);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index c9dd6b035..25e2724a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -55,6 +55,7 @@
 import android.widget.PopupWindow;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.DataQuery;
@@ -91,26 +92,43 @@
 
     public interface Listener {
         boolean onBackspace();
+
         void onEmojiSelected(String emoji);
+
         void onStickerSelected(TLRPC.Document sticker);
+
         void onStickersSettingsClick();
+
         void onStickersGroupClick(int chatId);
+
         void onGifSelected(TLRPC.Document gif);
+
         void onGifTab(boolean opened);
+
         void onStickersTab(boolean opened);
+
         void onClearEmojiRecent();
+
         void onShowStickerSet(TLRPC.StickerSet stickerSet, TLRPC.InputStickerSet inputStickerSet);
+
         void onStickerSetAdd(TLRPC.StickerSetCovered stickerSet);
+
         void onStickerSetRemove(TLRPC.StickerSetCovered stickerSet);
+
         void onSearchOpenClose(boolean open);
+
         boolean isSearchOpened();
+
         boolean isExpanded();
     }
 
-    public interface DragListener{
+    public interface DragListener {
         void onDragStart();
+
         void onDragEnd(float velocity);
+
         void onDragCancel();
+
         void onDrag(int offset);
     }
 
@@ -135,6 +153,7 @@ public void openSet(TLRPC.InputStickerSet set) {
     };
 
     private static final Field superListenerField;
+
     static {
         Field f = null;
         try {
@@ -145,6 +164,7 @@ public void openSet(TLRPC.InputStickerSet set) {
         }
         superListenerField = f;
     }
+
     private static final ViewTreeObserver.OnScrollChangedListener NOP = new ViewTreeObserver.OnScrollChangedListener() {
         @Override
         public void onScrollChanged() {
@@ -658,7 +678,7 @@ public EmojiView(boolean needStickers, boolean needGif, final Context context, f
 
         stickersDrawable = context.getResources().getDrawable(R.drawable.ic_smiles2_stickers);
         Theme.setDrawableColorByKey(stickersDrawable, Theme.key_chat_emojiPanelIcon);
-        icons = new Drawable[] {
+        icons = new Drawable[]{
                 Theme.createEmojiIconSelectorDrawable(context, R.drawable.ic_smiles2_recent, Theme.getColor(Theme.key_chat_emojiPanelIcon), Theme.getColor(Theme.key_chat_emojiPanelIconSelected)),
                 Theme.createEmojiIconSelectorDrawable(context, R.drawable.ic_smiles2_smile, Theme.getColor(Theme.key_chat_emojiPanelIcon), Theme.getColor(Theme.key_chat_emojiPanelIconSelected)),
                 Theme.createEmojiIconSelectorDrawable(context, R.drawable.ic_smiles2_nature, Theme.getColor(Theme.key_chat_emojiPanelIcon), Theme.getColor(Theme.key_chat_emojiPanelIconSelected)),
@@ -785,28 +805,28 @@ public boolean onTouch(View v, MotionEvent event) {
                 }
             });
             if (!GlobalSecuritySettings.isLockDisableStickers()) {
-            stickersOnItemClickListener = new RecyclerListView.OnItemClickListener() {
-                @Override
-                public void onItemClick(View view, int position) {
-                    if (stickersGridView.getAdapter() == stickersSearchGridAdapter) {
-                        TLRPC.StickerSetCovered pack = stickersSearchGridAdapter.positionsToSets.get(position);
-                        if (pack != null) {
-                            listener.onShowStickerSet(pack.set, null);
+                stickersOnItemClickListener = new RecyclerListView.OnItemClickListener() {
+                    @Override
+                    public void onItemClick(View view, int position) {
+                        if (stickersGridView.getAdapter() == stickersSearchGridAdapter) {
+                            TLRPC.StickerSetCovered pack = stickersSearchGridAdapter.positionsToSets.get(position);
+                            if (pack != null) {
+                                listener.onShowStickerSet(pack.set, null);
+                                return;
+                            }
+                        }
+                        if (!(view instanceof StickerEmojiCell)) {
                             return;
                         }
+                        StickerPreviewViewer.getInstance().reset();
+                        StickerEmojiCell cell = (StickerEmojiCell) view;
+                        if (cell.isDisabled()) {
+                            return;
+                        }
+                        cell.disable();
+                        listener.onStickerSelected(cell.getSticker());
                     }
-                    if (!(view instanceof StickerEmojiCell)) {
-                        return;
-                    }
-                    StickerPreviewViewer.getInstance().reset();
-                    StickerEmojiCell cell = (StickerEmojiCell) view;
-                    if (cell.isDisabled()) {
-                        return;
-                    }
-                    cell.disable();
-                    listener.onStickerSelected(cell.getSticker());
-                }
-            };
+                };
             }
             stickersGridView.setOnItemClickListener(stickersOnItemClickListener);
             stickersGridView.setGlowColor(Theme.getColor(Theme.key_chat_emojiPanelBackground));
@@ -1724,7 +1744,7 @@ private void updateStickerTabs() {
         for (int a = 0; a < packs.size(); a++) {
             TLRPC.TL_messages_stickerSet pack = packs.get(a);
             //CLoudVeil start
-            if (pack.set.archived || pack.documents == null || pack.documents.isEmpty() || !StickersQuery.isStickerAllowed(pack)) {
+            if (pack.set.archived || pack.documents == null || pack.documents.isEmpty() || !DataQuery.getInstance(currentAccount).isStickerAllowed(pack)) {
                 continue;
             }
 
@@ -2471,7 +2491,7 @@ public void notifyDataSetChanged() {
                     if (leftSide < AndroidUtilities.dp(320)) {
                         leftSide = AndroidUtilities.dp(320);
                     }
-                    width  = smallSide - leftSide;
+                    width = smallSide - leftSide;
                 } else {
                     width = AndroidUtilities.displaySize.x;
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
index 31bd2fc27..cf8ac7ef7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
@@ -193,6 +193,16 @@ public void run() {
         public abstract Object run(Object[] args);
     }
 
+    //Cloudveil start
+    public static boolean isYoutubeUrl(String url) {
+        if(TextUtils.isEmpty(url)) {
+            return false;
+        }
+        Matcher matcher = youtubeIdRegex.matcher(url);
+        return matcher.find();
+    }
+    //Cloudveil end
+
     private class JSExtractor {
 
         ArrayList<String> codeLines = new ArrayList<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index b7b9580ba..950eb9f67 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -34,6 +34,7 @@
 import android.widget.FrameLayout;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.LocaleController;
@@ -138,7 +139,8 @@ public boolean onFragmentCreate() {
         } else {
             needPhonebook = true;
         }
-// Cloudveil Start
+
+        // Cloudveil Start
         allowBots = !GlobalSecuritySettings.LOCK_DISABLE_BOTS;
         if (GlobalSecuritySettings.isDisabledSecretChat()) {
             createSecretChat = false;
@@ -630,13 +632,13 @@ public void didReceivedNotification(int id, int account, Object... args) {
                 listViewAdapter.notifyDataSetChanged();
             }
         } else if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer)args[0];
+            int mask = (Integer) args[0];
             if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
                 updateVisibleRows(mask);
             }
         } else if (id == NotificationCenter.encryptedChatCreated) {
             if (createSecretChat && creatingChat) {
-                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
+                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) args[0];
                 Bundle args2 = new Bundle();
                 args2.putInt("enc_id", encryptedChat.id);
                 NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 513e90d4c..7b416a60a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -29,6 +29,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
+import android.preference.PreferenceManager;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -42,6 +43,8 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
+import org.cloudveil.messenger.service.ChannelCheckingService;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
@@ -110,7 +113,7 @@
 import java.util.ArrayList;
 
 public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    
+
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
     private DialogsAdapter dialogsAdapter;
@@ -199,10 +202,6 @@ public boolean onFragmentCreate() {
             if (!onlySelect) {
                 NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.closeSearchByActiveAction);
                 NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.proxySettingsChanged);
-            //CloudVeil start
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.filterDialogsReady);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.stickersDidLoaded);
-            //CloudVeil end
             }
             NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.updateInterfaces);
             NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.encryptedChatUpdated);
@@ -220,6 +219,11 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.dialogsUnreadCounterChanged);
 
             NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetPasscode);
+
+            //CloudVeil start
+            NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.filterDialogsReady);
+            NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.stickersDidLoaded);
+            //CloudVeil end
         }
 
         if (!dialogsLoaded[currentAccount]) {
@@ -244,11 +248,6 @@ public void onFragmentDestroy() {
             if (!onlySelect) {
                 NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.closeSearchByActiveAction);
                 NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.proxySettingsChanged);
-
-            //CloudVeil start
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.stickersDidLoaded);
-            //CloudVeil end
             }
             NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.updateInterfaces);
             NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.encryptedChatUpdated);
@@ -266,6 +265,11 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.dialogsUnreadCounterChanged);
 
             NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetPasscode);
+
+            //CloudVeil start
+            NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.filterDialogsReady);
+            NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.stickersDidLoaded);
+            //CloudVeil end
         }
         if (commentView != null) {
             commentView.onDestroy();
@@ -290,7 +294,7 @@ public void onClick(DialogInterface dialog, int which) {
                     }
                 })
                 .setOnDismissListener(new DialogInterface.OnDismissListener() {
-    @Override
+                    @Override
                     public void onDismiss(DialogInterface dialog) {
                         setPopupShown();
                     }
@@ -379,14 +383,15 @@ public void onSearchCollapse() {
                 searchWas = false;
                 if (listView != null) {
                     //CloudVeil start
-                    if (MessagesController.getInstance().loadingDialogs && getDialogsArray().isEmpty()) {
+                    if (MessagesController.getInstance(currentAccount).loadingDialogs && getDialogsArray().isEmpty()) {
                         //CloudVeil end
-                    listView.setEmptyView(progressView);
+                        listView.setEmptyView(progressView);
                     } else {
                         progressView.setVisibility(View.GONE);
                         listView.setEmptyView(null);
                     }
                     searchEmptyView.setVisibility(View.GONE);
+
                     if (!onlySelect) {
                         floatingButton.setVisibility(View.VISIBLE);
                         if (currentUnreadCount != 0) {
@@ -653,7 +658,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
             }
         };
         fragmentView = contentView;
-        
+
         listView = new RecyclerListView(context);
         listView.setVerticalScrollBarEnabled(true);
         listView.setItemAnimator(null);
@@ -737,17 +742,6 @@ public void onItemClick(View view, int position) {
                             dialogsSearchAdapter.putRecentSearch(dialog_id, (TLRPC.User) obj);
                         }
                     } else if (obj instanceof TLRPC.Chat) {
- if (dialogsSearchAdapter.isGlobalSearch(position)) {
-                            //CloudVeil Start
-                            if (GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
-                                ArrayList<TLRPC.Chat> chats = new ArrayList<>();
-                                chats.add((TLRPC.Chat) obj);
-                                MessagesController.getInstance().putChats(chats, false);
-                                MessagesStorage.getInstance().putUsersAndChats(null, chats, false, true);
-                            }
-                            //CloudVeil End
-                        }
-                        }
                         if (((TLRPC.Chat) obj).id > 0) {
                             dialog_id = -((TLRPC.Chat) obj).id;
                         } else {
@@ -1420,11 +1414,17 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
         });
 
-//CloudVeil start
-        if (MessagesController.getInstance().loadingDialogs && getDialogsArray().isEmpty()) {
+        //CloudVeil start
+        if (MessagesController.getInstance(currentAccount).loadingDialogs && getDialogsArray().isEmpty()) {
             //CloudVeil end
             searchEmptyView.setVisibility(View.GONE);
-        listView.setEmptyView(progressView);
+            listView.setEmptyView(progressView);
+        } else {
+            searchEmptyView.setVisibility(View.GONE);
+            progressView.setVisibility(View.GONE);
+            listView.setEmptyView(null);
+        }
+
         if (searchString != null) {
             actionBar.openSearchField(searchString);
         }
@@ -1592,11 +1592,10 @@ public void run(int param) {
                     }
                 }
             }
-        } else {
-            showPopup(getParentActivity());
         }
+
         //Cloudveil start
-        StickersQuery.loadStickers(StickersQuery.TYPE_IMAGE, true, false);
+        DataQuery.getInstance(currentAccount).loadStickers(DataQuery.TYPE_IMAGE, true, false);
         //Cloudveil end
     }
 
@@ -1858,7 +1857,7 @@ public void onRequestPermissionsResultFragment(int requestCode, String[] permiss
     public void didReceivedNotification(int id, int account, Object... args) {
         //CloudVeil start
         if (id == NotificationCenter.dialogsNeedReload || id == NotificationCenter.stickersDidLoaded) {
-            ChannelCheckingService.startDataChecking(ApplicationLoader.applicationContext);
+            ChannelCheckingService.startDataChecking(currentAccount, ApplicationLoader.applicationContext);
         }
         if (id == NotificationCenter.filterDialogsReady) {
             //CloudVeil end
@@ -1978,17 +1977,17 @@ public void onAnimationEnd(Animator animation) {
         //CloudVeil start
         ArrayList<TLRPC.TL_dialog> dialogs = null;
         if (dialogsType == 0) {
-            return MessagesController.getInstance(currentAccount).dialogs;
+            dialogs = MessagesController.getInstance(currentAccount).dialogs;
         } else if (dialogsType == 1) {
-            return MessagesController.getInstance(currentAccount).dialogsServerOnly;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsServerOnly;
         } else if (dialogsType == 2) {
-            return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
         } else if (dialogsType == 3) {
-            return MessagesController.getInstance(currentAccount).dialogsForward;
+            dialogs = MessagesController.getInstance(currentAccount).dialogsForward;
+        } else {
+            return null;
         }
-        return null;
-    }
-        dialogs = MessagesController.getInstance().filterDialogs(dialogs);
+        dialogs = MessagesController.getInstance(currentAccount).filterDialogs(dialogs);
         //CloudVeil end
         return dialogs;
     }
@@ -2355,4 +2354,4 @@ public void didSetColor() {
                 new ThemeDescription(null, 0, null, null, null, null, Theme.key_player_buttonActive),
         };
     }
-}
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 09cfdd254..6e448aac2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -42,6 +42,7 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index c6906711a..9d65e0e2f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -50,6 +50,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.ChatObject;
@@ -217,10 +218,10 @@
            //CloudVeil start
             if (user_id != 0) {
                 boolean allowPhoto =  !GlobalSecuritySettings.getLockDisableOthersPhoto();
-                if(user_id == UserConfig.getCurrentUser().id) {
-                    allowPhoto = UserConfig.getCurrentUser().id == user_id && !GlobalSecuritySettings.getLockDisableOwnPhoto();
+                if(user_id == UserConfig.getInstance(currentAccount).getCurrentUser().id) {
+                    allowPhoto = UserConfig.getInstance(currentAccount).getCurrentUser().id == user_id && !GlobalSecuritySettings.getLockDisableOwnPhoto();
                 }
-                TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(user_id);
                 if (user != null && user.photo != null && user.photo.photo_big != null && allowPhoto) {
                     photoBig = user.photo.photo_big;
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 8150925f0..c469442cc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -52,6 +52,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.BuildConfig;
@@ -176,11 +177,13 @@
             if (fileLocation == null) {
                 return null;
             }
-   //CloudVeil start
-            if(GlobalSecuritySettings.getLockDisableOwnPhoto()) {
+
+            //CloudVeil start
+            if (GlobalSecuritySettings.getLockDisableOwnPhoto()) {
                 return null;
             }
             //CloudVeil end
+
             TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(UserConfig.getInstance(currentAccount).getClientUserId());
             if (user != null && user.photo != null && user.photo.photo_big != null) {
                 TLRPC.FileLocation photoBig = user.photo.photo_big;
@@ -542,13 +545,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         ((TextCheckCell) view).setChecked(SharedConfig.raiseToSpeak);
                     }
                 } else if (position == autoplayGifsRow) {
-                    SharedConfig.toggleAutoplayGifs();
-//CloudVeil Start
+                    //CloudVeil Start
                     if (!GlobalSecuritySettings.LOCK_DISABLE_AUTOPLAY_GIFS) {
-                        MediaController.getInstance().toggleAutoplayGifs();
-                    if (view instanceof TextCheckCell) {
-                        ((TextCheckCell) view).setChecked(SharedConfig.autoplayGifs);
-                    }
+                        SharedConfig.toggleAutoplayGifs();
+                        if (view instanceof TextCheckCell) {
+                            ((TextCheckCell) view).setChecked(SharedConfig.autoplayGifs);
+                        }
                     }
                     //CloudVeil End
                 } else if (position == saveToGalleryRow) {
@@ -557,13 +559,15 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         ((TextCheckCell) view).setChecked(SharedConfig.saveToGallery);
                     }
                 } else if (position == customTabsRow) {
-                    SharedConfig.toggleCustomTabs();
-                    if (view instanceof TextCheckCell) {
-                        ((TextCheckCell) view).setChecked(SharedConfig.customTabs);
-                    }
+                    //CloudVeil Start
+                    if (!GlobalSecuritySettings.LOCK_DISABLE_IN_APP_BROWSER) {
+                        SharedConfig.toggleCustomTabs();
+                        if (view instanceof TextCheckCell) {
+                            ((TextCheckCell) view).setChecked(SharedConfig.customTabs);
+                        }
                     }
                     //CloudVeil End
-                } else if(position == directShareRow) {
+                } else if (position == directShareRow) {
                     SharedConfig.toggleDirectShare();
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(SharedConfig.directShare);
@@ -627,9 +631,11 @@ public void onClick(DialogInterface dialog, int which) {
                 } else if (position == usernameRow) {
                     presentFragment(new ChangeUsernameActivity());
                 } else if (position == bioRow) {
-                    TLRPC.TL_userFull userFull = MessagesController.getInstance(currentAccount).getUserFull(UserConfig.getInstance(currentAccount).getClientUserId());
-                    if (userFull != null) {
-                        presentFragment(new ChangeBioActivity());
+                    if (!GlobalSecuritySettings.getLockDisableOwnBio()) {
+                        TLRPC.TL_userFull userFull = MessagesController.getInstance(currentAccount).getUserFull(UserConfig.getInstance(currentAccount).getClientUserId());
+                        if (userFull != null) {
+                            presentFragment(new ChangeBioActivity());
+                        }
                     }
                 } else if (position == numberRow) {
                     presentFragment(new ChangePhoneHelpActivity());
@@ -706,7 +712,7 @@ public void onClick(View v) {
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(!dump);
                     }
-                }else if (position == forceTcpInCallsRow) {
+                } else if (position == forceTcpInCallsRow) {
                     SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                     boolean dump = preferences.getBoolean("dbg_force_tcp_in_calls", false);
                     SharedPreferences.Editor editor = preferences.edit();
@@ -1149,7 +1155,7 @@ public void onAnimationEnd(Animator animation) {
             nameTextView.setTranslationX(-21 * AndroidUtilities.density * diff);
             nameTextView.setTranslationY((float) Math.floor(avatarY) - (float) Math.ceil(AndroidUtilities.density) + (float) Math.floor(7 * AndroidUtilities.density * diff));
             onlineTextView.setTranslationX(-21 * AndroidUtilities.density * diff);
-            onlineTextView.setTranslationY((float) Math.floor(avatarY) + AndroidUtilities.dp(22) + (float )Math.floor(11 * AndroidUtilities.density) * diff);
+            onlineTextView.setTranslationY((float) Math.floor(avatarY) + AndroidUtilities.dp(22) + (float) Math.floor(11 * AndroidUtilities.density) * diff);
             nameTextView.setScaleX(1.0f + 0.12f * diff);
             nameTextView.setScaleY(1.0f + 0.12f * diff);
         }
@@ -1533,4 +1539,4 @@ public int getItemViewType(int position) {
                 new ThemeDescription(writeButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_profile_actionPressedBackground),
         };
     }
-}
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index af229c3d6..89008a685 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -2100,4 +2100,10 @@
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
+
+    <string name="cloudveil_message_warning">CloudVeil Messenger uses a server based system to control access to Bots, Channels, and Groups and other policy rules. This is used to block unacceptable content. Your Telegram id and list of channels, bots, and groups will be sent to our system to allow this to work. We do not have access to your messages themselves.</string>
+    <string name="warning">Warning</string>
+    <string name="cloudveil_message_dialog_forbidden">This channel/group/bot is blocked by our server policy.  Please contact CloudVeil Support at support@cloudveil.org to request it be unblocked.</string>
+    <string name="cloudveil_hidden_for_protection">Content blocked for your protection.</string>
+    <string name="cloudveil_disabled_for_protection">This is disabled for your protection.</string>
 </resources>
