diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index 31b0ffce5..47e859373 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -99,6 +99,7 @@ public static void saveConfig(boolean withFile, File oldFile) {
         }
     }
 
+    //TODO activeted user.
     public static boolean isClientActivated() {
         synchronized (sync) {
             return currentUser != null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ChatActivityAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ChatActivityAdapter.java
deleted file mode 100644
index afe18248d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ChatActivityAdapter.java
+++ /dev/null
@@ -1,396 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Adapters;
-
-public class ChatActivityAdapter {
-
-    /*private Context mContext;
-
-    public ChatAdapter(Context context) {
-        mContext = context;
-    }
-
-    @Override
-    public boolean areAllItemsEnabled() {
-        return true;
-    }
-
-    @Override
-    public boolean isEnabled(int i) {
-        return true;
-    }
-
-    @Override
-    public int getCount() {
-        int count = messages.size();
-        if (count != 0) {
-            if (!endReached) {
-                count++;
-            }
-            if (!forward_end_reached) {
-                count++;
-            }
-        }
-        return count;
-    }
-
-    @Override
-    public Object getItem(int i) {
-        return null;
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return i;
-    }
-
-    @Override
-    public boolean hasStableIds() {
-        return true;
-    }
-
-    @Override
-    public View getView(int i, View view, ViewGroup viewGroup) {
-        int offset = 1;
-        if ((!endReached || !forward_end_reached) && messages.size() != 0) {
-            if (!endReached) {
-                offset = 0;
-            }
-            if (i == 0 && !endReached || !forward_end_reached && i == (messages.size() + 1 - offset)) {
-                View progressBar = null;
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.chat_loading_layout, viewGroup, false);
-                    progressBar = view.findViewById(R.id.progressLayout);
-                    if (ApplicationLoader.isCustomTheme()) {
-                        progressBar.setBackgroundResource(R.drawable.system_loader2);
-                    } else {
-                        progressBar.setBackgroundResource(R.drawable.system_loader1);
-                    }
-                } else {
-                    progressBar = view.findViewById(R.id.progressLayout);
-                }
-                progressBar.setVisibility(loadsCount > 1 ? View.VISIBLE : View.INVISIBLE);
-
-                return view;
-            }
-        }
-        final MessageObject message = messages.get(messages.size() - i - offset);
-        int type = message.contentType;
-        if (view == null) {
-            if (type == 0) {
-                view = new ChatMessageCell(mContext);
-            }
-            if (type == 1) {
-                view = new ChatMediaCell(mContext);
-            } else if (type == 2) {
-                view = new ChatAudioCell(mContext);
-            } else if (type == 3) {
-                view = new ChatContactCell(mContext);
-            } else if (type == 6) {
-                LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = li.inflate(R.layout.chat_unread_layout, viewGroup, false);
-            } else if (type == 4) {
-                view = new ChatActionCell(mContext);
-            }
-
-            if (view instanceof ChatBaseCell) {
-                ((ChatBaseCell) view).setDelegate(new ChatBaseCell.ChatBaseCellDelegate() {
-                    @Override
-                    public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
-                        if (actionBar.isActionModeShowed()) {
-                            processRowSelect(cell);
-                            return;
-                        }
-                        if (user != null && user.id != UserConfig.getClientUserId()) {
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", user.id);
-                            presentFragment(new ProfileActivity(args));
-                        }
-                    }
-
-                    @Override
-                    public void didPressedCancelSendButton(ChatBaseCell cell) {
-                        MessageObject message = cell.getMessageObject();
-                        if (message.messageOwner.send_state != 0) {
-                            SendMessagesHelper.getInstance().cancelSendingMessage(message);
-                        }
-                    }
-
-                    @Override
-                    public void didLongPressed(ChatBaseCell cell) {
-                        createMenu(cell, false);
-                    }
-
-                    @Override
-                    public boolean canPerformActions() {
-                        return actionBar != null && !actionBar.isActionModeShowed();
-                    }
-
-                    @Override
-                    public void didPressUrl(String url) {
-                        if (url.startsWith("@")) {
-                            openProfileWithUsername(url.substring(1));
-                        } else if (url.startsWith("#")) {
-                            MessagesActivity fragment = new MessagesActivity(null);
-                            fragment.setSearchString(url);
-                            presentFragment(fragment);
-                        }
-                    }
-
-                    @Override
-                    public void didPressReplyMessage(ChatBaseCell cell, int id) {
-                        scrollToMessageId(id, cell.getMessageObject().getId(), true);
-                    }
-                });
-                if (view instanceof ChatMediaCell) {
-                    ((ChatMediaCell) view).setAllowedToSetPhoto(openAnimationEnded);
-                    ((ChatMediaCell) view).setMediaDelegate(new ChatMediaCell.ChatMediaCellDelegate() {
-                        @Override
-                        public void didClickedImage(ChatMediaCell cell) {
-                            MessageObject message = cell.getMessageObject();
-                            if (message.isSendError()) {
-                                createMenu(cell, false);
-                                return;
-                            } else if (message.isSending()) {
-                                return;
-                            }
-                            if (message.type == 1) {
-                                PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                                PhotoViewer.getInstance().openPhoto(message, ChatActivity.this);
-                            } else if (message.type == 3) {
-                                sendSecretMessageRead(message);
-                                try {
-                                    File f = null;
-                                    if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
-                                        f = new File(message.messageOwner.attachPath);
-                                    }
-                                    if (f == null || f != null && !f.exists()) {
-                                        f = FileLoader.getPathToMessage(message.messageOwner);
-                                    }
-                                    Intent intent = new Intent(Intent.ACTION_VIEW);
-                                    intent.setDataAndType(Uri.fromFile(f), "video/mp4");
-                                    getParentActivity().startActivityForResult(intent, 500);
-                                } catch (Exception e) {
-                                    alertUserOpenError(message);
-                                }
-                            } else if (message.type == 4) {
-                                if (!isGoogleMapsInstalled()) {
-                                    return;
-                                }
-                                LocationActivity fragment = new LocationActivity();
-                                fragment.setMessageObject(message);
-                                presentFragment(fragment);
-                            } else if (message.type == 9) {
-                                File f = null;
-                                String fileName = message.getFileName();
-                                if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
-                                    f = new File(message.messageOwner.attachPath);
-                                }
-                                if (f == null || f != null && !f.exists()) {
-                                    f = FileLoader.getPathToMessage(message.messageOwner);
-                                }
-                                if (f != null && f.exists()) {
-                                    String realMimeType = null;
-                                    try {
-                                        Intent intent = new Intent(Intent.ACTION_VIEW);
-                                        if (message.type == 8 || message.type == 9) {
-                                            MimeTypeMap myMime = MimeTypeMap.getSingleton();
-                                            int idx = fileName.lastIndexOf(".");
-                                            if (idx != -1) {
-                                                String ext = fileName.substring(idx + 1);
-                                                realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
-                                                if (realMimeType == null) {
-                                                    realMimeType = message.messageOwner.media.document.mime_type;
-                                                    if (realMimeType == null || realMimeType.length() == 0) {
-                                                        realMimeType = null;
-                                                    }
-                                                }
-                                                if (realMimeType != null) {
-                                                    intent.setDataAndType(Uri.fromFile(f), realMimeType);
-                                                } else {
-                                                    intent.setDataAndType(Uri.fromFile(f), "text/plain");
-                                                }
-                                            } else {
-                                                intent.setDataAndType(Uri.fromFile(f), "text/plain");
-                                            }
-                                        }
-                                        if (realMimeType != null) {
-                                            try {
-                                                getParentActivity().startActivityForResult(intent, 500);
-                                            } catch (Exception e) {
-                                                intent.setDataAndType(Uri.fromFile(f), "text/plain");
-                                                getParentActivity().startActivityForResult(intent, 500);
-                                            }
-                                        } else {
-                                            getParentActivity().startActivityForResult(intent, 500);
-                                        }
-                                    } catch (Exception e) {
-                                        alertUserOpenError(message);
-                                    }
-                                }
-                            }
-                        }
-
-                        @Override
-                        public void didPressedOther(ChatMediaCell cell) {
-                            createMenu(cell, true);
-                        }
-                    });
-                } else if (view instanceof ChatContactCell) {
-                    ((ChatContactCell) view).setContactDelegate(new ChatContactCell.ChatContactCellDelegate() {
-                        @Override
-                        public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
-                            if (actionBar.isActionModeShowed()) {
-                                processRowSelect(cell);
-                                return;
-                            }
-                            MessageObject messageObject = cell.getMessageObject();
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", messageObject.messageOwner.media.user_id);
-                            args.putString("phone", messageObject.messageOwner.media.phone_number);
-                            args.putBoolean("addContact", true);
-                            presentFragment(new ContactAddActivity(args));
-                        }
-
-                        @Override
-                        public void didClickPhone(ChatContactCell cell) {
-                            if (actionBar.isActionModeShowed()) {
-                                processRowSelect(cell);
-                                return;
-                            }
-                            final MessageObject messageObject = cell.getMessageObject();
-                            if (getParentActivity() == null || messageObject.messageOwner.media.phone_number == null || messageObject.messageOwner.media.phone_number.length() == 0) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Call", R.string.Call)}, new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialogInterface, int i) {
-                                            if (i == 1) {
-                                                try {
-                                                    Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + messageObject.messageOwner.media.phone_number));
-                                                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                                    getParentActivity().startActivityForResult(intent, 500);
-                                                } catch (Exception e) {
-                                                    FileLog.e("tmessages", e);
-                                                }
-                                            } else if (i == 0) {
-                                                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
-                                                    android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                                    clipboard.setText(messageObject.messageOwner.media.phone_number);
-                                                } else {
-                                                    android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                                    android.content.ClipData clip = android.content.ClipData.newPlainText("label", messageObject.messageOwner.media.phone_number);
-                                                    clipboard.setPrimaryClip(clip);
-                                                }
-                                            }
-                                        }
-                                    }
-                            );
-                            showDialog(builder.create());
-                        }
-                    });
-                }
-            } else if (view instanceof ChatActionCell) {
-                ((ChatActionCell) view).setDelegate(new ChatActionCell.ChatActionCellDelegate() {
-                    @Override
-                    public void didClickedImage(ChatActionCell cell) {
-                        MessageObject message = cell.getMessageObject();
-                        PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                        PhotoViewer.getInstance().openPhoto(message, ChatActivity.this);
-                    }
-
-                    @Override
-                    public void didLongPressed(ChatActionCell cell) {
-                        createMenu(cell, false);
-                    }
-
-                    @Override
-                    public void needOpenUserProfile(int uid) {
-                        if (uid != UserConfig.getClientUserId()) {
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", uid);
-                            presentFragment(new ProfileActivity(args));
-                        }
-                    }
-                });
-            }
-        }
-
-        boolean selected = false;
-        boolean disableSelection = false;
-        if (actionBar.isActionModeShowed()) {
-            if (selectedMessagesIds.containsKey(message.getId())) {
-                view.setBackgroundColor(0x6633b5e5);
-                selected = true;
-            } else {
-                view.setBackgroundColor(0);
-            }
-            disableSelection = true;
-        } else {
-            view.setBackgroundColor(0);
-        }
-
-        if (view instanceof ChatBaseCell) {
-            ChatBaseCell baseCell = (ChatBaseCell) view;
-            baseCell.isChat = currentChat != null;
-            baseCell.setMessageObject(message);
-            baseCell.setCheckPressed(!disableSelection, disableSelection && selected);
-            if (view instanceof ChatAudioCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
-                ((ChatAudioCell) view).downloadAudioIfNeed();
-            }
-            baseCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && message.getId() == highlightMessageId);
-        } else if (view instanceof ChatActionCell) {
-            ChatActionCell actionCell = (ChatActionCell) view;
-            actionCell.setMessageObject(message);
-        }
-        if (type == 6) {
-            TextView messageTextView = (TextView) view.findViewById(R.id.chat_message_text);
-            messageTextView.setText(LocaleController.formatPluralString("NewMessages", unread_to_load));
-        }
-
-        return view;
-    }
-
-    @Override
-    public int getItemViewType(int i) {
-        int offset = 1;
-        if (!endReached && messages.size() != 0) {
-            offset = 0;
-            if (i == 0) {
-                return 5;
-            }
-        }
-        if (!forward_end_reached && i == (messages.size() + 1 - offset)) {
-            return 5;
-        }
-        MessageObject message = messages.get(messages.size() - i - offset);
-        return message.contentType;
-    }
-
-    @Override
-    public int getViewTypeCount() {
-        return 7;
-    }
-
-    @Override
-    public boolean isEmpty() {
-        int count = messages.size();
-        if (count != 0) {
-            if (!endReached) {
-                count++;
-            }
-            if (!forward_end_reached) {
-                count++;
-            }
-        }
-        return count == 0;
-    }*/
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
deleted file mode 100644
index 147ff456b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
+++ /dev/null
@@ -1,278 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.os.Build;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.ui.Cells.DividerCell;
-import org.telegram.ui.Cells.GreySectionCell;
-import org.telegram.ui.Cells.LetterSectionCell;
-import org.telegram.ui.Cells.TextCell;
-import org.telegram.ui.Cells.UserCell;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-
-public class ContactsAdapter extends BaseSectionsAdapter {
-
-    private Context mContext;
-    private boolean onlyUsers;
-    private boolean needPhonebook;
-    private HashMap<Integer, TLRPC.User> ignoreUsers;
-    private HashMap<Integer, ?> checkedMap;
-    private boolean scrolling;
-    private boolean isAdmin;
-
-    public ContactsAdapter(Context context, boolean arg1, boolean arg2, HashMap<Integer, TLRPC.User> arg3, boolean arg4) {
-        mContext = context;
-        onlyUsers = arg1;
-        needPhonebook = arg2;
-        ignoreUsers = arg3;
-        isAdmin = arg4;
-    }
-
-    public void setCheckedMap(HashMap<Integer, ?> map) {
-        checkedMap = map;
-    }
-
-    public void setIsScrolling(boolean value) {
-        scrolling = value;
-    }
-
-    @Override
-    public Object getItem(int section, int position) {
-        if (onlyUsers && !isAdmin) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                if (position < arr.size()) {
-                    return MessagesController.getInstance().getUser(arr.get(position).user_id);
-                }
-            }
-            return null;
-        } else {
-            if (section == 0) {
-                return null;
-            } else {
-                if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                    ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
-                    if (position < arr.size()) {
-                        return MessagesController.getInstance().getUser(arr.get(position).user_id);
-                    }
-                    return null;
-                }
-            }
-        }
-        if (needPhonebook) {
-            return ContactsController.getInstance().phoneBookContacts.get(position);
-        }
-        return null;
-    }
-
-    @Override
-    public boolean isRowEnabled(int section, int row) {
-        if (onlyUsers && !isAdmin) {
-            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-            return row < arr.size();
-        } else {
-            if (section == 0) {
-                if (needPhonebook || isAdmin) {
-                    if (row == 1) {
-                        return false;
-                    }
-                } else {
-                    if (row == 3) {
-                        return false;
-                    }
-                }
-                return true;
-            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
-                return row < arr.size();
-            }
-        }
-        return true;
-    }
-
-    @Override
-    public int getSectionCount() {
-        int count = ContactsController.getInstance().sortedUsersSectionsArray.size();
-        if (!onlyUsers) {
-            count++;
-        }
-        if (isAdmin) {
-            count++;
-        }
-        if (needPhonebook) {
-            count++;
-        }
-        return count;
-    }
-
-    @Override
-    public int getCountForSection(int section) {
-        if (onlyUsers && !isAdmin) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-                int count = arr.size();
-                if (section != (ContactsController.getInstance().sortedUsersSectionsArray.size() - 1) || needPhonebook) {
-                    count++;
-                }
-                return count;
-            }
-        } else {
-            if (section == 0) {
-                if (needPhonebook || isAdmin) {
-                    return 2;
-                } else {
-                    return 4;
-                }
-            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
-                int count = arr.size();
-                if (section - 1 != (ContactsController.getInstance().sortedUsersSectionsArray.size() - 1) || needPhonebook) {
-                    count++;
-                }
-                return count;
-            }
-        }
-        if (needPhonebook) {
-            return ContactsController.getInstance().phoneBookContacts.size();
-        }
-        return 0;
-    }
-
-    @Override
-    public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
-        if (convertView == null) {
-            convertView = new LetterSectionCell(mContext);
-        }
-        if (onlyUsers && !isAdmin) {
-            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ((LetterSectionCell) convertView).setLetter(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-            } else {
-                ((LetterSectionCell) convertView).setLetter("");
-            }
-        } else {
-            if (section == 0) {
-                ((LetterSectionCell) convertView).setLetter("");
-            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ((LetterSectionCell) convertView).setLetter(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
-            } else {
-                ((LetterSectionCell) convertView).setLetter("");
-            }
-        }
-        return convertView;
-    }
-
-    @Override
-    public View getItemView(int section, int position, View convertView, ViewGroup parent) {
-        int type = getItemViewType(section, position);
-        if (type == 4) {
-            if (convertView == null) {
-                convertView = new DividerCell(mContext);
-                convertView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 28 : 72), 0, AndroidUtilities.dp(LocaleController.isRTL ? 72 : 28), 0);
-            }
-        } else if (type == 3) {
-            if (convertView == null) {
-                convertView = new GreySectionCell(mContext);
-                ((GreySectionCell) convertView).setText(LocaleController.getString("Contacts", R.string.Contacts).toUpperCase());
-            }
-        } else if (type == 2) {
-            if (convertView == null) {
-                convertView = new TextCell(mContext);
-            }
-            TextCell actionCell = (TextCell) convertView;
-            if (needPhonebook) {
-                actionCell.setTextAndIcon(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_invite);
-            } else if (isAdmin) {
-                actionCell.setTextAndIcon(LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink), R.drawable.menu_invite);
-            } else {
-                if (position == 0) {
-                    actionCell.setTextAndIcon(LocaleController.getString("NewGroup", R.string.NewGroup), R.drawable.menu_newgroup);
-                } else if (position == 1) {
-                    actionCell.setTextAndIcon(LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret);
-                } else if (position == 2) {
-                    actionCell.setTextAndIcon(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList), R.drawable.menu_broadcast);
-                }
-            }
-        } else if (type == 1) {
-            if (convertView == null) {
-                convertView = new TextCell(mContext);
-            }
-            ContactsController.Contact contact = ContactsController.getInstance().phoneBookContacts.get(position);
-            if (contact.first_name != null && contact.last_name != null) {
-                ((TextCell) convertView).setText(contact.first_name + " " + contact.last_name);
-            } else if (contact.first_name != null && contact.last_name == null) {
-                ((TextCell) convertView).setText(contact.first_name);
-            } else {
-                ((TextCell) convertView).setText(contact.last_name);
-            }
-        } else if (type == 0) {
-            if (convertView == null) {
-                convertView = new UserCell(mContext, 58);
-                ((UserCell) convertView).setStatusColors(0xffa8a8a8, 0xff3b84c0);
-            }
-
-            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - (onlyUsers && !isAdmin ? 0 : 1)));
-            TLRPC.User user = MessagesController.getInstance().getUser(arr.get(position).user_id);
-            ((UserCell)convertView).setData(user, null, null, 0);
-            if (checkedMap != null) {
-                ((UserCell) convertView).setChecked(checkedMap.containsKey(user.id), !scrolling  && Build.VERSION.SDK_INT > 10);
-            }
-            if (ignoreUsers != null) {
-                if (ignoreUsers.containsKey(user.id)) {
-                    ViewProxy.setAlpha(convertView, 0.5f);
-                } else {
-                    ViewProxy.setAlpha(convertView, 1.0f);
-                }
-            }
-        }
-        return convertView;
-    }
-
-    @Override
-    public int getItemViewType(int section, int position) {
-        if (onlyUsers && !isAdmin) {
-            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
-            return position < arr.size() ? 0 : 4;
-        } else {
-            if (section == 0) {
-                if (needPhonebook || isAdmin) {
-                    if (position == 1) {
-                        return 3;
-                    }
-                } else {
-                    if (position == 3) {
-                        return 3;
-                    }
-                }
-                return 2;
-            } else if (section - 1 < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
-                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section - 1));
-                return position < arr.size() ? 0 : 4;
-            }
-        }
-        return 1;
-    }
-
-    @Override
-    public int getViewTypeCount() {
-        return 5;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java
deleted file mode 100644
index f2516f890..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountryAdapter.java
+++ /dev/null
@@ -1,165 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.ui.Cells.DividerCell;
-import org.telegram.ui.Cells.LetterSectionCell;
-import org.telegram.ui.Cells.TextSettingsCell;
-
-import java.io.BufferedReader;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-
-public class CountryAdapter extends BaseSectionsAdapter {
-
-    public static class Country {
-        public String name;
-        public String code;
-        public String shortname;
-    }
-
-    private Context mContext;
-    private HashMap<String, ArrayList<Country>> countries = new HashMap<>();
-    private ArrayList<String> sortedCountries = new ArrayList<>();
-
-    public CountryAdapter(Context context) {
-        mContext = context;
-
-        try {
-            InputStream stream = ApplicationLoader.applicationContext.getResources().getAssets().open("countries.txt");
-            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
-            String line;
-            while ((line = reader.readLine()) != null) {
-                String[] args = line.split(";");
-                Country c = new Country();
-                c.name = args[2];
-                c.code = args[0];
-                c.shortname = args[1];
-                String n = c.name.substring(0, 1).toUpperCase();
-                ArrayList<Country> arr = countries.get(n);
-                if (arr == null) {
-                    arr = new ArrayList<>();
-                    countries.put(n, arr);
-                    sortedCountries.add(n);
-                }
-                arr.add(c);
-            }
-            reader.close();
-            stream.close();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        Collections.sort(sortedCountries, new Comparator<String>() {
-            @Override
-            public int compare(String lhs, String rhs) {
-                return lhs.compareTo(rhs);
-            }
-        });
-
-        for (ArrayList<Country> arr : countries.values()) {
-            Collections.sort(arr, new Comparator<Country>() {
-                @Override
-                public int compare(Country country, Country country2) {
-                    return country.name.compareTo(country2.name);
-                }
-            });
-        }
-    }
-
-    public HashMap<String, ArrayList<Country>> getCountries() {
-        return countries;
-    }
-
-    @Override
-    public Country getItem(int section, int position) {
-        if (section < 0 || section >= sortedCountries.size()) {
-            return null;
-        }
-        ArrayList<Country> arr = countries.get(sortedCountries.get(section));
-        if (position < 0 || position >= arr.size()) {
-            return null;
-        }
-        return arr.get(position);
-    }
-
-    @Override
-    public boolean isRowEnabled(int section, int row) {
-        ArrayList<Country> arr = countries.get(sortedCountries.get(section));
-        return row < arr.size();
-    }
-
-    @Override
-    public int getSectionCount() {
-        return sortedCountries.size();
-    }
-
-    @Override
-    public int getCountForSection(int section) {
-        int count = countries.get(sortedCountries.get(section)).size();
-        if (section != sortedCountries.size() - 1) {
-            count++;
-        }
-        return count;
-    }
-
-    @Override
-    public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
-        if (convertView == null) {
-            convertView = new LetterSectionCell(mContext);
-            ((LetterSectionCell) convertView).setCellHeight(AndroidUtilities.dp(48));
-        }
-        ((LetterSectionCell) convertView).setLetter(sortedCountries.get(section).toUpperCase());
-        return convertView;
-    }
-
-    @Override
-    public View getItemView(int section, int position, View convertView, ViewGroup parent) {
-        int type = getItemViewType(section, position);
-        if (type == 1) {
-            if (convertView == null) {
-                convertView = new DividerCell(mContext);
-                convertView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 24 : 72), 0, AndroidUtilities.dp(LocaleController.isRTL ? 72 : 24), 0);
-            }
-        } else if (type == 0) {
-            if (convertView == null) {
-                convertView = new TextSettingsCell(mContext);
-                convertView.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 16 : 54), 0, AndroidUtilities.dp(LocaleController.isRTL ? 54 : 16), 0);
-            }
-
-            ArrayList<Country> arr = countries.get(sortedCountries.get(section));
-            Country c = arr.get(position);
-            ((TextSettingsCell) convertView).setTextAndValue(c.name, "+" + c.code, false);
-        }
-        return convertView;
-    }
-
-    @Override
-    public int getItemViewType(int section, int position) {
-        ArrayList<Country> arr = countries.get(sortedCountries.get(section));
-        return position < arr.size() ? 0 : 1;
-    }
-
-    @Override
-    public int getViewTypeCount() {
-        return 2;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java
deleted file mode 100644
index 8c39b844a..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/CountrySearchAdapter.java
+++ /dev/null
@@ -1,165 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.Adapters.CountryAdapter.Country;
-import org.telegram.ui.Cells.TextSettingsCell;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class CountrySearchAdapter extends BaseFragmentAdapter {
-
-    private Context mContext;
-    private Timer searchTimer;
-    private ArrayList<CountryAdapter.Country> searchResult;
-    private HashMap<String, ArrayList<Country>> countries;
-
-    public CountrySearchAdapter(Context context, HashMap<String, ArrayList<Country>> countries) {
-        mContext = context;
-        this.countries = countries;
-    }
-
-    public void search(final String query) {
-        if (query == null) {
-            searchResult = null;
-        } else {
-            try {
-                if (searchTimer != null) {
-                    searchTimer.cancel();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
-                        searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    processSearch(query);
-                }
-            }, 100, 300);
-        }
-    }
-
-    private void processSearch(final String query) {
-        Utilities.searchQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-
-                String q = query.trim().toLowerCase();
-                if (q.length() == 0) {
-                    updateSearchResults(new ArrayList<Country>());
-                    return;
-                }
-                long time = System.currentTimeMillis();
-                ArrayList<Country> resultArray = new ArrayList<>();
-
-                String n = query.substring(0, 1);
-                ArrayList<Country> arr = countries.get(n.toUpperCase());
-                if (arr != null) {
-                    for (Country c : arr) {
-                        if (c.name.toLowerCase().startsWith(query)) {
-                            resultArray.add(c);
-                        }
-                    }
-                }
-
-                updateSearchResults(resultArray);
-            }
-        });
-    }
-
-    private void updateSearchResults(final ArrayList<Country> arrCounties) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                searchResult = arrCounties;
-                notifyDataSetChanged();
-            }
-        });
-    }
-
-    @Override
-    public boolean areAllItemsEnabled() {
-        return true;
-    }
-
-    @Override
-    public boolean isEnabled(int i) {
-        return true;
-    }
-
-    @Override
-    public int getCount() {
-        if (searchResult == null) {
-            return 0;
-        }
-        return searchResult.size();
-    }
-
-    @Override
-    public Country getItem(int i) {
-        if (i < 0 || i >= searchResult.size()) {
-            return null;
-        }
-        return searchResult.get(i);
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return i;
-    }
-
-    @Override
-    public boolean hasStableIds() {
-        return true;
-    }
-
-    @Override
-    public View getView(int i, View view, ViewGroup viewGroup) {
-        if (view == null) {
-            view = new TextSettingsCell(mContext);
-        }
-
-        Country c = searchResult.get(i);
-        ((TextSettingsCell) view).setTextAndValue(c.name, "+" + c.code, i != searchResult.size() - 1);
-
-        return view;
-    }
-
-    @Override
-    public int getItemViewType(int i) {
-        return 0;
-    }
-
-    @Override
-    public int getViewTypeCount() {
-        return 1;
-    }
-
-    @Override
-    public boolean isEmpty() {
-        return searchResult == null || searchResult.size() == 0;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
deleted file mode 100644
index 56508d07a..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.MessagesController;
-import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.Cells.LoadingCell;
-
-public class DialogsAdapter extends RecyclerView.Adapter {
-
-    private Context mContext;
-    private boolean serverOnly;
-    private long openedDialogId;
-    private int currentCount;
-
-    private class Holder extends RecyclerView.ViewHolder {
-
-        public Holder(View itemView) {
-            super(itemView);
-        }
-    }
-
-    public DialogsAdapter(Context context, boolean onlyFromServer) {
-        mContext = context;
-        serverOnly = onlyFromServer;
-    }
-
-    public void setOpenedDialogId(long id) {
-        openedDialogId = id;
-    }
-
-    public boolean isDataSetChanged() {
-        int current = currentCount;
-        return current != getItemCount();
-    }
-
-    @Override
-    public int getItemCount() {
-        int count;
-        if (serverOnly) {
-            count = MessagesController.getInstance().dialogsServerOnly.size();
-        } else {
-            count = MessagesController.getInstance().dialogs.size();
-        }
-        if (count == 0 && MessagesController.getInstance().loadingDialogs) {
-            return 0;
-        }
-        if (!MessagesController.getInstance().dialogsEndReached) {
-            count++;
-        }
-        currentCount = count;
-        return count;
-    }
-
-    public TLRPC.TL_dialog getItem(int i) {
-        if (serverOnly) {
-            if (i < 0 || i >= MessagesController.getInstance().dialogsServerOnly.size()) {
-                return null;
-            }
-            return MessagesController.getInstance().dialogsServerOnly.get(i);
-        } else {
-            if (i < 0 || i >= MessagesController.getInstance().dialogs.size()) {
-                return null;
-            }
-            return MessagesController.getInstance().dialogs.get(i);
-        }
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return i;
-    }
-
-    @Override
-    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
-        View view = null;
-        if (viewType == 0) {
-            view = new DialogCell(mContext);
-        } else if (viewType == 1) {
-            view = new LoadingCell(mContext);
-        }
-        return new Holder(view);
-    }
-
-    @Override
-    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
-        if (viewHolder.getItemViewType() == 0) {
-            DialogCell cell = (DialogCell) viewHolder.itemView;
-            cell.useSeparator = (i != getItemCount() - 1);
-            TLRPC.TL_dialog dialog;
-            if (serverOnly) {
-                dialog = MessagesController.getInstance().dialogsServerOnly.get(i);
-            } else {
-                dialog = MessagesController.getInstance().dialogs.get(i);
-                if (AndroidUtilities.isTablet()) {
-                    cell.setDialogSelected(dialog.id == openedDialogId);
-                }
-            }
-            cell.setDialog(dialog, i, serverOnly);
-        }
-    }
-
-    @Override
-    public int getItemViewType(int i) {
-        if (serverOnly && i == MessagesController.getInstance().dialogsServerOnly.size() || !serverOnly && i == MessagesController.getInstance().dialogs.size()) {
-            return 1;
-        }
-        return 0;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
deleted file mode 100644
index 0aae2b086..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ /dev/null
@@ -1,736 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.text.TextUtils;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.Cells.GreySectionCell;
-import org.telegram.ui.Cells.HashtagSearchCell;
-import org.telegram.ui.Cells.LoadingCell;
-import org.telegram.ui.Cells.ProfileSearchCell;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class DialogsSearchAdapter extends BaseSearchAdapterRecycler {
-
-    private Context mContext;
-    private Timer searchTimer;
-    private ArrayList<TLObject> searchResult = new ArrayList<>();
-    private ArrayList<CharSequence> searchResultNames = new ArrayList<>();
-    private ArrayList<MessageObject> searchResultMessages = new ArrayList<>();
-    private ArrayList<String> searchResultHashtags = new ArrayList<>();
-    private String lastSearchText;
-    private long reqId = 0;
-    private int lastReqId;
-    private MessagesActivitySearchAdapterDelegate delegate;
-    private int needMessagesSearch;
-    private boolean messagesSearchEndReached;
-    private String lastMessagesSearchString;
-    private int lastSearchId = 0;
-
-    private class Holder extends RecyclerView.ViewHolder {
-
-        public Holder(View itemView) {
-            super(itemView);
-        }
-    }
-
-    private class DialogSearchResult {
-        public TLObject object;
-        public int date;
-        public CharSequence name;
-    }
-
-    public interface MessagesActivitySearchAdapterDelegate {
-        void searchStateChanged(boolean searching);
-    }
-
-    public DialogsSearchAdapter(Context context, int messagesSearch) {
-        mContext = context;
-        needMessagesSearch = messagesSearch;
-    }
-
-    public void setDelegate(MessagesActivitySearchAdapterDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public boolean isMessagesSearchEndReached() {
-        return messagesSearchEndReached;
-    }
-
-    public void loadMoreSearchMessages() {
-        searchMessagesInternal(lastMessagesSearchString);
-    }
-
-    public String getLastSearchString() {
-        return lastMessagesSearchString;
-    }
-
-    private void searchMessagesInternal(final String query) {
-        if (needMessagesSearch == 0) {
-            return;
-        }
-        if (reqId != 0) {
-            ConnectionsManager.getInstance().cancelRpc(reqId, true);
-            reqId = 0;
-        }
-        if (query == null || query.length() == 0) {
-            searchResultMessages.clear();
-            lastReqId = 0;
-            lastMessagesSearchString = null;
-            notifyDataSetChanged();
-            if (delegate != null) {
-                delegate.searchStateChanged(false);
-            }
-            return;
-        }
-        final TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
-        req.limit = 20;
-        req.peer = new TLRPC.TL_inputPeerEmpty();
-        req.q = query;
-        if (lastMessagesSearchString != null && query.equals(lastMessagesSearchString) && !searchResultMessages.isEmpty()) {
-            req.max_id = searchResultMessages.get(searchResultMessages.size() - 1).getId();
-        }
-        lastMessagesSearchString = query;
-        req.filter = new TLRPC.TL_inputMessagesFilterEmpty();
-        final int currentReqId = ++lastReqId;
-        if (delegate != null) {
-            delegate.searchStateChanged(true);
-        }
-        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (currentReqId == lastReqId) {
-                            if (error == null) {
-                                TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
-                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
-                                MessagesController.getInstance().putUsers(res.users, false);
-                                MessagesController.getInstance().putChats(res.chats, false);
-                                if (req.max_id == 0) {
-                                    searchResultMessages.clear();
-                                }
-                                for (TLRPC.Message message : res.messages) {
-                                    searchResultMessages.add(new MessageObject(message, null, false));
-                                }
-                                messagesSearchEndReached = res.messages.size() != 20;
-                                notifyDataSetChanged();
-                            }
-                        }
-                        if (delegate != null) {
-                            delegate.searchStateChanged(false);
-                        }
-                        reqId = 0;
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-    }
-
-    private void searchDialogsInternal(final String query, final boolean serverOnly, final int searchId) {
-        if (needMessagesSearch == 2) {
-            return;
-        }
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    String search1 = query.trim().toLowerCase();
-                    if (search1.length() == 0) {
-                        lastSearchId = -1;
-                        updateSearchResults(new ArrayList<TLObject>(), new ArrayList<CharSequence>(), new ArrayList<TLRPC.User>(), lastSearchId);
-                        return;
-                    }
-                    String search2 = LocaleController.getInstance().getTranslitString(search1);
-                    if (search1.equals(search2) || search2.length() == 0) {
-                        search2 = null;
-                    }
-                    String search[] = new String[1 + (search2 != null ? 1 : 0)];
-                    search[0] = search1;
-                    if (search2 != null) {
-                        search[1] = search2;
-                    }
-
-                    ArrayList<Integer> usersToLoad = new ArrayList<>();
-                    ArrayList<Integer> chatsToLoad = new ArrayList<>();
-                    ArrayList<Integer> encryptedToLoad = new ArrayList<>();
-                    ArrayList<TLRPC.User> encUsers = new ArrayList<>();
-                    int resultCount = 0;
-
-                    HashMap<Long, DialogSearchResult> dialogsResult = new HashMap<>();
-                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 200");
-                    while (cursor.next()) {
-                        long id = cursor.longValue(0);
-                        DialogSearchResult dialogSearchResult = new DialogSearchResult();
-                        dialogSearchResult.date = cursor.intValue(1);
-                        dialogsResult.put(id, dialogSearchResult);
-
-                        int lower_id = (int) id;
-                        int high_id = (int) (id >> 32);
-                        if (lower_id != 0) {
-                            if (high_id == 1) {
-                                if (!serverOnly && !chatsToLoad.contains(lower_id)) {
-                                    chatsToLoad.add(lower_id);
-                                }
-                            } else {
-                                if (lower_id > 0) {
-                                    if (!usersToLoad.contains(lower_id)) {
-                                        usersToLoad.add(lower_id);
-                                    }
-                                } else {
-                                    if (!chatsToLoad.contains(-lower_id)) {
-                                        chatsToLoad.add(-lower_id);
-                                    }
-                                }
-                            }
-                        } else if (!serverOnly) {
-                            if (!encryptedToLoad.contains(high_id)) {
-                                encryptedToLoad.add(high_id);
-                            }
-                        }
-                    }
-                    cursor.dispose();
-
-                    if (!usersToLoad.isEmpty()) {
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, status, name FROM users WHERE uid IN(%s)", TextUtils.join(",", usersToLoad)));
-                        while (cursor.next()) {
-                            String name = cursor.stringValue(2);
-                            String tName = LocaleController.getInstance().getTranslitString(name);
-                            if (name.equals(tName)) {
-                                tName = null;
-                            }
-                            String username = null;
-                            int usernamePos = name.lastIndexOf(";;;");
-                            if (usernamePos != -1) {
-                                username = name.substring(usernamePos + 3);
-                            }
-                            int found = 0;
-                            for (String q : search) {
-                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                    found = 1;
-                                } else if (username != null && username.startsWith(q)) {
-                                    found = 2;
-                                }
-                                if (found != 0) {
-                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                        TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
-                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long) user.id);
-                                        if (user.status != null) {
-                                            user.status.expires = cursor.intValue(1);
-                                        }
-                                        if (found == 1) {
-                                            dialogSearchResult.name = AndroidUtilities.generateSearchName(user.first_name, user.last_name, q);
-                                        } else {
-                                            dialogSearchResult.name = AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q);
-                                        }
-                                        dialogSearchResult.object = user;
-                                        resultCount++;
-                                    }
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                    break;
-                                }
-                            }
-                        }
-                        cursor.dispose();
-                    }
-
-                    if (!chatsToLoad.isEmpty()) {
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, name FROM chats WHERE uid IN(%s)", TextUtils.join(",", chatsToLoad)));
-                        while (cursor.next()) {
-                            String name = cursor.stringValue(1);
-                            String tName = LocaleController.getInstance().getTranslitString(name);
-                            if (name.equals(tName)) {
-                                tName = null;
-                            }
-                            for (String q : search) {
-                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                        TLRPC.Chat chat = TLRPC.Chat.TLdeserialize(data, data.readInt32(false), false);
-                                        long dialog_id;
-                                        if (chat.id > 0) {
-                                            dialog_id = -chat.id;
-                                        } else {
-                                            dialog_id = AndroidUtilities.makeBroadcastId(chat.id);
-                                        }
-                                        DialogSearchResult dialogSearchResult = dialogsResult.get(dialog_id);
-                                        dialogSearchResult.name = AndroidUtilities.generateSearchName(chat.title, null, q);
-                                        dialogSearchResult.object = chat;
-                                        resultCount++;
-                                    }
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                    break;
-                                }
-                            }
-                        }
-                        cursor.dispose();
-                    }
-
-                    if (!encryptedToLoad.isEmpty()) {
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)", TextUtils.join(",", encryptedToLoad)));
-                        while (cursor.next()) {
-                            String name = cursor.stringValue(1);
-                            String tName = LocaleController.getInstance().getTranslitString(name);
-                            if (name.equals(tName)) {
-                                tName = null;
-                            }
-
-                            String username = null;
-                            int usernamePos = name.lastIndexOf(";;;");
-                            if (usernamePos != -1) {
-                                username = name.substring(usernamePos + 2);
-                            }
-                            int found = 0;
-                            for (String q : search) {
-                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                    found = 1;
-                                } else if (username != null && username.startsWith(q)) {
-                                    found = 2;
-                                }
-
-                                if (found != 0) {
-                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                    ByteBufferDesc data2 = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(6));
-                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0 && cursor.byteBufferValue(6, data2.buffer) != 0) {
-                                        TLRPC.EncryptedChat chat = TLRPC.EncryptedChat.TLdeserialize(data, data.readInt32(false), false);
-                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long) chat.id << 32);
-
-                                        chat.user_id = cursor.intValue(2);
-                                        chat.a_or_b = cursor.byteArrayValue(3);
-                                        chat.auth_key = cursor.byteArrayValue(4);
-                                        chat.ttl = cursor.intValue(5);
-                                        chat.layer = cursor.intValue(8);
-                                        chat.seq_in = cursor.intValue(9);
-                                        chat.seq_out = cursor.intValue(10);
-                                        int use_count = cursor.intValue(11);
-                                        chat.key_use_count_in = (short) (use_count >> 16);
-                                        chat.key_use_count_out = (short) (use_count);
-                                        chat.exchange_id = cursor.longValue(12);
-                                        chat.key_create_date = cursor.intValue(13);
-                                        chat.future_key_fingerprint = cursor.longValue(14);
-                                        chat.future_auth_key = cursor.byteArrayValue(15);
-                                        chat.key_hash = cursor.byteArrayValue(16);
-
-                                        TLRPC.User user = TLRPC.User.TLdeserialize(data2, data2.readInt32(false), false);
-                                        if (user.status != null) {
-                                            user.status.expires = cursor.intValue(7);
-                                        }
-                                        if (found == 1) {
-                                            dialogSearchResult.name = AndroidUtilities.replaceTags("<c#ff00a60e>" + ContactsController.formatName(user.first_name, user.last_name) + "</c>");
-                                        } else {
-                                            dialogSearchResult.name = AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q);
-                                        }
-                                        dialogSearchResult.object = chat;
-                                        encUsers.add(user);
-                                        resultCount++;
-                                    }
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data2);
-                                    break;
-                                }
-                            }
-                        }
-                        cursor.dispose();
-                    }
-
-                    ArrayList<DialogSearchResult> searchResults = new ArrayList<>(resultCount);
-                    for (DialogSearchResult dialogSearchResult : dialogsResult.values()) {
-                        if (dialogSearchResult.object != null && dialogSearchResult.name != null) {
-                            searchResults.add(dialogSearchResult);
-                        }
-                    }
-
-                    Collections.sort(searchResults, new Comparator<DialogSearchResult>() {
-                        @Override
-                        public int compare(DialogSearchResult lhs, DialogSearchResult rhs) {
-                            if (lhs.date < rhs.date) {
-                                return 1;
-                            } else if (lhs.date > rhs.date) {
-                                return -1;
-                            }
-                            return 0;
-                        }
-                    });
-
-                    ArrayList<TLObject> resultArray = new ArrayList<>();
-                    ArrayList<CharSequence> resultArrayNames = new ArrayList<>();
-
-                    for (DialogSearchResult dialogSearchResult : searchResults) {
-                        resultArray.add(dialogSearchResult.object);
-                        resultArrayNames.add(dialogSearchResult.name);
-                    }
-
-                    cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid");
-                    while (cursor.next()) {
-                        int uid = cursor.intValue(3);
-                        if (dialogsResult.containsKey((long) uid)) {
-                            continue;
-                        }
-                        String name = cursor.stringValue(2);
-                        String tName = LocaleController.getInstance().getTranslitString(name);
-                        if (name.equals(tName)) {
-                            tName = null;
-                        }
-                        String username = null;
-                        int usernamePos = name.lastIndexOf(";;;");
-                        if (usernamePos != -1) {
-                            username = name.substring(usernamePos + 3);
-                        }
-                        int found = 0;
-                        for (String q : search) {
-                            if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                found = 1;
-                            } else if (username != null && username.startsWith(q)) {
-                                found = 2;
-                            }
-                            if (found != 0) {
-                                ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
-                                    if (user.status != null) {
-                                        user.status.expires = cursor.intValue(1);
-                                    }
-                                    if (found == 1) {
-                                        resultArrayNames.add(AndroidUtilities.generateSearchName(user.first_name, user.last_name, q));
-                                    } else {
-                                        resultArrayNames.add(AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q));
-                                    }
-                                    resultArray.add(user);
-                                }
-                                MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                                break;
-                            }
-                        }
-                    }
-                    cursor.dispose();
-
-                    updateSearchResults(resultArray, resultArrayNames, encUsers, searchId);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private void updateSearchResults(final ArrayList<TLObject> result, final ArrayList<CharSequence> names, final ArrayList<TLRPC.User> encUsers, final int searchId) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (searchId != lastSearchId) {
-                    return;
-                }
-                for (TLObject obj : result) {
-                    if (obj instanceof TLRPC.User) {
-                        TLRPC.User user = (TLRPC.User) obj;
-                        MessagesController.getInstance().putUser(user, true);
-                    } else if (obj instanceof TLRPC.Chat) {
-                        TLRPC.Chat chat = (TLRPC.Chat) obj;
-                        MessagesController.getInstance().putChat(chat, true);
-                    } else if (obj instanceof TLRPC.EncryptedChat) {
-                        TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) obj;
-                        MessagesController.getInstance().putEncryptedChat(chat, true);
-                    }
-                }
-                for (TLRPC.User user : encUsers) {
-                    MessagesController.getInstance().putUser(user, true);
-                }
-                searchResult = result;
-                searchResultNames = names;
-                notifyDataSetChanged();
-            }
-        });
-    }
-
-    public String getLastSearchText() {
-        return lastSearchText;
-    }
-
-    public boolean isGlobalSearch(int i) {
-        return i > searchResult.size() && i <= globalSearch.size() + searchResult.size();
-    }
-
-    @Override
-    public void clearRecentHashtags() {
-        super.clearRecentHashtags();
-        searchResultHashtags.clear();
-        notifyDataSetChanged();
-    }
-
-    @Override
-    protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, HashtagObject> hashMap) {
-        super.setHashtags(arrayList, hashMap);
-        for (HashtagObject hashtagObject : arrayList) {
-            searchResultHashtags.add(hashtagObject.hashtag);
-        }
-        if (delegate != null) {
-            delegate.searchStateChanged(false);
-        }
-        notifyDataSetChanged();
-    }
-
-    public void searchDialogs(final String query, final boolean serverOnly) {
-        if (query != null && lastSearchText != null && query.equals(lastSearchText)) {
-            return;
-        }
-        try {
-            if (searchTimer != null) {
-                searchTimer.cancel();
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        if (query == null || query.length() == 0) {
-            hashtagsLoadedFromDb = false;
-            searchResult.clear();
-            searchResultNames.clear();
-            searchResultHashtags.clear();
-            if (needMessagesSearch != 2) {
-                queryServerSearch(null);
-            }
-            searchMessagesInternal(null);
-            notifyDataSetChanged();
-        } else {
-            if (query.startsWith("#") && query.length() == 1) {
-                messagesSearchEndReached = true;
-                if (!hashtagsLoadedFromDb) {
-                    loadRecentHashtags();
-                    if (delegate != null) {
-                        delegate.searchStateChanged(true);
-                    }
-                    notifyDataSetChanged();
-                    return;
-                }
-                searchResultMessages.clear();
-                searchResultHashtags.clear();
-                for (HashtagObject hashtagObject : hashtags) {
-                    searchResultHashtags.add(hashtagObject.hashtag);
-                }
-                if (delegate != null) {
-                    delegate.searchStateChanged(false);
-                }
-                notifyDataSetChanged();
-                return;
-            } else {
-                searchResultHashtags.clear();
-            }
-            final int searchId = ++lastSearchId;
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
-                        searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    searchDialogsInternal(query, serverOnly, searchId);
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (needMessagesSearch != 2) {
-                                queryServerSearch(query);
-                            }
-                            searchMessagesInternal(query);
-                        }
-                    });
-                }
-            }, 200, 300);
-        }
-    }
-
-    @Override
-    public int getItemCount() {
-        if (!searchResultHashtags.isEmpty()) {
-            return searchResultHashtags.size() + 1;
-        }
-        int count = searchResult.size();
-        int globalCount = globalSearch.size();
-        int messagesCount = searchResultMessages.size();
-        if (globalCount != 0) {
-            count += globalCount + 1;
-        }
-        if (messagesCount != 0) {
-            count += messagesCount + 1 + (messagesSearchEndReached ? 0 : 1);
-        }
-        return count;
-    }
-
-    public Object getItem(int i) {
-        if (!searchResultHashtags.isEmpty()) {
-            return searchResultHashtags.get(i - 1);
-        }
-        int localCount = searchResult.size();
-        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
-        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
-        if (i >= 0 && i < localCount) {
-            return searchResult.get(i);
-        } else if (i > localCount && i < globalCount + localCount) {
-            return globalSearch.get(i - localCount - 1);
-        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
-            return searchResultMessages.get(i - localCount - globalCount - 1);
-        }
-        return null;
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return i;
-    }
-
-    @Override
-    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-        View view = null;
-        switch (viewType) {
-            case 0:
-                view = new ProfileSearchCell(mContext);
-                view.setBackgroundResource(R.drawable.list_selector);
-                break;
-            case 1:
-                view = new GreySectionCell(mContext);
-                break;
-            case 2:
-                view = new DialogCell(mContext);
-                break;
-            case 3:
-                view = new LoadingCell(mContext);
-                break;
-            case 4:
-                view = new HashtagSearchCell(mContext);
-                break;
-        }
-        return new Holder(view);
-    }
-
-    @Override
-    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
-        switch (holder.getItemViewType()) {
-            case 0: {
-                ProfileSearchCell cell = (ProfileSearchCell) holder.itemView;
-
-                TLRPC.User user = null;
-                TLRPC.Chat chat = null;
-                TLRPC.EncryptedChat encryptedChat = null;
-
-                int localCount = searchResult.size();
-                int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
-
-                cell.useSeparator = (position != getItemCount() - 1 && position != localCount - 1 && position != localCount + globalCount - 1);
-                Object obj = getItem(position);
-                if (obj instanceof TLRPC.User) {
-                    user = (TLRPC.User) obj;
-                } else if (obj instanceof TLRPC.Chat) {
-                    chat = MessagesController.getInstance().getChat(((TLRPC.Chat) obj).id);
-                } else if (obj instanceof TLRPC.EncryptedChat) {
-                    encryptedChat = MessagesController.getInstance().getEncryptedChat(((TLRPC.EncryptedChat) obj).id);
-                    user = MessagesController.getInstance().getUser(encryptedChat.user_id);
-                }
-
-                CharSequence username = null;
-                CharSequence name = null;
-                if (position < searchResult.size()) {
-                    name = searchResultNames.get(position);
-                    if (name != null && user != null && user.username != null && user.username.length() > 0) {
-                        if (name.toString().startsWith("@" + user.username)) {
-                            username = name;
-                            name = null;
-                        }
-                    }
-                } else if (position > searchResult.size() && user != null && user.username != null) {
-                    String foundUserName = lastFoundUsername;
-                    if (foundUserName.startsWith("@")) {
-                        foundUserName = foundUserName.substring(1);
-                    }
-                    try {
-                        username = AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>@%s</c>%s", user.username.substring(0, foundUserName.length()), user.username.substring(foundUserName.length())));
-                    } catch (Exception e) {
-                        username = user.username;
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                cell.setData(user, chat, encryptedChat, name, username);
-                break;
-            }
-            case 1: {
-                GreySectionCell cell = (GreySectionCell) holder.itemView;
-                if (!searchResultHashtags.isEmpty()) {
-                    cell.setText(LocaleController.getString("Hashtags", R.string.Hashtags).toUpperCase());
-                }  else if (!globalSearch.isEmpty() && position == searchResult.size()) {
-                    cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
-                } else {
-                    cell.setText(LocaleController.getString("SearchMessages", R.string.SearchMessages));
-                }
-                break;
-            }
-            case 2: {
-                DialogCell cell = (DialogCell) holder.itemView;
-                cell.useSeparator = (position != getItemCount() - 1);
-                MessageObject messageObject = (MessageObject)getItem(position);
-                cell.setDialog(messageObject.getDialogId(), messageObject, messageObject.messageOwner.date);
-                break;
-            }
-            case 3: {
-                break;
-            }
-            case 4: {
-                HashtagSearchCell cell = (HashtagSearchCell) holder.itemView;
-                cell.setText(searchResultHashtags.get(position - 1));
-                cell.setNeedDivider(position != searchResultHashtags.size());
-                break;
-            }
-        }
-    }
-
-    @Override
-    public int getItemViewType(int i) {
-        if (!searchResultHashtags.isEmpty()) {
-            return i == 0 ? 1 : 4;
-        }
-        int localCount = searchResult.size();
-        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
-        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
-        if (i >= 0 && i < localCount || i > localCount && i < globalCount + localCount) {
-            return 0;
-        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
-            return 2;
-        } else if (messagesCount != 0 && i == globalCount + localCount + messagesCount) {
-            return 3;
-        }
-        return 1;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
deleted file mode 100644
index 9894b9592..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
+++ /dev/null
@@ -1,304 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.Cells.GreySectionCell;
-import org.telegram.ui.Cells.ProfileSearchCell;
-import org.telegram.ui.Cells.UserCell;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class SearchAdapter extends BaseSearchAdapter {
-    private Context mContext;
-    private HashMap<Integer, TLRPC.User> ignoreUsers;
-    private ArrayList<TLRPC.User> searchResult = new ArrayList<>();
-    private ArrayList<CharSequence> searchResultNames = new ArrayList<>();
-    private HashMap<Integer, ?> checkedMap;
-    private Timer searchTimer;
-    private boolean allowUsernameSearch;
-    private boolean useUserCell;
-
-    public SearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1, boolean usernameSearch) {
-        mContext = context;
-        ignoreUsers = arg1;
-        allowUsernameSearch = usernameSearch;
-    }
-
-    public void setCheckedMap(HashMap<Integer, ?> map) {
-        checkedMap = map;
-    }
-
-    public void setUseUserCell(boolean value) {
-        useUserCell = value;
-    }
-
-    public void searchDialogs(final String query) {
-        try {
-            if (searchTimer != null) {
-                searchTimer.cancel();
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        if (query == null) {
-            searchResult.clear();
-            searchResultNames.clear();
-            if (allowUsernameSearch) {
-                queryServerSearch(null);
-            }
-            notifyDataSetChanged();
-        } else {
-            searchTimer = new Timer();
-            searchTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    try {
-                        searchTimer.cancel();
-                        searchTimer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    processSearch(query);
-                }
-            }, 200, 300);
-        }
-    }
-
-    private void processSearch(final String query) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (allowUsernameSearch) {
-                    queryServerSearch(query);
-                }
-                final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<>();
-                contactsCopy.addAll(ContactsController.getInstance().contacts);
-                Utilities.searchQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        String search1 = query.trim().toLowerCase();
-                        if (search1.length() == 0) {
-                            updateSearchResults(new ArrayList<TLRPC.User>(), new ArrayList<CharSequence>());
-                            return;
-                        }
-                        String search2 = LocaleController.getInstance().getTranslitString(search1);
-                        if (search1.equals(search2) || search2.length() == 0) {
-                            search2 = null;
-                        }
-                        String search[] = new String[1 + (search2 != null ? 1 : 0)];
-                        search[0] = search1;
-                        if (search2 != null) {
-                            search[1] = search2;
-                        }
-
-                        ArrayList<TLRPC.User> resultArray = new ArrayList<>();
-                        ArrayList<CharSequence> resultArrayNames = new ArrayList<>();
-
-                        for (TLRPC.TL_contact contact : contactsCopy) {
-                            TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
-                            if (user.id == UserConfig.getClientUserId()) {
-                                continue;
-                            }
-
-                            String name = ContactsController.formatName(user.first_name, user.last_name).toLowerCase();
-                            String tName = LocaleController.getInstance().getTranslitString(name);
-                            if (name.equals(tName)) {
-                                tName = null;
-                            }
-
-                            int found = 0;
-                            for (String q : search) {
-                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
-                                    found = 1;
-                                } else if (user.username != null && user.username.startsWith(q)) {
-                                    found = 2;
-                                }
-
-                                if (found != 0) {
-                                    if (found == 1) {
-                                        resultArrayNames.add(AndroidUtilities.generateSearchName(user.first_name, user.last_name, q));
-                                    } else {
-                                        resultArrayNames.add(AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q));
-                                    }
-                                    resultArray.add(user);
-                                    break;
-                                }
-                            }
-                        }
-
-                        updateSearchResults(resultArray, resultArrayNames);
-                    }
-                });
-            }
-        });
-    }
-
-    private void updateSearchResults(final ArrayList<TLRPC.User> users, final ArrayList<CharSequence> names) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                searchResult = users;
-                searchResultNames = names;
-                notifyDataSetChanged();
-            }
-        });
-    }
-
-    @Override
-    public boolean areAllItemsEnabled() {
-        return false;
-    }
-
-    @Override
-    public boolean isEnabled(int i) {
-        return i != searchResult.size();
-    }
-
-    @Override
-    public int getCount() {
-        int count = searchResult.size();
-        int globalCount = globalSearch.size();
-        if (globalCount != 0) {
-            count += globalCount + 1;
-        }
-        return count;
-    }
-
-    public boolean isGlobalSearch(int i) {
-        int localCount = searchResult.size();
-        int globalCount = globalSearch.size();
-        if (i >= 0 && i < localCount) {
-            return false;
-        } else if (i > localCount && i <= globalCount + localCount) {
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    public TLRPC.User getItem(int i) {
-        int localCount = searchResult.size();
-        int globalCount = globalSearch.size();
-        if (i >= 0 && i < localCount) {
-            return searchResult.get(i);
-        } else if (i > localCount && i <= globalCount + localCount) {
-            return globalSearch.get(i - localCount - 1);
-        }
-        return null;
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return i;
-    }
-
-    @Override
-    public boolean hasStableIds() {
-        return true;
-    }
-
-    @Override
-    public View getView(int i, View view, ViewGroup viewGroup) {
-        if (i == searchResult.size()) {
-            if (view == null) {
-                view = new GreySectionCell(mContext);
-                ((GreySectionCell) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
-            }
-        } else {
-            if (view == null) {
-                if (useUserCell) {
-                    view = new UserCell(mContext, 1);
-                    if (checkedMap != null) {
-                        ((UserCell) view).setChecked(false, false);
-                    }
-                } else {
-                    view = new ProfileSearchCell(mContext);
-                }
-            }
-
-            TLRPC.User user = getItem(i);
-            if (user != null) {
-                CharSequence username = null;
-                CharSequence name = null;
-                if (i < searchResult.size()) {
-                    name = searchResultNames.get(i);
-                    if (name != null && user != null && user.username != null && user.username.length() > 0) {
-                        if (name.toString().startsWith("@" + user.username)) {
-                            username = name;
-                            name = null;
-                        }
-                    }
-                } else if (i > searchResult.size() && user.username != null) {
-                    String foundUserName = lastFoundUsername;
-                    if (foundUserName.startsWith("@")) {
-                        foundUserName = foundUserName.substring(1);
-                    }
-                    try {
-                        username = AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>@%s</c>%s", user.username.substring(0, foundUserName.length()), user.username.substring(foundUserName.length())));
-                    } catch (Exception e) {
-                        username = user.username;
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                if (useUserCell) {
-                    ((UserCell) view).setData(user, name, username, 0);
-                    if (checkedMap != null) {
-                        ((UserCell) view).setChecked(checkedMap.containsKey(user.id), false);
-                    }
-                } else {
-                    ((ProfileSearchCell) view).setData(user, null, null, name, username);
-                    ((ProfileSearchCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
-                    if (ignoreUsers != null) {
-                        if (ignoreUsers.containsKey(user.id)) {
-                            ((ProfileSearchCell) view).drawAlpha = 0.5f;
-                        } else {
-                            ((ProfileSearchCell) view).drawAlpha = 1.0f;
-                        }
-                    }
-                }
-            }
-        }
-        return view;
-    }
-
-    @Override
-    public int getItemViewType(int i) {
-        if (i == searchResult.size()) {
-            return 1;
-        }
-        return 0;
-    }
-
-    @Override
-    public int getViewTypeCount() {
-        return 2;
-    }
-
-    @Override
-    public boolean isEmpty() {
-        return searchResult.isEmpty() && globalSearch.isEmpty();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
deleted file mode 100644
index 38bb738f5..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.android.NotificationCenter;
-import org.telegram.android.query.StickersQuery;
-import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Cells.StickerCell;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.HashMap;
-
-public class StickersAdapter extends RecyclerView.Adapter implements NotificationCenter.NotificationCenterDelegate {
-
-    private Context mContext;
-    private ArrayList<TLRPC.Document> stickers;
-    private ArrayList<String> stickersToLoad = new ArrayList<>();
-    private StickersAdapterDelegate delegate;
-    private String lastSticker;
-    private boolean visible;
-
-    public interface StickersAdapterDelegate {
-        void needChangePanelVisibility(boolean show);
-    }
-
-    private class Holder extends RecyclerView.ViewHolder {
-
-        public Holder(View itemView) {
-            super(itemView);
-        }
-    }
-
-    public StickersAdapter(Context context, StickersAdapterDelegate delegate) {
-        mContext = context;
-        this.delegate = delegate;
-        StickersQuery.checkStickers();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
-    }
-
-    public void destroy() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
-    }
-
-    @Override
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.FileDidLoaded || id == NotificationCenter.FileDidFailedLoad) {
-            if (stickers != null && !stickers.isEmpty() && !stickersToLoad.isEmpty() && visible) {
-                String fileName = (String) args[0];
-                stickersToLoad.remove(fileName);
-                if (stickersToLoad.isEmpty()) {
-                    delegate.needChangePanelVisibility(stickers != null && !stickers.isEmpty() && stickersToLoad.isEmpty());
-                }
-            }
-        }
-    }
-
-    private boolean checkStickerFilesExistAndDownload() {
-        if (stickers == null) {
-            return false;
-        }
-        stickersToLoad.clear();
-        int size = Math.min(10, stickers.size());
-        for (int a = 0; a < size; a++) {
-            TLRPC.Document document = stickers.get(a);
-            File f = FileLoader.getPathToAttach(document.thumb, "webp", true);
-            if (!f.exists()) {
-                stickersToLoad.add(FileLoader.getAttachFileName(document.thumb, "webp"));
-                FileLoader.getInstance().loadFile(document.thumb.location, "webp", 0, true);
-            }
-        }
-        return stickersToLoad.isEmpty();
-    }
-
-    public void loadStikersForEmoji(CharSequence emoji) {
-        boolean search = emoji != null && emoji.length() != 0 && emoji.length() <= 2;
-        if (search) {
-            lastSticker = emoji.toString();
-            HashMap<String, ArrayList<TLRPC.Document>> allStickers = StickersQuery.getAllStickers();
-            if (allStickers != null) {
-                ArrayList<TLRPC.Document> newStickers = allStickers.get(lastSticker);
-                if (stickers != null && newStickers == null) {
-                    if (visible) {
-                        delegate.needChangePanelVisibility(false);
-                        visible = false;
-                    }
-                } else {
-                    stickers = newStickers;
-                    checkStickerFilesExistAndDownload();
-                    delegate.needChangePanelVisibility(stickers != null && !stickers.isEmpty() && stickersToLoad.isEmpty());
-                    notifyDataSetChanged();
-                    visible = true;
-                }
-            }
-        }
-        if (!search) {
-            if (visible && stickers != null) {
-                visible = false;
-                delegate.needChangePanelVisibility(false);
-            }
-        }
-    }
-
-    public void clearStickers() {
-        lastSticker = null;
-        stickers = null;
-        stickersToLoad.clear();
-        notifyDataSetChanged();
-    }
-
-    @Override
-    public int getItemCount() {
-        return stickers != null ? stickers.size() : 0;
-    }
-
-    public TLRPC.Document getItem(int i) {
-        return stickers != null && i >= 0 && i < stickers.size() ? stickers.get(i) : null;
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return i;
-    }
-
-    @Override
-    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
-        StickerCell view = new StickerCell(mContext);
-        return new Holder(view);
-    }
-
-    @Override
-    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
-        int side = 0;
-        if (i == 0) {
-            if (stickers.size() == 1) {
-                side = 2;
-            } else {
-                side = -1;
-            }
-        } else if (i == stickers.size() - 1) {
-            side = 1;
-        }
-        ((StickerCell) viewHolder.itemView).setSticker(stickers.get(i), side);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AddMemberCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AddMemberCell.java
deleted file mode 100644
index a4cff7ad0..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AddMemberCell.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.SimpleTextView;
-
-public class AddMemberCell extends FrameLayout {
-
-    public AddMemberCell(Context context) {
-        super(context);
-
-        ImageView imageView = new ImageView(context);
-        imageView.setImageResource(R.drawable.addmember);
-        imageView.setScaleType(ImageView.ScaleType.CENTER);
-        addView(imageView, LayoutHelper.createFrame(48, 48, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 68, 8, LocaleController.isRTL ? 68 : 0, 0));
-
-        SimpleTextView textView = new SimpleTextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(17);
-        textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 20, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 28 : 129, 22.5f, LocaleController.isRTL ? 129 : 28, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
deleted file mode 100644
index 12c749222..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ /dev/null
@@ -1,280 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.Spannable;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.style.URLSpan;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.PhotoViewer;
-import org.telegram.ui.Components.AvatarDrawable;
-
-public class ChatActionCell extends BaseCell {
-
-    public interface ChatActionCellDelegate {
-        void didClickedImage(ChatActionCell cell);
-        void didLongPressed(ChatActionCell cell);
-        void needOpenUserProfile(int uid);
-    }
-
-    private static TextPaint textPaint;
-
-    private URLSpan pressedLink;
-
-    private ImageReceiver imageReceiver;
-    private AvatarDrawable avatarDrawable;
-    private StaticLayout textLayout;
-    private int textWidth = 0;
-    private int textHeight = 0;
-    private int textX = 0;
-    private int textY = 0;
-    private int textXLeft = 0;
-    private int previousWidth = 0;
-    private boolean imagePressed = false;
-
-    private MessageObject currentMessageObject;
-
-    private ChatActionCellDelegate delegate;
-
-    public ChatActionCell(Context context) {
-        super(context);
-        if (textPaint == null) {
-            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            textPaint.setColor(0xffffffff);
-            textPaint.linkColor = 0xffffffff;
-        }
-        imageReceiver = new ImageReceiver(this);
-        imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
-        avatarDrawable = new AvatarDrawable();
-        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
-    }
-
-    public void setDelegate(ChatActionCellDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject == messageObject) {
-            return;
-        }
-        currentMessageObject = messageObject;
-        previousWidth = 0;
-        if (currentMessageObject.type == 11) {
-            int id = 0;
-            if (messageObject.messageOwner.to_id != null) {
-                if (messageObject.messageOwner.to_id.chat_id != 0) {
-                    id = messageObject.messageOwner.to_id.chat_id;
-                } else {
-                    id = messageObject.messageOwner.to_id.user_id;
-                    if (id == UserConfig.getClientUserId()) {
-                        id = messageObject.messageOwner.from_id;
-                    }
-                }
-            }
-            avatarDrawable.setInfo(id, null, null, false);
-            if (currentMessageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                imageReceiver.setImage(currentMessageObject.messageOwner.action.newUserPhoto.photo_small, "50_50", avatarDrawable, null, false);
-            } else {
-                TLRPC.PhotoSize photo = FileLoader.getClosestPhotoSizeWithSize(currentMessageObject.photoThumbs, AndroidUtilities.dp(64));
-                if (photo != null) {
-                    imageReceiver.setImage(photo.location, "50_50", avatarDrawable, null, false);
-                } else {
-                    imageReceiver.setImageBitmap(avatarDrawable);
-                }
-            }
-            imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
-        } else {
-            imageReceiver.setImageBitmap((Bitmap)null);
-        }
-        requestLayout();
-    }
-
-    public MessageObject getMessageObject() {
-        return currentMessageObject;
-    }
-
-    public ImageReceiver getPhotoImage() {
-        return imageReceiver;
-    }
-
-    @Override
-    protected void onLongPress() {
-        if (delegate != null) {
-            delegate.didLongPressed(this);
-        }
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-
-        boolean result = false;
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (delegate != null) {
-                if (currentMessageObject.type == 11 && imageReceiver.isInsideImage(x, y)) {
-                    imagePressed = true;
-                    result = true;
-                }
-                if (result) {
-                    startCheckLongPress();
-                }
-            }
-        } else {
-            if (event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (imagePressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    imagePressed = false;
-                    if (delegate != null) {
-                        delegate.didClickedImage(this);
-                        playSoundEffect(SoundEffectConstants.CLICK);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    imagePressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!imageReceiver.isInsideImage(x, y)) {
-                        imagePressed = false;
-                    }
-                }
-            }
-        }
-        if (!result) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN || pressedLink != null && event.getAction() == MotionEvent.ACTION_UP) {
-                if (x >= textX && y >= textY && x <= textX + textWidth && y <= textY + textHeight) {
-                    y -= textY;
-                    x -= textXLeft;
-
-                    final int line = textLayout.getLineForVertical((int)y);
-                    final int off = textLayout.getOffsetForHorizontal(line, x);
-                    final float left = textLayout.getLineLeft(line);
-                    if (left <= x && left + textLayout.getLineWidth(line) >= x) {
-                        Spannable buffer = (Spannable)currentMessageObject.messageText;
-                        URLSpan[] link = buffer.getSpans(off, off, URLSpan.class);
-
-                        if (link.length != 0) {
-                            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                                pressedLink = link[0];
-                                result = true;
-                            } else {
-                                if (link[0] == pressedLink) {
-                                    if (delegate != null) {
-                                        delegate.needOpenUserProfile(Integer.parseInt(link[0].getURL()));
-                                    }
-                                    result = true;
-                                }
-                            }
-                        } else {
-                            pressedLink = null;
-                        }
-                    } else {
-                        pressedLink = null;
-                    }
-                } else {
-                    pressedLink = null;
-                }
-            }
-        }
-
-        if (!result) {
-            result = super.onTouchEvent(event);
-        }
-
-        return result;
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (currentMessageObject == null) {
-            setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), textHeight + AndroidUtilities.dp(14));
-            return;
-        }
-        int width = Math.max(AndroidUtilities.dp(30), MeasureSpec.getSize(widthMeasureSpec));
-        if (width != previousWidth) {
-            previousWidth = width;
-
-            textLayout = new StaticLayout(currentMessageObject.messageText, textPaint, width - AndroidUtilities.dp(30), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
-            textHeight = 0;
-            textWidth = 0;
-            try {
-                int linesCount = textLayout.getLineCount();
-                for (int a = 0; a < linesCount; a++) {
-                    float lineWidth;
-                    float lineLeft = 0;
-                    try {
-                        lineWidth = textLayout.getLineWidth(a);
-                        textHeight = (int)Math.max(textHeight, Math.ceil(textLayout.getLineBottom(a)));
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                        return;
-                    }
-                    textWidth = (int)Math.max(textWidth, Math.ceil(lineWidth));
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            textX = (width - textWidth) / 2;
-            textY = AndroidUtilities.dp(7);
-            textXLeft = (width - textLayout.getWidth()) / 2;
-
-            if (currentMessageObject.type == 11) {
-                imageReceiver.setImageCoords((width - AndroidUtilities.dp(64)) / 2, textHeight + AndroidUtilities.dp(15), AndroidUtilities.dp(64), AndroidUtilities.dp(64));
-            }
-        }
-        setMeasuredDimension(width, textHeight + AndroidUtilities.dp(14 + (currentMessageObject.type == 11 ? 70 : 0)));
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        Drawable backgroundDrawable;
-        if (ApplicationLoader.isCustomTheme()) {
-            backgroundDrawable = ResourceLoader.backgroundBlack;
-        } else {
-            backgroundDrawable = ResourceLoader.backgroundBlue;
-        }
-        backgroundDrawable.setBounds(textX - AndroidUtilities.dp(5), AndroidUtilities.dp(5), textX + textWidth + AndroidUtilities.dp(5), AndroidUtilities.dp(9) + textHeight);
-        backgroundDrawable.draw(canvas);
-
-        if (currentMessageObject.type == 11) {
-            imageReceiver.draw(canvas);
-        }
-
-        if (textLayout != null) {
-            canvas.save();
-            canvas.translate(textXLeft, textY);
-            textLayout.draw(canvas);
-            canvas.restore();
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
deleted file mode 100644
index 66862c623..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ /dev/null
@@ -1,363 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.FileLoader;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.ui.Components.ProgressView;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.SeekBar;
-
-import java.io.File;
-
-public class ChatAudioCell extends ChatBaseCell implements SeekBar.SeekBarDelegate, MediaController.FileDownloadProgressListener {
-
-    private static TextPaint timePaint;
-    private static Paint circlePaint;
-
-    private SeekBar seekBar;
-    private ProgressView progressView;
-    private int seekBarX;
-    private int seekBarY;
-
-    private int buttonState = 0;
-    private int buttonX;
-    private int buttonY;
-    private boolean buttonPressed = false;
-
-    private StaticLayout timeLayout;
-    private int timeX;
-    private int timeWidth;
-    private String lastTimeString = null;
-
-    private int TAG;
-
-    public ChatAudioCell(Context context) {
-        super(context);
-        TAG = MediaController.getInstance().generateObserverTag();
-
-        seekBar = new SeekBar(context);
-        seekBar.delegate = this;
-        progressView = new ProgressView();
-        drawForwardedName = true;
-
-        if (timePaint == null) {
-            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(12));
-
-            circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-        }
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        MediaController.getInstance().removeLoadingFileObserver(this);
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        updateButtonState();
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-        boolean result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
-        if (result) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                getParent().requestDisallowInterceptTouchEvent(true);
-            }
-            invalidate();
-        } else {
-            int side = AndroidUtilities.dp(36);
-            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                if (x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
-                    buttonPressed = true;
-                    invalidate();
-                    result = true;
-                }
-            } else if (buttonPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    didPressedButton();
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = false;
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
-                        buttonPressed = false;
-                        invalidate();
-                    }
-                }
-            }
-            if (!result) {
-                result = super.onTouchEvent(event);
-            }
-        }
-
-        return result;
-    }
-
-    private void didPressedButton() {
-        if (buttonState == 0) {
-            boolean result = MediaController.getInstance().playAudio(currentMessageObject);
-            if (!currentMessageObject.isOut() && currentMessageObject.isContentUnread()) {
-                MessagesController.getInstance().markMessageContentAsRead(currentMessageObject.getId());
-            }
-            if (result) {
-                buttonState = 1;
-                invalidate();
-            }
-        } else if (buttonState == 1) {
-            boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
-            if (result) {
-                buttonState = 0;
-                invalidate();
-            }
-        } else if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
-            buttonState = 3;
-            invalidate();
-        } else if (buttonState == 3) {
-            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-                if (delegate != null) {
-                    delegate.didPressedCancelSendButton(this);
-                }
-            } else {
-                FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
-                buttonState = 2;
-                invalidate();
-            }
-        }
-    }
-
-    public void updateProgress() {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        if (!seekBar.isDragging()) {
-            seekBar.setProgress(currentMessageObject.audioProgress);
-        }
-
-        int duration;
-        if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
-            duration = currentMessageObject.messageOwner.media.audio.duration;
-        } else {
-            duration = currentMessageObject.audioProgressSec;
-        }
-        String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
-        if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
-            timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
-            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        }
-        invalidate();
-    }
-
-    public void downloadAudioIfNeed() {
-        if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
-            buttonState = 3;
-            invalidate();
-        }
-    }
-
-    public void updateButtonState() {
-        if (currentMessageObject == null) {
-            return;
-        }
-        if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-            buttonState = 4;
-        } else {
-            String fileName = currentMessageObject.getFileName();
-            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-            if (cacheFile.exists()) {
-                MediaController.getInstance().removeLoadingFileObserver(this);
-                boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
-                if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
-                    buttonState = 0;
-                } else {
-                    buttonState = 1;
-                }
-                progressView.setProgress(0);
-            } else {
-                MediaController.getInstance().addLoadingFileObserver(fileName, this);
-                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                    buttonState = 2;
-                    progressView.setProgress(0);
-                } else {
-                    buttonState = 3;
-                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                    if (progress != null) {
-                        progressView.setProgress(progress);
-                    } else {
-                        progressView.setProgress(0);
-                    }
-                }
-            }
-        }
-        updateProgress();
-    }
-
-    @Override
-    public void onFailedDownload(String fileName) {
-        updateButtonState();
-    }
-
-    @Override
-    public void onSuccessDownload(String fileName) {
-        updateButtonState();
-    }
-
-    @Override
-    public void onProgressDownload(String fileName, float progress) {
-        progressView.setProgress(progress);
-        if (buttonState != 3) {
-            updateButtonState();
-        }
-        invalidate();
-    }
-
-    @Override
-    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-
-    }
-
-    @Override
-    public int getObserverTag() {
-        return TAG;
-    }
-
-    @Override
-    public void onSeekBarDrag(float progress) {
-        if (currentMessageObject == null) {
-            return;
-        }
-        currentMessageObject.audioProgress = progress;
-        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int width = MeasureSpec.getSize(widthMeasureSpec);
-        setMeasuredDimension(width, AndroidUtilities.dp(66) + namesOffset);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        if (currentMessageObject.isOut()) {
-            seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(55);
-            buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(13);
-            timeX = layoutWidth - backgroundWidth + AndroidUtilities.dp(66);
-        } else {
-            if (isChat) {
-                seekBarX = AndroidUtilities.dp(116);
-                buttonX = AndroidUtilities.dp(74);
-                timeX = AndroidUtilities.dp(127);
-            } else {
-                seekBarX = AndroidUtilities.dp(64);
-                buttonX = AndroidUtilities.dp(22);
-                timeX = AndroidUtilities.dp(75);
-            }
-        }
-
-        seekBar.width = backgroundWidth - AndroidUtilities.dp(70);
-        seekBar.height = AndroidUtilities.dp(30);
-        progressView.width = backgroundWidth - AndroidUtilities.dp(94);
-        progressView.height = AndroidUtilities.dp(30);
-        seekBarY = AndroidUtilities.dp(11) + namesOffset;
-        buttonY = AndroidUtilities.dp(13) + namesOffset;
-
-        updateProgress();
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject != messageObject || isUserDataChanged()) {
-            if (AndroidUtilities.isTablet()) {
-                backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat ? 102 : 50), AndroidUtilities.dp(300));
-            } else {
-                backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat ? 102 : 50), AndroidUtilities.dp(300));
-            }
-
-            if (messageObject.isOut()) {
-                seekBar.type = 0;
-                progressView.setProgressColors(0xffb4e396, 0xff6ac453);
-            } else {
-                seekBar.type = 1;
-                progressView.setProgressColors(0xffd9e2eb, 0xff86c5f8);
-            }
-
-            super.setMessageObject(messageObject);
-        }
-        updateButtonState();
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        canvas.save();
-        if (buttonState == 0 || buttonState == 1) {
-            canvas.translate(seekBarX, seekBarY);
-            seekBar.draw(canvas);
-        } else {
-            canvas.translate(seekBarX + AndroidUtilities.dp(12), seekBarY);
-            progressView.draw(canvas);
-        }
-        canvas.restore();
-
-        int state = buttonState;
-        if (currentMessageObject.isOut()) {
-            timePaint.setColor(0xff70b15c);
-            circlePaint.setColor(0xff87bf78);
-        } else {
-            state += 5;
-            timePaint.setColor(0xffa1aab3);
-            circlePaint.setColor(0xff4195e5);
-        }
-        Drawable buttonDrawable = ResourceLoader.audioStatesDrawable[state][buttonPressed ? 1 : 0];
-        setDrawableBounds(buttonDrawable, buttonX, buttonY);
-        buttonDrawable.draw(canvas);
-
-        canvas.save();
-        canvas.translate(timeX, AndroidUtilities.dp(42) + namesOffset);
-        timeLayout.draw(canvas);
-        canvas.restore();
-
-        if (currentMessageObject.isContentUnread()) {
-            canvas.drawCircle(timeX + timeWidth + AndroidUtilities.dp(8), AndroidUtilities.dp(49.5f) + namesOffset, AndroidUtilities.dp(3), circlePaint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
deleted file mode 100644
index 129348b60..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ /dev/null
@@ -1,298 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.AvatarDrawable;
-
-public class ChatContactCell extends ChatBaseCell {
-
-    public interface ChatContactCellDelegate {
-        void didClickAddButton(ChatContactCell cell, TLRPC.User user);
-        void didClickPhone(ChatContactCell cell);
-    }
-
-    private static TextPaint namePaint;
-    private static TextPaint phonePaint;
-    private static Drawable addContactDrawableIn;
-    private static Drawable addContactDrawableOut;
-
-    private ImageReceiver avatarImage;
-    private AvatarDrawable avatarDrawable;
-
-    private StaticLayout nameLayout;
-    private StaticLayout phoneLayout;
-
-    private TLRPC.User contactUser;
-    private TLRPC.FileLocation currentPhoto;
-
-    private boolean avatarPressed = false;
-    private boolean buttonPressed = false;
-    private boolean drawAddButton = false;
-    private int namesWidth = 0;
-
-    private ChatContactCellDelegate contactDelegate = null;
-
-    public ChatContactCell(Context context) {
-        super(context);
-        if (namePaint == null) {
-            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(15));
-
-            phonePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            phonePaint.setTextSize(AndroidUtilities.dp(15));
-            phonePaint.setColor(0xff212121);
-
-            addContactDrawableIn = getResources().getDrawable(R.drawable.addcontact_blue);
-            addContactDrawableOut = getResources().getDrawable(R.drawable.addcontact_green);
-        }
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(21));
-        avatarDrawable = new AvatarDrawable();
-    }
-
-    public void setContactDelegate(ChatContactCellDelegate delegate) {
-        this.contactDelegate = delegate;
-    }
-
-    @Override
-    protected boolean isUserDataChanged() {
-        if (currentMessageObject == null) {
-            return false;
-        }
-
-        int uid = currentMessageObject.messageOwner.media.user_id;
-        boolean newDrawAdd = contactUser != null && uid != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(uid) == null;
-        if (newDrawAdd != drawAddButton) {
-            return true;
-        }
-
-        contactUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.media.user_id);
-
-        TLRPC.FileLocation newPhoto = null;
-        if (contactUser != null && contactUser.photo != null) {
-            newPhoto = contactUser.photo.photo_small;
-        }
-
-        return currentPhoto == null && newPhoto != null || currentPhoto != null && newPhoto == null || currentPhoto != null && newPhoto != null && (currentPhoto.local_id != newPhoto.local_id || currentPhoto.volume_id != newPhoto.volume_id) || super.isUserDataChanged();
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-
-        boolean result = false;
-        int side = AndroidUtilities.dp(36);
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
-                avatarPressed = true;
-                result = true;
-            } else if (x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) + namesOffset && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52) + namesOffset) {
-                buttonPressed = true;
-                result = true;
-            }
-            if (result) {
-                startCheckLongPress();
-            }
-        } else {
-            if (event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (avatarPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    avatarPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (contactUser != null) {
-                        if (delegate != null) {
-                            delegate.didPressedUserAvatar(this, contactUser);
-                        }
-                    } else {
-                        if (contactDelegate != null) {
-                            contactDelegate.didClickPhone(this);
-                        }
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    avatarPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight())) {
-                        avatarPressed = false;
-                    }
-                }
-            } else if (buttonPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (contactUser != null && contactDelegate != null) {
-                        contactDelegate.didClickAddButton(this, contactUser);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) + namesOffset && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52) + namesOffset)) {
-                        buttonPressed = false;
-                    }
-                }
-            }
-        }
-        if (!result) {
-            result = super.onTouchEvent(event);
-        }
-
-        return result;
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject != messageObject || isUserDataChanged()) {
-
-            int uid = messageObject.messageOwner.media.user_id;
-            contactUser = MessagesController.getInstance().getUser(uid);
-
-            drawAddButton = contactUser != null && uid != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(uid) == null;
-
-            int maxWidth;
-            if (AndroidUtilities.isTablet()) {
-                maxWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
-            } else {
-                maxWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
-            }
-            maxWidth -= AndroidUtilities.dp(58 + (drawAddButton ? 42 : 0));
-
-            if (contactUser != null) {
-                if (contactUser.photo != null) {
-                    currentPhoto = contactUser.photo.photo_small;
-                } else {
-                    currentPhoto = null;
-                }
-                avatarDrawable.setInfo(contactUser);
-            } else {
-                currentPhoto = null;
-                avatarDrawable.setInfo(uid, null, null, false);
-            }
-            avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, null, false);
-
-            String currentNameString = ContactsController.formatName(messageObject.messageOwner.media.first_name, messageObject.messageOwner.media.last_name);
-            int nameWidth = Math.min((int) Math.ceil(namePaint.measureText(currentNameString)), maxWidth);
-
-            CharSequence stringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth, TextUtils.TruncateAt.END);
-            nameLayout = new StaticLayout(stringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (nameLayout.getLineCount() > 0) {
-                nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
-            } else {
-                nameWidth = 0;
-            }
-
-            String phone = messageObject.messageOwner.media.phone_number;
-            if (phone != null && phone.length() != 0) {
-                if (!phone.startsWith("+")) {
-                    phone = "+" + phone;
-                }
-                phone = PhoneFormat.getInstance().format(phone);
-            } else {
-                phone = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
-            }
-            int phoneWidth = Math.min((int) Math.ceil(phonePaint.measureText(phone)), maxWidth);
-            stringFinal = TextUtils.ellipsize(phone.replace("\n", " "), phonePaint, phoneWidth, TextUtils.TruncateAt.END);
-            phoneLayout = new StaticLayout(stringFinal, phonePaint, phoneWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (phoneLayout.getLineCount() > 0) {
-                phoneWidth = (int)Math.ceil(phoneLayout.getLineWidth(0));
-            } else {
-                phoneWidth = 0;
-            }
-
-            namesWidth = Math.max(nameWidth, phoneWidth);
-            backgroundWidth = AndroidUtilities.dp(77 + (drawAddButton ? 42 : 0)) + namesWidth;
-
-            super.setMessageObject(messageObject);
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(71) + namesOffset);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        int x;
-
-        if (currentMessageObject.isOut()) {
-            x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
-        } else {
-            if (isChat) {
-                x = AndroidUtilities.dp(69);
-            } else {
-                x = AndroidUtilities.dp(16);
-            }
-        }
-        avatarImage.setImageCoords(x, AndroidUtilities.dp(9) + namesOffset, AndroidUtilities.dp(42), AndroidUtilities.dp(42));
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        avatarImage.draw(canvas);
-
-        if (nameLayout != null) {
-            canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(10) + namesOffset);
-            namePaint.setColor(AvatarDrawable.getColorForId(currentMessageObject.messageOwner.media.user_id));
-            nameLayout.draw(canvas);
-            canvas.restore();
-        }
-        if (phoneLayout != null) {
-            canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(31) + namesOffset);
-            phoneLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        if (drawAddButton) {
-            Drawable addContactDrawable;
-            if (currentMessageObject.isOut()) {
-                addContactDrawable = addContactDrawableOut;
-            } else {
-                addContactDrawable = addContactDrawableIn;
-            }
-            setDrawableBounds(addContactDrawable, avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(78), AndroidUtilities.dp(13) + namesOffset);
-            addContactDrawable.draw(canvas);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
deleted file mode 100644
index 8e5924c37..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ /dev/null
@@ -1,803 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.os.Build;
-import android.provider.Browser;
-import android.text.Layout;
-import android.text.Spannable;
-import android.text.SpannableStringBuilder;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.text.style.ClickableSpan;
-import android.view.MotionEvent;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.MediaController;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessageObject;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.StaticLayoutEx;
-import org.telegram.ui.Components.URLSpanNoUnderline;
-
-import java.io.File;
-import java.util.Locale;
-
-public class ChatMessageCell extends ChatBaseCell {
-
-    private int textX, textY;
-    private int totalHeight = 0;
-    private int linkBlockNum;
-
-    private int lastVisibleBlockNum = 0;
-    private int firstVisibleBlockNum = 0;
-    private int totalVisibleBlocksCount = 0;
-
-    private ImageReceiver linkImageView;
-    private boolean isSmallImage;
-    private boolean drawLinkImageView;
-    private boolean hasLinkPreview;
-    private int linkPreviewHeight;
-    private boolean isInstagram;
-    private int descriptionY;
-    private int durationWidth;
-    private int descriptionX;
-    private int titleX;
-    private int authorX;
-    private StaticLayout siteNameLayout;
-    private StaticLayout titleLayout;
-    private StaticLayout descriptionLayout;
-    private StaticLayout durationLayout;
-    private StaticLayout authorLayout;
-    private static TextPaint durationPaint;
-
-    private static Drawable igvideoDrawable;
-
-    public ChatMessageCell(Context context) {
-        super(context);
-        drawForwardedName = true;
-        linkImageView = new ImageReceiver(this);
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        boolean result = false;
-        if (currentMessageObject != null && currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty() && currentMessageObject.messageText instanceof Spannable && !isPressed) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN || (linkPreviewPressed || pressedLink != null) && event.getAction() == MotionEvent.ACTION_UP) {
-                int x = (int) event.getX();
-                int y = (int) event.getY();
-                if (x >= textX && y >= textY && x <= textX + currentMessageObject.textWidth && y <= textY + currentMessageObject.textHeight) {
-                    y -= textY;
-                    int blockNum = Math.max(0, y / currentMessageObject.blockHeight);
-                    if (blockNum < currentMessageObject.textLayoutBlocks.size()) {
-                        try {
-                            MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(blockNum);
-                            x -= textX - (int) Math.ceil(block.textXOffset);
-                            y -= block.textYOffset;
-                            final int line = block.textLayout.getLineForVertical(y);
-                            final int off = block.textLayout.getOffsetForHorizontal(line, x) + block.charactersOffset;
-
-                            final float left = block.textLayout.getLineLeft(line);
-                            if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
-                                Spannable buffer = (Spannable) currentMessageObject.messageText;
-                                ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
-                                if (link.length != 0) {
-                                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                                        resetPressedLink();
-                                        pressedLink = link[0];
-                                        linkBlockNum = blockNum;
-                                        try {
-                                            int start = buffer.getSpanStart(pressedLink) - block.charactersOffset;
-                                            urlPath.setCurrentLayout(block.textLayout, start);
-                                            block.textLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink) - block.charactersOffset, urlPath);
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
-                                        }
-                                        result = true;
-                                    } else {
-                                        if (link[0] == pressedLink) {
-                                            try {
-                                                if (pressedLink instanceof URLSpanNoUnderline) {
-                                                    String url = ((URLSpanNoUnderline) pressedLink).getURL();
-                                                    if (url.startsWith("@") || url.startsWith("#")) {
-                                                        if (delegate != null) {
-                                                            delegate.didPressUrl(url);
-                                                        }
-                                                    }
-                                                } else {
-                                                    pressedLink.onClick(this);
-                                                }
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                            resetPressedLink();
-                                            result = true;
-                                        }
-                                    }
-                                } else {
-                                    resetPressedLink();
-                                }
-                            } else {
-                                resetPressedLink();
-                            }
-                        } catch (Exception e) {
-                            resetPressedLink();
-                            FileLog.e("tmessages", e);
-                        }
-                    } else {
-                        resetPressedLink();
-                    }
-                } else if (hasLinkPreview && x >= textX && x <= textX + backgroundWidth && y >= textY + currentMessageObject.textHeight && y <= textY + currentMessageObject.textHeight + linkPreviewHeight + AndroidUtilities.dp(8)) {
-                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                        resetPressedLink();
-                        if (drawLinkImageView && linkImageView.isInsideImage(x, y)) {
-                            linkPreviewPressed = true;
-                            result = true;
-                        } else {
-                            if (descriptionLayout != null && y >= descriptionY) {
-                                try {
-                                    x -= textX + AndroidUtilities.dp(10) + descriptionX;
-                                    y -= descriptionY;
-                                    final int line = descriptionLayout.getLineForVertical(y);
-                                    final int off = descriptionLayout.getOffsetForHorizontal(line, x);
-
-                                    final float left = descriptionLayout.getLineLeft(line);
-                                    if (left <= x && left + descriptionLayout.getLineWidth(line) >= x) {
-                                        Spannable buffer = (Spannable) currentMessageObject.linkDescription;
-                                        ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
-                                        if (link.length != 0) {
-                                            resetPressedLink();
-                                            pressedLink = link[0];
-                                            linkPreviewPressed = true;
-                                            linkBlockNum = -10;
-                                            result = true;
-                                            try {
-                                                int start = buffer.getSpanStart(pressedLink);
-                                                urlPath.setCurrentLayout(descriptionLayout, start);
-                                                descriptionLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), urlPath);
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                        } else {
-                                            resetPressedLink();
-                                        }
-                                    } else {
-                                        resetPressedLink();
-                                    }
-                                } catch (Exception e) {
-                                    resetPressedLink();
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        }
-                    } else if (linkPreviewPressed) {
-                        try {
-                            if (pressedLink != null) {
-                                pressedLink.onClick(this);
-                            } else {
-                                TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
-                                if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
-                                    delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.url, webPage.embed_width, webPage.embed_height);
-                                } else {
-                                    Uri uri = Uri.parse(webPage.url);
-                                    Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-                                    intent.putExtra(Browser.EXTRA_APPLICATION_ID, getContext().getPackageName());
-                                    getContext().startActivity(intent);
-                                }
-                            }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        resetPressedLink();
-                        result = true;
-                    }
-                } else {
-                    resetPressedLink();
-                }
-            } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                resetPressedLink();
-            }
-        } else {
-            resetPressedLink();
-        }
-        if (result && event.getAction() == MotionEvent.ACTION_DOWN) {
-            startCheckLongPress();
-        }
-        if (event.getAction() != MotionEvent.ACTION_DOWN && event.getAction() != MotionEvent.ACTION_MOVE) {
-            cancelCheckLongPress();
-        }
-        return result || super.onTouchEvent(event);
-    }
-
-    public void setVisiblePart(int position, int height) {
-        if (currentMessageObject == null || currentMessageObject.textLayoutBlocks == null) {
-            return;
-        }
-        int newFirst = -1, newLast = -1, newCount = 0;
-
-        for (int a = Math.max(0, (position - textY) / currentMessageObject.blockHeight); a < currentMessageObject.textLayoutBlocks.size(); a++) {
-            MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
-            float y = textY + block.textYOffset;
-            if (intersect(y, y + currentMessageObject.blockHeight, position, position + height)) {
-                if (newFirst == -1) {
-                    newFirst = a;
-                }
-                newLast = a;
-                newCount++;
-            } else if (y > position) {
-                break;
-            }
-        }
-
-        if (lastVisibleBlockNum != newLast || firstVisibleBlockNum != newFirst || totalVisibleBlocksCount != newCount) {
-            lastVisibleBlockNum = newLast;
-            firstVisibleBlockNum = newFirst;
-            totalVisibleBlocksCount = newCount;
-            invalidate();
-        }
-    }
-
-    private boolean intersect(float left1, float right1, float left2, float right2) {
-        if (left1 <= left2) {
-            return right1 >= left2;
-        }
-        return left1 <= right2;
-    }
-
-    private StaticLayout generateStaticLayout(CharSequence text, TextPaint paint, int maxWidth, int smallWidth, int linesCount, int maxLines) {
-        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(text);
-        int addedChars = 0;
-        StaticLayout layout = new StaticLayout(text, paint, smallWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        for (int a = 0; a < linesCount; a++) {
-            if (layout.getLineLeft(a) != 0) {
-                maxWidth = smallWidth;
-            }
-            int pos = layout.getLineEnd(a);
-            if (pos == text.length()) {
-                break;
-            }
-            pos--;
-            if (stringBuilder.charAt(pos + addedChars) == ' ') {
-                stringBuilder.replace(pos + addedChars, pos + addedChars + 1, "\n");
-            } else if (stringBuilder.charAt(pos + addedChars) != '\n') {
-                stringBuilder.insert(pos + addedChars, "\n");
-                addedChars++;
-            }
-            if (a == layout.getLineCount() - 1 || a == maxLines - 1) {
-                break;
-            }
-        }
-        return StaticLayoutEx.createStaticLayout(stringBuilder, paint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, maxWidth, maxLines);
-    }
-
-    @Override
-    protected boolean isUserDataChanged() {
-        if (!hasLinkPreview && currentMessageObject.messageOwner.media != null && currentMessageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPage) {
-            return true;
-        }
-        //suppress warning
-        return super.isUserDataChanged();
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        linkImageView.onDetachedFromWindow();
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        linkImageView.onAttachedToWindow();
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject != messageObject || isUserDataChanged()) {
-            if (currentMessageObject != messageObject) {
-                firstVisibleBlockNum = 0;
-                lastVisibleBlockNum = 0;
-            }
-            drawLinkImageView = false;
-            hasLinkPreview = false;
-            resetPressedLink();
-            linkPreviewPressed = false;
-            linkPreviewHeight = 0;
-            isInstagram = false;
-            durationLayout = null;
-            descriptionLayout = null;
-            titleLayout = null;
-            siteNameLayout = null;
-            authorLayout = null;
-            int maxWidth;
-
-            if (AndroidUtilities.isTablet()) {
-                if (isChat && !messageObject.isOut()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
-                    drawName = true;
-                } else {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
-                    drawName = false;
-                }
-            } else {
-                if (isChat && !messageObject.isOut()) {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
-                    drawName = true;
-                } else {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
-                    drawName = false;
-                }
-            }
-
-            backgroundWidth = maxWidth;
-
-            super.setMessageObject(messageObject);
-
-            backgroundWidth = messageObject.textWidth;
-            totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + namesOffset;
-
-            int maxChildWidth = Math.max(backgroundWidth, nameWidth);
-            maxChildWidth = Math.max(maxChildWidth, forwardedNameWidth);
-            maxChildWidth = Math.max(maxChildWidth, replyNameWidth);
-            maxChildWidth = Math.max(maxChildWidth, replyTextWidth);
-            int maxWebWidth = 0;
-
-            int timeMore = timeWidth + AndroidUtilities.dp(6);
-            if (messageObject.isOut()) {
-                timeMore += AndroidUtilities.dp(20.5f);
-            }
-
-            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && messageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPage) {
-                int linkPreviewMaxWidth;
-                if (AndroidUtilities.isTablet()) {
-                    if (currentMessageObject.messageOwner.to_id.chat_id != 0 && !currentMessageObject.isOut()) {
-                        linkPreviewMaxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
-                    } else {
-                        linkPreviewMaxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
-                    }
-                } else {
-                    if (currentMessageObject.messageOwner.to_id.chat_id != 0 && !currentMessageObject.isOut()) {
-                        linkPreviewMaxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
-                    } else {
-                        linkPreviewMaxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
-                    }
-                }
-
-                TLRPC.TL_webPage webPage = (TLRPC.TL_webPage) messageObject.messageOwner.media.webpage;
-
-                if (webPage.site_name != null && webPage.photo != null && webPage.site_name.toLowerCase().equals("instagram")) {
-                    linkPreviewMaxWidth = Math.max(AndroidUtilities.displaySize.y / 3, currentMessageObject.textWidth);
-                }
-
-                int additinalWidth = AndroidUtilities.dp(10);
-                int restLinesCount = 3;
-                int additionalHeight = 0;
-                linkPreviewMaxWidth -= additinalWidth;
-
-                hasLinkPreview = true;
-
-                if (currentMessageObject.photoThumbs == null && webPage.photo != null) {
-                    currentMessageObject.generateThumbs(true);
-                }
-
-                isSmallImage = webPage.description != null && webPage.type != null && (webPage.type.equals("app") || webPage.type.equals("profile") || webPage.type.equals("article")) && currentMessageObject.photoThumbs != null;
-
-                if (webPage.site_name != null) {
-                    try {
-                        int width = (int) Math.ceil(replyNamePaint.measureText(webPage.site_name));
-                        siteNameLayout = new StaticLayout(webPage.site_name, replyNamePaint, Math.min(width, linkPreviewMaxWidth), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                        int height = siteNameLayout.getLineBottom(siteNameLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
-                        additionalHeight += height;
-                        width = siteNameLayout.getWidth();
-                        maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
-                        maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                boolean titleIsRTL = false;
-                if (webPage.title != null) {
-                    try {
-                        titleX = 0;
-                        if (linkPreviewHeight != 0) {
-                            linkPreviewHeight += AndroidUtilities.dp(2);
-                            totalHeight += AndroidUtilities.dp(2);
-                        }
-                        int restLines = 0;
-                        if (!isSmallImage || webPage.description == null) {
-                            titleLayout = StaticLayoutEx.createStaticLayout(webPage.title, replyNamePaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, linkPreviewMaxWidth, 4);
-                        } else {
-                            restLines = restLinesCount;
-                            titleLayout = generateStaticLayout(webPage.title, replyNamePaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 2), restLinesCount, 4);
-                            restLinesCount -= titleLayout.getLineCount();
-                        }
-                        int height = titleLayout.getLineBottom(titleLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
-                        for (int a = 0; a < titleLayout.getLineCount(); a++) {
-                            int lineLeft = (int) titleLayout.getLineLeft(a);
-                            if (lineLeft != 0) {
-                                titleIsRTL = true;
-                                if (titleX == 0) {
-                                    titleX = -lineLeft;
-                                } else {
-                                    titleX = Math.max(titleX, -lineLeft);
-                                }
-                            }
-                            int width;
-                            if (lineLeft != 0) {
-                                width = titleLayout.getWidth() - lineLeft;
-                            } else {
-                                width = (int) Math.ceil(titleLayout.getLineWidth(a));
-                            }
-                            if (a < restLines || lineLeft != 0 && isSmallImage) {
-                                width += AndroidUtilities.dp(48 + 2);
-                            }
-                            maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
-                            maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                if (webPage.author != null) {
-                    try {
-                        if (linkPreviewHeight != 0) {
-                            linkPreviewHeight += AndroidUtilities.dp(2);
-                            totalHeight += AndroidUtilities.dp(2);
-                        }
-                        int width = Math.min((int) Math.ceil(replyNamePaint.measureText(webPage.author)), linkPreviewMaxWidth);
-                        if (restLinesCount == 3 && (!isSmallImage || webPage.description == null)) {
-                            authorLayout = new StaticLayout(webPage.author, replyNamePaint, width, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                        } else {
-                            authorLayout = generateStaticLayout(webPage.author, replyNamePaint, width, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 2), restLinesCount, 1);
-                            restLinesCount -= authorLayout.getLineCount();
-                        }
-                        int height = authorLayout.getLineBottom(authorLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
-                        int lineLeft = (int) authorLayout.getLineLeft(0);
-                        authorX = -lineLeft;
-                        maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
-                        maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                if (webPage.description != null) {
-                    try {
-                        descriptionX = 0;
-                        currentMessageObject.generateLinkDescription();
-                        if (linkPreviewHeight != 0) {
-                            linkPreviewHeight += AndroidUtilities.dp(2);
-                            totalHeight += AndroidUtilities.dp(2);
-                        }
-                        int restLines = 0;
-                        if (restLinesCount == 3 && !isSmallImage) {
-                            descriptionLayout = StaticLayoutEx.createStaticLayout(messageObject.linkDescription, replyTextPaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, linkPreviewMaxWidth, 6);
-                        } else {
-                            restLines = restLinesCount;
-                            descriptionLayout = generateStaticLayout(messageObject.linkDescription, replyTextPaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 2), restLinesCount, 6);
-                        }
-                        int height = descriptionLayout.getLineBottom(descriptionLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
-                        for (int a = 0; a < descriptionLayout.getLineCount(); a++) {
-                            int lineLeft = (int) Math.ceil(descriptionLayout.getLineLeft(a));
-                            if (descriptionX == 0) {
-                                descriptionX = -lineLeft;
-                            } else {
-                                descriptionX = Math.max(descriptionX, -lineLeft);
-                            }
-
-                            int width;
-                            if (lineLeft != 0) {
-                                width = descriptionLayout.getWidth() - lineLeft;
-                            } else {
-                                width = (int) Math.ceil(descriptionLayout.getLineWidth(a));
-                            }
-                            if (a < restLines || lineLeft != 0 && isSmallImage) {
-                                width += AndroidUtilities.dp(48 + 2);
-                            }
-                            if (maxWebWidth < width + additinalWidth) {
-                                if (titleIsRTL) {
-                                    titleX += (width + additinalWidth - maxWebWidth);
-                                }
-                                maxWebWidth = width + additinalWidth;
-                            }
-                            maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                if (webPage.photo != null) {
-                    boolean smallImage = webPage.type != null && (webPage.type.equals("app") || webPage.type.equals("profile") || webPage.type.equals("article"));
-                    if (smallImage && descriptionLayout != null && descriptionLayout.getLineCount() == 1) {
-                        smallImage = false;
-                        isSmallImage = false;
-                    }
-                    int maxPhotoWidth = smallImage ? AndroidUtilities.dp(48) : linkPreviewMaxWidth;
-                    TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, maxPhotoWidth, true);
-                    TLRPC.PhotoSize currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                    if (currentPhotoObjectThumb == currentPhotoObject) {
-                        currentPhotoObjectThumb = null;
-                    }
-                    if (currentPhotoObject != null) {
-                        if (linkPreviewHeight != 0) {
-                            linkPreviewHeight += AndroidUtilities.dp(2);
-                            totalHeight += AndroidUtilities.dp(2);
-                        }
-
-                        maxChildWidth = Math.max(maxChildWidth, maxPhotoWidth + additinalWidth);
-                        currentPhotoObject.size = -1;
-                        if (currentPhotoObjectThumb != null) {
-                            currentPhotoObjectThumb.size = -1;
-                        }
-
-                        int width;
-                        int height;
-                        if (smallImage) {
-                            width = height = maxPhotoWidth;
-                        } else {
-                            width = currentPhotoObject.w;
-                            height = currentPhotoObject.h;
-                            float scale = width / (float) maxPhotoWidth;
-                            width /= scale;
-                            height /= scale;
-                            if (webPage.site_name != null && !webPage.site_name.toLowerCase().equals("instagram")) {
-                                if (height > AndroidUtilities.displaySize.y / 3) {
-                                    height = AndroidUtilities.displaySize.y / 3;
-                                }
-                            }
-                        }
-                        if (isSmallImage) {
-                            if (AndroidUtilities.dp(50) + additionalHeight > linkPreviewHeight) {
-                                totalHeight += AndroidUtilities.dp(50) + additionalHeight - linkPreviewHeight + AndroidUtilities.dp(8);
-                                linkPreviewHeight = AndroidUtilities.dp(50) + additionalHeight;
-                            }
-                            linkPreviewHeight -= AndroidUtilities.dp(8);
-                        } else {
-                            totalHeight += height + AndroidUtilities.dp(12);
-                            linkPreviewHeight += height;
-                        }
-
-                        linkImageView.setImageCoords(0, 0, width, height);
-
-                        String fileName = FileLoader.getAttachFileName(currentPhotoObject);
-
-                        boolean photoExist = true;
-                        File cacheFile = FileLoader.getPathToAttach(currentPhotoObject, true);
-                        if (!cacheFile.exists()) {
-                            photoExist = false;
-                        }
-
-                        String filter = String.format(Locale.US, "%d_%d", width, height);
-
-                        if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
-                            linkImageView.setImage(currentPhotoObject.location, filter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, String.format(Locale.US, "%d_%d_b", width, height), 0, null, false);
-                        } else {
-                            if (currentPhotoObjectThumb != null) {
-                                linkImageView.setImage(null, null, currentPhotoObjectThumb.location, String.format(Locale.US, "%d_%d_b", width, height), 0, null, false);
-                            } else {
-                                linkImageView.setImageBitmap((Drawable) null);
-                            }
-                        }
-                        drawLinkImageView = true;
-
-                        if (webPage.site_name != null) {
-                            if (webPage.site_name.toLowerCase().equals("instagram") && webPage.type != null && webPage.type.equals("video")) {
-                                isInstagram = true;
-                                if (igvideoDrawable == null) {
-                                    igvideoDrawable = getResources().getDrawable(R.drawable.igvideo);
-                                }
-                            }
-                        }
-                    }
-
-                    if (webPage.duration != 0) {
-                        if (durationPaint == null) {
-                            durationPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-                            durationPaint.setTextSize(AndroidUtilities.dp(12));
-                            durationPaint.setColor(0xffffffff);
-                        }
-                        int minutes = webPage.duration / 60;
-                        int seconds = webPage.duration - minutes * 60;
-                        String str = String.format("%d:%02d", minutes, seconds);
-                        durationWidth = (int) Math.ceil(durationPaint.measureText(str));
-                        durationLayout = new StaticLayout(str, durationPaint, durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                    }
-                } else {
-                    linkPreviewHeight -= AndroidUtilities.dp(6);
-                    totalHeight += AndroidUtilities.dp(4);
-                }
-            }
-
-            if (hasLinkPreview || maxWidth - messageObject.lastLineWidth < timeMore) {
-                totalHeight += AndroidUtilities.dp(14);
-                backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth) + AndroidUtilities.dp(29);
-            } else {
-                int diff = maxChildWidth - messageObject.lastLineWidth;
-                if (diff >= 0 && diff <= timeMore) {
-                    backgroundWidth = maxChildWidth + timeMore - diff + AndroidUtilities.dp(29);
-                } else {
-                    backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth + timeMore) + AndroidUtilities.dp(29);
-                }
-            }
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), totalHeight);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        if (currentMessageObject.isOut()) {
-            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
-            textY = AndroidUtilities.dp(10) + namesOffset;
-        } else {
-            textX = AndroidUtilities.dp(19) + (isChat ? AndroidUtilities.dp(52) : 0);
-            textY = AndroidUtilities.dp(10) + namesOffset;
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-        if (currentMessageObject == null || currentMessageObject.textLayoutBlocks == null || currentMessageObject.textLayoutBlocks.isEmpty()) {
-            return;
-        }
-
-        if (currentMessageObject.isOut()) {
-            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
-            textY = AndroidUtilities.dp(10) + namesOffset;
-        } else {
-            textX = AndroidUtilities.dp(19) + (isChat ? AndroidUtilities.dp(52) : 0);
-            textY = AndroidUtilities.dp(10) + namesOffset;
-        }
-
-        if (firstVisibleBlockNum >= 0) {
-            for (int a = firstVisibleBlockNum; a <= lastVisibleBlockNum; a++) {
-                if (a >= currentMessageObject.textLayoutBlocks.size()) {
-                    break;
-                }
-                MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
-                canvas.save();
-                canvas.translate(textX - (int) Math.ceil(block.textXOffset), textY + block.textYOffset);
-                if (pressedLink != null && a == linkBlockNum) {
-                    canvas.drawPath(urlPath, urlPaint);
-                }
-                try {
-                    block.textLayout.draw(canvas);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                canvas.restore();
-            }
-        }
-
-        if (hasLinkPreview) {
-            int startY = textY + currentMessageObject.textHeight + AndroidUtilities.dp(8);
-            int linkPreviewY = startY;
-            int smallImageStartY = 0;
-            replyLinePaint.setColor(currentMessageObject.isOut() ? 0xff8dc97a : 0xff6c9fd2);
-
-            canvas.drawRect(textX, linkPreviewY - AndroidUtilities.dp(3), textX + AndroidUtilities.dp(2), linkPreviewY + linkPreviewHeight + AndroidUtilities.dp(3), replyLinePaint);
-
-            if (siteNameLayout != null) {
-                replyNamePaint.setColor(currentMessageObject.isOut() ? 0xff70b15c : 0xff4b91cf);
-                canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10), linkPreviewY - AndroidUtilities.dp(3));
-                siteNameLayout.draw(canvas);
-                canvas.restore();
-                linkPreviewY += siteNameLayout.getLineBottom(siteNameLayout.getLineCount() - 1);
-            }
-
-            if (titleLayout != null) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
-                }
-                replyNamePaint.setColor(0xff000000);
-                smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
-                canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10) + titleX, linkPreviewY - AndroidUtilities.dp(3));
-                titleLayout.draw(canvas);
-                canvas.restore();
-                linkPreviewY += titleLayout.getLineBottom(titleLayout.getLineCount() - 1);
-            }
-
-            if (authorLayout != null) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
-                }
-                if (smallImageStartY == 0) {
-                    smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
-                }
-                replyNamePaint.setColor(0xff000000);
-                canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10) + authorX, linkPreviewY - AndroidUtilities.dp(3));
-                authorLayout.draw(canvas);
-                canvas.restore();
-                linkPreviewY += authorLayout.getLineBottom(authorLayout.getLineCount() - 1);
-            }
-
-            if (descriptionLayout != null) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
-                }
-                if (smallImageStartY == 0) {
-                    smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
-                }
-                replyTextPaint.setColor(0xff000000);
-                descriptionY = linkPreviewY - AndroidUtilities.dp(3);
-                canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10) + descriptionX, descriptionY);
-                if (pressedLink != null && linkBlockNum == -10) {
-                    canvas.drawPath(urlPath, urlPaint);
-                }
-                descriptionLayout.draw(canvas);
-                canvas.restore();
-                linkPreviewY += descriptionLayout.getLineBottom(descriptionLayout.getLineCount() - 1);
-            }
-
-            if (drawLinkImageView) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
-                }
-
-                if (isSmallImage) {
-                    linkImageView.setImageCoords(textX + backgroundWidth - AndroidUtilities.dp(77), smallImageStartY, linkImageView.getImageWidth(), linkImageView.getImageHeight());
-                } else {
-                    linkImageView.setImageCoords(textX + AndroidUtilities.dp(10), linkPreviewY, linkImageView.getImageWidth(), linkImageView.getImageHeight());
-                }
-                linkImageView.draw(canvas);
-
-                if (isInstagram && igvideoDrawable != null) {
-                    int x = linkImageView.getImageX() + linkImageView.getImageWidth() - igvideoDrawable.getIntrinsicWidth() - AndroidUtilities.dp(4);
-                    int y = linkImageView.getImageY() + AndroidUtilities.dp(4);
-                    igvideoDrawable.setBounds(x, y, x + igvideoDrawable.getIntrinsicWidth(), y + igvideoDrawable.getIntrinsicHeight());
-                    igvideoDrawable.draw(canvas);
-                }
-
-                if (durationLayout != null) {
-                    int x = linkImageView.getImageX() + linkImageView.getImageWidth() - AndroidUtilities.dp(8) - durationWidth;
-                    int y = linkImageView.getImageY() + linkImageView.getImageHeight() - AndroidUtilities.dp(19);
-                    ResourceLoader.mediaBackgroundDrawable.setBounds(x - AndroidUtilities.dp(4), y - AndroidUtilities.dp(1.5f), x + durationWidth + AndroidUtilities.dp(4), y + AndroidUtilities.dp(14.5f));
-                    ResourceLoader.mediaBackgroundDrawable.draw(canvas);
-
-                    canvas.save();
-                    canvas.translate(x, y);
-                    durationLayout.draw(canvas);
-                    canvas.restore();
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
deleted file mode 100644
index 41a469e9e..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ /dev/null
@@ -1,860 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.MotionEvent;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.android.Emoji;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.android.ImageReceiver;
-import org.telegram.ui.Components.AvatarDrawable;
-
-public class DialogCell extends BaseCell {
-
-    private static TextPaint namePaint;
-    private static TextPaint nameEncryptedPaint;
-    private static TextPaint nameUnknownPaint;
-    private static TextPaint messagePaint;
-    private static TextPaint messagePrintingPaint;
-    private static TextPaint timePaint;
-    private static TextPaint countPaint;
-
-    private static Drawable checkDrawable;
-    private static Drawable halfCheckDrawable;
-    private static Drawable clockDrawable;
-    private static Drawable errorDrawable;
-    private static Drawable lockDrawable;
-    private static Drawable countDrawable;
-    private static Drawable groupDrawable;
-    private static Drawable broadcastDrawable;
-    private static Drawable muteDrawable;
-
-    private static Paint linePaint;
-    private static Paint backPaint;
-
-    private long currentDialogId;
-    private boolean isDialogCell;
-    private int lastMessageDate;
-    private int unreadCount;
-    private boolean lastUnreadState;
-    private int lastSendState;
-    private boolean dialogMuted;
-    private MessageObject message;
-    private int index;
-    private boolean isServerOnly;
-
-    private ImageReceiver avatarImage;
-    private AvatarDrawable avatarDrawable;
-
-    private TLRPC.User user = null;
-    private TLRPC.Chat chat = null;
-    private TLRPC.EncryptedChat encryptedChat = null;
-    private CharSequence lastPrintString = null;
-
-    public boolean useSeparator = false;
-
-    private int nameLeft;
-    private StaticLayout nameLayout;
-    private boolean drawNameLock;
-    private boolean drawNameGroup;
-    private boolean drawNameBroadcast;
-    private int nameMuteLeft;
-    private int nameLockLeft;
-    private int nameLockTop;
-
-    private int timeLeft;
-    private int timeTop = AndroidUtilities.dp(17);
-    private StaticLayout timeLayout;
-
-    private boolean drawCheck1;
-    private boolean drawCheck2;
-    private boolean drawClock;
-    private int checkDrawLeft;
-    private int checkDrawTop = AndroidUtilities.dp(18);
-    private int halfCheckDrawLeft;
-
-    private int messageTop = AndroidUtilities.dp(40);
-    private int messageLeft;
-    private StaticLayout messageLayout;
-
-    private boolean drawError;
-    private int errorTop = AndroidUtilities.dp(39);
-    private int errorLeft;
-
-    private boolean drawCount;
-    private int countTop = AndroidUtilities.dp(39);
-    private int countLeft;
-    private int countWidth;
-    private StaticLayout countLayout;
-
-    private int avatarTop = AndroidUtilities.dp(10);
-
-    private boolean isSelected;
-
-    public DialogCell(Context context) {
-        super(context);
-
-        if (namePaint == null) {
-            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(17));
-            namePaint.setColor(0xff212121);
-            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(17));
-            nameEncryptedPaint.setColor(0xff00a60e);
-            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            nameUnknownPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            nameUnknownPaint.setTextSize(AndroidUtilities.dp(17));
-            nameUnknownPaint.setColor(0xff4d83b3);
-            nameUnknownPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            messagePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            messagePaint.setTextSize(AndroidUtilities.dp(16));
-            messagePaint.setColor(0xff8f8f8f);
-            messagePaint.linkColor = 0xff8f8f8f;
-
-            linePaint = new Paint();
-            linePaint.setColor(0xffdcdcdc);
-
-            backPaint = new Paint();
-            backPaint.setColor(0x0f000000);
-
-            messagePrintingPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            messagePrintingPaint.setTextSize(AndroidUtilities.dp(16));
-            messagePrintingPaint.setColor(0xff4d83b3);
-
-            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(13));
-            timePaint.setColor(0xff999999);
-
-            countPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            countPaint.setTextSize(AndroidUtilities.dp(13));
-            countPaint.setColor(0xffffffff);
-            countPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            lockDrawable = getResources().getDrawable(R.drawable.list_secret);
-            checkDrawable = getResources().getDrawable(R.drawable.dialogs_check);
-            halfCheckDrawable = getResources().getDrawable(R.drawable.dialogs_halfcheck);
-            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
-            errorDrawable = getResources().getDrawable(R.drawable.dialogs_warning);
-            countDrawable = getResources().getDrawable(R.drawable.dialogs_badge);
-            groupDrawable = getResources().getDrawable(R.drawable.list_group);
-            broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
-            muteDrawable = getResources().getDrawable(R.drawable.mute_grey);
-        }
-
-        setBackgroundResource(R.drawable.list_selector);
-
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(26));
-        avatarDrawable = new AvatarDrawable();
-    }
-
-    public void setDialog(TLRPC.TL_dialog dialog, int i, boolean server) {
-        currentDialogId = dialog.id;
-        isDialogCell = true;
-        index = i;
-        isServerOnly = server;
-        update(0);
-    }
-
-    public void setDialog(long dialog_id, MessageObject messageObject, int date) {
-        currentDialogId = dialog_id;
-        message = messageObject;
-        isDialogCell = false;
-        lastMessageDate = date;
-        unreadCount = 0;
-        lastUnreadState = messageObject != null && messageObject.isUnread();
-        if (message != null) {
-            lastSendState = message.messageOwner.send_state;
-        }
-        update(0);
-    }
-
-    public long getDialogId() {
-        return currentDialogId;
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        avatarImage.onDetachedFromWindow();
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        avatarImage.onAttachedToWindow();
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(72) + (useSeparator ? 1 : 0));
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (currentDialogId == 0) {
-            super.onLayout(changed, left, top, right, bottom);
-            return;
-        }
-        if (changed) {
-            buildLayout();
-        }
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
-                getBackground().setHotspot(event.getX(), event.getY());
-            }
-        }
-        return super.onTouchEvent(event);
-    }
-
-    public void buildLayout() {
-        String nameString = "";
-        String timeString = "";
-        String countString = null;
-        CharSequence messageString = "";
-        CharSequence printingString = null;
-        if (isDialogCell) {
-            printingString = MessagesController.getInstance().printingStrings.get(currentDialogId);
-        }
-        TextPaint currentNamePaint = namePaint;
-        TextPaint currentMessagePaint = messagePaint;
-        boolean checkMessage = true;
-
-        drawNameGroup = false;
-        drawNameBroadcast = false;
-        drawNameLock = false;
-
-        if (encryptedChat != null) {
-            drawNameLock = true;
-            nameLockTop = AndroidUtilities.dp(16.5f);
-            if (!LocaleController.isRTL) {
-                nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + lockDrawable.getIntrinsicWidth();
-            } else {
-                nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - lockDrawable.getIntrinsicWidth();
-                nameLeft = AndroidUtilities.dp(14);
-            }
-        } else {
-            if (chat != null) {
-                if (chat.id < 0) {
-                    drawNameBroadcast = true;
-                    nameLockTop = AndroidUtilities.dp(16.5f);
-                } else {
-                    drawNameGroup = true;
-                    nameLockTop = AndroidUtilities.dp(17.5f);
-                }
-
-                if (!LocaleController.isRTL) {
-                    nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                } else {
-                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                    nameLeft = AndroidUtilities.dp(14);
-                }
-            } else {
-                if (!LocaleController.isRTL) {
-                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                } else {
-                    nameLeft = AndroidUtilities.dp(14);
-                }
-            }
-        }
-
-        if (message == null) {
-            if (printingString != null) {
-                lastPrintString = messageString = printingString;
-                currentMessagePaint = messagePrintingPaint;
-            } else {
-                lastPrintString = null;
-                if (encryptedChat != null) {
-                    currentMessagePaint = messagePrintingPaint;
-                    if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
-                        messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
-                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
-                        if (user != null && user.first_name != null) {
-                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, user.first_name);
-                        } else {
-                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "");
-                        }
-                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
-                        messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
-                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
-                        if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
-                            if (user != null && user.first_name != null) {
-                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
-                            } else {
-                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, "");
-                            }
-                        } else {
-                            messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
-                        }
-                    }
-                }
-            }
-            if (lastMessageDate != 0) {
-                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
-            }
-            drawCheck1 = false;
-            drawCheck2 = false;
-            drawClock = false;
-            drawCount = false;
-            drawError = false;
-        } else {
-            TLRPC.User fromUser = MessagesController.getInstance().getUser(message.messageOwner.from_id);
-
-            if (lastMessageDate != 0) {
-                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
-            } else {
-                timeString = LocaleController.stringForMessageListDate(message.messageOwner.date);
-            }
-            if (printingString != null) {
-                lastPrintString = messageString = printingString;
-                currentMessagePaint = messagePrintingPaint;
-            } else {
-                lastPrintString = null;
-                if (message.messageOwner instanceof TLRPC.TL_messageService) {
-                    messageString = message.messageText;
-                    currentMessagePaint = messagePrintingPaint;
-                } else {
-                    if (chat != null && chat.id > 0) {
-                        String name = "";
-                        if (message.isOut()) {
-                            name = LocaleController.getString("FromYou", R.string.FromYou);
-                        } else {
-                            if (fromUser != null) {
-                                if (fromUser.first_name.length() > 0) {
-                                    name = fromUser.first_name;
-                                } else {
-                                    name = fromUser.last_name;
-                                }
-                            }
-                        }
-                        checkMessage = false;
-                        if (message.caption != null) {
-                            String mess = message.caption.toString();
-                            if (mess.length() > 150) {
-                                mess = mess.substring(0, 150);
-                            }
-                            mess = mess.replace("\n", " ");
-                            messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                        } else {
-                            if (message.messageOwner.media != null && !message.isMediaEmpty()) {
-                                currentMessagePaint = messagePrintingPaint;
-                                messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                            } else {
-                                if (message.messageOwner.message != null) {
-                                    String mess = message.messageOwner.message;
-                                    if (mess.length() > 150) {
-                                        mess = mess.substring(0, 150);
-                                    }
-                                    mess = mess.replace("\n", " ");
-                                    messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
-                                }
-                            }
-                        }
-                    } else {
-                        if (message.caption != null) {
-                            messageString = message.caption;
-                        } else {
-                            messageString = message.messageText;
-                            if (message.messageOwner.media != null && !message.isMediaEmpty()) {
-                                currentMessagePaint = messagePrintingPaint;
-                            }
-                        }
-                    }
-                }
-            }
-
-            if (unreadCount != 0) {
-                drawCount = true;
-                countString = String.format("%d", unreadCount);
-            } else {
-                drawCount = false;
-            }
-
-            if (message.isOut()) {
-                if (message.isSending()) {
-                    drawCheck1 = false;
-                    drawCheck2 = false;
-                    drawClock = true;
-                    drawError = false;
-                } else if (message.isSendError()) {
-                    drawCheck1 = false;
-                    drawCheck2 = false;
-                    drawClock = false;
-                    drawError = true;
-                    drawCount = false;
-                } else if (message.isSent()) {
-                    if (!message.isUnread()) {
-                        drawCheck1 = true;
-                        drawCheck2 = true;
-                    } else {
-                        drawCheck1 = false;
-                        drawCheck2 = true;
-                    }
-                    drawClock = false;
-                    drawError = false;
-                }
-            } else {
-                drawCheck1 = false;
-                drawCheck2 = false;
-                drawClock = false;
-                drawError = false;
-            }
-        }
-
-        int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
-        timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        if (!LocaleController.isRTL) {
-            timeLeft = getMeasuredWidth() - AndroidUtilities.dp(15) - timeWidth;
-        } else {
-            timeLeft = AndroidUtilities.dp(15);
-        }
-
-        if (chat != null) {
-            nameString = chat.title;
-        } else if (user != null) {
-            if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
-                if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
-                    nameString = ContactsController.formatName(user.first_name, user.last_name);
-                } else {
-                    if (user.phone != null && user.phone.length() != 0) {
-                        nameString = PhoneFormat.getInstance().format("+" + user.phone);
-                    } else {
-                        currentNamePaint = nameUnknownPaint;
-                        nameString = ContactsController.formatName(user.first_name, user.last_name);
-                    }
-                }
-            } else {
-                nameString = ContactsController.formatName(user.first_name, user.last_name);
-            }
-            if (encryptedChat != null) {
-                currentNamePaint = nameEncryptedPaint;
-            }
-        }
-        if (nameString.length() == 0) {
-            nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
-        }
-
-        int nameWidth;
-
-        if (!LocaleController.isRTL) {
-            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(14) - timeWidth;
-        } else {
-            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - timeWidth;
-            nameLeft += timeWidth;
-        }
-        if (drawNameLock) {
-            nameWidth -= AndroidUtilities.dp(4) + lockDrawable.getIntrinsicWidth();
-        } else if (drawNameGroup) {
-            nameWidth -= AndroidUtilities.dp(4) + groupDrawable.getIntrinsicWidth();
-        } else if (drawNameBroadcast) {
-            nameWidth -= AndroidUtilities.dp(4) + broadcastDrawable.getIntrinsicWidth();
-        }
-        if (drawClock) {
-            int w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5);
-            nameWidth -= w;
-            if (!LocaleController.isRTL) {
-                checkDrawLeft = timeLeft - w;
-            } else {
-                checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
-                nameLeft += w;
-            }
-        } else if (drawCheck2) {
-            int w = checkDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5);
-            nameWidth -= w;
-            if (drawCheck1) {
-                nameWidth -= halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(8);
-                if (!LocaleController.isRTL) {
-                    halfCheckDrawLeft = timeLeft - w;
-                    checkDrawLeft = halfCheckDrawLeft - AndroidUtilities.dp(5.5f);
-                } else {
-                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
-                    halfCheckDrawLeft = checkDrawLeft + AndroidUtilities.dp(5.5f);
-                    nameLeft += w + halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(8);
-                }
-            } else {
-                if (!LocaleController.isRTL) {
-                    checkDrawLeft = timeLeft - w;
-                } else {
-                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
-                    nameLeft += w;
-                }
-            }
-        }
-
-        if (dialogMuted) {
-            int w = AndroidUtilities.dp(6) + muteDrawable.getIntrinsicWidth();
-            nameWidth -= w;
-            if (LocaleController.isRTL) {
-                nameLeft += w;
-            }
-        }
-
-        nameWidth = Math.max(AndroidUtilities.dp(12), nameWidth);
-        CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-        try {
-            nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        int messageWidth = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline + 16);
-        int avatarLeft;
-        if (!LocaleController.isRTL) {
-            messageLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-            avatarLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 13 : 9);
-        } else {
-            messageLeft = AndroidUtilities.dp(16);
-            avatarLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.isTablet() ? 65 : 61);
-        }
-        avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(52), AndroidUtilities.dp(52));
-        if (drawError) {
-            int w = errorDrawable.getIntrinsicWidth() + AndroidUtilities.dp(8);
-            messageWidth -= w;
-            if (!LocaleController.isRTL) {
-                errorLeft = getMeasuredWidth() - errorDrawable.getIntrinsicWidth() - AndroidUtilities.dp(11);
-            } else {
-                errorLeft = AndroidUtilities.dp(11);
-                messageLeft += w;
-            }
-        } else if (countString != null) {
-            countWidth = Math.max(AndroidUtilities.dp(12), (int)Math.ceil(countPaint.measureText(countString)));
-            countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
-            int w = countWidth + AndroidUtilities.dp(18);
-            messageWidth -= w;
-            if (!LocaleController.isRTL) {
-                countLeft = getMeasuredWidth() - countWidth - AndroidUtilities.dp(19);
-            } else {
-                countLeft = AndroidUtilities.dp(19);
-                messageLeft += w;
-            }
-            drawCount = true;
-        } else {
-            drawCount = false;
-        }
-
-        if (checkMessage) {
-            if (messageString == null) {
-                messageString = "";
-            }
-            String mess = messageString.toString();
-            if (mess.length() > 150) {
-                mess = mess.substring(0, 150);
-            }
-            mess = mess.replace("\n", " ");
-            messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17));
-        }
-        messageWidth = Math.max(AndroidUtilities.dp(12), messageWidth);
-        CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-        try {
-            messageLayout = new StaticLayout(messageStringFinal, currentMessagePaint, messageWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        double widthpx;
-        float left;
-        if (LocaleController.isRTL) {
-            if (nameLayout != null && nameLayout.getLineCount() > 0) {
-                left = nameLayout.getLineLeft(0);
-                widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                if (dialogMuted) {
-                    nameMuteLeft = (int) (nameLeft + (nameWidth - widthpx) - AndroidUtilities.dp(6) - muteDrawable.getIntrinsicWidth());
-                }
-                if (left == 0) {
-                    if (widthpx < nameWidth) {
-                        nameLeft += (nameWidth - widthpx);
-                    }
-                }
-            }
-            if (messageLayout != null && messageLayout.getLineCount() > 0) {
-                left = messageLayout.getLineLeft(0);
-                if (left == 0) {
-                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
-                    if (widthpx < messageWidth) {
-                        messageLeft += (messageWidth - widthpx);
-                    }
-                }
-            }
-        } else {
-            if (nameLayout != null && nameLayout.getLineCount() > 0) {
-                left = nameLayout.getLineRight(0);
-                if (left == nameWidth) {
-                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                    if (widthpx < nameWidth) {
-                        nameLeft -= (nameWidth - widthpx);
-                    }
-                }
-                if (dialogMuted) {
-                    nameMuteLeft = (int) (nameLeft + left + AndroidUtilities.dp(6));
-                }
-            }
-            if (messageLayout != null && messageLayout.getLineCount() > 0) {
-                left = messageLayout.getLineRight(0);
-                if (left == messageWidth) {
-                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
-                    if (widthpx < messageWidth) {
-                        messageLeft -= (messageWidth - widthpx);
-                    }
-                }
-            }
-        }
-    }
-
-    public void setDialogSelected(boolean value) {
-        if (isSelected != value) {
-            invalidate();
-        }
-        isSelected = value;
-    }
-
-    public void checkCurrentDialogIndex() {
-        TLRPC.TL_dialog dialog = null;
-        if (isServerOnly) {
-            if (index < MessagesController.getInstance().dialogsServerOnly.size()) {
-                dialog = MessagesController.getInstance().dialogsServerOnly.get(index);
-            }
-        } else {
-            if (index < MessagesController.getInstance().dialogs.size()) {
-                dialog = MessagesController.getInstance().dialogs.get(index);
-            }
-        }
-        if (dialog != null) {
-            if (currentDialogId != dialog.id || message != null && message.getId() != dialog.top_message || unreadCount != dialog.unread_count) {
-                currentDialogId = dialog.id;
-                update(0);
-            }
-        }
-    }
-
-    public void update(int mask) {
-        if (isDialogCell) {
-            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
-            if (dialog != null && mask == 0) {
-                message = MessagesController.getInstance().dialogMessage.get(dialog.top_message);
-                lastUnreadState = message != null && message.isUnread();
-                unreadCount = dialog.unread_count;
-                lastMessageDate = dialog.last_message_date;
-                if (message != null) {
-                    lastSendState = message.messageOwner.send_state;
-                }
-            }
-        }
-
-        if (mask != 0) {
-            boolean continueUpdate = false;
-            if (isDialogCell) {
-                if ((mask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
-                    CharSequence printString = MessagesController.getInstance().printingStrings.get(currentDialogId);
-                    if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
-                        continueUpdate = true;
-                    }
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
-                if (chat == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                if (chat == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
-                if (user == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
-                if (user == null) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE) != 0) {
-                if (message != null && lastUnreadState != message.isUnread()) {
-                    lastUnreadState = message.isUnread();
-                    continueUpdate = true;
-                } else if (isDialogCell) {
-                    TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
-                    if (dialog != null && unreadCount != dialog.unread_count) {
-                        unreadCount = dialog.unread_count;
-                        continueUpdate = true;
-                    }
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_SEND_STATE) != 0) {
-                if (message != null && lastSendState != message.messageOwner.send_state) {
-                    lastSendState = message.messageOwner.send_state;
-                    continueUpdate = true;
-                }
-            }
-
-            if (!continueUpdate) {
-                return;
-            }
-        }
-
-        dialogMuted = isDialogCell && MessagesController.getInstance().isDialogMuted(currentDialogId);
-        user = null;
-        chat = null;
-        encryptedChat = null;
-
-        int lower_id = (int)currentDialogId;
-        int high_id = (int)(currentDialogId >> 32);
-        if (lower_id != 0) {
-            if (high_id == 1) {
-                chat = MessagesController.getInstance().getChat(lower_id);
-            } else {
-                if (lower_id < 0) {
-                    chat = MessagesController.getInstance().getChat(-lower_id);
-                } else {
-                    user = MessagesController.getInstance().getUser(lower_id);
-                }
-            }
-        } else {
-            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
-            if (encryptedChat != null) {
-                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
-            }
-        }
-
-        TLRPC.FileLocation photo = null;
-        if (user != null) {
-            if (user.photo != null) {
-                photo = user.photo.photo_small;
-            }
-            avatarDrawable.setInfo(user);
-        } else if (chat != null) {
-            if (chat.photo != null) {
-                photo = chat.photo.photo_small;
-            }
-            avatarDrawable.setInfo(chat);
-        }
-        avatarImage.setImage(photo, "50_50", avatarDrawable, null, false);
-
-        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
-            buildLayout();
-        } else {
-            requestLayout();
-        }
-
-        invalidate();
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (currentDialogId == 0) {
-            return;
-        }
-
-        if (isSelected) {
-            canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), backPaint);
-        }
-
-        if (drawNameLock) {
-            setDrawableBounds(lockDrawable, nameLockLeft, nameLockTop);
-            lockDrawable.draw(canvas);
-        } else if (drawNameGroup) {
-            setDrawableBounds(groupDrawable, nameLockLeft, nameLockTop);
-            groupDrawable.draw(canvas);
-        } else if (drawNameBroadcast) {
-            setDrawableBounds(broadcastDrawable, nameLockLeft, nameLockTop);
-            broadcastDrawable.draw(canvas);
-        }
-
-        if (nameLayout != null) {
-            canvas.save();
-            canvas.translate(nameLeft, AndroidUtilities.dp(13));
-            nameLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        canvas.save();
-        canvas.translate(timeLeft, timeTop);
-        timeLayout.draw(canvas);
-        canvas.restore();
-
-        if (messageLayout != null) {
-            canvas.save();
-            canvas.translate(messageLeft, messageTop);
-            messageLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        if (drawClock) {
-            setDrawableBounds(clockDrawable, checkDrawLeft, checkDrawTop);
-            clockDrawable.draw(canvas);
-        } else if (drawCheck2) {
-            if (drawCheck1) {
-                setDrawableBounds(halfCheckDrawable, halfCheckDrawLeft, checkDrawTop);
-                halfCheckDrawable.draw(canvas);
-                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
-                checkDrawable.draw(canvas);
-            } else {
-                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
-                checkDrawable.draw(canvas);
-            }
-        }
-
-        if (dialogMuted) {
-            setDrawableBounds(muteDrawable, nameMuteLeft, AndroidUtilities.dp(16.5f));
-            muteDrawable.draw(canvas);
-        }
-
-        if (drawError) {
-            setDrawableBounds(errorDrawable, errorLeft, errorTop);
-            errorDrawable.draw(canvas);
-        } else if (drawCount) {
-            setDrawableBounds(countDrawable, countLeft - AndroidUtilities.dp(5.5f), countTop, countWidth + AndroidUtilities.dp(11), countDrawable.getIntrinsicHeight());
-            countDrawable.draw(canvas);
-            canvas.save();
-            canvas.translate(countLeft, countTop + AndroidUtilities.dp(4));
-            countLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        if (useSeparator) {
-            if (LocaleController.isRTL) {
-                canvas.drawLine(0, getMeasuredHeight() - 1, getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline), getMeasuredHeight() - 1, linePaint);
-            } else {
-                canvas.drawLine(AndroidUtilities.dp(AndroidUtilities.leftBaseline), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, linePaint);
-            }
-        }
-
-        avatarImage.draw(canvas);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
deleted file mode 100644
index bfc725fa0..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class HeaderCell extends FrameLayout {
-
-    private TextView textView;
-
-    public HeaderCell(Context context) {
-        super(context);
-
-        textView = new TextView(getContext());
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setTextColor(0xff3e90cf);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 15, 17, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(38), MeasureSpec.EXACTLY));
-    }
-
-    public void setText(String text) {
-        textView.setText(text);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java
deleted file mode 100644
index 4ff29231f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/LetterSectionCell.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class LetterSectionCell extends FrameLayout {
-
-    private TextView textView;
-
-    public LetterSectionCell(Context context) {
-        super(context);
-        setLayoutParams(new ViewGroup.LayoutParams(AndroidUtilities.dp(54), AndroidUtilities.dp(64)));
-
-        textView = new TextView(getContext());
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 22);
-        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setTextColor(0xff808080);
-        textView.setGravity(Gravity.CENTER);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-    }
-
-    public void setLetter(String letter) {
-        textView.setText(letter.toUpperCase());
-    }
-
-    public void setCellHeight(int height) {
-        setLayoutParams(new ViewGroup.LayoutParams(AndroidUtilities.dp(54), height));
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
deleted file mode 100644
index cc7537594..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
+++ /dev/null
@@ -1,436 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.MotionEvent;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.AvatarDrawable;
-
-public class ProfileSearchCell extends BaseCell {
-
-    private static TextPaint namePaint;
-    private static TextPaint nameEncryptedPaint;
-    private static TextPaint onlinePaint;
-    private static TextPaint offlinePaint;
-    private static Drawable lockDrawable;
-    private static Drawable broadcastDrawable;
-    private static Drawable groupDrawable;
-    private static Paint linePaint;
-
-    private CharSequence currentName;
-    private ImageReceiver avatarImage;
-    private AvatarDrawable avatarDrawable;
-    private CharSequence subLabel;
-
-    private TLRPC.User user = null;
-    private TLRPC.Chat chat = null;
-    private TLRPC.EncryptedChat encryptedChat = null;
-
-    private String lastName = null;
-    private int lastStatus = 0;
-    private TLRPC.FileLocation lastAvatar = null;
-
-    public boolean useSeparator = false;
-    public float drawAlpha = 1;
-
-    private int nameLeft;
-    private int nameTop;
-    private StaticLayout nameLayout;
-    private boolean drawNameLock;
-    private boolean drawNameBroadcast;
-    private boolean drawNameGroup;
-    private int nameLockLeft;
-    private int nameLockTop;
-
-    private int onlineLeft;
-    private StaticLayout onlineLayout;
-
-    public ProfileSearchCell(Context context) {
-        super(context);
-
-        if (namePaint == null) {
-            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(17));
-            namePaint.setColor(0xff212121);
-            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(17));
-            nameEncryptedPaint.setColor(0xff00a60e);
-            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            onlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            onlinePaint.setTextSize(AndroidUtilities.dp(16));
-            onlinePaint.setColor(0xff316f9f);
-
-            offlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            offlinePaint.setTextSize(AndroidUtilities.dp(16));
-            offlinePaint.setColor(0xff999999);
-
-            linePaint = new Paint();
-            linePaint.setColor(0xffdcdcdc);
-
-            broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
-            lockDrawable = getResources().getDrawable(R.drawable.list_secret);
-            groupDrawable = getResources().getDrawable(R.drawable.list_group);
-        }
-
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(26));
-        avatarDrawable = new AvatarDrawable();
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
-                getBackground().setHotspot(event.getX(), event.getY());
-            }
-        }
-        return super.onTouchEvent(event);
-    }
-
-    public void setData(TLRPC.User u, TLRPC.Chat c, TLRPC.EncryptedChat ec, CharSequence n, CharSequence s) {
-        currentName = n;
-        user = u;
-        chat = c;
-        encryptedChat = ec;
-        subLabel = s;
-        update(0);
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        avatarImage.onDetachedFromWindow();
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        avatarImage.onAttachedToWindow();
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(72));
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (user == null && chat == null && encryptedChat == null) {
-            super.onLayout(changed, left, top, right, bottom);
-            return;
-        }
-        if (changed) {
-            buildLayout();
-        }
-    }
-
-    public void buildLayout() {
-        CharSequence nameString;
-        TextPaint currentNamePaint;
-
-        drawNameBroadcast = false;
-        drawNameLock = false;
-        drawNameGroup = false;
-
-        if (encryptedChat != null) {
-            drawNameLock = true;
-            if (!LocaleController.isRTL) {
-                nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + lockDrawable.getIntrinsicWidth();
-            } else {
-                nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline + 2) - lockDrawable.getIntrinsicWidth();
-                nameLeft = AndroidUtilities.dp(11);
-            }
-            nameLockTop = AndroidUtilities.dp(16.5f);
-        } else {
-            if (chat != null) {
-
-                if (chat.id < 0) {
-                    drawNameBroadcast = true;
-                    nameLockTop = AndroidUtilities.dp(28.5f);
-                } else {
-                    drawNameGroup = true;
-                    nameLockTop = AndroidUtilities.dp(30);
-                }
-                if (!LocaleController.isRTL) {
-                    nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                } else {
-                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline + 2) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
-                    nameLeft = AndroidUtilities.dp(11);
-                }
-            } else {
-                if (!LocaleController.isRTL) {
-                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-                } else {
-                    nameLeft = AndroidUtilities.dp(11);
-                }
-            }
-        }
-
-        if (currentName != null) {
-            nameString = currentName;
-        } else {
-            String nameString2 = "";
-            if (chat != null) {
-                nameString2 = chat.title;
-            } else if (user != null) {
-                nameString2 = ContactsController.formatName(user.first_name, user.last_name);
-            }
-            nameString = nameString2.replace("\n", " ");
-        }
-        if (nameString.length() == 0) {
-            if (user != null && user.phone != null && user.phone.length() != 0) {
-                nameString = PhoneFormat.getInstance().format("+" + user.phone);
-            } else {
-                nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
-            }
-        }
-        if (encryptedChat != null) {
-            currentNamePaint = nameEncryptedPaint;
-        } else {
-            currentNamePaint = namePaint;
-        }
-
-        int onlineWidth;
-        int nameWidth;
-        if (!LocaleController.isRTL) {
-            onlineWidth = nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(14);
-        } else {
-            onlineWidth = nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-        }
-        if (drawNameLock) {
-            nameWidth -= AndroidUtilities.dp(6) + lockDrawable.getIntrinsicWidth();
-        } else if (drawNameBroadcast) {
-            nameWidth -= AndroidUtilities.dp(6) + broadcastDrawable.getIntrinsicWidth();
-        } else if (drawNameGroup) {
-            nameWidth -= AndroidUtilities.dp(6) + groupDrawable.getIntrinsicWidth();
-        }
-
-        CharSequence nameStringFinal = TextUtils.ellipsize(nameString, currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-        nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-
-        if (chat == null) {
-            if (!LocaleController.isRTL) {
-                onlineLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
-            } else {
-                onlineLeft = AndroidUtilities.dp(11);
-            }
-
-            CharSequence onlineString;
-            TextPaint currentOnlinePaint = offlinePaint;
-
-            if (subLabel != null) {
-                onlineString = subLabel;
-            } else {
-                onlineString = LocaleController.formatUserStatus(user);
-                if (user != null && (user.id == UserConfig.getClientUserId() || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
-                    currentOnlinePaint = onlinePaint;
-                    onlineString = LocaleController.getString("Online", R.string.Online);
-                }
-            }
-
-            CharSequence onlineStringFinal = TextUtils.ellipsize(onlineString, currentOnlinePaint, onlineWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
-            onlineLayout = new StaticLayout(onlineStringFinal, currentOnlinePaint, onlineWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            nameTop = AndroidUtilities.dp(13);
-        } else {
-            onlineLayout = null;
-            nameTop = AndroidUtilities.dp(25);
-        }
-
-        int avatarLeft;
-        if (!LocaleController.isRTL) {
-            avatarLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 13 : 9);
-        } else {
-            avatarLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.isTablet() ? 65 : 61);
-        }
-
-        avatarImage.setImageCoords(avatarLeft, AndroidUtilities.dp(10), AndroidUtilities.dp(52), AndroidUtilities.dp(52));
-
-        double widthpx;
-        float left;
-        if (LocaleController.isRTL) {
-            if (nameLayout.getLineCount() > 0) {
-                left = nameLayout.getLineLeft(0);
-                if (left == 0) {
-                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                    if (widthpx < nameWidth) {
-                        nameLeft += (nameWidth - widthpx);
-                    }
-                }
-            }
-            if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
-                left = onlineLayout.getLineLeft(0);
-                if (left == 0) {
-                    widthpx = Math.ceil(onlineLayout.getLineWidth(0));
-                    if (widthpx < onlineWidth) {
-                        onlineLeft += (onlineWidth - widthpx);
-                    }
-                }
-            }
-        } else {
-            if (nameLayout.getLineCount() > 0) {
-                left = nameLayout.getLineRight(0);
-                if (left == nameWidth) {
-                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
-                    if (widthpx < nameWidth) {
-                        nameLeft -= (nameWidth - widthpx);
-                    }
-                }
-            }
-            if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
-                left = onlineLayout.getLineRight(0);
-                if (left == onlineWidth) {
-                    widthpx = Math.ceil(onlineLayout.getLineWidth(0));
-                    if (widthpx < onlineWidth) {
-                        onlineLeft -= (onlineWidth - widthpx);
-                    }
-                }
-            }
-        }
-    }
-
-    public void update(int mask) {
-        TLRPC.FileLocation photo = null;
-        if (user != null) {
-            if (user.photo != null) {
-                photo = user.photo.photo_small;
-            }
-            avatarDrawable.setInfo(user);
-        } else if (chat != null) {
-            if (chat.photo != null) {
-                photo = chat.photo.photo_small;
-            }
-            avatarDrawable.setInfo(chat);
-        } else {
-            avatarDrawable.setInfo(0, null, null, false);
-        }
-
-        if (mask != 0) {
-            boolean continueUpdate = false;
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 && user != null || (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 && chat != null) {
-                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0 && user != null) {
-                int newStatus = 0;
-                if (user.status != null) {
-                    newStatus = user.status.expires;
-                }
-                if (newStatus != lastStatus) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && ((mask & MessagesController.UPDATE_MASK_NAME) != 0 && user != null) || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 && chat != null) {
-                String newName;
-                if (user != null) {
-                    newName = user.first_name + user.last_name;
-                } else {
-                    newName = chat.title;
-                }
-                if (!newName.equals(lastName)) {
-                    continueUpdate = true;
-                }
-            }
-
-            if (!continueUpdate) {
-                return;
-            }
-        }
-
-        if (user != null) {
-            if (user.status != null) {
-                lastStatus = user.status.expires;
-            } else {
-                lastStatus = 0;
-            }
-            lastName = user.first_name + user.last_name;
-        } else if (chat != null) {
-            lastName = chat.title;
-        }
-
-
-        lastAvatar = photo;
-        avatarImage.setImage(photo, "50_50", avatarDrawable, null, false);
-
-        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
-            buildLayout();
-        } else {
-            requestLayout();
-        }
-        postInvalidate();
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (user == null && chat == null && encryptedChat == null) {
-            return;
-        }
-
-        if (useSeparator) {
-            if (LocaleController.isRTL) {
-                canvas.drawLine(0, getMeasuredHeight() - 1, getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline), getMeasuredHeight() - 1, linePaint);
-            } else {
-                canvas.drawLine(AndroidUtilities.dp(AndroidUtilities.leftBaseline), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, linePaint);
-            }
-        }
-
-        if (drawAlpha != 1) {
-            canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int)(255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
-        }
-
-        if (drawNameLock) {
-            setDrawableBounds(lockDrawable, nameLockLeft, nameLockTop);
-            lockDrawable.draw(canvas);
-        } else if (drawNameGroup) {
-            setDrawableBounds(groupDrawable, nameLockLeft, nameLockTop);
-            groupDrawable.draw(canvas);
-        } else if (drawNameBroadcast) {
-            setDrawableBounds(broadcastDrawable, nameLockLeft, nameLockTop);
-            broadcastDrawable.draw(canvas);
-        }
-
-        canvas.save();
-        canvas.translate(nameLeft, nameTop);
-        nameLayout.draw(canvas);
-        canvas.restore();
-
-        if (onlineLayout != null) {
-            canvas.save();
-            canvas.translate(onlineLeft, AndroidUtilities.dp(40));
-            onlineLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        avatarImage.draw(canvas);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SessionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SessionCell.java
deleted file mode 100644
index 4555b276b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SessionCell.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.Locale;
-
-public class SessionCell extends FrameLayout {
-
-    private TextView nameTextView;
-    private TextView onlineTextView;
-    private TextView detailTextView;
-    private TextView detailExTextView;
-    boolean needDivider;
-    private static Paint paint;
-
-    public SessionCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-            paint.setStrokeWidth(1);
-        }
-
-        LinearLayout linearLayout = new LinearLayout(context);
-        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
-        linearLayout.setWeightSum(1);
-        addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 30, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 11, 11, 0));
-
-        nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xff212121);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        nameTextView.setLines(1);
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        nameTextView.setMaxLines(1);
-        nameTextView.setSingleLine(true);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-
-        onlineTextView = new TextView(context);
-        onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        onlineTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP);
-
-        if (LocaleController.isRTL) {
-            linearLayout.addView(onlineTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 2, 0, 0));
-            linearLayout.addView(nameTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.RIGHT | Gravity.TOP, 10, 0, 0, 0));
-        } else {
-            linearLayout.addView(nameTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.LEFT | Gravity.TOP, 0, 0, 10, 0));
-            linearLayout.addView(onlineTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.RIGHT | Gravity.TOP, 0, 2, 0, 0));
-        }
-
-        detailTextView = new TextView(context);
-        detailTextView.setTextColor(0xff212121);
-        detailTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        detailTextView.setLines(1);
-        detailTextView.setMaxLines(1);
-        detailTextView.setSingleLine(true);
-        detailTextView.setEllipsize(TextUtils.TruncateAt.END);
-        detailTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-        addView(detailTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 36, 17, 0));
-
-        detailExTextView = new TextView(context);
-        detailExTextView.setTextColor(0xff999999);
-        detailExTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        detailExTextView.setLines(1);
-        detailExTextView.setMaxLines(1);
-        detailExTextView.setSingleLine(true);
-        detailExTextView.setEllipsize(TextUtils.TruncateAt.END);
-        detailExTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-        addView(detailExTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 59, 17, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(90) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
-    }
-
-    public void setSession(TLRPC.TL_authorization session, boolean divider) {
-        needDivider = divider;
-
-        nameTextView.setText(String.format(Locale.US, "%s %s", session.app_name, session.app_version));
-        if ((session.flags & 1) != 0) {
-            onlineTextView.setText(LocaleController.getString("Online", R.string.Online));
-            onlineTextView.setTextColor(0xff2f8cc9);
-        } else {
-            onlineTextView.setText(LocaleController.stringForMessageListDate(session.date_active));
-            onlineTextView.setTextColor(0xff999999);
-        }
-
-        StringBuilder stringBuilder = new StringBuilder();
-        if (session.ip.length() != 0) {
-            stringBuilder.append(session.ip);
-        }
-        if (session.country.length() != 0) {
-            if (stringBuilder.length() != 0) {
-                stringBuilder.append(" ");
-            }
-            stringBuilder.append("— ");
-            stringBuilder.append(session.country);
-        }
-        detailExTextView.setText(stringBuilder);
-
-        stringBuilder = new StringBuilder();
-        if (session.device_model.length() != 0) {
-            stringBuilder.append(session.device_model);
-        }
-        if (session.system_version.length() != 0 || session.platform.length() != 0) {
-            if (stringBuilder.length() != 0) {
-                stringBuilder.append(", ");
-            }
-            if (session.platform.length() != 0) {
-                stringBuilder.append(session.platform);
-            }
-            if (session.system_version.length() != 0) {
-                if (session.platform.length() != 0) {
-                    stringBuilder.append(" ");
-                }
-                stringBuilder.append(session.system_version);
-            }
-        }
-
-        if ((session.flags & 2) == 0) {
-            if (stringBuilder.length() != 0) {
-                stringBuilder.append(", ");
-            }
-            stringBuilder.append(LocaleController.getString("UnofficialApp", R.string.UnofficialApp));
-            stringBuilder.append(" (ID: ");
-            stringBuilder.append(session.api_id);
-            stringBuilder.append(")");
-        }
-
-        detailTextView.setText(stringBuilder);
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java
deleted file mode 100644
index ed0998b50..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowBottomSectionCell.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.view.View;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
-
-public class ShadowBottomSectionCell extends View {
-
-    public ShadowBottomSectionCell(Context context) {
-        super(context);
-        setBackgroundResource(R.drawable.greydivider_bottom);
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(6), MeasureSpec.EXACTLY));
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
deleted file mode 100644
index ad130f9bd..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.view.View;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
-
-public class ShadowSectionCell extends View {
-
-    public ShadowSectionCell(Context context) {
-        super(context);
-        setBackgroundResource(R.drawable.greydivider);
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(12), MeasureSpec.EXACTLY));
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
deleted file mode 100644
index 4c2e46a36..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
+++ /dev/null
@@ -1,333 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.CheckBox;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.LineProgressView;
-
-import java.io.File;
-import java.util.Date;
-
-public class SharedDocumentCell extends FrameLayout implements MediaController.FileDownloadProgressListener {
-
-    private ImageView placeholderImabeView;
-    private BackupImageView thumbImageView;
-    private TextView nameTextView;
-    private TextView extTextView;
-    private TextView dateTextView;
-    private ImageView statusImageView;
-    private LineProgressView progressView;
-    private CheckBox checkBox;
-
-    private boolean needDivider;
-
-    private static Paint paint;
-
-    private int TAG;
-
-    private MessageObject message;
-    private boolean loading;
-    private boolean loaded;
-
-    private int icons[] = {
-            R.drawable.media_doc_blue,
-            R.drawable.media_doc_green,
-            R.drawable.media_doc_red,
-            R.drawable.media_doc_yellow
-    };
-
-    public SharedDocumentCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-            paint.setStrokeWidth(1);
-        }
-
-        TAG = MediaController.getInstance().generateObserverTag();
-
-        placeholderImabeView = new ImageView(context);
-        addView(placeholderImabeView, LayoutHelper.createFrame(40, 40, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 12, 8, LocaleController.isRTL ? 12 : 0, 0));
-
-        extTextView = new TextView(context);
-        extTextView.setTextColor(0xffffffff);
-        extTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        extTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        extTextView.setLines(1);
-        extTextView.setMaxLines(1);
-        extTextView.setSingleLine(true);
-        extTextView.setGravity(Gravity.CENTER);
-        extTextView.setEllipsize(TextUtils.TruncateAt.END);
-        addView(extTextView, LayoutHelper.createFrame(32, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 16, 22, LocaleController.isRTL ? 16 : 0, 0));
-
-        thumbImageView = new BackupImageView(context);
-        addView(thumbImageView, LayoutHelper.createFrame(40, 40, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 12, 8, LocaleController.isRTL ? 12 : 0, 0));
-        thumbImageView.getImageReceiver().setDelegate(new ImageReceiver.ImageReceiverDelegate() {
-            @Override
-            public void didSetImage(ImageReceiver imageReceiver, boolean set, boolean thumb) {
-                extTextView.setVisibility(set ? INVISIBLE : VISIBLE);
-                placeholderImabeView.setVisibility(set ? INVISIBLE : VISIBLE);
-            }
-        });
-
-        nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xff222222);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        nameTextView.setLines(1);
-        nameTextView.setMaxLines(1);
-        nameTextView.setSingleLine(true);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 8 : 72, 5, LocaleController.isRTL ? 72 : 8, 0));
-
-        statusImageView = new ImageView(context);
-        statusImageView.setVisibility(INVISIBLE);
-        addView(statusImageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 8 : 72, 35, LocaleController.isRTL ? 72 : 8, 0));
-
-        dateTextView = new TextView(context);
-        dateTextView.setTextColor(0xff999999);
-        dateTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        dateTextView.setLines(1);
-        dateTextView.setMaxLines(1);
-        dateTextView.setSingleLine(true);
-        dateTextView.setEllipsize(TextUtils.TruncateAt.END);
-        dateTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(dateTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 8 : 72, 30, LocaleController.isRTL ? 72 : 8, 0));
-
-        progressView = new LineProgressView(context);
-        addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 2, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 72, 54, LocaleController.isRTL ? 72 : 0, 0));
-
-        checkBox = new CheckBox(context, R.drawable.round_check2);
-        checkBox.setVisibility(INVISIBLE);
-        addView(checkBox, LayoutHelper.createFrame(22, 22, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 34, 30, LocaleController.isRTL ? 34 : 0, 0));
-    }
-
-    private int getThumbForNameOrMime(String name, String mime) {
-        if (name != null && name.length() != 0) {
-            int color = -1;
-            if (name.contains(".doc") || name.contains(".txt") || name.contains(".psd")) {
-                color = 0;
-            } else if (name.contains(".xls") || name.contains(".csv")) {
-                color = 1;
-            } else if (name.contains(".pdf") || name.contains(".ppt") || name.contains(".key")) {
-                color = 2;
-            } else if (name.contains(".zip") || name.contains(".rar") || name.contains(".ai") || name.contains(".mp3")  || name.contains(".mov") || name.contains(".avi")) {
-                color = 3;
-            }
-            if (color == -1) {
-                int idx;
-                String ext = (idx = name.lastIndexOf(".")) == -1 ? "" : name.substring(idx + 1);
-                if (ext.length() != 0) {
-                    color = ext.charAt(0) % icons.length;
-                } else {
-                    color = name.charAt(0) % icons.length;
-                }
-            }
-            return icons[color];
-        }
-        return icons[0];
-    }
-
-    public void setTextAndValueAndTypeAndThumb(String text, String value, String type, String thumb, int resId) {
-        nameTextView.setText(text);
-        dateTextView.setText(value);
-        if (type != null) {
-            extTextView.setVisibility(VISIBLE);
-            extTextView.setText(type);
-        } else {
-            extTextView.setVisibility(INVISIBLE);
-        }
-        if (resId == 0) {
-            placeholderImabeView.setImageResource(getThumbForNameOrMime(text, type));
-            placeholderImabeView.setVisibility(VISIBLE);
-        } else {
-            placeholderImabeView.setVisibility(INVISIBLE);
-        }
-        if (thumb != null || resId != 0) {
-            if (thumb != null) {
-                thumbImageView.setImage(thumb, "40_40", null);
-            } else  {
-                thumbImageView.setImageResource(resId);
-            }
-            thumbImageView.setVisibility(VISIBLE);
-        } else {
-            thumbImageView.setVisibility(INVISIBLE);
-        }
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        MediaController.getInstance().removeLoadingFileObserver(this);
-    }
-
-    public void setChecked(boolean checked, boolean animated) {
-        if (checkBox.getVisibility() != VISIBLE) {
-            checkBox.setVisibility(VISIBLE);
-        }
-        checkBox.setChecked(checked, animated);
-    }
-
-    public void setDocument(MessageObject document, boolean divider) {
-        needDivider = divider;
-        message = document;
-        loaded = false;
-        loading = false;
-
-        if (document != null && document.messageOwner.media != null) {
-            int idx;
-            String name = FileLoader.getDocumentFileName(document.messageOwner.media.document);
-            placeholderImabeView.setVisibility(VISIBLE);
-            extTextView.setVisibility(VISIBLE);
-            placeholderImabeView.setImageResource(getThumbForNameOrMime(name, document.messageOwner.media.document.mime_type));
-            nameTextView.setText(name);
-            extTextView.setText((idx = name.lastIndexOf(".")) == -1 ? "" : name.substring(idx + 1).toLowerCase());
-            if (document.messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty) {
-                thumbImageView.setVisibility(INVISIBLE);
-                thumbImageView.setImageBitmap(null);
-            } else {
-                thumbImageView.setVisibility(VISIBLE);
-                thumbImageView.setImage(document.messageOwner.media.document.thumb.location, "40_40", (Drawable) null);
-            }
-            long date = (long) document.messageOwner.date * 1000;
-            dateTextView.setText(String.format("%s, %s", AndroidUtilities.formatFileSize(document.messageOwner.media.document.size), LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(new Date(date)), LocaleController.formatterDay.format(new Date(date)))));
-        } else {
-            nameTextView.setText("");
-            extTextView.setText("");
-            dateTextView.setText("");
-            placeholderImabeView.setVisibility(VISIBLE);
-            extTextView.setVisibility(VISIBLE);
-            thumbImageView.setVisibility(INVISIBLE);
-            thumbImageView.setImageBitmap(null);
-        }
-
-        setWillNotDraw(!needDivider);
-        progressView.setProgress(0, false);
-        updateFileExistIcon();
-    }
-
-    public void updateFileExistIcon() {
-        if (message != null && message.messageOwner.media != null) {
-            String fileName = null;
-            File cacheFile;
-            if (message.messageOwner.attachPath == null || message.messageOwner.attachPath.length() == 0 || !(new File(message.messageOwner.attachPath).exists())) {
-                cacheFile = FileLoader.getPathToMessage(message.messageOwner);
-                if (!cacheFile.exists()) {
-                    fileName = FileLoader.getAttachFileName(message.messageOwner.media.document);
-                }
-            }
-            loaded = false;
-            if (fileName == null) {
-                statusImageView.setVisibility(INVISIBLE);
-                dateTextView.setPadding(0, 0, 0, 0);
-                loading = false;
-                loaded = true;
-                MediaController.getInstance().removeLoadingFileObserver(this);
-            } else {
-                MediaController.getInstance().addLoadingFileObserver(fileName, this);
-                loading = FileLoader.getInstance().isLoadingFile(fileName);
-                statusImageView.setVisibility(VISIBLE);
-                statusImageView.setImageResource(loading ? R.drawable.media_doc_pause : R.drawable.media_doc_load);
-                dateTextView.setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(14), 0, LocaleController.isRTL ? AndroidUtilities.dp(14) : 0, 0);
-                if (loading) {
-                    progressView.setVisibility(VISIBLE);
-                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                    if (progress == null) {
-                        progress = 0.0f;
-                    }
-                    progressView.setProgress(progress, false);
-                } else {
-                    progressView.setVisibility(INVISIBLE);
-                }
-            }
-        } else {
-            loading = false;
-            loaded = true;
-            progressView.setVisibility(INVISIBLE);
-            progressView.setProgress(0, false);
-            statusImageView.setVisibility(INVISIBLE);
-            dateTextView.setPadding(0, 0, 0, 0);
-            MediaController.getInstance().removeLoadingFileObserver(this);
-        }
-    }
-
-    public MessageObject getDocument() {
-        return message;
-    }
-
-    public boolean isLoaded() {
-        return loaded;
-    }
-
-    public boolean isLoading() {
-        return loading;
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(56) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(AndroidUtilities.dp(72), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-    }
-
-    @Override
-    public void onFailedDownload(String name) {
-        updateFileExistIcon();
-    }
-
-    @Override
-    public void onSuccessDownload(String name) {
-        progressView.setProgress(1, true);
-        updateFileExistIcon();
-    }
-
-    @Override
-    public void onProgressDownload(String fileName, float progress) {
-        progressView.setProgress(progress, true);
-    }
-
-    @Override
-    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-
-    }
-
-    @Override
-    public int getObserverTag() {
-        return TAG;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedMediaSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedMediaSectionCell.java
deleted file mode 100644
index 1646b509b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedMediaSectionCell.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class SharedMediaSectionCell extends FrameLayout {
-
-    private TextView textView;
-
-    public SharedMediaSectionCell(Context context) {
-        super(context);
-
-        textView = new TextView(getContext());
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        textView.setTextColor(0xff222222);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 13, 0, 13, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40), MeasureSpec.EXACTLY));
-    }
-
-    public void setText(String text) {
-        textView.setText(text);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
deleted file mode 100644
index 879043844..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
+++ /dev/null
@@ -1,224 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.os.Build;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.MotionEvent;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.MessageObject;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.CheckBox;
-import org.telegram.ui.Components.FrameLayoutFixed;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.PhotoViewer;
-
-public class SharedPhotoVideoCell extends FrameLayoutFixed {
-
-    private PhotoVideoView[] photoVideoViews;
-    private MessageObject[] messageObjects;
-    private int[] indeces;
-    private SharedPhotoVideoCellDelegate delegate;
-    private int itemsCount;
-    private boolean isFirst;
-
-    public interface SharedPhotoVideoCellDelegate {
-        void didClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a);
-        boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a);
-    }
-
-    private class PhotoVideoView extends FrameLayoutFixed {
-
-        private BackupImageView imageView;
-        private TextView videoTextView;
-        private LinearLayout videoInfoContainer;
-        private View selector;
-        private CheckBox checkBox;
-
-        public PhotoVideoView(Context context) {
-            super(context);
-
-            imageView = new BackupImageView(context);
-            imageView.getImageReceiver().setNeedsQualityThumb(true);
-            imageView.getImageReceiver().setShouldGenerateQualityThumb(true);
-            addView(imageView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-            videoInfoContainer = new LinearLayout(context);
-            videoInfoContainer.setOrientation(LinearLayout.HORIZONTAL);
-            videoInfoContainer.setBackgroundResource(R.drawable.phototime);
-            videoInfoContainer.setPadding(AndroidUtilities.dp(3), 0, AndroidUtilities.dp(3), 0);
-            videoInfoContainer.setGravity(Gravity.CENTER_VERTICAL);
-            addView(videoInfoContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 16, Gravity.BOTTOM | Gravity.LEFT));
-
-            ImageView imageView1 = new ImageView(context);
-            imageView1.setImageResource(R.drawable.ic_video);
-            videoInfoContainer.addView(imageView1, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
-
-            videoTextView = new TextView(context);
-            videoTextView.setTextColor(0xffffffff);
-            videoTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
-            videoTextView.setGravity(Gravity.CENTER_VERTICAL);
-            videoInfoContainer.addView(videoTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 4, 0, 0, 1));
-
-            selector = new View(context);
-            selector.setBackgroundResource(R.drawable.list_selector);
-            addView(selector, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-            checkBox = new CheckBox(context, R.drawable.round_check2);
-            checkBox.setVisibility(INVISIBLE);
-            addView(checkBox, LayoutHelper.createFrame(22, 22, Gravity.RIGHT | Gravity.TOP, 6, 0, 6, 0));
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent event) {
-            if (Build.VERSION.SDK_INT >= 21) {
-                selector.drawableHotspotChanged(event.getX(), event.getY());
-            }
-            return super.onTouchEvent(event);
-        }
-    }
-
-    public SharedPhotoVideoCell(Context context) {
-        super(context);
-
-        messageObjects = new MessageObject[6];
-        photoVideoViews = new PhotoVideoView[6];
-        indeces = new int[6];
-        for (int a = 0; a < 6; a++) {
-            photoVideoViews[a] = new PhotoVideoView(context);
-            addView(photoVideoViews[a]);
-            photoVideoViews[a].setVisibility(INVISIBLE);
-            photoVideoViews[a].setTag(a);
-            photoVideoViews[a].setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (delegate != null) {
-                        int a = (Integer) v.getTag();
-                        delegate.didClickItem(SharedPhotoVideoCell.this, indeces[a], messageObjects[a], a);
-                    }
-                }
-            });
-            photoVideoViews[a].setOnLongClickListener(new OnLongClickListener() {
-                @Override
-                public boolean onLongClick(View v) {
-                    if (delegate != null) {
-                        int a = (Integer) v.getTag();
-                        return delegate.didLongClickItem(SharedPhotoVideoCell.this, indeces[a], messageObjects[a], a);
-                    }
-                    return false;
-                }
-            });
-        }
-    }
-
-    public void setDelegate(SharedPhotoVideoCellDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public void setItemsCount(int count) {
-        for (int a = 0; a < photoVideoViews.length; a++) {
-            photoVideoViews[a].setVisibility(a < count ? VISIBLE : INVISIBLE);
-        }
-        itemsCount = count;
-    }
-
-    public BackupImageView getImageView(int a) {
-        if (a >= itemsCount) {
-            return null;
-        }
-        return photoVideoViews[a].imageView;
-    }
-
-    public MessageObject getMessageObject(int a) {
-        if (a >= itemsCount) {
-            return null;
-        }
-        return messageObjects[a];
-    }
-
-    public void setIsFirst(boolean first) {
-        isFirst = first;
-    }
-
-    public void setChecked(int a, boolean checked, boolean animated) {
-        if (photoVideoViews[a].checkBox.getVisibility() != VISIBLE) {
-            photoVideoViews[a].checkBox.setVisibility(VISIBLE);
-        }
-        photoVideoViews[a].checkBox.setChecked(checked, animated);
-    }
-
-    public void setItem(int a, int index, MessageObject messageObject) {
-        messageObjects[a] = messageObject;
-        indeces[a] = index;
-
-        if (messageObject != null) {
-            photoVideoViews[a].setVisibility(VISIBLE);
-
-            PhotoVideoView photoVideoView = photoVideoViews[a];
-            photoVideoView.imageView.getImageReceiver().setParentMessageObject(messageObject);
-            photoVideoView.imageView.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(messageObject), false);
-            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo && messageObject.messageOwner.media.video != null) {
-                photoVideoView.videoInfoContainer.setVisibility(VISIBLE);
-                int duration = messageObject.messageOwner.media.video.duration;
-                int minutes = duration / 60;
-                int seconds = duration - minutes * 60;
-                photoVideoView.videoTextView.setText(String.format("%d:%02d", minutes, seconds));
-                if (messageObject.messageOwner.media.video.thumb != null) {
-                    TLRPC.FileLocation location = messageObject.messageOwner.media.video.thumb.location;
-                    photoVideoView.imageView.setImage(null, null, null, ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.photo_placeholder_in), null, location, "b", null, 0);
-                } else {
-                    photoVideoView.imageView.setImageResource(R.drawable.photo_placeholder_in);
-                }
-            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageObject.messageOwner.media.photo != null && !messageObject.photoThumbs.isEmpty()) {
-                photoVideoView.videoInfoContainer.setVisibility(INVISIBLE);
-                TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                photoVideoView.imageView.setImage(null, null, null, ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.photo_placeholder_in), null, photoSize.location, "b", null, 0);
-            } else {
-                photoVideoView.videoInfoContainer.setVisibility(INVISIBLE);
-                photoVideoView.imageView.setImageResource(R.drawable.photo_placeholder_in);
-            }
-        } else {
-            photoVideoViews[a].setVisibility(INVISIBLE);
-            messageObjects[a] = null;
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int itemWidth;
-        if (AndroidUtilities.isTablet()) {
-            itemWidth = (AndroidUtilities.dp(490) - ((itemsCount + 1) * AndroidUtilities.dp(4))) / itemsCount;
-        } else {
-            itemWidth = (AndroidUtilities.displaySize.x - ((itemsCount + 1) * AndroidUtilities.dp(4))) / itemsCount;
-        }
-
-        for (int a = 0; a < itemsCount; a++) {
-            LayoutParams layoutParams = (LayoutParams) photoVideoViews[a].getLayoutParams();
-            layoutParams.topMargin = isFirst ? 0 : AndroidUtilities.dp(4);
-            layoutParams.leftMargin = (itemWidth + AndroidUtilities.dp(4)) * a + AndroidUtilities.dp(4);
-            layoutParams.width = itemWidth;
-            layoutParams.height = itemWidth;
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            photoVideoViews[a].setLayoutParams(layoutParams);
-        }
-
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec((isFirst ? 0 : AndroidUtilities.dp(4)) + itemWidth, MeasureSpec.EXACTLY));
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java
deleted file mode 100644
index 04e79938f..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerCell.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.view.Gravity;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.FrameLayoutFixed;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class StickerCell extends FrameLayoutFixed {
-
-    private BackupImageView imageView;
-
-    public StickerCell(Context context) {
-        super(context);
-
-        imageView = new BackupImageView(context);
-        imageView.setAspectFit(true);
-        addView(imageView, LayoutHelper.createFrame(66, 66, Gravity.CENTER_HORIZONTAL, 0, 5, 0, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(76) + getPaddingLeft() + getPaddingRight(), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(78), MeasureSpec.EXACTLY));
-    }
-
-    @Override
-    public void setPressed(boolean pressed) {
-        if (imageView.getImageReceiver().getPressed() != pressed) {
-            imageView.getImageReceiver().setPressed(pressed);
-            imageView.invalidate();
-        }
-        super.setPressed(pressed);
-    }
-
-    public void setSticker(TLRPC.Document document, int side) {
-        if (document != null) {
-            imageView.setImage(document.thumb.location, null, "webp", null);
-        }
-        if (side == -1) {
-            setBackgroundResource(R.drawable.stickers_back_left);
-            setPadding(AndroidUtilities.dp(7), 0, 0, 0);
-        } else if (side == 0) {
-            setBackgroundResource(R.drawable.stickers_back_center);
-            setPadding(0, 0, 0, 0);
-        } else if (side == 1) {
-            setBackgroundResource(R.drawable.stickers_back_right);
-            setPadding(0, 0, AndroidUtilities.dp(7), 0);
-        } else if (side == 2) {
-            setBackgroundResource(R.drawable.stickers_back_all);
-            setPadding(AndroidUtilities.dp(3), 0, AndroidUtilities.dp(3), 0);
-        }
-        if (getBackground() != null) {
-            getBackground().setAlpha(230);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
deleted file mode 100644
index 03699a64a..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.android.LocaleController;
-import org.telegram.android.query.StickersQuery;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.LayoutHelper;
-
-import java.util.ArrayList;
-
-public class StickerSetCell extends FrameLayout {
-
-    private TextView textView;
-    private TextView valueTextView;
-    private BackupImageView imageView;
-    private boolean needDivider;
-    private ImageView optionsButton;
-    private TLRPC.TL_stickerSet stickersSet;
-
-    private static Paint paint;
-
-    public StickerSetCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-        }
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setEllipsize(TextUtils.TruncateAt.END);
-        textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 40 : 71, 10, LocaleController.isRTL ? 40 : 71, 0));
-
-        valueTextView = new TextView(context);
-        valueTextView.setTextColor(0xff8a8a8a);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        valueTextView.setLines(1);
-        valueTextView.setMaxLines(1);
-        valueTextView.setSingleLine(true);
-        valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 40 : 71, 35, LocaleController.isRTL ? 40 : 71, 0));
-
-        imageView = new BackupImageView(context);
-        imageView.setAspectFit(true);
-        addView(imageView, LayoutHelper.createFrame(48, 48, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 12, 8, LocaleController.isRTL ? 12 : 0, 0));
-
-        optionsButton = new ImageView(context);
-        optionsButton.setBackgroundResource(R.drawable.bar_selector_grey);
-        optionsButton.setImageResource(R.drawable.doc_actions_b);
-        optionsButton.setScaleType(ImageView.ScaleType.CENTER);
-        addView(optionsButton, LayoutHelper.createFrame(40, 40, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP));
-
-        /*ActionBarMenuItem menuItem = new ActionBarMenuItem(context, null, R.drawable.bar_selector_grey);
-        menuItem.setIcon(R.drawable.doc_actions_b);
-        addView(menuItem, LayoutHelper.createFrame(40, 40, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 40 : 0, 0, LocaleController.isRTL ? 0 : 40, 0));
-        menuItem.addSubItem(1, "test", 0);
-        menuItem.addSubItem(2, "test", 0);
-        menuItem.addSubItem(3, "test", 0);
-        menuItem.addSubItem(4, "test", 0);
-        menuItem.addSubItem(5, "test", 0);
-        menuItem.addSubItem(6, "test", 0);
-        menuItem.addSubItem(7, "test", 0);*/
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
-    }
-
-    public void setStickersSet(TLRPC.TL_stickerSet set, boolean divider) {
-        needDivider = divider;
-        stickersSet = set;
-
-        if (stickersSet.id == -1) {
-            textView.setText(LocaleController.getString("GeniusStickerPackName", R.string.GeniusStickerPackName));
-            if (StickersQuery.getHideMainStickersPack()) {
-                ViewProxy.setAlpha(textView, 0.5f);
-                ViewProxy.setAlpha(valueTextView, 0.5f);
-                ViewProxy.setAlpha(imageView, 0.5f);
-            } else {
-                ViewProxy.setAlpha(textView, 1.0f);
-                ViewProxy.setAlpha(valueTextView, 1.0f);
-                ViewProxy.setAlpha(imageView, 1.0f);
-            }
-        } else {
-            textView.setText(stickersSet.title);
-            ViewProxy.setAlpha(textView, 1.0f);
-            ViewProxy.setAlpha(valueTextView, 1.0f);
-            ViewProxy.setAlpha(imageView, 1.0f);
-        }
-        ArrayList<TLRPC.Document> documents = StickersQuery.getStickersForSet(stickersSet.id);
-        if (documents != null) {
-            valueTextView.setText(LocaleController.formatPluralString("Stickers", documents.size()));
-            TLRPC.Document document = documents.get(0);
-            if (document.thumb != null && document.thumb.location != null) {
-                imageView.setImage(document.thumb.location, null, "webp", null);
-            }
-        } else {
-            valueTextView.setText(LocaleController.formatPluralString("Stickers", 0));
-        }
-    }
-
-    public void setOnOptionsClick(OnClickListener listener) {
-        optionsButton.setOnClickListener(listener);
-    }
-
-    public TLRPC.TL_stickerSet getStickersSet() {
-        return stickersSet;
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(0, getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextBlockCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextBlockCell.java
deleted file mode 100644
index 15f7b3d13..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextBlockCell.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextBlockCell extends FrameLayout {
-
-    private TextView textView;
-    private static Paint paint;
-    private boolean needDivider;
-
-    public TextBlockCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-            paint.setStrokeWidth(1);
-        }
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 8, 17, 8));
-    }
-
-    public void setTextColor(int color) {
-        textView.setTextColor(color);
-    }
-
-    public void setText(String text, boolean divider) {
-        textView.setText(text);
-        needDivider = divider;
-        setWillNotDraw(!divider);
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
deleted file mode 100644
index d43cb7580..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextCell extends FrameLayout {
-
-    private TextView textView;
-    private TextView valueTextView;
-    private ImageView imageView;
-    private ImageView valueImageView;
-
-    public TextCell(Context context) {
-        super(context);
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setEllipsize(TextUtils.TruncateAt.END);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 16 : 71, 0, LocaleController.isRTL ? 71 : 16, 0));
-
-        valueTextView = new TextView(context);
-        valueTextView.setTextColor(0xff2f8cc9);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        valueTextView.setLines(1);
-        valueTextView.setMaxLines(1);
-        valueTextView.setSingleLine(true);
-        valueTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 24 : 0, 0, LocaleController.isRTL ? 0 : 24, 0));
-
-        imageView = new ImageView(context);
-        imageView.setScaleType(ImageView.ScaleType.CENTER);
-        addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 0 : 16, 0, LocaleController.isRTL ? 16 : 0, 0));
-
-        valueImageView = new ImageView(context);
-        valueImageView.setScaleType(ImageView.ScaleType.CENTER);
-        addView(valueImageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 24 : 0, 0, LocaleController.isRTL ? 0 : 24, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
-    }
-
-    public void setTextColor(int color) {
-        textView.setTextColor(color);
-    }
-
-    public void setText(String text) {
-        textView.setText(text);
-        imageView.setVisibility(INVISIBLE);
-        valueTextView.setVisibility(INVISIBLE);
-        valueImageView.setVisibility(INVISIBLE);
-    }
-
-    public void setTextAndIcon(String text, int resId) {
-        textView.setText(text);
-        imageView.setImageResource(resId);
-        imageView.setVisibility(VISIBLE);
-        valueTextView.setVisibility(INVISIBLE);
-        valueImageView.setVisibility(INVISIBLE);
-    }
-
-    public void setTextAndValue(String text, String value) {
-        textView.setText(text);
-        valueTextView.setText(value);
-        valueTextView.setVisibility(VISIBLE);
-        imageView.setVisibility(INVISIBLE);
-        valueImageView.setVisibility(INVISIBLE);
-    }
-
-    public void setTextAndValueDrawable(String text, Drawable drawable) {
-        textView.setText(text);
-        valueImageView.setVisibility(VISIBLE);
-        valueImageView.setImageDrawable(drawable);
-        valueTextView.setVisibility(INVISIBLE);
-        imageView.setVisibility(INVISIBLE);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
deleted file mode 100644
index a36f01ff0..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.os.Build;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.FrameLayoutFixed;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.Switch;
-
-public class TextCheckCell extends FrameLayoutFixed {
-
-    private TextView textView;
-    private Switch checkBox;
-    private static Paint paint;
-    private boolean needDivider;
-
-    public TextCheckCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-            paint.setStrokeWidth(1);
-        }
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 0, 17, 0));
-
-        checkBox = new Switch(context);
-        checkBox.setDuplicateParentStateEnabled(false);
-        checkBox.setFocusable(false);
-        checkBox.setFocusableInTouchMode(false);
-        checkBox.setClickable(false);
-        addView(checkBox, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL, 14, 0, 14, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
-    }
-
-    public void setTextAndCheck(String text, boolean checked, boolean divider) {
-        textView.setText(text);
-        if (Build.VERSION.SDK_INT < 11) {
-            checkBox.resetLayout();
-            checkBox.requestLayout();
-        }
-        checkBox.setChecked(checked);
-        needDivider = divider;
-        setWillNotDraw(!divider);
-    }
-
-    public void setChecked(boolean checked) {
-        checkBox.setChecked(checked);
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
deleted file mode 100644
index 2fb0de5c6..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextColorCell.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.Drawable;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextColorCell extends FrameLayout {
-
-    private TextView textView;
-    private boolean needDivider;
-    private int currentColor;
-
-    private static Drawable colorDrawable;
-    private static Paint paint;
-
-    public TextColorCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-            paint.setStrokeWidth(1);
-
-            colorDrawable = getResources().getDrawable(R.drawable.switch_to_on2);
-        }
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 0, 17, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
-    }
-
-    public void setTextAndColor(String text, int color, boolean divider) {
-        textView.setText(text);
-        needDivider = divider;
-        currentColor = color;
-        colorDrawable.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.MULTIPLY));
-        setWillNotDraw(!needDivider && currentColor == 0);
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-        if (currentColor != 0 && colorDrawable != null) {
-            int x;
-            int y = (getMeasuredHeight() - colorDrawable.getMinimumHeight()) / 2;
-            if (!LocaleController.isRTL) {
-                x = getMeasuredWidth() - colorDrawable.getIntrinsicWidth() - AndroidUtilities.dp(14.5f);
-            } else {
-                x = AndroidUtilities.dp(14.5f);
-            }
-            colorDrawable.setBounds(x, y, x + colorDrawable.getIntrinsicWidth(), y + colorDrawable.getIntrinsicHeight());
-            colorDrawable.draw(canvas);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
deleted file mode 100644
index 7889b7803..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailCell.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextDetailCell extends FrameLayout {
-
-    private TextView textView;
-    private TextView valueTextView;
-    private ImageView imageView;
-
-    public TextDetailCell(Context context) {
-        super(context);
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 16 : 71, 10, LocaleController.isRTL ? 16 : 71, 0));
-
-        valueTextView = new TextView(context);
-        valueTextView.setTextColor(0xff8a8a8a);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        valueTextView.setLines(1);
-        valueTextView.setMaxLines(1);
-        valueTextView.setSingleLine(true);
-        valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, LocaleController.isRTL ? 16 : 71, 35, LocaleController.isRTL ? 16 : 71, 0));
-
-        imageView = new ImageView(context);
-        imageView.setScaleType(ImageView.ScaleType.CENTER);
-        addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 0 : 16, 0, LocaleController.isRTL ? 16 : 0, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), View.MeasureSpec.EXACTLY));
-    }
-
-    public void setTextAndValue(String text, String value) {
-        textView.setText(text);
-        valueTextView.setText(value);
-        imageView.setVisibility(INVISIBLE);
-    }
-
-    public void setTextAndValueAndIcon(String text, String value, int resId) {
-        textView.setText(text);
-        valueTextView.setText(value);
-        imageView.setVisibility(VISIBLE);
-        imageView.setImageResource(resId);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
deleted file mode 100644
index 1d9a9a062..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextDetailSettingsCell.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.FrameLayoutFixed;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextDetailSettingsCell extends FrameLayoutFixed {
-
-    private TextView textView;
-    private TextView valueTextView;
-    private static Paint paint;
-    private boolean needDivider;
-    private boolean multiline;
-
-    public TextDetailSettingsCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-            paint.setStrokeWidth(1);
-        }
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 10, 17, 0));
-
-        valueTextView = new TextView(context);
-        valueTextView.setTextColor(0xff8a8a8a);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        valueTextView.setLines(1);
-        valueTextView.setMaxLines(1);
-        valueTextView.setSingleLine(true);
-        valueTextView.setPadding(0, 0, 0, 0);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 35, 17, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (!multiline) {
-            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
-        } else {
-            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
-        }
-    }
-
-    public void setMultilineDetail(boolean value) {
-        multiline = value;
-        if (value) {
-            valueTextView.setLines(0);
-            valueTextView.setMaxLines(0);
-            valueTextView.setSingleLine(false);
-            valueTextView.setPadding(0, 0, 0, AndroidUtilities.dp(12));
-        } else {
-            valueTextView.setLines(1);
-            valueTextView.setMaxLines(1);
-            valueTextView.setSingleLine(true);
-            valueTextView.setPadding(0, 0, 0, 0);
-        }
-    }
-
-    public void setTextAndValue(String text, String value, boolean divider) {
-        textView.setText(text);
-        valueTextView.setText(value);
-        needDivider = divider;
-        setWillNotDraw(!divider);
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCell.java
deleted file mode 100644
index 1e0f3ceec..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoCell.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextInfoCell extends FrameLayout {
-
-    private TextView textView;
-
-    public TextInfoCell(Context context) {
-        super(context);
-
-        textView = new TextView(context);
-        textView.setTextColor(0xffa3a3a3);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        textView.setGravity(Gravity.CENTER);
-        textView.setPadding(0, AndroidUtilities.dp(19), 0, AndroidUtilities.dp(19));
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 17, 0, 17, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
-    }
-
-    public void setText(String text) {
-        textView.setText(text);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
deleted file mode 100644
index 579917310..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.text.method.LinkMovementMethod;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextInfoPrivacyCell extends FrameLayout {
-
-    private TextView textView;
-
-    public TextInfoPrivacyCell(Context context) {
-        super(context);
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff808080);
-        textView.setLinkTextColor(0xff316f9f);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-        textView.setPadding(0, AndroidUtilities.dp(10), 0, AndroidUtilities.dp(17));
-        textView.setMovementMethod(LinkMovementMethod.getInstance());
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 0, 17, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
-    }
-
-    public void setText(CharSequence text) {
-        textView.setText(text);
-    }
-
-    public void setTextColor(int color) {
-        textView.setTextColor(color);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
deleted file mode 100644
index fdda610f4..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class TextSettingsCell extends FrameLayout {
-
-    private TextView textView;
-    private TextView valueTextView;
-    private ImageView valueImageView;
-    private static Paint paint;
-    private boolean needDivider;
-
-    public TextSettingsCell(Context context) {
-        super(context);
-
-        if (paint == null) {
-            paint = new Paint();
-            paint.setColor(0xffd9d9d9);
-            paint.setStrokeWidth(1);
-        }
-
-        textView = new TextView(context);
-        textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setEllipsize(TextUtils.TruncateAt.END);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 0, 17, 0));
-
-        valueTextView = new TextView(context);
-        valueTextView.setTextColor(0xff2f8cc9);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        valueTextView.setLines(1);
-        valueTextView.setMaxLines(1);
-        valueTextView.setSingleLine(true);
-        valueTextView.setEllipsize(TextUtils.TruncateAt.END);
-        valueTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, 17, 0, 17, 0));
-
-        valueImageView = new ImageView(context);
-        valueImageView.setScaleType(ImageView.ScaleType.CENTER);
-        valueImageView.setVisibility(INVISIBLE);
-        addView(valueImageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL, 17, 0, 17, 0));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(48) + (needDivider ? 1 : 0));
-
-        int availableWidth = getMeasuredWidth() - getPaddingLeft() - getPaddingRight() - AndroidUtilities.dp(34);
-        int width = availableWidth / 2;
-        if (valueImageView.getVisibility() == VISIBLE) {
-            valueImageView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));
-        }
-        if (valueTextView.getVisibility() == VISIBLE) {
-            valueTextView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));
-            width = availableWidth - valueTextView.getMeasuredWidth() - AndroidUtilities.dp(8);
-        } else {
-            width = availableWidth;
-        }
-        textView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));
-    }
-
-    public void setTextColor(int color) {
-        textView.setTextColor(color);
-    }
-
-    public void setText(String text, boolean divider) {
-        textView.setText(text);
-        valueTextView.setVisibility(INVISIBLE);
-        valueImageView.setVisibility(INVISIBLE);
-        needDivider = divider;
-        setWillNotDraw(!divider);
-    }
-
-    public void setTextAndValue(String text, String value, boolean divider) {
-        textView.setText(text);
-        valueImageView.setVisibility(INVISIBLE);
-        if (value != null) {
-            valueTextView.setText(value);
-            valueTextView.setVisibility(VISIBLE);
-        } else {
-            valueTextView.setVisibility(INVISIBLE);
-        }
-        needDivider = divider;
-        setWillNotDraw(!divider);
-        requestLayout();
-    }
-
-    public void setTextAndIcon(String text, int resId, boolean divider) {
-        textView.setText(text);
-        valueTextView.setVisibility(INVISIBLE);
-        if (resId != 0) {
-            valueImageView.setVisibility(VISIBLE);
-            valueImageView.setImageResource(resId);
-        } else {
-            valueImageView.setVisibility(INVISIBLE);
-        }
-        needDivider = divider;
-        setWillNotDraw(!divider);
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (needDivider) {
-            canvas.drawLine(getPaddingLeft(), getHeight() - 1, getWidth() - getPaddingRight(), getHeight() - 1, paint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
deleted file mode 100644
index 116721b01..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.CheckBox;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.SimpleTextView;
-
-public class UserCell extends FrameLayout {
-
-    private BackupImageView avatarImageView;
-    private SimpleTextView nameTextView;
-    private SimpleTextView statusTextView;
-    private ImageView imageView;
-    private CheckBox checkBox;
-
-    private AvatarDrawable avatarDrawable;
-    private TLRPC.User currentUser = null;
-
-    private CharSequence currentName;
-    private CharSequence currrntStatus;
-    private int currentDrawable;
-
-    private String lastName = null;
-    private int lastStatus = 0;
-    private TLRPC.FileLocation lastAvatar = null;
-
-    private int statusColor = 0xffa8a8a8;
-    private int statusOnlineColor = 0xff3b84c0;
-
-    public UserCell(Context context, int padding) {
-        super(context);
-
-        avatarDrawable = new AvatarDrawable();
-
-        avatarImageView = new BackupImageView(context);
-        avatarImageView.setRoundRadius(AndroidUtilities.dp(24));
-        addView(avatarImageView, LayoutHelper.createFrame(48, 48, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 7 + padding, 8, LocaleController.isRTL ? 7 + padding : 0, 0));
-
-        nameTextView = new SimpleTextView(context);
-        nameTextView.setTextColor(0xff212121);
-        nameTextView.setTextSize(17);
-        nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-        addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 20, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 28 : (68 + padding), 11.5f, LocaleController.isRTL ? (68 + padding) : 28, 0));
-
-        statusTextView = new SimpleTextView(context);
-        statusTextView.setTextSize(14);
-        statusTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-        addView(statusTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 20, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 28 : (68 + padding), 34.5f, LocaleController.isRTL ? (68 + padding) : 28, 0));
-
-        imageView = new ImageView(context);
-        imageView.setScaleType(ImageView.ScaleType.CENTER);
-        imageView.setVisibility(GONE);
-        addView(imageView, LayoutHelper.createFrame(LayoutParams.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 0 : 16, 0, LocaleController.isRTL ? 16 : 0, 0));
-
-        checkBox = new CheckBox(context, R.drawable.round_check2);
-        checkBox.setVisibility(INVISIBLE);
-        addView(checkBox, LayoutHelper.createFrame(22, 22, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 37 + padding, 38, LocaleController.isRTL ? 37 + padding : 0, 0));
-    }
-
-    public void setData(TLRPC.User user, CharSequence name, CharSequence status, int resId) {
-        if (user == null) {
-            currrntStatus = null;
-            currentName = null;
-            currentUser = null;
-            nameTextView.setText("");
-            statusTextView.setText("");
-            avatarImageView.setImageDrawable(null);
-            return;
-        }
-        currrntStatus = status;
-        currentName = name;
-        currentUser = user;
-        currentDrawable = resId;
-        update(0);
-    }
-
-    public void setChecked(boolean checked, boolean animated) {
-        if (checkBox.getVisibility() != VISIBLE) {
-            checkBox.setVisibility(VISIBLE);
-        }
-        checkBox.setChecked(checked, animated);
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(64), MeasureSpec.EXACTLY));
-    }
-
-    public void setStatusColors(int color, int onlineColor) {
-        statusColor = color;
-        statusOnlineColor = onlineColor;
-    }
-
-    public void update(int mask) {
-        if (currentUser == null) {
-            return;
-        }
-        TLRPC.FileLocation photo = null;
-        String newName = null;
-        if (currentUser.photo != null) {
-            photo = currentUser.photo.photo_small;
-        }
-
-        if (mask != 0) {
-            boolean continueUpdate = false;
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
-                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                int newStatus = 0;
-                if (currentUser.status != null) {
-                    newStatus = currentUser.status.expires;
-                }
-                if (newStatus != lastStatus) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate && currentName == null && lastName != null && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                newName = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
-                if (!newName.equals(lastName)) {
-                    continueUpdate = true;
-                }
-            }
-            if (!continueUpdate) {
-                return;
-            }
-        }
-
-        avatarDrawable.setInfo(currentUser);
-        if (currentUser.status != null) {
-            lastStatus = currentUser.status.expires;
-        } else {
-            lastStatus = 0;
-        }
-
-        if (currentName != null) {
-            lastName = null;
-            nameTextView.setText(currentName);
-        } else {
-            lastName = newName == null ? ContactsController.formatName(currentUser.first_name, currentUser.last_name) : newName;
-            nameTextView.setText(lastName);
-        }
-        if (currrntStatus != null) {
-            statusTextView.setTextColor(statusColor);
-            statusTextView.setText(currrntStatus);
-        } else {
-            if (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires > ConnectionsManager.getInstance().getCurrentTime()) {
-                statusTextView.setTextColor(statusOnlineColor);
-                statusTextView.setText(LocaleController.getString("Online", R.string.Online));
-            } else {
-                statusTextView.setTextColor(statusColor);
-                statusTextView.setText(LocaleController.formatUserStatus(currentUser));
-            }
-        }
-
-        if (imageView.getVisibility() == VISIBLE && currentDrawable == 0 || imageView.getVisibility() == GONE && currentDrawable != 0) {
-            imageView.setVisibility(currentDrawable == 0 ? GONE : VISIBLE);
-            imageView.setImageResource(currentDrawable);
-        }
-        avatarImageView.setImage(photo, "50_50", avatarDrawable);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
deleted file mode 100644
index 5dce6aaf4..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.LayoutHelper;
-
-public class WallpaperCell extends FrameLayout {
-
-    private BackupImageView imageView;
-    private View selectionView;
-    private ImageView imageView2;
-
-    public WallpaperCell(Context context) {
-        super(context);
-
-        imageView = new BackupImageView(context);
-        addView(imageView, LayoutHelper.createFrame(100, 100, Gravity.LEFT | Gravity.BOTTOM));
-
-        imageView2 = new ImageView(context);
-        imageView2.setImageResource(R.drawable.ic_gallery_background);
-        imageView2.setScaleType(ImageView.ScaleType.CENTER);
-        addView(imageView2, LayoutHelper.createFrame(100, 100, Gravity.LEFT | Gravity.BOTTOM));
-
-        selectionView = new View(context);
-        selectionView.setBackgroundResource(R.drawable.wall_selection);
-        addView(selectionView, LayoutHelper.createFrame(100, 102));
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(100), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(102), MeasureSpec.EXACTLY));
-    }
-
-    public void setWallpaper(TLRPC.WallPaper wallpaper, int selectedBackground) {
-        if (wallpaper == null) {
-            imageView.setVisibility(INVISIBLE);
-            imageView2.setVisibility(VISIBLE);
-            selectionView.setVisibility(selectedBackground == -1 ? View.VISIBLE : INVISIBLE);
-            imageView2.setBackgroundColor(selectedBackground == -1 || selectedBackground == 1000001 ? 0x5a475866 : 0x5a000000);
-        } else {
-            imageView.setVisibility(VISIBLE);
-            imageView2.setVisibility(INVISIBLE);
-            selectionView.setVisibility(selectedBackground == wallpaper.id ? View.VISIBLE : INVISIBLE);
-
-            if (wallpaper instanceof TLRPC.TL_wallPaperSolid) {
-                imageView.setImageBitmap(null);
-                imageView.setBackgroundColor(0xff000000 | wallpaper.bg_color);
-            } else {
-                TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallpaper.sizes, AndroidUtilities.dp(100));
-                if (size != null && size.location != null) {
-                    imageView.setImage(size.location, "100_100", (Drawable) null);
-                }
-                imageView.setBackgroundColor(0x5a475866);
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
deleted file mode 100644
index 20eb93c90..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
+++ /dev/null
@@ -1,231 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Components;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.media.ExifInterface;
-import android.net.Uri;
-import android.os.Bundle;
-import android.provider.MediaStore;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.MediaController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.LaunchActivity;
-import org.telegram.ui.PhotoAlbumPickerActivity;
-import org.telegram.ui.PhotoCropActivity;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.PhotoViewer;
-
-import java.io.File;
-import java.util.ArrayList;
-
-public class AvatarUpdater implements NotificationCenter.NotificationCenterDelegate, PhotoCropActivity.PhotoEditActivityDelegate {
-
-    public String currentPicturePath;
-    private TLRPC.PhotoSize smallPhoto;
-    private TLRPC.PhotoSize bigPhoto;
-    public String uploadingAvatar = null;
-    File picturePath = null;
-    public BaseFragment parentFragment = null;
-    public AvatarUpdaterDelegate delegate;
-    private boolean clearAfterUpdate = false;
-    public boolean returnOnly = false;
-
-    public interface AvatarUpdaterDelegate {
-        void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big);
-    }
-
-    public void clear() {
-        if (uploadingAvatar != null) {
-            clearAfterUpdate = true;
-        } else {
-            parentFragment = null;
-            delegate = null;
-        }
-    }
-
-    public void openCamera() {
-        try {
-            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-            File image = AndroidUtilities.generatePicturePath();
-            if (image != null) {
-                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
-                currentPicturePath = image.getAbsolutePath();
-            }
-            parentFragment.startActivityForResult(takePictureIntent, 13);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void openGallery() {
-        PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(true);
-        fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
-            @Override
-            public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos) {
-                if (!photos.isEmpty()) {
-                    Bitmap bitmap = ImageLoader.loadBitmap(photos.get(0), null, 800, 800, true);
-                    processBitmap(bitmap);
-                }
-            }
-
-            @Override
-            public void startPhotoSelectActivity() {
-                try {
-                    Intent photoPickerIntent = new Intent(Intent.ACTION_GET_CONTENT);
-                    photoPickerIntent.setType("image/*");
-                    parentFragment.startActivityForResult(photoPickerIntent, 14);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-
-            @Override
-            public boolean didSelectVideo(String path) {
-                return true;
-            }
-        });
-        parentFragment.presentFragment(fragment);
-    }
-
-    private void startCrop(String path, Uri uri) {
-        try {
-            LaunchActivity activity = (LaunchActivity)parentFragment.getParentActivity();
-            if (activity == null) {
-                return;
-            }
-            Bundle args = new Bundle();
-            if (path != null) {
-                args.putString("photoPath", path);
-            } else if (uri != null) {
-                args.putParcelable("photoUri", uri);
-            }
-            PhotoCropActivity photoCropActivity = new PhotoCropActivity(args);
-            photoCropActivity.setDelegate(this);
-            activity.presentFragment(photoCropActivity);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            Bitmap bitmap = ImageLoader.loadBitmap(path, uri, 800, 800, true);
-            processBitmap(bitmap);
-        }
-    }
-
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            if (requestCode == 13) {
-                PhotoViewer.getInstance().setParentActivity(parentFragment.getParentActivity());
-                int orientation = 0;
-                try {
-                    ExifInterface ei = new ExifInterface(currentPicturePath);
-                    int exif = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
-                    switch(exif) {
-                        case ExifInterface.ORIENTATION_ROTATE_90:
-                            orientation = 90;
-                            break;
-                        case ExifInterface.ORIENTATION_ROTATE_180:
-                            orientation = 180;
-                            break;
-                        case ExifInterface.ORIENTATION_ROTATE_270:
-                            orientation = 270;
-                            break;
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                final ArrayList<Object> arrayList = new ArrayList<>();
-                arrayList.add(new MediaController.PhotoEntry(0, 0, 0, currentPicturePath, orientation, false));
-                PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 1, new PhotoViewer.EmptyPhotoViewerProvider() {
-                    @Override
-                    public void sendButtonPressed(int index) {
-                        String path = null;
-                        MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) arrayList.get(0);
-                        if (photoEntry.imagePath != null) {
-                            path = photoEntry.imagePath;
-                        } else if (photoEntry.path != null) {
-                            path = photoEntry.path;
-                        }
-                        Bitmap bitmap = ImageLoader.loadBitmap(path, null, 800, 800, true);
-                        processBitmap(bitmap);
-                    }
-                });
-                AndroidUtilities.addMediaToGallery(currentPicturePath);
-                currentPicturePath = null;
-            } else if (requestCode == 14) {
-                if (data == null || data.getData() == null) {
-                    return;
-                }
-                startCrop(null, data.getData());
-            }
-        }
-    }
-
-    private void processBitmap(Bitmap bitmap) {
-        if (bitmap == null) {
-            return;
-        }
-        smallPhoto = ImageLoader.scaleAndSaveImage(bitmap, 100, 100, 80, false);
-        bigPhoto = ImageLoader.scaleAndSaveImage(bitmap, 800, 800, 80, false, 320, 320);
-        if (bigPhoto != null && smallPhoto != null) {
-            if (returnOnly) {
-                if (delegate != null) {
-                    delegate.didUploadedPhoto(null, smallPhoto, bigPhoto);
-                }
-            } else {
-                UserConfig.saveConfig(false);
-                uploadingAvatar = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
-                NotificationCenter.getInstance().addObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
-                NotificationCenter.getInstance().addObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
-                FileLoader.getInstance().uploadFile(uploadingAvatar, false, true);
-            }
-        }
-    }
-
-    @Override
-    public void didFinishEdit(Bitmap bitmap, Bundle args) {
-        processBitmap(bitmap);
-    }
-
-    @Override
-    public void didReceivedNotification(int id, final Object... args) {
-        if (id == NotificationCenter.FileDidUpload) {
-            String location = (String)args[0];
-            if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
-                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
-                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
-                if (delegate != null) {
-                    delegate.didUploadedPhoto((TLRPC.InputFile)args[1], smallPhoto, bigPhoto);
-                }
-                uploadingAvatar = null;
-                if (clearAfterUpdate) {
-                    parentFragment = null;
-                    delegate = null;
-                }
-            }
-        } else if (id == NotificationCenter.FileDidFailUpload) {
-            String location = (String)args[0];
-            if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
-                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
-                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
-                uploadingAvatar = null;
-                if (clearAfterUpdate) {
-                    parentFragment = null;
-                    delegate = null;
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileDrawable.java
deleted file mode 100644
index 103a440af..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileDrawable.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.graphics.Canvas;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.RectF;
-import android.graphics.drawable.Drawable;
-import android.view.animation.DecelerateInterpolator;
-
-import org.telegram.android.AndroidUtilities;
-
-public class SendingFileDrawable extends Drawable {
-
-    private float radOffset = 0;
-    private float currentProgress = 0;
-    private float animationProgressStart = 0;
-    private long currentProgressTime = 0;
-    private float animatedProgressValue = 0;
-    private RectF cicleRect = new RectF();
-    private boolean isChat = false;
-    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-    private long lastUpdateTime = 0;
-    private boolean started = false;
-    private static DecelerateInterpolator decelerateInterpolator = null;
-
-    public SendingFileDrawable() {
-        super();
-        paint.setColor(0xffd7e8f7);
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(AndroidUtilities.dp(2));
-        paint.setStrokeCap(Paint.Cap.ROUND);
-        decelerateInterpolator = new DecelerateInterpolator();
-    }
-
-    public void setIsChat(boolean value) {
-        isChat = value;
-    }
-
-    public void setProgress(float value, boolean animated) {
-        if (!animated) {
-            animatedProgressValue = value;
-            animationProgressStart = value;
-        } else {
-            animationProgressStart = animatedProgressValue;
-        }
-        currentProgress = value;
-        currentProgressTime = 0;
-
-        invalidateSelf();
-    }
-
-    private void update() {
-        long newTime = System.currentTimeMillis();
-        long dt = newTime - lastUpdateTime;
-        lastUpdateTime = newTime;
-
-        if (animatedProgressValue != 1) {
-            radOffset += 360 * dt / 1000.0f;
-            float progressDiff = currentProgress - animationProgressStart;
-            if (progressDiff > 0) {
-                currentProgressTime += dt;
-                if (currentProgressTime >= 300) {
-                    animatedProgressValue = currentProgress;
-                    animationProgressStart = currentProgress;
-                    currentProgressTime = 0;
-                } else {
-                    animatedProgressValue = animationProgressStart + progressDiff * decelerateInterpolator.getInterpolation(currentProgressTime / 300.0f);
-                }
-            }
-            invalidateSelf();
-        }
-    }
-
-    public void start() {
-        lastUpdateTime = System.currentTimeMillis();
-        started = true;
-        invalidateSelf();
-    }
-
-    public void stop() {
-        started = false;
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        cicleRect.set(AndroidUtilities.dp(1), AndroidUtilities.dp(isChat ? 3 : 4), AndroidUtilities.dp(10), AndroidUtilities.dp(isChat ? 11 : 12));
-        canvas.drawArc(cicleRect, -90 + radOffset, Math.max(60, 360 * animatedProgressValue), false, paint);
-
-        if (started) {
-            update();
-        }
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-
-    }
-
-    @Override
-    public int getOpacity() {
-        return 0;
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return AndroidUtilities.dp(14);
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return AndroidUtilities.dp(14);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileEx2Drawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileEx2Drawable.java
deleted file mode 100644
index 48aae49e3..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileEx2Drawable.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.graphics.Canvas;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-
-import org.telegram.android.AndroidUtilities;
-
-public class SendingFileEx2Drawable extends Drawable {
-
-    private boolean isChat = false;
-    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-    private long lastUpdateTime = 0;
-    private boolean started = false;
-    private float progress;
-
-    public SendingFileEx2Drawable() {
-        super();
-        paint.setColor(0xffd7e8f7);
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(AndroidUtilities.dp(3));
-        paint.setStrokeCap(Paint.Cap.ROUND);
-    }
-
-    public void setIsChat(boolean value) {
-        isChat = value;
-    }
-
-    private void update() {
-        long newTime = System.currentTimeMillis();
-        long dt = newTime - lastUpdateTime;
-        lastUpdateTime = newTime;
-        if (dt > 50) {
-            dt = 50;
-        }
-        progress += dt / 1000.0f;
-        while (progress > 1.0f) {
-            progress -= 1.0f;
-        }
-        invalidateSelf();
-    }
-
-    public void start() {
-        lastUpdateTime = System.currentTimeMillis();
-        started = true;
-        invalidateSelf();
-    }
-
-    public void stop() {
-        started = false;
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        int start = (int) (progress <= 0.5f ? AndroidUtilities.dp(1) : AndroidUtilities.dp(11) * (progress - 0.5f) * 2);
-        int end = (int) (progress >= 0.5f ? AndroidUtilities.dp(11) : AndroidUtilities.dp(11) * progress * 2);
-        canvas.drawLine(start, AndroidUtilities.dp(isChat ? 11 : 12), end, AndroidUtilities.dp(isChat ? 11 : 12), paint);
-
-        if (started) {
-            update();
-        }
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-
-    }
-
-    @Override
-    public int getOpacity() {
-        return 0;
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return AndroidUtilities.dp(18);
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return AndroidUtilities.dp(14);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileExDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileExDrawable.java
deleted file mode 100644
index 9b5d5069b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileExDrawable.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.graphics.Canvas;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-
-import org.telegram.android.AndroidUtilities;
-
-public class SendingFileExDrawable extends Drawable {
-
-    private boolean isChat = false;
-    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-    private long lastUpdateTime = 0;
-    private boolean started = false;
-    private float progress;
-
-    public SendingFileExDrawable() {
-        super();
-        paint.setColor(0xffd7e8f7);
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(AndroidUtilities.dp(2));
-        paint.setStrokeCap(Paint.Cap.ROUND);
-    }
-
-    public void setIsChat(boolean value) {
-        isChat = value;
-    }
-
-    private void update() {
-        long newTime = System.currentTimeMillis();
-        long dt = newTime - lastUpdateTime;
-        lastUpdateTime = newTime;
-        if (dt > 50) {
-            dt = 50;
-        }
-        progress += dt / 500.0f;
-        while (progress > 1.0f) {
-            progress -= 1.0f;
-        }
-        invalidateSelf();
-    }
-
-    public void start() {
-        lastUpdateTime = System.currentTimeMillis();
-        started = true;
-        invalidateSelf();
-    }
-
-    public void stop() {
-        started = false;
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-
-        for (int a = 0; a < 3; a++) {
-            if (a == 0) {
-                paint.setAlpha((int) (255 * progress));
-            } else if (a == 2) {
-                paint.setAlpha((int) (255 * (1.0f - progress)));
-            } else {
-                paint.setAlpha(255);
-            }
-            float side = AndroidUtilities.dp(5) * a + AndroidUtilities.dp(5) * progress;
-            canvas.drawLine(side, AndroidUtilities.dp(isChat ? 3 : 4), side + AndroidUtilities.dp(4), AndroidUtilities.dp(isChat ? 7 : 8), paint);
-            canvas.drawLine(side, AndroidUtilities.dp(isChat ? 11 : 12), side + AndroidUtilities.dp(4), AndroidUtilities.dp(isChat ? 7 : 8), paint);
-        }
-
-        if (started) {
-            update();
-        }
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-
-    }
-
-    @Override
-    public int getOpacity() {
-        return 0;
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return AndroidUtilities.dp(18);
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return AndroidUtilities.dp(14);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
deleted file mode 100644
index 1ba3e974c..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Typeface;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.View;
-import android.view.animation.DecelerateInterpolator;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
-
-public class SlidingTabView extends LinearLayout {
-
-    public interface SlidingTabViewDelegate {
-        void didSelectTab(int tab);
-    }
-
-    private SlidingTabViewDelegate delegate;
-    private int selectedTab = 0;
-    private int tabCount = 0;
-    private float tabWidth = 0;
-    private float tabX = 0;
-    private float animateTabXTo = 0;
-    private Paint paint = new Paint();
-    private long startAnimationTime = 0;
-    private long totalAnimationDiff = 0;
-    private float startAnimationX = 0;
-    private DecelerateInterpolator interpolator;
-
-    public SlidingTabView(Context context) {
-        super(context);
-        setOrientation(HORIZONTAL);
-        setWeightSum(100);
-        paint.setColor(0xffffffff);
-        setWillNotDraw(false);
-        interpolator = new DecelerateInterpolator();
-    }
-
-    public void addTextTab(final int position, String title) {
-        TextView tab = new TextView(getContext());
-        tab.setText(title);
-        tab.setFocusable(true);
-        tab.setGravity(Gravity.CENTER);
-        tab.setSingleLine();
-        tab.setTextColor(0xffffffff);
-        tab.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        tab.setTypeface(Typeface.DEFAULT_BOLD);
-        tab.setBackgroundResource(R.drawable.bar_selector_picker);
-
-        tab.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                didSelectTab(position);
-            }
-        });
-        addView(tab);
-        LayoutParams layoutParams = (LayoutParams)tab.getLayoutParams();
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.width = 0;
-        layoutParams.weight = 50;
-        tab.setLayoutParams(layoutParams);
-
-        tabCount++;
-    }
-
-    public void setDelegate(SlidingTabViewDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public int getSeletedTab() {
-        return selectedTab;
-    }
-
-    private void didSelectTab(int tab) {
-        if (selectedTab == tab) {
-            return;
-        }
-        selectedTab = tab;
-        animateToTab(tab);
-        if (delegate != null) {
-            delegate.didSelectTab(tab);
-        }
-    }
-
-    private void animateToTab(int tab) {
-        animateTabXTo = tab * tabWidth;
-        startAnimationX = tabX;
-        totalAnimationDiff = 0;
-        startAnimationTime = System.currentTimeMillis();
-        invalidate();
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int l, int t, int r, int b) {
-        super.onLayout(changed, l, t, r, b);
-        tabWidth = (r - l) / (float)tabCount;
-        animateTabXTo = tabX = tabWidth * selectedTab;
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (tabX != animateTabXTo) {
-            long dt = System.currentTimeMillis() - startAnimationTime;
-            startAnimationTime = System.currentTimeMillis();
-            totalAnimationDiff += dt;
-            if (totalAnimationDiff > 200) {
-                totalAnimationDiff = 200;
-                tabX = animateTabXTo;
-            } else {
-                tabX = startAnimationX + interpolator.getInterpolation(totalAnimationDiff / 200.0f) * (animateTabXTo - startAnimationX);
-                invalidate();
-            }
-        }
-
-        canvas.drawRect(tabX, getHeight() - AndroidUtilities.dp(2), (tabX + tabWidth), getHeight(), paint);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
deleted file mode 100644
index 7bfd47999..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TimerDrawable.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-
-public class TimerDrawable extends Drawable {
-
-    private static Drawable emptyTimerDrawable;
-    private static Drawable timerDrawable;
-    private static TextPaint timePaint;
-    private StaticLayout timeLayout;
-    private float timeWidth = 0;
-    private int timeHeight = 0;
-    private int time = 0;
-
-    public TimerDrawable(Context context) {
-        if (emptyTimerDrawable == null) {
-            emptyTimerDrawable = context.getResources().getDrawable(R.drawable.header_timer);
-            timerDrawable = context.getResources().getDrawable(R.drawable.header_timer2);
-            timePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(11));
-            timePaint.setColor(0xffffffff);
-            timePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        }
-    }
-
-    public void setTime(int value) {
-        time = value;
-
-        String timeString = null;
-        if (time >= 1 && time < 60) {
-            timeString = "" + value;
-            if (timeString.length() < 2) {
-                timeString += "s";
-            }
-        } else if (time >= 60 && time < 60 * 60) {
-            timeString = "" + value / 60;
-            if (timeString.length() < 2) {
-                timeString += "m";
-            }
-        } else if (time >= 60 * 60 && time < 60 * 60 * 24) {
-            timeString = "" + value / 60 / 60;
-            if (timeString.length() < 2) {
-                timeString += "h";
-            }
-        } else if (time >= 60 * 60 * 24 && time < 60 * 60 * 24 * 7) {
-            timeString = "" + value / 60 / 60 / 24;
-            if (timeString.length() < 2) {
-                timeString += "d";
-            }
-        } else {
-            timeString = "" + value / 60 / 60 / 24 / 7;
-            if (timeString.length() < 2) {
-                timeString += "w";
-            } else if (timeString.length() > 2) {
-                timeString = "c";
-            }
-        }
-
-        timeWidth = timePaint.measureText(timeString);
-        try {
-            timeLayout = new StaticLayout(timeString, timePaint, (int)Math.ceil(timeWidth), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            timeHeight = timeLayout.getHeight();
-        } catch (Exception e) {
-            timeLayout = null;
-            FileLog.e("tmessages", e);
-        }
-
-        invalidateSelf();
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        int width = timerDrawable.getIntrinsicWidth();
-        int height = timerDrawable.getIntrinsicHeight();
-        Drawable drawable = null;
-        if (time == 0) {
-            drawable = timerDrawable;
-        } else {
-            drawable = emptyTimerDrawable;
-        }
-
-        int x = (width - drawable.getIntrinsicWidth()) / 2;
-        int y = (height - drawable.getIntrinsicHeight()) / 2;
-        drawable.setBounds(x, y, x + drawable.getIntrinsicWidth(), y + drawable.getIntrinsicHeight());
-        drawable.draw(canvas);
-
-        if (time != 0 && timeLayout != null) {
-            int xOffxet = 0;
-            if (AndroidUtilities.density == 3) {
-                xOffxet = -1;
-            }
-            canvas.translate((int)(width / 2 - Math.ceil(timeWidth / 2)) + xOffxet, (height - timeHeight) / 2);
-            timeLayout.draw(canvas);
-        }
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-
-    }
-
-    @Override
-    public int getOpacity() {
-        return 0;
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return timerDrawable.getIntrinsicWidth();
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return timerDrawable.getIntrinsicHeight();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index e05f2cfb7..d872f7b51 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -69,7 +69,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
-public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
+public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate {
     private boolean finished;
     private String videoPath;
     private String sendingText;
@@ -323,10 +323,10 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
 
         if (actionBarLayout.fragmentsStack.isEmpty()) {
             if (!UserConfig.isClientActivated()) {
-                actionBarLayout.addFragmentToStack(new LoginActivity());
-                drawerLayoutContainer.setAllowOpenDrawer(false, false);
+//                actionBarLayout.addFragmentToStack(new LoginActivity());
+//                drawerLayoutContainer.setAllowOpenDrawer(false, false);
             } else {
-                actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                actionBarLayout.addFragmentToStack(new PostsActivity(null));
                 drawerLayoutContainer.setAllowOpenDrawer(true, false);
             }
 
@@ -352,15 +352,15 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             }
         } else {
             boolean allowOpen = true;
-            if (AndroidUtilities.isTablet()) {
-                allowOpen = actionBarLayout.fragmentsStack.size() <= 1 && layersActionBarLayout.fragmentsStack.isEmpty();
-                if (layersActionBarLayout.fragmentsStack.size() == 1 && layersActionBarLayout.fragmentsStack.get(0) instanceof LoginActivity) {
-                    allowOpen = false;
-                }
-            }
-            if (actionBarLayout.fragmentsStack.size() == 1 && actionBarLayout.fragmentsStack.get(0) instanceof LoginActivity) {
-                allowOpen = false;
-            }
+//            if (AndroidUtilities.isTablet()) {
+//                allowOpen = actionBarLayout.fragmentsStack.size() <= 1 && layersActionBarLayout.fragmentsStack.isEmpty();
+//                if (layersActionBarLayout.fragmentsStack.size() == 1 && layersActionBarLayout.fragmentsStack.get(0) instanceof LoginActivity) {
+//                    allowOpen = false;
+//                }
+//            }
+//            if (actionBarLayout.fragmentsStack.size() == 1 && actionBarLayout.fragmentsStack.get(0) instanceof LoginActivity) {
+//                allowOpen = false;
+//            }
             drawerLayoutContainer.setAllowOpenDrawer(allowOpen, false);
         }
 
@@ -716,57 +716,27 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                 }
                 pushOpened = false;
                 isNew = false;
-            } else if (videoPath != null || photoPathsArray != null || sendingText != null || documentsPathsArray != null || contactsToSend != null || documentsUrisArray != null) {
-                if (!AndroidUtilities.isTablet()) {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                }
-                Bundle args = new Bundle();
-                args.putBoolean("onlySelect", true);
-                args.putString("selectAlertString", LocaleController.getString("SendMessagesTo", R.string.SendMessagesTo));
-                args.putString("selectAlertStringGroup", LocaleController.getString("SendMessagesToGroup", R.string.SendMessagesToGroup));
-                MessagesActivity fragment = new MessagesActivity(args);
-                fragment.setDelegate(this);
-                boolean removeLast;
-                if (AndroidUtilities.isTablet()) {
-                    removeLast = layersActionBarLayout.fragmentsStack.size() > 0 && layersActionBarLayout.fragmentsStack.get(layersActionBarLayout.fragmentsStack.size() - 1) instanceof MessagesActivity;
-                } else {
-                    removeLast = actionBarLayout.fragmentsStack.size() > 1 && actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1) instanceof MessagesActivity;
-                }
-                actionBarLayout.presentFragment(fragment, removeLast, true, true);
-                pushOpened = true;
-                if (PhotoViewer.getInstance().isVisible()) {
-                    PhotoViewer.getInstance().closePhoto(false, true);
-                }
-
-                drawerLayoutContainer.setAllowOpenDrawer(false, false);
-                if (AndroidUtilities.isTablet()) {
-                    actionBarLayout.showLastFragment();
-                    rightActionBarLayout.showLastFragment();
-                } else {
-                    drawerLayoutContainer.setAllowOpenDrawer(true, false);
-                }
             }
-
             if (!pushOpened && !isNew) {
                 if (AndroidUtilities.isTablet()) {
                     if (!UserConfig.isClientActivated()) {
                         if (layersActionBarLayout.fragmentsStack.isEmpty()) {
-                            layersActionBarLayout.addFragmentToStack(new LoginActivity());
-                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
+//                            layersActionBarLayout.addFragmentToStack(new LoginActivity());
+//                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
                         }
                     } else {
                         if (actionBarLayout.fragmentsStack.isEmpty()) {
-                            actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                            actionBarLayout.addFragmentToStack(new PostsActivity(null));
                             drawerLayoutContainer.setAllowOpenDrawer(true, false);
                         }
                     }
                 } else {
                     if (actionBarLayout.fragmentsStack.isEmpty()) {
                         if (!UserConfig.isClientActivated()) {
-                            actionBarLayout.addFragmentToStack(new LoginActivity());
-                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
+//                            actionBarLayout.addFragmentToStack(new LoginActivity());
+//                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
                         } else {
-                            actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                            actionBarLayout.addFragmentToStack(new PostsActivity(null));
                             drawerLayoutContainer.setAllowOpenDrawer(true, false);
                         }
                     }
@@ -971,41 +941,10 @@ protected void onNewIntent(Intent intent) {
         handleIntent(intent, true, false, false);
     }
 
-    @Override
-    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
-        if (dialog_id != 0) {
-            int lower_part = (int)dialog_id;
-            int high_id = (int)(dialog_id >> 32);
-
-            Bundle args = new Bundle();
-            args.putBoolean("scrollToTopOnResume", true);
-            if (!AndroidUtilities.isTablet()) {
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-            }
-            if (lower_part != 0) {
-                if (high_id == 1) {
-                    args.putInt("chat_id", lower_part);
-                } else {
-                    if (lower_part > 0) {
-                        args.putInt("user_id", lower_part);
-                    } else if (lower_part < 0) {
-                        args.putInt("chat_id", -lower_part);
-                    }
-                }
-            } else {
-                args.putInt("enc_id", high_id);
-            }
-
-
-
-            photoPathsArray = null;
-            videoPath = null;
-            sendingText = null;
-            documentsPathsArray = null;
-            documentsOriginalPathsArray = null;
-            contactsToSend = null;
-        }
-    }
+//    @Override
+//    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
+//
+//    }
 
     private void onFinish() {
         if (finished) {
@@ -1446,10 +1385,12 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {
     @Override
     public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
-            if (fragment instanceof MessagesActivity) {
-                MessagesActivity messagesActivity = (MessagesActivity)fragment;
-                if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
+//            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
+            drawerLayoutContainer.setAllowOpenDrawer(true, true);
+            if (fragment instanceof PostsActivity) {
+                PostsActivity postsActivity = (PostsActivity)fragment;
+//                if (postsActivity.isMainDialogList() && layout != actionBarLayout) {
+                if (layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
                     layersActionBarLayout.removeAllFragments();
@@ -1466,7 +1407,8 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
             }
             return true;
         } else {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity), false);
+//            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity), false);
+            drawerLayoutContainer.setAllowOpenDrawer(true, false);
             return true;
         }
     }
@@ -1474,10 +1416,12 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
     @Override
     public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
-            if (fragment instanceof MessagesActivity) {
-                MessagesActivity messagesActivity = (MessagesActivity)fragment;
-                if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
+//            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
+            drawerLayoutContainer.setAllowOpenDrawer(true, true);
+            if (fragment instanceof PostsActivity) {
+                PostsActivity postsActivity = (PostsActivity)fragment;
+//                if (postsActivity.isMainDialogList() && layout != actionBarLayout) {
+                if (layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.addFragmentToStack(fragment);
                     layersActionBarLayout.removeAllFragments();
@@ -1494,7 +1438,8 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
             }
             return true;
         } else {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity), false);
+//            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity), false);
+            drawerLayoutContainer.setAllowOpenDrawer(true, false);
             return true;
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
deleted file mode 100644
index b275de811..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ /dev/null
@@ -1,861 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.animation.AnimatorSet;
-import android.animation.ObjectAnimator;
-import android.animation.StateListAnimator;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Outline;
-import android.location.Location;
-import android.location.LocationManager;
-import android.net.Uri;
-import android.os.Build;
-import android.text.TextUtils;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewOutlineProvider;
-import android.view.WindowManager;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import com.google.android.gms.maps.CameraUpdate;
-import com.google.android.gms.maps.CameraUpdateFactory;
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.MapView;
-
-import com.google.android.gms.maps.MapsInitializer;
-import com.google.android.gms.maps.model.BitmapDescriptorFactory;
-import com.google.android.gms.maps.model.CircleOptions;
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.MarkerOptions;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Adapters.BaseLocationAdapter;
-import org.telegram.ui.Adapters.LocationActivityAdapter;
-import org.telegram.ui.Adapters.LocationActivitySearchAdapter;
-import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.MapPlaceholderDrawable;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-
-public class LocationActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-
-    private GoogleMap googleMap;
-    private TextView distanceTextView;
-    private BackupImageView avatarImageView;
-    private TextView nameTextView;
-    private MapView mapView;
-    private FrameLayout mapViewClip;
-    private LocationActivityAdapter adapter;
-    private ListView listView;
-    private ListView searchListView;
-    private LocationActivitySearchAdapter searchAdapter;
-    private LinearLayout emptyTextLayout;
-    private ImageView markerImageView;
-    private ImageView markerXImageView;
-    private ImageView locationButton;
-
-    private AnimatorSet animatorSet;
-
-    private boolean searching;
-    private boolean searchWas;
-
-    private boolean wasResults;
-
-    private Location myLocation;
-    private Location userLocation;
-    private int markerTop;
-
-    private MessageObject messageObject;
-    private boolean userLocationMoved = false;
-    private boolean firstWas = false;
-    private CircleOptions circleOptions;
-    private LocationActivityDelegate delegate;
-
-    private int overScrollHeight = AndroidUtilities.displaySize.x - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(66);
-    private int halfHeight;
-
-    private final static int share = 1;
-    private final static int map_list_menu_map = 2;
-    private final static int map_list_menu_satellite = 3;
-    private final static int map_list_menu_hybrid = 4;
-
-    public interface LocationActivityDelegate {
-        void didSelectLocation(TLRPC.MessageMedia location);
-    }
-
-    @Override
-    public boolean needAddActionBar() {
-        return messageObject != null;
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-        swipeBackEnabled = false;
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        if (messageObject != null) {
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        }
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        if (mapView != null) {
-            mapView.onDestroy();
-        }
-        if (adapter != null) {
-            adapter.destroy();
-        }
-        if (searchAdapter != null) {
-            searchAdapter.destroy();
-        }
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setAllowOverlayTitle(true);
-        if (AndroidUtilities.isTablet()) {
-            actionBar.setOccupyStatusBar(false);
-        }
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == map_list_menu_map) {
-                    if (googleMap != null) {
-                        googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
-                    }
-                } else if (id == map_list_menu_satellite) {
-                    if (googleMap != null) {
-                        googleMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
-                    }
-                } else if (id == map_list_menu_hybrid) {
-                    if (googleMap != null) {
-                        googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
-                    }
-                } else if (id == share) {
-                    try {
-                        double lat = messageObject.messageOwner.media.geo.lat;
-                        double lon = messageObject.messageOwner.media.geo._long;
-                        getParentActivity().startActivity(new Intent(android.content.Intent.ACTION_VIEW, Uri.parse("geo:" + lat + "," + lon + "?q=" + lat + "," + lon)));
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        if (messageObject != null) {
-            if (messageObject.messageOwner.media.title != null && messageObject.messageOwner.media.title.length() > 0) {
-                actionBar.setTitle(messageObject.messageOwner.media.title);
-                if (messageObject.messageOwner.media.address != null && messageObject.messageOwner.media.address.length() > 0) {
-                    actionBar.setSubtitle(messageObject.messageOwner.media.address);
-                }
-            } else {
-                actionBar.setTitle(LocaleController.getString("ChatLocation", R.string.ChatLocation));
-            }
-            menu.addItem(share, R.drawable.share);
-        } else {
-            actionBar.setTitle(LocaleController.getString("ShareLocation", R.string.ShareLocation));
-
-            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
-                @Override
-                public void onSearchExpand() {
-                    searching = true;
-                    listView.setVisibility(View.GONE);
-                    mapViewClip.setVisibility(View.GONE);
-                    searchListView.setVisibility(View.VISIBLE);
-                    searchListView.setEmptyView(emptyTextLayout);
-                }
-
-                @Override
-                public boolean onSearchCollapse() {
-                    searching = false;
-                    searchWas = false;
-                    searchListView.setEmptyView(null);
-                    listView.setVisibility(View.VISIBLE);
-                    mapViewClip.setVisibility(View.VISIBLE);
-                    searchListView.setVisibility(View.GONE);
-                    emptyTextLayout.setVisibility(View.GONE);
-                    searchAdapter.searchDelayed(null, null);
-                    return true;
-                }
-
-                @Override
-                public void onTextChanged(EditText editText) {
-                    if (searchAdapter == null) {
-                        return;
-                    }
-                    String text = editText.getText().toString();
-                    if (text.length() != 0) {
-                        searchWas = true;
-                    }
-                    searchAdapter.searchDelayed(text, userLocation);
-                }
-            });
-            item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
-        }
-
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-        item.addSubItem(map_list_menu_map, LocaleController.getString("Map", R.string.Map), 0);
-        item.addSubItem(map_list_menu_satellite, LocaleController.getString("Satellite", R.string.Satellite), 0);
-        item.addSubItem(map_list_menu_hybrid, LocaleController.getString("Hybrid", R.string.Hybrid), 0);
-        fragmentView = new FrameLayout(context) {
-            private boolean first = true;
-
-            @Override
-            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-                super.onLayout(changed, left, top, right, bottom);
-
-                if (changed) {
-                    fixLayoutInternal(first);
-                    first = false;
-                }
-            }
-        };
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        locationButton = new ImageView(context);
-        locationButton.setBackgroundResource(R.drawable.floating_user_states);
-        locationButton.setImageResource(R.drawable.myloc_on);
-        locationButton.setScaleType(ImageView.ScaleType.CENTER);
-        if (Build.VERSION.SDK_INT >= 21) {
-            StateListAnimator animator = new StateListAnimator();
-            animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(locationButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
-            animator.addState(new int[]{}, ObjectAnimator.ofFloat(locationButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
-            locationButton.setStateListAnimator(animator);
-            locationButton.setOutlineProvider(new ViewOutlineProvider() {
-                @Override
-                public void getOutline(View view, Outline outline) {
-                    outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-                }
-            });
-        }
-
-        if (messageObject != null) {
-            mapView = new MapView(context);
-            frameLayout.setBackgroundDrawable(new MapPlaceholderDrawable());
-            mapView.onCreate(null);
-            try {
-                MapsInitializer.initialize(context);
-                googleMap = mapView.getMap();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            FrameLayout bottomView = new FrameLayout(context);
-            bottomView.setBackgroundResource(R.drawable.location_panel);
-            frameLayout.addView(bottomView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 60, Gravity.LEFT | Gravity.BOTTOM));
-            bottomView.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (userLocation != null) {
-                        LatLng latLng = new LatLng(userLocation.getLatitude(), userLocation.getLongitude());
-                        if (googleMap != null) {
-                            CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 8);
-                            googleMap.animateCamera(position);
-                        }
-                    }
-                }
-            });
-
-            avatarImageView = new BackupImageView(context);
-            avatarImageView.setRoundRadius(AndroidUtilities.dp(20));
-            bottomView.addView(avatarImageView, LayoutHelper.createFrame(40, 40, Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), LocaleController.isRTL ? 0 : 12, 12, LocaleController.isRTL ? 12 : 0, 0));
-
-            nameTextView = new TextView(context);
-            nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-            nameTextView.setTextColor(0xff212121);
-            nameTextView.setMaxLines(1);
-            nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-            nameTextView.setSingleLine(true);
-            nameTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            bottomView.addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), LocaleController.isRTL ? 12 : 72, 10, LocaleController.isRTL ? 72 : 12, 0));
-
-            distanceTextView = new TextView(context);
-            distanceTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            distanceTextView.setTextColor(0xff2f8cc9);
-            distanceTextView.setMaxLines(1);
-            distanceTextView.setEllipsize(TextUtils.TruncateAt.END);
-            distanceTextView.setSingleLine(true);
-            distanceTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            bottomView.addView(distanceTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), LocaleController.isRTL ? 12 : 72, 33, LocaleController.isRTL ? 72 : 12, 0));
-
-            userLocation = new Location("network");
-            userLocation.setLatitude(messageObject.messageOwner.media.geo.lat);
-            userLocation.setLongitude(messageObject.messageOwner.media.geo._long);
-            if (googleMap != null) {
-                LatLng latLng = new LatLng(userLocation.getLatitude(), userLocation.getLongitude());
-                try {
-                    googleMap.addMarker(new MarkerOptions().position(latLng).icon(BitmapDescriptorFactory.fromResource(R.drawable.map_pin)));
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 8);
-                googleMap.moveCamera(position);
-            }
-
-            ImageView routeButton = new ImageView(context);
-            routeButton.setBackgroundResource(R.drawable.floating_states);
-            routeButton.setImageResource(R.drawable.navigate);
-            routeButton.setScaleType(ImageView.ScaleType.CENTER);
-            if (Build.VERSION.SDK_INT >= 21) {
-                StateListAnimator animator = new StateListAnimator();
-                animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(routeButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
-                animator.addState(new int[]{}, ObjectAnimator.ofFloat(routeButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
-                routeButton.setStateListAnimator(animator);
-                routeButton.setOutlineProvider(new ViewOutlineProvider() {
-                    @Override
-                    public void getOutline(View view, Outline outline) {
-                        outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-                    }
-                });
-            }
-            frameLayout.addView(routeButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 14 : 0, 0, LocaleController.isRTL ? 0 : 14, 28));
-            routeButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (myLocation != null) {
-                        try {
-                            Intent intent = new Intent(android.content.Intent.ACTION_VIEW, Uri.parse(String.format(Locale.US, "http://maps.google.com/maps?saddr=%f,%f&daddr=%f,%f", myLocation.getLatitude(), myLocation.getLongitude(), messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long)));
-                            getParentActivity().startActivity(intent);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    }
-                }
-            });
-
-            frameLayout.addView(locationButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 14 : 0, 0, LocaleController.isRTL ? 0 : 14, 100));
-            locationButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (myLocation != null && googleMap != null) {
-                        googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(myLocation.getLatitude(), myLocation.getLongitude()), googleMap.getMaxZoomLevel() - 8));
-                    }
-                }
-            });
-        } else {
-            searchWas = false;
-            searching = false;
-            mapViewClip = new FrameLayout(context);
-            mapViewClip.setBackgroundDrawable(new MapPlaceholderDrawable());
-            if (adapter != null) {
-                adapter.destroy();
-            }
-            if (searchAdapter != null) {
-                searchAdapter.destroy();
-            }
-
-            listView = new ListView(context);
-            listView.setAdapter(adapter = new LocationActivityAdapter(context));
-            listView.setVerticalScrollBarEnabled(false);
-            listView.setDividerHeight(0);
-            listView.setDivider(null);
-            frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
-            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-                @Override
-                public void onScrollStateChanged(AbsListView view, int scrollState) {
-
-                }
-
-                @Override
-                public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                    if (totalItemCount == 0) {
-                        return;
-                    }
-                    updateClipView(firstVisibleItem);
-                }
-            });
-            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-                @Override
-                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                    if (position == 1) {
-                        if (delegate != null && userLocation != null) {
-                            TLRPC.TL_messageMediaGeo location = new TLRPC.TL_messageMediaGeo();
-                            location.geo = new TLRPC.TL_geoPoint();
-                            location.geo.lat = userLocation.getLatitude();
-                            location.geo._long = userLocation.getLongitude();
-                            delegate.didSelectLocation(location);
-                        }
-                        finishFragment();
-                    } else {
-                        TLRPC.TL_messageMediaVenue object = adapter.getItem(position);
-                        if (object != null && delegate != null) {
-                            delegate.didSelectLocation(object);
-                        }
-                        finishFragment();
-                    }
-                }
-            });
-            adapter.setDelegate(new BaseLocationAdapter.BaseLocationAdapterDelegate() {
-                @Override
-                public void didLoadedSearchResult(ArrayList<TLRPC.TL_messageMediaVenue> places) {
-                    if (!wasResults && !places.isEmpty()) {
-                        wasResults = true;
-                    }
-                }
-            });
-            adapter.setOverScrollHeight(overScrollHeight);
-
-            frameLayout.addView(mapViewClip, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
-
-            mapView = new MapView(context) {
-                @Override
-                public boolean onInterceptTouchEvent(MotionEvent ev) {
-                    if (Build.VERSION.SDK_INT >= 11) {
-                        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
-                            if (animatorSet != null) {
-                                animatorSet.cancel();
-                            }
-                            animatorSet = new AnimatorSet();
-                            animatorSet.setDuration(200);
-                            animatorSet.playTogether(
-                                    ObjectAnimator.ofFloat(markerImageView, "translationY", markerTop + -AndroidUtilities.dp(10)),
-                                    ObjectAnimator.ofFloat(markerXImageView, "alpha", 1.0f));
-                            animatorSet.start();
-                        } else if (ev.getAction() == MotionEvent.ACTION_UP) {
-                            if (animatorSet != null) {
-                                animatorSet.cancel();
-                            }
-                            animatorSet = new AnimatorSet();
-                            animatorSet.setDuration(200);
-                            animatorSet.playTogether(
-                                    ObjectAnimator.ofFloat(markerImageView, "translationY", markerTop),
-                                    ObjectAnimator.ofFloat(markerXImageView, "alpha", 0.0f));
-                            animatorSet.start();
-                        }
-                    }
-                    if (ev.getAction() == MotionEvent.ACTION_MOVE) {
-                        if (!userLocationMoved) {
-                            if (Build.VERSION.SDK_INT >= 11) {
-                                AnimatorSet animatorSet = new AnimatorSet();
-                                animatorSet.setDuration(200);
-                                animatorSet.play(ObjectAnimator.ofFloat(locationButton, "alpha", 1.0f));
-                                animatorSet.start();
-                            } else {
-                                locationButton.setVisibility(VISIBLE);
-                            }
-                            userLocationMoved = true;
-                        }
-                        if (googleMap != null && userLocation != null) {
-                            userLocation.setLatitude(googleMap.getCameraPosition().target.latitude);
-                            userLocation.setLongitude(googleMap.getCameraPosition().target.longitude);
-                        }
-                        adapter.setCustomLocation(userLocation);
-                    }
-                    return super.onInterceptTouchEvent(ev);
-                }
-            };
-            mapView.onCreate(null);
-            try {
-                MapsInitializer.initialize(context);
-                googleMap = mapView.getMap();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            View shadow = new View(context);
-            shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
-            mapViewClip.addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, AndroidUtilities.dp(3), Gravity.LEFT | Gravity.BOTTOM));
-
-            markerImageView = new ImageView(context);
-            markerImageView.setImageResource(R.drawable.map_pin);
-            mapViewClip.addView(markerImageView, LayoutHelper.createFrame(24, 42, Gravity.TOP | Gravity.CENTER_HORIZONTAL));
-
-            if (Build.VERSION.SDK_INT >= 11) {
-                markerXImageView = new ImageView(context);
-                markerXImageView.setAlpha(0.0f);
-                markerXImageView.setImageResource(R.drawable.place_x);
-                mapViewClip.addView(markerXImageView, LayoutHelper.createFrame(14, 14, Gravity.TOP | Gravity.CENTER_HORIZONTAL));
-            }
-
-            mapViewClip.addView(locationButton, LayoutHelper.createFrame(Build.VERSION.SDK_INT >= 21 ? 56 : 60, Build.VERSION.SDK_INT >= 21 ? 56 : 60, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 14 : 0, 0, LocaleController.isRTL ? 0 : 14, 14));
-            locationButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (myLocation != null && googleMap != null) {
-                        if (Build.VERSION.SDK_INT >= 11) {
-                            AnimatorSet animatorSet = new AnimatorSet();
-                            animatorSet.setDuration(200);
-                            animatorSet.play(ObjectAnimator.ofFloat(locationButton, "alpha", 0.0f));
-                            animatorSet.start();
-                        } else {
-                            locationButton.setVisibility(View.INVISIBLE);
-                        }
-                        adapter.setCustomLocation(null);
-                        userLocationMoved = false;
-                        googleMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(myLocation.getLatitude(), myLocation.getLongitude())));
-                    }
-                }
-            });
-            if (Build.VERSION.SDK_INT >= 11) {
-                locationButton.setAlpha(0.0f);
-            } else {
-                locationButton.setVisibility(View.INVISIBLE);
-            }
-
-            emptyTextLayout = new LinearLayout(context);
-            emptyTextLayout.setVisibility(View.GONE);
-            emptyTextLayout.setOrientation(LinearLayout.VERTICAL);
-            frameLayout.addView(emptyTextLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
-            emptyTextLayout.setOnTouchListener(new View.OnTouchListener() {
-                @Override
-                public boolean onTouch(View v, MotionEvent event) {
-                    return true;
-                }
-            });
-
-            TextView emptyTextView = new TextView(context);
-            emptyTextView.setTextColor(0xff808080);
-            emptyTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-            emptyTextView.setGravity(Gravity.CENTER);
-            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-            emptyTextLayout.addView(emptyTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f));
-
-            FrameLayout frameLayoutEmpty = new FrameLayout(context);
-            emptyTextLayout.addView(frameLayoutEmpty, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f));
-
-            searchListView = new ListView(context);
-            searchListView.setVisibility(View.GONE);
-            searchListView.setDividerHeight(0);
-            searchListView.setDivider(null);
-            searchListView.setAdapter(searchAdapter = new LocationActivitySearchAdapter(context));
-            frameLayout.addView(searchListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
-            searchListView.setOnScrollListener(new AbsListView.OnScrollListener() {
-                @Override
-                public void onScrollStateChanged(AbsListView view, int scrollState) {
-                    if (scrollState == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
-                        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
-                    }
-                }
-
-                @Override
-                public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-
-                }
-            });
-            searchListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-                @Override
-                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                    TLRPC.TL_messageMediaVenue object = searchAdapter.getItem(position);
-                    if (object != null && delegate != null) {
-                        delegate.didSelectLocation(object);
-                    }
-                    finishFragment();
-                }
-            });
-
-            if (googleMap != null) {
-                userLocation = new Location("network");
-                userLocation.setLatitude(20.659322);
-                userLocation.setLongitude(-11.406250);
-            }
-
-            frameLayout.addView(actionBar);
-        }
-
-        if (googleMap != null) {
-            googleMap.setMyLocationEnabled(true);
-            googleMap.getUiSettings().setMyLocationButtonEnabled(false);
-            googleMap.getUiSettings().setZoomControlsEnabled(false);
-            googleMap.getUiSettings().setCompassEnabled(false);
-            googleMap.setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener() {
-                @Override
-                public void onMyLocationChange(Location location) {
-                    positionMarker(location);
-                }
-            });
-            positionMarker(myLocation = getLastLocation());
-        }
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        if (mapViewClip != null) {
-            mapViewClip.addView(mapView, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, overScrollHeight + AndroidUtilities.dp(10), Gravity.TOP | Gravity.LEFT));
-            updateClipView(listView.getFirstVisiblePosition());
-        } else {
-            ((FrameLayout) fragmentView).addView(mapView, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
-        }
-    }
-
-    private void updateClipView(int firstVisibleItem) {
-        int height = 0;
-        int top = 0;
-        View child = listView.getChildAt(0);
-        if (child != null) {
-            if (firstVisibleItem == 0) {
-                top = child.getTop();
-                height = overScrollHeight + (top < 0 ? top : 0);
-                halfHeight = (top < 0 ? top : 0) / 2;
-            }
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mapViewClip.getLayoutParams();
-            if (layoutParams != null) {
-                if (height <= 0) {
-                    if (mapView.getVisibility() == View.VISIBLE) {
-                        mapView.setVisibility(View.INVISIBLE);
-                        mapViewClip.setVisibility(View.INVISIBLE);
-                    }
-                } else {
-                    if (mapView.getVisibility() == View.INVISIBLE) {
-                        mapView.setVisibility(View.VISIBLE);
-                        mapViewClip.setVisibility(View.VISIBLE);
-                    }
-                }
-                if (Build.VERSION.SDK_INT >= 11) {
-                    mapViewClip.setTranslationY(Math.min(0, top));
-                    mapView.setTranslationY(Math.max(0, -top / 2));
-                    markerImageView.setTranslationY(markerTop = -top - AndroidUtilities.dp(42) + height / 2);
-                    markerXImageView.setTranslationY(-top - AndroidUtilities.dp(7) + height / 2);
-
-                    if (googleMap != null) {
-                        layoutParams = (FrameLayout.LayoutParams) mapView.getLayoutParams();
-                        if (layoutParams != null && layoutParams.height != overScrollHeight + AndroidUtilities.dp(10)) {
-                            layoutParams.height = overScrollHeight + AndroidUtilities.dp(10);
-                            googleMap.setPadding(0, 0, 0, AndroidUtilities.dp(10));
-                            mapView.setLayoutParams(layoutParams);
-                        }
-                    }
-                } else {
-                    markerTop = 0;
-                    layoutParams.height = height;
-                    mapViewClip.setLayoutParams(layoutParams);
-
-                    layoutParams = (FrameLayout.LayoutParams) markerImageView.getLayoutParams();
-                    layoutParams.topMargin = height / 2 - AndroidUtilities.dp(42);
-                    markerImageView.setLayoutParams(layoutParams);
-
-                    if (googleMap != null) {
-                        layoutParams = (FrameLayout.LayoutParams) mapView.getLayoutParams();
-                        if (layoutParams != null) {
-                            layoutParams.topMargin = halfHeight;
-                            layoutParams.height = overScrollHeight + AndroidUtilities.dp(10);
-                            googleMap.setPadding(0, 0, 0, AndroidUtilities.dp(10));
-                            mapView.setLayoutParams(layoutParams);
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    private void fixLayoutInternal(final boolean resume) {
-        if (listView != null) {
-            int height = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight();
-            int viewHeight = fragmentView.getMeasuredHeight();
-            if (viewHeight == 0) {
-                return;
-            }
-            overScrollHeight = viewHeight - AndroidUtilities.dp(66) - height;
-
-            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-            layoutParams.topMargin = height;
-            listView.setLayoutParams(layoutParams);
-            layoutParams = (FrameLayout.LayoutParams) mapViewClip.getLayoutParams();
-            layoutParams.topMargin = height;
-            layoutParams.height = overScrollHeight;
-            mapViewClip.setLayoutParams(layoutParams);
-            layoutParams = (FrameLayout.LayoutParams) searchListView.getLayoutParams();
-            layoutParams.topMargin = height;
-            searchListView.setLayoutParams(layoutParams);
-
-            adapter.setOverScrollHeight(overScrollHeight);
-            layoutParams = (FrameLayout.LayoutParams) mapView.getLayoutParams();
-            if (layoutParams != null) {
-                layoutParams.height = overScrollHeight + AndroidUtilities.dp(10);
-                if (googleMap != null) {
-                    googleMap.setPadding(0, 0, 0, AndroidUtilities.dp(10));
-                }
-                mapView.setLayoutParams(layoutParams);
-            }
-            adapter.notifyDataSetChanged();
-
-            if (resume) {
-                listView.setSelectionFromTop(0, -(int) (AndroidUtilities.dp(56) * 2.5f + AndroidUtilities.dp(36 + 66)));
-                updateClipView(listView.getFirstVisiblePosition());
-                listView.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        listView.setSelectionFromTop(0, -(int) (AndroidUtilities.dp(56) * 2.5f + AndroidUtilities.dp(36 + 66)));
-                        updateClipView(listView.getFirstVisiblePosition());
-                    }
-                });
-            } else {
-                updateClipView(listView.getFirstVisiblePosition());
-            }
-        }
-    }
-
-    private Location getLastLocation() {
-        LocationManager lm = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
-        List<String> providers = lm.getProviders(true);
-        Location l = null;
-        for (int i = providers.size() - 1; i >= 0; i--) {
-            l = lm.getLastKnownLocation(providers.get(i));
-            if (l != null) {
-                break;
-            }
-        }
-        return l;
-    }
-
-    private void updateUserData() {
-        if (messageObject != null && avatarImageView != null) {
-            int fromId = messageObject.messageOwner.from_id;
-            if (messageObject.isForwarded()) {
-                fromId = messageObject.messageOwner.fwd_from_id;
-            }
-            TLRPC.User user = MessagesController.getInstance().getUser(fromId);
-            if (user != null) {
-                TLRPC.FileLocation photo = null;
-                if (user.photo != null) {
-                    photo = user.photo.photo_small;
-                }
-                avatarImageView.setImage(photo, null, new AvatarDrawable(user));
-                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
-            } else {
-                avatarImageView.setImageDrawable(null);
-            }
-        }
-    }
-
-    private void positionMarker(Location location) {
-        if (location == null) {
-            return;
-        }
-        myLocation = new Location(location);
-        if (messageObject != null) {
-            if (userLocation != null && distanceTextView != null) {
-                float distance = location.distanceTo(userLocation);
-                if (distance < 1000) {
-                    distanceTextView.setText(String.format("%d %s", (int) (distance), LocaleController.getString("MetersAway", R.string.MetersAway)));
-                } else {
-                    distanceTextView.setText(String.format("%.2f %s", distance / 1000.0f, LocaleController.getString("KMetersAway", R.string.KMetersAway)));
-                }
-            }
-        } else if (googleMap != null) {
-            LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
-            if (adapter != null) {
-                adapter.searchGooglePlacesWithQuery(null, myLocation);
-                adapter.setGpsLocation(myLocation);
-            }
-            if (!userLocationMoved) {
-                userLocation = new Location(location);
-                if (firstWas) {
-                    CameraUpdate position = CameraUpdateFactory.newLatLng(latLng);
-                    googleMap.animateCamera(position);
-                } else {
-                    firstWas = true;
-                    CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 8);
-                    googleMap.moveCamera(position);
-                }
-            }
-        }
-    }
-
-    public void setMessageObject(MessageObject message) {
-        messageObject = message;
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.updateInterfaces) {
-            int mask = (Integer) args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                updateUserData();
-            }
-        } else if (id == NotificationCenter.closeChats) {
-            removeSelfFromStack();
-        }
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        if (mapView != null) {
-            try {
-                mapView.onPause();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (!AndroidUtilities.isTablet()) {
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
-        }
-        if (mapView != null) {
-            mapView.onResume();
-        }
-        updateUserData();
-        fixLayoutInternal(true);
-    }
-
-    @Override
-    public void onLowMemory() {
-        super.onLowMemory();
-        if (mapView != null) {
-            mapView.onLowMemory();
-        }
-    }
-
-    public void setDelegate(LocationActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    private void updateSearchInterface() {
-        if (adapter != null) {
-            adapter.notifyDataSetChanged();
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
deleted file mode 100644
index 357947214..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ /dev/null
@@ -1,2199 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.animation.Animator;
-import android.annotation.SuppressLint;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.graphics.Typeface;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Vibrator;
-import android.telephony.TelephonyManager;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.InputType;
-import android.text.SpannableStringBuilder;
-import android.text.Spanned;
-import android.text.TextUtils;
-import android.text.TextWatcher;
-import android.text.method.PasswordTransformationMethod;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.WindowManager;
-import android.view.animation.AccelerateDecelerateInterpolator;
-import android.view.inputmethod.EditorInfo;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.SlideView;
-import org.telegram.ui.Components.TypefaceSpan;
-
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class LoginActivity extends BaseFragment {
-
-    private int currentViewNum = 0;
-    private SlideView[] views = new SlideView[5];
-    private ProgressDialog progressDialog;
-
-    private final static int done_button = 1;
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        for (SlideView v : views) {
-            if (v != null) {
-                v.onDestroyActivity();
-            }
-        }
-        if (progressDialog != null) {
-            try {
-                progressDialog.dismiss();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            progressDialog = null;
-        }
-    }
-
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == done_button) {
-                    views[currentViewNum].onNextPressed();
-                } else if (id == -1) {
-                    onBackPressed();
-                }
-            }
-        });
-
-        ActionBarMenu menu = actionBar.createMenu();
-        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        fragmentView = new ScrollView(context);
-        ScrollView scrollView = (ScrollView) fragmentView;
-        scrollView.setFillViewport(true);
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        scrollView.addView(frameLayout);
-        ScrollView.LayoutParams layoutParams = (ScrollView.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.width = ScrollView.LayoutParams.MATCH_PARENT;
-        layoutParams.height = ScrollView.LayoutParams.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        frameLayout.setLayoutParams(layoutParams);
-
-        views[0] = new PhoneView(context);
-        views[1] = new LoginActivitySmsView(context);
-        views[2] = new LoginActivityRegisterView(context);
-        views[3] = new LoginActivityPasswordView(context);
-        views[4] = new LoginActivityRecoverView(context);
-
-        for (int a = 0; a < 5; a++) {
-            views[a].setVisibility(a == 0 ? View.VISIBLE : View.GONE);
-            frameLayout.addView(views[a]);
-            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) views[a].getLayoutParams();
-            layoutParams1.width = LayoutHelper.MATCH_PARENT;
-            layoutParams1.height = a == 0 ? LayoutHelper.WRAP_CONTENT : LayoutHelper.MATCH_PARENT;
-            layoutParams1.leftMargin = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 26 : 18);
-            layoutParams1.rightMargin = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 26 : 18);
-            layoutParams1.topMargin = AndroidUtilities.dp(30);
-            layoutParams1.gravity = Gravity.TOP | Gravity.LEFT;
-            views[a].setLayoutParams(layoutParams1);
-        }
-
-        Bundle savedInstanceState = loadCurrentState();
-        if (savedInstanceState != null) {
-            currentViewNum = savedInstanceState.getInt("currentViewNum", 0);
-        }
-        actionBar.setTitle(views[currentViewNum].getHeaderName());
-        for (int a = 0; a < views.length; a++) {
-            if (savedInstanceState != null) {
-                views[a].restoreStateParams(savedInstanceState);
-            }
-            if (currentViewNum == a) {
-                actionBar.setBackButtonImage(views[a].needBackButton() ? R.drawable.ic_ab_back : 0);
-                views[a].setVisibility(View.VISIBLE);
-                views[a].onShow();
-            } else {
-                views[a].setVisibility(View.GONE);
-            }
-        }
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        if (!AndroidUtilities.isTablet()) {
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (!AndroidUtilities.isTablet()) {
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
-        }
-    }
-
-    private Bundle loadCurrentState() {
-        try {
-            Bundle bundle = new Bundle();
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
-            Map<String, ?> params = preferences.getAll();
-            for (Map.Entry<String, ?> entry : params.entrySet()) {
-                String key = entry.getKey();
-                Object value = entry.getValue();
-                String[] args = key.split("_\\|_");
-                if (args.length == 1) {
-                    if (value instanceof String) {
-                        bundle.putString(key, (String) value);
-                    } else if (value instanceof Integer) {
-                        bundle.putInt(key, (Integer) value);
-                    }
-                } else if (args.length == 2) {
-                    Bundle inner = bundle.getBundle(args[0]);
-                    if (inner == null) {
-                        inner = new Bundle();
-                        bundle.putBundle(args[0], inner);
-                    }
-                    if (value instanceof String) {
-                        inner.putString(args[1], (String) value);
-                    } else if (value instanceof Integer) {
-                        inner.putInt(args[1], (Integer) value);
-                    }
-                }
-            }
-            return bundle;
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return null;
-    }
-
-    private void clearCurrentState() {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.clear();
-        editor.commit();
-    }
-
-    private void putBundleToEditor(Bundle bundle, SharedPreferences.Editor editor, String prefix) {
-        Set<String> keys = bundle.keySet();
-        for (String key : keys) {
-            Object obj = bundle.get(key);
-            if (obj instanceof String) {
-                if (prefix != null) {
-                    editor.putString(prefix + "_|_" + key, (String) obj);
-                } else {
-                    editor.putString(key, (String) obj);
-                }
-            } else if (obj instanceof Integer) {
-                if (prefix != null) {
-                    editor.putInt(prefix + "_|_" + key, (Integer) obj);
-                } else {
-                    editor.putInt(key, (Integer) obj);
-                }
-            } else if (obj instanceof Bundle) {
-                putBundleToEditor((Bundle) obj, editor, key);
-            }
-        }
-    }
-
-    @Override
-    public boolean onBackPressed() {
-        if (currentViewNum == 0) {
-            for (SlideView v : views) {
-                if (v != null) {
-                    v.onDestroyActivity();
-                }
-            }
-            clearCurrentState();
-            return true;
-        } else if (currentViewNum == 3) {
-            views[currentViewNum].onBackPressed();
-            setPage(0, true, null, true);
-        } else if (currentViewNum == 4) {
-            views[currentViewNum].onBackPressed();
-            setPage(3, true, null, true);
-        }
-        return false;
-    }
-
-    public void needShowAlert(String title, String text) {
-        if (text == null || getParentActivity() == null) {
-            return;
-        }
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setTitle(title);
-        builder.setMessage(text);
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        showDialog(builder.create());
-    }
-
-    public void needShowProgress() {
-        if (getParentActivity() == null || getParentActivity().isFinishing() || progressDialog != null) {
-            return;
-        }
-        progressDialog = new ProgressDialog(getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-        progressDialog.show();
-    }
-
-    public void needHideProgress() {
-        if (progressDialog == null) {
-            return;
-        }
-        try {
-            progressDialog.dismiss();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        progressDialog = null;
-    }
-
-    public void setPage(int page, boolean animated, Bundle params, boolean back) {
-        if (android.os.Build.VERSION.SDK_INT > 13) {
-            final SlideView outView = views[currentViewNum];
-            final SlideView newView = views[page];
-            currentViewNum = page;
-            actionBar.setBackButtonImage(newView.needBackButton() ? R.drawable.ic_ab_back : 0);
-
-            newView.setParams(params);
-            actionBar.setTitle(newView.getHeaderName());
-            newView.onShow();
-            newView.setX(back ? -AndroidUtilities.displaySize.x : AndroidUtilities.displaySize.x);
-            outView.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
-                @Override
-                public void onAnimationStart(Animator animator) {
-                }
-
-                @SuppressLint("NewApi")
-                @Override
-                public void onAnimationEnd(Animator animator) {
-                    outView.setVisibility(View.GONE);
-                    outView.setX(0);
-                }
-
-                @Override
-                public void onAnimationCancel(Animator animator) {
-                }
-
-                @Override
-                public void onAnimationRepeat(Animator animator) {
-                }
-            }).setDuration(300).translationX(back ? AndroidUtilities.displaySize.x : -AndroidUtilities.displaySize.x).start();
-            newView.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
-                @Override
-                public void onAnimationStart(Animator animator) {
-                    newView.setVisibility(View.VISIBLE);
-                }
-
-                @Override
-                public void onAnimationEnd(Animator animator) {
-                }
-
-                @Override
-                public void onAnimationCancel(Animator animator) {
-                }
-
-                @Override
-                public void onAnimationRepeat(Animator animator) {
-                }
-            }).setDuration(300).translationX(0).start();
-        } else {
-            actionBar.setBackButtonImage(views[page].needBackButton() ? R.drawable.ic_ab_back : 0);
-            views[currentViewNum].setVisibility(View.GONE);
-            currentViewNum = page;
-            views[page].setParams(params);
-            views[page].setVisibility(View.VISIBLE);
-            actionBar.setTitle(views[page].getHeaderName());
-            views[page].onShow();
-        }
-    }
-
-    @Override
-    public void saveSelfArgs(Bundle outState) {
-        try {
-            Bundle bundle = new Bundle();
-            bundle.putInt("currentViewNum", currentViewNum);
-            for (int a = 0; a <= currentViewNum; a++) {
-                SlideView v = views[a];
-                if (v != null) {
-                    v.saveStateParams(bundle);
-                }
-            }
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
-            SharedPreferences.Editor editor = preferences.edit();
-            editor.clear();
-            putBundleToEditor(bundle, editor, null);
-            editor.commit();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void needFinishActivity() {
-        clearCurrentState();
-        presentFragment(new MessagesActivity(null), true);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
-    }
-
-    public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
-
-        private EditText codeField;
-        private EditText phoneField;
-        private TextView countryButton;
-
-        private int countryState = 0;
-
-        private ArrayList<String> countriesArray = new ArrayList<>();
-        private HashMap<String, String> countriesMap = new HashMap<>();
-        private HashMap<String, String> codesMap = new HashMap<>();
-
-        private boolean ignoreSelection = false;
-        private boolean ignoreOnTextChange = false;
-        private boolean ignoreOnPhoneChange = false;
-        private boolean nextPressed = false;
-
-        public PhoneView(Context context) {
-            super(context);
-
-            setOrientation(VERTICAL);
-
-            countryButton = new TextView(context);
-            countryButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            countryButton.setPadding(AndroidUtilities.dp(12), AndroidUtilities.dp(10), AndroidUtilities.dp(12), 0);
-            countryButton.setTextColor(0xff212121);
-            countryButton.setMaxLines(1);
-            countryButton.setSingleLine(true);
-            countryButton.setEllipsize(TextUtils.TruncateAt.END);
-            countryButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_HORIZONTAL);
-            countryButton.setBackgroundResource(R.drawable.spinner_states);
-            addView(countryButton);
-            LayoutParams layoutParams = (LayoutParams) countryButton.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.bottomMargin = AndroidUtilities.dp(14);
-            countryButton.setLayoutParams(layoutParams);
-
-            View view = new View(context);
-            view.setPadding(AndroidUtilities.dp(12), 0, AndroidUtilities.dp(12), 0);
-            view.setBackgroundColor(0xffdbdbdb);
-            addView(view);
-            layoutParams = (LayoutParams) view.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = 1;
-            layoutParams.topMargin = AndroidUtilities.dp(-17.5f);
-            layoutParams.leftMargin = AndroidUtilities.dp(4);
-            layoutParams.rightMargin = AndroidUtilities.dp(4);
-            view.setLayoutParams(layoutParams);
-
-            LinearLayout linearLayout = new LinearLayout(context);
-            linearLayout.setOrientation(HORIZONTAL);
-            addView(linearLayout);
-            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            linearLayout.setLayoutParams(layoutParams);
-
-            TextView textView = new TextView(context);
-            textView.setText("+");
-            textView.setTextColor(0xff212121);
-            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            linearLayout.addView(textView);
-            layoutParams = (LayoutParams) textView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            textView.setLayoutParams(layoutParams);
-
-            codeField = new EditText(context);
-            codeField.setInputType(InputType.TYPE_CLASS_PHONE);
-            codeField.setTextColor(0xff212121);
-            AndroidUtilities.clearCursorDrawable(codeField);
-            codeField.setPadding(AndroidUtilities.dp(10), 0, 0, 0);
-            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            codeField.setMaxLines(1);
-            codeField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
-            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            InputFilter[] inputFilters = new InputFilter[1];
-            inputFilters[0] = new InputFilter.LengthFilter(4);
-            codeField.setFilters(inputFilters);
-            linearLayout.addView(codeField);
-            layoutParams = (LayoutParams) codeField.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(55);
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.rightMargin = AndroidUtilities.dp(16);
-            layoutParams.leftMargin = AndroidUtilities.dp(-9);
-            codeField.setLayoutParams(layoutParams);
-            codeField.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                }
-
-                @Override
-                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                }
-
-                @Override
-                public void afterTextChanged(Editable editable) {
-                    if (ignoreOnTextChange) {
-                        ignoreOnTextChange = false;
-                        return;
-                    }
-                    ignoreOnTextChange = true;
-                    String text = PhoneFormat.stripExceptNumbers(codeField.getText().toString());
-                    codeField.setText(text);
-                    if (text.length() == 0) {
-                        countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                        countryState = 1;
-                    } else {
-                        String country = codesMap.get(text);
-                        if (country != null) {
-                            int index = countriesArray.indexOf(country);
-                            if (index != -1) {
-                                ignoreSelection = true;
-                                countryButton.setText(countriesArray.get(index));
-
-                                updatePhoneField();
-                                countryState = 0;
-                            } else {
-                                countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                                countryState = 2;
-                            }
-                        } else {
-                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                            countryState = 2;
-                        }
-                        codeField.setSelection(codeField.getText().length());
-                    }
-                }
-            });
-            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        phoneField.requestFocus();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            phoneField = new EditText(context);
-            phoneField.setInputType(InputType.TYPE_CLASS_PHONE);
-            phoneField.setTextColor(0xff212121);
-            phoneField.setHintTextColor(0xff979797);
-            phoneField.setPadding(0, 0, 0, 0);
-            AndroidUtilities.clearCursorDrawable(phoneField);
-            phoneField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            phoneField.setMaxLines(1);
-            phoneField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
-            phoneField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            linearLayout.addView(phoneField);
-            layoutParams = (LayoutParams) phoneField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            phoneField.setLayoutParams(layoutParams);
-            phoneField.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-                    if (ignoreOnPhoneChange) {
-                        return;
-                    }
-                    if (count == 1 && after == 0 && s.length() > 1) {
-                        String phoneChars = "0123456789";
-                        String str = s.toString();
-                        String substr = str.substring(start, start + 1);
-                        if (!phoneChars.contains(substr)) {
-                            ignoreOnPhoneChange = true;
-                            StringBuilder builder = new StringBuilder(str);
-                            int toDelete = 0;
-                            for (int a = start; a >= 0; a--) {
-                                substr = str.substring(a, a + 1);
-                                if (phoneChars.contains(substr)) {
-                                    break;
-                                }
-                                toDelete++;
-                            }
-                            builder.delete(Math.max(0, start - toDelete), start + 1);
-                            str = builder.toString();
-                            if (PhoneFormat.strip(str).length() == 0) {
-                                phoneField.setText("");
-                            } else {
-                                phoneField.setText(str);
-                                updatePhoneField();
-                            }
-                            ignoreOnPhoneChange = false;
-                        }
-                    }
-                }
-
-                @Override
-                public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-                }
-
-                @Override
-                public void afterTextChanged(Editable s) {
-                    if (ignoreOnPhoneChange) {
-                        return;
-                    }
-                    updatePhoneField();
-                }
-            });
-            phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        onNextPressed();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            textView = new TextView(context);
-            textView.setText(LocaleController.getString("ChangePhoneHelp", R.string.ChangePhoneHelp));
-            textView.setTextColor(0xff757575);
-            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            textView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(textView);
-            layoutParams = (LayoutParams) textView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.topMargin = AndroidUtilities.dp(28);
-            layoutParams.bottomMargin = AndroidUtilities.dp(10);
-            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-            textView.setLayoutParams(layoutParams);
-
-            HashMap<String, String> languageMap = new HashMap<>();
-            try {
-                BufferedReader reader = new BufferedReader(new InputStreamReader(getResources().getAssets().open("countries.txt")));
-                String line;
-                while ((line = reader.readLine()) != null) {
-                    String[] args = line.split(";");
-                    countriesArray.add(0, args[2]);
-                    countriesMap.put(args[2], args[0]);
-                    codesMap.put(args[0], args[2]);
-                    languageMap.put(args[1], args[2]);
-                }
-                reader.close();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            Collections.sort(countriesArray, new Comparator<String>() {
-                @Override
-                public int compare(String lhs, String rhs) {
-                    return lhs.compareTo(rhs);
-                }
-            });
-
-            String country = null;
-
-            try {
-                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
-                if (telephonyManager != null) {
-                    country = telephonyManager.getSimCountryIso().toUpperCase();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            if (country != null) {
-                String countryName = languageMap.get(country);
-                if (countryName != null) {
-                    int index = countriesArray.indexOf(countryName);
-                    if (index != -1) {
-                        codeField.setText(countriesMap.get(countryName));
-                        countryState = 0;
-                    }
-                }
-            }
-            if (codeField.length() == 0) {
-                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                countryState = 1;
-            }
-
-            if (codeField.length() != 0) {
-                AndroidUtilities.showKeyboard(phoneField);
-                phoneField.requestFocus();
-            } else {
-                AndroidUtilities.showKeyboard(codeField);
-                codeField.requestFocus();
-            }
-        }
-
-        public void selectCountry(String name) {
-            int index = countriesArray.indexOf(name);
-            if (index != -1) {
-                ignoreOnTextChange = true;
-                codeField.setText(countriesMap.get(name));
-                countryButton.setText(name);
-                countryState = 0;
-            }
-        }
-
-        private void updatePhoneField() {
-            ignoreOnPhoneChange = true;
-            try {
-                String codeText = codeField.getText().toString();
-                String phone = PhoneFormat.getInstance().format("+" + codeText + phoneField.getText().toString());
-                int idx = phone.indexOf(" ");
-                if (idx != -1) {
-                    String resultCode = PhoneFormat.stripExceptNumbers(phone.substring(0, idx));
-                    if (!codeText.equals(resultCode)) {
-                        phone = PhoneFormat.getInstance().format(phoneField.getText().toString()).trim();
-                        phoneField.setText(phone);
-                        int len = phoneField.length();
-                        phoneField.setSelection(phoneField.length());
-                    } else {
-                        phoneField.setText(phone.substring(idx).trim());
-                        int len = phoneField.length();
-                        phoneField.setSelection(phoneField.length());
-                    }
-                } else {
-                    phoneField.setSelection(phoneField.length());
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            ignoreOnPhoneChange = false;
-        }
-
-        @Override
-        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-            if (ignoreSelection) {
-                ignoreSelection = false;
-                return;
-            }
-            ignoreOnTextChange = true;
-            String str = countriesArray.get(i);
-            codeField.setText(countriesMap.get(str));
-            updatePhoneField();
-        }
-
-        @Override
-        public void onNothingSelected(AdapterView<?> adapterView) {
-
-        }
-
-        @Override
-        public void onNextPressed() {
-            if (nextPressed) {
-                return;
-            }
-            if (countryState == 1) {
-                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-                return;
-            } else if (countryState == 2 && !BuildVars.DEBUG_VERSION) {
-                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("WrongCountry", R.string.WrongCountry));
-                return;
-            }
-            if (codeField.length() == 0) {
-                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                return;
-            }
-            ConnectionsManager.getInstance().cleanUp();
-            TLRPC.TL_auth_sendCode req = new TLRPC.TL_auth_sendCode();
-            String phone = PhoneFormat.stripExceptNumbers("" + codeField.getText() + phoneField.getText());
-            ConnectionsManager.getInstance().applyCountryPortNumber(phone);
-            req.api_hash = BuildVars.APP_HASH;
-            req.api_id = BuildVars.APP_ID;
-            req.sms_type = 0;
-            req.phone_number = phone;
-            req.lang_code = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
-            if (req.lang_code == null || req.lang_code.length() == 0) {
-                req.lang_code = "en";
-            }
-
-            final Bundle params = new Bundle();
-            params.putString("phone", "+" + codeField.getText() + phoneField.getText());
-            try {
-                params.putString("ephone", "+" + PhoneFormat.stripExceptNumbers(codeField.getText().toString()) + " " + PhoneFormat.stripExceptNumbers(phoneField.getText().toString()));
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                params.putString("ephone", "+" + phone);
-            }
-            params.putString("phoneFormated", phone);
-            nextPressed = true;
-            needShowProgress();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            nextPressed = false;
-                            if (error == null) {
-                                final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode) response;
-                                params.putString("phoneHash", res.phone_code_hash);
-                                params.putInt("calltime", res.send_call_timeout * 1000);
-                                setPage(1, true, params, false);
-                            } else {
-                                if (error.text != null) {
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
-                                    } else if (error.code != -1000) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                    }
-                                }
-                            }
-                            needHideProgress();
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassTryDifferentDc | RPCRequest.RPCRequestClassEnableUnauthorized);
-        }
-
-        @Override
-        public void onShow() {
-            super.onShow();
-            if (phoneField != null) {
-                phoneField.requestFocus();
-                phoneField.setSelection(phoneField.length());
-            }
-        }
-
-        @Override
-        public String getHeaderName() {
-            return LocaleController.getString("YourPhone", R.string.YourPhone);
-        }
-
-        @Override
-        public void saveStateParams(Bundle bundle) {
-            String code = codeField.getText().toString();
-            if (code != null && code.length() != 0) {
-                bundle.putString("phoneview_code", code);
-            }
-            String phone = phoneField.getText().toString();
-            if (phone != null && phone.length() != 0) {
-                bundle.putString("phoneview_phone", phone);
-            }
-        }
-
-        @Override
-        public void restoreStateParams(Bundle bundle) {
-            String code = bundle.getString("phoneview_code");
-            if (code != null) {
-                codeField.setText(code);
-            }
-            String phone = bundle.getString("phoneview_phone");
-            if (phone != null) {
-                phoneField.setText(phone);
-            }
-        }
-    }
-
-    public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
-
-        private String phoneHash;
-        private String requestPhone;
-        private String emailPhone;
-        private EditText codeField;
-        private TextView confirmTextView;
-        private TextView timeText;
-        private TextView problemText;
-        private Bundle currentParams;
-
-        private Timer timeTimer;
-        private Timer codeTimer;
-        private final Object timerSync = new Object();
-        private volatile int time = 60000;
-        private volatile int codeTime = 15000;
-        private double lastCurrentTime;
-        private double lastCodeTime;
-        private boolean waitingForSms = false;
-        private boolean nextPressed = false;
-        private String lastError = "";
-
-        public LoginActivitySmsView(Context context) {
-            super(context);
-
-            setOrientation(VERTICAL);
-
-            confirmTextView = new TextView(context);
-            confirmTextView.setTextColor(0xff757575);
-            confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            confirmTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(confirmTextView);
-            LayoutParams layoutParams = (LayoutParams) confirmTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-            confirmTextView.setLayoutParams(layoutParams);
-
-            codeField = new EditText(context);
-            codeField.setTextColor(0xff212121);
-            codeField.setHint(LocaleController.getString("Code", R.string.Code));
-            AndroidUtilities.clearCursorDrawable(codeField);
-            codeField.setHintTextColor(0xff979797);
-            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            codeField.setInputType(InputType.TYPE_CLASS_PHONE);
-            codeField.setMaxLines(1);
-            codeField.setPadding(0, 0, 0, 0);
-            addView(codeField);
-            layoutParams = (LayoutParams) codeField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            codeField.setLayoutParams(layoutParams);
-            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        onNextPressed();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            timeText = new TextView(context);
-            timeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            timeText.setTextColor(0xff757575);
-            timeText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            timeText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            addView(timeText);
-            layoutParams = (LayoutParams) timeText.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-            layoutParams.topMargin = AndroidUtilities.dp(30);
-            timeText.setLayoutParams(layoutParams);
-
-            problemText = new TextView(context);
-            problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
-            problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
-            problemText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            problemText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            problemText.setTextColor(0xff4d83b3);
-            problemText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            problemText.setPadding(0, AndroidUtilities.dp(2), 0, AndroidUtilities.dp(12));
-            addView(problemText);
-            layoutParams = (LayoutParams) problemText.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            problemText.setLayoutParams(layoutParams);
-            problemText.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    try {
-                        PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                        String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
-
-                        Intent mailer = new Intent(Intent.ACTION_SEND);
-                        mailer.setType("message/rfc822");
-                        mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@stel.com"});
-                        mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + emailPhone);
-                        mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
-                        getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
-                    } catch (Exception e) {
-                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
-                    }
-                }
-            });
-
-            LinearLayout linearLayout = new LinearLayout(context);
-            linearLayout.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-            addView(linearLayout);
-            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            linearLayout.setLayoutParams(layoutParams);
-
-            TextView wrongNumber = new TextView(context);
-            wrongNumber.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_HORIZONTAL);
-            wrongNumber.setTextColor(0xff4d83b3);
-            wrongNumber.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            wrongNumber.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            wrongNumber.setPadding(0, AndroidUtilities.dp(24), 0, 0);
-            linearLayout.addView(wrongNumber);
-            layoutParams = (LayoutParams) wrongNumber.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.BOTTOM | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            layoutParams.bottomMargin = AndroidUtilities.dp(10);
-            wrongNumber.setLayoutParams(layoutParams);
-            wrongNumber.setText(LocaleController.getString("WrongNumber", R.string.WrongNumber));
-            wrongNumber.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    onBackPressed();
-                    setPage(0, true, null, true);
-                }
-            });
-        }
-
-        @Override
-        public String getHeaderName() {
-            return LocaleController.getString("YourCode", R.string.YourCode);
-        }
-
-        @Override
-        public void setParams(Bundle params) {
-            if (params == null) {
-                return;
-            }
-            codeField.setText("");
-            AndroidUtilities.setWaitingForSms(true);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
-            currentParams = params;
-            waitingForSms = true;
-            String phone = params.getString("phone");
-            emailPhone = params.getString("ephone");
-            requestPhone = params.getString("phoneFormated");
-            phoneHash = params.getString("phoneHash");
-            time = params.getInt("calltime");
-
-            if (phone == null) {
-                return;
-            }
-
-            String number = PhoneFormat.getInstance().format(phone);
-            String str = String.format(LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " %s", number);
-            try {
-                SpannableStringBuilder stringBuilder = new SpannableStringBuilder(str);
-                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-                int idx = str.indexOf(number);
-                stringBuilder.setSpan(span, idx, idx + number.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
-                confirmTextView.setText(stringBuilder);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                confirmTextView.setText(str);
-            }
-
-            AndroidUtilities.showKeyboard(codeField);
-            codeField.requestFocus();
-
-            destroyTimer();
-            destroyCodeTimer();
-            timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
-            lastCurrentTime = System.currentTimeMillis();
-            problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
-
-            createTimer();
-        }
-
-        private void createCodeTimer() {
-            if (codeTimer != null) {
-                return;
-            }
-            codeTime = 15000;
-            codeTimer = new Timer();
-            lastCodeTime = System.currentTimeMillis();
-            codeTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    double currentTime = System.currentTimeMillis();
-                    double diff = currentTime - lastCodeTime;
-                    codeTime -= diff;
-                    lastCodeTime = currentTime;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (codeTime <= 1000) {
-                                problemText.setVisibility(VISIBLE);
-                                destroyCodeTimer();
-                            }
-                        }
-                    });
-                }
-            }, 0, 1000);
-        }
-
-        private void destroyCodeTimer() {
-            try {
-                synchronized (timerSync) {
-                    if (codeTimer != null) {
-                        codeTimer.cancel();
-                        codeTimer = null;
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        private void createTimer() {
-            if (timeTimer != null) {
-                return;
-            }
-            timeTimer = new Timer();
-            timeTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    double currentTime = System.currentTimeMillis();
-                    double diff = currentTime - lastCurrentTime;
-                    time -= diff;
-                    lastCurrentTime = currentTime;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (time >= 1000) {
-                                int minutes = time / 1000 / 60;
-                                int seconds = time / 1000 - minutes * 60;
-                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
-                            } else {
-                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
-                                destroyTimer();
-                                createCodeTimer();
-                                TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
-                                req.phone_number = requestPhone;
-                                req.phone_code_hash = phoneHash;
-                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                    @Override
-                                    public void run(TLObject response, final TLRPC.TL_error error) {
-                                        if (error != null && error.text != null) {
-                                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                                @Override
-                                                public void run() {
-                                                    lastError = error.text;
-                                                }
-                                            });
-                                        }
-                                    }
-                                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-                            }
-                        }
-                    });
-                }
-            }, 0, 1000);
-        }
-
-        private void destroyTimer() {
-            try {
-                synchronized (timerSync) {
-                    if (timeTimer != null) {
-                        timeTimer.cancel();
-                        timeTimer = null;
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-
-        @Override
-        public void onNextPressed() {
-            if (nextPressed) {
-                return;
-            }
-            nextPressed = true;
-            waitingForSms = false;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
-            req.phone_number = requestPhone;
-            req.phone_code = codeField.getText().toString();
-            req.phone_code_hash = phoneHash;
-            destroyTimer();
-            needShowProgress();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            nextPressed = false;
-                            if (error == null) {
-                                needHideProgress();
-                                TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
-                                destroyTimer();
-                                destroyCodeTimer();
-                                UserConfig.clearConfig();
-                                MessagesController.getInstance().cleanUp();
-                                UserConfig.setCurrentUser(res.user);
-                                UserConfig.saveConfig(true);
-                                MessagesStorage.getInstance().cleanUp(true);
-                                ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(res.user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                MessagesController.getInstance().putUser(res.user, false);
-                                ContactsController.getInstance().checkAppAccount();
-                                MessagesController.getInstance().getBlockedUsers(true);
-                                needFinishActivity();
-                                ConnectionsManager.getInstance().initPushConnection();
-                                Utilities.stageQueue.postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        ConnectionsManager.getInstance().updateDcSettings(0);
-                                    }
-                                });
-                            } else {
-                                lastError = error.text;
-
-                                if (error.text.contains("PHONE_NUMBER_UNOCCUPIED")) {
-                                    needHideProgress();
-                                    Bundle params = new Bundle();
-                                    params.putString("phoneFormated", requestPhone);
-                                    params.putString("phoneHash", phoneHash);
-                                    params.putString("code", req.phone_code);
-                                    setPage(2, true, params, false);
-                                    destroyTimer();
-                                    destroyCodeTimer();
-                                } else if (error.text.contains("SESSION_PASSWORD_NEEDED")) {
-                                    TLRPC.TL_account_getPassword req2 = new TLRPC.TL_account_getPassword();
-                                    ConnectionsManager.getInstance().performRpc(req2, new RPCRequest.RPCRequestDelegate() {
-                                        @Override
-                                        public void run(final TLObject response, final TLRPC.TL_error error) {
-                                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                                @Override
-                                                public void run() {
-                                                    needHideProgress();
-                                                    if (error == null) {
-                                                        TLRPC.TL_account_password password = (TLRPC.TL_account_password) response;
-                                                        Bundle bundle = new Bundle();
-                                                        bundle.putString("current_salt", Utilities.bytesToHex(password.current_salt));
-                                                        bundle.putString("hint", password.hint);
-                                                        bundle.putString("email_unconfirmed_pattern", password.email_unconfirmed_pattern);
-                                                        bundle.putString("phoneFormated", requestPhone);
-                                                        bundle.putString("phoneHash", phoneHash);
-                                                        bundle.putString("code", req.phone_code);
-                                                        bundle.putInt("has_recovery", password.has_recovery ? 1 : 0);
-                                                        setPage(3, true, bundle, false);
-                                                    } else {
-                                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                                    }
-                                                }
-                                            });
-                                        }
-                                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-                                    destroyTimer();
-                                    destroyCodeTimer();
-                                } else {
-                                    needHideProgress();
-                                    createTimer();
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
-                                    } else {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                    }
-                                }
-                            }
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-        }
-
-        @Override
-        public void onBackPressed() {
-            destroyTimer();
-            destroyCodeTimer();
-            currentParams = null;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            waitingForSms = false;
-        }
-
-        @Override
-        public void onDestroyActivity() {
-            super.onDestroyActivity();
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            destroyTimer();
-            destroyCodeTimer();
-            waitingForSms = false;
-        }
-
-        @Override
-        public void onShow() {
-            super.onShow();
-            if (codeField != null) {
-                codeField.requestFocus();
-                codeField.setSelection(codeField.length());
-            }
-        }
-
-        @Override
-        public void didReceivedNotification(int id, final Object... args) {
-            if (id == NotificationCenter.didReceiveSmsCode) {
-                if (!waitingForSms) {
-                    return;
-                }
-                if (codeField != null) {
-                    codeField.setText("" + args[0]);
-                    onNextPressed();
-                }
-            }
-        }
-
-        @Override
-        public void saveStateParams(Bundle bundle) {
-            String code = codeField.getText().toString();
-            if (code != null && code.length() != 0) {
-                bundle.putString("smsview_code", code);
-            }
-            if (currentParams != null) {
-                bundle.putBundle("smsview_params", currentParams);
-            }
-            if (time != 0) {
-                bundle.putInt("time", time);
-            }
-        }
-
-        @Override
-        public void restoreStateParams(Bundle bundle) {
-            currentParams = bundle.getBundle("smsview_params");
-            if (currentParams != null) {
-                setParams(currentParams);
-            }
-            String code = bundle.getString("smsview_code");
-            if (code != null) {
-                codeField.setText(code);
-            }
-            Integer t = bundle.getInt("time");
-            if (t != 0) {
-                time = t;
-            }
-        }
-    }
-
-    public class LoginActivityPasswordView extends SlideView {
-
-        private EditText codeField;
-        private TextView confirmTextView;
-        private TextView resetAccountButton;
-        private TextView resetAccountText;
-
-        private Bundle currentParams;
-        private boolean nextPressed;
-        private byte[] current_salt;
-        private String hint;
-        private String email_unconfirmed_pattern;
-        private boolean has_recovery;
-        private String requestPhone;
-        private String phoneHash;
-        private String phoneCode;
-
-        public LoginActivityPasswordView(Context context) {
-            super(context);
-
-            setOrientation(VERTICAL);
-
-            confirmTextView = new TextView(context);
-            confirmTextView.setTextColor(0xff757575);
-            confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            confirmTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            confirmTextView.setText(LocaleController.getString("LoginPasswordText", R.string.LoginPasswordText));
-            addView(confirmTextView);
-            LayoutParams layoutParams = (LayoutParams) confirmTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-            confirmTextView.setLayoutParams(layoutParams);
-
-            codeField = new EditText(context);
-            codeField.setTextColor(0xff212121);
-            AndroidUtilities.clearCursorDrawable(codeField);
-            codeField.setHintTextColor(0xff979797);
-            codeField.setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
-            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            codeField.setMaxLines(1);
-            codeField.setPadding(0, 0, 0, 0);
-            codeField.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
-            codeField.setTransformationMethod(PasswordTransformationMethod.getInstance());
-            codeField.setTypeface(Typeface.DEFAULT);
-            codeField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            addView(codeField);
-            layoutParams = (LayoutParams) codeField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            codeField.setLayoutParams(layoutParams);
-            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        onNextPressed();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            TextView cancelButton = new TextView(context);
-            cancelButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-            cancelButton.setTextColor(0xff4d83b3);
-            cancelButton.setText(LocaleController.getString("ForgotPassword", R.string.ForgotPassword));
-            cancelButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            cancelButton.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            cancelButton.setPadding(0, AndroidUtilities.dp(14), 0, 0);
-            addView(cancelButton);
-            layoutParams = (LayoutParams) cancelButton.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            cancelButton.setLayoutParams(layoutParams);
-            cancelButton.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (has_recovery) {
-                        needShowProgress();
-                        TLRPC.TL_auth_requestPasswordRecovery req = new TLRPC.TL_auth_requestPasswordRecovery();
-                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                            @Override
-                            public void run(final TLObject response, final TLRPC.TL_error error) {
-                                AndroidUtilities.runOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        needHideProgress();
-                                        if (error == null) {
-                                            final TLRPC.TL_auth_passwordRecovery res = (TLRPC.TL_auth_passwordRecovery) response;
-                                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                            builder.setMessage(LocaleController.formatString("RestoreEmailSent", R.string.RestoreEmailSent, res.email_pattern));
-                                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                                @Override
-                                                public void onClick(DialogInterface dialogInterface, int i) {
-                                                    Bundle bundle = new Bundle();
-                                                    bundle.putString("email_unconfirmed_pattern", res.email_pattern);
-                                                    setPage(4, true, bundle, false);
-                                                }
-                                            });
-                                            Dialog dialog = showDialog(builder.create());
-                                            if (dialog != null) {
-                                                dialog.setCanceledOnTouchOutside(false);
-                                                dialog.setCancelable(false);
-                                            }
-                                        } else {
-                                            if (error.text.startsWith("FLOOD_WAIT")) {
-                                                int time = Utilities.parseInt(error.text);
-                                                String timeString;
-                                                if (time < 60) {
-                                                    timeString = LocaleController.formatPluralString("Seconds", time);
-                                                } else {
-                                                    timeString = LocaleController.formatPluralString("Minutes", time / 60);
-                                                }
-                                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
-                                            } else {
-                                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                            }
-                                        }
-                                    }
-                                });
-                            }
-                        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-                    } else {
-                        resetAccountText.setVisibility(VISIBLE);
-                        resetAccountButton.setVisibility(VISIBLE);
-                        AndroidUtilities.hideKeyboard(codeField);
-                        needShowAlert(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle), LocaleController.getString("RestorePasswordNoEmailText", R.string.RestorePasswordNoEmailText));
-                    }
-                }
-            });
-
-            resetAccountButton = new TextView(context);
-            resetAccountButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-            resetAccountButton.setTextColor(0xffff6666);
-            resetAccountButton.setVisibility(GONE);
-            resetAccountButton.setText(LocaleController.getString("ResetMyAccount", R.string.ResetMyAccount));
-            resetAccountButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            resetAccountButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            resetAccountButton.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            resetAccountButton.setPadding(0, AndroidUtilities.dp(14), 0, 0);
-            addView(resetAccountButton);
-            layoutParams = (LayoutParams) resetAccountButton.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            layoutParams.topMargin = AndroidUtilities.dp(34);
-            resetAccountButton.setLayoutParams(layoutParams);
-            resetAccountButton.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("ResetMyAccountWarningText", R.string.ResetMyAccountWarningText));
-                    builder.setTitle(LocaleController.getString("ResetMyAccountWarning", R.string.ResetMyAccountWarning));
-                    builder.setPositiveButton(LocaleController.getString("ResetMyAccountWarningReset", R.string.ResetMyAccountWarningReset), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            needShowProgress();
-                            TLRPC.TL_account_deleteAccount req = new TLRPC.TL_account_deleteAccount();
-                            req.reason = "Forgot password";
-                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                @Override
-                                public void run(TLObject response, final TLRPC.TL_error error) {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            needHideProgress();
-                                            if (error == null) {
-                                                Bundle params = new Bundle();
-                                                params.putString("phoneFormated", requestPhone);
-                                                params.putString("phoneHash", phoneHash);
-                                                params.putString("code", phoneCode);
-                                                setPage(2, true, params, false);
-                                            } else {
-                                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                            }
-                                        }
-                                    });
-                                }
-                            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassFailOnServerErrors);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-            });
-
-            resetAccountText = new TextView(context);
-            resetAccountText.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-            resetAccountText.setVisibility(GONE);
-            resetAccountText.setTextColor(0xff757575);
-            resetAccountText.setText(LocaleController.getString("ResetMyAccountText", R.string.ResetMyAccountText));
-            resetAccountText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            resetAccountText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(resetAccountText);
-            layoutParams = (LayoutParams) resetAccountText.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            layoutParams.bottomMargin = AndroidUtilities.dp(14);
-            layoutParams.topMargin = AndroidUtilities.dp(7);
-            resetAccountText.setLayoutParams(layoutParams);
-        }
-
-        @Override
-        public String getHeaderName() {
-            return LocaleController.getString("LoginPassword", R.string.LoginPassword);
-        }
-
-        @Override
-        public void setParams(Bundle params) {
-            if (params == null) {
-                return;
-            }
-            if (params.isEmpty()) {
-                resetAccountButton.setVisibility(VISIBLE);
-                resetAccountText.setVisibility(VISIBLE);
-                AndroidUtilities.hideKeyboard(codeField);
-                return;
-            }
-            resetAccountButton.setVisibility(GONE);
-            resetAccountText.setVisibility(GONE);
-            codeField.setText("");
-            currentParams = params;
-            current_salt = Utilities.hexToBytes(currentParams.getString("current_salt"));
-            hint = currentParams.getString("hint");
-            has_recovery = currentParams.getInt("has_recovery") == 1;
-            email_unconfirmed_pattern = currentParams.getString("email_unconfirmed_pattern");
-            requestPhone = params.getString("phoneFormated");
-            phoneHash = params.getString("phoneHash");
-            phoneCode = params.getString("code");
-
-            AndroidUtilities.showKeyboard(codeField);
-            codeField.requestFocus();
-
-
-            if (hint != null && hint.length() > 0) {
-                codeField.setHint(hint);
-            } else {
-                codeField.setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
-            }
-        }
-
-        private void onPasscodeError(boolean clear) {
-            if (getParentActivity() == null) {
-                return;
-            }
-            Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
-            if (v != null) {
-                v.vibrate(200);
-            }
-            if (clear) {
-                codeField.setText("");
-            }
-            AndroidUtilities.shakeTextView(confirmTextView, 2, 0);
-        }
-
-        @Override
-        public void onNextPressed() {
-            if (nextPressed) {
-                return;
-            }
-
-            String oldPassword = codeField.getText().toString();
-            if (oldPassword.length() == 0) {
-                onPasscodeError(false);
-                return;
-            }
-            nextPressed = true;
-            byte[] oldPasswordBytes = null;
-            try {
-                oldPasswordBytes = oldPassword.getBytes("UTF-8");
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            needShowProgress();
-            byte[] hash = new byte[current_salt.length * 2 + oldPasswordBytes.length];
-            System.arraycopy(current_salt, 0, hash, 0, current_salt.length);
-            System.arraycopy(oldPasswordBytes, 0, hash, current_salt.length, oldPasswordBytes.length);
-            System.arraycopy(current_salt, 0, hash, hash.length - current_salt.length, current_salt.length);
-
-            final TLRPC.TL_auth_checkPassword req = new TLRPC.TL_auth_checkPassword();
-            req.password_hash = Utilities.computeSHA256(hash, 0, hash.length);
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            needHideProgress();
-                            nextPressed = false;
-                            if (error == null) {
-                                TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
-                                UserConfig.clearConfig();
-                                MessagesController.getInstance().cleanUp();
-                                UserConfig.setCurrentUser(res.user);
-                                UserConfig.saveConfig(true);
-                                MessagesStorage.getInstance().cleanUp(true);
-                                ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(res.user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                MessagesController.getInstance().putUser(res.user, false);
-                                ContactsController.getInstance().checkAppAccount();
-                                MessagesController.getInstance().getBlockedUsers(true);
-                                needFinishActivity();
-                                ConnectionsManager.getInstance().initPushConnection();
-                                Utilities.stageQueue.postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        ConnectionsManager.getInstance().updateDcSettings(0);
-                                    }
-                                });
-                            } else {
-                                if (error.text.equals("PASSWORD_HASH_INVALID")) {
-                                    onPasscodeError(true);
-                                } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                    int time = Utilities.parseInt(error.text);
-                                    String timeString;
-                                    if (time < 60) {
-                                        timeString = LocaleController.formatPluralString("Seconds", time);
-                                    } else {
-                                        timeString = LocaleController.formatPluralString("Minutes", time / 60);
-                                    }
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
-                                } else {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                }
-                            }
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-        }
-
-        @Override
-        public boolean needBackButton() {
-            return true;
-        }
-
-        @Override
-        public void onBackPressed() {
-            currentParams = null;
-        }
-
-        @Override
-        public void onShow() {
-            super.onShow();
-            if (codeField != null) {
-                codeField.requestFocus();
-                codeField.setSelection(codeField.length());
-            }
-        }
-
-        @Override
-        public void saveStateParams(Bundle bundle) {
-            String code = codeField.getText().toString();
-            if (code != null && code.length() != 0) {
-                bundle.putString("passview_code", code);
-            }
-            if (currentParams != null) {
-                bundle.putBundle("passview_params", currentParams);
-            }
-        }
-
-        @Override
-        public void restoreStateParams(Bundle bundle) {
-            currentParams = bundle.getBundle("passview_params");
-            if (currentParams != null) {
-                setParams(currentParams);
-            }
-            String code = bundle.getString("passview_code");
-            if (code != null) {
-                codeField.setText(code);
-            }
-        }
-    }
-
-    public class LoginActivityRecoverView extends SlideView {
-
-        private EditText codeField;
-        private TextView confirmTextView;
-        private TextView cancelButton;
-
-        private Bundle currentParams;
-        private boolean nextPressed;
-        private String email_unconfirmed_pattern;
-
-        public LoginActivityRecoverView(Context context) {
-            super(context);
-
-            setOrientation(VERTICAL);
-
-            confirmTextView = new TextView(context);
-            confirmTextView.setTextColor(0xff757575);
-            confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            confirmTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
-            confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            confirmTextView.setText(LocaleController.getString("RestoreEmailSentInfo", R.string.RestoreEmailSentInfo));
-            addView(confirmTextView);
-            LayoutParams layoutParams = (LayoutParams) confirmTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            confirmTextView.setLayoutParams(layoutParams);
-
-            codeField = new EditText(context);
-            codeField.setTextColor(0xff212121);
-            AndroidUtilities.clearCursorDrawable(codeField);
-            codeField.setHintTextColor(0xff979797);
-            codeField.setHint(LocaleController.getString("PasswordCode", R.string.PasswordCode));
-            codeField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            codeField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            codeField.setMaxLines(1);
-            codeField.setPadding(0, 0, 0, 0);
-            codeField.setInputType(InputType.TYPE_CLASS_PHONE);
-            codeField.setTransformationMethod(PasswordTransformationMethod.getInstance());
-            codeField.setTypeface(Typeface.DEFAULT);
-            codeField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            addView(codeField);
-            layoutParams = (LayoutParams) codeField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            codeField.setLayoutParams(layoutParams);
-            codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        onNextPressed();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            cancelButton = new TextView(context);
-            cancelButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM);
-            cancelButton.setTextColor(0xff4d83b3);
-            cancelButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            cancelButton.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            cancelButton.setPadding(0, AndroidUtilities.dp(14), 0, 0);
-            addView(cancelButton);
-            layoutParams = (LayoutParams) cancelButton.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.BOTTOM | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            layoutParams.bottomMargin = AndroidUtilities.dp(14);
-            cancelButton.setLayoutParams(layoutParams);
-            cancelButton.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("RestoreEmailTroubleText", R.string.RestoreEmailTroubleText));
-                    builder.setTitle(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            setPage(3, true, new Bundle(), true);
-                        }
-                    });
-                    Dialog dialog = showDialog(builder.create());
-                    if (dialog != null) {
-                        dialog.setCanceledOnTouchOutside(false);
-                        dialog.setCancelable(false);
-                    }
-                }
-            });
-        }
-
-        @Override
-        public boolean needBackButton() {
-            return true;
-        }
-
-        @Override
-        public String getHeaderName() {
-            return LocaleController.getString("LoginPassword", R.string.LoginPassword);
-        }
-
-        @Override
-        public void setParams(Bundle params) {
-            if (params == null) {
-                return;
-            }
-            codeField.setText("");
-            currentParams = params;
-            email_unconfirmed_pattern = currentParams.getString("email_unconfirmed_pattern");
-            cancelButton.setText(LocaleController.formatString("RestoreEmailTrouble", R.string.RestoreEmailTrouble, email_unconfirmed_pattern));
-
-            AndroidUtilities.showKeyboard(codeField);
-            codeField.requestFocus();
-        }
-
-        private void onPasscodeError(boolean clear) {
-            if (getParentActivity() == null) {
-                return;
-            }
-            Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
-            if (v != null) {
-                v.vibrate(200);
-            }
-            if (clear) {
-                codeField.setText("");
-            }
-            AndroidUtilities.shakeTextView(confirmTextView, 2, 0);
-        }
-
-        @Override
-        public void onNextPressed() {
-            if (nextPressed) {
-                return;
-            }
-
-            String oldPassword = codeField.getText().toString();
-            if (oldPassword.length() == 0) {
-                onPasscodeError(false);
-                return;
-            }
-            nextPressed = true;
-
-            String code = codeField.getText().toString();
-            if (code.length() == 0) {
-                onPasscodeError(false);
-                return;
-            }
-            needShowProgress();
-            TLRPC.TL_auth_recoverPassword req = new TLRPC.TL_auth_recoverPassword();
-            req.code = code;
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            needHideProgress();
-                            nextPressed = false;
-                            if (error == null) {
-                                TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
-                                UserConfig.clearConfig();
-                                MessagesController.getInstance().cleanUp();
-                                UserConfig.setCurrentUser(res.user);
-                                UserConfig.saveConfig(true);
-                                MessagesStorage.getInstance().cleanUp(true);
-                                ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(res.user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                MessagesController.getInstance().putUser(res.user, false);
-                                ContactsController.getInstance().checkAppAccount();
-                                MessagesController.getInstance().getBlockedUsers(true);
-                                needFinishActivity();
-                                ConnectionsManager.getInstance().initPushConnection();
-                                Utilities.stageQueue.postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        ConnectionsManager.getInstance().updateDcSettings(0);
-                                    }
-                                });
-                            } else {
-                                if (error.text.startsWith("CODE_INVALID")) {
-                                    onPasscodeError(true);
-                                } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                    int time = Utilities.parseInt(error.text);
-                                    String timeString;
-                                    if (time < 60) {
-                                        timeString = LocaleController.formatPluralString("Seconds", time);
-                                    } else {
-                                        timeString = LocaleController.formatPluralString("Minutes", time / 60);
-                                    }
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
-                                } else {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                }
-                            }
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
-        }
-
-        @Override
-        public void onBackPressed() {
-            currentParams = null;
-        }
-
-        @Override
-        public void onShow() {
-            super.onShow();
-            if (codeField != null) {
-                codeField.requestFocus();
-                codeField.setSelection(codeField.length());
-            }
-        }
-
-        @Override
-        public void saveStateParams(Bundle bundle) {
-            String code = codeField.getText().toString();
-            if (code != null && code.length() != 0) {
-                bundle.putString("recoveryview_code", code);
-            }
-            if (currentParams != null) {
-                bundle.putBundle("recoveryview_params", currentParams);
-            }
-        }
-
-        @Override
-        public void restoreStateParams(Bundle bundle) {
-            currentParams = bundle.getBundle("recoveryview_params");
-            if (currentParams != null) {
-                setParams(currentParams);
-            }
-            String code = bundle.getString("recoveryview_code");
-            if (code != null) {
-                codeField.setText(code);
-            }
-        }
-    }
-
-    public class LoginActivityRegisterView extends SlideView {
-
-        private EditText firstNameField;
-        private EditText lastNameField;
-        private String requestPhone;
-        private String phoneHash;
-        private String phoneCode;
-        private Bundle currentParams;
-        private boolean nextPressed = false;
-
-        public LoginActivityRegisterView(Context context) {
-            super(context);
-
-            setOrientation(VERTICAL);
-
-            TextView textView = new TextView(context);
-            textView.setText(LocaleController.getString("RegisterText", R.string.RegisterText));
-            textView.setTextColor(0xff757575);
-            textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            addView(textView);
-            LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.topMargin = AndroidUtilities.dp(8);
-            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-            textView.setLayoutParams(layoutParams);
-
-            firstNameField = new EditText(context);
-            firstNameField.setHintTextColor(0xff979797);
-            firstNameField.setTextColor(0xff212121);
-            AndroidUtilities.clearCursorDrawable(firstNameField);
-            firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
-            firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            firstNameField.setMaxLines(1);
-            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_WORDS);
-            addView(firstNameField);
-            layoutParams = (LayoutParams) firstNameField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.topMargin = AndroidUtilities.dp(26);
-            firstNameField.setLayoutParams(layoutParams);
-            firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-                @Override
-                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                    if (i == EditorInfo.IME_ACTION_NEXT) {
-                        lastNameField.requestFocus();
-                        return true;
-                    }
-                    return false;
-                }
-            });
-
-            lastNameField = new EditText(context);
-            lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
-            lastNameField.setHintTextColor(0xff979797);
-            lastNameField.setTextColor(0xff212121);
-            AndroidUtilities.clearCursorDrawable(lastNameField);
-            lastNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            lastNameField.setMaxLines(1);
-            lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_WORDS);
-            addView(lastNameField);
-            layoutParams = (LayoutParams) lastNameField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.topMargin = AndroidUtilities.dp(10);
-            lastNameField.setLayoutParams(layoutParams);
-
-            LinearLayout linearLayout = new LinearLayout(context);
-            linearLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER_VERTICAL);
-            addView(linearLayout);
-            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            linearLayout.setLayoutParams(layoutParams);
-
-            TextView wrongNumber = new TextView(context);
-            wrongNumber.setText(LocaleController.getString("CancelRegistration", R.string.CancelRegistration));
-            wrongNumber.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_HORIZONTAL);
-            wrongNumber.setTextColor(0xff4d83b3);
-            wrongNumber.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            wrongNumber.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            wrongNumber.setPadding(0, AndroidUtilities.dp(24), 0, 0);
-            linearLayout.addView(wrongNumber);
-            layoutParams = (LayoutParams) wrongNumber.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.BOTTOM | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            layoutParams.bottomMargin = AndroidUtilities.dp(10);
-            wrongNumber.setLayoutParams(layoutParams);
-            wrongNumber.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setMessage(LocaleController.getString("AreYouSureRegistration", R.string.AreYouSureRegistration));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            onBackPressed();
-                            setPage(0, true, null, true);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-            });
-        }
-
-        @Override
-        public void onBackPressed() {
-            currentParams = null;
-        }
-
-        @Override
-        public String getHeaderName() {
-            return LocaleController.getString("YourName", R.string.YourName);
-        }
-
-        @Override
-        public void onShow() {
-            super.onShow();
-            if (firstNameField != null) {
-                firstNameField.requestFocus();
-                firstNameField.setSelection(firstNameField.length());
-            }
-        }
-
-        @Override
-        public void setParams(Bundle params) {
-            if (params == null) {
-                return;
-            }
-            firstNameField.setText("");
-            lastNameField.setText("");
-            requestPhone = params.getString("phoneFormated");
-            phoneHash = params.getString("phoneHash");
-            phoneCode = params.getString("code");
-            currentParams = params;
-        }
-
-        @Override
-        public void onNextPressed() {
-            if (nextPressed) {
-                return;
-            }
-            nextPressed = true;
-            TLRPC.TL_auth_signUp req = new TLRPC.TL_auth_signUp();
-            req.phone_code = phoneCode;
-            req.phone_code_hash = phoneHash;
-            req.phone_number = requestPhone;
-            req.first_name = firstNameField.getText().toString();
-            req.last_name = lastNameField.getText().toString();
-            needShowProgress();
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            nextPressed = false;
-                            needHideProgress();
-                            if (error == null) {
-                                final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
-                                TLRPC.TL_userSelf user = (TLRPC.TL_userSelf) res.user;
-                                UserConfig.clearConfig();
-                                MessagesController.getInstance().cleanUp();
-                                UserConfig.setCurrentUser(user);
-                                UserConfig.saveConfig(true);
-                                MessagesStorage.getInstance().cleanUp(true);
-                                ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                //MessagesController.getInstance().uploadAndApplyUserAvatar(avatarPhotoBig);
-                                MessagesController.getInstance().putUser(res.user, false);
-                                ContactsController.getInstance().checkAppAccount();
-                                MessagesController.getInstance().getBlockedUsers(true);
-                                needFinishActivity();
-                                ConnectionsManager.getInstance().initPushConnection();
-                                Utilities.stageQueue.postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        ConnectionsManager.getInstance().updateDcSettings(0);
-                                    }
-                                });
-                            } else {
-                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                } else if (error.text.contains("FIRSTNAME_INVALID")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
-                                } else if (error.text.contains("LASTNAME_INVALID")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
-                                } else {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
-                                }
-                            }
-                        }
-                    });
-                }
-            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassFailOnServerErrors);
-        }
-
-        @Override
-        public void saveStateParams(Bundle bundle) {
-            String first = firstNameField.getText().toString();
-            if (first != null && first.length() != 0) {
-                bundle.putString("registerview_first", first);
-            }
-            String last = lastNameField.getText().toString();
-            if (last != null && last.length() != 0) {
-                bundle.putString("registerview_last", last);
-            }
-            if (currentParams != null) {
-                bundle.putBundle("registerview_params", currentParams);
-            }
-        }
-
-        @Override
-        public void restoreStateParams(Bundle bundle) {
-            currentParams = bundle.getBundle("registerview_params");
-            if (currentParams != null) {
-                setParams(currentParams);
-            }
-            String first = bundle.getString("registerview_first");
-            if (first != null) {
-                firstNameField.setText(first);
-            }
-            String last = bundle.getString("registerview_last");
-            if (last != null) {
-                lastNameField.setText(last);
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
deleted file mode 100644
index 985678ed5..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ /dev/null
@@ -1,866 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui;
-
-import android.animation.ObjectAnimator;
-import android.animation.StateListAnimator;
-import android.annotation.SuppressLint;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.res.Configuration;
-import android.graphics.Outline;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewOutlineProvider;
-import android.view.ViewTreeObserver;
-import android.view.animation.AccelerateDecelerateInterpolator;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.support.widget.LinearLayoutManager;
-import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
-import org.telegram.android.ContactsController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.BottomSheet;
-import org.telegram.ui.Adapters.DialogsAdapter;
-import org.telegram.ui.Adapters.DialogsSearchAdapter;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.ActionBar.MenuDrawable;
-import org.telegram.ui.Components.EmptyTextProgressView;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.RecyclerListView;
-import org.telegram.ui.Components.ResourceLoader;
-
-import java.util.ArrayList;
-
-public class MessagesActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    
-    private RecyclerListView listView;
-    private LinearLayoutManager layoutManager;
-    private DialogsAdapter dialogsAdapter;
-    private DialogsSearchAdapter dialogsSearchAdapter;
-    private EmptyTextProgressView searchEmptyView;
-    private ProgressBar progressView;
-    private LinearLayout emptyView;
-    private ActionBarMenuItem passcodeItem;
-    private ImageView floatingButton;
-
-    private int prevPosition;
-    private int prevTop;
-    private boolean scrollUpdated;
-    private boolean floatingHidden;
-    private final AccelerateDecelerateInterpolator floatingInterpolator = new AccelerateDecelerateInterpolator();
-
-    private String selectAlertString;
-    private String selectAlertStringGroup;
-    private boolean serverOnly;
-
-    private static boolean dialogsLoaded;
-    private boolean searching;
-    private boolean searchWas;
-    private boolean onlySelect;
-    private long selectedDialog;
-    private String searchString;
-    private long openedDialogId;
-
-    private MessagesActivityDelegate delegate;
-
-    public interface MessagesActivityDelegate {
-        void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
-    }
-
-    public MessagesActivity(Bundle args) {
-        super(args);
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        super.onFragmentCreate();
-
-        if (getArguments() != null) {
-            onlySelect = arguments.getBoolean("onlySelect", false);
-            serverOnly = arguments.getBoolean("serverOnly", false);
-            selectAlertString = arguments.getString("selectAlertString");
-            selectAlertStringGroup = arguments.getString("selectAlertStringGroup");
-        }
-
-        if (searchString == null) {
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.openedChatChanged);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByAck);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetPasscode);
-        }
-
-
-        if (!dialogsLoaded) {
-            MessagesController.getInstance().loadDialogs(0, 0, 100, true);
-            ContactsController.getInstance().checkInviteText();
-            dialogsLoaded = true;
-        }
-        return true;
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        if (searchString == null) {
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.openedChatChanged);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByAck);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetPasscode);
-        }
-        delegate = null;
-    }
-
-    @Override
-    public View createView(final Context context, LayoutInflater inflater) {
-        searching = false;
-        searchWas = false;
-
-        ResourceLoader.loadRecources(context);
-
-        ActionBarMenu menu = actionBar.createMenu();
-        if (!onlySelect && searchString == null) {
-            passcodeItem = menu.addItem(1, R.drawable.lock_close);
-            updatePasscodeButton();
-        }
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
-            @Override
-            public void onSearchExpand() {
-                searching = true;
-                if (listView != null) {
-                    if (searchString != null) {
-                        listView.setEmptyView(searchEmptyView);
-                        progressView.setVisibility(View.INVISIBLE);
-                        emptyView.setVisibility(View.INVISIBLE);
-                    }
-                    if (!onlySelect) {
-                        floatingButton.setVisibility(View.GONE);
-                    }
-                }
-                updatePasscodeButton();
-            }
-
-            @Override
-            public boolean onSearchCollapse() {
-                if (searchString != null) {
-                    finishFragment();
-                    return false;
-                }
-                searching = false;
-                searchWas = false;
-                if (listView != null) {
-                    searchEmptyView.setVisibility(View.INVISIBLE);
-                    if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
-                        emptyView.setVisibility(View.INVISIBLE);
-                        listView.setEmptyView(progressView);
-                    } else {
-                        progressView.setVisibility(View.INVISIBLE);
-                        listView.setEmptyView(emptyView);
-                    }
-                    if (!onlySelect) {
-                        floatingButton.setVisibility(View.VISIBLE);
-                        floatingHidden = true;
-                        ViewProxy.setTranslationY(floatingButton, AndroidUtilities.dp(100));
-                        hideFloatingButton(false);
-                    }
-                    if (listView.getAdapter() != dialogsAdapter) {
-                        listView.setAdapter(dialogsAdapter);
-                        dialogsAdapter.notifyDataSetChanged();
-                    }
-                }
-                if (dialogsSearchAdapter != null) {
-                    dialogsSearchAdapter.searchDialogs(null, false);
-                }
-                updatePasscodeButton();
-                return true;
-            }
-
-            @Override
-            public void onTextChanged(EditText editText) {
-                String text = editText.getText().toString();
-                if (text.length() != 0) {
-                    searchWas = true;
-                    if (dialogsSearchAdapter != null) {
-                        listView.setAdapter(dialogsSearchAdapter);
-                        dialogsSearchAdapter.notifyDataSetChanged();
-                    }
-                    if (searchEmptyView != null && listView.getEmptyView() != searchEmptyView) {
-                        emptyView.setVisibility(View.INVISIBLE);
-                        progressView.setVisibility(View.INVISIBLE);
-                        searchEmptyView.showTextView();
-                        listView.setEmptyView(searchEmptyView);
-                    }
-                }
-                if (dialogsSearchAdapter != null) {
-                    dialogsSearchAdapter.searchDialogs(text, serverOnly);
-                }
-            }
-        });
-        item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
-        if (onlySelect) {
-            actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-            actionBar.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
-        } else {
-            if (searchString != null) {
-                actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-            } else {
-                actionBar.setBackButtonDrawable(new MenuDrawable());
-            }
-            actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        }
-        actionBar.setAllowOverlayTitle(true);
-
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    if (onlySelect) {
-                        finishFragment();
-                    } else if (parentLayout != null) {
-                        parentLayout.getDrawerLayoutContainer().openDrawer(false);
-                    }
-                } else if (id == 1) {
-                    UserConfig.appLocked = !UserConfig.appLocked;
-                    UserConfig.saveConfig(false);
-                    updatePasscodeButton();
-                }
-            }
-        });
-
-
-        FrameLayout frameLayout = new FrameLayout(context);
-        fragmentView = frameLayout;
-        
-        listView = new RecyclerListView(context);
-        listView.setVerticalScrollBarEnabled(true);
-        listView.setItemAnimator(null);
-        listView.setInstantClick(true);
-        listView.setLayoutAnimation(null);
-        layoutManager = new LinearLayoutManager(context) {
-            @Override
-            public boolean supportsPredictiveItemAnimations() {
-                return false;
-            }
-        };
-        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
-        listView.setLayoutManager(layoutManager);
-        if (Build.VERSION.SDK_INT >= 11) {
-            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
-        }
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-        listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
-            @Override
-            public void onItemClick(View view, int position) {
-                if (listView == null || listView.getAdapter() == null) {
-                    return;
-                }
-                long dialog_id = 0;
-                int message_id = 0;
-                RecyclerView.Adapter adapter = listView.getAdapter();
-                if (adapter == dialogsAdapter) {
-                    TLRPC.TL_dialog dialog = dialogsAdapter.getItem(position);
-                    if (dialog == null) {
-                        return;
-                    }
-                    dialog_id = dialog.id;
-                } else if (adapter == dialogsSearchAdapter) {
-                    Object obj = dialogsSearchAdapter.getItem(position);
-                    if (obj instanceof TLRPC.User) {
-                        dialog_id = ((TLRPC.User) obj).id;
-                        if (dialogsSearchAdapter.isGlobalSearch(position)) {
-                            ArrayList<TLRPC.User> users = new ArrayList<>();
-                            users.add((TLRPC.User) obj);
-                            MessagesController.getInstance().putUsers(users, false);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                        }
-                    } else if (obj instanceof TLRPC.Chat) {
-                        if (((TLRPC.Chat) obj).id > 0) {
-                            dialog_id = -((TLRPC.Chat) obj).id;
-                        } else {
-                            dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
-                        }
-                    } else if (obj instanceof TLRPC.EncryptedChat) {
-                        dialog_id = ((long) ((TLRPC.EncryptedChat) obj).id) << 32;
-                    } else if (obj instanceof MessageObject) {
-                        MessageObject messageObject = (MessageObject) obj;
-                        dialog_id = messageObject.getDialogId();
-                        message_id = messageObject.getId();
-                        dialogsSearchAdapter.addHashtagsFromMessage(dialogsSearchAdapter.getLastSearchString());
-                    } else if (obj instanceof String) {
-                        actionBar.openSearchField((String) obj);
-                    }
-                }
-
-                if (dialog_id == 0) {
-                    return;
-                }
-
-                if (onlySelect) {
-                    didSelectResult(dialog_id, true, false);
-                } else {
-                    Bundle args = new Bundle();
-                    int lower_part = (int) dialog_id;
-                    int high_id = (int) (dialog_id >> 32);
-                    if (lower_part != 0) {
-                        if (high_id == 1) {
-                            args.putInt("chat_id", lower_part);
-                        } else {
-                            if (lower_part > 0) {
-                                args.putInt("user_id", lower_part);
-                            } else if (lower_part < 0) {
-                                args.putInt("chat_id", -lower_part);
-                            }
-                        }
-                    } else {
-                        args.putInt("enc_id", high_id);
-                    }
-                    if (message_id != 0) {
-                        args.putInt("message_id", message_id);
-                    } else {
-                        if (actionBar != null) {
-                            actionBar.closeSearchField();
-                        }
-                    }
-                    if (AndroidUtilities.isTablet()) {
-                        if (openedDialogId == dialog_id) {
-                            return;
-                        }
-                        if (dialogsAdapter != null) {
-                            dialogsAdapter.setOpenedDialogId(openedDialogId = dialog_id);
-                            updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
-                        }
-                    }
-                }
-            }
-        });
-        listView.setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() {
-            @Override
-            public void onItemClick(View view, int position) {
-                if (onlySelect || searching && searchWas || getParentActivity() == null) {
-                    if (searchWas && searching) {
-                        RecyclerView.Adapter adapter = listView.getAdapter();
-                        if (adapter == dialogsSearchAdapter) {
-                            Object item = dialogsSearchAdapter.getItem(position);
-                            if (item instanceof String) {
-                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
-                                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialogInterface, int i) {
-                                        dialogsSearchAdapter.clearRecentHashtags();
-                                    }
-                                });
-                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                                showDialog(builder.create());
-                                return;
-                            }
-                        }
-                    }
-                    return;
-                }
-                TLRPC.TL_dialog dialog;
-                if (serverOnly) {
-                    if (position < 0 || position >= MessagesController.getInstance().dialogsServerOnly.size()) {
-                        return;
-                    }
-                    dialog = MessagesController.getInstance().dialogsServerOnly.get(position);
-                } else {
-                    if (position < 0 || position >= MessagesController.getInstance().dialogs.size()) {
-                        return;
-                    }
-                    dialog = MessagesController.getInstance().dialogs.get(position);
-                }
-                selectedDialog = dialog.id;
-
-                /*AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-
-
-                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                showDialog(builder.create());*/
-
-                BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
-                int lower_id = (int) selectedDialog;
-                int high_id = (int) (selectedDialog >> 32);
-
-                final boolean isChat = lower_id < 0 && high_id != 1;
-                builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory),
-                        isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : LocaleController.getString("Delete", R.string.Delete)}, new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, final int which) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        if (which == 0) {
-                            builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
-                        } else {
-                            if (isChat) {
-                                builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
-                            } else {
-                                builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
-                            }
-                        }
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                if (which != 0) {
-                                    if (isChat) {
-                                        TLRPC.Chat currentChat = MessagesController.getInstance().getChat((int) -selectedDialog);
-                                        if (currentChat != null && currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
-                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
-                                        } else {
-                                            MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
-                                        }
-                                    } else {
-                                        MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
-                                    }
-                                    if (AndroidUtilities.isTablet()) {
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
-                                    }
-                                } else {
-                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
-                    }
-                });
-                showDialog(builder.create());
-            }
-        });
-
-        searchEmptyView = new EmptyTextProgressView(context);
-        searchEmptyView.setVisibility(View.INVISIBLE);
-        searchEmptyView.setShowAtCenter(true);
-        searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-        frameLayout.addView(searchEmptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-
-        emptyView = new LinearLayout(context);
-        emptyView.setOrientation(LinearLayout.VERTICAL);
-        emptyView.setVisibility(View.INVISIBLE);
-        emptyView.setGravity(Gravity.CENTER);
-        frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-        emptyView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        TextView textView = new TextView(context);
-        textView.setText(LocaleController.getString("NoChats", R.string.NoChats));
-        textView.setTextColor(0xff959595);
-        textView.setGravity(Gravity.CENTER);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-        emptyView.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
-
-        textView = new TextView(context);
-        String help = LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp);
-        if (AndroidUtilities.isTablet() && !AndroidUtilities.isSmallTablet()) {
-            help = help.replace("\n", " ");
-        }
-        textView.setText(help);
-        textView.setTextColor(0xff959595);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-        textView.setGravity(Gravity.CENTER);
-        textView.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(6), AndroidUtilities.dp(8), 0);
-        textView.setLineSpacing(AndroidUtilities.dp(2), 1);
-        emptyView.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
-
-        progressView = new ProgressBar(context);
-        progressView.setVisibility(View.INVISIBLE);
-        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
-
-        floatingButton = new ImageView(context);
-        floatingButton.setVisibility(onlySelect ? View.GONE : View.VISIBLE);
-        floatingButton.setScaleType(ImageView.ScaleType.CENTER);
-        floatingButton.setBackgroundResource(R.drawable.floating_states);
-        floatingButton.setImageResource(R.drawable.floating_pencil);
-        if (Build.VERSION.SDK_INT >= 21) {
-            StateListAnimator animator = new StateListAnimator();
-            animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(floatingButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
-            animator.addState(new int[]{}, ObjectAnimator.ofFloat(floatingButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
-            floatingButton.setStateListAnimator(animator);
-            floatingButton.setOutlineProvider(new ViewOutlineProvider() {
-                @SuppressLint("NewApi")
-                @Override
-                public void getOutline(View view, Outline outline) {
-                    outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-                }
-            });
-        }
-        frameLayout.addView(floatingButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 14 : 0, 0, LocaleController.isRTL ? 0 : 14, 14));
-
-
-        listView.setOnScrollListener(new RecyclerView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
-                if (newState == RecyclerView.SCROLL_STATE_DRAGGING && searching && searchWas) {
-                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
-                }
-            }
-
-            @Override
-            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
-                int firstVisibleItem = layoutManager.findFirstVisibleItemPosition();
-                int visibleItemCount = Math.abs(layoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
-                int totalItemCount = recyclerView.getAdapter().getItemCount();
-
-                if (searching && searchWas) {
-                    if (visibleItemCount > 0 && layoutManager.findLastVisibleItemPosition() == totalItemCount - 1 && !dialogsSearchAdapter.isMessagesSearchEndReached()) {
-                        dialogsSearchAdapter.loadMoreSearchMessages();
-                    }
-                    return;
-                }
-                if (visibleItemCount > 0) {
-                    if (layoutManager.findLastVisibleItemPosition() == MessagesController.getInstance().dialogs.size() && !serverOnly || layoutManager.findLastVisibleItemPosition() == MessagesController.getInstance().dialogsServerOnly.size() && serverOnly) {
-                        MessagesController.getInstance().loadDialogs(MessagesController.getInstance().dialogs.size(), MessagesController.getInstance().dialogsServerOnly.size(), 100, true);
-                    }
-                }
-
-                if (floatingButton.getVisibility() != View.GONE) {
-                    final View topChild = recyclerView.getChildAt(0);
-                    int firstViewTop = 0;
-                    if (topChild != null) {
-                        firstViewTop = topChild.getTop();
-                    }
-                    boolean goingDown;
-                    boolean changed = true;
-                    if (prevPosition == firstVisibleItem) {
-                        final int topDelta = prevTop - firstViewTop;
-                        goingDown = firstViewTop < prevTop;
-                        changed = Math.abs(topDelta) > 1;
-                    } else {
-                        goingDown = firstVisibleItem > prevPosition;
-                    }
-                    if (changed && scrollUpdated) {
-                        hideFloatingButton(goingDown);
-                    }
-                    prevPosition = firstVisibleItem;
-                    prevTop = firstViewTop;
-                    scrollUpdated = true;
-                }
-            }
-        });
-
-        if (searchString == null) {
-            dialogsAdapter = new DialogsAdapter(context, serverOnly);
-            if (AndroidUtilities.isTablet() && openedDialogId != 0) {
-                dialogsAdapter.setOpenedDialogId(openedDialogId);
-            }
-            listView.setAdapter(dialogsAdapter);
-        }
-        int type = 0;
-        if (searchString != null) {
-            type = 2;
-        } else if (!onlySelect) {
-            type = 1;
-        }
-        dialogsSearchAdapter = new DialogsSearchAdapter(context, type);
-        dialogsSearchAdapter.setDelegate(new DialogsSearchAdapter.MessagesActivitySearchAdapterDelegate() {
-            @Override
-            public void searchStateChanged(boolean search) {
-                if (searching && searchWas && searchEmptyView != null) {
-                    if (search) {
-                        searchEmptyView.showProgress();
-                    } else {
-                        searchEmptyView.showTextView();
-                    }
-                }
-            }
-        });
-
-        if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
-            searchEmptyView.setVisibility(View.INVISIBLE);
-            emptyView.setVisibility(View.INVISIBLE);
-            listView.setEmptyView(progressView);
-        } else {
-            searchEmptyView.setVisibility(View.INVISIBLE);
-            progressView.setVisibility(View.INVISIBLE);
-            listView.setEmptyView(emptyView);
-        }
-        if (searchString != null) {
-            actionBar.openSearchField(searchString);
-        }
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (dialogsAdapter != null) {
-            dialogsAdapter.notifyDataSetChanged();
-        }
-        if (dialogsSearchAdapter != null) {
-            dialogsSearchAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        if (!onlySelect && floatingButton != null) {
-            floatingButton.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
-                @Override
-                public void onGlobalLayout() {
-                    ViewProxy.setTranslationY(floatingButton, floatingHidden ? AndroidUtilities.dp(100) : 0);
-                    floatingButton.setClickable(!floatingHidden);
-                    if (floatingButton != null) {
-                        if (Build.VERSION.SDK_INT < 16) {
-                            floatingButton.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                        } else {
-                            floatingButton.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                        }
-                    }
-                }
-            });
-        }
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.dialogsNeedReload) {
-            if (dialogsAdapter != null) {
-                if (dialogsAdapter.isDataSetChanged()) {
-                    dialogsAdapter.notifyDataSetChanged();
-                } else {
-                    updateVisibleRows(MessagesController.UPDATE_MASK_NEW_MESSAGE);
-                }
-            }
-            if (dialogsSearchAdapter != null) {
-                dialogsSearchAdapter.notifyDataSetChanged();
-            }
-            if (listView != null) {
-                try {
-                    if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
-                        searchEmptyView.setVisibility(View.INVISIBLE);
-                        emptyView.setVisibility(View.INVISIBLE);
-                        listView.setEmptyView(progressView);
-                    } else {
-                        progressView.setVisibility(View.INVISIBLE);
-                        if (searching && searchWas) {
-                            emptyView.setVisibility(View.INVISIBLE);
-                            listView.setEmptyView(searchEmptyView);
-                        } else {
-                            searchEmptyView.setVisibility(View.INVISIBLE);
-                            listView.setEmptyView(emptyView);
-                        }
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e); //TODO fix it in other way?
-                }
-            }
-        } else if (id == NotificationCenter.emojiDidLoaded) {
-            if (listView != null) {
-                updateVisibleRows(0);
-            }
-        } else if (id == NotificationCenter.updateInterfaces) {
-            updateVisibleRows((Integer) args[0]);
-        } else if (id == NotificationCenter.appDidLogout) {
-            dialogsLoaded = false;
-        } else if (id == NotificationCenter.encryptedChatUpdated) {
-            updateVisibleRows(0);
-        } else if (id == NotificationCenter.contactsDidLoaded) {
-            updateVisibleRows(0);
-        } else if (id == NotificationCenter.openedChatChanged) {
-            if (!serverOnly && AndroidUtilities.isTablet()) {
-                boolean close = (Boolean) args[1];
-                long dialog_id = (Long) args[0];
-                if (close) {
-                    if (dialog_id == openedDialogId) {
-                        openedDialogId = 0;
-                    }
-                } else {
-                    openedDialogId = dialog_id;
-                }
-                if (dialogsAdapter != null) {
-                    dialogsAdapter.setOpenedDialogId(openedDialogId);
-                }
-                updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
-            }
-        } else if (id == NotificationCenter.notificationsSettingsUpdated) {
-            updateVisibleRows(0);
-        } else if (id == NotificationCenter.messageReceivedByAck || id == NotificationCenter.messageReceivedByServer || id == NotificationCenter.messageSendError) {
-            updateVisibleRows(MessagesController.UPDATE_MASK_SEND_STATE);
-        } else if (id == NotificationCenter.didSetPasscode) {
-            updatePasscodeButton();
-        }
-    }
-
-    private void updatePasscodeButton() {
-        if (passcodeItem == null) {
-            return;
-        }
-        if (UserConfig.passcodeHash.length() != 0 && !searching) {
-            passcodeItem.setVisibility(View.VISIBLE);
-            if (UserConfig.appLocked) {
-                passcodeItem.setIcon(R.drawable.lock_close);
-            } else {
-                passcodeItem.setIcon(R.drawable.lock_open);
-            }
-        } else {
-            passcodeItem.setVisibility(View.GONE);
-        }
-    }
-
-    private void hideFloatingButton(boolean hide) {
-        if (floatingHidden == hide) {
-            return;
-        }
-        floatingHidden = hide;
-        ObjectAnimatorProxy animator = ObjectAnimatorProxy.ofFloatProxy(floatingButton, "translationY", floatingHidden ? AndroidUtilities.dp(100) : 0).setDuration(300);
-        animator.setInterpolator(floatingInterpolator);
-        floatingButton.setClickable(!hide);
-        animator.start();
-    }
-
-    private void updateVisibleRows(int mask) {
-        if (listView == null) {
-            return;
-        }
-        int count = listView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View child = listView.getChildAt(a);
-            if (child instanceof DialogCell) {
-                DialogCell cell = (DialogCell) child;
-                if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0) {
-                    cell.checkCurrentDialogIndex();
-                    if (!serverOnly && AndroidUtilities.isTablet()) {
-                        cell.setDialogSelected(cell.getDialogId() == openedDialogId);
-                    }
-                } else if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
-                    if (!serverOnly && AndroidUtilities.isTablet()) {
-                        cell.setDialogSelected(cell.getDialogId() == openedDialogId);
-                    }
-                } else {
-                    cell.update(mask);
-                }
-            } else if (child instanceof UserCell) {
-                ((UserCell) child).update(mask);
-            }
-        }
-    }
-
-    public void setDelegate(MessagesActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    public void setSearchString(String string) {
-        searchString = string;
-    }
-
-    public boolean isMainDialogList() {
-        return delegate == null && searchString == null;
-    }
-
-    private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
-        if (useAlert && selectAlertString != null && selectAlertStringGroup != null) {
-            if (getParentActivity() == null) {
-                return;
-            }
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            int lower_part = (int) dialog_id;
-            int high_id = (int) (dialog_id >> 32);
-            if (lower_part != 0) {
-                if (high_id == 1) {
-                    TLRPC.Chat chat = MessagesController.getInstance().getChat(lower_part);
-                    if (chat == null) {
-                        return;
-                    }
-                    builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
-                } else {
-                    if (lower_part > 0) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
-                        if (user == null) {
-                            return;
-                        }
-                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
-                    } else if (lower_part < 0) {
-                        TLRPC.Chat chat = MessagesController.getInstance().getChat(-lower_part);
-                        if (chat == null) {
-                            return;
-                        }
-                        builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
-                    }
-                }
-            } else {
-                TLRPC.EncryptedChat chat = MessagesController.getInstance().getEncryptedChat(high_id);
-                TLRPC.User user = MessagesController.getInstance().getUser(chat.user_id);
-                if (user == null) {
-                    return;
-                }
-                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
-            }
-
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
-                    didSelectResult(dialog_id, false, false);
-                }
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            showDialog(builder.create());
-        } else {
-            if (delegate != null) {
-                delegate.didSelectDialog(MessagesActivity.this, dialog_id, param);
-                delegate = null;
-            } else {
-                finishFragment();
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 5bbd0b89c..404a37f00 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -83,8 +83,7 @@
 import java.util.Arrays;
 
 //TODO-aragats new
-public class PostCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate,
-        PostPhotoViewerProvider {
+public class PostCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate,  PostPhotoViewerProvider {
 
     private ArrayList<PostMediaCell> postMediaCellsCache = new ArrayList<>();
 
@@ -166,6 +165,11 @@ public void onItemClick(View view, int position) {
         }
     };
 
+//    public interface PostCreateActivityDelegate {
+//        void didSelectDialog(PostsActivity fragment, long dialog_id, boolean param);
+//    }
+
+
     public PostCreateActivity(Bundle args) {
         super(args);
     }
@@ -1278,10 +1282,10 @@ public void onClick(DialogInterface dialogInterface, int i) {
         selectedObject = null;
     }
 
-    @Override
-    public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
-        return;
-    }
+//    @Override
+//    public void didSelectDialog(PostsActivity activity, long did, boolean param) {
+//        return;
+//    }
 
     @Override
     public boolean onBackPressed() {
@@ -1506,13 +1510,13 @@ public boolean canPerformActions() {
 
                     @Override
                     public void didPressUrl(String url) {
-                        if (url.startsWith("@")) {
-                            MessagesController.openByUserName(url.substring(1), PostCreateActivity.this, 0);
-                        } else if (url.startsWith("#")) {
-                            MessagesActivity fragment = new MessagesActivity(null);
-                            fragment.setSearchString(url);
-                            presentFragment(fragment);
-                        }
+//                        if (url.startsWith("@")) {
+//                            MessagesController.openByUserName(url.substring(1), PostCreateActivity.this, 0);
+//                        } else if (url.startsWith("#")) {
+//                            MessagesActivity fragment = new MessagesActivity(null);
+//                            fragment.setSearchString(url);
+//                            presentFragment(fragment);
+//                        }
                     }
 
                     @Override
