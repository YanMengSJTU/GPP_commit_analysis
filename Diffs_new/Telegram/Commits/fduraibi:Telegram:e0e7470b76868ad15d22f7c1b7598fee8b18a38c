diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 5fbedf976..37b4de59c 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -82,7 +82,7 @@ android {
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 21
-        versionCode 423
-        versionName "2.4.0"
+        versionCode 424
+        versionName "2.4.1"
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
index 4214d9677..54b2bf1f0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
@@ -892,7 +892,7 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
             return cs;
         }
         // If showAndroidEmoji is enabled don't replace anything
-        if (ApplicationLoader.applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE).getBoolean("showAndroidEmoji", false)) {
+        if (ApplicationLoader.SHOW_ANDROID_EMOJI) {
             return cs;
         }
         Spannable s;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 00bfb2f26..6f956786e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -9,7 +9,6 @@
 package org.telegram.android;
 
 import android.app.Activity;
-import android.graphics.Bitmap;
 import android.graphics.Paint;
 import android.text.Html;
 import android.text.Layout;
@@ -294,23 +293,25 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
 
             messageText = Emoji.fixSBEmoji(messageText);    //Fix SB encoding if needed before displaying the message
 
-            // Message Markdown
-            if (ApplicationLoader.applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE).getBoolean("view_markdown", false)) {
+            if (ApplicationLoader.MARK_DOWN == true || ApplicationLoader.WORDS_HIGHLIGHT.length() > 0) {
                 // To reserve all spaces since "fromHtml" will collapse all consecutive spaces into only 1.
                 // So every two spaces will be replaced by one space and one non-breaking space that way we can reserve the spaces and also allow word wrapping.
                 messageText = messageText.toString().replace("  ", " &nbsp;");
 
-                String strMatch = "فهد";
-                messageText = messageText.toString().replaceAll("(\\b)(" + strMatch + ")(\\b)", "$1<font color='blue'>$2</font>$3");
+                if (ApplicationLoader.WORDS_HIGHLIGHT.length() > 0) {
+                    String strMatch = ApplicationLoader.WORDS_HIGHLIGHT;
+                    messageText = messageText.toString().replaceAll("(\\b)(" + strMatch + ")(\\b)", "$1<font color='" + ApplicationLoader.WORDS_HIGHLIGHT_COLOR + "'>$2</font>$3");
+                }
 
+                if (ApplicationLoader.MARK_DOWN == true) {
+                    // Text between two * will be in BLUE and text between two ^ will be BIG size
+                    messageText = messageText.toString().replaceAll("\\*\\*(.+?)\\*\\*", "<b>$1</b>");
+                    messageText = messageText.toString().replaceAll("\\*b(.+?)\\*\\*", "<font color='blue'>$1</font>");
+                    messageText = messageText.toString().replaceAll("\\*r(.+?)\\*\\*", "<font color='red'>$1</font>");
+                    messageText = messageText.toString().replaceAll("\\*w(.+?)\\*\\*", "<font color='#ffffff'>$1</font>");
+                }
 
-                // Text between two * will be in BLUE and text between two ^ will be BIG size
-                messageText = messageText.toString().replaceAll("\\*\\*(.+?)\\*\\*", "<b>$1</b>");
-                messageText = messageText.toString().replaceAll("\\*b(.+?)\\*\\*", "<font color='blue'>$1</font>");
-                messageText = messageText.toString().replaceAll("\\*r(.+?)\\*\\*", "<font color='red'>$1</font>");
-                messageText = messageText.toString().replaceAll("\\*w(.+?)\\*\\*", "<font color='#ffffff'>$1</font>");
                 messageText = messageText.toString().replace("\n", "<br>");     // Change new line to something that Html will understand
-
                 messageText = Html.fromHtml(messageText.toString());
             }
             messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index b788712c3..2f4422f4a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -8,6 +8,7 @@
 
 package org.telegram.messenger;
 
+import android.app.Activity;
 import android.app.AlarmManager;
 import android.app.Application;
 import android.app.PendingIntent;
@@ -58,6 +59,11 @@
     public static volatile boolean isScreenOn = false;
     public static volatile boolean mainInterfacePaused = true;
 
+    public static String WORDS_HIGHLIGHT;
+    public static String WORDS_HIGHLIGHT_COLOR = "#0000FF";
+    public static boolean MARK_DOWN;
+    public static boolean SHOW_ANDROID_EMOJI;
+
     public static void postInitApplication() {
         if (applicationInited) {
             return;
@@ -119,6 +125,10 @@ public void onCreate() {
 
         applicationHandler = new Handler(applicationContext.getMainLooper());
 
+        WORDS_HIGHLIGHT = applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE).getString("HighLightWords", "");
+        MARK_DOWN = applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE).getBoolean("view_markdown", false);
+        SHOW_ANDROID_EMOJI = applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE).getBoolean("showAndroidEmoji", false);
+
         startPushService();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/HighlightWordsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/HighlightWordsActivity.java
index 393ab6dd9..efd49d602 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/HighlightWordsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/HighlightWordsActivity.java
@@ -9,14 +9,9 @@
 package org.telegram.ui;
 
 import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.DialogInterface;
 import android.content.SharedPreferences;
-import android.text.Editable;
 import android.text.Html;
 import android.text.InputType;
-import android.text.TextWatcher;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
@@ -32,31 +27,19 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
 
-import java.util.ArrayList;
 
 public class HighlightWordsActivity extends BaseFragment {
 
     private EditText highlightWordField;
     private View doneButton;
-    private TextView checkTextView;
-    private long checkReqId = 0;
-    private String lastCheckName = null;
-    private Runnable checkRunnable = null;
-    private boolean lastNameAvailable = false;
 
     private final static int done_button = 1;
 
@@ -72,7 +55,7 @@ public void onItemClick(int id) {
                     if (id == -1) {
                         finishFragment();
                     } else if (id == done_button) {
-                        saveName();
+                        saveHighlightWords();
                     }
                 }
             });
@@ -80,11 +63,6 @@ public void onItemClick(int id) {
             ActionBarMenu menu = actionBar.createMenu();
             doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
-            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-            if (user == null) {
-                user = UserConfig.getCurrentUser();
-            }
-
             fragmentView = new LinearLayout(getParentActivity());
             fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
             ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
@@ -106,7 +84,7 @@ public boolean onTouch(View v, MotionEvent event) {
             highlightWordField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             highlightWordField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
             highlightWordField.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            highlightWordField.setHint(LocaleController.getString("UsernamePlaceholder", R.string.UsernamePlaceholder));
+            highlightWordField.setHint(LocaleController.getString("WordsToHighlight", R.string.WordsToHighlight));
             AndroidUtilities.clearCursorDrawable(highlightWordField);
             highlightWordField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
@@ -128,29 +106,19 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
             highlightWordField.setLayoutParams(layoutParams);
 
-            if (user != null && user.username != null && user.username.length() > 0) {
-                highlightWordField.setText(user.username);
-                highlightWordField.setSelection(highlightWordField.length());
-            }
-
-            checkTextView = new TextView(getParentActivity());
-            checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-            checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            ((LinearLayout) fragmentView).addView(checkTextView);
-            layoutParams = (LinearLayout.LayoutParams)checkTextView.getLayoutParams();
-            layoutParams.topMargin = AndroidUtilities.dp(12);
-            layoutParams.width = LinearLayout.LayoutParams.WRAP_CONTENT;
-            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
-            layoutParams.gravity = LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT;
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            checkTextView.setLayoutParams(layoutParams);
+            highlightWordField.setText(ApplicationLoader.WORDS_HIGHLIGHT);
+            highlightWordField.setSelection(highlightWordField.length());
 
             TextView helpTextView = new TextView(getParentActivity());
             helpTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
             helpTextView.setTextColor(0xff6d6d72);
             helpTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            helpTextView.setText(Html.fromHtml(LocaleController.getString("UsernameHelp", R.string.UsernameHelp)));
+
+            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+            if (user == null) {
+                user = UserConfig.getCurrentUser();
+            }
+            helpTextView.setText(Html.fromHtml(LocaleController.formatString("HighlightWordsHelp", R.string.HighlightWordsHelp, user.first_name, ApplicationLoader.WORDS_HIGHLIGHT_COLOR)));
             ((LinearLayout) fragmentView).addView(helpTextView);
             layoutParams = (LinearLayout.LayoutParams)helpTextView.getLayoutParams();
             layoutParams.topMargin = AndroidUtilities.dp(10);
@@ -161,24 +129,6 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             layoutParams.rightMargin = AndroidUtilities.dp(24);
             helpTextView.setLayoutParams(layoutParams);
 
-            highlightWordField.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                }
-
-                @Override
-                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-                    checkUserName(highlightWordField.getText().toString(), false);
-                }
-
-                @Override
-                public void afterTextChanged(Editable editable) {
-
-                }
-            });
-
-            checkTextView.setVisibility(View.GONE);
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -199,215 +149,22 @@ public void onResume() {
         }
     }
 
-    private void showErrorAlert(String error) {
-        if (getParentActivity() == null) {
-            return;
-        }
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        if (error.equals("USERNAME_INVALID")) {
-            builder.setMessage(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-        } else if (error.equals("USERNAME_OCCUPIED")) {
-            builder.setMessage(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
-        } else if (error.equals("USERNAMES_UNAVAILABLE")) {
-            builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
-        } else {
-            builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
-        }
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        showAlertDialog(builder);
-    }
+    private void saveHighlightWords() {
+        String newWords = highlightWordField.getText().toString().trim();
 
-    private boolean checkUserName(final String name, boolean alert) {
-        if (name != null && name.length() > 0) {
-            checkTextView.setVisibility(View.VISIBLE);
-        } else {
-            checkTextView.setVisibility(View.GONE);
-        }
-        if (alert && name.length() == 0) {
-            return true;
-        }
-        if (checkRunnable != null) {
-            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
-            checkRunnable = null;
-            lastCheckName = null;
-            if (checkReqId != 0) {
-                ConnectionsManager.getInstance().cancelRpc(checkReqId, true);
-            }
-        }
-        lastNameAvailable = false;
-        if (name != null) {
-            if (name.startsWith("_") || name.endsWith("_")) {
-                checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-                checkTextView.setTextColor(0xffcf3030);
-                return false;
-            }
-            for (int a = 0; a < name.length(); a++) {
-                char ch = name.charAt(a);
-                if (a == 0 && ch >= '0' && ch <= '9') {
-                    if (alert) {
-                        showErrorAlert(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
-                    } else {
-                        checkTextView.setText(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
-                        checkTextView.setTextColor(0xffcf3030);
-                    }
-                    return false;
-                }
-                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
-                    if (alert) {
-                        showErrorAlert(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-                    } else {
-                        checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
-                        checkTextView.setTextColor(0xffcf3030);
-                    }
-                    return false;
-                }
-            }
-        }
-        if (name == null || name.length() < 5) {
-            if (alert) {
-                showErrorAlert(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
-            } else {
-                checkTextView.setText(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
-                checkTextView.setTextColor(0xffcf3030);
-            }
-            return false;
-        }
-        if (name.length() > 32) {
-            if (alert) {
-                showErrorAlert(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
-            } else {
-                checkTextView.setText(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
-                checkTextView.setTextColor(0xffcf3030);
-            }
-            return false;
-        }
-
-        if (!alert) {
-            String currentName = UserConfig.getCurrentUser().username;
-            if (currentName == null) {
-                currentName = "";
-            }
-            if (name.equals(currentName)) {
-                checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
-                checkTextView.setTextColor(0xff26972c);
-                return true;
-            }
+        // If the newWords is NOT equal to what we have already then save it
+        if (!ApplicationLoader.WORDS_HIGHLIGHT.equals(newWords)) {
+            // Change the global variable to the new value
+            ApplicationLoader.WORDS_HIGHLIGHT = newWords;
 
-            checkTextView.setText(LocaleController.getString("UsernameChecking", R.string.UsernameChecking));
-            checkTextView.setTextColor(0xff6d6d72);
-            lastCheckName = name;
-            checkRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    TLRPC.TL_account_checkUsername req = new TLRPC.TL_account_checkUsername();
-                    req.username = name;
-                    checkReqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                        @Override
-                        public void run(final TLObject response, final TLRPC.TL_error error) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    checkReqId = 0;
-                                    if (lastCheckName != null && lastCheckName.equals(name)) {
-                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
-                                            checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
-                                            checkTextView.setTextColor(0xff26972c);
-                                            lastNameAvailable = true;
-                                        } else {
-                                            checkTextView.setText(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
-                                            checkTextView.setTextColor(0xffcf3030);
-                                            lastNameAvailable = false;
-                                        }
-                                    }
-                                }
-                            });
-                        }
-                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-                }
-            };
-            AndroidUtilities.runOnUIThread(checkRunnable, 300);
+            // Save the new value
+            SharedPreferences.Editor editor = ApplicationLoader.applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE).edit();
+            editor.putString("HighLightWords", ApplicationLoader.WORDS_HIGHLIGHT);
+            editor.commit();
         }
-        return true;
-    }
 
-    private void saveName() {
-        if (!checkUserName(highlightWordField.getText().toString(), true)) {
-            return;
-        }
-        TLRPC.User user = UserConfig.getCurrentUser();
-        if (getParentActivity() == null || user == null) {
-            return;
-        }
-        String currentName = user.username;
-        if (currentName == null) {
-            currentName = "";
-        }
-        String newName = highlightWordField.getText().toString();
-        if (currentName.equals(newName)) {
-            finishFragment();
-            return;
-        }
-
-        final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-
-        TLRPC.TL_account_updateUsername req = new TLRPC.TL_account_updateUsername();
-        req.username = newName;
-
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
-        final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, final TLRPC.TL_error error) {
-                if (error == null) {
-                    final TLRPC.User user = (TLRPC.User)response;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                progressDialog.dismiss();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            ArrayList<TLRPC.User> users = new ArrayList<>();
-                            users.add(user);
-                            MessagesController.getInstance().putUsers(users, false);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                            UserConfig.saveConfig(true);
-                            finishFragment();
-                        }
-                    });
-                } else {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                progressDialog.dismiss();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            showErrorAlert(error.text);
-                        }
-                    });
-                }
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
-        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-
-        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                try {
-                    dialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        progressDialog.show();
+        finishFragment();
+        return;
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java
index b89b9ed0d..c3c21c0bf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsUltraFeaturesActivity.java
@@ -47,7 +47,9 @@
     public boolean onFragmentCreate() {
         enableMarkdownRow = rowCount++;
         PhotoQualityRow = rowCount++;
-        showAndroidEmojiRow = rowCount++;
+        if (android.os.Build.VERSION.SDK_INT >= 19) {
+            showAndroidEmojiRow = rowCount++;
+        }
         if ( ApplicationLoader.applicationContext.getResources().getBoolean(R.bool.isTablet) ){ // Only enable this option if it is a tablet
             disableTabletModeRow = rowCount++;
         }
@@ -100,12 +102,14 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                         enabled = preferences.getBoolean("view_markdown", false);
                         editor.putBoolean("view_markdown", !enabled);
                         editor.commit();
+                        ApplicationLoader.MARK_DOWN = !enabled;
                     } else if (i == showAndroidEmojiRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         enabled = preferences.getBoolean("showAndroidEmoji", false);
                         editor.putBoolean("showAndroidEmoji", !enabled);
                         editor.commit();
+                        ApplicationLoader.SHOW_ANDROID_EMOJI = !enabled;
                     } else if (i == disableTabletModeRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
@@ -225,9 +229,9 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 TextCheckCell checkCell = (TextCheckCell) view;
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Ultra", Activity.MODE_PRIVATE);
                 if (i == enableMarkdownRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("EnableMarkdown", R.string.EnableMarkdown), preferences.getBoolean("view_markdown", false), true);
+                    checkCell.setTextAndCheck(LocaleController.getString("EnableMarkdown", R.string.EnableMarkdown), ApplicationLoader.MARK_DOWN, true);
                 } else if (i == showAndroidEmojiRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("showAndroidEmoji", R.string.showAndroidEmoji), preferences.getBoolean("showAndroidEmoji", false), true);
+                    checkCell.setTextAndCheck(LocaleController.getString("showAndroidEmoji", R.string.showAndroidEmoji), ApplicationLoader.SHOW_ANDROID_EMOJI, true);
                 }
             } else if (type == 1) {
                 if (view == null) {
@@ -256,11 +260,11 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
 
                 if (i == highlighWordsRow) {
-                    String value="";
-                    if (value.isEmpty()) {
-                        value = "فهد" ;
+                    String value;
+                    if (ApplicationLoader.WORDS_HIGHLIGHT.length() > 0) {
+                        value = ApplicationLoader.WORDS_HIGHLIGHT;
                     } else {
-                        value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
+                        value  = LocaleController.getString("HighlightWordsEmpty", R.string.HighlightWordsEmpty);
                     }
                     textCell.setTextAndValue(LocaleController.getString("HighlightWords", R.string.HighlightWords), value, true);
                 }
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 1347e6b30..3001d4611 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -591,5 +591,8 @@
     <string name="PhotoQualityInfo">القيمة هنا تستخدم مع الصور الجديدة فقط، القيم العالية تعطي جودة اعلى لكن حجم ملف اكبر.\n\n* نسبة 80% عادة تقدم توازن بين الجودة والحجم.</string>
     <string name="disableTabletMode">عطل عرض اللوحي</string>
     <string name="disableTabletModeInfo">اعد تشغيل البرنامج عند تغيير الخيارِ</string>
-    <string name="HighlightWords">تمييز الاسم</string>
+    <string name="HighlightWords">تمييز كلمة</string>
+    <string name="WordsToHighlight">الكلمة المراد تمييزها</string>
+    <string name="HighlightWordsEmpty">لا يوجد</string>
+    <string name="HighlightWordsHelp">"بامكانك اختيار كلمة ليتم تمييزها بلون في المحادثات. بالإمكان استخدام اسمك او اي كلمة اخرى.&lt;br/&gt;&lt;br/&gt;هذا مثال لجملة بدون تمييز:&lt;br/&gt;&lt;b&gt;ذهبت مع %1$s الى المطعم&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;مع التمييز:&lt;br/&gt;&lt;b&gt;ذهبت مع &lt;font color=&#39;%2$s&#39;&gt;%1$s&lt;/font&gt; الى المطعم&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;هذه الخاصية مفيدة مع المجموعات النشطة إذ تساعدك على التصفح السريع وقراءة الرسائل التي تحتوي على الكلمة المختارة."</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 2fa6e331f..5b8cce454 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -592,4 +592,6 @@
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
     <string name="HighlightWords">Name Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index e646aaca1..583ff6654 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -592,4 +592,6 @@
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
     <string name="HighlightWords">Name Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 51821162b..cb5163b3d 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -592,4 +592,6 @@
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
     <string name="HighlightWords">Name Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index 236ab8835..c6f0bebe6 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -592,4 +592,6 @@
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
     <string name="HighlightWords">Name Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index c487c13d3..7fa1581a6 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -592,4 +592,6 @@
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
     <string name="HighlightWords">Name Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 218bbfad9..86dd95760 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -592,4 +592,6 @@
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
     <string name="HighlightWords">Name Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index 923d3efab..f6c190bbb 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -592,4 +592,6 @@
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
     <string name="HighlightWords">Name Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index c7261729c..227cb07bb 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -591,5 +591,8 @@
     <string name="PhotoQualityInfo">This setting only applies to new photos, higher value means better quality but also means bigger file size. \n\n* 80% is usually a good balance between size and quality.</string>
     <string name="disableTabletMode">Disable Tablet view</string>
     <string name="disableTabletModeInfo">Restart the app after changing this option</string>
-    <string name="HighlightWords">Name Highlight</string>
+    <string name="HighlightWords">Word Highlight</string>
+    <string name="WordsToHighlight">Word to highlight</string>
+    <string name="HighlightWordsEmpty">None</string>
+    <string name="HighlightWordsHelp">"You can choose a word that you would like to be highlighted in chat messages. It can be your name or any other word.&lt;br/&gt;&lt;br/&gt;Here is an example with no highlighting:&lt;br/&gt;&lt;b&gt;I went with %1$s to a restaurant&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;With highlighting:&lt;br/&gt;&lt;b&gt;I went with &lt;font color=&#39;%2$s&#39;&gt;%1$s&lt;/font&gt; to a restaurant&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;This feature is specially useful with chat groups that are active, so it helps you skim through the chat and only look at messages that mention the chosen word."</string>
 </resources>
\ No newline at end of file
