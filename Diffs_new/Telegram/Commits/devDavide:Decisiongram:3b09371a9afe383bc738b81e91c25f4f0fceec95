diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index d6d877374..813151e60 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -11,11 +11,11 @@
 import android.widget.TextView;
 
 import org.pollgram.R;
-import org.pollgram.decision.dao.PollgramDAO;
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.TimeRangeOption;
 import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.service.PollgramServiceFactory;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -86,7 +86,7 @@ public void setOnVoteChageListener(OnVoteChangeListener onVoteChageListener){
     @Override
     public View getView(final int position, View convertView, ViewGroup parent) {
         final Vote vote = getItem(position);
-        final Option c = PollgramDAO.getInstance().getOption(vote.getOptionId());
+        final Option c = PollgramServiceFactory.getPollgramDAO().getOption(vote.getOptionId());
         if (c instanceof TimeRangeOption){
             Log.e("ChoiceAdapter", "TimeRangeOption not supported yet");
             return null;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java
deleted file mode 100644
index bac55b3d1..000000000
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAO.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package org.pollgram.decision.dao;
-
-import android.support.annotation.Nullable;
-
-import org.pollgram.decision.data.Decision;
-import org.pollgram.decision.data.Option;
-import org.pollgram.decision.data.UsersDecisionVotes;
-import org.pollgram.decision.data.Vote;
-import org.telegram.tgnet.TLRPC;
-
-import java.util.List;
-
-/**
- * Created by davide on 03/10/15.
- */
-public abstract class PollgramDAO {
-
-    public abstract Decision insert(Decision d);
-
-    public abstract void update(Decision d);
-
-    public abstract Decision getDecision(long decisionId);
-
-    public abstract List<Decision> getDecisions(@Nullable Boolean open);
-
-    public abstract Option insert(Option o);
-
-    public abstract void update(Option o);
-
-    public abstract Option getOption(long optionId);
-
-    public abstract List<Option> getOptions(Decision decision);
-
-    public abstract List<Option> getOptions(long decisionId);
-
-    public abstract List<TLRPC.User> getUsers(int[] usersIds);
-
-    public abstract List<Vote> getUserVoteForDecision(long decisionId, int userId);
-
-    public abstract Vote save(Vote vote);
-
-    public abstract UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds);
-
-    public abstract UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User> users);
-
-    private static volatile PollgramDAO Instance = null;
-
-    public static PollgramDAO getInstance() {
-        PollgramDAO localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (PollgramDAO.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new PollgramDAODBImpl();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java
deleted file mode 100644
index 62a95278b..000000000
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOStubImpl.java
+++ /dev/null
@@ -1,159 +0,0 @@
-package org.pollgram.decision.dao;
-
-import android.support.annotation.Nullable;
-
-import org.pollgram.decision.data.Decision;
-import org.pollgram.decision.data.Option;
-import org.pollgram.decision.data.TextOption;
-import org.pollgram.decision.data.UsersDecisionVotes;
-import org.pollgram.decision.data.Vote;
-import org.telegram.messenger.MessagesController;
-import org.telegram.tgnet.TLRPC;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-/**
- * Created by davide on 03/10/15.
- */
-@Deprecated
-class PollgramDAOStubImpl extends PollgramDAO {
-
-    private static final String LOG_TAG = "DecisionDAOImpl";
-
-    // TODO remove stub field
-    private final List<Decision> decisions = new ArrayList<>();
-    private final List<Option> choiches = new ArrayList<>();
-
-    public PollgramDAOStubImpl() {
-
-        long id = 1;
-        /// just for test
-        int chatId = 39379118;
-        int creatorId = 23483618;
-        decisions.add(new Decision(id++,chatId, creatorId,"what present do we buy ?", id+"huge bla bla bla" ,true ,1));
-        decisions.add(new Decision(id++, chatId, creatorId, "Where do we go ?", id + "huge bla bla bla", true, 0));
-        decisions.add(new Decision(id++, chatId, creatorId, "When will the party be ?", id + "huge bla bla bla", true, 0));
-        decisions.add(new Decision(id++, chatId, creatorId, "Do we add Slomp to the group ?", id + "huge bla bla bla", false, 0));
-
-        choiches.add(new TextOption(id++,"Ski","They cost 385EUR i saw them at the corner shop",decisions.get(0).getId()));
-        choiches.add(new TextOption(id++,"Phone","The new StonexOne is AWESOME !!!",decisions.get(0).getId()));
-        choiches.add(new TextOption(id++,"Trip", "Yeah a trip trought Europe can be a nice idea",decisions.get(0).getId()));
-        choiches.add(new TextOption(id++, "A stupid idea", "it is late and i have no more ideas ;-/",decisions.get(0).getId()));
-
-    }
-
-    @Override
-    public Decision insert(Decision d) {
-        decisions.add(d);
-        return d;
-    }
-
-    @Override
-    public void update(Decision d) {
-
-    }
-
-    @Override
-    public Decision getDecision(long decisionId) {
-        for (Decision d : decisions){
-            if (d.getId() == decisionId)
-                return d;
-        }
-        return null;
-    }
-
-    @Override
-    public List<Decision> getDecisions(@Nullable Boolean open) {
-        List<Decision> outList = new ArrayList<>();
-        for(Decision d : decisions)
-            if (open == null || d.isOpen() == open.booleanValue())
-                outList.add(d);
-        return outList;
-    }
-
-    @Override
-    public Option getOption(long optionId) {
-        return null;
-    }
-
-    @Override
-    public List<Option> getOptions(Decision decision) {
-        return  getOptions(decision.getId());
-
-    }
-
-    @Override
-    public List<Option> getOptions(long decisionId) {
-        if (decisionId == decisions.get(0).getId())
-            return  choiches;
-        else
-            return new ArrayList<>();
-    }
-
-    @Override
-    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds) {
-        Decision decision = getDecision(decisionId);
-        List<TLRPC.User> usersForDecision = getUsers(participantIds);
-        List<Option> choichesForDecision= getOptions(decision) ;
-        List<Vote> votes = new ArrayList<>();
-        for (int i = 0; i < usersForDecision.size(); i++) {
-            for (int j = 0; j < choichesForDecision.size(); j++) {
-                Vote vote = getVote(usersForDecision.get(i).id, choichesForDecision.get(j));
-                votes.add(vote);
-                if (i == 0) {
-                    vote.setVote(null);
-                }
-            }
-        }
-        UsersDecisionVotes udv = new UsersDecisionVotes(decision, usersForDecision, choichesForDecision, votes);
-        return udv;
-    }
-
-    private Vote getVote(int userId, Option option) {
-        // TODO so stub
-        long stubId = option.getId()*17;
-        Boolean voteValue = option.getId()%2 ==0 ? true : (option.getId()%3 ==0 ? null : false);
-        return new Vote(stubId, voteValue, new Date(), userId, option.getId());
-    }
-
-    @Override
-    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User> users) {
-        return null;
-    }
-
-    @Override
-    public List<TLRPC.User> getUsers(int[] usersIds) {
-        List<TLRPC.User> users = new ArrayList<>();
-        for (int i = 0 ; i< usersIds.length ; i++){
-            users.add(MessagesController.getInstance().getUser(usersIds[i]));
-        }
-        return users;
-    }
-
-    @Override
-    public List<Vote> getUserVoteForDecision(long decisionId, int userId) {
-        List<Vote> votes = new ArrayList<>();
-        for (Option c : getOptions(decisionId)) {
-             votes.add(getVote(userId,c));
-        }
-        return votes;
-    }
-
-    @Override
-    public Option insert(Option o) {
-        return null;
-    }
-
-    @Override
-    public void update(Option o) {
-
-    }
-
-    @Override
-    public Vote save(Vote vote) {
-        return null;
-    }
-}
-
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/DBObjectMapper.java
similarity index 86%
rename from TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/service/DBObjectMapper.java
index 56ee48ad7..75ed0a507 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/DBObjectMapper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/DBObjectMapper.java
@@ -1,4 +1,4 @@
-package org.pollgram.decision.dao;
+package org.pollgram.decision.service;
 
 import android.content.ContentValues;
 import android.database.Cursor;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
index 810f03ffd..509ce34bf 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
@@ -1,4 +1,4 @@
-package org.pollgram.decision.dao;
+package org.pollgram.decision.service;
 
 import android.content.ContentValues;
 import android.database.Cursor;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
new file mode 100644
index 000000000..f7814c7bd
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
@@ -0,0 +1,47 @@
+package org.pollgram.decision.service;
+
+import android.support.annotation.Nullable;
+
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.Vote;
+
+import java.util.List;
+
+/**
+ * Created by davide on 03/10/15.
+ */
+public interface PollgramDAO {
+
+    Decision insert(Decision d);
+
+    void update(Decision d);
+
+    Decision getDecision(long decisionId);
+
+    List<Decision> getDecisions(@Nullable Boolean open);
+
+    Option insert(Option o);
+
+    void update(Option o);
+
+    Option getOption(long optionId);
+
+    List<Option> getOptions(Decision decision);
+
+    List<Option> getOptions(long decisionId);
+
+    List<Vote> getUserVoteForDecision(long decisionId, int userId);
+
+    /**
+     * Votes for given decisionId and userId. UserId can be null, in this case will reurn the
+     * votes for any user
+     *
+     * @param decisionId decision
+     * @param userId     userId, if null it means all user
+     * @return
+     */
+    List<Vote> getVotes(long decisionId, @Nullable Integer userId);
+
+    Vote save(Vote vote);
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
similarity index 79%
rename from TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index de20dd9a5..c97c92fed 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -1,21 +1,15 @@
-package org.pollgram.decision.dao;
+package org.pollgram.decision.service;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.support.annotation.Nullable;
 import android.util.Log;
 
-import org.pollgram.decision.dao.PGSqlLiteHelper.T_Decision;
-import org.pollgram.decision.dao.PGSqlLiteHelper.T_TextOption;
-import org.pollgram.decision.dao.PGSqlLiteHelper.T_Vote;
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.TimeRangeOption;
-import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
-import org.telegram.messenger.MessagesController;
-import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -24,7 +18,7 @@
 /**
  * Created by davide on 18/10/15.
  */
-class PollgramDAODBImpl extends PollgramDAO {
+class PollgramDAODBImpl implements PollgramDAO {
 
     private static final String LOG_TAG = "PGDBDAO";
     private final PGSqlLiteHelper helper;
@@ -45,7 +39,7 @@ private void putStubData() {
         decisions.add(new Decision(chatId, creatorId, "Where do we go ?", "huge bla bla bla", true, 0));
         decisions.add(new Decision(chatId, creatorId, "When will the party be ?", "huge bla bla bla", true, 0));
         decisions.add(new Decision(chatId, creatorId, "Do we add Slomp to the group ?", "huge bla bla bla", false, 0));
-        helper.getWritableDatabase().execSQL("DELETE FROM " + T_Decision.TABLE_NAME);
+        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_Decision.TABLE_NAME);
         for (Decision d : decisions) {
             Decision newD = insert(d);
             Log.i(LOG_TAG, "inserted decision id:" + newD.getId());
@@ -71,7 +65,7 @@ private void putStubData() {
         options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
         options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
         options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
-        helper.getWritableDatabase().execSQL("DELETE FROM " + T_TextOption.TABLE_NAME);
+        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_TextOption.TABLE_NAME);
         for(TextOption te : options){
             Option newOpt = insert(te);
             Log.i(LOG_TAG, "inserted TextOption id:" + newOpt.getId());
@@ -109,7 +103,7 @@ public Decision getDecision(long decisionId) {
         if (open == null)
             return helper.query(helper.DECISION_MAPPER, null, null);
         else
-            return helper.query(helper.DECISION_MAPPER, T_Decision.OPEN + "= ?",
+            return helper.query(helper.DECISION_MAPPER, PGSqlLiteHelper.T_Decision.OPEN + "= ?",
                     new String[]{PGSqlLiteHelper.toString(open)});
     }
 
@@ -146,7 +140,7 @@ public Option getOption(long optionId) {
     @Override
     public List<Option> getOptions(long decisionId) {
         List<TextOption> textOptions = helper.query(helper.TEXT_OPTION_MAPPER,
-                T_TextOption.FK_DECISION + "= ?",
+                PGSqlLiteHelper.T_TextOption.FK_DECISION + "= ?",
                 new String[]{Long.toString(decisionId)});
         // TODO eventually query time range options
 
@@ -155,19 +149,9 @@ public Option getOption(long optionId) {
         return outList;
     }
 
-    @Override
-    public List<TLRPC.User> getUsers(int[] usersIds) {
-        List<TLRPC.User> users = new ArrayList<>();
-        for (int i = 0 ; i< usersIds.length ; i++){
-            users.add(MessagesController.getInstance().getUser(usersIds[i]));
-        }
-        return users;
-    }
-
-
     @Override
     public List<Vote> getUserVoteForDecision(long decisionId, int userId) {
-        return getVote(decisionId, userId);
+        return getVotes(decisionId, userId);
     }
 
     /**
@@ -177,14 +161,14 @@ public Option getOption(long optionId) {
      * @param userId userId, if null it means all user
      * @return
      */
-    private List<Vote> getVote(long decisionId, @Nullable Integer userId) {
+    public List<Vote> getVotes(long decisionId, @Nullable Integer userId) {
         SQLiteDatabase db = helper.getReadableDatabase();
 
         List<String> params = new ArrayList<>(2);
         params.add(Long.toString(decisionId));
 
         StringBuilder strQuery =  new StringBuilder();
-        strQuery.append(" select ").append(T_Vote.cloumns("v"));
+        strQuery.append(" select ").append(PGSqlLiteHelper.T_Vote.cloumns("v"));
         strQuery.append(" from text_option o inner join vote v ");
         strQuery.append("  on o.id = v.fk_option ");
         strQuery.append(" where o.fk_decision = ? ");
@@ -218,20 +202,5 @@ public Vote save(Vote vote) {
     }
 
 
-    @Override
-    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds) {
-        List<TLRPC.User> users = getUsers(participantIds);
-        return getUsersDecisionVotes(decisionId,users);
-
-    }
-
-    @Override
-    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User> users) {
-        Decision decision = getDecision(decisionId);
-        List<Option> options = getOptions(decisionId);
-        List<Vote> votes = getVote(decisionId, null);
-        UsersDecisionVotes udv = new UsersDecisionVotes(decision, users, options, votes);
-        return udv;
-    }
 }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAOException.java
similarity index 89%
rename from TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAOException.java
index 8b87c5597..bbef43f41 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/dao/PollgramDAOException.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAOException.java
@@ -1,4 +1,4 @@
-package org.pollgram.decision.dao;
+package org.pollgram.decision.service;
 
 /**
  * Created by davide on 27/10/15.
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
new file mode 100644
index 000000000..6058ac2d3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -0,0 +1,24 @@
+package org.pollgram.decision.service;
+
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.UsersDecisionVotes;
+import org.pollgram.decision.data.Vote;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.List;
+
+/**
+ * Created by davide on 10/11/15.
+ */
+public interface PollgramService {
+
+    List<TLRPC.User> getUsers(int[] usersIds);
+
+    UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds);
+
+    UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User> users);
+
+    Vote save(Vote vote);
+
+    void remindUserToVote(TLRPC.User user, long groupChatId, Decision decision);
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceFactory.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceFactory.java
new file mode 100644
index 000000000..813650c27
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceFactory.java
@@ -0,0 +1,38 @@
+package org.pollgram.decision.service;
+
+/**
+ * Created by davide on 10/11/15.
+ */
+public class PollgramServiceFactory {
+
+    private static volatile PollgramDAO INSTANCE = null;
+    private static volatile PollgramService POLLGRAM_SERVICE_INSTANCE = null;
+
+
+    public static PollgramDAO getPollgramDAO() {
+        PollgramDAO localInstance = INSTANCE;
+        if (localInstance == null) {
+            synchronized (PollgramDAO.class) {
+                localInstance = INSTANCE;
+                if (localInstance == null) {
+                    INSTANCE = localInstance = new PollgramDAODBImpl();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    public static PollgramService getPollgramService() {
+        PollgramService localInstance = POLLGRAM_SERVICE_INSTANCE;
+        if (localInstance == null) {
+            synchronized (PollgramService.class) {
+                localInstance = POLLGRAM_SERVICE_INSTANCE;
+                if (localInstance == null) {
+                    POLLGRAM_SERVICE_INSTANCE = localInstance = new PollgramServiceImpl();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
new file mode 100644
index 000000000..86e4b283b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -0,0 +1,80 @@
+package org.pollgram.decision.service;
+
+import android.util.Log;
+
+import org.pollgram.R;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.UsersDecisionVotes;
+import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.utils.PollgramUtils;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by davide on 10/11/15.
+ */
+public class PollgramServiceImpl implements PollgramService {
+
+    private static final String LOG_TAG = "POLLGSRV";
+    private final PollgramDAO pollgramDAO;
+
+    public PollgramServiceImpl() {
+        this.pollgramDAO = PollgramServiceFactory.getPollgramDAO();
+    }
+
+    @Override
+    public List<TLRPC.User> getUsers(int[] usersIds) {
+        List<TLRPC.User> users = new ArrayList<>();
+        for (int i = 0; i < usersIds.length; i++) {
+            TLRPC.User user = MessagesController.getInstance().getUser(usersIds[i]);
+            if (user.status == null) {// suppose this is abot
+                Log.i(LOG_TAG, "User [" + user + "] is a BOT, it will be skipped");
+                continue;
+            }
+            users.add(user);
+        }
+        return users;
+    }
+
+    @Override
+    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, int[] participantIds) {
+        List<TLRPC.User> users = getUsers(participantIds);
+        return getUsersDecisionVotes(decisionId, users);
+
+    }
+
+    @Override
+    public UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User> users) {
+        Decision decision = pollgramDAO.getDecision(decisionId);
+        List<Option> options = pollgramDAO.getOptions(decisionId);
+        List<Vote> votes = pollgramDAO.getVotes(decisionId, null);
+        UsersDecisionVotes udv = new UsersDecisionVotes(decision, users, options, votes);
+        return udv;
+    }
+
+    @Override
+    public Vote save(Vote vote) {
+        // TODO send message for vote
+        return pollgramDAO.save(vote);
+    }
+
+    @Override
+    public void remindUserToVote(TLRPC.User user, long groupChatId, Decision decision) {
+        String msg = PollgramUtils.POLLGRAM_MESSAGE_PREFIX + ApplicationLoader.applicationContext.
+                getString(R.string.remindMessage, PollgramUtils.asString(user), decision.getTitle());
+        long peer = -groupChatId;
+        MessageObject replyToMsg = null;
+        TLRPC.WebPage webPAge = null;
+        boolean searchLinks = false;
+        boolean asAdmin = false;
+        SendMessagesHelper.getInstance().sendMessage(msg, peer, replyToMsg, webPAge, searchLinks, asAdmin);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
index a6213b827..22c033670 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -18,14 +18,15 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.pollgram.R;
 import org.pollgram.decision.adapter.DecisionAdapter;
-import org.pollgram.decision.dao.PollgramDAO;
 import org.pollgram.decision.data.Decision;
-import org.pollgram.decision.utils.PolgramUtils;
+import org.pollgram.decision.service.PollgramDAO;
+import org.pollgram.decision.service.PollgramServiceFactory;
+import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
-import org.pollgram.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -65,7 +66,7 @@ public DecisionsListFragment(Bundle bundle) {
 
     @Override
     public boolean onFragmentCreate() {
-        decisionDAO = PollgramDAO.getInstance();
+        decisionDAO = PollgramServiceFactory.getPollgramDAO();
         hideCloseDecision = true;
         return true;
     }
@@ -76,7 +77,7 @@ public View createView(final Context context) {
 
         // set up action bar
 
-        PolgramUtils.init(actionBar, R.string.groupDecision, 22, R.drawable.decision);
+        PollgramUtils.init(actionBar, R.string.groupDecision, 22, R.drawable.decision);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         // Create menu
         ActionBarMenu menu = actionBar.createMenu();
@@ -123,6 +124,7 @@ public void onItemClick(int id) {
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                 Decision decision = (Decision) parent.getAdapter().getItem(position);
                 Bundle bundle = new Bundle();
+                bundle.putLong(VotesManagerFragment.PAR_GROUP_CHAT_ID, chatInfo.id);
                 bundle.putLong(VotesManagerFragment.PAR_DECISION_ID, decision.getId());
                 bundle.putIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS, participantsUserIds);
                 presentFragment(new VotesManagerFragment(bundle));
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
index 131526f03..fccb1793f 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
@@ -7,9 +7,10 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-import org.pollgram.decision.dao.PollgramDAO;
+import org.pollgram.decision.service.PollgramDAO;
 import org.pollgram.decision.data.Decision;
-import org.pollgram.decision.utils.PolgramUtils;
+import org.pollgram.decision.service.PollgramServiceFactory;
+import org.pollgram.decision.utils.PollgramUtils;
 import org.pollgram.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
@@ -25,6 +26,7 @@
 
     public static final String PAR_DECISION_ID = "PAR_DECISION_ID";
     public static final String PAR_PARTICIPANT_IDS  = "PAR_PARTICIPANT_IDS" ;
+    public static final String PAR_GROUP_CHAT_ID = "PAR_GROUP_CHAT_ID" ;
 
     private int[] participantsUserIds;
     private PollgramDAO pollgramDAO;
@@ -38,7 +40,7 @@ public VotesManagerFragment(Bundle bundle) {
     public boolean onFragmentCreate() {
         // init field
         super.swipeBackEnabled = false;
-        pollgramDAO = PollgramDAO.getInstance();
+        pollgramDAO = PollgramServiceFactory.getPollgramDAO();
         long decisionId = getArguments().getLong(PAR_DECISION_ID);
         participantsUserIds = getArguments().getIntArray(PAR_PARTICIPANT_IDS);
         decision = pollgramDAO.getDecision(decisionId);
@@ -50,7 +52,7 @@ public boolean onFragmentCreate() {
     public View createView(Context context) {
         // set up action bar
         // TODO add real icon
-        PolgramUtils.init(actionBar, decision.getTitle(), 18, R.drawable.attach_camera);
+        PollgramUtils.init(actionBar, decision.getTitle(), 18, R.drawable.attach_camera);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index 41236e81d..40ee4f552 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -39,11 +39,13 @@
 
 import org.pollgram.R;
 import org.pollgram.decision.adapter.VoteListAdapter;
-import org.pollgram.decision.dao.PollgramDAO;
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
-import org.pollgram.decision.utils.PolgramUtils;
+import org.pollgram.decision.service.PollgramDAO;
+import org.pollgram.decision.service.PollgramService;
+import org.pollgram.decision.service.PollgramServiceFactory;
+import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
@@ -62,10 +64,12 @@
     private ViewPager viewPager;
 
     private PollgramDAO pollgramDAO;
+    private PollgramService pollgramService;
     private UsersDecisionVotes usersDecisionVotes;
-    private int currentUserId;
 
+    private int currentUserId;
     private ViewGroup optionTableViewContainer;
+    private long groupChatId;
 
     public VotesManagerTabsFragment() {
     }
@@ -74,10 +78,12 @@ public VotesManagerTabsFragment() {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        pollgramDAO = PollgramDAO.getInstance();
+        pollgramDAO = PollgramServiceFactory.getPollgramDAO();
+        pollgramService = PollgramServiceFactory.getPollgramService();
+        groupChatId = getArguments().getLong(VotesManagerFragment.PAR_GROUP_CHAT_ID);
         long decisionId = getArguments().getLong(VotesManagerFragment.PAR_DECISION_ID);
         int[] participantsUserIds = getArguments().getIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS);
-        usersDecisionVotes = pollgramDAO.getUsersDecisionVotes(decisionId, participantsUserIds);
+        usersDecisionVotes = pollgramService.getUsersDecisionVotes(decisionId, participantsUserIds);
         currentUserId = UserConfig.getCurrentUser().id;
     }
 
@@ -221,8 +227,9 @@ public void onClick(View view) {
                     Vote saved = pollgramDAO.save(v);
 
                 }
-                usersDecisionVotes = pollgramDAO.getUsersDecisionVotes(usersDecisionVotes.getDecision().getId(),
-                        usersDecisionVotes.getUsers());
+                usersDecisionVotes = PollgramServiceFactory.getPollgramService().
+                        getUsersDecisionVotes(usersDecisionVotes.getDecision().getId(),
+                                usersDecisionVotes.getUsers());
                 btnSaveOption.setVisibility(View.GONE);
 
                 // set new sorted  votes in the adapter
@@ -322,7 +329,7 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
                 userNameTv.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
                 userNameTv.setPadding(15, 0, 0, 0);
                 userNameTv.setEllipsize(TextUtils.TruncateAt.END);
-                userNameTv.setText(PolgramUtils.asString(user));
+                userNameTv.setText(PollgramUtils.asString(user));
                 int maxWith = AndroidUtilities.dp(115);
                 userNameTv.setMaxWidth(maxWith);
                 userNameTv.setMaxLines(1);
@@ -338,9 +345,9 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
             remindButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    String message = getContext().getString(R.string.remindToUserSent,PolgramUtils.asString(user));
+                    pollgramService.remindUserToVote(user, groupChatId, usersDecisionVotes.getDecision());
+                    String message = getContext().getString(R.string.remindToUserSent, PollgramUtils.asString(user));
                     Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
-                    // TODO implement
                 }
             });
 
@@ -353,7 +360,7 @@ public void onClick(View v) {
                 Vote v = usersDecisionVotes.getVotes(user.id, option);
                 add2Row(row, newVoteView(v), otherRowHeight);
             }
-            if (!atLeastOneIsNull)
+            if (!atLeastOneIsNull || user.id == currentUserId)
                 remindButton.setVisibility(View.INVISIBLE);
 
             tableLayout.addView(row);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
similarity index 75%
rename from TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
index 4bd7e6485..a97a9b186 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PolgramUtils.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
@@ -20,7 +20,9 @@
 /**
  * Created by davide on 08/10/15.
  */
-public class PolgramUtils {
+public class PollgramUtils {
+
+    public static final String POLLGRAM_MESSAGE_PREFIX = "#Pollgram ";
 
     public static ActionBar init(ActionBar actionBar, int title,int titleFontSize, int drawableIcon){
         return init(actionBar, ApplicationLoader.applicationContext.getString(title), titleFontSize,drawableIcon);
@@ -57,23 +59,18 @@ public static ActionBar init(ActionBar actionBar, String title,int titleFontSize
         return actionBar;
     }
 
-    public static String asString(TLRPC.User currentUser){
-        if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
-            if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                return PhoneFormat.getInstance().format("+" + currentUser.phone);
+    public static String asString(TLRPC.User user){
+        if (user.id / 1000 != 777 && user.id / 1000 != 333 &&
+                ContactsController.getInstance().contactsDict.get(user.id) == null &&
+                (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+            if (user.phone != null && user.phone.length() != 0) {
+                return PhoneFormat.getInstance().format("+" + user.phone);
             } else {
-                return UserObject.getUserName(currentUser);
+                return UserObject.getUserName(user);
             }
         } else {
-            return UserObject.getUserName(currentUser);
+            return UserObject.getUserName(user);
         }
     }
-//
-//    public static String resize(String str, int maxLenght){
-//        if (str == null || str.length() < maxLenght)
-//            return str;
-//        else
-//            return str.substring(0,maxLenght -3) + "...";
-//    }
 
 }
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 30a782b71..053bdfb86 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -968,7 +968,9 @@
     <string name="voteSaved">Vote saved</string>
     <string name="no_vote_desc">\?</string>
     <string name="noOptionPresent">There are no option\n for this decision</string>
-    <string name="remindToUserSent">remind sent to user %1$s (TODO IT MUST BE IMPLENTED)</string>
+    <string name="remindToUserSent">Remind sent to %1$s</string>
+
+    <string name="remindMessage">Hey %1$s can you please for decision:\n\"%2$s\"\nThank you :-)</string>
     <!-- END of Pollgram text -->
 
 
