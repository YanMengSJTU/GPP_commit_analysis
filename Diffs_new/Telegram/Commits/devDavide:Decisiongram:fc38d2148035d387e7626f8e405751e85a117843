diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
index a5a647818..53ad4eb58 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/OptionsAdapter.java
@@ -145,18 +145,18 @@ public void afterTextChanged(Editable s) {
             edLongDescription.addTextChangedListener(new DefaultTextWatcher() {
                 @Override
                 public void afterTextChanged(Editable s) {
-                    o.setLongDescription(s.toString());
+                    o.setNotes(s.toString());
                     Linkify.addLinks(edLongDescription, Linkify.ALL);
                 }
             });
 
             edTitle.setText(o.getTitle());
-            edLongDescription.setText(o.getLongDescription());
+            edLongDescription.setText(o.getNotes());
             // make grey the lines that are already present and therefore not editable
             if(alreadyOnDB) {
                 edTitle.setTextColor(Color.GRAY);
                 edLongDescription.setTextColor(Color.GRAY);
-                if (o.getLongDescription() == null || o.getLongDescription().isEmpty()) {
+                if (o.getNotes() == null || o.getNotes().isEmpty()) {
                     edLongDescription.setText(" ");
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 051c935fb..588b6ae60 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -218,7 +218,7 @@ public void onClick(View v) {
         // Set values
         optionTitle.setText(o.getTitle());
         optionTitle.setOnClickListener(openOptionDetailOnClickLister);
-        optionSubtitle.setText(o.getLongDescription());
+        optionSubtitle.setText(o.getNotes());
         optionSubtitle.setOnClickListener(openOptionDetailOnClickLister);
 
         return rowView;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
index a7f4d713b..dca498daa 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
@@ -8,16 +8,16 @@
     // icon/image will be retrived externally by url or file
 
     private String title;
-    private String longDescription;
+    private String notes;
 
-    public TextOption(String title, String longDescription, long decisionId) {
+    public TextOption(String title, String notes, long decisionId) {
         super(decisionId);
         this.title = title;
-        this.longDescription =  longDescription;
+        this.notes = notes;
     }
 
-    public TextOption(long id, String title, String longDescription, long decisionId) {
-        this(title,longDescription,decisionId);
+    public TextOption(long id, String title, String notes, long decisionId) {
+        this(title, notes,decisionId);
         setId(id);
     }
 
@@ -34,8 +34,8 @@ public void setTitle(String title) {
         this.title = title;
     }
 
-    public String getLongDescription() {
-        return longDescription;
+    public String getNotes() {
+        return notes;
     }
 
     @Override
@@ -47,7 +47,7 @@ public boolean equals(Object o) {
 
         if (getTitle() != null ? !getTitle().equals(that.getTitle()) : that.getTitle() != null)
             return false;
-        return equalString(getLongDescription(), that.getLongDescription());
+        return equalString(getNotes(), that.getNotes());
 
     }
 
@@ -55,12 +55,12 @@ public boolean equals(Object o) {
     public int hashCode() {
         int result = super.hashCode();
         result = 31 * result + (getTitle() != null ? getTitle().hashCode() : 0);
-        result = 31 * result + (getLongDescription() != null ? getLongDescription().hashCode() : 0);
+        result = 31 * result + (getNotes() != null ? getNotes().hashCode() : 0);
         return result;
     }
 
-    public void setLongDescription(String longDescription) {
-        this.longDescription = longDescription;
+    public void setNotes(String notes) {
+        this.notes = notes;
     }
 
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
index 44ab8c021..08c301548 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
@@ -195,7 +195,7 @@ public TextOption from(Cursor c) {
         public ContentValues toCV(TextOption to) {
             ContentValues cv = new ContentValues();
             cv.put(T_TextOption.TITLE, to.getTitle());
-            cv.put(T_TextOption.LONG_DESCRIPTION, to.getLongDescription());
+            cv.put(T_TextOption.LONG_DESCRIPTION, to.getNotes());
             cv.put(T_TextOption.FK_DECISION, to.getDecisionId());
             return cv;
         }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index 46aa696ee..61b53592d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -238,8 +238,8 @@ public Option save(Option o) {
             throw new RuntimeException("Not yet supported :-(");
 
         TextOption tOpt = (TextOption) o;
-        if (tOpt.getLongDescription() == null)// mask null values
-            tOpt.setLongDescription("");
+        if (tOpt.getNotes() == null)// mask null values
+            tOpt.setNotes("");
         Option foundOption = getOption(tOpt.getTitle(), o.getDecisionId());
         if (foundOption == null)
             return helper.insert(tOpt, helper.TEXT_OPTION_MAPPER);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index b1a6bb6e2..2200d6590 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -6,6 +6,7 @@
 import org.pollgram.R;
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.Vote;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.MessageObject;
@@ -20,6 +21,7 @@
  */
 public interface PollgramMessagesManager {
 
+
     /**
      * The different messages type managed by Pollgram
      * Emoji codes are taken from http://apps.timwhitlock.info/emoji/tables/unicode#block-6a-additional-emoticons
@@ -32,7 +34,8 @@
         REOPEN_DECISION(R.string.MessageType_REOPEN_DECISION, (byte) 0xF0, (byte) 0x9F, (byte) 0x94, (byte) 0x84),    //ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS
         DELETE_DECISION(R.string.MessageType_DELETE_DECISION, (byte) 0xE2, (byte) 0x9D, (byte) 0x8C),    //CROSS MARK
         ADD_OPTIONS(R.string.MessageType_ADD_OPTIONS,(byte)0xE2, (byte)0x9E, (byte)0x95),// heavy plus sign
-        DELETE_OPTIONS(R.string.MessageType_DELTE_OPTIONS, (byte)0xE2, (byte)0x9E, (byte)0x96); //	heavy minus sign
+        DELETE_OPTIONS(R.string.MessageType_DELTE_OPTIONS, (byte)0xE2, (byte)0x9E, (byte)0x96),
+        UPDATE_OPTION_NOTES(R.string.MessageType_UPDATE_OPTION_NOTES , BULLET_LIST_EMOJI.getBytes() ); //	heavy minus sign
 
         private final String emoji;
         private final int descrStringRes;
@@ -64,6 +67,8 @@ public String getDescription() {
 
     }
 
+    String BULLET_LIST_EMOJI = EmojiUtils.getEmojiAsString((byte) 0xE2, (byte) 0x96, (byte) 0xAB);// white small square
+
     /**
      * Add URL link for decision title on charSequence message
      * @param type
@@ -127,6 +132,12 @@ public String getDescription() {
      */
     String buildAddOptions(Decision decision, List<Option> newOptions);
 
+    /**
+     * build a message for notifying that the long description of an option has been updated
+     * @return
+     */
+    String buildUpdateOptionNotes(Decision decision, TextOption option);
+
     /**
      * build a message for notifying a that some option has been deleted from a decision
      * @param decision
@@ -221,6 +232,16 @@ public DecisionOptionData(@NonNull Decision decision, @NonNull List<Option> opti
      */
     DecisionOptionData getDeletedOption(String text, long groupChatId, int userId) throws PollgramParseException;
 
+    /**
+     * Only if getMessageType(text) == MessageType_UPDATE_OPTION_NOTES
+     * return the new option data
+     * @param text
+     * @param groupChatId
+     * @param userId
+     * @return
+     */
+    TextOption getNewOptionData(String text, long groupChatId, int userId) throws PollgramParseException;
+
     /**
      * Return value for getCloseDecision
      */
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index 7c7a4556d..74d48e37b 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -40,7 +40,6 @@
     private static final String WINKING_FACE_EMOJI = EmojiUtils.getEmojiAsString((byte) 0xF0, (byte) 0x9F, (byte) 0x98, (byte)0x89);// winking face
     private static final String TRUE_EMOJI = EmojiUtils.getEmojiAsString((byte) 0xE2, (byte) 0x9C, (byte) 0x85);// WHITE HEAVY CHECK MARK
     private static final String FALSE_EMOJI = EmojiUtils.getEmojiAsString((byte) 0xE2, (byte) 0x9D, (byte) 0x8C);// CROSS MARK
-    private static final String BULLET_LIST_EMOJI = EmojiUtils.getEmojiAsString((byte) 0xE2, (byte) 0x96, (byte) 0xAB);// white small square
 
     private final PollgramDAO pollgramDAO;
     private final Context context;
@@ -236,6 +235,23 @@ public String buildNotifyNewDecision(Decision decision, List<Option> options) {
         return buildMessage(MessageType.NEW_DECISION, body.toString());
     }
 
+    @Override
+    public String buildUpdateOptionNotes(Decision decision, TextOption option) {
+        StringBuilder body = new StringBuilder();
+        body.append(getResString(R.string.tmsg_UpdateOptionNotes_P1));
+        body.append(' ');
+        body.append(format(decision));
+        body.append(NEW_LINE);
+        body.append(getResString(R.string.tmsg_UpdateOptionNotes_P2));
+        body.append(' ');
+        body.append(format(option));
+        body.append(' ');
+        body.append(getResString(R.string.tmsg_UpdateOptionNotes_P3));
+        body.append(NEW_LINE);
+        body.append(format(option.getNotes()));
+        return  buildMessage(MessageType.UPDATE_OPTION_NOTES, body.toString());
+    }
+
     @Override
     public String buildAddOptions(Decision decision, List<Option> options) {
         String body = buildAddDeleteOptionsMessage(decision,options,
@@ -270,7 +286,7 @@ private void addOptionsToMsg(List<Option> options, StringBuilder body) {
             if (o instanceof TextOption) {
                 body.append(',');
                 body.append(' ');
-                body.append(format(((TextOption)o).getLongDescription()));
+                body.append(format(((TextOption)o).getNotes()));
             }
             body.append(NEW_LINE);
         }
@@ -437,6 +453,35 @@ public DecisionOptionData getDeletedOption(String text, long groupChatId, int us
         return getAddDeleteOptionFromDecision(text, groupChatId, userId);
     }
 
+    @Override
+    public TextOption getNewOptionData(String msg, long groupChatId, int userId) throws PollgramParseException {
+        try {
+            StringTokenizer strTok = new EscapeStringTokenizer(msg);
+            strTok.nextToken();//skip this token
+            String title = strTok.nextToken();
+            Decision decision = pollgramDAO.getDecision(title, groupChatId);
+            if (decision == null)
+                throw new PollgramParseException("Decision not found for title [" + title + "]");
+            if (!decision.isEditable(userId))
+                throw new PollgramParseException("Decision is not editable by userid [" + userId + "]");
+
+            strTok.nextToken(); // skip this token
+            String optionTitle = strTok.nextToken();
+            TextOption option = (TextOption) pollgramDAO.getOption(optionTitle, decision);
+            if (option == null){
+                throw new PollgramParseException("Option not found for title["+optionTitle+"] in decision ["+decision+"]");
+            }
+            strTok.nextToken(); // skip this token
+            String optionNotes = strTok.nextToken();
+            option.setNotes(optionNotes);
+            return option;
+
+        } catch (NoSuchElementException e) {
+            Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
+            throw new PollgramParseException("Token not found", e);
+        }
+    }
+
     @NonNull
     private DecisionOptionData getAddDeleteOptionFromDecision(String msg, long currentChat, int userId) throws PollgramParseException {
         Decision decision;
@@ -559,6 +604,7 @@ private int getDecisionTitleStartIdx(MessageType type, String message){
             case REOPEN_DECISION:
             case ADD_OPTIONS:
             case DELETE_OPTIONS:
+            case UPDATE_OPTION_NOTES:
                 return message.indexOf(QUOTE_CHAR);
         }
         return  -1;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index c391cd699..142261af1 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -6,6 +6,7 @@
 
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
 import org.telegram.messenger.MessageObject;
@@ -81,6 +82,12 @@
      */
     void notifyNewOptions(Decision decision, List<Option> newOptions);
 
+    /**
+     * Notify that the long description of an option has been changed
+     * @param option
+     */
+    void notifyOptionUpdateLongDescription(TextOption option);
+
     /**
      * Notify to other groups members that some options has been deleted from decision
      * @param decision
@@ -179,4 +186,5 @@ Bundle getBundleForVotesManagerFragment(TLRPC.ChatFull info, MessageObject messa
                                             List<MessageObject> excludeMessages);
 
 
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index d1f37bcbe..f3ce73097 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -13,6 +13,7 @@
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.ParsedMessage;
+import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.ui.DecisionsListFragment;
@@ -153,6 +154,19 @@ public void notifyNewOptions(Decision decision, List<Option> newOptions) {
         sendMessage(decision.getChatId(), message);
     }
 
+    @Override
+    public void notifyOptionUpdateLongDescription(TextOption option) {
+        Log.d(LOG_TAG, "notifyOptionUpdateLongDescription option[" + option + "]");
+        Decision d = pollgramDAO.getDecision(option.getDecisionId());
+        if (d == null)
+            throw new PollgramDAOException("Decision not found for id ["+option.getDecisionId()+"]");
+
+        pollgramDAO.save(option);
+        String message = messageManager.buildUpdateOptionNotes(d, option);
+        sendMessage(d.getChatId(), message);
+
+    }
+
     @Override
     public void notifyDeleteOptions(Decision decision, List<Option> deleteOptions) {
         Log.d(LOG_TAG, "notifyDeleteOptions decision[" + decision + "] deleteOptions[" + deleteOptions + "]");
@@ -281,6 +295,12 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
                     break;
                 }
 
+                case UPDATE_OPTION_NOTES:{
+                    TextOption option = messageManager.getNewOptionData(text, groupChatId, userId);
+                    pollgramDAO.save(option);
+                    break;
+                }
+
                 case CLOSE_DECISION: {
                     PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(text,
                             groupChatId, userId);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
index dbec4ccae..00c6ea42e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
@@ -236,7 +236,7 @@ private void abortDecisionCreation() {
             return;
         }
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setMessage(getParentActivity().getString(R.string.abortDecisionCreation));
+        builder.setMessage(getParentActivity().getString(R.string.exitWithoutSaving));
         builder.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
             @Override
             public void onClick(DialogInterface dialog, int which) {
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
index 6c8567a92..7499e2e32 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/OptionDetailFragment.java
@@ -1,7 +1,10 @@
 package org.pollgram.decision.ui;
 
+import android.app.AlertDialog;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.os.Bundle;
+import android.text.Editable;
 import android.text.util.Linkify;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -10,12 +13,16 @@
 import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import org.pollgram.R;
+import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.service.PollgramFactory;
+import org.pollgram.decision.service.PollgramService;
 import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 
@@ -31,13 +38,17 @@
     public static final String PAR_NEGATIVE_VOTE_COUNT = "PAR_NEGATIVE_VOTE_COUNT";
 
     private static final String LOG_TAG = "OptionDetailFrame";
+    private static final int SAVE_MENU_ITEM_ID = 1;
 
+    private Decision decision;
     private TextOption option;
     private int missingVoteCount;
     private int positiveVoteCount;
     private int negativeVoteCount;
     private int voteCount;
     private int membersCount;
+    EditText edLongDesc;
+    private PollgramService service;
 
     public OptionDetailFragment(Bundle args) {
         super(args);
@@ -49,9 +60,11 @@ public boolean onFragmentCreate() {
         long decisionId = getArguments().getLong(PAR_DECISION_ID);
         int[] members = getArguments().getIntArray(PAR_PARTICIPANT_IDS);
 
-        UsersDecisionVotes usersDecisionVotes = PollgramFactory.getService().getUsersDecisionVotes(decisionId, members);
+        service = PollgramFactory.getService();
+        UsersDecisionVotes usersDecisionVotes = service.getUsersDecisionVotes(decisionId, members);
 
         option = (TextOption) usersDecisionVotes.getOption(optionId);
+        decision = usersDecisionVotes.getDecision();
         membersCount = usersDecisionVotes.getUsers().size();
         negativeVoteCount = getArguments().getInt(PAR_NEGATIVE_VOTE_COUNT);
         positiveVoteCount = getArguments().getInt(PAR_POSITIVE_VOTE_COUNT);
@@ -62,38 +75,61 @@ public boolean onFragmentCreate() {
     }
 
     @Override
-    public View createView(Context context) {
+    public View createView(final Context context) {
         actionBar.setTitle(context.getString(R.string.optionDetailTitle));
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == UIUtils.ACTION_BAR_BACK_ITEM_ID) {
-                    finishFragment();
-                    return;
-                } else
-                    Log.w(LOG_TAG, "unkown on item click id [" + id + "]");
-            }
-        });
-
+        final ActionBarMenuItem saveItemMenu = actionBar.createMenu().addItem(SAVE_MENU_ITEM_ID, 0);
+        saveItemMenu.setBackgroundResource(R.drawable.ic_done_white_36dp);
+        saveItemMenu.setVisibility(View.INVISIBLE);
 
         LayoutInflater layoutInflater = LayoutInflater.from(context);
         fragmentView = new SizeNotifierFrameLayout(context);
         View myView = layoutInflater.inflate(R.layout.option_detail_fragment, (ViewGroup) fragmentView);
 
         EditText edTitle = (EditText) myView.findViewById(R.id.option_detail_ed_title);
-        EditText edLongDesc = (EditText) myView.findViewById(R.id.option_detail_ed_notes);
+        edLongDesc = (EditText) myView.findViewById(R.id.option_detail_ed_notes);
         TextView tvMissing = (TextView) myView.findViewById(R.id.option_detail_tv_missing_votes_count);
         TextView tvPositive = (TextView) myView.findViewById(R.id.option_detail_tv_positive_votes_count);
         TextView tvNegative = (TextView) myView.findViewById(R.id.option_detail_tv_negative_votes_count);
         LinearLayout stackedBarContainer = (LinearLayout)myView.findViewById(R.id.option_detail_stacked_bar_layout_container);
 
-        StackedBar stackedBar = new StackedBar(context, membersCount, positiveVoteCount ,negativeVoteCount, true);
-        StackedBar.Percentages percentages = stackedBar.getPercentages();
+        edTitle.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Toast.makeText(context,R.string.titleNotEditable,Toast.LENGTH_SHORT).show();
+            }
+        });
+
+        edLongDesc.addTextChangedListener(new DefaultTextWatcher() {
+            @Override
+            public void afterTextChanged(Editable s) {
+                Linkify.addLinks(edLongDesc, Linkify.ALL);
+                boolean saveEnabled = decision.isEditable() && !s.toString().equals(option.getNotes());
+                saveItemMenu.setVisibility(saveEnabled ? View.VISIBLE : View.INVISIBLE);
+            }
+        });
+
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == UIUtils.ACTION_BAR_BACK_ITEM_ID) {
+                    myFinishFragment();
+                    return;
+                } else if (id == SAVE_MENU_ITEM_ID) {
+                    option.setNotes(edLongDesc.getText().toString());
+                    service.notifyOptionUpdateLongDescription(option);
+                    Toast.makeText(context,R.string.optionHasBeenSaved,Toast.LENGTH_SHORT).show();
+                    saveItemMenu.setVisibility(View.INVISIBLE);
+                } else
+                    Log.w(LOG_TAG, "unkown on item click id [" + id + "]");
+            }
+        });
+
         edTitle.setText(option.getTitle());
-        edLongDesc.setText(option.getLongDescription());
-        Linkify.addLinks(edLongDesc, Linkify.ALL);
+        edLongDesc.setText(option.getNotes());
 
+        StackedBar stackedBar = new StackedBar(context, membersCount, positiveVoteCount ,negativeVoteCount, true);
+        StackedBar.Percentages percentages = stackedBar.getPercentages();
         tvMissing.setText(context.getString(R.string.missingVoteDesc, missingVoteCount, percentages.emptyPerc * 100 ));
         tvPositive.setText(context.getString(R.string.positiveVoteDesc, positiveVoteCount, percentages.positivePerc * 100));
         tvNegative.setText(context.getString(R.string.negativeVoteDesc, negativeVoteCount, percentages.negativePerc * 100));
@@ -102,4 +138,33 @@ public void onItemClick(int id) {
 
         return fragmentView;
     }
+
+
+    private void myFinishFragment() {
+        if (edLongDesc.getText().toString().equals(option.getNotes())){
+            finishFragment();
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setMessage(getParentActivity().getString(R.string.exitWithoutSaving));
+        builder.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                finishFragment();
+            }
+        });
+        builder.setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                // do nothing
+            }
+        });
+        builder.show();
+    }
+
+    @Override
+    public boolean onBackPressed() {
+        myFinishFragment();
+        return false;
+    }
 }
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_save_white_24dp.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_save_white_24dp.png
new file mode 100644
index 000000000..dd3f10664
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_save_white_24dp.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_save_white_24dp.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_save_white_24dp.png
new file mode 100644
index 000000000..015062ed3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_save_white_24dp.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_save_white_24dp.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_save_white_24dp.png
new file mode 100644
index 000000000..adda09575
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_save_white_24dp.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_save_white_24dp.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_save_white_24dp.png
new file mode 100644
index 000000000..3e0ce1a5f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_save_white_24dp.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_save_white_24dp.png b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_save_white_24dp.png
new file mode 100644
index 000000000..bd80bf1f7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_save_white_24dp.png differ
diff --git a/TMessagesProj/src/main/res/layout/option_detail_fragment.xml b/TMessagesProj/src/main/res/layout/option_detail_fragment.xml
index a83268d92..a803ddbd9 100644
--- a/TMessagesProj/src/main/res/layout/option_detail_fragment.xml
+++ b/TMessagesProj/src/main/res/layout/option_detail_fragment.xml
@@ -60,8 +60,7 @@
             android:layout_alignParentRight="true"
             android:layout_alignParentStart="true"
             android:layout_below="@+id/option_detail_tv_notes"
-            android:textAppearance="?android:attr/textAppearanceSmall"
-            android:editable="false"/>
+            android:textAppearance="?android:attr/textAppearanceSmall" />
 
         <LinearLayout
             android:id="@+id/option_detail_tv_perc_layout"
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index bcc1b1498..3cf71ffde 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -1084,6 +1084,13 @@
     <!-- between Prefix and Suffix goes the decision title -->
     <string name="tmsg_DeleteOptionSuffix">le seguenti opzioni:</string>
 
+    <string name="tmsg_UpdateOptionNotes_P1">Nella decisione</string>
+    <!-- between here goes the decision title -->
+    <string name="tmsg_UpdateOptionNotes_P2">le nuove note del opzione</string>
+    <!-- between here goes the option title -->
+    <string name="tmsg_UpdateOptionNotes_P3">sono ora:</string>
+    <!-- after this goes the new option long description -->
+
     <!-- END of POLLGRAM transaction messages -->
 
     <!-- START MessageType descriptions -->
@@ -1095,6 +1102,7 @@
     <string name="MessageType_DELETE_DECISION">Cancellazione decisione</string>
     <string name="MessageType_ADD_OPTIONS">Aggiunta opzioni</string>
     <string name="MessageType_DELTE_OPTIONS">Cancellazione opzioni</string>
+    <string name="MessageType_UPDATE_OPTION_NOTES">Aggiorna note opzione</string>
     <!-- END MessageType descriptions -->
 
     <!-- Pollgram crash messages START -->
@@ -1186,7 +1194,7 @@
 
     <string name="createDecision">Crea nuova decisione</string>
     <string name="newDecisionFromMessageHeader">Messaggio da %2$s, %1$s:</string>
-    <string name="abortDecisionCreation">Interrompere la creazione della nuova decisione \?</string>
+    <string name="exitWithoutSaving">Uscire senza salvare ?</string>
     <string name="createOption">Utilizza come opzione</string>
     <string name="selectDecision">Seleziona una decisione</string>
     <string name="decisionsCreatedByYou">Seleziona in quale delle decisioni create da te aggiungere la nuova opzione.</string>
@@ -1195,12 +1203,13 @@
         \n\nSe vuoi aggiungere un opzione ad una decisione creata da qualcun altro, chiedoglielo semplicemente.</string>
     <string name="titleNotEditable">Il titolo non è modificabile.</string>
     <string name="longDescNotEditable">Le note non sono modificabili.</string>
+    <string name="youAreDecisionAdmin">Admin</string>
+    <string name="optionHasBeenSaved">Le note dell\'opzione sono state salvate</string>
     <!-- END of Pollgram text -->
 
     <!--update text-->
     <string name="updateText">Telegram per Android si è aggiornato. Nuovo nella versione 3.4.0:\n\nRivoluzione GIF: Invio e download 20 volte più veloci, autoriproduci e salva le tue preferite nel pannello sticker.\n\nPiù info sulle GIF:\nhttps://telegram.org/blog/gif-revolution\n\nBot Inline: Un nuovo modo di aggiungere contenuti in ogni chat. Menziona un bot e la tua domanda nel campo di scrittura e ottieni risultati immediati. Prova a scrivere “@gif dog” nella tua prossima chat. Bot di esempio: @gif, @wiki, @bing, @vid, @bold\n\nPiù info sui Bot Inline:\nhttps://telegram.org/blog/inline-bots</string>
     <string name="updateBuild">704</string>
-    <string name="youAreDecisionAdmin">Admin</string>
 
 
 
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index afc7a5908..1073facb6 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1086,6 +1086,14 @@
     <!-- between Prefix and Suffix goes the decision title -->
     <string name="tmsg_DeleteOptionSuffix">the following options:</string>
 
+    <string name="tmsg_UpdateOptionNotes_P1">In decision</string>
+    <!-- between here goes the decision title -->
+    <string name="tmsg_UpdateOptionNotes_P2">the new notes for option</string>
+    <!-- between here goes the option title -->
+    <string name="tmsg_UpdateOptionNotes_P3">are now:</string>
+    <!-- after this goes the new option long description -->
+
+
     <!-- END of POLLGRAM transaction messages -->
 
     <!-- START MessageType descriptions -->
@@ -1097,6 +1105,7 @@
     <string name="MessageType_DELETE_DECISION">Delete decision</string>
     <string name="MessageType_ADD_OPTIONS">Add options</string>
     <string name="MessageType_DELTE_OPTIONS">Delete options</string>
+    <string name="MessageType_UPDATE_OPTION_NOTES">Update option notes</string>
     <!-- END MessageType descriptions -->
 
     <!-- Pollgram crash messages START -->
@@ -1188,7 +1197,7 @@
         \n\nPres the \"plus\" button for creating a new decision.</string>
 
     <string name="createDecision">Create Decision</string>
-    <string name="abortDecisionCreation">Abort decision creation ?</string>
+    <string name="exitWithoutSaving">Exit without saving ?</string>
     <string name="newDecisionFromMessageHeader">Message from %2$s, %1$s:</string>
     <string name="createOption">Use as Option</string>
     <string name="selectDecision">Select a decision</string>
@@ -1199,7 +1208,7 @@
     <string name="titleNotEditable">Title is not editable.</string>
     <string name="longDescNotEditable">Notes are not editable.</string>
     <string name="youAreDecisionAdmin">Admin</string>
-
+    <string name="optionHasBeenSaved">Option notes has been saved.</string>
 
     <!-- END of Pollgram text -->
 
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
index ed5d88371..a245bc6e9 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
@@ -260,8 +260,25 @@ public void testDeleteOptions() throws  PollgramParseException {
 
     private void assertDeleteOptions(String message, Decision decision, List<Option> optionToDelte) throws PollgramParseException {
         PollgramMessagesManager.DecisionOptionData result = messageManager.getDeletedOption(message, chat.id, user.id);
-        Assert.assertEquals(decision,result.decision);
+        Assert.assertEquals(decision, result.decision);
         Assert.assertEquals(optionToDelte, result.optionList);
     }
 
+    @Test
+    public void testUpdateOptionDescription() throws PollgramParseException {
+        TextOption textOption = (TextOption) dao.getOptions(decision).get(0);
+        textOption.setNotes("A new Note it's a great idea");
+        String message = messageManager.buildUpdateOptionNotes(decision,textOption);
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
+        Assert.assertEquals(PollgramMessagesManager.MessageType.UPDATE_OPTION_NOTES, type);
+        assertUpdateOption(message, textOption);
+        assertUpdateOption(messageManager.reformatMessage(message), textOption);
+    }
+
+    private void assertUpdateOption(String message, TextOption textOption) throws PollgramParseException {
+        TextOption fromMsg = messageManager.getNewOptionData(message, chat.id, user.id);
+        Assert.assertEquals(textOption, fromMsg);
+
+    }
+
 }
\ No newline at end of file
