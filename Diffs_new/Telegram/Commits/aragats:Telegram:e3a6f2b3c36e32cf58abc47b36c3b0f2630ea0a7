diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index a031f910a..d5b634181 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -153,8 +153,6 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     public int wifiDownloadMask = 0;
     public int roamingDownloadMask = 0;
     private int lastCheckMask = 0;
-    private ArrayList<DownloadObject> photoDownloadQueue = new ArrayList<>();
-    private HashMap<String, DownloadObject> downloadQueueKeys = new HashMap<>();
 
     private boolean saveToGallery = true;
 
@@ -292,8 +290,6 @@ public void onReceive(Context context, Intent intent) {
 
 
     public void cleanup() {
-        photoDownloadQueue.clear();
-        downloadQueueKeys.clear();
         typingTimes.clear();
     }
 
@@ -311,16 +307,6 @@ public void checkAutodownloadSettings() {
             return;
         }
         lastCheckMask = currentMask;
-        if ((currentMask & AUTODOWNLOAD_MASK_PHOTO) != 0) {
-            if (photoDownloadQueue.isEmpty()) {
-                newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_PHOTO);
-            }
-        } else {
-            for (DownloadObject downloadObject : photoDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.PhotoSize)downloadObject.object);
-            }
-            photoDownloadQueue.clear();
-        }
 
         int mask = getAutodownloadMask();
         if (mask == 0) {
@@ -336,6 +322,7 @@ public boolean canDownloadMedia(int type) {
         return (getCurrentDownloadMask() & type) != 0;
     }
 
+    //TODO NEED
     private int getCurrentDownloadMask() {
         if (ConnectionsManager.isConnectedToWiFi()) {
             return wifiDownloadMask;
@@ -350,56 +337,43 @@ protected void processDownloadObjects(int type, ArrayList<DownloadObject> object
         if (objects.isEmpty()) {
             return;
         }
-        ArrayList<DownloadObject> queue = null;
-        if (type == AUTODOWNLOAD_MASK_PHOTO) {
-            queue = photoDownloadQueue;
-        }
-        for (DownloadObject downloadObject : objects) {
-            String path = FileLoader.getAttachFileName(downloadObject.object);
-            if (downloadQueueKeys.containsKey(path)) {
-                continue;
-            }
-
-            boolean added = true;
-            if (downloadObject.object instanceof TLRPC.Audio) {
-                FileLoader.getInstance().loadFile((TLRPC.Audio)downloadObject.object, false);
-            } else if (downloadObject.object instanceof TLRPC.PhotoSize) {
-                FileLoader.getInstance().loadFile((TLRPC.PhotoSize)downloadObject.object, null, false);
-            } else if (downloadObject.object instanceof TLRPC.Video) {
-                FileLoader.getInstance().loadFile((TLRPC.Video)downloadObject.object, false);
-            } else if (downloadObject.object instanceof TLRPC.Document) {
-                FileLoader.getInstance().loadFile((TLRPC.Document)downloadObject.object, false, false);
-            } else {
-                added = false;
-            }
-            if (added) {
-                queue.add(downloadObject);
-                downloadQueueKeys.put(path, downloadObject);
-            }
-        }
-    }
-
-    protected void newDownloadObjectsAvailable(int downloadMask) {
-        int mask = getCurrentDownloadMask();
-        if ((mask & AUTODOWNLOAD_MASK_PHOTO) != 0 && (downloadMask & AUTODOWNLOAD_MASK_PHOTO) != 0 && photoDownloadQueue.isEmpty()) {
-            MessagesStorage.getInstance().getDownloadQueue(AUTODOWNLOAD_MASK_PHOTO);
-        }
+//        ArrayList<DownloadObject> queue = null;
+//        if (type == AUTODOWNLOAD_MASK_PHOTO) {
+//            queue = photoDownloadQueue;
+//        }
+//        for (DownloadObject downloadObject : objects) {
+//            String path = FileLoader.getAttachFileName(downloadObject.object);
+//            if (downloadQueueKeys.containsKey(path)) {
+//                continue;
+//            }
+//
+////            boolean added = true;
+////            if (downloadObject.object instanceof TLRPC.PhotoSize) {
+////                FileLoader.getInstance().loadFile((TLRPC.PhotoSize)downloadObject.object, null, false);
+////            } else {
+////                added = false;
+////            }
+////            if (added) {
+////                queue.add(downloadObject);
+////                downloadQueueKeys.put(path, downloadObject);
+////            }
+//        }
     }
 
     private void checkDownloadFinished(String fileName, int state) {
-        DownloadObject downloadObject = downloadQueueKeys.get(fileName);
-        if (downloadObject != null) {
-            downloadQueueKeys.remove(fileName);
-            if (state == 0 || state == 2) {
-                MessagesStorage.getInstance().removeFromDownloadQueue(downloadObject.id, downloadObject.type, false /*state != 0*/);
-            }
-            if (downloadObject.type == AUTODOWNLOAD_MASK_PHOTO) {
-                photoDownloadQueue.remove(downloadObject);
-                if (photoDownloadQueue.isEmpty()) {
-                    newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_PHOTO);
-                }
-            }
-        }
+//        DownloadObject downloadObject = downloadQueueKeys.get(fileName);
+//        if (downloadObject != null) {
+//            downloadQueueKeys.remove(fileName);
+//            if (state == 0 || state == 2) {
+//                MessagesStorage.getInstance().removeFromDownloadQueue(downloadObject.id, downloadObject.type, false /*state != 0*/);
+//            }
+//            if (downloadObject.type == AUTODOWNLOAD_MASK_PHOTO) {
+//                photoDownloadQueue.remove(downloadObject);
+//                if (photoDownloadQueue.isEmpty()) {
+//                    newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_PHOTO);
+//                }
+//            }
+//        }
     }
 
     public void startMediaObserver() {
@@ -771,47 +745,6 @@ public static boolean isWebp(Uri uri) {
 
 
 
-    public static String copyDocumentToCache(Uri uri, String ext) {
-        ParcelFileDescriptor parcelFD = null;
-        FileInputStream input = null;
-        FileOutputStream output = null;
-        try {
-            int id = UserConfig.lastLocalId;
-            UserConfig.lastLocalId--;
-            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-            input = new FileInputStream(parcelFD.getFileDescriptor());
-            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), String.format(Locale.US, "%d.%s", id, ext));
-            output = new FileOutputStream(f);
-            input.getChannel().transferTo(0, input.getChannel().size(), output.getChannel());
-            UserConfig.saveConfig(false);
-            return f.getAbsolutePath();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        } finally {
-            try {
-                if (parcelFD != null) {
-                    parcelFD.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (input != null) {
-                    input.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (output != null) {
-                    output.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-        }
-        return null;
-    }
 
     public void toggleSaveToGallery() {
         saveToGallery = !saveToGallery;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 5976ed3df..a7646f15d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -46,7 +46,6 @@
     private ArrayList<Action> actionQueue = new ArrayList<>();
 
     private ArrayList<Integer> unknownDatacenterIds = new ArrayList<>();
-    private ArrayList<Integer> neededDatacenterIds = new ArrayList<>();
     private ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<>();
     private final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<>();
 
@@ -498,36 +497,6 @@ public void cancelRpcsForClassGuid(int guid) {
         }
     }
 
-    public void bindRequestToGuid(final Long request, final int guid) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                ArrayList<Long> requests = requestsByGuids.get(guid);
-                if (requests != null) {
-                    requests.add(request);
-                    requestsByClass.put(request, guid);
-                }
-            }
-        });
-    }
-
-    public void removeRequestInClass(final Long request) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                Integer guid = requestsByClass.get(request);
-                if (guid != null) {
-                    ArrayList<Long> requests = requestsByGuids.get(guid);
-                    if (requests != null) {
-                        requests.remove(request);
-                    }
-                }
-            }
-        });
-    }
-
-
-
 
     public void cancelRpc(final long token, final boolean notifyServer) {
         cancelRpc(token, notifyServer, false);
@@ -583,6 +552,7 @@ public void run() {
         });
     }
 
+    //TODO NEED
     public static boolean isNetworkOnline() {
         try {
             ConnectivityManager cm = (ConnectivityManager) ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 2860c3cc9..9c9aedd4b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -94,189 +94,7 @@ public File getDirectory(int type) {
         return dir;
     }
 
-    public void cancelUploadFile(final String location, final boolean enc) {
-        fileLoaderQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                FileUploadOperation operation;
-                if (!enc) {
-                    operation = uploadOperationPaths.get(location);
-                } else {
-                    operation = uploadOperationPathsEnc.get(location);
-                }
-                uploadSizes.remove(location);
-                if (operation != null) {
-                    uploadOperationQueue.remove(operation);
-                    uploadSmallOperationQueue.remove(operation);
-                    operation.cancel();
-                }
-            }
-        });
-    }
-
-    public void checkUploadNewDataAvailable(final String location, final boolean encrypted, final long finalSize) {
-        fileLoaderQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                FileUploadOperation operation;
-                if (encrypted) {
-                    operation = uploadOperationPathsEnc.get(location);
-                } else {
-                    operation = uploadOperationPaths.get(location);
-                }
-                if (operation != null) {
-                    operation.checkNewDataAvailable(finalSize);
-                } else if (finalSize != 0) {
-                    uploadSizes.put(location, finalSize);
-                }
-            }
-        });
-    }
-
-    public void uploadFile(final String location, final boolean encrypted, final boolean small) {
-        uploadFile(location, encrypted, small, 0);
-    }
-
-    public void uploadFile(final String location, final boolean encrypted, final boolean small, final int estimatedSize) {
-        if (location == null) {
-            return;
-        }
-        fileLoaderQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (encrypted) {
-                    if (uploadOperationPathsEnc.containsKey(location)) {
-                        return;
-                    }
-                } else {
-                    if (uploadOperationPaths.containsKey(location)) {
-                        return;
-                    }
-                }
-                int esimated = estimatedSize;
-                if (esimated != 0) {
-                    Long finalSize = uploadSizes.get(location);
-                    if (finalSize != null) {
-                        esimated = 0;
-                        uploadSizes.remove(location);
-                    }
-                }
-                FileUploadOperation operation = new FileUploadOperation(location, encrypted, esimated);
-                if (encrypted) {
-                    uploadOperationPathsEnc.put(location, operation);
-                } else {
-                    uploadOperationPaths.put(location, operation);
-                }
-                operation.delegate = new FileUploadOperation.FileUploadOperationDelegate() {
-                    @Override
-                    public void didFinishUploadingFile(FileUploadOperation operation, final TLRPC.InputFile inputFile, final TLRPC.InputEncryptedFile inputEncryptedFile, final byte[] key, final byte[] iv) {
-                        fileLoaderQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (encrypted) {
-                                    uploadOperationPathsEnc.remove(location);
-                                } else {
-                                    uploadOperationPaths.remove(location);
-                                }
-                                if (small) {
-                                    currentUploadSmallOperationsCount--;
-                                    if (currentUploadSmallOperationsCount < 1) {
-                                        FileUploadOperation operation = uploadSmallOperationQueue.poll();
-                                        if (operation != null) {
-                                            currentUploadSmallOperationsCount++;
-                                            operation.start();
-                                        }
-                                    }
-                                } else {
-                                    currentUploadOperationsCount--;
-                                    if (currentUploadOperationsCount < 1) {
-                                        FileUploadOperation operation = uploadOperationQueue.poll();
-                                        if (operation != null) {
-                                            currentUploadOperationsCount++;
-                                            operation.start();
-                                        }
-                                    }
-                                }
-                                if (delegate != null) {
-                                    delegate.fileDidUploaded(location, inputFile, inputEncryptedFile, key, iv);
-                                }
-                            }
-                        });
-                    }
-
-                    @Override
-                    public void didFailedUploadingFile(final FileUploadOperation operation) {
-                        fileLoaderQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (encrypted) {
-                                    uploadOperationPathsEnc.remove(location);
-                                } else {
-                                    uploadOperationPaths.remove(location);
-                                }
-                                if (delegate != null) {
-                                    delegate.fileDidFailedUpload(location, encrypted);
-                                }
-                                if (small) {
-                                    currentUploadSmallOperationsCount--;
-                                    if (currentUploadSmallOperationsCount < 1) {
-                                        FileUploadOperation operation = uploadSmallOperationQueue.poll();
-                                        if (operation != null) {
-                                            currentUploadSmallOperationsCount++;
-                                            operation.start();
-                                        }
-                                    }
-                                } else {
-                                    currentUploadOperationsCount--;
-                                    if (currentUploadOperationsCount < 1) {
-                                        FileUploadOperation operation = uploadOperationQueue.poll();
-                                        if (operation != null) {
-                                            currentUploadOperationsCount++;
-                                            operation.start();
-                                        }
-                                    }
-                                }
-                            }
-                        });
-                    }
-
-                    @Override
-                    public void didChangedUploadProgress(FileUploadOperation operation, final float progress) {
-                        if (delegate != null) {
-                            delegate.fileUploadProgressChanged(location, progress, encrypted);
-                        }
-                    }
-                };
-                if (small) {
-                    if (currentUploadSmallOperationsCount < 1) {
-                        currentUploadSmallOperationsCount++;
-                        operation.start();
-                    } else {
-                        uploadSmallOperationQueue.add(operation);
-                    }
-                } else {
-                    if (currentUploadOperationsCount < 1) {
-                        currentUploadOperationsCount++;
-                        operation.start();
-                    } else {
-                        uploadOperationQueue.add(operation);
-                    }
-                }
-            }
-        });
-    }
-
-    public void cancelLoadFile(TLRPC.Video video) {
-        cancelLoadFile(video, null, null, null, null);
-    }
-
-    public void cancelLoadFile(TLRPC.Document document) {
-        cancelLoadFile(null, document, null, null, null);
-    }
 
-    public void cancelLoadFile(TLRPC.Audio audio) {
-        cancelLoadFile(null, null, audio, null, null);
-    }
 
     public void cancelLoadFile(TLRPC.PhotoSize photo) {
         cancelLoadFile(null, null, null, photo.location, null);
@@ -340,156 +158,6 @@ public void run() {
         return result[0];
     }
 
-    public void loadFile(TLRPC.Video video, boolean force) {
-        loadFile(video, null, null, null, null, 0, force, video != null && video.key != null);
-    }
-
-    public void loadFile(TLRPC.PhotoSize photo, String ext, boolean cacheOnly) {
-        loadFile(null, null, null, photo.location, ext, photo.size, false, cacheOnly || (photo != null && photo.size == 0 || photo.location.key != null));
-    }
-
-    public void loadFile(TLRPC.Document document, boolean force, boolean cacheOnly) {
-        loadFile(null, document, null, null, null, 0, force, cacheOnly || document != null && document.key != null);
-    }
-
-    public void loadFile(TLRPC.Audio audio, boolean force) {
-        loadFile(null, null, audio, null, null, 0, false, audio != null && audio.key != null);
-    }
-
-    public void loadFile(TLRPC.FileLocation location, String ext, int size, boolean cacheOnly) {
-        loadFile(null, null, null, location, ext, size, true, cacheOnly || size == 0 || (location != null && location.key != null));
-    }
-
-    private void loadFile(final TLRPC.Video video, final TLRPC.Document document, final TLRPC.Audio audio, final TLRPC.FileLocation location, final String locationExt, final int locationSize, final boolean force, final boolean cacheOnly) {
-        fileLoaderQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                String fileName = null;
-                if (video != null) {
-                    fileName = getAttachFileName(video);
-                } else if (location != null) {
-                    fileName = getAttachFileName(location, locationExt);
-                } else if (document != null) {
-                    fileName = getAttachFileName(document);
-                } else if (audio != null) {
-                    fileName = getAttachFileName(audio);
-                }
-                if (fileName == null || fileName.contains("" + Integer.MIN_VALUE)) {
-                    return;
-                }
-
-                FileLoadOperation operation;
-                operation = loadOperationPaths.get(fileName);
-                if (operation != null) {
-                    if (force) {
-                        LinkedList<FileLoadOperation> downloadQueue;
-                        if (audio != null) {
-                            downloadQueue = audioLoadOperationQueue;
-                        } else if (location != null) {
-                            downloadQueue = photoLoadOperationQueue;
-                        } else {
-                            downloadQueue = loadOperationQueue;
-                        }
-                        if (downloadQueue != null) {
-                            int index = downloadQueue.indexOf(operation);
-                            if (index != -1) {
-                                downloadQueue.remove(index);
-                                downloadQueue.add(0, operation);
-                                operation.setForceRequest(true);
-                            }
-                        }
-                    }
-                    return;
-                }
-
-                File tempDir = getDirectory(MEDIA_DIR_CACHE);
-                File storeDir = tempDir;
-                int type = MEDIA_DIR_CACHE;
-
-                if (video != null) {
-                    operation = new FileLoadOperation(video);
-                    type = MEDIA_DIR_VIDEO;
-                } else if (location != null) {
-                    operation = new FileLoadOperation(location, locationExt, locationSize);
-                    type = MEDIA_DIR_IMAGE;
-                } else if (document != null) {
-                    operation = new FileLoadOperation(document);
-                    type = MEDIA_DIR_DOCUMENT;
-                } else if (audio != null) {
-                    operation = new FileLoadOperation(audio);
-                    type = MEDIA_DIR_AUDIO;
-                }
-                if (!cacheOnly) {
-                    storeDir = getDirectory(type);
-                }
-                operation.setPaths(storeDir, tempDir);
-
-                final String finalFileName = fileName;
-                final int finalType = type;
-                loadOperationPaths.put(fileName, operation);
-                operation.setDelegate(new FileLoadOperation.FileLoadOperationDelegate() {
-                    @Override
-                    public void didFinishLoadingFile(FileLoadOperation operation, File finalFile) {
-                        if (delegate != null) {
-                            delegate.fileDidLoaded(finalFileName, finalFile, finalType);
-                        }
-                        checkDownloadQueue(audio, location, finalFileName);
-                    }
-
-                    @Override
-                    public void didFailedLoadingFile(FileLoadOperation operation, int canceled) {
-                        checkDownloadQueue(audio, location, finalFileName);
-                        if (delegate != null) {
-                            delegate.fileDidFailedLoad(finalFileName, canceled);
-                        }
-                    }
-
-                    @Override
-                    public void didChangedLoadProgress(FileLoadOperation operation, float progress) {
-                        if (delegate != null) {
-                            delegate.fileLoadProgressChanged(finalFileName, progress);
-                        }
-                    }
-                });
-                int maxCount = force ? 3 : 1;
-                if (audio != null) {
-                    if (currentAudioLoadOperationsCount < maxCount) {
-                        currentAudioLoadOperationsCount++;
-                        operation.start();
-                    } else {
-                        if (force) {
-                            audioLoadOperationQueue.add(0, operation);
-                        } else {
-                            audioLoadOperationQueue.add(operation);
-                        }
-                    }
-                } else if (location != null) {
-                    if (currentPhotoLoadOperationsCount < maxCount) {
-                        currentPhotoLoadOperationsCount++;
-                        operation.start();
-                    } else {
-                        if (force) {
-                            photoLoadOperationQueue.add(0, operation);
-                        } else {
-                            photoLoadOperationQueue.add(operation);
-                        }
-                    }
-                } else {
-                    if (currentLoadOperationsCount < maxCount) {
-                        currentLoadOperationsCount++;
-                        operation.start();
-                    } else {
-                        if (force) {
-                            loadOperationQueue.add(0, operation);
-                        } else {
-                            loadOperationQueue.add(operation);
-                        }
-                    }
-                }
-            }
-        });
-    }
-
     private void checkDownloadQueue(final TLRPC.Audio audio, final TLRPC.FileLocation location, final String arg1) {
         fileLoaderQueue.postRunnable(new Runnable() {
             @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index 14c2811a8..01fe60f65 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -13,10 +13,8 @@
 
 import java.io.File;
 import java.io.FileInputStream;
-import java.math.BigInteger;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
-import java.util.Locale;
 
 public class FileUploadOperation {
     private int uploadChunkSize = 1024 * 32;
