diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index bde5e8e5d..0d0a60f31 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -25,6 +25,8 @@
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.Date;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
@@ -33,6 +35,8 @@
 import retrofit.Response;
 import retrofit.Retrofit;
 import ru.aragats.wgo.ApplicationLoader;
+import ru.aragats.wgo.comparator.PostDateComparator;
+import ru.aragats.wgo.converter.vk.VKPhotoResponseToPostListConverter;
 import ru.aragats.wgo.dto.Coordinates;
 import ru.aragats.wgo.dto.FileUploadRequest;
 import ru.aragats.wgo.dto.Image;
@@ -41,11 +45,10 @@
 import ru.aragats.wgo.dto.PostResponse;
 import ru.aragats.wgo.dto.User;
 import ru.aragats.wgo.dto.Venue;
+import ru.aragats.wgo.dto.vk.VKPhotoResponse;
 import ru.aragats.wgo.rest.manager.RestManager;
 import ru.aragats.wgo.rest.mock.PostServiceMock;
 import ru.aragats.wgo.rest.mock.UserServiceMock;
-import ru.aragats.wgo.converter.vk.VKPhotoResponseToPostListConverter;
-import ru.aragats.wgo.dto.vk.VKPhotoResponse;
 
 //import org.telegram.messenger.TLRPC;
 
@@ -57,7 +60,7 @@
     private Venue lastVenue;
 
     private List<Post> posts = new ArrayList<>();
-//    public ConcurrentHashMap<String, Post> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
+    public ConcurrentHashMap<String, Post> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
 
     private boolean loadingPosts = false;
 
@@ -296,6 +299,7 @@ public void onResponse(Response<VKPhotoResponse> response, Retrofit retrofit) {
                     postResponse.setPosts(new ArrayList<Post>());
                 }
 
+                postResponse.setSource("VK");
                 processLoadedPosts(postResponse, reload);
             }
 
@@ -328,11 +332,19 @@ public void loadPostsMock(final int offset, final int count, boolean reload) {
     public void processLoadedPosts(PostResponse postResponse, boolean reload) {
         if (reload) {
             posts.clear();
+            postsMap.clear();
         }
         posts.addAll(postResponse.getPosts());
-//        for (Post post : posts) {
-//            postsMap.putIfAbsent(post.getId(), post);
-//        }
+        //TODO this exclude duplicated post from VK. because VK do not return specified count of posts.
+        for (Post post : postResponse.getPosts()) {
+            postsMap.putIfAbsent(post.getId(), post);
+        }
+        //TODO rethink ti. not the best solution for VK. VK do not return specified number of posts !! !
+        if (postResponse.getSource() != null && postResponse.getSource().equals("VK")) {
+            posts.clear();
+            posts.addAll(postsMap.values());
+            Collections.sort(posts, new PostDateComparator());
+        }
         loadingPosts = false;
         //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
         if (!postResponse.getPosts().isEmpty() || reload) {
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDateComparator.java b/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDateComparator.java
new file mode 100644
index 000000000..3ce11e17f
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/comparator/PostDateComparator.java
@@ -0,0 +1,15 @@
+package ru.aragats.wgo.comparator;
+
+import java.util.Comparator;
+
+import ru.aragats.wgo.dto.Post;
+
+/**
+ * Created by aragats on 05/03/16.
+ */
+public class PostDateComparator implements Comparator<Post> {
+    @Override
+    public int compare(Post lhs, Post rhs) {
+        return (int) (rhs.getCreatedDate() - lhs.getCreatedDate());
+    }
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/AbstractConverter.java b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/AbstractConverter.java
index 9492e31ef..c63f58ae9 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/AbstractConverter.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/AbstractConverter.java
@@ -29,7 +29,10 @@ public T convert(S source) {
         List<T> result = new ArrayList<>();
         for (S src : sources) {
             if (src != null) {
-                result.add(convert(src));
+                T target = convert(src);
+                if (target != null) {
+                    result.add(target);
+                }
             }
         }
         return result;
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java
index e003b76db..9f5b04f73 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/PhotoItemToPostConverter.java
@@ -19,7 +19,11 @@
 public class PhotoItemToPostConverter extends AbstractConverter<PhotoItem, Post> {
     @Override
     public Post convertIntern(PhotoItem source) {
-        //TODO validate height width and url if we can not build Post then return null and exlude it from the post list.
+        //TODO validate height width and url if we can not build Post then return null and exclude it from the post list.
+        if (source.getHeight() == null || source.getWidth() == null || StringUtils.isEmpty(source.getPhoto604())
+                || StringUtils.isEmpty(source.getPhoto807()) || StringUtils.isEmpty(source.getPhoto1280())) {
+            return null;
+        }
         Post result = new Post();
         result.setId("" + source.getId());
         result.setCreatedDate(((long) source.getDate() * 1000));
@@ -36,7 +40,6 @@ public Post convertIntern(PhotoItem source) {
 
         List<Image> images = new ArrayList<>();
         Image previewImage = new Image();
-        //TODO if height or width  == 0 then throw this item
         previewImage.setHeight(source.getHeight());
         previewImage.setWidth(source.getWidth());
         previewImage.setUrl(source.getPhoto604());
@@ -46,11 +49,7 @@ public Post convertIntern(PhotoItem source) {
         Image image = new Image();
         image.setHeight(source.getHeight());
         image.setWidth(source.getWidth());
-        if(!StringUtils.isEmpty(source.getPhoto1280())) {
-            image.setUrl(source.getPhoto1280());
-        } else {
-            image.setUrl(source.getPhoto604());
-        }
+        image.setUrl(source.getPhoto1280());
         images.add(image);
 
 
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java
index 1ad48d94b..92e7b75df 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/converter/vk/VKPhotoResponseToPostListConverter.java
@@ -21,14 +21,7 @@
         if (source.getCount() == 0) {
             return result;
         }
-        for (PhotoItem photoItem : source.getItems()) {
-            try {
-                result.add(photoItemToPostConverter.convert(photoItem));
-            } catch (NullPointerException ex) {
-                ex.printStackTrace();
-                // TODO handle exception
-            }
-        }
+        result.addAll(photoItemToPostConverter.convert(source.getItems()));
         return result;
 
     }
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/PostResponse.java b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/PostResponse.java
index f348c1466..8fc08bedb 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/PostResponse.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/PostResponse.java
@@ -10,6 +10,8 @@
 public class PostResponse {
     private List<Post> posts = new ArrayList<>();
     private String error;
+    //TODO make it enum !!
+    private String source;
 
 
     public List<Post> getPosts() {
@@ -27,4 +29,12 @@ public String getError() {
     public void setError(String error) {
         this.error = error;
     }
+
+    public String getSource() {
+        return source;
+    }
+
+    public void setSource(String source) {
+        this.source = source;
+    }
 }
