diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
index f4613c927..376c6e5d1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
@@ -27,6 +27,7 @@
 
 import org.eclipse.paho.android.service.MqttAndroidClient;
 import org.eclipse.paho.client.mqttv3.IMqttActionListener;
+import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
 import org.eclipse.paho.client.mqttv3.IMqttToken;
 import org.eclipse.paho.client.mqttv3.MqttException;
 import org.json.JSONObject;
@@ -1271,37 +1272,9 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         if (!searchLinks) {
                             reqSend.no_webpage = true;
                         }
-                        performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
-                        JSONObject jsonMessageObject = new JSONObject();
-                        String packetId = null;
-                        String timestamp = Utils.getTimeStamp();
-
-                        try {
-                            jsonMessageObject.put("packet_type", "message");
-                            jsonMessageObject.put("to", "18271");
-                            jsonMessageObject.put("from", "+989122335645");
-                            jsonMessageObject.put("from_userid","102015");
-                            jsonMessageObject.put("messageBody", newMsg.message);
-                            jsonMessageObject.put("messageType", MessageContentTypeProvider.MessageContentType.TEXT.ordinal());
-                            jsonMessageObject.put("messageTypeDesc", "");
-                            jsonMessageObject.put("timestamp", timestamp);
-                            jsonMessageObject.put("groupAlias", "aa");
-                            jsonMessageObject.put("isForward", false);
-                            jsonMessageObject.put( "channeltitle", "");
-                            jsonMessageObject.put("channelhashcode", "");
-                            jsonMessageObject.put("orginalpachetid", "");
-
-                            //jsonMessageObject.put("groupOwnerId",groupOwnerId);
-                            jsonMessageObject.put("isGroupChat", 1);
-                            jsonMessageObject.put("channel_view", "1");
-                            packetId = Utils.makePacketId("102015");
-                            jsonMessageObject.put("packetId", packetId);
 
-                        } catch (Exception e) {
-                            // TODO Auto-generated catch block
-                            e.printStackTrace();
-                        }
-                        performSendMessageRequestSalam("groups/" + "s18271:102015", jsonMessageObject.toString());
+                        //performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
+                        performSendMessageRequestSalam(newMsgObj.messageOwner, null);
                        // jobManager.addJobInBackground(new PublishToTopicJob(jsonMessageObject.toString(), "groups/" + "s18271:102015"));
                     }
                 } else {
@@ -1962,37 +1935,207 @@ public void run() {
         });
     }
 
-    public  void performSendMessageRequestSalam(String topicName, String jsonMessageString) {
+    public  void performSendMessageRequestSalam(final TLRPC.Message newMsgObj, final String originalPath) {
 
         int qos = 1;
         boolean retained = false;
         String clientHandle = null;
-        clientHandle = "user102015";
+        clientHandle = "user14";
+        final Boolean[] isSentToMqtt = {false};
+        IMqttDeliveryToken token;
+
+        isSentToMqtt[0] =false;
+        JSONObject jsonMessageObject = new JSONObject();
+        String packetId = null;
+        String timestamp = Utils.getTimeStamp();
+        String topicName = "groups/" + "s18271:102015";
+        try {
+            jsonMessageObject.put("packet_type", "message");
+            jsonMessageObject.put("to", "18271");
+            jsonMessageObject.put("from", "+989122335645");
+            jsonMessageObject.put("from_userid","14");
+            jsonMessageObject.put("messageBody", newMsgObj.message);
+            jsonMessageObject.put("messageType", MessageContentTypeProvider.MessageContentType.TEXT.ordinal());
+            jsonMessageObject.put("messageTypeDesc", "");
+            jsonMessageObject.put("timestamp", timestamp);
+            jsonMessageObject.put("groupAlias", "aa");
+            jsonMessageObject.put("isForward", false);
+            jsonMessageObject.put( "channeltitle", "");
+            jsonMessageObject.put("channelhashcode", "");
+            jsonMessageObject.put("orginalpachetid", "");
+
+            //jsonMessageObject.put("groupOwnerId",groupOwnerId);
+            jsonMessageObject.put("isGroupChat", 1);
+            jsonMessageObject.put("channel_view", "1");
+            packetId = Utils.makePacketId("14");
+            jsonMessageObject.put("packetId", packetId);
+
+        } catch (Exception e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+
         MqttAndroidClient client = Connections.getInstance(ApplicationLoader.getInstance().getApplicationContext()).getConnection(clientHandle).getClient();
 
         try {
-            client.publish(topicName, jsonMessageString.getBytes(), qos, retained, null, new IMqttActionListener() {
-
-                @Override
-                public void onSuccess(IMqttToken arg0) {
 
+            int i = 0;
+            for (i=0; i<3; i++) {
+                token = client.publish(topicName, jsonMessageObject.toString().getBytes(), qos, retained, null, new IMqttActionListener() {
 
-                }
+                    @Override
+                    public void onSuccess(IMqttToken arg0) {
+                        isSentToMqtt[0] = true;
+                        performAfterSendingSalam (newMsgObj, originalPath, !isSentToMqtt[0]);
+                    }
 
-                @Override
-                public void onFailure(IMqttToken arg0, Throwable arg1) {
+                    @Override
+                    public void onFailure(IMqttToken arg0, Throwable arg1) {
+                        isSentToMqtt[0] = false;
+                        performAfterSendingSalam (newMsgObj, originalPath, !isSentToMqtt[0]);
+                    }
 
+                });
 
-                }
-            });
+                if (token!=null) break;
+            }
 
-            client.close();
+            //client.close();
         } catch (MqttException e) {
             e.printStackTrace();
         }
-
     }
 
+    public void performAfterSendingSalam(final TLRPC.Message newMsgObj, final String originalPath, final boolean isError){
+
+        putToSendingMessages(newMsgObj);
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                boolean isSentError = isError;
+                if (!isSentError) {
+                    final int oldId = newMsgObj.id;
+                    //final boolean isBroadcast = req instanceof TLRPC.TL_messages_sendBroadcast;
+                    final boolean isBroadcast = false;
+                    final ArrayList<TLRPC.Message> sentMessages = new ArrayList<>();
+                    final String attachPath = newMsgObj.attachPath;
+                            /*if (response instanceof TLRPC.TL_updateShortSentMessage) {*/
+                    //final TLRPC.TL_updateShortSentMessage res = (TLRPC.TL_updateShortSentMessage) response;
+                    //newMsgObj.local_id = newMsgObj.id = res.id;
+                    newMsgObj.local_id = newMsgObj.id = Utils.lastIdIncrement(ApplicationLoader.getInstance().getApplicationContext());
+
+/*                                newMsgObj.date = res.date;
+                                newMsgObj.entities = res.entities;
+                                newMsgObj.out = res.out;
+                                if (res.media != null) {
+                                    newMsgObj.media = res.media;
+                                    newMsgObj.flags |= TLRPC.MESSAGE_FLAG_HAS_MEDIA;
+                                }
+                                if (!newMsgObj.entities.isEmpty()) {
+                                    newMsgObj.flags |= TLRPC.MESSAGE_FLAG_HAS_ENTITIES;
+                                }*/
+/*                                Utilities.stageQueue.postRunnable(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.date, res.pts_count);
+                                    }
+                                });*/
+                    sentMessages.add(newMsgObj);
+                            /*} else if (response instanceof TLRPC.Updates) {
+                                ArrayList<TLRPC.Update> updates = ((TLRPC.Updates) response).updates;
+                                TLRPC.Message message = null;
+                                for (int a = 0; a < updates.size(); a++) {
+                                    TLRPC.Update update = updates.get(a);
+                                    if (update instanceof TLRPC.TL_updateNewMessage) {
+                                        final TLRPC.TL_updateNewMessage newMessage = (TLRPC.TL_updateNewMessage) update;
+                                        sentMessages.add(message = newMessage.message);
+                                        newMsgObj.id = newMessage.message.id;
+                                        Utilities.stageQueue.postRunnable(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                MessagesController.getInstance().processNewDifferenceParams(-1, newMessage.pts, -1, newMessage.pts_count);
+                                            }
+                                        });
+                                        break;
+                                    } else if (update instanceof TLRPC.TL_updateNewChannelMessage) {
+                                        final TLRPC.TL_updateNewChannelMessage newMessage = (TLRPC.TL_updateNewChannelMessage) update;
+                                        sentMessages.add(message = newMessage.message);
+                                        if ((newMsgObj.flags & TLRPC.MESSAGE_FLAG_MEGAGROUP) != 0) {
+                                            newMessage.message.flags |= TLRPC.MESSAGE_FLAG_MEGAGROUP;
+                                        }
+                                        Utilities.stageQueue.postRunnable(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                MessagesController.getInstance().processNewChannelDifferenceParams(newMessage.pts, newMessage.pts_count, newMessage.message.to_id.channel_id);
+                                            }
+                                        });
+                                        break;
+                                    }
+                                }
+                                if (message != null) {
+                                    newMsgObj.id = message.id;
+                                    processSentMessage(newMsgObj, message, originalPath, false);
+                                } else {
+                                    isSentError = true;
+                                }
+                            }*/
+
+                    if (!isSentError) {
+                        newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.id), newMsgObj, newMsgObj.dialog_id); //TODO remove later?
+                        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, oldId, (isBroadcast ? oldId : newMsgObj.id), 0, false, newMsgObj.to_id.channel_id);
+                                MessagesStorage.getInstance().putMessages(sentMessages, true, false, isBroadcast, 0);
+                                if (isBroadcast) {
+                                    ArrayList<TLRPC.Message> currentMessage = new ArrayList<>();
+                                    currentMessage.add(newMsgObj);
+                                    MessagesStorage.getInstance().putMessages(currentMessage, true, false, false, 0);
+                                }
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        if (isBroadcast) {
+                                            for (int a = 0; a < sentMessages.size(); a++) {
+                                                TLRPC.Message message = sentMessages.get(a);
+                                                ArrayList<MessageObject> arr = new ArrayList<>();
+                                                MessageObject messageObject = new MessageObject(message, null, false);
+                                                arr.add(messageObject);
+                                                MessagesController.getInstance().updateInterfaceWithMessages(messageObject.getDialogId(), arr, true);
+                                            }
+                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                                        }
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.id), newMsgObj, newMsgObj.dialog_id);
+                                        processSentMessage(oldId);
+                                        removeFromSendingMessages(oldId);
+                                    }
+                                });
+                                if (MessageObject.isVideoMessage(newMsgObj)) {
+                                    stopVideoService(attachPath);
+                                }
+                            }
+                        });
+                    }
+                } else {
+/*                            if (error.text.equals("PEER_FLOOD")) {
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.needShowAlert, 0);
+                            }*/
+                    isSentError = true;
+                }
+                if (isSentError) {
+                    MessagesStorage.getInstance().markMessageAsSendError(newMsgObj);
+                    newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
+                    processSentMessage(newMsgObj.id);
+                    if (MessageObject.isVideoMessage(newMsgObj)) {
+                        stopVideoService(newMsgObj.attachPath);
+                    }
+                    removeFromSendingMessages(newMsgObj.id);
+                }
+            }
+        });
+    }
 
     protected void putToSendingMessages(TLRPC.Message message) {
         sendingMessages.put(message.id, message);
