diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index e140656ee..d518d87ff 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -621,7 +621,7 @@ ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)
 endif
 
 LOCAL_SRC_FILES     += \
-./jni.cpp \
+./jni.c \
 ./audio.c \
 ./image.c \
 ./video.c \
@@ -641,7 +641,9 @@ LOCAL_SRC_FILES     += \
 ./genann.c \
 ./secureid_ocr.cpp \
 ./Log.cpp \
+./Logger.cpp \
 ./native-lib.cpp \
+./native.cpp \
 ./main.cpp
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/TMessagesProj/jni/Log.hpp b/TMessagesProj/jni/Log.hpp
index 9f6609f14..441479606 100644
--- a/TMessagesProj/jni/Log.hpp
+++ b/TMessagesProj/jni/Log.hpp
@@ -33,7 +33,7 @@ namespace telegramster
             void logHere(const T& message)
             {
                 *ss << message;
-                LOGD(TAG, ss->str().c_str());
+                LOGI(TAG, ss->str().c_str());
                 ss->str("");
             }
             template <typename T>
diff --git a/TMessagesProj/jni/Logger.cpp b/TMessagesProj/jni/Logger.cpp
new file mode 100644
index 000000000..9470e8b7e
--- /dev/null
+++ b/TMessagesProj/jni/Logger.cpp
@@ -0,0 +1,9 @@
+
+#include "Logger.h"
+#include "Log.hpp"
+
+void logIt(const char* message)
+{
+    LOG(message);
+}
+
diff --git a/TMessagesProj/jni/Logger.h b/TMessagesProj/jni/Logger.h
new file mode 100644
index 000000000..62fac61e0
--- /dev/null
+++ b/TMessagesProj/jni/Logger.h
@@ -0,0 +1,11 @@
+
+#ifndef TELEGRAMSTER_LOGGER_H
+#define TELEGRAMSTER_LOGGER_H
+
+#ifdef __cplusplus
+extern "C" void logIt(const char* message);
+#else
+extern void logIt(const char* message);
+#endif
+
+#endif
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index a5d85fff6..ec075978a 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -10,10 +10,6 @@
 #include "c_utils.h"
 #include "image.h"
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
 jclass jclass_NullPointerException;
 jclass jclass_RuntimeException;
 
@@ -936,7 +932,3 @@ JNIEXPORT void Java_org_telegramster_messenger_Utilities_stackBlurBitmap(JNIEnv*
     free(dv);
     AndroidBitmap_unlockPixels(env, bitmap);
 }
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/TMessagesProj/jni/image.h b/TMessagesProj/jni/image.h
index 277c20b70..ebe736c32 100644
--- a/TMessagesProj/jni/image.h
+++ b/TMessagesProj/jni/image.h
@@ -3,15 +3,6 @@
 
 #include <jni.h>
 
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
 jint imageOnJNILoad(JavaVM *vm, JNIEnv *env);
 
-#ifdef __cplusplus
-}
-#endif
-
 #endif
diff --git a/TMessagesProj/jni/jni.c b/TMessagesProj/jni/jni.c
new file mode 100644
index 000000000..59f03ec0c
--- /dev/null
+++ b/TMessagesProj/jni/jni.c
@@ -0,0 +1,244 @@
+#include <stdio.h>
+#include <string.h>
+#include <jni.h>
+#include <sys/types.h>
+#include <inttypes.h>
+#include <stdlib.h>
+#include <openssl/aes.h>
+#include <openssl/evp.h>
+#include <unistd.h>
+#include <dirent.h>
+#include <sys/stat.h>
+#include <time.h>
+#include "image.h"
+#include "libtgvoip/client/android/tg_voip_jni.h"
+//#include "native.h"
+//#include "Logger.h"
+
+int registerNativeTgNetFunctions(JavaVM *vm, JNIEnv *env);
+int videoOnJNILoad(JavaVM *vm, JNIEnv *env);
+
+jint JNI_OnLoad(JavaVM *vm, void *reserved) {
+    JNIEnv *env = 0;
+    srand(time(NULL));
+
+    if ((*vm)->GetEnv(vm, (void **) &env, JNI_VERSION_1_6) != JNI_OK) {
+        //logIt("JNI_VERSION_1_6");
+        return -1;
+    }
+
+    if (imageOnJNILoad(vm, env) != JNI_TRUE) {
+        //logIt("imageOnJNILoad");
+        return -1;
+    }
+
+    if (videoOnJNILoad(vm, env) != JNI_TRUE) {
+        //logIt("videoOnJNILoad");
+        return -1;
+    }
+
+    if (registerNativeTgNetFunctions(vm, env) != JNI_TRUE) {
+        //logIt("registerNativeTgNetFunctions");
+        return -1;
+    }
+
+    tgvoipRegisterNatives(env);
+
+    //logIt("JNI_OnLoad");
+
+    //return JNILoad(vm, reserved);
+    return JNI_VERSION_1_6;
+}
+
+void JNI_OnUnload(JavaVM *vm, void *reserved) {
+
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Utilities_aesIgeEncryption(JNIEnv *env, jclass class, jobject buffer, jbyteArray key, jbyteArray iv, jboolean encrypt, jint offset, jint length) {
+    jbyte *what = (*env)->GetDirectBufferAddress(env, buffer) + offset;
+    unsigned char *keyBuff = (unsigned char *)(*env)->GetByteArrayElements(env, key, NULL);
+    unsigned char *ivBuff = (unsigned char *)(*env)->GetByteArrayElements(env, iv, NULL);
+
+    AES_KEY akey;
+    if (!encrypt) {
+        AES_set_decrypt_key(keyBuff, 32 * 8, &akey);
+        AES_ige_encrypt(what, what, length, &akey, ivBuff, AES_DECRYPT);
+    } else {
+        AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
+        AES_ige_encrypt(what, what, length, &akey, ivBuff, AES_ENCRYPT);
+    }
+    (*env)->ReleaseByteArrayElements(env, key, keyBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, iv, ivBuff, 0);
+}
+
+JNIEXPORT jint Java_org_telegram_messenger_Utilities_pbkdf2(JNIEnv *env, jclass class, jbyteArray password, jbyteArray salt, jbyteArray dst, jint iterations) {
+    jbyte *passwordBuff = (*env)->GetByteArrayElements(env, password, NULL);
+    size_t passwordLength = (size_t) (*env)->GetArrayLength(env, password);
+    jbyte *saltBuff = (*env)->GetByteArrayElements(env, salt, NULL);
+    size_t saltLength = (size_t) (*env)->GetArrayLength(env, salt);
+    jbyte *dstBuff = (*env)->GetByteArrayElements(env, dst, NULL);
+    size_t dstLength = (size_t) (*env)->GetArrayLength(env, dst);
+
+    int result = PKCS5_PBKDF2_HMAC((char *) passwordBuff, passwordLength, (uint8_t *) saltBuff, saltLength, (unsigned int) iterations, EVP_sha512(), dstLength, (uint8_t *) dstBuff);
+
+    (*env)->ReleaseByteArrayElements(env, password, passwordBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, salt, saltBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, dst, dstBuff, 0);
+
+    return result;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Utilities_aesCtrDecryption(JNIEnv *env, jclass class, jobject buffer, jbyteArray key, jbyteArray iv, jint offset, jint length) {
+    jbyte *what = (*env)->GetDirectBufferAddress(env, buffer) + offset;
+    unsigned char *keyBuff = (unsigned char *)(*env)->GetByteArrayElements(env, key, NULL);
+    unsigned char *ivBuff = (unsigned char *)(*env)->GetByteArrayElements(env, iv, NULL);
+
+    AES_KEY akey;
+    unsigned int num = 0;
+    uint8_t count[16];
+    memset(count, 0, 16);
+    AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
+    AES_ctr128_encrypt(what, what, length, &akey, ivBuff, count, &num);
+    (*env)->ReleaseByteArrayElements(env, key, keyBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, iv, ivBuff, JNI_ABORT);
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Utilities_aesCtrDecryptionByteArray(JNIEnv *env, jclass class, jbyteArray buffer, jbyteArray key, jbyteArray iv, jint offset, jint length, jint fileOffset) {
+    unsigned char *bufferBuff = (unsigned char *) (*env)->GetByteArrayElements(env, buffer, NULL);
+    unsigned char *keyBuff = (unsigned char *) (*env)->GetByteArrayElements(env, key, NULL);
+    unsigned char *ivBuff = (unsigned char *) (*env)->GetByteArrayElements(env, iv, NULL);
+
+    AES_KEY akey;
+    uint8_t count[16];
+    AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
+    unsigned int num = (unsigned int) (fileOffset % 16);
+
+    int o = fileOffset / 16;
+    ivBuff[15] = (uint8_t) (o & 0xff);
+    ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
+    ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
+    ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
+    AES_encrypt(ivBuff, count, &akey);
+
+    o = (fileOffset + 15) / 16;
+    ivBuff[15] = (uint8_t) (o & 0xff);
+    ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
+    ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
+    ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
+
+    AES_ctr128_encrypt(bufferBuff + offset, bufferBuff + offset, length, &akey, ivBuff, count, &num);
+
+    (*env)->ReleaseByteArrayElements(env, key, keyBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, iv, ivBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, buffer, bufferBuff, 0);
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Utilities_aesCbcEncryptionByteArray(JNIEnv *env, jclass class, jbyteArray buffer, jbyteArray key, jbyteArray iv, jint offset, jint length, jint fileOffset, jint encrypt) {
+    unsigned char *bufferBuff = (unsigned char *) (*env)->GetByteArrayElements(env, buffer, NULL);
+    unsigned char *keyBuff = (unsigned char *) (*env)->GetByteArrayElements(env, key, NULL);
+    unsigned char *ivBuff = (unsigned char *) (*env)->GetByteArrayElements(env, iv, NULL);
+
+    AES_KEY akey;
+    if (encrypt) {
+        AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
+    } else {
+        AES_set_decrypt_key(keyBuff, 32 * 8, &akey);
+
+        if (fileOffset != 0) {
+            int o = (fileOffset + 15) / 16;
+            ivBuff[15] = (uint8_t) (o & 0xff);
+            ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
+            ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
+            ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
+        }
+    }
+
+    AES_cbc_encrypt(bufferBuff, bufferBuff, length, &akey, ivBuff, encrypt);
+
+    (*env)->ReleaseByteArrayElements(env, buffer, bufferBuff, 0);
+    (*env)->ReleaseByteArrayElements(env, key, keyBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, iv, ivBuff, JNI_ABORT);
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Utilities_aesCbcEncryption(JNIEnv *env, jclass class, jobject buffer, jbyteArray key, jbyteArray iv, jint offset, jint length, jint encrypt) {
+    unsigned char *bufferBuff = (*env)->GetDirectBufferAddress(env, buffer) + offset;
+    unsigned char *keyBuff = (unsigned char *) (*env)->GetByteArrayElements(env, key, NULL);
+    unsigned char *ivBuff = (unsigned char *) (*env)->GetByteArrayElements(env, iv, NULL);
+
+    AES_KEY akey;
+    if (encrypt) {
+        AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
+    } else {
+        AES_set_decrypt_key(keyBuff, 32 * 8, &akey);
+    }
+
+    AES_cbc_encrypt(bufferBuff + offset, bufferBuff + offset, length, &akey, ivBuff, encrypt);
+
+    (*env)->ReleaseByteArrayElements(env, key, keyBuff, JNI_ABORT);
+    (*env)->ReleaseByteArrayElements(env, iv, ivBuff, JNI_ABORT);
+}
+
+int64_t listdir(const char *fileName, int32_t mode, int32_t docType, int64_t time) {
+    int64_t value = 0;
+    DIR *dir;
+    struct stat attrib;
+    if ((dir = opendir(fileName)) != NULL) {
+        char buff[4096];
+        struct dirent *entry;
+        while ((entry = readdir(dir)) != NULL) {
+            char *name = entry->d_name;
+            size_t len = strlen(name);
+            if (name[0] == '.') {
+                continue;
+            }
+            if ((docType == 1 || docType == 2) && len > 4) {
+                if (name[len - 4] == '.' && (
+                        ((name[len - 3] == 'm' || name[len - 3] == 'M') && (name[len - 2] == 'p' || name[len - 2] == 'P') && (name[len - 1] == '3')) ||
+                        ((name[len - 3] == 'm' || name[len - 3] == 'M') && (name[len - 2] == '4') && (name[len - 1] == 'a' || name[len - 1] == 'A'))
+                )) {
+                    if (docType == 1) {
+                        continue;
+                    }
+                } else if (docType == 2) {
+                    continue;
+                }
+            }
+            strncpy(buff, fileName, 4095);
+            strncat(buff, "/", 4095);
+            strncat(buff, entry->d_name, 4095);
+            if (entry->d_type == DT_DIR) {
+                value += listdir(buff, mode, docType, time);
+            } else {
+                stat(buff, &attrib);
+                if (mode == 0) {
+                    value += 512 * attrib.st_blocks;
+                } else if (mode == 1) {
+                    if (attrib.st_atim.tv_sec != 0) {
+                        if (attrib.st_atim.tv_sec < time) {
+                            remove(buff);
+                        }
+                    } else {
+                        if (attrib.st_mtim.tv_sec < time) {
+                            remove(buff);
+                        }
+                    }
+                }
+            }
+        }
+        closedir(dir);
+    }
+    return value;
+}
+
+JNIEXPORT jlong Java_org_telegram_messenger_Utilities_getDirSize(JNIEnv *env, jclass class, jstring path, jint docType) {
+    const char *fileName = (*env)->GetStringUTFChars(env, path, NULL);
+    jlong value = listdir(fileName, 0, docType, 0);
+    (*env)->ReleaseStringUTFChars(env, path, fileName);
+    return value;
+}
+
+JNIEXPORT void Java_org_telegram_messenger_Utilities_clearDir(JNIEnv *env, jclass class, jstring path, jint docType, jlong time) {
+    const char *fileName = (*env)->GetStringUTFChars(env, path, NULL);
+    listdir(fileName, 1, docType, time);
+    (*env)->ReleaseStringUTFChars(env, path, fileName);
+}
diff --git a/TMessagesProj/jni/jni.cpp b/TMessagesProj/jni/jni.cpp
deleted file mode 100644
index 61567ded2..000000000
--- a/TMessagesProj/jni/jni.cpp
+++ /dev/null
@@ -1,247 +0,0 @@
-#include <stdio.h>
-#include <string.h>
-#include <jni.h>
-#include <sys/types.h>
-#include <inttypes.h>
-#include <stdlib.h>
-#include <openssl/aes.h>
-#include <openssl/evp.h>
-#include <unistd.h>
-#include <dirent.h>
-#include <sys/stat.h>
-#include "image.h"
-#include "libtgvoip/client/android/tg_voip_jni.h"
-#include "native-lib.hpp"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-int registerNativeTgNetFunctions(JavaVM *vm, JNIEnv *env);
-int videoOnJNILoad(JavaVM *vm, JNIEnv *env);
-
-jint JNI_OnLoad(JavaVM *vm, void *reserved) {
-	JNIEnv *env = 0;
-    srand(time(NULL));
-
-	if (vm->GetEnv((void **) &env, JNI_VERSION_1_6) != JNI_OK) {
-	    LOGD("JNI", "JNI_VERSION_1_6");
-		return -1;
-	}
-
-    if (imageOnJNILoad(vm, env) != JNI_TRUE) {
-        LOGD("JNI", "imageOnJNILoad");
-        return -1;
-    }
-
-    if (videoOnJNILoad(vm, env) != JNI_TRUE) {
-        LOGD("JNI", "videoOnJNILoad");
-        return -1;
-    }
-
-    if (registerNativeTgNetFunctions(vm, env) != JNI_TRUE) {
-        LOGD("JNI", "registerNativeTgNetFunctions");
-        return -1;
-    }
-
-    tgvoipRegisterNatives(env);
-
-	return JNIOnLoad(vm, reserved);
-}
-
-void JNI_OnUnload(JavaVM *vm, void *reserved) {
-
-}
-
-JNIEXPORT void Java_org_telegramster_messenger_Utilities_aesIgeEncryption(JNIEnv *env, jclass clazz, jobject buffer, jbyteArray key, jbyteArray iv, jboolean encrypt, jint offset, jint length) {
-    jbyte *what = ((jbyte *)env->GetDirectBufferAddress( buffer)) + offset;
-    unsigned char *keyBuff = (unsigned char *)env->GetByteArrayElements( key, NULL);
-    unsigned char *ivBuff = (unsigned char *)env->GetByteArrayElements( iv, NULL);
-
-    AES_KEY akey;
-    if (!encrypt) {
-        AES_set_decrypt_key(keyBuff, 32 * 8, &akey);
-        AES_ige_encrypt((unsigned char *)what, (unsigned char *)what, length, &akey, ivBuff, AES_DECRYPT);
-    } else {
-        AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
-        AES_ige_encrypt((unsigned char *)what, (unsigned char *)what, length, &akey, ivBuff, AES_ENCRYPT);
-    }
-    env->ReleaseByteArrayElements( key, (jbyte *)keyBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( iv, (jbyte *)ivBuff, 0);
-}
-
-JNIEXPORT jint Java_org_telegramster_messenger_Utilities_pbkdf2(JNIEnv *env, jclass clazz, jbyteArray password, jbyteArray salt, jbyteArray dst, jint iterations) {
-    jbyte *passwordBuff = env->GetByteArrayElements( password, NULL);
-    size_t passwordLength = (size_t) env->GetArrayLength( password);
-    jbyte *saltBuff = env->GetByteArrayElements( salt, NULL);
-    size_t saltLength = (size_t) env->GetArrayLength( salt);
-    jbyte *dstBuff = env->GetByteArrayElements( dst, NULL);
-    size_t dstLength = (size_t) env->GetArrayLength( dst);
-
-    int result = PKCS5_PBKDF2_HMAC((char *) passwordBuff, passwordLength, (uint8_t *) saltBuff, saltLength, (unsigned int) iterations, EVP_sha512(), dstLength, (uint8_t *) dstBuff);
-
-    env->ReleaseByteArrayElements( password, passwordBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( salt, saltBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( dst, dstBuff, 0);
-
-    return result;
-}
-
-JNIEXPORT void Java_org_telegramster_messenger_Utilities_aesCtrDecryption(JNIEnv *env, jclass clazz, jobject buffer, jbyteArray key, jbyteArray iv, jint offset, jint length) {
-    jbyte *what = ((jbyte *)env->GetDirectBufferAddress( buffer)) + offset;
-    unsigned char *keyBuff = (unsigned char *)env->GetByteArrayElements( key, NULL);
-    unsigned char *ivBuff = (unsigned char *)env->GetByteArrayElements( iv, NULL);
-
-    AES_KEY akey;
-    unsigned int num = 0;
-    uint8_t count[16];
-    memset(count, 0, 16);
-    AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
-    AES_ctr128_encrypt((unsigned char *)what, (unsigned char *)what, length, &akey, ivBuff, count, &num);
-    env->ReleaseByteArrayElements( key, (jbyte *)keyBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( iv, (jbyte *)ivBuff, JNI_ABORT);
-}
-
-JNIEXPORT void Java_org_telegramster_messenger_Utilities_aesCtrDecryptionByteArray(JNIEnv *env, jclass clazz, jbyteArray buffer, jbyteArray key, jbyteArray iv, jint offset, jint length, jint fileOffset) {
-    unsigned char *bufferBuff = (unsigned char *) env->GetByteArrayElements( buffer, NULL);
-    unsigned char *keyBuff = (unsigned char *) env->GetByteArrayElements( key, NULL);
-    unsigned char *ivBuff = (unsigned char *) env->GetByteArrayElements( iv, NULL);
-
-    AES_KEY akey;
-    uint8_t count[16];
-    AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
-    unsigned int num = (unsigned int) (fileOffset % 16);
-
-    int o = fileOffset / 16;
-    ivBuff[15] = (uint8_t) (o & 0xff);
-    ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
-    ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
-    ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
-    AES_encrypt(ivBuff, count, &akey);
-
-    o = (fileOffset + 15) / 16;
-    ivBuff[15] = (uint8_t) (o & 0xff);
-    ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
-    ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
-    ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
-
-    AES_ctr128_encrypt(bufferBuff + offset, bufferBuff + offset, length, &akey, ivBuff, count, &num);
-
-    env->ReleaseByteArrayElements( key, (jbyte *) keyBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( iv, (jbyte *) ivBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( buffer, (jbyte *) bufferBuff, 0);
-}
-
-JNIEXPORT void Java_org_telegramster_messenger_Utilities_aesCbcEncryptionByteArray(JNIEnv *env, jclass clazz, jbyteArray buffer, jbyteArray key, jbyteArray iv, jint offset, jint length, jint fileOffset, jint encrypt) {
-    unsigned char *bufferBuff = (unsigned char *) env->GetByteArrayElements( buffer, NULL);
-    unsigned char *keyBuff = (unsigned char *) env->GetByteArrayElements( key, NULL);
-    unsigned char *ivBuff = (unsigned char *) env->GetByteArrayElements( iv, NULL);
-
-    AES_KEY akey;
-    if (encrypt) {
-        AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
-    } else {
-        AES_set_decrypt_key(keyBuff, 32 * 8, &akey);
-
-        if (fileOffset != 0) {
-            int o = (fileOffset + 15) / 16;
-            ivBuff[15] = (uint8_t) (o & 0xff);
-            ivBuff[14] = (uint8_t) ((o >> 8) & 0xff);
-            ivBuff[13] = (uint8_t) ((o >> 16) & 0xff);
-            ivBuff[12] = (uint8_t) ((o >> 24) & 0xff);
-        }
-    }
-
-    AES_cbc_encrypt(bufferBuff, bufferBuff, length, &akey, ivBuff, encrypt);
-
-    env->ReleaseByteArrayElements( buffer, (jbyte *) bufferBuff, 0);
-    env->ReleaseByteArrayElements( key, (jbyte *) keyBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( iv, (jbyte *) ivBuff, JNI_ABORT);
-}
-
-JNIEXPORT void Java_org_telegramster_messenger_Utilities_aesCbcEncryption(JNIEnv *env, jclass clazz, jobject buffer, jbyteArray key, jbyteArray iv, jint offset, jint length, jint encrypt) {
-    unsigned char *bufferBuff = ((unsigned char *) env->GetDirectBufferAddress( buffer)) + offset;
-    unsigned char *keyBuff = (unsigned char *) env->GetByteArrayElements( key, NULL);
-    unsigned char *ivBuff = (unsigned char *) env->GetByteArrayElements( iv, NULL);
-
-    AES_KEY akey;
-    if (encrypt) {
-        AES_set_encrypt_key(keyBuff, 32 * 8, &akey);
-    } else {
-        AES_set_decrypt_key(keyBuff, 32 * 8, &akey);
-    }
-
-    AES_cbc_encrypt(bufferBuff + offset, bufferBuff + offset, length, &akey, ivBuff, encrypt);
-
-    env->ReleaseByteArrayElements( key, (jbyte *) keyBuff, JNI_ABORT);
-    env->ReleaseByteArrayElements( iv, (jbyte *) ivBuff, JNI_ABORT);
-}
-
-int64_t listdir(const char *fileName, int32_t mode, int32_t docType, int64_t time) {
-    int64_t value = 0;
-    DIR *dir;
-    struct stat attrib;
-    if ((dir = opendir(fileName)) != NULL) {
-        char buff[4096];
-        struct dirent *entry;
-        while ((entry = readdir(dir)) != NULL) {
-            char *name = entry->d_name;
-            size_t len = strlen(name);
-            if (name[0] == '.') {
-                continue;
-            }
-            if ((docType == 1 || docType == 2) && len > 4) {
-                if (name[len - 4] == '.' && (
-                        ((name[len - 3] == 'm' || name[len - 3] == 'M') && (name[len - 2] == 'p' || name[len - 2] == 'P') && (name[len - 1] == '3')) ||
-                        ((name[len - 3] == 'm' || name[len - 3] == 'M') && (name[len - 2] == '4') && (name[len - 1] == 'a' || name[len - 1] == 'A'))
-                )) {
-                    if (docType == 1) {
-                        continue;
-                    }
-                } else if (docType == 2) {
-                    continue;
-                }
-            }
-            strncpy(buff, fileName, 4095);
-            strncat(buff, "/", 4095);
-            strncat(buff, entry->d_name, 4095);
-            if (entry->d_type == DT_DIR) {
-                value += listdir(buff, mode, docType, time);
-            } else {
-                stat(buff, &attrib);
-                if (mode == 0) {
-                    value += 512 * attrib.st_blocks;
-                } else if (mode == 1) {
-                    if (attrib.st_atim.tv_sec != 0) {
-                        if (attrib.st_atim.tv_sec < time) {
-                            remove(buff);
-                        }
-                    } else {
-                        if (attrib.st_mtim.tv_sec < time) {
-                            remove(buff);
-                        }
-                    }
-                }
-            }
-        }
-        closedir(dir);
-    }
-    return value;
-}
-
-JNIEXPORT jlong Java_org_telegramster_messenger_Utilities_getDirSize(JNIEnv *env, jclass clazz, jstring path, jint docType) {
-    const char *fileName = env->GetStringUTFChars( path, NULL);
-    jlong value = listdir(fileName, 0, docType, 0);
-    env->ReleaseStringUTFChars( path, fileName);
-    return value;
-}
-
-JNIEXPORT void Java_org_telegramster_messenger_Utilities_clearDir(JNIEnv *env, jclass clazz, jstring path, jint docType, jlong time) {
-    const char *fileName = env->GetStringUTFChars( path, NULL);
-    listdir(fileName, 1, docType, time);
-    env->ReleaseStringUTFChars( path, fileName);
-}
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/TMessagesProj/jni/native-lib.cpp b/TMessagesProj/jni/native-lib.cpp
index 098289840..b822fb4d1 100644
--- a/TMessagesProj/jni/native-lib.cpp
+++ b/TMessagesProj/jni/native-lib.cpp
@@ -28,6 +28,8 @@ jint JNIOnLoad(JavaVM *pjvm, void *reserved) {
 
     //gJvm->DetachCurrentThread();
 
+    LOG("JNIOnLoad");
+
     return JNI_VERSION_1_6;
 }
 
diff --git a/TMessagesProj/jni/native.cpp b/TMessagesProj/jni/native.cpp
new file mode 100644
index 000000000..f92b24da2
--- /dev/null
+++ b/TMessagesProj/jni/native.cpp
@@ -0,0 +1,8 @@
+
+#include "native.h"
+#include "native-lib.hpp"
+
+jint JNILoad(JavaVM *pjvm, void *reserved)
+{
+    return JNIOnLoad(pjvm, reserved);
+}
diff --git a/TMessagesProj/jni/native.h b/TMessagesProj/jni/native.h
new file mode 100644
index 000000000..dbd081dd1
--- /dev/null
+++ b/TMessagesProj/jni/native.h
@@ -0,0 +1,13 @@
+
+#ifndef TELEGRAMSTER_NATIVE_H
+#define TELEGRAMSTER_NATIVE_H
+
+#include <jni.h>
+
+#ifdef __cplusplus
+extern "C" jint JNILoad(JavaVM *pjvm, void *reserved);
+#else
+extern jint JNILoad(JavaVM *pjvm, void *reserved);
+#endif
+
+#endif
diff --git a/TMessagesProj/src/main/java/org/telegramster/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegramster/messenger/ApplicationLoader.java
index 4c1e6bd41..531a69b35 100644
--- a/TMessagesProj/src/main/java/org/telegramster/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegramster/messenger/ApplicationLoader.java
@@ -25,6 +25,7 @@
 import android.os.PowerManager;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
+import android.util.Log;
 
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GooglePlayServicesUtil;
@@ -39,6 +40,8 @@
 
 public class ApplicationLoader extends Application {
 
+    private static final String TAG = "AppLoad";
+
     @SuppressLint("StaticFieldLeak")
     public static volatile Context applicationContext;
     public static volatile NetworkInfo currentNetworkInfo;
@@ -177,6 +180,8 @@ public void onCreate() {
 
         //(new AppSignatureHelper(applicationContext)).getAppSignatures();
 
+        Log.d(TAG, "initNativeLibs");
+
         NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
         ConnectionsManager.native_setJava(false);
         new ForegroundDetector(this);
@@ -184,6 +189,8 @@ public void onCreate() {
         applicationHandler = new Handler(applicationContext.getMainLooper());
 
         AndroidUtilities.runOnUIThread(ApplicationLoader::startPushService);
+
+        Log.d(TAG, "onCreate");
     }
 
     public static void startPushService() {
diff --git a/TMessagesProj/src/main/java/org/telegramster/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegramster/messenger/BuildVars.java
index a85a9180c..e7e665629 100644
--- a/TMessagesProj/src/main/java/org/telegramster/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegramster/messenger/BuildVars.java
@@ -13,9 +13,9 @@
 
 public class BuildVars {
 
-    public static boolean DEBUG_VERSION = false;
+    public static boolean DEBUG_VERSION = true;
     public static boolean DEBUG_PRIVATE_VERSION = false;
-    public static boolean LOGS_ENABLED = false;
+    public static boolean LOGS_ENABLED = true;
     public static boolean USE_CLOUD_STRINGS = true;
     public static boolean CHECK_UPDATES = false;
     public static int BUILD_VERSION = 1517;
diff --git a/TMessagesProj/src/main/java/org/telegramster/messenger/NativeLoader.java b/TMessagesProj/src/main/java/org/telegramster/messenger/NativeLoader.java
index 7bce289f1..28010e51a 100644
--- a/TMessagesProj/src/main/java/org/telegramster/messenger/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegramster/messenger/NativeLoader.java
@@ -12,6 +12,7 @@
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.os.Build;
+import android.util.Log;
 
 import net.hockeyapp.android.Constants;
 
@@ -24,6 +25,7 @@
 
 public class NativeLoader {
 
+    private final static String TAG = "NativeLoad";
     private final static int LIB_VERSION = 30;
     private final static String LIB_NAME = "tmessages." + LIB_VERSION;
     private final static String LIB_SO_NAME = "lib" + LIB_NAME + ".so";
@@ -119,6 +121,8 @@ public static synchronized void initNativeLibs(Context context) {
 
         Constants.loadFromContext(context);
 
+        Log.d(TAG, LIB_NAME);
+
         try {
             try {
                 System.loadLibrary(LIB_NAME);
@@ -211,6 +215,8 @@ public static synchronized void initNativeLibs(Context context) {
         } catch (Error e) {
             FileLog.e(e);
         }
+
+        Log.d(TAG, "initNativeLibs");
     }
 
     private static native void init(String path, boolean enable);
