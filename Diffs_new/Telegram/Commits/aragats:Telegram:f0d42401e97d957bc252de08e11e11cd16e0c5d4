diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 01c4f1401..5976ed3df 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -11,7 +11,6 @@
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Build;
@@ -19,8 +18,6 @@
 import android.util.Base64;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
 
 import java.io.File;
 import java.net.Inet4Address;
@@ -31,13 +28,9 @@
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 
-public class ConnectionsManager implements Action.ActionDelegate, TcpConnection.TcpConnectionDelegate {
-    private HashMap<Integer, Datacenter> datacenters = new HashMap<>();
+public class ConnectionsManager implements Action.ActionDelegate{
 
     private ArrayList<Long> sessionsToDestroy = new ArrayList<>();
     private ArrayList<Long> destroyingSessions = new ArrayList<>();
@@ -60,8 +53,6 @@
     private TLRPC.TL_auth_exportedAuthorization movingAuthorization;
     public static final int DEFAULT_DATACENTER_ID = Integer.MAX_VALUE;
     private static final int DC_UPDATE_TIME = 60 * 60;
-    protected int currentDatacenterId;
-    protected int movingToDatacenterId;
     private long lastOutgoingMessageId = 0;
     private int isTestBackend = 0;
     private int timeDifference = 0;
@@ -107,24 +98,6 @@ public static ConnectionsManager getInstance() {
         @Override
         public void run() {
             Utilities.stageQueue.handler.removeCallbacks(stageRunnable);
-            if (datacenters != null) {
-                Datacenter datacenter = datacenterWithId(currentDatacenterId);
-                if (sendingPushPing && lastPushPingTime < System.currentTimeMillis() - 30000 || Math.abs(lastPushPingTime - System.currentTimeMillis()) > 60000 * 3 + 10000) {
-                    lastPushPingTime = 0;
-                    sendingPushPing = false;
-                    if (datacenter != null && datacenter.pushConnection != null) {
-                        datacenter.pushConnection.suspendConnection(true);
-                    }
-                    FileLog.e("tmessages", "push ping timeout");
-                }
-                if (lastPushPingTime < System.currentTimeMillis() - 60000 * 3) {
-                    FileLog.e("tmessages", "time for push ping");
-                    lastPushPingTime = System.currentTimeMillis();
-                    if (datacenter != null) {
-//                        generatePing(datacenter, true);
-                    }
-                }
-            }
 
             long currentTime = System.currentTimeMillis();
             if (lastPauseTime != 0 && lastPauseTime < currentTime - nextSleepTimeout) {
@@ -152,9 +125,7 @@ public void run() {
                 if (!dontSleep) {
                     if (!paused) {
                         FileLog.e("tmessages", "pausing network and timers by sleep time = " + nextSleepTimeout);
-                        for (Datacenter datacenter : datacenters.values()) {
-                            datacenter.suspendConnections();
-                        }
+
                     }
                     try {
                         paused = true;
@@ -173,37 +144,6 @@ public void run() {
                 FileLog.e("tmessages", "resume network and timers");
             }
 
-            if (datacenters != null) {
-//                MessagesController.getInstance().updateTimerProc();
-                Datacenter datacenter = datacenterWithId(currentDatacenterId);
-                if (datacenter != null) {
-                    if (datacenter.authKey != null) {
-                        if (lastPingTime < System.currentTimeMillis() - 19000) {
-                            lastPingTime = System.currentTimeMillis();
-//                            generatePing();
-                        }
-                        if (!updatingDcSettings && lastDcUpdateTime < (int) (System.currentTimeMillis() / 1000) - DC_UPDATE_TIME) {
-                        }
-                        processRequestQueue(0, 0);
-                    } else {
-                        boolean notFound = true;
-                        for (Action actor : actionQueue) {
-                            if (actor instanceof HandshakeAction) {
-                                HandshakeAction eactor = (HandshakeAction) actor;
-                                if (eactor.datacenter.datacenterId == datacenter.datacenterId) {
-                                    notFound = false;
-                                    break;
-                                }
-                            }
-                        }
-                        if (notFound) {
-                            HandshakeAction actor = new HandshakeAction(datacenter);
-                            actor.delegate = ConnectionsManager.this;
-                            dequeueActor(actor, true);
-                        }
-                    }
-                }
-            }
 
             Utilities.stageQueue.postRunnable(stageRunnable, 1000);
         }
@@ -211,7 +151,6 @@ public void run() {
 
     public ConnectionsManager() {
         lastOutgoingMessageId = 0;
-        movingToDatacenterId = DEFAULT_DATACENTER_ID;
         loadSession();
 
         if (!isNetworkOnline()) {
@@ -311,12 +250,6 @@ public long getPauseTime() {
     // Config and session manage
     //================================================================================
 
-    public Datacenter datacenterWithId(int datacenterId) {
-        if (datacenterId == DEFAULT_DATACENTER_ID) {
-            return datacenters.get(currentDatacenterId);
-        }
-        return datacenters.get(datacenterId);
-    }
 
     void setTimeDifference(int diff) {
         boolean store = Math.abs(diff - timeDifference) > 25;
@@ -335,8 +268,6 @@ public void run() {
                 } else {
                     isTestBackend = 0;
                 }
-                datacenters.clear();
-                fillDatacenters();
                 saveSession();
                 Utilities.stageQueue.postRunnable(new Runnable() {
                     @Override
@@ -366,11 +297,10 @@ public void run() {
                         }
                         timeDifference = data.readInt32(false);
                         count = data.readInt32(false);
-                        for (int a = 0; a < count; a++) {
-                            Datacenter datacenter = new Datacenter(data, 0);
-                            datacenters.put(datacenter.datacenterId, datacenter);
-                        }
-                        currentDatacenterId = data.readInt32(false);
+//                        for (int a = 0; a < count; a++) {
+//                            Datacenter datacenter = new Datacenter(data, 0);
+//                            datacenters.put(datacenter.datacenterId, datacenter);
+//                        }
                         data.cleanup();
                     } catch (Exception e) {
                         UserConfig.clearConfig();
@@ -378,7 +308,6 @@ public void run() {
                 } else {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("dataconfig", Context.MODE_PRIVATE);
                     isTestBackend = preferences.getInt("datacenterSetId", 0);
-                    currentDatacenterId = preferences.getInt("currentDatacenterId", 0);
                     timeDifference = preferences.getInt("timeDifference", 0);
                     lastDcUpdateTime = preferences.getInt("lastDcUpdateTime", 0);
                     pushSessionId = preferences.getLong("pushSessionId", 0);
@@ -408,10 +337,6 @@ public void run() {
                             if (datacentersBytes != null) {
                                 SerializedData data = new SerializedData(datacentersBytes);
                                 int count = data.readInt32(false);
-                                for (int a = 0; a < count; a++) {
-                                    Datacenter datacenter = new Datacenter(data, 1);
-                                    datacenters.put(datacenter.datacenterId, datacenter);
-                                }
                                 data.cleanup();
                             }
                         }
@@ -420,109 +345,11 @@ public void run() {
                     }
                 }
 
-                if (currentDatacenterId != 0 && UserConfig.isClientActivated()) {
-                    Datacenter datacenter = datacenterWithId(currentDatacenterId);
-                    if (datacenter == null || datacenter.authKey == null) {
-                        currentDatacenterId = 0;
-                        datacenters.clear();
-                        UserConfig.clearConfig();
-                    }
-                }
-
-                fillDatacenters();
 
-                if (datacenters.size() != 0 && currentDatacenterId == 0 || pushSessionId == 0) {
-                    if (pushSessionId == 0) {
-                        pushSessionId = Utilities.random.nextLong();
-                    }
-                    if (currentDatacenterId == 0) {
-                        currentDatacenterId = 2;
-                    }
-                    saveSession();
-                }
-                movingToDatacenterId = DEFAULT_DATACENTER_ID;
             }
         });
     }
 
-    private void fillDatacenters() {
-        if (datacenters.size() == 0) {
-            if (isTestBackend == 0) {
-                Datacenter datacenter = new Datacenter();
-                datacenter.datacenterId = 1;
-                datacenter.addAddressAndPort("149.154.175.50", 443, 0);
-                datacenter.addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000a", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-
-                datacenter = new Datacenter();
-                datacenter.datacenterId = 2;
-                datacenter.addAddressAndPort("149.154.167.51", 443, 0);
-                datacenter.addAddressAndPort("2001:67c:4e8:f002:0000:0000:0000:000a", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-
-                datacenter = new Datacenter();
-                datacenter.datacenterId = 3;
-                datacenter.addAddressAndPort("149.154.175.100", 443, 0);
-                datacenter.addAddressAndPort("2001:b28:f23d:f003:0000:0000:0000:000a", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-
-                datacenter = new Datacenter();
-                datacenter.datacenterId = 4;
-                datacenter.addAddressAndPort("149.154.167.91", 443, 0);
-                datacenter.addAddressAndPort("2001:67c:4e8:f004:0000:0000:0000:000a", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-
-                datacenter = new Datacenter();
-                datacenter.datacenterId = 5;
-                datacenter.addAddressAndPort("149.154.171.5", 443, 0);
-                datacenter.addAddressAndPort("2001:b28:f23f:f005:0000:0000:0000:000a", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-            } else {
-                Datacenter datacenter = new Datacenter();
-                datacenter.datacenterId = 1;
-                datacenter.addAddressAndPort("149.154.175.10", 443, 0);
-                datacenter.addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000e", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-
-                datacenter = new Datacenter();
-                datacenter.datacenterId = 2;
-                datacenter.addAddressAndPort("149.154.167.40", 443, 0);
-                datacenter.addAddressAndPort("2001:67c:4e8:f002:0000:0000:0000:000e", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-
-                datacenter = new Datacenter();
-                datacenter.datacenterId = 3;
-                datacenter.addAddressAndPort("149.154.175.117", 443, 0);
-                datacenter.addAddressAndPort("2001:b28:f23d:f003:0000:0000:0000:000e", 443, 1);
-                datacenters.put(datacenter.datacenterId, datacenter);
-            }
-        } else if (datacenters.size() == 1) {
-            Datacenter datacenter = new Datacenter();
-            datacenter.datacenterId = 2;
-            datacenter.addAddressAndPort("149.154.167.51", 443, 0);
-            datacenter.addAddressAndPort("2001:67c:4e8:f002:0000:0000:0000:000a", 443, 1);
-            datacenters.put(datacenter.datacenterId, datacenter);
-
-            datacenter = new Datacenter();
-            datacenter.datacenterId = 3;
-            datacenter.addAddressAndPort("149.154.175.100", 443, 0);
-            datacenter.addAddressAndPort("2001:b28:f23d:f003:0000:0000:0000:000a", 443, 1);
-            datacenters.put(datacenter.datacenterId, datacenter);
-
-            datacenter = new Datacenter();
-            datacenter.datacenterId = 4;
-            datacenter.addAddressAndPort("149.154.167.91", 443, 0);
-            datacenter.addAddressAndPort("2001:67c:4e8:f004:0000:0000:0000:000a", 443, 1);
-            datacenters.put(datacenter.datacenterId, datacenter);
-
-            datacenter = new Datacenter();
-            datacenter.datacenterId = 5;
-            datacenter.addAddressAndPort("149.154.171.5", 443, 0);
-            datacenter.addAddressAndPort("2001:b28:f23f:f005:0000:0000:0000:000a", 443, 1);
-            datacenters.put(datacenter.datacenterId, datacenter);
-        }
-    }
-
     @SuppressLint("NewApi")
     protected static boolean useIpv6Address() {
         if (BuildVars.DEBUG_VERSION && Build.VERSION.SDK_INT >= 19) {
@@ -594,51 +421,7 @@ public void run() {
                 try {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("dataconfig", Context.MODE_PRIVATE);
                     SharedPreferences.Editor editor = preferences.edit();
-                    editor.putInt("datacenterSetId", isTestBackend);
-                    Datacenter currentDatacenter = datacenterWithId(currentDatacenterId);
-                    if (currentDatacenter != null) {
-                        editor.putInt("currentDatacenterId", currentDatacenterId);
-                        editor.putInt("timeDifference", timeDifference);
-                        editor.putInt("lastDcUpdateTime", lastDcUpdateTime);
-                        editor.putLong("pushSessionId", pushSessionId);
-
-                        ArrayList<Long> sessions = new ArrayList<>();
-                        currentDatacenter.getSessions(sessions);
-
-                        if (!sessions.isEmpty()) {
-                            SerializedData data = new SerializedData(sessions.size() * 8 + 4);
-                            data.writeInt32(sessions.size());
-                            for (long session : sessions) {
-                                data.writeInt64(session);
-                            }
-                            editor.putString("sessionsToDestroy", Base64.encodeToString(data.toByteArray(), Base64.DEFAULT));
-                            data.cleanup();
-                        } else {
-                            editor.remove("sessionsToDestroy");
-                        }
-
-                        if (!datacenters.isEmpty()) {
-                            SerializedData data = new SerializedData();
-                            data.writeInt32(datacenters.size());
-                            for (Datacenter datacenter : datacenters.values()) {
-                                datacenter.SerializeToStream(data);
-                            }
-                            editor.putString("datacenters", Base64.encodeToString(data.toByteArray(), Base64.DEFAULT));
-                            data.cleanup();
-                        } else {
-                            editor.remove("datacenters");
-                        }
-                    } else {
-                        editor.remove("datacenters");
-                        editor.remove("sessionsToDestroy");
-                        editor.remove("currentDatacenterId");
-                        editor.remove("timeDifference");
-                    }
-                    editor.commit();
-                    File configFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "config.dat");
-                    if (configFile.exists()) {
-                        configFile.delete();
-                    }
+//                    editor.putInt("datacenterSetId", isTestBackend);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -646,18 +429,6 @@ public void run() {
         });
     }
 
-    void clearRequestsForRequestClass(int requestClass, Datacenter datacenter) {
-        for (RPCRequest request : runningRequests) {
-            Datacenter dcenter = datacenterWithId(request.runningDatacenterId);
-            if ((request.flags & requestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {
-                request.runningMessageId = 0;
-                request.runningMessageSeqNo = 0;
-                request.runningStartTime = 0;
-                request.runningMinStartTime = 0;
-                request.transportChannelToken = 0;
-            }
-        }
-    }
 
     public void cleanUp() {
         Utilities.stageQueue.postRunnable(new Runnable() {
@@ -694,10 +465,6 @@ public void run() {
                 pingIdToDate.clear();
                 quickAckIdToRequestIds.clear();
 
-                for (Datacenter datacenter : datacenters.values()) {
-                    datacenter.recreateSessions();
-                    datacenter.authorized = false;
-                }
 
                 sessionsToDestroy.clear();
                 saveSession();
@@ -762,100 +529,6 @@ public void run() {
 
 
 
-
-
-
-    private TLObject wrapInLayer(TLObject object, int datacenterId, RPCRequest request) {
-        if (object.layer() > 0) {
-            Datacenter datacenter = datacenterWithId(datacenterId);
-            if (datacenter == null || datacenter.lastInitVersion != BuildVars.BUILD_VERSION) {
-                request.initRequest = true;
-                TLRPC.initConnection invoke = new TLRPC.initConnection();
-                invoke.query = object;
-                invoke.api_id = BuildVars.APP_ID;
-                try {
-                    invoke.lang_code = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
-                    if (invoke.lang_code.length() == 0) {
-                        invoke.lang_code = "en";
-                    }
-                    invoke.device_model = Build.MANUFACTURER + Build.MODEL;
-                    PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                    invoke.app_version = pInfo.versionName + " (" + pInfo.versionCode + ")";
-                    invoke.system_version = "SDK " + Build.VERSION.SDK_INT;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                    invoke.lang_code = "en";
-                    invoke.device_model = "Android unknown";
-                    invoke.app_version = "App version unknown";
-                    invoke.system_version = "SDK " + Build.VERSION.SDK_INT;
-                }
-                if (invoke.lang_code == null || invoke.lang_code.length() == 0) {
-                    invoke.lang_code = "en";
-                }
-                if (invoke.device_model == null || invoke.device_model.length() == 0) {
-                    invoke.device_model = "Android unknown";
-                }
-                if (invoke.app_version == null || invoke.app_version.length() == 0) {
-                    invoke.app_version = "App version unknown";
-                }
-                if (invoke.system_version == null || invoke.system_version.length() == 0) {
-                    invoke.system_version = "SDK Unknown";
-                }
-                TLRPC.invokeWithLayer invoke2 = new TLRPC.invokeWithLayer();
-                invoke2.query = invoke;
-                FileLog.d("wrap in layer", "" + object);
-                object = invoke2;
-            }
-        }
-        return object;
-    }
-
-    public long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate completionBlock) {
-        return performRpc(rpc, completionBlock, null, true, RPCRequest.RPCRequestClassGeneric, DEFAULT_DATACENTER_ID);
-    }
-
-    public long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate completionBlock, boolean requiresCompletion, int requestClass) {
-        return performRpc(rpc, completionBlock, null, requiresCompletion, requestClass, DEFAULT_DATACENTER_ID, true);
-    }
-
-    public long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate completionBlock, final RPCRequest.RPCQuickAckDelegate quickAckBlock, final boolean requiresCompletion, final int requestClass, final int datacenterId) {
-        return performRpc(rpc, completionBlock, quickAckBlock, requiresCompletion, requestClass, datacenterId, true);
-    }
-
-    public long performRpc(final TLObject rpc, final RPCRequest.RPCRequestDelegate completionBlock, final RPCRequest.RPCQuickAckDelegate quickAckBlock, final boolean requiresCompletion, final int requestClass, final int datacenterId, final boolean runQueue) {
-        if (rpc == null || !UserConfig.isClientActivated() && (requestClass & RPCRequest.RPCRequestClassWithoutLogin) == 0) {
-            FileLog.e("tmessages", "can't do request without login " + rpc);
-            return 0;
-        }
-
-        final long requestToken = nextCallToken++;
-
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                RPCRequest request = new RPCRequest();
-                request.token = requestToken;
-                request.flags = requestClass;
-
-                request.runningDatacenterId = datacenterId;
-
-                request.rawRequest = rpc;
-                request.rpcRequest = wrapInLayer(rpc, datacenterId, request);
-                request.completionBlock = completionBlock;
-                request.quickAckBlock = quickAckBlock;
-                request.requiresCompletion = requiresCompletion;
-
-                requestQueue.add(request);
-
-                if (runQueue) {
-                    processRequestQueue(0, 0);
-                }
-            }
-        });
-
-        return requestToken;
-    }
-
     public void cancelRpc(final long token, final boolean notifyServer) {
         cancelRpc(token, notifyServer, false);
     }
@@ -892,7 +565,6 @@ public void run() {
                                 if (notifyServer) {
                                     TLRPC.TL_rpc_drop_answer dropAnswer = new TLRPC.TL_rpc_drop_answer();
                                     dropAnswer.req_msg_id = request.runningMessageId;
-                                    performRpc(dropAnswer, null, false, request.flags);
                                 }
                             }
 
@@ -973,848 +645,11 @@ public int getTimeDifference() {
         return timeDifference;
     }
 
-    private void processRequestQueue(int requestClass, int _datacenterId) {
-        boolean haveNetwork = true;//isNetworkOnline();
-
-        genericMessagesToDatacenters.clear();
-        unknownDatacenterIds.clear();
-        neededDatacenterIds.clear();
-        unauthorizedDatacenterIds.clear();
-
-        TcpConnection genericConnection = null;
-        Datacenter defaultDatacenter = datacenterWithId(currentDatacenterId);
-        if (defaultDatacenter != null) {
-            genericConnection = defaultDatacenter.getGenericConnection(this);
-        }
-
-        int currentTime = (int) (System.currentTimeMillis() / 1000);
-        for (int i = 0; i < runningRequests.size(); i++) {
-            RPCRequest request = runningRequests.get(i);
-
-            int datacenterId = request.runningDatacenterId;
-            if (datacenterId == DEFAULT_DATACENTER_ID) {
-                if (movingToDatacenterId != DEFAULT_DATACENTER_ID) {
-                    continue;
-                }
-                datacenterId = currentDatacenterId;
-            }
-
-            if (datacenters.size() > 1 && (request.flags & RPCRequest.RPCRequestClassTryDifferentDc) != 0) {
-                int requestStartTime = request.runningStartTime;
-                int timeout = 30;
-                if (updatingDcSettings && request.rawRequest instanceof TLRPC.TL_help_getConfig) {
-                    requestStartTime = updatingDcStartTime;
-                    timeout = 60;
-                }
-                if (requestStartTime != 0 && requestStartTime < currentTime - timeout) {
-                    FileLog.e("tmessages", "move " + request.rawRequest + " to requestQueue");
-                    requestQueue.add(request);
-                    runningRequests.remove(i);
-                    i--;
-                    continue;
-                }
-            }
-
-            Datacenter requestDatacenter = datacenterWithId(datacenterId);
-            if (!request.initRequest && requestDatacenter.lastInitVersion != BuildVars.BUILD_VERSION) {
-                request.rpcRequest = wrapInLayer(request.rawRequest, requestDatacenter.datacenterId, request);
-                ByteBufferDesc os = new ByteBufferDesc(true);
-                request.rpcRequest.serializeToStream(os);
-                request.serializedLength = os.length();
-            }
-
-            if (requestDatacenter == null) {
-                if (!unknownDatacenterIds.contains(datacenterId)) {
-                    unknownDatacenterIds.add(datacenterId);
-                }
-                continue;
-            } else if (requestDatacenter.authKey == null) {
-                if (!neededDatacenterIds.contains(datacenterId)) {
-                    neededDatacenterIds.add(datacenterId);
-                }
-                continue;
-            } else if (!requestDatacenter.authorized && request.runningDatacenterId != DEFAULT_DATACENTER_ID && request.runningDatacenterId != currentDatacenterId && (request.flags & RPCRequest.RPCRequestClassEnableUnauthorized) == 0) {
-                if (!unauthorizedDatacenterIds.contains(datacenterId)) {
-                    unauthorizedDatacenterIds.add(datacenterId);
-                }
-                continue;
-            }
-
-            float maxTimeout = 8.0f;
-
-            TcpConnection connection = null;
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                connection = requestDatacenter.getGenericConnection(this);
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                connection = requestDatacenter.getDownloadConnection(this);
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                connection = requestDatacenter.getUploadConnection(this);
-            }
-
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                if (connection.channelToken == 0) {
-                    continue;
-                }
-            } else {
-                if (!haveNetwork || connection.channelToken == 0) {
-                    continue;
-                }
-                maxTimeout = 30.0f;
-            }
-
-            boolean forceThisRequest = (request.flags & requestClass) != 0 && requestDatacenter.datacenterId == _datacenterId;
-
-            if (request.rawRequest instanceof TLRPC.TL_get_future_salts || request.rawRequest instanceof TLRPC.TL_destroy_session) {
-                if (request.runningMessageId != 0) {
-                    request.addRespondMessageId(request.runningMessageId);
-                }
-                request.runningMessageId = 0;
-                request.runningMessageSeqNo = 0;
-                request.transportChannelToken = 0;
-                forceThisRequest = false;
-            }
-
-            if (((Math.abs(currentTime - request.runningStartTime) > maxTimeout) && (currentTime > request.runningMinStartTime || Math.abs(currentTime - request.runningMinStartTime) > 60.0)) || forceThisRequest) {
-                if (!forceThisRequest && request.transportChannelToken > 0) {
-                    if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && request.transportChannelToken == connection.channelToken) {
-                        FileLog.d("tmessages", "Request token is valid, not retrying " + request.rawRequest);
-                        continue;
-                    } else {
-                        if (connection.channelToken != 0 && request.transportChannelToken == connection.channelToken) {
-                            FileLog.d("tmessages", "Request download token is valid, not retrying " + request.rawRequest);
-                            continue;
-                        }
-                    }
-                }
-
-                if (request.transportChannelToken != 0 && request.transportChannelToken != connection.channelToken) {
-                    request.lastResendTime = 0;
-                }
-
-                request.retryCount++;
-
-                if (!request.salt && (request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    int retryMax = 10;
-                    if ((request.flags & RPCRequest.RPCRequestClassForceDownload) == 0) {
-                        if (request.wait) {
-                            retryMax = 1;
-                        } else {
-                            retryMax = 6;
-                        }
-                    }
-                    if (request.retryCount >= retryMax) {
-                        FileLog.e("tmessages", "timed out " + request.rawRequest);
-                        TLRPC.TL_error error = new TLRPC.TL_error();
-                        error.code = -123;
-                        error.text = "RETRY_LIMIT";
-                        if (request.completionBlock != null) {
-                            request.completionBlock.run(null, error);
-                        }
-                        runningRequests.remove(i);
-                        i--;
-                        continue;
-                    }
-                }
-
-                NetworkMessage networkMessage = new NetworkMessage();
-                networkMessage.protoMessage = new TLRPC.TL_protoMessage();
-
-                if (request.runningMessageSeqNo == 0) {
-                    request.runningMessageSeqNo = connection.generateMessageSeqNo(true);
-//                    request.runningMessageId = generateMessageId();
-                }
-                networkMessage.protoMessage.msg_id = request.runningMessageId;
-                networkMessage.protoMessage.seqno = request.runningMessageSeqNo;
-                networkMessage.protoMessage.bytes = request.serializedLength;
-                networkMessage.protoMessage.body = request.rpcRequest;
-                networkMessage.rawRequest = request.rawRequest;
-                networkMessage.requestId = request.token;
-
-                request.runningStartTime = currentTime;
-
-                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    request.transportChannelToken = connection.channelToken;
-                    addMessageToDatacenter(requestDatacenter.datacenterId, networkMessage);
-                } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    request.transportChannelToken = connection.channelToken;
-                    ArrayList<NetworkMessage> arr = new ArrayList<>();
-                    arr.add(networkMessage);
-                    proceedToSendingMessages(arr, connection, false);
-                } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    request.transportChannelToken = connection.channelToken;
-                    ArrayList<NetworkMessage> arr = new ArrayList<>();
-                    arr.add(networkMessage);
-                    proceedToSendingMessages(arr, connection, false);
-                }
-            }
-        }
-
-        if (genericConnection != null && genericConnection.channelToken != 0) {
-            Datacenter currentDatacenter = datacenterWithId(currentDatacenterId);
-
-            for (Long it : sessionsToDestroy) {
-                if (destroyingSessions.contains(it)) {
-                    continue;
-                }
-                if (System.currentTimeMillis() / 1000 - lastDestroySessionRequestTime > 2.0) {
-                    lastDestroySessionRequestTime = (int) (System.currentTimeMillis() / 1000);
-                    TLRPC.TL_destroy_session destroySession = new TLRPC.TL_destroy_session();
-                    destroySession.session_id = it;
-                    destroyingSessions.add(it);
-
-                    NetworkMessage networkMessage = new NetworkMessage();
-                    networkMessage.protoMessage = wrapMessage(destroySession, currentDatacenter.connection, false);
-                    if (networkMessage.protoMessage != null) {
-                        addMessageToDatacenter(currentDatacenter.datacenterId, networkMessage);
-                    }
-                }
-            }
-        }
-
-        int genericRunningRequestCount = 0;
-        int uploadRunningRequestCount = 0;
-        int downloadRunningRequestCount = 0;
-
-        for (RPCRequest request : runningRequests) {
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                genericRunningRequestCount++;
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                uploadRunningRequestCount++;
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                downloadRunningRequestCount++;
-            }
-        }
-
-        for (int i = 0; i < requestQueue.size(); i++) {
-            RPCRequest request = requestQueue.get(i);
-            if (request.cancelled) {
-                requestQueue.remove(i);
-                i--;
-                continue;
-            }
-
-            int datacenterId = request.runningDatacenterId;
-            if (datacenterId == DEFAULT_DATACENTER_ID) {
-                if (movingToDatacenterId != DEFAULT_DATACENTER_ID && (request.flags & RPCRequest.RPCRequestClassEnableUnauthorized) == 0) {
-                    continue;
-                }
-                datacenterId = currentDatacenterId;
-            }
-
-            if (datacenters.size() > 1 && (request.flags & RPCRequest.RPCRequestClassTryDifferentDc) != 0) {
-                int requestStartTime = request.runningStartTime;
-                int timeout = 30;
-                if (updatingDcSettings && request.rawRequest instanceof TLRPC.TL_help_getConfig) {
-                    requestStartTime = updatingDcStartTime;
-                    updatingDcStartTime = currentTime;
-                    timeout = 60;
-                } else {
-                    request.runningStartTime = 0;
-                }
-                if (requestStartTime != 0 && requestStartTime < currentTime - timeout) {
-                    ArrayList<Datacenter> allDc = new ArrayList<>(datacenters.values());
-                    for (int a = 0; a < allDc.size(); a++) {
-                        Datacenter dc = allDc.get(a);
-                        if (dc.datacenterId == datacenterId) {
-                            allDc.remove(a);
-                            break;
-                        }
-                    }
-                    Datacenter newDc = allDc.get(Math.abs(Utilities.random.nextInt() % allDc.size()));
-                    datacenterId = newDc.datacenterId;
-                    if (!(request.rawRequest instanceof TLRPC.TL_help_getConfig)) {
-                        currentDatacenterId = datacenterId;
-                    } else {
-                        request.runningDatacenterId = datacenterId;
-                    }
-                }
-            }
-
-            Datacenter requestDatacenter = datacenterWithId(datacenterId);
-            if (!request.initRequest && requestDatacenter.lastInitVersion != BuildVars.BUILD_VERSION) {
-                request.rpcRequest = wrapInLayer(request.rawRequest, requestDatacenter.datacenterId, request);
-            }
-
-            if (requestDatacenter == null) {
-                unknownDatacenterIds.add(datacenterId);
-                continue;
-            } else if (requestDatacenter.authKey == null) {
-                neededDatacenterIds.add(datacenterId);
-                continue;
-            } else if (!requestDatacenter.authorized && request.runningDatacenterId != DEFAULT_DATACENTER_ID && request.runningDatacenterId != currentDatacenterId && (request.flags & RPCRequest.RPCRequestClassEnableUnauthorized) == 0) {
-                unauthorizedDatacenterIds.add(datacenterId);
-                continue;
-            }
-
-            TcpConnection connection = null;
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                connection = requestDatacenter.getGenericConnection(this);
-            } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                connection = requestDatacenter.getDownloadConnection(this);
-            } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                connection = requestDatacenter.getUploadConnection(this);
-            }
-
-            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0 && connection.channelToken == 0) {
-                continue;
-            }
-
-            if (request.requiresCompletion) {
-                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    if (genericRunningRequestCount >= 60) {
-                        continue;
-                    }
-                    genericRunningRequestCount++;
-                } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    if (!haveNetwork || uploadRunningRequestCount >= 5) {
-                        continue;
-                    }
-                    uploadRunningRequestCount++;
-                } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    if (!haveNetwork || downloadRunningRequestCount >= 5) {
-                        continue;
-                    }
-                    downloadRunningRequestCount++;
-                }
-            }
-
-            long messageId = 0;
-
-            boolean canCompress = (request.flags & RPCRequest.RPCRequestClassCanCompress) != 0;
-
-            SerializedData os = new SerializedData(!canCompress);
-            request.rpcRequest.serializeToStream(os);
-            int requestLength = os.length();
-
-            if (requestLength != 0) {
-                if (canCompress) {
-                    try {
-                        byte[] data = Utilities.compress(os.toByteArray());
-                        os.cleanup();
-                        if (data.length < requestLength) {
-                            TLRPC.TL_gzip_packed packed = new TLRPC.TL_gzip_packed();
-                            packed.packed_data = data;
-                            request.rpcRequest = packed;
-                            os = new SerializedData(true);
-                            packed.serializeToStream(os);
-                            requestLength = os.length();
-                            os.cleanup();
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                NetworkMessage networkMessage = new NetworkMessage();
-                networkMessage.protoMessage = new TLRPC.TL_protoMessage();
-                networkMessage.protoMessage.msg_id = messageId;
-                networkMessage.protoMessage.seqno = connection.generateMessageSeqNo(true);
-                networkMessage.protoMessage.bytes = requestLength;
-                networkMessage.protoMessage.body = request.rpcRequest;
-                networkMessage.rawRequest = request.rawRequest;
-                networkMessage.requestId = request.token;
-
-                request.runningMessageId = messageId;
-                request.runningMessageSeqNo = networkMessage.protoMessage.seqno;
-                request.serializedLength = requestLength;
-                request.runningStartTime = (int) (System.currentTimeMillis() / 1000);
-                request.transportChannelToken = connection.channelToken;
-                if (request.requiresCompletion) {
-                    runningRequests.add(request);
-                }
-
-                if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    addMessageToDatacenter(requestDatacenter.datacenterId, networkMessage);
-                } else {
-                    ArrayList<NetworkMessage> arr = new ArrayList<>();
-                    arr.add(networkMessage);
-                    proceedToSendingMessages(arr, connection, false);
-                }
-            } else {
-                FileLog.e("tmessages", "***** Couldn't serialize " + request.rawRequest);
-            }
-
-            requestQueue.remove(i);
-            i--;
-        }
-
-        for (Datacenter datacenter : datacenters.values()) {
-            if (genericMessagesToDatacenters.get(datacenter.datacenterId) == null && datacenter.connection != null && datacenter.connection.channelToken != 0 && datacenter.connection.hasMessagesToConfirm()) {
-                genericMessagesToDatacenters.put(datacenter.datacenterId, new ArrayList<NetworkMessage>());
-            }
-        }
-
-        for (int iter : genericMessagesToDatacenters.keySet()) {
-            Datacenter datacenter = datacenterWithId(iter);
-            if (datacenter != null) {
-                boolean scannedPreviousRequests = false;
-                long lastSendMessageRpcId = 0;
-
-                boolean hasSendMessage = false;
-                ArrayList<NetworkMessage> arr = genericMessagesToDatacenters.get(iter);
-                for (NetworkMessage networkMessage : arr) {
-                    TLRPC.TL_protoMessage message = networkMessage.protoMessage;
-
-                    Object rawRequest = networkMessage.rawRequest;
-
-                    if (rawRequest != null && (rawRequest instanceof TLRPC.TL_messages_sendMessage ||
-                            rawRequest instanceof TLRPC.TL_messages_sendMedia ||
-                            rawRequest instanceof TLRPC.TL_messages_forwardMessages ||
-                            rawRequest instanceof TLRPC.TL_messages_forwardMessage ||
-                            rawRequest instanceof TLRPC.TL_messages_sendEncrypted ||
-                            rawRequest instanceof TLRPC.TL_messages_sendEncryptedFile ||
-                            rawRequest instanceof TLRPC.TL_messages_sendEncryptedService)) {
-
-                        if (rawRequest instanceof TLRPC.TL_messages_sendMessage) {
-                            hasSendMessage = true;
-                        }
-
-                        if (!scannedPreviousRequests) {
-                            scannedPreviousRequests = true;
-
-                            ArrayList<Long> currentRequests = new ArrayList<>();
-                            for (NetworkMessage currentNetworkMessage : arr) {
-                                TLRPC.TL_protoMessage currentMessage = currentNetworkMessage.protoMessage;
-
-                                Object currentRawRequest = currentNetworkMessage.rawRequest;
-
-                                if (currentRawRequest instanceof TLRPC.TL_messages_sendMessage ||
-                                        currentRawRequest instanceof TLRPC.TL_messages_sendMedia ||
-                                        currentRawRequest instanceof TLRPC.TL_messages_forwardMessages ||
-                                        currentRawRequest instanceof TLRPC.TL_messages_forwardMessage ||
-                                        currentRawRequest instanceof TLRPC.TL_messages_sendEncrypted ||
-                                        currentRawRequest instanceof TLRPC.TL_messages_sendEncryptedFile ||
-                                        currentRawRequest instanceof TLRPC.TL_messages_sendEncryptedService) {
-                                    currentRequests.add(currentMessage.msg_id);
-                                }
-                            }
-
-                            long maxRequestId = 0;
-                            for (RPCRequest request : runningRequests) {
-                                if (request.rawRequest instanceof TLRPC.TL_messages_sendMessage ||
-                                        request.rawRequest instanceof TLRPC.TL_messages_sendMedia ||
-                                        request.rawRequest instanceof TLRPC.TL_messages_forwardMessages ||
-                                        request.rawRequest instanceof TLRPC.TL_messages_forwardMessage ||
-                                        request.rawRequest instanceof TLRPC.TL_messages_sendEncrypted ||
-                                        request.rawRequest instanceof TLRPC.TL_messages_sendEncryptedFile ||
-                                        request.rawRequest instanceof TLRPC.TL_messages_sendEncryptedService) {
-                                    if (!currentRequests.contains(request.runningMessageId)) {
-                                        maxRequestId = Math.max(maxRequestId, request.runningMessageId);
-                                    }
-                                }
-                            }
-
-                            lastSendMessageRpcId = maxRequestId;
-                        }
-
-                        if (lastSendMessageRpcId != 0 && lastSendMessageRpcId != message.msg_id) {
-                            TLRPC.TL_invokeAfterMsg invokeAfterMsg = new TLRPC.TL_invokeAfterMsg();
-                            invokeAfterMsg.msg_id = lastSendMessageRpcId;
-                            invokeAfterMsg.query = message.body;
-
-                            message.body = invokeAfterMsg;
-                            message.bytes = message.bytes + 4 + 8;
-                        }
-
-                        lastSendMessageRpcId = message.msg_id;
-                    }
-                }
-
-                proceedToSendingMessages(arr, datacenter.getGenericConnection(this), hasSendMessage);
-            }
-        }
-
-        if ((requestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
-            ArrayList<NetworkMessage> messagesIt = genericMessagesToDatacenters.get(_datacenterId);
-            if (messagesIt == null || messagesIt.size() == 0) {
-//                generatePing();
-            }
-        }
-
-        if (!unknownDatacenterIds.isEmpty() && !updatingDcSettings) {
-        }
-
-        for (int num : neededDatacenterIds) {
-            if (num != movingToDatacenterId) {
-                boolean notFound = true;
-                for (Action actor : actionQueue) {
-                    if (actor instanceof HandshakeAction) {
-                        HandshakeAction eactor = (HandshakeAction) actor;
-                        if (eactor.datacenter.datacenterId == num) {
-                            notFound = false;
-                            break;
-                        }
-                    }
-                }
-                if (notFound) {
-                    HandshakeAction actor = new HandshakeAction(datacenterWithId(num));
-                    actor.delegate = this;
-                    dequeueActor(actor, true);
-                }
-            }
-        }
-
-        for (int num : unauthorizedDatacenterIds) {
-            if (num != currentDatacenterId && num != movingToDatacenterId && UserConfig.isClientActivated()) {
-                boolean notFound = true;
-                for (Action actor : actionQueue) {
-
-                }
-                if (notFound) {
-
-                }
-            }
-        }
-    }
-
-    void addMessageToDatacenter(int datacenterId, NetworkMessage message) {
-        ArrayList<NetworkMessage> arr = genericMessagesToDatacenters.get(datacenterId);
-        if (arr == null) {
-            arr = new ArrayList<>();
-            genericMessagesToDatacenters.put(datacenterId, arr);
-        }
-        arr.add(message);
-    }
-
-    TLRPC.TL_protoMessage wrapMessage(TLObject message, TcpConnection connection, boolean meaningful) {
-        ByteBufferDesc os = new ByteBufferDesc(true);
-        message.serializeToStream(os);
-
-        if (os.length() != 0) {
-            TLRPC.TL_protoMessage protoMessage = new TLRPC.TL_protoMessage();
-//            protoMessage.msg_id = generateMessageId();
-            protoMessage.bytes = os.length();
-            protoMessage.body = message;
-            protoMessage.seqno = connection.generateMessageSeqNo(meaningful);
-            return protoMessage;
-        } else {
-            FileLog.e("tmessages", "***** Couldn't serialize " + message);
-            return null;
-        }
-    }
-
-    void proceedToSendingMessages(ArrayList<NetworkMessage> messageList, TcpConnection connection, boolean reportAck) {
-        if (connection.getSissionId() == 0) {
-            return;
-        }
-
-        ArrayList<NetworkMessage> messages = new ArrayList<>();
-        if (messageList != null) {
-            messages.addAll(messageList);
-        }
-
-        NetworkMessage message = null;
-        if (message != null) {
-            messages.add(message);
-        }
-
-//        sendMessagesToTransport(messages, connection, reportAck);
-    }
-
-
-
-
-    void refillSaltSet(final Datacenter datacenter) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                for (RPCRequest request : requestQueue) {
-                    if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
-                        Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                        if (requestDatacenter.datacenterId == datacenter.datacenterId) {
-                            return;
-                        }
-                    }
-                }
-
-                for (RPCRequest request : runningRequests) {
-                    if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
-                        Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
-                        if (requestDatacenter.datacenterId == datacenter.datacenterId) {
-                            return;
-                        }
-                    }
-                }
-
-                TLRPC.TL_get_future_salts getFutureSalts = new TLRPC.TL_get_future_salts();
-                getFutureSalts.num = 32;
-
-                performRpc(getFutureSalts, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(TLObject response, TLRPC.TL_error error) {
-                        TLRPC.TL_futuresalts res = (TLRPC.TL_futuresalts) response;
-                        if (error == null) {
-                            int currentTime = getCurrentTime();
-                            datacenter.mergeServerSalts(currentTime, res.salts);
-                            saveSession();
-                        }
-                    }
-                }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin, datacenter.datacenterId);
-            }
-        });
-    }
-
-    void messagesConfirmed(final long requestMsgId) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                for (RPCRequest request : runningRequests) {
-                    if (requestMsgId == request.runningMessageId) {
-                        request.confirmed = true;
-                    }
-                }
-            }
-        });
-    }
-
-    private void rpcCompleted(final long requestMsgId) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                for (int i = 0; i < runningRequests.size(); i++) {
-                    RPCRequest request = runningRequests.get(i);
-                    removeRequestInClass(request.token);
-                    if (request.respondsToMessageId(requestMsgId)) {
-                        request.rawRequest.freeResources();
-                        request.rpcRequest.freeResources();
-                        runningRequests.remove(i);
-                        i--;
-                    }
-                }
-            }
-        });
-    }
-
-
-
-
-
 
     //================================================================================
     // TCPConnection delegate
     //================================================================================
 
-    @Override
-    public void tcpConnectionClosed(TcpConnection connection) {
-        if (connection.getDatacenterId() == currentDatacenterId && (connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
-            if (isNetworkOnline()) {
-                connectionState = 2;
-            } else {
-                connectionState = 1;
-            }
-            if (BuildVars.DEBUG_VERSION) {
-                try {
-                    ConnectivityManager cm = (ConnectivityManager) ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-                    NetworkInfo[] networkInfos = cm.getAllNetworkInfo();
-                    for (int a = 0; a < 2; a++) {
-                        if (a >= networkInfos.length) {
-                            break;
-                        }
-                        NetworkInfo info = networkInfos[a];
-                        FileLog.e("tmessages", "Network: " + info.getTypeName() + " status: " + info.getState() + " info: " + info.getExtraInfo() + " object: " + info.getDetailedState() + " other: " + info);
-                    }
-                    if (networkInfos.length == 0) {
-                        FileLog.e("tmessages", "no network available");
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", "NETWORK STATE GET ERROR", e);
-                }
-            }
-            final int stateCopy = connectionState;
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                }
-            });
-        } else if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
-            FileLog.e("tmessages", "push connection closed");
-            if (BuildVars.DEBUG_VERSION) {
-                try {
-                    ConnectivityManager cm = (ConnectivityManager) ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-                    NetworkInfo[] networkInfos = cm.getAllNetworkInfo();
-                    for (int a = 0; a < 2; a++) {
-                        if (a >= networkInfos.length) {
-                            break;
-                        }
-                        NetworkInfo info = networkInfos[a];
-                        FileLog.e("tmessages", "Network: " + info.getTypeName() + " status: " + info.getState() + " info: " + info.getExtraInfo() + " object: " + info.getDetailedState() + " other: " + info);
-                    }
-                    if (networkInfos.length == 0) {
-                        FileLog.e("tmessages", "no network available");
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", "NETWORK STATE GET ERROR", e);
-                }
-            }
-            sendingPushPing = false;
-            lastPushPingTime = System.currentTimeMillis() - 60000 * 3 + 4000;
-        }
-    }
-
-    @Override
-    public void tcpConnectionConnected(TcpConnection connection) {
-        Datacenter datacenter = datacenterWithId(connection.getDatacenterId());
-        if (datacenter.authKey != null) {
-            if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
-                sendingPushPing = false;
-                //lastPushPingTime = System.currentTimeMillis() - 60000 * 3 + 4000; //TODO check this
-                //FileLog.e("tmessages", "schedule push ping in 4 seconds");
-                lastPushPingTime = System.currentTimeMillis();
-//                generatePing(datacenter, true);
-            } else {
-                if (paused && lastPauseTime != 0) {
-                    lastPauseTime = System.currentTimeMillis();
-                    nextSleepTimeout = 30000;
-                }
-                processRequestQueue(connection.transportRequestClass, connection.getDatacenterId());
-            }
-        }
-    }
-
-    @Override
-    public void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack) {
-        ArrayList<Long> arr = quickAckIdToRequestIds.get(ack);
-        if (arr != null) {
-            for (RPCRequest request : runningRequests) {
-                if (arr.contains(request.token)) {
-                    if (request.quickAckBlock != null) {
-                        request.quickAckBlock.quickAck();
-                    }
-                }
-            }
-            quickAckIdToRequestIds.remove(ack);
-        }
-    }
-
-    private void finishUpdatingState(TcpConnection connection) {
-        if (connection.getDatacenterId() == currentDatacenterId && (connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
-            if (ConnectionsManager.getInstance().connectionState == 3) {
-                ConnectionsManager.getInstance().connectionState = 0;
-                final int stateCopy = ConnectionsManager.getInstance().connectionState;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                    }
-                });
-            }
-        }
-    }
-
-    @Override
-    public void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length) {
-        if (connection.getDatacenterId() == currentDatacenterId && (connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
-            if (connectionState == 1 || connectionState == 2) {
-                connectionState = 3;
-                final int stateCopy = connectionState;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                    }
-                });
-            }
-        }
-        if (length == 4) {
-            int error = data.readInt32(false);
-            FileLog.e("tmessages", "mtproto error = " + error);
-            connection.suspendConnection(true);
-            connection.connect();
-            return;
-        }
-        Datacenter datacenter = datacenterWithId(connection.getDatacenterId());
-
-        long keyId = data.readInt64(false);
-        if (keyId == 0) {
-            long messageId = data.readInt64(false);
-            if (connection.isMessageIdProcessed(messageId)) {
-                finishUpdatingState(connection);
-                return;
-            }
-
-            int messageLength = data.readInt32(false);
-
-            TLObject message = null;
-
-            if (message != null) {
-//                processMessage(message, messageId, 0, 0, connection, 0, 0);
-                connection.addProcessedMessageId(messageId);
-            }
-        } else {
-            if (datacenter.authKeyId == 0 || keyId != datacenter.authKeyId) {
-                FileLog.e("tmessages", "Error: invalid auth key id " + connection);
-                datacenter.switchTo443Port();
-                connection.suspendConnection(true);
-                connection.connect();
-                return;
-            }
-
-            byte[] messageKey = data.readData(16, false);
-            MessageKeyData keyData = MessageKeyData.generateMessageKeyData(datacenter.authKey, messageKey, true);
-
-            Utilities.aesIgeEncryption(data.buffer, keyData.aesKey, keyData.aesIv, false, false, data.position(), length - 24);
-
-            long messageServerSalt = data.readInt64(false);
-            long messageSessionId = data.readInt64(false);
-
-            if (messageSessionId != connection.getSissionId()) {
-                FileLog.e("tmessages", String.format("***** Error: invalid message session ID (%d instead of %d)", messageSessionId, connection.getSissionId()));
-                finishUpdatingState(connection);
-                return;
-            }
-
-            boolean doNotProcess = false;
-
-            long messageId = data.readInt64(false);
-            int messageSeqNo = data.readInt32(false);
-            int messageLength = data.readInt32(false);
-
-            if (connection.isMessageIdProcessed(messageId)) {
-                doNotProcess = true;
-            }
-
-            if (messageSeqNo % 2 != 0) {
-                connection.addMessageToConfirm(messageId);
-            }
-
-            byte[] realMessageKeyFull = Utilities.computeSHA1(data.buffer, 24, Math.min(messageLength + 32 + 24, data.limit()));
-            if (realMessageKeyFull == null) {
-                return;
-            }
-
-            if (!Utilities.arraysEquals(messageKey, 0, realMessageKeyFull, realMessageKeyFull.length - 16)) {
-                FileLog.e("tmessages", "***** Error: invalid message key");
-                datacenter.switchTo443Port();
-                connection.suspendConnection(true);
-                connection.connect();
-                return;
-            }
-
-            if (!doNotProcess) {
-                TLObject message = null;
-                if (message != null) {
-                    FileLog.d("tmessages", "received object " + message);
-//                    processMessage(message, messageId, messageSeqNo, messageServerSalt, connection, 0, 0);
-                    connection.addProcessedMessageId(messageId);
-
-                    if ((connection.transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
-                        ArrayList<NetworkMessage> messages = new ArrayList<>();
-//                        NetworkMessage networkMessage = connection.generateConfirmationRequest();
-//                        if (networkMessage != null) {
-//                            messages.add(networkMessage);
-//                        }
-//                        sendMessagesToTransport(messages, connection, false);
-                    }
-                }
-            } else {
-                proceedToSendingMessages(null, connection, false);
-            }
-            finishUpdatingState(connection);
-        }
-    }
-
-
 
 
     //================================================================================
@@ -1830,21 +665,6 @@ public void dequeueActor(final Action actor, final boolean execute) {
 
     @Override
     public void ActionDidFinishExecution(final Action action, HashMap<String, Object> params) {
-        if (action instanceof HandshakeAction) {
-            HandshakeAction eactor = (HandshakeAction) action;
-            eactor.datacenter.connection.delegate = this;
-            saveSession();
-
-            if (eactor.datacenter.datacenterId == currentDatacenterId || eactor.datacenter.datacenterId == movingToDatacenterId) {
-                timeDifference = (Integer) params.get("timeDifference");
-                eactor.datacenter.recreateSessions();
-
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, eactor.datacenter);
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, eactor.datacenter);
-                clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, eactor.datacenter);
-            }
-            processRequestQueue(RPCRequest.RPCRequestClassTransportMask, eactor.datacenter.datacenterId);
-        }
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
deleted file mode 100644
index cb28e751a..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
+++ /dev/null
@@ -1,625 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-
-public class Datacenter {
-    private static final int DATA_VERSION = 5;
-
-    public int datacenterId;
-    public ArrayList<String> addressesIpv4 = new ArrayList<>();
-    public ArrayList<String> addressesIpv6 = new ArrayList<>();
-    public ArrayList<String> addressesIpv4Download = new ArrayList<>();
-    public ArrayList<String> addressesIpv6Download = new ArrayList<>();
-    public HashMap<String, Integer> ports = new HashMap<>();
-    public int[] defaultPorts =   new int[] {-1, 80, -1, 443, -1, 443, -1, 80, -1, 443, -1};
-    public int[] defaultPorts8888 = new int[] {-1, 8888, -1, 443, -1, 8888,  -1, 80, -1, 8888,  -1};
-    public boolean authorized;
-    public byte[] authKey;
-    public long authKeyId;
-    public int lastInitVersion = 0;
-    public int overridePort = -1;
-
-    private volatile int currentPortNumIpv4 = 0;
-    private volatile int currentAddressNumIpv4 = 0;
-    private volatile int currentPortNumIpv6 = 0;
-    private volatile int currentAddressNumIpv6 = 0;
-    private volatile int currentPortNumIpv4Download = 0;
-    private volatile int currentAddressNumIpv4Download = 0;
-    private volatile int currentPortNumIpv6Download = 0;
-    private volatile int currentAddressNumIpv6Download = 0;
-
-    public TcpConnection connection;
-    private TcpConnection downloadConnection;
-    private TcpConnection uploadConnection;
-    public TcpConnection pushConnection;
-
-    private ArrayList<ServerSalt> authServerSaltSet = new ArrayList<>();
-
-    public Datacenter() {
-        authServerSaltSet = new ArrayList<>();
-    }
-
-    public Datacenter(SerializedData data, int version) {
-        if (version == 0) {
-            datacenterId = data.readInt32(false);
-            String address = data.readString(false);
-            addressesIpv4.add(address);
-            int port = data.readInt32(false);
-            ports.put(address, port);
-            int len = data.readInt32(false);
-            if (len != 0) {
-                authKey = data.readData(len, false);
-            }
-            len = data.readInt32(false);
-            if (len != 0) {
-                authKeyId = data.readInt64(false);
-            }
-            authorized = data.readInt32(false) != 0;
-            len = data.readInt32(false);
-            for (int a = 0; a < len; a++) {
-                ServerSalt salt = new ServerSalt();
-                salt.validSince = data.readInt32(false);
-                salt.validUntil = data.readInt32(false);
-                salt.value = data.readInt64(false);
-                if (authServerSaltSet == null) {
-                    authServerSaltSet = new ArrayList<>();
-                }
-                authServerSaltSet.add(salt);
-            }
-        } else if (version == 1) {
-            int currentVersion = data.readInt32(false);
-            if (currentVersion >= 2 && currentVersion <= 5) {
-                datacenterId = data.readInt32(false);
-                if (currentVersion >= 3) {
-                    lastInitVersion = data.readInt32(false);
-                }
-                int len = data.readInt32(false);
-                for (int a = 0; a < len; a++) {
-                    String address = data.readString(false);
-                    addressesIpv4.add(address);
-                    ports.put(address, data.readInt32(false));
-                }
-                if (currentVersion >= 5) {
-                    len = data.readInt32(false);
-                    for (int a = 0; a < len; a++) {
-                        String address = data.readString(false);
-                        addressesIpv6.add(address);
-                        ports.put(address, data.readInt32(false));
-                    }
-                    len = data.readInt32(false);
-                    for (int a = 0; a < len; a++) {
-                        String address = data.readString(false);
-                        addressesIpv4Download.add(address);
-                        ports.put(address, data.readInt32(false));
-                    }
-                    len = data.readInt32(false);
-                    for (int a = 0; a < len; a++) {
-                        String address = data.readString(false);
-                        addressesIpv6Download.add(address);
-                        ports.put(address, data.readInt32(false));
-                    }
-                }
-
-                len = data.readInt32(false);
-                if (len != 0) {
-                    authKey = data.readData(len, false);
-                }
-                if (currentVersion >= 4) {
-                    authKeyId = data.readInt64(false);
-                } else {
-                    len = data.readInt32(false);
-                    if (len != 0) {
-                        authKeyId = data.readInt64(false);
-                    }
-                }
-                authorized = data.readInt32(false) != 0;
-                len = data.readInt32(false);
-                for (int a = 0; a < len; a++) {
-                    ServerSalt salt = new ServerSalt();
-                    salt.validSince = data.readInt32(false);
-                    salt.validUntil = data.readInt32(false);
-                    salt.value = data.readInt64(false);
-                    if (authServerSaltSet == null) {
-                        authServerSaltSet = new ArrayList<>();
-                    }
-                    authServerSaltSet.add(salt);
-                }
-            }
-        } else if (version == 2) {
-
-        }
-        readCurrentAddressAndPortNum();
-    }
-
-    public void switchTo443Port() {
-        for (int a = 0; a < addressesIpv4.size(); a++) {
-            if (ports.get(addressesIpv4.get(a)) == 443) {
-                currentAddressNumIpv4 = a;
-                currentPortNumIpv4 = 0;
-                break;
-            }
-        }
-        for (int a = 0; a < addressesIpv6.size(); a++) {
-            if (ports.get(addressesIpv6.get(a)) == 443) {
-                currentAddressNumIpv6 = a;
-                currentPortNumIpv6 = 0;
-                break;
-            }
-        }
-        for (int a = 0; a < addressesIpv4Download.size(); a++) {
-            if (ports.get(addressesIpv4Download.get(a)) == 443) {
-                currentAddressNumIpv4Download = a;
-                currentPortNumIpv4Download = 0;
-                break;
-            }
-        }
-        for (int a = 0; a < addressesIpv6Download.size(); a++) {
-            if (ports.get(addressesIpv6Download.get(a)) == 443) {
-                currentAddressNumIpv6Download = a;
-                currentPortNumIpv6Download = 0;
-                break;
-            }
-        }
-    }
-
-    public String getCurrentAddress(int flags) {
-        int currentAddressNum;
-        ArrayList<String> addresses;
-        if ((flags & 2) != 0) {
-            if ((flags & 1) != 0) {
-                currentAddressNum = currentAddressNumIpv6Download;
-                addresses = addressesIpv6Download;
-            } else {
-                currentAddressNum = currentAddressNumIpv4Download;
-                addresses = addressesIpv4Download;
-            }
-        } else {
-            if ((flags & 1) != 0) {
-                currentAddressNum = currentAddressNumIpv6;
-                addresses = addressesIpv6;
-            } else {
-                currentAddressNum = currentAddressNumIpv4;
-                addresses = addressesIpv4;
-            }
-        }
-        if (addresses.isEmpty()) {
-            return null;
-        }
-        if (currentAddressNum >= addresses.size()) {
-            currentAddressNum = 0;
-            if ((flags & 2) != 0) {
-                if ((flags & 1) != 0) {
-                    currentAddressNumIpv6Download = currentAddressNum;
-                } else {
-                    currentAddressNumIpv4Download = currentAddressNum;
-                }
-            } else {
-                if ((flags & 1) != 0) {
-                    currentAddressNumIpv6 = currentAddressNum;
-                } else {
-                    currentAddressNumIpv4 = currentAddressNum;
-                }
-            }
-        }
-        return addresses.get(currentAddressNum);
-    }
-
-    public int getCurrentPort(int flags) {
-        if (ports.isEmpty()) {
-            return overridePort == -1 ? 443 : overridePort;
-        }
-
-        int[] portsArray = defaultPorts;
-
-        if (overridePort == 8888) {
-            portsArray = defaultPorts8888;
-        }
-
-        int currentPortNum;
-        ArrayList<String> addresses;
-        if ((flags & 2) != 0) {
-            if ((flags & 1) != 0) {
-                currentPortNum = currentPortNumIpv6Download;
-            } else {
-                currentPortNum = currentPortNumIpv4Download;
-            }
-        } else {
-            if ((flags & 1) != 0) {
-                currentPortNum = currentPortNumIpv6;
-            } else {
-                currentPortNum = currentPortNumIpv4;
-            }
-        }
-
-        if (currentPortNum >= defaultPorts.length) {
-            currentPortNum = 0;
-            if ((flags & 2) != 0) {
-                if ((flags & 1) != 0) {
-                    currentPortNumIpv6Download = currentPortNum;
-                } else {
-                    currentPortNumIpv4Download = currentPortNum;
-                }
-            } else {
-                if ((flags & 1) != 0) {
-                    currentPortNumIpv6 = currentPortNum;
-                } else {
-                    currentPortNumIpv4 = currentPortNum;
-                }
-            }
-        }
-        int port = portsArray[currentPortNum];
-        if (port == -1) {
-            if (overridePort != -1) {
-                return overridePort;
-            }
-            String address = getCurrentAddress(flags);
-            return ports.get(address);
-        }
-        return port;
-    }
-
-    public void addAddressAndPort(String address, int port, int flags) {
-        ArrayList<String> addresses;
-        if ((flags & 2) != 0) {
-            if ((flags & 1) != 0) {
-                addresses = addressesIpv6Download;
-            } else {
-                addresses = addressesIpv4Download;
-            }
-        } else {
-            if ((flags & 1) != 0) {
-                addresses = addressesIpv6;
-            } else {
-                addresses = addressesIpv4;
-            }
-        }
-        if (addresses.contains(address)) {
-            return;
-        }
-        addresses.add(address);
-        ports.put(address, port);
-    }
-
-    public void nextAddressOrPort(int flags) {
-        int currentPortNum;
-        int currentAddressNum;
-        ArrayList<String> addresses;
-        if ((flags & 2) != 0) {
-            if ((flags & 1) != 0) {
-                currentPortNum = currentPortNumIpv6Download;
-                currentAddressNum = currentAddressNumIpv6Download;
-                addresses = addressesIpv6Download;
-            } else {
-                currentPortNum = currentPortNumIpv4Download;
-                currentAddressNum = currentAddressNumIpv4Download;
-                addresses = addressesIpv4Download;
-            }
-        } else {
-            if ((flags & 1) != 0) {
-                currentPortNum = currentPortNumIpv6;
-                currentAddressNum = currentAddressNumIpv6;
-                addresses = addressesIpv6;
-            } else {
-                currentPortNum = currentPortNumIpv4;
-                currentAddressNum = currentAddressNumIpv4;
-                addresses = addressesIpv4;
-            }
-        }
-        if (currentPortNum + 1 < defaultPorts.length) {
-            currentPortNum++;
-        } else {
-            if (currentAddressNum + 1 < addresses.size()) {
-                currentAddressNum++;
-            } else {
-                currentAddressNum = 0;
-            }
-            currentPortNum = 0;
-        }
-        if ((flags & 2) != 0) {
-            if ((flags & 1) != 0) {
-                currentPortNumIpv6Download = currentPortNum;
-                currentAddressNumIpv6Download = currentAddressNum;
-            } else {
-                currentPortNumIpv4Download = currentPortNum;
-                currentAddressNumIpv4Download = currentAddressNum;
-            }
-        } else {
-            if ((flags & 1) != 0) {
-                currentPortNumIpv6 = currentPortNum;
-                currentAddressNumIpv6 = currentAddressNum;
-            } else {
-                currentPortNumIpv4 = currentPortNum;
-                currentAddressNumIpv4 = currentAddressNum;
-            }
-        }
-    }
-
-    public void storeCurrentAddressAndPortNum() {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("dataconfig", Context.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences.edit();
-                editor.putInt("dc" + datacenterId + "port", currentPortNumIpv4);
-                editor.putInt("dc" + datacenterId + "address", currentAddressNumIpv4);
-                editor.putInt("dc" + datacenterId + "port6", currentPortNumIpv6);
-                editor.putInt("dc" + datacenterId + "address6", currentAddressNumIpv6);
-                editor.putInt("dc" + datacenterId + "portD", currentPortNumIpv4Download);
-                editor.putInt("dc" + datacenterId + "addressD", currentAddressNumIpv4Download);
-                editor.putInt("dc" + datacenterId + "port6D", currentPortNumIpv6Download);
-                editor.putInt("dc" + datacenterId + "address6D", currentAddressNumIpv6Download);
-                editor.commit();
-            }
-        });
-    }
-
-    private void readCurrentAddressAndPortNum() {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("dataconfig", Context.MODE_PRIVATE);
-        currentPortNumIpv4 = preferences.getInt("dc" + datacenterId + "port", 0);
-        currentAddressNumIpv4 = preferences.getInt("dc" + datacenterId + "address", 0);
-        currentPortNumIpv6 = preferences.getInt("dc" + datacenterId + "port6", 0);
-        currentAddressNumIpv6 = preferences.getInt("dc" + datacenterId + "address6", 0);
-        currentPortNumIpv4Download = preferences.getInt("dc" + datacenterId + "portD", 0);
-        currentAddressNumIpv4Download = preferences.getInt("dc" + datacenterId + "addressD", 0);
-        currentPortNumIpv6Download = preferences.getInt("dc" + datacenterId + "port6D", 0);
-        currentAddressNumIpv6Download = preferences.getInt("dc" + datacenterId + "address6D", 0);
-    }
-
-    public void replaceAddressesAndPorts(ArrayList<String> newAddresses, HashMap<String, Integer> newPorts, int flags) {
-        ArrayList<String> addresses;
-        if ((flags & 2) != 0) {
-            if ((flags & 1) != 0) {
-                addresses = addressesIpv6Download;
-            } else {
-                addresses = addressesIpv4Download;
-            }
-        } else {
-            if ((flags & 1) != 0) {
-                addresses = addressesIpv6;
-            } else {
-                addresses = addressesIpv4;
-            }
-        }
-        for (String address : addresses) {
-            ports.remove(address);
-        }
-        if ((flags & 2) != 0) {
-            if ((flags & 1) != 0) {
-                addressesIpv6Download = newAddresses;
-            } else {
-                addressesIpv4Download = newAddresses;
-            }
-        } else {
-            if ((flags & 1) != 0) {
-                addressesIpv6 = newAddresses;
-            } else {
-                addressesIpv4 = newAddresses;
-            }
-        }
-        ports.putAll(newPorts);
-    }
-
-    public void SerializeToStream(SerializedData stream) {
-        stream.writeInt32(DATA_VERSION);
-        stream.writeInt32(datacenterId);
-        stream.writeInt32(lastInitVersion);
-        stream.writeInt32(addressesIpv4.size());
-        for (String address : addressesIpv4) {
-            stream.writeString(address);
-            stream.writeInt32(ports.get(address));
-        }
-        stream.writeInt32(addressesIpv6.size());
-        for (String address : addressesIpv6) {
-            stream.writeString(address);
-            stream.writeInt32(ports.get(address));
-        }
-        stream.writeInt32(addressesIpv4Download.size());
-        for (String address : addressesIpv4Download) {
-            stream.writeString(address);
-            stream.writeInt32(ports.get(address));
-        }
-        stream.writeInt32(addressesIpv6Download.size());
-        for (String address : addressesIpv6Download) {
-            stream.writeString(address);
-            stream.writeInt32(ports.get(address));
-        }
-        if (authKey != null) {
-            stream.writeInt32(authKey.length);
-            stream.writeRaw(authKey);
-        } else {
-            stream.writeInt32(0);
-        }
-        stream.writeInt64(authKeyId);
-        stream.writeInt32(authorized ? 1 : 0);
-        stream.writeInt32(authServerSaltSet.size());
-        for (ServerSalt salt : authServerSaltSet) {
-            stream.writeInt32(salt.validSince);
-            stream.writeInt32(salt.validUntil);
-            stream.writeInt64(salt.value);
-        }
-    }
-
-    public void clear() {
-        authKey = null;
-        authKeyId = 0;
-        authorized = false;
-        authServerSaltSet.clear();
-    }
-
-    public void clearServerSalts() {
-        authServerSaltSet.clear();
-    }
-
-    public long selectServerSalt(int date) {
-        boolean cleanupNeeded = false;
-
-        long result = 0;
-        int maxRemainingInterval = 0;
-
-        for (ServerSalt salt : authServerSaltSet) {
-            if (salt.validUntil < date || (salt.validSince == 0 && salt.validUntil == Integer.MAX_VALUE)) {
-                cleanupNeeded = true;
-            } else if (salt.validSince <= date && salt.validUntil > date) {
-                if (maxRemainingInterval == 0 || Math.abs(salt.validUntil - date) > maxRemainingInterval) {
-                    maxRemainingInterval = Math.abs(salt.validUntil - date);
-                    result = salt.value;
-                }
-            }
-        }
-
-        if (cleanupNeeded) {
-            for (int i = 0; i < authServerSaltSet.size(); i++) {
-                ServerSalt salt = authServerSaltSet.get(i);
-                if (salt.validUntil < date) {
-                    authServerSaltSet.remove(i);
-                    i--;
-                }
-            }
-        }
-
-        if (result == 0) {
-            FileLog.e("tmessages", "Valid salt not found");
-        }
-
-        return result;
-    }
-
-    private class SaltComparator implements Comparator<ServerSalt> {
-        @Override
-        public int compare(ServerSalt o1, ServerSalt o2) {
-            if (o1.validSince < o2.validSince) {
-                return -1;
-            } else if (o1.validSince > o2.validSince) {
-                return 1;
-            }
-            return 0;
-        }
-    }
-
-    public void mergeServerSalts(int date, ArrayList<TLRPC.TL_futureSalt> salts) {
-        if (salts == null) {
-            return;
-        }
-        ArrayList<Long> existingSalts = new ArrayList<>(authServerSaltSet.size());
-
-        for (ServerSalt salt : authServerSaltSet) {
-            existingSalts.add(salt.value);
-        }
-        for (TLRPC.TL_futureSalt saltDesc : salts) {
-            long salt = saltDesc.salt;
-            if (!existingSalts.contains(salt) && saltDesc.valid_until > date) {
-                ServerSalt serverSalt = new ServerSalt();
-                serverSalt.validSince = saltDesc.valid_since;
-                serverSalt.validUntil = saltDesc.valid_until;
-                serverSalt.value = salt;
-                authServerSaltSet.add(serverSalt);
-            }
-        }
-        Collections.sort(authServerSaltSet, new SaltComparator());
-    }
-
-    public void addServerSalt(ServerSalt serverSalt) {
-        for (ServerSalt salt : authServerSaltSet) {
-            if (salt.value == serverSalt.value) {
-                return;
-            }
-        }
-        authServerSaltSet.add(serverSalt);
-        Collections.sort(authServerSaltSet, new SaltComparator());
-    }
-
-    boolean containsServerSalt(long value) {
-        for (ServerSalt salt : authServerSaltSet) {
-            if (salt.value == value) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    public void suspendConnections() {
-        if (connection != null) {
-            connection.suspendConnection(true);
-        }
-        if (uploadConnection != null) {
-            uploadConnection.suspendConnection(true);
-        }
-        if (downloadConnection != null) {
-            downloadConnection.suspendConnection(true);
-        }
-    }
-
-    public void getSessions(ArrayList<Long> sessions) {
-        if (connection != null) {
-            sessions.add(connection.getSissionId());
-        }
-        if (uploadConnection != null) {
-            sessions.add(uploadConnection.getSissionId());
-        }
-        if (downloadConnection != null) {
-            sessions.add(downloadConnection.getSissionId());
-        }
-    }
-
-    public void recreateSessions() {
-        if (connection != null) {
-            connection.recreateSession();
-        }
-        if (uploadConnection != null) {
-            uploadConnection.recreateSession();
-        }
-        if (downloadConnection != null) {
-            downloadConnection.recreateSession();
-        }
-    }
-
-    public TcpConnection getDownloadConnection(TcpConnection.TcpConnectionDelegate delegate) {
-        if (authKey != null) {
-            if (downloadConnection == null) {
-                downloadConnection = new TcpConnection(datacenterId);
-                downloadConnection.delegate = delegate;
-                downloadConnection.transportRequestClass = RPCRequest.RPCRequestClassDownloadMedia;
-            }
-            downloadConnection.connect();
-        }
-        return downloadConnection;
-    }
-
-    public TcpConnection getUploadConnection(TcpConnection.TcpConnectionDelegate delegate) {
-        if (authKey != null) {
-            if (uploadConnection == null) {
-                uploadConnection = new TcpConnection(datacenterId);
-                uploadConnection.delegate = delegate;
-                uploadConnection.transportRequestClass = RPCRequest.RPCRequestClassUploadMedia;
-            }
-            uploadConnection.connect();
-        }
-        return uploadConnection;
-    }
-
-    public TcpConnection getGenericConnection(TcpConnection.TcpConnectionDelegate delegate) {
-        if (authKey != null) {
-            if (connection == null) {
-                connection = new TcpConnection(datacenterId);
-                connection.delegate = delegate;
-                connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
-            }
-            connection.connect();
-        }
-        return connection;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index 2a006d37b..5cd8ecce8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -470,13 +470,13 @@ private void startDownloadRequest() {
             final RequestInfo requestInfo = new RequestInfo();
             requestInfos.add(requestInfo);
             requestInfo.offset = req.offset;
-            requestInfo.requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    requestInfo.response = (TLRPC.TL_upload_file) response;
-                    processRequestResult(requestInfo, error);
-                }
-            }, null, true, RPCRequest.RPCRequestClassDownloadMedia | (isForceRequest ? RPCRequest.RPCRequestClassForceDownload : 0), datacenter_id, isLast);
+//            requestInfo.requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+//                @Override
+//                public void run(TLObject response, TLRPC.TL_error error) {
+//                    requestInfo.response = (TLRPC.TL_upload_file) response;
+//                    processRequestResult(requestInfo, error);
+//                }
+//            }, null, true, RPCRequest.RPCRequestClassDownloadMedia | (isForceRequest ? RPCRequest.RPCRequestClassForceDownload : 0), datacenter_id, isLast);
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index 1faeda79f..14c2811a8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -357,55 +357,55 @@ private void startUploadRequest() {
             cleanup();
             return;
         }
-        requestToken = ConnectionsManager.getInstance().performRpc(finalRequest, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-                requestToken = 0;
-                if (error == null) {
-                    if (response instanceof TLRPC.TL_boolTrue) {
-                        currentPartNum++;
-                        delegate.didChangedUploadProgress(FileUploadOperation.this, currentUploaded / (float) totalFileSize);
-                        if (isLastPart) {
-                            state = 3;
-                            if (key == null) {
-                                TLRPC.InputFile result;
-                                if (isBigFile) {
-                                    result = new TLRPC.TL_inputFileBig();
-                                } else {
-                                    result = new TLRPC.TL_inputFile();
-                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
-                                }
-                                result.parts = currentPartNum;
-                                result.id = currentFileId;
-                                result.name = uploadingFilePath.substring(uploadingFilePath.lastIndexOf("/") + 1);
-                                delegate.didFinishUploadingFile(FileUploadOperation.this, result, null, null, null);
-                                cleanup();
-                            } else {
-                                TLRPC.InputEncryptedFile result;
-                                if (isBigFile) {
-                                    result = new TLRPC.TL_inputEncryptedFileBigUploaded();
-                                } else {
-                                    result = new TLRPC.TL_inputEncryptedFileUploaded();
-                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
-                                }
-                                result.parts = currentPartNum;
-                                result.id = currentFileId;
-                                result.key_fingerprint = fingerprint;
-                                delegate.didFinishUploadingFile(FileUploadOperation.this, null, result, key, iv);
-                                cleanup();
-                            }
-                        } else {
-                            startUploadRequest();
-                        }
-                    } else {
-                        delegate.didFailedUploadingFile(FileUploadOperation.this);
-                        cleanup();
-                    }
-                } else {
-                    delegate.didFailedUploadingFile(FileUploadOperation.this);
-                    cleanup();
-                }
-            }
-        }, null, true, RPCRequest.RPCRequestClassUploadMedia, ConnectionsManager.DEFAULT_DATACENTER_ID);
+//        requestToken = ConnectionsManager.getInstance().performRpc(finalRequest, new RPCRequest.RPCRequestDelegate() {
+//            @Override
+//            public void run(TLObject response, TLRPC.TL_error error) {
+//                requestToken = 0;
+//                if (error == null) {
+//                    if (response instanceof TLRPC.TL_boolTrue) {
+//                        currentPartNum++;
+//                        delegate.didChangedUploadProgress(FileUploadOperation.this, currentUploaded / (float) totalFileSize);
+//                        if (isLastPart) {
+//                            state = 3;
+//                            if (key == null) {
+//                                TLRPC.InputFile result;
+//                                if (isBigFile) {
+//                                    result = new TLRPC.TL_inputFileBig();
+//                                } else {
+//                                    result = new TLRPC.TL_inputFile();
+//                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
+//                                }
+//                                result.parts = currentPartNum;
+//                                result.id = currentFileId;
+//                                result.name = uploadingFilePath.substring(uploadingFilePath.lastIndexOf("/") + 1);
+//                                delegate.didFinishUploadingFile(FileUploadOperation.this, result, null, null, null);
+//                                cleanup();
+//                            } else {
+//                                TLRPC.InputEncryptedFile result;
+//                                if (isBigFile) {
+//                                    result = new TLRPC.TL_inputEncryptedFileBigUploaded();
+//                                } else {
+//                                    result = new TLRPC.TL_inputEncryptedFileUploaded();
+//                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
+//                                }
+//                                result.parts = currentPartNum;
+//                                result.id = currentFileId;
+//                                result.key_fingerprint = fingerprint;
+//                                delegate.didFinishUploadingFile(FileUploadOperation.this, null, result, key, iv);
+//                                cleanup();
+//                            }
+//                        } else {
+//                            startUploadRequest();
+//                        }
+//                    } else {
+//                        delegate.didFailedUploadingFile(FileUploadOperation.this);
+//                        cleanup();
+//                    }
+//                } else {
+//                    delegate.didFailedUploadingFile(FileUploadOperation.this);
+//                    cleanup();
+//                }
+//            }
+//        }, null, true, RPCRequest.RPCRequestClassUploadMedia, ConnectionsManager.DEFAULT_DATACENTER_ID);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
deleted file mode 100644
index eb225c09c..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ /dev/null
@@ -1,651 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-import java.math.BigInteger;
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Locale;
-
-public class HandshakeAction extends Action implements TcpConnection.TcpConnectionDelegate {
-
-    private ArrayList<Long> processedMessageIds;
-
-    private byte[] authNonce;
-    private byte[] authServerNonce;
-    private byte[] authNewNonce;
-
-    private byte[] authKey;
-    private long authKeyId;
-
-    private boolean processedPQRes;
-
-    private ByteBufferDesc reqPQMsgData;
-    private ByteBufferDesc reqDHMsgData;
-    private ByteBufferDesc setClientDHParamsMsgData;
-    private boolean wasDisconnect = false;
-
-    private long lastOutgoingMessageId;
-
-    int timeDifference;
-    ServerSalt serverSalt;
-    public Datacenter datacenter;
-
-    public HandshakeAction(Datacenter datacenter) {
-        this.datacenter = datacenter;
-    }
-
-    public void execute(HashMap params) {
-        FileLog.d("tmessages", String.format(Locale.US, "Begin handshake with DC%d", datacenter.datacenterId));
-        beginHandshake(true);
-    }
-
-    void beginHandshake(boolean dropConnection) {
-        if (datacenter.connection == null) {
-            datacenter.connection = new TcpConnection(datacenter.datacenterId);
-            datacenter.connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
-        }
-        datacenter.connection.delegate = this;
-
-        processedMessageIds = new ArrayList<>();
-        authNonce = null;
-        authServerNonce = null;
-        authNewNonce = null;
-        authKey = null;
-        authKeyId = 0;
-        processedPQRes = false;
-        if (reqPQMsgData != null) {
-            BuffersStorage.getInstance().reuseFreeBuffer(reqPQMsgData);
-            reqPQMsgData = null;
-        }
-        if (reqDHMsgData != null) {
-            BuffersStorage.getInstance().reuseFreeBuffer(reqDHMsgData);
-            reqDHMsgData = null;
-        }
-        if (setClientDHParamsMsgData != null) {
-            BuffersStorage.getInstance().reuseFreeBuffer(setClientDHParamsMsgData);
-            setClientDHParamsMsgData = null;
-        }
-
-        if (dropConnection) {
-            datacenter.connection.suspendConnection(true);
-            datacenter.connection.connect();
-        }
-
-        TLRPC.TL_req_pq reqPq = new TLRPC.TL_req_pq();
-        byte[] nonceBytes = new byte[16];
-        Utilities.random.nextBytes(nonceBytes);
-        authNonce = reqPq.nonce = nonceBytes;
-        reqPQMsgData = sendMessageData(reqPq, generateMessageId());
-    }
-
-    final Object lock = new Object();
-    static ArrayList<HashMap<String, Object>> serverPublicKeys = null;
-    HashMap<String, Object> selectPublicKey(ArrayList<Long> fingerprints) {
-        synchronized (lock) {
-            if (serverPublicKeys == null) {
-                serverPublicKeys = new ArrayList<>();
-                HashMap<String, Object> map;
-
-                map = new HashMap<>();
-                map.put("key", new BigInteger[]{
-                        new BigInteger("c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135" +
-                                "a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e" +
-                                "3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffe" +
-                                "ed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a0901" +
-                                "96e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b2" +
-                                "10607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a570" +
-                                "31b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f", 16),
-                        new BigInteger("010001", 16)});
-                map.put("fingerprint", 0xc3b42b026ce86b21L);
-                serverPublicKeys.add(map);
-
-                map = new HashMap<>();
-                map.put("key", new BigInteger[]{
-                        new BigInteger("c6aeda78b02a251db4b6441031f467fa871faed32526c436524b1fb3b5dc" +
-                                "a28efb8c089dd1b46d92c895993d87108254951c5f001a0f055f3063dcd14d431a300eb9e29" +
-                                "517e359a1c9537e5e87ab1b116faecf5d17546ebc21db234d9d336a693efcb2b6fbcca1e7d1" +
-                                "a0be414dca408a11609b9c4269a920b09fed1f9a1597be02761430f09e4bc48fcafbe289054" +
-                                "c99dba51b6b5eb7d9c3a2ab4e490545b4676bd620e93804bcac93bf94f73f92c729ca899477" +
-                                "ff17625ef14a934d51dc11d5f8650a3364586b3a52fcff2fedec8a8406cac4e751705a472e5" +
-                                "5707e3c8cd5594342b119c6c3293532d85dbe9271ed54a2fd18b4dc79c04a30951107d5639397", 16),
-                        new BigInteger("010001", 16)});
-                map.put("fingerprint", 0x9a996a1db11c729bL);
-                serverPublicKeys.add(map);
-
-                map = new HashMap<>();
-                map.put("key", new BigInteger[]{
-                        new BigInteger("b1066749655935f0a5936f517034c943bea7f3365a8931ae52c8bcb14856" +
-                                "f004b83d26cf2839be0f22607470d67481771c1ce5ec31de16b20bbaa4ecd2f7d2ecf6b6356" +
-                                "f27501c226984263edc046b89fb6d3981546b01d7bd34fedcfcc1058e2d494bda732ff813e5" +
-                                "0e1c6ae249890b225f82b22b1e55fcb063dc3c0e18e91c28d0c4aa627dec8353eee6038a95a" +
-                                "4fd1ca984eb09f94aeb7a2220635a8ceb450ea7e61d915cdb4eecedaa083aa3801daf071855" +
-                                "ec1fb38516cb6c2996d2d60c0ecbcfa57e4cf1fb0ed39b2f37e94ab4202ecf595e167b3ca62" +
-                                "669a6da520859fb6d6c6203dfdfc79c75ec3ee97da8774b2da903e3435f2cd294670a75a526c1", 16),
-                        new BigInteger("010001", 16)});
-                map.put("fingerprint", 0xb05b2a6f70cdea78L);
-                serverPublicKeys.add(map);
-
-                map = new HashMap<>();
-                map.put("key", new BigInteger[]{
-                        new BigInteger("c2a8c55b4a62e2b78a19b91cf692bcdc4ba7c23fe4d06f194e2a0c30f6d9" +
-                                "996f7d1a2bcc89bc1ac4333d44359a6c433252d1a8402d9970378b5912b75bc8cc3fa76710a" +
-                                "025bcb9032df0b87d7607cc53b928712a174ea2a80a8176623588119d42ffce40205c6d7216" +
-                                "0860d8d80b22a8b8651907cf388effbef29cd7cf2b4eb8a872052da1351cfe7fec214ce4830" +
-                                "4ea472bd66329d60115b3420d08f6894b0410b6ab9450249967617670c932f7cbdb5d6fbcce" +
-                                "1e492c595f483109999b2661fcdeec31b196429b7834c7211a93c6789d9ee601c18c39e521f" +
-                                "da9d7264e61e518add6f0712d2d5228204b851e13c4f322e5c5431c3b7f31089668486aadc59f", 16),
-                        new BigInteger("010001", 16)});
-                map.put("fingerprint", 0x71e025b6c76033e3L);
-                serverPublicKeys.add(map);
-            }
-        }
-
-        for (HashMap<String, Object> keyDesc : serverPublicKeys) {
-            long keyFingerprint = (Long)keyDesc.get("fingerprint");
-            for (long nFingerprint : fingerprints) {
-                if (nFingerprint == keyFingerprint) {
-                    return keyDesc;
-                }
-            }
-        }
-        return null;
-    }
-
-    long generateMessageId() {
-        long messageId = (long)((((double)System.currentTimeMillis()) * 4294967296.0) / 1000.0);
-        if (messageId <= lastOutgoingMessageId) {
-            messageId = lastOutgoingMessageId + 1;
-        }
-        while (messageId % 4 != 0) {
-            messageId++;
-        }
-
-        lastOutgoingMessageId = messageId;
-        return messageId;
-    }
-
-    ByteBufferDesc sendMessageData(TLObject message, long messageId) {
-        int messageLength = message.getObjectSize();
-        ByteBufferDesc messageOs = BuffersStorage.getInstance().getFreeBuffer(8 + 8 + 4 + messageLength);
-        messageOs.writeInt64(0);
-        messageOs.writeInt64(messageId);
-        messageOs.writeInt32(messageLength);
-        message.serializeToStream(messageOs);
-        message.freeResources();
-
-        datacenter.connection.sendData(messageOs, false, false);
-        return messageOs;
-    }
-
-    void processMessage(TLObject message, long messageId) {
-        if (message instanceof TLRPC.TL_resPQ) {
-            if (processedPQRes) {
-                TLRPC.TL_msgs_ack msgsAck = new TLRPC.TL_msgs_ack();
-                msgsAck.msg_ids = new ArrayList<>();
-                msgsAck.msg_ids.add(messageId);
-                sendMessageData(msgsAck, generateMessageId());
-                return;
-            }
-
-            processedPQRes = true;
-            final TLRPC.TL_resPQ resPq = (TLRPC.TL_resPQ)message;
-            if (Utilities.arraysEquals(authNonce, 0, resPq.nonce, 0)) {
-                final HashMap<String, Object> publicKey = selectPublicKey(resPq.server_public_key_fingerprints);
-                if (publicKey == null) {
-                    FileLog.e("tmessages", "***** Couldn't find valid server public key");
-                    beginHandshake(false);
-                    return;
-                }
-
-                authServerNonce = resPq.server_nonce;
-
-                ByteBuffer data = ByteBuffer.wrap(resPq.pq);
-                final long pqf = data.getLong();
-                final long messageIdf = messageId;
-                new Thread(new Runnable() {
-                    @Override
-                    public void run() {
-
-                        final Utilities.TPFactorizedValue factorizedPq = Utilities.getFactorizedValue(pqf);
-
-                        Utilities.stageQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                ByteBuffer pBytes = ByteBuffer.allocate(4);
-                                pBytes.putInt((int)factorizedPq.p);
-                                byte[] pData = pBytes.array();
-
-                                ByteBuffer qBytes = ByteBuffer.allocate(4);
-                                qBytes.putInt((int)factorizedPq.q);
-                                byte[] qData = qBytes.array();
-
-                                TLRPC.TL_req_DH_params reqDH = new TLRPC.TL_req_DH_params();
-                                reqDH.nonce = authNonce;
-                                reqDH.server_nonce = authServerNonce;
-                                reqDH.p = pData;
-                                reqDH.q = qData;
-                                reqDH.public_key_fingerprint = (Long)publicKey.get("fingerprint");
-
-                                SerializedData os = new SerializedData();
-
-                                TLRPC.TL_p_q_inner_data innerData = new TLRPC.TL_p_q_inner_data();
-                                innerData.nonce = authNonce;
-                                innerData.server_nonce = authServerNonce;
-                                innerData.pq = resPq.pq;
-                                innerData.p = reqDH.p;
-                                innerData.q = reqDH.q;
-
-                                byte[] nonceBytes = new byte[32];
-                                Utilities.random.nextBytes(nonceBytes);
-                                innerData.new_nonce = authNewNonce = nonceBytes;
-                                innerData.serializeToStream(os);
-
-                                byte[] innerDataBytes = os.toByteArray();
-                                os.cleanup();
-
-                                SerializedData dataWithHash = new SerializedData();
-                                dataWithHash.writeRaw(Utilities.computeSHA1(innerDataBytes));
-                                dataWithHash.writeRaw(innerDataBytes);
-                                byte[] b = new byte[1];
-                                while (dataWithHash.length() < 255) {
-                                    Utilities.random.nextBytes(b);
-                                    dataWithHash.writeByte(b[0]);
-                                }
-
-                                byte[] encryptedBytes = Utilities.encryptWithRSA((BigInteger[])publicKey.get("key"), dataWithHash.toByteArray());
-                                dataWithHash.cleanup();
-                                SerializedData encryptedData = new SerializedData();
-                                encryptedData.writeRaw(encryptedBytes);
-                                if (encryptedData.length() < 256) {
-                                    SerializedData newEncryptedData = new SerializedData();
-                                    for (int i = 0; i < 256 - encryptedData.length(); i++) {
-                                        newEncryptedData.writeByte(0);
-                                    }
-                                    newEncryptedData.writeRaw(encryptedData.toByteArray());
-                                    encryptedData.cleanup();
-                                    encryptedData = newEncryptedData;
-                                }
-                                reqDH.encrypted_data = encryptedData.toByteArray();
-                                encryptedData.cleanup();
-
-                                TLRPC.TL_msgs_ack msgsAck = new TLRPC.TL_msgs_ack();
-                                msgsAck.msg_ids = new ArrayList<>();
-                                msgsAck.msg_ids.add(messageIdf);
-                                sendMessageData(msgsAck, generateMessageId());
-
-                                if (reqPQMsgData != null) {
-                                    BuffersStorage.getInstance().reuseFreeBuffer(reqPQMsgData);
-                                    reqPQMsgData = null;
-                                }
-                                reqDHMsgData = sendMessageData(reqDH, generateMessageId());
-                            }
-                        });
-                    }
-                }).start();
-            } else {
-                FileLog.e("tmessages", "***** Error: invalid handshake nonce");
-                beginHandshake(false);
-            }
-        } else if (message instanceof TLRPC.Server_DH_Params) {
-            if (message instanceof TLRPC.TL_server_DH_params_ok) {
-                TLRPC.TL_server_DH_params_ok serverDhParams = (TLRPC.TL_server_DH_params_ok)message;
-
-                SerializedData tmpAesKey = new SerializedData();
-
-                SerializedData newNonceAndServerNonce = new SerializedData();
-                newNonceAndServerNonce.writeRaw(authNewNonce);
-                newNonceAndServerNonce.writeRaw(authServerNonce);
-
-                SerializedData serverNonceAndNewNonce = new SerializedData();
-                serverNonceAndNewNonce.writeRaw(authServerNonce);
-                serverNonceAndNewNonce.writeRaw(authNewNonce);
-                tmpAesKey.writeRaw(Utilities.computeSHA1(newNonceAndServerNonce.toByteArray()));
-                newNonceAndServerNonce.cleanup();
-
-                byte[] serverNonceAndNewNonceHash = Utilities.computeSHA1(serverNonceAndNewNonce.toByteArray());
-                serverNonceAndNewNonce.cleanup();
-                byte[] serverNonceAndNewNonceHash0_12 = new byte[12];
-                System.arraycopy(serverNonceAndNewNonceHash, 0, serverNonceAndNewNonceHash0_12, 0, 12);
-
-                tmpAesKey.writeRaw(serverNonceAndNewNonceHash0_12);
-
-                SerializedData tmpAesIv = new SerializedData();
-
-                byte[] serverNonceAndNewNonceHash12_8 = new byte[8];
-                System.arraycopy(serverNonceAndNewNonceHash, 12, serverNonceAndNewNonceHash12_8, 0, 8);
-                tmpAesIv.writeRaw(serverNonceAndNewNonceHash12_8);
-
-                SerializedData newNonceAndNewNonce = new SerializedData();
-                newNonceAndNewNonce.writeRaw(authNewNonce);
-                newNonceAndNewNonce.writeRaw(authNewNonce);
-                tmpAesIv.writeRaw(Utilities.computeSHA1(newNonceAndNewNonce.toByteArray()));
-                newNonceAndNewNonce.cleanup();
-
-                byte[] newNonce0_4 = new byte[4];
-                System.arraycopy(authNewNonce, 0, newNonce0_4, 0, 4);
-                tmpAesIv.writeRaw(newNonce0_4);
-
-                ByteBufferDesc answerWithHash = BuffersStorage.getInstance().getFreeBuffer(serverDhParams.encrypted_answer.length);
-                answerWithHash.writeRaw(serverDhParams.encrypted_answer);
-                answerWithHash.position(0);
-
-                Utilities.aesIgeEncryption(answerWithHash.buffer, tmpAesKey.toByteArray(), tmpAesIv.toByteArray(), false, false, 0, serverDhParams.encrypted_answer.length);
-                byte[] answerHash = new byte[20];
-                answerWithHash.readRaw(answerHash, false);
-
-                boolean hashVerified = false;
-                for (int i = 0; i < 16; i++) {
-                    byte[] computedAnswerHash = Utilities.computeSHA1(answerWithHash.buffer, 20, answerWithHash.limit() - i);
-                    if (Utilities.arraysEquals(computedAnswerHash, 0, answerHash, 0)) {
-                        hashVerified = true;
-                        break;
-                    }
-                }
-
-                if (!hashVerified) {
-                    FileLog.e("tmessages", "***** Couldn't decode DH params");
-                    beginHandshake(false);
-                    BuffersStorage.getInstance().reuseFreeBuffer(answerWithHash);
-                    return;
-                }
-
-                int constructor = answerWithHash.readInt32(false);
-                TLRPC.TL_server_DH_inner_data dhInnerData = TLRPC.TL_server_DH_inner_data.TLdeserialize(answerWithHash, constructor, false);
-                BuffersStorage.getInstance().reuseFreeBuffer(answerWithHash);
-
-                if (!(dhInnerData instanceof TLRPC.TL_server_DH_inner_data)) {
-                    FileLog.e("tmessages", "***** Couldn't parse decoded DH params");
-                    beginHandshake(false);
-                    return;
-                }
-
-                if (!Utilities.isGoodPrime(dhInnerData.dh_prime, dhInnerData.g)) {
-                    throw new RuntimeException("bad prime");
-                }
-
-                if (!Utilities.arraysEquals(authNonce, 0, dhInnerData.nonce, 0)) {
-                    FileLog.e("tmessages", "***** Invalid DH nonce");
-                    beginHandshake(false);
-                    return;
-                }
-                if (!Utilities.arraysEquals(authServerNonce, 0, dhInnerData.server_nonce, 0)) {
-                    FileLog.e("tmessages", "***** Invalid DH server nonce");
-                    beginHandshake(false);
-                    return;
-                }
-
-                byte[] b = new byte[256];
-                Utilities.random.nextBytes(b);
-
-                BigInteger p = new BigInteger(1, dhInnerData.dh_prime);
-                BigInteger g_a = new BigInteger(1, dhInnerData.g_a);
-                if (!Utilities.isGoodGaAndGb(g_a, p)) {
-                    throw new RuntimeException("bad prime");
-                }
-
-                BigInteger g_b = BigInteger.valueOf(dhInnerData.g);
-                g_b = g_b.modPow(new BigInteger(1, b), p);
-                g_a = g_a.modPow(new BigInteger(1, b), p);
-
-                authKey = g_a.toByteArray();
-                if (authKey.length > 256) {
-                    byte[] correctedAuth = new byte[256];
-                    System.arraycopy(authKey, 1, correctedAuth, 0, 256);
-                    authKey = correctedAuth;
-                } else if (authKey.length < 256) {
-                    byte[] correctedAuth = new byte[256];
-                    System.arraycopy(authKey, 0, correctedAuth, 256 - authKey.length, authKey.length);
-                    for (int a = 0; a < 256 - authKey.length; a++) {
-                        authKey[a] = 0;
-                    }
-                    authKey = correctedAuth;
-                }
-                byte[] authKeyHash = Utilities.computeSHA1(authKey);
-                byte[] authKeyArr = new byte[8];
-                System.arraycopy(authKeyHash, authKeyHash.length - 8, authKeyArr, 0, 8);
-                ByteBuffer buffer = ByteBuffer.wrap(authKeyArr);
-                buffer.order(ByteOrder.LITTLE_ENDIAN);
-                authKeyId = buffer.getLong();
-
-                SerializedData serverSaltData = new SerializedData();
-                for (int i = 7; i >= 0; i--) {
-                    byte a_ = authNewNonce[i];
-                    byte b_ = authServerNonce[i];
-                    byte x = (byte)(a_ ^ b_);
-                    serverSaltData.writeByte(x);
-                }
-                ByteBuffer saltBuffer = ByteBuffer.wrap(serverSaltData.toByteArray());
-                serverSaltData.cleanup();
-
-                timeDifference = dhInnerData.server_time - (int)(System.currentTimeMillis() / 1000);
-
-                serverSalt = new ServerSalt();
-                serverSalt.validSince = (int)(System.currentTimeMillis() / 1000) + timeDifference;
-                serverSalt.validUntil = (int)(System.currentTimeMillis() / 1000) + timeDifference + 30 * 60;
-                serverSalt.value = saltBuffer.getLong();
-
-                FileLog.d("tmessages", String.format(Locale.US, "===== Time difference: %d", timeDifference));
-
-                TLRPC.TL_client_DH_inner_data clientInnerData = new TLRPC.TL_client_DH_inner_data();
-                clientInnerData.nonce = authNonce;
-                clientInnerData.server_nonce = authServerNonce;
-                clientInnerData.g_b = g_b.toByteArray();
-                clientInnerData.retry_id = 0;
-
-                ByteBufferDesc os = BuffersStorage.getInstance().getFreeBuffer(clientInnerData.getObjectSize());
-                clientInnerData.serializeToStream(os);
-
-                int len = os.length() + 20;
-                int extraLen = len % 16 != 0 ? 16 - len % 16 : 0;
-                ByteBufferDesc clientDataWithHash = BuffersStorage.getInstance().getFreeBuffer(len + extraLen);
-                clientDataWithHash.writeRaw(Utilities.computeSHA1(os.buffer));
-                os.position(0);
-                clientDataWithHash.writeRaw(os);
-                if (extraLen != 0) {
-                    byte[] bb = new byte[extraLen];
-                    Utilities.random.nextBytes(bb);
-                    clientDataWithHash.writeRaw(bb);
-                }
-                BuffersStorage.getInstance().reuseFreeBuffer(os);
-
-                TLRPC.TL_set_client_DH_params setClientDhParams = new TLRPC.TL_set_client_DH_params();
-                setClientDhParams.nonce = authNonce;
-                setClientDhParams.server_nonce = authServerNonce;
-                Utilities.aesIgeEncryption(clientDataWithHash.buffer, tmpAesKey.toByteArray(), tmpAesIv.toByteArray(), true, false, 0, clientDataWithHash.length());
-                setClientDhParams.encrypted_data = clientDataWithHash;
-
-                tmpAesKey.cleanup();
-                tmpAesIv.cleanup();
-
-                TLRPC.TL_msgs_ack msgsAck = new TLRPC.TL_msgs_ack();
-                msgsAck.msg_ids = new ArrayList<>();
-                msgsAck.msg_ids.add(messageId);
-                sendMessageData(msgsAck, generateMessageId());
-
-                if (reqDHMsgData != null) {
-                    BuffersStorage.getInstance().reuseFreeBuffer(reqDHMsgData);
-                    reqDHMsgData = null;
-                }
-                setClientDHParamsMsgData = sendMessageData(setClientDhParams, generateMessageId());
-            } else {
-                FileLog.e("tmessages", "***** Couldn't set DH params");
-                beginHandshake(false);
-            }
-        } else if (message instanceof TLRPC.Set_client_DH_params_answer) {
-            if (setClientDHParamsMsgData != null) {
-                BuffersStorage.getInstance().reuseFreeBuffer(setClientDHParamsMsgData);
-                setClientDHParamsMsgData = null;
-            }
-
-            TLRPC.Set_client_DH_params_answer dhAnswer = (TLRPC.Set_client_DH_params_answer)message;
-
-            if (!Utilities.arraysEquals(authNonce, 0, dhAnswer.nonce, 0)) {
-                FileLog.e("tmessages", "***** Invalid DH answer nonce");
-                beginHandshake(false);
-                return;
-            }
-            if (!Utilities.arraysEquals(authServerNonce, 0, dhAnswer.server_nonce, 0)) {
-                FileLog.e("tmessages", "***** Invalid DH answer server nonce");
-                beginHandshake(false);
-                return;
-            }
-
-            if (reqDHMsgData != null) {
-                BuffersStorage.getInstance().reuseFreeBuffer(reqDHMsgData);
-                reqDHMsgData = null;
-            }
-
-            TLRPC.TL_msgs_ack msgsAck = new TLRPC.TL_msgs_ack();
-            msgsAck.msg_ids = new ArrayList<>();
-            msgsAck.msg_ids.add(messageId);
-            sendMessageData(msgsAck, generateMessageId());
-
-            byte[] authKeyAuxHashFull = Utilities.computeSHA1(authKey);
-            byte[] authKeyAuxHash = new byte[8];
-            System.arraycopy(authKeyAuxHashFull, 0, authKeyAuxHash, 0, 8);
-
-            SerializedData newNonce1 = new SerializedData();
-            newNonce1.writeRaw(authNewNonce);
-            newNonce1.writeByte(1);
-            newNonce1.writeRaw(authKeyAuxHash);
-            byte[] newNonceHash1Full = Utilities.computeSHA1(newNonce1.toByteArray());
-            newNonce1.cleanup();
-            byte[] newNonceHash1 = new byte[16];
-            System.arraycopy(newNonceHash1Full, newNonceHash1Full.length - 16, newNonceHash1, 0, 16);
-
-            SerializedData newNonce2 = new SerializedData();
-            newNonce2.writeRaw(authNewNonce);
-            newNonce2.writeByte(2);
-            newNonce2.writeRaw(authKeyAuxHash);
-            byte[] newNonceHash2Full = Utilities.computeSHA1(newNonce2.toByteArray());
-            newNonce2.cleanup();
-            byte[] newNonceHash2 = new byte[16];
-            System.arraycopy(newNonceHash2Full, newNonceHash2Full.length - 16, newNonceHash2, 0, 16);
-
-            SerializedData newNonce3 = new SerializedData();
-            newNonce3.writeRaw(authNewNonce);
-            newNonce3.writeByte(3);
-            newNonce3.writeRaw(authKeyAuxHash);
-            byte[] newNonceHash3Full = Utilities.computeSHA1(newNonce3.toByteArray());
-            newNonce3.cleanup();
-            byte[] newNonceHash3 = new byte[16];
-            System.arraycopy(newNonceHash3Full, newNonceHash3Full.length - 16, newNonceHash3, 0, 16);
-
-            if (message instanceof TLRPC.TL_dh_gen_ok) {
-                TLRPC.TL_dh_gen_ok dhGenOk = (TLRPC.TL_dh_gen_ok)message;
-                if (!Utilities.arraysEquals(newNonceHash1, 0, dhGenOk.new_nonce_hash1, 0)) {
-                    FileLog.e("tmessages", "***** Invalid DH answer nonce hash 1");
-                    beginHandshake(false);
-                    return;
-                }
-
-                FileLog.d("tmessages", String.format("Handshake with DC%d completed", datacenter.datacenterId));
-                datacenter.connection.delegate = null;
-
-                final Action parent = this;
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        datacenter.authKey = authKey;
-                        datacenter.authKeyId = authKeyId;
-                        datacenter.addServerSalt(serverSalt);
-                        HashMap<String, Object> resultDict = new HashMap<>();
-                        resultDict.put("timeDifference", timeDifference);
-                        if (delegate != null) {
-                            delegate.ActionDidFinishExecution(parent, resultDict);
-                        }
-                    }
-                });
-            } else if (message instanceof TLRPC.TL_dh_gen_retry) {
-                TLRPC.TL_dh_gen_retry dhRetry = (TLRPC.TL_dh_gen_retry)message;
-                if (!Utilities.arraysEquals(newNonceHash2, 0, dhRetry.new_nonce_hash2, 0)) {
-                    FileLog.e("tmessages", "***** Invalid DH answer nonce hash 2");
-                    beginHandshake(false);
-                    return;
-                }
-                FileLog.d("tmessages", "***** Retry DH");
-                beginHandshake(false);
-            } else if (message instanceof TLRPC.TL_dh_gen_fail) {
-                TLRPC.TL_dh_gen_fail dhFail = (TLRPC.TL_dh_gen_fail)message;
-                if (!Utilities.arraysEquals(newNonceHash3, 0, dhFail.new_nonce_hash3, 0)) {
-                    FileLog.e("tmessages", "***** Invalid DH answer nonce hash 3");
-                    beginHandshake(false);
-                    return;
-                }
-                FileLog.d("tmessages", "***** Server declined DH params");
-                beginHandshake(false);
-            } else {
-                FileLog.e("tmessages", "***** Unknown DH params response");
-                beginHandshake(false);
-            }
-        } else {
-            TLRPC.TL_msgs_ack msgsAck = new TLRPC.TL_msgs_ack();
-            msgsAck.msg_ids = new ArrayList<>();
-            msgsAck.msg_ids.add(messageId);
-            sendMessageData(msgsAck, generateMessageId());
-        }
-    }
-
-    @Override
-    public void tcpConnectionClosed(final TcpConnection connection) {
-        wasDisconnect = true;
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                connection.connect();
-            }
-        }, 1000);
-    }
-
-    @Override
-    public void tcpConnectionConnected(TcpConnection connection) {
-        if (!wasDisconnect) {
-            return;
-        }
-        if (reqPQMsgData != null) {
-            datacenter.connection.sendData(reqPQMsgData, false, false);
-        } else if (reqDHMsgData != null) {
-            datacenter.connection.sendData(reqDHMsgData, false, false);
-        } else if (setClientDHParamsMsgData != null) {
-            datacenter.connection.sendData(setClientDHParamsMsgData, false, false);
-        }
-    }
-
-    @Override
-    public void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack) {
-
-    }
-
-    @Override
-    public void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length) {
-        long keyId = data.readInt64(false);
-        if (keyId == 0) {
-            long messageId = data.readInt64(false);
-            if (processedMessageIds.contains(messageId)) {
-                FileLog.d("tmessages", String.format("===== Duplicate message id %d received, ignoring", messageId));
-                return;
-            }
-            int messageLength = data.readInt32(false);
-
-            int constructor = data.readInt32(false);
-            TLObject object = TLClassStore.Instance().TLdeserialize(data, constructor, false);
-
-            if (object != null) {
-                processedMessageIds.add(messageId);
-            }
-            processMessage(object, messageId);
-        } else {
-            FileLog.d("tmessages", "***** Received encrypted message while in handshake, restarting");
-            beginHandshake(true);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
deleted file mode 100644
index 217e63fb1..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ /dev/null
@@ -1,692 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-import java.io.IOException;
-import java.net.InetSocketAddress;
-import java.net.SocketTimeoutException;
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.util.Timer;
-import java.util.TimerTask;
-
-import jawnae.pyronet.PyroClient;
-import jawnae.pyronet.PyroSelector;
-
-public class TcpConnection extends ConnectionContext {
-
-    public enum TcpConnectionState {
-        TcpConnectionStageIdle,
-        TcpConnectionStageConnecting,
-        TcpConnectionStageReconnecting,
-        TcpConnectionStageConnected,
-        TcpConnectionStageSuspended
-    }
-
-    public interface TcpConnectionDelegate {
-        void tcpConnectionClosed(TcpConnection connection);
-
-        void tcpConnectionConnected(TcpConnection connection);
-
-        void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack);
-
-        void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length);
-    }
-
-    private static PyroSelector selector;
-    private PyroClient client;
-    public TcpConnectionState connectionState;
-    public volatile int channelToken = 0;
-    private String hostAddress;
-    private int hostPort;
-    private int currentAddressFlag;
-    private int datacenterId;
-    private int failedConnectionCount;
-    public TcpConnectionDelegate delegate;
-    private ByteBufferDesc restOfTheData;
-    private boolean hasSomeDataSinceLastConnect = false;
-    private int willRetryConnectCount = 5;
-    private boolean isNextPort = false;
-    private final Object timerSync = new Object();
-    private boolean wasConnected;
-    private int lastPacketLength;
-
-    public int transportRequestClass;
-
-    private boolean firstPacket;
-
-    private Timer reconnectTimer;
-
-    public TcpConnection(int did) {
-        if (selector == null) {
-            selector = new PyroSelector();
-            selector.spawnNetworkThread("network thread");
-            BuffersStorage.getInstance();
-        }
-        datacenterId = did;
-        connectionState = TcpConnectionState.TcpConnectionStageIdle;
-    }
-
-    static volatile Integer nextChannelToken = 1;
-
-    static int generateChannelToken() {
-        return nextChannelToken++;
-    }
-
-    public int getDatacenterId() {
-        return datacenterId;
-    }
-
-    public void connect() {
-        if (!ConnectionsManager.isNetworkOnline()) {
-            if (delegate != null) {
-                final TcpConnectionDelegate finalDelegate = delegate;
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        finalDelegate.tcpConnectionClosed(TcpConnection.this);
-                    }
-                });
-            }
-            return;
-        }
-
-        selector.scheduleTask(new Runnable() {
-            @Override
-            public void run() {
-                if ((connectionState == TcpConnectionState.TcpConnectionStageConnected || connectionState == TcpConnectionState.TcpConnectionStageConnecting) && client != null) {
-                    return;
-                }
-
-                connectionState = TcpConnectionState.TcpConnectionStageConnecting;
-                try {
-                    Datacenter datacenter = ConnectionsManager.getInstance().datacenterWithId(datacenterId);
-                    boolean isIpv6 = ConnectionsManager.useIpv6Address();
-                    if (transportRequestClass == RPCRequest.RPCRequestClassDownloadMedia) {
-                        currentAddressFlag = 2;
-                        hostAddress = datacenter.getCurrentAddress(currentAddressFlag | (isIpv6 ? 1 : 0));
-                        if (hostAddress == null) {
-                            currentAddressFlag = 0;
-                            hostAddress = datacenter.getCurrentAddress(currentAddressFlag | (isIpv6 ? 1 : 0));
-                        }
-                        if (hostAddress == null && isIpv6) {
-                            currentAddressFlag = 2;
-                            hostAddress = datacenter.getCurrentAddress(currentAddressFlag);
-                            if (hostAddress == null) {
-                                currentAddressFlag = 0;
-                                hostAddress = datacenter.getCurrentAddress(currentAddressFlag);
-                            }
-                        }
-                    } else {
-                        currentAddressFlag = 0;
-                        hostAddress = datacenter.getCurrentAddress(currentAddressFlag | (isIpv6 ? 1 : 0));
-                        if (isIpv6 && hostAddress == null) {
-                            hostAddress = datacenter.getCurrentAddress(currentAddressFlag);
-                        }
-                    }
-                    hostPort = datacenter.getCurrentPort(currentAddressFlag);
-
-                    try {
-                        synchronized (timerSync) {
-                            if (reconnectTimer != null) {
-                                reconnectTimer.cancel();
-                                reconnectTimer = null;
-                            }
-                        }
-                    } catch (Exception e2) {
-                        FileLog.e("tmessages", e2);
-                    }
-
-                    FileLog.d("tmessages", String.format(TcpConnection.this + " Connecting (%s:%d)", hostAddress, hostPort));
-                    firstPacket = true;
-                    if (restOfTheData != null) {
-                        BuffersStorage.getInstance().reuseFreeBuffer(restOfTheData);
-                        restOfTheData = null;
-                    }
-                    lastPacketLength = 0;
-                    wasConnected = false;
-                    hasSomeDataSinceLastConnect = false;
-                    if (client != null) {
-                        client.removeListener(TcpConnection.this);
-                        client.dropConnection();
-                        client = null;
-                    }
-                    client = selector.connect(new InetSocketAddress(hostAddress, hostPort));
-                    client.addListener(TcpConnection.this);
-                    if ((transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
-                        if (isNextPort) {
-                            client.setTimeout(20000);
-                        } else {
-                            client.setTimeout(30000);
-                        }
-                    } else {
-                        if (isNextPort) {
-                            client.setTimeout(8000);
-                        } else {
-                            client.setTimeout(15000);
-                        }
-                    }
-                    selector.wakeup();
-                } catch (Exception e) {
-                    handleConnectionError(e);
-                }
-            }
-        });
-    }
-
-    private void handleConnectionError(Exception e) {
-        try {
-            synchronized (timerSync) {
-                if (reconnectTimer != null) {
-                    reconnectTimer.cancel();
-                    reconnectTimer = null;
-                }
-            }
-        } catch (Exception e2) {
-            FileLog.e("tmessages", e2);
-        }
-        connectionState = TcpConnectionState.TcpConnectionStageReconnecting;
-        if (delegate != null) {
-            final TcpConnectionDelegate finalDelegate = delegate;
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    finalDelegate.tcpConnectionClosed(TcpConnection.this);
-                }
-            });
-        }
-
-        failedConnectionCount++;
-        if (failedConnectionCount == 1) {
-            if (hasSomeDataSinceLastConnect) {
-                willRetryConnectCount = 3;
-            } else {
-                willRetryConnectCount = 1;
-            }
-        }
-        if (ConnectionsManager.isNetworkOnline()) {
-            isNextPort = true;
-            if (failedConnectionCount > willRetryConnectCount) {
-                Datacenter datacenter = ConnectionsManager.getInstance().datacenterWithId(datacenterId);
-                datacenter.nextAddressOrPort(currentAddressFlag);
-                failedConnectionCount = 0;
-            }
-        }
-
-        if (e != null) {
-            FileLog.e("tmessages", e);
-        }
-        FileLog.d("tmessages", "Reconnect " + hostAddress + ":" + hostPort + " " + TcpConnection.this);
-        try {
-            reconnectTimer = new Timer();
-            reconnectTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    selector.scheduleTask(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                synchronized (timerSync) {
-                                    if (reconnectTimer != null) {
-                                        reconnectTimer.cancel();
-                                        reconnectTimer = null;
-                                    }
-                                }
-                            } catch (Exception e2) {
-                                FileLog.e("tmessages", e2);
-                            }
-                            connect();
-                        }
-                    });
-                }
-            }, failedConnectionCount >= 3 ? 500 : 300, failedConnectionCount >= 3 ? 500 : 300);
-        } catch (Exception e3) {
-            FileLog.e("tmessages", e3);
-        }
-    }
-
-    private void suspendConnectionInternal() {
-        synchronized (timerSync) {
-            if (reconnectTimer != null) {
-                reconnectTimer.cancel();
-                reconnectTimer = null;
-            }
-        }
-        if (connectionState == TcpConnectionState.TcpConnectionStageIdle || connectionState == TcpConnectionState.TcpConnectionStageSuspended) {
-            return;
-        }
-        FileLog.d("tmessages", "suspend connnection " + TcpConnection.this);
-        connectionState = TcpConnectionState.TcpConnectionStageSuspended;
-        if (client != null) {
-            client.removeListener(TcpConnection.this);
-            client.dropConnection();
-            client = null;
-        }
-        if (delegate != null) {
-            final TcpConnectionDelegate finalDelegate = delegate;
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    finalDelegate.tcpConnectionClosed(TcpConnection.this);
-                }
-            });
-        }
-        firstPacket = true;
-        if (restOfTheData != null) {
-            BuffersStorage.getInstance().reuseFreeBuffer(restOfTheData);
-            restOfTheData = null;
-        }
-        lastPacketLength = 0;
-        channelToken = 0;
-        wasConnected = false;
-    }
-
-    public void suspendConnection(boolean task) {
-        if (task) {
-            selector.scheduleTask(new Runnable() {
-                @Override
-                public void run() {
-                    suspendConnectionInternal();
-                }
-            });
-        } else {
-            suspendConnectionInternal();
-        }
-    }
-
-    public void resumeConnection() {
-
-    }
-
-    private void reconnect() {
-        suspendConnection(false);
-        connectionState = TcpConnectionState.TcpConnectionStageReconnecting;
-        connect();
-    }
-
-    public void sendData(final ByteBufferDesc buff, final boolean canReuse, final boolean reportAck) {
-        if (buff == null) {
-            return;
-        }
-        selector.scheduleTask(new Runnable() {
-            @Override
-            public void run() {
-                if (connectionState == TcpConnectionState.TcpConnectionStageIdle ||
-                        connectionState == TcpConnectionState.TcpConnectionStageReconnecting ||
-                        connectionState == TcpConnectionState.TcpConnectionStageSuspended || client == null) {
-                    connect();
-                }
-
-                if (client == null || client.isDisconnected()) {
-                    if (canReuse) {
-                        BuffersStorage.getInstance().reuseFreeBuffer(buff);
-                    }
-                    if (BuildConfig.DEBUG) {
-                        FileLog.e("tmessages", TcpConnection.this + " disconnected, don't send data");
-                    }
-                    return;
-                }
-
-                int bufferLen = buff.limit();
-                int packetLength = bufferLen / 4;
-
-                if (packetLength < 0x7f) {
-                    bufferLen++;
-                } else {
-                    bufferLen += 4;
-                }
-                if (firstPacket) {
-                    bufferLen++;
-                }
-
-                ByteBufferDesc buffer = BuffersStorage.getInstance().getFreeBuffer(bufferLen);
-                if (firstPacket) {
-                    buffer.writeByte((byte) 0xef);
-                    firstPacket = false;
-                }
-                if (packetLength < 0x7f) {
-                    if (reportAck) {
-                        packetLength |= (1 << 7);
-                    }
-                    buffer.writeByte(packetLength);
-                } else {
-                    packetLength = (packetLength << 8) + 0x7f;
-                    if (reportAck) {
-                        packetLength |= (1 << 7);
-                    }
-                    buffer.writeInt32(packetLength);
-                }
-
-                buffer.writeRaw(buff);
-                if (canReuse) {
-                    BuffersStorage.getInstance().reuseFreeBuffer(buff);
-                }
-
-                buffer.rewind();
-
-                client.write(buffer);
-            }
-        });
-    }
-
-    private void readData(ByteBuffer buffer) throws Exception {
-        buffer.order(ByteOrder.LITTLE_ENDIAN);
-        buffer.rewind();
-
-        ByteBuffer parseLaterBuffer = null;
-        if (restOfTheData != null) {
-            if (lastPacketLength == 0) {
-                if (restOfTheData.capacity() - restOfTheData.position() >= buffer.limit()) {
-                    restOfTheData.limit(restOfTheData.position() + buffer.limit());
-                    restOfTheData.put(buffer);
-                    buffer = restOfTheData.buffer;
-                } else {
-                    ByteBufferDesc newBuffer = BuffersStorage.getInstance().getFreeBuffer(restOfTheData.limit() + buffer.limit());
-                    restOfTheData.rewind();
-                    newBuffer.put(restOfTheData.buffer);
-                    newBuffer.put(buffer);
-                    buffer = newBuffer.buffer;
-                    BuffersStorage.getInstance().reuseFreeBuffer(restOfTheData);
-                    restOfTheData = newBuffer;
-                }
-            } else {
-                int len;
-                if (lastPacketLength - restOfTheData.position() <= buffer.limit()) {
-                    len = lastPacketLength - restOfTheData.position();
-                } else {
-                    len = buffer.limit();
-                }
-                int oldLimit = buffer.limit();
-                buffer.limit(len);
-                restOfTheData.put(buffer);
-                buffer.limit(oldLimit);
-                if (restOfTheData.position() != lastPacketLength) {
-                    return;
-                } else {
-                    if (buffer.hasRemaining()) {
-                        parseLaterBuffer = buffer;
-                    } else {
-                        parseLaterBuffer = null;
-                    }
-                    buffer = restOfTheData.buffer;
-                }
-            }
-        }
-
-        buffer.rewind();
-
-        while (buffer.hasRemaining()) {
-            if (!hasSomeDataSinceLastConnect) {
-                Datacenter datacenter = ConnectionsManager.getInstance().datacenterWithId(datacenterId);
-                datacenter.storeCurrentAddressAndPortNum();
-                isNextPort = false;
-                if ((transportRequestClass & RPCRequest.RPCRequestClassPush) != 0) {
-                    client.setTimeout(60000 * 15);
-                } else {
-                    client.setTimeout(25000);
-                }
-            }
-            hasSomeDataSinceLastConnect = true;
-
-            int currentPacketLength;
-            buffer.mark();
-            byte fByte = buffer.get();
-
-            if ((fByte & (1 << 7)) != 0) {
-                buffer.reset();
-                if (buffer.remaining() < 4) {
-                    ByteBufferDesc reuseLater = restOfTheData;
-                    restOfTheData = BuffersStorage.getInstance().getFreeBuffer(16384);
-                    restOfTheData.put(buffer);
-                    restOfTheData.limit(restOfTheData.position());
-                    lastPacketLength = 0;
-                    if (reuseLater != null) {
-                        BuffersStorage.getInstance().reuseFreeBuffer(reuseLater);
-                    }
-                    break;
-                }
-                buffer.order(ByteOrder.BIG_ENDIAN);
-                final int ackId = buffer.getInt() & (~(1 << 31));
-                if (delegate != null) {
-                    final TcpConnectionDelegate finalDelegate = delegate;
-                    Utilities.stageQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            finalDelegate.tcpConnectionQuiackAckReceived(TcpConnection.this, ackId);
-                        }
-                    });
-                }
-                buffer.order(ByteOrder.LITTLE_ENDIAN);
-                continue;
-            }
-
-            if (fByte != 0x7f) {
-                currentPacketLength = ((int) fByte) * 4;
-            } else {
-                buffer.reset();
-                if (buffer.remaining() < 4) {
-                    if (restOfTheData == null || restOfTheData != null && restOfTheData.position() != 0) {
-                        ByteBufferDesc reuseLater = restOfTheData;
-                        restOfTheData = BuffersStorage.getInstance().getFreeBuffer(16384);
-                        restOfTheData.put(buffer);
-                        restOfTheData.limit(restOfTheData.position());
-                        lastPacketLength = 0;
-                        if (reuseLater != null) {
-                            BuffersStorage.getInstance().reuseFreeBuffer(reuseLater);
-                        }
-                    } else {
-                        restOfTheData.position(restOfTheData.limit());
-                    }
-                    break;
-                }
-                currentPacketLength = (buffer.getInt() >> 8) * 4;
-            }
-
-            if (currentPacketLength % 4 != 0 || currentPacketLength > 2 * 1024 * 1024) {
-                FileLog.e("tmessages", "Invalid packet length");
-                reconnect();
-                return;
-            }
-
-            if (currentPacketLength < buffer.remaining()) {
-                FileLog.d("tmessages", TcpConnection.this + " Received message len " + currentPacketLength + " but packet larger " + buffer.remaining());
-            } else if (currentPacketLength == buffer.remaining()) {
-                FileLog.d("tmessages", TcpConnection.this + " Received message len " + currentPacketLength + " equal to packet size");
-            } else {
-                FileLog.d("tmessages", TcpConnection.this + " Received packet size less(" + buffer.remaining() + ") then message size(" + currentPacketLength + ")");
-
-                ByteBufferDesc reuseLater = null;
-                int len = currentPacketLength + (fByte != 0x7f ? 1 : 4);
-                if (restOfTheData != null && restOfTheData.capacity() < len) {
-                    reuseLater = restOfTheData;
-                    restOfTheData = null;
-                }
-                if (restOfTheData == null) {
-                    buffer.reset();
-                    restOfTheData = BuffersStorage.getInstance().getFreeBuffer(len);
-                    restOfTheData.put(buffer);
-                } else {
-                    restOfTheData.position(restOfTheData.limit());
-                    restOfTheData.limit(len);
-                }
-                lastPacketLength = len;
-                if (reuseLater != null) {
-                    BuffersStorage.getInstance().reuseFreeBuffer(reuseLater);
-                }
-                return;
-            }
-
-            final int length = currentPacketLength;
-            final ByteBufferDesc toProceed = BuffersStorage.getInstance().getFreeBuffer(currentPacketLength);
-            int old = buffer.limit();
-            buffer.limit(buffer.position() + currentPacketLength);
-            toProceed.put(buffer);
-            buffer.limit(old);
-            toProceed.rewind();
-
-            if (delegate != null) {
-                final TcpConnectionDelegate finalDelegate = delegate;
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        finalDelegate.tcpConnectionReceivedData(TcpConnection.this, toProceed, length);
-                        BuffersStorage.getInstance().reuseFreeBuffer(toProceed);
-                    }
-                });
-            }
-
-            if (restOfTheData != null) {
-                if (lastPacketLength != 0 && restOfTheData.position() == lastPacketLength || lastPacketLength == 0 && !restOfTheData.hasRemaining()) {
-                    BuffersStorage.getInstance().reuseFreeBuffer(restOfTheData);
-                    restOfTheData = null;
-                } else {
-                    restOfTheData.compact();
-                    restOfTheData.limit(restOfTheData.position());
-                    restOfTheData.position(0);
-                }
-            }
-
-            if (parseLaterBuffer != null) {
-                buffer = parseLaterBuffer;
-                parseLaterBuffer = null;
-            }
-        }
-    }
-
-    public void handleDisconnect(PyroClient client, Exception e, boolean timedout) {
-        synchronized (timerSync) {
-            if (reconnectTimer != null) {
-                reconnectTimer.cancel();
-                reconnectTimer = null;
-            }
-        }
-        if (e != null) {
-            FileLog.d("tmessages", "Disconnected " + TcpConnection.this + " with error " + e);
-        } else {
-            FileLog.d("tmessages", "Disconnected " + TcpConnection.this);
-        }
-        boolean switchToNextPort = wasConnected && !hasSomeDataSinceLastConnect && timedout;
-        firstPacket = true;
-        if (restOfTheData != null) {
-            BuffersStorage.getInstance().reuseFreeBuffer(restOfTheData);
-            restOfTheData = null;
-        }
-        channelToken = 0;
-        lastPacketLength = 0;
-        wasConnected = false;
-        if (connectionState != TcpConnectionState.TcpConnectionStageSuspended && connectionState != TcpConnectionState.TcpConnectionStageIdle) {
-            connectionState = TcpConnectionState.TcpConnectionStageIdle;
-        }
-        if (delegate != null) {
-            final TcpConnectionDelegate finalDelegate = delegate;
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    finalDelegate.tcpConnectionClosed(TcpConnection.this);
-                }
-            });
-        }
-        if (connectionState == TcpConnectionState.TcpConnectionStageIdle &&
-                ((transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0 && (datacenterId == ConnectionsManager.getInstance().currentDatacenterId || datacenterId == ConnectionsManager.getInstance().movingToDatacenterId))) {
-            failedConnectionCount++;
-            if (failedConnectionCount == 1) {
-                if (hasSomeDataSinceLastConnect) {
-                    willRetryConnectCount = 5;
-                } else {
-                    willRetryConnectCount = 1;
-                }
-            }
-            if (ConnectionsManager.isNetworkOnline()) {
-                isNextPort = true;
-                if (failedConnectionCount > willRetryConnectCount || switchToNextPort) {
-                    Datacenter datacenter = ConnectionsManager.getInstance().datacenterWithId(datacenterId);
-                    datacenter.nextAddressOrPort(currentAddressFlag);
-                    failedConnectionCount = 0;
-                }
-            }
-            FileLog.d("tmessages", "Reconnect " + hostAddress + ":" + hostPort + " " + TcpConnection.this);
-            try {
-                synchronized (timerSync) {
-                    reconnectTimer = new Timer();
-                    reconnectTimer.schedule(new TimerTask() {
-                        @Override
-                        public void run() {
-                            selector.scheduleTask(new Runnable() {
-                                @Override
-                                public void run() {
-                                    try {
-                                        synchronized (timerSync) {
-                                            if (reconnectTimer != null) {
-                                                reconnectTimer.cancel();
-                                                reconnectTimer = null;
-                                            }
-                                        }
-                                    } catch (Exception e2) {
-                                        FileLog.e("tmessages", e2);
-                                    }
-                                    connect();
-                                }
-                            });
-                        }
-                    }, failedConnectionCount > 3 ? 500 : 300, failedConnectionCount > 3 ? 500 : 300);
-                }
-            } catch (Exception e3) {
-                FileLog.e("tmessages", e3);
-            }
-        }
-    }
-
-    @Override
-    public void connectedClient(PyroClient client) {
-        connectionState = TcpConnectionState.TcpConnectionStageConnected;
-        channelToken = generateChannelToken();
-        wasConnected = true;
-        FileLog.d("tmessages", String.format(TcpConnection.this + " Connected (%s:%d)", hostAddress, hostPort));
-        if (delegate != null) {
-            final TcpConnectionDelegate finalDelegate = delegate;
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    finalDelegate.tcpConnectionConnected(TcpConnection.this);
-                }
-            });
-        }
-    }
-
-    @Override
-    public void unconnectableClient(PyroClient client, Exception cause) {
-        handleDisconnect(client, cause, false);
-    }
-
-    @Override
-    public void droppedClient(PyroClient client, IOException cause) {
-        super.droppedClient(client, cause);
-        handleDisconnect(client, cause, (cause instanceof SocketTimeoutException));
-    }
-
-    @Override
-    public void disconnectedClient(PyroClient client) {
-        handleDisconnect(client, null, false);
-    }
-
-    @Override
-    public void receivedData(PyroClient client, ByteBuffer data) {
-        try {
-            failedConnectionCount = 0;
-            readData(data);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            reconnect();
-        }
-    }
-
-    @Override
-    public void sentData(PyroClient client, int bytes) {
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
index 66ddd338b..3478326b6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
@@ -56,25 +56,25 @@ public void queryServerSearch(final String query) {
         req.q = query;
         req.limit = 50;
         final int currentReqId = ++lastReqId;
-        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (currentReqId == lastReqId) {
-                            if (error == null) {
-                                TLRPC.TL_contacts_found res = (TLRPC.TL_contacts_found) response;
-                                globalSearch = res.users;
-                                lastFoundUsername = query;
-                                notifyDataSetChanged();
-                            }
-                        }
-                        reqId = 0;
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+//        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+//            @Override
+//            public void run(final TLObject response, final TLRPC.TL_error error) {
+//                AndroidUtilities.runOnUIThread(new Runnable() {
+//                    @Override
+//                    public void run() {
+//                        if (currentReqId == lastReqId) {
+//                            if (error == null) {
+//                                TLRPC.TL_contacts_found res = (TLRPC.TL_contacts_found) response;
+//                                globalSearch = res.users;
+//                                lastFoundUsername = query;
+//                                notifyDataSetChanged();
+//                            }
+//                        }
+//                        reqId = 0;
+//                    }
+//                });
+//            }
+//        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
     }
 
     public void loadRecentHashtags() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
index 4f24e7635..2f1dd2be2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
@@ -57,25 +57,25 @@ public void queryServerSearch(final String query) {
         req.q = query;
         req.limit = 50;
         final int currentReqId = ++lastReqId;
-        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (currentReqId == lastReqId) {
-                            if (error == null) {
-                                TLRPC.TL_contacts_found res = (TLRPC.TL_contacts_found) response;
-                                globalSearch = res.users;
-                                lastFoundUsername = query;
-                                notifyDataSetChanged();
-                            }
-                        }
-                        reqId = 0;
-                    }
-                });
-            }
-        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+//        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+//            @Override
+//            public void run(final TLObject response, final TLRPC.TL_error error) {
+//                AndroidUtilities.runOnUIThread(new Runnable() {
+//                    @Override
+//                    public void run() {
+//                        if (currentReqId == lastReqId) {
+//                            if (error == null) {
+//                                TLRPC.TL_contacts_found res = (TLRPC.TL_contacts_found) response;
+//                                globalSearch = res.users;
+//                                lastFoundUsername = query;
+//                                notifyDataSetChanged();
+//                            }
+//                        }
+//                        reqId = 0;
+//                    }
+//                });
+//            }
+//        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
     }
 
     public void loadRecentHashtags() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index db247154a..cba6d94ef 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -763,127 +763,16 @@ private void runLinkRequest(final String username, final String group, final Str
         if (username != null) {
             TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
             req.username = username;
-            requestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (!LaunchActivity.this.isFinishing()) {
-                                try {
-                                    progressDialog.dismiss();
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                                if (error == null && actionBarLayout != null) {
-                                    TLRPC.User user = (TLRPC.User) response;
-//                                    MessagesController.getInstance().putUser(user, false);
-                                    ArrayList<TLRPC.User> users = new ArrayList<>();
-                                    users.add(user);
-//                                    MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                                    Bundle args = new Bundle();
-                                    args.putInt("user_id", user.id);
-                                }
-                            }
-                        }
-                    });
-                }
-            });
+//            requestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() { });
         } else if (group != null) {
             if (state == 0) {
                 final TLRPC.TL_messages_checkChatInvite req = new TLRPC.TL_messages_checkChatInvite();
                 req.hash = group;
-                requestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(final TLObject response, final TLRPC.TL_error error) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (!LaunchActivity.this.isFinishing()) {
-                                    try {
-                                        progressDialog.dismiss();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                    if (error == null && actionBarLayout != null) {
-                                        TLRPC.ChatInvite invite = (TLRPC.ChatInvite) response;
-                                        if (invite.chat != null && !invite.chat.left) {
-//                                            MessagesController.getInstance().putChat(invite.chat, false);
-                                            ArrayList<TLRPC.Chat> chats = new ArrayList<>();
-                                            chats.add(invite.chat);
-//                                            MessagesStorage.getInstance().putUsersAndChats(null, chats, false, true);
-                                            Bundle args = new Bundle();
-                                            args.putInt("chat_id", invite.chat.id);
-                                        } else {
-                                            AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
-                                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                            builder.setMessage(LocaleController.formatString("JoinToGroup", R.string.JoinToGroup, invite.chat != null ? invite.chat.title : invite.title));
-                                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                                @Override
-                                                public void onClick(DialogInterface dialogInterface, int i) {
-                                                    runLinkRequest(username, group, sticker, 1);
-                                                }
-                                            });
-                                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                                            showAlertDialog(builder);
-                                        }
-                                    } else {
-                                        AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
-                                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                        builder.setMessage(LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist));
-                                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                                        showAlertDialog(builder);
-                                    }
-                                }
-                            }
-                        });
-                    }
-                });
+//                requestId = ConnectionsManager.getInstance().performRpc(req, );
             } else if (state == 1) {
                 TLRPC.TL_messages_importChatInvite req = new TLRPC.TL_messages_importChatInvite();
                 req.hash = group;
-                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                    @Override
-                    public void run(final TLObject response, final TLRPC.TL_error error) {
-                        if (error == null) {
-                            TLRPC.Updates updates = (TLRPC.Updates) response;
-//                            MessagesController.getInstance().processUpdates(updates, false);
-                        }
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (!LaunchActivity.this.isFinishing()) {
-                                    try {
-                                        progressDialog.dismiss();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                    if (error == null) {
-                                        if (actionBarLayout != null) {
-                                            TLRPC.Updates updates = (TLRPC.Updates) response;
-                                            if (!updates.chats.isEmpty()) {
-//                                                MessagesController.getInstance().putUsers(updates.users, false);
-//                                                MessagesController.getInstance().putChats(updates.chats, false);
-                                                Bundle args = new Bundle();
-                                                args.putInt("chat_id", updates.chats.get(0).id);
-                                            }
-                                        }
-                                    } else {
-                                        AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
-                                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                        if (error.text.equals("USERS_TOO_MUCH")) {
-                                            builder.setMessage(LocaleController.getString("JoinToGroupErrorFull", R.string.JoinToGroupErrorFull));
-                                        } else {
-                                            builder.setMessage(LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist));
-                                        }
-                                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                                        showAlertDialog(builder);
-                                    }
-                                }
-                            }
-                        });
-                    }
-                });
+//                ConnectionsManager.getInstance().performRpc(req, );
             }
         }
 
