diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index bd3d3a7f4..a3a1ce33f 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -6,18 +6,38 @@ repositories {
 
 dependencies {
     compile 'com.android.support:support-v4:23.2.1'
+    compile 'com.android.support:support-v4:23.0.1'
     compile "com.google.android.gms:play-services-gcm:8.4.0"
     compile "com.google.android.gms:play-services-maps:8.4.0"
     compile 'net.hockeyapp.android:HockeySDK:3.6.+'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
+    testCompile ('junit:junit:4.12'){
+        exclude module: 'support-annotations'
+    }
+    androidTestCompile ('com.android.support.test:runner:0.4.1'){
+        exclude module: 'support-annotations'
+    }
+    androidTestCompile ('com.android.support.test:rules:0.4.1'){
+        exclude module: 'support-annotations'
+    }
+    // Optional -- Hamcrest library
+    androidTestCompile ('org.hamcrest:hamcrest-library:1.3'){
+        exclude module: 'support-annotations'
+    }
+    // Optional -- UI testing with Espresso
+    androidTestCompile ('com.android.support.test.espresso:espresso-core:2.2.1'){
+        exclude module: 'support-annotations'
+    }
+    // Optional -- UI testing with UI Automator
 }
 
 android {
+    testBuildType "debug"
+
     compileSdkVersion 23
     buildToolsVersion '23.0.2'
 
     useLibrary 'org.apache.http.legacy'
-    defaultConfig.applicationId = "org.telegram.messenger"
 
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_7
@@ -42,6 +62,7 @@ android {
 
     buildTypes {
         debug {
+
             debuggable true
             jniDebuggable true
             signingConfig signingConfigs.debug
@@ -63,7 +84,7 @@ android {
         }
     }
 
-    defaultConfig.versionCode = 767
+
 
     sourceSets.main {
         jniLibs.srcDir 'libs'
@@ -82,6 +103,8 @@ android {
         manifest.srcFile 'config/foss/AndroidManifest.xml'
     }
 
+
+
     productFlavors {
         x86 {
             ndk {
@@ -106,14 +129,17 @@ android {
         }
     }
 
-    applicationVariants.all { variant ->
-        def abiVersion = variant.productFlavors.get(0).versionCode
-        variant.mergedFlavor.versionCode = defaultConfig.versionCode * 10 + abiVersion;
-    }
-
     defaultConfig {
+        applicationId = "org.telegram.messenger"
+        versionCode = 767
         minSdkVersion 9
         targetSdkVersion 23
         versionName "3.7.0"
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+
+    applicationVariants.all { variant ->
+        def abiVersion = variant.productFlavors.get(0).versionCode
+        variant.mergedFlavor.versionCode = defaultConfig.versionCode * 10 + abiVersion;
     }
 }
diff --git a/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/IntroActivityTest.java b/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/IntroActivityTest.java
new file mode 100644
index 000000000..fa60084bd
--- /dev/null
+++ b/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/IntroActivityTest.java
@@ -0,0 +1,85 @@
+package org.telegram.messenger.ui;
+
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.test.espresso.matcher.BoundedMatcher;
+import android.support.test.runner.AndroidJUnit4;
+import android.test.suitebuilder.annotation.MediumTest;
+import android.test.suitebuilder.annotation.SmallTest;
+import android.support.test.rule.ActivityTestRule;
+import android.widget.ImageView;
+
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.IntroActivity;
+
+import static android.support.test.espresso.Espresso.onData;
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.swipeLeft;
+import static android.support.test.espresso.action.ViewActions.swipeRight;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static org.hamcrest.CoreMatchers.allOf;
+import static org.hamcrest.CoreMatchers.not;
+import static org.telegram.messenger.ui.matchers.DrawableMatcher.withDrawable;
+import static org.telegram.messenger.ui.matchers.TextMatcherDropHtml.withText;
+
+/**
+ * Created by user on 28.03.2016.
+ */
+@RunWith(AndroidJUnit4.class)
+@MediumTest
+public class IntroActivityTest {
+    final int pagesCount = 7;
+
+    @Rule
+    public ActivityTestRule<IntroActivity> mActivityRule = new ActivityTestRule<>(
+            IntroActivity.class);
+
+    @Test
+    public void has_views(){
+        onView(withId(R.id.intro_view_pager))
+                .check(matches(isDisplayed()));
+        onView(allOf(withId(R.id.header_text), isDisplayed()))
+                .check(matches(isDisplayed()));
+        onView(withId(R.id.icon_image1))
+                .check(matches(isDisplayed()));
+        onView(withId(R.id.icon_image2))
+                .check(matches(not(isDisplayed())));
+        onView(withId(R.id.bottom_pages))
+                .check(matches(isDisplayed()));
+    }
+
+    @Test
+    public void initial_state(){
+        onView(allOf(withId(R.id.icon_image1), isDisplayed()))
+                .check(matches(withDrawable(LocaleController.isRTL ? R.drawable.intro7 : R.drawable.intro1)));
+        onView(allOf(withId(R.id.header_text), isDisplayed()))
+                .check(matches(withText(LocaleController.isRTL ? R.string.Page7Title : R.string.Page1Title)));
+        onView(allOf(withId(R.id.message_text), isDisplayed()))
+                .check(matches(withText(LocaleController.isRTL ? R.string.Page7Message : R.string.Page1Message)));
+    }
+
+    @Test
+    public void swipe_all_pages(){
+        for (int i = 0; i < pagesCount - 1; i++) {
+            onView(withId(R.id.intro_view_pager))
+                    .perform(LocaleController.isRTL ? swipeRight() : swipeLeft());
+        }
+    }
+
+    @Test
+    public void swipe_left_intro(){
+        onView(withId(R.id.intro_view_pager))
+                .perform(swipeLeft());
+        onView(allOf(withId(R.id.header_text), isDisplayed()))
+                .check(matches(withText(R.string.Page2Title)));
+    }
+}
diff --git a/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/matchers/DrawableMatcher.java b/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/matchers/DrawableMatcher.java
new file mode 100644
index 000000000..df14a48d5
--- /dev/null
+++ b/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/matchers/DrawableMatcher.java
@@ -0,0 +1,84 @@
+package org.telegram.messenger.ui.matchers;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+import android.widget.ImageView;
+
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+import org.hamcrest.TypeSafeMatcher;
+
+import java.util.Arrays;
+
+/**
+ * Created by user on 29.03.2016.
+ */
+public class DrawableMatcher extends TypeSafeMatcher<View> {
+
+    /**
+     * Bitmap compare for API bellow 12
+     *
+    * */
+    private boolean compare(Bitmap b1, Bitmap b2) {
+        if (b1.getWidth() == b2.getWidth() && b1.getHeight() == b2.getHeight()) {
+            int[] pixels1 = new int[b1.getWidth() * b1.getHeight()];
+            int[] pixels2 = new int[b2.getWidth() * b2.getHeight()];
+            b1.getPixels(pixels1, 0, b1.getWidth(), 0, 0, b1.getWidth(), b1.getHeight());
+            b2.getPixels(pixels2, 0, b2.getWidth(), 0, 0, b2.getWidth(), b2.getHeight());
+            return Arrays.equals(pixels1, pixels2);
+        }
+
+        return false;
+    }
+
+    private final int expectedId;
+    String resourceName;
+
+    public DrawableMatcher(int expectedId) {
+        super(View.class);
+        this.expectedId = expectedId;
+    }
+
+
+
+    @Override
+    protected boolean matchesSafely(View target) {
+        if (!(target instanceof ImageView)){
+            return false;
+        }
+        ImageView imageView = (ImageView) target;
+        if (expectedId < 0){
+            return imageView.getDrawable() == null;
+        }
+        Resources resources = target.getContext().getResources();
+        Drawable expectedDrawable = resources.getDrawable(expectedId);
+        resourceName = resources.getResourceEntryName(expectedId);
+
+        if (expectedDrawable == null) {
+            return false;
+        }
+
+        Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
+        Bitmap otherBitmap = ((BitmapDrawable) expectedDrawable).getBitmap();
+        return compare(bitmap, otherBitmap);
+    }
+
+
+    @Override
+    public void describeTo(Description description) {
+        description.appendText("with drawable from resource id: ");
+        description.appendValue(expectedId);
+        if (resourceName != null) {
+            description.appendText("[");
+            description.appendText(resourceName);
+            description.appendText("]");
+        }
+    }
+
+    public static Matcher<View> withDrawable(final int resourceId) {
+        return new DrawableMatcher(resourceId);
+    }
+}
diff --git a/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/matchers/TextMatcherDropHtml.java b/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/matchers/TextMatcherDropHtml.java
new file mode 100644
index 000000000..c55825e58
--- /dev/null
+++ b/TMessagesProj/src/androidTest/java/org/telegram/messenger/ui/matchers/TextMatcherDropHtml.java
@@ -0,0 +1,71 @@
+package org.telegram.messenger.ui.matchers;
+
+import android.content.res.Resources;
+import android.support.test.espresso.matcher.BoundedMatcher;
+import android.view.View;
+import android.widget.TextView;
+
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+import org.telegram.messenger.AndroidUtilities;
+
+/**
+ * Created by user on 29.03.2016.
+ */
+public class TextMatcherDropHtml {
+    /**
+     * Original source from Espresso library, modified to handle spanned fields
+     *
+     * Returns a matcher that matches a descendant of {@link TextView} that is
+     * displaying the string associated with the given resource id.
+     *
+     * @param resourceId
+     *            the string resource the text view is expected to hold.
+     */
+    public static Matcher<View> withText(final int resourceId) {
+
+        return new BoundedMatcher<View, TextView>(TextView.class) {
+            private String resourceName = null;
+            private String expectedText = null;
+
+            @Override
+            public void describeTo(Description description) {
+                description.appendText("with string from resource id: ");
+                description.appendValue(resourceId);
+                if (null != this.resourceName) {
+                    description.appendText("[");
+                    description.appendText(this.resourceName);
+                    description.appendText("]");
+                }
+                if (null != this.expectedText) {
+                    description.appendText(" value: ");
+                    description.appendText(this.expectedText);
+                }
+            }
+
+            @Override
+            public boolean matchesSafely(TextView textView) {
+                if (null == this.expectedText) {
+                    try {
+                        this.expectedText = textView.getResources().getString(
+                                resourceId);
+                        this.resourceName = textView.getResources()
+                                .getResourceEntryName(resourceId);
+                        this.expectedText = AndroidUtilities.replaceTags(this.expectedText).toString();
+                    } catch (Resources.NotFoundException ignored) {
+                    /*
+                     * view could be from a context unaware of the resource
+                     * id.
+                     */
+                    }
+                }
+                if (null != this.expectedText) {
+                    return this.expectedText.equals(textView.getText()
+                            .toString());
+                } else {
+                    return false;
+                }
+            }
+        };
+    }
+}
diff --git a/TMessagesProj/src/test/java/org/telegram/messenger/volley/NetworkErrorTest.java b/TMessagesProj/src/test/java/org/telegram/messenger/volley/NetworkErrorTest.java
new file mode 100644
index 000000000..5139c13de
--- /dev/null
+++ b/TMessagesProj/src/test/java/org/telegram/messenger/volley/NetworkErrorTest.java
@@ -0,0 +1,35 @@
+package org.telegram.messenger.volley;
+
+import junit.framework.TestCase;
+
+import static org.junit.Assert.*;
+
+/**
+ * Created by user on 27.03.2016.
+ */
+public class NetworkErrorTest extends TestCase {
+    final Throwable throwableIn = new Throwable("throwable");
+    final byte[] dataIn = {1, 2, 3};
+    final NetworkResponse responceIn = new NetworkResponse(dataIn);
+
+    public void testDefaultConstructor() throws Exception {
+        NetworkError error = new NetworkError();
+        assertEquals(0, error.getNetworkTimeMs());
+        assertEquals(null, error.networkResponse);
+    }
+
+    public void testCauseConstructor() throws Exception {
+        NetworkError netError = new NetworkError(throwableIn);
+
+        assertEquals(0, netError.getNetworkTimeMs());
+        assertEquals(throwableIn, netError.getCause());
+        assertEquals(null, netError.networkResponse);
+    }
+
+    public void testResponceConstructor() throws Exception {
+        NetworkError netError = new NetworkError(responceIn);
+
+        assertEquals(0, netError.getNetworkTimeMs());
+        assertEquals(responceIn, netError.networkResponse);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/test/java/org/telegram/messenger/volley/NetworkResponseTest.java b/TMessagesProj/src/test/java/org/telegram/messenger/volley/NetworkResponseTest.java
new file mode 100644
index 000000000..658e66d8c
--- /dev/null
+++ b/TMessagesProj/src/test/java/org/telegram/messenger/volley/NetworkResponseTest.java
@@ -0,0 +1,62 @@
+package org.telegram.messenger.volley;
+
+import junit.framework.TestCase;
+import org.apache.http.HttpStatus;
+import org.telegram.messenger.volley.NetworkResponse;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by user on 27.03.2016.
+ */
+public class NetworkResponseTest extends TestCase {
+    private final byte[] arrayIn = {1, 2, 3};
+
+    Map<String, String> headersIn = new HashMap<>();
+    {
+        headersIn.put("Accept", "text/plain");
+        headersIn.put("Connection", "keep-alive");
+    }
+
+    int statusIn = HttpStatus.SC_FORBIDDEN;
+    boolean modifiedIn = true;
+    long networkTimeIn = 1;
+
+    public void testByteConstructor() throws Exception {
+        NetworkResponse response = new NetworkResponse(arrayIn);
+        assertEquals(HttpStatus.SC_OK, response.statusCode);
+        assertEquals(arrayIn, response.data);
+        assertEquals(Collections.<String, String>emptyMap(), response.headers);
+        assertEquals(0, response.networkTimeMs);
+        assertEquals(false,response.notModified);
+    }
+
+    public void testByteHeadersConstructor() throws Exception {
+        NetworkResponse response = new NetworkResponse(arrayIn, headersIn);
+        assertEquals(HttpStatus.SC_OK, response.statusCode);
+        assertEquals(arrayIn, response.data);
+        assertEquals(headersIn, response.headers);
+        assertEquals(0, response.networkTimeMs);
+        assertEquals(false,response.notModified);
+    }
+
+    public void testStatusByteHeadersModifiedConstructor() throws Exception {
+        NetworkResponse response = new NetworkResponse(statusIn, arrayIn, headersIn, modifiedIn);
+        assertEquals(statusIn, response.statusCode);
+        assertEquals(arrayIn, response.data);
+        assertEquals(headersIn, response.headers);
+        assertEquals(0, response.networkTimeMs);
+        assertEquals(modifiedIn,response.notModified);
+    }
+
+    public void testStatusByteHeadersModifiedTimeMsConstructor() throws Exception {
+        NetworkResponse response = new NetworkResponse(statusIn, arrayIn, headersIn, modifiedIn, networkTimeIn);
+        assertEquals(statusIn, response.statusCode);
+        assertEquals(arrayIn, response.data);
+        assertEquals(headersIn, response.headers);
+        assertEquals(networkTimeIn, response.networkTimeMs);
+        assertEquals(modifiedIn,response.notModified);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/test/java/org/telegram/messenger/volley/VolleyErrorTest.java b/TMessagesProj/src/test/java/org/telegram/messenger/volley/VolleyErrorTest.java
new file mode 100644
index 000000000..d6f06c806
--- /dev/null
+++ b/TMessagesProj/src/test/java/org/telegram/messenger/volley/VolleyErrorTest.java
@@ -0,0 +1,62 @@
+package org.telegram.messenger.volley;
+
+import junit.framework.TestCase;
+
+import org.telegram.messenger.volley.NetworkResponse;
+import org.telegram.messenger.volley.VolleyError;
+
+/**
+ * Created by user on 27.03.2016.
+ */
+public class VolleyErrorTest extends TestCase {
+    final byte[] dataIn = {1, 2, 3};
+    final NetworkResponse responceIn = new NetworkResponse(dataIn);
+    final String exeptionMessageIn = "wrong";
+    final Throwable throwableIn = new Throwable("throwable");
+    final long networktimeIn = 100;
+
+    public void testDefaultConstruct() throws Exception {
+        VolleyError error = new VolleyError();
+        assertEquals(0, error.getNetworkTimeMs());
+        assertEquals(null, error.networkResponse);
+    }
+
+    public void testResponceConstructor() throws Exception {
+        VolleyError error = new VolleyError(responceIn);
+        assertEquals(0, error.getNetworkTimeMs());
+        assertEquals(responceIn, error.networkResponse);
+    }
+
+    public void testMessageConstructor() throws Exception {
+        VolleyError error = new VolleyError(exeptionMessageIn);
+        assertEquals(0, error.getNetworkTimeMs());
+        assertEquals(exeptionMessageIn, error.getMessage());
+        assertEquals(null, error.networkResponse);
+    }
+
+    public void testMessageAndReasonConstructor() throws Exception {
+        VolleyError error = new VolleyError(exeptionMessageIn, throwableIn);
+        assertEquals(0, error.getNetworkTimeMs());
+        assertEquals(exeptionMessageIn, error.getMessage());
+        assertEquals(null, error.networkResponse);
+    }
+
+    public void testThrowableConstructor() throws Exception {
+        VolleyError error = new VolleyError(throwableIn);
+        assertEquals(0, error.getNetworkTimeMs());
+        assertEquals(throwableIn, error.getCause());
+        assertEquals(null, error.networkResponse);
+    }
+
+    public void testGetNetworkTimeMs() throws Exception {
+        VolleyError error = new VolleyError();
+        assertEquals(0, error.getNetworkTimeMs());
+    }
+    
+    public void testSetNetworkTimeMs() throws Exception {
+        VolleyError error = new VolleyError();
+        error.setNetworkTimeMs(networktimeIn);
+        assertEquals(networktimeIn, error.getNetworkTimeMs());
+    }
+
+}
\ No newline at end of file
