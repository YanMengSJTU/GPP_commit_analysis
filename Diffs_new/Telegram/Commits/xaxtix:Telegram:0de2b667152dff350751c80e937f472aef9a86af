diff --git a/TMessagesProj/src/main/assets/arctic.attheme b/TMessagesProj/src/main/assets/arctic.attheme
index 5de85a6e6..d95aedb39 100644
--- a/TMessagesProj/src/main/assets/arctic.attheme
+++ b/TMessagesProj/src/main/assets/arctic.attheme
@@ -17,7 +17,7 @@ chat_outUpCall=-4724737
 dialogCheckboxSquareBackground=-14380561
 chat_inVoiceSeekbarSelected=-4663576
 dialogTextGray=-13460771
-chats_menuPhone=-870493820
+chats_menuPhone=-16745256
 chat_messageLinkOut=-3414273
 avatar_actionBarIconOrange=-8684677
 dialogRadioBackgroundChecked=-14311696
@@ -76,7 +76,7 @@ avatar_backgroundActionBarViolet=-1
 actionBarDefaultTitle=-13421773
 avatar_actionBarIconPink=-8684671
 windowBackgroundWhiteBlueButton=-14509832
-chats_menuName=-14392157
+chats_menuName=-16745256
 listSelectorSDK21=251658240
 chat_inViaBotNameText=-13464859
 chat_outVoiceSeekbar=-1263345153
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ColorUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/ColorUtilities.java
index 1dc118b25..6354b1097 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ColorUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ColorUtilities.java
@@ -66,4 +66,12 @@ public static int replaceHue(int to, int from) {
         }
         return ColorUtils.HSLToColor(hslTmp);
     }
+
+    public static int clampLightness(int color, float v, float v1) {
+        ColorUtils.colorToHSL(color,hslTmp);
+        if(hslTmp[2] >= v && hslTmp[2] <= v1) return color;
+        if(hslTmp[2] < v) hslTmp[2] = v;
+        if(hslTmp[2] > v1) hslTmp[2] = v1;
+        return ColorUtils.HSLToColor(hslTmp);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index 89e771806..f5881c026 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -51,6 +51,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
+import org.telegram.messenger.ColorUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
@@ -58,7 +59,6 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.SharedConfig;
-import org.telegram.messenger.ColorUtilities;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.time.SunDate;
 import org.telegram.ui.Components.CombinedDrawable;
@@ -1176,7 +1176,6 @@ public void run() {
             key_windowBackgroundWhiteBlueText5,
             key_windowBackgroundWhiteBlueText4,
             key_chat_messagePanelSend,
-            key_avatar_backgroundBlue,
             key_windowBackgroundWhiteLinkSelection,
             key_chat_outMediaIcon,
             key_chats_sentClock,
@@ -2274,7 +2273,7 @@ public void run() {
             themesDict.put("Graphite", themeInfo);
         }
 
-        themeInfo = new ThemeInfo();
+        ThemeInfo arctic = themeInfo = new ThemeInfo();
         themeInfo.name = "Arctic";
         themeInfo.assetName = "arctic.attheme";
         themeInfo.previewBackgroundColor = 0xffffffff;
@@ -2901,6 +2900,8 @@ public static void applyTheme(ThemeInfo themeInfo, boolean save, boolean removeW
                     }
                     if (themeInfo.hasAccentColor && themeInfo.accentColor != themeInfo.defaultAccentColor) {
                         editor.putInt("theme_accent_color_" + themeInfo.name, themeInfo.accentColor);
+                    } else if (themeInfo.hasAccentColor) {
+                        editor.remove("theme_accent_color_" + themeInfo.name);
                     }
                     editor.commit();
                 }
@@ -4592,6 +4593,7 @@ public static void saveAccentColor(int color) {
         float[] hslAccent;
         int accentColor;
         float accentBrightness;
+        float defaultAccentBrightness;
         int defaultAccentColor;
         boolean isDarkTheme;
     }
@@ -4606,6 +4608,12 @@ private static void overrideColorsToAccent(ThemeInfo themeInfo, HashMap<String,
         params.accentBrightness = (float) Math.sqrt(
                 Color.red(accentColor) * Color.red(accentColor) * 0.241f +
                         Color.green(accentColor) * Color.green(accentColor) * 0.691f +  Color.blue(accentColor) * Color.blue(accentColor) * 0.068f);
+
+
+        params.defaultAccentBrightness = params.accentBrightness = (float) Math.sqrt(
+                Color.red(defaultAccentColor) * Color.red(defaultAccentColor) * 0.241f +
+                        Color.green(defaultAccentColor) * Color.green(defaultAccentColor) * 0.691f +  Color.blue(defaultAccentColor) * Color.blue(defaultAccentColor) * 0.068f);
+
         int primaryTextColor = Color.WHITE;
         int secondaryTextColor = ColorUtils.blendARGB(accentColor, primaryTextColor, 0.4f + 0.6f * params.accentBrightness / 255f);
         for(int i = 0; i < accentColorKeys.length; i++){
@@ -4663,10 +4671,15 @@ private static void overrideColorsToAccent(ThemeInfo themeInfo, HashMap<String,
         currentColors.put(key_chat_outSentCheckSelected, secondaryTextColor);
         currentColors.put(key_chat_outSentCheck, secondaryTextColor);
         currentColors.put(key_chat_outTimeText, secondaryTextColor);
+
+        if(themeInfo.isLight()){
+            currentColors.put(key_chat_outGreenCall, secondaryTextColor);
+        }
     }
 
     private static int transformColorToAccent(AccentColorParams params, int color) {
         float[] hslTmp = ColorUtilities.hslTmp;
+        float[] hslTmp2 = ColorUtilities.hslTmp2;
         float[] hsvTmp = ColorUtilities.hsvTmp;
         float[] hsvTmp2 = ColorUtilities.hsvTmp2;
 
@@ -4675,14 +4688,27 @@ private static int transformColorToAccent(AccentColorParams params, int color) {
         if (hslTmp[1] > 0.35f && hslTmp[2] < 0.75f) {
             Color.colorToHSV(color, hsvTmp);
             Color.colorToHSV(params.defaultAccentColor, hsvTmp2);
-            float dif = hsvTmp2[1] - hslTmp[1];
+            float difV = hsvTmp2[2] - hsvTmp[2];
+            float difS = hsvTmp2[1] - hsvTmp[1];
             Color.colorToHSV(params.accentColor, hsvTmp);
-            float k = params.isDarkTheme ? params.accentBrightness / 255f : (1f - params.accentBrightness / 255f);
-            hsvTmp[2] = clamp(hsvTmp[2] - dif * k,0f,1f);
+
+            float k = 1f;
+            if(hsvTmp[2] < hsvTmp2[2]) {
+                k = hsvTmp[2] / hsvTmp2[2];
+            }
+           // float k = params.isDarkTheme ? params.accentBrightness / 255f : (1f - params.accentBrightness / 255f);
+            hsvTmp[2] = clamp(hsvTmp[2] - difV * k,0f,1f);
+            hsvTmp[1] = clamp(hsvTmp[1] - difS * k,0f,1f);
 
             ColorUtils.colorToHSL(Color.HSVToColor(hsvTmp), hslTmp);
         } else {
-            hslTmp[1] *= params.accentBrightness / 255f;
+            Color.colorToHSV(params.accentColor, hsvTmp);
+            Color.colorToHSV(params.defaultAccentColor, hsvTmp2);
+
+            if(hsvTmp[2] < hsvTmp2[2]) {
+                float k = hsvTmp[2] / hsvTmp2[2];
+                hslTmp[1] *= k * k;
+            }
         }
         if (Color.red(params.accentColor) == Color.blue(params.accentColor) && Color.blue(params.accentColor) == Color.green(params.accentColor)) {
             hslTmp[1] = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
index 0280df9cc..e3c0655a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
@@ -390,13 +390,18 @@ public void setListener(onColorChangeListener listener) {
         public TextView saveButton;
         public TextView cancelButton;
 
+        @Override
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(390), MeasureSpec.EXACTLY));
+        }
+
         public ColorPickerDialogView(@NonNull Context context) {
             super(context);
-
+            setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,390));
             colorPickerView = new ColorPickerView(context);
             colorPickerView.setColor(Theme.getCurrentTheme().accentColor);
 
-            addView(colorPickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+            addView(colorPickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL));
             FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) colorPickerView.getLayoutParams();
             lp.bottomMargin = AndroidUtilities.dp(40);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index b48cdc656..569a41914 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -212,31 +212,41 @@
 
 
     private final static HashMap<String,int[]> defaultPickerColors = new HashMap<>();
-    int defaultPickerColorsSize = 6;
+    int defaultPickerColorsSize = 9;
     static {
         defaultPickerColors.put("arctic.attheme",new int[]{
-                0xff3490eb,
-                0xfff44336,
-                0xff9c27b0,
-                0xff3f51b5,
-                0xff009688,
-                0xffe5bd00
+                0xff3490eb,//default blue
+                0xff46a7be,//cyan
+                0xff54a548,//green
+                0xffc77f39,//oragne
+                0xffc2608f,//pink
+                0xff7484a9,//steel
+                0xffc25059,//red
+                0xff7f63c6,//purpule
+                0xffcaa944 //yellow
+
         });
         defaultPickerColors.put("dark.attheme",new int[]{
-                0xff3e6588,
-                0xffe1503f,
-                0xffb048ae,
-                0xff3960c4,
-                0xff009688,
-                0xffe5d764
+                0xff3e6588,//default blue
+                0xff2a7e84,//cyan
+                0xff347b33,//green
+                0xffc77f39,//oragne
+                0xff7e3e58,//pink
+                0xff49536a,//steel
+                0xff81332f,//red
+                0xff4d4089,//purpule
+                0xff7f6a2b //yellow
         });
         defaultPickerColors.put("darkblue.attheme",new int[]{
-                0xff3e618a,
-                0xffe1503f,
-                0xff614576,
-                0xff3960c4,
-                0xff009688,
-                0xff948b41
+                0xff3e618a,//default blue
+                0xff296254,//cyan
+                0xff2c6329,//green
+                0xff746127,//oragne
+                0xff6c354f,//pink
+                0xff56627d,//steel
+                0xff672a2f,//red
+                0xff48326c,//purpule
+                0xff5b4b2c //yellow
         });
     }
 
@@ -1285,6 +1295,7 @@ private String getLocationSunString() {
         private boolean isFirst;
 
         private static final float BLEND_ALPHA = 0.34f;
+        private static final float BLEND_ALPHA_DARK = 0.1f;
 
         public InnerThemeView(Context context) {
             super(context);
@@ -1320,7 +1331,10 @@ public void setTheme(Theme.ThemeInfo theme, boolean last, boolean first) {
                 inDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewInColor, PorterDuff.Mode.MULTIPLY));
             }
             if (theme.hasAccentColor) {
-                outDrawable.setColorFilter(new PorterDuffColorFilter(ColorUtils.blendARGB(theme.accentColor, Color.WHITE, BLEND_ALPHA), PorterDuff.Mode.MULTIPLY));
+                int color = ColorUtils.blendARGB(theme.accentColor, Color.WHITE,
+                        theme.isDark() ? BLEND_ALPHA_DARK : BLEND_ALPHA);
+                color = ColorUtilities.clampLightness(color,0.6f,1f);
+                outDrawable.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.MULTIPLY));
             } else {
                 outDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewOutColor, PorterDuff.Mode.MULTIPLY));
             }
@@ -1336,7 +1350,12 @@ protected void onAttachedToWindow() {
         public void update() {
             button.setChecked(themeInfo == Theme.getCurrentTheme(), true);
             if (themeInfo.hasAccentColor) {
-                outDrawable.setColorFilter(new PorterDuffColorFilter(ColorUtils.blendARGB(themeInfo.accentColor, Color.WHITE, BLEND_ALPHA), PorterDuff.Mode.MULTIPLY));
+
+                int color = ColorUtils.blendARGB(themeInfo.accentColor, Color.WHITE,
+                        themeInfo.isDark() ? BLEND_ALPHA_DARK : BLEND_ALPHA);
+                color = ColorUtilities.clampLightness(color,0.6f,1f);
+
+                outDrawable.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.MULTIPLY));
 
                 if(themeInfo.name.equals("Dark Tint")){
                     inDrawable.setColorFilter(new PorterDuffColorFilter(ColorUtilities.replaceHue(themeInfo.previewInColor,themeInfo.accentColor), PorterDuff.Mode.MULTIPLY));
@@ -1361,7 +1380,9 @@ protected void onDraw(Canvas canvas) {
                 int g = Color.green(color);
                 int b = Color.blue(color);
 
-                button.setColor(0xffb3b3b3, ColorUtils.blendARGB(themeInfo.accentColor, Color.WHITE, BLEND_ALPHA));
+                int buttonSelectedColor = ColorUtils.blendARGB(themeInfo.accentColor, Color.WHITE, themeInfo.isDark() ? BLEND_ALPHA_DARK : BLEND_ALPHA);
+                buttonSelectedColor = ColorUtilities.clampLightness(buttonSelectedColor,0.6f,1f);
+                button.setColor(0xffb3b3b3, buttonSelectedColor);
                 Theme.chat_instantViewRectPaint.setColor(Color.argb(43, r, g, b));
                 canvas.drawRoundRect(rect, AndroidUtilities.dp(6), AndroidUtilities.dp(6), Theme.chat_instantViewRectPaint);
             } else {
