diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 5541ba46c..812c29e5c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -57,6 +57,9 @@
 
 import com.aniways.Log;
 import com.aniways.anigram.messenger.R;
+import com.aniways.data.AniwaysNetworkStateChecker;
+import com.aniways.data.AniwaysPrivateConfig;
+
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
@@ -439,7 +442,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
     }
 
     public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
-
+        private static final String TAG = "AniwaysPhoneView";
+        private boolean requestInprogress = false;
         private EditText codeField;
         private EditText phoneField;
         private TextView countryButton;
@@ -833,42 +837,82 @@ public void onNextPressed() {
             params.putString("phone", "+" + codeField.getText() + phoneField.getText());
             params.putString("phoneFormated", phone);
             nextPressed = true;
+            this.requestInprogress = true;
             needShowProgress();
+            final long startReqTime = System.currentTimeMillis();
             ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            nextPressed = false;
-                            if (error == null) {
-                                final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode)response;
-                                params.putString("phoneHash", res.phone_code_hash);
-                                params.putInt("calltime", res.send_call_timeout * 1000);
-                                if (res.phone_registered) {
-                                    params.putString("registered", "true");
-                                }
-                                setPage(1, true, params, false);
-                            } else {
-                                if (error.text != null) {
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                    } else {
-                                        needShowAlert(error.text);
+                            try {
+                                nextPressed = false;
+                                if (error == null) {
+                                    final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode) response;
+                                    params.putString("phoneHash", res.phone_code_hash);
+                                    params.putInt("calltime", res.send_call_timeout * 1000);
+                                    if (res.phone_registered) {
+                                        params.putString("registered", "true");
+                                    }
+                                    setPage(1, true, params, false);
+                                } else {
+                                    if (error.text != null) {
+                                        if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                            needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                        } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                            needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                        } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                            needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                        } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                            needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                        } else {
+                                            needShowAlert(error.text);
+                                        }
                                     }
                                 }
+                                needHideProgress();
+                            } catch (Throwable ex) {
+                                Log.e(true, TAG, "Caught exception in phone reg", ex);
+                            } finally {
+                                requestInprogress = false;
                             }
-                            needHideProgress();
                         }
                     });
                 }
             }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassTryDifferentDc | RPCRequest.RPCRequestClassEnableUnauthorized);
+            checkConnection(startReqTime);
+        }
+
+        private void checkConnection(final long startReqTime) {
+            AniwaysNetworkStateChecker.checkInternet(new AniwaysNetworkStateChecker.AniwaysNetworkSateCheckCallback() {
+
+                @Override
+                public void run(boolean connectionAvailable) {
+                    if (!requestInprogress) {
+                        return;
+                    }
+                    if (connectionAvailable) {
+                        long now = System.currentTimeMillis();
+                        if ((now - startReqTime) > AniwaysPrivateConfig.getInstance().phoneRegTimeout) {
+                            Log.e(true, TAG, "Takes long time receiving response in reg process: " + Long.toString(now - startReqTime));
+                            Toast toast = Toast.makeText(getContext(), "Process takes too long. Please re-install app and try again", Toast.LENGTH_LONG);
+                            toast.setGravity(Gravity.CENTER, 0, 0);
+                            toast.show();
+                            needHideProgress();
+                        } else {
+                            Log.i(TAG, "Starting connectivity check again..");
+                            checkConnection(startReqTime);
+                        }
+                    } else {
+                        Log.e(false, TAG, "Error registering phone cause no internet");
+                        Toast toast = Toast.makeText(getContext(), "No internet connection. Please try again once connected", Toast.LENGTH_LONG);
+                        toast.setGravity(Gravity.CENTER, 0, 0);
+                        toast.show();
+                        needHideProgress();
+                    }
+                }
+            });
         }
 
         @Override
@@ -911,7 +955,8 @@ public void restoreStateParams(Bundle bundle) {
     }
 
     public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
-
+        private static final String TAG = "AniwaysLoginActivitySmsView";
+        private boolean requestInprogress = false;
         private String phoneHash;
         private String requestPhone;
         private String registered;
@@ -1228,62 +1273,105 @@ public void onNextPressed() {
             req.phone_code = codeField.getText().toString();
             req.phone_code_hash = phoneHash;
             destroyTimer();
+            this.requestInprogress = true;
             needShowProgress();
+            final long startReqTime = System.currentTimeMillis();
             ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            needHideProgress();
-                            nextPressed = false;
-                            if (error == null) {
-                                TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
-                                destroyTimer();
-                                destroyCodeTimer();
-                                UserConfig.clearConfig();
-                                MessagesController.getInstance().cleanUp();
-                                UserConfig.setCurrentUser(res.user);
-                                UserConfig.saveConfig(true);
-                                MessagesStorage.getInstance().cleanUp(true);
-                                ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
-                                users.add(res.user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                MessagesController.getInstance().putUser(res.user, false);
-                                ContactsController.getInstance().checkAppAccount();
-                                MessagesController.getInstance().getBlockedUsers(true);
-                                needFinishActivity();
-                                ConnectionsManager.getInstance().initPushConnection();
-                            } else {
-                                lastError = error.text;
-
-                                if (error.text.contains("PHONE_NUMBER_UNOCCUPIED") && registered == null) {
-                                    Bundle params = new Bundle();
-                                    params.putString("phoneFormated", requestPhone);
-                                    params.putString("phoneHash", phoneHash);
-                                    params.putString("code", req.phone_code);
-                                    setPage(2, true, params, false);
+                            try {
+                                needHideProgress();
+                                nextPressed = false;
+                                if (error == null) {
+                                    TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
                                     destroyTimer();
                                     destroyCodeTimer();
+                                    UserConfig.clearConfig();
+                                    MessagesController.getInstance().cleanUp();
+                                    UserConfig.setCurrentUser(res.user);
+                                    UserConfig.saveConfig(true);
+                                    MessagesStorage.getInstance().cleanUp(true);
+                                    ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                                    users.add(res.user);
+                                    MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                                    MessagesController.getInstance().putUser(res.user, false);
+                                    ContactsController.getInstance().checkAppAccount();
+                                    MessagesController.getInstance().getBlockedUsers(true);
+                                    needFinishActivity();
+                                    ConnectionsManager.getInstance().initPushConnection();
                                 } else {
-                                    createTimer();
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                    lastError = error.text;
+
+                                    if (error.text.contains("PHONE_NUMBER_UNOCCUPIED") && registered == null) {
+                                        Bundle params = new Bundle();
+                                        params.putString("phoneFormated", requestPhone);
+                                        params.putString("phoneHash", phoneHash);
+                                        params.putString("code", req.phone_code);
+                                        setPage(2, true, params, false);
+                                        destroyTimer();
+                                        destroyCodeTimer();
                                     } else {
-                                        needShowAlert(error.text);
+                                        createTimer();
+                                        if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                            needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                        } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                            needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                        } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                            needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                        } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                            needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                        } else {
+                                            needShowAlert(error.text);
+                                        }
                                     }
                                 }
                             }
+                            catch(Throwable ex) {
+                                Log.e(true, TAG, "Caught exception in phone reg", ex);
+                            }
+                            finally {
+                                requestInprogress = false;
+                            }
                         }
+
                     });
                 }
             }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
+            checkConnection(startReqTime);
+        }
+
+        private void checkConnection(final long startReqTime) {
+            AniwaysNetworkStateChecker.checkInternet(new AniwaysNetworkStateChecker.AniwaysNetworkSateCheckCallback() {
+
+                @Override
+                public void run(boolean connectionAvailable) {
+                    if (!requestInprogress) {
+                        return;
+                    }
+                    if (connectionAvailable) {
+                        long now = System.currentTimeMillis();
+                        if ((now - startReqTime) > AniwaysPrivateConfig.getInstance().phoneRegTimeout) {
+                            Log.e(true, TAG, "Takes long time receiving response in reg process: " + Long.toString(now - startReqTime));
+                            Toast toast = Toast.makeText(getContext(), "Process takes too long. Please re-install app and try again", Toast.LENGTH_LONG);
+                            toast.setGravity(Gravity.CENTER, 0, 0);
+                            toast.show();
+                            needHideProgress();
+                        } else {
+                            Log.i(TAG, "Starting connectivity check again..");
+                            checkConnection(startReqTime);
+                        }
+                    } else {
+                        Log.e(false, TAG, "Error registering phone cause no internet");
+                        Toast toast = Toast.makeText(getContext(), "No internet connection. Please try again once connected", Toast.LENGTH_LONG);
+                        toast.setGravity(Gravity.CENTER, 0, 0);
+                        toast.show();
+                        needHideProgress();
+                    }
+                }
+            });
         }
 
         @Override
@@ -1365,7 +1453,7 @@ public void restoreStateParams(Bundle bundle) {
     }
 
     public class RegisterView extends SlideView {
-
+        private static final String TAG = "AniwaysRegisterView";
         private EditText firstNameField;
         private EditText lastNameField;
         private String requestPhone;
@@ -1373,6 +1461,7 @@ public void restoreStateParams(Bundle bundle) {
         private String phoneCode;
         private Bundle currentParams;
         private boolean nextPressed = false;
+        private boolean requestInprogress = false;
 
         public RegisterView(Context context) {
             super(context);
@@ -1527,51 +1616,93 @@ public void onNextPressed() {
             req.phone_number = requestPhone;
             req.first_name = firstNameField.getText().toString();
             req.last_name = lastNameField.getText().toString();
+            this.requestInprogress = true;
             needShowProgress();
+            final long startReqTime = System.currentTimeMillis();
             ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            nextPressed = false;
-                            needHideProgress();
-                            if (error == null) {
-                                final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
-                                TLRPC.TL_userSelf user = (TLRPC.TL_userSelf) res.user;
-                                UserConfig.clearConfig();
-                                MessagesController.getInstance().cleanUp();
-                                UserConfig.setCurrentUser(user);
-                                UserConfig.saveConfig(true);
-                                MessagesStorage.getInstance().cleanUp(true);
-                                ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
-                                users.add(user);
-                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                //MessagesController.getInstance().uploadAndApplyUserAvatar(avatarPhotoBig);
-                                MessagesController.getInstance().putUser(res.user, false);
-                                ContactsController.getInstance().checkAppAccount();
-                                MessagesController.getInstance().getBlockedUsers(true);
-                                needFinishActivity();
-                                ConnectionsManager.getInstance().initPushConnection();
-                            } else {
-                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                    needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                } else if (error.text.contains("FIRSTNAME_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
-                                } else if (error.text.contains("LASTNAME_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
+                            try {
+                                nextPressed = false;
+                                needHideProgress();
+                                if (error == null) {
+                                    final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
+                                    TLRPC.TL_userSelf user = (TLRPC.TL_userSelf) res.user;
+                                    UserConfig.clearConfig();
+                                    MessagesController.getInstance().cleanUp();
+                                    UserConfig.setCurrentUser(user);
+                                    UserConfig.saveConfig(true);
+                                    MessagesStorage.getInstance().cleanUp(true);
+                                    ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                                    users.add(user);
+                                    MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                                    //MessagesController.getInstance().uploadAndApplyUserAvatar(avatarPhotoBig);
+                                    MessagesController.getInstance().putUser(res.user, false);
+                                    ContactsController.getInstance().checkAppAccount();
+                                    MessagesController.getInstance().getBlockedUsers(true);
+                                    needFinishActivity();
+                                    ConnectionsManager.getInstance().initPushConnection();
                                 } else {
-                                    needShowAlert(error.text);
+                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                    } else if (error.text.contains("FIRSTNAME_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
+                                    } else if (error.text.contains("LASTNAME_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
+                                    } else {
+                                        needShowAlert(error.text);
+                                    }
                                 }
                             }
+                            catch(Throwable ex) {
+                                Log.e(true, TAG, "Caught exception in phone reg", ex);
+                            }
+                            finally {
+                                requestInprogress = false;
+                            }
                         }
                     });
                 }
             }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin);
+            checkConnection(startReqTime);
+        }
+
+        private void checkConnection(final long startReqTime) {
+            AniwaysNetworkStateChecker.checkInternet(new AniwaysNetworkStateChecker.AniwaysNetworkSateCheckCallback() {
+
+                @Override
+                public void run(boolean connectionAvailable) {
+                    if (!requestInprogress) {
+                        return;
+                    }
+                    if (connectionAvailable) {
+                        long now = System.currentTimeMillis();
+                        if ((now - startReqTime) > AniwaysPrivateConfig.getInstance().phoneRegTimeout) {
+                            Log.e(true, TAG, "Takes long time receiving response in reg process: " + Long.toString(now - startReqTime));
+                            Toast toast = Toast.makeText(getContext(), "Process takes too long. Please re-install app and try again", Toast.LENGTH_LONG);
+                            toast.setGravity(Gravity.CENTER, 0, 0);
+                            toast.show();
+                            needHideProgress();
+                        } else {
+                            Log.i(TAG, "Starting connectivity check again..");
+                            checkConnection(startReqTime);
+                        }
+                    } else {
+                        Log.e(false, TAG, "Error registering phone cause no internet");
+                        Toast toast = Toast.makeText(getContext(), "No internet connection. Please try again once connected", Toast.LENGTH_LONG);
+                        toast.setGravity(Gravity.CENTER, 0, 0);
+                        toast.show();
+                        needHideProgress();
+                    }
+                }
+            });
         }
 
         @Override
