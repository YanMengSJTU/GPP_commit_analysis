diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index 614c925b1..b8320797c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -2828,6 +2828,14 @@ private static void applyDayNightThemeMaybe(boolean night) {
         }
     }
 
+    public static void renameTheme(ThemeInfo themeInfo, String name) {
+        themesDict.remove(themeInfo.name);
+        themesDict.put(name, themeInfo);
+        themeInfo.name = name;
+        saveOtherThemes();
+        sortThemes();
+    }
+
     public static boolean deleteTheme(ThemeInfo themeInfo) {
         if (themeInfo.pathToFile == null) {
             return false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index 42f042218..3ade9b6ba 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -968,7 +968,7 @@ private void openThemeCreate() {
         builder.setView(linearLayout);
 
         final TextView message = new TextView(getParentActivity());
-        message.setText(LocaleController.formatString("EnterThemeName", R.string.EnterThemeName));
+        message.setText(LocaleController.getString("EnterThemeName", R.string.EnterThemeName));
         message.setTextSize(16);
         message.setPadding(AndroidUtilities.dp(23), AndroidUtilities.dp(12), AndroidUtilities.dp(23), AndroidUtilities.dp(6));
         message.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
@@ -998,18 +998,12 @@ private void openThemeCreate() {
         }));
         showDialog(alertDialog);
         alertDialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(v -> {
-            if (editText.length() == 0) {
-                Vibrator vibrator = (Vibrator) ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
-                if (vibrator != null) {
-                    vibrator.vibrate(200);
-                }
-                AndroidUtilities.shakeView(editText, 2, 0);
-                return;
-            }
+            String themeName = checkThemeName(editText);
+            if (themeName == null) return;
+
             ThemeEditorView themeEditorView = new ThemeEditorView();
-            String name = editText.getText().toString() + ".attheme";
-            themeEditorView.show(getParentActivity(), name);
-            Theme.saveCurrentTheme(name, true);
+            themeEditorView.show(getParentActivity(), themeName);
+            Theme.saveCurrentTheme(themeName, true);
             updateRows();
             alertDialog.dismiss();
 
@@ -1026,6 +1020,36 @@ private void openThemeCreate() {
         });
     }
 
+    private String checkThemeName(EditTextBoldCursor editText) {
+        String trimmedText = editText.getText().toString().trim();
+
+        if (trimmedText.isEmpty()) {
+            Vibrator vibrator = (Vibrator) ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
+            if (vibrator != null) {
+                vibrator.vibrate(200);
+            }
+            AndroidUtilities.shakeView(editText, 2, 0);
+            return null;
+        }
+
+        String themeName = trimmedText + ".attheme";
+        ArrayList<Theme.ThemeInfo> themes = Theme.themes;
+
+        for (int i = 0; i < themes.size(); i++) {
+            if (TextUtils.equals(themeName, themes.get(i).name)) {
+                Toast.makeText(getParentActivity(), LocaleController.getString("ThemeAlreadyExists", R.string.ThemeAlreadyExists), Toast.LENGTH_SHORT).show();
+                Vibrator vibrator = (Vibrator) ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
+                if (vibrator != null) {
+                    vibrator.vibrate(200);
+                }
+                AndroidUtilities.shakeView(editText, 2, 0);
+                return null;
+            }
+        }
+
+        return themeName;
+    }
+
     private void updateSunTime(Location lastKnownLocation, boolean forceUpdate) {
         LocationManager locationManager = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
         if (Build.VERSION.SDK_INT >= 23) {
@@ -1351,6 +1375,7 @@ private void showOptionsForTheme(Theme.ThemeInfo themeInfo) {
                 items = new CharSequence[]{
                         LocaleController.getString("ShareFile", R.string.ShareFile),
                         LocaleController.getString("Edit", R.string.Edit),
+                        LocaleController.getString("EditName", R.string.EditName),
                         LocaleController.getString("Delete", R.string.Delete)};
             }
             builder.setItems(items, (dialog, which) -> {
@@ -1409,6 +1434,55 @@ private void showOptionsForTheme(Theme.ThemeInfo themeInfo) {
                         parentLayout.rebuildAllFragmentViews(true, true);
                         new ThemeEditorView().show(getParentActivity(), themeInfo.name);
                     }
+                } else if (which == 2) {
+                    final EditTextBoldCursor editText = new EditTextBoldCursor(getParentActivity());
+                    final AlertDialog.Builder editNameDialogBuilder = new AlertDialog.Builder(getParentActivity());
+                    editNameDialogBuilder.setTitle(LocaleController.getString("EditThemeName", R.string.EditThemeName));
+                    editNameDialogBuilder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
+                        String themeName = checkThemeName(editText);
+                        if (themeName == null) return;
+                        Theme.renameTheme(themeInfo, themeName);
+                        updateRows();
+                        dialogInterface.dismiss();
+                    });
+                    editNameDialogBuilder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel),
+                            (dialogInterface, i) -> dialogInterface.dismiss());
+
+                    LinearLayout linearLayout = new LinearLayout(getParentActivity());
+                    linearLayout.setOrientation(LinearLayout.VERTICAL);
+                    editNameDialogBuilder.setView(linearLayout);
+
+                    if (themeInfo.name.endsWith(".attheme")) {
+                        editText.setText(themeInfo.name.substring(0, themeInfo.name.length() - ".attheme".length()));
+                    } else editText.setText(themeInfo.name);
+                    editText.setBackground(Theme.createEditTextDrawable(getParentActivity(), true));
+                    editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+                    editText.setTextColor(Theme.getColor(Theme.key_dialogTextBlack));
+                    editText.setMaxLines(1);
+                    editText.setLines(1);
+                    editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
+                    editText.setGravity(Gravity.LEFT | Gravity.TOP);
+                    editText.setSingleLine(true);
+                    editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+                    editText.setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
+                    editText.setCursorSize(AndroidUtilities.dp(20));
+                    editText.setCursorWidth(1.5f);
+                    editText.setPadding(0, AndroidUtilities.dp(4), 0, 0);
+                    linearLayout.addView(editText, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, Gravity.TOP | Gravity.LEFT, 24, 6, 24, 0));
+                    editText.setOnEditorActionListener((textView, i, keyEvent) -> {
+                        AndroidUtilities.hideKeyboard(textView);
+                        return false;
+                    });
+
+                    final AlertDialog alertDialog = editNameDialogBuilder.create();
+                    alertDialog.setDismissDialogByButtons(false);
+                    alertDialog.setOnShowListener(dialogInterface ->
+                            AndroidUtilities.runOnUIThread(() -> {
+                                editText.requestFocus();
+                                AndroidUtilities.showKeyboard(editText);
+                                editText.setSelection(editText.getText().length());
+                            }));
+                    showDialog(alertDialog);
                 } else {
                     if (getParentActivity() == null) {
                         return;
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index de2da5449..14848b969 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1138,6 +1138,7 @@
     <string name="ThemeBlue">Blue</string>
     <string name="DeleteThemeAlert">Are you sure you want to delete this theme?</string>
     <string name="IncorrectTheme">Incorrect theme file</string>
+    <string name="EditThemeName">Edit Theme Name</string>
     <string name="EnterThemeName">Enter theme name</string>
     <string name="CloseEditor">CLOSE EDITOR</string>
     <string name="SaveTheme">SAVE THEME</string>
@@ -1154,6 +1155,7 @@
     <string name="SelectColor">Select color</string>
     <string name="ColorThemes">Color Themes</string>
     <string name="ShowAllThemes">Show all Themes</string>
+    <string name="ThemeAlreadyExists">Theme with this name already exists in your library</string>
     <string name="CreateNewThemeMenu">Create new theme</string>
     <string name="CreateNewThemeHelp">Tap on the palette icon to view the list of elements on each screen - and edit them.</string>
     <string name="CreateNewThemeAlert">You can create your own theme by changing colors within the app.\n\nYou can always switch back to the default Telegram theme here.</string>
