diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 256a12254..17e573fae 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -41,6 +41,7 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.UserConfig;
+import org.telegram.utils.CollectionUtils;
 import org.telegram.utils.Constants;
 import org.telegram.utils.StringUtils;
 
@@ -49,6 +50,8 @@
 import java.io.FileOutputStream;
 import java.io.FilenameFilter;
 import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
 import java.lang.ref.WeakReference;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
@@ -57,13 +60,14 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Locale;
 import java.util.UUID;
 
 public class MediaController implements NotificationCenter.NotificationCenterDelegate {
 
-    private static RTree<Post, Geometry> rTree;
-    private static boolean rTreeloaded;
+    private RTree<Post, Geometry> rTree;
+    private boolean rTreeloaded;
 
 
     public static int[] readArgs = new int[3];
@@ -165,6 +169,9 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     public int roamingDownloadMask = 0;
     private int lastCheckMask = 0;
 
+
+    private long rTreeLastDateUpdate = 0;
+
     private boolean saveToGallery = true;
 
     private HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>> loadingFileObservers = new HashMap<>();
@@ -261,6 +268,9 @@ public MediaController() {
         roamingDownloadMask = preferences.getInt("roamingDownloadMask", 0);
         saveToGallery = preferences.getBoolean("save_gallery", false);
 
+
+        rTreeLastDateUpdate = preferences.getLong("rTreeLastDateUpdate", 0);
+
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
@@ -394,6 +404,7 @@ public void stopMediaObserver() {
         ApplicationLoader.applicationHandler.postDelayed(stopMediaObserverRunnable, 5000);
     }
 
+    //TODO find out why we need it ? Probaly ther is better way to keep up to date RTREE with local files.
     public void processMediaObserver(Uri uri) {
         try {
             Point size = AndroidUtilities.getRealScreenSize();
@@ -750,7 +761,7 @@ public boolean canSaveToGallery() {
     //TODO why it is static
     //TODO what is it guid. I need guid in postNotification. I should pass this parameter in args to say to which activiy I send the notification, because many activities could subscribe to the same notification, but not all of them must receive the response
     public static void loadGeoTaggedGalleryPhotos(final int guid) {
-        if (rTree != null || isRTreeloaded()) {
+        if (getInstance().rTree != null || getInstance().isRTreeloaded()) {
             AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
@@ -762,46 +773,53 @@ public void run() {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                RTree<Post, Geometry> rTree = RTree.create();
-                String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
+                List<Post> posts = new ArrayList<Post>();
+                RTree<Post, Geometry> rTree = getInstance().restoreRTree();
+                if (rTree == null) {
+                    rTree = RTree.create();
+                    String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
 
-                // TODO filter files list. and in parallel check time of the last update?
+                    // TODO filter files list. and in parallel check time of the last update?
 //               TODO  Or update rTree one per week ! (per day). OR if the number of files is changed. new photo added or something deleted. !!
-                String[] fileNames = new File(cameraFolder).list(new FilenameFilter() {
-                    public boolean accept(File dir, String name) {
-                        return name.toLowerCase().endsWith(Constants.EXTENSION_JPG) ||
-                                name.toLowerCase().endsWith(Constants.EXTENSION_JPEG)
-                                || name.toLowerCase().endsWith(Constants.EXTENSION_PNG);
-                    }
-                });
-                for (String fileName : fileNames) {
-                    ExifInterface exif;
-                    try {
-                        exif = new ExifInterface(cameraFolder + File.separator + fileName);
-                    } catch (IOException e) {
-                        //TODO handle exception.
-                        e.printStackTrace();
-                        continue;
-                    }
-                    String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME);
-                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd hh:mm:ss", Locale.getDefault());
-                    Date date;
-                    try {
-                        date = simpleDateFormat.parse(datetime);
-                    } catch (ParseException e) {
-                        //TODO handle exception
-                        e.printStackTrace();
-                        continue;
-                    }
-                    float[] coordinates = new float[2];
-                    boolean result = exif.getLatLong(coordinates);
-                    if (result) {
-                        Post post = PostsController.getInstance().createPost(cameraFolder, fileName, coordinates[0], coordinates[1], date);
-                        rTree = rTree.add(Entry.entry(post, Geometries.point(coordinates[1], coordinates[0])));
+                    String[] fileNames = new File(cameraFolder).list(new FilenameFilter() {
+                        public boolean accept(File dir, String name) {
+                            return name.toLowerCase().endsWith(Constants.EXTENSION_JPG) ||
+                                    name.toLowerCase().endsWith(Constants.EXTENSION_JPEG)
+                                    || name.toLowerCase().endsWith(Constants.EXTENSION_PNG);
+                        }
+                    });
+                    for (String fileName : fileNames) {
+                        ExifInterface exif;
+                        try {
+                            exif = new ExifInterface(cameraFolder + File.separator + fileName);
+                        } catch (IOException e) {
+                            //TODO handle exception.
+                            e.printStackTrace();
+                            continue;
+                        }
+                        String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME);
+                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd hh:mm:ss", Locale.getDefault());
+                        Date date;
+                        try {
+                            date = simpleDateFormat.parse(datetime);
+                        } catch (ParseException e) {
+                            //TODO handle exception
+                            e.printStackTrace();
+                            continue;
+                        }
+                        float[] coordinates = new float[2];
+                        boolean result = exif.getLatLong(coordinates);
+                        if (result) {
+                            Post post = PostsController.getInstance().createPost(cameraFolder, fileName, coordinates[0], coordinates[1], date);
+                            rTree = rTree.add(Entry.entry(post, Geometries.point(coordinates[1], coordinates[0])));
+                            posts.add(post);
+                        }
                     }
+                    //TODO it in other thread - saving the file.
                 }
-                setrTree(rTree);
-
+//                restoreObject(Constants.LOCAL_POSTS_FILENAME);
+                getInstance().setRTree(rTree);
+                getInstance().saveLocalPosts(posts);
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
@@ -827,10 +845,57 @@ public void run() {
         }).start();
     }
 
-    private static void setrTree(RTree<Post, Geometry> rTree) {
-        MediaController.rTree = rTree;
+    private void setRTree(RTree<Post, Geometry> rTree) {
+        MediaController.getInstance().rTree = rTree;
         rTreeloaded = true;
+    }
 
+
+    public void saveLocalPosts(final List<Post> posts) {
+        if (CollectionUtils.isEmpty(posts)) {
+            return;
+        }
+        long diff = new Date().getTime() - getInstance().rTreeLastDateUpdate;
+        if (diff > Constants.TIME_DIFFERENCE) {
+            new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    saveObject(Constants.LOCAL_POSTS_FILENAME, posts);
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    rTreeLastDateUpdate = new Date().getTime();
+                    editor.putLong("rTreeLastDateUpdate", rTreeLastDateUpdate);
+                    editor.commit();
+
+                }
+            }).start();
+        }
+    }
+
+    public RTree<Post, Geometry> restoreRTree() {
+        long diff = new Date().getTime() - getInstance().rTreeLastDateUpdate;
+        //if difference big then return nul to force app to read images again.
+        if (diff > Constants.TIME_DIFFERENCE) {
+            return null;
+        }
+        Object object = restoreObject(Constants.LOCAL_POSTS_FILENAME);
+        if (object instanceof ArrayList) {
+            List objects = (ArrayList) object;
+            if (CollectionUtils.isEmpty(objects)) {
+                return null;
+            }
+            RTree<Post, Geometry> rTree = RTree.create();
+            for (Object obj : objects) {
+                if (obj instanceof Post) {
+                    Post post = (Post) obj;
+                    List<Double> coordinates = post.getCoordinates().getCoordinates();
+                    rTree = rTree.add(Entry.entry(post, Geometries.point(coordinates.get(0), coordinates.get(1))));
+                }
+            }
+
+            return rTree;
+        }
+        return null;
     }
 
     public static void loadGalleryPhotosAlbums(final int guid) {
@@ -1044,12 +1109,41 @@ public void saveBitmap(Image image) {
 
     }
 
+    public static void saveObject(String fileName, Object object) {
+        FileOutputStream outputStream;
+        try {
+            outputStream = ApplicationLoader.applicationContext.openFileOutput(fileName, Context.MODE_PRIVATE);
+            ObjectOutputStream os = new ObjectOutputStream(outputStream);
+            os.writeObject(object);
+            os.close();
+            outputStream.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    //    ApplicationLoader.applicationContext.getFilesDir() -  to get list of all files.
+    public Object restoreObject(String fileName) {
+        try {
+            FileInputStream fis = ApplicationLoader.applicationContext.openFileInput(fileName);
+            ObjectInputStream is = new ObjectInputStream(fis);
+            Object object = is.readObject();
+            is.close();
+            fis.close();
+            return object;
+        } catch (Exception e) {
+            //TODO handle exception.
+            e.printStackTrace();
+        }
+        return null;
+    }
+
 
-    public static RTree<Post, Geometry> getrTree() {
+    public RTree<Post, Geometry> getRTree() {
         return rTree;
     }
 
-    public static boolean isRTreeloaded() {
+    public boolean isRTreeloaded() {
         return rTreeloaded;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 01bc0cddf..c0948d862 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -208,11 +208,11 @@ public void deletePost(final String did, int offset, final boolean onlyHistory)
 
 
     public void loadPosts(final String idOffset, final int offset, final int count, final boolean reload, final boolean offlineMode) {
-        if (loadingPosts || offlineMode && MediaController.getrTree() == null) {
+        if (loadingPosts || offlineMode && MediaController.getInstance().getRTree() == null) {
             return;
         }
         //TODO rethink this.
-//        if (offlineMode && MediaController.getrTree() == null) {
+//        if (offlineMode && MediaController.getRTree() == null) {
 //            NotificationCenter.getInstance().postNotificationName(NotificationCenter.stopRefreshingView);
 //            return;
 //        }
@@ -241,7 +241,7 @@ public void loadPosts(final String idOffset, final int offset, final int count,
 
     private void loadLocalPosts(final PostRequest postRequest, final boolean reload) {
         List<Post> results = new ArrayList<>();
-        RTree<Post, Geometry> rTree = MediaController.getrTree();
+        RTree<Post, Geometry> rTree = MediaController.getInstance().getRTree();
         if (rTree == null) {
             return;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 104417aec..e776157b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -850,7 +850,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             boolean force = false;
             if (!this.offlineMode) {
                 force = true;
-                if (!MediaController.isRTreeloaded()) {
+                if (!MediaController.getInstance().isRTreeloaded()) {
                     if (progressView != null && postListView != null) {
                         progressView.setVisibility(View.VISIBLE);
                         postListView.setVisibility(View.INVISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index 8f4298a03..b9f55dbc0 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -47,4 +47,9 @@
     public static final String EXTENSION_PNG = ".png";
 
     public static long PROGRESS_DIALOG_TIMEOUT = 500;
+
+
+    public static String LOCAL_POSTS_FILENAME = "rtree";
+
+    public static long TIME_DIFFERENCE = 1 * 24 * 60 * 60 * 1000; // 1 Day.
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Coordinates.java b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Coordinates.java
index 17d654067..e6cda016a 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Coordinates.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Coordinates.java
@@ -1,12 +1,13 @@
 package ru.aragats.wgo.dto;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
 /**
  * Created by aragats on 09/05/15.
  */
-public class Coordinates {
+public class Coordinates  implements Serializable{
     //TODO enum. probably.
     private String type;
     private List<Double> coordinates = new ArrayList<Double>();
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Image.java b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Image.java
index 44bee6d66..e1ba3d6ce 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Image.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Image.java
@@ -2,10 +2,12 @@
 
 import android.graphics.Bitmap;
 
+import java.io.Serializable;
+
 /**
  * Created by aragats on 09/05/15.
  */
-public class Image {
+public class Image implements Serializable{
 
     private String key;
     private String url;
@@ -15,7 +17,7 @@
     //TODO enum // contentType !!!
     private String type;
     // TODO TEMP. Use other Image class. make it Transient.
-    private Bitmap bitmap;
+    private transient Bitmap bitmap;
 
     public String getUrl() {
         return url;
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java
index ff1784fd4..9541d6f4b 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Post.java
@@ -3,12 +3,13 @@
 
 import org.telegram.utils.CollectionUtils;
 
+import java.io.Serializable;
 import java.util.List;
 
 /**
  * Created by aragats on 27/12/14.
  */
-public class Post {
+public class Post implements Serializable{
 
     private String id;
     private String text;
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Venue.java b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Venue.java
index c9defd44a..4f0bda1d0 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Venue.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/Venue.java
@@ -1,9 +1,11 @@
 package ru.aragats.wgo.dto;
 
+import java.io.Serializable;
+
 /**
  * Created by aragats on 09/05/15.
  */
-public class Venue {
+public class Venue  implements Serializable{
     private String id;
     private String foursquareId;
     private String name;
