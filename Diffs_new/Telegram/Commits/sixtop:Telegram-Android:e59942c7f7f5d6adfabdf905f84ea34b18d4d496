diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index b380ef537..0ad57bc15 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -401,7 +401,9 @@
     private long dialog_id;
     private int lastLoadIndex;
     private boolean isBroadcast;
-    private SparseArray<MessageObject>[] selectedMessagesIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
+    private SparseArrayWithTouch<MessageObject>[] selectedMessagesIds = new SparseArrayWithTouch[]{
+        new SparseArrayWithTouch<MessageObject>(),
+        new SparseArrayWithTouch<MessageObject>()};
     private SparseArray<MessageObject>[] selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
     private SparseArray<MessageObject>[] selectedMessagesCanStarIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
     private boolean hasUnfavedSelected;
@@ -487,6 +489,16 @@
     private AnimatorSet scrimAnimatorSet;
     private ActionBarPopupWindow scrimPopupWindow;
 
+    public class SparseArrayWithTouch<E> extends SparseArray<E> {
+        public ArrayList<Integer> withTouch = new ArrayList<>();
+
+        @Override
+        public void clear() {
+            withTouch.clear();
+            super.clear();
+        }
+    }
+
     private class UnreadCounterTextView extends TextView {
 
         private int currentCounter;
@@ -670,6 +682,7 @@ public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
     private final static int copy = 10;
     private final static int forward = 11;
     private final static int forward_anonym = 111;
+    private final static int select_between = 112;
     private final static int delete = 12;
     private final static int chat_enc_timer = 13;
     private final static int chat_menu_attach = 14;
@@ -1200,6 +1213,25 @@ public void onItemClick(final int id) {
                         return;
                     }
                     createDeleteMessagesAlert(null, null);
+                } else if (id == select_between) {
+                    // For selecting messages between the first and the last.
+                    ArrayList<Integer> ids = new ArrayList<>();
+                    for (int a = 1; a >= 0; a--) {
+                        for (int b = 0; b < selectedMessagesIds[a].size(); b++) {
+                            ids.add(selectedMessagesIds[a].keyAt(b));
+                        }
+                    }
+                    Collections.sort(ids);
+                    Integer begin = ids.get(0);
+                    Integer end = ids.get(ids.size() - 1);
+                    for (int i = 0; i < messages.size(); i++) {
+                        Integer msgId = messages.get(i).getId();
+                        if (msgId > begin && msgId < end && !selectedMessagesIds[0].withTouch.contains(msgId)) {
+                            addToSelectedMessages(messages.get(i), true);
+                            updateActionModeTitle();
+                            updateVisibleRows();
+                        }
+                    }
                 } else if (id == forward) {
                     // IS_ANONYMOUS_FORWARD = id == forward_anonym;
                     openForward();
@@ -1652,6 +1684,7 @@ public boolean forceShowClear() {
 
         if (currentEncryptedChat == null) {
             actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.msg_edit, AndroidUtilities.dp(54), LocaleController.getString("Edit", R.string.Edit)));
+            actionModeViews.add(actionMode.addItemWithWidth(select_between, R.drawable.profile_list, AndroidUtilities.dp(54), LocaleController.getString("Edit", R.string.Edit)));
             actionModeViews.add(actionMode.addItemWithWidth(star, R.drawable.msg_fave, AndroidUtilities.dp(54), LocaleController.getString("AddToFavorites", R.string.AddToFavorites)));
             actionModeViews.add(actionMode.addItemWithWidth(copy, R.drawable.msg_copy, AndroidUtilities.dp(54), LocaleController.getString("Copy", R.string.Copy)));
             if (!replaceForward) {
@@ -1666,6 +1699,7 @@ public boolean forceShowClear() {
             actionModeViews.add(actionMode.addItemWithWidth(copy, R.drawable.msg_copy, AndroidUtilities.dp(54), LocaleController.getString("Copy", R.string.Copy)));
             actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
         }
+        updateMultipleSelection(actionMode);
         actionMode.getItem(edit).setVisibility(canEditMessagesCount == 1 && selectedMessagesIds[0].size() + selectedMessagesIds[1].size() == 1 ? View.VISIBLE : View.GONE);
         actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
         actionMode.getItem(star).setVisibility(selectedMessagesCanStarIds[0].size() + selectedMessagesCanStarIds[1].size() != 0 ? View.VISIBLE : View.GONE);
@@ -8000,6 +8034,33 @@ private void processRowSelect(View view, boolean outside, float touchX, float to
             return;
         }
         addToSelectedMessages(message, outside);
+
+        // For selecting messages between the first and the last.
+        ArrayList<Integer> ids = new ArrayList<>();
+        for (int a = 1; a >= 0; a--) {
+            for (int b = 0; b < selectedMessagesIds[a].size(); b++) {
+                ids.add(selectedMessagesIds[a].keyAt(b));
+            }
+        }
+        Integer msgId = message.getId();
+        if (ids.contains(msgId)) {
+            if (!selectedMessagesIds[0].withTouch.contains(msgId)) {
+                ArrayList<Integer> sortIds = selectedMessagesIds[0].withTouch;
+                Collections.sort(sortIds);
+                // If there's a new extreme value,
+                // we should mark as 'withTouch' all selected messages.
+                if (sortIds.get(0) <= msgId || sortIds.get(sortIds.size() - 1) >= msgId) {
+                    selectedMessagesIds[0].withTouch.clear();
+                    for (Integer id : ids) {
+                        selectedMessagesIds[0].withTouch.add(id);
+                    }
+                } else {
+                    selectedMessagesIds[0].withTouch.add(msgId);
+                }
+            }
+        } else {
+            selectedMessagesIds[0].withTouch.remove(msgId);
+        }
         updateActionModeTitle();
         updateVisibleRows();
     }
@@ -8011,6 +8072,7 @@ private void updateActionModeTitle() {
         if (selectedMessagesIds[0].size() != 0 || selectedMessagesIds[1].size() != 0) {
             selectedMessagesCountTextView.setNumber(selectedMessagesIds[0].size() + selectedMessagesIds[1].size(), true);
         }
+        updateMultipleSelection(actionBar.createActionMode());
     }
 
     private void updateTitle() {
@@ -12913,11 +12975,19 @@ public void onAnimationEnd(Animator animation) {
         animatorSet.start();
 
         addToSelectedMessages(message, listView);
+        selectedMessagesIds[0].withTouch.clear();
+        selectedMessagesIds[0].withTouch.add(message.getId());
+        updateMultipleSelection(actionMode);
 
         selectedMessagesCountTextView.setNumber(selectedMessagesIds[0].size() + selectedMessagesIds[1].size(), false);
         updateVisibleRows();
     }
 
+    private void updateMultipleSelection(ActionBarMenu actionMode) {
+        actionMode.getItem(select_between).setVisibility(
+            selectedMessagesIds[0].withTouch.size() > 1 ? View.VISIBLE : View.GONE);
+    }
+
     private void startEditingMessageObject(MessageObject messageObject) {
         if (messageObject == null || getParentActivity() == null) {
             return;
