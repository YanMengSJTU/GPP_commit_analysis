diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 5221f00de..98ca1478b 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -11,6 +11,7 @@ dependencies {
     compile files('libs/org.eclipse.paho.client.mqttv3-1.0.2.jar')
     compile files('libs/eventbus-2.4.0.jar')
     compile files('libs/android-priority-jobqueue-1.3.1.jar')
+    compile 'com.squareup.okhttp3:okhttp:3.4.1'
 
    compile "com.google.android.gms:play-services-gcm:8.4.0"
    compile "com.google.android.gms:play-services-maps:8.4.0"
@@ -88,7 +89,7 @@ android {
         manifest.srcFile 'config/foss/AndroidManifest.xml'
     }
 
-    productFlavors {
+    /*productFlavors {
         x86 {
             ndk {
                 abiFilter "x86"
@@ -115,7 +116,7 @@ android {
     applicationVariants.all { variant ->
         def abiVersion = variant.productFlavors.get(0).versionCode
         variant.mergedFlavor.versionCode = defaultConfig.versionCode * 10 + abiVersion;
-    }
+    }*/
 
     defaultConfig {
         minSdkVersion 14
@@ -123,9 +124,18 @@ android {
         versionName "3.10.1"
     }
 
+    /*splits {
+        abi {
+            enable true
+            reset()
+            include 'x86', 'armeabi-v7a', 'mips'
+            universalApk true
+        }
+    }
+
     dexOptions {
         javaMaxHeapSize "4g"
-    }
+    }*/
 
 
     packagingOptions {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
index 32a0591ee..f1974340f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
@@ -34,6 +34,7 @@
 import org.eclipse.paho.client.mqttv3.MqttException;
 import org.json.JSONObject;
 import org.telegram.messenger.audioinfo.AudioInfo;
+import org.telegram.messenger.mqtt.Connection;
 import org.telegram.messenger.mqtt.Connections;
 import org.telegram.messenger.query.DraftQuery;
 import org.telegram.messenger.query.SearchQuery;
@@ -1503,7 +1504,7 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                             reqSend.entities = entities;
                             reqSend.flags |= 8;
                         }
-                        performSendMessageRequest(reqSend, newMsgObj, null);
+                        //performSendMessageRequest(reqSend, newMsgObj, null);
                         performSendMessageRequestSalam(newMsgObj,null);
                         if (retryMessageObject == null) {
                             DraftQuery.cleanDraft(peer, false);
@@ -2227,7 +2228,9 @@ public  void performSendMessageRequestSalam(final MessageObject msgObj, final St
             e.printStackTrace();
         }
 
-        MqttAndroidClient client = Connections.getInstance(ApplicationLoader.getInstance().getApplicationContext()).getConnection(clientHandle).getClient();
+         Connection c = Connections.getInstance(ApplicationLoader.getInstance().getApplicationContext()).getConnection(clientHandle);
+        //if (c!=null)
+         MqttAndroidClient client = c.getClient();
 
         try {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java b/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java
index 85ac8800c..ab07a584c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java
@@ -111,7 +111,7 @@
     // constants used to tell the Activity UI the connection status
     public static final String MQTT_STATUS_INTENT = "com.rokhgroup.mqtt.STATUS";
     public static final String MQTT_STATUS_MSG    = "com.rokhgroup.mqtt.STATUS_MSG";
-    String userIdPub="102015";
+    String userIdPub="14";
     // constant used internally to schedule the next ping event
     public static final String MQTT_PING_ACTION = "com.rokhgroup.mqtt.PING";
 
@@ -302,7 +302,7 @@ public void onCreate()
 
         brokerHostName = Constant.MqttTcpHost;
         //reza_ak
-        mqttClientId ="102015";
+        mqttClientId ="14";
                 //SHAMChatApplication.getConfig().getUserId();
         brokerPortNumber = Integer.valueOf(Constant.MqttTcpPort);
 
@@ -1234,7 +1234,7 @@ public void onReceive(Context context, Intent intent)
 
                 if (DEBUG) notifyUser2("ping to server");
                 //reza_ak
-                String userId	= "102015";
+                String userId	= "14";
                         //SHAMChatApplication.getConfig().getUserId();
                 String topic = "events/"+userId;
                 String pingMessage = "ping";
@@ -1632,7 +1632,7 @@ public MqttCallbackHandler(Context context, String clientHandle)
             this.context = context;
             this.clientHandle = clientHandle;
             //reza_ak
-            CURRENT_USER_ID	= "102015";
+            CURRENT_USER_ID	= "14";
                     //SHAMChatApplication.getConfig().getUserId();
         }
 
@@ -2125,7 +2125,7 @@ public boolean addChatMessageToDB(int direction, int messageStatus, int messageC
 
             String groupId = to;
 //reza_ak
-            String threadOwner = "102015";
+            String threadOwner = "14";
                     //SHAMChatApplication.getConfig().getUserId();
 
             //String threadId = threadId;
@@ -2413,7 +2413,7 @@ private void doSubscribe(String clienthandle, String topic) {
             me = UserProvider.userFromCursor(cursor);
             cursor.close();*/
 
-            String clientId = "102015";
+            String clientId = "14";
 
             String[] actionArgs = new String[1];
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentFailedEvent.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentFailedEvent.java
index 19dac888a..0ea244e8a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentFailedEvent.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentFailedEvent.java
@@ -46,7 +46,7 @@ public NewGroupMessageSentFailedEvent(String jsonMessage)
 			//groupOwnerId = SampleMsg.getString("groupOwnerId");					
 			isGroupChat = SampleMsg.getInt("isGroupChat");					
 			//reza_ak
-			String threadOwner = "102015";
+			String threadOwner = "14";
 			threadId = threadOwner + "-" + to; 
 				
 			} catch (JSONException e1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentSuccessEvent.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentSuccessEvent.java
index 413cb7e51..0b6d08b87 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentSuccessEvent.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/NewGroupMessageSentSuccessEvent.java
@@ -50,7 +50,7 @@ public NewGroupMessageSentSuccessEvent(String jsonMessage)
 			//groupOwnerId = SampleMsg.getString("groupOwnerId");					
 			isGroupChat = SampleMsg.getInt("isGroupChat");					
 			//reza_ak
-			String threadOwner = "102015";
+			String threadOwner = "14";
 			threadId = threadOwner + "-" + to; 
 				
 			} catch (JSONException e1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java
index f5b8c8d9a..61f7042e8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java
@@ -105,7 +105,7 @@ public void initClass(String jsonMessageString, String topicName) {
 			//groupOwnerId = SampleMsg.getString("groupOwnerId");
 			isGroupChat = SampleMsg.getInt("isGroupChat");
 
-			String threadOwner = "user102015";
+			String threadOwner = "user14";
 			threadId = threadOwner + "-" + to;
 
 		} catch (JSONException e1) {
@@ -153,7 +153,7 @@ public void onRun() throws Throwable {
 		String clientHandle = null;
 		//reza_ak
 		//Session = new RokhPref(SHAMChatApplication.getInstance().getApplicationContext());
-		clientHandle = "user102015";
+		clientHandle = "user14";
 
 		int qos = 1;
 		boolean retained = false;
@@ -190,6 +190,7 @@ public void onRun() throws Throwable {
 
 			@Override
 			public void onSuccess(IMqttToken arg0) {
+
 			}
 
 			@Override
@@ -270,7 +271,7 @@ public boolean addChatMessageToDB(int direction, int messageStatus, int messageC
 		}
 
 //reza_ak
-		String threadOwner = "102015";
+		String threadOwner = "14";
 
 		//String threadId = threadId;
 		//String groupId = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/RoomRestoreJob.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/RoomRestoreJob.java
index 769b589ef..101d9b067 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/RoomRestoreJob.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/RoomRestoreJob.java
@@ -29,7 +29,7 @@
     private static final AtomicInteger jobCounter = new AtomicInteger(0);
     private final int id;
 //reza_ak
-    final String  userId = "102015";
+    final String  userId = "14";
 
     String[] allTopics;
     int [] qosArray;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/SubscribeToEventsJob.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/SubscribeToEventsJob.java
index 69f785485..2661130f8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/SubscribeToEventsJob.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/SubscribeToEventsJob.java
@@ -67,9 +67,9 @@ public void onRun() throws Throwable {
 		MqttAndroidClient mqttClient;
 		//reza_ak
 		//RokhPref Session = new RokhPref(ApplicationLoader.getInstance().getApplicationContext());
-		final String clientHandle = "user102015";
+		final String clientHandle = "user14";
 		//reza_ak
-		String userId	= "102015";
+		String userId	= "14";
 		//phoneNumber = phoneNumber.startsWith("+") ? phoneNumber.substring(1) : phoneNumber;
 		String topic = "events/"+userId;
 		final Context context = ApplicationLoader.getInstance().getApplicationContext();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 09d07d57a..f797da086 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -34,6 +34,7 @@
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.text.method.PasswordTransformationMethod;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
@@ -48,6 +49,8 @@
 import android.widget.ScrollView;
 import android.widget.TextView;
 
+import org.json.JSONArray;
+import org.json.JSONObject;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ContactsController;
@@ -59,6 +62,8 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.mqtt.MQTTService;
+import org.telegram.messenger.shamChat.Constant;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -73,6 +78,7 @@
 import org.telegram.ui.Components.SlideView;
 
 import java.io.BufferedReader;
+import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -83,6 +89,15 @@
 import java.util.Set;
 import java.util.Timer;
 import java.util.TimerTask;
+import java.util.concurrent.TimeUnit;
+
+import okhttp3.Call;
+import okhttp3.Callback;
+import okhttp3.FormBody;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 
 public class LoginActivity extends BaseFragment {
 
@@ -952,7 +967,105 @@ public void onNextPressed() {
             params.putString("phoneFormated", phone);
             nextPressed = true;
             needShowProgress();
-            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+
+            OkHttpClient client = new OkHttpClient.Builder()
+                    .connectTimeout(240, TimeUnit.SECONDS)
+                    .writeTimeout(240, TimeUnit.SECONDS)
+                    .readTimeout(240, TimeUnit.SECONDS)
+                    .build();
+
+            RequestBody formBody = new FormBody.Builder()
+                    .add("phone", phone)
+                    .build();
+
+            Request request = new Request.Builder()
+                    .url(Constant.RegisterPhoneNumber)
+                    .post(formBody)
+                    .build();
+
+            client.newCall(request).enqueue(new Callback() {
+
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                       @Override
+                        public void run() {
+                            //what to do on error?
+                           needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                           needHideProgress();
+                        }
+                    });
+                    e.printStackTrace();
+                }
+
+                @Override
+                public void onResponse(Call call, Response response){
+                    //response = client.newCall(request).execute();
+
+                    String stringResponse = null;
+
+                    try {
+                        // check if request was successful
+                        if (!response.isSuccessful()) throw new IOException("network");
+
+                        stringResponse = response.body().string();
+                        response.body().close();
+
+                        System.out.println(stringResponse);
+                        JSONObject serverResponseJsonObject = new JSONObject(stringResponse);
+                        // We get the status attribute of the json response
+                        int status = serverResponseJsonObject.getInt("status");
+                        String code = serverResponseJsonObject.getString("code");
+
+                        if (status != 200) throw new IOException("status");
+                        if (code.equals("R109")) throw new IOException("R109");
+
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                    //on success
+                                    TLRPC.TL_auth_sentCode response = new TLRPC.TL_auth_sentCode();
+                                    response.flags = 7;
+                                    response.next_type = new TLRPC.TL_auth_codeTypeCall();
+                                    response.next_type.disableFree = false;
+                                    response.phone_code_hash = "43ae35c041aca0588d";
+                                    response.phone_registered = true;
+                                    response.timeout = 240;
+                                    response.type = new TLRPC.TL_auth_sentCodeTypeSms();
+                                    response.type.length = 4;
+                                    response.type.disableFree = false;
+                                    response.disableFree = false;
+
+                                    fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
+                                     needHideProgress();
+                            }
+                        });
+
+                    } catch (final Exception e) {
+
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                //what to do on error?
+
+                                if (e.getMessage().equals("R109") || e.getMessage().equals("status")) {
+                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("invalid_phone_number", R.string.invalid_phone_number));
+                                } else if (e.getMessage().equals("network")) {
+                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                                }
+                                needHideProgress();
+                            }
+                        });
+
+                        e.printStackTrace();
+                    }
+
+                }
+
+            });
+
+
+/*            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
@@ -980,7 +1093,8 @@ public void run() {
                         }
                     });
                 }
-            }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagTryDifferentDc | ConnectionsManager.RequestFlagEnableUnauthorized);
+            }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagTryDifferentDc | ConnectionsManager.RequestFlagEnableUnauthorized);*/
+
         }
 
         @Override
@@ -1249,6 +1363,8 @@ private void resendCode() {
             TLRPC.TL_auth_resendCode req = new TLRPC.TL_auth_resendCode();
             req.phone_number = requestPhone;
             req.phone_code_hash = phoneHash;
+
+
             ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
@@ -1524,7 +1640,187 @@ public void onNextPressed() {
             req.phone_code_hash = phoneHash;
             destroyTimer();
             needShowProgress();
-            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+
+            OkHttpClient client = new OkHttpClient.Builder()
+                    .connectTimeout(240, TimeUnit.SECONDS)
+                    .writeTimeout(240, TimeUnit.SECONDS)
+                    .readTimeout(240, TimeUnit.SECONDS)
+                    .build();
+
+            RequestBody formBody = new FormBody.Builder()
+                    .add("phone", requestPhone)
+                    .add("code", codeField.getText().toString())
+                    .build();
+
+            Request request = new Request.Builder()
+                    .url(Constant.RegisterPhoneVerify)
+                    .post(formBody)
+                    .build();
+
+            client.newCall(request).enqueue(new Callback() {
+
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            nextPressed = false;
+                            //what to do on error?
+                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                            needHideProgress();
+                        }
+                    });
+                    e.printStackTrace();
+                }
+
+                @Override
+                public void onResponse(Call call, final Response response){
+                    //response = client.newCall(request).execute();
+                    nextPressed = false;
+
+                    String stringResponse = null;
+
+                    try {
+                        // check if request was successful
+                        if (!response.isSuccessful()) throw new IOException("network");
+
+                        stringResponse = response.body().string();
+                        response.body().close();
+
+                        System.out.println(stringResponse);
+                        final JSONObject serverResponseJsonObject = new JSONObject(stringResponse);
+                        // We get the status attribute of the json response
+                        int status = serverResponseJsonObject.getInt("status");
+                        final String code = serverResponseJsonObject.getString("code");
+
+                        if (status != 200) throw new IOException("status");
+                        if (code.equals("R105")) throw new IOException("R105");
+
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+/*
+                                {
+                                    "username": "mj6969",
+                                        "status": 200,
+                                        "token": "3df34f3bf9451f56a414c144b61f9aaf1117e640",
+                                        "code": "R101",
+                                        "user_avatar": "/media/cache2/2b/fa/2bfafaab0c0bc4b1b313574c5fb87a74.jpg",
+                                        "success": true,
+                                        "social_id": 7,
+                                        "id": 14,
+                                        "last_seen": "2016-08-22 14:23:29"
+                                }
+*/
+
+                                //on success
+                                needHideProgress();
+                                //if previously registered user
+                                // we already have username
+                                if   (code.equals("R101")) {
+                                    String token;
+                                    String avatar;
+                                    String userName = null;
+                                    int socialId;
+                                    int jid = 0;
+
+                                    try {
+                                         token = serverResponseJsonObject.getString("code");
+                                         avatar = serverResponseJsonObject.getString("user_avatar");
+                                         socialId = serverResponseJsonObject.getInt("social_id");
+                                        userName = serverResponseJsonObject.getString("username");
+                                         jid = serverResponseJsonObject.getInt("id");
+                                    } catch (Exception e) {}
+
+                                    TLRPC.TL_auth_authorization res = new TLRPC.TL_auth_authorization();
+                                    res.user = new TLRPC.TL_user();
+                                    try {
+                                        res.user.access_hash = 12345678910L;
+                                    } catch (Exception e ) {
+                                        e.printStackTrace();
+                                    }
+                                    res.user.bot = false;
+                                    res.user.bot_chat_history = false;
+                                    res.user.bot_info_version = 0;
+                                    res.user.bot_inline_geo = false;
+                                    res.user.bot_inline_placeholder = null;
+                                    res.user.bot_nochats = false;
+                                    res.user.contact = true;
+                                    res.user.deleted = false;
+                                    res.user.explicit_content = false;
+                                    res.user.first_name = null;
+                                    res.user.flags = 3167;
+                                    res.user.id = jid;
+                                    res.user.inactive = false;
+                                    res.user.last_name = null;
+                                    res.user.min = false;
+                                    res.user.mutual_contact = false;
+                                    res.user.phone = phone;
+                                    res.user.restricted = false;
+                                    res.user.restriction_reason = null;
+                                    res.user.self = true;
+                                    res.user.status = new TLRPC.TL_userStatusOffline();
+                                    res.user.status.disableFree = false;
+                                    res.user.status.expires = 0;
+                                    res.user.username = userName;
+                                    res.user.verified = false;
+                                    res.user.disableFree = false;
+                                    res.disableFree = false;
+
+
+                                    ConnectionsManager.getInstance().setUserId(res.user.id);
+                                    destroyTimer();
+                                    destroyCodeTimer();
+                                    UserConfig.clearConfig();
+                                    MessagesController.getInstance().cleanup();
+                                    UserConfig.setCurrentUser(res.user);
+                                    UserConfig.saveConfig(true);
+                                    MessagesStorage.getInstance().cleanup(true);
+                                    ArrayList<TLRPC.User> users = new ArrayList<>();
+                                    users.add(res.user);
+                                    MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                                    MessagesController.getInstance().putUser(res.user, false);
+                                    ContactsController.getInstance().checkAppAccount();
+                                    MessagesController.getInstance().getBlockedUsers(true);
+
+                                    //mast - start the mqtt background service to handle messaging stuff and stay running
+                                    //mast - mqtt our own background service
+                                    //mast - this is first run after registration
+                                    //mast - for next runs we use "LaunchActivity.java"
+                                    Intent backgroundService = new Intent(ApplicationLoader.getInstance(), MQTTService.class);
+                                    ApplicationLoader.getInstance().startService(backgroundService);
+
+                                    needFinishActivity();
+                                }
+
+                            }
+                        });
+
+                    } catch (final Exception e) {
+
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                //what to do on error?
+                                nextPressed = false;
+
+                                if (e.getMessage().equals("R105") || e.getMessage().equals("status")) {
+                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (e.getMessage().equals("network")) {
+                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                                }
+                                needHideProgress();
+                            }
+                        });
+
+                        e.printStackTrace();
+                    }
+
+                }
+
+            });
+
+ /*           ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
@@ -1548,6 +1844,14 @@ public void run() {
                                 MessagesController.getInstance().putUser(res.user, false);
                                 ContactsController.getInstance().checkAppAccount();
                                 MessagesController.getInstance().getBlockedUsers(true);
+
+                                //mast - start the mqtt background service to handle messaging stuff and stay running
+                                //mast - mqtt our own background service
+                                //mast - this is first run after registration
+                                //mast - for next runs we use "LaunchActivity.java"
+                                Intent backgroundService = new Intent(ApplicationLoader.getInstance(), MQTTService.class);
+                                ApplicationLoader.getInstance().startService(backgroundService);
+
                                 needFinishActivity();
                             } else {
                                 lastError = error.text;
@@ -1623,7 +1927,7 @@ public void run() {
                         }
                     });
                 }
-            }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+            }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);*/
         }
 
         @Override
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 4d73f1239..c341b56b3 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1247,4 +1247,10 @@
     <string name="notifyTitle">MQTT Message Received</string>
     <string name="notifyTitle_connectionLost">MQTT Client Has Lost Connection</string>
 
+    <!-- String for salam -->
+    <string name="network_error">Please connect to internet and try again!</string>
+    <string name="invalid_phone_number">Invalid phone number</string>
+
+
+
 </resources>
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 08f287cfb..9140a43a2 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,3 +17,28 @@ RELEASE_KEY_PASSWORD=password
 RELEASE_KEY_ALIAS=alias
 RELEASE_STORE_PASSWORD=password
 android.useDeprecatedNdk=true
+
+# added by mast
+#
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# The Gradle daemon aims to improve the startup and execution time of Gradle.
+# When set to true the Gradle daemon is to run the build.
+# TODO: disable daemon on CI, since builds should be clean and reliable on servers
+org.gradle.daemon=true
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+org.gradle.parallel=true
+
+# Enables new incubating mode that makes Gradle selective when configuring projects.
+# Only relevant projects are configured which results in faster builds for large multi-projects.
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand
+org.gradle.configureondemand=true
