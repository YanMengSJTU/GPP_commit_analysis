diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 35406ba05..68e5feba0 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -7,8 +7,6 @@ repositories {
     }
 }
 
-
-
 dependencies {
     compile 'com.android.support:support-v4:23.4.0'
     compile "com.google.android.gms:play-services-gcm:8.4.0"
@@ -25,15 +23,7 @@ dependencies {
     compile 'com.google.android.gms:play-services-ads:8.4.0'
     compile 'com.android.support:multidex:1.0.1'
     compile 'com.adcolony:sdk:3.0.5'
-
-
-
-//applovin
-    //compile 'com.fyber.mediation:applovin:6.3.2-r1@aar'
-   // compile(name:'heyzap-unified-platform-10.2.0', ext:'aar')
-    //compile 'com.adcolony:sdk:3.0.5'
-//adcolony
-    //compile 'com.fyber.mediation:adcolony:3.0.4-r1@aar'
+    compile fileTree(dir: 'libs', include: ['*.jar'])
 }
 
 
@@ -41,7 +31,6 @@ android {
     compileSdkVersion 23
     buildToolsVersion '23.0.3'
     useLibrary 'org.apache.http.legacy'
-    defaultConfig.applicationId = "org.telegram.messenger"
 
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_7
@@ -54,35 +43,19 @@ android {
     }
     signingConfigs {
         debug {
-          /*  storeFile file("config/release.keystore")
-            storePassword RELEASE_STORE_PASSWORD
-            keyAlias RELEASE_KEY_ALIAS
-            keyPassword RELEASE_KEY_PASSWORD*/
         }
 
         release {
-     /*       storeFile file("config/release.keystore")
-            storePassword RELEASE_STORE_PASSWORD
-            keyAlias RELEASE_KEY_ALIAS
-            keyPassword RELEASE_KEY_PASSWORD*/
         }
     }
 
     buildTypes {
         debug {
-        /*    debuggable true
-            jniDebuggable true
-            signingConfig signingConfigs.debug
-            applicationIdSuffix ".beta"*/
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
 
         }
 
-        release {/*
-            debuggable false
-            jniDebuggable false
-            signingConfig signingConfigs.release
-            minifyEnabled false*/
+        release {
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
 
@@ -92,9 +65,6 @@ android {
             signingConfig signingConfigs.release
         }
     }
-
- //   defaultConfig.versionCode = 821
-
     sourceSets.main {
         jniLibs.srcDir 'libs'
         jni.srcDirs = [] //disable automatic ndk-build call
diff --git a/TMessagesProj/jni/arm64-v8a/libsinch-android-rtc.so b/TMessagesProj/jni/arm64-v8a/libsinch-android-rtc.so
new file mode 100755
index 000000000..e1a016185
Binary files /dev/null and b/TMessagesProj/jni/arm64-v8a/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/jni/armeabi-v7a/libsinch-android-rtc.so b/TMessagesProj/jni/armeabi-v7a/libsinch-android-rtc.so
new file mode 100755
index 000000000..5cf49d6f7
Binary files /dev/null and b/TMessagesProj/jni/armeabi-v7a/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/jni/sinch-android-rtc-3.9.9.jar.properties b/TMessagesProj/jni/sinch-android-rtc-3.9.9.jar.properties
new file mode 100644
index 000000000..2ba7b48c6
--- /dev/null
+++ b/TMessagesProj/jni/sinch-android-rtc-3.9.9.jar.properties
@@ -0,0 +1 @@
+doc=docs/reference
\ No newline at end of file
diff --git a/TMessagesProj/jni/x86/libsinch-android-rtc.so b/TMessagesProj/jni/x86/libsinch-android-rtc.so
new file mode 100755
index 000000000..2765eacb6
Binary files /dev/null and b/TMessagesProj/jni/x86/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/jni/x86_64/libsinch-android-rtc.so b/TMessagesProj/jni/x86_64/libsinch-android-rtc.so
new file mode 100755
index 000000000..6560ee750
Binary files /dev/null and b/TMessagesProj/jni/x86_64/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/libs/arm64-v8a/libsinch-android-rtc.so b/TMessagesProj/libs/arm64-v8a/libsinch-android-rtc.so
new file mode 100755
index 000000000..27164d65f
Binary files /dev/null and b/TMessagesProj/libs/arm64-v8a/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/libs/armeabi-v7a/libsinch-android-rtc.so b/TMessagesProj/libs/armeabi-v7a/libsinch-android-rtc.so
new file mode 100755
index 000000000..3f1dbd530
Binary files /dev/null and b/TMessagesProj/libs/armeabi-v7a/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/libs/sinch-android-rtc-3.9.9.jar b/TMessagesProj/libs/sinch-android-rtc-3.9.9.jar
new file mode 100644
index 000000000..40e0e2166
Binary files /dev/null and b/TMessagesProj/libs/sinch-android-rtc-3.9.9.jar differ
diff --git a/TMessagesProj/libs/x86/libsinch-android-rtc.so b/TMessagesProj/libs/x86/libsinch-android-rtc.so
new file mode 100755
index 000000000..292c0b3c9
Binary files /dev/null and b/TMessagesProj/libs/x86/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/libs/x86_64/libsinch-android-rtc.so b/TMessagesProj/libs/x86_64/libsinch-android-rtc.so
new file mode 100755
index 000000000..86403754a
Binary files /dev/null and b/TMessagesProj/libs/x86_64/libsinch-android-rtc.so differ
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 8fb0e3a25..8a7f35f43 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -3,7 +3,6 @@
     package="org.telegram.messenger"
     xmlns:tools="http://schemas.android.com/tools"
     android:installLocation="auto">
-
     <uses-sdk android:minSdkVersion="9"
         tools:overrideLibrary="com.paypal.android.sdk.payments"/>
 
@@ -57,6 +56,7 @@
         android:theme="@style/Theme.TMessages.Start"
         android:manageSpaceActivity="org.telegram.ui.ManageSpaceActivity">
 
+        <service android:name="org.telegram.calling.SinchService"></service>
 
         <activity
             android:name="com.google.android.gms.ads.AdActivity"
@@ -127,7 +127,6 @@
             <meta-data android:name="android.service.chooser.chooser_target_service" android:value=".TgChooserTargetService" />
         </activity>
 
-
         <activity android:name="org.telegram.payment.PaymentManager"
             android:label=""></activity>
         <activity android:name="org.telegram.ui.OsmLocation"
@@ -158,7 +157,6 @@
             android:theme="@style/Theme.TMessages.PopupNotification"
             android:windowSoftInputMode="adjustResize|stateHidden">
         </activity>
-
         <receiver
             android:name=".AutoMessageHeardReceiver"
             android:exported="false">
@@ -166,7 +164,6 @@
                 <action android:name="org.telegram.messenger.ACTION_MESSAGE_HEARD"/>
             </intent-filter>
         </receiver>
-
         <receiver
             android:name=".AutoMessageReplyReceiver"
             android:exported="false">
@@ -174,19 +171,16 @@
                 <action android:name="org.telegram.messenger.ACTION_MESSAGE_REPLY"/>
             </intent-filter>
         </receiver>
-
         <receiver android:name=".CallReceiver" >
             <intent-filter>
                 <action android:name="android.intent.action.PHONE_STATE" />
             </intent-filter>
         </receiver>
-
         <receiver android:name=".SmsListener">
             <intent-filter>
                 <action android:name="android.provider.Telephony.SMS_RECEIVED" />
             </intent-filter>
         </receiver>
-
         <service android:name=".AuthenticatorService" android:exported="true">
             <intent-filter>
                 <action android:name="android.accounts.AccountAuthenticator"/>
@@ -194,7 +188,6 @@
             <meta-data android:name="android.accounts.AccountAuthenticator"
                 android:resource="@xml/auth"/>
         </service>
-
         <service android:name=".ContactsSyncAdapterService" android:exported="true">
             <intent-filter>
                 <action android:name="android.content.SyncAdapter" />
@@ -204,7 +197,6 @@
             <meta-data android:name="android.provider.CONTACTS_STRUCTURE"
                 android:resource="@xml/contacts" />
         </service>
-
         <service
             android:name="org.telegram.messenger.TgChooserTargetService"
             android:label="@string/AppName"
@@ -213,7 +205,6 @@
                 <action android:name="android.service.chooser.ChooserTargetService" />
             </intent-filter>
         </service>
-
         <service android:name=".NotificationsService" android:enabled="true"/>
         <service android:name=".NotificationRepeat" android:exported="false"/>
         <service android:name=".ClearCacheService" android:exported="false"/>
@@ -224,7 +215,6 @@
                 <action android:name="android.media.browse.MediaBrowserService"/>
             </intent-filter>
         </service>
-
         <receiver android:name=".MusicPlayerReceiver" >
             <intent-filter>
                 <action android:name="org.telegram.android.musicplayer.close" />
@@ -260,7 +250,6 @@
         <meta-data android:name="com.google.android.gms.car.notification.SmallIcon" android:resource="@drawable/ic_player" />
         <meta-data android:name="com.google.android.gms.car.application" android:resource="@xml/automotive_app_desc" />
 
-
         //////////////////Heyzap setup//////////////
 
         <meta-data android:name="applovin.sdk.key" android:value="dfk5Pw2g-MATQrrpwnty_SmFI6SpbdlEHSKhNMNLiXv7NlxHVoEVF_lT5BLgq4v6XDpwaAFIi9Q5vLMP8avOZd"/><!--JdRV_FOXtZc-mX_BuQGEnE7MrSEsRH_mvQFvgeQXC2WzaV8SwPghdp3TGHJiZJSTliMPMoyTrSVPyest3XZgLc-->"  />
@@ -272,30 +261,16 @@
             android:configChanges="keyboardHidden|orientation|screenSize"/>
 
 
-        <!--  &lt;!&ndash; AdColony &ndash;&gt;
-        <activity android:name="com.jirbo.adcolony.AdColonyOverlay"
-            android:configChanges="keyboardHidden|orientation|screenSize"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
-        <activity android:name="com.jirbo.adcolony.AdColonyFullscreen"
-            android:configChanges="keyboardHidden|orientation|screenSize"
-            android:theme="@android:style/Theme.Black.NoTitleBar.Fullscreen" />
-        <activity android:name="com.jirbo.adcolony.AdColonyBrowser"
-            android:configChanges="keyboardHidden|orientation|screenSize"
-            android:theme="@android:style/Theme.Black.NoTitleBar.Fullscreen" />
-        <activity android:name="com.fyber.mediation.adcolony.rv.VideoProxyActivity" />
-        <activity android:name="com.fyber.mediation.adcolony.interstitial.InterstitialProxyActivity" />
+   //////////////////////////////////////////////////////////////////////////////////////////
+
+
+        <activity android:name="org.telegram.calling.CallScreenActivity" android:screenOrientation="portrait"/>
+        <activity android:name="org.telegram.calling.PlaceCallActivity"
+            android:screenOrientation="portrait"/>
+        <activity android:name="org.telegram.calling.LoginActivity"
+            android:screenOrientation="portrait"/>
+
 
-        &lt;!&ndash; AppLovin &ndash;&gt;
-        <activity android:name="com.applovin.adview.AppLovinInterstitialActivity" />
-        <activity android:name="com.applovin.adview.AppLovinConfirmationActivity" />
-        &lt;!&ndash; Fyber Marketplace &ndash;&gt;
-        <activity android:name="com.heyzap.sdk.ads.HeyzapIncentivizedActivity"  android:theme="@android:style/Theme.Translucent" android:hardwareAccelerated="true" />
-        <activity android:name="com.heyzap.sdk.ads.HeyzapInterstitialActivity"  android:theme="@android:style/Theme.Translucent" />
-        <activity android:name="com.heyzap.sdk.ads.MediationTestActivity" />
-        <activity android:name="com.fyber.ads.ofw.OfferWallUnityActivity" android:configChanges="orientation|screenSize" />
-        <service android:name="com.fyber.cache.CacheVideoDownloadService" android:exported="false" />
-        <meta-data android:name="FYBVideoPlayerOptionCloseButtonDelay" android:value="-1" />
--->
 
     </application>
 
diff --git a/TMessagesProj/src/main/java/org/telegram/calling/AudioPlayer.java b/TMessagesProj/src/main/java/org/telegram/calling/AudioPlayer.java
new file mode 100644
index 000000000..71edf1b7a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/calling/AudioPlayer.java
@@ -0,0 +1,76 @@
+package org.telegram.calling;
+
+import android.content.Context;
+import android.content.res.AssetFileDescriptor;
+import android.media.AudioFormat;
+import android.media.AudioManager;
+import android.media.AudioTrack;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.util.Log;
+
+import org.telegram.messenger.R;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+
+public class AudioPlayer {
+
+    static final String LOG_TAG = AudioPlayer.class.getSimpleName();
+
+    private Context mContext;
+    private AudioTrack mProgressTone;
+
+    private final static int SAMPLE_RATE = 16000;
+
+    public AudioPlayer(Context context) {
+        this.mContext = context.getApplicationContext();
+    }
+
+    public void playProgressTone() {
+        stopProgressTone();
+        try {
+            mProgressTone = createProgressTone(mContext);
+            mProgressTone.play();
+        } catch (Exception e) {
+            Log.e(LOG_TAG, "Could not play progress tone", e);
+        }
+    }
+
+    public void stopProgressTone() {
+        if (mProgressTone != null) {
+            mProgressTone.stop();
+            mProgressTone.release();
+            mProgressTone = null;
+        }
+    }
+
+    private static AudioTrack createProgressTone(Context context) throws IOException {
+        AssetFileDescriptor fd = context.getResources().openRawResourceFd(R.raw.progress_tone);
+        int length = (int) fd.getLength();
+
+        AudioTrack audioTrack = new AudioTrack(AudioManager.STREAM_VOICE_CALL, SAMPLE_RATE,
+                AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT, length, AudioTrack.MODE_STATIC);
+
+        byte[] data = new byte[length];
+        readFileToBytes(fd, data);
+
+        audioTrack.write(data, 0, data.length);
+        audioTrack.setLoopPoints(0, data.length / 2, 30);
+
+        return audioTrack;
+    }
+
+    private static void readFileToBytes(AssetFileDescriptor fd, byte[] data) throws IOException {
+        FileInputStream inputStream = fd.createInputStream();
+
+        int bytesRead = 0;
+        while (bytesRead < data.length) {
+            int res = inputStream.read(data, bytesRead, (data.length - bytesRead));
+            if (res == -1) {
+                break;
+            }
+            bytesRead += res;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/calling/BaseActivity.java b/TMessagesProj/src/main/java/org/telegram/calling/BaseActivity.java
new file mode 100644
index 000000000..f3d55652b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/calling/BaseActivity.java
@@ -0,0 +1,49 @@
+package org.telegram.calling;
+
+import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.content.ServiceConnection;
+import android.os.Bundle;
+import android.os.IBinder;
+
+public abstract class BaseActivity extends Activity implements ServiceConnection {
+
+    private SinchService.SinchServiceInterface mSinchServiceInterface;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        getApplicationContext().bindService(new Intent(this, SinchService.class), this,
+                BIND_AUTO_CREATE);
+    }
+
+    @Override
+    public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
+        if (SinchService.class.getName().equals(componentName.getClassName())) {
+            mSinchServiceInterface = (SinchService.SinchServiceInterface) iBinder;
+            onServiceConnected();
+        }
+    }
+
+    @Override
+    public void onServiceDisconnected(ComponentName componentName) {
+        if (SinchService.class.getName().equals(componentName.getClassName())) {
+            mSinchServiceInterface = null;
+            onServiceDisconnected();
+        }
+    }
+
+    protected void onServiceConnected() {
+        // for subclasses
+    }
+
+    protected void onServiceDisconnected() {
+        // for subclasses
+    }
+
+    protected SinchService.SinchServiceInterface getSinchServiceInterface() {
+        return mSinchServiceInterface;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/calling/CallScreenActivity.java b/TMessagesProj/src/main/java/org/telegram/calling/CallScreenActivity.java
new file mode 100644
index 000000000..8197d40bb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/calling/CallScreenActivity.java
@@ -0,0 +1,162 @@
+package org.telegram.calling;
+
+import com.sinch.android.rtc.PushPair;
+import com.sinch.android.rtc.calling.Call;
+import com.sinch.android.rtc.calling.CallEndCause;
+import com.sinch.android.rtc.calling.CallListener;
+
+import android.media.AudioManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.messenger.R;
+
+import java.util.List;
+import java.util.Locale;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class CallScreenActivity extends BaseActivity {
+
+    static final String TAG = CallScreenActivity.class.getSimpleName();
+
+    private AudioPlayer mAudioPlayer;
+    private Timer mTimer;
+    private UpdateCallDurationTask mDurationTask;
+
+    private String mCallId;
+    private long mCallStart = 0;
+
+    private TextView mCallDuration;
+    private TextView mCallState;
+    private TextView mCallerName;
+
+    private class UpdateCallDurationTask extends TimerTask {
+
+        @Override
+        public void run() {
+            CallScreenActivity.this.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    updateCallDuration();
+                }
+            });
+        }
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.callscreen);
+
+        mAudioPlayer = new AudioPlayer(this);
+        mCallDuration = (TextView) findViewById(R.id.callDuration);
+        mCallerName = (TextView) findViewById(R.id.remoteUser);
+        mCallState = (TextView) findViewById(R.id.callState);
+        Button endCallButton = (Button) findViewById(R.id.hangupButton);
+
+        endCallButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                endCall();
+            }
+        });
+        mCallStart = System.currentTimeMillis();
+        mCallId = getIntent().getStringExtra(SinchService.CALL_ID);
+    }
+
+    @Override
+    public void onServiceConnected() {
+        Call call = getSinchServiceInterface().getCall(mCallId);
+        if (call != null) {
+            call.addCallListener(new SinchCallListener());
+            mCallerName.setText(call.getRemoteUserId());
+            mCallState.setText(call.getState().toString());
+        } else {
+            Log.e(TAG, "Started with invalid callId, aborting.");
+            finish();
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mDurationTask.cancel();
+        mTimer.cancel();
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mTimer = new Timer();
+        mDurationTask = new UpdateCallDurationTask();
+        mTimer.schedule(mDurationTask, 0, 500);
+    }
+
+    @Override
+    public void onBackPressed() {
+        // User should exit activity by ending call, not by going back.
+    }
+
+    private void endCall() {
+        mAudioPlayer.stopProgressTone();
+        Call call = getSinchServiceInterface().getCall(mCallId);
+        if (call != null) {
+            call.hangup();
+        }
+        finish();
+    }
+
+    private String formatTimespan(long timespan) {
+        long totalSeconds = timespan / 1000;
+        long minutes = totalSeconds / 60;
+        long seconds = totalSeconds % 60;
+        return String.format(Locale.US, "%02d:%02d", minutes, seconds);
+    }
+
+    private void updateCallDuration() {
+        if (mCallStart > 0) {
+            mCallDuration.setText(formatTimespan(System.currentTimeMillis() - mCallStart));
+        }
+    }
+
+    private class SinchCallListener implements CallListener {
+
+        @Override
+        public void onCallEnded(Call call) {
+            CallEndCause cause = call.getDetails().getEndCause();
+            Log.d(TAG, "Call ended. Reason: " + cause.toString());
+            mAudioPlayer.stopProgressTone();
+            setVolumeControlStream(AudioManager.USE_DEFAULT_STREAM_TYPE);
+            String endMsg = "Call ended: " + call.getDetails().toString();
+            Toast.makeText(CallScreenActivity.this, endMsg, Toast.LENGTH_LONG).show();
+            endCall();
+        }
+
+        @Override
+        public void onCallEstablished(Call call) {
+            Log.d(TAG, "Call established");
+            mAudioPlayer.stopProgressTone();
+            mCallState.setText(call.getState().toString());
+            setVolumeControlStream(AudioManager.STREAM_VOICE_CALL);
+            mCallStart = System.currentTimeMillis();
+        }
+
+        @Override
+        public void onCallProgressing(Call call) {
+            Log.d(TAG, "Call progressing");
+            mAudioPlayer.playProgressTone();
+        }
+
+        @Override
+        public void onShouldSendPushNotification(Call call, List<PushPair> pushPairs) {
+            // Send a push through your push provider here, e.g. GCM
+        }
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/calling/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/calling/LoginActivity.java
new file mode 100644
index 000000000..05b869aca
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/calling/LoginActivity.java
@@ -0,0 +1,98 @@
+package org.telegram.calling;
+
+import com.sinch.android.rtc.SinchError;
+
+import android.app.ProgressDialog;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import org.telegram.messenger.R;
+
+public class LoginActivity extends BaseActivity /*implements SinchService.StartFailedListener*/ {
+/*
+
+    private Button mLoginButton;
+    private EditText mLoginName;
+    private ProgressDialog mSpinner;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.login);
+
+        mLoginName = (EditText) findViewById(R.id.loginName);
+
+        mLoginButton = (Button) findViewById(R.id.loginButton);
+        mLoginButton.setEnabled(false);
+        mLoginButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                loginClicked();
+            }
+        });
+    }
+
+    @Override
+    protected void onServiceConnected() {
+        mLoginButton.setEnabled(true);
+        getSinchServiceInterface().setStartListener(this);
+    }
+
+    @Override
+    protected void onPause() {
+        if (mSpinner != null) {
+            mSpinner.dismiss();
+        }
+        super.onPause();
+    }
+
+
+    @Override
+    public void onStartFailed(SinchError error) {
+        Toast.makeText(this, error.toString(), Toast.LENGTH_LONG).show();
+        if (mSpinner != null) {
+            mSpinner.dismiss();
+        }
+    }
+
+
+
+    @Override
+    public void onStarted() {
+        openPlaceCallActivity();
+    }
+
+    private void loginClicked() {
+        String userName = mLoginName.getText().toString();
+
+        if (userName.isEmpty()) {
+            Toast.makeText(this, "Please enter a name", Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        if (!getSinchServiceInterface().isStarted()) {
+            getSinchServiceInterface().startClient(userName);
+            showSpinner();
+        } else {
+            openPlaceCallActivity();
+        }
+    }
+
+    private void openPlaceCallActivity() {
+        Intent mainActivity = new Intent(this, PlaceCallActivity.class);
+        startActivity(mainActivity);
+    }
+
+    private void showSpinner() {
+        mSpinner = new ProgressDialog(this);
+        mSpinner.setTitle("Logging in");
+        mSpinner.setMessage("Please wait...");
+        mSpinner.show();
+    }
+*/
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/calling/PlaceCallActivity.java b/TMessagesProj/src/main/java/org/telegram/calling/PlaceCallActivity.java
new file mode 100644
index 000000000..d4330af52
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/calling/PlaceCallActivity.java
@@ -0,0 +1,141 @@
+package org.telegram.calling;
+
+import com.sinch.android.rtc.SinchError;
+import com.sinch.android.rtc.calling.Call;
+
+import android.app.ProgressDialog;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.messenger.R;
+
+public class PlaceCallActivity extends BaseActivity implements SinchService.StartFailedListener{
+
+    private Button mCallButton;
+    private EditText mCallName;
+    private Button mLoginButton;
+    private EditText mLoginName;
+    private ProgressDialog mSpinner;
+ //   private Button logIn;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.main);
+        mCallName = (EditText) findViewById(R.id.callName);
+        mCallButton = (Button) findViewById(R.id.callButton);
+        mCallButton.setEnabled(false);
+        mCallButton.setOnClickListener(buttonClickListener);
+
+        if(getIntent().getExtras()!=null){
+            mCallName.setText(getIntent().getStringExtra("mob"));
+        }
+
+      }
+
+    @Override
+    protected void onServiceConnected() {
+
+         // logIn.setVisibility(View.GONE);
+         getSinchServiceInterface().setStartListener(this);
+         TextView userName = (TextView) findViewById(R.id.loggedInName);
+         userName.setText(getSinchServiceInterface().getUserName());
+         mCallButton.setEnabled(true);
+    }
+
+// TO Do if you want to stop the service then enable this
+    private void stopButtonClicked() {
+        if (getSinchServiceInterface() != null) {
+            getSinchServiceInterface().stopClient();
+        }
+        finish();
+    }
+
+
+    private void callButtonClicked() {
+        loginClicked();
+
+        String phoneNumber = mCallName.getText().toString();
+        if (phoneNumber.isEmpty()) {
+            Toast.makeText(this, "Please enter a number to call", Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        Call call = getSinchServiceInterface().callPhoneNumber(phoneNumber);
+        String callId = call.getCallId();
+
+        Intent callScreen = new Intent(this, CallScreenActivity.class);
+        callScreen.putExtra(SinchService.CALL_ID, callId);
+        startActivity(callScreen);
+    }
+
+
+    private void loginClicked() {
+        String userName = "Ashish Srivastava";
+      try {
+    if (!getSinchServiceInterface().isStarted()) {
+        getSinchServiceInterface().startClient(userName);
+        showSpinner();
+    }
+    }     catch (Exception e){
+
+     }
+    }
+
+    private void showSpinner() {
+        mSpinner = new ProgressDialog(this);
+        mSpinner.setTitle("Logging in");
+        mSpinner.setMessage("Please wait...");
+        mSpinner.show();
+    }
+
+    private OnClickListener buttonClickListener = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            switch (v.getId()) {
+                case R.id.callButton:
+                    callButtonClicked();
+                    break;
+
+               /* case R.id.stopButton:
+                    stopButtonClicked();
+                    break;*/
+
+            }
+        }
+    };
+    @Override
+    public void onStartFailed(SinchError error) {
+        Toast.makeText(this, error.toString(), Toast.LENGTH_LONG).show();
+        if (mSpinner != null) {
+            mSpinner.dismiss();
+        }
+    }
+
+    @Override
+    public void onStarted() {
+       // findViewById(R.id.ll_caller).setVisibility(View.VISIBLE);
+     //   logIn.setVisibility(View.GONE);
+        if (mSpinner != null) {
+            mSpinner.dismiss();
+        }
+
+
+    }
+
+
+
+    @Override
+    protected void onServiceDisconnected() {
+        super.onServiceDisconnected();
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/calling/SinchService.java b/TMessagesProj/src/main/java/org/telegram/calling/SinchService.java
new file mode 100644
index 000000000..aec8abc0c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/calling/SinchService.java
@@ -0,0 +1,167 @@
+package org.telegram.calling;
+
+import com.sinch.android.rtc.ClientRegistration;
+import com.sinch.android.rtc.Sinch;
+import com.sinch.android.rtc.SinchClient;
+import com.sinch.android.rtc.SinchClientListener;
+import com.sinch.android.rtc.SinchError;
+import com.sinch.android.rtc.calling.Call;
+import com.sinch.android.rtc.calling.CallClient;
+import com.sinch.android.rtc.calling.CallClientListener;
+
+import android.app.Service;
+import android.content.Intent;
+import android.os.Binder;
+import android.os.IBinder;
+import android.util.Log;
+
+public class SinchService extends Service {
+
+    private static final String APP_KEY ="6e7e639a-4154-4d8a-9154-bafc474a77dc";
+    private static final String APP_SECRET = "thrYVCppvE+gLtySZnlIyg==";
+    private static final String ENVIRONMENT = "sandbox.sinch.com";
+    public static final String CALL_ID = "CALL_ID";
+    static final String TAG = SinchService.class.getSimpleName();
+    private SinchServiceInterface mSinchServiceInterface = new SinchServiceInterface();
+    private SinchClient mSinchClient;
+    private String mUserId;
+
+    private StartFailedListener mListener;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+    }
+
+    @Override
+    public void onDestroy() {
+        if (mSinchClient != null && mSinchClient.isStarted()) {
+            mSinchClient.terminate();
+        }
+      super.onDestroy();
+    }
+
+    private  void start(String userName) {
+        if (mSinchClient == null) {
+            mUserId = userName;
+            mSinchClient = Sinch.getSinchClientBuilder().context(getApplicationContext()).userId(userName)
+                    .applicationKey(APP_KEY)
+                    .applicationSecret(APP_SECRET)
+                    .environmentHost(ENVIRONMENT).build();
+
+            mSinchClient.setSupportCalling(true);
+
+            mSinchClient.addSinchClientListener(new MySinchClientListener());
+            mSinchClient.start();
+        }
+    }
+
+    private void stop() {
+        if (mSinchClient != null) {
+            mSinchClient.terminate();
+            mSinchClient = null;
+        }
+    }
+    private boolean isStarted() {
+        return (mSinchClient != null && mSinchClient.isStarted());
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return mSinchServiceInterface;
+    }
+
+    public class SinchServiceInterface extends Binder {
+
+        public Call callPhoneNumber(String phoneNumber) {
+            return mSinchClient.getCallClient().callPhoneNumber(phoneNumber);
+        }
+
+        public Call callUser(String userId) {
+            return mSinchClient.getCallClient().callUser(userId);
+        }
+
+        public String getUserName() {
+            return mUserId;
+        }
+
+        public boolean isStarted() {
+            return SinchService.this.isStarted();
+        }
+
+        public void startClient(String userName) {
+            start(userName);
+        }
+
+        public void stopClient() {
+            stop();
+        }
+
+        public void setStartListener(StartFailedListener listener) {
+            mListener = listener;
+        }
+
+        public Call getCall(String callId) {
+            return mSinchClient.getCallClient().getCall(callId);
+        }
+    }
+
+    public interface StartFailedListener {
+
+        void onStartFailed(SinchError error);
+
+        void onStarted();
+    }
+
+    private class MySinchClientListener implements SinchClientListener {
+
+        @Override
+        public void onClientFailed(SinchClient client, SinchError error) {
+            if (mListener != null) {
+                mListener.onStartFailed(error);
+            }
+            mSinchClient.terminate();
+            mSinchClient = null;
+        }
+
+        @Override
+        public void onClientStarted(SinchClient client) {
+            Log.d(TAG, "SinchClient started");
+            if (mListener != null) {
+                mListener.onStarted();
+            }
+        }
+
+        @Override
+        public void onClientStopped(SinchClient client) {
+            Log.d(TAG, "SinchClient stopped");
+        }
+
+        @Override
+        public void onLogMessage(int level, String area, String message) {
+            switch (level) {
+                case Log.DEBUG:
+                    Log.d(area, message);
+                    break;
+                case Log.ERROR:
+                    Log.e(area, message);
+                    break;
+                case Log.INFO:
+                    Log.i(area, message);
+                    break;
+                case Log.VERBOSE:
+                    Log.v(area, message);
+                    break;
+                case Log.WARN:
+                    Log.w(area, message);
+                    break;
+            }
+        }
+
+        @Override
+        public void onRegistrationCredentialsRequired(SinchClient client,
+                ClientRegistration clientRegistration) {
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 846650147..990bbb5c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -13,9 +13,11 @@
 import android.app.Application;
 import android.app.PendingIntent;
 import android.content.BroadcastReceiver;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.content.ServiceConnection;
 import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -24,6 +26,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Handler;
+import android.os.IBinder;
 import android.os.PowerManager;
 import android.support.multidex.MultiDex;
 import android.util.Base64;
@@ -31,6 +34,7 @@
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GooglePlayServicesUtil;
 
+import org.telegram.calling.SinchService;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.SerializedData;
 import org.telegram.tgnet.TLRPC;
@@ -66,6 +70,7 @@
     public static volatile boolean isScreenOn = false;
     public static volatile boolean mainInterfacePaused = true;
 
+
     public static boolean isCustomTheme() {
         return isCustomTheme;
     }
@@ -321,9 +326,6 @@ public static void postInitApplication() {
     @Override
     public void onCreate() {
         super.onCreate();
-
-    //    ACRA.init(this);
-
         applicationContext = getApplicationContext();
         NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
 
@@ -338,6 +340,7 @@ public void onCreate() {
         applicationHandler = new Handler(applicationContext.getMainLooper());
 
         startPushService();
+        startSinchService();
     }
 
 
@@ -360,41 +363,9 @@ public void trackScreenView(String screenName) {
 
 
     public void trackEvent(String category, String action, String label) {
- /*       Tracker t = getGoogleAnalyticsTracker();
-        // Build and send an Event.
-        t.send(new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build());*/
-
-
-/*
-
-        Tracker tracker = GoogleAnalytics.getInstance(mContext).newTracker(R.xml.app_tracker);
-
-// Build and send an Event.
-        tracker.send(new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build());*/
     }
 
 
-
-    /*public static void sendRegIdToBackend(final String token) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                UserConfig.pushString = token;
-                UserConfig.registeredForPush = false;
-                UserConfig.saveConfig(false);
-                if (UserConfig.getClientUserId() != 0) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            MessagesController.getInstance().registerForPush(token);
-                        }
-                    });
-                }
-            }
-        });
-    }*/
-
-
     public static void startPushService() {
         SharedPreferences preferences = applicationContext.getSharedPreferences("Notifications", MODE_PRIVATE);
 
@@ -435,13 +406,6 @@ public void run() {
                         FileLog.d("tmessages", "GCM Registration not found.");
                     }
 
-                    //if (UserConfig.pushString == null || UserConfig
-                    // .pushString.length() == 0) {
-                    Intent intent = new Intent(applicationContext, GcmRegistrationIntentService.class);
-                    startService(intent);
-                    //} else {
-                    //    FileLog.d("tmessages", "GCM regId = " + UserConfig.pushString);
-                    //}
                 } else {
                     FileLog.d("tmessages", "No valid Google Play Services APK found.");
                 }
@@ -449,32 +413,6 @@ public void run() {
         }, 1000);
     }
 
-    /*private void initPlayServices() {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (checkPlayServices()) {
-                    if (UserConfig.pushString != null && UserConfig.pushString.length() != 0) {
-                        FileLog.d("tmessages", "GCM regId = " + UserConfig.pushString);
-                    } else {
-                        FileLog.d("tmessages", "GCM Registration not found.");
-                    }
-                    try {
-                        if (!FirebaseApp.getApps(ApplicationLoader.applicationContext).isEmpty()) {
-                            String token = FirebaseInstanceId.getInstance().getToken();
-                            if (token != null) {
-                                sendRegIdToBackend(token);
-                            }
-                        }
-                    } catch (Throwable e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else {
-                    FileLog.d("tmessages", "No valid Google Play Services APK found.");
-                }
-            }
-        }, 2000);
-    }*/
 
     private boolean checkPlayServices() {
         try {
@@ -485,14 +423,14 @@ private boolean checkPlayServices() {
         }
         return true;
 
-        /*if (resultCode != ConnectionResult.SUCCESS) {
-            if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
-                GooglePlayServicesUtil.getErrorDialog(resultCode, this, PLAY_SERVICES_RESOLUTION_REQUEST).show();
-            } else {
-                Log.i("tmessages", "This device is not supported.");
-            }
-            return false;
-        }
-        return true;*/
     }
+
+    //**************************sinch Service********************************//
+
+
+    public void startSinchService(){
+  //    applicationContext.startService(new Intent(applicationContext, SinchService.class));
+    }
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index e4a8f9405..cf7815e97 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -26,4 +26,5 @@
     public static int APP_ID =10661; //obtaion your own APP_ID at https://core.telegram.org/api/obtaining_api_id
     public static String APP_HASH ="ccc55b3bfab7976cd5aee1190a8506ee"; //obtaion your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
 
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
index fe2b2e137..a915de749 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
@@ -928,11 +928,11 @@ public boolean trackFree(long size) {
         public VMRuntimeHack() {
             try {
                 Class cl = Class.forName("dalvik.system.VMRuntime");
-                Method getRt = cl.getMethod("getRuntime", new Class[0]);
+                Method getRt = cl.getMethod("getRuntime");
                 Object[] objects = new Object[0];
                 runtime = getRt.invoke(null, objects);
-                trackAllocation = cl.getMethod("trackExternalAllocation", new Class[]{long.class});
-                trackFree = cl.getMethod("trackExternalFree", new Class[]{long.class});
+                trackAllocation = cl.getMethod("trackExternalAllocation", long.class);
+                trackFree = cl.getMethod("trackExternalFree", long.class);
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
                 runtime = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/audioinfo/mp3/MP3Frame.java b/TMessagesProj/src/main/java/org/telegram/messenger/audioinfo/mp3/MP3Frame.java
index 6d30612a6..b3899bd3c 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/audioinfo/mp3/MP3Frame.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/audioinfo/mp3/MP3Frame.java
@@ -279,10 +279,7 @@ boolean isXingFrame() {
 		if (bytes[xingOffset] == 'X' && bytes[xingOffset + 1] == 'i' && bytes[xingOffset + 2] == 'n' && bytes[xingOffset + 3] == 'g') {
 			return true;
 		}
-		if (bytes[xingOffset] == 'I' && bytes[xingOffset + 1] == 'n' && bytes[xingOffset + 2] == 'f' && bytes[xingOffset + 3] == 'o') {
-			return true;
-		}
-		return false;
+		return bytes[xingOffset] == 'I' && bytes[xingOffset + 1] == 'n' && bytes[xingOffset + 2] == 'f' && bytes[xingOffset + 3] == 'o';
 	}
 
 	boolean isVBRIFrame() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/ExoPlayer.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/ExoPlayer.java
index d9887f3fe..3962748c6 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/ExoPlayer.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/ExoPlayer.java
@@ -95,7 +95,7 @@
   /**
    * A factory for instantiating ExoPlayer instances.
    */
-  public static final class Factory {
+  final class Factory {
 
     /**
      * The default minimum duration of data that must be buffered for playback to start or resume
@@ -146,7 +146,7 @@ public static ExoPlayer newInstance(int rendererCount) {
   /**
    * Interface definition for a callback to be notified of changes in player state.
    */
-  public interface Listener {
+  interface Listener {
     /**
      * Invoked when the value returned from either {@link ExoPlayer#getPlayWhenReady()} or
      * {@link ExoPlayer#getPlaybackState()} changes.
@@ -183,7 +183,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * Messages can be delivered to a component via {@link ExoPlayer#sendMessage} and
    * {@link ExoPlayer#blockingSendMessage}.
    */
-  public interface ExoPlayerComponent {
+  interface ExoPlayerComponent {
 
     /**
      * Handles a message delivered to the component. Invoked on the playback thread.
@@ -199,49 +199,49 @@ public static ExoPlayer newInstance(int rendererCount) {
   /**
    * The player is neither prepared or being prepared.
    */
-  public static final int STATE_IDLE = 1;
+  int STATE_IDLE = 1;
   /**
    * The player is being prepared.
    */
-  public static final int STATE_PREPARING = 2;
+  int STATE_PREPARING = 2;
   /**
    * The player is prepared but not able to immediately play from the current position. The cause
    * is {@link TrackRenderer} specific, but this state typically occurs when more data needs
    * to be buffered for playback to start.
    */
-  public static final int STATE_BUFFERING = 3;
+  int STATE_BUFFERING = 3;
   /**
    * The player is prepared and able to immediately play from the current position. The player will
    * be playing if {@link #getPlayWhenReady()} returns true, and paused otherwise.
    */
-  public static final int STATE_READY = 4;
+  int STATE_READY = 4;
   /**
    * The player has finished playing the media.
    */
-  public static final int STATE_ENDED = 5;
+  int STATE_ENDED = 5;
 
   /**
    * A value that can be passed as the second argument to {@link #setSelectedTrack(int, int)} to
    * disable the renderer.
    */
-  public static final int TRACK_DISABLED = -1;
+  int TRACK_DISABLED = -1;
   /**
    * A value that can be passed as the second argument to {@link #setSelectedTrack(int, int)} to
    * select the default track.
    */
-  public static final int TRACK_DEFAULT = 0;
+  int TRACK_DEFAULT = 0;
 
   /**
    * Represents an unknown time or duration.
    */
-  public static final long UNKNOWN_TIME = -1;
+  long UNKNOWN_TIME = -1;
 
   /**
    * Gets the {@link Looper} associated with the playback thread.
    *
    * @return The {@link Looper} associated with the playback thread.
    */
-  public Looper getPlaybackLooper();
+  Looper getPlaybackLooper();
 
   /**
    * Register a listener to receive events from the player. The listener's methods will be invoked
@@ -249,21 +249,21 @@ public static ExoPlayer newInstance(int rendererCount) {
    *
    * @param listener The listener to register.
    */
-  public void addListener(Listener listener);
+  void addListener(Listener listener);
 
   /**
    * Unregister a listener. The listener will no longer receive events from the player.
    *
    * @param listener The listener to unregister.
    */
-  public void removeListener(Listener listener);
+  void removeListener(Listener listener);
 
   /**
    * Returns the current state of the player.
    *
    * @return One of the {@code STATE} constants defined in this interface.
    */
-  public int getPlaybackState();
+  int getPlaybackState();
 
   /**
    * Prepares the player for playback.
@@ -271,7 +271,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @param renderers The {@link TrackRenderer}s to use. The number of renderers must match the
    *     value that was passed to the {@link ExoPlayer.Factory#newInstance} method.
    */
-  public void prepare(TrackRenderer... renderers);
+  void prepare(TrackRenderer... renderers);
 
   /**
    * Returns the number of tracks exposed by the specified renderer.
@@ -279,7 +279,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @param rendererIndex The index of the renderer.
    * @return The number of tracks.
    */
-  public int getTrackCount(int rendererIndex);
+  int getTrackCount(int rendererIndex);
 
   /**
    * Returns the format of a track.
@@ -288,7 +288,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @param trackIndex The index of the track.
    * @return The format of the track.
    */
-  public MediaFormat getTrackFormat(int rendererIndex, int trackIndex);
+  MediaFormat getTrackFormat(int rendererIndex, int trackIndex);
 
   /**
    * Selects a track for the specified renderer.
@@ -297,7 +297,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @param trackIndex The index of the track. A negative value or a value greater than or equal to
    *     the renderer's track count will disable the renderer.
    */
-  public void setSelectedTrack(int rendererIndex, int trackIndex);
+  void setSelectedTrack(int rendererIndex, int trackIndex);
 
   /**
    * Returns the index of the currently selected track for the specified renderer.
@@ -306,7 +306,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @return The selected track. A negative value or a value greater than or equal to the renderer's
    *     track count indicates that the renderer is disabled.
    */
-  public int getSelectedTrack(int rendererIndex);
+  int getSelectedTrack(int rendererIndex);
 
   /**
    * Sets whether playback should proceed when {@link #getPlaybackState()} == {@link #STATE_READY}.
@@ -315,14 +315,14 @@ public static ExoPlayer newInstance(int rendererCount) {
    *
    * @param playWhenReady Whether playback should proceed when ready.
    */
-  public void setPlayWhenReady(boolean playWhenReady);
+  void setPlayWhenReady(boolean playWhenReady);
 
   /**
    * Whether playback will proceed when {@link #getPlaybackState()} == {@link #STATE_READY}.
    *
    * @return Whether playback will proceed when ready.
    */
-  public boolean getPlayWhenReady();
+  boolean getPlayWhenReady();
 
   /**
    * Whether the current value of {@link ExoPlayer#getPlayWhenReady()} has been reflected by the
@@ -330,14 +330,14 @@ public static ExoPlayer newInstance(int rendererCount) {
    *
    * @return True if the current value has been reflected. False otherwise.
    */
-  public boolean isPlayWhenReadyCommitted();
+  boolean isPlayWhenReadyCommitted();
 
   /**
    * Seeks to a position specified in milliseconds.
    *
    * @param positionMs The seek position.
    */
-  public void seekTo(long positionMs);
+  void seekTo(long positionMs);
 
   /**
    * Stops playback. Use {@code setPlayWhenReady(false)} rather than this method if the intention
@@ -351,14 +351,14 @@ public static ExoPlayer newInstance(int rendererCount) {
    * to play another video from its start, then {@code seekTo(0)} should be called after stopping
    * the player and before preparing it for the next video.
    */
-  public void stop();
+  void stop();
 
   /**
    * Releases the player. This method must be called when the player is no longer required.
    * <p>
    * The player must not be used after calling this method.
    */
-  public void release();
+  void release();
 
   /**
    * Sends a message to a specified component. The message is delivered to the component on the
@@ -369,7 +369,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @param messageType An integer that can be used to identify the type of the message.
    * @param message The message object.
    */
-  public void sendMessage(ExoPlayerComponent target, int messageType, Object message);
+  void sendMessage(ExoPlayerComponent target, int messageType, Object message);
 
   /**
    * Blocking variant of {@link #sendMessage(ExoPlayerComponent, int, Object)} that does not return
@@ -379,7 +379,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @param messageType An integer that can be used to identify the type of the message.
    * @param message The message object.
    */
-  public void blockingSendMessage(ExoPlayerComponent target, int messageType, Object message);
+  void blockingSendMessage(ExoPlayerComponent target, int messageType, Object message);
 
   /**
    * Gets the duration of the track in milliseconds.
@@ -387,14 +387,14 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @return The duration of the track in milliseconds, or {@link ExoPlayer#UNKNOWN_TIME} if the
    *     duration is not known.
    */
-  public long getDuration();
+  long getDuration();
 
   /**
    * Gets the current playback position in milliseconds.
    *
    * @return The current playback position in milliseconds.
    */
-  public long getCurrentPosition();
+  long getCurrentPosition();
 
   /**
    * Gets an estimate of the absolute position in milliseconds up to which data is buffered.
@@ -402,7 +402,7 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @return An estimate of the absolute position in milliseconds up to which data is buffered,
    *     or {@link ExoPlayer#UNKNOWN_TIME} if no estimate is available.
    */
-  public long getBufferedPosition();
+  long getBufferedPosition();
 
   /**
    * Gets an estimate of the percentage into the media up to which data is buffered.
@@ -410,6 +410,6 @@ public static ExoPlayer newInstance(int rendererCount) {
    * @return An estimate of the percentage into the media up to which data is buffered. 0 if the
    *     duration of the media is not known or if no estimate is available.
    */
-  public int getBufferedPercentage();
+  int getBufferedPercentage();
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecTrackRenderer.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecTrackRenderer.java
index 05d995d6e..47d6b75d2 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecTrackRenderer.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecTrackRenderer.java
@@ -738,11 +738,8 @@ private boolean shouldWaitForKeys(boolean sampleEncrypted) throws ExoPlaybackExc
     if (drmManagerState == DrmSessionManager.STATE_ERROR) {
       throw new ExoPlaybackException(drmSessionManager.getError());
     }
-    if (drmManagerState != DrmSessionManager.STATE_OPENED_WITH_KEYS &&
-        (sampleEncrypted || !playClearSamplesWithoutKeys)) {
-      return true;
-    }
-    return false;
+    return drmManagerState != DrmSessionManager.STATE_OPENED_WITH_KEYS &&
+            (sampleEncrypted || !playClearSamplesWithoutKeys);
   }
 
   /**
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecUtil.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecUtil.java
index e7de3a090..23cba249b 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecUtil.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/MediaCodecUtil.java
@@ -242,13 +242,10 @@ private static boolean isCodecUsableDecoder(MediaCodecInfo info, String name,
 
     // Work around an issue where the VP8 decoder on Samsung Galaxy S3/S4 Mini does not render
     // video.
-    if (Util.SDK_INT <= 19 && Util.DEVICE != null
-        && (Util.DEVICE.startsWith("d2") || Util.DEVICE.startsWith("serrano"))
-        && "samsung".equals(Util.MANUFACTURER) && name.equals("OMX.SEC.vp8.dec")) {
-      return false;
-    }
+    return !(Util.SDK_INT <= 19 && Util.DEVICE != null
+            && (Util.DEVICE.startsWith("d2") || Util.DEVICE.startsWith("serrano"))
+            && "samsung".equals(Util.MANUFACTURER) && name.equals("OMX.SEC.vp8.dec"));
 
-    return true;
   }
 
   /**
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/SampleSource.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/SampleSource.java
index 255820c49..bb560f2aa 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/SampleSource.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/SampleSource.java
@@ -29,26 +29,26 @@
   /**
    * The end of stream has been reached.
    */
-  public static final int END_OF_STREAM = -1;
+  int END_OF_STREAM = -1;
   /**
    * Neither a sample nor a format was read in full. This may be because insufficient data is
    * buffered upstream. If multiple tracks are enabled, this return value may indicate that the
    * next piece of data to be returned from the {@link SampleSource} corresponds to a different
    * track than the one for which data was requested.
    */
-  public static final int NOTHING_READ = -2;
+  int NOTHING_READ = -2;
   /**
    * A sample was read.
    */
-  public static final int SAMPLE_READ = -3;
+  int SAMPLE_READ = -3;
   /**
    * A format was read.
    */
-  public static final int FORMAT_READ = -4;
+  int FORMAT_READ = -4;
   /**
    * Returned from {@link SampleSourceReader#readDiscontinuity(int)} to indicate no discontinuity.
    */
-  public static final long NO_DISCONTINUITY = Long.MIN_VALUE;
+  long NO_DISCONTINUITY = Long.MIN_VALUE;
 
   /**
    * A consumer of samples should call this method to register themselves and gain access to the
@@ -59,12 +59,12 @@
    *
    * @return A {@link SampleSourceReader} that provides access to the source.
    */
-  public SampleSourceReader register();
+  SampleSourceReader register();
 
   /**
    * An interface providing read access to a {@link SampleSource}.
    */
-  public interface SampleSourceReader {
+  interface SampleSourceReader {
 
     /**
      * If the source is currently having difficulty preparing or loading samples, then this method
@@ -72,7 +72,7 @@
      *
      * @throws IOException The underlying error.
      */
-    public void maybeThrowError() throws IOException;
+    void maybeThrowError() throws IOException;
 
     /**
      * Prepares the source.
@@ -85,7 +85,7 @@
      * @param positionUs The player's current playback position.
      * @return True if the source was prepared, false otherwise.
      */
-    public boolean prepare(long positionUs);
+    boolean prepare(long positionUs);
 
     /**
      * Returns the number of tracks exposed by the source.
@@ -94,7 +94,7 @@
      *
      * @return The number of tracks.
      */
-    public int getTrackCount();
+    int getTrackCount();
 
     /**
      * Returns the format of the specified track.
@@ -111,7 +111,7 @@
      * @param track The track index.
      * @return The format of the specified track.
      */
-    public MediaFormat getFormat(int track);
+    MediaFormat getFormat(int track);
 
     /**
      * Enable the specified track. This allows the track's format and samples to be read from
@@ -123,7 +123,7 @@
      * @param track The track to enable.
      * @param positionUs The player's current playback position.
      */
-    public void enable(int track, long positionUs);
+    void enable(int track, long positionUs);
 
     /**
      * Indicates to the source that it should still be buffering data for the specified track.
@@ -135,7 +135,7 @@
      * @return True if the track has available samples, or if the end of the stream has been
      *     reached. False if more data needs to be buffered for samples to become available.
      */
-    public boolean continueBuffering(int track, long positionUs);
+    boolean continueBuffering(int track, long positionUs);
 
     /**
      * Attempts to read a pending discontinuity from the source.
@@ -146,7 +146,7 @@
      * @return If a discontinuity was read then the playback position after the discontinuity. Else
      *     {@link #NO_DISCONTINUITY}.
      */
-    public long readDiscontinuity(int track);
+    long readDiscontinuity(int track);
 
     /**
      * Attempts to read a sample or a new format from the source.
@@ -170,8 +170,8 @@
      * @return The result, which can be {@link #SAMPLE_READ}, {@link #FORMAT_READ},
      *     {@link #NOTHING_READ} or {@link #END_OF_STREAM}.
      */
-    public int readData(int track, long positionUs, MediaFormatHolder formatHolder,
-        SampleHolder sampleHolder);
+    int readData(int track, long positionUs, MediaFormatHolder formatHolder,
+                 SampleHolder sampleHolder);
 
     /**
      * Seeks to the specified time in microseconds.
@@ -180,7 +180,7 @@ public int readData(int track, long positionUs, MediaFormatHolder formatHolder,
      *
      * @param positionUs The seek position in microseconds.
      */
-    public void seekToUs(long positionUs);
+    void seekToUs(long positionUs);
 
     /**
      * Returns an estimate of the position up to which data is buffered.
@@ -191,7 +191,7 @@ public int readData(int track, long positionUs, MediaFormatHolder formatHolder,
      *     or {@link TrackRenderer#END_OF_TRACK_US} if data is buffered to the end of the stream,
      *     or {@link TrackRenderer#UNKNOWN_TIME_US} if no estimate is available.
      */
-    public long getBufferedPositionUs();
+    long getBufferedPositionUs();
 
     /**
      * Disable the specified track.
@@ -200,14 +200,14 @@ public int readData(int track, long positionUs, MediaFormatHolder formatHolder,
      *
      * @param track The track to disable.
      */
-    public void disable(int track);
+    void disable(int track);
 
     /**
      * Releases the {@link SampleSourceReader}.
      * <p>
      * This method should be called when access to the {@link SampleSource} is no longer required.
      */
-    public void release();
+    void release();
 
   }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/TimeRange.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/TimeRange.java
index fa6e0a4ba..4edbf27c1 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/TimeRange.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/TimeRange.java
@@ -30,7 +30,7 @@
    *
    * @return Whether the range is static.
    */
-  public boolean isStatic();
+  boolean isStatic();
 
   /**
    * Returns the start and end times (in milliseconds) of the TimeRange in the provided array,
@@ -39,7 +39,7 @@
    * @param out An array to store the start and end times; can be null.
    * @return An array containing the start time (index 0) and end time (index 1) in milliseconds.
    */
-  public long[] getCurrentBoundsMs(long[] out);
+  long[] getCurrentBoundsMs(long[] out);
 
   /**
    * Returns the start and end times (in microseconds) of the TimeRange in the provided array,
@@ -48,12 +48,12 @@
    * @param out An array to store the start and end times; can be null.
    * @return An array containing the start time (index 0) and end time (index 1) in microseconds.
    */
-  public long[] getCurrentBoundsUs(long[] out);
+  long[] getCurrentBoundsUs(long[] out);
 
   /**
    * A static {@link TimeRange}.
    */
-  public static final class StaticTimeRange implements TimeRange {
+  final class StaticTimeRange implements TimeRange {
 
     private final long startTimeUs;
     private final long endTimeUs;
@@ -116,7 +116,7 @@ public boolean equals(Object obj) {
   /**
    * A dynamic {@link TimeRange}.
    */
-  public static final class DynamicTimeRange implements TimeRange {
+  final class DynamicTimeRange implements TimeRange {
 
     private final long minStartTimeUs;
     private final long maxEndTimeUs;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/chunk/FormatEvaluator.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/chunk/FormatEvaluator.java
index 442e58bc0..eae05278f 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/chunk/FormatEvaluator.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/chunk/FormatEvaluator.java
@@ -58,7 +58,7 @@ void evaluate(List<? extends MediaChunk> queue, long playbackPositionUs, Format[
   /**
    * A format evaluation.
    */
-  public static final class Evaluation {
+  final class Evaluation {
 
     /**
      * The desired size of the queue.
@@ -84,7 +84,7 @@ public Evaluation() {
   /**
    * Always selects the first format.
    */
-  public static final class FixedEvaluator implements FormatEvaluator {
+  final class FixedEvaluator implements FormatEvaluator {
 
     @Override
     public void enable() {
@@ -107,7 +107,7 @@ public void evaluate(List<? extends MediaChunk> queue, long playbackPositionUs,
   /**
    * Selects randomly between the available formats.
    */
-  public static final class RandomEvaluator implements FormatEvaluator {
+  final class RandomEvaluator implements FormatEvaluator {
 
     private final Random random;
 
@@ -152,7 +152,7 @@ public void evaluate(List<? extends MediaChunk> queue, long playbackPositionUs,
    * reference implementation only. It is recommended that application developers implement their
    * own adaptive evaluator to more precisely suit their use case.
    */
-  public static final class AdaptiveEvaluator implements FormatEvaluator {
+  final class AdaptiveEvaluator implements FormatEvaluator {
 
     public static final int DEFAULT_MAX_INITIAL_BITRATE = 800000;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmInitData.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmInitData.java
index e7f756cd7..725222a8d 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmInitData.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmInitData.java
@@ -35,12 +35,12 @@
    * @param schemeUuid The DRM scheme's UUID.
    * @return The initialization data for the scheme, or null if the scheme is not supported.
    */
-  public abstract SchemeInitData get(UUID schemeUuid);
+  SchemeInitData get(UUID schemeUuid);
 
   /**
    * A {@link DrmInitData} implementation that maps UUID onto scheme specific data.
    */
-  public static final class Mapped implements DrmInitData {
+  final class Mapped implements DrmInitData {
 
     private final Map<UUID, SchemeInitData> schemeData;
 
@@ -68,7 +68,7 @@ public void put(UUID schemeUuid, SchemeInitData schemeInitData) {
   /**
    * A {@link DrmInitData} implementation that returns the same initialization data for all schemes.
    */
-  public static final class Universal implements DrmInitData {
+  final class Universal implements DrmInitData {
 
     private SchemeInitData data;
 
@@ -86,7 +86,7 @@ public SchemeInitData get(UUID schemeUuid) {
   /**
    * Scheme initialization data.
    */
-  public static final class SchemeInitData {
+  final class SchemeInitData {
 
     /**
      * The mimeType of {@link #data}.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmSessionManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmSessionManager.java
index 67850dff4..3c4b5d9f0 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmSessionManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/drm/DrmSessionManager.java
@@ -27,24 +27,24 @@
   /**
    * The error state. {@link #getError()} can be used to retrieve the cause.
    */
-  public static final int STATE_ERROR = 0;
+  int STATE_ERROR = 0;
   /**
    * The session is closed.
    */
-  public static final int STATE_CLOSED = 1;
+  int STATE_CLOSED = 1;
   /**
    * The session is being opened (i.e. {@link #open(DrmInitData)} has been called, but the session
    * is not yet open).
    */
-  public static final int STATE_OPENING = 2;
+  int STATE_OPENING = 2;
   /**
    * The session is open, but does not yet have the keys required for decryption.
    */
-  public static final int STATE_OPENED = 3;
+  int STATE_OPENED = 3;
   /**
    * The session is open and has the keys required for decryption.
    */
-  public static final int STATE_OPENED_WITH_KEYS = 4;
+  int STATE_OPENED_WITH_KEYS = 4;
 
   /**
    * Opens the session, possibly asynchronously.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/DefaultTrackOutput.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/DefaultTrackOutput.java
index c769e8d51..94eb6bc3e 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/DefaultTrackOutput.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/DefaultTrackOutput.java
@@ -219,10 +219,7 @@ private boolean advanceToEligibleSample() {
     if (!haveNext) {
       return false;
     }
-    if (spliceOutTimeUs != Long.MIN_VALUE && sampleInfoHolder.timeUs >= spliceOutTimeUs) {
-      return false;
-    }
-    return true;
+    return !(spliceOutTimeUs != Long.MIN_VALUE && sampleInfoHolder.timeUs >= spliceOutTimeUs);
   }
 
   // Called by the loading thread.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/Extractor.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/Extractor.java
index b7e18b7ea..5b05be4e3 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/Extractor.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/Extractor.java
@@ -29,18 +29,18 @@
    * to the next {@link #read(ExtractorInput, PositionHolder)} is required to provide data
    * continuing from the position in the stream reached by the returning call.
    */
-  public static final int RESULT_CONTINUE = 0;
+  int RESULT_CONTINUE = 0;
   /**
    * Returned by {@link #read(ExtractorInput, PositionHolder)} if the {@link ExtractorInput} passed
    * to the next {@link #read(ExtractorInput, PositionHolder)} is required to provide data starting
    * from a specified position in the stream.
    */
-  public static final int RESULT_SEEK = 1;
+  int RESULT_SEEK = 1;
   /**
    * Returned by {@link #read(ExtractorInput, PositionHolder)} if the end of the
    * {@link ExtractorInput} was reached. Equal to {@link C#RESULT_END_OF_INPUT}.
    */
-  public static final int RESULT_END_OF_INPUT = C.RESULT_END_OF_INPUT;
+  int RESULT_END_OF_INPUT = C.RESULT_END_OF_INPUT;
 
   /**
    * Initializes the extractor with an {@link ExtractorOutput}.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/ExtractorSampleSource.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/ExtractorSampleSource.java
index bd1ea6c68..47b911ee8 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/ExtractorSampleSource.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/ExtractorSampleSource.java
@@ -879,7 +879,7 @@ public ExtractorHolder(Extractor[] extractors, ExtractorOutput extractorOutput)
      * @throws InterruptedException Thrown if the thread was interrupted.
      */
     public Extractor selectExtractor(ExtractorInput input)
-        throws UnrecognizedInputFormatException, IOException, InterruptedException {
+        throws IOException, InterruptedException {
       if (extractor != null) {
         return extractor;
       }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/SeekMap.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/SeekMap.java
index 3a0df3cc0..b30d841c0 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/SeekMap.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/SeekMap.java
@@ -23,7 +23,7 @@
   /**
    * A {@link SeekMap} that does not support seeking.
    */
-  public static final SeekMap UNSEEKABLE = new SeekMap() {
+  SeekMap UNSEEKABLE = new SeekMap() {
 
     @Override
     public boolean isSeekable() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/wav/WavHeaderReader.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/wav/WavHeaderReader.java
index 030eff809..095ff0dfc 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/wav/WavHeaderReader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/wav/WavHeaderReader.java
@@ -47,7 +47,7 @@
    *     supported WAV format.
    */
   public static WavHeader peek(ExtractorInput input)
-      throws IOException, InterruptedException, ParserException {
+      throws IOException, InterruptedException {
     Assertions.checkNotNull(input);
 
     // Allocate a scratch buffer large enough to store the format chunk.
@@ -122,7 +122,7 @@ public static WavHeader peek(ExtractorInput input)
    * @throws ParserException If an error occurs parsing chunks.
    */
   public static void skipToData(ExtractorInput input, WavHeader wavHeader)
-      throws IOException, InterruptedException, ParserException {
+      throws IOException, InterruptedException {
     Assertions.checkNotNull(input);
     Assertions.checkNotNull(wavHeader);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/DefaultEbmlReader.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/DefaultEbmlReader.java
index 477a35607..7fa25686e 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/DefaultEbmlReader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/DefaultEbmlReader.java
@@ -145,8 +145,8 @@ public boolean read(ExtractorInput input) throws IOException, InterruptedExcepti
    * @throws IOException If an error occurs reading from the input.
    * @throws InterruptedException If the thread is interrupted.
    */
-  private long maybeResyncToNextLevel1Element(ExtractorInput input) throws EOFException,
-      IOException, InterruptedException {
+  private long maybeResyncToNextLevel1Element(ExtractorInput input) throws
+          IOException, InterruptedException {
     input.resetPeekPosition();
     while (true) {
       input.peekFully(scratch, 0, MAX_ID_BYTES);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReader.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReader.java
index bf044ee6c..ac5110e7d 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReader.java
@@ -32,34 +32,34 @@
   /**
    * Type for unknown elements.
    */
-  public static final int TYPE_UNKNOWN = 0;
+  int TYPE_UNKNOWN = 0;
   /**
    * Type for elements that contain child elements.
    */
-  public static final int TYPE_MASTER = 1;
+  int TYPE_MASTER = 1;
   /**
    * Type for integer value elements of up to 8 bytes.
    */
-  public static final int TYPE_UNSIGNED_INT = 2;
+  int TYPE_UNSIGNED_INT = 2;
   /**
    * Type for string elements.
    */
-  public static final int TYPE_STRING = 3;
+  int TYPE_STRING = 3;
   /**
    * Type for binary elements.
    */
-  public static final int TYPE_BINARY = 4;
+  int TYPE_BINARY = 4;
   /**
    * Type for IEEE floating point value elements of either 4 or 8 bytes.
    */
-  public static final int TYPE_FLOAT = 5;
+  int TYPE_FLOAT = 5;
 
   /**
    * Initializes the extractor with an {@link EbmlReaderOutput}.
    *
    * @param output An {@link EbmlReaderOutput} to receive events.
    */
-  public void init(EbmlReaderOutput output);
+  void init(EbmlReaderOutput output);
 
   /**
    * Resets the state of the reader.
@@ -67,7 +67,7 @@
    * Subsequent calls to {@link #read(ExtractorInput)} will start reading a new EBML structure
    * from scratch.
    */
-  public void reset();
+  void reset();
 
   /**
    * Reads from an {@link ExtractorInput}, invoking an event callback if possible.
@@ -78,7 +78,7 @@
    * @throws IOException If an error occurs reading from the input.
    * @throws InterruptedException If the thread is interrupted.
    */
-  public boolean read(ExtractorInput input) throws ParserException, IOException,
+  boolean read(ExtractorInput input) throws IOException,
       InterruptedException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReaderOutput.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReaderOutput.java
index cd1b8b873..eef5ba5d8 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReaderOutput.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/extractor/webm/EbmlReaderOutput.java
@@ -112,6 +112,6 @@
    * @throws InterruptedException If the thread is interrupted.
    */
   void binaryElement(int id, int contentsSize, ExtractorInput input)
-      throws ParserException, IOException, InterruptedException;
+      throws IOException, InterruptedException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/hls/HlsPlaylistParser.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/hls/HlsPlaylistParser.java
index 5d5c553db..9858e1090 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/hls/HlsPlaylistParser.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/hls/HlsPlaylistParser.java
@@ -108,7 +108,7 @@
 
   @Override
   public HlsPlaylist parse(String connectionUrl, InputStream inputStream)
-      throws IOException, ParserException {
+      throws IOException {
     BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
     Queue<String> extraLines = new LinkedList<>();
     String line;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/metadata/MetadataParser.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/metadata/MetadataParser.java
index 0320a4574..58fc1feb0 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/metadata/MetadataParser.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/metadata/MetadataParser.java
@@ -30,7 +30,7 @@
    * @param mimeType A metadata mime type.
    * @return Whether the mime type is supported.
    */
-  public boolean canParse(String mimeType);
+  boolean canParse(String mimeType);
 
   /**
    * Parses metadata objects of type <T> from the provided binary data.
@@ -40,6 +40,6 @@
    * @return @return A parsed metadata object of type <T>.
    * @throws ParserException If a problem occurred parsing the data.
    */
-  public T parse(byte[] data, int size) throws ParserException;
+  T parse(byte[] data, int size) throws ParserException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java
index 5acb9f3e2..2eaa2bab6 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/smoothstreaming/SmoothStreamingManifestParser.java
@@ -60,7 +60,7 @@ public SmoothStreamingManifestParser() {
 
   @Override
   public SmoothStreamingManifest parse(String connectionUrl, InputStream inputStream)
-      throws IOException, ParserException {
+      throws IOException {
     try {
       XmlPullParser xmlParser = xmlParserFactory.newPullParser();
       xmlParser.setInput(inputStream, null);
@@ -101,8 +101,7 @@ public ElementParser(ElementParser parent, String baseUri, String tag) {
       this.normalizedAttributes = new LinkedList<>();
     }
 
-    public final Object parse(XmlPullParser xmlParser) throws XmlPullParserException, IOException,
-        ParserException {
+    public final Object parse(XmlPullParser xmlParser) throws XmlPullParserException, IOException {
       String tagName;
       boolean foundStartTag = false;
       int skippingElementDepth = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/Subtitle.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/Subtitle.java
index e4a697215..ea0acbfda 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/Subtitle.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/Subtitle.java
@@ -28,7 +28,7 @@
    * @param timeUs The time in microseconds.
    * @return The index of the next event, or -1 if there are no events after the specified time.
    */
-  public int getNextEventTimeIndex(long timeUs);
+  int getNextEventTimeIndex(long timeUs);
 
   /**
    * Gets the number of event times, where events are defined as points in time at which the cues
@@ -36,7 +36,7 @@
    *
    * @return The number of event times.
    */
-  public int getEventTimeCount();
+  int getEventTimeCount();
 
   /**
    * Gets the event time at a specified index.
@@ -44,14 +44,14 @@
    * @param index The index of the event time to obtain.
    * @return The event time in microseconds.
    */
-  public long getEventTime(int index);
+  long getEventTime(int index);
 
   /**
    * Convenience method for obtaining the last event time.
    *
    * @return The time of the last event in microseconds, or -1 if {@code getEventTimeCount() == 0}.
    */
-  public long getLastEventTime();
+  long getLastEventTime();
 
   /**
    * Retrieve the subtitle cues that should be displayed at a given time.
@@ -59,6 +59,6 @@
    * @param timeUs The time in microseconds.
    * @return A list of cues that should be displayed, possibly empty.
    */
-  public List<Cue> getCues(long timeUs);
+  List<Cue> getCues(long timeUs);
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/SubtitleParser.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/SubtitleParser.java
index e7cec2ab8..e3e17bd9d 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/SubtitleParser.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/SubtitleParser.java
@@ -28,7 +28,7 @@
    * @param mimeType A subtitle mime type.
    * @return Whether the mime type is supported.
    */
-  public boolean canParse(String mimeType);
+  boolean canParse(String mimeType);
 
   /**
    * Parses a {@link Subtitle} from the provided {@code byte[]}.
@@ -39,6 +39,6 @@
    * @return A parsed representation of the subtitle.
    * @throws ParserException If a problem occurred parsing the subtitle data.
    */
-  public Subtitle parse(byte[] bytes, int offset, int length) throws ParserException;
+  Subtitle parse(byte[] bytes, int offset, int length) throws ParserException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/subrip/SubripSubtitle.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/subrip/SubripSubtitle.java
index d49a0482d..1206e48b2 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/subrip/SubripSubtitle.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/subrip/SubripSubtitle.java
@@ -71,7 +71,7 @@ public long getLastEventTime() {
     int index = Util.binarySearchFloor(cueTimesUs, timeUs, true, false);
     if (index == -1 || cues[index] == null) {
       // timeUs is earlier than the start of the first cue, or we have an empty cue.
-      return Collections.<Cue>emptyList();
+      return Collections.emptyList();
     } else {
       return Collections.singletonList(cues[index]);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/ttml/TtmlParser.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/ttml/TtmlParser.java
index da62303ef..a81d53ab2 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/ttml/TtmlParser.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/ttml/TtmlParser.java
@@ -379,24 +379,21 @@ private TtmlNode parseNode(XmlPullParser parser, TtmlNode parent,
   }
 
   private static boolean isSupportedTag(String tag) {
-    if (tag.equals(TtmlNode.TAG_TT)
-        || tag.equals(TtmlNode.TAG_HEAD)
-        || tag.equals(TtmlNode.TAG_BODY)
-        || tag.equals(TtmlNode.TAG_DIV)
-        || tag.equals(TtmlNode.TAG_P)
-        || tag.equals(TtmlNode.TAG_SPAN)
-        || tag.equals(TtmlNode.TAG_BR)
-        || tag.equals(TtmlNode.TAG_STYLE)
-        || tag.equals(TtmlNode.TAG_STYLING)
-        || tag.equals(TtmlNode.TAG_LAYOUT)
-        || tag.equals(TtmlNode.TAG_REGION)
-        || tag.equals(TtmlNode.TAG_METADATA)
-        || tag.equals(TtmlNode.TAG_SMPTE_IMAGE)
-        || tag.equals(TtmlNode.TAG_SMPTE_DATA)
-        || tag.equals(TtmlNode.TAG_SMPTE_INFORMATION)) {
-      return true;
-    }
-    return false;
+    return tag.equals(TtmlNode.TAG_TT)
+            || tag.equals(TtmlNode.TAG_HEAD)
+            || tag.equals(TtmlNode.TAG_BODY)
+            || tag.equals(TtmlNode.TAG_DIV)
+            || tag.equals(TtmlNode.TAG_P)
+            || tag.equals(TtmlNode.TAG_SPAN)
+            || tag.equals(TtmlNode.TAG_BR)
+            || tag.equals(TtmlNode.TAG_STYLE)
+            || tag.equals(TtmlNode.TAG_STYLING)
+            || tag.equals(TtmlNode.TAG_LAYOUT)
+            || tag.equals(TtmlNode.TAG_REGION)
+            || tag.equals(TtmlNode.TAG_METADATA)
+            || tag.equals(TtmlNode.TAG_SMPTE_IMAGE)
+            || tag.equals(TtmlNode.TAG_SMPTE_DATA)
+            || tag.equals(TtmlNode.TAG_SMPTE_INFORMATION);
   }
 
   private static void parseFontSize(String expression, TtmlStyle out) throws ParserException {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/webvtt/WebvttSubtitle.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/webvtt/WebvttSubtitle.java
index e23f3a18d..aa03e3432 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/webvtt/WebvttSubtitle.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/text/webvtt/WebvttSubtitle.java
@@ -120,7 +120,7 @@ public long getLastEventTime() {
     if (list != null) {
       return list;
     } else {
-      return Collections.<Cue>emptyList();
+      return Collections.emptyList();
     }
   }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/BandwidthMeter.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/BandwidthMeter.java
index 81d0b817e..64a03954d 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/BandwidthMeter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/BandwidthMeter.java
@@ -23,7 +23,7 @@
   /**
    * Interface definition for a callback to be notified of {@link BandwidthMeter} events.
    */
-  public interface EventListener {
+  interface EventListener {
 
     /**
      * Invoked periodically to indicate that bytes have been transferred.
@@ -40,7 +40,7 @@
   /**
    * Indicates no bandwidth estimate is available.
    */
-  final long NO_ESTIMATE = -1;
+  long NO_ESTIMATE = -1;
 
   /**
    * Gets the estimated bandwidth, in bits/sec.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/DataSink.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/DataSink.java
index ed5a5762d..87b4df899 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/DataSink.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/DataSink.java
@@ -30,14 +30,14 @@
    * @return This {@link DataSink}, for convenience.
    * @throws IOException
    */
-  public DataSink open(DataSpec dataSpec) throws IOException;
+  DataSink open(DataSpec dataSpec) throws IOException;
 
   /**
    * Closes the {@link DataSink}.
    *
    * @throws IOException
    */
-  public void close() throws IOException;
+  void close() throws IOException;
 
   /**
    * Consumes the provided data.
@@ -47,6 +47,6 @@
    * @param length The length of the data to consume, in bytes.
    * @throws IOException
    */
-  public void write(byte[] buffer, int offset, int length) throws IOException;
+  void write(byte[] buffer, int offset, int length) throws IOException;
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/UriLoadable.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/UriLoadable.java
index 7c169206c..b635d1a7c 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/UriLoadable.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/UriLoadable.java
@@ -44,7 +44,7 @@
      * @throws ParserException If an error occurs parsing the data.
      * @throws IOException If an error occurs reading data from the stream.
      */
-    T parse(String connectionUrl, InputStream inputStream) throws ParserException, IOException;
+    T parse(String connectionUrl, InputStream inputStream) throws IOException;
 
   }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/cache/Cache.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/cache/Cache.java
index 0cf4b365e..328819e07 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/cache/Cache.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/upstream/cache/Cache.java
@@ -27,7 +27,7 @@
   /**
    * Interface definition for a callback to be notified of {@link Cache} events.
    */
-  public interface Listener {
+  interface Listener {
 
     /**
      * Invoked when a {@link CacheSpan} is added to the cache.
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/util/ManifestFetcher.java b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/util/ManifestFetcher.java
index 365269476..97feea545 100755
--- a/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/util/ManifestFetcher.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/exoplayer/util/ManifestFetcher.java
@@ -61,11 +61,11 @@
    */
   public interface EventListener {
 
-    public void onManifestRefreshStarted();
+    void onManifestRefreshStarted();
 
-    public void onManifestRefreshed();
+    void onManifestRefreshed();
 
-    public void onManifestError(IOException e);
+    void onManifestError(IOException e);
 
   }
 
@@ -102,7 +102,7 @@
      * Returns the URI from which subsequent manifests should be requested, or null to continue
      * using the current URI.
      */
-    public String getNextManifestUri();
+    String getNextManifestUri();
 
   }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java
index 1c40eafc7..7e949a09c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java
@@ -747,7 +747,7 @@ void recycleUpdateOpsAndClearList(List<UpdateOp> ops) {
     /**
      * Contract between AdapterHelper and RecyclerView.
      */
-    static interface Callback {
+    interface Callback {
 
         ViewHolder findViewHolder(int position);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
index 582b8f245..5b9b630fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
@@ -510,7 +510,7 @@ public String toString() {
         }
     }
 
-    static interface Callback {
+    interface Callback {
 
         int getChildCount();
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java
index b2e508a2d..c95c6d98e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OpReorderer.java
@@ -229,7 +229,7 @@ private int getLastMoveOutOfOrder(List<UpdateOp> list) {
         return -1;
     }
 
-    static interface Callback {
+    interface Callback {
 
         UpdateOp obtainUpdateOp(int cmd, int startPosition, int itemCount, Object payload);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
index 3e46bc8a4..3f096b619 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
@@ -8682,7 +8682,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State s
      *
      * @see SimpleOnItemTouchListener
      */
-    public static interface OnItemTouchListener {
+    public interface OnItemTouchListener {
         /**
          * Silently observe and/or take over touch events sent to the RecyclerView
          * before they are handled by either the RecyclerView itself or its child views.
@@ -8697,7 +8697,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State s
          *         to continue with the current behavior and continue observing future events in
          *         the gesture.
          */
-        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e);
+        boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e);
 
         /**
          * Process a touch event as part of a gesture that was claimed by returning true from
@@ -8706,7 +8706,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State s
          * @param e MotionEvent describing the touch event. All coordinates are in
          *          the RecyclerView's coordinate system.
          */
-        public void onTouchEvent(RecyclerView rv, MotionEvent e);
+        void onTouchEvent(RecyclerView rv, MotionEvent e);
 
         /**
          * Called when a child of RecyclerView does not want RecyclerView and its ancestors to
@@ -8717,7 +8717,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State s
          *            intercept touch events.
          * @see ViewParent#requestDisallowInterceptTouchEvent(boolean)
          */
-        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept);
+        void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept);
     }
 
     /**
@@ -8795,7 +8795,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy){}
          *
          * @param holder The ViewHolder containing the view that was recycled
          */
-        public void onViewRecycled(ViewHolder holder);
+        void onViewRecycled(ViewHolder holder);
     }
 
     /**
@@ -8809,14 +8809,14 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy){}
          *
          * @param view The View which is attached to the RecyclerView
          */
-        public void onChildViewAttachedToWindow(View view);
+        void onChildViewAttachedToWindow(View view);
 
         /**
          * Called when a view is detached from RecyclerView.
          *
          * @param view The View which is being detached from the RecyclerView
          */
-        public void onChildViewDetachedFromWindow(View view);
+        void onChildViewDetachedFromWindow(View view);
     }
 
     /**
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
index 46b6f9d2a..aa648cce4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
@@ -1297,7 +1297,7 @@ private void removeChildDrawingOrderCallbackIfNecessary(View view) {
      * An interface which can be implemented by LayoutManager for better integration with
      * {@link ItemTouchHelper}.
      */
-    public static interface ViewDropHandler {
+    public interface ViewDropHandler {
 
         /**
          * Called by the {@link ItemTouchHelper} after a View is dropped over another View.
@@ -1318,7 +1318,7 @@ private void removeChildDrawingOrderCallbackIfNecessary(View view) {
          * @param y      The <code>top</code> offset of the View that is being dragged. This value
          *               includes the movement caused by the user.
          */
-        public void prepareForDrop(View view, View target, int x, int y);
+        void prepareForDrop(View view, View target, int x, int y);
     }
 
     /**
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/Cache.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/Cache.java
index 619f69b2c..b04bacd6a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/Cache.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/Cache.java
@@ -28,43 +28,43 @@
      * @param key Cache key
      * @return An {@link Entry} or null in the event of a cache miss
      */
-    public Entry get(String key);
+    Entry get(String key);
 
     /**
      * Adds or replaces an entry to the cache.
      * @param key Cache key
      * @param entry Data to store and metadata for cache coherency, TTL, etc.
      */
-    public void put(String key, Entry entry);
+    void put(String key, Entry entry);
 
     /**
      * Performs any potentially long-running actions needed to initialize the cache;
      * will be called from a worker thread.
      */
-    public void initialize();
+    void initialize();
 
     /**
      * Invalidates an entry in the cache.
      * @param key Cache key
      * @param fullExpire True to fully expire the entry, false to soft expire
      */
-    public void invalidate(String key, boolean fullExpire);
+    void invalidate(String key, boolean fullExpire);
 
     /**
      * Removes an entry from the cache.
      * @param key Cache key
      */
-    public void remove(String key);
+    void remove(String key);
 
     /**
      * Empties the cache.
      */
-    public void clear();
+    void clear();
 
     /**
      * Data and metadata for an entry returned by the cache.
      */
-    public static class Entry {
+    class Entry {
         /** The data returned from cache. */
         public byte[] data;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/Network.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/Network.java
index 561c04140..edee8afb8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/Network.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/Network.java
@@ -26,5 +26,5 @@
      * @return A {@link NetworkResponse} with data and caching metadata; will never be null
      * @throws VolleyError on errors
      */
-    public NetworkResponse performRequest(Request<?> request) throws VolleyError;
+    NetworkResponse performRequest(Request<?> request) throws VolleyError;
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/RequestQueue.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/RequestQueue.java
index b694dbc95..22e02db2d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/RequestQueue.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/RequestQueue.java
@@ -40,9 +40,9 @@
 public class RequestQueue {
 
     /** Callback interface for completed requests. */
-    public static interface RequestFinishedListener<T> {
+    public interface RequestFinishedListener<T> {
         /** Called when a request has finished processing. */
-        public void onRequestFinished(Request<T> request);
+        void onRequestFinished(Request<T> request);
     }
 
     /** Used for generating monotonically-increasing sequence numbers for requests. */
@@ -186,7 +186,7 @@ public Cache getCache() {
      * {@link RequestQueue#cancelAll(RequestFilter)}.
      */
     public interface RequestFilter {
-        public boolean apply(Request<?> request);
+        boolean apply(Request<?> request);
     }
 
     /**
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/Response.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/Response.java
index aadf2d783..d40518ea1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/Response.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/Response.java
@@ -26,7 +26,7 @@
     /** Callback interface for delivering parsed responses. */
     public interface Listener<T> {
         /** Called when a response is received. */
-        public void onResponse(T response);
+        void onResponse(T response);
     }
 
     /** Callback interface for delivering error responses. */
@@ -35,7 +35,7 @@
          * Callback method that an error has been occurred with the
          * provided error code and optional user-readable message.
          */
-        public void onErrorResponse(VolleyError error);
+        void onErrorResponse(VolleyError error);
     }
 
     /** Returns a successful response containing the parsed result. */
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/ResponseDelivery.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/ResponseDelivery.java
index 38e67cf58..33a04e21c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/ResponseDelivery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/ResponseDelivery.java
@@ -20,16 +20,16 @@
     /**
      * Parses a response from the network or cache and delivers it.
      */
-    public void postResponse(Request<?> request, Response<?> response);
+    void postResponse(Request<?> request, Response<?> response);
 
     /**
      * Parses a response from the network or cache and delivers it. The provided
      * Runnable will be executed after delivery.
      */
-    public void postResponse(Request<?> request, Response<?> response, Runnable runnable);
+    void postResponse(Request<?> request, Response<?> response, Runnable runnable);
 
     /**
      * Posts an error for the given request.
      */
-    public void postError(Request<?> request, VolleyError error);
+    void postError(Request<?> request, VolleyError error);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/RetryPolicy.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/RetryPolicy.java
index 02f279a70..f68066606 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/RetryPolicy.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/RetryPolicy.java
@@ -24,12 +24,12 @@
     /**
      * Returns the current timeout (used for logging).
      */
-    public int getCurrentTimeout();
+    int getCurrentTimeout();
 
     /**
      * Returns the current retry count (used for logging).
      */
-    public int getCurrentRetryCount();
+    int getCurrentRetryCount();
 
     /**
      * Prepares for the next retry by applying a backoff to the timeout.
@@ -37,5 +37,5 @@
      * @throws VolleyError In the event that the retry could not be performed (for example if we
      * ran out of attempts), the passed in error is thrown.
      */
-    public void retry(VolleyError error) throws VolleyError;
+    void retry(VolleyError error) throws VolleyError;
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/Authenticator.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/Authenticator.java
index 9118a3bf0..6fe72fd06 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/Authenticator.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/Authenticator.java
@@ -27,10 +27,10 @@
      *
      * @throws AuthFailureError If authentication did not succeed
      */
-    public String getAuthToken() throws AuthFailureError;
+    String getAuthToken() throws AuthFailureError;
 
     /**
      * Invalidates the provided auth token.
      */
-    public void invalidateAuthToken(String authToken);
+    void invalidateAuthToken(String authToken);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HttpStack.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HttpStack.java
index 253c1a70b..ede55a5f5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HttpStack.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HttpStack.java
@@ -39,7 +39,7 @@
      *         {@link Request#getHeaders()}
      * @return the HTTP response
      */
-    public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)
+    HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)
         throws IOException, AuthFailureError;
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HurlStack.java b/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HurlStack.java
index 83b1d3389..469c85942 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HurlStack.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/volley/toolbox/HurlStack.java
@@ -59,7 +59,7 @@
          * Returns a URL to use instead of the provided one, or null to indicate
          * this URL should not be used at all.
          */
-        public String rewriteUrl(String originalUrl);
+        String rewriteUrl(String originalUrl);
     }
 
     private final UrlRewriter mUrlRewriter;
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumListener.java b/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumListener.java
index 938f6e0b9..d8fb0b399 100644
--- a/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumListener.java
+++ b/TMessagesProj/src/main/java/org/telegram/payment/CheckPremiumListener.java
@@ -6,7 +6,7 @@
 
 public interface CheckPremiumListener {
 
-    public void onPremiumUser();
-    public void onGeneralUser();
+    void onPremiumUser();
+    void onGeneralUser();
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/PaymentConfirmationListener.java b/TMessagesProj/src/main/java/org/telegram/payment/PaymentConfirmationListener.java
index b4a22ee8f..a4a947b47 100644
--- a/TMessagesProj/src/main/java/org/telegram/payment/PaymentConfirmationListener.java
+++ b/TMessagesProj/src/main/java/org/telegram/payment/PaymentConfirmationListener.java
@@ -5,8 +5,8 @@
  */
 public interface PaymentConfirmationListener {
 
-    public void onPaymentConfirmationSuccess();
-    public void onPaymentConfirmationFailed();
+    void onPaymentConfirmationSuccess();
+    void onPaymentConfirmationFailed();
 
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/PaymentManager.java b/TMessagesProj/src/main/java/org/telegram/payment/PaymentManager.java
index 1aa484d31..a566f7ea3 100644
--- a/TMessagesProj/src/main/java/org/telegram/payment/PaymentManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/payment/PaymentManager.java
@@ -163,7 +163,7 @@ public void onClick(View v) {
         builder = new AlertDialog.Builder(PaymentManager.this);
 
         tv.setText(getResources().getString(R.string.karmapoint)+" "+getKarmaBal());
-      //  intializeAds();
+
 
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/payment/UserPaymentInfo.java b/TMessagesProj/src/main/java/org/telegram/payment/UserPaymentInfo.java
index 74c695504..534f343d7 100644
--- a/TMessagesProj/src/main/java/org/telegram/payment/UserPaymentInfo.java
+++ b/TMessagesProj/src/main/java/org/telegram/payment/UserPaymentInfo.java
@@ -83,7 +83,7 @@ public String getUserId(){
 
 
     private static final String CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_PRODUCTION;
-    private static final String CONFIG_CLIENT_ID = "ARafipSb7SknBnBKsQY1Na9CvKZPypeHORyOQ-f-1sEAfwt0NEymuOniy4__9oIJ1JYEleESrqSkESGB";;
+    private static final String CONFIG_CLIENT_ID = "ARafipSb7SknBnBKsQY1Na9CvKZPypeHORyOQ-f-1sEAfwt0NEymuOniy4__9oIJ1JYEleESrqSkESGB";
 
     public static PayPalConfiguration getConfiguration(){
 
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/HttpUrlConnectionUtil.java b/TMessagesProj/src/main/java/org/telegram/socialuser/HttpUrlConnectionUtil.java
index b792023d6..9741dd3c7 100755
--- a/TMessagesProj/src/main/java/org/telegram/socialuser/HttpUrlConnectionUtil.java
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/HttpUrlConnectionUtil.java
@@ -304,11 +304,8 @@ public static String convertStreamToString(InputStream is) {
 	}
 	
 	public static boolean checkHTTPS(String url){
-		if(url.contains("https")){
-			return true;
-		}
-		return false;
-		
+		return url.contains("https");
+
 	}
 	
 	  /**
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/OnTelegramSync.java b/TMessagesProj/src/main/java/org/telegram/socialuser/OnTelegramSync.java
index 89a8b7172..fe5bf90b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/socialuser/OnTelegramSync.java
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/OnTelegramSync.java
@@ -8,8 +8,8 @@
 public interface OnTelegramSync {
 
 
-    public void onUserSyncSuccess(TLRPC.User user);
-    public void onUserSyncFailed();
+    void onUserSyncSuccess(TLRPC.User user);
+    void onUserSyncFailed();
 
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/UriUtil.java b/TMessagesProj/src/main/java/org/telegram/socialuser/UriUtil.java
index 1dbdea6ff..20e8367e0 100755
--- a/TMessagesProj/src/main/java/org/telegram/socialuser/UriUtil.java
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/UriUtil.java
@@ -34,7 +34,6 @@ public static String getPaymentUrl() {
 
     public static String getKarmaBalanceUrl(String mobileNo){
         // return  /socialshareupapi/user/   getCredit?mobile=9990243020";
-
         return new StringBuilder().append(getHTTPRootPath()).append("/").append("getCredit").toString();
 
     }
@@ -44,18 +43,15 @@ public static String getKarmaBalanceUrl(String mobileNo){
 
      public static String getCreditUrl(){
          http://{{host}}/socialshareupapi/user/     credit?source=VIDEO_ADS&mobile=9990243020
-
-
          // "192.168.2.250:8080/socialshareupapi/"
          return  new StringBuilder().append(getHTTPRootPath()).append("/").append("credit").toString();
 
      }
 
-// Debit url
+
 
     public static String getDebitUrl(){
         http://{{host}}/socialshareupapi/user/debit?source=VIDEO_WATCH&mobile=9990243020
-
         return  new StringBuilder().append( getHTTPRootPath()).append("/").append("debit").toString();
 
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddUserRequester.java b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddUserRequester.java
index 67f4d898c..87cc83125 100644
--- a/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddUserRequester.java
+++ b/TMessagesProj/src/main/java/org/telegram/socialuser/runable/AddUserRequester.java
@@ -44,12 +44,6 @@ public void run() {
                 p.edit().putString("visibility",resUser.visibility).commit();
                 p.edit().putString("userHash",resUser.userHash).commit();
 
-          /*      for(OnAddUserListner listner : ApplicationLoader.getInstance().getUIListeners(OnAddUserListner.class)){
-
-                    listner.setUserAddSuccess();
-                }*/
-
-
             }catch (Exception e){
             Logger.d("UserRegistration",e.getStackTrace().toString());
             }
@@ -57,11 +51,6 @@ public void run() {
         }
         else{
 
-        /*    for(OnAddUserListner listner : ApplicationLoader.getInstance().getUIListeners(OnAddUserListner.class)){
-
-                listner.setUserAddFailed();
-            }
-*/
 
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index b70cd1307..0d49c7fcd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -11,15 +11,19 @@
 import android.animation.AnimatorSet;
 import android.app.Activity;
 import android.app.Dialog;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.ServiceConnection;
 import android.os.Bundle;
+import android.os.IBinder;
 import android.support.v4.widget.DrawerLayout;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewParent;
 
+import org.telegram.calling.SinchService;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
@@ -27,7 +31,7 @@
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tracker.AnalyticsTrackers;
 
-public class BaseFragment {
+public class BaseFragment implements ServiceConnection {
 
     private boolean isFinished = false;
     protected Dialog visibleDialog = null;
@@ -39,6 +43,8 @@
     protected Bundle arguments;
     protected boolean swipeBackEnabled = false;
     protected boolean hasOwnBackground = false;
+    private SinchService.SinchServiceInterface mSinchServiceInterface;
+
 
     public BaseFragment() {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
@@ -57,7 +63,12 @@ public View getFragmentView() {
         return fragmentView;
     }
 
+/////////////////////////////service started if not /////////////////////////////////////
+
     public View createView(Context context) {
+      //  getParentActivity().startService(new Intent(getParentActivity(), SinchService.class));
+         getParentActivity().bindService(new Intent(getParentActivity(), SinchService.class), this,
+                Context.BIND_AUTO_CREATE);
         return null;
     }
 
@@ -89,6 +100,7 @@ protected void clearViews() {
             actionBar = null;
         }
         parentLayout = null;
+
     }
 
     protected void setParentLayout(ActionBarLayout layout) {
@@ -339,4 +351,39 @@ public Dialog getVisibleDialog() {
     public void setVisibleDialog(Dialog dialog) {
         visibleDialog = dialog;
     }
+
+
+
+///////////////////////////////////////////////////////////////////////////////////////
+
+
+    @Override
+    public void onServiceConnected(ComponentName name, IBinder service) {
+        if (SinchService.class.getName().equals(name.getClassName())) {
+            mSinchServiceInterface = (SinchService.SinchServiceInterface) service;
+            onServiceConnected();
+        }
+
+    }
+
+    @Override
+    public void onServiceDisconnected(ComponentName name) {
+        if (SinchService.class.getName().equals(name.getClassName())) {
+            mSinchServiceInterface = null;
+            onServiceDisconnected();
+        }
+    }
+
+    protected void onServiceConnected() {
+        // for subclasses
+    }
+
+    protected void onServiceDisconnected() {
+        // for subclasses
+    }
+
+    protected SinchService.SinchServiceInterface getSinchServiceInterface() {
+        return mSinchServiceInterface;
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index aefd76212..6c08684b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -204,7 +204,7 @@ public void didReceivedNotification(int id, Object... args) {
             }
             if (listViewAdapter != null) {
                 listViewAdapter.notifyDataSetChanged();
-                ((FrameLayout) progressView).addView(View.inflate(getParentActivity(), R.layout.notification_settings, null));
+                progressView.addView(View.inflate(getParentActivity(), R.layout.notification_settings, null));
                 progressView.findViewById(R.id.backview).setOnClickListener(new View.OnClickListener() {
                     @Override
                     public void onClick(View v) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 1437cb340..952b5dc9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -389,7 +389,7 @@ public ChatActivity(Bundle args) {
 
     @Override
     public boolean onFragmentCreate() {
-        chatActivityEnterView.onListnerAttachment(this);
+        ChatActivityEnterView.onListnerAttachment(this);
         final int chatId = arguments.getInt("chat_id", 0);
         final int userId = arguments.getInt("user_id", 0);
         final int encId = arguments.getInt("enc_id", 0);
@@ -8774,16 +8774,14 @@ public void onClick(View view) {
         public void onItemClick(AdapterView<?> parent, View view, int position,
                                 long id) {
             MenuItems items =(MenuItems) parent.getItemAtPosition(position);
-
             switch(items.getId()){
-
                 case 0:
                     parentLayout.closeDrawer();
                     if(currentUser != null) {
                         try {
-                            Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:+" + currentUser.phone));
-                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                            getParentActivity().startActivity(intent);
+                            Intent mainActivity = new Intent(getParentActivity(), org.telegram.calling.PlaceCallActivity.class);
+                            mainActivity.putExtra("mob","+"+currentUser.phone);
+                            getParentActivity().startActivity(mainActivity);
                         } catch (Exception e) {
                             FileLog.e("tmessages", e);
                         }  }
@@ -8791,14 +8789,10 @@ public void onItemClick(AdapterView<?> parent, View view, int position,
 
                 case 1:
                     parentLayout.closeDrawer();
-                    //  if(currentUser != null){
                     openProfile();
-                    //}
                     break;
-
                 case 2:
                     parentLayout.closeDrawer();
-                    // encrypted chat
                     if (getParentActivity() == null) {
                         return;
                     }
@@ -8833,19 +8827,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position,
 
 
     public void openProfile(){
-    /*    if (mUser != null && mUser.id != UserConfig.getClientUserId()) {
-            Bundle args = new Bundle();
-            args.putInt("user_id",mUser.id);
-            ProfileActivity fragment = new ProfileActivity(args);
-            //  fragment.setPlayProfileAnimation(currentUser != null && currentUser.id == user.id);
-            presentFragment(fragment);*/
-
-
-
-        //}
 
-
-      //  if (radioButton == null || radioButton.getVisibility() != View.VISIBLE) {
             if (currentUser != null) {
                 Bundle args = new Bundle();
                 args.putInt("user_id", currentUser.id);
@@ -8855,18 +8837,7 @@ public void openProfile(){
                 ProfileActivity fragment = new ProfileActivity(args);
                 fragment.setPlayProfileAnimation(true);
                 presentFragment(fragment);
-            }/* else if (currentChat != null) {
-                Bundle args = new Bundle();
-                args.putInt("chat_id", currentChat.id);
-                ProfileActivity fragment = new ProfileActivity(args);
-                fragment.setChatInfo(info);
-                fragment.setPlayProfileAnimation(true);
-                presentFragment(fragment);
             }
-        } else {
-            switchImportantMode(null);
-        }*/
-
     }
     public void clearOrDeletechat(final int id){
         if (getParentActivity() == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index c115382e1..b1c4b2f3f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -84,6 +84,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
+
 public class ContactsActivity extends BaseFragment implements KarmaBalanceListener,NotificationCenter.NotificationCenterDelegate {
 
     private BaseSectionsAdapter listViewAdapter;
@@ -744,7 +745,6 @@ public String getKarmaBal(){
 
     private void setContactMenuList(){
        draweritems=new ArrayList<MenuItems>();
-       /* draweritems.add(new MenuItems(LocaleController.getString("AddNewContact", R.string.add_new_contact),R.drawable.menu_plus,true, "",0));*/
         draweritems.add(new MenuItems(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_bar_contact_plus, true, "",0));
         draweritems.add(new MenuItems(LocaleController.getString("NewSecretChat", R.string.NewSecretChat),R.drawable.menu_sectretchat,true, "",0));
         draweritems.add(new MenuItems(LocaleController.getString("NewBroadcastList", R.string.CreateChannel),R.drawable.menu_broadcast,true, "",0));
@@ -781,7 +781,6 @@ public void onItemClick(AdapterView<?> parent, View view, int position,
 
                 case 0:
                     parentLayout.closeDrawer();
-                    //   closeDrawer();
                     try {
                         Intent intent = new Intent(Intent.ACTION_SEND);
                         intent.setType("text/plain");
@@ -876,21 +875,6 @@ public void onClick(View v) {
         button.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                try {
-                    onBuyPressed(2);
-                    // PaymentManager.createIntent(getParentActivity(),false);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        /*  AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setMessage("REMOVE ANNOYING ADS?\nPay once , Use forever!");
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-     *//*   final String arg1 = usePhone;*//*
-        builder.setPositiveButton( "BUY $2.00", new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
                 try {
                     onBuyPressed(2);
                 } catch (Exception e) {
@@ -898,8 +882,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
             }
         });
-        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-        showDialog(builder.create());*/
     }
 
     public void onBuyPressed(int paymentValue) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 514cba6c1..684d7f703 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -44,6 +44,7 @@
 import android.widget.ListView;
 import android.widget.ProgressBar;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.google.gson.Gson;
 import com.paypal.android.sdk.payments.PayPalPayment;
@@ -51,6 +52,8 @@
 import com.paypal.android.sdk.payments.PaymentActivity;
 import com.paypal.android.sdk.payments.PaymentConfirmation;
 
+import org.telegram.calling.*;
+import org.telegram.calling.LoginActivity;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
@@ -158,6 +161,8 @@ public void run() {
                     }
                 }
         );
+
+
     }
 
     @Override
@@ -350,10 +355,6 @@ public void onSearchCollapse() {
                         listView.setEmptyView(emptyView);
                     }
                     if (!onlySelect) {
-                      /*  floatingButton.setVisibility(View.VISIBLE);
-                        floatingHidden = true;
-                        floatingButton.setTranslationY(AndroidUtilities.dp(100));
-                        hideFloatingButton(false);*/
                     }
                     if (listView.getAdapter() != dialogsAdapter) {
                         listView.setAdapter(dialogsAdapter);
@@ -762,36 +763,6 @@ public boolean onTouch(View v, MotionEvent event) {
         progressView = new ProgressBar(context);
         progressView.setVisibility(View.GONE);
         frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
-/*
-
-        floatingButton = new ImageView(context);
-        floatingButton.setVisibility(onlySelect ? View.GONE : View.VISIBLE);
-        floatingButton.setScaleType(ImageView.ScaleType.CENTER);
-        floatingButton.setBackgroundResource(R.drawable.floating_states);
-        floatingButton.setImageResource(R.drawable.floating_pencil);
-        if (Build.VERSION.SDK_INT >= 21) {
-            StateListAnimator animator = new StateListAnimator();
-            animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(floatingButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
-            animator.addState(new int[]{}, ObjectAnimator.ofFloat(floatingButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
-            floatingButton.setStateListAnimator(animator);
-            floatingButton.setOutlineProvider(new ViewOutlineProvider() {
-                @SuppressLint("NewApi")
-                @Override
-                public void getOutline(View view, Outline outline) {
-                    outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
-                }
-            });
-        }
-        frameLayout.addView(floatingButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.BOTTOM, LocaleController.isRTL ? 14 : 0, 0, LocaleController.isRTL ? 0 : 14, 14));
-        floatingButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Bundle args = new Bundle();
-                args.putBoolean("destroyAfterSelect", true);
-                presentFragment(new ContactsActivity(args));
-            }
-        });
-*/
 
         listView.setOnScrollListener(new RecyclerView.OnScrollListener() {
             @Override
@@ -819,28 +790,6 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                     }
                 }
 
-             /*   if (floatingButton.getVisibility() != View.GONE) {
-                    final View topChild = recyclerView.getChildAt(0);
-                    int firstViewTop = 0;
-                    if (topChild != null) {
-                        firstViewTop = topChild.getTop();
-                    }
-                    boolean goingDown;
-                    boolean changed = true;
-                    if (prevPosition == firstVisibleItem) {
-                        final int topDelta = prevTop - firstViewTop;
-                        goingDown = firstViewTop < prevTop;
-                        changed = Math.abs(topDelta) > 1;
-                    } else {
-                        goingDown = firstVisibleItem > prevPosition;
-                    }
-                    if (changed && scrollUpdated) {
-                        hideFloatingButton(goingDown);
-                    }
-                    prevPosition = firstVisibleItem;
-                    prevTop = firstViewTop;
-                    scrollUpdated = true;
-                }*/
             }
         });
 
@@ -1018,22 +967,7 @@ protected void onDialogDismiss(Dialog dialog) {
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-   /*     if (!onlySelect && floatingButton != null) {
-            floatingButton.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
-                @Override
-                public void onGlobalLayout() {
-                    floatingButton.setTranslationY(floatingHidden ? AndroidUtilities.dp(100) : 0);
-                    floatingButton.setClickable(!floatingHidden);
-                    if (floatingButton != null) {
-                        if (Build.VERSION.SDK_INT < 16) {
-                            floatingButton.getViewTreeObserver().removeGlobalOnLayoutListener(this);
-                        } else {
-                            floatingButton.getViewTreeObserver().removeOnGlobalLayoutListener(this);
-                        }
-                    }
-                }
-            });
-        }*/
+
     }
 
     @Override
@@ -1162,14 +1096,7 @@ private void updatePasscodeButton() {
     }
 
     private void hideFloatingButton(boolean hide) {
-      /*  if (floatingHidden == hide) {
-            return;
-        }
-        floatingHidden = hide;
-        ObjectAnimator animator = ObjectAnimator.ofFloat(floatingButton, "translationY", floatingHidden ? AndroidUtilities.dp(100) : 0).setDuration(300);
-        animator.setInterpolator(floatingInterpolator);
-        floatingButton.setClickable(!hide);
-        animator.start();*/
+
     }
 
     private void updateVisibleRows(int mask) {
@@ -1377,7 +1304,6 @@ private void setChatMenuList() {
         drawerList.setOnItemClickListener(new ChatMenuClickListener());
         ((View) view.getParent()).findViewById(R.id.divider).setVisibility(View.INVISIBLE);
         ((View) view.getParent()).findViewById(R.id.bottom_panel).setVisibility(View.INVISIBLE);
-        // ((View) view.getParent()).findViewById(R.id.divider).setBackgroundColor(getParentActivity().getResources().getColor(R.color.divider));
         ((ImageView) ((View) view.getParent()).findViewById(R.id.menu_image)).setImageResource(R.drawable.transparent);
         ((TextView) ((View) view.getParent()).findViewById(R.id.row_title)).setText("");
         ((View) view.getParent()).findViewById(R.id.menu_container).setOnClickListener(new View.OnClickListener() {
@@ -1462,7 +1388,8 @@ public void onItemClick(AdapterView<?> parent, View view, int position,
                     break;
                 case 5:
                     parentLayout.closeDrawer();
-                    openDialog();
+                   // openDialog();
+                   logInToSinch();
                     break;
 
                 case 6:
@@ -1517,22 +1444,7 @@ public void onClick(View v) {
                 }
             }
         });
-        /*  AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setMessage("REMOVE ANNOYING ADS?\nPay once , Use forever!");
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-     *//*   final String arg1 = usePhone;*//*
-        builder.setPositiveButton( "BUY $2.00", new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
-                try {
-                    onBuyPressed(2);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-        showDialog(builder.create());*/
+
     }
 
     public void onBuyPressed(int paymentValue) {
@@ -1550,4 +1462,25 @@ private PayPalPayment getThingToBuy(String paymentIntent, String paymentValue) {
 
     }
 
+
+    public void logInToSinch(){
+        SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+        String userName =   p.getString("social_id","1231313");
+
+        if (userName.isEmpty()) {
+            Toast.makeText(getParentActivity(), "Please enter a name", Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        openPlaceCallActivity();
+    }
+
+
+    private void openPlaceCallActivity() {
+        Intent mainActivity = new Intent(getParentActivity(), org.telegram.calling.PlaceCallActivity.class);
+        getParentActivity().startActivity(mainActivity);
+
+    }
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index 6cce0d312..cbdf8627d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -445,15 +445,7 @@ public int compare(File lhs, File rhs) {
                     return lhs.isDirectory() ? -1 : 1;
                 }
                 return lhs.getName().compareToIgnoreCase(rhs.getName());
-                /*long lm = lhs.lastModified();
-                long rm = lhs.lastModified();
-                if (lm == rm) {
-                    return 0;
-                } else if (lm > rm) {
-                    return -1;
-                } else {
-                    return 1;
-                }*/
+
             }
         });
         for (int a = 0; a < files.length; a++) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index ce9aeec8a..d1767cd8d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -108,24 +108,19 @@
     private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<>();
     private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<>();
     private ViewTreeObserver.OnGlobalLayoutListener onGlobalLayoutListener;
-
     private ActionBarLayout actionBarLayout;
     private ActionBarLayout layersActionBarLayout;
     private ActionBarLayout rightActionBarLayout;
     private FrameLayout shadowTablet;
     private FrameLayout shadowTabletSide;
     private ImageView backgroundTablet;
-  //  protected DrawerLayoutContainer drawerLayoutContainer;
     private DrawerLayoutAdapter drawerLayoutAdapter;
     private PasscodeView passcodeView;
     private AlertDialog visibleDialog;
-
     private Intent passcodeSaveIntent;
     private boolean passcodeSaveIntentIsNew;
     private boolean passcodeSaveIntentIsRestore;
-
     private boolean tabletFullSize;
-
     private Runnable lockRunnable;
     private View parentView;
     private DrawerLayout drawerLayout;
@@ -175,21 +170,14 @@ protected void onCreate(Bundle savedInstanceState) {
 
         actionBarLayout = new ActionBarLayout(this);
 
-/*
-        drawerLayoutContainer = new DrawerLayoutContainer(this);
-        setContentView(drawerLayoutContainer, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-*/
 
         if (AndroidUtilities.isTablet()) {
             getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
-
             RelativeLayout launchLayout = new RelativeLayout(this);
-        //    drawerLayoutContainer.addView(launchLayout);
             FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) launchLayout.getLayoutParams();
             layoutParams1.width = LayoutHelper.MATCH_PARENT;
             layoutParams1.height = LayoutHelper.MATCH_PARENT;
             launchLayout.setLayoutParams(layoutParams1);
-
             backgroundTablet = new ImageView(this);
             backgroundTablet.setScaleType(ImageView.ScaleType.CENTER_CROP);
             backgroundTablet.setImageResource(R.drawable.cats);
@@ -198,13 +186,11 @@ protected void onCreate(Bundle savedInstanceState) {
             relativeLayoutParams.width = LayoutHelper.MATCH_PARENT;
             relativeLayoutParams.height = LayoutHelper.MATCH_PARENT;
             backgroundTablet.setLayoutParams(relativeLayoutParams);
-
             launchLayout.addView(actionBarLayout);
             relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
             relativeLayoutParams.width = LayoutHelper.MATCH_PARENT;
             relativeLayoutParams.height = LayoutHelper.MATCH_PARENT;
             actionBarLayout.setLayoutParams(relativeLayoutParams);
-
             rightActionBarLayout = new ActionBarLayout(this);
             launchLayout.addView(rightActionBarLayout);
             relativeLayoutParams = (RelativeLayout.LayoutParams)rightActionBarLayout.getLayoutParams();
@@ -213,7 +199,6 @@ protected void onCreate(Bundle savedInstanceState) {
             rightActionBarLayout.setLayoutParams(relativeLayoutParams);
             rightActionBarLayout.init(rightFragmentsStack);
             rightActionBarLayout.setDelegate(this);
-
             shadowTabletSide = new FrameLayout(this);
             shadowTabletSide.setBackgroundColor(0x40295274);
             launchLayout.addView(shadowTabletSide);
@@ -221,7 +206,6 @@ protected void onCreate(Bundle savedInstanceState) {
             relativeLayoutParams.width = AndroidUtilities.dp(1);
             relativeLayoutParams.height = LayoutHelper.MATCH_PARENT;
             shadowTabletSide.setLayoutParams(relativeLayoutParams);
-
             shadowTablet = new FrameLayout(this);
             shadowTablet.setVisibility(View.GONE);
             shadowTablet.setBackgroundColor(0x7F000000);
@@ -277,7 +261,6 @@ public void onClick(View v) {
             layersActionBarLayout.setLayoutParams(relativeLayoutParams);
             layersActionBarLayout.init(layerFragmentsStack);
             layersActionBarLayout.setDelegate(this);
-       //     layersActionBarLayout.setDrawerLayoutContainer(drawerLayoutContainer);
             layersActionBarLayout.setVisibility(View.GONE);
         } else {
 
@@ -297,37 +280,22 @@ public void onClick(View v) {
             actionBarLayout.setDrawerlayout(drawerLayout);
             setTabEnableDisable(true,false,true);
 
-
-     //       drawerLayoutContainer.addView(actionBarLayout, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
         }
 
 
         parentView.findViewById(R.id.contact).setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                /*if(ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getBoolean("Login_Status",true)) {
-                    ArrayList<CustomHttpParams> paramse = new ArrayList();//todo ram
-                    paramse.add(new CustomHttpParams("uniqueId", Util.getNumber(UserConfig.getCurrentUser().phone)));
-                    BackgroundExecuter.getInstance().execute(new GetUserRequester(paramse, LaunchActivity.this));
-                }*/
                 presentFragment(new ContactsActivity(null), true, true);
                 setTabEnableDisable(false, true, true);
 
-                //      drawerLayoutContainer.closeDrawer(false);
-
             }
         });
         parentView.findViewById(R.id.setting).setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                /*if(ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getBoolean("Login_Status",true)) {
-                    ArrayList<CustomHttpParams> paramse = new ArrayList();//todo ram
-                    paramse.add(new CustomHttpParams("uniqueId", Util.getNumber(UserConfig.getCurrentUser().phone)));
-                    BackgroundExecuter.getInstance().execute(new GetUserRequester(paramse, LaunchActivity.this));
-                }*/
                 presentFragment(new SettingsActivity(),true,true);
                 setTabEnableDisable(true, true, false);
-                //     drawerLayoutContainer.closeDrawer(false);
 
             }
         });
@@ -347,102 +315,16 @@ public void onClick(View v) {
                 presentFragment(new DialogsActivity(null),true,true);
                setTabEnableDisable(true,false,true);
 
-//                drawerLayoutContainer.closeDrawer(false);
-
-            }
-        });
-
-
-
-       /* ListView listView = new ListView(this) {
-            @Override
-            public boolean hasOverlappingRendering() {
-                return false;
-            }
-        };
-        listView.setBackgroundColor(0xffffffff);
-        listView.setAdapter(drawerLayoutAdapter = new DrawerLayoutAdapter(this));
-        listView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-//        drawerLayoutContainer.setDrawerLayout(listView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        Point screenSize = AndroidUtilities.getRealScreenSize();
-        layoutParams.width = AndroidUtilities.isTablet() ? AndroidUtilities.dp(320) : Math.min(AndroidUtilities.dp(320), Math.min(screenSize.x, screenSize.y) - AndroidUtilities.dp(56));
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                if (position == 2) {
-                    if (!MessagesController.isFeatureEnabled("chat_create", actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1))) {
-                        return;
-                    }
-                    presentFragment(new GroupCreateActivity());
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 3) {
-                    Bundle args = new Bundle();
-                    args.putBoolean("onlyUsers", true);
-                    args.putBoolean("destroyAfterSelect", true);
-                    args.putBoolean("createSecretChat", true);
-                    args.putBoolean("allowBots", false);
-                    presentFragment(new ContactsActivity(args));
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 4) {
-                    if (!MessagesController.isFeatureEnabled("broadcast_create", actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1))) {
-                        return;
-                    }
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    if (preferences.getBoolean("channel_intro", false)) {
-                        Bundle args = new Bundle();
-                        args.putInt("step", 0);
-                        presentFragment(new ChannelCreateActivity(args));
-                    } else {
-                        presentFragment(new ChannelIntroActivity());
-                        preferences.edit().putBoolean("channel_intro", true).commit();
-                    }
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 6) {
-                    presentFragment(new ContactsActivity(null));
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 7) {
-                    try {
-                        Intent intent = new Intent(Intent.ACTION_SEND);
-                        intent.setType("text/plain");
-                        intent.putExtra(Intent.EXTRA_TEXT, ContactsController.getInstance().getInviteText());
-                        startActivityForResult(Intent.createChooser(intent, LocaleController.getString("InviteFriends", R.string.InviteFriends)), 500);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 8) {
-                    presentFragment(new SettingsActivity());
-                    drawerLayoutContainer.closeDrawer(false);
-                } else if (position == 9) {
-                    Browser.openUrl(LaunchActivity.this, LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
-                    drawerLayoutContainer.closeDrawer(false);
-                }
             }
         });
 
 
-        drawerLayoutContainer.setParentActionBarLayout(actionBarLayout);
-        actionBarLayout.setDrawerLayoutContainer(drawerLayoutContainer);
-       */
         actionBarLayout.init(mainFragmentsStack);
         actionBarLayout.setDelegate(this);
 
         ApplicationLoader.loadWallpaper();
 
         passcodeView = new PasscodeView(this);
-//        drawerLayoutContainer.addView(passcodeView);
-/*        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) passcodeView.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        passcodeView.setLayoutParams(layoutParams1);*/
-
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeOtherAppActivities, this);
         currentConnectionState = ConnectionsManager.getInstance().getConnectionState();
 
@@ -464,21 +346,11 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                 drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
                 actionBarLayout.setPadding(0,0,0,0);
                 actionBarLayout.addFragmentToStack(new LoginActivity());
-                /*  actionBarLayout.addFragmentToStack(new LoginActivity());
-                drawerLayoutContainer.setAllowOpenDrawer(false, false);
-                */
-
-
 
             } else {
 
                 actionBarLayout.addFragmentToStack(new DialogsActivity(null));
-               // setTabEnableDisable(true, false, true);
-
-                // drawerLayoutContainer.setAllowOpenDrawer(true, false);
-                /*   actionBarLayout.addFragmentToStack(new DialogsActivity(null));
-                drawerLayoutContainer.setAllowOpenDrawer(true, false);*/
-            }
+        }
 
             try {
                 if (savedInstanceState != null) {
@@ -555,7 +427,6 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             if (actionBarLayout.fragmentsStack.size() == 1 && actionBarLayout.fragmentsStack.get(0) instanceof LoginActivity) {
                 allowOpen = false;
             }
-       //     drawerLayoutContainer.setAllowOpenDrawer(allowOpen, false);
         }
 
         handleIntent(getIntent(), false, savedInstanceState != null, false);
@@ -584,7 +455,6 @@ private void showPasscodeActivity() {
         }
         passcodeView.onShow();
         UserConfig.isWaitingForPasscodeEnter = true;
-    //    drawerLayoutContainer.setAllowOpenDrawer(false, false);
         passcodeView.setDelegate(new PasscodeView.PasscodeViewDelegate() {
             @Override
             public void didAcceptedPassword() {
@@ -593,7 +463,6 @@ public void didAcceptedPassword() {
                     handleIntent(passcodeSaveIntent, passcodeSaveIntentIsNew, passcodeSaveIntentIsRestore, true);
                     passcodeSaveIntent = null;
                 }
-   //             drawerLayoutContainer.setAllowOpenDrawer(true, false);
                 actionBarLayout.showLastFragment();
                 if (AndroidUtilities.isTablet()) {
                     layersActionBarLayout.showLastFragment();
@@ -1132,9 +1001,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                 if (AndroidUtilities.isTablet()) {
                     actionBarLayout.showLastFragment();
                     rightActionBarLayout.showLastFragment();
-                //    drawerLayoutContainer.setAllowOpenDrawer(false, false);
                 } else {
-             //       drawerLayoutContainer.setAllowOpenDrawer(true, false);
                 }
                 pushOpened = true;
             }
@@ -1144,22 +1011,18 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                     if (!UserConfig.isClientActivated()) {
                         if (layersActionBarLayout.fragmentsStack.isEmpty()) {
                             layersActionBarLayout.addFragmentToStack(new LoginActivity());
-                    //        drawerLayoutContainer.setAllowOpenDrawer(false, false);
                         }
                     } else {
                         if (actionBarLayout.fragmentsStack.isEmpty()) {
                             actionBarLayout.addFragmentToStack(new DialogsActivity(null));
-                       //     drawerLayoutContainer.setAllowOpenDrawer(true, false);
                         }
                     }
                 } else {
                     if (actionBarLayout.fragmentsStack.isEmpty()) {
                         if (!UserConfig.isClientActivated()) {
                             actionBarLayout.addFragmentToStack(new LoginActivity());
-                         //   drawerLayoutContainer.setAllowOpenDrawer(false, false);
                         } else {
                             actionBarLayout.addFragmentToStack(new DialogsActivity(null));
-                       //     drawerLayoutContainer.setAllowOpenDrawer(true, false);
                         }
                     }
                 }
@@ -1519,9 +1382,7 @@ public void didSelectDialog(DialogsActivity dialogsFragment, long dialog_id, boo
                     } else {
                         actionBarLayout.addFragmentToStack(fragment, actionBarLayout.fragmentsStack.size() - 1);
 
-                        //<editor-fold desc="Description">
                     }
-                    //</editor-fold>
 
                     if (!fragment.openVideoEditor(videoPath, dialogsFragment != null, false) && dialogsFragment != null) {
                         if (!AndroidUtilities.isTablet()) {
@@ -1935,37 +1796,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 mainFragmentsStack.get(mainFragmentsStack.size() - 1).showDialog(builder.create());
             }
         } else if (id == NotificationCenter.wasUnableToFindCurrentLocation) {
-            /*final HashMap<String, MessageObject> waitingForLocation = (HashMap<String, MessageObject>) args[0];
-            AlertDialog.Builder builder = new AlertDialog.Builder(this);
-            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-            builder.setNegativeButton(LocaleController.getString("ShareYouLocationUnableManually", R.string.ShareYouLocationUnableManually), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
-                    if (mainFragmentsStack.isEmpty()) {
-                        return;
-                    }
-                    BaseFragment lastFragment = mainFragmentsStack.get(mainFragmentsStack.size() - 1);
-                    if (!AndroidUtilities.isGoogleMapsInstalled(lastFragment)) {
-                        return;
-                    }
-                    LocationActivity fragment = new LocationActivity();
-                    fragment.setDelegate(new LocationActivity.LocationActivityDelegate() {
-                        @Override
-                        public void didSelectLocation(TLRPC.MessageMedia location) {
-                            for (HashMap.Entry<String, MessageObject> entry : waitingForLocation.entrySet()) {
-                                MessageObject messageObject = entry.getValue();
-                                SendMessagesHelper.getInstance().sendMessage(location, messageObject.getDialogId(), messageObject, null, null);
-                            }
-                        }
-                    });
-                    presentFragment(fragment);
-                }
-            });
-            builder.setMessage(LocaleController.getString("ShareYouLocationUnable", R.string.ShareYouLocationUnable));
-            if (!mainFragmentsStack.isEmpty()) {
-                mainFragmentsStack.get(mainFragmentsStack.size() - 1).showDialog(builder.create());
-            }*/
+
         }
     }
 
@@ -2161,14 +1992,7 @@ public boolean onKeyUp(int keyCode, @NonNull KeyEvent event) {
                 }
             } else {
                 if (actionBarLayout.fragmentsStack.size() == 1) {
-                   /* if (!drawerLayoutContainer.isDrawerOpened()) {
-                        if (getCurrentFocus() != null) {
-                            AndroidUtilities.hideKeyboard(getCurrentFocus());
-                        }
-                        drawerLayoutContainer.openDrawer(false);
-                    } else {
-                        drawerLayoutContainer.closeDrawer(false);
-                    }*/
+
                 } else {
                     actionBarLayout.onKeyUp(keyCode, event);
                 }
@@ -2180,7 +2004,6 @@ public boolean onKeyUp(int keyCode, @NonNull KeyEvent event) {
     @Override
     public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-        //    drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
             if (fragment instanceof DialogsActivity) {
                 DialogsActivity dialogsActivity = (DialogsActivity)fragment;
                 if (dialogsActivity.isMainDialogList() && layout != actionBarLayout) {
@@ -2188,7 +2011,6 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
                     actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
                     layersActionBarLayout.removeAllFragments();
                     layersActionBarLayout.setVisibility(View.GONE);
-           //         drawerLayoutContainer.setAllowOpenDrawer(true, false);
                     if (!tabletFullSize) {
                         shadowTabletSide.setVisibility(View.VISIBLE);
                         if (rightActionBarLayout.fragmentsStack.isEmpty()) {
@@ -2261,7 +2083,6 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
             }
             return true;
         } else {
-        //    drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity), false);
             return true;
         }
     }
@@ -2269,7 +2090,6 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
     @Override
     public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-         //   drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity || fragment instanceof CountrySelectActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
             if (fragment instanceof DialogsActivity) {
                 DialogsActivity dialogsActivity = (DialogsActivity)fragment;
                 if (dialogsActivity.isMainDialogList() && layout != actionBarLayout) {
@@ -2367,7 +2187,6 @@ public void onRebuildAllFragments(ActionBarLayout layout) {
                 actionBarLayout.showLastFragment();
             }
         }
-//        drawerLayoutAdapter.notifyDataSetChanged();
     }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 6f39308d3..e9c42a8af 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -1122,7 +1122,6 @@ protected void onDraw(Canvas canvas) {
         private TextView problemText;
         private Bundle currentParams;
         private ProgressView progressView;
-
         private Timer timeTimer;
         private Timer codeTimer;
         private int openTime;
@@ -2593,4 +2592,9 @@ public void restoreStateParams(Bundle bundle) {
             }
         }
     }
+
+
+
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MyProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MyProfileActivity.java
index e8160e2d3..246c43e8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MyProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MyProfileActivity.java
@@ -87,14 +87,9 @@ public View createView(final Context context) {
         hideTabsAnsMenu();
         mcContext = context;
         currentUser = UserConfig.getCurrentUser();
-        //actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setBackButtonImage(0x00000000);//todo
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("myprofile", R.string.myprofile));
-
-        /* ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-*/
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
@@ -105,9 +100,7 @@ public void onItemClick(int id) {
         });
 
         avatarContainer = new FrameLayout(context);
-        /* avatarContainer.setBackgroundResource(R.drawable.bar_selector);*/
         avatarContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
-
         fragmentView = View.inflate(context, R.layout.myprofile_layout, null);
         location = (RelativeLayout)fragmentView.findViewById(R.id.location);
         country_txt= (TextView)fragmentView.findViewById(R.id.id_country) ;
@@ -136,8 +129,7 @@ public void onClick(View view) {
                 fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
                     @Override
                     public void didSelectCountry(String name) {
-                        //   cName = name;
-                        ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit().putString("country",name).commit();;
+                        ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit().putString("country",name).commit();
                         country_txt.setText(name);
                     }
                 });
@@ -151,12 +143,8 @@ public void didSelectCountry(String name) {
         save_btn.setOnClickListener(this);
         checkAndUpdateAvatar();
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
-
-        //country_txt.setText(preferences.getString("country","Indonesia"));
-
         CountryAdapter.Country cu = Util.getcountry(preferences.getString("country","Indonesia"));
         country_txt.setText(cu.name);
-
         calendar = Calendar.getInstance();
         year = calendar.get(Calendar.YEAR);
         month = calendar.get(Calendar.MONTH);
@@ -257,11 +245,9 @@ public void onDateSet(DatePicker view, int year1,
                 currentUser =UserConfig.getCurrentUser();
 
                 TLRPC.TelegramUsers newuser = new TLRPC.TelegramUsers();
-                //String dob =Util.convertDate(p.getString("dob",showDate(year,month,day)));
                 newuser.setDob(Util.convertDate(p.getString("dob","2000-02-02")));
                 newuser.setSex(p.getString("sex",getGender()));
                 newuser.setId(currentUser.id+"");
-                // p.edit().putString("country",name).commit();
                 CountryAdapter.Country cu =getcountry((ApplicationLoader.
                         applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getString("country","india")));
                 newuser.setcCode(cu.shortname);
@@ -269,15 +255,7 @@ public void onDateSet(DatePicker view, int year1,
                 newuser.setPhoto(currentUser.photo);
                 newuser.setPhone(currentUser.phone);
                 newuser.setUsername(currentUser.username!=null?currentUser.username:currentUser.first_name);
-
-
                 BackgroundExecuter.getInstance().execute(new AddUserRequester(newuser,null));
-
-                SharedPreferences sp = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
-
-                String mob  =  sp.getString("mob","9888888");
-                String cc   =   sp.getString("cCode","US");
-       //         BackgroundExecuter.getInstance().execute(new GetKarmaBalanceRequester(mob,cc,this));
                 finishFragment();
                 break;
         }
@@ -338,7 +316,6 @@ private void checkAndUpdateAvatar() {
             object.thumb = object.imageReceiver.getBitmap();
             object.size = -1;
             object.radius = avatarImageView.getImageReceiver().getRoundRadius();
-         //   object.scale = ViewProxy.getScaleX(avatarImageView);
             return object;
         }
         return null;
@@ -390,10 +367,6 @@ public void updatePhotoAtIndex(int index) {
 
     }
 
-    /*private String showDate(int year, int month, int day) {
-        return (new StringBuilder().append(year+"").append("-")
-                .append(Util.getMonth(month)).append("-").append(day+"".length()==1?"0"+day:day+"")).toString();
-    }*/
 
     private String getDatetoserver(int year, int month, int day) {
         return (new StringBuilder().append(year+"").append("-")
@@ -415,17 +388,7 @@ public void onClick(DialogInterface dialog, int item) {
 
             }
         });
-   /*     alt_bld.setPositiveButton("ok", new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                if(fragmentView !=null){
-                    ApplicationLoader.applicationContext.
-                            getSharedPreferences("socialuser", Activity.MODE_PRIVATE).edit().putString("sex",getGender()).commit();
-                    gender_txt.setText(items[selectedgender]);
-                }
 
-            }
-        });*/
         AlertDialog alert = alt_bld.create();
         alert.show();
         alert.setCancelable(false);
@@ -437,7 +400,6 @@ private String getGender(){
     public CountryAdapter.Country getcountry(String name){
         CountryAdapter k = new CountryAdapter(mcContext);
         HashMap<String, ArrayList<CountryAdapter.Country>> countries = k.getCountries();
-    //    ArrayList<String> sortedCountries = k.getSortedCountries();
         String s = name.substring(0,1).toUpperCase();
         ArrayList<CountryAdapter.Country> dd = countries.get(s);
         for(CountryAdapter.Country selectcountry:dd){
@@ -460,11 +422,7 @@ private boolean dateValidater(int yr,int mn,int dt){
             Calendar calendar = Calendar.getInstance();
             calendar.set(yr, mn, dt);
             long startDate = calendar.getTimeInMillis();
-            if(startDate > Calendar.getInstance().getTimeInMillis()){
-                return false;
-            } else {
-                return true;
-            }
+            return startDate <= Calendar.getInstance().getTimeInMillis();
         } catch (Exception e) {
             e.printStackTrace();
             return false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index d00cdbb12..0828e398b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -176,20 +176,6 @@ public void onItemClick(int id) {
             }
         });
 
-        /*fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-
-        listView = new ListView(context);
-        listView.setDivider(null);
-        listView.setDividerHeight(0);
-        listView.setVerticalScrollBarEnabled(false);
-        frameLayout.addView(listView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        listView.setLayoutParams(layoutParams);
-        listView.setAdapter(new ListAdapter(context));
-        */
 
 
         fragmentView =View.inflate(context, R.layout.settings_layout, null);
@@ -388,33 +374,7 @@ public void run() {
                     } else {
                         ApplicationLoader.stopPushService();
                     }
-                    /*if (!enabled) {
 
-                    } else {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("NotificationsServiceDisableInfo", R.string.NotificationsServiceDisableInfo));
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-
-                                final SharedPreferences.Editor editor = preferences.edit();
-                                editor.putBoolean("pushService", false);
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                ((TextCheckCell) view).setChecked(true);
-                            }
-                        });
-                        showDialog(builder.create());
-                    }*/
                 } else if (i == messageLedRow || i == groupLedRow) {
                     if (getParentActivity() == null) {
                         return;
@@ -611,27 +571,7 @@ public void onResume() {
     }
 
     public void updateServerNotificationsSettings(boolean group) {
-        //disable global settings sync
-        /*SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
-        req.settings = new TLRPC.TL_inputPeerNotifySettings();
-        req.settings.sound = "default";
-        req.settings.events_mask = 0;
-        if (!group) {
-            req.peer = new TLRPC.TL_inputNotifyUsers();
-            req.settings.mute_until = preferences.getBoolean("EnableAll", true) ? 0 : Integer.MAX_VALUE;
-            req.settings.show_previews = preferences.getBoolean("EnablePreviewAll", true);
-        } else {
-            req.peer = new TLRPC.TL_inputNotifyChats();
-            req.settings.mute_until = preferences.getBoolean("EnableGroup", true) ? 0 : Integer.MAX_VALUE;
-            req.settings.show_previews = preferences.getBoolean("EnablePreviewGroup", true);
-        }
-        ConnectionsManager.getInstance().sendRequest(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
 
-            }
-        });*/
     }
 
     @Override
@@ -925,8 +865,4 @@ public boolean isEmpty() {
     }
 
 
-    ////////////////////////////////////////////////////////////////
-
-
-
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/OsmLocation.java b/TMessagesProj/src/main/java/org/telegram/ui/OsmLocation.java
index 43bf8b119..890da4415 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/OsmLocation.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/OsmLocation.java
@@ -54,8 +54,8 @@
     private TextView distanceTextView;
     private Location userLocation;
 
-    public static interface LocationActivityDelegate {
-        public abstract void didSelectLocation(TLRPC.TL_messageMediaGeo location);
+    public interface LocationActivityDelegate {
+        void didSelectLocation(TLRPC.TL_messageMediaGeo location);
     }
 
     @Override
@@ -132,12 +132,6 @@ public boolean onItemLongPress(int index, OverlayItem item) {
             if (lastLocation == null) {
                 if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                     // TODO: Consider calling
-                    //    ActivityCompat#requestPermissions
-                    // here to request the missing permissions, and then overriding
-                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
-                    //                                          int[] grantResults)
-                    // to handle the case where the user grants the permission. See the documentation
-                    // for ActivityCompat#requestPermissions for more details.
                     return;
                 }
                 lastLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index abf4404cf..d753ff9db 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -142,19 +142,14 @@
     private AvatarUpdater avatarUpdater = new AvatarUpdater();
     private View extraHeightView;
     private View shadowView;
-
     private int extraHeight;
-
     private int overscrollRow;
     private int emptyRow;
     private int numberSectionRow;
-  //  private int numberRow;
     private int myprofileRow;
     private int premiumFeature;
-
     private int preferencerow;
     private int adsFreeRow;
-  //  private int usernameRow;
     private int settingsSectionRow;
     private int settingsSectionRow2;
     private int enableAnimationsRow;
@@ -192,7 +187,6 @@
     private int autoplayGifsRow;
     private int rowCount;
     private int contactUsRow;
-
     private final static int edit_name = 1;
     private final static int logout = 2;
     private int bal;
@@ -208,9 +202,7 @@ public void run() {
                  listView.invalidateViews();
              }
          });
-        //    listView.invalidateViews();
-        }
-    }
+        }  }
 
     @Override
     public void onGetKarmaFailure() {
@@ -218,20 +210,13 @@ public void onGetKarmaFailure() {
         getParentActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
-              //  Toast.makeText(getParentActivity(),"Error in update balance",Toast.LENGTH_SHORT).show();
-            }
-        });
-
-    }
+            }}); }
 
     @Override
     public void onKarmaDeductSuccess() {
-
     }
-
     @Override
     public void onKarmaDeductFailed() {
-
     }
 
     private static class LinkMovementMethodMy extends LinkMovementMethod {
@@ -300,17 +285,13 @@ public void run() {
                             });
                         }
                     }
-                });
-            }
+                });       }
         };
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-
         rowCount = 0;
         overscrollRow = rowCount++;
         emptyRow = rowCount++;
         numberSectionRow = rowCount++;
-      /*  numberRow = rowCount++;
-        usernameRow = rowCount++;*/
           myprofileRow = rowCount++;
           preferencerow = rowCount++;
           premiumFeature=rowCount++;
@@ -320,9 +301,6 @@ public void run() {
                 && (!UserPaymentInfo.getInstatance().getUserId().equalsIgnoreCase("")) ){
             adsFreeRow=rowCount--;
         }
-
-
-
         settingsSectionRow = rowCount++;
         settingsSectionRow2 = rowCount++;
         notificationRow = rowCount++;
@@ -351,31 +329,18 @@ public void run() {
         supportSectionRow = rowCount++;
         supportSectionRow2 = rowCount++;
         contactUsRow = rowCount++;
-        /*askQuestionRow = rowCount++;
-        telegramFaqRow = rowCount++;
-        privacyPolicyRow = rowCount++;*/
+
         if (BuildVars.DEBUG_VERSION) {
             sendLogsRow = rowCount++;
             clearLogsRow = rowCount++;
             switchBackendButtonRow = rowCount++;
         }
         versionRow = rowCount++;
-        //contactsSectionRow = rowCount++;
-        //contactsReimportRow = rowCount++;9990243020
-        //contactsSortRow = rowCount++;
-        MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid, true);
-
-      ////just testing /////////////////////
 
+        MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid, true);
         SharedPreferences sp = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
+        BackgroundExecuter.getInstance().execute(new GetKarmaBalanceRequester( sp.getString("mob","9888888"),sp.getString("cCode","US"),this));
 
-        String mob  =  sp.getString("mob","9888888");
-        String cc   =   sp.getString("cCode","US");
-
-
-       BackgroundExecuter.getInstance().execute(new GetKarmaBalanceRequester(mob,cc,this));
-
-     // BackgroundExecuter.getInstance().execute(new DeductKarmaRequester(new CreditModel("VIDEO_ADS","8978690567",cc),SettingsActivity.this));
 
 
         return true;
@@ -396,42 +361,12 @@ public void onFragmentDestroy() {
     public View createView(Context context) {
         actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(5));
         actionBar.setItemsBackgroundColor(AvatarDrawable.getButtonColorForId(5));
-        actionBar.setBackButtonImage(0/*R.drawable.ic_ab_back*/);
+        actionBar.setBackButtonImage(0);
         actionBar.setAddToContainer(false);
         extraHeight = 88;
         if (AndroidUtilities.isTablet()) {
             actionBar.setOccupyStatusBar(false);
         }
-       /* actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    finishFragment();
-                } else if (id == edit_name) {
-                    presentFragment(new ChangeNameActivity());
-                } else if (id == logout) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.getString("AreYouSureLogout", R.string.AreYouSureLogout));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            MessagesController.getInstance().performLogout(true);
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                }
-            }
-        });
-        ActionBarMenu menu = actionBar.createMenu();
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
-        item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
-        item.addSubItem(logout, LocaleController.getString("LogOut", R.string.LogOut), 0);
-*/
         listAdapter = new ListAdapter(context);
 
         fragmentView = new FrameLayout(context) {
@@ -454,7 +389,6 @@ protected boolean drawChild(@NonNull Canvas canvas, @NonNull View child, long dr
                                 break;
                             }
                         }
-                //        parentLayout.drawHeaderShadow(canvas, actionBarHeight);
                     }
                     return result;
                 } else {
@@ -469,18 +403,11 @@ protected boolean drawChild(@NonNull Canvas canvas, @NonNull View child, long dr
         listView.setDividerHeight(0);
         listView.setVerticalScrollBarEnabled(false);
         AndroidUtilities.setListViewEdgeEffectColor(listView, AvatarDrawable.getProfileBackColorForId(5));
-       // frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
-
-
-
         LinearLayout.LayoutParams layout = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
         layout.setMargins(0, 0, 0, 0);
         frameLayout.setLayoutParams(layout);
         frameLayout.addView(listView);
 
-
-
-
         listView.setAdapter(listAdapter);
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
@@ -531,55 +458,17 @@ else if(i==premiumFeature){
 
                     PaymentManager.createIntent(getParentActivity(),false);
 
-
-
-                    /*SharedPreferences pp  = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
-                    if(false*//*pp.getString("social_id","").equals("")*//*) {
-                        presentFragment(new MyProfileActivity());
-                    }
-                    else
-                    {
-                        if(UserPaymentInfo.getInstatance().getPaymentStatus() ==UserPaymentInfo.paidUser  && (!UserPaymentInfo.getInstatance().getUserId().equalsIgnoreCase("")) ){
-                            Toast.makeText(getParentActivity(),"YOU HAVE ALREADY SUBSCRIBED",Toast.LENGTH_SHORT).show();
-                        }else {
-                            PaymentManager.createIntent(getParentActivity());
-                        }
-
-                        // PaymentManager.createIntent(getParentActivity());
-                    }*/
                 }
 
                 else if(i==adsFreeRow){
                     ApplicationLoader.getInstance().trackEvent("Clicked on Ads Free ","clicked","want to be ads free user");
 
                     openDialog();
-                    //TODO
-                  //  PaymentManager.createIntent(getParentActivity(),true);
-                  //  PaymentManager.createIntent(SettingsActivity.this);
                 }
 
 
                 else if (i == askQuestionRow) {
-                  /*  if (getParentActivity() == null) {
-                        return;
-                    }
-                    final TextView message = new TextView(getParentActivity());
-                    message.setText(Html.fromHtml(LocaleController.getString("AskAQuestionInfo", R.string.AskAQuestionInfo)));
-                    message.setTextSize(18);
-                    message.setLinkTextColor(Theme.MSG_LINK_TEXT_COLOR);
-                    message.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(5), AndroidUtilities.dp(8), AndroidUtilities.dp(6));
-                    message.setMovementMethod(new LinkMovementMethodMy());
 
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setView(message);
-                    builder.setPositiveButton(LocaleController.getString("AskButton", R.string.AskButton), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            performAskAQuestion();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());*/
                 } else if (i == sendLogsRow) {
                     sendLogs();
                 } else if (i == clearLogsRow) {
@@ -638,16 +527,13 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     showDialog(builder.create());
                 } else if (i == telegramFaqRow) {
-                    //Browser.openUrl(getParentActivity(), LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
                 } else if (i == privacyPolicyRow) {
-                  //  Browser.openUrl(getParentActivity(), LocaleController.getString("PrivacyPolicyUrl", R.string.PrivacyPolicyUrl));
                 }
 
                 else if(i == contactUsRow){
                     sendMail();
                 }
                 else if (i == contactsReimportRow) {
-                    //not implemented
                 } else if (i == contactsSortRow) {
                     if (getParentActivity() == null) {
                         return;
@@ -780,11 +666,7 @@ public void onClick(View v) {
                     linearLayout.addView(cell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
                     builder.setCustomView(linearLayout);
                     showDialog(builder.create());
-                } /*else if (i == usernameRow) {
-                    presentFragment(new ChangeUsernameActivity());
-                } else if (i == numberRow) {
-                    presentFragment(new ChangePhoneHelpActivity());
-                }*/
+                }
 
                 else if (i == preferencerow) {
                     SharedPreferences pp  = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
@@ -982,7 +864,6 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun
                 View child = view.getChildAt(0);
                 if (child != null) {
                     if (firstVisibleItem == 0) {
-                //        height = AndroidUtilities.dp(88) + (child.getTop() < 0 ? child.getTop() : 0);
                     }
                     if (extraHeight != height) {
                         extraHeight = height;
@@ -1163,7 +1044,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                         data.getParcelableExtra(PaymentActivity.EXTRA_RESULT_CONFIRMATION);
                 if (confirm != null) {
                     try {
-                        Gson gson = new Gson(); // new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
+                        Gson gson = new Gson();
                         PaymentResponse response = gson.fromJson(confirm.toJSONObject().toString(), PaymentResponse.class);
                         UserPaymentInfo.getInstatance().setPaymentId(response.getResponse().getId());
                         UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.paidUser);
@@ -1211,28 +1092,12 @@ public void onClick(View v) {
                 try {
                     onBuyPressed(2);
                     dialog.dismiss();
-                    // PaymentManager.createIntent(getParentActivity(),false);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
             }
         });
-        /*  AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setMessage("REMOVE ANNOYING ADS?\nPay once , Use forever!");
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-     *//*   final String arg1 = usePhone;*//*
-        builder.setPositiveButton( "BUY $2.00", new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialogInterface, int i) {
-                try {
-                    onBuyPressed(2);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-        showDialog(builder.create());*/
+
     }
 
 
@@ -1302,7 +1167,7 @@ public void onConfigurationChanged(Configuration newConfig) {
 
     private void needLayout() {
         FrameLayout.LayoutParams layoutParams;
-        int newTop = 0;//(actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight();
+        int newTop = 0;
         if (listView != null) {
             layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
             if (layoutParams.topMargin != newTop) {
@@ -1320,8 +1185,8 @@ private void needLayout() {
 
             writeButton.setTranslationY((actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight() + extraHeight - AndroidUtilities.dp(29.5f));
 
-            final boolean setVisible = true;//diff > 0.2f;
-            boolean currentVisible = false;//writeButton.getTag() == null;
+            final boolean setVisible = true;
+            boolean currentVisible = false;
             if (setVisible != currentVisible) {
                 if (setVisible) {
                     writeButton.setTag(null);
@@ -1527,23 +1392,17 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setText("Send Logs", true);
                 } else if (i == clearLogsRow) {
                     textCell.setText("Clear Logs", true);
-                }/* else if (i == askQuestionRow) {
-                    textCell.setText(LocaleController.getString("AskAQuestion", R.string.AskAQuestion), true);
-                }*/ else if (i == privacyRow) {
+                } else if (i == privacyRow) {
                     textCell.setText(LocaleController.getString("PrivacySettings", R.string.PrivacySettings), true);
                 } else if (i == switchBackendButtonRow) {
                     textCell.setText("Switch Backend", true);
-                }/* else if (i == telegramFaqRow) {
-                    textCell.setText(LocaleController.getString("TelegramFAQ", R.string.TelegramFaq), true);
-                }*/ else if (i == contactsReimportRow) {
+                } else if (i == contactsReimportRow) {
                     textCell.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts), true);
                 } else if (i == stickersRow) {
                     textCell.setText(LocaleController.getString("Stickers", R.string.Stickers), true);
                 } else if (i == cacheRow) {
                     textCell.setText(LocaleController.getString("CacheSettings", R.string.CacheSettings), true);
-                }/* else if (i == privacyPolicyRow) {
-                    textCell.setText(LocaleController.getString("PrivacyPolicy", R.string.PrivacyPolicy), true);
-                }*/
+                }
                 else if(i == contactUsRow) {
                     textCell.setText(LocaleController.getString("ContactUs", R.string.ContactUs), true);
                 }
@@ -1583,7 +1442,6 @@ else if(i == contactUsRow) {
                     ((HeaderCell) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
                 } else if (i == numberSectionRow) {
                     ((HeaderCell) view).setText(LocaleController.getString("socialsetting", R.string.socialsetting));
-                 // ((HeaderCell) view).setText(LocaleController.getString("Info", R.string.Info));
                 }
             } else if (type == 5) {
                 if (view == null) {
@@ -1669,25 +1527,7 @@ else if(i == contactUsRow) {
                         text = LocaleController.getString("NoMediaAutoDownload", R.string.NoMediaAutoDownload);
                     }
                     textCell.setTextAndValue(value, text, true);
-                } /*else if (i == numberRow) {
-                    TLRPC.User user = UserConfig.getCurrentUser();
-                    String value;
-                    if (user != null && user.phone != null && user.phone.length() != 0) {
-                        value = PhoneFormat.getInstance().format("+" + user.phone);
-                    } else {
-                        value = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
-                    }
-                    textCell.setTextAndValue(value, LocaleController.getString("Phone", R.string.Phone), true);
-                } else if (i == usernameRow) {
-                    TLRPC.User user = UserConfig.getCurrentUser();
-                    String value;
-                    if (user != null && user.username != null && user.username.length() != 0) {
-                        value = "@" + user.username;
-                    } else {
-                        value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
-                    }
-                    textCell.setTextAndValue(value, LocaleController.getString("Username", R.string.Username), false);
-                }*/
+                }
             }
 
             else if(type == 7){
@@ -1729,7 +1569,7 @@ public int getItemViewType(int i) {
                 return 2;
             } else if (i == versionRow) {
                 return 5;
-            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow /*||*/ /*i == numberRow || i == usernameRow*/) {
+            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow ) {
                 return 6;
             } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2) {
                 return 4;
@@ -1755,21 +1595,15 @@ public boolean isEmpty() {
 
 
 
-    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
     private void setSettingMenuList(){
         ArrayList<MenuItems> draweritems=new ArrayList<MenuItems>();
         draweritems.add(new MenuItems(LocaleController.getString("Edit", R.string.Edit),R.drawable.menu_bar_edit,true, "",0));
-        //   draweritems.add(new MenuItems(LocaleController.getString("AskAQuestion", R.string.AskAQuestion), R.drawable.menu_faq, true, "",1));
-        //    draweritems.add(new MenuItems(LocaleController.getString("TelegramFaq", R.string.TelegramFaq),R.drawable.menu_faq,true, "",2));
         draweritems.add(new MenuItems(LocaleController.getString("preferences", R.string.preferences),R.drawable.menu_pref,true, "",3));
-
-//        draweritems.add(new MenuItems("Get More Karmas",R.drawable.ic_premium,true, getKarmaBal(),4));
         if(UserPaymentInfo.getInstatance().getPaymentStatus() != UserPaymentInfo.paidUser
                 && (!UserPaymentInfo.getInstatance().getUserId().equalsIgnoreCase("")) ){
             draweritems.add(new MenuItems("Hide Ads",R.drawable.hide_ad,true, "$2",4));
         }
-
         draweritems.add(new MenuItems(LocaleController.getString("getMore",R.string.more_karma),R.drawable.ic_premium,true, getKarmaBal(),4));
 
         SlidingMenuAdapter adapter = new SlidingMenuAdapter(getParentActivity(),
@@ -1796,7 +1630,6 @@ public void onClick(View view) {
             public void onClick(View view) {
                 logoutUser();
                 parentLayout.closeDrawer();
-                //    logOutUser();
             }
         });
     }
@@ -1810,32 +1643,8 @@ public void onItemClick(AdapterView<?> parent, View view, int position,
                 case 0:
                     parentLayout.closeDrawer();
                     presentFragment(new ChangeNameActivity());
-                    // closeDrawer();
-                    //  presentFragment(new SettingsChangeNameActivity());
                     break;
-            /*    case 1:
-                    parentLayout.closeDrawer();
-                    askQuestion();
-                    // closeDrawer();
-                  //  askAQuestion();
 
-                    break;*/
-             /*   case 2:
-                    parentLayout.closeDrawer();
-
-                    //    closeDrawer();
-                    try {
-                        Intent pickIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl)));
-                        getParentActivity().startActivityForResult(pickIntent, 500);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    break;*/
-                /*case 3:
-                    parentLayout.closeDrawer();
-                    //    closeDrawer();
-                    logoutUser();
-                    break;*/
                 case 1:
                     parentLayout.closeDrawer();
                     SharedPreferences p  = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
@@ -1946,128 +1755,4 @@ private PayPalPayment getThingToBuy(String paymentIntent, String paymentValue) {
 
     }
 
-
-
-
-
-/*
-
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode == UserPaymentInfo.REQUEST_CODE_PAYMENT) {
-            if (resultCode == Activity.RESULT_OK) {
-                PaymentConfirmation confirm =
-                        data.getParcelableExtra(PaymentActivity.EXTRA_RESULT_CONFIRMATION);
-                if (confirm != null) {
-                    try {
-                        Gson gson = new Gson(); // new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
-                        PaymentResponse response = gson.fromJson(confirm.toJSONObject().toString(), PaymentResponse.class);
-                        UserPaymentInfo.getInstatance().setPaymentId(response.getResponse().getId());
-
-
-                        UserPaymentInfo.getInstatance().setPaymentStatus(UserPaymentInfo.paidUser);
-
-*/
-/*
-                        findViewById(R.id.buyItBtn).setVisibility(View.GONE);
-                        findViewById(R.id.cancelBtn).setVisibility(View.VISIBLE);
-
-                        sendAuthorizationToServer(String.valueOf(paymentValue));
-
-                        findViewById(R.id.content).setVisibility(View.GONE);
-                        findViewById(R.id.done_content).setVisibility(View.VISIBLE);*//*
-
-                        //  cancelButton.setVisibility(View.VISIBLE);
-                   */
-/*     Log.i(TAG, confirm.toJSONObject().toString(4));
-                        Log.i(TAG, confirm.getPayment().toJSONObject().toString(4));
-*//*
-
-                        //confirm.getProofOfPayment()
-
-                        */
-/**
-                         *  TODO: send 'confirm' (and possibly confirm.getPayment() to your server for verification
-                         * or consent completion.
-                         * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/verify-mobile-payment/
-                         * for more details.
-                         *
-                         * For sample mobile backend interactions, see
-                         * https://github.com/paypal/rest-api-sdk-python/tree/master/samples/mobile_backend
-                         *//*
-
-                        //  displayResultText("PaymentConfirmation info received from PayPal");
-
-                    } catch (Exception e) {
-                        Log.e("", "an extremely unlikely failure occurred: ", e);
-                    }
-         */
-/*       }
-            } else if (resultCode == Activity.RESULT_CANCELED) {
-                Log.i(TAG, "The user canceled.");
-            } else if (resultCode == PaymentActivity.RESULT_EXTRAS_INVALID) {
-                Log.i(TAG,
-                        "An invalid Payment or PayPalConfiguration was submitted. Please see the docs.");
-            }
-        } else if (requestCode == UserPaymentInfo.REQUEST_CODE_FUTURE_PAYMENT) {
-            if (resultCode == Activity.RESULT_OK) {
-                PayPalAuthorization auth =
-                        data.getParcelableExtra(PayPalFuturePaymentActivity.EXTRA_RESULT_AUTHORIZATION);
-                if (auth != null) {
-                    try {
-                        Log.i("FuturePaymentExample", auth.toJSONObject().toString(4));
-
-                        String authorization_code = auth.getAuthorizationCode();
-                        Log.i("FuturePaymentExample", authorization_code);
-
-                        //  sendAuthorizationToServer(auth);
-                        //  displayResultText("Future Payment code received from PayPal");
-
-                    } catch (JSONException e) {
-                        Log.e("FuturePaymentExample", "an extremely unlikely failure occurred: ", e);
-                    }
-                }
-            } else if (resultCode == Activity.RESULT_CANCELED) {
-                Log.i("FuturePaymentExample", "The user canceled.");
-            } else if (resultCode == PayPalFuturePaymentActivity.RESULT_EXTRAS_INVALID) {
-                Log.i(
-                        "FuturePaymentExample",
-                        "Probably the attempt to previously start the PayPalService had an invalid PayPalConfiguration. Please see the docs.");
-            }
-        } else if (requestCode == REQUEST_CODE_PROFILE_SHARING) {
-            if (resultCode == Activity.RESULT_OK) {
-                PayPalAuthorization auth =
-                        data.getParcelableExtra(PayPalProfileSharingActivity.EXTRA_RESULT_AUTHORIZATION);
-                if (auth != null) {
-                    try {
-                        Log.i("ProfileSharingExample", auth.toJSONObject().toString(4));
-
-                        String authorization_code = auth.getAuthorizationCode();
-                        Log.i("ProfileSharingExample", authorization_code);
-
-                        // sendAuthorizationToServer(auth);
-                        //  displayResultText("Profile Sharing code received from PayPal");
-
-                    } catch (JSONException e) {
-                        Log.e("ProfileSharingExample", "an extremely unlikely failure occurred: ", e);
-                    }
-                }
-            } else if (resultCode == Activity.RESULT_CANCELED) {
-                Log.i("ProfileSharingExample", "The user canceled.");
-            } else if (resultCode == PayPalFuturePaymentActivity.RESULT_EXTRAS_INVALID) {
-                Log.i(
-                        "ProfileSharingExample",
-                        "Probably the attempt to previously start the PayPalService had an invalid PayPalConfiguration. Please see the docs.");
-            }
-        }*//*
-
-                    //   String s = UserPaymentInfo.getInstatance().getPaymentId();
-                }
-
-
-            }}}
-*/
-
-
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SocialFriendActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SocialFriendActivity.java
index 1f7108281..a784354a1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SocialFriendActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SocialFriendActivity.java
@@ -71,14 +71,11 @@
     private Button paybutton;
     private Bundle bundle;
     ProgressBar progressBar;
-//    private static int friendsReq=0;
     private ArrayList<TLRPC.TelegramUsers> listnew;
     GridViewWithHeaderAndFooter gr_View;
     private ArrayList<TLRPC.TelegramUsers> telegramUsersesList = new ArrayList<>();
-    //private String friendId;
     private TextView emptyView;
     private static int remPosition = -1;
-  //  private static boolean isPending = false;
     int req=0;
 
 
@@ -91,7 +88,6 @@ public SocialFriendActivity(Bundle args){
     @Override
     public View createView(final Context context) {
         mContext = context;
-        //SharedPreferences pp = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
         if(!sp.getBoolean("datasend",false)) {
             HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = ContactsController.getInstance().usersSectionsDict;
             ArrayList<ContactsController.Contact> contactses = ContactsController.getInstance().phoneBookContacts;
@@ -122,7 +118,6 @@ public View createView(final Context context) {
                 telegramUsersesList.add(uu);
             }
 
-
             ArrayList<CustomHttpParams> params = new ArrayList<>();
             params.add(new CustomHttpParams("userId", sp.getString("social_id", "")));
             BackgroundExecuter.getInstance().execute(new AddContactRequester(telegramUsersesList, params));
@@ -164,13 +159,9 @@ public void onItemClick(int id) {
 
         pd = new ProgressDialog(getParentActivity());
         pd.setMessage(LocaleController.getString("loading_more",R.string.looking_more_frnds));
-
-      //  final SharedPreferences p = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
-
         paybutton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-
                 int allowedRequest = sp.getInt("allowedRequest",0);
                 if (reqester.isMore && !reqester.isPending) {
                     if (req < allowedRequest) {
@@ -201,26 +192,6 @@ public void onClick(View v) {
         });
 
 
-
-        //p.edit().putString("karmaBal",String.valueOf(noOfCredit)).commit();
-/*
-         int d=  Integer.parseInt( p.getString("karmaBal","0"));
-        //int vals=d.intValue();
-        if(false*//*d < 9*//*){
-            gr_View.setPadding(0,0,0,0);
-            paybutton.setVisibility(View.VISIBLE);
-            paybutton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                   // PaymentManager.createIntent(getParentActivity());
-                   openDialog();
-                }
-            });
-        } else {
-            paybutton.setVisibility(View.GONE);
-            gr_View.setPadding(0,0,0,0);
-        }*/
-
         img_Back = (ImageView)fragmentView.findViewById(R.id.backview) ;
         adapter = new CustomGridAdapter(mContext,listnew);
         emptyView = (TextView)fragmentView.findViewById(R.id.empty_view);
@@ -239,59 +210,6 @@ public void onClick(View v) {
         BackgroundExecuter.getInstance().execute(new AllowedSocialRequester(mob,cc));
 
 
-
-/*
-        grid.setOnScrollListener(new AbsListView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(AbsListView view, int scrollState) {
-                  }
-
-            @Override
-            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-
-           */
-/*     if (reqester.isMore)
-                    BackgroundExecuter.getInstance().execute(reqester.loadMore());
-       *//*
-
-            }
-
-
-           //     BackgroundExecuter.getInstance().execute(reqester.loadMore());
-              */
-/*    if(!isPending){
-
-               BackgroundExecuter.getInstance().execute(new DeductKarmaRequester(new CreditModel("","","")));
-
-
-                  }
-*//*
-
-                   //TODO in this segment
-         */
-/*       if (UserPaymentInfo.getInstatance().getPaymentStatus() != UserPaymentInfo.paidUser) {
-                    paybutton.setVisibility(View.VISIBLE);
-
-                    paybutton.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View v) {
-                            PaymentManager.createIntent(getParentActivity());
-                        }
-                    });
-                } else {
-                    paybutton.setVisibility(View.GONE);
-
-                    if (reqester.isMore)
-                        BackgroundExecuter.getInstance().execute(reqester.loadMore());
-                }
-            }*//*
-
-        });
-*/
-
-
-
-
         grid.setOnItemClickListener(new AdapterView.OnItemClickListener() {
 
             @Override
@@ -312,8 +230,6 @@ public void onItemClick(AdapterView<?> parent, View view,
                         params.add(new CustomHttpParams("userId", ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE).getString("social_id", "")));
                         ArrayList<TLRPC.TelegramUsers> telegramList = new ArrayList<>();
                         telegramList.add(listnew.get(pos));
-                        //  BackgroundExecuter.getInstance().execute(new AddContactRequester(telegramList, params));
-                        //  listnew.remove(listnew.get(pos));
 
                     } else {
 
@@ -462,7 +378,7 @@ public void onKarmaDeductFailed() {
         getParentActivity().runOnUiThread(new Runnable() {
             @Override
             public void run() {
-                Toast.makeText(getParentActivity(),"Error in load more friends",Toast.LENGTH_SHORT).show();
+                Toast.makeText(getParentActivity(),LocaleController.getString("problem_in_loading",R.string.error_load_more),Toast.LENGTH_SHORT).show();
             }
         });
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
index fecbca42c..ac8fd6478 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/UserProfileActivity.java
@@ -56,12 +56,7 @@
     protected TLRPC.Chat currentChat;
     protected TLRPC.User currentUser;
     private Context mcContext;
-    /*private DatePicker datePicker;
-    private Calendar calendar;
-    private int year, month, day;
-    private int selectedgender;
-    private Button save_btn;
-    */private  GridView grid;
+    private  GridView grid;
     private CustomGridAdapter adapter;
     private GetMutualFriendRq reqester;
     private View doneButton;
@@ -69,9 +64,6 @@
     private String friendId;
     ProgressBar progressBar;
     private static TLRPC.User currUserTemp;
-//    public static int ii;
-    //  private static TLRPC.TelegramUsers telegramUsers = null;
-
     private static TLRPC.TelegramUsers user = null;
     private boolean isMessageSend ;
     private TextView emptyView;
@@ -85,9 +77,6 @@ public void onUserSyncSuccess(TLRPC.User user) {
     public void onUserSyncFailed() {
 
     }
-
-
-
     public class MutualFriend {
         public  String userId;
         public String friendId;
@@ -153,7 +142,6 @@ public void onItemClick(int id) {
         nameTextView=(TextView)fragmentView.findViewById(R.id.user_name_label);
         statusTextView =(TextView)fragmentView.findViewById(R.id.user_staus_label);
         avatarImageView.setRoundRadius(AndroidUtilities.dp(30));
-        //   emptyView=(TextView)fragmentView.findViewById(R.id.empty_view);
         checkAndUpdateAvatar();
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("socialuser", Activity.MODE_PRIVATE);
         country_txt.setText(cCode);
@@ -320,7 +308,6 @@ else if(user.photo.photo_id == 0){
             object.thumb = object.imageReceiver.getBitmap();
             object.size = -1;
             object.radius = avatarImageView.getImageReceiver().getRoundRadius();
-           // object.scale = ViewProxy.getScaleX(avatarImageView);
             return object;
         }
         return null;
@@ -410,13 +397,4 @@ public void run() {
     }
 
 
-
-
-
-    /*public static void setCurrentUser(TLRPC.User user, TLRPC.TelegramUsers telegramUsers1) {
-
-        currUserTemp = user;
-        telegramUsers = telegramUsers1;
-    }*/
-
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index ead489f51..a130f594c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -163,25 +163,19 @@ public void onItemClick(int id) {
 
         ActionBarMenu menu = actionBar.createMenu();
         doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
-
-        // FrameLayout frameLayout = new FrameLayout(context);
-        fragmentView = View.inflate(context,R.layout.layout_wallpaper_activity,null);//frameLayout;
-
-        backgroundImage = (ImageView)fragmentView.findViewById(R.id.iv_wallpaper); //new ImageView(context);
+        fragmentView = View.inflate(context,R.layout.layout_wallpaper_activity,null);
+        backgroundImage = (ImageView)fragmentView.findViewById(R.id.iv_wallpaper);
         backgroundImage.setScaleType(ImageView.ScaleType.CENTER_CROP);
-        //frameLayout.addView(backgroundImage, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         backgroundImage.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
                 return true;
             }
         });
-
-        progressBar = (ProgressBar)fragmentView.findViewById(R.id.pb_wall); //new ProgressBar(context);
+        progressBar = (ProgressBar)fragmentView.findViewById(R.id.pb_wall);
         progressBar.setPadding(AndroidUtilities.dp(6), AndroidUtilities.dp(6), AndroidUtilities.dp(6), AndroidUtilities.dp(6));
-        //  frameLayout.addView(progressBar, LayoutHelper.createFrame(60, 60, Gravity.CENTER, 0, 0, 0, 52));
 
-        RecyclerListView listView =/* (RecyclerListView)fragmentView.findViewById(R.id.lv_wal); //*/new RecyclerListView(context);
+        RecyclerListView listView =new RecyclerListView(context);
         listView.setClipToPadding(false);
         listView.setPadding(AndroidUtilities.dp(40), 0, AndroidUtilities.dp(40), 0);
         LinearLayoutManager layoutManager = new LinearLayoutManager(context);
@@ -195,26 +189,6 @@ public boolean onTouch(View v, MotionEvent event) {
         }
         listView.setAdapter(listAdapter = new ListAdapter(context));
         ((RelativeLayout)fragmentView).addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 102));
-//        View mView = View.inflate(context, R.layout.settings_layout, null);
-/*
-
-        frameLayout.addView(mView);//, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 102, Gravity.LEFT | Gravity.BOTTOM));
-
-
-        mView.findViewById(R.id.black_view).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-
-            }
-        });
-        mView.findViewById(R.id.backview).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                showTabsAndmenu();
-                finishFragment();
-            }
-        });
-*/
         fragmentView.findViewById(R.id.backview).setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaBalanceListener.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaBalanceListener.java
index 242d52de1..8e8016b97 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaBalanceListener.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaBalanceListener.java
@@ -6,8 +6,8 @@
 
 public interface KarmaBalanceListener {
 
-     public void onGetKarmaSuccess(int karmaPoints);
-     public void onGetKarmaFailure();
+     void onGetKarmaSuccess(int karmaPoints);
+     void onGetKarmaFailure();
 
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaDeductionListener.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaDeductionListener.java
index 9c7f6dbef..ff4acea04 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaDeductionListener.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/KarmaDeductionListener.java
@@ -6,8 +6,8 @@
 
 public interface KarmaDeductionListener {
 
-    public void onKarmaDeductSuccess();
-    public void onKarmaDeductFailed();
+    void onKarmaDeductSuccess();
+    void onKarmaDeductFailed();
 
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAttachListner.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAttachListner.java
index 707d0860c..3b02b89bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAttachListner.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnAttachListner.java
@@ -4,5 +4,5 @@
  * Created by ram on 2/5/16.
  */
 public interface OnAttachListner {
-    public void onAttachlistner();
+    void onAttachlistner();
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnSocialLogin.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnSocialLogin.java
index 101bee506..f6eb1b19c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnSocialLogin.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnSocialLogin.java
@@ -4,7 +4,7 @@
  * Created by ram on 14/6/16.
  */
 public interface OnSocialLogin {
-    public void onSocialLoginSuccess();
+    void onSocialLoginSuccess();
     void onSocialLoginError();
     void onSocialFailer(String userid);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnclicklistnerOnChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnclicklistnerOnChatActivity.java
index 962f22ba8..b8cf5dbbb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/listners/OnclicklistnerOnChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/listners/OnclicklistnerOnChatActivity.java
@@ -5,5 +5,5 @@
  */
 public interface OnclicklistnerOnChatActivity {
 
-    public void onClickListnerOnUi(int index);
+    void onClickListnerOnUi(int index);
 }
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/big_red_normal.png b/TMessagesProj/src/main/res/drawable-hdpi/big_red_normal.png
new file mode 100644
index 000000000..0d4889fa2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/big_red_normal.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/big_red_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/big_red_pressed.png
new file mode 100644
index 000000000..9beef6bc7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/big_red_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/button_end.xml b/TMessagesProj/src/main/res/drawable-hdpi/button_end.xml
new file mode 100644
index 000000000..72e414ddd
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-hdpi/button_end.xml
@@ -0,0 +1,5 @@
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/big_red_pressed"/>
+    <item android:state_pressed="false" android:drawable="@drawable/big_red_normal"/>
+    <item android:drawable="@drawable/big_red_normal"/>
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/call_normal.png b/TMessagesProj/src/main/res/drawable-hdpi/call_normal.png
new file mode 100644
index 000000000..bd206ff25
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/call_normal.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/call_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/call_pressed.png
new file mode 100644
index 000000000..2bcccd908
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/call_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable/button_call.xml b/TMessagesProj/src/main/res/drawable/button_call.xml
new file mode 100644
index 000000000..30a021c2a
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/button_call.xml
@@ -0,0 +1,5 @@
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/call_pressed"/>
+    <item android:state_pressed="false" android:drawable="@drawable/call_normal"/>
+    <item android:drawable="@drawable/call_normal"/>
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/button_end.xml b/TMessagesProj/src/main/res/drawable/button_end.xml
new file mode 100644
index 000000000..72e414ddd
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/button_end.xml
@@ -0,0 +1,5 @@
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/big_red_pressed"/>
+    <item android:state_pressed="false" android:drawable="@drawable/big_red_normal"/>
+    <item android:drawable="@drawable/big_red_normal"/>
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/inputbox.xml b/TMessagesProj/src/main/res/drawable/inputbox.xml
new file mode 100644
index 000000000..2731e91b9
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/inputbox.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="#FFb5b4b4" />
+            <corners android:radius="4dp"/>
+        </shape>
+    </item>
+
+    <item android:top="1dp" android:bottom="1dp" android:left="1dp" android:right="1dp">
+        <shape android:shape="rectangle">
+            <solid android:color="#ffffffff" />
+            <corners android:radius="4dp"/>
+        </shape>
+    </item>
+
+</layer-list>
+
diff --git a/TMessagesProj/src/main/res/layout/callscreen.xml b/TMessagesProj/src/main/res/layout/callscreen.xml
new file mode 100644
index 000000000..76f63828d
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/callscreen.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:orientation="vertical"
+                android:weightSum="5"
+                android:background="#ffffffff">
+
+    <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:orientation="vertical"
+            android:layout_weight="1"
+            android:background="#fffafafa"
+            >
+
+        <TextView
+                android:id="@+id/remoteUser"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_horizontal"
+                android:layout_margin="10dp"
+                android:text=""
+                android:textSize="28sp"/>
+
+        <TextView
+                android:id="@+id/callState"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_horizontal"
+                android:text="Ringing"
+                android:textSize="16sp"
+                android:textAllCaps="true"
+                />
+
+        <TextView
+                android:id="@+id/callDuration"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_horizontal"
+                android:layout_marginBottom="8dp"
+                android:layout_marginTop="4dp"
+                android:text="00:00"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:textSize="16sp"/>
+
+    </LinearLayout>
+
+    <ImageView
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:padding="0dip"
+            android:layout_weight="3"
+            android:contentDescription="Call background">
+
+    </ImageView>
+
+    <RelativeLayout
+            android:id="@+id/bottomPanel"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1">
+        <Button
+                android:id="@+id/hangupButton"
+                android:paddingBottom="20dp"
+                android:paddingTop="20dp"
+                android:layout_margin="20dp"
+                android:background="@drawable/button_end"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+               />
+
+    </RelativeLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/login.xml b/TMessagesProj/src/main/res/layout/login.xml
new file mode 100644
index 000000000..216bc0471
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/login.xml
@@ -0,0 +1,54 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:padding="0dip"
+                >
+
+    <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:orientation="vertical"
+            android:paddingLeft="40dp"
+            android:paddingRight="40dp">
+
+        <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="40dp"
+                android:text="Enter your name"
+                android:textAllCaps="true"
+                android:id="@+id/textView"
+            android:layout_gravity="center_horizontal"
+               android:textSize="20sp"/>
+        <EditText
+                android:id="@+id/loginName"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dp"
+                android:inputType="textPersonName"
+                android:textSize="32sp"
+                android:padding="10dp"
+               >
+
+            <requestFocus/>
+        </EditText>
+
+    </LinearLayout>
+
+    <Button
+            android:id="@+id/loginButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="40dp"
+            android:layout_gravity="center_horizontal"
+            android:minHeight="56dp"
+            android:minWidth="132dp"
+            android:textSize="22sp"
+            android:textStyle="bold"
+            android:text="Register"
+            android:layout_alignParentBottom="true"
+            android:layout_centerHorizontal="true"/>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/main.xml b/TMessagesProj/src/main/res/layout/main.xml
new file mode 100644
index 000000000..136c71fde
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/main.xml
@@ -0,0 +1,123 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                xmlns:tools="http://schemas.android.com/tools"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:padding="0dip"
+               >
+
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:orientation="vertical"
+        android:id="@+id/ll_caller"
+
+        android:layout_height="match_parent">
+
+    <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:orientation="vertical"
+            android:paddingLeft="40dp"
+            android:paddingRight="40dp" android:id="@+id/numberInputLayout">
+
+        <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="40dp"
+                android:text="Enter phone number"
+                android:textAllCaps="true"
+                android:id="@+id/textView"
+                android:layout_gravity="center_horizontal"
+                android:textSize="20sp"/>
+        <EditText
+                android:id="@+id/callName"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dp"
+                android:textSize="32sp"
+                android:padding="10dp"
+                android:background="@drawable/inputbox"
+                android:inputType="phone">
+
+            <requestFocus/>
+        </EditText>
+
+    </LinearLayout>
+
+
+    <LinearLayout android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_above="@+id/numberInputLayout"
+        android:paddingBottom="24dp"
+        android:gravity="center"
+        android:layout_centerHorizontal="true">
+
+        <TextView
+                android:id="@+id/infoText"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+
+                android:textAllCaps="true"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:layout_above="@+id/linearLayout"/>
+
+        <TextView
+                android:id="@+id/loggedInName"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_toRightOf="@+id/info_text"
+                android:text="Someone"
+                android:textAllCaps="true"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textStyle="bold"/>
+    </LinearLayout>
+
+
+    <RelativeLayout android:layout_width="fill_parent"
+                  android:layout_height="match_parent"
+                  android:layout_alignParentBottom="true"
+                  android:layout_centerHorizontal="true">
+
+        <Button
+                android:id="@+id/callButton"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="20dp"
+                android:layout_gravity="center_horizontal"
+                android:minHeight="56dp"
+                android:layout_alignParentBottom="true"
+                android:background="@drawable/button_call"
+                android:minWidth="132dp"
+                android:layout_centerHorizontal="true"/>
+
+<!--
+        <Button
+                android:id="@+id/stopButton"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@+id/callButton"
+                android:layout_marginBottom="10dp"
+                android:background="@android:color/transparent"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textAllCaps="true"
+                android:text="Stop service" android:layout_centerHorizontal="true"/>
+-->
+
+<!--
+        <Button
+            android:id="@+id/loginButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="20dp"
+            android:layout_gravity="center_horizontal"
+            android:minHeight="56dp"
+            android:layout_below="@+id/callButton"
+            android:minWidth="132dp"
+            android:text="logIn"
+            android:layout_centerHorizontal="true"/>-->
+
+
+    </RelativeLayout>
+    </LinearLayout>
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/raw/progress_tone.wav b/TMessagesProj/src/main/res/raw/progress_tone.wav
new file mode 100644
index 000000000..d500641bc
Binary files /dev/null and b/TMessagesProj/src/main/res/raw/progress_tone.wav differ
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index d9bd3a1ce..29b442caa 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,13 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-
-
 <resources>
     <string name="LanguageName">English</string>
 
     <string name="AppName">Social IM for Telegram</string>
     <string name="AppNameBeta">Social IM for Telegram</string>
-
     <string name="LanguageNameInEnglish">English</string>
     <string name="LanguageCode">en</string>
     <!--signin view-->
@@ -416,7 +413,7 @@
     <!--contacts view-->
     <string name="SelectContact">Select Contact</string>
     <string name="NoContacts">No contacts yet</string>
-    <string name="InviteText">Hey, let\'s switch to Social IM for Telegram: https://appworld.blackberry.com/webstore/content/59951054/</string>
+    <string name="InviteText">Hey, I found this app really fun-filled &amp; exciting, to socialize with my-kinda-people! Give a try, you too!: http://blck.by/29ei2Kq </string>
     <string name="TodayAt">at</string>
     <string name="YesterdayAt">yesterday at</string>
     <string name="Online">online</string>
@@ -1255,8 +1252,6 @@
     <string name="buy_premium_content">Want to befriend with more interesting people?
     \nTime to Switch to the paid version !
     </string>
-
-
     <!--                                                    -->
 
     <string name="more_karma">Get More Karmas</string>
@@ -1270,8 +1265,8 @@
 
     <string name="watch_ads">Watch video and earn more Karmas!</string>
     <string name="get_more_karma">Get More karmas to connect  with more friends, Do you want to get more karmas ? </string>
-    <string name="remove_ads_content">"REMOVE ANNOYING ADS?\n \nPay $2 for one year!"</string>
-
+    <string name="remove_ads_content">REMOVE ANNOYING ADS?\n \nPay $2 for one year!</string>
     <string name="looking_more_frnds">loading more friends..</string>
+    <string name="error_load_more">Error in loading friends</string>
 
 </resources>
\ No newline at end of file
