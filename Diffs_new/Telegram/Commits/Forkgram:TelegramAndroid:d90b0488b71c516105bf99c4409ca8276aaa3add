diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
index f63aee662..d89b6e7df 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
@@ -200,6 +200,10 @@ public void setEnabled(boolean value, ArrayList<Animator> animators) {
         }
     }
 
+    public boolean isFakeEnabled() {
+        return textView.getAlpha() == 1.0f;
+    }
+
     public void setChecked(boolean checked) {
         checkBox.setChecked(checked, true);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
index 80809f51f..6cfdf3363 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
@@ -1150,7 +1150,8 @@ public int getSpanSize(int position) {
                 PhotoViewer.getInstance().openPhotoForSelect(arrayList, position, type, photoViewerProvider, chatActivity);
                 AndroidUtilities.hideKeyboard(baseFragment.getFragmentView().findFocus());
             } else {
-                if (SharedConfig.inappCamera) {
+                if (SharedConfig.inappCamera
+                    && !MessagesController.getGlobalMainSettings().getBoolean("systemCamera", false)) {
                     openCamera(true);
                 } else {
                     if (delegate != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
index 2801d4b97..89f040e32 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
@@ -33,41 +33,73 @@
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
 
+import java.lang.reflect.*;
+import java.util.ArrayList;
+
 public class ForkSettingsActivity extends BaseFragment {
 
     private RecyclerListView listView;
     private ListAdapter listAdapter;
 
+    private ArrayList<Integer> sectionRows = new ArrayList<Integer>();
+    private String[] sectionStrings = {"General", "ChatCamera"};
+
     private int rowCount;
-    private int sectionRow1;
 
     private int hideSensitiveDataRow;
     private int squareAvatarsRow;
     private int inappCameraRow;
+    private int systemCameraRow;
     private int photoHasStickerRow;
     private int unmutedOnTopRow;
     private int rearVideoMessages;
     private int replaceForward;
 
-    private int emptyRow;
+    private ArrayList<Integer> emptyRows = new ArrayList<Integer>();
     private int syncPinsRow;
 
+    private static int getIntLocale(String str) {
+        try {
+            try {
+                return Class.forName("R")
+                    .getDeclaredField("string")
+                    .getDeclaringClass()
+                    .getDeclaredField(str).getInt(null);
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            }
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+    private static String getLocale(String s) {
+        return LocaleController.getString(s, 0);
+    }
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
 
         rowCount = 0;
         
-        sectionRow1 = rowCount++;
+        sectionRows.add(rowCount++);
         hideSensitiveDataRow = SharedConfig.isUserOwner() ? -1 : rowCount++;
         squareAvatarsRow = rowCount++;
-        inappCameraRow = rowCount++;
         photoHasStickerRow = rowCount++;
         unmutedOnTopRow = rowCount++;
         rearVideoMessages = rowCount++;
         replaceForward = rowCount++;
+    
+        emptyRows.add(rowCount++);
+        sectionRows.add(rowCount++);
+        inappCameraRow = rowCount++;
+        systemCameraRow = rowCount++;
 
-        emptyRow = rowCount++;
+        emptyRows.add(rowCount++);
         syncPinsRow = rowCount++;
 
         return true;
@@ -85,6 +117,10 @@ public boolean toggleGlobalMainSetting(String option, View view, boolean byDefau
         return !optionBool;
     }
 
+    private void checkEnabledSystemCamera(TextCheckCell t) {
+        t.setEnabled(SharedConfig.inappCamera, null);
+    }
+
     @Override
     public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
@@ -129,6 +165,18 @@ public boolean supportsPredictiveItemAnimations() {
                 if (view instanceof TextCheckCell) {
                     ((TextCheckCell) view).setChecked(SharedConfig.inappCamera);
                 }
+
+                RecyclerListView.Holder holder = (RecyclerListView.Holder) listView.findViewHolderForAdapterPosition(systemCameraRow);
+                if (holder != null) {
+                    checkEnabledSystemCamera((TextCheckCell) holder.itemView);
+                }
+                
+            } else if (position == systemCameraRow) {
+                if (view instanceof TextCheckCell) {
+                    if (((TextCheckCell) view).isFakeEnabled()) {
+                        toggleGlobalMainSetting("systemCamera", view, false);
+                    }
+                }
             } else if (position == photoHasStickerRow) {
                 SharedConfig.toggleHasSticker();
                 if (view instanceof TextCheckCell) {
@@ -190,6 +238,11 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         String t = LocaleController.getString("InAppCamera", R.string.InAppCamera);
                         String info = LocaleController.getString("InAppCameraInfo", R.string.InAppCameraInfo);
                         textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("inappCamera", true), false, false);
+                    } else if (position == systemCameraRow) {
+                        String t = LocaleController.getString("SystemCamera", R.string.SystemCamera);
+                        String info = LocaleController.getString("SystemCameraInfo", R.string.SystemCameraInfo);
+                        textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("systemCamera", false), false, false);
+                        checkEnabledSystemCamera(textCell);
                     } else if (position == photoHasStickerRow) {
                         String t = LocaleController.getString("PhotoHasSticker", R.string.PhotoHasSticker);
                         String info = LocaleController.getString("PhotoHasStickerInfo", R.string.PhotoHasStickerInfo);
@@ -216,10 +269,12 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     break;
                 }
                 case 4: {
-                    HeaderCell headerCell = (HeaderCell) holder.itemView;
-                    if (position == sectionRow1) {
-                        headerCell.setText(LocaleController.getString("General", R.string.General));
+                    int i = sectionRows.indexOf(position);
+                    if (i == -1) {
+                        break;
                     }
+                    HeaderCell headerCell = (HeaderCell) holder.itemView;
+                    headerCell.setText(getLocale(sectionStrings[i]));
                     break;
                 }
             }
@@ -231,6 +286,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             boolean fork = position == squareAvatarsRow
                         || position == hideSensitiveDataRow
                         || position == inappCameraRow
+                        || position == systemCameraRow
                         || position == unmutedOnTopRow
                         || position == rearVideoMessages
                         || position == replaceForward
@@ -273,20 +329,21 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
 
         @Override
         public int getItemViewType(int position) {
-            if (position == emptyRow) {
+            if (emptyRows.contains(position)) {
                 return 1;
             } else if (0 == 1) {
                 return 2;
             } else if (position == squareAvatarsRow
                 || position == hideSensitiveDataRow
                 || position == inappCameraRow
+                || position == systemCameraRow
                 || position == unmutedOnTopRow
                 || position == syncPinsRow
                 || position == rearVideoMessages
                 || position == replaceForward
                 || position == photoHasStickerRow) {
                 return 3;
-            } else if (position == sectionRow1) {
+            } else if (sectionRows.contains(position)) {
                 return 4;
             }
             return 6;
diff --git a/TMessagesProj/src/main/res/values-ru/strings.xml b/TMessagesProj/src/main/res/values-ru/strings.xml
index e9dfc3e77..dc7627bd2 100644
--- a/TMessagesProj/src/main/res/values-ru/strings.xml
+++ b/TMessagesProj/src/main/res/values-ru/strings.xml
@@ -33,5 +33,7 @@
     <string name="RearVideoMessages">Задняя камера в видео сообщениях</string>
     <string name="ReplaceForward">Использовать быструю пересылку</string>
     <string name="HideSensitiveData">Скрыть личную информацию</string>
-    
+    <string name="SystemCamera">Использовать системную камеру</string>
+    <string name="SystemCameraInfo">Только в диалоге вложений</string>
+
 </resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index aa21d7276..a469f7143 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -3073,4 +3073,6 @@
     <string name="RearVideoMessages">Rear camera in Video Messages</string>
     <string name="ReplaceForward">Replace original Forward</string>
     <string name="HideSensitiveData">Hide Sensitive Data</string>
+    <string name="SystemCamera">Use System Camera for Photo</string>
+    <string name="SystemCameraInfo">Only in Attachment Dialog</string>
 </resources>
