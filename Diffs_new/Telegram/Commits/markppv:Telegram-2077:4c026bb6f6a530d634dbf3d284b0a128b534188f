diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index 514c5c4bd..d7d5dd7d8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -24,19 +24,23 @@
 import android.view.ViewTreeObserver;
 import android.widget.FrameLayout;
 
+import androidx.core.util.Consumer;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Cells.GraySectionCell;
 import org.telegram.ui.Cells.SharedDocumentCell;
 import org.telegram.ui.Components.EmptyTextProgressView;
@@ -48,21 +52,20 @@
 import java.io.File;
 import java.io.FileReader;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.StringTokenizer;
 
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 public class DocumentSelectActivity extends BaseFragment {
 
     public interface DocumentSelectActivityDelegate {
         void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files);
+
         void startDocumentSelectActivity();
-        default void startMusicSelectActivity(BaseFragment parentFragment) {}
+
+        default void startMusicSelectActivity(BaseFragment parentFragment) {
+        }
     }
 
     private RecyclerListView listView;
@@ -72,6 +75,7 @@ default void startMusicSelectActivity(BaseFragment parentFragment) {}
     private LinearLayoutManager layoutManager;
 
     private File currentDir;
+    private Thread loadingThread;
     private ArrayList<ListItem> items = new ArrayList<>();
     private boolean receiverRegistered = false;
     private ArrayList<HistoryEntry> history = new ArrayList<>();
@@ -94,6 +98,7 @@ default void startMusicSelectActivity(BaseFragment parentFragment) {}
         String ext = "";
         String thumb;
         File file;
+        boolean isDir;
         long date;
     }
 
@@ -145,6 +150,9 @@ public void onFragmentDestroy() {
         } catch (Exception e) {
             FileLog.e(e);
         }
+        if (loadingThread != null) {
+            loadingThread.interrupt();
+        }
         super.onFragmentDestroy();
     }
 
@@ -299,16 +307,7 @@ public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                     if (delegate != null) {
                         delegate.startMusicSelectActivity(this);
                     }
-                } else {
-                    HistoryEntry he = history.remove(history.size() - 1);
-                    actionBar.setTitle(he.title);
-                    if (he.dir != null) {
-                        listFiles(he.dir);
-                    } else {
-                        listRoots();
-                    }
-                    layoutManager.scrollToPositionWithOffset(he.scrollItem, he.scrollOffset);
-                }
+                } else onBackPressed();
             } else if (file.isDirectory()) {
                 HistoryEntry he = new HistoryEntry();
                 he.scrollItem = layoutManager.findLastVisibleItemPosition();
@@ -319,11 +318,11 @@ public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                 he.dir = currentDir;
                 he.title = actionBar.getTitle();
                 history.add(he);
-                if (!listFiles(file)) {
-                    history.remove(he);
-                    return;
-                }
-                actionBar.setTitle(item.title);
+                listFiles(file, isSuccess -> {
+                    if (isSuccess) {
+                        actionBar.setTitle(item.title);
+                    } else history.remove(he);
+                });
             } else {
                 if (!file.canRead()) {
                     showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
@@ -461,13 +460,18 @@ private void fixLayoutInternal() {
     public boolean onBackPressed() {
         if (history.size() > 0) {
             HistoryEntry he = history.remove(history.size() - 1);
-            actionBar.setTitle(he.title);
             if (he.dir != null) {
-                listFiles(he.dir);
+                listFiles(he.dir, isSuccess -> {
+                    if (isSuccess) {
+                        actionBar.setTitle(he.title);
+                        layoutManager.scrollToPositionWithOffset(he.scrollItem, he.scrollOffset);
+                    } else onBackPressed();
+                });
             } else {
                 listRoots();
+                actionBar.setTitle(he.title);
+                layoutManager.scrollToPositionWithOffset(he.scrollItem, he.scrollOffset);
             }
-            layoutManager.scrollToPositionWithOffset(he.scrollItem, he.scrollOffset);
             return false;
         }
         return super.onBackPressed();
@@ -477,7 +481,13 @@ public void setDelegate(DocumentSelectActivityDelegate delegate) {
         this.delegate = delegate;
     }
 
-    private boolean listFiles(File dir) {
+    private void listFiles(File dir) {
+        listFiles(dir, b -> {
+        });
+    }
+
+    private void listFiles(File dir, Consumer<Boolean> onResult) {
+        if (loadingThread != null) loadingThread.interrupt();
         if (!dir.canRead()) {
             if (dir.getAbsolutePath().startsWith(Environment.getExternalStorageDirectory().toString())
                     || dir.getAbsolutePath().startsWith("/sdcard")
@@ -495,82 +505,109 @@ private boolean listFiles(File dir) {
                     AndroidUtilities.clearDrawableAnimation(listView);
                     scrolling = true;
                     listAdapter.notifyDataSetChanged();
-                    return true;
+                    onResult.accept(true);
+                    return;
                 }
             }
             showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
-            return false;
-        }
-        File[] files;
-        try {
-            files = dir.listFiles();
-        } catch(Exception e) {
-            showErrorBox(e.getLocalizedMessage());
-            return false;
-        }
-        if (files == null) {
-            showErrorBox(LocaleController.getString("UnknownError", R.string.UnknownError));
-            return false;
+            onResult.accept(false);
+            return;
         }
-        currentDir = dir;
-        items.clear();
-        Arrays.sort(files, (lhs, rhs) -> {
-            if (lhs.isDirectory() != rhs.isDirectory()) {
-                return lhs.isDirectory() ? -1 : 1;
-            }
-            return lhs.getName().compareToIgnoreCase(rhs.getName());
-            /*long lm = lhs.lastModified();
-            long rm = lhs.lastModified();
-            if (lm == rm) {
-                return 0;
-            } else if (lm > rm) {
-                return -1;
-            } else {
-                return 1;
-            }*/
+        AlertDialog progressDialog = new AlertDialog(getParentActivity(), 3);
+        progressDialog.setOnCancelListener(dialog -> {
+            loadingThread.interrupt();
+            onResult.accept(false);
         });
-        for (int a = 0; a < files.length; a++) {
-            File file = files[a];
-            if (file.getName().indexOf('.') == 0) {
-                continue;
+        progressDialog.show();
+        loadingThread = new Thread(() -> {
+            File[] files;
+            try {
+                files = dir.listFiles();
+            } catch (Exception e) {
+                AndroidUtilities.runOnUIThread(() -> {
+                    showErrorBox(e.getLocalizedMessage());
+                    onResult.accept(false);
+                });
+                return;
             }
-            ListItem item = new ListItem();
-            item.title = file.getName();
-            item.file = file;
-            if (file.isDirectory()) {
-                item.icon = R.drawable.ic_directory;
-                item.subtitle = LocaleController.getString("Folder", R.string.Folder);
-            } else {
-                String fname = file.getName();
-                String[] sp = fname.split("\\.");
-                item.ext = sp.length > 1 ? sp[sp.length - 1] : "?";
-                item.subtitle = AndroidUtilities.formatFileSize(file.length());
-                fname = fname.toLowerCase();
-                if (fname.endsWith(".jpg") || fname.endsWith(".png") || fname.endsWith(".gif") || fname.endsWith(".jpeg")) {
-                    item.thumb = file.getAbsolutePath();
+            if (files == null) {
+                AndroidUtilities.runOnUIThread(() -> {
+                    showErrorBox(LocaleController.getString("UnknownError", R.string.UnknownError));
+                    onResult.accept(false);
+                });
+                return;
+            }
+            ArrayList<ListItem> newItems = new ArrayList<>(files.length);
+            for (int a = 0; a < files.length; a++) {
+                File file = files[a];
+                if (file.getName().indexOf('.') == 0) {
+                    continue;
+                }
+                ListItem item = new ListItem();
+                item.title = file.getName();
+                item.isDir = file.isDirectory();
+                item.file = file;
+                if (item.isDir) {
+                    item.icon = R.drawable.ic_directory;
+                    item.subtitle = LocaleController.getString("Folder", R.string.Folder);
+                } else {
+                    String fname = file.getName();
+                    String[] sp = fname.split("\\.");
+                    item.ext = sp.length > 1 ? sp[sp.length - 1] : "?";
+                    fname = fname.toLowerCase();
+                    if (fname.endsWith(".jpg") || fname.endsWith(".png") || fname.endsWith(".gif") || fname.endsWith(".jpeg")) {
+                        item.thumb = file.getAbsolutePath();
+                    }
                 }
+                newItems.add(item);
             }
-            items.add(item);
-        }
-        ListItem item = new ListItem();
-        item.title = "..";
-        if (history.size() > 0) {
-            HistoryEntry entry = history.get(history.size() - 1);
-            if (entry.dir == null) {
-                item.subtitle = LocaleController.getString("Folder", R.string.Folder);
+            Collections.sort(newItems, (lhs, rhs) -> {
+                if (lhs.isDir != rhs.isDir) {
+                    return lhs.isDir ? -1 : 1;
+                }
+                return lhs.title.compareToIgnoreCase(rhs.title);
+            });
+            ListItem upItem = new ListItem();
+            upItem.title = "..";
+            if (history.size() > 0) {
+                HistoryEntry entry = history.get(history.size() - 1);
+                if (entry.dir == null) {
+                    upItem.subtitle = LocaleController.getString("Folder", R.string.Folder);
+                } else {
+                    upItem.subtitle = entry.dir.toString();
+                }
             } else {
-                item.subtitle = entry.dir.toString();
+                upItem.subtitle = LocaleController.getString("Folder", R.string.Folder);
             }
-        } else {
-            item.subtitle = LocaleController.getString("Folder", R.string.Folder);
-        }
-        item.icon = R.drawable.ic_directory;
-        item.file = null;
-        items.add(0, item);
-        AndroidUtilities.clearDrawableAnimation(listView);
-        scrolling = true;
-        listAdapter.notifyDataSetChanged();
-        return true;
+            upItem.icon = R.drawable.ic_directory;
+            upItem.file = null;
+            newItems.add(0, upItem);
+            if (Thread.interrupted()) return;
+            AndroidUtilities.runOnUIThread(() -> {
+                items = newItems;
+                currentDir = dir;
+                scrolling = true;
+                if (listView != null && listAdapter != null) {
+                    AndroidUtilities.clearDrawableAnimation(listView);
+                    listAdapter.notifyDataSetChanged();
+                }
+                progressDialog.dismiss();
+                onResult.accept(true);
+            });
+            for (int i = 0; i < newItems.size(); i++) {
+                if (Thread.interrupted()) return;
+                final ListItem item = newItems.get(i);
+                if (item.file != null && !item.isDir) {
+                    item.subtitle = AndroidUtilities.formatFileSize(item.file.length());
+                }
+            }
+            AndroidUtilities.runOnUIThread(() -> {
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+            });
+        });
+        loadingThread.start();
     }
 
     private void showErrorBox(String error) {
@@ -582,6 +619,7 @@ private void showErrorBox(String error) {
 
     @SuppressLint("NewApi")
     private void listRoots() {
+        if (loadingThread != null) loadingThread.interrupt();
         currentDir = null;
         items.clear();
 
@@ -705,8 +743,8 @@ private void listRoots() {
     private String getRootSubtitle(String path) {
         try {
             StatFs stat = new StatFs(path);
-            long total = (long)stat.getBlockCount() * (long)stat.getBlockSize();
-            long free = (long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
+            long total = (long) stat.getBlockCount() * (long) stat.getBlockSize();
+            long free = (long) stat.getAvailableBlocks() * (long) stat.getBlockSize();
             if (total == 0) {
                 return "";
             }
