diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 98ca1478b..3ca266f9a 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -12,7 +12,8 @@ dependencies {
     compile files('libs/eventbus-2.4.0.jar')
     compile files('libs/android-priority-jobqueue-1.3.1.jar')
     compile 'com.squareup.okhttp3:okhttp:3.4.1'
-
+    compile 'com.squareup.okio:okio:1.9.0'
+    dependencies { compile 'com.google.code.gson:gson:2.3' }
    compile "com.google.android.gms:play-services-gcm:8.4.0"
    compile "com.google.android.gms:play-services-maps:8.4.0"
     compile 'net.hockeyapp.android:HockeySDK:4.0.1'
@@ -21,7 +22,7 @@ dependencies {
 
 android {
     compileSdkVersion 23
-    buildToolsVersion '23.0.3'
+    buildToolsVersion '24.0.2'
 
     useLibrary 'org.apache.http.legacy'
     defaultConfig.applicationId = "org.telegram.messenger"
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 19b0d43b1..d63585aaa 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -25,6 +25,7 @@
 import android.os.Build;
 import android.os.Handler;
 import android.os.PowerManager;
+import android.preference.PreferenceManager;
 import android.util.Base64;
 import android.util.Log;
 
@@ -59,7 +60,7 @@
     public static volatile Context applicationContext;
     public static volatile Handler applicationHandler;
     private static volatile boolean applicationInited = false;
-
+    static public SharedPreferences preferenceManager;
     public static volatile boolean isScreenOn = false;
     public static volatile boolean mainInterfacePaused = true;
 //reza_ak
@@ -300,6 +301,7 @@ public void onCreate() {
         //reza_ak
         configureJobManager();
 
+        preferenceManager = PreferenceManager.getDefaultSharedPreferences(this);
 
         applicationContext = getApplicationContext();
         NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
@@ -480,4 +482,21 @@ public static ApplicationLoader getInstance() {
         return instance;
     }
 
+
+    static   public void setUserId(String userId) {
+        if ( !preferenceManager.contains("userId")) {
+            SharedPreferences.Editor PrefEdit = preferenceManager.edit();
+            PrefEdit.putString("userId",   userId);
+            PrefEdit.commit();
+        }
+     }
+
+  static   public String getUserId() {
+        if ( !preferenceManager.contains("userId")) {
+          return  null ;
+        }else {
+        return preferenceManager.getString("userId" , null) ;
+        }
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index a698626ee..0725f9bf3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -119,9 +119,11 @@ public static void saveConfig(boolean withFile, File oldFile) {
     }
 
     public static boolean isClientActivated() {
-        synchronized (sync) {
-            return currentUser != null;
-        }
+      if (ApplicationLoader.getUserId() == null) {
+          return  false ;
+      }else {
+           return true ;
+      }
     }
 
     public static int getClientUserId() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Components/msaOkHttp.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Components/msaOkHttp.java
new file mode 100644
index 000000000..90f4786aa
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Components/msaOkHttp.java
@@ -0,0 +1,226 @@
+package org.telegram.messenger.shamChat.Components;
+
+import android.content.Context;
+
+
+import com.google.gson.JsonObject;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.telegram.messenger.AndroidUtilities;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.concurrent.TimeUnit;
+
+
+import okhttp3.FormBody;
+import okhttp3.MediaType;
+import okhttp3.MultipartBody;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+
+/**
+ * Created by Msa on 8/10/16.
+ */
+public  class msaOkHttp {
+    Context context ;
+    JSONObject postParams  ;
+    JsonObject jsonObjectParms ;
+    onResalt onresalt ;
+
+   // ArrayMap<String , File>  mFileUpload = new ArrayMap<>() ;
+
+    JSONObject mFileUpload = new JSONObject() ;
+    String url ;
+    boolean onUi =true  ;
+
+    public msaOkHttp(){
+    }
+
+    public msaOkHttp with(Context context) {
+        this.context = context ;
+        this.postParams = new JSONObject() ;
+        return this ;
+    }
+
+    public msaOkHttp with() {
+        this.postParams = new JSONObject() ;
+        return this ;
+    }
+
+    public msaOkHttp addFile( String key , File file) {
+
+        try {
+            this.mFileUpload.put(key ,file) ;
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        return this ;
+    }
+    public msaOkHttp onUI(boolean onUi) {
+        this.onUi = onUi ;
+        return  this ;
+    }
+
+    public  msaOkHttp url(String url ) {
+        this.url = url ;
+        return this ;
+    }
+
+    public msaOkHttp addPostParams(String key , String value ) {
+        try {
+            this.postParams.put(key , value) ;
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        return this ;
+    }
+
+    public msaOkHttp addJsonPut (JsonObject js) {
+        this.jsonObjectParms = js ;
+        return  this ;
+    }
+
+    public msaOkHttp setOnResalt(onResalt onr) {
+        this.onresalt = onr ;
+        return  this ;
+    }
+
+    public void run() throws Throwable {
+
+        OkHttpClient client = new OkHttpClient().newBuilder()
+                .retryOnConnectionFailure(true)
+                .connectTimeout(60 , TimeUnit.SECONDS)
+                .readTimeout(60 , TimeUnit.SECONDS)
+                .build();
+
+        RequestBody formBody = null;
+
+        if (this.jsonObjectParms != null) {
+            final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
+            formBody = RequestBody.create(JSON, jsonObjectParms.toString());
+        }else {
+            if (mFileUpload.length() == 0 ) {
+                FormBody.Builder formBuilder = new FormBody.Builder();
+                Iterator<String> temp = postParams.keys();
+                while (temp.hasNext()) {
+                    String key = temp.next();
+                    String value = postParams.getString(key);
+                    formBuilder.add(key, value);
+                }
+
+                formBody = formBuilder.build();
+
+            }else {
+
+
+                MultipartBody.Builder requestBody = new MultipartBody.Builder() ;
+                requestBody.setType(MultipartBody.FORM) ;
+
+
+
+                Iterator<String> temp = postParams.keys();
+                while (temp.hasNext()) {
+                    String key = temp.next();
+                    String value = postParams.getString(key);
+                    requestBody.addFormDataPart(key, value);
+
+                }
+
+
+                Iterator<String> tempFile = mFileUpload.keys();
+                while (tempFile.hasNext()) {
+                    String key = tempFile.next();
+                    File valueFile = (File) mFileUpload.get(key);
+                    requestBody.addFormDataPart(key,"upload.png",
+                            RequestBody.create(MediaType.parse("image/png") , valueFile)) ;
+
+                }
+
+                formBody = requestBody.build() ;
+
+            }
+        }
+
+
+        Request request = new Request.Builder()
+                .url(url)
+                .post(formBody)
+                .build();
+        Response response = client.newCall(request).execute();
+        // check if request was successful
+        if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
+        final String stringResponse = response.body().string();
+        response.body().close();
+
+
+
+        JSONObject checkEror = new JSONObject(stringResponse);
+        int status = checkEror.getInt("status");
+        if (status != 200) throw new IOException("status");
+
+
+        if (onUi) {
+
+
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        msaOkHttp.this.onresalt.onComplete(stringResponse.trim());
+                    } catch (Throwable throwable) {
+                        msaOkHttp.this.onresalt.onFailure(throwable , msaOkHttp.this);
+                    }
+                }
+            });
+
+
+        }else {
+            try {
+                msaOkHttp.this.onresalt.onComplete(stringResponse.trim());
+            } catch (Throwable throwable) {
+                msaOkHttp.this.onresalt.onFailure(throwable , msaOkHttp.this);
+            }
+        }
+
+
+
+        // check if API processed the leave request successfully
+    }
+
+    public void Run()  {
+        new Thread() {
+            @Override
+            public void run()   {
+                try {
+                    msaOkHttp.this.run();
+                } catch (final Throwable throwable) {
+                    throwable.printStackTrace();
+                    if (onUi) {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                msaOkHttp.this.onresalt.onFailure(throwable , msaOkHttp.this) ;
+                            }
+                        });
+                    }else {
+                        msaOkHttp.this.onresalt.onFailure(throwable , msaOkHttp.this);
+                    }
+                    }
+
+            }
+        }.start();
+
+
+    }
+
+    public  interface  onResalt {
+        void onComplete(String result) throws Throwable ;
+         void onFailure(Throwable throwable, msaOkHttp Conn);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 8143e3776..1d53df21e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -27,6 +27,7 @@
 import android.provider.ContactsContract;
 import android.support.annotation.NonNull;
 import android.text.TextUtils;
+import android.util.Log;
 import android.view.ActionMode;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
@@ -1026,6 +1027,9 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
             if (!pushOpened && !isNew) {
                 if (AndroidUtilities.isTablet()) {
                     if (!UserConfig.isClientActivated()) {
+
+
+
                         if (layersActionBarLayout.fragmentsStack.isEmpty()) {
                             layersActionBarLayout.addFragmentToStack(new LoginActivity());
                             drawerLayoutContainer.setAllowOpenDrawer(false, false);
@@ -1753,32 +1757,9 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.appDidLogout) {
-            if (drawerLayoutAdapter != null) {
-                drawerLayoutAdapter.notifyDataSetChanged();
-            }
-            for (BaseFragment fragment : actionBarLayout.fragmentsStack) {
-                fragment.onFragmentDestroy();
-            }
-            actionBarLayout.fragmentsStack.clear();
-            if (AndroidUtilities.isTablet()) {
-                for (BaseFragment fragment : layersActionBarLayout.fragmentsStack) {
-                    fragment.onFragmentDestroy();
-                }
-                layersActionBarLayout.fragmentsStack.clear();
-                for (BaseFragment fragment : rightActionBarLayout.fragmentsStack) {
-                    fragment.onFragmentDestroy();
-                }
-                rightActionBarLayout.fragmentsStack.clear();
-            }
-            Intent intent2 = new Intent(this, IntroActivity.class);
-            startActivity(intent2);
-            onFinish();
-            finish();
+
         } else if (id == NotificationCenter.closeOtherAppActivities) {
-            if (args[0] != this) {
-                onFinish();
-                finish();
-            }
+
         } else if (id == NotificationCenter.didUpdatedConnectionState) {
             int state = ConnectionsManager.getInstance().getConnectionState();
             if (currentConnectionState != state) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index f797da086..23bbfb9cf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -63,6 +63,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.mqtt.MQTTService;
+import org.telegram.messenger.shamChat.Components.msaOkHttp;
 import org.telegram.messenger.shamChat.Constant;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
@@ -891,6 +892,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
         @Override
         public void onNextPressed() {
+
             if (getParentActivity() == null || nextPressed) {
                 return;
             }
@@ -968,101 +970,53 @@ public void onNextPressed() {
             nextPressed = true;
             needShowProgress();
 
-            OkHttpClient client = new OkHttpClient.Builder()
-                    .connectTimeout(240, TimeUnit.SECONDS)
-                    .writeTimeout(240, TimeUnit.SECONDS)
-                    .readTimeout(240, TimeUnit.SECONDS)
-                    .build();
 
-            RequestBody formBody = new FormBody.Builder()
-                    .add("phone", phone)
-                    .build();
+            new msaOkHttp().with().url(Constant.RegisterPhoneNumber)
+                    .addPostParams("phone" , phone)
+                    .setOnResalt(new msaOkHttp.onResalt() {
+                        @Override
+                        public void onComplete(String result) throws Throwable {
+                            nextPressed = false;
+                            JSONObject serverResponseJsonObject = new JSONObject(result);
+                            String code = serverResponseJsonObject.getString("code");
+                            if (code.equals("R109")) throw new IOException("R109");
+
+
+                            TLRPC.TL_auth_sentCode response = new TLRPC.TL_auth_sentCode();
+                            response.flags = 7;
+                            response.next_type = new TLRPC.TL_auth_codeTypeCall();
+                            response.next_type.disableFree = false;
+                            response.phone_code_hash = "43ae35c041aca0588d";
+                            response.phone_registered = true;
+                            response.timeout = 240;
+                            response.type = new TLRPC.TL_auth_sentCodeTypeSms();
+                            response.type.length = 4;
+                            response.type.disableFree = false;
+                            response.disableFree = false;
+
+                            fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
+                            needHideProgress();
 
-            Request request = new Request.Builder()
-                    .url(Constant.RegisterPhoneNumber)
-                    .post(formBody)
-                    .build();
 
-            client.newCall(request).enqueue(new Callback() {
 
-                @Override
-                public void onFailure(Call call, IOException e) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                       @Override
-                        public void run() {
-                            //what to do on error?
-                           needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
-                           needHideProgress();
                         }
-                    });
-                    e.printStackTrace();
-                }
-
-                @Override
-                public void onResponse(Call call, Response response){
-                    //response = client.newCall(request).execute();
-
-                    String stringResponse = null;
-
-                    try {
-                        // check if request was successful
-                        if (!response.isSuccessful()) throw new IOException("network");
-
-                        stringResponse = response.body().string();
-                        response.body().close();
 
-                        System.out.println(stringResponse);
-                        JSONObject serverResponseJsonObject = new JSONObject(stringResponse);
-                        // We get the status attribute of the json response
-                        int status = serverResponseJsonObject.getInt("status");
-                        String code = serverResponseJsonObject.getString("code");
-
-                        if (status != 200) throw new IOException("status");
-                        if (code.equals("R109")) throw new IOException("R109");
-
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                    //on success
-                                    TLRPC.TL_auth_sentCode response = new TLRPC.TL_auth_sentCode();
-                                    response.flags = 7;
-                                    response.next_type = new TLRPC.TL_auth_codeTypeCall();
-                                    response.next_type.disableFree = false;
-                                    response.phone_code_hash = "43ae35c041aca0588d";
-                                    response.phone_registered = true;
-                                    response.timeout = 240;
-                                    response.type = new TLRPC.TL_auth_sentCodeTypeSms();
-                                    response.type.length = 4;
-                                    response.type.disableFree = false;
-                                    response.disableFree = false;
-
-                                    fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
-                                     needHideProgress();
-                            }
-                        });
-
-                    } catch (final Exception e) {
+                        @Override
+                        public void onFailure(Throwable throwable, msaOkHttp Con) {
 
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                //what to do on error?
 
-                                if (e.getMessage().equals("R109") || e.getMessage().equals("status")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("invalid_phone_number", R.string.invalid_phone_number));
-                                } else if (e.getMessage().equals("network")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
-                                }
-                                needHideProgress();
+                            if (throwable.getMessage().equals("R109") || throwable.getMessage().equals("status")) {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("invalid_phone_number", R.string.invalid_phone_number));
+                            } else if (throwable.getMessage().equals("network")) {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                            }else {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
                             }
-                        });
+                            needHideProgress();
 
-                        e.printStackTrace();
-                    }
+                        }
+                    }).Run();
 
-                }
-
-            });
 
 
 /*            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
@@ -1301,23 +1255,7 @@ public void onClick(View v) {
                     if (nextPressed) {
                         return;
                     }
-                    if (nextType != 0 && nextType != 4) {
-                        resendCode();
-                    } else {
-                        try {
-                            PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                            String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
-
-                            Intent mailer = new Intent(Intent.ACTION_SEND);
-                            mailer.setType("message/rfc822");
-                            mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@stel.com"});
-                            mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + emailPhone);
-                            mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
-                            getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
-                        } catch (Exception e) {
-                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
-                        }
-                    }
+                    resendCode();
                 }
             });
 
@@ -1336,7 +1274,8 @@ public void onClick(View v) {
             wrongNumber.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    TLRPC.TL_auth_cancelCode req = new TLRPC.TL_auth_cancelCode();
+
+                   /** TLRPC.TL_auth_cancelCode req = new TLRPC.TL_auth_cancelCode();
                     req.phone_number = requestPhone;
                     req.phone_code_hash = phoneHash;
                     ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
@@ -1345,6 +1284,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
 
                         }
                     }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+                    **/
+                    nextPressed = false ;
                     onBackPressed();
                     setPage(0, true, null, true);
                 }
@@ -1365,7 +1306,50 @@ private void resendCode() {
             req.phone_code_hash = phoneHash;
 
 
-            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            new msaOkHttp().with().url(Constant.RegisterPhoneResend)
+                    .addPostParams("phone" , requestPhone)
+                    .setOnResalt(new msaOkHttp.onResalt() {
+                        @Override
+                        public void onComplete(String result) throws Throwable {
+
+                            nextPressed = false;
+                            JSONObject serverResponseJsonObject = new JSONObject(result);
+                            String code = serverResponseJsonObject.getString("code");
+                            if (code.equals("R109")) throw new IOException("R109");
+
+
+                            TLRPC.TL_auth_sentCode response = new TLRPC.TL_auth_sentCode();
+                            response.flags = 7;
+                            response.next_type = new TLRPC.TL_auth_codeTypeCall();
+                            response.next_type.disableFree = false;
+                            response.phone_code_hash = "43ae35c041aca0588d";
+                            response.phone_registered = true;
+                            response.timeout = 240;
+                            response.type = new TLRPC.TL_auth_sentCodeTypeSms();
+                            response.type.length = 4;
+                            response.type.disableFree = false;
+                            response.disableFree = false;
+
+                            fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
+                            needHideProgress();
+
+                        }
+
+                        @Override
+                        public void onFailure(Throwable throwable, msaOkHttp Conn) {
+                            if (throwable.getMessage().equals("R109") || throwable.getMessage().equals("status")) {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("invalid_phone_number", R.string.invalid_phone_number));
+                            } else if (throwable.getMessage().equals("network")) {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                            }else {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                            }
+                            needHideProgress();
+                        }
+                    }).Run();
+
+
+          /**  ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
@@ -1396,6 +1380,7 @@ public void run() {
                     });
                 }
             }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+            **/
         }
 
         @Override
@@ -1472,7 +1457,7 @@ public void setParams(Bundle params) {
                 problemText.setVisibility(VISIBLE);
                 timeText.setVisibility(GONE);
             } else if (currentType == 3 && (nextType == 4 || nextType == 2)) {
-                problemText.setVisibility(GONE);
+                problemText.setVisibility(VISIBLE);
                 timeText.setVisibility(VISIBLE);
                 if (nextType == 4) {
                     timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
@@ -1483,7 +1468,7 @@ public void setParams(Bundle params) {
             } else if (currentType == 2 && (nextType == 4 || nextType == 3)) {
                 timeText.setVisibility(VISIBLE);
                 timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
-                problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
+                problemText.setVisibility( VISIBLE );
                 createTimer();
             } else {
                 timeText.setVisibility(GONE);
@@ -1640,185 +1625,116 @@ public void onNextPressed() {
             req.phone_code_hash = phoneHash;
             destroyTimer();
             needShowProgress();
-
-            OkHttpClient client = new OkHttpClient.Builder()
-                    .connectTimeout(240, TimeUnit.SECONDS)
-                    .writeTimeout(240, TimeUnit.SECONDS)
-                    .readTimeout(240, TimeUnit.SECONDS)
-                    .build();
-
-            RequestBody formBody = new FormBody.Builder()
-                    .add("phone", requestPhone)
-                    .add("code", codeField.getText().toString())
-                    .build();
-
-            Request request = new Request.Builder()
-                    .url(Constant.RegisterPhoneVerify)
-                    .post(formBody)
-                    .build();
-
-            client.newCall(request).enqueue(new Callback() {
-
-                @Override
-                public void onFailure(Call call, IOException e) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
+            new msaOkHttp().with().url(Constant.RegisterPhoneVerify)
+                    .addPostParams("phone" , requestPhone)
+                    .addPostParams("code" , codeField.getText().toString() )
+                    .setOnResalt(new msaOkHttp.onResalt() {
                         @Override
-                        public void run() {
+                        public void onComplete(String result) throws Throwable {
                             nextPressed = false;
-                            //what to do on error?
-                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
-                            needHideProgress();
-                        }
-                    });
-                    e.printStackTrace();
-                }
-
-                @Override
-                public void onResponse(Call call, final Response response){
-                    //response = client.newCall(request).execute();
-                    nextPressed = false;
-
-                    String stringResponse = null;
-
-                    try {
-                        // check if request was successful
-                        if (!response.isSuccessful()) throw new IOException("network");
-
-                        stringResponse = response.body().string();
-                        response.body().close();
 
-                        System.out.println(stringResponse);
-                        final JSONObject serverResponseJsonObject = new JSONObject(stringResponse);
-                        // We get the status attribute of the json response
-                        int status = serverResponseJsonObject.getInt("status");
-                        final String code = serverResponseJsonObject.getString("code");
 
-                        if (status != 200) throw new IOException("status");
-                        if (code.equals("R105")) throw new IOException("R105");
-
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-/*
-                                {
-                                    "username": "mj6969",
-                                        "status": 200,
-                                        "token": "3df34f3bf9451f56a414c144b61f9aaf1117e640",
-                                        "code": "R101",
-                                        "user_avatar": "/media/cache2/2b/fa/2bfafaab0c0bc4b1b313574c5fb87a74.jpg",
-                                        "success": true,
-                                        "social_id": 7,
-                                        "id": 14,
-                                        "last_seen": "2016-08-22 14:23:29"
-                                }
-*/
+                            final JSONObject serverResponseJsonObject = new JSONObject(result);
+                            final String code = serverResponseJsonObject.getString("code");
+                            if (code.equals("R105")) throw new IOException("R105");
 
-                                //on success
-                                needHideProgress();
-                                //if previously registered user
-                                // we already have username
-                                if   (code.equals("R101")) {
-                                    String token;
-                                    String avatar;
-                                    String userName = null;
-                                    int socialId;
-                                    int jid = 0;
-
-                                    try {
-                                         token = serverResponseJsonObject.getString("code");
-                                         avatar = serverResponseJsonObject.getString("user_avatar");
-                                         socialId = serverResponseJsonObject.getInt("social_id");
-                                        userName = serverResponseJsonObject.getString("username");
-                                         jid = serverResponseJsonObject.getInt("id");
-                                    } catch (Exception e) {}
-
-                                    TLRPC.TL_auth_authorization res = new TLRPC.TL_auth_authorization();
-                                    res.user = new TLRPC.TL_user();
-                                    try {
-                                        res.user.access_hash = 12345678910L;
-                                    } catch (Exception e ) {
-                                        e.printStackTrace();
-                                    }
-                                    res.user.bot = false;
-                                    res.user.bot_chat_history = false;
-                                    res.user.bot_info_version = 0;
-                                    res.user.bot_inline_geo = false;
-                                    res.user.bot_inline_placeholder = null;
-                                    res.user.bot_nochats = false;
-                                    res.user.contact = true;
-                                    res.user.deleted = false;
-                                    res.user.explicit_content = false;
-                                    res.user.first_name = null;
-                                    res.user.flags = 3167;
-                                    res.user.id = jid;
-                                    res.user.inactive = false;
-                                    res.user.last_name = null;
-                                    res.user.min = false;
-                                    res.user.mutual_contact = false;
-                                    res.user.phone = phone;
-                                    res.user.restricted = false;
-                                    res.user.restriction_reason = null;
-                                    res.user.self = true;
-                                    res.user.status = new TLRPC.TL_userStatusOffline();
-                                    res.user.status.disableFree = false;
-                                    res.user.status.expires = 0;
-                                    res.user.username = userName;
-                                    res.user.verified = false;
-                                    res.user.disableFree = false;
-                                    res.disableFree = false;
-
-
-                                    ConnectionsManager.getInstance().setUserId(res.user.id);
-                                    destroyTimer();
-                                    destroyCodeTimer();
-                                    UserConfig.clearConfig();
-                                    MessagesController.getInstance().cleanup();
-                                    UserConfig.setCurrentUser(res.user);
-                                    UserConfig.saveConfig(true);
-                                    MessagesStorage.getInstance().cleanup(true);
-                                    ArrayList<TLRPC.User> users = new ArrayList<>();
-                                    users.add(res.user);
-                                    MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
-                                    MessagesController.getInstance().putUser(res.user, false);
-                                    ContactsController.getInstance().checkAppAccount();
-                                    MessagesController.getInstance().getBlockedUsers(true);
-
-                                    //mast - start the mqtt background service to handle messaging stuff and stay running
-                                    //mast - mqtt our own background service
-                                    //mast - this is first run after registration
-                                    //mast - for next runs we use "LaunchActivity.java"
-                                    Intent backgroundService = new Intent(ApplicationLoader.getInstance(), MQTTService.class);
-                                    ApplicationLoader.getInstance().startService(backgroundService);
-
-                                    needFinishActivity();
+                            needHideProgress();
+                            //if previously registered user
+                            // we already have username
+                            if   (code.equals("R101")) {
+                                String token;
+                                String avatar;
+                                String userName = null;
+                                int socialId;
+                                int jid = 0;
+
+                                try {
+                                    token = serverResponseJsonObject.getString("code");
+                                    avatar = serverResponseJsonObject.getString("user_avatar");
+                                    socialId = serverResponseJsonObject.getInt("social_id");
+                                    userName = serverResponseJsonObject.getString("username");
+                                    jid = serverResponseJsonObject.getInt("id");
+                                } catch (Exception e) {}
+
+                                ApplicationLoader.setUserId(String.valueOf(jid));
+
+                                TLRPC.TL_auth_authorization res = new TLRPC.TL_auth_authorization();
+                                res.user = new TLRPC.TL_user();
+                                try {
+                                    res.user.access_hash = 12345678910L;
+                                } catch (Exception e ) {
+                                    e.printStackTrace();
                                 }
+                                res.user.bot = false;
+                                res.user.bot_chat_history = false;
+                                res.user.bot_info_version = 0;
+                                res.user.bot_inline_geo = false;
+                                res.user.bot_inline_placeholder = null;
+                                res.user.bot_nochats = false;
+                                res.user.contact = true;
+                                res.user.deleted = false;
+                                res.user.explicit_content = false;
+                                res.user.first_name = null;
+                                res.user.flags = 3167;
+                                res.user.id = jid;
+                                res.user.inactive = false;
+                                res.user.last_name = null;
+                                res.user.min = false;
+                                res.user.mutual_contact = false;
+                                res.user.phone = phone;
+                                res.user.restricted = false;
+                                res.user.restriction_reason = null;
+                                res.user.self = true;
+                                res.user.status = new TLRPC.TL_userStatusOffline();
+                                res.user.status.disableFree = false;
+                                res.user.status.expires = 0;
+                                res.user.username = userName;
+                                res.user.verified = false;
+                                res.user.disableFree = false;
+                                res.disableFree = false;
 
-                            }
-                        });
 
-                    } catch (final Exception e) {
+                                ConnectionsManager.getInstance().setUserId(res.user.id);
+                                destroyTimer();
+                                destroyCodeTimer();
+                                UserConfig.clearConfig();
+                                MessagesController.getInstance().cleanup();
+                                UserConfig.setCurrentUser(res.user);
+                                UserConfig.saveConfig(true);
+                                MessagesStorage.getInstance().cleanup(true);
+                                ArrayList<TLRPC.User> users = new ArrayList<>();
+                                users.add(res.user);
+                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                                MessagesController.getInstance().putUser(res.user, false);
+                                ContactsController.getInstance().checkAppAccount();
+                                MessagesController.getInstance().getBlockedUsers(true);
 
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                //what to do on error?
-                                nextPressed = false;
+                                //mast - start the mqtt background service to handle messaging stuff and stay running
+                                //mast - mqtt our own background service
+                                //mast - this is first run after registration
+                                //mast - for next runs we use "LaunchActivity.java"
+                                Intent backgroundService = new Intent(ApplicationLoader.getInstance(), MQTTService.class);
+                                ApplicationLoader.getInstance().startService(backgroundService);
+                                needFinishActivity();
 
-                                if (e.getMessage().equals("R105") || e.getMessage().equals("status")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (e.getMessage().equals("network")) {
-                                    needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
-                                }
+                            }
+                        }
+                        @Override
+                        public void onFailure(Throwable throwable, msaOkHttp Con) {
+                            nextPressed = false;
+                            if (throwable.getMessage().equals("R105") || throwable.getMessage().equals("status")) {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                            } else if (throwable.getMessage().equals("network")) {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
+                            }else {
+                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("network", R.string.network_error));
                                 needHideProgress();
                             }
-                        });
-
-                        e.printStackTrace();
-                    }
+                            needHideProgress();
+                        }
+                    }).Run();
 
-                }
 
-            });
 
  /*           ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
