diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 17e9b9e01..e333b1eb2 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -8,6 +8,7 @@
 
 package org.telegram.android;
 
+import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
@@ -32,6 +33,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.MessageObject;
+import org.telegram.objects.VibrationOptions;
 import org.telegram.ui.ApplicationLoader;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PopupNotificationActivity;
@@ -301,6 +303,22 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 }
             }
 
+            VibrationOptions.VibrationSpeed speed = VibrationOptions.VibrationSpeed.getDefault();
+            int vibrationCount = VibrationOptions.DEFAULT_VIBRATION_COUNT;
+            if(needVibrate) {
+                if (chat_id != 0) {
+                    int speedValueOverride = preferences.getInt("VibrationSpeedGroup_" + chat_id, -1);
+                    int vibrationCountOverride = preferences.getInt("VibrationCountGroup_" + chat_id, -1);
+                    speed = VibrationOptions.VibrationSpeed.fromValue(speedValueOverride != -1 ? speedValueOverride : preferences.getInt("VibrationSpeedGroup", 0));
+                    vibrationCount = vibrationCountOverride != -1 ? vibrationCountOverride : preferences.getInt("VibrationCountGroup", vibrationCount);
+                } else if (user_id != 0) {
+                    int speedValueOverride = preferences.getInt("VibrationSpeed_" + user_id, -1);
+                    int vibrationCountOverride = preferences.getInt("VibrationCount_" + user_id, -1);
+                    speed = VibrationOptions.VibrationSpeed.fromValue(speedValueOverride != -1 ? speedValueOverride : preferences.getInt("VibrationSpeed", 0));
+                    vibrationCount = vibrationCountOverride != -1 ? vibrationCountOverride : preferences.getInt("VibrationCount", vibrationCount);
+                }
+            }
+
             Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
             intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
             intent.setFlags(32768);
@@ -421,7 +439,35 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                     mBuilder.setLights(ledColor, 1000, 1000);
                 }
                 if (needVibrate) {
-                    mBuilder.setVibrate(new long[]{0, 100, 0, 100});
+                    long pause, duration;
+                    switch (speed) {
+                        case FAST:
+                            pause = 0;
+                            duration = 100;
+                            break;
+                        case MEDIUM:
+                            pause = 200;
+                            duration = 300;
+                            break;
+                        case SLOW:
+                            pause = 200;
+                            duration = 800;
+                            break;
+                        case DEFAULT:
+                        default:
+                            pause = -1;
+                            duration = -1;
+                            mBuilder.setDefaults(Notification.DEFAULT_VIBRATE);
+                    }
+                    if(pause >= 0 && duration >= 0) {
+                        long pattern[] = new long[vibrationCount * 2];
+                        pattern[0] = 0l;
+                        for(int i = 1, l = pattern.length; i < l; i++) {
+                            pattern[i] = ((i % 2 != 0) ? duration : pause);
+                        }
+
+                        mBuilder.setVibrate(pattern);
+                    }
                 } else {
                     mBuilder.setVibrate(new long[]{0, 0});
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
index 506a8770e..d623f817b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -35,6 +35,7 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
+import org.telegram.objects.VibrationOptions;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Views.ActionBar.ActionBarLayer;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
@@ -47,6 +48,8 @@
 
     private int settingsNotificationsRow;
     private int settingsVibrateRow;
+    private int settingsVibrationSpeedRow;
+    private int settingsVibrationCountRow;
     private int settingsSoundRow;
     private int settingsLedRow;
     private int rowCount = 0;
@@ -60,6 +63,8 @@ public ProfileNotificationsActivity(Bundle args) {
     public boolean onFragmentCreate() {
         settingsNotificationsRow = rowCount++;
         settingsVibrateRow = rowCount++;
+        settingsVibrationSpeedRow = rowCount++;
+        settingsVibrationCountRow = rowCount++;
         settingsLedRow = rowCount++;
         settingsSoundRow = rowCount++;
         NotificationCenter.getInstance().addObserver(this, MessagesController.notificationsSettingsUpdated);
@@ -100,22 +105,28 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                         if (getParentActivity() == null) {
                             return;
                         }
+                        String title;
+                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        final String key;
+                        if (i == settingsVibrateRow) {
+                            title = LocaleController.getString("Vibrate", R.string.Vibrate);
+                            key = "vibrate_" + dialog_id;
+                        } else /*if (i == settingsNotificationsRow)*/ {
+                            title = LocaleController.getString("Notifications", R.string.Notifications);
+                            key = "notify2_" + dialog_id;
+                        }
+                        int storedValue = preferences.getInt(key, 0);
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setItems(new CharSequence[] {
+                        builder.setTitle(title);
+                        builder.setSingleChoiceItems(new CharSequence[] {
                                 LocaleController.getString("Default", R.string.Default),
                                 LocaleController.getString("Enabled", R.string.Enabled),
                                 LocaleController.getString("Disabled", R.string.Disabled)
-                        }, new DialogInterface.OnClickListener() {
+                        }, storedValue, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialog, int which) {
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                                 SharedPreferences.Editor editor = preferences.edit();
-                                if (i == settingsVibrateRow) {
-                                    editor.putInt("vibrate_" + dialog_id, which);
-                                } else if (i == settingsNotificationsRow) {
-                                    editor.putInt("notify2_" + dialog_id, which);
-                                }
+                                editor.putInt(key, which);
                                 editor.commit();
                                 if (listView != null) {
                                     listView.invalidateViews();
@@ -123,10 +134,98 @@ public void onClick(DialogInterface dialog, int which) {
                                 if (i == settingsNotificationsRow) {
                                     updateServerNotificationsSettings();
                                 }
+
+                                dialog.dismiss();
                             }
                         });
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                         showAlertDialog(builder);
+                    } else if (i == settingsVibrationSpeedRow) {
+                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        final String key;
+                        if ((int)dialog_id < 0) {
+                            key = "VibrationSpeedGroup_" + (-dialog_id);
+                        } else {
+                            key = "VibrationSpeed_" + (dialog_id);
+                        }
+
+                        VibrationOptions.VibrationSpeed[] vibrationSpeeds = VibrationOptions.VibrationSpeed.values();
+                        String speeds[] = new String[vibrationSpeeds.length + 1];
+                        speeds[0] = LocaleController.getString("Default", R.string.Default);
+                        for(int j = 0, vl = vibrationSpeeds.length; j < vl; j++) {
+                            VibrationOptions.VibrationSpeed speedVal = vibrationSpeeds[j];
+                            speeds[j + 1] = LocaleController.getString(speedVal.getLocaleKey(), speedVal.getResourceId());
+                        }
+                        int currentSpeedIndex = 0;
+
+                        int storedValue = preferences.getInt(key, -1);
+                        if(storedValue != -1) {
+                            VibrationOptions.VibrationSpeed currentSpeed = VibrationOptions.VibrationSpeed.fromValue(storedValue);
+                            currentSpeedIndex = currentSpeed.getValue() + 1; // index 0 is used to store the "Default" string
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity())
+                                .setTitle(LocaleController.getString("VibrateSpeedTitle", R.string.VibrateSpeedTitle))
+                                .setSingleChoiceItems(speeds, currentSpeedIndex, new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialog, int which) {
+                                        SharedPreferences.Editor editor = preferences.edit();
+                                        if(which != 0) {
+                                            which--;
+                                            VibrationOptions.VibrationSpeed selectedSpeed = VibrationOptions.VibrationSpeed.fromValue(which);
+
+                                            editor.putInt(key, selectedSpeed.getValue());
+                                        }
+                                        else
+                                            editor.remove(key);
+
+                                        editor.commit();
+                                        if (listView != null) {
+                                            listView.invalidateViews();
+                                        }
+
+                                        dialog.dismiss();
+                                    }
+                                })
+                                .setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == settingsVibrationCountRow) {
+                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        final String key;
+                        if ((int)dialog_id < 0) {
+                            key = "VibrationCountGroup_" + (-dialog_id);
+                        } else {
+                            key = "VibrationCount_" + (dialog_id);
+                        }
+
+                        String counts[] = new String[11];
+                        counts[0] = LocaleController.getString("Default", R.string.Default);
+                        for(int j = 1, vl = counts.length; j < vl; j++)
+                            counts[j] = String.valueOf(j);
+
+                        int count = preferences.getInt(key, 0);
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity())
+                                .setTitle(LocaleController.getString("VibrateCountTitle", R.string.VibrateCountTitle))
+                                .setSingleChoiceItems(counts, count, new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialog, int which) {
+                                        SharedPreferences.Editor editor = preferences.edit();
+                                        if(which != 0) {
+                                            editor.putInt(key, which);
+                                        }
+                                        else
+                                            editor.remove(key);
+
+                                        editor.commit();
+                                        if (listView != null) {
+                                            listView.invalidateViews();
+                                        }
+
+                                        dialog.dismiss();
+                                    }
+                                }).setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
                     } else if (i == settingsSoundRow) {
                         try {
                             Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
@@ -378,6 +477,41 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     } else if (value == 2) {
                         detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
                     }
+                } else if(i == settingsVibrationSpeedRow) {
+                    textView.setText(LocaleController.getString("VibrateSpeed", R.string.VibrateSpeed));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    String key;
+                    if ((int)dialog_id < 0) {
+                        key = "VibrationSpeedGroup_" + (-dialog_id);
+                    } else {
+                        key = "VibrationSpeed_" + (dialog_id);
+                    }
+                    int storedValue = preferences.getInt(key, -1);
+                    if(storedValue == -1) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    }
+                    else {
+                        VibrationOptions.VibrationSpeed speed = VibrationOptions.VibrationSpeed.fromValue(storedValue);
+                        detailTextView.setText(LocaleController.getString(speed.getLocaleKey(), speed.getResourceId()));
+                    }
+                } else if(i == settingsVibrationCountRow) {
+                    textView.setText(LocaleController.getString("VibrateCount", R.string.VibrateCount));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    String key;
+                    if ((int)dialog_id < 0) {
+                        key = "VibrationCountGroup_" + (-dialog_id);
+                    } else {
+                        key = "VibrationCount_" + (dialog_id);
+                    }
+                    int storedValue = preferences.getInt(key, -1);
+                    if(storedValue == -1) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    }
+                    else {
+                        detailTextView.setText(String.valueOf(storedValue));
+                    }
                 }
             } if (type == 1) {
                 if (view == null) {
@@ -426,7 +560,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         @Override
         public int getItemViewType(int i) {
-            if (i == settingsNotificationsRow || i == settingsVibrateRow) {
+            if (i == settingsNotificationsRow || i == settingsVibrateRow ||
+                i == settingsVibrationSpeedRow || i == settingsVibrationCountRow) {
                 return 0;
             } else if (i == settingsSoundRow) {
                 return 1;
