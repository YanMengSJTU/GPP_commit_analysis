diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 0a1d54b00..23a2ceb30 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -123,17 +123,6 @@
             android:windowSoftInputMode="adjustResize|stateHidden">
         </activity>
 
-        <receiver android:name="org.telegram.android.AutoMessageHeardReceiver">
-            <intent-filter>
-                <action android:name="org.telegram.messenger.ACTION_MESSAGE_HEARD"/>
-            </intent-filter>
-        </receiver>
-
-        <receiver android:name="org.telegram.android.AutoMessageReplyReceiver">
-            <intent-filter>
-                <action android:name="org.telegram.messenger.ACTION_MESSAGE_REPLY"/>
-            </intent-filter>
-        </receiver>
 
         <service android:name="org.telegram.android.AuthenticatorService" android:exported="true">
             <intent-filter>
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AutoMessageHeardReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/AutoMessageHeardReceiver.java
deleted file mode 100644
index 825bcd565..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/AutoMessageHeardReceiver.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.android;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-public class AutoMessageHeardReceiver extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        long dialog_id = intent.getLongExtra("dialog_id", 0);
-        int max_id = intent.getIntExtra("max_id", 0);
-        if (dialog_id == 0 || max_id == 0) {
-            return;
-        }
-        MessagesController.getInstance().markDialogAsRead(dialog_id, max_id, max_id, 0, 0, true, false);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AutoMessageReplyReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/AutoMessageReplyReceiver.java
deleted file mode 100644
index d38b131a8..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/AutoMessageReplyReceiver.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.RemoteInput;
-
-public class AutoMessageReplyReceiver extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);
-        if (remoteInput == null) {
-            return;
-        }
-        CharSequence text = remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
-        if (text == null || text.length() == 0) {
-            return;
-        }
-        long dialog_id = intent.getLongExtra("dialog_id", 0);
-        int max_id = intent.getIntExtra("max_id", 0);
-        if (dialog_id == 0 || max_id == 0) {
-            return;
-        }
-        MessagesController.getInstance().markDialogAsRead(dialog_id, max_id, max_id, 0, 0, true, false);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index 7d9845b62..305f2c7eb 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -616,7 +616,6 @@ public void run() {
                     }
                     if (request && !contactHashMap.isEmpty() && !contactsMap.isEmpty()) {
                         if (toImport.isEmpty()) {
-                            MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
                         }
                         if (!disableDeletion && !contactHashMap.isEmpty()) {
                             AndroidUtilities.runOnUIThread(new Runnable() {
@@ -718,7 +717,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                     if (error == null) {
                                         FileLog.e("tmessages", "contacts imported");
                                         if (isLastQuery && !contactsMap.isEmpty()) {
-                                            MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
                                         }
                                         TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
                                         if (BuildVars.DEBUG_VERSION) {
@@ -726,7 +724,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
 //                                                FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
 //                                            }
                                         }
-                                        MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
                                         ArrayList<TLRPC.TL_contact> cArr = new ArrayList<>();
                                         for (TLRPC.TL_importedContact c : res.imported) {
                                             TLRPC.TL_contact contact = new TLRPC.TL_contact();
@@ -800,7 +797,6 @@ public void run() {
                         }
                     });
                     if (!contactsMap.isEmpty()) {
-                        MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
                     }
                 }
             }
@@ -1085,7 +1081,6 @@ public void run() {
         }
 
         if (toAdd.length() != 0 || toDelete.length() != 0) {
-            MessagesStorage.getInstance().applyPhoneBookUpdates(toAdd.toString(), toDelete.toString());
         }
 
     }
@@ -1114,12 +1109,7 @@ public void processContactsUpdates(ArrayList<Integer> ids, ConcurrentHashMap<Int
                 }
             }
         }
-        if (!contactsToDelete.isEmpty()) {
-            MessagesStorage.getInstance().deleteContacts(contactsToDelete);
-        }
-        if (!newContacts.isEmpty()) {
-            MessagesStorage.getInstance().putContacts(newContacts, false);
-        }
+
         if (!contactsLoaded || !contactsBookLoaded) {
             delayedContactsUpdate.addAll(ids);
             FileLog.e("tmessages", "delay update - contacts add = " + newContacts.size() + " delete = " + contactsToDelete.size());
@@ -1249,7 +1239,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     return;
                 }
                 final TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
-                MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
 
 //                if (BuildVars.DEBUG_VERSION) {
 //                    for (TLRPC.User user : res.users) {
@@ -1268,11 +1257,9 @@ public void run() {
                     newContact.user_id = u.id;
                     ArrayList<TLRPC.TL_contact> arrayList = new ArrayList<>();
                     arrayList.add(newContact);
-                    MessagesStorage.getInstance().putContacts(arrayList, false);
 
                     if (u.phone != null && u.phone.length() > 0) {
                         CharSequence name = formatName(u.first_name, u.last_name);
-                        MessagesStorage.getInstance().applyPhoneBookUpdates(u.phone, "");
                         Contact contact = contactsBookSPhones.get(u.phone);
                         if (contact != null) {
                             int index = contact.shortPhones.indexOf(u.phone);
@@ -1323,7 +1310,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 if (error != null) {
                     return;
                 }
-                MessagesStorage.getInstance().deleteContacts(uids);
                 Utilities.phoneBookQueue.postRunnable(new Runnable() {
                     @Override
                     public void run() {
@@ -1336,7 +1322,6 @@ public void run() {
                 for (TLRPC.User user : users) {
                     if (user.phone != null && user.phone.length() > 0) {
                         CharSequence name = ContactsController.formatName(user.first_name, user.last_name);
-                        MessagesStorage.getInstance().applyPhoneBookUpdates(user.phone, "");
                         Contact contact = contactsBookSPhones.get(user.phone);
                         if (contact != null) {
                             int index = contact.shortPhones.indexOf(user.phone);
@@ -1410,7 +1395,6 @@ public void run() {
                                     toDbUser.status = status.status;
                                     dbUsersStatus.add(toDbUser);
                                 }
-                                MessagesStorage.getInstance().updateUsers(dbUsersStatus, true, true, true);
                             }
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_STATUS);
                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index e2212399b..a031f910a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -8,8 +8,6 @@
 
 package org.telegram.android;
 
-import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.ProgressDialog;
 import android.content.BroadcastReceiver;
@@ -22,33 +20,15 @@
 import android.graphics.BitmapFactory;
 import android.graphics.Point;
 import android.hardware.Sensor;
-import android.hardware.SensorEvent;
-import android.hardware.SensorEventListener;
 import android.hardware.SensorManager;
-import android.media.AudioFormat;
-import android.media.AudioManager;
-import android.media.AudioRecord;
-import android.media.AudioTrack;
-import android.media.MediaCodec;
-import android.media.MediaCodecInfo;
-import android.media.MediaCodecList;
-import android.media.MediaExtractor;
-import android.media.MediaFormat;
-import android.media.MediaPlayer;
-import android.media.MediaRecorder;
 import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
 import android.os.ParcelFileDescriptor;
-import android.os.Vibrator;
 import android.provider.MediaStore;
-import android.view.View;
 
-import org.telegram.android.video.InputSurface;
-import org.telegram.android.video.MP4Builder;
-import org.telegram.android.video.Mp4Movie;
-import org.telegram.android.video.OutputSurface;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
@@ -56,7 +36,6 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.ApplicationLoader;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -67,11 +46,8 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Locale;
-import java.util.Timer;
-import java.util.TimerTask;
-import java.util.concurrent.Semaphore;
 
-public class MediaController implements NotificationCenter.NotificationCenterDelegate, SensorEventListener {
+public class MediaController implements NotificationCenter.NotificationCenterDelegate {
 
     private native int startRecord(String path);
     private native int writeFrame(ByteBuffer frame, int len);
@@ -93,18 +69,6 @@
         int getObserverTag();
     }
 
-    private class AudioBuffer {
-        public AudioBuffer(int capacity) {
-            buffer = ByteBuffer.allocateDirect(capacity);
-            bufferBytes = new byte[capacity];
-        }
-
-        ByteBuffer buffer;
-        byte[] bufferBytes;
-        int size;
-        int finished;
-        long pcmOffset;
-    }
 
     private static final String[] projectionPhotos = {
             MediaStore.Images.Media._ID,
@@ -181,38 +145,15 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
         public CharSequence caption;
     }
 
-    public final static String MIME_TYPE = "video/avc";
-    private final static int PROCESSOR_TYPE_OTHER = 0;
-    private final static int PROCESSOR_TYPE_QCOM = 1;
-    private final static int PROCESSOR_TYPE_INTEL = 2;
-    private final static int PROCESSOR_TYPE_MTK = 3;
-    private final static int PROCESSOR_TYPE_SEC = 4;
-    private final static int PROCESSOR_TYPE_TI = 5;
-    private final Object videoConvertSync = new Object();
 
     private HashMap<Long, Long> typingTimes = new HashMap<>();
 
-    private SensorManager sensorManager;
-    private Sensor proximitySensor;
-    private boolean ignoreProximity;
-
-    private ArrayList<MessageObject> videoConvertQueue = new ArrayList<>();
-    private final Object videoQueueSync = new Object();
-    private boolean cancelCurrentVideoConversion = false;
-    private boolean videoConvertFirstWrite = true;
-
     public static final int AUTODOWNLOAD_MASK_PHOTO = 1;
-    public static final int AUTODOWNLOAD_MASK_AUDIO = 2;
-    public static final int AUTODOWNLOAD_MASK_VIDEO = 4;
-    public static final int AUTODOWNLOAD_MASK_DOCUMENT = 8;
     public int mobileDataDownloadMask = 0;
     public int wifiDownloadMask = 0;
     public int roamingDownloadMask = 0;
     private int lastCheckMask = 0;
     private ArrayList<DownloadObject> photoDownloadQueue = new ArrayList<>();
-    private ArrayList<DownloadObject> audioDownloadQueue = new ArrayList<>();
-    private ArrayList<DownloadObject> documentDownloadQueue = new ArrayList<>();
-    private ArrayList<DownloadObject> videoDownloadQueue = new ArrayList<>();
     private HashMap<String, DownloadObject> downloadQueueKeys = new HashMap<>();
 
     private boolean saveToGallery = true;
@@ -224,104 +165,9 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private ArrayList<FileDownloadProgressListener> deleteLaterArray = new ArrayList<>();
     private int lastTag = 0;
 
-    private boolean isPaused = false;
-    private MediaPlayer audioPlayer = null;
-    private AudioTrack audioTrackPlayer = null;
-    private int lastProgress = 0;
-    private MessageObject playingMessageObject;
-    private int playerBufferSize = 0;
-    private boolean decodingFinished = false;
-    private long currentTotalPcmDuration;
-    private long lastPlayPcm;
-    private int ignoreFirstProgress = 0;
-    private Timer progressTimer = null;
-    private final Object progressTimerSync = new Object();
-    private boolean useFrontSpeaker;
-    private int buffersWrited;
-
-    private AudioRecord audioRecorder = null;
-    private TLRPC.TL_audio recordingAudio = null;
-    private File recordingAudioFile = null;
-    private long recordStartTime;
-    private long recordTimeCount;
-    private long recordDialogId;
-    private MessageObject recordReplyingMessageObject;
-    private DispatchQueue fileDecodingQueue;
-    private DispatchQueue playerQueue;
-    private ArrayList<AudioBuffer> usedPlayerBuffers = new ArrayList<>();
-    private ArrayList<AudioBuffer> freePlayerBuffers = new ArrayList<>();
-    private final Object playerSync = new Object();
-    private final Object playerObjectSync = new Object();
-
-    private final Object sync = new Object();
-
-    private ArrayList<ByteBuffer> recordBuffers = new ArrayList<>();
+
     private ByteBuffer fileBuffer;
-    private int recordBufferSize;
-    private boolean sendAfterDone;
 
-    private DispatchQueue recordQueue;
-    private DispatchQueue fileEncodingQueue;
-    private Runnable recordRunnable = new Runnable() {
-        @Override
-        public void run() {
-            if (audioRecorder != null) {
-                ByteBuffer buffer;
-                if (!recordBuffers.isEmpty()) {
-                    buffer = recordBuffers.get(0);
-                    recordBuffers.remove(0);
-                } else {
-                    buffer = ByteBuffer.allocateDirect(recordBufferSize);
-                }
-                buffer.rewind();
-                int len = audioRecorder.read(buffer, buffer.capacity());
-                if (len > 0) {
-                    buffer.limit(len);
-                    final ByteBuffer finalBuffer = buffer;
-                    final boolean flush = len != buffer.capacity();
-                    if (len != 0) {
-                        fileEncodingQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                while (finalBuffer.hasRemaining()) {
-                                    int oldLimit = -1;
-                                    if (finalBuffer.remaining() > fileBuffer.remaining()) {
-                                        oldLimit = finalBuffer.limit();
-                                        finalBuffer.limit(fileBuffer.remaining() + finalBuffer.position());
-                                    }
-                                    fileBuffer.put(finalBuffer);
-                                    if (fileBuffer.position() == fileBuffer.limit() || flush) {
-                                        if (writeFrame(fileBuffer, !flush ? fileBuffer.limit() : finalBuffer.position()) != 0) {
-                                            fileBuffer.rewind();
-                                            recordTimeCount += fileBuffer.limit() / 2 / 16;
-                                        }
-                                    }
-                                    if (oldLimit != -1) {
-                                        finalBuffer.limit(oldLimit);
-                                    }
-                                }
-                                recordQueue.postRunnable(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        recordBuffers.add(finalBuffer);
-                                    }
-                                });
-                            }
-                        });
-                    }
-                    recordQueue.postRunnable(recordRunnable);
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordProgressChanged, System.currentTimeMillis() - recordStartTime);
-                        }
-                    });
-                } else {
-                    recordBuffers.add(buffer);
-                }
-            }
-        }
-    };
 
     private class InternalObserver extends ContentObserver {
         public InternalObserver() {
@@ -349,11 +195,6 @@ public void onChange(boolean selfChange) {
 
     private ExternalObserver externalObserver = null;
     private InternalObserver internalObserver = null;
-    private long lastSecretChatEnterTime = 0;
-    private long lastSecretChatLeaveTime = 0;
-    private long lastMediaCheckTime = 0;
-    private TLRPC.EncryptedChat lastSecretChat = null;
-    private ArrayList<Long> lastSecretChatVisibleMessages = null;
     private int startObserverToken = 0;
     private StopMediaObserverRunnable stopMediaObserverRunnable = null;
     private final class StopMediaObserverRunnable implements Runnable {
@@ -398,42 +239,13 @@ public static MediaController getInstance() {
     }
 
     public MediaController() {
-        try {
-            recordBufferSize = AudioRecord.getMinBufferSize(16000, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
-            if (recordBufferSize <= 0) {
-                recordBufferSize = 1280;
-            }
-            playerBufferSize = AudioTrack.getMinBufferSize(48000, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT);
-            if (playerBufferSize <= 0) {
-                playerBufferSize = 3840;
-            }
-            for (int a = 0; a < 5; a++) {
-                ByteBuffer buffer = ByteBuffer.allocateDirect(4096);
-                recordBuffers.add(buffer);
-            }
-            for (int a = 0; a < 3; a++) {
-                freePlayerBuffers.add(new AudioBuffer(playerBufferSize));
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        try {
-            sensorManager = (SensorManager) ApplicationLoader.applicationContext.getSystemService(Context.SENSOR_SERVICE);
-            proximitySensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
         fileBuffer = ByteBuffer.allocateDirect(1920);
-        recordQueue = new DispatchQueue("recordQueue");
-        recordQueue.setPriority(Thread.MAX_PRIORITY);
-        fileEncodingQueue = new DispatchQueue("fileEncodingQueue");
-        fileEncodingQueue.setPriority(Thread.MAX_PRIORITY);
-        playerQueue = new DispatchQueue("playerQueue");
-        fileDecodingQueue = new DispatchQueue("fileDecodingQueue");
 
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        mobileDataDownloadMask = preferences.getInt("mobileDataDownloadMask", AUTODOWNLOAD_MASK_PHOTO | AUTODOWNLOAD_MASK_AUDIO);
-        wifiDownloadMask = preferences.getInt("wifiDownloadMask", AUTODOWNLOAD_MASK_PHOTO | AUTODOWNLOAD_MASK_AUDIO);
+//        mobileDataDownloadMask = preferences.getInt("mobileDataDownloadMask", AUTODOWNLOAD_MASK_PHOTO | AUTODOWNLOAD_MASK_AUDIO);
+//        wifiDownloadMask = preferences.getInt("wifiDownloadMask", AUTODOWNLOAD_MASK_PHOTO | AUTODOWNLOAD_MASK_AUDIO);
+        mobileDataDownloadMask = preferences.getInt("mobileDataDownloadMask", AUTODOWNLOAD_MASK_PHOTO);
+        wifiDownloadMask = preferences.getInt("wifiDownloadMask", AUTODOWNLOAD_MASK_PHOTO);
         roamingDownloadMask = preferences.getInt("roamingDownloadMask", 0);
         saveToGallery = preferences.getBoolean("save_gallery", false);
 
@@ -478,84 +290,11 @@ public void onReceive(Context context, Intent intent) {
         }
     }
 
-    private void startProgressTimer() {
-        synchronized (progressTimerSync) {
-            if (progressTimer != null) {
-                try {
-                    progressTimer.cancel();
-                    progressTimer = null;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            progressTimer = new Timer();
-            progressTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    synchronized (sync) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (playingMessageObject != null && (audioPlayer != null || audioTrackPlayer != null) && !isPaused) {
-                                    try {
-                                        if (ignoreFirstProgress != 0) {
-                                            ignoreFirstProgress--;
-                                            return;
-                                        }
-                                        int progress = 0;
-                                        float value = 0;
-                                        if (audioPlayer != null) {
-                                            progress = audioPlayer.getCurrentPosition();
-                                            value = (float) lastProgress / (float) audioPlayer.getDuration();
-                                            if (progress <= lastProgress) {
-                                                return;
-                                            }
-                                        } else if (audioTrackPlayer != null) {
-                                            progress = (int) (lastPlayPcm / 48.0f);
-                                            value = (float) lastPlayPcm / (float) currentTotalPcmDuration;
-                                            if (progress == lastProgress) {
-                                                return;
-                                            }
-                                        }
-                                        lastProgress = progress;
-                                        playingMessageObject.audioProgress = value;
-                                        playingMessageObject.audioProgressSec = lastProgress / 1000;
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioProgressDidChanged, playingMessageObject.getId(), value);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            }
-                        });
-                    }
-                }
-            }, 0, 17);
-        }
-    }
-
-    private void stopProgressTimer() {
-        synchronized (progressTimerSync) {
-            if (progressTimer != null) {
-                try {
-                    progressTimer.cancel();
-                    progressTimer = null;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        }
-    }
 
     public void cleanup() {
-        clenupPlayer(false);
         photoDownloadQueue.clear();
-        audioDownloadQueue.clear();
-        documentDownloadQueue.clear();
-        videoDownloadQueue.clear();
         downloadQueueKeys.clear();
-        videoConvertQueue.clear();
         typingTimes.clear();
-        cancelVideoConvert(null);
     }
 
     protected int getAutodownloadMask() {
@@ -563,15 +302,6 @@ protected int getAutodownloadMask() {
         if ((mobileDataDownloadMask & AUTODOWNLOAD_MASK_PHOTO) != 0 || (wifiDownloadMask & AUTODOWNLOAD_MASK_PHOTO) != 0 || (roamingDownloadMask & AUTODOWNLOAD_MASK_PHOTO) != 0) {
             mask |= AUTODOWNLOAD_MASK_PHOTO;
         }
-        if ((mobileDataDownloadMask & AUTODOWNLOAD_MASK_AUDIO) != 0 || (wifiDownloadMask & AUTODOWNLOAD_MASK_AUDIO) != 0 || (roamingDownloadMask & AUTODOWNLOAD_MASK_AUDIO) != 0) {
-            mask |= AUTODOWNLOAD_MASK_AUDIO;
-        }
-        if ((mobileDataDownloadMask & AUTODOWNLOAD_MASK_VIDEO) != 0 || (wifiDownloadMask & AUTODOWNLOAD_MASK_VIDEO) != 0 || (roamingDownloadMask & AUTODOWNLOAD_MASK_VIDEO) != 0) {
-            mask |= AUTODOWNLOAD_MASK_VIDEO;
-        }
-        if ((mobileDataDownloadMask & AUTODOWNLOAD_MASK_DOCUMENT) != 0 || (wifiDownloadMask & AUTODOWNLOAD_MASK_DOCUMENT) != 0 || (roamingDownloadMask & AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
-            mask |= AUTODOWNLOAD_MASK_DOCUMENT;
-        }
         return mask;
     }
 
@@ -591,36 +321,6 @@ public void checkAutodownloadSettings() {
             }
             photoDownloadQueue.clear();
         }
-        if ((currentMask & AUTODOWNLOAD_MASK_AUDIO) != 0) {
-            if (audioDownloadQueue.isEmpty()) {
-                newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_AUDIO);
-            }
-        } else {
-            for (DownloadObject downloadObject : audioDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Audio)downloadObject.object);
-            }
-            audioDownloadQueue.clear();
-        }
-        if ((currentMask & AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
-            if (documentDownloadQueue.isEmpty()) {
-                newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_DOCUMENT);
-            }
-        } else {
-            for (DownloadObject downloadObject : documentDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Document)downloadObject.object);
-            }
-            documentDownloadQueue.clear();
-        }
-        if ((currentMask & AUTODOWNLOAD_MASK_VIDEO) != 0) {
-            if (videoDownloadQueue.isEmpty()) {
-                newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_VIDEO);
-            }
-        } else {
-            for (DownloadObject downloadObject : videoDownloadQueue) {
-                FileLoader.getInstance().cancelLoadFile((TLRPC.Video)downloadObject.object);
-            }
-            videoDownloadQueue.clear();
-        }
 
         int mask = getAutodownloadMask();
         if (mask == 0) {
@@ -629,15 +329,6 @@ public void checkAutodownloadSettings() {
             if ((mask & AUTODOWNLOAD_MASK_PHOTO) == 0) {
                 MessagesStorage.getInstance().clearDownloadQueue(AUTODOWNLOAD_MASK_PHOTO);
             }
-            if ((mask & AUTODOWNLOAD_MASK_AUDIO) == 0) {
-                MessagesStorage.getInstance().clearDownloadQueue(AUTODOWNLOAD_MASK_AUDIO);
-            }
-            if ((mask & AUTODOWNLOAD_MASK_VIDEO) == 0) {
-                MessagesStorage.getInstance().clearDownloadQueue(AUTODOWNLOAD_MASK_VIDEO);
-            }
-            if ((mask & AUTODOWNLOAD_MASK_DOCUMENT) == 0) {
-                MessagesStorage.getInstance().clearDownloadQueue(AUTODOWNLOAD_MASK_DOCUMENT);
-            }
         }
     }
 
@@ -662,12 +353,6 @@ protected void processDownloadObjects(int type, ArrayList<DownloadObject> object
         ArrayList<DownloadObject> queue = null;
         if (type == AUTODOWNLOAD_MASK_PHOTO) {
             queue = photoDownloadQueue;
-        } else if (type == AUTODOWNLOAD_MASK_AUDIO) {
-            queue = audioDownloadQueue;
-        } else if (type == AUTODOWNLOAD_MASK_VIDEO) {
-            queue = videoDownloadQueue;
-        } else if (type == AUTODOWNLOAD_MASK_DOCUMENT) {
-            queue = documentDownloadQueue;
         }
         for (DownloadObject downloadObject : objects) {
             String path = FileLoader.getAttachFileName(downloadObject.object);
@@ -699,15 +384,6 @@ protected void newDownloadObjectsAvailable(int downloadMask) {
         if ((mask & AUTODOWNLOAD_MASK_PHOTO) != 0 && (downloadMask & AUTODOWNLOAD_MASK_PHOTO) != 0 && photoDownloadQueue.isEmpty()) {
             MessagesStorage.getInstance().getDownloadQueue(AUTODOWNLOAD_MASK_PHOTO);
         }
-        if ((mask & AUTODOWNLOAD_MASK_AUDIO) != 0 && (downloadMask & AUTODOWNLOAD_MASK_AUDIO) != 0 && audioDownloadQueue.isEmpty()) {
-            MessagesStorage.getInstance().getDownloadQueue(AUTODOWNLOAD_MASK_AUDIO);
-        }
-        if ((mask & AUTODOWNLOAD_MASK_VIDEO) != 0 && (downloadMask & AUTODOWNLOAD_MASK_VIDEO) != 0 && videoDownloadQueue.isEmpty()) {
-            MessagesStorage.getInstance().getDownloadQueue(AUTODOWNLOAD_MASK_VIDEO);
-        }
-        if ((mask & AUTODOWNLOAD_MASK_DOCUMENT) != 0 && (downloadMask & AUTODOWNLOAD_MASK_DOCUMENT) != 0 && documentDownloadQueue.isEmpty()) {
-            MessagesStorage.getInstance().getDownloadQueue(AUTODOWNLOAD_MASK_DOCUMENT);
-        }
     }
 
     private void checkDownloadFinished(String fileName, int state) {
@@ -722,21 +398,6 @@ private void checkDownloadFinished(String fileName, int state) {
                 if (photoDownloadQueue.isEmpty()) {
                     newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_PHOTO);
                 }
-            } else if (downloadObject.type == AUTODOWNLOAD_MASK_AUDIO) {
-                audioDownloadQueue.remove(downloadObject);
-                if (audioDownloadQueue.isEmpty()) {
-                    newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_AUDIO);
-                }
-            } else if (downloadObject.type == AUTODOWNLOAD_MASK_VIDEO) {
-                videoDownloadQueue.remove(downloadObject);
-                if (videoDownloadQueue.isEmpty()) {
-                    newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_VIDEO);
-                }
-            } else if (downloadObject.type == AUTODOWNLOAD_MASK_DOCUMENT) {
-                documentDownloadQueue.remove(downloadObject);
-                if (documentDownloadQueue.isEmpty()) {
-                    newDownloadObjectsAvailable(AUTODOWNLOAD_MASK_DOCUMENT);
-                }
             }
         }
     }
@@ -816,46 +477,11 @@ public void processMediaObserver(Uri uri) {
                 }
                 cursor.close();
             }
-            if (!screenshotDates.isEmpty()) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.screenshotTook);
-                        checkScreenshots(screenshotDates);
-                    }
-                });
-            }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
     }
 
-    private void checkScreenshots(ArrayList<Long> dates) {
-        if (dates == null || dates.isEmpty() || lastSecretChatEnterTime == 0 || lastSecretChat == null || !(lastSecretChat instanceof TLRPC.TL_encryptedChat)) {
-            return;
-        }
-        long dt = 2000;
-        boolean send = false;
-        for (Long date : dates) {
-            if (lastMediaCheckTime != 0 && date <= lastMediaCheckTime) {
-                continue;
-            }
-
-            if (date >= lastSecretChatEnterTime) {
-                if (lastSecretChatLeaveTime == 0 || date <= lastSecretChatLeaveTime + dt) {
-                    lastMediaCheckTime = Math.max(lastMediaCheckTime, date);
-                    send = true;
-                }
-            }
-        }
-    }
-
-    public void setLastEncryptedChatParams(long enterTime, long leaveTime, TLRPC.EncryptedChat encryptedChat, ArrayList<Long> visibleMessages) {
-        lastSecretChatEnterTime = enterTime;
-        lastSecretChatLeaveTime = leaveTime;
-        lastSecretChat = encryptedChat;
-        lastSecretChatVisibleMessages = visibleMessages;
-    }
 
     public int generateObserverTag() {
         return lastTag++;
@@ -981,547 +607,10 @@ public void didReceivedNotification(int id, Object... args) {
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
-        } else if (id == NotificationCenter.messagesDeleted) {
-            if (playingMessageObject != null) {
-                ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
-                if (markAsDeletedMessages.contains(playingMessageObject.getId())) {
-                    clenupPlayer(false);
-                }
-            }
-        } else if (id == NotificationCenter.removeAllMessagesFromDialog) {
-            long did = (Long)args[0];
-            if (playingMessageObject != null && playingMessageObject.getDialogId() == did) {
-                clenupPlayer(false);
-            }
-        }
-    }
-
-    private void checkDecoderQueue() {
-        fileDecodingQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (decodingFinished) {
-                    checkPlayerQueue();
-                    return;
-                }
-                boolean was = false;
-                while (true) {
-                    AudioBuffer buffer = null;
-                    synchronized (playerSync) {
-                        if (!freePlayerBuffers.isEmpty()) {
-                            buffer = freePlayerBuffers.get(0);
-                            freePlayerBuffers.remove(0);
-                        }
-                        if (!usedPlayerBuffers.isEmpty()) {
-                            was = true;
-                        }
-                    }
-                    if (buffer != null) {
-                        readOpusFile(buffer.buffer, playerBufferSize, readArgs);
-                        buffer.size = readArgs[0];
-                        buffer.pcmOffset = readArgs[1];
-                        buffer.finished = readArgs[2];
-                        if (buffer.finished == 1) {
-                            decodingFinished = true;
-                        }
-                        if (buffer.size != 0) {
-                            buffer.buffer.rewind();
-                            buffer.buffer.get(buffer.bufferBytes);
-                            synchronized (playerSync) {
-                                usedPlayerBuffers.add(buffer);
-                            }
-                        } else {
-                            synchronized (playerSync) {
-                                freePlayerBuffers.add(buffer);
-                                break;
-                            }
-                        }
-                        was = true;
-                    } else {
-                        break;
-                    }
-                }
-                if (was) {
-                    checkPlayerQueue();
-                }
-            }
-        });
-    }
-
-    private void checkPlayerQueue() {
-        playerQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                synchronized (playerObjectSync) {
-                    if (audioTrackPlayer == null || audioTrackPlayer.getPlayState() != AudioTrack.PLAYSTATE_PLAYING) {
-                        return;
-                    }
-                }
-                AudioBuffer buffer = null;
-                synchronized (playerSync) {
-                    if (!usedPlayerBuffers.isEmpty()) {
-                        buffer = usedPlayerBuffers.get(0);
-                        usedPlayerBuffers.remove(0);
-                    }
-                }
-
-                if (buffer != null) {
-                    int count = 0;
-                    try {
-                        count = audioTrackPlayer.write(buffer.bufferBytes, 0, buffer.size);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    buffersWrited++;
-
-                    if (count > 0) {
-                        final long pcm = buffer.pcmOffset;
-                        final int marker = buffer.finished == 1 ? count : -1;
-                        final int finalBuffersWrited = buffersWrited;
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                lastPlayPcm = pcm;
-                                if (marker != -1) {
-                                    if (audioTrackPlayer != null) {
-                                        audioTrackPlayer.setNotificationMarkerPosition(1);
-                                    }
-                                    if (finalBuffersWrited == 1) {
-                                        clenupPlayer(true);
-                                    }
-                                }
-                            }
-                        });
-                    }
-
-                    if (buffer.finished != 1) {
-                        checkPlayerQueue();
-                    }
-                }
-                if (buffer == null || buffer != null && buffer.finished != 1) {
-                    checkDecoderQueue();
-                }
-
-                if (buffer != null) {
-                    synchronized (playerSync) {
-                        freePlayerBuffers.add(buffer);
-                    }
-                }
-            }
-        });
-    }
-
-    private boolean isNearToSensor(float value) {
-        return value < 5.0f && value != proximitySensor.getMaximumRange();
-    }
-
-    @Override
-    public void onSensorChanged(SensorEvent event) {
-        FileLog.e("tmessages", "proximity changed to " + event.values[0]);
-        if (proximitySensor != null && audioTrackPlayer == null && audioPlayer == null || isPaused || (useFrontSpeaker == isNearToSensor(event.values[0]))) {
-            return;
         }
-        boolean newValue = isNearToSensor(event.values[0]);
-        try {
-            if (newValue && NotificationsController.getInstance().audioManager.isWiredHeadsetOn()) {
-                return;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        ignoreProximity = true;
-        useFrontSpeaker = newValue;
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioRouteChanged, useFrontSpeaker);
-        MessageObject currentMessageObject = playingMessageObject;
-        float progress = playingMessageObject.audioProgress;
-        clenupPlayer(false);
-        currentMessageObject.audioProgress = progress;
-        playAudio(currentMessageObject);
-        ignoreProximity = false;
     }
 
-    @Override
-    public void onAccuracyChanged(Sensor sensor, int accuracy) {
 
-    }
-
-    private void stopProximitySensor() {
-        if (ignoreProximity) {
-            return;
-        }
-        try {
-            useFrontSpeaker = false;
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioRouteChanged, useFrontSpeaker);
-            if (sensorManager != null && proximitySensor != null) {
-                sensorManager.unregisterListener(this);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void startProximitySensor() {
-        if (ignoreProximity) {
-            return;
-        }
-        try {
-            if (sensorManager != null && proximitySensor != null) {
-                sensorManager.registerListener(this, proximitySensor, SensorManager.SENSOR_DELAY_NORMAL);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void clenupPlayer(boolean notify) {
-        stopProximitySensor();
-        if (audioPlayer != null || audioTrackPlayer != null) {
-            if (audioPlayer != null) {
-                try {
-                    audioPlayer.stop();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                try {
-                    audioPlayer.release();
-                    audioPlayer = null;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            } else if (audioTrackPlayer != null) {
-                synchronized (playerObjectSync) {
-                    try {
-                        audioTrackPlayer.pause();
-                        audioTrackPlayer.flush();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    try {
-                        audioTrackPlayer.release();
-                        audioTrackPlayer = null;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            }
-            stopProgressTimer();
-            lastProgress = 0;
-            buffersWrited = 0;
-            isPaused = false;
-            MessageObject lastFile = playingMessageObject;
-            playingMessageObject.audioProgress = 0.0f;
-            playingMessageObject.audioProgressSec = 0;
-            playingMessageObject = null;
-            if (notify) {
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidReset, lastFile.getId());
-            }
-        }
-    }
-
-    private void seekOpusPlayer(final float progress) {
-        if (currentTotalPcmDuration * progress == currentTotalPcmDuration) {
-            return;
-        }
-        if (!isPaused) {
-            audioTrackPlayer.pause();
-        }
-        audioTrackPlayer.flush();
-        fileDecodingQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                seekOpusFile(progress);
-                synchronized (playerSync) {
-                    freePlayerBuffers.addAll(usedPlayerBuffers);
-                    usedPlayerBuffers.clear();
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (!isPaused) {
-                            ignoreFirstProgress = 3;
-                            lastPlayPcm = (long) (currentTotalPcmDuration * progress);
-                            if (audioTrackPlayer != null) {
-                                audioTrackPlayer.play();
-                            }
-                            lastProgress = (int) (currentTotalPcmDuration / 48.0f * progress);
-                            checkPlayerQueue();
-                        }
-                    }
-                });
-            }
-        });
-    }
-
-    public boolean seekToProgress(MessageObject messageObject, float progress) {
-        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
-            return false;
-        }
-        try {
-            if (audioPlayer != null) {
-                int seekTo = (int) (audioPlayer.getDuration() * progress);
-                audioPlayer.seekTo(seekTo);
-                lastProgress = seekTo;
-            } else if (audioTrackPlayer != null) {
-                seekOpusPlayer(progress);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return false;
-        }
-        return true;
-    }
-
-    public boolean playAudio(MessageObject messageObject) {
-        if (messageObject == null) {
-            return false;
-        }
-        if ((audioTrackPlayer != null || audioPlayer != null) && playingMessageObject != null && messageObject.getId() == playingMessageObject.getId()) {
-            if (isPaused) {
-                resumeAudio(messageObject);
-            }
-            return true;
-        }
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
-        clenupPlayer(true);
-        final File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
-
-        if (isOpusFile(cacheFile.getAbsolutePath()) == 1) {
-            synchronized (playerObjectSync) {
-                try {
-                    ignoreFirstProgress = 3;
-                    final Semaphore semaphore = new Semaphore(0);
-                    final Boolean[] result = new Boolean[1];
-                    fileDecodingQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            result[0] = openOpusFile(cacheFile.getAbsolutePath()) != 0;
-                            semaphore.release();
-                        }
-                    });
-                    semaphore.acquire();
-
-                    if (!result[0]) {
-                        return false;
-                    }
-                    currentTotalPcmDuration = getTotalPcmDuration();
-
-                    audioTrackPlayer = new AudioTrack(useFrontSpeaker ? AudioManager.STREAM_VOICE_CALL : AudioManager.STREAM_MUSIC, 48000, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT, playerBufferSize, AudioTrack.MODE_STREAM);
-                    audioTrackPlayer.setStereoVolume(1.0f, 1.0f);
-                    audioTrackPlayer.setPlaybackPositionUpdateListener(new AudioTrack.OnPlaybackPositionUpdateListener() {
-                        @Override
-                        public void onMarkerReached(AudioTrack audioTrack) {
-                            clenupPlayer(true);
-                        }
-
-                        @Override
-                        public void onPeriodicNotification(AudioTrack audioTrack) {
-
-                        }
-                    });
-                    audioTrackPlayer.play();
-                    startProgressTimer();
-                    startProximitySensor();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                    if (audioTrackPlayer != null) {
-                        audioTrackPlayer.release();
-                        audioTrackPlayer = null;
-                        isPaused = false;
-                        playingMessageObject = null;
-                    }
-                    return false;
-                }
-            }
-        } else {
-            try {
-                audioPlayer = new MediaPlayer();
-                audioPlayer.setAudioStreamType(useFrontSpeaker ? AudioManager.STREAM_VOICE_CALL : AudioManager.STREAM_MUSIC);
-                audioPlayer.setDataSource(cacheFile.getAbsolutePath());
-                audioPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
-                    @Override
-                    public void onCompletion(MediaPlayer mediaPlayer) {
-                        clenupPlayer(true);
-                    }
-                });
-                audioPlayer.prepare();
-                audioPlayer.start();
-                startProgressTimer();
-                startProximitySensor();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                if (audioPlayer != null) {
-                    audioPlayer.release();
-                    audioPlayer = null;
-                    isPaused = false;
-                    playingMessageObject = null;
-                }
-                return false;
-            }
-        }
-
-        isPaused = false;
-        lastProgress = 0;
-        lastPlayPcm = 0;
-        playingMessageObject = messageObject;
-
-        if (audioPlayer != null) {
-            try {
-                if (playingMessageObject.audioProgress != 0) {
-                    int seekTo = (int) (audioPlayer.getDuration() * playingMessageObject.audioProgress);
-                    audioPlayer.seekTo(seekTo);
-                }
-            } catch (Exception e2) {
-                playingMessageObject.audioProgress = 0;
-                playingMessageObject.audioProgressSec = 0;
-                FileLog.e("tmessages", e2);
-            }
-        } else if (audioTrackPlayer != null) {
-            if (playingMessageObject.audioProgress == 1) {
-                playingMessageObject.audioProgress = 0;
-            }
-            fileDecodingQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        if (playingMessageObject != null && playingMessageObject.audioProgress != 0) {
-                            lastPlayPcm = (long)(currentTotalPcmDuration * playingMessageObject.audioProgress);
-                            seekOpusFile(playingMessageObject.audioProgress);
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    synchronized (playerSync) {
-                        freePlayerBuffers.addAll(usedPlayerBuffers);
-                        usedPlayerBuffers.clear();
-                    }
-                    decodingFinished = false;
-                    checkPlayerQueue();
-                }
-            });
-        }
-
-        return true;
-    }
-
-    public void stopAudio() {
-        stopProximitySensor();
-        if (audioTrackPlayer == null && audioPlayer == null || playingMessageObject == null) {
-            return;
-        }
-        try {
-            if (audioPlayer != null) {
-                audioPlayer.stop();
-            } else if (audioTrackPlayer != null) {
-                audioTrackPlayer.pause();
-                audioTrackPlayer.flush();
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        try {
-            if (audioPlayer != null) {
-                audioPlayer.release();
-                audioPlayer = null;
-            } else if (audioTrackPlayer != null) {
-                synchronized (playerObjectSync) {
-                    audioTrackPlayer.release();
-                    audioTrackPlayer = null;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        stopProgressTimer();
-        playingMessageObject = null;
-        isPaused = false;
-    }
-
-    public boolean pauseAudio(MessageObject messageObject) {
-        stopProximitySensor();
-        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
-            return false;
-        }
-        stopProgressTimer();
-        try {
-            if (audioPlayer != null) {
-                audioPlayer.pause();
-            } else if (audioTrackPlayer != null) {
-                audioTrackPlayer.pause();
-            }
-            isPaused = true;
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            isPaused = false;
-            return false;
-        }
-        return true;
-    }
-
-    public boolean resumeAudio(MessageObject messageObject) {
-        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
-            return false;
-        }
-        startProximitySensor();
-        try {
-            startProgressTimer();
-            if (audioPlayer != null) {
-                audioPlayer.start();
-            } else if (audioTrackPlayer != null) {
-                audioTrackPlayer.play();
-                checkPlayerQueue();
-            }
-            isPaused = false;
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return false;
-        }
-        return true;
-    }
-
-    public boolean isPlayingAudio(MessageObject messageObject) {
-        return !(audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId());
-    }
-
-    public boolean isAudioPaused() {
-        return isPaused;
-    }
-
-
-
-
-    public void stopRecording(final boolean send) {
-        recordQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (audioRecorder == null) {
-                    return;
-                }
-                try {
-                    sendAfterDone = send;
-                    audioRecorder.stop();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                    if (recordingAudioFile != null) {
-                        recordingAudioFile.delete();
-                    }
-                }
-                if (!send) {
-                }
-                try {
-                    Vibrator v = (Vibrator) ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
-                    v.vibrate(20);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.recordStopped);
-                    }
-                });
-            }
-        });
-    }
 
     public static void saveFile(String fullPath, Context context, final int type, final String name) {
         if (fullPath == null) {
@@ -1680,40 +769,7 @@ public static boolean isWebp(Uri uri) {
         return false;
     }
 
-    public static boolean isGif(Uri uri) {
-        ParcelFileDescriptor parcelFD = null;
-        FileInputStream input = null;
-        try {
-            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-            input = new FileInputStream(parcelFD.getFileDescriptor());
-            if (input.getChannel().size() > 3) {
-                byte[] header = new byte[3];
-                input.read(header, 0, 3);
-                String str = new String(header);
-                if (str != null && str.equalsIgnoreCase("gif")) {
-                    return true;
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        } finally {
-            try {
-                if (parcelFD != null) {
-                    parcelFD.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (input != null) {
-                    input.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-        }
-        return false;
-    }
+
 
     public static String copyDocumentToCache(Uri uri, String ext) {
         ParcelFileDescriptor parcelFD = null;
@@ -1942,220 +998,4 @@ public void run() {
     }
 
 
-    public void cancelVideoConvert(MessageObject messageObject) {
-        if (messageObject == null) {
-            synchronized (videoConvertSync) {
-                cancelCurrentVideoConversion = true;
-            }
-        } else {
-            if (!videoConvertQueue.isEmpty()) {
-                if (videoConvertQueue.get(0) == messageObject) {
-                    synchronized (videoConvertSync) {
-                        cancelCurrentVideoConversion = true;
-                    }
-                }
-                videoConvertQueue.remove(messageObject);
-            }
-        }
-    }
-
-
-    @SuppressLint("NewApi")
-    public static MediaCodecInfo selectCodec(String mimeType) {
-        int numCodecs = MediaCodecList.getCodecCount();
-        MediaCodecInfo lastCodecInfo = null;
-        for (int i = 0; i < numCodecs; i++) {
-            MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);
-            if (!codecInfo.isEncoder()) {
-                continue;
-            }
-            String[] types = codecInfo.getSupportedTypes();
-            for (String type : types) {
-                if (type.equalsIgnoreCase(mimeType)) {
-                    lastCodecInfo = codecInfo;
-                    if (!lastCodecInfo.getName().equals("OMX.SEC.avc.enc")) {
-                        return lastCodecInfo;
-                    } else if (lastCodecInfo.getName().equals("OMX.SEC.AVC.Encoder")) {
-                        return lastCodecInfo;
-                    }
-                }
-            }
-        }
-        return lastCodecInfo;
-    }
-
-    private static boolean isRecognizedFormat(int colorFormat) {
-        switch (colorFormat) {
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:
-            case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:
-                return true;
-            default:
-                return false;
-        }
-    }
-
-    @SuppressLint("NewApi")
-    public static int selectColorFormat(MediaCodecInfo codecInfo, String mimeType) {
-        MediaCodecInfo.CodecCapabilities capabilities = codecInfo.getCapabilitiesForType(mimeType);
-        int lastColorFormat = 0;
-        for (int i = 0; i < capabilities.colorFormats.length; i++) {
-            int colorFormat = capabilities.colorFormats[i];
-            if (isRecognizedFormat(colorFormat)) {
-                lastColorFormat = colorFormat;
-                if (!(codecInfo.getName().equals("OMX.SEC.AVC.Encoder") && colorFormat == 19)) {
-                    return colorFormat;
-                }
-            }
-        }
-        return lastColorFormat;
-    }
-
-    @TargetApi(16)
-    private int selectTrack(MediaExtractor extractor, boolean audio) {
-        int numTracks = extractor.getTrackCount();
-        for (int i = 0; i < numTracks; i++) {
-            MediaFormat format = extractor.getTrackFormat(i);
-            String mime = format.getString(MediaFormat.KEY_MIME);
-            if (audio) {
-                if (mime.startsWith("audio/")) {
-                    return i;
-                }
-            } else {
-                if (mime.startsWith("video/")) {
-                    return i;
-                }
-            }
-        }
-        return -5;
-    }
-
-    private void didWriteData(final MessageObject messageObject, final File file, final boolean last, final boolean error) {
-        final boolean firstWrite = videoConvertFirstWrite;
-        if (firstWrite) {
-            videoConvertFirstWrite = false;
-        }
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (error) {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.FilePreparingFailed, messageObject, file.toString());
-                } else {
-                    if (firstWrite) {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FilePreparingStarted, messageObject, file.toString());
-                    }
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileNewChunkAvailable, messageObject, file.toString(), last ? file.length() : 0);
-                }
-                if (error || last) {
-                    synchronized (videoConvertSync) {
-                        cancelCurrentVideoConversion = false;
-                    }
-                    videoConvertQueue.remove(messageObject);
-                }
-            }
-        });
-    }
-
-    @TargetApi(16)
-    private long readAndWriteTrack(final MessageObject messageObject, MediaExtractor extractor, MP4Builder mediaMuxer, MediaCodec.BufferInfo info, long start, long end, File file, boolean isAudio) throws Exception {
-        int trackIndex = selectTrack(extractor, isAudio);
-        if (trackIndex >= 0) {
-            extractor.selectTrack(trackIndex);
-            MediaFormat trackFormat = extractor.getTrackFormat(trackIndex);
-            int muxerTrackIndex = mediaMuxer.addTrack(trackFormat, isAudio);
-            int maxBufferSize = trackFormat.getInteger(MediaFormat.KEY_MAX_INPUT_SIZE);
-            boolean inputDone = false;
-            if (start > 0) {
-                extractor.seekTo(start, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
-            } else {
-                extractor.seekTo(0, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
-            }
-            ByteBuffer buffer = ByteBuffer.allocateDirect(maxBufferSize);
-            long startTime = -1;
-
-            checkConversionCanceled();
-
-            while (!inputDone) {
-                checkConversionCanceled();
-
-                boolean eof = false;
-                int index = extractor.getSampleTrackIndex();
-                if (index == trackIndex) {
-                    info.size = extractor.readSampleData(buffer, 0);
-
-                    if (info.size < 0) {
-                        info.size = 0;
-                        eof = true;
-                    } else {
-                        info.presentationTimeUs = extractor.getSampleTime();
-                        if (start > 0 && startTime == -1) {
-                            startTime = info.presentationTimeUs;
-                        }
-                        if (end < 0 || info.presentationTimeUs < end) {
-                            info.offset = 0;
-                            info.flags = extractor.getSampleFlags();
-                            if (mediaMuxer.writeSampleData(muxerTrackIndex, buffer, info, isAudio)) {
-                                didWriteData(messageObject, file, false, false);
-                            }
-                            extractor.advance();
-                        } else {
-                            eof = true;
-                        }
-                    }
-                } else if (index == -1) {
-                    eof = true;
-                }
-                if (eof) {
-                    inputDone = true;
-                }
-            }
-
-            extractor.unselectTrack(trackIndex);
-            return startTime;
-        }
-        return -1;
-    }
-
-    private static class VideoConvertRunnable implements Runnable {
-
-        private MessageObject messageObject;
-
-        private VideoConvertRunnable(MessageObject message) {
-            messageObject = message;
-        }
-
-        @Override
-        public void run() {
-        }
-
-        public static void runConversion(final MessageObject obj) {
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        VideoConvertRunnable wrapper = new VideoConvertRunnable(obj);
-                        Thread th = new Thread(wrapper, "VideoConvertRunnable");
-                        th.start();
-                        th.join();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            }).start();
-        }
-    }
-
-    private void checkConversionCanceled() throws Exception {
-        boolean cancelConversion;
-        synchronized (videoConvertSync) {
-            cancelConversion = cancelCurrentVideoConversion;
-        }
-        if (cancelConversion) {
-            throw new RuntimeException("canceled conversion");
-        }
-    }
-
-
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 692476a0d..1b457c2d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -310,10 +310,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             } else if (smallSize != null) {
                                 user.photo.photo_small = smallSize.location;
                             }
-                            MessagesStorage.getInstance().clearUserPhotos(user.id);
                             ArrayList<TLRPC.User> users = new ArrayList<>();
                             users.add(user);
-                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
@@ -545,8 +543,6 @@ public void loadFullChat(final int chat_id, final int classGuid, boolean force)
             public void run(TLObject response, TLRPC.TL_error error) {
                 if (error == null) {
                     final TLRPC.TL_messages_chatFull res = (TLRPC.TL_messages_chatFull) response;
-                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
-                    MessagesStorage.getInstance().updateChatInfo(chat_id, res.full_chat.participants, false);
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
@@ -593,7 +589,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 if (error == null) {
                     TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
                     ImageLoader.saveMessagesThumbs(messagesRes.messages);
-                    MessagesStorage.getInstance().putMessages(messagesRes, dialog_id);
 
                     final ArrayList<MessageObject> objects = new ArrayList<>();
                     for (TLRPC.Message message : messagesRes.messages) {
@@ -622,7 +617,6 @@ protected void processNewDifferenceParams(int seq, int pts, int date, int pts_co
             if (MessagesStorage.lastPtsValue + pts_count == pts) {
                 FileLog.e("tmessages", "APPLY PTS");
                 MessagesStorage.lastPtsValue = pts;
-                MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
             } else if (MessagesStorage.lastPtsValue != pts) {
                 if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
                     FileLog.e("tmessages", "ADD UPDATE TO QUEUE pts = " + pts + " pts_count = " + pts_count);
@@ -645,7 +639,6 @@ protected void processNewDifferenceParams(int seq, int pts, int date, int pts_co
                 if (date != -1) {
                     MessagesStorage.lastDateValue = date;
                 }
-                MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
             } else if (MessagesStorage.lastSeqValue != seq) {
                 if (gettingDifference || updatesStartWaitTimeSeq == 0 || updatesStartWaitTimeSeq + 1500 > System.currentTimeMillis()) {
                     FileLog.e("tmessages", "ADD UPDATE TO QUEUE seq = " + seq);
@@ -684,7 +677,6 @@ public void getNewDeleteTask(final ArrayList<Integer> oldTask) {
             @Override
             public void run() {
                 gettingNewDeleteTask = true;
-                MessagesStorage.getInstance().getNewTask(oldTask);
             }
         });
     }
@@ -752,7 +744,6 @@ public void run() {
 
     public void loadUserPhotos(final int uid, final int offset, final int count, final long max_id, final boolean fromCache, final int classGuid) {
         if (fromCache) {
-            MessagesStorage.getInstance().getUserPhotos(uid, offset, count, max_id, classGuid);
         } else {
             TLRPC.User user = getUser(uid);
             if (user == null) {
@@ -786,7 +777,6 @@ public void getBlockedUsers(boolean cache) {
         }
         loadingBlockedUsers = true;
         if (cache) {
-            MessagesStorage.getInstance().getBlockedUsers();
         } else {
             TLRPC.TL_contacts_getBlocked req = new TLRPC.TL_contacts_getBlocked();
             req.offset = 0;
@@ -802,8 +792,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             blocked.add(contactBlocked.user_id);
                         }
                         users = res.users;
-                        MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
-                        MessagesStorage.getInstance().putBlockedUsers(blocked, true);
                     }
                     processLoadedBlockedUsers(blocked, users, false);
                 }
@@ -836,8 +824,6 @@ public void run() {
 
     public void processLoadedUserPhotos(final TLRPC.photos_Photos res, final int uid, final int offset, final int count, final long max_id, final boolean fromCache, final int classGuid) {
         if (!fromCache) {
-            MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
-            MessagesStorage.getInstance().putUserPhotos(uid, res);
         } else if (res == null || res.photos.isEmpty()) {
             loadUserPhotos(uid, offset, count, max_id, false, classGuid);
             return;
@@ -863,8 +849,6 @@ public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms,
                 obj.deleted = true;
             }
         }
-        MessagesStorage.getInstance().markMessagesAsDeleted(messages, true);
-        MessagesStorage.getInstance().updateDialogsWithDeletedMessages(messages, true);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, messages);
 
 
@@ -1236,7 +1220,6 @@ public void run() {
     public void loadMessages(final long dialog_id, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, final int load_type, final int last_message_id, final int first_message_id, final boolean allowCache) {
         int lower_part = (int) dialog_id;
         if (fromCache || lower_part == 0) {
-            MessagesStorage.getInstance().getMessages(dialog_id, count, max_id, midDate, classGuid, load_type);
         } else {
             TLRPC.TL_messages_getHistory req = new TLRPC.TL_messages_getHistory();
             if (lower_part < 0) {
@@ -1289,7 +1272,6 @@ public void run() {
                     ImageLoader.saveMessagesThumbs(messagesRes.messages);
                 }
                 if (!isCache && allowCache) {
-                    MessagesStorage.getInstance().putMessages(messagesRes, dialog_id);
                 }
                 if (high_id != 1 && lower_id != 0 && isCache && messagesRes.messages.size() == 0 && (load_type == 0 || load_type == 2 || load_type == 3)) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
@@ -1350,7 +1332,6 @@ public void loadDialogs(final int offset, final int serverOffset, final int coun
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
 
         if (fromCache) {
-            MessagesStorage.getInstance().getDialogs(offset, serverOffset, count);
         } else {
             TLRPC.TL_messages_getDialogs req = new TLRPC.TL_messages_getDialogs();
             req.offset = serverOffset;
@@ -1535,7 +1516,6 @@ public void run() {
 
                 if (!isCache) {
                     ImageLoader.saveMessagesThumbs(dialogsRes.messages);
-                    MessagesStorage.getInstance().putDialogs(dialogsRes);
                 }
 
                 if (dialogsRes instanceof TLRPC.TL_messages_dialogsSlice) {
@@ -1672,7 +1652,6 @@ public void markDialogAsRead(final long dialog_id, final int max_id, final int m
             req.max_id = max_positive_id;
             req.offset = offset;
             if (offset == 0) {
-                MessagesStorage.getInstance().processPendingRead(dialog_id, max_positive_id, max_date, false);
                 MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                     @Override
                     public void run() {
@@ -1705,7 +1684,6 @@ public void run() {
                     @Override
                     public void run(TLObject response, TLRPC.TL_error error) {
                         if (error == null) {
-                            MessagesStorage.getInstance().processPendingRead(dialog_id, max_positive_id, max_date, true);
                             TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
                             if (res.offset > 0) {
                                 markDialogAsRead(dialog_id, 0, max_positive_id, res.offset, max_date, was, popup);
@@ -1734,7 +1712,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     }
                 });
             }
-            MessagesStorage.getInstance().processPendingRead(dialog_id, max_id, max_date, false);
 
             MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                 @Override
@@ -1758,7 +1735,6 @@ public void run() {
 
             if (chat.ttl > 0 && was) {
                 int serverTime = Math.max(ConnectionsManager.getInstance().getCurrentTime(), max_date);
-                MessagesStorage.getInstance().createTaskForSecretChat(chat.id, serverTime, serverTime, 0, null);
             }
         }
     }
@@ -1915,7 +1891,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     for (int a = 0; a < 3; a++) {
                         processUpdatesQueue(a, 2);
                     }
-                    MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
                 } else {
                     if (error.code != 401) {
                         loadCurrentState();
@@ -2128,10 +2103,7 @@ public void run() {
                             if (!msgUpdates.isEmpty()) {
                                 final HashMap<Integer, Integer> corrected = new HashMap<>();
                                 for (TLRPC.TL_updateMessageID update : msgUpdates) {
-                                    Integer oldId = MessagesStorage.getInstance().updateMessageStateAndId(update.random_id, null, update.id, 0, false);
-                                    if (oldId != null) {
-                                        corrected.put(oldId, update.id);
-                                    }
+
                                 }
 
                                 if (!corrected.isEmpty()) {
@@ -2208,8 +2180,6 @@ public void run() {
                                                     });
                                                 }
                                                 MessagesStorage.getInstance().startTransaction(false);
-                                                MessagesStorage.getInstance().putMessages(res.new_messages, false, false, false, MediaController.getInstance().getAutodownloadMask());
-                                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, false);
                                                 MessagesStorage.getInstance().commitTransaction(false);
                                             }
                                         });
@@ -2268,7 +2238,6 @@ public void run() {
                                             });
                                         }
                                     }
-                                    MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
                                     FileLog.e("tmessages", "received difference with date = " + MessagesStorage.lastDateValue + " pts = " + MessagesStorage.lastPtsValue + " seq = " + MessagesStorage.lastSeqValue);
                                     FileLog.e("tmessages", "messages = " + res.new_messages.size() + " users = " + res.users.size() + " chats = " + res.chats.size() + " other updates = " + res.other_updates.size());
                                 }
@@ -2315,7 +2284,6 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
             TLRPC.User user2 = null;
 
             if (user == null) {
-                user = MessagesStorage.getInstance().getUserSync(user_id);
                 putUser(user, true);
             }
 
@@ -2323,7 +2291,6 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
             if (updates.fwd_from_id != 0) {
                 user2 = getUser(updates.fwd_from_id);
                 if (user2 == null) {
-                    user2 = MessagesStorage.getInstance().getUserSync(updates.fwd_from_id);
                     putUser(user2, true);
                 }
                 needFwdUser = true;
@@ -2335,7 +2302,6 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
             } else {
                 TLRPC.Chat chat = getChat(updates.chat_id);
                 if (chat == null) {
-                    chat = MessagesStorage.getInstance().getChatSync(updates.chat_id);
                     putChat(chat, true);
                 }
                 missingData = chat == null || user == null || needFwdUser && user2 == null;
@@ -2424,7 +2390,6 @@ public void run() {
                             });
                         }
                     });
-                    MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
                 } else if (MessagesStorage.lastPtsValue != updates.pts) {
                     FileLog.e("tmessages", "need get diff short message, pts: " + MessagesStorage.lastPtsValue + " " + updates.pts + " count = " + updates.pts_count);
                     if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
@@ -2439,7 +2404,6 @@ public void run() {
                 }
             }
         } else if (updates instanceof TLRPC.TL_updatesCombined || updates instanceof TLRPC.TL_updates) {
-            MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
             Collections.sort(updates.updates, new Comparator<TLRPC.Update>() {
                 @Override
                 public int compare(TLRPC.Update lhs, TLRPC.Update rhs) {
@@ -2607,7 +2571,6 @@ public void run() {
                 }
             });
         }
-        MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
     }
 
     public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayList<TLRPC.User> usersArr, final ArrayList<TLRPC.Chat> chatsArr) {
@@ -2733,7 +2696,6 @@ public void run() {
                 updatesOnMainThread.add(update);
             } else if (update instanceof TLRPC.TL_updateUserPhoto) {
                 interfaceUpdateMask |= UPDATE_MASK_AVATAR;
-                MessagesStorage.getInstance().clearUserPhotos(update.user_id);
                 updatesOnMainThread.add(update);
             } else if (update instanceof TLRPC.TL_updateUserPhone) {
                 interfaceUpdateMask |= UPDATE_MASK_PHONE;
@@ -2846,7 +2808,6 @@ public void run() {
         });
 
         if (!messagesArr.isEmpty()) {
-            MessagesStorage.getInstance().putMessages(messagesArr, true, true, false, MediaController.getInstance().getAutodownloadMask());
         }
 
         AndroidUtilities.runOnUIThread(new Runnable() {
@@ -2947,13 +2908,11 @@ public void run() {
                                             dialog.notify_settings.mute_until = until;
                                         }
                                     }
-                                    MessagesStorage.getInstance().setDialogFlags(dialog_id, ((long) until << 32) | 1);
                                 } else {
                                     if (dialog != null) {
                                         dialog.notify_settings.mute_until = 0;
                                     }
                                     editor.remove("notify2_" + dialog_id);
-                                    MessagesStorage.getInstance().setDialogFlags(dialog_id, 0);
                                 }
 
                             }/* else if (update.peer instanceof TLRPC.TL_notifyChats) { disable global settings sync
@@ -2977,8 +2936,6 @@ public void run() {
                         editor.commit();
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
                     }
-                    MessagesStorage.getInstance().updateUsers(dbUsersStatus, true, true, true);
-                    MessagesStorage.getInstance().updateUsers(dbUsers, false, true, true);
                 }
 
                 if (!webPages.isEmpty()) {
@@ -3002,7 +2959,6 @@ public void run() {
                 }
                 if (!chatInfoToUpdate.isEmpty()) {
                     for (TLRPC.ChatParticipants info : chatInfoToUpdate) {
-                        MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info.chat_id, info);
                     }
                 }
@@ -3077,28 +3033,6 @@ public void run() {
             }
         });
 
-        if (!webPages.isEmpty()) {
-            MessagesStorage.getInstance().putWebPages(webPages);
-        }
-        if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty() || !markAsReadEncrypted.isEmpty()) {
-            if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty()) {
-                MessagesStorage.getInstance().updateDialogsWithReadedMessages(markAsReadMessagesInbox, true);
-            }
-            MessagesStorage.getInstance().markMessagesAsRead(markAsReadMessagesInbox, markAsReadMessagesOutbox, markAsReadEncrypted, true);
-        }
-        if (!markAsReadMessages.isEmpty()) {
-            MessagesStorage.getInstance().markMessagesContentAsRead(markAsReadMessages);
-        }
-        if (!deletedMessages.isEmpty()) {
-            MessagesStorage.getInstance().markMessagesAsDeleted(deletedMessages, true);
-        }
-        if (!deletedMessages.isEmpty()) {
-            MessagesStorage.getInstance().updateDialogsWithDeletedMessages(deletedMessages, true);
-        }
-        if (!tasks.isEmpty()) {
-
-        }
-
         return true;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index ef7ed557b..10722d758 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -17,7 +17,6 @@
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.messenger.BuffersStorage;
 import org.telegram.messenger.ByteBufferDesc;
 import org.telegram.messenger.ConnectionsManager;
@@ -27,9 +26,9 @@
 import org.telegram.messenger.TLClassStore;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.dto.User;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -40,6 +39,7 @@
 import java.util.Map;
 import java.util.concurrent.Semaphore;
 
+//TODO this Class work with SQL DB. save messages, dialogs and users.
 public class MessagesStorage {
     private DispatchQueue storageQueue = new DispatchQueue("storageQueue");
     private SQLiteDatabase database;
@@ -53,12 +53,8 @@
     public static byte[] secretPBytes = null;
     public static int secretG = 0;
 
-    private int lastSavedSeq = 0;
-    private int lastSavedPts = 0;
-    private int lastSavedDate = 0;
-    private int lastSavedQts = 0;
-
     private static volatile MessagesStorage Instance = null;
+
     public static MessagesStorage getInstance() {
         MessagesStorage localInstance = Instance;
         if (localInstance == null) {
@@ -202,7 +198,6 @@ public void openDatabase() {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
-        loadUnreadMessages();
     }
 
     public void updateDbToLastVersion(final int currentVersion) {
@@ -408,12 +403,6 @@ public void run() {
                 lastPtsValue = 0;
                 lastQtsValue = 0;
                 lastSecretVersion = 0;
-
-                lastSavedSeq = 0;
-                lastSavedPts = 0;
-                lastSavedDate = 0;
-                lastSavedQts = 0;
-
                 secretPBytes = null;
                 secretG = 0;
                 if (database != null) {
@@ -437,277 +426,88 @@ public void run() {
         });
     }
 
-    public void saveSecretParams(final int lsv, final int sg, final byte[] pbytes) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
-                    state.bindInteger(1, lsv);
-                    state.bindInteger(2, sg);
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(pbytes != null ? pbytes.length : 1);
-                    if (pbytes != null) {
-                        data.writeRaw(pbytes);
-                    }
-                    state.bindByteBuffer(3, data.buffer);
-                    state.step();
-                    state.dispose();
-                    buffersStorage.reuseFreeBuffer(data);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
 
-    public void saveDiffParams(final int seq, final int pts, final int date, final int qts) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (lastSavedSeq == seq && lastSavedPts == pts && lastSavedDate == date && lastQtsValue == qts) {
-                        return;
+    public void startTransaction(boolean useQueue) {
+        if (useQueue) {
+            storageQueue.postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        database.beginTransaction();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                     }
-                    SQLitePreparedStatement state = database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
-                    state.bindInteger(1, seq);
-                    state.bindInteger(2, pts);
-                    state.bindInteger(3, date);
-                    state.bindInteger(4, qts);
-                    state.step();
-                    state.dispose();
-                    lastSavedSeq = seq;
-                    lastSavedPts = pts;
-                    lastSavedDate = date;
-                    lastSavedQts = qts;
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
                 }
+            });
+        } else {
+            try {
+                database.beginTransaction();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
             }
-        });
+        }
     }
 
-    public void setDialogFlags(final long did, final long flags) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", did, flags)).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
+    public void commitTransaction(boolean useQueue) {
+        if (useQueue) {
+            storageQueue.postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    database.commitTransaction();
                 }
-            }
-        });
+            });
+        } else {
+            database.commitTransaction();
+        }
     }
 
-    public void loadUnreadMessages() {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    final HashMap<Long, Integer> pushDialogs = new HashMap<>();
-                    SQLiteCursor cursor = database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count != 0");
-                    StringBuilder ids = new StringBuilder();
-                    while (cursor.next()) {
-                        if (cursor.isNull(2) || cursor.intValue(2) != 1) {
-                            long did = cursor.longValue(0);
-                            int count = cursor.intValue(1);
-                            pushDialogs.put(did, count);
-                            if (ids.length() != 0) {
-                                ids.append(",");
-                            }
-                            ids.append(did);
-                        }
-                    }
-                    cursor.dispose();
 
-                    final ArrayList<TLRPC.Message> messages = new ArrayList<>();
-                    final ArrayList<TLRPC.User> users = new ArrayList<>();
-                    final ArrayList<TLRPC.Chat> chats = new ArrayList<>();
-                    final ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
-                    if (ids.length() > 0) {
-                        ArrayList<Integer> userIds = new ArrayList<>();
-                        ArrayList<Integer> chatIds = new ArrayList<>();
-                        ArrayList<Integer> encryptedChatIds = new ArrayList<>();
-
-                        cursor = database.queryFinalized("SELECT read_state, data, send_state, mid, date, uid FROM messages WHERE uid IN (" + ids.toString() + ") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50");
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
-                            if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                                TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                                MessageObject.setUnreadFlags(message, cursor.intValue(0));
-                                message.id = cursor.intValue(3);
-                                message.date = cursor.intValue(4);
-                                message.dialog_id = cursor.longValue(5);
-                                messages.add(message);
-
-                                int lower_id = (int)message.dialog_id;
-                                int high_id = (int)(message.dialog_id >> 32);
-
-                                if (lower_id != 0) {
-                                    if (lower_id < 0) {
-                                        if (!chatIds.contains(-lower_id)) {
-                                            chatIds.add(-lower_id);
-                                        }
-                                    } else {
-                                        if (!userIds.contains(lower_id)) {
-                                            userIds.add(lower_id);
-                                        }
-                                    }
-                                } else {
-                                    if (!encryptedChatIds.contains(high_id)) {
-                                        encryptedChatIds.add(high_id);
-                                    }
-                                }
+    private void putMessagesInternal(final boolean withTransaction, final boolean isBroadcast, final int downloadMask) {
 
-                                if (!userIds.contains(message.from_id)) {
-                                    userIds.add(message.from_id);
-                                }
-                                if (message.action != null && message.action.user_id != 0 && !userIds.contains(message.action.user_id)) {
-                                    userIds.add(message.action.user_id);
-                                }
-                                if (message.media != null && message.media.user_id != 0 && !userIds.contains(message.media.user_id)) {
-                                    userIds.add(message.media.user_id);
-                                }
-                                if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0 && !userIds.contains(message.media.audio.user_id)) {
-                                    userIds.add(message.media.audio.user_id);
-                                }
-                                if (message.fwd_from_id != 0 && !userIds.contains(message.fwd_from_id)) {
-                                    userIds.add(message.fwd_from_id);
-                                }
-                                message.send_state = cursor.intValue(2);
-                                if (!MessageObject.isUnread(message) && lower_id != 0 || message.id > 0) {
-                                    message.send_state = 0;
-                                }
-                                if (lower_id == 0 && !cursor.isNull(5)) {
-                                    message.random_id = cursor.longValue(5);
-                                }
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
+        //TODO  Save messsage to SQL database.
+    }
 
-                        if (!encryptedChatIds.isEmpty()) {
-                            getEncryptedChatsInternal(TextUtils.join(",", encryptedChatIds), encryptedChats, userIds);
-                        }
+    public void putMessages(final boolean withTransaction, boolean useQueue, final boolean isBroadcast, final int downloadMask) {
+        //TODO  Save messsage to SQL database.  in runnable.
+//        storageQueue.postRunnable(new Runnable() {
+    }
 
-                        if (!userIds.isEmpty()) {
-                            getUsersInternal(TextUtils.join(",", userIds), users);
-                        }
 
-                        if (!chatIds.isEmpty()) {
-                            getChatsInternal(TextUtils.join(",", chatIds), chats);
-                        }
-                    }
-                    Collections.reverse(messages);
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationsController.getInstance().processLoadedUnreadMessages(pushDialogs, messages, users, chats, encryptedChats);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
+    private void markMessagesAsDeletedInternal(final ArrayList<Integer> messages) {
+        //TODO with DB
     }
 
-    public void putWallpapers(final ArrayList<TLRPC.WallPaper> wallPapers) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    int num = 0;
-                    database.executeFast("DELETE FROM wallpapers WHERE 1").stepThis().dispose();
-                    database.beginTransaction();
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO wallpapers VALUES(?, ?)");
-                    for (TLRPC.WallPaper wallPaper : wallPapers) {
-                        state.requery();
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(wallPaper.getObjectSize());
-                        wallPaper.serializeToStream(data);
-                        state.bindInteger(1, num);
-                        state.bindByteBuffer(2, data.buffer);
-                        state.step();
-                        num++;
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    state.dispose();
-                    database.commitTransaction();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
 
-    public void loadWebRecent(final int type) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT id, image_url, thumb_url, local_url, width, height, size, date FROM web_recent_v3 WHERE type = " + type);
-                    final ArrayList<MediaController.SearchImage> arrayList = new ArrayList<>();
-                    while (cursor.next()) {
-                        MediaController.SearchImage searchImage = new MediaController.SearchImage();
-                        searchImage.id = cursor.stringValue(0);
-                        searchImage.imageUrl = cursor.stringValue(1);
-                        searchImage.thumbUrl = cursor.stringValue(2);
-                        searchImage.localUrl = cursor.stringValue(3);
-                        searchImage.width = cursor.intValue(4);
-                        searchImage.height = cursor.intValue(5);
-                        searchImage.size = cursor.intValue(6);
-                        searchImage.date = cursor.intValue(7);
-                        searchImage.type = type;
-                        arrayList.add(searchImage);
-                    }
-                    cursor.dispose();
-                    Collections.sort(arrayList, new Comparator<MediaController.SearchImage>() {
-                        @Override
-                        public int compare(MediaController.SearchImage lhs, MediaController.SearchImage rhs) {
-                            if (lhs.date < rhs.date) {
-                                return 1;
-                            } else if (lhs.date > rhs.date) {
-                                return -1;
-                            } else {
-                                return 0;
-                            }
-                        }
-                    });
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.recentImagesDidLoaded, type, arrayList);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
+    public void putMessages(final long dialog_id) {
+        //TODO with SQL DB
     }
 
-    public void addRecentLocalFile(final String imageUrl, final String localUrl) {
-        if (imageUrl == null || localUrl == null || imageUrl.length() == 0 || localUrl.length() == 0) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast("UPDATE web_recent_v3 SET local_url = '" + localUrl + "' WHERE image_url = '" + imageUrl + "'").stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
+
+    public User getUser(final int user_id) {
+//            getUsersInternal("" + user_id, users);
+        //TODO with SQL DB
+        return null;
     }
 
-    public void clearWebRecent(final int type) {
+
+    public void removeFromDownloadQueue(final long id, final int type, final boolean move) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
-                    database.executeFast("DELETE FROM web_recent_v3 WHERE type = " + type).stepThis().dispose();
+                    if (move) {
+                        int minDate = -1;
+                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT min(date) FROM download_queue WHERE type = %d", type));
+                        if (cursor.next()) {
+                            minDate = cursor.intValue(0);
+                        }
+                        cursor.dispose();
+                        if (minDate != -1) {
+                            database.executeFast(String.format(Locale.US, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", minDate - 1, id, type)).stepThis().dispose();
+                        }
+                    } else {
+                        database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", id, type)).stepThis().dispose();
+                    }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -715,41 +515,16 @@ public void run() {
         });
     }
 
-    public void putWebRecent(final ArrayList<MediaController.SearchImage> arrayList) {
+
+    public void clearDownloadQueue(final int type) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
-                    database.beginTransaction();
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO web_recent_v3 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
-                    for (int a = 0; a < arrayList.size(); a++) {
-                        if (a == 100) {
-                            break;
-                        }
-                        MediaController.SearchImage searchImage = arrayList.get(a);
-                        if (searchImage.localUrl == null) {
-                            searchImage.localUrl = "";
-                        }
-                        state.requery();
-                        state.bindString(1, searchImage.id);
-                        state.bindInteger(2, searchImage.type);
-                        state.bindString(3, searchImage.imageUrl);
-                        state.bindString(4, searchImage.thumbUrl);
-                        state.bindString(5, searchImage.localUrl);
-                        state.bindInteger(6, searchImage.width);
-                        state.bindInteger(7, searchImage.height);
-                        state.bindInteger(8, searchImage.size);
-                        state.bindInteger(9, searchImage.date);
-                        state.step();
-                    }
-                    state.dispose();
-                    database.commitTransaction();
-                    if (arrayList.size() >= 100) {
-                        database.beginTransaction();
-                        for (int a = 100; a < arrayList.size(); a++) {
-                            database.executeFast("DELETE FROM web_recent_v3 WHERE id = '" + arrayList.get(a).id + "'").stepThis().dispose();
-                        }
-                        database.commitTransaction();
+                    if (type == 0) {
+                        database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
+                    } else {
+                        database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", type)).stepThis().dispose();
                     }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -758,26 +533,30 @@ public void run() {
         });
     }
 
-    public void getWallpapers() {
+    public void getDownloadQueue(final int type) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT data FROM wallpapers WHERE 1");
-                    final ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<>();
+                    final ArrayList<DownloadObject> objects = new ArrayList<>();
+                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", type));
                     while (cursor.next()) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            TLRPC.WallPaper wallPaper = TLRPC.WallPaper.TLdeserialize(data, data.readInt32(false), false);
-                            wallPapers.add(wallPaper);
+                        DownloadObject downloadObject = new DownloadObject();
+                        downloadObject.type = cursor.intValue(1);
+                        downloadObject.id = cursor.longValue(0);
+                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(2));
+                        if (data != null && cursor.byteBufferValue(2, data.buffer) != 0) {
+                            downloadObject.object = TLClassStore.Instance().TLdeserialize(data, data.readInt32(false), false);
                         }
                         buffersStorage.reuseFreeBuffer(data);
+                        objects.add(downloadObject);
                     }
                     cursor.dispose();
+
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.wallpapersDidLoaded, wallPapers);
+                            MediaController.getInstance().processDownloadObjects(type, objects);
                         }
                     });
                 } catch (Exception e) {
@@ -787,70 +566,23 @@ public void run() {
         });
     }
 
-    public void getBlockedUsers() {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    ArrayList<Integer> ids = new ArrayList<>();
-                    ArrayList<TLRPC.User> users = new ArrayList<>();
-                    SQLiteCursor cursor = database.queryFinalized("SELECT * FROM blocked_users WHERE 1");
-                    StringBuilder usersToLoad = new StringBuilder();
-                    while (cursor.next()) {
-                        int user_id = cursor.intValue(0);
-                        ids.add(user_id);
-                        if (usersToLoad.length() != 0) {
-                            usersToLoad.append(",");
-                        }
-                        usersToLoad.append(user_id);
-                    }
-                    cursor.dispose();
-
-                    if (usersToLoad.length() != 0) {
-                        getUsersInternal(usersToLoad.toString(), users);
-                    }
-
-                    MessagesController.getInstance().processLoadedBlockedUsers(ids, users, true);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void deleteBlockedUser(final int id) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast("DELETE FROM blocked_users WHERE uid = " + id).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
 
-    public void putBlockedUsers(final ArrayList<Integer> ids, final boolean replace) {
-        if (ids == null || ids.isEmpty()) {
-            return;
-        }
+    public void saveSecretParams(final int lsv, final int sg, final byte[] pbytes) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
-                    if (replace) {
-                        database.executeFast("DELETE FROM blocked_users WHERE 1").stepThis().dispose();
-                    }
-                    database.beginTransaction();
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO blocked_users VALUES(?)");
-                    for (Integer id : ids) {
-                        state.requery();
-                        state.bindInteger(1, id);
-                        state.step();
+                    SQLitePreparedStatement state = database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
+                    state.bindInteger(1, lsv);
+                    state.bindInteger(2, sg);
+                    ByteBufferDesc data = buffersStorage.getFreeBuffer(pbytes != null ? pbytes.length : 1);
+                    if (pbytes != null) {
+                        data.writeRaw(pbytes);
                     }
+                    state.bindByteBuffer(3, data.buffer);
+                    state.step();
                     state.dispose();
-                    database.commitTransaction();
+                    buffersStorage.reuseFreeBuffer(data);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -858,3160 +590,8 @@ public void run() {
         });
     }
 
-    public void deleteDialog(final long did, final boolean messagesOnly) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (!messagesOnly) {
-                        database.executeFast("DELETE FROM dialogs WHERE did = " + did).stepThis().dispose();
-                        database.executeFast("DELETE FROM chat_settings WHERE uid = " + did).stepThis().dispose();
-                        int lower_id = (int)did;
-                        int high_id = (int)(did >> 32);
-                        if (lower_id != 0) {
-                            if (high_id == 1) {
-                                database.executeFast("DELETE FROM chats WHERE uid = " + lower_id).stepThis().dispose();
-                            } else if (lower_id < 0) {
-                                database.executeFast("DELETE FROM chats WHERE uid = " + (-lower_id)).stepThis().dispose();
-                            }
-                        } else {
-                            database.executeFast("DELETE FROM enc_chats WHERE uid = " + high_id).stepThis().dispose();
-                            //database.executeFast("DELETE FROM secret_holes WHERE uid = " + high_id).stepThis().dispose();
-                        }
-                    }
+    public void saveDiffParams() {
 
-                    if ((int) did == 0) {
-                        SQLiteCursor cursor = database.queryFinalized("SELECT data FROM messages WHERE uid = " + did);
-                        ArrayList<File> filesToDelete = new ArrayList<>();
-                        try {
-                            while (cursor.next()) {
-                                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                    TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                                    if (message == null || message.media == null) {
-                                        continue;
-                                    }
-                                    if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-                                        File file = FileLoader.getPathToAttach(message.media.audio);
-                                        if (file != null && file.toString().length() > 0) {
-                                            filesToDelete.add(file);
-                                        }
-                                    } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                                        for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
-                                            File file = FileLoader.getPathToAttach(photoSize);
-                                            if (file != null && file.toString().length() > 0) {
-                                                filesToDelete.add(file);
-                                            }
-                                        }
-                                    } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                                        File file = FileLoader.getPathToAttach(message.media.video);
-                                        if (file != null && file.toString().length() > 0) {
-                                            filesToDelete.add(file);
-                                        }
-                                        file = FileLoader.getPathToAttach(message.media.video.thumb);
-                                        if (file != null && file.toString().length() > 0) {
-                                            filesToDelete.add(file);
-                                        }
-                                    } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                                        File file = FileLoader.getPathToAttach(message.media.document);
-                                        if (file != null && file.toString().length() > 0) {
-                                            filesToDelete.add(file);
-                                        }
-                                        file = FileLoader.getPathToAttach(message.media.document.thumb);
-                                        if (file != null && file.toString().length() > 0) {
-                                            filesToDelete.add(file);
-                                        }
-                                    }
-                                }
-                                buffersStorage.reuseFreeBuffer(data);
-                            }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        cursor.dispose();
-                        FileLoader.getInstance().deleteFiles(filesToDelete);
-                    }
-
-                    database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + did).stepThis().dispose();
-                    database.executeFast("DELETE FROM messages WHERE uid = " + did).stepThis().dispose();
-                    database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + did).stepThis().dispose();
-                    database.executeFast("DELETE FROM media_v2 WHERE uid = " + did).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void getUserPhotos(final int uid, final int offset, final int count, final long max_id, final int classGuid) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLiteCursor cursor;
-
-                    if (max_id != 0) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d AND id < %d ORDER BY id DESC LIMIT %d", uid, max_id, count));
-                    } else {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d ORDER BY id DESC LIMIT %d,%d", uid, offset, count));
-                    }
-
-                    final TLRPC.photos_Photos res = new TLRPC.photos_Photos();
-
-                    while (cursor.next()) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            TLRPC.Photo photo = TLRPC.Photo.TLdeserialize(data, data.readInt32(false), false);
-                            res.photos.add(photo);
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-
-                    Utilities.stageQueue.postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            MessagesController.getInstance().processLoadedUserPhotos(res, uid, offset, count, max_id, true, classGuid);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void clearUserPhotos(final int uid) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast("DELETE FROM user_photos WHERE uid = " + uid).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void clearUserPhoto(final int uid, final long pid) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast("DELETE FROM user_photos WHERE uid = " + uid + " AND id = " + pid).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void putUserPhotos(final int uid, final TLRPC.photos_Photos photos) {
-        if (photos == null || photos.photos.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO user_photos VALUES(?, ?, ?)");
-                    for (TLRPC.Photo photo : photos.photos) {
-                        if (photo instanceof TLRPC.TL_photoEmpty) {
-                            continue;
-                        }
-                        state.requery();
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(photo.getObjectSize());
-                        photo.serializeToStream(data);
-                        state.bindInteger(1, uid);
-                        state.bindLong(2, photo.id);
-                        state.bindByteBuffer(3, data.buffer);
-                        state.step();
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    state.dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void getNewTask(final ArrayList<Integer> oldTask) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (oldTask != null) {
-                        String ids = TextUtils.join(",", oldTask);
-                        database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v2 WHERE mid IN(%s)", ids)).stepThis().dispose();
-                    }
-                    int date = 0;
-                    ArrayList<Integer> arr = null;
-                    SQLiteCursor cursor = database.queryFinalized("SELECT mid, date FROM enc_tasks_v2 WHERE date = (SELECT min(date) FROM enc_tasks_v2)");
-                    while (cursor.next()) {
-                        Integer mid = cursor.intValue(0);
-                        date = cursor.intValue(1);
-                        if (arr == null) {
-                            arr = new ArrayList<>();
-                        }
-                        arr.add(mid);
-                    }
-                    cursor.dispose();
-                    MessagesController.getInstance().processLoadedDeleteTask(date, arr);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void createTaskForSecretChat(final int chat_id, final int time, final int readTime, final int isOut, final ArrayList<Long> random_ids) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    int minDate = Integer.MAX_VALUE;
-                    SparseArray<ArrayList<Integer>> messages = new SparseArray<>();
-                    StringBuilder mids = new StringBuilder();
-                    SQLiteCursor cursor;
-                    if (random_ids == null) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE uid = %d AND out = %d AND read_state != 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", ((long) chat_id) << 32, isOut, time));
-                    } else {
-                        String ids = TextUtils.join(",", random_ids);
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages as m INNER JOIN randoms as r ON m.mid = r.mid WHERE r.random_id IN (%s)", ids));
-                    }
-                    while (cursor.next()) {
-                        int ttl = cursor.intValue(1);
-                        if (ttl <= 0) {
-                            continue;
-                        }
-                        int mid = cursor.intValue(0);
-                        int date = Math.min(readTime, time) + ttl;
-                        minDate = Math.min(minDate, date);
-                        ArrayList<Integer> arr = messages.get(date);
-                        if (arr == null) {
-                            arr = new ArrayList<>();
-                            messages.put(date, arr);
-                        }
-                        if (mids.length() != 0) {
-                            mids.append(",");
-                        }
-                        mids.append(mid);
-                        arr.add(mid);
-                    }
-                    cursor.dispose();
-                    if (messages.size() != 0) {
-                        database.beginTransaction();
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
-                        for (int a = 0; a < messages.size(); a++) {
-                            int key = messages.keyAt(a);
-                            ArrayList<Integer> arr = messages.get(key);
-                            for (Integer mid : arr) {
-                                state.requery();
-                                state.bindInteger(1, mid);
-                                state.bindInteger(2, key);
-                                state.step();
-                            }
-                        }
-                        state.dispose();
-                        database.commitTransaction();
-                        database.executeFast(String.format(Locale.US, "UPDATE messages SET ttl = 0 WHERE mid IN(%s)", mids.toString())).stepThis().dispose();
-                        MessagesController.getInstance().didAddedNewTask(minDate, messages);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> messages, final HashMap<Integer, Integer> inbox) {
-        try {
-            HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-            StringBuilder dialogsToReload = new StringBuilder();
-
-            if (messages != null && !messages.isEmpty()) {
-                String ids = TextUtils.join(",", messages);
-                SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out FROM messages WHERE mid IN(%s)", ids));
-                while (cursor.next()) {
-                    int out = cursor.intValue(2);
-                    if (out != 0) {
-                        continue;
-                    }
-                    int read_state = cursor.intValue(1);
-                    if (read_state != 0) {
-                        continue;
-                    }
-                    long uid = cursor.longValue(0);
-                    Integer currentCount = dialogsToUpdate.get(uid);
-                    if (currentCount == null) {
-                        dialogsToUpdate.put(uid, 1);
-                        if (dialogsToReload.length() != 0) {
-                            dialogsToReload.append(",");
-                        }
-                        dialogsToReload.append(uid);
-                    } else {
-                        dialogsToUpdate.put(uid, currentCount + 1);
-                    }
-                }
-                cursor.dispose();
-            } else if (inbox != null && !inbox.isEmpty()) {
-                for (HashMap.Entry<Integer, Integer> entry : inbox.entrySet()) {
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages WHERE uid = %d AND mid <= %d AND read_state IN(0,2) AND out = 0", entry.getKey(), entry.getValue()));
-                    if (cursor.next()) {
-                        int count = cursor.intValue(0);
-                        if (count == 0) {
-                            continue;
-                        }
-                        dialogsToUpdate.put((long) entry.getKey(), count);
-                        if (dialogsToReload.length() != 0) {
-                            dialogsToReload.append(",");
-                        }
-                        dialogsToReload.append(entry.getKey());
-                    }
-                    cursor.dispose();
-                }
-            }
-
-            if (dialogsToReload.length() > 0) {
-                SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT did, unread_count FROM dialogs WHERE did IN(%s)", dialogsToReload.toString()));
-                while (cursor.next()) {
-                    long did = cursor.longValue(0);
-                    int count = cursor.intValue(1);
-                    Integer currentCount = dialogsToUpdate.get(did);
-                    if (currentCount != null) {
-                        dialogsToUpdate.put(did, Math.max(0, count - currentCount));
-                    } else {
-                        dialogsToUpdate.remove(did);
-                    }
-                }
-                cursor.dispose();
-
-                database.beginTransaction();
-                SQLitePreparedStatement state = database.executeFast("UPDATE dialogs SET unread_count = ? WHERE did = ?");
-                for (HashMap.Entry<Long, Integer> entry : dialogsToUpdate.entrySet()) {
-                    state.requery();
-                    state.bindInteger(1, entry.getValue());
-                    state.bindLong(2, entry.getKey());
-                    state.step();
-                }
-                state.dispose();
-                database.commitTransaction();
-            }
-
-            if (!dialogsToUpdate.isEmpty()) {
-                MessagesController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void updateDialogsWithReadedMessages(final HashMap<Integer, Integer> inbox, boolean useQueue) {
-        if (inbox.isEmpty()) {
-            return;
-        }
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    updateDialogsWithReadedMessagesInternal(null, inbox);
-                }
-            });
-        } else {
-            updateDialogsWithReadedMessagesInternal(null, inbox);
-        }
-    }
-
-    public void updateChatInfo(final int chat_id, final TLRPC.ChatParticipants info, final boolean ifExist) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (ifExist) {
-                        boolean dontExist = true;
-                        SQLiteCursor cursor = database.queryFinalized("SELECT uid FROM chat_settings WHERE uid = " + chat_id);
-                        if (cursor.next()) {
-                            dontExist = false;
-                        }
-                        cursor.dispose();
-                        if (dontExist) {
-                            return;
-                        }
-                    }
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings VALUES(?, ?)");
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(info.getObjectSize());
-                    info.serializeToStream(data);
-                    state.bindInteger(1, chat_id);
-                    state.bindByteBuffer(2, data.buffer);
-                    state.step();
-                    state.dispose();
-                    buffersStorage.reuseFreeBuffer(data);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void updateChatInfo(final int chat_id, final int user_id, final boolean deleted, final int invited_id, final int version) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT participants FROM chat_settings WHERE uid = " + chat_id);
-                    TLRPC.ChatParticipants info = null;
-                    ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
-                    if (cursor.next()) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            info = TLRPC.ChatParticipants.TLdeserialize(data, data.readInt32(false), false);
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-                    if (info != null) {
-                        if (deleted) {
-                            for (int a = 0; a < info.participants.size(); a++) {
-                                TLRPC.TL_chatParticipant participant = info.participants.get(a);
-                                if (participant.user_id == user_id) {
-                                    info.participants.remove(a);
-                                    break;
-                                }
-                            }
-                        } else {
-                            for (TLRPC.TL_chatParticipant part : info.participants) {
-                                if (part.user_id == user_id) {
-                                    return;
-                                }
-                            }
-                            TLRPC.TL_chatParticipant participant = new TLRPC.TL_chatParticipant();
-                            participant.user_id = user_id;
-                            participant.inviter_id = invited_id;
-                            participant.date = ConnectionsManager.getInstance().getCurrentTime();
-                            info.participants.add(participant);
-                        }
-                        info.version = version;
-
-                        final TLRPC.ChatParticipants finalInfo = info;
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo.chat_id, finalInfo);
-                            }
-                        });
-
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings VALUES(?, ?)");
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(info.getObjectSize());
-                        info.serializeToStream(data);
-                        state.bindInteger(1, chat_id);
-                        state.bindByteBuffer(2, data.buffer);
-                        state.step();
-                        state.dispose();
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void loadChatInfo(final int chat_id, final Semaphore semaphore) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT participants FROM chat_settings WHERE uid = " + chat_id);
-                    TLRPC.ChatParticipants info = null;
-                    ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
-                    if (cursor.next()) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            info = TLRPC.ChatParticipants.TLdeserialize(data, data.readInt32(false), false);
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-
-                    if (info != null) {
-                        boolean modified = false;
-                        ArrayList<Integer> usersArr = new ArrayList<>();
-                        StringBuilder usersToLoad = new StringBuilder();
-                        for (int a = 0; a < info.participants.size(); a++) {
-                            TLRPC.TL_chatParticipant c = info.participants.get(a);
-                            if (usersArr.contains(c.user_id)) {
-                                info.participants.remove(a);
-                                modified = true;
-                                a--;
-                            } else {
-                                if (usersToLoad.length() != 0) {
-                                    usersToLoad.append(",");
-                                }
-                                usersArr.add(c.user_id);
-                                usersToLoad.append(c.user_id);
-                            }
-                        }
-                        if (usersToLoad.length() != 0) {
-                            getUsersInternal(usersToLoad.toString(), loadedUsers);
-                        }
-                        if (modified) {
-                            updateChatInfo(chat_id, info, false);
-                        }
-                    }
-                    if (semaphore != null) {
-                        semaphore.release();
-                    }
-                    MessagesController.getInstance().processChatInfo(chat_id, info, loadedUsers, true);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (semaphore != null) {
-                        semaphore.release();
-                    }
-                }
-            }
-        });
-    }
-
-    public void processPendingRead(final long dialog_id, final int max_id, final int max_date, final boolean delete) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (delete) {
-                        //database.executeFast("DELETE FROM pending_read WHERE uid = " + dialog_id).stepThis().dispose();
-                    } else {
-                        database.beginTransaction();
-                        SQLitePreparedStatement state;/* = database.executeFast("REPLACE INTO pending_read VALUES(?, ?)");
-                        state.requery();
-                        state.bindLong(1, dialog_id);
-                        state.bindInteger(2, max_id);
-                        state.step();
-                        state.dispose();*/
-
-                        int lower_id = (int)dialog_id;
-
-                        if (lower_id != 0) {
-                            state = database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
-                            state.requery();
-                            state.bindLong(1, dialog_id);
-                            state.bindInteger(2, max_id);
-                            state.step();
-                            state.dispose();
-                        } else {
-                            state = database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 0");
-                            state.requery();
-                            state.bindLong(1, dialog_id);
-                            state.bindInteger(2, max_date);
-                            state.step();
-                            state.dispose();
-                        }
-
-                        state = database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = ?");
-                        state.requery();
-                        state.bindLong(1, dialog_id);
-                        state.step();
-                        state.dispose();
-
-                        database.commitTransaction();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void putContacts(final ArrayList<TLRPC.TL_contact> contacts, final boolean deleteAll) {
-        if (contacts.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (deleteAll) {
-                        database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
-                    }
-                    database.beginTransaction();
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
-                    for (TLRPC.TL_contact contact : contacts) {
-                        state.requery();
-                        state.bindInteger(1, contact.user_id);
-                        state.bindInteger(2, contact.mutual ? 1 : 0);
-                        state.step();
-                    }
-                    state.dispose();
-                    database.commitTransaction();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void deleteContacts(final ArrayList<Integer> uids) {
-        if (uids == null || uids.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    String ids = TextUtils.join(",", uids);
-                    database.executeFast("DELETE FROM contacts WHERE uid IN(" + ids + ")").stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void applyPhoneBookUpdates(final String adds, final String deletes) {
-        if (adds.length() == 0 && deletes.length() == 0) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (adds.length() != 0) {
-                        database.executeFast(String.format(Locale.US, "UPDATE user_phones_v6 SET deleted = 0 WHERE sphone IN(%s)", adds)).stepThis().dispose();
-                    }
-                    if (deletes.length() != 0) {
-                        database.executeFast(String.format(Locale.US, "UPDATE user_phones_v6 SET deleted = 1 WHERE sphone IN(%s)", deletes)).stepThis().dispose();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void putCachedPhoneBook(final HashMap<Integer, ContactsController.Contact> contactHashMap) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.beginTransaction();
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO user_contacts_v6 VALUES(?, ?, ?)");
-                    SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO user_phones_v6 VALUES(?, ?, ?, ?)");
-                    for (HashMap.Entry<Integer, ContactsController.Contact> entry : contactHashMap.entrySet()) {
-                        ContactsController.Contact contact = entry.getValue();
-                        if (contact.phones.isEmpty() || contact.shortPhones.isEmpty()) {
-                            continue;
-                        }
-                        state.requery();
-                        state.bindInteger(1, contact.id);
-                        state.bindString(2, contact.first_name);
-                        state.bindString(3, contact.last_name);
-                        state.step();
-                        for (int a = 0; a < contact.phones.size(); a++) {
-                            state2.requery();
-                            state2.bindInteger(1, contact.id);
-                            state2.bindString(2, contact.phones.get(a));
-                            state2.bindString(3, contact.shortPhones.get(a));
-                            state2.bindInteger(4, contact.phoneDeleted.get(a));
-                            state2.step();
-                        }
-                    }
-                    state.dispose();
-                    state2.dispose();
-                    database.commitTransaction();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void getCachedPhoneBook() {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                HashMap<Integer, ContactsController.Contact> contactHashMap = new HashMap<>();
-                try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1");
-                    while (cursor.next()) {
-                        int uid = cursor.intValue(0);
-                        ContactsController.Contact contact = contactHashMap.get(uid);
-                        if (contact == null) {
-                            contact = new ContactsController.Contact();
-                            contact.first_name = cursor.stringValue(1);
-                            contact.last_name = cursor.stringValue(2);
-                            contact.id = uid;
-                            contactHashMap.put(uid, contact);
-                        }
-                        String phone = cursor.stringValue(3);
-                        if (phone == null) {
-                            continue;
-                        }
-                        contact.phones.add(phone);
-                        String sphone = cursor.stringValue(4);
-                        if (sphone == null) {
-                            continue;
-                        }
-                        if (sphone.length() == 8 && phone.length() != 8) {
-                            sphone = PhoneFormat.stripExceptNumbers(phone);
-                        }
-                        contact.shortPhones.add(sphone);
-                        contact.phoneDeleted.add(cursor.intValue(5));
-                        contact.phoneTypes.add("");
-                    }
-                    cursor.dispose();
-                } catch (Exception e) {
-                    contactHashMap.clear();
-                    FileLog.e("tmessages", e);
-                }
-                ContactsController.getInstance().performSyncPhoneBook(contactHashMap, true, true, false);
-            }
-        });
-    }
-
-    public void getContacts() {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                ArrayList<TLRPC.TL_contact> contacts = new ArrayList<>();
-                ArrayList<TLRPC.User> users = new ArrayList<>();
-                try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT * FROM contacts WHERE 1");
-                    StringBuilder uids = new StringBuilder();
-                    while (cursor.next()) {
-                        int user_id = cursor.intValue(0);
-                        TLRPC.TL_contact contact = new TLRPC.TL_contact();
-                        contact.user_id = user_id;
-                        contact.mutual = cursor.intValue(1) == 1;
-                        if (uids.length() != 0) {
-                            uids.append(",");
-                        }
-                        contacts.add(contact);
-                        uids.append(contact.user_id);
-                    }
-                    cursor.dispose();
-
-                    if (uids.length() != 0) {
-                        getUsersInternal(uids.toString(), users);
-                    }
-                } catch (Exception e) {
-                    contacts.clear();
-                    users.clear();
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void getUnsentMessages(final int count) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    HashMap<Integer, TLRPC.Message> messageHashMap = new HashMap<>();
-                    ArrayList<TLRPC.Message> messages = new ArrayList<>();
-                    ArrayList<TLRPC.User> users = new ArrayList<>();
-                    ArrayList<TLRPC.Chat> chats = new ArrayList<>();
-                    ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
-
-                    ArrayList<Integer> userIds = new ArrayList<>();
-                    ArrayList<Integer> chatIds = new ArrayList<>();
-                    ArrayList<Integer> broadcastIds = new ArrayList<>();
-                    ArrayList<Integer> encryptedChatIds = new ArrayList<>();
-                    SQLiteCursor cursor = database.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.mid < 0 AND m.send_state = 1 ORDER BY m.mid DESC LIMIT " + count);
-                    while (cursor.next()) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
-                        if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                            if (!messageHashMap.containsKey(message.id)) {
-                                MessageObject.setUnreadFlags(message, cursor.intValue(0));
-                                message.id = cursor.intValue(3);
-                                message.date = cursor.intValue(4);
-                                if (!cursor.isNull(5)) {
-                                    message.random_id = cursor.longValue(5);
-                                }
-                                message.dialog_id = cursor.longValue(6);
-                                message.seq_in = cursor.intValue(7);
-                                message.seq_out = cursor.intValue(8);
-                                messages.add(message);
-                                messageHashMap.put(message.id, message);
-
-                                int lower_id = (int) message.dialog_id;
-                                int high_id = (int) (message.dialog_id >> 32);
-
-                                if (lower_id != 0) {
-                                    if (high_id == 1) {
-                                        if (!broadcastIds.contains(lower_id)) {
-                                            broadcastIds.add(lower_id);
-                                        }
-                                    } else {
-                                        if (lower_id < 0) {
-                                            if (!chatIds.contains(-lower_id)) {
-                                                chatIds.add(-lower_id);
-                                            }
-                                        } else {
-                                            if (!userIds.contains(lower_id)) {
-                                                userIds.add(lower_id);
-                                            }
-                                        }
-                                    }
-                                } else {
-                                    if (!encryptedChatIds.contains(high_id)) {
-                                        encryptedChatIds.add(high_id);
-                                    }
-                                }
-
-                                if (!userIds.contains(message.from_id)) {
-                                    userIds.add(message.from_id);
-                                }
-                                if (message.action != null && message.action.user_id != 0 && !userIds.contains(message.action.user_id)) {
-                                    userIds.add(message.action.user_id);
-                                }
-                                if (message.media != null && message.media.user_id != 0 && !userIds.contains(message.media.user_id)) {
-                                    userIds.add(message.media.user_id);
-                                }
-                                if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0 && !userIds.contains(message.media.audio.user_id)) {
-                                    userIds.add(message.media.audio.user_id);
-                                }
-                                if (message.fwd_from_id != 0 && !userIds.contains(message.fwd_from_id)) {
-                                    userIds.add(message.fwd_from_id);
-                                }
-                                message.send_state = cursor.intValue(2);
-                                if (!MessageObject.isUnread(message) && lower_id != 0 || message.id > 0) {
-                                    message.send_state = 0;
-                                }
-                                if (lower_id == 0 && !cursor.isNull(5)) {
-                                    message.random_id = cursor.longValue(5);
-                                }
-                            }
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-
-
-                    if (!encryptedChatIds.isEmpty()) {
-                        getEncryptedChatsInternal(TextUtils.join(",", encryptedChatIds), encryptedChats, userIds);
-                    }
-
-                    if (!userIds.isEmpty()) {
-                        getUsersInternal(TextUtils.join(",", userIds), users);
-                    }
-
-                    if (!chatIds.isEmpty() || !broadcastIds.isEmpty()) {
-                        StringBuilder stringToLoad = new StringBuilder();
-                        for (Integer cid : chatIds) {
-                            if (stringToLoad.length() != 0) {
-                                stringToLoad.append(",");
-                            }
-                            stringToLoad.append(cid);
-                        }
-                        for (Integer cid : broadcastIds) {
-                            if (stringToLoad.length() != 0) {
-                                stringToLoad.append(",");
-                            }
-                            stringToLoad.append(-cid);
-                        }
-                        getChatsInternal(stringToLoad.toString(), chats);
-                    }
-
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    /*private ArrayList<Range<Integer>> getHoles(long dialog_id) {
-        int lower_id = (int)dialog_id;
-        int high_id = (int)(dialog_id >> 32);
-
-        if (lower_id == 0 || lower_id != 0 && high_id == 1) {
-            return null;
-        }
-        ArrayList<Range<Integer>> holes = null;
-        try {
-            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT start, end FROM messages_holes WHERE uid = %d", dialog_id));
-            while (cursor.next()) {
-                if (holes == null) {
-                    holes = new ArrayList<Range<Integer>>();
-                }
-                holes.add(new Range<Integer>(cursor.intValue(0), cursor.intValue(1)));
-            }
-            cursor.dispose();
-        } catch (Exception e) {
-            FileLog.e("tmessages" , e);
-        }
-        return holes;
-    }*/
-
-    public void getMessages(final long dialog_id, final int count, final int max_id, final int minDate, final int classGuid, final int load_type) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                TLRPC.TL_messages_messages res = new TLRPC.TL_messages_messages();
-                int count_unread = 0;
-                int count_query = count;
-                int offset_query = 0;
-                int min_unread_id = 0;
-                int last_message_id = 0;
-                int first_message_id = 0;
-                int max_unread_date = 0;
-                int hole_start = Integer.MAX_VALUE;
-                int hole_end = Integer.MAX_VALUE;
-                try {
-                    ArrayList<Integer> loadedUsers = new ArrayList<>();
-                    ArrayList<Integer> fromUser = new ArrayList<>();
-                    ArrayList<Integer> replyMessages = new ArrayList<>();
-                    HashMap<Integer, ArrayList<TLRPC.Message>> replyMessageOwners = new HashMap<>();
-
-                    SQLiteCursor cursor;
-                    int lower_id = (int)dialog_id;
-
-                    if (lower_id != 0) {
-                        if (load_type == 3) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT max(mid), min(mid) FROM messages WHERE uid = %d AND mid > 0", dialog_id));
-                            if (cursor.next()) {
-                                last_message_id = cursor.intValue(0);
-                                first_message_id = cursor.intValue(1);
-                            }
-                            cursor.dispose();
-
-                            boolean containMessage = false;
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages WHERE mid = %d", max_id));
-                            if (cursor.next()) {
-                                containMessage = true;
-                            }
-                            cursor.dispose();
-
-                            if (containMessage) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION " +
-                                        "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", dialog_id, max_id, count_query / 2, dialog_id, max_id, count_query / 2 - 1));
-                            } else {
-                                cursor = null;
-                            }
-                        } else if (load_type == 1) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d", dialog_id, minDate, max_id, count_query));
-                        } else if (minDate != 0) {
-                            if (max_id != 0) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", dialog_id, minDate, max_id, count_query));
-                            } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
-                            }
-                        } else {
-                            if (load_type == 2) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", dialog_id));
-                                if (cursor.next()) {
-                                    last_message_id = cursor.intValue(0);
-                                }
-                                cursor.dispose();
-
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT min(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0", dialog_id));
-                                if (cursor.next()) {
-                                    min_unread_id = cursor.intValue(0);
-                                    max_unread_date = cursor.intValue(1);
-                                }
-                                cursor.dispose();
-                                if (min_unread_id != 0) {
-                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid >= %d AND out = 0 AND read_state IN(0,2)", dialog_id, min_unread_id));
-                                    if (cursor.next()) {
-                                        count_unread = cursor.intValue(0);
-                                    }
-                                    cursor.dispose();
-                                }
-                            }
-
-                            if (count_query > count_unread || count_unread < 4) {
-                                count_query = Math.max(count_query, count_unread + 10);
-                                if (count_unread < 4) {
-                                    count_unread = 0;
-                                    min_unread_id = 0;
-                                    last_message_id = 0;
-                                }
-                            } else {
-                                offset_query = count_unread - count_query;
-                                count_query += 10;
-                            }
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, offset_query, count_query));
-                        }
-                    } else {
-                        if (load_type == 1) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d", dialog_id, max_id, count_query));
-                        } else if (minDate != 0) {
-                            if (max_id != 0) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", dialog_id, max_id, count_query));
-                            } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
-                            }
-                        } else {
-                            if (load_type == 2) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND mid < 0", dialog_id));
-                                if (cursor.next()) {
-                                    last_message_id = cursor.intValue(0);
-                                }
-                                cursor.dispose();
-
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT max(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid < 0", dialog_id));
-                                if (cursor.next()) {
-                                    min_unread_id = cursor.intValue(0);
-                                    max_unread_date = cursor.intValue(1);
-                                }
-                                cursor.dispose();
-                                if (min_unread_id != 0) {
-                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid <= %d AND out = 0 AND read_state IN(0,2)", dialog_id, min_unread_id));
-                                    if (cursor.next()) {
-                                        count_unread = cursor.intValue(0);
-                                    }
-                                    cursor.dispose();
-                                }
-                            }
-
-                            if (count_query > count_unread || count_unread < 4) {
-                                count_query = Math.max(count_query, count_unread + 10);
-                                if (count_unread < 4) {
-                                    count_unread = 0;
-                                    min_unread_id = 0;
-                                    last_message_id = 0;
-                                }
-                            } else {
-                                offset_query = count_unread - count_query;
-                                count_query += 10;
-                            }
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, offset_query, count_query));
-                        }
-                    }
-                    if (cursor != null) {
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
-                            if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                                TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                                MessageObject.setUnreadFlags(message, cursor.intValue(0));
-                                message.id = cursor.intValue(3);
-                                message.date = cursor.intValue(4);
-                                message.dialog_id = dialog_id;
-                                res.messages.add(message);
-                                fromUser.add(message.from_id);
-                                if (message.action != null && message.action.user_id != 0) {
-                                    fromUser.add(message.action.user_id);
-                                }
-                                if (message.media != null && message.media.user_id != 0) {
-                                    fromUser.add(message.media.user_id);
-                                }
-                                if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0) {
-                                    fromUser.add(message.media.audio.user_id);
-                                }
-                                if (message.fwd_from_id != 0) {
-                                    fromUser.add(message.fwd_from_id);
-                                }
-                                if (message.reply_to_msg_id != 0) {
-                                    boolean ok = false;
-                                    if (!cursor.isNull(6)) {
-                                        ByteBufferDesc data2 = buffersStorage.getFreeBuffer(cursor.byteArrayLength(6));
-                                        if (data2 != null && cursor.byteBufferValue(6, data2.buffer) != 0) {
-                                            message.replyMessage = TLRPC.Message.TLdeserialize(data2, data2.readInt32(false), false);
-                                            if (message.replyMessage != null) {
-                                                fromUser.add(message.replyMessage.from_id);
-                                                if (message.replyMessage.action != null && message.replyMessage.action.user_id != 0) {
-                                                    fromUser.add(message.replyMessage.action.user_id);
-                                                }
-                                                if (message.replyMessage.media != null && message.replyMessage.media.user_id != 0) {
-                                                    fromUser.add(message.replyMessage.media.user_id);
-                                                }
-                                                if (message.replyMessage.media != null && message.replyMessage.media.audio != null && message.replyMessage.media.audio.user_id != 0) {
-                                                    fromUser.add(message.replyMessage.media.audio.user_id);
-                                                }
-                                                if (message.replyMessage.fwd_from_id != 0) {
-                                                    fromUser.add(message.replyMessage.fwd_from_id);
-                                                }
-                                                ok = true;
-                                            }
-                                        }
-                                        buffersStorage.reuseFreeBuffer(data2);
-                                    }
-                                    if (!ok) {
-                                        if (!replyMessages.contains(message.reply_to_msg_id)) {
-                                            replyMessages.add(message.reply_to_msg_id);
-                                        }
-                                        ArrayList<TLRPC.Message> messages = replyMessageOwners.get(message.reply_to_msg_id);
-                                        if (messages == null) {
-                                            messages = new ArrayList<>();
-                                            replyMessageOwners.put(message.reply_to_msg_id, messages);
-                                        }
-                                        messages.add(message);
-                                    }
-                                }
-                                message.send_state = cursor.intValue(2);
-                                if (!MessageObject.isUnread(message) && lower_id != 0 || message.id > 0) {
-                                    message.send_state = 0;
-                                }
-                                if (lower_id == 0 && !cursor.isNull(5)) {
-                                    message.random_id = cursor.longValue(5);
-                                }
-                                if ((int) dialog_id == 0 && message.media != null && message.media.photo != null) {
-                                    try {
-                                        SQLiteCursor cursor2 = database.queryFinalized(String.format(Locale.US, "SELECT date FROM enc_tasks_v2 WHERE mid = %d", message.id));
-                                        if (cursor2.next()) {
-                                            message.destroyTime = cursor2.intValue(0);
-                                        }
-                                        cursor2.dispose();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
-                    }
-
-                    Collections.sort(res.messages, new Comparator<TLRPC.Message>() {
-                        @Override
-                        public int compare(TLRPC.Message lhs, TLRPC.Message rhs) {
-                            if (lhs.id > 0 && rhs.id > 0) {
-                                if (lhs.id > rhs.id) {
-                                    return -1;
-                                } else if (lhs.id < rhs.id) {
-                                    return 1;
-                                }
-                            } else if (lhs.id < 0 && rhs.id < 0) {
-                                if (lhs.id < rhs.id) {
-                                    return -1;
-                                } else if (lhs.id > rhs.id) {
-                                    return 1;
-                                }
-                            } else {
-                                if (lhs.date > rhs.date) {
-                                    return -1;
-                                } else if (lhs.date < rhs.date) {
-                                    return 1;
-                                }
-                            }
-                            return 0;
-                        }
-                    });
-
-                    if (!replyMessages.isEmpty()) {
-                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date FROM messages WHERE mid IN(%s)", TextUtils.join(",", replyMessages)));
-                        while (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                                message.id = cursor.intValue(1);
-                                message.date = cursor.intValue(2);
-                                message.dialog_id = dialog_id;
-                                fromUser.add(message.from_id);
-                                if (message.action != null && message.action.user_id != 0) {
-                                    fromUser.add(message.action.user_id);
-                                }
-                                if (message.media != null && message.media.user_id != 0) {
-                                    fromUser.add(message.media.user_id);
-                                }
-                                if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0) {
-                                    fromUser.add(message.media.audio.user_id);
-                                }
-                                if (message.fwd_from_id != 0) {
-                                    fromUser.add(message.fwd_from_id);
-                                }
-                                ArrayList<TLRPC.Message> arrayList = replyMessageOwners.get(message.id);
-                                if (arrayList != null) {
-                                    for (TLRPC.Message m : arrayList) {
-                                        m.replyMessage = message;
-                                    }
-                                }
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
-                    }
-
-                    StringBuilder usersToLoad = new StringBuilder();
-                    for (int uid : fromUser) {
-                        if (!loadedUsers.contains(uid)) {
-                            if (usersToLoad.length() != 0) {
-                                usersToLoad.append(",");
-                            }
-                            usersToLoad.append(uid);
-                            loadedUsers.add(uid);
-                        }
-                    }
-                    if (usersToLoad.length() != 0) {
-                        getUsersInternal(usersToLoad.toString(), res.users);
-                    }
-                } catch (Exception e) {
-                    res.messages.clear();
-                    res.chats.clear();
-                    res.users.clear();
-                    FileLog.e("tmessages", e);
-                } finally {
-                    MessagesController.getInstance().processLoadedMessages(res, dialog_id, count_query, max_id, true, classGuid, min_unread_id, last_message_id, first_message_id, count_unread, max_unread_date, load_type, false);
-                }
-            }
-        });
-    }
-
-    public void startTransaction(boolean useQueue) {
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        database.beginTransaction();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            });
-        } else {
-            try {
-                database.beginTransaction();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-    }
-
-    public void commitTransaction(boolean useQueue) {
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    database.commitTransaction();
-                }
-            });
-        } else {
-            database.commitTransaction();
-        }
-    }
-
-    public TLObject getSentFile(final String path, final int type) {
-        if (path == null) {
-            return null;
-        }
-        final Semaphore semaphore = new Semaphore(0);
-        final ArrayList<TLObject> result = new ArrayList<>();
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    String id = Utilities.MD5(path);
-                    if (id != null) {
-                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM sent_files_v2 WHERE uid = '%s' AND type = %d", id, type));
-                        if (cursor.next()) {
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                TLObject file = TLClassStore.Instance().TLdeserialize(data, data.readInt32(false), false);
-                                if (file != null) {
-                                    result.add(file);
-                                }
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    semaphore.release();
-                }
-            }
-        });
-        try {
-            semaphore.acquire();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return !result.isEmpty() ? result.get(0) : null;
-    }
-
-    public void putSentFile(final String path, final TLObject file, final int type) {
-        if (path == null || file == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                SQLitePreparedStatement state = null;
-                try {
-                    String id = Utilities.MD5(path);
-                    if (id != null) {
-                        state = database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?)");
-                        state.requery();
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(file.getObjectSize());
-                        file.serializeToStream(data);
-                        state.bindString(1, id);
-                        state.bindInteger(2, type);
-                        state.bindByteBuffer(3, data.buffer);
-                        state.step();
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (state != null) {
-                        state.dispose();
-                    }
-                }
-            }
-        });
-    }
-
-    public void updateEncryptedChatSeq(final TLRPC.EncryptedChat chat) {
-        if (chat == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                SQLitePreparedStatement state = null;
-                try {
-                    state = database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ? WHERE uid = ?");
-                    state.bindInteger(1, chat.seq_in);
-                    state.bindInteger(2, chat.seq_out);
-                    state.bindInteger(3, (int)chat.key_use_count_in << 16 | chat.key_use_count_out);
-                    state.bindInteger(4, chat.id);
-                    state.step();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (state != null) {
-                        state.dispose();
-                    }
-                }
-            }
-        });
-    }
-
-    public void updateEncryptedChatTTL(final TLRPC.EncryptedChat chat) {
-        if (chat == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                SQLitePreparedStatement state = null;
-                try {
-                    state = database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
-                    state.bindInteger(1, chat.ttl);
-                    state.bindInteger(2, chat.id);
-                    state.step();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (state != null) {
-                        state.dispose();
-                    }
-                }
-            }
-        });
-    }
-
-    public void updateEncryptedChatLayer(final TLRPC.EncryptedChat chat) {
-        if (chat == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                SQLitePreparedStatement state = null;
-                try {
-                    state = database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
-                    state.bindInteger(1, chat.layer);
-                    state.bindInteger(2, chat.id);
-                    state.step();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (state != null) {
-                        state.dispose();
-                    }
-                }
-            }
-        });
-    }
-
-    public void updateEncryptedChat(final TLRPC.EncryptedChat chat) {
-        if (chat == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                SQLitePreparedStatement state = null;
-                try {
-                    if ((chat.key_hash == null || chat.key_hash.length != 16) && chat.auth_key != null) {
-                        byte[] sha1 = Utilities.computeSHA1(chat.auth_key);
-                        chat.key_hash = new byte[16];
-                        System.arraycopy(sha1, 0, chat.key_hash, 0, chat.key_hash.length);
-                    }
-
-                    state = database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ? WHERE uid = ?");
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(chat.getObjectSize());
-                    ByteBufferDesc data2 = buffersStorage.getFreeBuffer(chat.a_or_b != null ? chat.a_or_b.length : 1);
-                    ByteBufferDesc data3 = buffersStorage.getFreeBuffer(chat.auth_key != null ? chat.auth_key.length : 1);
-                    ByteBufferDesc data4 = buffersStorage.getFreeBuffer(chat.future_auth_key != null ? chat.future_auth_key.length : 1);
-                    ByteBufferDesc data5 = buffersStorage.getFreeBuffer(chat.key_hash != null ? chat.key_hash.length : 1);
-                    chat.serializeToStream(data);
-                    state.bindByteBuffer(1, data.buffer);
-                    if (chat.a_or_b != null) {
-                        data2.writeRaw(chat.a_or_b);
-                    }
-                    if (chat.auth_key != null) {
-                        data3.writeRaw(chat.auth_key);
-                    }
-                    if (chat.future_auth_key != null) {
-                        data4.writeRaw(chat.future_auth_key);
-                    }
-                    if (chat.key_hash != null) {
-                        data5.writeRaw(chat.key_hash);
-                    }
-                    state.bindByteBuffer(2, data2.buffer);
-                    state.bindByteBuffer(3, data3.buffer);
-                    state.bindInteger(4, chat.ttl);
-                    state.bindInteger(5, chat.layer);
-                    state.bindInteger(6, chat.seq_in);
-                    state.bindInteger(7, chat.seq_out);
-                    state.bindInteger(8, (int)chat.key_use_count_in << 16 | chat.key_use_count_out);
-                    state.bindLong(9, chat.exchange_id);
-                    state.bindInteger(10, chat.key_create_date);
-                    state.bindLong(11, chat.future_key_fingerprint);
-                    state.bindByteBuffer(12, data4.buffer);
-                    state.bindByteBuffer(13, data5.buffer);
-                    state.bindInteger(14, chat.id);
-
-                    state.step();
-                    buffersStorage.reuseFreeBuffer(data);
-                    buffersStorage.reuseFreeBuffer(data2);
-                    buffersStorage.reuseFreeBuffer(data3);
-                    buffersStorage.reuseFreeBuffer(data4);
-                    buffersStorage.reuseFreeBuffer(data5);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (state != null) {
-                        state.dispose();
-                    }
-                }
-            }
-        });
-    }
-
-    public void getEncryptedChat(final int chat_id, final Semaphore semaphore, final ArrayList<TLObject> result) {
-        if (semaphore == null || result == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    ArrayList<Integer> usersToLoad = new ArrayList<>();
-                    ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
-                    getEncryptedChatsInternal("" + chat_id, encryptedChats, usersToLoad);
-                    if (!encryptedChats.isEmpty() && !usersToLoad.isEmpty()) {
-                        ArrayList<TLRPC.User> users = new ArrayList<>();
-                        getUsersInternal(TextUtils.join(",", usersToLoad), users);
-                        if (!users.isEmpty()) {
-                            result.add(encryptedChats.get(0));
-                            result.add(users.get(0));
-                        }
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    semaphore.release();
-                }
-            }
-        });
-    }
-
-    public void putEncryptedChat(final TLRPC.EncryptedChat chat, final TLRPC.User user, final TLRPC.TL_dialog dialog) {
-        if (chat == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if ((chat.key_hash == null || chat.key_hash.length != 16) && chat.auth_key != null) {
-                        byte[] sha1 = Utilities.computeSHA1(chat.auth_key);
-                        chat.key_hash = new byte[16];
-                        System.arraycopy(sha1, 0, chat.key_hash, 0, chat.key_hash.length);
-                    }
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(chat.getObjectSize());
-                    ByteBufferDesc data2 = buffersStorage.getFreeBuffer(chat.a_or_b != null ? chat.a_or_b.length : 1);
-                    ByteBufferDesc data3 = buffersStorage.getFreeBuffer(chat.auth_key != null ? chat.auth_key.length : 1);
-                    ByteBufferDesc data4 = buffersStorage.getFreeBuffer(chat.future_auth_key != null ? chat.future_auth_key.length : 1);
-                    ByteBufferDesc data5 = buffersStorage.getFreeBuffer(chat.key_hash != null ? chat.key_hash.length : 1);
-
-                    chat.serializeToStream(data);
-                    state.bindInteger(1, chat.id);
-                    state.bindInteger(2, user.id);
-                    state.bindString(3, formatUserSearchName(user));
-                    state.bindByteBuffer(4, data.buffer);
-                    if (chat.a_or_b != null) {
-                        data2.writeRaw(chat.a_or_b);
-                    }
-                    if (chat.auth_key != null) {
-                        data3.writeRaw(chat.auth_key);
-                    }
-                    if (chat.future_auth_key != null) {
-                        data4.writeRaw(chat.future_auth_key);
-                    }
-                    if (chat.key_hash != null) {
-                        data5.writeRaw(chat.key_hash);
-                    }
-                    state.bindByteBuffer(5, data2.buffer);
-                    state.bindByteBuffer(6, data3.buffer);
-                    state.bindInteger(7, chat.ttl);
-                    state.bindInteger(8, chat.layer);
-                    state.bindInteger(9, chat.seq_in);
-                    state.bindInteger(10, chat.seq_out);
-                    state.bindInteger(11, (int)chat.key_use_count_in << 16 | chat.key_use_count_out);
-                    state.bindLong(12, chat.exchange_id);
-                    state.bindInteger(13, chat.key_create_date);
-                    state.bindLong(14, chat.future_key_fingerprint);
-                    state.bindByteBuffer(15, data4.buffer);
-                    state.bindByteBuffer(16, data5.buffer);
-
-                    state.step();
-                    state.dispose();
-                    buffersStorage.reuseFreeBuffer(data);
-                    buffersStorage.reuseFreeBuffer(data2);
-                    buffersStorage.reuseFreeBuffer(data3);
-                    buffersStorage.reuseFreeBuffer(data4);
-                    buffersStorage.reuseFreeBuffer(data5);
-
-                    if (dialog != null) {
-                        state = database.executeFast("REPLACE INTO dialogs(did, date, unread_count, last_mid, inbox_max, outbox_max) VALUES(?, ?, ?, ?, ?, ?)");
-                        state.bindLong(1, dialog.id);
-                        state.bindInteger(2, dialog.last_message_date);
-                        state.bindInteger(3, dialog.unread_count);
-                        state.bindInteger(4, dialog.top_message);
-                        state.bindInteger(5, dialog.read_inbox_max_id);
-                        state.bindInteger(6, 0);
-                        state.step();
-                        state.dispose();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private String formatUserSearchName(TLRPC.User user) {
-        StringBuilder str = new StringBuilder("");
-        if (user.first_name != null && user.first_name.length() > 0) {
-            str.append(user.first_name);
-        }
-        if (user.last_name != null && user.last_name.length() > 0) {
-            if (str.length() > 0) {
-                str.append(" ");
-            }
-            str.append(user.last_name);
-        }
-        str.append(";;;");
-        if (user.username != null && user.username.length() > 0) {
-            str.append(user.username);
-        }
-        return str.toString().toLowerCase();
-    }
-
-    private void putUsersInternal(ArrayList<TLRPC.User> users) throws Exception {
-        if (users == null || users.isEmpty()) {
-            return;
-        }
-        SQLitePreparedStatement state = database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
-        for (TLRPC.User user : users) {
-            state.requery();
-            ByteBufferDesc data = buffersStorage.getFreeBuffer(user.getObjectSize());
-            user.serializeToStream(data);
-            state.bindInteger(1, user.id);
-            state.bindString(2, formatUserSearchName(user));
-            if (user.status != null) {
-                if (user.status instanceof TLRPC.TL_userStatusRecently) {
-                    user.status.expires = -100;
-                } else if (user.status instanceof TLRPC.TL_userStatusLastWeek) {
-                    user.status.expires = -101;
-                } else if (user.status instanceof TLRPC.TL_userStatusLastMonth) {
-                    user.status.expires = -102;
-                }
-                state.bindInteger(3, user.status.expires);
-            } else {
-                state.bindInteger(3, 0);
-            }
-            state.bindByteBuffer(4, data.buffer);
-            state.step();
-            buffersStorage.reuseFreeBuffer(data);
-        }
-        state.dispose();
-    }
-
-    private void putChatsInternal(ArrayList<TLRPC.Chat> chats) throws Exception {
-        if (chats == null || chats.isEmpty()) {
-            return;
-        }
-        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
-        for (TLRPC.Chat chat : chats) {
-            state.requery();
-            ByteBufferDesc data = buffersStorage.getFreeBuffer(chat.getObjectSize());
-            chat.serializeToStream(data);
-            state.bindInteger(1, chat.id);
-            if (chat.title != null) {
-                String name = chat.title.toLowerCase();
-                state.bindString(2, name);
-            } else {
-                state.bindString(2, "");
-            }
-            state.bindByteBuffer(3, data.buffer);
-            state.step();
-            buffersStorage.reuseFreeBuffer(data);
-        }
-        state.dispose();
-    }
-
-    public void getUsersInternal(String usersToLoad, ArrayList<TLRPC.User> result) throws Exception {
-        if (usersToLoad == null || usersToLoad.length() == 0 || result == null) {
-            return;
-        }
-        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", usersToLoad));
-        while (cursor.next()) {
-            try {
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
-                    if (user != null) {
-                        if (user.status != null) {
-                            user.status.expires = cursor.intValue(1);
-                        }
-                        result.add(user);
-                    }
-                }
-                buffersStorage.reuseFreeBuffer(data);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-        cursor.dispose();
-    }
-
-    public void getChatsInternal(String chatsToLoad, ArrayList<TLRPC.Chat> result) throws Exception {
-        if (chatsToLoad == null || chatsToLoad.length() == 0 || result == null) {
-            return;
-        }
-        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", chatsToLoad));
-        while (cursor.next()) {
-            try {
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    TLRPC.Chat chat = TLRPC.Chat.TLdeserialize(data, data.readInt32(false), false);
-                    if (chat != null) {
-                        result.add(chat);
-                    }
-                }
-                buffersStorage.reuseFreeBuffer(data);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-        cursor.dispose();
-    }
-
-    public void getEncryptedChatsInternal(String chatsToLoad, ArrayList<TLRPC.EncryptedChat> result, ArrayList<Integer> usersToLoad) throws Exception {
-        if (chatsToLoad == null || chatsToLoad.length() == 0 || result == null) {
-            return;
-        }
-        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash FROM enc_chats WHERE uid IN(%s)", chatsToLoad));
-        while (cursor.next()) {
-            try {
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                    TLRPC.EncryptedChat chat = TLRPC.EncryptedChat.TLdeserialize(data, data.readInt32(false), false);
-                    if (chat != null) {
-                        chat.user_id = cursor.intValue(1);
-                        if (usersToLoad != null && !usersToLoad.contains(chat.user_id)) {
-                            usersToLoad.add(chat.user_id);
-                        }
-                        chat.a_or_b = cursor.byteArrayValue(2);
-                        chat.auth_key = cursor.byteArrayValue(3);
-                        chat.ttl = cursor.intValue(4);
-                        chat.layer = cursor.intValue(5);
-                        chat.seq_in = cursor.intValue(6);
-                        chat.seq_out = cursor.intValue(7);
-                        int use_count = cursor.intValue(8);
-                        chat.key_use_count_in = (short)(use_count >> 16);
-                        chat.key_use_count_out = (short)(use_count);
-                        chat.exchange_id = cursor.longValue(9);
-                        chat.key_create_date = cursor.intValue(10);
-                        chat.future_key_fingerprint = cursor.longValue(11);
-                        chat.future_auth_key = cursor.byteArrayValue(12);
-                        chat.key_hash = cursor.byteArrayValue(13);
-                        result.add(chat);
-                    }
-                }
-                buffersStorage.reuseFreeBuffer(data);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-        cursor.dispose();
-    }
-
-    private void putUsersAndChatsInternal(final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final boolean withTransaction) {
-        try {
-            if (withTransaction) {
-                database.beginTransaction();
-            }
-            putUsersInternal(users);
-            putChatsInternal(chats);
-            if (withTransaction) {
-                database.commitTransaction();
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void putUsersAndChats(final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final boolean withTransaction, boolean useQueue) {
-        if (users != null && users.isEmpty() && chats != null && chats.isEmpty()) {
-            return;
-        }
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    putUsersAndChatsInternal(users, chats, withTransaction);
-                }
-            });
-        } else {
-            putUsersAndChatsInternal(users, chats, withTransaction);
-        }
-    }
-
-    public void removeFromDownloadQueue(final long id, final int type, final boolean move) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (move) {
-                        int minDate = -1;
-                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT min(date) FROM download_queue WHERE type = %d", type));
-                        if (cursor.next()) {
-                            minDate = cursor.intValue(0);
-                        }
-                        cursor.dispose();
-                        if (minDate != -1) {
-                            database.executeFast(String.format(Locale.US, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", minDate - 1, id, type)).stepThis().dispose();
-                        }
-                    } else {
-                        database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", id, type)).stepThis().dispose();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void clearDownloadQueue(final int type) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (type == 0) {
-                        database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
-                    } else {
-                        database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", type)).stepThis().dispose();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void getDownloadQueue(final int type) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    final ArrayList<DownloadObject> objects = new ArrayList<>();
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", type));
-                    while (cursor.next()) {
-                        DownloadObject downloadObject = new DownloadObject();
-                        downloadObject.type = cursor.intValue(1);
-                        downloadObject.id = cursor.longValue(0);
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(2));
-                        if (data != null && cursor.byteBufferValue(2, data.buffer) != 0) {
-                            downloadObject.object = TLClassStore.Instance().TLdeserialize(data, data.readInt32(false), false);
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                        objects.add(downloadObject);
-                    }
-                    cursor.dispose();
-
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            MediaController.getInstance().processDownloadObjects(type, objects);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private int getMessageMediaType(TLRPC.Message message) {
-        if (message instanceof TLRPC.TL_message_secret && (
-                message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl != 0 && message.ttl <= 60 ||
-                message.media instanceof TLRPC.TL_messageMediaAudio ||
-                message.media instanceof TLRPC.TL_messageMediaVideo)) {
-            return 1;
-        } else if (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo) {
-            return 0;
-        }
-        return -1;
-    }
-
-    public void putWebPages(final HashMap<Long, TLRPC.WebPage> webPages) {
-        if (webPages == null || webPages.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    String ids = TextUtils.join(",", webPages.keySet());
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid FROM webpage_pending WHERE id IN (%s)", ids));
-                    ArrayList<Integer> mids = new ArrayList<>();
-                    while (cursor.next()) {
-                        mids.add(cursor.intValue(0));
-                    }
-                    cursor.dispose();
-
-                    if (mids.isEmpty()) {
-                        return;
-                    }
-                    final ArrayList<TLRPC.Message> messages = new ArrayList<>();
-                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid, data FROM messages WHERE mid IN (%s)", TextUtils.join(",", mids)));
-                    while (cursor.next()) {
-                        int mid = cursor.intValue(0);
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
-                        if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                            if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
-                                message.id = mid;
-                                message.media.webpage = webPages.get(message.media.webpage.id);
-                                messages.add(message);
-                            }
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-
-                    database.executeFast(String.format(Locale.US, "DELETE FROM webpage_pending WHERE id IN (%s)", ids)).stepThis().dispose();
-
-                    if (messages.isEmpty()) {
-                        return;
-                    }
-
-                    database.beginTransaction();
-
-                    SQLitePreparedStatement state = database.executeFast("UPDATE messages SET data = ? WHERE mid = ?");
-                    for (TLRPC.Message message : messages) {
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
-                        message.serializeToStream(data);
-
-                        state.requery();
-                        state.bindByteBuffer(1, data.buffer);
-                        state.bindInteger(2, message.id);
-                        state.step();
-
-                        buffersStorage.reuseFreeBuffer(data);
-                    }
-                    state.dispose();
-
-                    database.commitTransaction();
-
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceivedWebpages, messages);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final boolean withTransaction, final boolean isBroadcast, final int downloadMask) {
-        try {
-            if (withTransaction) {
-                database.beginTransaction();
-            }
-            HashMap<Long, TLRPC.Message> messagesMap = new HashMap<>();
-            HashMap<Long, Integer> messagesCounts = new HashMap<>();
-            HashMap<Integer, HashMap<Long, Integer>> mediaCounts = new HashMap<>();
-            HashMap<Integer, Integer> mediaTypes = new HashMap<>();
-            HashMap<Integer, Long> messagesIdsMap = new HashMap<>();
-            HashMap<Integer, Long> messagesMediaIdsMap = new HashMap<>();
-            StringBuilder messageIds = new StringBuilder();
-            StringBuilder messageMediaIds = new StringBuilder();
-            SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
-            SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
-            SQLitePreparedStatement state3 = database.executeFast("REPLACE INTO randoms VALUES(?, ?)");
-            SQLitePreparedStatement state4 = database.executeFast("REPLACE INTO download_queue VALUES(?, ?, ?, ?)");
-            SQLitePreparedStatement state5 = database.executeFast("REPLACE INTO webpage_pending VALUES(?, ?)");
-
-            for (TLRPC.Message message : messages) {
-                long dialog_id = message.dialog_id;
-                if (dialog_id == 0) {
-                    if (message.to_id.chat_id != 0) {
-                        dialog_id = -message.to_id.chat_id;
-                    } else if (message.to_id.user_id != 0) {
-                        dialog_id = message.to_id.user_id;
-                    }
-                }
-
-                if (MessageObject.isUnread(message) && !MessageObject.isOut(message)) {
-                    if (messageIds.length() > 0) {
-                        messageIds.append(",");
-                    }
-                    messageIds.append(message.id);
-                    messagesIdsMap.put(message.id, dialog_id);
-                }
-
-                if (SharedMediaQuery.canAddMessageToMedia(message)) {
-                    if (messageMediaIds.length() > 0) {
-                        messageMediaIds.append(",");
-                    }
-                    messageMediaIds.append(message.id);
-                    messagesMediaIdsMap.put(message.id, dialog_id);
-                    mediaTypes.put(message.id, SharedMediaQuery.getMediaType(message));
-                }
-            }
-
-            if (messageMediaIds.length() > 0) {
-                SQLiteCursor cursor = database.queryFinalized("SELECT mid FROM media_v2 WHERE mid IN(" + messageMediaIds.toString() + ")");
-                while (cursor.next()) {
-                    int mid = cursor.intValue(0);
-                    messagesMediaIdsMap.remove(mid);
-                }
-                cursor.dispose();
-                for (HashMap.Entry<Integer, Long> entry : messagesMediaIdsMap.entrySet()) {
-                    Integer type = mediaTypes.get(entry.getKey());
-                    HashMap<Long, Integer> counts = mediaCounts.get(type);
-                    Integer count;
-                    if (counts == null) {
-                        counts = new HashMap<>();
-                        count = 0;
-                        mediaCounts.put(type, counts);
-                    } else {
-                        count = counts.get(entry.getValue());
-                    }
-                    if (count == null) {
-                        count = 0;
-                    }
-                    count++;
-                    counts.put(entry.getValue(), count);
-                }
-            }
-
-            if (messageIds.length() > 0) {
-                SQLiteCursor cursor = database.queryFinalized("SELECT mid FROM messages WHERE mid IN(" + messageIds.toString() + ")");
-                while (cursor.next()) {
-                    int mid = cursor.intValue(0);
-                    messagesIdsMap.remove(mid);
-                }
-                cursor.dispose();
-                for (Long dialog_id : messagesIdsMap.values()) {
-                    Integer count = messagesCounts.get(dialog_id);
-                    if (count == null) {
-                        count = 0;
-                    }
-                    count++;
-                    messagesCounts.put(dialog_id, count);
-                }
-            }
-
-            int downloadMediaMask = 0;
-            for (TLRPC.Message message : messages) {
-                fixUnsupportedMedia(message);
-
-                long dialog_id = message.dialog_id;
-                if (dialog_id == 0) {
-                    if (message.to_id.chat_id != 0) {
-                        dialog_id = -message.to_id.chat_id;
-                    } else if (message.to_id.user_id != 0) {
-                        dialog_id = message.to_id.user_id;
-                    }
-                }
-
-                state.requery();
-                int messageId = message.id;
-                if (message.local_id != 0) {
-                    messageId = message.local_id;
-                }
-
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
-                message.serializeToStream(data);
-
-                boolean updateDialog = true;
-                if (message.action != null && message.action instanceof TLRPC.TL_messageEncryptedAction && !(message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages)) {
-                    updateDialog = false;
-                }
-
-                if (updateDialog) {
-                    TLRPC.Message lastMessage = messagesMap.get(dialog_id);
-                    if (lastMessage == null || message.date > lastMessage.date) {
-                        messagesMap.put(dialog_id, message);
-                    }
-                }
-
-                state.bindInteger(1, messageId);
-                state.bindLong(2, dialog_id);
-                state.bindInteger(3, MessageObject.getUnreadFlags(message));
-                state.bindInteger(4, message.send_state);
-                state.bindInteger(5, message.date);
-                state.bindByteBuffer(6, data.buffer);
-                state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
-                state.bindInteger(8, message.ttl);
-                state.bindInteger(9, getMessageMediaType(message));
-                state.step();
-
-                if (message.random_id != 0) {
-                    state3.requery();
-                    state3.bindLong(1, message.random_id);
-                    state3.bindInteger(2, messageId);
-                    state3.step();
-                }
-
-                if (SharedMediaQuery.canAddMessageToMedia(message)) {
-                    state2.requery();
-                    state2.bindInteger(1, messageId);
-                    state2.bindLong(2, dialog_id);
-                    state2.bindInteger(3, message.date);
-                    state2.bindInteger(4, SharedMediaQuery.getMediaType(message));
-                    state2.bindByteBuffer(5, data.buffer);
-                    state2.step();
-                }
-
-                if (message.media instanceof TLRPC.TL_messageMediaWebPage && message.media.webpage instanceof TLRPC.TL_webPagePending) {
-                    state5.requery();
-                    state5.bindLong(1, message.media.webpage.id);
-                    state5.bindInteger(2, message.id);
-                    state5.step();
-                }
-
-                buffersStorage.reuseFreeBuffer(data);
-
-                if (message.date >= ConnectionsManager.getInstance().getCurrentTime() - 60 * 60 * 24 && downloadMask != 0) {
-                    if (message.media instanceof TLRPC.TL_messageMediaAudio || message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo || message.media instanceof TLRPC.TL_messageMediaDocument) {
-                        int type = 0;
-                        long id = 0;
-                        TLObject object = null;
-                        if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-                            if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0 && message.media.audio.size < 1024 * 1024 * 5) {
-                                id = message.media.audio.id;
-                                type = MediaController.AUTODOWNLOAD_MASK_AUDIO;
-                                object = message.media.audio;
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0) {
-                                TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.media.photo.sizes, AndroidUtilities.getPhotoSize());
-                                if (photoSize != null) {
-                                    id = message.media.photo.id;
-                                    type = MediaController.AUTODOWNLOAD_MASK_PHOTO;
-                                    object = photoSize;
-                                }
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                            if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0) {
-                                id = message.media.video.id;
-                                type = MediaController.AUTODOWNLOAD_MASK_VIDEO;
-                                object = message.media.video;
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                            if ((downloadMask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
-                                id = message.media.document.id;
-                                type = MediaController.AUTODOWNLOAD_MASK_DOCUMENT;
-                                object = message.media.document;
-                            }
-                        }
-                        if (object != null) {
-                            downloadMediaMask |= type;
-                            state4.requery();
-                            data = buffersStorage.getFreeBuffer(object.getObjectSize());
-                            object.serializeToStream(data);
-                            state4.bindLong(1, id);
-                            state4.bindInteger(2, type);
-                            state4.bindInteger(3, message.date);
-                            state4.bindByteBuffer(4, data.buffer);
-                            state4.step();
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                    }
-                }
-            }
-            state.dispose();
-            state2.dispose();
-            state3.dispose();
-            state4.dispose();
-            state5.dispose();
-
-            state = database.executeFast("REPLACE INTO dialogs(did, date, unread_count, last_mid, inbox_max, outbox_max) VALUES(?, ?, ?, ?, ?, ?)");
-            for (HashMap.Entry<Long, TLRPC.Message> pair : messagesMap.entrySet()) {
-                Long key = pair.getKey();
-
-                int dialog_date = 0;
-                int old_unread_count = 0;
-                SQLiteCursor cursor = database.queryFinalized("SELECT date, unread_count FROM dialogs WHERE did = " + key);
-                if (cursor.next()) {
-                    dialog_date = cursor.intValue(0);
-                    old_unread_count = cursor.intValue(1);
-                }
-                cursor.dispose();
-
-                state.requery();
-                TLRPC.Message value = pair.getValue();
-                Integer unread_count = messagesCounts.get(key);
-                if (unread_count == null) {
-                    unread_count = 0;
-                } else {
-                    messagesCounts.put(key, unread_count + old_unread_count);
-                }
-                int messageId = value.id;
-                if (value.local_id != 0) {
-                    messageId = value.local_id;
-                }
-                state.bindLong(1, key);
-                if (!isBroadcast) {
-                    state.bindInteger(2, value.date);
-                } else {
-                    state.bindInteger(2, dialog_date != 0 ? dialog_date : value.date);
-                }
-                state.bindInteger(3, old_unread_count + unread_count);
-                state.bindInteger(4, messageId);
-                state.bindInteger(5, 0);
-                state.bindInteger(6, 0);
-                state.step();
-            }
-            state.dispose();
-
-            if (!mediaCounts.isEmpty()) {
-                state = database.executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?)");
-                for (HashMap.Entry<Integer, HashMap<Long, Integer>> counts : mediaCounts.entrySet()) {
-                    Integer type = counts.getKey();
-                    for (HashMap.Entry<Long, Integer> pair : counts.getValue().entrySet()) {
-                        long uid = pair.getKey();
-                        int lower_part = (int) uid;
-                        int count = -1;
-                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT count FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", uid, type));
-                        if (cursor.next()) {
-                            count = cursor.intValue(0);
-                        }
-                        cursor.dispose();
-                        if (count != -1) {
-                            state.requery();
-                            count += pair.getValue();
-                            state.bindLong(1, uid);
-                            state.bindInteger(2, type);
-                            state.bindInteger(3, count);
-                            state.step();
-                        }
-                    }
-                }
-                state.dispose();
-            }
-            if (withTransaction) {
-                database.commitTransaction();
-            }
-            MessagesController.getInstance().processDialogsUpdateRead(messagesCounts);
-
-            if (downloadMediaMask != 0) {
-                final int downloadMediaMaskFinal = downloadMediaMask;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        MediaController.getInstance().newDownloadObjectsAvailable(downloadMediaMaskFinal);
-                    }
-                });
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void putMessages(final ArrayList<TLRPC.Message> messages, final boolean withTransaction, boolean useQueue, final boolean isBroadcast, final int downloadMask) {
-        if (messages.size() == 0) {
-            return;
-        }
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    putMessagesInternal(messages, withTransaction, isBroadcast, downloadMask);
-                }
-            });
-        } else {
-            putMessagesInternal(messages, withTransaction, isBroadcast, downloadMask);
-        }
-    }
-
-    public void markMessageAsSendError(final int mid) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast("UPDATE messages SET send_state = 2 WHERE mid = " + mid).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    /*public void getHoleMessages() {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void clearHoleMessages(final int enc_id) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast("DELETE FROM secret_holes WHERE uid = " + enc_id).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void putHoleMessage(final int enc_id, final TLRPC.Message message) {
-        if (message == null) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO secret_holes VALUES(?, ?, ?, ?)");
-
-                    state.requery();
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
-                    message.serializeToStream(data);
-                    state.bindInteger(1, enc_id);
-                    state.bindInteger(2, message.seq_in);
-                    state.bindInteger(3, message.seq_out);
-                    state.bindByteBuffer(4, data.buffer);
-                    state.step();
-                    buffersStorage.reuseFreeBuffer(data);
-
-                    state.dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }*/
-
-    public void setMessageSeq(final int mid, final int seq_in, final int seq_out) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
-                    state.requery();
-                    state.bindInteger(1, mid);
-                    state.bindInteger(2, seq_in);
-                    state.bindInteger(3, seq_out);
-                    state.step();
-                    state.dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private Integer updateMessageStateAndIdInternal(long random_id, Integer _oldId, int newId, int date) {
-        if (_oldId != null && _oldId == newId && date != 0) {
-            SQLitePreparedStatement state = null;
-            try {
-                state = database.executeFast("UPDATE messages SET send_state = 0, date = ? WHERE mid = ?");
-                state.bindInteger(1, date);
-                state.bindInteger(2, newId);
-                state.step();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            } finally {
-                if (state != null) {
-                    state.dispose();
-                }
-            }
-
-            return newId;
-        } else {
-            Integer oldId = _oldId;
-            if (oldId == null) {
-                SQLiteCursor cursor = null;
-                try {
-                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid FROM randoms WHERE random_id = %d LIMIT 1", random_id));
-                    if (cursor.next()) {
-                        oldId = cursor.intValue(0);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (cursor != null) {
-                        cursor.dispose();
-                    }
-                }
-//                if (oldId != null) {
-//                    try {
-//                        database.executeFast(String.format(Locale.US, "DELETE FROM randoms WHERE random_id = %d", random_id)).stepThis().dispose();
-//                    } catch (Exception e) {
-//                        FileLog.e("tmessages", e);
-//                    }
-//                }
-            }
-            if (oldId == null) {
-                return null;
-            }
-
-            SQLitePreparedStatement state = null;
-            try {
-                state = database.executeFast("UPDATE messages SET mid = ?, send_state = 0 WHERE mid = ?");
-                state.bindInteger(1, newId);
-                state.bindInteger(2, oldId);
-                state.step();
-            } catch (Exception e) {
-                try {
-                    database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid = %d", oldId)).stepThis().dispose();
-                    database.executeFast(String.format(Locale.US, "DELETE FROM messages_seq WHERE mid = %d", oldId)).stepThis().dispose();
-                } catch (Exception e2) {
-                    FileLog.e("tmessages", e2);
-                }
-                FileLog.e("tmessages", e);
-            } finally {
-                if (state != null) {
-                    state.dispose();
-                    state = null;
-                }
-            }
-
-            try {
-                state = database.executeFast("UPDATE media_v2 SET mid = ? WHERE mid = ?");
-                state.bindInteger(1, newId);
-                state.bindInteger(2, oldId);
-                state.step();
-            } catch (Exception e) {
-                try {
-                    database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE mid = %d", oldId)).stepThis().dispose();
-                } catch (Exception e2) {
-                    FileLog.e("tmessages", e2);
-                }
-                FileLog.e("tmessages", e);
-            } finally {
-                if (state != null) {
-                    state.dispose();
-                    state = null;
-                }
-            }
-
-            try {
-                state = database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
-                state.bindInteger(1, newId);
-                state.bindLong(2, oldId);
-                state.step();
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            } finally {
-                if (state != null) {
-                    state.dispose();
-                }
-            }
-
-            return oldId;
-        }
-    }
-
-    public Integer updateMessageStateAndId(final long random_id, final Integer _oldId, final int newId, final int date, boolean useQueue) {
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    updateMessageStateAndIdInternal(random_id, _oldId, newId, date);
-                }
-            });
-        } else {
-            return updateMessageStateAndIdInternal(random_id, _oldId, newId, date);
-        }
-        return null;
-    }
-
-    private void updateUsersInternal(final ArrayList<TLRPC.User> users, final boolean onlyStatus, final boolean withTransaction) {
-        if (Thread.currentThread().getId() != storageQueue.getId()) {
-            throw new RuntimeException("wrong db thread");
-        }
-        try {
-            if (onlyStatus) {
-                if (withTransaction) {
-                    database.beginTransaction();
-                }
-                SQLitePreparedStatement state = database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
-                for (TLRPC.User user : users) {
-                    state.requery();
-                    if (user.status != null) {
-                        state.bindInteger(1, user.status.expires);
-                    } else {
-                        state.bindInteger(1, 0);
-                    }
-                    state.bindInteger(2, user.id);
-                    state.step();
-                }
-                state.dispose();
-                if (withTransaction) {
-                    database.commitTransaction();
-                }
-            } else {
-                StringBuilder ids = new StringBuilder();
-                HashMap<Integer, TLRPC.User> usersDict = new HashMap<>();
-                for (TLRPC.User user : users) {
-                    if (ids.length() != 0) {
-                        ids.append(",");
-                    }
-                    ids.append(user.id);
-                    usersDict.put(user.id, user);
-                }
-                ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
-                getUsersInternal(ids.toString(), loadedUsers);
-                for (TLRPC.User user : loadedUsers) {
-                    TLRPC.User updateUser = usersDict.get(user.id);
-                    if (updateUser != null) {
-                        if (updateUser.first_name != null && updateUser.last_name != null) {
-                            if (!(user instanceof TLRPC.TL_userContact)) {
-                                user.first_name = updateUser.first_name;
-                                user.last_name = updateUser.last_name;
-                            }
-                            user.username = updateUser.username;
-                        } else if (updateUser.photo != null) {
-                            user.photo = updateUser.photo;
-                        } else if (updateUser.phone != null) {
-                            user.phone = updateUser.phone;
-                        }
-                    }
-                }
-
-                if (!loadedUsers.isEmpty()) {
-                    if (withTransaction) {
-                        database.beginTransaction();
-                    }
-                    putUsersInternal(loadedUsers);
-                    if (withTransaction) {
-                        database.commitTransaction();
-                    }
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void updateUsers(final ArrayList<TLRPC.User> users, final boolean onlyStatus, final boolean withTransaction, boolean useQueue) {
-        if (users.isEmpty()) {
-            return;
-        }
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    updateUsersInternal(users, onlyStatus, withTransaction);
-                }
-            });
-        } else {
-            updateUsersInternal(users, onlyStatus, withTransaction);
-        }
-    }
-
-    private void markMessagesAsReadInternal(HashMap<Integer, Integer> inbox, HashMap<Integer, Integer> outbox, HashMap<Integer, Integer> encryptedMessages) {
-        try {
-            if (inbox != null) {
-                for (HashMap.Entry<Integer, Integer> entry : inbox.entrySet()) {
-                    database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", entry.getKey(), entry.getValue())).stepThis().dispose();
-                }
-            }
-            if (outbox != null) {
-                for (HashMap.Entry<Integer, Integer> entry : outbox.entrySet()) {
-                    database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", entry.getKey(), entry.getValue())).stepThis().dispose();
-                }
-            }
-            if (encryptedMessages != null && !encryptedMessages.isEmpty()) {
-                for (HashMap.Entry<Integer, Integer> entry : encryptedMessages.entrySet()) {
-                    long dialog_id = ((long)entry.getKey()) << 32;
-                    int max_date = entry.getValue();
-                    SQLitePreparedStatement state = database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
-                    state.requery();
-                    state.bindLong(1, dialog_id);
-                    state.bindInteger(2, max_date);
-                    state.step();
-                    state.dispose();
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void markMessagesContentAsRead(final ArrayList<Integer> mids) {
-        if (mids == null || mids.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE mid IN (%s)", TextUtils.join(",", mids))).stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void markMessagesAsRead(final HashMap<Integer, Integer> inbox, final HashMap<Integer, Integer> outbox, final HashMap<Integer, Integer> encryptedMessages, boolean useQueue) {
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    markMessagesAsReadInternal(inbox, outbox, encryptedMessages);
-                }
-            });
-        } else {
-            markMessagesAsReadInternal(inbox, outbox, encryptedMessages);
-        }
-    }
-
-    public void markMessagesAsDeletedByRandoms(final ArrayList<Long> messages) {
-        if (messages.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    String ids = TextUtils.join(",", messages);
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT mid FROM randoms WHERE random_id IN(%s)", ids));
-                    final ArrayList<Integer> mids = new ArrayList<>();
-                    while (cursor.next()) {
-                        mids.add(cursor.intValue(0));
-                    }
-                    cursor.dispose();
-                    if (!mids.isEmpty()) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                for (Integer id : mids) {
-                                    MessageObject obj = MessagesController.getInstance().dialogMessage.get(id);
-                                    if (obj != null) {
-                                        obj.deleted = true;
-                                    }
-                                }
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, mids);
-                            }
-                        });
-                        MessagesStorage.getInstance().updateDialogsWithReadedMessagesInternal(mids, null);
-                        MessagesStorage.getInstance().markMessagesAsDeletedInternal(mids);
-                        MessagesStorage.getInstance().updateDialogsWithDeletedMessagesInternal(mids);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private void markMessagesAsDeletedInternal(final ArrayList<Integer> messages) {
-        try {
-            String ids = TextUtils.join(",", messages);
-            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT uid, data FROM messages WHERE mid IN(%s)", ids));
-            ArrayList<File> filesToDelete = new ArrayList<>();
-            try {
-                while (cursor.next()) {
-                    long did = cursor.longValue(0);
-                    if ((int)did != 0) {
-                        continue;
-                    }
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(1));
-                    if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                        TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                        if (message == null || message.media == null) {
-                            continue;
-                        }
-                        if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-                            File file = FileLoader.getPathToAttach(message.media.audio);
-                            if (file != null && file.toString().length() > 0) {
-                                filesToDelete.add(file);
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
-                                File file = FileLoader.getPathToAttach(photoSize);
-                                if (file != null && file.toString().length() > 0) {
-                                    filesToDelete.add(file);
-                                }
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                            File file = FileLoader.getPathToAttach(message.media.video);
-                            if (file != null && file.toString().length() > 0) {
-                                filesToDelete.add(file);
-                            }
-                            file = FileLoader.getPathToAttach(message.media.video.thumb);
-                            if (file != null && file.toString().length() > 0) {
-                                filesToDelete.add(file);
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                            File file = FileLoader.getPathToAttach(message.media.document);
-                            if (file != null && file.toString().length() > 0) {
-                                filesToDelete.add(file);
-                            }
-                            file = FileLoader.getPathToAttach(message.media.document.thumb);
-                            if (file != null && file.toString().length() > 0) {
-                                filesToDelete.add(file);
-                            }
-                        }
-                    }
-                    buffersStorage.reuseFreeBuffer(data);
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            cursor.dispose();
-            FileLoader.getInstance().deleteFiles(filesToDelete);
-            database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid IN(%s)", ids)).stepThis().dispose();
-            database.executeFast(String.format(Locale.US, "DELETE FROM messages_seq WHERE mid IN(%s)", ids)).stepThis().dispose();
-            database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE mid IN(%s)", ids)).stepThis().dispose();
-            database.executeFast("DELETE FROM media_counts_v2 WHERE 1").stepThis().dispose();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void updateDialogsWithDeletedMessagesInternal(final ArrayList<Integer> messages) {
-        if (Thread.currentThread().getId() != storageQueue.getId()) {
-            throw new RuntimeException("wrong db thread");
-        }
-        try {
-            String ids = TextUtils.join(",", messages);
-            SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT did FROM dialogs WHERE last_mid IN(%s)", ids));
-            ArrayList<Long> dialogsToUpdate = new ArrayList<>();
-            while (cursor.next()) {
-                dialogsToUpdate.add(cursor.longValue(0));
-            }
-            cursor.dispose();
-            database.beginTransaction();
-            SQLitePreparedStatement state = database.executeFast("UPDATE dialogs SET last_mid = (SELECT mid FROM messages WHERE uid = ? AND date = (SELECT MAX(date) FROM messages WHERE uid = ? )) WHERE did = ?");
-            for (long did : dialogsToUpdate) {
-                state.requery();
-                state.bindLong(1, did);
-                state.bindLong(2, did);
-                state.bindLong(3, did);
-                state.step();
-            }
-            state.dispose();
-            database.commitTransaction();
-
-            ids = TextUtils.join(",", dialogsToUpdate);
-
-            TLRPC.messages_Dialogs dialogs = new TLRPC.messages_Dialogs();
-            ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
-            ArrayList<Integer> usersToLoad = new ArrayList<>();
-            ArrayList<Integer> chatsToLoad = new ArrayList<>();
-            ArrayList<Integer> encryptedToLoad = new ArrayList<>();
-            cursor = database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid WHERE d.did IN(%s)", ids));
-            while (cursor.next()) {
-                TLRPC.TL_dialog dialog = new TLRPC.TL_dialog();
-                dialog.id = cursor.longValue(0);
-                dialog.top_message = cursor.intValue(1);
-                dialog.unread_count = cursor.intValue(2);
-                dialog.last_message_date = cursor.intValue(3);
-                dialogs.dialogs.add(dialog);
-
-                ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(4));
-                if (data != null && cursor.byteBufferValue(4, data.buffer) != 0) {
-                    TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                    MessageObject.setUnreadFlags(message, cursor.intValue(5));
-                    message.id = cursor.intValue(6);
-                    message.send_state = cursor.intValue(7);
-                    int date = cursor.intValue(8);
-                    if (date != 0) {
-                        dialog.last_message_date = date;
-                    }
-                    dialogs.messages.add(message);
-
-                    if (!usersToLoad.contains(message.from_id)) {
-                        usersToLoad.add(message.from_id);
-                    }
-                    if (message.action != null && message.action.user_id != 0) {
-                        if (!usersToLoad.contains(message.action.user_id)) {
-                            usersToLoad.add(message.action.user_id);
-                        }
-                    }
-                    if (message.fwd_from_id != 0) {
-                        if (!usersToLoad.contains(message.fwd_from_id)) {
-                            usersToLoad.add(message.fwd_from_id);
-                        }
-                    }
-                }
-                buffersStorage.reuseFreeBuffer(data);
-
-                int lower_id = (int)dialog.id;
-                int high_id = (int)(dialog.id >> 32);
-                if (lower_id != 0) {
-                    if (high_id == 1) {
-                        if (!chatsToLoad.contains(lower_id)) {
-                            chatsToLoad.add(lower_id);
-                        }
-                    } else {
-                        if (lower_id > 0) {
-                            if (!usersToLoad.contains(lower_id)) {
-                                usersToLoad.add(lower_id);
-                            }
-                        } else {
-                            if (!chatsToLoad.contains(-lower_id)) {
-                                chatsToLoad.add(-lower_id);
-                            }
-                        }
-                    }
-                } else {
-                    if (!encryptedToLoad.contains(high_id)) {
-                        encryptedToLoad.add(high_id);
-                    }
-                }
-            }
-            cursor.dispose();
-
-            if (!encryptedToLoad.isEmpty()) {
-                getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
-            }
-
-            if (!chatsToLoad.isEmpty()) {
-                getChatsInternal(TextUtils.join(",", chatsToLoad), dialogs.chats);
-            }
-
-            if (!usersToLoad.isEmpty()) {
-                getUsersInternal(TextUtils.join(",", usersToLoad), dialogs.users);
-            }
-
-            if (!dialogs.dialogs.isEmpty() || !encryptedChats.isEmpty()) {
-                MessagesController.getInstance().processDialogsUpdate(dialogs, encryptedChats);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void updateDialogsWithDeletedMessages(final ArrayList<Integer> messages, boolean useQueue) {
-        if (messages.isEmpty()) {
-            return;
-        }
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    updateDialogsWithDeletedMessagesInternal(messages);
-                }
-            });
-        } else {
-            updateDialogsWithDeletedMessagesInternal(messages);
-        }
-    }
-
-    public void markMessagesAsDeleted(final ArrayList<Integer> messages, boolean useQueue) {
-        if (messages.isEmpty()) {
-            return;
-        }
-        if (useQueue) {
-            storageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    markMessagesAsDeletedInternal(messages);
-                }
-            });
-        } else {
-            markMessagesAsDeletedInternal(messages);
-        }
-    }
-
-    private void fixUnsupportedMedia(TLRPC.Message message) {
-        if (message == null) {
-            return;
-        }
-        boolean ok = false;
-        if (message.media instanceof TLRPC.TL_messageMediaUnsupported_old) {
-            if (message.media.bytes.length == 0) {
-                message.media.bytes = new byte[1];
-                message.media.bytes[0] = TLRPC.LAYER;
-            }
-        } else if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
-            message.media = new TLRPC.TL_messageMediaUnsupported_old();
-            message.media.bytes = new byte[1];
-            message.media.bytes[0] = TLRPC.LAYER;
-        }
-    }
-
-    public void putMessages(final TLRPC.messages_Messages messages, final long dialog_id) {
-        if (messages.messages.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.beginTransaction();
-                    if (!messages.messages.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
-                        SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
-                        for (TLRPC.Message message : messages.messages) {
-                            fixUnsupportedMedia(message);
-                            state.requery();
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
-                            message.serializeToStream(data);
-                            state.bindInteger(1, message.id);
-                            state.bindLong(2, dialog_id);
-                            state.bindInteger(3, MessageObject.getUnreadFlags(message));
-                            state.bindInteger(4, message.send_state);
-                            state.bindInteger(5, message.date);
-                            state.bindByteBuffer(6, data.buffer);
-                            state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
-                            state.bindInteger(8, 0);
-                            state.bindInteger(9, 0);
-                            state.step();
-
-                            if (SharedMediaQuery.canAddMessageToMedia(message)) {
-                                state2.requery();
-                                state2.bindInteger(1, message.id);
-                                state2.bindLong(2, dialog_id);
-                                state2.bindInteger(3, message.date);
-                                state2.bindInteger(4, SharedMediaQuery.getMediaType(message));
-                                state2.bindByteBuffer(5, data.buffer);
-                                state2.step();
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        state.dispose();
-                        state2.dispose();
-                    }
-                    putUsersInternal(messages.users);
-                    putChatsInternal(messages.chats);
-
-                    database.commitTransaction();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void getDialogs(final int offset, final int serverOffset, final int count) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                TLRPC.messages_Dialogs dialogs = new TLRPC.messages_Dialogs();
-                ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
-                try {
-                    ArrayList<Integer> usersToLoad = new ArrayList<>();
-                    ArrayList<Integer> chatsToLoad = new ArrayList<>();
-                    ArrayList<Integer> encryptedToLoad = new ArrayList<>();
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did ORDER BY d.date DESC LIMIT %d,%d", offset, count));
-                    while (cursor.next()) {
-                        TLRPC.TL_dialog dialog = new TLRPC.TL_dialog();
-                        dialog.id = cursor.longValue(0);
-                        dialog.top_message = cursor.intValue(1);
-                        dialog.unread_count = cursor.intValue(2);
-                        dialog.last_message_date = cursor.intValue(3);
-                        long flags = cursor.longValue(8);
-                        int low_flags = (int)flags;
-                        dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
-                        if ((low_flags & 1) != 0) {
-                            dialog.notify_settings.mute_until = (int)(flags >> 32);
-                            if (dialog.notify_settings.mute_until == 0) {
-                                dialog.notify_settings.mute_until = Integer.MAX_VALUE;
-                            }
-                        }
-                        dialogs.dialogs.add(dialog);
-
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(4));
-                        if (data != null && cursor.byteBufferValue(4, data.buffer) != 0) {
-                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                            if (message != null) {
-                                MessageObject.setUnreadFlags(message, cursor.intValue(5));
-                                message.id = cursor.intValue(6);
-                                int date = cursor.intValue(9);
-                                if (date != 0) {
-                                    dialog.last_message_date = date;
-                                }
-                                message.send_state = cursor.intValue(7);
-                                dialogs.messages.add(message);
-
-                                if (!usersToLoad.contains(message.from_id)) {
-                                    usersToLoad.add(message.from_id);
-                                }
-                                if (message.action != null && message.action.user_id != 0) {
-                                    if (!usersToLoad.contains(message.action.user_id)) {
-                                        usersToLoad.add(message.action.user_id);
-                                    }
-                                }
-                                if (message.fwd_from_id != 0) {
-                                    if (!usersToLoad.contains(message.fwd_from_id)) {
-                                        usersToLoad.add(message.fwd_from_id);
-                                    }
-                                }
-                            }
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-
-                        int lower_id = (int)dialog.id;
-                        int high_id = (int)(dialog.id >> 32);
-                        if (lower_id != 0) {
-                            if (high_id == 1) {
-                                if (!chatsToLoad.contains(lower_id)) {
-                                    chatsToLoad.add(lower_id);
-                                }
-                            } else {
-                                if (lower_id > 0) {
-                                    if (!usersToLoad.contains(lower_id)) {
-                                        usersToLoad.add(lower_id);
-                                    }
-                                } else {
-                                    if (!chatsToLoad.contains(-lower_id)) {
-                                        chatsToLoad.add(-lower_id);
-                                    }
-                                }
-                            }
-                        } else {
-                            if (!encryptedToLoad.contains(high_id)) {
-                                encryptedToLoad.add(high_id);
-                            }
-                        }
-                    }
-                    cursor.dispose();
-
-                    if (!encryptedToLoad.isEmpty()) {
-                        getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
-                    }
-
-                    if (!chatsToLoad.isEmpty()) {
-                        getChatsInternal(TextUtils.join(",", chatsToLoad), dialogs.chats);
-                    }
-
-                    if (!usersToLoad.isEmpty()) {
-                        getUsersInternal(TextUtils.join(",", usersToLoad), dialogs.users);
-                    }
-                    MessagesController.getInstance().processLoadedDialogs(dialogs, encryptedChats, offset, serverOffset, count, true, false);
-                } catch (Exception e) {
-                    dialogs.dialogs.clear();
-                    dialogs.users.clear();
-                    dialogs.chats.clear();
-                    encryptedChats.clear();
-                    FileLog.e("tmessages", e);
-                    /*try {
-                        database.executeFast("DELETE FROM dialogs WHERE 1").stepThis().dispose();
-                    } catch (Exception e2) {
-                        FileLog.e("tmessages", e);
-                    }*/
-                    MessagesController.getInstance().processLoadedDialogs(dialogs, encryptedChats, 0, 0, 100, true, true);
-                }
-            }
-        });
-    }
-
-    public void putDialogs(final TLRPC.messages_Dialogs dialogs) {
-        if (dialogs.dialogs.isEmpty()) {
-            return;
-        }
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    database.beginTransaction();
-                    final HashMap<Integer, TLRPC.Message> new_dialogMessage = new HashMap<>();
-                    for (TLRPC.Message message : dialogs.messages) {
-                        new_dialogMessage.put(message.id, message);
-                    }
-
-                    if (!dialogs.dialogs.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
-                        SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO dialogs(did, date, unread_count, last_mid, inbox_max, outbox_max) VALUES(?, ?, ?, ?, ?, ?)");
-                        SQLitePreparedStatement state3 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
-                        SQLitePreparedStatement state4 = database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
-
-                        for (TLRPC.TL_dialog dialog : dialogs.dialogs) {
-                            state.requery();
-                            state2.requery();
-                            state4.requery();
-                            int uid = dialog.peer.user_id;
-                            if (uid == 0) {
-                                uid = -dialog.peer.chat_id;
-                            }
-                            TLRPC.Message message = new_dialogMessage.get(dialog.top_message);
-                            fixUnsupportedMedia(message);
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
-                            message.serializeToStream(data);
-
-                            state.bindInteger(1, message.id);
-                            state.bindInteger(2, uid);
-                            state.bindInteger(3, MessageObject.getUnreadFlags(message));
-                            state.bindInteger(4, message.send_state);
-                            state.bindInteger(5, message.date);
-                            state.bindByteBuffer(6, data.buffer);
-                            state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
-                            state.bindInteger(8, 0);
-                            state.bindInteger(9, 0);
-                            state.step();
-
-                            state2.bindLong(1, uid);
-                            state2.bindInteger(2, message.date);
-                            state2.bindInteger(3, dialog.unread_count);
-                            state2.bindInteger(4, dialog.top_message);
-                            state2.bindInteger(5, dialog.read_inbox_max_id);
-                            state2.bindInteger(6, 0);
-                            state2.step();
-
-                            state4.bindLong(1, uid);
-                            state4.bindInteger(2, dialog.notify_settings.mute_until != 0 ? 1 : 0);
-                            state4.step();
-
-                            if (SharedMediaQuery.canAddMessageToMedia(message)) {
-                                state3.requery();
-                                state3.bindLong(1, message.id);
-                                state3.bindInteger(2, uid);
-                                state3.bindInteger(3, message.date);
-                                state3.bindInteger(4, SharedMediaQuery.getMediaType(message));
-                                state3.bindByteBuffer(5, data.buffer);
-                                state3.step();
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
-                        }
-                        state.dispose();
-                        state2.dispose();
-                        state3.dispose();
-                        state4.dispose();
-                    }
-
-                    putUsersInternal(dialogs.users);
-                    putChatsInternal(dialogs.chats);
-
-                    database.commitTransaction();
-
-                    loadUnreadMessages();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public TLRPC.User getUserSync(final int user_id) {
-        final Semaphore semaphore = new Semaphore(0);
-        final TLRPC.User[] user = new TLRPC.User[1];
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                user[0] = getUser(user_id);
-                semaphore.release();
-            }
-        });
-        try {
-            semaphore.acquire();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return user[0];
-    }
-
-    public TLRPC.Chat getChatSync(final int user_id) {
-        final Semaphore semaphore = new Semaphore(0);
-        final TLRPC.Chat[] chat = new TLRPC.Chat[1];
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                chat[0] = getChat(user_id);
-                semaphore.release();
-            }
-        });
-        try {
-            semaphore.acquire();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return chat[0];
-    }
-
-    public TLRPC.User getUser(final int user_id) {
-        TLRPC.User user = null;
-        try {
-            ArrayList<TLRPC.User> users = new ArrayList<>();
-            getUsersInternal("" + user_id, users);
-            if (!users.isEmpty()) {
-                user = users.get(0);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return user;
-    }
-
-    public ArrayList<TLRPC.User> getUsers(final ArrayList<Integer> uids) {
-        ArrayList<TLRPC.User> users = new ArrayList<>();
-        try {
-            getUsersInternal(TextUtils.join(",", uids), users);
-        } catch (Exception e) {
-            users.clear();
-            FileLog.e("tmessages", e);
-        }
-        return users;
-    }
-
-    public TLRPC.Chat getChat(final int chat_id) {
-        TLRPC.Chat chat = null;
-        try {
-            ArrayList<TLRPC.Chat> chats = new ArrayList<>();
-            getChatsInternal("" + chat_id, chats);
-            if (!chats.isEmpty()) {
-                chat = chats.get(0);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return chat;
     }
 
-    public TLRPC.EncryptedChat getEncryptedChat(final int chat_id) {
-        TLRPC.EncryptedChat chat = null;
-        try {
-            ArrayList<TLRPC.EncryptedChat> encryptedChats = new ArrayList<>();
-            getEncryptedChatsInternal("" + chat_id, encryptedChats, null);
-            if (!encryptedChats.isEmpty()) {
-                chat = encryptedChats.get(0);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return chat;
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 9a6867a13..55a150dba 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -37,14 +37,11 @@
     public static final int messageReceivedByServer = totalEvents++;
     public static final int messageSendError = totalEvents++;
     public static final int contactsDidLoaded = totalEvents++;
-    public static final int chatDidCreated = totalEvents++;
-    public static final int chatDidFailCreate = totalEvents++;
     public static final int chatInfoDidLoaded = totalEvents++;
     public static final int mediaDidLoaded = totalEvents++;
     public static final int mediaCountDidLoaded = totalEvents++;
     public static final int encryptedChatUpdated = totalEvents++;
     public static final int messagesReadEncrypted = totalEvents++;
-    public static final int encryptedChatCreated = totalEvents++;
     public static final int userPhotosLoaded = totalEvents++;
     public static final int removeAllMessagesFromDialog = totalEvents++;
     public static final int notificationsSettingsUpdated = totalEvents++;
@@ -52,7 +49,6 @@
     public static final int blockedUsersDidLoaded = totalEvents++;
     public static final int openedChatChanged = totalEvents++;
     public static final int hideEmojiKeyboard = totalEvents++;
-    public static final int stopEncodingService = totalEvents++;
     public static final int didCreatedNewDeleteTask = totalEvents++;
     public static final int mainUserInfoChanged = totalEvents++;
     public static final int privacyRulesUpdated = totalEvents++;
@@ -60,7 +56,6 @@
     public static final int recentImagesDidLoaded = totalEvents++;
     public static final int replaceMessagesObjects = totalEvents++;
     public static final int didSetPasscode = totalEvents++;
-    public static final int didSetTwoStepPassword = totalEvents++;
     public static final int screenStateChanged = totalEvents++;
     public static final int didLoadedReplyMessages = totalEvents++;
     public static final int newSessionReceived = totalEvents++;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/query/ReplyMessageQuery.java b/TMessagesProj/src/main/java/org/telegram/android/query/ReplyMessageQuery.java
deleted file mode 100644
index bb01bdd5a..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/query/ReplyMessageQuery.java
+++ /dev/null
@@ -1,184 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.android.query;
-
-import android.text.TextUtils;
-
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Locale;
-
-public class ReplyMessageQuery {
-
-    public static void loadReplyMessagesForMessages(final ArrayList<MessageObject> messages, final long dialog_id) {
-        final ArrayList<Integer> replyMessages = new ArrayList<>();
-        final HashMap<Integer, ArrayList<MessageObject>> replyMessageOwners = new HashMap<>();
-        for (MessageObject messageObject : messages) {
-            if (messageObject.getId() > 0 && messageObject.isReply() && messageObject.replyMessageObject == null) {
-                Integer id = messageObject.messageOwner.reply_to_msg_id;
-                ArrayList<MessageObject> messageObjects = replyMessageOwners.get(id);
-                if (messageObjects == null) {
-                    messageObjects = new ArrayList<>();
-                    replyMessageOwners.put(id, messageObjects);
-                }
-                messageObjects.add(messageObject);
-                if (!replyMessages.contains(id)) {
-                    replyMessages.add(id);
-                }
-            }
-        }
-        if (replyMessages.isEmpty()) {
-            return;
-        }
-
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    final ArrayList<TLRPC.Message> result = new ArrayList<>();
-                    final ArrayList<TLRPC.User> users = new ArrayList<>();
-                    ArrayList<Integer> loadedUsers = new ArrayList<>();
-                    ArrayList<Integer> fromUser = new ArrayList<>();
-
-                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, mid, date FROM messages WHERE mid IN(%s)", TextUtils.join(",", replyMessages)));
-                    while (cursor.next()) {
-                        ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                            message.id = cursor.intValue(1);
-                            message.date = cursor.intValue(2);
-                            message.dialog_id = dialog_id;
-                            fromUser.add(message.from_id);
-                            if (message.action != null && message.action.user_id != 0) {
-                                fromUser.add(message.action.user_id);
-                            }
-                            if (message.media != null && message.media.user_id != 0) {
-                                fromUser.add(message.media.user_id);
-                            }
-                            if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0) {
-                                fromUser.add(message.media.audio.user_id);
-                            }
-                            if (message.fwd_from_id != 0) {
-                                fromUser.add(message.fwd_from_id);
-                            }
-                            result.add(message);
-                            replyMessages.remove((Integer) message.id);
-                        }
-                        MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-
-                    StringBuilder usersToLoad = new StringBuilder();
-                    for (int uid : fromUser) {
-                        if (!loadedUsers.contains(uid)) {
-                            if (usersToLoad.length() != 0) {
-                                usersToLoad.append(",");
-                            }
-                            usersToLoad.append(uid);
-                            loadedUsers.add(uid);
-                        }
-                    }
-                    if (usersToLoad.length() != 0) {
-                        MessagesStorage.getInstance().getUsersInternal(usersToLoad.toString(), users);
-                    }
-                    broadcastReplyMessages(result, replyMessageOwners, users, dialog_id);
-
-                    if (!replyMessages.isEmpty()) {
-                        TLRPC.TL_messages_getMessages req = new TLRPC.TL_messages_getMessages();
-                        req.id = replyMessages;
-                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                            @Override
-                            public void run(TLObject response, TLRPC.TL_error error) {
-                                if (error == null) {
-                                    TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
-                                    ImageLoader.saveMessagesThumbs(messagesRes.messages);
-                                    broadcastReplyMessages(messagesRes.messages, replyMessageOwners, messagesRes.users, dialog_id);
-                                    MessagesStorage.getInstance().putUsersAndChats(messagesRes.users, null, true, true);
-                                    saveReplyMessages(replyMessageOwners, messagesRes.messages);
-                                }
-                            }
-                        });
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private static void saveReplyMessages(final HashMap<Integer, ArrayList<MessageObject>> replyMessageOwners, final ArrayList<TLRPC.Message> result) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    MessagesStorage.getInstance().getDatabase().beginTransaction();
-                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("UPDATE messages SET replydata = ? WHERE mid = ?");
-                    for (TLRPC.Message message : result) {
-                        ArrayList<MessageObject> messageObjects = replyMessageOwners.get(message.id);
-                        if (messageObjects != null) {
-                            ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(message.getObjectSize());
-                            message.serializeToStream(data);
-                            for (MessageObject messageObject : messageObjects) {
-                                state.requery();
-                                state.bindByteBuffer(1, data.buffer);
-                                state.bindInteger(2, messageObject.getId());
-                                state.step();
-                            }
-                            MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                        }
-                    }
-                    state.dispose();
-                    MessagesStorage.getInstance().getDatabase().commitTransaction();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private static void broadcastReplyMessages(final ArrayList<TLRPC.Message> result, final HashMap<Integer, ArrayList<MessageObject>> replyMessageOwners, ArrayList<TLRPC.User> users, final long dialog_id) {
-        final HashMap<Integer, TLRPC.User> usersHashMap = new HashMap<>();
-        for (TLRPC.User user : users) {
-            usersHashMap.put(user.id, user);
-        }
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                boolean changed = false;
-                for (TLRPC.Message message : result) {
-                    ArrayList<MessageObject> arrayList = replyMessageOwners.get(message.id);
-                    if (arrayList != null) {
-                        MessageObject messageObject = new MessageObject(message, usersHashMap, false);
-                        for (MessageObject m : arrayList) {
-                            m.replyMessageObject = messageObject;
-                        }
-                        changed = true;
-                    }
-                }
-                if (changed) {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didLoadedReplyMessages, dialog_id);
-                }
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java b/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
deleted file mode 100644
index 345b0e49d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
+++ /dev/null
@@ -1,397 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android.query;
-
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Locale;
-
-public class SharedMediaQuery {
-
-    public final static int MEDIA_PHOTOVIDEO = 0;
-    public final static int MEDIA_FILE = 1;
-    public final static int MEDIA_AUDIO = 2;
-
-    public static void loadMedia(final long uid, final int offset, final int count, final int max_id, final int type, final boolean fromCache, final int classGuid) {
-        int lower_part = (int)uid;
-        if (fromCache || lower_part == 0) {
-            loadMediaDatabase(uid, offset, count, max_id, type, classGuid);
-        } else {
-            TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
-            req.offset = offset;
-            req.limit = count;
-            req.max_id = max_id;
-            if (type == MEDIA_PHOTOVIDEO) {
-                req.filter = new TLRPC.TL_inputMessagesFilterPhotoVideo();
-            } else if (type == MEDIA_FILE) {
-                req.filter = new TLRPC.TL_inputMessagesFilterDocument();
-            } else if (type == MEDIA_AUDIO) {
-                req.filter = new TLRPC.TL_inputMessagesFilterAudio();
-            }
-            req.q = "";
-            if (uid < 0) {
-                req.peer = new TLRPC.TL_inputPeerChat();
-                req.peer.chat_id = -lower_part;
-            } else {
-                TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                    req.peer = new TLRPC.TL_inputPeerForeign();
-                    req.peer.access_hash = user.access_hash;
-                } else {
-                    req.peer = new TLRPC.TL_inputPeerContact();
-                }
-                req.peer.user_id = lower_part;
-            }
-            long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        final TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
-                        processLoadedMedia(res, uid, offset, count, max_id, type, false, classGuid);
-                    }
-                }
-            });
-            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-        }
-    }
-
-    public static void getMediaCount(final long uid, final int type, final int classGuid, boolean fromCache) {
-        int lower_part = (int)uid;
-        if (fromCache || lower_part == 0) {
-            getMediaCountDatabase(uid, type, classGuid);
-        } else {
-            TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
-            req.offset = 0;
-            req.limit = 1;
-            req.max_id = 0;
-            if (type == MEDIA_PHOTOVIDEO) {
-                req.filter = new TLRPC.TL_inputMessagesFilterPhotoVideo();
-            } else if (type == MEDIA_FILE) {
-                req.filter = new TLRPC.TL_inputMessagesFilterDocument();
-            } else if (type == MEDIA_AUDIO) {
-                req.filter = new TLRPC.TL_inputMessagesFilterAudio();
-            }
-            req.q = "";
-            if (uid < 0) {
-                req.peer = new TLRPC.TL_inputPeerChat();
-                req.peer.chat_id = -lower_part;
-            } else {
-                TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                    req.peer = new TLRPC.TL_inputPeerForeign();
-                    req.peer.access_hash = user.access_hash;
-                } else {
-                    req.peer = new TLRPC.TL_inputPeerContact();
-                }
-                req.peer.user_id = lower_part;
-            }
-            long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (error == null) {
-                        final TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
-                        MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
-
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                MessagesController.getInstance().putUsers(res.users, false);
-                                MessagesController.getInstance().putChats(res.chats, false);
-                            }
-                        });
-
-                        if (res instanceof TLRPC.TL_messages_messagesSlice) {
-                            processLoadedMediaCount(res.count, uid, type, classGuid, false);
-                        } else {
-                            processLoadedMediaCount(res.messages.size(), uid, type, classGuid, false);
-                        }
-                    }
-                }
-            });
-            ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
-        }
-    }
-
-    public static int getMediaType(TLRPC.Message message) {
-        if (message == null) {
-            return -1;
-        }
-        if (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo) {
-            return SharedMediaQuery.MEDIA_PHOTOVIDEO;
-        } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-            if (MessageObject.isStickerMessage(message)) {
-                return -1;
-            } else {
-                return SharedMediaQuery.MEDIA_FILE;
-            }
-        } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-            return SharedMediaQuery.MEDIA_AUDIO;
-        }
-        return -1;
-    }
-
-    public static boolean canAddMessageToMedia(TLRPC.Message message) {
-        if (message instanceof TLRPC.TL_message_secret && message.media instanceof TLRPC.TL_messageMediaPhoto && message.ttl != 0 && message.ttl <= 60) {
-            return false;
-        } else if (message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo || message.media instanceof TLRPC.TL_messageMediaDocument || message.media instanceof TLRPC.TL_messageMediaAudio) {
-            return true;
-        }
-        return false;
-    }
-
-    private static void processLoadedMedia(final TLRPC.messages_Messages res, final long uid, int offset, int count, int max_id, final int type, final boolean fromCache, final int classGuid) {
-        int lower_part = (int)uid;
-        if (fromCache && res.messages.isEmpty() && lower_part != 0) {
-            loadMedia(uid, offset, count, max_id, type, false, classGuid);
-        } else {
-            if (!fromCache) {
-                ImageLoader.saveMessagesThumbs(res.messages);
-                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
-                putMediaDatabase(uid, type, res.messages);
-            }
-
-            final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
-            for (TLRPC.User u : res.users) {
-                usersLocal.put(u.id, u);
-            }
-            final ArrayList<MessageObject> objects = new ArrayList<>();
-            for (TLRPC.Message message : res.messages) {
-                objects.add(new MessageObject(message, usersLocal, true));
-            }
-
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    int totalCount;
-                    if (res instanceof TLRPC.TL_messages_messagesSlice) {
-                        totalCount = res.count;
-                    } else {
-                        totalCount = res.messages.size();
-                    }
-                    MessagesController.getInstance().putUsers(res.users, fromCache);
-                    MessagesController.getInstance().putChats(res.chats, fromCache);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.mediaDidLoaded, uid, totalCount, objects, fromCache, classGuid, type);
-                }
-            });
-        }
-    }
-
-    private static void processLoadedMediaCount(final int count, final long uid, final int type, final int classGuid, final boolean fromCache) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                int lower_part = (int)uid;
-                if (fromCache && count == -1 && lower_part != 0) {
-                    getMediaCount(uid, type, classGuid, false);
-                } else {
-                    if (!fromCache) {
-                        putMediaCountDatabase(uid, type, count);
-                    }
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.mediaCountDidLoaded, uid, (fromCache && count == -1 ? 0 : count), fromCache, type);
-                }
-            }
-        });
-    }
-
-    private static void putMediaCountDatabase(final long uid, final int type, final int count) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state2 = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?)");
-                    state2.requery();
-                    state2.bindLong(1, uid);
-                    state2.bindInteger(2, type);
-                    state2.bindInteger(3, count);
-                    state2.step();
-                    state2.dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private static void getMediaCountDatabase(final long uid, final int type, final int classGuid) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    int count = -1;
-                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT count FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", uid, type));
-                    if (cursor.next()) {
-                        count = cursor.intValue(0);
-                    }
-                    cursor.dispose();
-                    int lower_part = (int)uid;
-                    if (count == -1 && lower_part == 0) {
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM media_v2 WHERE uid = %d AND type = %d LIMIT 1", uid, type));
-                        if (cursor.next()) {
-                            count = cursor.intValue(0);
-                        }
-                        cursor.dispose();
-
-                        /*cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, send_state, date FROM messages WHERE uid = %d ORDER BY mid ASC LIMIT %d", uid, 1000));
-                        ArrayList<TLRPC.Message> photos = new ArrayList<>();
-                        ArrayList<TLRPC.Message> docs = new ArrayList<>();
-                        while (cursor.next()) {
-                            ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(1));
-                            if (data != null && cursor.byteBufferValue(1, data.buffer) != 0) {
-                                TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
-                                MessageObject.setIsUnread(message, cursor.intValue(0) != 1);
-                                message.date = cursor.intValue(2);
-                                message.send_state = cursor.intValue(1);
-                                message.dialog_id = uid;
-                                if (message.ttl > 60 && message.media instanceof TLRPC.TL_messageMediaPhoto || message.media instanceof TLRPC.TL_messageMediaVideo) {
-                                    photos.add(message);
-                                } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                                    docs.add(message);
-                                }
-                            }
-                            MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                        }
-                        cursor.dispose();
-                        if (!photos.isEmpty() || !docs.isEmpty()) {
-                            MessagesStorage.getInstance().getDatabase().beginTransaction();
-                            if (!photos.isEmpty()) {
-                                putMediaDatabaseInternal(uid, MEDIA_PHOTOVIDEO, photos);
-                            }
-                            if (docs.isEmpty()) {
-                                putMediaDatabaseInternal(uid, MEDIA_FILE, docs);
-                            }
-                            MessagesStorage.getInstance().getDatabase().commitTransaction();
-                        }*/
-
-                        if (count != -1) {
-                            putMediaCountDatabase(uid, type, count);
-                        }
-                    }
-                    processLoadedMediaCount(count, uid, type, classGuid, true);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    private static void loadMediaDatabase(final long uid, final int offset, final int count, final int max_id, final int type, final int classGuid) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                TLRPC.TL_messages_messages res = new TLRPC.TL_messages_messages();
-                try {
-                    ArrayList<Integer> loadedUsers = new ArrayList<>();
-                    ArrayList<Integer> fromUser = new ArrayList<>();
-
-                    SQLiteCursor cursor;
-
-                    if ((int)uid != 0) {
-                        if (max_id != 0) {
-                            cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, mid FROM media_v2 WHERE uid = %d AND mid < %d AND type = %d ORDER BY date DESC, mid DESC LIMIT %d", uid, max_id, type, count));
-                        } else {
-                            cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, mid FROM media_v2 WHERE uid = %d AND type = %d ORDER BY date DESC, mid DESC LIMIT %d,%d", uid, type, offset, count));
-                        }
-                    } else {
-                        if (max_id != 0) {
-                            cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT m.data, m.mid, r.random_id FROM media_v2 as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND type = %d ORDER BY m.mid ASC LIMIT %d", uid, max_id, type, count));
-                        } else {
-                            cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT m.data, m.mid, r.random_id FROM media_v2 as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND type = %d ORDER BY m.mid ASC LIMIT %d,%d", uid, type, offset, count));
-                        }
-                    }
-
-                    while (cursor.next()) {
-                        ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                            TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                            message.id = cursor.intValue(1);
-                            message.dialog_id = uid;
-                            if ((int)uid == 0) {
-                                message.random_id = cursor.longValue(2);
-                            }
-                            res.messages.add(message);
-                            fromUser.add(message.from_id);
-                        }
-                        MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                    }
-                    cursor.dispose();
-
-                    StringBuilder usersToLoad = new StringBuilder();
-                    for (int uid : fromUser) {
-                        if (!loadedUsers.contains(uid)) {
-                            if (usersToLoad.length() != 0) {
-                                usersToLoad.append(",");
-                            }
-                            usersToLoad.append(uid);
-                            loadedUsers.add(uid);
-                        }
-                    }
-                    if (usersToLoad.length() != 0) {
-                        MessagesStorage.getInstance().getUsersInternal(usersToLoad.toString(), res.users);
-                    }
-                } catch (Exception e) {
-                    res.messages.clear();
-                    res.chats.clear();
-                    res.users.clear();
-                    FileLog.e("tmessages", e);
-                } finally {
-                    processLoadedMedia(res, uid, offset, count, max_id, type, true, classGuid);
-                }
-            }
-        });
-    }
-
-    private static void putMediaDatabaseInternal(final long uid, final int type, final ArrayList<TLRPC.Message> messages) {
-        try {
-            MessagesStorage.getInstance().getDatabase().beginTransaction();
-            SQLitePreparedStatement state2 = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
-            for (TLRPC.Message message : messages) {
-                if (canAddMessageToMedia(message)) {
-                    state2.requery();
-                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(message.getObjectSize());
-                    message.serializeToStream(data);
-                    state2.bindInteger(1, message.id);
-                    state2.bindLong(2, uid);
-                    state2.bindInteger(3, message.date);
-                    state2.bindInteger(4, type);
-                    state2.bindByteBuffer(5, data.buffer);
-                    state2.step();
-                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
-                }
-            }
-            state2.dispose();
-            MessagesStorage.getInstance().getDatabase().commitTransaction();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private static void putMediaDatabase(final long uid, final int type, final ArrayList<TLRPC.Message> messages) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                putMediaDatabaseInternal(uid, type, messages);
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/InputSurface.java b/TMessagesProj/src/main/java/org/telegram/android/video/InputSurface.java
deleted file mode 100644
index 914e8be6d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/video/InputSurface.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/*
- * Copyright (C) 2013 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.telegram.android.video;
-
-import android.annotation.TargetApi;
-import android.opengl.EGL14;
-import android.opengl.EGLExt;
-import android.opengl.EGLConfig;
-import android.opengl.EGLContext;
-import android.opengl.EGLDisplay;
-import android.opengl.EGLSurface;
-import android.view.Surface;
-
-@TargetApi(17)
-public class InputSurface {
-    private static final boolean VERBOSE = false;
-    private static final int EGL_RECORDABLE_ANDROID = 0x3142;
-    private static final int EGL_OPENGL_ES2_BIT = 4;
-    private EGLDisplay mEGLDisplay;
-    private EGLContext mEGLContext;
-    private EGLSurface mEGLSurface;
-    private Surface mSurface;
-
-    public InputSurface(Surface surface) {
-        if (surface == null) {
-            throw new NullPointerException();
-        }
-        mSurface = surface;
-        eglSetup();
-    }
-
-    private void eglSetup() {
-        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);
-        if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {
-            throw new RuntimeException("unable to get EGL14 display");
-        }
-        int[] version = new int[2];
-        if (!EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1)) {
-            mEGLDisplay = null;
-            throw new RuntimeException("unable to initialize EGL14");
-        }
-
-        int[] attribList = {
-                EGL14.EGL_RED_SIZE, 8,
-                EGL14.EGL_GREEN_SIZE, 8,
-                EGL14.EGL_BLUE_SIZE, 8,
-                EGL14.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
-                EGL_RECORDABLE_ANDROID, 1,
-                EGL14.EGL_NONE
-        };
-        EGLConfig[] configs = new EGLConfig[1];
-        int[] numConfigs = new int[1];
-        if (!EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0, configs.length,
-                numConfigs, 0)) {
-            throw new RuntimeException("unable to find RGB888+recordable ES2 EGL config");
-        }
-
-        int[] attrib_list = {
-                EGL14.EGL_CONTEXT_CLIENT_VERSION, 2,
-                EGL14.EGL_NONE
-        };
-
-        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, configs[0], EGL14.EGL_NO_CONTEXT, attrib_list, 0);
-        checkEglError("eglCreateContext");
-        if (mEGLContext == null) {
-            throw new RuntimeException("null context");
-        }
-
-        int[] surfaceAttribs = {
-                EGL14.EGL_NONE
-        };
-        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, configs[0], mSurface,
-                surfaceAttribs, 0);
-        checkEglError("eglCreateWindowSurface");
-        if (mEGLSurface == null) {
-            throw new RuntimeException("surface was null");
-        }
-    }
-
-    public void release() {
-        if (EGL14.eglGetCurrentContext().equals(mEGLContext)) {
-            EGL14.eglMakeCurrent(mEGLDisplay, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_CONTEXT);
-        }
-        EGL14.eglDestroySurface(mEGLDisplay, mEGLSurface);
-        EGL14.eglDestroyContext(mEGLDisplay, mEGLContext);
-        mSurface.release();
-        mEGLDisplay = null;
-        mEGLContext = null;
-        mEGLSurface = null;
-        mSurface = null;
-    }
-
-    public void makeCurrent() {
-        if (!EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext)) {
-            throw new RuntimeException("eglMakeCurrent failed");
-        }
-    }
-
-    public boolean swapBuffers() {
-        return EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);
-    }
-
-    public Surface getSurface() {
-        return mSurface;
-    }
-
-    public void setPresentationTime(long nsecs) {
-        EGLExt.eglPresentationTimeANDROID(mEGLDisplay, mEGLSurface, nsecs);
-    }
-
-    private void checkEglError(String msg) {
-        boolean failed = false;
-        int error;
-        while ((error = EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {
-            failed = true;
-        }
-        if (failed) {
-            throw new RuntimeException("EGL error encountered (see log)");
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java b/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
deleted file mode 100644
index 917d8c53d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
+++ /dev/null
@@ -1,445 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android.video;
-
-import android.annotation.TargetApi;
-import android.media.MediaCodec;
-import android.media.MediaFormat;
-
-import com.coremedia.iso.BoxParser;
-import com.coremedia.iso.IsoFile;
-import com.coremedia.iso.IsoTypeWriter;
-import com.coremedia.iso.boxes.Box;
-import com.coremedia.iso.boxes.Container;
-import com.coremedia.iso.boxes.DataEntryUrlBox;
-import com.coremedia.iso.boxes.DataInformationBox;
-import com.coremedia.iso.boxes.DataReferenceBox;
-import com.coremedia.iso.boxes.FileTypeBox;
-import com.coremedia.iso.boxes.HandlerBox;
-import com.coremedia.iso.boxes.MediaBox;
-import com.coremedia.iso.boxes.MediaHeaderBox;
-import com.coremedia.iso.boxes.MediaInformationBox;
-import com.coremedia.iso.boxes.MovieBox;
-import com.coremedia.iso.boxes.MovieHeaderBox;
-import com.coremedia.iso.boxes.SampleSizeBox;
-import com.coremedia.iso.boxes.SampleTableBox;
-import com.coremedia.iso.boxes.SampleToChunkBox;
-import com.coremedia.iso.boxes.StaticChunkOffsetBox;
-import com.coremedia.iso.boxes.SyncSampleBox;
-import com.coremedia.iso.boxes.TimeToSampleBox;
-import com.coremedia.iso.boxes.TrackBox;
-import com.coremedia.iso.boxes.TrackHeaderBox;
-import com.googlecode.mp4parser.DataSource;
-import com.googlecode.mp4parser.util.Matrix;
-
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-import java.nio.channels.WritableByteChannel;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-
-@TargetApi(16)
-public class MP4Builder {
-
-    private InterleaveChunkMdat mdat = null;
-    private Mp4Movie currentMp4Movie = null;
-    private FileOutputStream fos = null;
-    private FileChannel fc = null;
-    private long dataOffset = 0;
-    private long writedSinceLastMdat = 0;
-    private boolean writeNewMdat = true;
-    private HashMap<Track, long[]> track2SampleSizes = new HashMap<>();
-    private ByteBuffer sizeBuffer = null;
-
-    public MP4Builder createMovie(Mp4Movie mp4Movie) throws Exception {
-        currentMp4Movie = mp4Movie;
-
-        fos = new FileOutputStream(mp4Movie.getCacheFile());
-        fc = fos.getChannel();
-
-        FileTypeBox fileTypeBox = createFileTypeBox();
-        fileTypeBox.getBox(fc);
-        dataOffset += fileTypeBox.getSize();
-        writedSinceLastMdat += dataOffset;
-
-        mdat = new InterleaveChunkMdat();
-
-        sizeBuffer = ByteBuffer.allocateDirect(4);
-
-        return this;
-    }
-
-    private void flushCurrentMdat() throws Exception {
-        long oldPosition = fc.position();
-        fc.position(mdat.getOffset());
-        mdat.getBox(fc);
-        fc.position(oldPosition);
-        mdat.setDataOffset(0);
-        mdat.setContentSize(0);
-        fos.flush();
-    }
-
-    public boolean writeSampleData(int trackIndex, ByteBuffer byteBuf, MediaCodec.BufferInfo bufferInfo, boolean isAudio) throws Exception {
-        if (writeNewMdat) {
-            mdat.setContentSize(0);
-            mdat.getBox(fc);
-            mdat.setDataOffset(dataOffset);
-            dataOffset += 16;
-            writedSinceLastMdat += 16;
-            writeNewMdat = false;
-        }
-
-        mdat.setContentSize(mdat.getContentSize() + bufferInfo.size);
-        writedSinceLastMdat += bufferInfo.size;
-
-        boolean flush = false;
-        if (writedSinceLastMdat >= 32 * 1024) {
-            flushCurrentMdat();
-            writeNewMdat = true;
-            flush = true;
-            writedSinceLastMdat -= 32 * 1024;
-        }
-
-        currentMp4Movie.addSample(trackIndex, dataOffset, bufferInfo);
-        byteBuf.position(bufferInfo.offset + (isAudio ? 0 : 4));
-        byteBuf.limit(bufferInfo.offset + bufferInfo.size);
-
-        if (!isAudio) {
-            sizeBuffer.position(0);
-            sizeBuffer.putInt(bufferInfo.size - 4);
-            sizeBuffer.position(0);
-            fc.write(sizeBuffer);
-        }
-
-        fc.write(byteBuf);
-        dataOffset += bufferInfo.size;
-
-        if (flush) {
-            fos.flush();
-        }
-        return flush;
-    }
-
-    public int addTrack(MediaFormat mediaFormat, boolean isAudio) throws Exception {
-        return currentMp4Movie.addTrack(mediaFormat, isAudio);
-    }
-
-    public void finishMovie(boolean error) throws Exception {
-        if (mdat.getContentSize() != 0) {
-            flushCurrentMdat();
-        }
-
-        for (Track track : currentMp4Movie.getTracks()) {
-            List<Sample> samples = track.getSamples();
-            long[] sizes = new long[samples.size()];
-            for (int i = 0; i < sizes.length; i++) {
-                sizes[i] = samples.get(i).getSize();
-            }
-            track2SampleSizes.put(track, sizes);
-        }
-
-        Box moov = createMovieBox(currentMp4Movie);
-        moov.getBox(fc);
-        fos.flush();
-
-        fc.close();
-        fos.close();
-    }
-
-    protected FileTypeBox createFileTypeBox() {
-        LinkedList<String> minorBrands = new LinkedList<>();
-        minorBrands.add("isom");
-        minorBrands.add("3gp4");
-        return new FileTypeBox("isom", 0, minorBrands);
-    }
-
-    private class InterleaveChunkMdat implements Box {
-        private Container parent;
-        private long contentSize = 1024 * 1024 * 1024;
-        private long dataOffset = 0;
-
-        public Container getParent() {
-            return parent;
-        }
-
-        public long getOffset() {
-            return dataOffset;
-        }
-
-        public void setDataOffset(long offset) {
-            dataOffset = offset;
-        }
-
-        public void setParent(Container parent) {
-            this.parent = parent;
-        }
-
-        public void setContentSize(long contentSize) {
-            this.contentSize = contentSize;
-        }
-
-        public long getContentSize() {
-            return contentSize;
-        }
-
-        public String getType() {
-            return "mdat";
-        }
-
-        public long getSize() {
-            return 16 + contentSize;
-        }
-
-        private boolean isSmallBox(long contentSize) {
-            return (contentSize + 8) < 4294967296L;
-        }
-
-        @Override
-        public void parse(DataSource dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
-
-        }
-
-        public void getBox(WritableByteChannel writableByteChannel) throws IOException {
-            ByteBuffer bb = ByteBuffer.allocate(16);
-            long size = getSize();
-            if (isSmallBox(size)) {
-                IsoTypeWriter.writeUInt32(bb, size);
-            } else {
-                IsoTypeWriter.writeUInt32(bb, 1);
-            }
-            bb.put(IsoFile.fourCCtoBytes("mdat"));
-            if (isSmallBox(size)) {
-                bb.put(new byte[8]);
-            } else {
-                IsoTypeWriter.writeUInt64(bb, size);
-            }
-            bb.rewind();
-            writableByteChannel.write(bb);
-        }
-    }
-
-    public static long gcd(long a, long b) {
-        if (b == 0) {
-            return a;
-        }
-        return gcd(b, a % b);
-    }
-
-    public long getTimescale(Mp4Movie mp4Movie) {
-        long timescale = 0;
-        if (!mp4Movie.getTracks().isEmpty()) {
-            timescale = mp4Movie.getTracks().iterator().next().getTimeScale();
-        }
-        for (Track track : mp4Movie.getTracks()) {
-            timescale = gcd(track.getTimeScale(), timescale);
-        }
-        return timescale;
-    }
-
-    protected MovieBox createMovieBox(Mp4Movie movie) {
-        MovieBox movieBox = new MovieBox();
-        MovieHeaderBox mvhd = new MovieHeaderBox();
-
-        mvhd.setCreationTime(new Date());
-        mvhd.setModificationTime(new Date());
-        mvhd.setMatrix(Matrix.ROTATE_0);
-        long movieTimeScale = getTimescale(movie);
-        long duration = 0;
-
-        for (Track track : movie.getTracks()) {
-            long tracksDuration = track.getDuration() * movieTimeScale / track.getTimeScale();
-            if (tracksDuration > duration) {
-                duration = tracksDuration;
-            }
-        }
-
-        mvhd.setDuration(duration);
-        mvhd.setTimescale(movieTimeScale);
-        mvhd.setNextTrackId(movie.getTracks().size() + 1);
-
-        movieBox.addBox(mvhd);
-        for (Track track : movie.getTracks()) {
-            movieBox.addBox(createTrackBox(track, movie));
-        }
-        return movieBox;
-    }
-
-    protected TrackBox createTrackBox(Track track, Mp4Movie movie) {
-        TrackBox trackBox = new TrackBox();
-        TrackHeaderBox tkhd = new TrackHeaderBox();
-
-        tkhd.setEnabled(true);
-        tkhd.setInMovie(true);
-        tkhd.setInPreview(true);
-        if (track.isAudio()) {
-            tkhd.setMatrix(Matrix.ROTATE_0);
-        } else {
-            tkhd.setMatrix(movie.getMatrix());
-        }
-        tkhd.setAlternateGroup(0);
-        tkhd.setCreationTime(track.getCreationTime());
-        tkhd.setDuration(track.getDuration() * getTimescale(movie) / track.getTimeScale());
-        tkhd.setHeight(track.getHeight());
-        tkhd.setWidth(track.getWidth());
-        tkhd.setLayer(0);
-        tkhd.setModificationTime(new Date());
-        tkhd.setTrackId(track.getTrackId() + 1);
-        tkhd.setVolume(track.getVolume());
-
-        trackBox.addBox(tkhd);
-
-        MediaBox mdia = new MediaBox();
-        trackBox.addBox(mdia);
-        MediaHeaderBox mdhd = new MediaHeaderBox();
-        mdhd.setCreationTime(track.getCreationTime());
-        mdhd.setDuration(track.getDuration());
-        mdhd.setTimescale(track.getTimeScale());
-        mdhd.setLanguage("eng");
-        mdia.addBox(mdhd);
-        HandlerBox hdlr = new HandlerBox();
-        hdlr.setName(track.isAudio() ? "SoundHandle" : "VideoHandle");
-        hdlr.setHandlerType(track.getHandler());
-
-        mdia.addBox(hdlr);
-
-        MediaInformationBox minf = new MediaInformationBox();
-        minf.addBox(track.getMediaHeaderBox());
-
-        DataInformationBox dinf = new DataInformationBox();
-        DataReferenceBox dref = new DataReferenceBox();
-        dinf.addBox(dref);
-        DataEntryUrlBox url = new DataEntryUrlBox();
-        url.setFlags(1);
-        dref.addBox(url);
-        minf.addBox(dinf);
-
-        Box stbl = createStbl(track);
-        minf.addBox(stbl);
-        mdia.addBox(minf);
-
-        return trackBox;
-    }
-
-    protected Box createStbl(Track track) {
-        SampleTableBox stbl = new SampleTableBox();
-
-        createStsd(track, stbl);
-        createStts(track, stbl);
-        createStss(track, stbl);
-        createStsc(track, stbl);
-        createStsz(track, stbl);
-        createStco(track, stbl);
-
-        return stbl;
-    }
-
-    protected void createStsd(Track track, SampleTableBox stbl) {
-        stbl.addBox(track.getSampleDescriptionBox());
-    }
-
-    protected void createStts(Track track, SampleTableBox stbl) {
-        TimeToSampleBox.Entry lastEntry = null;
-        List<TimeToSampleBox.Entry> entries = new ArrayList<>();
-
-        for (long delta : track.getSampleDurations()) {
-            if (lastEntry != null && lastEntry.getDelta() == delta) {
-                lastEntry.setCount(lastEntry.getCount() + 1);
-            } else {
-                lastEntry = new TimeToSampleBox.Entry(1, delta);
-                entries.add(lastEntry);
-            }
-        }
-        TimeToSampleBox stts = new TimeToSampleBox();
-        stts.setEntries(entries);
-        stbl.addBox(stts);
-    }
-
-    protected void createStss(Track track, SampleTableBox stbl) {
-        long[] syncSamples = track.getSyncSamples();
-        if (syncSamples != null && syncSamples.length > 0) {
-            SyncSampleBox stss = new SyncSampleBox();
-            stss.setSampleNumber(syncSamples);
-            stbl.addBox(stss);
-        }
-    }
-
-    protected void createStsc(Track track, SampleTableBox stbl) {
-        SampleToChunkBox stsc = new SampleToChunkBox();
-        stsc.setEntries(new LinkedList<SampleToChunkBox.Entry>());
-
-        long lastOffset = -1;
-        int lastChunkNumber = 1;
-        int lastSampleCount = 0;
-
-        int previousWritedChunkCount = -1;
-
-        int samplesCount = track.getSamples().size();
-        for (int a = 0; a < samplesCount; a++) {
-            Sample sample = track.getSamples().get(a);
-            long offset = sample.getOffset();
-            long size = sample.getSize();
-
-            lastOffset = offset + size;
-            lastSampleCount++;
-
-            boolean write = false;
-            if (a != samplesCount - 1) {
-                Sample nextSample = track.getSamples().get(a + 1);
-                if (lastOffset != nextSample.getOffset()) {
-                    write = true;
-                }
-            } else {
-                write = true;
-            }
-            if (write) {
-                if (previousWritedChunkCount != lastSampleCount) {
-                    stsc.getEntries().add(new SampleToChunkBox.Entry(lastChunkNumber, lastSampleCount, 1));
-                    previousWritedChunkCount = lastSampleCount;
-                }
-                lastSampleCount = 0;
-                lastChunkNumber++;
-            }
-        }
-        stbl.addBox(stsc);
-    }
-
-    protected void createStsz(Track track, SampleTableBox stbl) {
-        SampleSizeBox stsz = new SampleSizeBox();
-        stsz.setSampleSizes(track2SampleSizes.get(track));
-        stbl.addBox(stsz);
-    }
-
-    protected void createStco(Track track, SampleTableBox stbl) {
-        ArrayList<Long> chunksOffsets = new ArrayList<>();
-        long lastOffset = -1;
-        for (Sample sample : track.getSamples()) {
-            long offset = sample.getOffset();
-            if (lastOffset != -1 && lastOffset != offset) {
-                lastOffset = -1;
-            }
-            if (lastOffset == -1) {
-                chunksOffsets.add(offset);
-            }
-            lastOffset = offset + sample.getSize();
-        }
-        long[] chunkOffsetsLong = new long[chunksOffsets.size()];
-        for (int a = 0; a < chunksOffsets.size(); a++) {
-            chunkOffsetsLong[a] = chunksOffsets.get(a);
-        }
-
-        StaticChunkOffsetBox stco = new StaticChunkOffsetBox();
-        stco.setChunkOffsets(chunkOffsetsLong);
-        stbl.addBox(stco);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java b/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
deleted file mode 100644
index 5fea2eb3d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android.video;
-
-import android.annotation.TargetApi;
-import android.media.MediaCodec;
-import android.media.MediaFormat;
-
-import com.googlecode.mp4parser.util.Matrix;
-
-import java.io.File;
-import java.util.ArrayList;
-
-@TargetApi(16)
-public class Mp4Movie {
-    private Matrix matrix = Matrix.ROTATE_0;
-    private ArrayList<Track> tracks = new ArrayList<Track>();
-    private File cacheFile;
-    private int width;
-    private int height;
-
-    public Matrix getMatrix() {
-        return matrix;
-    }
-
-    public int getWidth() {
-        return width;
-    }
-
-    public int getHeight() {
-        return height;
-    }
-
-    public void setCacheFile(File file) {
-        cacheFile = file;
-    }
-
-    public void setRotation(int angle) {
-        if (angle == 0) {
-            matrix = Matrix.ROTATE_0;
-        } else if (angle == 90) {
-            matrix = Matrix.ROTATE_90;
-        } else if (angle == 180) {
-            matrix = Matrix.ROTATE_180;
-        } else if (angle == 270) {
-            matrix = Matrix.ROTATE_270;
-        }
-    }
-
-    public void setSize(int w, int h) {
-        width = w;
-        height = h;
-    }
-
-    public ArrayList<Track> getTracks() {
-        return tracks;
-    }
-
-    public File getCacheFile() {
-        return cacheFile;
-    }
-
-    public void addSample(int trackIndex, long offset, MediaCodec.BufferInfo bufferInfo) throws Exception {
-        if (trackIndex < 0 || trackIndex >= tracks.size()) {
-            return;
-        }
-        Track track = tracks.get(trackIndex);
-        track.addSample(offset, bufferInfo);
-    }
-
-    public int addTrack(MediaFormat mediaFormat, boolean isAudio) throws Exception {
-        tracks.add(new Track(tracks.size(), mediaFormat, isAudio));
-        return tracks.size() - 1;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java b/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
deleted file mode 100644
index c3e2d5fde..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
+++ /dev/null
@@ -1,207 +0,0 @@
-/*
- * Copyright (C) 2013 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.telegram.android.video;
-
-import android.annotation.TargetApi;
-import android.graphics.SurfaceTexture;
-import android.opengl.GLES20;
-import android.view.Surface;
-
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-
-import javax.microedition.khronos.egl.EGL10;
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.egl.EGLContext;
-import javax.microedition.khronos.egl.EGLDisplay;
-import javax.microedition.khronos.egl.EGLSurface;
-
-@TargetApi(16)
-public class OutputSurface implements SurfaceTexture.OnFrameAvailableListener {
-
-    private static final int EGL_OPENGL_ES2_BIT = 4;
-    private static final int EGL_CONTEXT_CLIENT_VERSION = 0x3098;
-    private EGL10 mEGL;
-    private EGLDisplay mEGLDisplay = null;
-    private EGLContext mEGLContext = null;
-    private EGLSurface mEGLSurface = null;
-    private SurfaceTexture mSurfaceTexture;
-    private Surface mSurface;
-    private final Object mFrameSyncObject = new Object();
-    private boolean mFrameAvailable;
-    private TextureRenderer mTextureRender;
-    private int mWidth;
-    private int mHeight;
-    private int rotateRender = 0;
-    private ByteBuffer mPixelBuf;
-
-    public OutputSurface(int width, int height, int rotate) {
-        if (width <= 0 || height <= 0) {
-            throw new IllegalArgumentException();
-        }
-        mWidth = width;
-        mHeight = height;
-        rotateRender = rotate;
-        mPixelBuf = ByteBuffer.allocateDirect(mWidth * mHeight * 4);
-        mPixelBuf.order(ByteOrder.LITTLE_ENDIAN);
-        eglSetup(width, height);
-        makeCurrent();
-        setup();
-    }
-
-    public OutputSurface() {
-        setup();
-    }
-
-    private void setup() {
-        mTextureRender = new TextureRenderer(rotateRender);
-        mTextureRender.surfaceCreated();
-        mSurfaceTexture = new SurfaceTexture(mTextureRender.getTextureId());
-        mSurfaceTexture.setOnFrameAvailableListener(this);
-        mSurface = new Surface(mSurfaceTexture);
-    }
-
-    private void eglSetup(int width, int height) {
-        mEGL = (EGL10) EGLContext.getEGL();
-        mEGLDisplay = mEGL.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
-
-        if (mEGLDisplay == EGL10.EGL_NO_DISPLAY) {
-            throw new RuntimeException("unable to get EGL10 display");
-        }
-
-        if (!mEGL.eglInitialize(mEGLDisplay, null)) {
-            mEGLDisplay = null;
-            throw new RuntimeException("unable to initialize EGL10");
-        }
-
-        int[] attribList = {
-                EGL10.EGL_RED_SIZE, 8,
-                EGL10.EGL_GREEN_SIZE, 8,
-                EGL10.EGL_BLUE_SIZE, 8,
-                EGL10.EGL_ALPHA_SIZE, 8,
-                EGL10.EGL_SURFACE_TYPE, EGL10.EGL_PBUFFER_BIT,
-                EGL10.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
-                EGL10.EGL_NONE
-        };
-        EGLConfig[] configs = new EGLConfig[1];
-        int[] numConfigs = new int[1];
-        if (!mEGL.eglChooseConfig(mEGLDisplay, attribList, configs, configs.length, numConfigs)) {
-            throw new RuntimeException("unable to find RGB888+pbuffer EGL config");
-        }
-        int[] attrib_list = {
-                EGL_CONTEXT_CLIENT_VERSION, 2,
-                EGL10.EGL_NONE
-        };
-        mEGLContext = mEGL.eglCreateContext(mEGLDisplay, configs[0], EGL10.EGL_NO_CONTEXT, attrib_list);
-        checkEglError("eglCreateContext");
-        if (mEGLContext == null) {
-            throw new RuntimeException("null context");
-        }
-        int[] surfaceAttribs = {
-                EGL10.EGL_WIDTH, width,
-                EGL10.EGL_HEIGHT, height,
-                EGL10.EGL_NONE
-        };
-        mEGLSurface = mEGL.eglCreatePbufferSurface(mEGLDisplay, configs[0], surfaceAttribs);
-        checkEglError("eglCreatePbufferSurface");
-        if (mEGLSurface == null) {
-            throw new RuntimeException("surface was null");
-        }
-    }
-
-    public void release() {
-        if (mEGL != null) {
-            if (mEGL.eglGetCurrentContext().equals(mEGLContext)) {
-                mEGL.eglMakeCurrent(mEGLDisplay, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);
-            }
-            mEGL.eglDestroySurface(mEGLDisplay, mEGLSurface);
-            mEGL.eglDestroyContext(mEGLDisplay, mEGLContext);
-        }
-        mSurface.release();
-        mEGLDisplay = null;
-        mEGLContext = null;
-        mEGLSurface = null;
-        mEGL = null;
-        mTextureRender = null;
-        mSurface = null;
-        mSurfaceTexture = null;
-    }
-
-    public void makeCurrent() {
-        if (mEGL == null) {
-            throw new RuntimeException("not configured for makeCurrent");
-        }
-        checkEglError("before makeCurrent");
-        if (!mEGL.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext)) {
-            throw new RuntimeException("eglMakeCurrent failed");
-        }
-    }
-
-    public Surface getSurface() {
-        return mSurface;
-    }
-
-    public void changeFragmentShader(String fragmentShader) {
-        mTextureRender.changeFragmentShader(fragmentShader);
-    }
-
-    public void awaitNewImage() {
-        final int TIMEOUT_MS = 2500;
-        synchronized (mFrameSyncObject) {
-            while (!mFrameAvailable) {
-                try {
-                    mFrameSyncObject.wait(TIMEOUT_MS);
-                    if (!mFrameAvailable) {
-                        throw new RuntimeException("Surface frame wait timed out");
-                    }
-                } catch (InterruptedException ie) {
-                    throw new RuntimeException(ie);
-                }
-            }
-            mFrameAvailable = false;
-        }
-        mTextureRender.checkGlError("before updateTexImage");
-        mSurfaceTexture.updateTexImage();
-    }
-
-    public void drawImage(boolean invert) {
-        mTextureRender.drawFrame(mSurfaceTexture, invert);
-    }
-
-    @Override
-    public void onFrameAvailable(SurfaceTexture st) {
-        synchronized (mFrameSyncObject) {
-            if (mFrameAvailable) {
-                throw new RuntimeException("mFrameAvailable already set, frame could be dropped");
-            }
-            mFrameAvailable = true;
-            mFrameSyncObject.notifyAll();
-        }
-    }
-
-    public ByteBuffer getFrame() {
-        mPixelBuf.rewind();
-        GLES20.glReadPixels(0, 0, mWidth, mHeight, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, mPixelBuf);
-        return mPixelBuf;
-    }
-
-    private void checkEglError(String msg) {
-        if (mEGL.eglGetError() != EGL10.EGL_SUCCESS) {
-            throw new RuntimeException("EGL error encountered (see log)");
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Sample.java b/TMessagesProj/src/main/java/org/telegram/android/video/Sample.java
deleted file mode 100644
index f6d7954ff..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Sample.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android.video;
-
-public class Sample {
-    private long offset = 0;
-    private long size = 0;
-
-    public Sample(long offset, long size) {
-        this.offset = offset;
-        this.size = size;
-    }
-
-    public long getOffset() {
-        return offset;
-    }
-
-    public long getSize() {
-        return size;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java b/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
deleted file mode 100644
index 9b29f40c1..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/video/TextureRenderer.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Copyright (C) 2013 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.telegram.android.video;
-
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.FloatBuffer;
-
-import android.annotation.TargetApi;
-import android.graphics.SurfaceTexture;
-import android.opengl.GLES11Ext;
-import android.opengl.GLES20;
-import android.opengl.Matrix;
-
-@TargetApi(16)
-public class TextureRenderer {
-
-    private static final int FLOAT_SIZE_BYTES = 4;
-    private static final int TRIANGLE_VERTICES_DATA_STRIDE_BYTES = 5 * FLOAT_SIZE_BYTES;
-    private static final int TRIANGLE_VERTICES_DATA_POS_OFFSET = 0;
-    private static final int TRIANGLE_VERTICES_DATA_UV_OFFSET = 3;
-    private static final float[] mTriangleVerticesData = {
-            -1.0f, -1.0f, 0, 0.f, 0.f,
-            1.0f, -1.0f, 0, 1.f, 0.f,
-            -1.0f, 1.0f, 0, 0.f, 1.f,
-            1.0f, 1.0f, 0, 1.f, 1.f,
-    };
-    private FloatBuffer mTriangleVertices;
-
-    private static final String VERTEX_SHADER =
-            "uniform mat4 uMVPMatrix;\n" +
-            "uniform mat4 uSTMatrix;\n" +
-            "attribute vec4 aPosition;\n" +
-            "attribute vec4 aTextureCoord;\n" +
-            "varying vec2 vTextureCoord;\n" +
-            "void main() {\n" +
-            "  gl_Position = uMVPMatrix * aPosition;\n" +
-            "  vTextureCoord = (uSTMatrix * aTextureCoord).xy;\n" +
-            "}\n";
-
-    private static final String FRAGMENT_SHADER =
-            "#extension GL_OES_EGL_image_external : require\n" +
-            "precision mediump float;\n" +
-            "varying vec2 vTextureCoord;\n" +
-            "uniform samplerExternalOES sTexture;\n" +
-            "void main() {\n" +
-            "  gl_FragColor = texture2D(sTexture, vTextureCoord);\n" +
-            "}\n";
-
-    private float[] mMVPMatrix = new float[16];
-    private float[] mSTMatrix = new float[16];
-    private int mProgram;
-    private int mTextureID = -12345;
-    private int muMVPMatrixHandle;
-    private int muSTMatrixHandle;
-    private int maPositionHandle;
-    private int maTextureHandle;
-    private int rotationAngle = 0;
-
-    public TextureRenderer(int rotation) {
-        rotationAngle = rotation;
-        mTriangleVertices = ByteBuffer.allocateDirect(mTriangleVerticesData.length * FLOAT_SIZE_BYTES).order(ByteOrder.nativeOrder()).asFloatBuffer();
-        mTriangleVertices.put(mTriangleVerticesData).position(0);
-        Matrix.setIdentityM(mSTMatrix, 0);
-    }
-
-    public int getTextureId() {
-        return mTextureID;
-    }
-
-    public void drawFrame(SurfaceTexture st, boolean invert) {
-        checkGlError("onDrawFrame start");
-        st.getTransformMatrix(mSTMatrix);
-
-        if (invert) {
-            mSTMatrix[5] = -mSTMatrix[5];
-            mSTMatrix[13] = 1.0f - mSTMatrix[13];
-        }
-
-        GLES20.glUseProgram(mProgram);
-        checkGlError("glUseProgram");
-        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
-        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, mTextureID);
-        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);
-        GLES20.glVertexAttribPointer(maPositionHandle, 3, GLES20.GL_FLOAT, false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES, mTriangleVertices);
-        checkGlError("glVertexAttribPointer maPosition");
-        GLES20.glEnableVertexAttribArray(maPositionHandle);
-        checkGlError("glEnableVertexAttribArray maPositionHandle");
-        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);
-        GLES20.glVertexAttribPointer(maTextureHandle, 2, GLES20.GL_FLOAT, false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES, mTriangleVertices);
-        checkGlError("glVertexAttribPointer maTextureHandle");
-        GLES20.glEnableVertexAttribArray(maTextureHandle);
-        checkGlError("glEnableVertexAttribArray maTextureHandle");
-        GLES20.glUniformMatrix4fv(muSTMatrixHandle, 1, false, mSTMatrix, 0);
-        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix, 0);
-        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
-        checkGlError("glDrawArrays");
-        GLES20.glFinish();
-    }
-
-    public void surfaceCreated() {
-        mProgram = createProgram(VERTEX_SHADER, FRAGMENT_SHADER);
-        if (mProgram == 0) {
-            throw new RuntimeException("failed creating program");
-        }
-        maPositionHandle = GLES20.glGetAttribLocation(mProgram, "aPosition");
-        checkGlError("glGetAttribLocation aPosition");
-        if (maPositionHandle == -1) {
-            throw new RuntimeException("Could not get attrib location for aPosition");
-        }
-        maTextureHandle = GLES20.glGetAttribLocation(mProgram, "aTextureCoord");
-        checkGlError("glGetAttribLocation aTextureCoord");
-        if (maTextureHandle == -1) {
-            throw new RuntimeException("Could not get attrib location for aTextureCoord");
-        }
-        muMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");
-        checkGlError("glGetUniformLocation uMVPMatrix");
-        if (muMVPMatrixHandle == -1) {
-            throw new RuntimeException("Could not get attrib location for uMVPMatrix");
-        }
-        muSTMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uSTMatrix");
-        checkGlError("glGetUniformLocation uSTMatrix");
-        if (muSTMatrixHandle == -1) {
-            throw new RuntimeException("Could not get attrib location for uSTMatrix");
-        }
-        int[] textures = new int[1];
-        GLES20.glGenTextures(1, textures, 0);
-        mTextureID = textures[0];
-        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, mTextureID);
-        checkGlError("glBindTexture mTextureID");
-        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);
-        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
-        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
-        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
-        checkGlError("glTexParameter");
-
-        Matrix.setIdentityM(mMVPMatrix, 0);
-        if (rotationAngle != 0) {
-            Matrix.rotateM(mMVPMatrix, 0, rotationAngle, 0, 0, 1);
-        }
-    }
-
-    public void changeFragmentShader(String fragmentShader) {
-        GLES20.glDeleteProgram(mProgram);
-        mProgram = createProgram(VERTEX_SHADER, fragmentShader);
-        if (mProgram == 0) {
-            throw new RuntimeException("failed creating program");
-        }
-    }
-
-    private int loadShader(int shaderType, String source) {
-        int shader = GLES20.glCreateShader(shaderType);
-        checkGlError("glCreateShader type=" + shaderType);
-        GLES20.glShaderSource(shader, source);
-        GLES20.glCompileShader(shader);
-        int[] compiled = new int[1];
-        GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0);
-        if (compiled[0] == 0) {
-            GLES20.glDeleteShader(shader);
-            shader = 0;
-        }
-        return shader;
-    }
-
-    private int createProgram(String vertexSource, String fragmentSource) {
-        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexSource);
-        if (vertexShader == 0) {
-            return 0;
-        }
-        int pixelShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentSource);
-        if (pixelShader == 0) {
-            return 0;
-        }
-        int program = GLES20.glCreateProgram();
-        checkGlError("glCreateProgram");
-        if (program == 0) {
-            return 0;
-        }
-        GLES20.glAttachShader(program, vertexShader);
-        checkGlError("glAttachShader");
-        GLES20.glAttachShader(program, pixelShader);
-        checkGlError("glAttachShader");
-        GLES20.glLinkProgram(program);
-        int[] linkStatus = new int[1];
-        GLES20.glGetProgramiv(program, GLES20.GL_LINK_STATUS, linkStatus, 0);
-        if (linkStatus[0] != GLES20.GL_TRUE) {
-            GLES20.glDeleteProgram(program);
-            program = 0;
-        }
-        return program;
-    }
-
-    public void checkGlError(String op) {
-        int error;
-        if ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
-            throw new RuntimeException(op + ": glError " + error);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java b/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
deleted file mode 100644
index cc34745ea..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
+++ /dev/null
@@ -1,263 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android.video;
-
-import android.annotation.TargetApi;
-import android.media.MediaCodec;
-import android.media.MediaFormat;
-
-import com.coremedia.iso.boxes.AbstractMediaHeaderBox;
-import com.coremedia.iso.boxes.SampleDescriptionBox;
-import com.coremedia.iso.boxes.SoundMediaHeaderBox;
-import com.coremedia.iso.boxes.VideoMediaHeaderBox;
-import com.mp4parser.iso14496.part15.AvcConfigurationBox;
-import com.coremedia.iso.boxes.sampleentry.AudioSampleEntry;
-import com.coremedia.iso.boxes.sampleentry.VisualSampleEntry;
-import com.googlecode.mp4parser.boxes.mp4.ESDescriptorBox;
-import com.googlecode.mp4parser.boxes.mp4.objectdescriptors.AudioSpecificConfig;
-import com.googlecode.mp4parser.boxes.mp4.objectdescriptors.DecoderConfigDescriptor;
-import com.googlecode.mp4parser.boxes.mp4.objectdescriptors.ESDescriptor;
-import com.googlecode.mp4parser.boxes.mp4.objectdescriptors.SLConfigDescriptor;
-
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.Map;
-
-@TargetApi(16)
-public class Track {
-    private long trackId = 0;
-    private ArrayList<Sample> samples = new ArrayList<Sample>();
-    private long duration = 0;
-    private String handler;
-    private AbstractMediaHeaderBox headerBox = null;
-    private SampleDescriptionBox sampleDescriptionBox = null;
-    private LinkedList<Integer> syncSamples = null;
-    private int timeScale;
-    private Date creationTime = new Date();
-    private int height;
-    private int width;
-    private float volume = 0;
-    private ArrayList<Long> sampleDurations = new ArrayList<Long>();
-    private boolean isAudio = false;
-    private static Map<Integer, Integer> samplingFrequencyIndexMap = new HashMap<Integer, Integer>();
-    private long lastPresentationTimeUs = 0;
-    private boolean first = true;
-
-    static {
-        samplingFrequencyIndexMap.put(96000, 0x0);
-        samplingFrequencyIndexMap.put(88200, 0x1);
-        samplingFrequencyIndexMap.put(64000, 0x2);
-        samplingFrequencyIndexMap.put(48000, 0x3);
-        samplingFrequencyIndexMap.put(44100, 0x4);
-        samplingFrequencyIndexMap.put(32000, 0x5);
-        samplingFrequencyIndexMap.put(24000, 0x6);
-        samplingFrequencyIndexMap.put(22050, 0x7);
-        samplingFrequencyIndexMap.put(16000, 0x8);
-        samplingFrequencyIndexMap.put(12000, 0x9);
-        samplingFrequencyIndexMap.put(11025, 0xa);
-        samplingFrequencyIndexMap.put(8000, 0xb);
-    }
-
-    public Track(int id, MediaFormat format, boolean isAudio) throws Exception {
-        trackId = id;
-        if (!isAudio) {
-            sampleDurations.add((long)3015);
-            duration = 3015;
-            width = format.getInteger(MediaFormat.KEY_WIDTH);
-            height = format.getInteger(MediaFormat.KEY_HEIGHT);
-            timeScale = 90000;
-            syncSamples = new LinkedList<Integer>();
-            handler = "vide";
-            headerBox = new VideoMediaHeaderBox();
-            sampleDescriptionBox = new SampleDescriptionBox();
-            String mime = format.getString(MediaFormat.KEY_MIME);
-            if (mime.equals("video/avc")) {
-                VisualSampleEntry visualSampleEntry = new VisualSampleEntry("avc1");
-                visualSampleEntry.setDataReferenceIndex(1);
-                visualSampleEntry.setDepth(24);
-                visualSampleEntry.setFrameCount(1);
-                visualSampleEntry.setHorizresolution(72);
-                visualSampleEntry.setVertresolution(72);
-                visualSampleEntry.setWidth(width);
-                visualSampleEntry.setHeight(height);
-
-                AvcConfigurationBox avcConfigurationBox = new AvcConfigurationBox();
-
-                if (format.getByteBuffer("csd-0") != null) {
-                    ArrayList<byte[]> spsArray = new ArrayList<byte[]>();
-                    ByteBuffer spsBuff = format.getByteBuffer("csd-0");
-                    spsBuff.position(4);
-                    byte[] spsBytes = new byte[spsBuff.remaining()];
-                    spsBuff.get(spsBytes);
-                    spsArray.add(spsBytes);
-
-                    ArrayList<byte[]> ppsArray = new ArrayList<byte[]>();
-                    ByteBuffer ppsBuff = format.getByteBuffer("csd-1");
-                    ppsBuff.position(4);
-                    byte[] ppsBytes = new byte[ppsBuff.remaining()];
-                    ppsBuff.get(ppsBytes);
-                    ppsArray.add(ppsBytes);
-                    avcConfigurationBox.setSequenceParameterSets(spsArray);
-                    avcConfigurationBox.setPictureParameterSets(ppsArray);
-                }
-                //ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(spsBytes);
-                //SeqParameterSet seqParameterSet = SeqParameterSet.read(byteArrayInputStream);
-
-                avcConfigurationBox.setAvcLevelIndication(13);
-                avcConfigurationBox.setAvcProfileIndication(100);
-                avcConfigurationBox.setBitDepthLumaMinus8(-1);
-                avcConfigurationBox.setBitDepthChromaMinus8(-1);
-                avcConfigurationBox.setChromaFormat(-1);
-                avcConfigurationBox.setConfigurationVersion(1);
-                avcConfigurationBox.setLengthSizeMinusOne(3);
-                avcConfigurationBox.setProfileCompatibility(0);
-
-                visualSampleEntry.addBox(avcConfigurationBox);
-                sampleDescriptionBox.addBox(visualSampleEntry);
-            } else if (mime.equals("video/mp4v")) {
-                VisualSampleEntry visualSampleEntry = new VisualSampleEntry("mp4v");
-                visualSampleEntry.setDataReferenceIndex(1);
-                visualSampleEntry.setDepth(24);
-                visualSampleEntry.setFrameCount(1);
-                visualSampleEntry.setHorizresolution(72);
-                visualSampleEntry.setVertresolution(72);
-                visualSampleEntry.setWidth(width);
-                visualSampleEntry.setHeight(height);
-
-                sampleDescriptionBox.addBox(visualSampleEntry);
-            }
-        } else {
-            sampleDurations.add((long)1024);
-            duration = 1024;
-            isAudio = true;
-            volume = 1;
-            timeScale = format.getInteger(MediaFormat.KEY_SAMPLE_RATE);
-            handler = "soun";
-            headerBox = new SoundMediaHeaderBox();
-            sampleDescriptionBox = new SampleDescriptionBox();
-            AudioSampleEntry audioSampleEntry = new AudioSampleEntry("mp4a");
-            audioSampleEntry.setChannelCount(format.getInteger(MediaFormat.KEY_CHANNEL_COUNT));
-            audioSampleEntry.setSampleRate(format.getInteger(MediaFormat.KEY_SAMPLE_RATE));
-            audioSampleEntry.setDataReferenceIndex(1);
-            audioSampleEntry.setSampleSize(16);
-
-            ESDescriptorBox esds = new ESDescriptorBox();
-            ESDescriptor descriptor = new ESDescriptor();
-            descriptor.setEsId(0);
-
-            SLConfigDescriptor slConfigDescriptor = new SLConfigDescriptor();
-            slConfigDescriptor.setPredefined(2);
-            descriptor.setSlConfigDescriptor(slConfigDescriptor);
-
-            DecoderConfigDescriptor decoderConfigDescriptor = new DecoderConfigDescriptor();
-            decoderConfigDescriptor.setObjectTypeIndication(0x40);
-            decoderConfigDescriptor.setStreamType(5);
-            decoderConfigDescriptor.setBufferSizeDB(1536);
-            decoderConfigDescriptor.setMaxBitRate(96000);
-            decoderConfigDescriptor.setAvgBitRate(96000);
-
-            AudioSpecificConfig audioSpecificConfig = new AudioSpecificConfig();
-            audioSpecificConfig.setAudioObjectType(2);
-            audioSpecificConfig.setSamplingFrequencyIndex(samplingFrequencyIndexMap.get((int)audioSampleEntry.getSampleRate()));
-            audioSpecificConfig.setChannelConfiguration(audioSampleEntry.getChannelCount());
-            decoderConfigDescriptor.setAudioSpecificInfo(audioSpecificConfig);
-
-            descriptor.setDecoderConfigDescriptor(decoderConfigDescriptor);
-
-            ByteBuffer data = descriptor.serialize();
-            esds.setEsDescriptor(descriptor);
-            esds.setData(data);
-            audioSampleEntry.addBox(esds);
-            sampleDescriptionBox.addBox(audioSampleEntry);
-        }
-    }
-
-    public long getTrackId() {
-        return trackId;
-    }
-
-    public void addSample(long offset, MediaCodec.BufferInfo bufferInfo) {
-        boolean isSyncFrame = !isAudio && (bufferInfo.flags & MediaCodec.BUFFER_FLAG_SYNC_FRAME) != 0;
-        samples.add(new Sample(offset, bufferInfo.size));
-        if (syncSamples != null && isSyncFrame) {
-            syncSamples.add(samples.size());
-        }
-
-        long delta = bufferInfo.presentationTimeUs - lastPresentationTimeUs;
-        lastPresentationTimeUs = bufferInfo.presentationTimeUs;
-        delta = (delta * timeScale + 500000L) / 1000000L;
-        if (!first) {
-            sampleDurations.add(sampleDurations.size() - 1, delta);
-            duration += delta;
-        }
-        first = false;
-    }
-
-    public ArrayList<Sample> getSamples() {
-        return samples;
-    }
-
-    public long getDuration() {
-        return duration;
-    }
-
-    public String getHandler() {
-        return handler;
-    }
-
-    public AbstractMediaHeaderBox getMediaHeaderBox() {
-        return headerBox;
-    }
-
-    public SampleDescriptionBox getSampleDescriptionBox() {
-        return sampleDescriptionBox;
-    }
-
-    public long[] getSyncSamples() {
-        if (syncSamples == null || syncSamples.isEmpty()) {
-            return null;
-        }
-        long[] returns = new long[syncSamples.size()];
-        for (int i = 0; i < syncSamples.size(); i++) {
-            returns[i] = syncSamples.get(i);
-        }
-        return returns;
-    }
-
-    public int getTimeScale() {
-        return timeScale;
-    }
-
-    public Date getCreationTime() {
-        return creationTime;
-    }
-
-    public int getWidth() {
-        return width;
-    }
-
-    public int getHeight() {
-        return height;
-    }
-
-    public float getVolume() {
-        return volume;
-    }
-
-    public ArrayList<Long> getSampleDurations() {
-        return sampleDurations;
-    }
-
-    public boolean isAudio() {
-        return isAudio;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index bf80ac570..058e75b09 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -782,7 +782,7 @@ public void run() {
                                     MessagesController.getInstance().putUser(user, false);
                                     ArrayList<TLRPC.User> users = new ArrayList<>();
                                     users.add(user);
-                                    MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+//                                    MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
                                     Bundle args = new Bundle();
                                     args.putInt("user_id", user.id);
                                 }
@@ -813,7 +813,7 @@ public void run() {
                                             MessagesController.getInstance().putChat(invite.chat, false);
                                             ArrayList<TLRPC.Chat> chats = new ArrayList<>();
                                             chats.add(invite.chat);
-                                            MessagesStorage.getInstance().putUsersAndChats(null, chats, false, true);
+//                                            MessagesStorage.getInstance().putUsersAndChats(null, chats, false, true);
                                             Bundle args = new Bundle();
                                             args.putInt("chat_id", invite.chat.id);
                                         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index 2da0ba310..9a8d30e2a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -395,12 +395,12 @@ private void sendSelectedPhotos() {
                 }
             }
         }
-        if (webChange) {
-            MessagesStorage.getInstance().putWebRecent(recentWebImages);
-        }
-        if (gifChanged) {
-            MessagesStorage.getInstance().putWebRecent(recentGifImages);
-        }
+//        if (webChange) {
+//            MessagesStorage.getInstance().putWebRecent(recentWebImages);
+//        }
+//        if (gifChanged) {
+//            MessagesStorage.getInstance().putWebRecent(recentGifImages);
+//        }
 
         delegate.didSelectPhotos(photos, captions, webPhotos);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 986339a86..20c6b7559 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -128,7 +128,7 @@ public boolean onFragmentCreate() {
         if (selectedAlbum == null) {
             requestQueue = Volley.newRequestQueue(ApplicationLoader.applicationContext);
             if (recentImages.isEmpty()) {
-                MessagesStorage.getInstance().loadWebRecent(type);
+//                MessagesStorage.getInstance().loadWebRecent(type);
                 loadingRecent = true;
             }
         }
@@ -313,7 +313,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                 if (listAdapter != null) {
                                     listAdapter.notifyDataSetChanged();
                                 }
-                                MessagesStorage.getInstance().clearWebRecent(type);
+//                                MessagesStorage.getInstance().clearWebRecent(type);
                             }
                         });
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 61ac4f240..5b0b32411 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -54,17 +54,13 @@
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
-import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.dto.Post;
 import org.telegram.ui.ActionBar.ActionBar;
@@ -82,9 +78,7 @@
 
 import java.io.File;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.Locale;
 
 public class PhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
@@ -165,8 +159,6 @@
     private String currentPathObject;
     private Bitmap currentThumb = null;
 
-    private int avatarsUserId;
-    private long currentDialogId;
     private int totalImagesCount;
     private boolean isFirstLoading;
     private boolean needSearchImageInArr;
@@ -589,56 +581,6 @@ public void didReceivedNotification(int id, Object... args) {
                     radialProgressViews[a].setProgress(progress, true);
                 }
             }
-        } else if (id == NotificationCenter.userPhotosLoaded) {
-            int guid = (Integer) args[4];
-            int uid = (Integer) args[0];
-            if (avatarsUserId == uid && classGuid == guid) {
-                boolean fromCache = (Boolean) args[3];
-
-                int setToImage = -1;
-                ArrayList<TLRPC.Photo> photos = (ArrayList<TLRPC.Photo>) args[5];
-                if (photos.isEmpty()) {
-                    return;
-                }
-                imagesArrLocationsSizes.clear();
-                for (TLRPC.Photo photo : photos) {
-                    if (photo == null || photo instanceof TLRPC.TL_photoEmpty || photo.sizes == null) {
-                        continue;
-                    }
-                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 640);
-                    if (sizeFull != null) {
-                        imagesArrLocationsSizes.add(sizeFull.size);
-                    }
-                }
-
-                menuItem.hideSubItem(gallery_menu_delete);
-                needSearchImageInArr = false;
-                currentIndex = -1;
-                if (setToImage != -1) {
-                    setImageIndex(setToImage, true);
-                } else {
-                    imagesArrLocationsSizes.add(0, 0);
-                    setImageIndex(0, true);
-                }
-                if (fromCache) {
-                    MessagesController.getInstance().loadUserPhotos(avatarsUserId, 0, 80, 0, false, classGuid);
-                }
-            }
-        } else if (id == NotificationCenter.mediaCountDidLoaded) {
-            long uid = (Long) args[0];
-            if (uid == currentDialogId) {
-                if ((int) currentDialogId != 0 && (Boolean) args[2]) {
-                    SharedMediaQuery.getMediaCount(currentDialogId, SharedMediaQuery.MEDIA_PHOTOVIDEO, classGuid, false);
-                }
-                totalImagesCount = (Integer) args[1];
-                if (needSearchImageInArr && isFirstLoading) {
-                    isFirstLoading = false;
-                    loadingMoreImages = true;
-                    SharedMediaQuery.loadMedia(currentDialogId, 0, 100, 0, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
-                }
-            }
-        } else if (id == NotificationCenter.mediaDidLoaded) {
-
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (captionTextView != null) {
                 captionTextView.invalidate();
@@ -1619,8 +1561,6 @@ private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
         currentFileNames[0] = null;
         currentFileNames[1] = null;
         currentFileNames[2] = null;
-        avatarsUserId = 0;
-        currentDialogId = 0;
         totalImagesCount = 0;
         currentEditMode = 0;
         isFirstLoading = true;
@@ -1696,8 +1636,6 @@ private void onPhotoShow(final ArrayList<Object> photos, int index, final PlaceP
         currentFileNames[0] = null;
         currentFileNames[1] = null;
         currentFileNames[2] = null;
-        avatarsUserId = 0;
-        currentDialogId = 0;
         totalImagesCount = 0;
         currentEditMode = 0;
         isFirstLoading = true;
@@ -1785,11 +1723,6 @@ private void onPhotoShow(final ArrayList<Object> photos, int index, final PlaceP
             updateSelectedCount();
         }
 
-        if (currentDialogId != 0 && totalImagesCount == 0) {
-            SharedMediaQuery.getMediaCount(currentDialogId, SharedMediaQuery.MEDIA_PHOTOVIDEO, classGuid, true);
-        } else if (avatarsUserId != 0) {
-            MessagesController.getInstance().loadUserPhotos(avatarsUserId, 0, 80, 0, true, classGuid);
-        }
     }
 
     //TODO-aragats new
@@ -2720,8 +2653,6 @@ private void onPhotoShow(final Post post, final PlaceProviderObject object) {
         currentFileNames[0] = null;
         currentFileNames[1] = null;
         currentFileNames[2] = null;
-        avatarsUserId = 0;
-        currentDialogId = 0;
         totalImagesCount = 0;
         isFirstLoading = true;
         needSearchImageInArr = false;
