diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index debd27ed9..e145bda5a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -16,6 +16,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Outline;
@@ -24,7 +25,6 @@
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
-import androidx.annotation.Keep;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
@@ -37,8 +37,12 @@
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
 
+import androidx.annotation.Keep;
+import androidx.appcompat.widget.AppCompatImageView;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
@@ -183,6 +187,7 @@ public boolean dispatchTouchEvent(MotionEvent ev) {
     private Runnable onOpenAnimationEndRunnable;
     private boolean useAlphaAnimations;
     private View backgroundView;
+    private ImageView themeTransitionView;
     private boolean removeActionBarExtraHeight;
     private Runnable animationRunnable;
 
@@ -207,6 +212,11 @@ public ActionBarLayout(Context context) {
             headerShadowDrawable = getResources().getDrawable(R.drawable.header_shadow).mutate();
             scrimPaint = new Paint();
         }
+
+        themeTransitionView = new AppCompatImageView(context);
+        themeTransitionView.setVisibility(GONE);
+        themeTransitionView.setClickable(true);
+        addView(themeTransitionView);
     }
 
     public void init(ArrayList<BaseFragment> stack) {
@@ -1297,7 +1307,7 @@ public void setThemeAnimationValue(float value) {
                     g = Math.min(255, (int) (gS + (gE - gS) * value));
                     b = Math.min(255, (int) (bS + (bE - bS) * value));
                     int color = Color.argb(a, r, g, b);
-                    Theme.setAnimatedColor(themeAnimatorDescriptions[j][i].getCurrentKey(), color);
+                    Theme.setAnimatedColor(themeAnimatorDescriptions[j][i].currentKey, color);
                     themeAnimatorDescriptions[j][i].setColor(color, false, false);
                 }
                 if (themeAnimatorDelegate[j] != null) {
@@ -1324,7 +1334,7 @@ public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
             themeAnimatorSet = null;
         }
         boolean startAnimation = false;
-        for (int i = 0; i < 2; i++) {
+        for (int i = 0; i < 1 /* todo 2 */; i++) {
             BaseFragment fragment;
             if (i == 0) {
                 fragment = getLastFragment();
@@ -1350,6 +1360,16 @@ public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
                     }
                 }
                 if (i == 0) {
+                    Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(),
+                            Bitmap.Config.ARGB_8888);
+                    bitmap.setHasAlpha(false);
+                    Canvas canvas = new Canvas(bitmap);
+                    draw(canvas);
+
+                    themeTransitionView.setImageBitmap(bitmap);
+                    themeTransitionView.setVisibility(VISIBLE);
+                    themeTransitionView.bringToFront();
+
                     Theme.applyTheme(theme, nightTheme);
                 }
                 animateEndColors[i] = new int[themeAnimatorDescriptions[i].length];
@@ -1372,20 +1392,16 @@ public void onAnimationEnd(Animator animation) {
                         }
                         Theme.setAnimatingColor(false);
                         themeAnimatorSet = null;
-                    }
-                }
-
-                @Override
-                public void onAnimationCancel(Animator animation) {
-                    if (animation.equals(themeAnimatorSet)) {
-                        for (int a = 0; a < 2; a++) {
-                            themeAnimatorDescriptions[a] = null;
-                            animateStartColors[a] = null;
-                            animateEndColors[a] = null;
-                            themeAnimatorDelegate[a] = null;
-                        }
-                        Theme.setAnimatingColor(false);
-                        themeAnimatorSet = null;
+                        themeTransitionView.animate()
+                                .alpha(0f)
+                                .setDuration(200)
+                                .setStartDelay(Theme.isWallpaperAColor() ? 0 : 200)
+                                .withEndAction(() -> {
+                                    themeTransitionView.setImageBitmap(null);
+                                    themeTransitionView.setVisibility(GONE);
+                                    themeTransitionView.setAlpha(1f);
+                                })
+                                .start();
                     }
                 }
             });
@@ -1397,7 +1413,7 @@ public void onAnimationCancel(Animator animation) {
             }
             Theme.setAnimatingColor(true);
             themeAnimatorSet.playTogether(ObjectAnimator.ofFloat(this, "themeAnimationValue", 0.0f, 1.0f));
-            themeAnimatorSet.setDuration(200);
+            themeAnimatorSet.setDuration(0);
             themeAnimatorSet.start();
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
index bdbda5b4a..62f5c01ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -20,7 +20,6 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
-import androidx.annotation.Keep;
 import android.view.DisplayCutout;
 import android.view.Gravity;
 import android.view.MotionEvent;
@@ -33,6 +32,8 @@
 import android.widget.FrameLayout;
 import android.widget.ListView;
 
+import androidx.annotation.Keep;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
@@ -76,6 +77,8 @@
     private boolean drawerOpened;
     private boolean allowDrawContent = true;
 
+    private int dp20 = AndroidUtilities.dp(20);
+
     public DrawerLayoutContainer(Context context) {
         super(context);
 
@@ -527,7 +530,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                 canvas.drawRect(clipLeft, 0, clipRight, getHeight(), scrimPaint);
             }
         } else if (shadowLeft != null) {
-            final float alpha = Math.max(0, Math.min(drawerPosition / AndroidUtilities.dp(20), 1.0f));
+            final float alpha = Math.max(0, Math.min(drawerPosition / dp20, 1.0f));
             if (alpha != 0) {
                 shadowLeft.setBounds((int) drawerPosition, child.getTop(), (int) drawerPosition + shadowLeft.getIntrinsicWidth(), child.getBottom());
                 shadowLeft.setAlpha((int) (0xff * alpha));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index a64e19463..ff579a379 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -4064,6 +4064,10 @@ public static void setSelectorDrawableColor(Drawable drawable, int color, boolea
         }
     }
 
+    public static boolean isWallpaperAColor() {
+        return currentColors.containsKey(key_chat_wallpaper) && themedWallpaperFileOffset <= 0;
+    }
+
     public static boolean hasWallpaperFromTheme() {
         return currentColors.containsKey(key_chat_wallpaper) || themedWallpaperFileOffset > 0;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ThemeDescription.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ThemeDescription.java
index 5f3751214..8b1134b0d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ThemeDescription.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ThemeDescription.java
@@ -27,6 +27,8 @@
 import android.widget.ScrollView;
 import android.widget.TextView;
 
+import androidx.viewpager.widget.ViewPager;
+
 import com.airbnb.lottie.LottieAnimationView;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;
@@ -63,8 +65,6 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
-import androidx.viewpager.widget.ViewPager;
-
 public class ThemeDescription {
 
     public static int FLAG_BACKGROUND                   = 0x00000001;
@@ -104,7 +104,7 @@
     private Paint[] paintToUpdate;
     private Drawable[] drawablesToUpdate;
     private Class[] listClasses;
-    private String currentKey;
+    public String currentKey;
     private String lottieLayerName;
     private ThemeDescriptionDelegate delegate;
     private int previousColor;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index 01892633d..8347f577d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -34,12 +34,6 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Vibrator;
-
-import androidx.core.content.FileProvider;
-import androidx.recyclerview.widget.DefaultItemAnimator;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.text.InputType;
 import android.text.TextPaint;
 import android.text.TextUtils;
@@ -54,6 +48,11 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.core.content.FileProvider;
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildConfig;
@@ -258,59 +257,36 @@ public TextSizeCell(Context context) {
 
             messagesContainer = new LinearLayout(context) {
 
-                private Drawable backgroundDrawable;
-                private Drawable oldBackgroundDrawable;
-
                 @Override
                 protected void onDraw(Canvas canvas) {
-                    Drawable newDrawable = Theme.getCachedWallpaperNonBlocking();
-                    if (newDrawable != backgroundDrawable && newDrawable != null) {
-                        if (Theme.isAnimatingColor()) {
-                            oldBackgroundDrawable = backgroundDrawable;
-                        }
-                        backgroundDrawable = newDrawable;
-                    }
-                    float themeAnimationValue = parentLayout.getThemeAnimationValue();
-                    for (int a = 0; a < 2; a++) {
-                        Drawable drawable = a == 0 ? oldBackgroundDrawable : backgroundDrawable;
-                        if (drawable == null) {
-                            continue;
-                        }
-                        if (a == 1 && oldBackgroundDrawable != null && parentLayout != null) {
-                            drawable.setAlpha((int) (255 * themeAnimationValue));
+                    Drawable backgroundDrawable = Theme.getCachedWallpaperNonBlocking();
+                    if (backgroundDrawable == null) return;
+                    if (backgroundDrawable instanceof ColorDrawable) {
+                        backgroundDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
+                        backgroundDrawable.draw(canvas);
+                    } else if (backgroundDrawable instanceof BitmapDrawable) {
+                        BitmapDrawable bitmapDrawable = (BitmapDrawable) backgroundDrawable;
+                        if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {
+                            canvas.save();
+                            float scale = 2.0f / AndroidUtilities.density;
+                            canvas.scale(scale, scale);
+                            backgroundDrawable.setBounds(0, 0, (int) Math.ceil(getMeasuredWidth() / scale), (int) Math.ceil(getMeasuredHeight() / scale));
+                            backgroundDrawable.draw(canvas);
+                            canvas.restore();
                         } else {
-                            drawable.setAlpha(255);
-                        }
-                        if (drawable instanceof ColorDrawable) {
-                            drawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
-                            drawable.draw(canvas);
-                        } else if (drawable instanceof BitmapDrawable) {
-                            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
-                            if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {
-                                canvas.save();
-                                float scale = 2.0f / AndroidUtilities.density;
-                                canvas.scale(scale, scale);
-                                drawable.setBounds(0, 0, (int) Math.ceil(getMeasuredWidth() / scale), (int) Math.ceil(getMeasuredHeight() / scale));
-                                drawable.draw(canvas);
-                                canvas.restore();
-                            } else {
-                                int viewHeight = getMeasuredHeight();
-                                float scaleX = (float) getMeasuredWidth() / (float) drawable.getIntrinsicWidth();
-                                float scaleY = (float) (viewHeight) / (float) drawable.getIntrinsicHeight();
-                                float scale = scaleX < scaleY ? scaleY : scaleX;
-                                int width = (int) Math.ceil(drawable.getIntrinsicWidth() * scale);
-                                int height = (int) Math.ceil(drawable.getIntrinsicHeight() * scale);
-                                int x = (getMeasuredWidth() - width) / 2;
-                                int y = (viewHeight - height) / 2;
-                                canvas.save();
-                                canvas.clipRect(0, 0, width, getMeasuredHeight());
-                                drawable.setBounds(x, y, x + width, y + height);
-                                drawable.draw(canvas);
-                                canvas.restore();
-                            }
-                        }
-                        if (a == 0 && oldBackgroundDrawable != null && themeAnimationValue >= 1.0f) {
-                            oldBackgroundDrawable = null;
+                            int viewHeight = getMeasuredHeight();
+                            float scaleX = (float) getMeasuredWidth() / (float) backgroundDrawable.getIntrinsicWidth();
+                            float scaleY = (float) (viewHeight) / (float) backgroundDrawable.getIntrinsicHeight();
+                            float scale = scaleX < scaleY ? scaleY : scaleX;
+                            int width = (int) Math.ceil(backgroundDrawable.getIntrinsicWidth() * scale);
+                            int height = (int) Math.ceil(backgroundDrawable.getIntrinsicHeight() * scale);
+                            int x = (getMeasuredWidth() - width) / 2;
+                            int y = (viewHeight - height) / 2;
+                            canvas.save();
+                            canvas.clipRect(0, 0, width, getMeasuredHeight());
+                            backgroundDrawable.setBounds(x, y, x + width, y + height);
+                            backgroundDrawable.draw(canvas);
+                            canvas.restore();
                         }
                     }
                     shadowDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
@@ -1259,11 +1235,11 @@ public void setTheme(Theme.ThemeInfo theme, boolean last, boolean first) {
         @Override
         protected void onAttachedToWindow() {
             super.onAttachedToWindow();
-            button.setChecked(themeInfo == Theme.getCurrentTheme(), false);
+            updateCurrentThemeCheck();
         }
 
         public void updateCurrentThemeCheck() {
-            button.setChecked(themeInfo == Theme.getCurrentTheme(), true);
+            button.setChecked(themeInfo == Theme.getCurrentTheme(), false);
         }
 
         @Override
