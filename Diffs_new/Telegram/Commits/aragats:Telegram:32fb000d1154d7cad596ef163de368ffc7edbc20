diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 1b23a54c0..51db42e37 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -26,6 +26,7 @@
 import android.provider.MediaStore;
 
 import ru.aragats.wgo.ApplicationLoader;
+
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -893,6 +894,7 @@ public ImageLoader() {
             runtimeHack = new VMRuntimeHack();
             cacheSize = 1024 * 1024 * 3;
         }
+//        cacheSize = cacheSize * 10; // We can increase the size of cache if needed
         memCache = new LruCache(cacheSize) {
             @Override
             protected int sizeOf(String key, BitmapDrawable bitmap) {
@@ -1307,13 +1309,13 @@ public void run() {
 //                                    FileLoader.getInstance().loadFile((TLRPC.Document) imageLocation, true, true);
 //                                }
 //                            } else {
-                                String file = Utilities.MD5(httpLocation);
-                                File cacheDir = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE);
-                                img.tempFilePath = new File(cacheDir, file + "_temp.jpg");
-                                img.finalFilePath = cacheFile;
-                                img.httpTask = new HttpImageTask(img, size);
-                                httpTasks.add(img.httpTask);
-                                runHttpTasks(false);
+                            String file = Utilities.MD5(httpLocation);
+                            File cacheDir = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE);
+                            img.tempFilePath = new File(cacheDir, file + "_temp.jpg");
+                            img.finalFilePath = cacheFile;
+                            img.httpTask = new HttpImageTask(img, size);
+                            httpTasks.add(img.httpTask);
+                            runHttpTasks(false);
 //                            }
                         }
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 0d0a60f31..01bc0cddf 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -10,8 +10,6 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.location.Location;
 
 import com.github.davidmoten.rtree.Entry;
@@ -26,7 +24,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.Date;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
@@ -251,18 +248,22 @@ private void loadLocalPosts(final PostRequest postRequest, final boolean reload)
         List<Entry<Post, Geometry>> entries = rTree.search(
                 Geometries.point(postRequest.getLongitude(), postRequest.getLatitude()), Constants.MAX_DISTANCE_DEGREE)
                 .toList().toBlocking().single();
-        for (Entry<Post, Geometry> entry : entries) {
-            Post post = entry.value();
-            results.add(post);
-        }
+
         int start = postRequest.getOffset();
         int end = postRequest.getOffset() + postRequest.getCount();
-        if (end > results.size()) {
-            end = results.size();
+        if (end > entries.size()) {
+            end = entries.size();
+        }
+        if (!entries.isEmpty()) {
+            entries = entries.subList(start, end);
         }
-        if (!results.isEmpty()) {
-            results = results.subList(start, end);
+
+        for (Entry<Post, Geometry> entry : entries) {
+            Post post = entry.value();
+            results.add(post);
         }
+
+
         PostResponse postResponse = new PostResponse();
         postResponse.setPosts(results);
         processLoadedPosts(postResponse, reload);
@@ -426,20 +427,22 @@ public Post createPost(String dir, String photo, double latitude, double longitu
         image.setUrl(photoUrl);
         image.setSize(file.length());
 
-        BitmapFactory.Options options = new BitmapFactory.Options();
+//        BitmapFactory.Options options = new BitmapFactory.Options();
         // TODO THIS Do not allow decode the file.
 //            options.inJustDecodeBounds = true;
 
 //Returns null, sizes are in the options variable
-        Bitmap bitmap = BitmapFactory.decodeFile(photoUrl, options);
-        int width = options.outWidth;
-        int height = options.outHeight;
+//        Bitmap bitmap = BitmapFactory.decodeFile(photoUrl, options);
+//        int width = options.outWidth;
+//        int height = options.outHeight;
 //If you want, the MIME type will also be decoded (if possible)
-        String type = options.outMimeType;
+//        String type = options.outMimeType;
 //            String type = getMimeType(photoUrl
 
-        image.setWidth(width);
-        image.setHeight(height);
+
+
+        image.setWidth(AndroidUtilities.getPhotoSize());
+        image.setHeight(AndroidUtilities.getPhotoSize());
         post.setImages(Arrays.asList(image, image));
         return post;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index d0b90fe9c..3f3803bdb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -8,12 +8,16 @@
 
 package org.telegram.ui.Cells;
 
+import android.content.ContentResolver;
 import android.content.Context;
+import android.database.Cursor;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.drawable.Drawable;
 import android.location.Location;
 import android.os.Build;
+import android.provider.MediaStore;
 import android.text.Layout;
 import android.text.Spannable;
 import android.text.StaticLayout;
@@ -31,11 +35,6 @@
 import org.telegram.android.PostsController;
 import org.telegram.android.location.LocationManagerHelper;
 import org.telegram.messenger.FileLog;
-
-import ru.aragats.wgo.dto.Coordinates;
-import ru.aragats.wgo.dto.Image;
-import ru.aragats.wgo.dto.Post;
-
 import org.telegram.messenger.object.TextLayoutBlock;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.URLSpanNoUnderline;
@@ -44,6 +43,9 @@
 import java.util.Locale;
 
 import ru.aragats.wgo.R;
+import ru.aragats.wgo.dto.Coordinates;
+import ru.aragats.wgo.dto.Image;
+import ru.aragats.wgo.dto.Post;
 
 public class PostCell extends BaseCell {
 
@@ -792,8 +794,39 @@ public void update(int mask) {
 
         //2. from postMediaCell . works faster
         int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
+        //TODO mock. above correct version.
+//        int size = (int) (800 / AndroidUtilities.density);
+//        size = size / 2; // TODO it reduces the size and we have less sized image to display in UI. !!!
+        //TODO size parameter in filter influences on loading time. Than less than faster. File size does not effect. ??
         photoImage.setImage(post.getPreviewImageUrl(), String.format(Locale.US, "%d_%d", size, size), imageDrawable, null, (int) post.getPreviewImage().getSize()); // TODO fix it. Create drawable.
 
+
+        //3 method Thumbnail
+//        Bitmap bitmap = MediaStore.Images.Thumbnails.getThumbnail(
+//                getContentResolver(), selectedImageUri,
+//                MediaStore.Images.Thumbnails.MINI_KIND,
+//                (BitmapFactory.Options) null );
+//
+
+//        Uri uri = Uri.fromFile(new File(post.getPreviewImageUrl()));
+//        uri.getLastPathSegment();
+//        Cursor cursor = MediaStore.Images.Thumbnails.queryMiniThumbnail(
+//                getContext().getContentResolver(), 0,
+//                MediaStore.Images.Thumbnails.MINI_KIND,
+//                null);
+//        if (cursor != null && cursor.getCount() > 0) {
+//            cursor.moveToFirst();//**EDIT**
+////            String uri = cursor.getString( cursor.getColumnIndex( MediaStore.Images.Thumbnails.DATA ) );
+//        }
+//        Bitmap bitmap = getThumbnail(getContext().getContentResolver(), post.getPreviewImageUrl());
+
+        //5
+
+//        Bitmap bitmap1 = ThumbnailUtils.extractThumbnail(BitmapFactory.decodeFile(post.getPreviewImageUrl()), 200, 200);
+//        if (bitmap1 != null) {
+//            photoImage.setImageBitmap(bitmap1);
+//        }
+
         //Photo
 
         //TODO was ?
@@ -806,6 +839,19 @@ public void update(int mask) {
         invalidate();
     }
 
+    public Bitmap getThumbnail(ContentResolver cr, String path) {
+
+        Cursor ca = cr.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, new String[]{MediaStore.MediaColumns._ID}, MediaStore.MediaColumns.DATA + "=?", new String[]{path}, null);
+        if (ca != null && ca.moveToFirst()) {
+            int id = ca.getInt(ca.getColumnIndex(MediaStore.MediaColumns._ID));
+            ca.close();
+            return MediaStore.Images.Thumbnails.getThumbnail(cr, id, MediaStore.Images.Thumbnails.MICRO_KIND, null);
+        }
+
+//        ca.close();
+        return null;
+
+    }
 
 //    progressView = new ProgressBar(context);
 //    progressView.setVisibility(View.INVISIBLE);
