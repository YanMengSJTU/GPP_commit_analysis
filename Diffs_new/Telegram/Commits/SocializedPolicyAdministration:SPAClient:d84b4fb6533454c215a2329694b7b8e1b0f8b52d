diff --git a/TMessagesProj/src/main/java/org/paillier/PaillierPrivateKey.java b/TMessagesProj/src/main/java/org/paillier/PaillierPrivateKey.java
new file mode 100644
index 000000000..e05cfe040
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/paillier/PaillierPrivateKey.java
@@ -0,0 +1,25 @@
+package org.paillier;
+
+import java.math.BigInteger;
+
+/**
+ * Created by gzq on 16-1-13.
+ */
+public class PaillierPrivateKey {
+    private BigInteger lambda;
+    private BigInteger mu;
+    private BigInteger n;
+    private BigInteger nSquare;
+    public PaillierPrivateKey(BigInteger lambda, BigInteger mu, BigInteger n) {
+        this.lambda = lambda;
+        this.mu = mu;
+        this.n = n;
+        nSquare = n.pow(2);
+    }
+
+    public BigInteger decrypt(BigInteger c) {
+        BigInteger result0 = c.modPow(lambda, nSquare).subtract(BigInteger.ONE);
+        BigInteger result1 = result0.divide(n).multiply(mu);
+        return result1.mod(n);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
index 5576addfa..0810c0260 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
@@ -9,6 +9,7 @@
 import android.util.Log;
 import android.widget.Toast;
 
+import org.paillier.PaillierPrivateKey;
 import org.telegram.messenger.volley.Request;
 import org.telegram.messenger.volley.RequestQueue;
 import org.telegram.messenger.volley.Response;
@@ -17,7 +18,9 @@
 import org.telegram.messenger.volley.toolbox.Volley;
 import org.telegram.tgnet.TLRPC;
 
+import java.math.BigInteger;
 import java.util.HashMap;
+import java.util.LinkedList;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
@@ -53,17 +56,73 @@ public void run() {
                         @Override
                         public void onResponse(String response) {
                             if (response.compareTo("ok") != 0) {
-                                CharSequence text = "Get an SPA request, please go to SPA setting to response it";
-                                int duration = Toast.LENGTH_SHORT;
-                                Toast toast = Toast.makeText(context, text, duration);
-                                toast.show();
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                Set<String> set = preferences.getStringSet("spa_request_poll_service", new TreeSet<String>());
-                                set.add(response);
-                                editor.putStringSet("spa_request_poll_service", set);
-                                editor.commit();
-                                Log.v("spa", "get keys: " + response);
+                                if (response.startsWith("merged:")) {
+                                    CharSequence text = "Get the merged result";
+                                    int duration = Toast.LENGTH_SHORT;
+                                    Toast toast = Toast.makeText(context, text, duration);
+                                    toast.show();
+                                    // remove "merged:"
+                                    String rawResult = response.substring(7);
+                                    String[] results = rawResult.split(",");
+                                    String[] policies =results[0].split(" ");
+                                    String[] settings = results[1].split(" ");
+                                    int valuesSize = results.length;
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    PaillierPrivateKey paillierPrivateKey =
+                                            new PaillierPrivateKey(new BigInteger(preferences.getString("paillier_lambda", "0")),
+                                                    new BigInteger(preferences.getString("paillier_mu", "0")),
+                                                    new BigInteger(preferences.getString("paillier_n", "0")));
+                                    for (int i = 2, j = 0; i < valuesSize; ++i, ++j) {
+                                        if (policies[j].compareTo("MajorityPreferred") == 0
+                                                || policies[j].compareTo("MinorityPreferred") == 0) {
+                                            String[] values = results[i].split(" ");
+                                            if (settings[j].compareTo("last_seen_setting") == 0) {
+                                                // If axay is neg number, the result is n + axay, which is a big number.
+                                                BigInteger a1a2 = paillierPrivateKey.decrypt(new BigInteger(values[0]));
+                                                BigInteger a1a3 = paillierPrivateKey.decrypt(new BigInteger(values[1]));
+                                                BigInteger a2a3 = paillierPrivateKey.decrypt(new BigInteger(values[2]));
+                                                if (a1a2.compareTo(BigInteger.ZERO) <= 0) {
+                                                    if (a2a3.compareTo(BigInteger.ZERO) <= 0) {
+                                                        editor.putInt(settings[j] + "_result", 3);
+                                                    } else {
+                                                        editor.putInt(settings[j] + "_result", 2);
+                                                    }
+                                                } else {
+                                                    if (a1a3.compareTo(BigInteger.ZERO) <= 0) {
+                                                        editor.putInt(settings[j] + "_result", 3);
+                                                    } else {
+                                                        editor.putInt(settings[j] + "_result", 1);
+                                                    }
+                                                }
+                                            } else {
+                                                BigInteger a1a2 = paillierPrivateKey.decrypt(new BigInteger(values[0]));
+                                                if (a1a2.compareTo(BigInteger.ZERO) <= 0) {
+                                                    editor.putInt(settings[j] + "_result", 2);
+                                                } else {
+                                                    editor.putInt(settings[j] + "_result", 1);
+                                                }
+                                            }
+                                        } else {
+                                            String[] values = results[i].split(" ");
+                                            BigInteger value = paillierPrivateKey.decrypt(new BigInteger(values[0]));
+                                            BigInteger weight = paillierPrivateKey.decrypt(new BigInteger(values[1]));
+                                            editor.putInt(settings[j] + "_result", value.divide(weight).intValue());
+                                        }
+                                    }
+                                } else {
+                                    CharSequence text = "Get an SPA request, please go to SPA setting to response it";
+                                    int duration = Toast.LENGTH_SHORT;
+                                    Toast toast = Toast.makeText(context, text, duration);
+                                    toast.show();
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    Set<String> set = preferences.getStringSet("spa_request_poll_service", new TreeSet<String>());
+                                    set.add(response);
+                                    editor.putStringSet("spa_request_poll_service", set);
+                                    editor.commit();
+                                    Log.v("spa", "get keys: " + response);
+                                }
                             } else {
                             }
                         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index e66f29f5b..4cd499057 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -10,6 +10,7 @@
 
 import android.animation.Animator;
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.ProgressDialog;
@@ -55,6 +56,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.SPAConfig;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -79,6 +81,7 @@
 import java.util.Set;
 import java.util.Timer;
 import java.util.TimerTask;
+import java.util.prefs.PreferenceChangeEvent;
 
 public class LoginActivity extends BaseFragment {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
index c9642c194..cde0e5687 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
@@ -22,6 +22,7 @@
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.paillier.PaillierPrivateKey;
 import org.paillier.PaillierPublicKey;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.ApplicationLoader;
@@ -168,12 +169,12 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     boolean containsLastSeen = preferences.contains("last_seen_setting");
                     boolean containsPasscodeLock = preferences.contains("passcode_lock_setting");
                     boolean containsAverage = preferences.contains("average_policy");
-                    boolean containsMinMax = preferences.contains("maximum_minimum_policy");
+                    // boolean containsMinMax = preferences.contains("maximum_minimum_policy");
                     if (usersSize >= leastNumberForSendSPARequest &&
                             (containsLastSeen || containsPasscodeLock
-                            || containsAverage || containsMinMax)) {
+                            || containsAverage)) {
                         if (sendSPARequest(containsLastSeen, containsPasscodeLock,
-                                containsAverage, containsMinMax, context)) {
+                                containsAverage, context)) {
                             // TODO: 15-11-25 Toast success
                         } else {
                             // TODO: 15-11-25 Toast fail
@@ -228,7 +229,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
     }
 
     private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscodeLock,
-                                   boolean containsAverage, boolean containsMinMax, final Context context) {
+                                   boolean containsAverage, final Context context) {
         SharedPreferences preferences =
                 ApplicationLoader. applicationContext.
                         getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
@@ -252,17 +253,17 @@ private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscod
             settings.add("average");
             policies.add("Average");
         }
-        if (containsMinMax) {
-            settings.add("maximum_minimum_policy");
-            policies.add(preferences.getString("maximum_minimum_policy_policy", "MaximumValue"));
-        }
         TLRPC.User user = UserConfig.getCurrentUser();
         int respondentsSize = usersPhoneAndWeight.size();
         String paillierN = preferences.getString("paillier_n", "1");
         String paillierG = preferences.getString("paillier_g", "1");
+        String paillierM = preferences.getString("paillier_mu", "0");
+        String paillierL = preferences.getString("paillier_lambda", "0");
+
         String opeK = preferences.getString("ope_key", "1");
         PaillierPublicKey pk = new PaillierPublicKey(new BigInteger(paillierN),
                 new BigInteger(paillierG));
+        PaillierPrivateKey pp = new PaillierPrivateKey(new BigInteger(paillierL), new BigInteger(paillierM), new BigInteger(paillierN));
         for (int i = 0; i < respondentsSize; ++i) {
             String[] cu = usersPhoneAndWeight.get(i);
             respondentsId.add(cu[0]);
@@ -403,7 +404,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     view = new TextSettingsCell(mContext);
                     view.setBackgroundColor(0xffffffff);
                     TextSettingsCell textCell = (TextSettingsCell) view;
-                    textCell.setText(LocaleController.getString("SPASendRequest", R.string.SPAReceivedRequest), true);
+                    textCell.setText(LocaleController.getString("SPASendRequest", R.string.SPASendRequest), true);
                 }
             }
             return view;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAReceivedSPARequest.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAReceivedSPARequest.java
index 43b0aba13..ab6b5a807 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPAReceivedSPARequest.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAReceivedSPARequest.java
@@ -41,6 +41,7 @@ public boolean onFragmentCreate() {
         super.onFragmentCreate();
 
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
         Set<String> set = preferences.getStringSet("spa_request_poll_service", new TreeSet<String>());
         listSize = set.size();
         requests = new String[listSize];
@@ -167,7 +168,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
             String[] request = requests[i].split(" ");
             String userId = request[0];
-            textCell.setText("request from: " + userId, true);
+            textCell.setText("Request from: " + userId, true);
 
             return view;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java b/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
index 43c4591d1..0f906f887 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
@@ -1,8 +1,10 @@
 package org.telegram.ui;
 
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
@@ -13,16 +15,19 @@
 import android.widget.Toast;
 
 import org.paillier.PaillierPublicKey;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.SPAConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.volley.Request;
 import org.telegram.messenger.volley.RequestQueue;
 import org.telegram.messenger.volley.Response;
 import org.telegram.messenger.volley.VolleyError;
 import org.telegram.messenger.volley.toolbox.StringRequest;
 import org.telegram.messenger.volley.toolbox.Volley;
+import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
@@ -33,6 +38,8 @@
 import java.math.BigInteger;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeSet;
+import java.util.prefs.PreferenceChangeEvent;
 
 /**
  * Created by gzq on 16-1-12.
@@ -49,6 +56,7 @@
     private String ope_key;
     private String requester;
     private String weight;
+    private String spa_policies;
     private int settingSize;
 
     public SPARequest(Bundle args) {
@@ -66,6 +74,7 @@ public boolean onFragmentCreate() {
             paillier_g = request[3];
             ope_key = request[4];
             settings = request[5].split(",");
+            spa_policies = request[6];
             settingSize = settings.length;
             settingsValues = new int[settingSize];
             clickValues = new boolean[settingSize];
@@ -145,7 +154,7 @@ public void onClick(DialogInterface dialogInterface, int j) {
                         final NumberPicker numberPicker = new NumberPicker(getParentActivity());
                         numberPicker.setMinValue(10);
                         numberPicker.setMaxValue(30);
-                        numberPicker.setValue(MessagesController.getInstance().fontSize);
+                        numberPicker.setValue(15);
                         builder.setView(numberPicker);
 
                         builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
@@ -171,15 +180,15 @@ public void onClick(DialogInterface dialog, int which) {
                     for (int j = 0; j < settingSize; ++j) {
                         String setting = settings[j];
                         if (setting.compareTo("last_seen_setting") == 0) {
-                            if (settingsValues[j] == 0x001) {
+                            if (settingsValues[j] == 1) {
                                 values[j] = paillier.encrypt(new BigInteger("0")).toString()
                                         + " " + paillier.encrypt(new BigInteger("0")).toString()
                                         + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString();
-                            } else if (settingsValues[j] == 0x010) {
+                            } else if (settingsValues[j] == 2) {
                                 values[j] = paillier.encrypt(new BigInteger("0")).toString()
                                         + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
                                         + " " + paillier.encrypt(new BigInteger("0")).toString();
-                            } else if (settingsValues[j] == 0x100) {
+                            } else if (settingsValues[j] == 4) {
                                 values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
                                         + " " + paillier.encrypt(new BigInteger("0")).toString()
                                         + " " + paillier.encrypt(new BigInteger("0")).toString();
@@ -193,7 +202,8 @@ public void onClick(DialogInterface dialog, int which) {
                                         + " " + paillier.encrypt(new BigInteger("0")).toString();
                             }
                         } else if (setting.compareTo("average") == 0) {
-                            values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("" +settingsValues[j])).toString();
+                            values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("" +settingsValues[j])).toString()
+                                    + " " + weight;
                         } else if (setting.compareTo("maximum_minimum_policy") == 0) {
                             values[j] = paillier.encrypt(new BigInteger("" + settingsValues[j])).toString();
                         }
@@ -211,17 +221,16 @@ public void onClick(DialogInterface dialog, int which) {
                             new Response.Listener<String>() {
                                 @Override
                                 public void onResponse(String response) {
-                                    if (response.compareTo("ok") == 0) {
-                                        CharSequence text = "Send request successfully";
-                                        int duration = Toast.LENGTH_SHORT;
-                                        Toast toast = Toast.makeText(context, text, duration);
-                                        toast.show();
-                                    } else {
-                                        CharSequence text = "You have send request before";
-                                        int duration = Toast.LENGTH_SHORT;
-                                        Toast toast = Toast.makeText(context, text, duration);
-                                        toast.show();
-                                    }
+                                    CharSequence text = "Send request successfully";
+                                    int duration = Toast.LENGTH_SHORT;
+                                    Toast toast = Toast.makeText(context, text, duration);
+                                    toast.show();
+
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    // For test
+                                    // editor.putStringSet("spa_request_poll_service", new TreeSet<String>());
+                                    editor.commit();
                                 }
                             },
                             new Response.ErrorListener() {
@@ -236,8 +245,20 @@ public void onErrorResponse(VolleyError error) {
                             }) {
                         protected Map<String, String> getParams() {
                             Map<String, String> params = new HashMap<>();
+                            TLRPC.User user = UserConfig.getCurrentUser();
+                            String respondent;
+                            if (user != null && user.phone != null && user.phone.length() != 0) {
+                                respondent = user.phone;
+                            } else {
+                                respondent = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
+                            }
                             params.put("values", req);
                             params.put("requester", requester);
+                            params.put("respondent", respondent);
+                            params.put("spa_policies", spa_policies);
+                            params.put("paillier_n", paillier_n);
+                            params.put("paillier_g", paillier_g);
+                            params.put("settings", request[5]);
                             return params;
                         }
                     };
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java
index 1770e1ea6..6d60ca250 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPASelectPrivacyItemsActivity.java
@@ -45,7 +45,7 @@
     private int rowCount;
     private int testSectionRow;
     private int average;
-    private int minMax;
+    // private int minMax;
     private int testDetailedRow;
 
     private final int LAST_SEEN = 0;
@@ -64,7 +64,7 @@ public boolean onFragmentCreate() {
         securityDetailRow = rowCount++;
         testSectionRow = rowCount++;
         average = rowCount++;
-        minMax = rowCount++;
+        //minMax = rowCount++;
         testDetailedRow = rowCount++;
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
@@ -137,7 +137,8 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(!passcode_setting);
                     }
-                } else if (i == minMax) {
+                }
+                /* else if (i == minMax) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
                     boolean passcode_setting = preferences.getBoolean("maximum_minimum_policy", false);
                     SharedPreferences.Editor editor = preferences.edit();
@@ -146,7 +147,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(!passcode_setting);
                     }
-                }
+                }*/
             }
         });
 
@@ -183,28 +184,6 @@ public void onClick(DialogInterface dialogInterface, int j) {
                         }
                     });
                     showDialog(builder.create());
-                } else if (i == minMax) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-
-                    CharSequence[] items = new CharSequence[]{
-                            LocaleController.getString("MaximumValue", R.string.MaximumValue),
-                            LocaleController.getString("MinimumValue", R.string.MinimumValue)
-                    };
-                    builder.setItems(items, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int j) {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
-                            SharedPreferences.Editor editor = preferences.edit();
-                            String selectOne = "maximum_minimum_policy_policy";
-                            if (j == 0) {
-                                editor.putString(selectOne, "MaximumValue");
-                            } else if (j == 1) {
-                                editor.putString(selectOne, "MinimumValue");
-                            }
-                            editor.commit();
-                        }
-                    });
-                    showDialog(builder.create());
                 } else {
                     // do nothing
                 }
@@ -250,7 +229,7 @@ public boolean areAllItemsEnabled() {
         public boolean isEnabled(int i) {
             return i == privacyDetailRow || i == privacySectionRow || i == lastSeenRow
                     || i == securityDetailRow || i == securitySectionRow || i == passcodeLock
-                    || i == testSectionRow || i == average || i == minMax || i == testDetailedRow;
+                    || i == testSectionRow || i == average || i == testDetailedRow;
         }
 
         @Override
@@ -289,9 +268,10 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setTextAndCheck(LocaleController.getString("Passcode", R.string.Passcode), preferences.getBoolean("passcode_lock_setting", false), false);
                 } else if (i == average) {
                     textCell.setTextAndCheck("Average Policy", preferences.getBoolean("average_policy", false), false);
-                } else if (i == minMax) {
-                    textCell.setTextAndCheck("Maximum/Minimum Policy", preferences.getBoolean("maximum_minimum_policy", false), false);
                 }
+                /* else if (i == minMax) {
+                    textCell.setTextAndCheck("Maximum/Minimum Policy", preferences.getBoolean("maximum_minimum_policy", false), false);
+                }*/
             } else if (type == 1) {
                 if (view == null) {
                     view = new TextInfoPrivacyCell(mContext);
@@ -325,7 +305,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         @Override
         public int getItemViewType(int position) {
             if (position == lastSeenRow || position == passcodeLock
-                    || position == average || position == minMax) {
+                    || position == average) {
                 return 0;
             } else if (position == privacyDetailRow || position == securityDetailRow
                     || position == testDetailedRow) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
index f3dac67b7..5c3c7d9de 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
@@ -53,6 +53,10 @@
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
+        // SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+        // SharedPreferences.Editor editor = preferences.edit();
+        // editor.clear();
+        // editor.commit();
 
         // need ContactsController.getInstance().loadPrivacySettings();
 
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 8aff2a97a..a39cf4dda 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -475,6 +475,7 @@
     <string name="SPASelectItems">Select SPA Items</string>
     <string name="SPAFriendsList">Friends List</string>
     <string name="SPAReceivedRequest">Received SPA Requests</string>
+    <string name="SPASendRequest">Send SPA Requests</string>
     <string name="SPAResult">SPA Result</string>
     <string name="SPAPrivacyDetailHelp">Choose privacy settings being proposed by SPA. Long tap for policy type.</string>
     <string name="SPASecurityDetailHelp">Choose security settings being proposed by SPA. Long tap for policy type.</string>
