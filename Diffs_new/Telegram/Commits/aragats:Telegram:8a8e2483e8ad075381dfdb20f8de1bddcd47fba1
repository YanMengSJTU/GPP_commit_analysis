diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 8d10e4230..b1f039de0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -84,6 +84,11 @@
         int getObserverTag();
     }
 
+    private static final String SELECTION_BUCKET_DISPALY_NAME = MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " = ?";
+    private static final String[] SELECTION_ARGS_CAMERA = new String[]{
+            "Camera"
+    };
+
 
     private static final String[] projectionPhotos = {
             MediaStore.Images.Media._ID,
@@ -904,147 +909,183 @@ public void run() {
         return null;
     }
 
+    //    http://blog.jbaysolutions.com/2015/10/15/accessing-images-in-android-external-memory/
+    public static void loadCameraPhotoAlbum(final int guid) {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                final ArrayList<AlbumEntry> albumsSorted = new ArrayList<>();
+                String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
+                String selection = SELECTION_BUCKET_DISPALY_NAME;
+                String[] selectionArgs = SELECTION_ARGS_CAMERA;
+                Integer cameraAlbumId = MediaController.loadAlbumPhotos(albumsSorted, cameraFolder, selection, selectionArgs, false);
+                final Integer cameraAlbumIdFinal = cameraAlbumId;
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.cameraAlbumDidLoaded, guid, albumsSorted, cameraAlbumIdFinal);
+                    }
+                });
+            }
+        }).start();
+    }
+
+
     public static void loadGalleryPhotosAlbums(final int guid) {
         new Thread(new Runnable() {
             @Override
             public void run() {
                 final ArrayList<AlbumEntry> albumsSorted = new ArrayList<>();
                 final ArrayList<AlbumEntry> videoAlbumsSorted = new ArrayList<>();
-                HashMap<Integer, AlbumEntry> albums = new HashMap<>();
-                AlbumEntry allPhotosAlbum = null;
                 String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
-                Integer cameraAlbumId = null;
-                Integer cameraAlbumVideoId = null;
+                Integer cameraAlbumId = MediaController.loadAlbumPhotos(albumsSorted, cameraFolder, "", null, true);
+                Integer cameraAlbumVideoId = MediaController.loadAlbumVideos(videoAlbumsSorted, cameraFolder);
+                final Integer cameraAlbumIdFinal = cameraAlbumId;
+                final Integer cameraAlbumVideoIdFinal = cameraAlbumVideoId;
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.albumsDidLoaded, guid, albumsSorted, cameraAlbumIdFinal, videoAlbumsSorted, cameraAlbumVideoIdFinal);
+                    }
+                });
+            }
+        }).start();
+    }
 
-                Cursor cursor = null;
-                try {
-                    cursor = MediaStore.Images.Media.query(ApplicationLoader.applicationContext.getContentResolver(), MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projectionPhotos, "", null, MediaStore.Images.Media.DATE_TAKEN + " DESC");
-                    if (cursor != null) {
-                        int imageIdColumn = cursor.getColumnIndex(MediaStore.Images.Media._ID);
-                        int bucketIdColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_ID);
-                        int bucketNameColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_DISPLAY_NAME);
-                        int dataColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATA);
-                        int dateColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATE_TAKEN);
-                        int orientationColumn = cursor.getColumnIndex(MediaStore.Images.Media.ORIENTATION);
-
-                        while (cursor.moveToNext()) {
-                            int imageId = cursor.getInt(imageIdColumn);
-                            int bucketId = cursor.getInt(bucketIdColumn);
-                            String bucketName = cursor.getString(bucketNameColumn);
-                            String path = cursor.getString(dataColumn);
-                            long dateTaken = cursor.getLong(dateColumn);
-                            int orientation = cursor.getInt(orientationColumn);
-
-                            if (path == null || path.length() == 0) {
-                                continue;
-                            }
+    private static Integer loadAlbumVideos(final ArrayList<AlbumEntry> videoAlbumsSorted, final String cameraFolder) {
+        Integer cameraAlbumVideoId = null;
+        AlbumEntry allPhotosAlbum = null;
+        HashMap<Integer, AlbumEntry> albums = new HashMap<>();
+        Cursor cursor = null;
+        try {
+            albums.clear();
+            allPhotosAlbum = null;
+            cursor = MediaStore.Images.Media.query(ApplicationLoader.applicationContext.getContentResolver(), MediaStore.Video.Media.EXTERNAL_CONTENT_URI, projectionVideo, "", null, MediaStore.Video.Media.DATE_TAKEN + " DESC");
+            if (cursor != null) {
+                int imageIdColumn = cursor.getColumnIndex(MediaStore.Video.Media._ID);
+                int bucketIdColumn = cursor.getColumnIndex(MediaStore.Video.Media.BUCKET_ID);
+                int bucketNameColumn = cursor.getColumnIndex(MediaStore.Video.Media.BUCKET_DISPLAY_NAME);
+                int dataColumn = cursor.getColumnIndex(MediaStore.Video.Media.DATA);
+                int dateColumn = cursor.getColumnIndex(MediaStore.Video.Media.DATE_TAKEN);
 
-                            PhotoEntry photoEntry = new PhotoEntry(bucketId, imageId, dateTaken, path, orientation, false);
+                while (cursor.moveToNext()) {
+                    int imageId = cursor.getInt(imageIdColumn);
+                    int bucketId = cursor.getInt(bucketIdColumn);
+                    String bucketName = cursor.getString(bucketNameColumn);
+                    String path = cursor.getString(dataColumn);
+                    long dateTaken = cursor.getLong(dateColumn);
+
+                    if (path == null || path.length() == 0) {
+                        continue;
+                    }
 
-                            if (allPhotosAlbum == null) {
-                                allPhotosAlbum = new AlbumEntry(0, LocaleController.getString("AllPhotos", R.string.AllPhotos), photoEntry, false);
-                                albumsSorted.add(0, allPhotosAlbum);
-                            }
-                            if (allPhotosAlbum != null) {
-                                allPhotosAlbum.addPhoto(photoEntry);
-                            }
+                    PhotoEntry photoEntry = new PhotoEntry(bucketId, imageId, dateTaken, path, 0, true);
 
-                            AlbumEntry albumEntry = albums.get(bucketId);
-                            if (albumEntry == null) {
-                                albumEntry = new AlbumEntry(bucketId, bucketName, photoEntry, false);
-                                albums.put(bucketId, albumEntry);
-                                if (cameraAlbumId == null && cameraFolder != null && path != null && path.startsWith(cameraFolder)) {
-                                    albumsSorted.add(0, albumEntry);
-                                    cameraAlbumId = bucketId;
-                                } else {
-                                    albumsSorted.add(albumEntry);
-                                }
-                            }
+                    if (allPhotosAlbum == null) {
+                        allPhotosAlbum = new AlbumEntry(0, LocaleController.getString("AllVideo", R.string.AllVideo), photoEntry, true);
+                        videoAlbumsSorted.add(0, allPhotosAlbum);
+                    }
+                    if (allPhotosAlbum != null) {
+                        allPhotosAlbum.addPhoto(photoEntry);
+                    }
 
-                            albumEntry.addPhoto(photoEntry);
+                    AlbumEntry albumEntry = albums.get(bucketId);
+                    if (albumEntry == null) {
+                        albumEntry = new AlbumEntry(bucketId, bucketName, photoEntry, true);
+                        albums.put(bucketId, albumEntry);
+                        if (cameraAlbumVideoId == null && cameraFolder != null && path != null && path.startsWith(cameraFolder)) {
+                            videoAlbumsSorted.add(0, albumEntry);
+                            cameraAlbumVideoId = bucketId;
+                        } else {
+                            videoAlbumsSorted.add(albumEntry);
                         }
                     }
+
+                    albumEntry.addPhoto(photoEntry);
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        } finally {
+            if (cursor != null) {
+                try {
+                    cursor.close();
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
-                } finally {
-                    if (cursor != null) {
-                        try {
-                            cursor.close();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    }
                 }
+            }
+        }
+        return cameraAlbumVideoId;
 
-                try {
-                    albums.clear();
-                    allPhotosAlbum = null;
-                    cursor = MediaStore.Images.Media.query(ApplicationLoader.applicationContext.getContentResolver(), MediaStore.Video.Media.EXTERNAL_CONTENT_URI, projectionVideo, "", null, MediaStore.Video.Media.DATE_TAKEN + " DESC");
-                    if (cursor != null) {
-                        int imageIdColumn = cursor.getColumnIndex(MediaStore.Video.Media._ID);
-                        int bucketIdColumn = cursor.getColumnIndex(MediaStore.Video.Media.BUCKET_ID);
-                        int bucketNameColumn = cursor.getColumnIndex(MediaStore.Video.Media.BUCKET_DISPLAY_NAME);
-                        int dataColumn = cursor.getColumnIndex(MediaStore.Video.Media.DATA);
-                        int dateColumn = cursor.getColumnIndex(MediaStore.Video.Media.DATE_TAKEN);
-
-                        while (cursor.moveToNext()) {
-                            int imageId = cursor.getInt(imageIdColumn);
-                            int bucketId = cursor.getInt(bucketIdColumn);
-                            String bucketName = cursor.getString(bucketNameColumn);
-                            String path = cursor.getString(dataColumn);
-                            long dateTaken = cursor.getLong(dateColumn);
-
-                            if (path == null || path.length() == 0) {
-                                continue;
-                            }
+    }
 
-                            PhotoEntry photoEntry = new PhotoEntry(bucketId, imageId, dateTaken, path, 0, true);
+    private static Integer loadAlbumPhotos(final ArrayList<AlbumEntry> albumsSorted, final String cameraFolder, String selection, String[] selectionArgs, boolean allPhotoAlbumLoad) {
+        Integer cameraAlbumId = null;
+        AlbumEntry allPhotosAlbum = null;
+        HashMap<Integer, AlbumEntry> albums = new HashMap<>();
+        Cursor cursor = null;
+        try {
+            cursor = MediaStore.Images.Media.query(ApplicationLoader.applicationContext.getContentResolver(), MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projectionPhotos, selection, selectionArgs, MediaStore.Images.Media.DATE_TAKEN + " DESC");
+            if (cursor != null) {
+                int imageIdColumn = cursor.getColumnIndex(MediaStore.Images.Media._ID);
+                int bucketIdColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_ID);
+                int bucketNameColumn = cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_DISPLAY_NAME);
+                int dataColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATA);
+                int dateColumn = cursor.getColumnIndex(MediaStore.Images.Media.DATE_TAKEN);
+                int orientationColumn = cursor.getColumnIndex(MediaStore.Images.Media.ORIENTATION);
 
-                            if (allPhotosAlbum == null) {
-                                allPhotosAlbum = new AlbumEntry(0, LocaleController.getString("AllVideo", R.string.AllVideo), photoEntry, true);
-                                videoAlbumsSorted.add(0, allPhotosAlbum);
-                            }
-                            if (allPhotosAlbum != null) {
-                                allPhotosAlbum.addPhoto(photoEntry);
-                            }
+                while (cursor.moveToNext()) {
+                    int imageId = cursor.getInt(imageIdColumn);
+                    int bucketId = cursor.getInt(bucketIdColumn);
+                    String bucketName = cursor.getString(bucketNameColumn);
+                    String path = cursor.getString(dataColumn);
+                    long dateTaken = cursor.getLong(dateColumn);
+                    int orientation = cursor.getInt(orientationColumn);
+
+                    if (path == null || path.length() == 0) {
+                        continue;
+                    }
 
-                            AlbumEntry albumEntry = albums.get(bucketId);
-                            if (albumEntry == null) {
-                                albumEntry = new AlbumEntry(bucketId, bucketName, photoEntry, true);
-                                albums.put(bucketId, albumEntry);
-                                if (cameraAlbumVideoId == null && cameraFolder != null && path != null && path.startsWith(cameraFolder)) {
-                                    videoAlbumsSorted.add(0, albumEntry);
-                                    cameraAlbumVideoId = bucketId;
-                                } else {
-                                    videoAlbumsSorted.add(albumEntry);
-                                }
-                            }
+                    PhotoEntry photoEntry = new PhotoEntry(bucketId, imageId, dateTaken, path, orientation, false);
 
-                            albumEntry.addPhoto(photoEntry);
+                    if (allPhotoAlbumLoad) {
+                        if (allPhotosAlbum == null) {
+                            allPhotosAlbum = new AlbumEntry(0, LocaleController.getString("AllPhotos", R.string.AllPhotos), photoEntry, false);
+                            albumsSorted.add(0, allPhotosAlbum);
                         }
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                } finally {
-                    if (cursor != null) {
-                        try {
-                            cursor.close();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
+                        if (allPhotosAlbum != null) {
+                            allPhotosAlbum.addPhoto(photoEntry);
                         }
                     }
-                }
 
-                final Integer cameraAlbumIdFinal = cameraAlbumId;
-                final Integer cameraAlbumVideoIdFinal = cameraAlbumVideoId;
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.albumsDidLoaded, guid, albumsSorted, cameraAlbumIdFinal, videoAlbumsSorted, cameraAlbumVideoIdFinal);
+                    AlbumEntry albumEntry = albums.get(bucketId);
+                    if (albumEntry == null) {
+                        albumEntry = new AlbumEntry(bucketId, bucketName, photoEntry, false);
+                        albums.put(bucketId, albumEntry);
+                        if (cameraAlbumId == null && cameraFolder != null && path != null && path.startsWith(cameraFolder)) {
+                            albumsSorted.add(0, albumEntry);
+                            cameraAlbumId = bucketId;
+                        } else {
+                            albumsSorted.add(albumEntry);
+                        }
                     }
-                });
+
+                    albumEntry.addPhoto(photoEntry);
+                }
             }
-        }).start();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        } finally {
+            if (cursor != null) {
+                try {
+                    cursor.close();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+        return cameraAlbumId;
+
     }
 
     public boolean validateImage(Image image) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 5f4c4eb62..79069c929 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -51,6 +51,7 @@
     public static final int FileDidLoaded = totalEvents++;
     public static final int FileDidFailedLoad = totalEvents++;
     public static final int albumsDidLoaded = totalEvents++; //TODO
+    public static final int cameraAlbumDidLoaded = totalEvents++; //TODO
 
 
     public static final int httpFileDidLoaded = totalEvents++; // TODO need receiver
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index 6373a5f4f..7dea49175 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -43,9 +43,13 @@
 
     public interface ActionBarLayoutDelegate {
         boolean onPreIme();
+
         boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
+
         boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
+
         boolean needCloseLastFragment(ActionBarLayout layout);
+
         void onRebuildAllFragments(ActionBarLayout layout);
     }
 
@@ -265,7 +269,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                 layerShadowDrawable.setAlpha((int) (0xff * alpha));
                 layerShadowDrawable.draw(canvas);
             } else if (child == containerViewBack) {
-                final float opacity = Math.min(0.8f, (width - translationX) / (float)width);
+                final float opacity = Math.min(0.8f, (width - translationX) / (float) width);
                 scrimPaint.setColor((int) (((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
                 canvas.drawRect(clipLeft, 0, clipRight, getHeight(), scrimPaint);
             }
@@ -430,7 +434,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                             distToMove = containerView.getMeasuredWidth() - x;
                             animatorSet.playTogether(
                                     ObjectAnimatorProxy.ofFloat(containerView, "x", containerView.getMeasuredWidth()),
-                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float)containerView.getMeasuredWidth())
+                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float) containerView.getMeasuredWidth())
                             );
                         } else {
                             distToMove = x;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index 6212e0ba2..b811f173e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -466,6 +466,11 @@ public boolean didSelectVideo(String path) {
                 removeSelfFromStack();
                 return delegate.didSelectVideo(path);
             }
+
+            @Override
+            public void backButtonPressed() {
+
+            }
         });
         presentFragment(fragment);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index b70eac20d..6f5c4b603 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -44,18 +44,14 @@
 import org.telegram.android.volley.VolleyError;
 import org.telegram.android.volley.toolbox.JsonObjectRequest;
 import org.telegram.android.volley.toolbox.Volley;
-import ru.aragats.wgo.ApplicationLoader;
-import ru.aragats.wgo.R;
-
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
-import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.PhotoPickerPhotoCell;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
@@ -67,12 +63,19 @@
 import java.util.Locale;
 import java.util.Map;
 
+import ru.aragats.wgo.ApplicationLoader;
+import ru.aragats.wgo.R;
+
 public class PhotoPickerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
 
     public interface PhotoPickerActivityDelegate {
         void selectedPhotosChanged();
+
         void actionButtonPressed(boolean canceled);
+
         boolean didSelectVideo(String path);
+
+        void backButtonPressed();
     }
 
     private RequestQueue requestQueue;
@@ -164,6 +167,9 @@ public void onItemClick(int id) {
                         listView = null;
                         listAdapter = null;
                     }
+                    if (delegate != null) {
+                        delegate.backButtonPressed();
+                    }
                     finishFragment();
                 }
             }
@@ -453,7 +459,7 @@ private PhotoPickerPhotoCell getCellForIndex(int index) {
             View view = listView.getChildAt(a);
             if (view instanceof PhotoPickerPhotoCell) {
                 PhotoPickerPhotoCell cell = (PhotoPickerPhotoCell) view;
-                int num = (Integer)cell.photoImage.getTag();
+                int num = (Integer) cell.photoImage.getTag();
                 if (selectedAlbum != null) {
                     if (num < 0 || num >= selectedAlbum.photos.size()) {
                         continue;
@@ -551,7 +557,7 @@ public void willSwitchFromPhoto(int index) {
                 continue;
             }
             PhotoPickerPhotoCell cell = (PhotoPickerPhotoCell) view;
-            int num = (Integer)view.getTag();
+            int num = (Integer) view.getTag();
             if (selectedAlbum != null) {
                 if (num < 0 || num >= selectedAlbum.photos.size()) {
                     continue;
@@ -924,7 +930,7 @@ private void fixLayoutInternal() {
         listView.setSelection(position);
 
         if (selectedAlbum == null) {
-            emptyView.setPadding(0, 0, 0, (int)((AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight()) * 0.4f));
+            emptyView.setPadding(0, 0, 0, (int) ((AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight()) * 0.4f));
         }
     }
 
@@ -1008,9 +1014,9 @@ public void onClick(View v) {
                                 AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                                 MediaController.SearchImage photoEntry;
                                 if (searchResult.isEmpty() && lastSearchString == null) {
-                                    photoEntry = recentImages.get((Integer)((View)v.getParent()).getTag());
+                                    photoEntry = recentImages.get((Integer) ((View) v.getParent()).getTag());
                                 } else {
-                                    photoEntry = searchResult.get((Integer)((View)v.getParent()).getTag());
+                                    photoEntry = searchResult.get((Integer) ((View) v.getParent()).getTag());
                                 }
                                 if (selectedWebPhotos.containsKey(photoEntry.id)) {
                                     selectedWebPhotos.remove(photoEntry.id);
@@ -1072,7 +1078,7 @@ public void onClick(View v) {
                 cell.checkBox.setVisibility(singlePhoto || showing ? View.GONE : View.VISIBLE);
             } else if (viewType == 1) {
                 if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.media_loading_layout, viewGroup, false);
                 }
                 ViewGroup.LayoutParams params = view.getLayoutParams();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivityAragats.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivityAragats.java
deleted file mode 100644
index 0b2266b7e..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivityAragats.java
+++ /dev/null
@@ -1,1111 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.4.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.graphics.Bitmap;
-import android.os.Build;
-import android.util.Base64;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.Surface;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
-import android.widget.AbsListView;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.GridView;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.android.volley.AuthFailureError;
-import org.telegram.android.volley.Request;
-import org.telegram.android.volley.RequestQueue;
-import org.telegram.android.volley.Response;
-import org.telegram.android.volley.VolleyError;
-import org.telegram.android.volley.toolbox.JsonObjectRequest;
-import org.telegram.android.volley.toolbox.Volley;
-import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.PhotoPickerPhotoCell;
-import org.telegram.ui.Components.BackupImageView;
-import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.PhotoPickerBottomLayout;
-
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-
-import ru.aragats.wgo.ApplicationLoader;
-import ru.aragats.wgo.R;
-
-public class PhotoPickerActivityAragats extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
-
-    public interface PhotoPickerActivityDelegate {
-        void selectedPhotosChanged();
-        void actionButtonPressed(boolean canceled);
-        boolean didSelectVideo(String path);
-    }
-
-    private RequestQueue requestQueue;
-
-    private int type;
-    private HashMap<String, MediaController.SearchImage> selectedWebPhotos;
-    private HashMap<Integer, MediaController.PhotoEntry> selectedPhotos;
-    private ArrayList<MediaController.SearchImage> recentImages;
-
-    private ArrayList<MediaController.SearchImage> searchResult = new ArrayList<>();
-    private HashMap<String, MediaController.SearchImage> searchResultKeys = new HashMap<>();
-    private HashMap<String, MediaController.SearchImage> searchResultUrls = new HashMap<>();
-
-    private boolean searching;
-    private String nextSearchBingString;
-    private boolean giphySearchEndReached = true;
-    private String lastSearchString;
-    private boolean loadingRecent;
-
-    private MediaController.AlbumEntry selectedAlbum;
-
-    private GridView listView;
-    private ListAdapter listAdapter;
-    private PhotoPickerBottomLayout photoPickerBottomLayout;
-    private FrameLayout progressView;
-    private TextView emptyView;
-    private ActionBarMenuItem searchItem;
-    private int itemWidth = 100;
-    private boolean sendPressed;
-    private boolean singlePhoto;
-
-    private PhotoPickerActivityDelegate delegate;
-
-    public PhotoPickerActivityAragats(int type, MediaController.AlbumEntry selectedAlbum, HashMap<Integer, MediaController.PhotoEntry> selectedPhotos, HashMap<String, MediaController.SearchImage> selectedWebPhotos, ArrayList<MediaController.SearchImage> recentImages, boolean onlyOnePhoto) {
-        super();
-        this.selectedAlbum = selectedAlbum;
-        this.selectedPhotos = selectedPhotos;
-        this.selectedWebPhotos = selectedWebPhotos;
-        this.type = type;
-        this.recentImages = recentImages;
-        this.singlePhoto = onlyOnePhoto;
-        if (selectedAlbum != null && selectedAlbum.isVideo) {
-            singlePhoto = true;
-        }
-    }
-
-    @Override
-    public boolean onFragmentCreate() {
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        if (selectedAlbum == null) {
-            requestQueue = Volley.newRequestQueue(ApplicationLoader.applicationContext);
-            if (recentImages.isEmpty()) {
-//                MessagesStorage.getInstance().loadWebRecent(type);
-                loadingRecent = true;
-            }
-        }
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        if (requestQueue != null) {
-            requestQueue.cancelAll("search");
-            requestQueue.stop();
-        }
-        super.onFragmentDestroy();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public View createView(Context context, LayoutInflater inflater) {
-        actionBar.setBackgroundColor(0xff333333);
-        actionBar.setItemsBackground(R.drawable.bar_selector_picker);
-        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        if (selectedAlbum != null) {
-            actionBar.setTitle(selectedAlbum.bucketName);
-        } else if (type == 0) {
-            actionBar.setTitle(LocaleController.getString("SearchImagesTitle", R.string.SearchImagesTitle));
-        } else if (type == 1) {
-            actionBar.setTitle(LocaleController.getString("SearchGifsTitle", R.string.SearchGifsTitle));
-        }
-        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
-            @Override
-            public void onItemClick(int id) {
-                if (id == -1) {
-                    if (Build.VERSION.SDK_INT < 11) {
-                        listView.setAdapter(null);
-                        listView = null;
-                        listAdapter = null;
-                    }
-                    finishFragment();
-                }
-            }
-        });
-
-        if (selectedAlbum == null) {
-            ActionBarMenu menu = actionBar.createMenu();
-            searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
-                @Override
-                public void onSearchExpand() {
-
-                }
-
-                @Override
-                public boolean onSearchCollapse() {
-                    finishFragment();
-                    return false;
-                }
-
-                @Override
-                public void onTextChanged(EditText editText) {
-                    if (editText.getText().length() == 0) {
-                        searchResult.clear();
-                        searchResultKeys.clear();
-                        lastSearchString = null;
-                        nextSearchBingString = null;
-                        giphySearchEndReached = true;
-                        searching = false;
-                        requestQueue.cancelAll("search");
-                        if (type == 0) {
-                            emptyView.setText(LocaleController.getString("NoRecentPhotos", R.string.NoRecentPhotos));
-                        } else if (type == 1) {
-                            emptyView.setText(LocaleController.getString("NoRecentGIFs", R.string.NoRecentGIFs));
-                        }
-                        updateSearchInterface();
-                    }
-                }
-
-                @Override
-                public void onSearchPressed(EditText editText) {
-                    if (editText.getText().toString().length() == 0) {
-                        return;
-                    }
-                    searchResult.clear();
-                    searchResultKeys.clear();
-                    nextSearchBingString = null;
-                    giphySearchEndReached = true;
-                    if (type == 0) {
-                        searchBingImages(editText.getText().toString(), 0, 53);
-                    } else if (type == 1) {
-                        searchGiphyImages(editText.getText().toString(), 0, 53);
-                    }
-                    lastSearchString = editText.getText().toString();
-                    if (lastSearchString.length() == 0) {
-                        lastSearchString = null;
-                        if (type == 0) {
-                            emptyView.setText(LocaleController.getString("NoRecentPhotos", R.string.NoRecentPhotos));
-                        } else if (type == 1) {
-                            emptyView.setText(LocaleController.getString("NoRecentGIFs", R.string.NoRecentGIFs));
-                        }
-                    } else {
-                        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
-                    }
-                    updateSearchInterface();
-                }
-            });
-        }
-
-        if (selectedAlbum == null) {
-            if (type == 0) {
-                searchItem.getSearchField().setHint(LocaleController.getString("SearchImagesTitle", R.string.SearchImagesTitle));
-            } else if (type == 1) {
-                searchItem.getSearchField().setHint(LocaleController.getString("SearchGifsTitle", R.string.SearchGifsTitle));
-            }
-        }
-
-        fragmentView = new FrameLayout(context);
-
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
-        frameLayout.setBackgroundColor(0xff000000);
-
-        listView = new GridView(context);
-        listView.setPadding(AndroidUtilities.dp(4), AndroidUtilities.dp(4), AndroidUtilities.dp(4), AndroidUtilities.dp(4));
-        listView.setClipToPadding(false);
-        listView.setDrawSelectorOnTop(true);
-        listView.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);
-        listView.setHorizontalScrollBarEnabled(false);
-        listView.setVerticalScrollBarEnabled(false);
-        listView.setNumColumns(GridView.AUTO_FIT);
-        listView.setVerticalSpacing(AndroidUtilities.dp(4));
-        listView.setHorizontalSpacing(AndroidUtilities.dp(4));
-        listView.setSelector(R.drawable.list_selector);
-        frameLayout.addView(listView);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) listView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.bottomMargin = singlePhoto ? 0 : AndroidUtilities.dp(48);
-        listView.setLayoutParams(layoutParams);
-        listView.setAdapter(listAdapter = new ListAdapter(context));
-        AndroidUtilities.setListViewEdgeEffectColor(listView, 0xff333333);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                if (selectedAlbum != null && selectedAlbum.isVideo) {
-                    if (i < 0 || i >= selectedAlbum.photos.size()) {
-                        return;
-                    }
-                    if (delegate.didSelectVideo(selectedAlbum.photos.get(i).path)) {
-                        finishFragment();
-                    }
-                } else {
-                    ArrayList<Object> arrayList;
-                    if (selectedAlbum != null) {
-                        arrayList = (ArrayList) selectedAlbum.photos;
-                    } else {
-                        if (searchResult.isEmpty() && lastSearchString == null) {
-                            arrayList = (ArrayList) recentImages;
-                        } else {
-                            arrayList = (ArrayList) searchResult;
-                        }
-                    }
-                    if (i < 0 || i >= arrayList.size()) {
-                        return;
-                    }
-                    PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, i, singlePhoto ? 1 : 0, PhotoPickerActivityAragats.this);
-                }
-            }
-        });
-
-        if (selectedAlbum == null) {
-            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-                @Override
-                public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
-                    if (searchResult.isEmpty() && lastSearchString == null) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
-                        builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                recentImages.clear();
-                                if (listAdapter != null) {
-                                    listAdapter.notifyDataSetChanged();
-                                }
-//                                MessagesStorage.getInstance().clearWebRecent(type);
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
-                        return true;
-                    }
-                    return false;
-                }
-            });
-        }
-
-        emptyView = new TextView(context);
-        emptyView.setTextColor(0xff808080);
-        emptyView.setTextSize(20);
-        emptyView.setGravity(Gravity.CENTER);
-        emptyView.setVisibility(View.GONE);
-        if (selectedAlbum != null) {
-            emptyView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
-        } else {
-            if (type == 0) {
-                emptyView.setText(LocaleController.getString("NoRecentPhotos", R.string.NoRecentPhotos));
-            } else if (type == 1) {
-                emptyView.setText(LocaleController.getString("NoRecentGIFs", R.string.NoRecentGIFs));
-            }
-        }
-        frameLayout.addView(emptyView);
-        layoutParams = (FrameLayout.LayoutParams) emptyView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.bottomMargin = singlePhoto ? 0 : AndroidUtilities.dp(48);
-        emptyView.setLayoutParams(layoutParams);
-        emptyView.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        if (selectedAlbum == null) {
-            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
-                @Override
-                public void onScrollStateChanged(AbsListView absListView, int i) {
-                    if (i == SCROLL_STATE_TOUCH_SCROLL) {
-                        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
-                    }
-                }
-
-                @Override
-                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                    if (visibleItemCount != 0 && firstVisibleItem + visibleItemCount > totalItemCount - 2 && !searching) {
-                        if (type == 0 && nextSearchBingString != null) {
-                            searchBingImages(lastSearchString, searchResult.size(), 54);
-                        } else if (type == 1 && !giphySearchEndReached) {
-                            searchGiphyImages(searchItem.getSearchField().getText().toString(), searchResult.size(), 54);
-                        }
-                    }
-                }
-            });
-
-            progressView = new FrameLayout(context);
-            progressView.setVisibility(View.GONE);
-            frameLayout.addView(progressView);
-            layoutParams = (FrameLayout.LayoutParams) progressView.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            layoutParams.bottomMargin = singlePhoto ? 0 : AndroidUtilities.dp(48);
-            progressView.setLayoutParams(layoutParams);
-
-            ProgressBar progressBar = new ProgressBar(context);
-            progressView.addView(progressBar);
-            layoutParams = (FrameLayout.LayoutParams) progressBar.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.CENTER;
-            progressBar.setLayoutParams(layoutParams);
-
-            updateSearchInterface();
-        }
-
-        photoPickerBottomLayout = new PhotoPickerBottomLayout(context);
-        frameLayout.addView(photoPickerBottomLayout);
-        layoutParams = (FrameLayout.LayoutParams) photoPickerBottomLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = AndroidUtilities.dp(48);
-        layoutParams.gravity = Gravity.BOTTOM;
-        photoPickerBottomLayout.setLayoutParams(layoutParams);
-        photoPickerBottomLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                delegate.actionButtonPressed(true);
-                finishFragment();
-            }
-        });
-        photoPickerBottomLayout.doneButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                sendSelectedPhotos();
-            }
-        });
-        if (singlePhoto) {
-            photoPickerBottomLayout.setVisibility(View.GONE);
-        }
-
-        listView.setEmptyView(emptyView);
-        photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-        if (searchItem != null) {
-            searchItem.openSearch();
-            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
-        }
-        fixLayout();
-    }
-
-    @Override
-    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        fixLayout();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.closeChats) {
-            removeSelfFromStack();
-        }
-    }
-
-    private PhotoPickerPhotoCell getCellForIndex(int index) {
-        int count = listView.getChildCount();
-
-        for (int a = 0; a < count; a++) {
-            View view = listView.getChildAt(a);
-            if (view instanceof PhotoPickerPhotoCell) {
-                PhotoPickerPhotoCell cell = (PhotoPickerPhotoCell) view;
-                int num = (Integer)cell.photoImage.getTag();
-                if (selectedAlbum != null) {
-                    if (num < 0 || num >= selectedAlbum.photos.size()) {
-                        continue;
-                    }
-                } else {
-                    ArrayList<MediaController.SearchImage> array;
-                    if (searchResult.isEmpty() && lastSearchString == null) {
-                        array = recentImages;
-                    } else {
-                        array = searchResult;
-                    }
-                    if (num < 0 || num >= array.size()) {
-                        continue;
-                    }
-                }
-                if (num == index) {
-                    return cell;
-                }
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Object obj, int index) {
-        PhotoPickerPhotoCell cell = getCellForIndex(index);
-        if (cell != null) {
-            int coords[] = new int[2];
-            cell.photoImage.getLocationInWindow(coords);
-            PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
-            object.viewX = coords[0];
-            object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
-            object.parentView = listView;
-            object.imageReceiver = cell.photoImage.getImageReceiver();
-            object.thumb = object.imageReceiver.getBitmap();
-            cell.checkBox.setVisibility(View.GONE);
-            return object;
-        }
-        return null;
-    }
-
-    @Override
-    public void updatePhotoAtIndex(int index) {
-        PhotoPickerPhotoCell cell = getCellForIndex(index);
-        if (cell != null) {
-            if (selectedAlbum != null) {
-                cell.photoImage.setOrientation(0, true);
-                MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
-                if (photoEntry.thumbPath != null) {
-                    cell.photoImage.setImage(photoEntry.thumbPath, null, cell.getContext().getResources().getDrawable(R.drawable.nophotos));
-                } else if (photoEntry.path != null) {
-                    cell.photoImage.setOrientation(photoEntry.orientation, true);
-                    if (photoEntry.isVideo) {
-                        cell.photoImage.setImage("vthumb://" + photoEntry.imageId + ":" + photoEntry.path, null, cell.getContext().getResources().getDrawable(R.drawable.nophotos));
-                    } else {
-                        cell.photoImage.setImage("thumb://" + photoEntry.imageId + ":" + photoEntry.path, null, cell.getContext().getResources().getDrawable(R.drawable.nophotos));
-                    }
-                } else {
-                    cell.photoImage.setImageResource(R.drawable.nophotos);
-                }
-            } else {
-                ArrayList<MediaController.SearchImage> array;
-                if (searchResult.isEmpty() && lastSearchString == null) {
-                    array = recentImages;
-                } else {
-                    array = searchResult;
-                }
-                MediaController.SearchImage photoEntry = array.get(index);
-                if (photoEntry.thumbPath != null) {
-                    cell.photoImage.setImage(photoEntry.thumbPath, null, cell.getContext().getResources().getDrawable(R.drawable.nophotos));
-                } else if (photoEntry.thumbUrl != null && photoEntry.thumbUrl.length() > 0) {
-                    cell.photoImage.setImage(photoEntry.thumbUrl, null, cell.getContext().getResources().getDrawable(R.drawable.nophotos));
-                } else {
-                    cell.photoImage.setImageResource(R.drawable.nophotos);
-                }
-            }
-        }
-    }
-
-    @Override
-    public Bitmap getThumbForPhoto(int index) {
-        PhotoPickerPhotoCell cell = getCellForIndex(index);
-        if (cell != null) {
-            return cell.photoImage.getImageReceiver().getBitmap();
-        }
-        return null;
-    }
-
-    @Override
-    public void willSwitchFromPhoto(int index) {
-        int count = listView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View view = listView.getChildAt(a);
-            if (view.getTag() == null) {
-                continue;
-            }
-            PhotoPickerPhotoCell cell = (PhotoPickerPhotoCell) view;
-            int num = (Integer)view.getTag();
-            if (selectedAlbum != null) {
-                if (num < 0 || num >= selectedAlbum.photos.size()) {
-                    continue;
-                }
-            } else {
-                ArrayList<MediaController.SearchImage> array;
-                if (searchResult.isEmpty() && lastSearchString == null) {
-                    array = recentImages;
-                } else {
-                    array = searchResult;
-                }
-                if (num < 0 || num >= array.size()) {
-                    continue;
-                }
-            }
-            if (num == index) {
-                cell.checkBox.setVisibility(View.VISIBLE);
-                break;
-            }
-        }
-    }
-
-    @Override
-    public void willHidePhotoViewer() {
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-    }
-
-    @Override
-    public boolean isPhotoChecked(int index) {
-        if (selectedAlbum != null) {
-            return !(index < 0 || index >= selectedAlbum.photos.size()) && selectedPhotos.containsKey(selectedAlbum.photos.get(index).imageId);
-        } else {
-            ArrayList<MediaController.SearchImage> array;
-            if (searchResult.isEmpty() && lastSearchString == null) {
-                array = recentImages;
-            } else {
-                array = searchResult;
-            }
-            return !(index < 0 || index >= array.size()) && selectedWebPhotos.containsKey(array.get(index).id);
-        }
-    }
-
-    @Override
-    public void setPhotoChecked(int index) {
-        boolean add = true;
-        if (selectedAlbum != null) {
-            if (index < 0 || index >= selectedAlbum.photos.size()) {
-                return;
-            }
-            MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
-            if (selectedPhotos.containsKey(photoEntry.imageId)) {
-                selectedPhotos.remove(photoEntry.imageId);
-                add = false;
-            } else {
-                selectedPhotos.put(photoEntry.imageId, photoEntry);
-            }
-        } else {
-            MediaController.SearchImage photoEntry;
-            ArrayList<MediaController.SearchImage> array;
-            if (searchResult.isEmpty() && lastSearchString == null) {
-                array = recentImages;
-            } else {
-                array = searchResult;
-            }
-            if (index < 0 || index >= array.size()) {
-                return;
-            }
-            photoEntry = array.get(index);
-            if (selectedWebPhotos.containsKey(photoEntry.id)) {
-                selectedWebPhotos.remove(photoEntry.id);
-                add = false;
-            } else {
-                selectedWebPhotos.put(photoEntry.id, photoEntry);
-            }
-        }
-        int count = listView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View view = listView.getChildAt(a);
-            int num = (Integer) view.getTag();
-            if (num == index) {
-                ((PhotoPickerPhotoCell) view).checkBox.setChecked(add, false);
-                break;
-            }
-        }
-        photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
-        delegate.selectedPhotosChanged();
-    }
-
-    @Override
-    public void cancelButtonPressed() {
-        delegate.actionButtonPressed(true);
-        finishFragment();
-    }
-
-    @Override
-    public void sendButtonPressed(int index) {
-        if (selectedAlbum != null) {
-            if (selectedPhotos.isEmpty()) {
-                if (index < 0 || index >= selectedAlbum.photos.size()) {
-                    return;
-                }
-                MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
-                selectedPhotos.put(photoEntry.imageId, photoEntry);
-            }
-        } else if (selectedPhotos.isEmpty()) {
-            ArrayList<MediaController.SearchImage> array;
-            if (searchResult.isEmpty() && lastSearchString == null) {
-                array = recentImages;
-            } else {
-                array = searchResult;
-            }
-            if (index < 0 || index >= array.size()) {
-                return;
-            }
-            MediaController.SearchImage photoEntry = array.get(index);
-            selectedWebPhotos.put(photoEntry.id, photoEntry);
-        }
-        sendSelectedPhotos();
-    }
-
-    @Override
-    public int getSelectedCount() {
-        return selectedPhotos.size() + selectedWebPhotos.size();
-    }
-
-    @Override
-    public void onOpenAnimationEnd() {
-        super.onOpenAnimationEnd();
-        if (searchItem != null) {
-            AndroidUtilities.showKeyboard(searchItem.getSearchField());
-        }
-    }
-
-    private void updateSearchInterface() {
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
-        if (searching && searchResult.isEmpty() || loadingRecent && lastSearchString == null) {
-            progressView.setVisibility(View.VISIBLE);
-            listView.setEmptyView(null);
-            emptyView.setVisibility(View.GONE);
-        } else {
-            progressView.setVisibility(View.GONE);
-            emptyView.setVisibility(View.VISIBLE);
-            listView.setEmptyView(emptyView);
-        }
-    }
-
-    private void searchGiphyImages(String query, int offset, final int count) {
-        if (searching) {
-            searching = false;
-            requestQueue.cancelAll("search");
-        }
-        try {
-            searching = true;
-            String url = String.format(Locale.US, "https://api.giphy.com/v1/gifs/search?q=%s&offset=%d&limit=%d&api_key=141Wa2KDAfNfxu", URLEncoder.encode(query, "UTF-8"), offset, count);
-            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.GET, url, null,
-                    new Response.Listener<JSONObject>() {
-                        @Override
-                        public void onResponse(JSONObject response) {
-                            try {
-                                JSONArray result = response.getJSONArray("data");
-                                try {
-                                    JSONObject pagination = response.getJSONObject("pagination");
-                                    int total_count = pagination.getInt("total_count");
-                                    giphySearchEndReached = searchResult.size() + result.length() >= total_count;
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                                boolean added = false;
-                                for (int a = 0; a < result.length(); a++) {
-                                    try {
-                                        JSONObject object = result.getJSONObject(a);
-                                        String id = object.getString("id");
-                                        if (searchResultKeys.containsKey(id)) {
-                                            continue;
-                                        }
-                                        added = true;
-                                        JSONObject images = object.getJSONObject("images");
-                                        JSONObject thumb = images.getJSONObject("downsized_still");
-                                        JSONObject original = images.getJSONObject("original");
-                                        MediaController.SearchImage bingImage = new MediaController.SearchImage();
-                                        bingImage.id = id;
-                                        bingImage.width = original.getInt("width");
-                                        bingImage.height = original.getInt("height");
-                                        bingImage.size = original.getInt("size");
-                                        bingImage.imageUrl = original.getString("url");
-                                        bingImage.thumbUrl = thumb.getString("url");
-                                        bingImage.type = 1;
-                                        searchResult.add(bingImage);
-                                        searchResultKeys.put(id, bingImage);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                                if (!added) {
-                                    giphySearchEndReached = true;
-                                }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            searching = false;
-                            updateSearchInterface();
-                        }
-                    },
-                    new Response.ErrorListener() {
-                        @Override
-                        public void onErrorResponse(VolleyError error) {
-                            FileLog.e("tmessages", "Error: " + error.getMessage());
-                            giphySearchEndReached = true;
-                            searching = false;
-                            updateSearchInterface();
-                        }
-                    });
-            jsonObjReq.setTag("search");
-            requestQueue.add(jsonObjReq);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void searchBingImages(String query, int offset, int count) {
-        if (searching) {
-            searching = false;
-            requestQueue.cancelAll("search");
-        }
-        try {
-            searching = true;
-            String url;
-            if (nextSearchBingString != null) {
-                url = nextSearchBingString;
-            } else {
-                boolean adult;
-//                String phone = UserConfig.getCurrentUser().getPhone();
-                String phone = "";
-                adult = phone.startsWith("44") || phone.startsWith("49") || phone.startsWith("43") || phone.startsWith("31") || phone.startsWith("1");
-                url = String.format(Locale.US, "https://api.datamarket.azure.com/Bing/Search/v1/Image?Query='%s'&$skip=%d&$top=%d&$format=json%s", URLEncoder.encode(query, "UTF-8"), offset, count, adult ? "" : "&Adult='Off'");
-            }
-            JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.GET, url, null,
-                    new Response.Listener<JSONObject>() {
-                        @Override
-                        public void onResponse(JSONObject response) {
-                            nextSearchBingString = null;
-                            try {
-                                JSONObject d = response.getJSONObject("d");
-                                JSONArray result = d.getJSONArray("results");
-                                try {
-                                    nextSearchBingString = d.getString("__next");
-                                } catch (Exception e) {
-                                    nextSearchBingString = null;
-                                    FileLog.e("tmessages", e);
-                                }
-                                for (int a = 0; a < result.length(); a++) {
-                                    try {
-                                        JSONObject object = result.getJSONObject(a);
-                                        String id = Utilities.MD5(object.getString("MediaUrl"));
-                                        if (searchResultKeys.containsKey(id)) {
-                                            continue;
-                                        }
-                                        MediaController.SearchImage bingImage = new MediaController.SearchImage();
-                                        bingImage.id = id;
-                                        bingImage.width = object.getInt("Width");
-                                        bingImage.height = object.getInt("Height");
-                                        bingImage.size = object.getInt("FileSize");
-                                        bingImage.imageUrl = object.getString("MediaUrl");
-                                        JSONObject thumbnail = object.getJSONObject("Thumbnail");
-                                        bingImage.thumbUrl = thumbnail.getString("MediaUrl");
-                                        searchResult.add(bingImage);
-                                        searchResultKeys.put(id, bingImage);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            searching = false;
-                            if (nextSearchBingString != null && !nextSearchBingString.contains("json")) {
-                                nextSearchBingString += "&$format=json";
-                            }
-                            updateSearchInterface();
-                        }
-                    },
-                    new Response.ErrorListener() {
-                        @Override
-                        public void onErrorResponse(VolleyError error) {
-                            FileLog.e("tmessages", "Error: " + error.getMessage());
-                            nextSearchBingString = null;
-                            searching = false;
-                            updateSearchInterface();
-                        }
-                    }) {
-
-                @Override
-                public Map<String, String> getHeaders() throws AuthFailureError {
-                    Map<String, String> headers = new HashMap<>();
-                    String auth = "Basic " + Base64.encodeToString((BuildVars.BING_SEARCH_KEY + ":" + BuildVars.BING_SEARCH_KEY).getBytes(), Base64.NO_WRAP);
-                    headers.put("Authorization", auth);
-                    return headers;
-                }
-            };
-            jsonObjReq.setTag("search");
-            requestQueue.add(jsonObjReq);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            nextSearchBingString = null;
-            searching = false;
-            updateSearchInterface();
-        }
-    }
-
-    public void setDelegate(PhotoPickerActivityDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    private void sendSelectedPhotos() {
-        if (selectedPhotos.isEmpty() && selectedWebPhotos.isEmpty() || delegate == null || sendPressed) {
-            return;
-        }
-        sendPressed = true;
-        delegate.actionButtonPressed(false);
-        finishFragment();
-    }
-
-    private void fixLayout() {
-        if (listView != null) {
-            ViewTreeObserver obs = listView.getViewTreeObserver();
-            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    fixLayoutInternal();
-                    if (listView != null) {
-                        listView.getViewTreeObserver().removeOnPreDrawListener(this);
-                    }
-                    return false;
-                }
-            });
-        }
-    }
-
-    private void fixLayoutInternal() {
-        if (getParentActivity() == null) {
-            return;
-        }
-        int position = listView.getFirstVisiblePosition();
-        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
-        int rotation = manager.getDefaultDisplay().getRotation();
-
-        int columnsCount;
-        if (AndroidUtilities.isTablet()) {
-            columnsCount = 3;
-        } else {
-            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
-                columnsCount = 5;
-            } else {
-                columnsCount = 3;
-            }
-        }
-        listView.setNumColumns(columnsCount);
-        if (AndroidUtilities.isTablet()) {
-            itemWidth = (AndroidUtilities.dp(490) - ((columnsCount + 1) * AndroidUtilities.dp(4))) / columnsCount;
-        } else {
-            itemWidth = (AndroidUtilities.displaySize.x - ((columnsCount + 1) * AndroidUtilities.dp(4))) / columnsCount;
-        }
-        listView.setColumnWidth(itemWidth);
-
-        listAdapter.notifyDataSetChanged();
-        listView.setSelection(position);
-
-        if (selectedAlbum == null) {
-            emptyView.setPadding(0, 0, 0, (int)((AndroidUtilities.displaySize.y - AndroidUtilities.getCurrentActionBarHeight()) * 0.4f));
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return selectedAlbum != null;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            if (selectedAlbum == null) {
-                if (searchResult.isEmpty() && lastSearchString == null) {
-                    return i < recentImages.size();
-                } else {
-                    return i < searchResult.size();
-                }
-            }
-            return true;
-        }
-
-        @Override
-        public int getCount() {
-            if (selectedAlbum == null) {
-                if (searchResult.isEmpty() && lastSearchString == null) {
-                    return recentImages.size();
-                } else if (type == 0) {
-                    return searchResult.size() + (nextSearchBingString == null ? 0 : 1);
-                } else if (type == 1) {
-                    return searchResult.size() + (giphySearchEndReached ? 0 : 1);
-                }
-            }
-            return selectedAlbum.photos.size();
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return true;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int viewType = getItemViewType(i);
-            if (viewType == 0) {
-                PhotoPickerPhotoCell cell = (PhotoPickerPhotoCell) view;
-                if (view == null) {
-                    view = new PhotoPickerPhotoCell(mContext);
-                    cell = (PhotoPickerPhotoCell) view;
-                    cell.checkFrame.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View v) {
-                            int index = (Integer) ((View) v.getParent()).getTag();
-                            if (selectedAlbum != null) {
-                                MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
-                                if (selectedPhotos.containsKey(photoEntry.imageId)) {
-                                    selectedPhotos.remove(photoEntry.imageId);
-                                    photoEntry.imagePath = null;
-                                    photoEntry.thumbPath = null;
-                                    updatePhotoAtIndex(index);
-                                } else {
-                                    selectedPhotos.put(photoEntry.imageId, photoEntry);
-                                }
-                                ((PhotoPickerPhotoCell) v.getParent()).checkBox.setChecked(selectedPhotos.containsKey(photoEntry.imageId), true);
-                            } else {
-                                AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
-                                MediaController.SearchImage photoEntry;
-                                if (searchResult.isEmpty() && lastSearchString == null) {
-                                    photoEntry = recentImages.get((Integer)((View)v.getParent()).getTag());
-                                } else {
-                                    photoEntry = searchResult.get((Integer)((View)v.getParent()).getTag());
-                                }
-                                if (selectedWebPhotos.containsKey(photoEntry.id)) {
-                                    selectedWebPhotos.remove(photoEntry.id);
-                                    photoEntry.imagePath = null;
-                                    photoEntry.thumbPath = null;
-                                    updatePhotoAtIndex(index);
-                                } else {
-                                    selectedWebPhotos.put(photoEntry.id, photoEntry);
-                                }
-                                ((PhotoPickerPhotoCell) v.getParent()).checkBox.setChecked(selectedWebPhotos.containsKey(photoEntry.id), true);
-                            }
-                            photoPickerBottomLayout.updateSelectedCount(selectedPhotos.size() + selectedWebPhotos.size(), true);
-                            delegate.selectedPhotosChanged();
-                        }
-                    });
-                    cell.checkFrame.setVisibility(singlePhoto ? View.GONE : View.VISIBLE);
-                }
-                cell.itemWidth = itemWidth;
-                BackupImageView imageView = ((PhotoPickerPhotoCell) view).photoImage;
-                imageView.setTag(i);
-                view.setTag(i);
-                boolean showing;
-                imageView.setOrientation(0, true);
-
-                if (selectedAlbum != null) {
-                    MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(i);
-                    if (photoEntry.thumbPath != null) {
-                        imageView.setImage(photoEntry.thumbPath, null, mContext.getResources().getDrawable(R.drawable.nophotos));
-                    } else if (photoEntry.path != null) {
-                        imageView.setOrientation(photoEntry.orientation, true);
-                        if (photoEntry.isVideo) {
-                            imageView.setImage("vthumb://" + photoEntry.imageId + ":" + photoEntry.path, null, mContext.getResources().getDrawable(R.drawable.nophotos));
-                        } else {
-                            imageView.setImage("thumb://" + photoEntry.imageId + ":" + photoEntry.path, null, mContext.getResources().getDrawable(R.drawable.nophotos));
-                        }
-                    } else {
-                        imageView.setImageResource(R.drawable.nophotos);
-                    }
-                    cell.checkBox.setChecked(selectedPhotos.containsKey(photoEntry.imageId), false);
-                    showing = PhotoViewer.getInstance().isShowingImage(photoEntry.path);
-                } else {
-                    MediaController.SearchImage photoEntry;
-                    if (searchResult.isEmpty() && lastSearchString == null) {
-                        photoEntry = recentImages.get(i);
-                    } else {
-                        photoEntry = searchResult.get(i);
-                    }
-                    if (photoEntry.thumbPath != null) {
-                        imageView.setImage(photoEntry.thumbPath, null, mContext.getResources().getDrawable(R.drawable.nophotos));
-                    } else if (photoEntry.thumbUrl != null && photoEntry.thumbUrl.length() > 0) {
-                        imageView.setImage(photoEntry.thumbUrl, null, mContext.getResources().getDrawable(R.drawable.nophotos));
-                    } else {
-                        imageView.setImageResource(R.drawable.nophotos);
-                    }
-                    cell.checkBox.setChecked(selectedWebPhotos.containsKey(photoEntry.id), false);
-                    showing = PhotoViewer.getInstance().isShowingImage(photoEntry.thumbUrl);
-                }
-                imageView.getImageReceiver().setVisible(!showing, true);
-                cell.checkBox.setVisibility(singlePhoto || showing ? View.GONE : View.VISIBLE);
-            } else if (viewType == 1) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.media_loading_layout, viewGroup, false);
-                }
-                ViewGroup.LayoutParams params = view.getLayoutParams();
-                params.width = itemWidth;
-                params.height = itemWidth;
-                view.setLayoutParams(params);
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (selectedAlbum != null || searchResult.isEmpty() && lastSearchString == null && i < recentImages.size() || i < searchResult.size()) {
-                return 0;
-            }
-            return 1;
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 2;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            if (selectedAlbum != null) {
-                return selectedAlbum.photos.isEmpty();
-            } else {
-                if (searchResult.isEmpty() && lastSearchString == null) {
-                    return recentImages.isEmpty();
-                } else {
-                    return searchResult.isEmpty();
-                }
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerWrapper.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerWrapper.java
new file mode 100644
index 000000000..6932fea3d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerWrapper.java
@@ -0,0 +1,155 @@
+/*
+ * This is the source code of Telegram for Android v. 2.0.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui;
+
+import org.telegram.android.MediaController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.ui.ActionBar.BaseFragment;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class PhotoPickerWrapper implements NotificationCenter.NotificationCenterDelegate {
+
+    public interface PhotoPickerWrapperActivityDelegate {
+        void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos);
+
+        boolean didSelectVideo(String path);
+
+        void didBackButtonPressed();
+
+        void startPhotoSelectActivity();
+    }
+
+    protected int classGuid = 0;
+
+    private ArrayList<MediaController.AlbumEntry> albumsSorted = null;
+    private HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = new HashMap<>();
+    private boolean loading = false;
+
+    private boolean sendPressed = false;
+    private boolean singlePhoto = false;
+
+    private PhotoPickerWrapperActivityDelegate delegate;
+
+    private BaseFragment baseFragment;
+
+
+    public PhotoPickerWrapper(BaseFragment baseFragment, boolean singlePhoto) {
+        this.classGuid = ConnectionsManager.getInstance().generateClassGuid();
+        this.singlePhoto = singlePhoto;
+        this.baseFragment = baseFragment;
+        onFragmentCreate();
+    }
+
+    public boolean onFragmentCreate() {
+        loading = true;
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.cameraAlbumDidLoaded);
+        return true;
+    }
+
+    public void onFragmentDestroy() {
+        selectedPhotos = new HashMap<>();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.cameraAlbumDidLoaded);
+    }
+
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.cameraAlbumDidLoaded) {
+            int guid = (Integer) args[0];
+            if (classGuid == guid) {
+                albumsSorted = (ArrayList<MediaController.AlbumEntry>) args[1];
+                loading = false;
+                if (!albumsSorted.isEmpty()) {
+                    openPhotoPicker(albumsSorted.get(0), 0);
+                }
+            }
+        }
+    }
+
+    public void setDelegate(PhotoPickerWrapperActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    public void openPhotoPicker() {
+        clearStates();
+        MediaController.loadCameraPhotoAlbum(classGuid);
+    }
+
+    private void clearStates() {
+        sendPressed = false;
+        if (selectedPhotos != null) {
+            selectedPhotos.clear();
+        }
+    }
+
+    private void sendSelectedPhotos() {
+        if (selectedPhotos.isEmpty() || delegate == null || sendPressed) {
+            return;
+        }
+        sendPressed = true;
+        ArrayList<String> photos = new ArrayList<>();
+        ArrayList<String> captions = new ArrayList<>();
+        for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
+            MediaController.PhotoEntry photoEntry = entry.getValue();
+            if (photoEntry.imagePath != null) {
+                photos.add(photoEntry.imagePath);
+                captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
+            } else if (photoEntry.path != null) {
+                photos.add(photoEntry.path);
+                captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
+            }
+        }
+        ArrayList<MediaController.SearchImage> webPhotos = new ArrayList<>();
+
+
+        delegate.didSelectPhotos(photos, captions, webPhotos);
+    }
+
+
+    private void openPhotoPicker(MediaController.AlbumEntry albumEntry, int type) {
+        ArrayList<MediaController.SearchImage> recentImages = new ArrayList<>();
+        HashMap<String, MediaController.SearchImage> selectedWebPhotos = new HashMap<>();
+
+        PhotoPickerActivity fragment = new PhotoPickerActivity(type, albumEntry, selectedPhotos, selectedWebPhotos, recentImages, singlePhoto);
+        fragment.setDelegate(new PhotoPickerActivity.PhotoPickerActivityDelegate() {
+            @Override
+            public void selectedPhotosChanged() {
+
+            }
+
+            @Override
+            public void actionButtonPressed(boolean canceled) {
+//                removeSelfFromStack();
+                if (!canceled) {
+                    sendSelectedPhotos();
+                }
+            }
+
+            @Override
+            public boolean didSelectVideo(String path) {
+//                removeSelfFromStack();
+                return delegate.didSelectVideo(path);
+            }
+
+            @Override
+            public void backButtonPressed() {
+//                removeSelfFromStack();
+            }
+        });
+
+        baseFragment.presentFragment(fragment);
+
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 2fbecd0f0..922909309 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -129,6 +129,10 @@
 
     private final static int id_chat_compose_panel = 1000;
 
+
+    private PhotoPickerWrapper photoPickerWrapper;
+
+
     RecyclerListView.OnItemLongClickListener onItemLongClickListener = new RecyclerListView.OnItemLongClickListener() {
         @Override
         public void onItemClick(View view, int position) {
@@ -197,6 +201,7 @@ public boolean onFragmentCreate() {
             editor.commit();
         }
 
+        createPhotoPickerWrapper();
         super.onFragmentCreate();
 
 //        if (AndroidUtilities.isTablet()) {
@@ -228,6 +233,7 @@ public void onFragmentDestroy() {
 
         //save venue before to destroy it
         PostsController.getInstance().setLastVenue(venue);
+        destroyPhotoPickerWrapper();
     }
 
 
@@ -302,7 +308,7 @@ public void onItemClick(final int id) {
                 } else if (id == attach_photo) {
                     attachPhotoHandle();
                 } else if (id == attach_gallery) {
-                    attachGalleryHandle();
+                    openPhotoPicker();
                 } else if (id == attach_location) {
                     openLocationChooser();
                 }
@@ -537,7 +543,7 @@ public boolean onTouch(View v, MotionEvent event) {
         emptyView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                attachGalleryHandle();
+                openPhotoPicker();
             }
         });
 
@@ -939,7 +945,6 @@ public void didReceivedNotification(int id, final Object... args) {
 
             }
             Toast.makeText(getParentActivity(), message, Toast.LENGTH_LONG).show();
-
         }
     }
 
@@ -1619,6 +1624,7 @@ private boolean validatePost(Post post, boolean withNotification) {
         }
         return true;
     }
+
     // only photo based on MAX DATE_SHIFT. Think about accepting photo withou date.
     private boolean validateDate(long date) {
         return date != 0 && (new Date().getTime() - date) < Constants.MAX_DATE_SHIFT;
@@ -1735,6 +1741,78 @@ public boolean didSelectVideo(String path) {
     }
 
 
+    //TODO think about progressView
+    private void openPhotoPicker() {
+        if (photoPickerWrapper != null) {
+            photoPickerWrapper.openPhotoPicker();
+        }
+    }
+
+
+    private void destroyPhotoPickerWrapper() {
+        if (photoPickerWrapper != null) {
+            photoPickerWrapper.onFragmentDestroy();
+        }
+    }
+
+    private void createPhotoPickerWrapper() {
+        //                    //TODO-TEMP
+        if (photoPickerWrapper != null) {
+            return;
+        }
+        photoPickerWrapper = new PhotoPickerWrapper(this, true);
+        photoPickerWrapper.setDelegate(new PhotoPickerWrapper.PhotoPickerWrapperActivityDelegate() {
+            @Override
+            public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos) {
+
+                PostCreateActivity.this.didSelectPhotos(photos);
+
+
+            }
+
+            @Override
+            public void startPhotoSelectActivity() {
+                //TODO-was ?
+                try {
+                    Intent videoPickerIntent = new Intent();
+                    videoPickerIntent.setType("video/*");
+                    videoPickerIntent.setAction(Intent.ACTION_GET_CONTENT);
+                    videoPickerIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1536));
+
+                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                    photoPickerIntent.setType("image/*");
+                    Intent chooserIntent = Intent.createChooser(photoPickerIntent, null);
+                    chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[]{videoPickerIntent});
+
+                    startActivityForResult(chooserIntent, 1);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+
+            }
+
+            @Override
+            public boolean didSelectVideo(String path) {
+
+//                            if (Build.VERSION.SDK_INT >= 16) {
+//                                return !openVideoEditor(path, true, true);
+//                            } else {
+//                                SendMessagesHelper.prepareSendingVideo(path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
+//                                showReplyPanel(false, null, null, null, false, true);
+//                                return true;
+//                            }
+
+                return false;
+            }
+
+            @Override
+            public void didBackButtonPressed() {
+
+            }
+        });
+
+    }
+
     private boolean attachPhotoHandle() {
         try {
             Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index da6e0cbdf..0ab4d2557 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -449,7 +449,7 @@ public void onItemClick(int id) {
                 } else if (id == action_bar_menu_location) {
                     openLocationChooser();
                 } else if (id == 1) {
-                    System.out.println();
+//                    System.out.println();
 //                    UserConfig.appLocked = !UserConfig.appLocked;
 //                    UserConfig.saveConfig(false);
 //                    updatePasscodeButton();
