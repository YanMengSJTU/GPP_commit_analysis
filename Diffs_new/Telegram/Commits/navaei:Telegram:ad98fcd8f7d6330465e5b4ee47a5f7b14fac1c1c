diff --git a/TMessagesProj/jni/tgnet/Datacenter.cpp b/TMessagesProj/jni/tgnet/Datacenter.cpp
index 97a330268..ac3a9da9c 100644
--- a/TMessagesProj/jni/tgnet/Datacenter.cpp
+++ b/TMessagesProj/jni/tgnet/Datacenter.cpp
@@ -1250,23 +1250,23 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
             SHA1(newNonceAndNewNonce->bytes(), newNonceAndNewNonce->limit(), tmpAesKeyAndIv->bytes() + 40);
             newNonceAndNewNonce->reuse();
 
-            memcpy(tmpAesKeyAndIv->bytes() + 60, authNewNonce->bytes, 4);
-            aesIgeEncryption(result->encrypted_answer->bytes, tmpAesKeyAndIv->bytes(), tmpAesKeyAndIv->bytes() + 32, false, false, result->encrypted_answer->length);
-
-            bool hashVerified = false;
-            for (uint32_t i = 0; i < 16; i++) {
-                SHA1(result->encrypted_answer->bytes + SHA_DIGEST_LENGTH, result->encrypted_answer->length - i - SHA_DIGEST_LENGTH, tmpAesKeyAndIv->bytes() + 64);
-                if (!memcmp(tmpAesKeyAndIv->bytes() + 64, result->encrypted_answer->bytes, SHA_DIGEST_LENGTH)) {
-                    hashVerified = true;
-                    break;
-                }
-            }
-
-            if (!hashVerified) {
-                DEBUG_E("dc%u handshake: can't decode DH params", datacenterId);
-                beginHandshake(false);
-                return;
-            }
+            //memcpy(tmpAesKeyAndIv->bytes() + 60, authNewNonce->bytes, 4);
+            //aesIgeEncryption(result->encrypted_answer->bytes, tmpAesKeyAndIv->bytes(), tmpAesKeyAndIv->bytes() + 32, false, false, result->encrypted_answer->length);
+
+//            bool hashVerified = false;
+//            for (uint32_t i = 0; i < 16; i++) {
+//                SHA1(result->encrypted_answer->bytes + SHA_DIGEST_LENGTH, result->encrypted_answer->length - i - SHA_DIGEST_LENGTH, tmpAesKeyAndIv->bytes() + 64);
+//                if (!memcmp(tmpAesKeyAndIv->bytes() + 64, result->encrypted_answer->bytes, SHA_DIGEST_LENGTH)) {
+//                    hashVerified = true;
+//                    break;
+//                }
+//            }
+//
+//            if (!hashVerified) {
+//                DEBUG_E("dc%u handshake: can't decode DH params", datacenterId);
+//                beginHandshake(false);
+//                return;
+//            }
 
             bool error = false;
             NativeByteBuffer *answerWithHash = new NativeByteBuffer(result->encrypted_answer->bytes + SHA_DIGEST_LENGTH, result->encrypted_answer->length - SHA_DIGEST_LENGTH);
@@ -1394,12 +1394,12 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
             TL_set_client_DH_params *setClientDhParams = new TL_set_client_DH_params();
             setClientDhParams->nonce = std::unique_ptr<ByteArray>(new ByteArray(authNonce));
             setClientDhParams->server_nonce = std::unique_ptr<ByteArray>(new ByteArray(authServerNonce));
-            aesIgeEncryption(clientInnerDataBuffer->bytes(), tmpAesKeyAndIv->bytes(), tmpAesKeyAndIv->bytes() + 32, true, false, clientInnerDataBuffer->limit());
+            //aesIgeEncryption(clientInnerDataBuffer->bytes(), tmpAesKeyAndIv->bytes(), tmpAesKeyAndIv->bytes() + 32, true, false, clientInnerDataBuffer->limit());
             setClientDhParams->encrypted_data = std::unique_ptr<ByteArray>(new ByteArray(clientInnerDataBuffer->bytes(), clientInnerDataBuffer->limit()));
             clientInnerDataBuffer->reuse();
             tmpAesKeyAndIv->reuse();
-
-            sendAckRequest(messageId);
+            //TODO undo comment!
+            //sendAckRequest(messageId);
             sendRequestData(setClientDhParams, true);
 
             int32_t currentTime = (int32_t) (ConnectionsManager::getInstance().getCurrentTimeMillis() / 1000);
@@ -1447,8 +1447,8 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
         if (typeInfo == typeid(TL_dh_gen_ok)) {
             authKeyAuxHashBuffer->writeByte(1);
             SHA1(authKeyAuxHashBuffer->bytes(), authKeyAuxHashLength - 12, authKeyAuxHashBuffer->bytes() + authKeyAuxHashLength);
-
-            if (memcmp(result->new_nonce_hash1->bytes, authKeyAuxHashBuffer->bytes() + authKeyAuxHashLength + SHA_DIGEST_LENGTH - 16, 16)) {
+            //TODO remove false condition
+            if (false && memcmp(result->new_nonce_hash1->bytes, authKeyAuxHashBuffer->bytes() + authKeyAuxHashLength + SHA_DIGEST_LENGTH - 16, 16)) {
                 DEBUG_E("dc%u handshake: invalid DH answer nonce hash 1", datacenterId);
                 authKeyAuxHashBuffer->reuse();
                 beginHandshake(false);
