diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 4d84be55d..b33977b52 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -398,7 +398,7 @@
         </service>
         <service android:name="io.bettergram.service.NewsDataService"/>
         <service android:name="io.bettergram.service.YoutubeDataService"/>
-        <service android:name="io.bettergram.service.CryptoDataService"/>
+        <service android:name="io.bettergram.service.CryptoCurrencyDataService"/>
         <service android:name="io.bettergram.service.ResourcesDataService"/>
         <service
                 android:name="io.bettergram.service.MailChimpService"
diff --git a/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java b/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
index c47caf387..8ffb2bd94 100644
--- a/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
+++ b/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
@@ -16,19 +16,19 @@
 import android.text.TextUtils;
 import android.text.style.ForegroundColorSpan;
 import android.text.style.RelativeSizeSpan;
+import android.util.Log;
 import android.view.*;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import com.sackcentury.shinebuttonlib.ShineButton;
-import io.bettergram.data.CryptoCurrencyInfo;
-import io.bettergram.data.CryptoCurrencyInfoResponse;
-import io.bettergram.data.CryptoCurrencyInfoResponse__JsonHelper;
+import io.bettergram.data.*;
 import io.bettergram.messenger.R;
-import io.bettergram.service.CryptoDataService;
+import io.bettergram.service.CryptoCurrencyDataService;
 import io.bettergram.telegram.messenger.AndroidUtilities;
 import io.bettergram.telegram.messenger.ImageReceiver;
+import io.bettergram.telegram.messenger.NotificationCenter;
 import io.bettergram.telegram.messenger.support.widget.RecyclerView;
 import io.bettergram.telegram.ui.ActionBar.Theme;
 import io.bettergram.telegram.ui.Components.CardView.CardView;
@@ -43,20 +43,20 @@
 import java.util.List;
 
 import static android.text.TextUtils.isEmpty;
-import static io.bettergram.service.CryptoDataService.*;
+import static io.bettergram.service.CryptoCurrencyDataService.*;
 import static io.bettergram.telegram.messenger.AndroidUtilities.dp;
 
-public class CryptoAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+public class CryptoAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements NotificationCenter.NotificationCenterDelegate {
 
     /**
-     * Receives data from {@link CryptoDataService}
+     * Receives data from {@link CryptoCurrencyDataService}
      */
     public BroadcastReceiver receiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
             Bundle bundle = intent.getExtras();
             if (bundle != null) {
-                new Thread(new JsonRunnable(bundle.getString(CryptoDataService.RESULT))).start();
+                new Thread(new JsonRunnable(bundle.getString(CryptoCurrencyDataService.RESULT))).start();
             }
         }
     };
@@ -85,6 +85,33 @@ public void run() {
         }
     }
 
+    @Override
+    public void didReceivedNotification(int id, int account, Object... args) {
+        if (id == NotificationCenter.currencySearchResultsUpdate) {
+            String json = (String) args[0];
+            if (!isEmpty(json)) {
+                try {
+                    json = json.replace("data", "list");
+                    CryptoCurrencyInfoData _data = CryptoCurrencyInfoData__JsonHelper.parseFromJson(json);
+                    AndroidUtilities.runOnUIThread(() -> {
+                        data.clear();
+                        data.addAll(_data.list);
+                        notifyDataSetChanged();
+                    });
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        } else if (id == NotificationCenter.updateCurrenyDataToBackup) {
+            AndroidUtilities.runOnUIThread(() -> {
+                Log.e("search", "Point H");
+                data.clear();
+                data.addAll(backup);
+                notifyDataSetChanged();
+            });
+        }
+    }
+
     class MainViewHolder extends RecyclerView.ViewHolder implements ShineButton.OnCheckedChangeListener, ImageReceiver.ImageReceiverDelegate, View.OnClickListener {
 
         ImageReceiver cryptoPhoto;
@@ -214,12 +241,19 @@ public LabelViewHolder(View itemView) {
     }
 
     private CryptoCurrencyInfoResponse cryptoData;
-
     private List<CryptoCurrencyInfo> data = new ArrayList<>();
     private List<CryptoCurrencyInfo> backup = new ArrayList<>();
     private List<CryptoCurrencyInfo> favorites = new ArrayList<>();
+    private boolean searchMode = false;
+
+    public void setSearchMode(boolean searchMode) {
+        this.searchMode = searchMode;
+        notifyDataSetChanged();
+    }
 
     public CryptoAdapter() {
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.currencySearchResultsUpdate);
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.updateCurrenyDataToBackup);
     }
 
     public void setCryptoData(CryptoCurrencyInfoResponse cryptoData) {
@@ -227,7 +261,7 @@ public void setCryptoData(CryptoCurrencyInfoResponse cryptoData) {
             this.cryptoData = cryptoData;
             if (cryptoData.data != null && !cryptoData.data.list.isEmpty()) {
                 data.clear();
-                data.addAll(cryptoData.data.favorites);
+                //data.addAll(cryptoData.data.favorites);
                 data.addAll(cryptoData.data.list);
                 backup.clear();
                 backup.addAll(data);
@@ -246,7 +280,7 @@ public void setCryptoData(CryptoCurrencyInfoResponse cryptoData) {
 
     @Override
     public int getItemViewType(int position) {
-        return position == 0 ? 0 : position == 1 ? 1 : position == 2 ? 2 : 3;
+        return searchMode ? 3 : position == 0 ? 0 : position == 1 ? 1 : position == 2 ? 2 : 3;
     }
 
 
@@ -386,9 +420,12 @@ protected void onDraw(Canvas canvas) {
     @Override
     public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
         final Context context = holder.itemView.getContext();
-
-        if (holder instanceof HeaderViewHolder) {
+        if (holder instanceof LabelViewHolder) {
+            LabelViewHolder label = (LabelViewHolder) holder;
+            label.itemView.setVisibility(searchMode ? View.GONE : View.VISIBLE);
+        } else if (holder instanceof HeaderViewHolder) {
             HeaderViewHolder header = (HeaderViewHolder) holder;
+            holder.itemView.setVisibility(searchMode ? View.GONE : View.VISIBLE);
             double cap = cryptoData.cap;
             header.textCap.setText(formatHeaderValue(context, "MARKET CAP($)", Number.truncateNumber(cap)));
             double dom = cryptoData.btcDominance;
@@ -397,7 +434,7 @@ public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int positi
             header.textVol.setText(formatHeaderValue(context, "24H VOL($)", Number.truncateNumber(vol)));
         } else if (holder instanceof MainViewHolder) {
 
-            int real_position = position - 3;
+            int real_position = position - (searchMode ? 0 : 3);
 
             if (real_position < 0 || real_position > data.size()) {
                 return;
@@ -419,9 +456,9 @@ public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int positi
                 //main.textCryptoPrice.setTextColor(deltaMinute > 0 ? Color.parseColor("#ff69bc35") : Color.RED);
                 main.textCryptoPrice.setText(String.format(isGreaterZero ? "$%,.2f" : "$%.4f", price));
             }
-            if (!isEmpty(info.icon)) {
+            if (!isEmpty(info.getIcon())) {
                 main.cryptoPhoto.setImage(
-                        info.icon,
+                        info.getIcon(),
                         null,
                         Theme.circle_placeholderDrawable,
                         null,
@@ -449,7 +486,7 @@ public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int positi
 
     @Override
     public int getItemCount() {
-        return data.size() + 3;
+        return data.size() + (searchMode ? 0 : 3);
     }
 
     /**
@@ -473,20 +510,20 @@ public SpannableStringBuilder formatHeaderValue(Context context, String s1, Stri
     }
 
     public void startService(Activity activity) {
-        Intent intent = new Intent(activity, CryptoDataService.class);
+        Intent intent = new Intent(activity, CryptoCurrencyDataService.class);
         intent.putExtra(EXTRA_LIMIT, 100);
         activity.startService(intent);
     }
 
     /**
-     * Register {@link BroadcastReceiver} of {@link CryptoDataService}
+     * Register {@link BroadcastReceiver} of {@link CryptoCurrencyDataService}
      */
     public void registerReceiver(Activity activity) {
-        activity.registerReceiver(receiver, new IntentFilter(CryptoDataService.NOTIFICATION));
+        activity.registerReceiver(receiver, new IntentFilter(CryptoCurrencyDataService.NOTIFICATION));
     }
 
     /**
-     * Unregister {@link BroadcastReceiver} of {@link CryptoDataService}
+     * Unregister {@link BroadcastReceiver} of {@link CryptoCurrencyDataService}
      */
     public void unregisterReceiver(Activity activity) {
         try {
diff --git a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrency.java b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrency.java
index 150ac6201..c1e626eeb 100644
--- a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrency.java
+++ b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrency.java
@@ -9,8 +9,10 @@
     public String code;
     @JsonField(fieldName = "name")
     public String name;
-    @JsonField(fieldName = "url")
-    public String url;
+    //@JsonField(fieldName = "url")
+    //public String url;
+    @JsonField(fieldName = "type")
+    public String type;
     @JsonField(fieldName = "icon")
     public String icon;
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyData.java b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyData.java
index 6e117055e..0883d239f 100644
--- a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyData.java
+++ b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyData.java
@@ -9,6 +9,12 @@
 public class CryptoCurrencyData {
     @JsonField(fieldName = "success")
     public boolean success;
+    @JsonField(fieldName = "coinsUrlBase")
+    public String coinsUrlBase;
+    @JsonField(fieldName = "coinsIcon32Base")
+    public String coinsIcon32Base;
+    @JsonField(fieldName = "coinsIcon64Base")
+    public String coinsIcon64Base;
     @JsonField(fieldName = "data")
     public List<CryptoCurrency> data;
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfo.java b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfo.java
index f5f2a222c..dd61e3501 100644
--- a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfo.java
+++ b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfo.java
@@ -19,8 +19,16 @@
     public double price;
     @JsonField(fieldName = "delta")
     public CryptoCurrencyInfoDelta delta;
-    @JsonField(fieldName = "icon")
-    public String icon;
+//    @JsonField(fieldName = "icon")
+//    public String icon;
+    @JsonField(fieldName = "supply")
+    public long supply;
+    @JsonField(fieldName = "circulating")
+    public long circulating;
     @JsonField(fieldName = "favorite")
     public boolean favorite;
+
+    public String getIcon() {
+        return "https://beta.livecoinwatch.com/public/coins/icons/32/" + code.toLowerCase() + ".png";
+    }
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfoData.java b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfoData.java
index c90e2b943..f2ab1a7e0 100644
--- a/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfoData.java
+++ b/TMessagesProj/src/main/java/io/bettergram/data/CryptoCurrencyInfoData.java
@@ -9,6 +9,6 @@
 public class CryptoCurrencyInfoData {
     @JsonField(fieldName = "list")
     public List<CryptoCurrencyInfo> list;
-    @JsonField(fieldName = "favorites")
-    public List<CryptoCurrencyInfo> favorites;
+    //@JsonField(fieldName = "favorites")
+    //public List<CryptoCurrencyInfo> favorites;
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java b/TMessagesProj/src/main/java/io/bettergram/service/CryptoCurrencyDataService.java
similarity index 70%
rename from TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
rename to TMessagesProj/src/main/java/io/bettergram/service/CryptoCurrencyDataService.java
index 5d3c0bbbc..ae8a0b58f 100644
--- a/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
+++ b/TMessagesProj/src/main/java/io/bettergram/service/CryptoCurrencyDataService.java
@@ -5,12 +5,11 @@
 import android.content.SharedPreferences;
 import android.support.annotation.Nullable;
 import io.bettergram.data.*;
+import io.bettergram.service.api.CurrencyApi;
 import io.bettergram.telegram.messenger.ApplicationLoader;
 import io.bettergram.telegram.messenger.NotificationCenter;
 import io.bettergram.utils.CollectionUtil;
-import okhttp3.HttpUrl;
-import okhttp3.Request;
-import okhttp3.Response;
+import okhttp3.*;
 
 import java.io.IOException;
 import java.util.*;
@@ -18,7 +17,7 @@
 import static android.text.TextUtils.isEmpty;
 import static io.bettergram.telegram.messenger.ApplicationLoader.okhttp_client;
 
-public class CryptoDataService extends BaseDataService {
+public class CryptoCurrencyDataService extends BaseDataService {
 
     public static final String CRYPTO_PREF = "CRYPTO_PREF";
     public static final String KEY_CRYPTO_CURRENCIES = "KEY_CRYPTO_CURRENCIES";
@@ -34,18 +33,20 @@
     public static final String EXTRA__CURRENCY = "EXTRA__CURRENCY";
 
     public static final String RESULT = "result";
-    public static final String NOTIFICATION = "io.bettergram.service.CryptoDataService";
+    public static final String NOTIFICATION = "io.bettergram.service.CryptoCurrencyDataService";
 
-    public static final String CRYPTO_CURRENCIES_URL = "https://http-api.livecoinwatch.com/currencies";
-    public static final String CRYPTO_COINS_URL = "https://http-api.livecoinwatch.com/bettergram/coins";
+    public static final String CURRENCY_URL = "https://alpha-api.livecoinwatch.com/currencies?type=coin";
+    public static final String CURRENCY_COINS_URL = "https://alpha-api.livecoinwatch.com/bettergram/coins";
+    public static final String CURRENCY_STATS_URL = "https://alpha-api.livecoinwatch.com/stats";
 
+    private static final OkHttpClient client = okhttp_client();
     public static final int notify = 60000;
     private Timer mTimer = null;
 
     private static SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(CRYPTO_PREF, Context.MODE_PRIVATE);
 
-    public CryptoDataService() {
-        super("CryptoDataService");
+    public CryptoCurrencyDataService() {
+        super("CryptoCurrencyDataService");
     }
 
     @Override
@@ -58,6 +59,8 @@ public void onDestroy() {
 
     @Override
     protected void onHandleIntent(@Nullable Intent intent) {
+        if (intent == null) return;
+
         mTimer = new Timer();   //recreate new
         boolean canStart = true;
         while (canStart) {
@@ -80,8 +83,7 @@ private void startTimer(Intent intent) {
         mTimer.scheduleAtFixedRate(new TimeDisplay(intent), 0, notify);   //Schedule task
     }
 
-    private List<CryptoCurrencyInfo> addIcons(List<CryptoCurrencyInfo> list,
-                                              List<CryptoCurrency> currencies) {
+    private List<CryptoCurrencyInfo> addIcons(List<CryptoCurrencyInfo> list, List<CryptoCurrency> currencies) {
         if (currencies == null) {
             return new ArrayList<>();
         }
@@ -90,7 +92,7 @@ private void startTimer(Intent intent) {
             final int index = i;
             CryptoCurrency foundCurrency = CollectionUtil.find(currencies, item -> list.get(index).code.equals(item.code));
             if (foundCurrency != null) {
-                list.get(index).icon = foundCurrency.icon;
+                //list.get(index).icon = foundCurrency.icon;
                 list.get(index).name = foundCurrency.name;
             }
         }
@@ -118,14 +120,13 @@ public void run() {
             List<CryptoCurrency> currencies = new ArrayList<>();
 
             if (fetchCryptoCurrencies || isEmpty(savedCryptoJson)) {
-                Request request = new Request.Builder().url(CRYPTO_CURRENCIES_URL).build();
+                Request request = new Request.Builder().url(CURRENCY_URL).build();
                 try {
                     Response response = okhttp_client().newCall(request).execute();
 
                     if (response.isSuccessful() && response.body() != null) {
                         String fetchedCryptoJson = response.body().string();
-                        preferences.edit().putString(KEY_CRYPTO_CURRENCIES, fetchedCryptoJson)
-                                .apply();
+                        preferences.edit().putString(KEY_CRYPTO_CURRENCIES, fetchedCryptoJson).apply();
                         savedCryptoJson = fetchedCryptoJson;
                     } else {
                         if (response.code() == 410) {
@@ -154,57 +155,48 @@ public void run() {
             String favorites = intent.getStringExtra(EXTRA_FAVORITE);
             String currency = intent.getStringExtra(EXTRA__CURRENCY);
 
-            HttpUrl.Builder urlBuilder = Objects.requireNonNull(HttpUrl.parse(CRYPTO_COINS_URL))
-                    .newBuilder();
+            HttpUrl.Builder urlBuilder = Objects.requireNonNull(HttpUrl.parse(CURRENCY_COINS_URL)).newBuilder();
             urlBuilder.addQueryParameter("sort", !isEmpty(sortBy) ? sortBy : "rank");
             urlBuilder.addQueryParameter("order", !isEmpty(orderBy) ? orderBy : "ascending");
             urlBuilder.addQueryParameter("offset", String.valueOf(offset));
             urlBuilder.addQueryParameter("limit", String.valueOf(limit));
-            urlBuilder.addQueryParameter("favorites",
-                    !isEmpty(favorites) ? favorites : String.valueOf(false));
+            urlBuilder.addQueryParameter("favorites", !isEmpty(favorites) ? favorites : String.valueOf(false));
             urlBuilder.addQueryParameter("currency", currency);
 
+            CurrencyApi.cancelCallsByTag("request_currency_coins");
             String url = urlBuilder.build().toString();
-            Request request = new Request.Builder().url(url).build();
+            Request request = new Request.Builder().tag("request_currency_coins").url(url).build();
 
-            try {
-                Response response = okhttp_client().newCall(request).execute();
-
-                if (response.isSuccessful() && response.body() != null) {
-                    String fetchedCurrencyJson = response.body().string();
-                    CryptoCurrencyInfoResponse cryptoResponse = CryptoCurrencyInfoResponse__JsonHelper
-                            .parseFromJson(fetchedCurrencyJson);
-                    cryptoResponse.data.favorites = addIcons(cryptoResponse.data.favorites,
-                            currencies);
-                    cryptoResponse.data.list = addIcons(cryptoResponse.data.list, currencies);
-                    if (!cryptoResponse.data.favorites.isEmpty()) {
-                        for (int i = 0, size = cryptoResponse.data.favorites.size(); i < size;
-                             i++) {
-                            cryptoResponse.data.favorites.get(i).favorite = true;
-                        }
-                    }
-                    String savedFaveCryptoJson = preferences.getString(KEY_CRYPTO_CURRENCIES_FAVORITE, null);
-                    if (!isEmpty(savedFaveCryptoJson)) {
-                        CryptoCurrencyInfoData data = CryptoCurrencyInfoData__JsonHelper.parseFromJson(savedFaveCryptoJson);
-                        if (data != null && !data.favorites.isEmpty()) {
-                            for (int i = 0, size = cryptoResponse.data.list.size(); i < size; i++) {
-                                final int index = i;
-                                CryptoCurrencyInfo inf = CollectionUtil.find(data.favorites,
-                                        (CryptoCurrencyInfo item) -> cryptoResponse.data.list
-                                                .get(index).code.equals(item.code));
-                                cryptoResponse.data.list.get(index).favorite = inf != null;
+            okhttp_client().newCall(request).enqueue(new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                }
+
+                @Override
+                public void onResponse(Call call, Response response) throws IOException {
+                    if (!call.isCanceled() && response != null && response.isSuccessful() && response.body() != null) {
+                        String fetchedCurrencyJson = response.body().string();
+                        CryptoCurrencyInfoResponse cryptoResponse = CryptoCurrencyInfoResponse__JsonHelper.parseFromJson(fetchedCurrencyJson);
+                        cryptoResponse.data.list = addIcons(cryptoResponse.data.list, currencies);
+                        String savedFaveCryptoJson = preferences.getString(KEY_CRYPTO_CURRENCIES_FAVORITE, null);
+                        if (!isEmpty(savedFaveCryptoJson)) {
+                            CryptoCurrencyInfoData data = CryptoCurrencyInfoData__JsonHelper.parseFromJson(savedFaveCryptoJson);
+                            if (data != null && !data.list.isEmpty()) {
+                                for (int i = 0, size = cryptoResponse.data.list.size(); i < size; i++) {
+                                    final int index = i;
+                                    CryptoCurrencyInfo inf = CollectionUtil.find(data.list,
+                                            item -> cryptoResponse.data.list
+                                                    .get(index).code.equals(item.code));
+                                    cryptoResponse.data.list.get(index).favorite = inf != null;
+                                }
                             }
                         }
+                        String json = CryptoCurrencyInfoResponse__JsonHelper.serializeToJson(cryptoResponse);
+                        preferences.edit().putString(KEY_CRYPTO_CURRENCIES_SAVED, json).apply();
+                        publishResults(json, NOTIFICATION, RESULT);
                     }
-
-                    String json = CryptoCurrencyInfoResponse__JsonHelper.serializeToJson(cryptoResponse);
-                    preferences.edit().putString(KEY_CRYPTO_CURRENCIES_SAVED, json).apply();
-
-                    publishResults(json, NOTIFICATION, RESULT);
                 }
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
+            });
         }
     }
 
@@ -243,14 +235,14 @@ public static void faveCurrency(boolean fave, CryptoCurrencyInfo crypto) {
         if (data == null) {
             data = new CryptoCurrencyInfoData();
         }
-        if (data.favorites == null) {
-            data.favorites = new ArrayList<>();
+        if (data.list == null) {
+            data.list = new ArrayList<>();
         }
 
         if (fave) {
-            data.favorites.add(crypto);
+            data.list.add(crypto);
         } else {
-            for (Iterator<CryptoCurrencyInfo> iter = data.favorites.listIterator(); iter.hasNext(); ) {
+            for (Iterator<CryptoCurrencyInfo> iter = data.list.listIterator(); iter.hasNext(); ) {
                 CryptoCurrencyInfo element = iter.next();
                 if (element.code.equals(crypto.code)) {
                     iter.remove();
diff --git a/TMessagesProj/src/main/java/io/bettergram/service/api/CurrencyApi.java b/TMessagesProj/src/main/java/io/bettergram/service/api/CurrencyApi.java
new file mode 100644
index 000000000..4866afdae
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/service/api/CurrencyApi.java
@@ -0,0 +1,103 @@
+package io.bettergram.service.api;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.text.TextUtils;
+import io.bettergram.data.CryptoCurrency;
+import io.bettergram.data.CryptoCurrencyData;
+import io.bettergram.data.CryptoCurrencyData__JsonHelper;
+import io.bettergram.telegram.messenger.ApplicationLoader;
+import io.bettergram.telegram.messenger.NotificationCenter;
+import okhttp3.*;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+import static io.bettergram.service.CryptoCurrencyDataService.CRYPTO_PREF;
+import static io.bettergram.service.CryptoCurrencyDataService.KEY_CRYPTO_CURRENCIES;
+import static io.bettergram.telegram.messenger.ApplicationLoader.okhttp_client;
+
+public final class CurrencyApi {
+    private static final String CURRENCY_SEARCH_URL = "https://alpha-api.livecoinwatch.com/currencies?search=";
+    private static final String CURRENCY_COINS_URL = "https://alpha-api.livecoinwatch.com/coins";
+    private static final ExecutorService THREAD_POOL = Executors.newCachedThreadPool();
+    private static SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(CRYPTO_PREF, Context.MODE_PRIVATE);
+
+    public static void search(String query) {
+        if (query.length() == 0) {
+            cancelCallsByTag("request_currency_search");
+            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.updateCurrenyDataToBackup);
+            return;
+        }
+        THREAD_POOL.submit(() -> {
+            try {
+                String savedCryptoJson = preferences.getString(KEY_CRYPTO_CURRENCIES, null);
+                CryptoCurrencyData data = CryptoCurrencyData__JsonHelper.parseFromJson(savedCryptoJson);
+                if (data != null && data.data != null) {
+                    List<String> codeList = new ArrayList<>();
+                    for (int i = 0, size = data.data.size(); i < size; i++) {
+                        final CryptoCurrency crypto = data.data.get(i);
+                        if (crypto.name.toLowerCase().contains(query.toLowerCase()) || crypto.code.toLowerCase().contains(query.toLowerCase())) {
+                            codeList.add(data.data.get(i).code);
+                        }
+                    }
+                    fetchCoinsFromCodes(codeList, new Callback() {
+
+                        @Override
+                        public void onFailure(Call call, IOException e) {
+                            if (!call.isCanceled()) e.printStackTrace();
+                        }
+
+                        @Override
+                        public void onResponse(Call call, Response response) throws IOException {
+                            String jsonCoins = null;
+                            if (!call.isCanceled() && response != null && response.isSuccessful() && response.body() != null) {
+                                jsonCoins = response.body().string();
+                            }
+                            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.currencySearchResultsUpdate, jsonCoins);
+                        }
+                    });
+
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+
+    public static void cancelCallsByTag(String tag) {
+        //When you want to cancel:
+        //A) go through the queued calls and cancel if the tag matches:
+        for (Call call : okhttp_client().dispatcher().queuedCalls()) {
+            if (Objects.equals(call.request().tag(), tag)) {
+                call.cancel();
+            }
+        }
+
+        //B) go through the running calls and cancel if the tag matches:
+        for (Call call : okhttp_client().dispatcher().runningCalls()) {
+            if (Objects.equals(call.request().tag(), tag)) {
+                call.cancel();
+            }
+        }
+    }
+
+    private static void fetchCoinsFromCodes(List<String> codeList, Callback callback) {
+        cancelCallsByTag("request_currency_search");
+        String codes = TextUtils.join(",", codeList);
+        HttpUrl.Builder urlBuilder = Objects.requireNonNull(HttpUrl.parse(CURRENCY_COINS_URL)).newBuilder();
+        urlBuilder.addQueryParameter("sort", "rank");
+        urlBuilder.addQueryParameter("order", "ascending");
+        urlBuilder.addQueryParameter("offset", "0");
+        urlBuilder.addQueryParameter("limit", "10");
+        urlBuilder.addQueryParameter("currency", "USD");
+        urlBuilder.addQueryParameter("only", codes);
+        String url = urlBuilder.build().toString();
+        Request request = new Request.Builder().tag("request_currency_search").url(url).build();
+        okhttp_client().newCall(request).enqueue(callback);
+    }
+}
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java
index c0fc2ca57..07f48dbb1 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java
@@ -28,7 +28,7 @@
 import com.google.android.gms.common.GooglePlayServicesUtil;
 import com.google.android.gms.security.ProviderInstaller;
 import com.google.firebase.iid.FirebaseInstanceId;
-import io.bettergram.service.CryptoDataService;
+import io.bettergram.service.CryptoCurrencyDataService;
 import io.bettergram.service.NewsDataService;
 import io.bettergram.service.ResourcesDataService;
 import io.bettergram.service.YoutubeDataService;
@@ -50,7 +50,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import static io.bettergram.service.CryptoDataService.EXTRA_LIMIT;
+import static io.bettergram.service.CryptoCurrencyDataService.EXTRA_LIMIT;
 
 public class ApplicationLoader extends Application {
 
@@ -288,7 +288,7 @@ private void updateAndroidSecurityProvider() {
     }
 
     public static void warmupBettergramData(Activity activity) {
-        Intent intent = new Intent(activity, CryptoDataService.class);
+        Intent intent = new Intent(activity, CryptoCurrencyDataService.class);
         intent.putExtra(EXTRA_LIMIT, 100);
         activity.startService(intent);
 
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationCenter.java
index 60a5314ae..f5f3843f1 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationCenter.java
@@ -148,6 +148,8 @@
     public static final int closeSearchByActiveAction = totalEvents++;
 
     public static final int updateToLatestApiVersion = totalEvents++;
+    public static final int currencySearchResultsUpdate = totalEvents++;
+    public static final int updateCurrenyDataToBackup = totalEvents++;
 
     private SparseArray<ArrayList<Object>> observers = new SparseArray<>();
     private SparseArray<ArrayList<Object>> removeAfterBroadcast = new SparseArray<>();
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
index 6563d9dd0..ce822bb4d 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
@@ -34,6 +34,7 @@
 import io.bettergram.Constants;
 import io.bettergram.adapters.*;
 import io.bettergram.messenger.R;
+import io.bettergram.service.api.CurrencyApi;
 import io.bettergram.telegram.messenger.*;
 import io.bettergram.telegram.messenger.support.widget.LinearLayoutManager;
 import io.bettergram.telegram.messenger.support.widget.LinearSmoothScrollerMiddle;
@@ -81,6 +82,7 @@
     private ChatActivityEnterView commentView;
     private ActionBarMenuItem switchItem;
 
+    private PullRefreshLayout ptrLayout;
     private BottomNavigationBar bottomBar;
 
     private AlertDialog permissionDialog;
@@ -177,6 +179,8 @@ public boolean onFragmentCreate() {
             NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetPasscode);
 
             NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.updateToLatestApiVersion);
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.currencySearchResultsUpdate);
+            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.updateCurrenyDataToBackup);
         }
 
         if (!dialogsLoaded[currentAccount]) {
@@ -221,6 +225,8 @@ public void onFragmentDestroy() {
             NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetPasscode);
 
             NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.updateToLatestApiVersion);
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.currencySearchResultsUpdate);
+            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.updateCurrenyDataToBackup);
         }
         if (commentView != null) {
             commentView.onDestroy();
@@ -285,7 +291,11 @@ public boolean canCollapseSearch() {
 
             @Override
             public void onSearchCollapse() {
-                newTabsView.hide(false);
+                if (currentBottomTabPosition == 0) {
+                    newTabsView.hide(false);
+                } else {
+                    cryptoAdapter.setSearchMode(false);
+                }
                 searching = false;
                 searchWas = false;
                 if (listView != null) {
@@ -301,34 +311,42 @@ public void onSearchCollapse() {
                         floatingButton.setTranslationY(AndroidUtilities.dp(100));
                         hideFloatingButton(false, false);
                     }
-                    if (listView.getAdapter() != dialogsAdapter) {
+                    if (listView.getAdapter() != dialogsAdapter && currentBottomTabPosition == 0) {
                         listView.setAdapter(dialogsAdapter);
                         dialogsAdapter.notifyDataSetChanged();
                     }
                 }
-                if (dialogsSearchAdapter != null) {
-                    dialogsSearchAdapter.searchDialogs(null);
+                if (currentBottomTabPosition == 0) {
+                    if (dialogsSearchAdapter != null) {
+                        dialogsSearchAdapter.searchDialogs(null);
+                    }
+                    updatePasscodeButton();
                 }
-                updatePasscodeButton();
             }
 
             @Override
             public void onTextChanged(EditText editText) {
                 String text = editText.getText().toString();
-                if (text.length() != 0 || dialogsSearchAdapter != null && dialogsSearchAdapter.hasRecentRearch()) {
-                    searchWas = true;
-                    if (dialogsSearchAdapter != null && listView.getAdapter() != dialogsSearchAdapter) {
-                        listView.setAdapter(dialogsSearchAdapter);
-                        dialogsSearchAdapter.notifyDataSetChanged();
+                if (currentBottomTabPosition == 0) {
+                    if (text.length() != 0 || dialogsSearchAdapter != null && dialogsSearchAdapter.hasRecentRearch()) {
+                        searchWas = true;
+                        if (dialogsSearchAdapter != null && listView.getAdapter() != dialogsSearchAdapter) {
+                            listView.setAdapter(dialogsSearchAdapter);
+                            dialogsSearchAdapter.notifyDataSetChanged();
+                        }
+                        if (searchEmptyView != null && listView.getEmptyView() != searchEmptyView) {
+                            progressView.setVisibility(View.GONE);
+                            searchEmptyView.showTextView();
+                            listView.setEmptyView(searchEmptyView);
+                        }
                     }
-                    if (searchEmptyView != null && listView.getEmptyView() != searchEmptyView) {
-                        progressView.setVisibility(View.GONE);
-                        searchEmptyView.showTextView();
-                        listView.setEmptyView(searchEmptyView);
+                    if (dialogsSearchAdapter != null) {
+                        dialogsSearchAdapter.searchDialogs(text);
                     }
-                }
-                if (dialogsSearchAdapter != null) {
-                    dialogsSearchAdapter.searchDialogs(text);
+                } else {
+                    ptrLayout.setRefreshing(text.length() > 0);
+                    cryptoAdapter.setSearchMode(text.length() > 0);
+                    CurrencyApi.search(text);
                 }
             }
         });
@@ -601,7 +619,7 @@ public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State
 
         tabsContainer.addView(newTabsView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, AndroidUtilities.isTablet() ? 44 : 42, Gravity.TOP));
 
-        PullRefreshLayout ptrLayout = new PullRefreshLayout(context);
+        ptrLayout = new PullRefreshLayout(context);
         ptrLayout.setEnabled(false); /* setting as disabled by default*/
         ptrLayout.addView(listView, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
 
@@ -1480,17 +1498,15 @@ public void onMessageSend(CharSequence message) {
                     listView.postAndNotifyAdapter(() -> {
                         currentBottomTabPosition = position;
                         actionBar.setTitle(title);
-
-                        boolean isChat = position == 0;
-
+                        final boolean isChat = position == 0;
                         floatingButton.post(() -> hideFloatingButton(!isChat, true));
                         newTabsView.post(() -> newTabsView.hide(!isChat));
                         ptrLayout.setRefreshing(false);
                         ptrLayout.setEnabled(position == 2 || position == 3);
-
+                        final boolean shouldOpen = position == 0 || position == 1;
                         ActionBarMenuItem itemSearch = menu.getItem(0);
-                        itemSearch.setVisibility(!isChat ? View.GONE : View.VISIBLE);
-
+                        itemSearch.setVisibility(!shouldOpen ? View.GONE : View.VISIBLE);
+                        actionBar.closeSearchField();
                         switch (position) {
                             case 0:
                                 if (!(listView.getAdapter() instanceof BetterDialogsAdapter)) {
@@ -1940,7 +1956,9 @@ public void onRequestPermissionsResultFragment(int requestCode, String[] permiss
     @Override
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, int account, Object... args) {
-        if (id == NotificationCenter.dialogsNeedReload) {
+        if (id == NotificationCenter.currencySearchResultsUpdate || id == NotificationCenter.updateCurrenyDataToBackup) {
+            ptrLayout.post(() -> ptrLayout.setRefreshing(false));
+        } else if (id == NotificationCenter.dialogsNeedReload) {
             checkUnreadCount(true);
             if (dialogsAdapter != null) {
                 if (dialogsAdapter.isDataSetChanged() || args.length > 0) {
