diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index f3326f40c..476403590 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -378,4 +378,8 @@ public static String MD5(String md5) {
         }
         return null;
     }
+
+    public static float lerp(float a, float b, float f) {
+        return a + f * (b - a);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index a2b852180..405763a8f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -416,6 +416,9 @@ public void run() {
     public static Paint dialogs_countPaint;
     public static Paint dialogs_errorPaint;
     public static Paint dialogs_countGrayPaint;
+    public static Paint dialogs_archiveOverlayPaint;
+    public static Paint dialogs_archiveOverlaySliderPaint;
+    public static Paint dialogs_archiveOverlaySliderIconBackgroundPaint;
     public static TextPaint dialogs_namePaint;
     public static TextPaint dialogs_nameEncryptedPaint;
     public static TextPaint dialogs_searchNamePaint;
@@ -426,6 +429,7 @@ public void run() {
     public static TextPaint dialogs_timePaint;
     public static TextPaint dialogs_countTextPaint;
     public static TextPaint dialogs_archiveTextPaint;
+    public static TextPaint dialogs_archiveOverlayTextPaint;
     public static TextPaint dialogs_onlinePaint;
     public static TextPaint dialogs_offlinePaint;
     public static Drawable dialogs_checkDrawable;
@@ -441,6 +445,7 @@ public void run() {
     public static Drawable dialogs_muteDrawable;
     public static Drawable dialogs_verifiedDrawable;
     public static ScamDrawable dialogs_scamDrawable;
+    public static Drawable dialogs_archiveArrowDrawable;
     public static Drawable dialogs_verifiedCheckDrawable;
     public static Drawable dialogs_pinnedDrawable;
     public static Drawable dialogs_mentionDrawable;
@@ -806,10 +811,13 @@ public void run() {
     public static final String key_chats_secretIcon = "chats_secretIcon";
     public static final String key_chats_nameIcon = "chats_nameIcon";
     public static final String key_chats_pinnedIcon = "chats_pinnedIcon";
+    public static final String key_chats_archiveSliderBackground = "chats_archiveSliderBackground";
+    public static final String key_chats_archiveSliderIconBackground = "chats_archiveSliderIconBackground";
     public static final String key_chats_archiveBackground = "chats_archiveBackground";
     public static final String key_chats_archivePinBackground = "chats_archivePinBackground";
     public static final String key_chats_archiveIcon = "chats_archiveIcon";
     public static final String key_chats_archiveText = "chats_archiveText";
+    public static final String key_chats_archiveOverlayText = "chats_archiveOverlayText";
     public static final String key_chats_message = "chats_message";
     public static final String key_chats_messageArchived = "chats_messageArchived";
     public static final String key_chats_message_threeLines = "chats_message_threeLines";
@@ -1437,10 +1445,13 @@ public void run() {
         defaultColors.put(key_chats_unreadCounter, 0xff4ecc5e);
         defaultColors.put(key_chats_unreadCounterMuted, 0xffc6c9cc);
         defaultColors.put(key_chats_unreadCounterText, 0xffffffff);
+        defaultColors.put(key_chats_archiveSliderBackground, 0xffdddee0);
+        defaultColors.put(key_chats_archiveSliderIconBackground, 0xffffffff);
         defaultColors.put(key_chats_archiveBackground, 0xff66a9e0);
         defaultColors.put(key_chats_archivePinBackground, 0xff9faab3);
         defaultColors.put(key_chats_archiveIcon, 0xffffffff);
         defaultColors.put(key_chats_archiveText, 0xffffffff);
+        defaultColors.put(key_chats_archiveOverlayText, 0xffffffff);
         defaultColors.put(key_chats_name, 0xff222222);
         defaultColors.put(key_chats_nameArchived, 0xff525252);
         defaultColors.put(key_chats_secretName, 0xff00a60e);
@@ -1951,6 +1962,7 @@ public void run() {
         fallbackKeys.put(key_chats_messageArchived, key_chats_message);
         fallbackKeys.put(key_avatar_backgroundArchived, key_chats_unreadCounterMuted);
         fallbackKeys.put(key_avatar_backgroundArchivedHidden, key_chats_unreadCounterMuted);
+        fallbackKeys.put(key_chats_archiveSliderBackground, key_windowBackgroundWhite);
         fallbackKeys.put(key_chats_archiveBackground, key_chats_actionBackground);
         fallbackKeys.put(key_chats_archivePinBackground, key_chats_unreadCounterMuted);
         fallbackKeys.put(key_chats_archiveIcon, key_chats_actionIcon);
@@ -3879,6 +3891,9 @@ public static void createDialogsResources(Context context) {
             dialogs_countTextPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
             dialogs_archiveTextPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             dialogs_archiveTextPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            dialogs_archiveOverlayTextPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            dialogs_archiveOverlayTextPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            dialogs_archiveOverlayTextPaint.setTextAlign(Paint.Align.CENTER);
             dialogs_onlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             dialogs_offlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
 
@@ -3887,6 +3902,9 @@ public static void createDialogsResources(Context context) {
             dialogs_onlineCirclePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
             dialogs_countPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
             dialogs_countGrayPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            dialogs_archiveOverlayPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            dialogs_archiveOverlaySliderPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            dialogs_archiveOverlaySliderIconBackgroundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
             dialogs_errorPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
 
             dialogs_lockDrawable = resources.getDrawable(R.drawable.list_secret);
@@ -3901,6 +3919,7 @@ public static void createDialogsResources(Context context) {
             dialogs_muteDrawable = resources.getDrawable(R.drawable.list_mute).mutate();
             dialogs_verifiedDrawable = resources.getDrawable(R.drawable.verified_area);
             dialogs_scamDrawable = new ScamDrawable(11);
+            dialogs_archiveArrowDrawable = resources.getDrawable(R.drawable.archive_swipe);
             dialogs_verifiedCheckDrawable = resources.getDrawable(R.drawable.verified_check);
             dialogs_mentionDrawable = resources.getDrawable(R.drawable.mentionchatslist);
             dialogs_botDrawable = resources.getDrawable(R.drawable.list_bot);
@@ -3914,6 +3933,7 @@ public static void createDialogsResources(Context context) {
         dialogs_timePaint.setTextSize(AndroidUtilities.dp(13));
         dialogs_countTextPaint.setTextSize(AndroidUtilities.dp(13));
         dialogs_archiveTextPaint.setTextSize(AndroidUtilities.dp(13));
+        dialogs_archiveOverlayTextPaint.setTextSize(AndroidUtilities.dp(16));
         dialogs_onlinePaint.setTextSize(AndroidUtilities.dp(15));
         dialogs_offlinePaint.setTextSize(AndroidUtilities.dp(15));
         dialogs_searchNamePaint.setTextSize(AndroidUtilities.dp(16));
@@ -3935,9 +3955,13 @@ public static void applyDialogsTheme() {
         dialogs_timePaint.setColor(getColor(key_chats_date));
         dialogs_countTextPaint.setColor(getColor(key_chats_unreadCounterText));
         dialogs_archiveTextPaint.setColor(getColor(key_chats_archiveText));
+        dialogs_archiveOverlayTextPaint.setColor(getColor(key_chats_archiveOverlayText));
         dialogs_messagePrintingPaint.setColor(getColor(key_chats_actionMessage));
         dialogs_countPaint.setColor(getColor(key_chats_unreadCounter));
         dialogs_countGrayPaint.setColor(getColor(key_chats_unreadCounterMuted));
+        dialogs_archiveOverlayPaint.setColor(getColor(key_avatar_backgroundArchivedHidden));
+        dialogs_archiveOverlaySliderPaint.setColor(getColor(key_chats_archiveSliderBackground));
+        dialogs_archiveOverlaySliderIconBackgroundPaint.setColor(getColor(key_chats_archiveSliderIconBackground));
         dialogs_errorPaint.setColor(getColor(key_chats_sentError));
         dialogs_onlinePaint.setColor(getColor(key_windowBackgroundWhiteBlueText3));
         dialogs_offlinePaint.setColor(getColor(key_windowBackgroundWhiteGrayText3));
@@ -3959,6 +3983,7 @@ public static void applyDialogsTheme() {
         setDrawableColorByKey(dialogs_verifiedCheckDrawable, key_chats_verifiedCheck);
         setDrawableColorByKey(dialogs_holidayDrawable, key_actionBarDefaultTitle);
         setDrawableColorByKey(dialogs_scamDrawable, key_chats_draft);
+        setDrawableColorByKey(dialogs_archiveArrowDrawable, key_avatar_backgroundArchivedHidden);
     }
 
     public static void destroyResources() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 4096a62eb..fcab4ae62 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -11,6 +11,7 @@
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
@@ -27,28 +28,33 @@
 import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.animation.Interpolator;
+import android.view.animation.OvershootInterpolator;
+
+import androidx.core.graphics.ColorUtils;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.MediaDataController;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DialogObject;
+import org.telegram.messenger.Emoji;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLocation;
+import org.telegram.messenger.ImageReceiver;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
-import org.telegram.messenger.FileLog;
+import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.Emoji;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.CheckBox2;
+import org.telegram.ui.Components.CubicBezierInterpolator;
 import org.telegram.ui.Components.RLottieDrawable;
 import org.telegram.ui.Components.StaticLayoutEx;
 import org.telegram.ui.Components.TypefaceSpan;
@@ -110,12 +116,21 @@
     private float currentRevealProgress;
     private float currentRevealBounceProgress;
     private float archiveBackgroundProgress;
+    private float archiveScrollProgress;
+    private boolean isArchiveScrolling;
 
     private ImageReceiver avatarImage = new ImageReceiver(this);
     private AvatarDrawable avatarDrawable = new AvatarDrawable();
+    private BounceInterpolator interpolator = new BounceInterpolator();
+    private Interpolator hardOvershootInterpolator = new OvershootInterpolator(10f);
+    private Interpolator softOvershootInterpolator2 = new OvershootInterpolator(.5f);
+
     private boolean animatingArchiveAvatar;
     private float animatingArchiveAvatarProgress;
-    private BounceInterpolator interpolator = new BounceInterpolator();
+    private boolean isArchiveInTransition;
+    private float archiveTransitionProgress;
+    private float archiveOverlayArrowProgress;
+    private float archiveOverlayTextProgress;
 
     private TLRPC.User user;
     private TLRPC.Chat chat;
@@ -1403,6 +1418,23 @@ public void animateArchiveAvatar() {
         invalidate();
     }
 
+    public void startArchiveTransition() {
+        if (avatarDrawable.getAvatarType() != AvatarDrawable.AVATAR_TYPE_ARCHIVED) {
+            return;
+        }
+        isArchiveScrolling = false;
+        isArchiveInTransition = true;
+        archiveTransitionProgress = 0f;
+        archiveOverlayTextProgress = 170f;
+        archiveOverlayArrowProgress = 250f;
+        Theme.dialogs_archiveAvatarDrawable.setProgress(0f);
+        Theme.dialogs_archiveAvatarDrawable.beginApplyLayerColors();
+        Theme.dialogs_archiveAvatarDrawable.setLayerColor("Arrow2.**",
+                Theme.getColor(Theme.key_chats_archiveSliderBackground));
+        Theme.dialogs_archiveAvatarDrawable.commitApplyLayerColors();
+        invalidate();
+    }
+
     public void setChecked(boolean checked, boolean animated) {
         if (checkBox == null) {
             return;
@@ -1950,14 +1982,16 @@ protected void onDraw(Canvas canvas) {
             Theme.dialogs_pinnedDrawable.draw(canvas);
         }
 
-        if (animatingArchiveAvatar) {
-            canvas.save();
-            float scale = 1.0f + interpolator.getInterpolation(animatingArchiveAvatarProgress / 170.0f);
-            canvas.scale(scale, scale, avatarImage.getCenterX(), avatarImage.getCenterY());
-        }
-        avatarImage.draw(canvas);
-        if (animatingArchiveAvatar) {
-            canvas.restore();
+        if (!isArchiveInTransition) {
+            if (animatingArchiveAvatar) {
+                canvas.save();
+                float scale = 1.0f + interpolator.getInterpolation(animatingArchiveAvatarProgress / 170.0f);
+                canvas.scale(scale, scale, avatarImage.getCenterX(), avatarImage.getCenterY());
+            }
+            avatarImage.draw(canvas);
+            if (animatingArchiveAvatar) {
+                canvas.restore();
+            }
         }
 
         if (user != null && isDialogCell && currentDialogFolderId == 0 && !MessagesController.isSupportUser(user) && !user.bot) {
@@ -2067,6 +2101,116 @@ protected void onDraw(Canvas canvas) {
             }
         }
 
+        if (currentDialogFolderId != 0 && (isArchiveScrolling || isArchiveInTransition)) {
+            float height = getHeight();
+            float sliderRadius = AndroidUtilities.dpf2(9f);
+            float sliderVertPadding = AndroidUtilities.dpf2(8f) + sliderRadius;
+            float sliderCenterX = AndroidUtilities.dpf2(10f) + avatarImage.getImageWidth() / 2f;
+            float sliderTopCenterY = sliderVertPadding - getTop();
+            float sliderBottomCenterY = height - sliderVertPadding;
+
+            if (sliderTopCenterY > sliderBottomCenterY) {
+                sliderTopCenterY = sliderBottomCenterY;
+            }
+
+            final float fraction = archiveTransitionProgress / 300f;
+            final int alpha = (int) Utilities.lerp(255f, 0f, Math.min(1f, fraction * 4f));
+            final float maxAlphaScroll = sliderVertPadding * 2f / getHeight();
+            final int scrollAlpha = (int) (255 * Utilities.lerp(0.2f, 1f,
+                    Math.min(1f, archiveScrollProgress / maxAlphaScroll)));
+
+            float bgRadius = 0;
+            if (!isArchiveInTransition) {
+                canvas.drawColor(Theme.getColor(Theme.key_avatar_backgroundArchivedHidden));
+            } else {
+                bgRadius = Utilities.lerp(getWidth() - avatarImage.getCenterX(), avatarImage.getImageWidth() / 2f,
+                        softOvershootInterpolator2.getInterpolation(fraction));
+                canvas.drawCircle(avatarImage.getCenterX(), avatarImage.getCenterY(),
+                        bgRadius, Theme.dialogs_archiveOverlayPaint);
+            }
+
+            Theme.dialogs_archiveOverlaySliderPaint.setAlpha(alpha);
+            canvas.drawRect(sliderCenterX - sliderRadius, sliderTopCenterY,
+                    sliderCenterX + sliderRadius, sliderBottomCenterY,
+                    Theme.dialogs_archiveOverlaySliderPaint);
+            rect.set(sliderCenterX - sliderRadius, sliderTopCenterY - sliderRadius,
+                    sliderCenterX + sliderRadius, sliderTopCenterY + sliderRadius);
+            canvas.drawArc(rect, -180f, 180f, true, Theme.dialogs_archiveOverlaySliderPaint);
+
+            if (!isArchiveInTransition) {
+                Theme.dialogs_archiveOverlaySliderIconBackgroundPaint.setAlpha(Math.min(alpha, scrollAlpha));
+                canvas.drawCircle(sliderCenterX, sliderBottomCenterY, sliderRadius,
+                        Theme.dialogs_archiveOverlaySliderIconBackgroundPaint);
+                Theme.dialogs_archiveArrowDrawable.setAlpha(alpha);
+                final float p = CubicBezierInterpolator.EASE_BOTH.getInterpolation(archiveOverlayArrowProgress / 250f);
+                final float dx = Theme.dialogs_archiveArrowDrawable.getIntrinsicWidth() / 2f;
+                final float dy = Theme.dialogs_archiveArrowDrawable.getIntrinsicHeight() / 2f;
+                canvas.save();
+                canvas.rotate((2f - p) * 180f + 180f, sliderCenterX, sliderBottomCenterY);
+                canvas.translate(0f, Utilities.lerp(0f, AndroidUtilities.dpf2(0.66f), p));
+                Theme.dialogs_archiveArrowDrawable.setBounds(
+                        (int) (sliderCenterX - dx), (int) (sliderBottomCenterY - dy),
+                        (int) (sliderCenterX + dx), (int) (sliderBottomCenterY + dy));
+                Theme.dialogs_archiveArrowDrawable.draw(canvas);
+                canvas.restore();
+            } else {
+                final int saveCount = canvas.save();
+                final int saveColor = avatarDrawable.getColor();
+
+                final float translateY = Utilities.lerp(sliderBottomCenterY - avatarImage.getCenterY(), 0f,
+                        CubicBezierInterpolator.DEFAULT.getInterpolation(fraction));
+                canvas.translate(0f, translateY);
+
+                float scale = Utilities.lerp(4.5f * sliderRadius / avatarImage.getImageWidth(), 1f,
+                        hardOvershootInterpolator.getInterpolation(fraction));
+                canvas.scale(scale, scale, avatarImage.getCenterX(), avatarImage.getCenterY());
+
+                Theme.dialogs_archiveAvatarDrawable.beginApplyLayerColors();
+                final int sliderColor = ColorUtils.setAlphaComponent(Theme.getColor(Theme.key_chats_archiveSliderBackground), alpha);
+                Theme.dialogs_archiveAvatarDrawable.setLayerColor("Arrow2.**", ColorUtils.compositeColors(
+                        sliderColor, Theme.getColor(Theme.key_avatar_backgroundArchivedHidden)));
+                Theme.dialogs_archiveAvatarDrawable.commitApplyLayerColors();
+
+                avatarDrawable.setColor(Color.TRANSPARENT);
+                avatarImage.draw(canvas);
+                avatarDrawable.setColor(saveColor);
+                canvas.restoreToCount(saveCount);
+
+                canvas.clipRect(0, 0, sliderCenterX + bgRadius, getHeight());
+            }
+
+            if (archiveOverlayTextProgress < 170f) {
+                Theme.dialogs_archiveOverlayTextPaint.setAlpha(Math.min(scrollAlpha,
+                        Math.min(alpha, (int) (255f * (1f - archiveOverlayTextProgress / 170f)))));
+                final float dy;
+                if (archiveScrollProgress >= 0.8f) {
+                    dy = Utilities.lerp(0f, AndroidUtilities.dpf2(8f), CubicBezierInterpolator.EASE_OUT
+                            .getInterpolation(archiveOverlayTextProgress / 170f));
+                } else {
+                    dy = Utilities.lerp(AndroidUtilities.dpf2(8f), 0f, CubicBezierInterpolator.EASE_IN
+                            .getInterpolation(1f - (archiveOverlayTextProgress / 170f)));
+                }
+                canvas.drawText(LocaleController.getString("ArchiveSwipeDown", R.string.ArchiveSwipeDown),
+                        getWidth() / 2f, getHeight() - AndroidUtilities.dpf2(10.5f) + dy,
+                        Theme.dialogs_archiveOverlayTextPaint);
+            }
+
+            if (archiveOverlayTextProgress > 0f) {
+                Theme.dialogs_archiveOverlayTextPaint.setAlpha(Math.min(alpha, (int) (255f * archiveOverlayTextProgress / 170f)));
+                final float dy;
+                if (archiveScrollProgress >= 0.8f) {
+                    dy = Utilities.lerp(AndroidUtilities.dpf2(-8f), 0f, CubicBezierInterpolator.EASE_IN
+                            .getInterpolation(archiveOverlayTextProgress / 170f));
+                } else {
+                    dy = Utilities.lerp(0f, AndroidUtilities.dpf2(-8f), CubicBezierInterpolator.EASE_OUT
+                            .getInterpolation(1f - (archiveOverlayTextProgress / 170f)));
+                }
+                canvas.drawText(LocaleController.getString("ArchiveRelease", R.string.ArchiveRelease),
+                        getWidth() / 2f, getHeight() - AndroidUtilities.dpf2(10.5f) + dy,
+                        Theme.dialogs_archiveOverlayTextPaint);
+            }
+        }
+
         if (animatingArchiveAvatar) {
             animatingArchiveAvatarProgress += dt;
             if (animatingArchiveAvatarProgress >= 170.0f) {
@@ -2075,6 +2219,48 @@ protected void onDraw(Canvas canvas) {
             }
             needInvalidate = true;
         }
+        if (isArchiveInTransition) {
+            archiveTransitionProgress += dt;
+            if (archiveTransitionProgress >= 300f) {
+                archiveTransitionProgress = 300f;
+                isArchiveInTransition = false;
+                archiveOverlayArrowProgress = 0f;
+                archiveOverlayTextProgress = 0f;
+                Theme.dialogs_archiveAvatarDrawable.beginApplyLayerColors();
+                Theme.dialogs_archiveAvatarDrawable.setLayerColor("Arrow2.**",
+                        Theme.getColor(Theme.key_avatar_backgroundArchivedHidden));
+                Theme.dialogs_archiveAvatarDrawable.commitApplyLayerColors();
+            }
+            needInvalidate = true;
+        }
+        if (isArchiveScrolling) {
+            if (archiveScrollProgress >= 0.8f && archiveOverlayArrowProgress < 250f) {
+                archiveOverlayArrowProgress += dt;
+                if (archiveOverlayArrowProgress > 250f) {
+                    archiveOverlayArrowProgress = 250f;
+                }
+                needInvalidate = true;
+            } else if (archiveScrollProgress < 0.8f && archiveOverlayArrowProgress > 0f) {
+                archiveOverlayArrowProgress -= dt;
+                if (archiveOverlayArrowProgress < 0f) {
+                    archiveOverlayArrowProgress = 0f;
+                }
+                needInvalidate = true;
+            }
+            if (archiveScrollProgress >= 0.8f && archiveOverlayTextProgress < 170f) {
+                archiveOverlayTextProgress += dt;
+                if (archiveOverlayTextProgress > 170f) {
+                    archiveOverlayTextProgress = 170f;
+                }
+                needInvalidate = true;
+            } else if (archiveScrollProgress < 0.8f && archiveOverlayTextProgress > 0f) {
+                archiveOverlayTextProgress -= dt;
+                if (archiveOverlayTextProgress < 0f) {
+                    archiveOverlayTextProgress = 0f;
+                }
+                needInvalidate = true;
+            }
+        }
         if (drawRevealBackground) {
             if (currentRevealBounceProgress < 1.0f) {
                 currentRevealBounceProgress += dt / 170.0f;
@@ -2103,6 +2289,7 @@ protected void onDraw(Canvas canvas) {
                 needInvalidate = true;
             }
         }
+
         if (needInvalidate) {
             invalidate();
         }
@@ -2230,6 +2417,18 @@ public float getClipProgress() {
         return clipProgress;
     }
 
+    public void setArchiveScrollProgress(float archiveScrollProgress) {
+        this.archiveScrollProgress = archiveScrollProgress;
+        isArchiveScrolling = archiveScrollProgress > 0f;
+        if (!isArchiveScrolling) {
+            archiveOverlayArrowProgress = 0f;
+            archiveOverlayTextProgress = 0f;
+        }
+        isArchiveInTransition = false;
+        archiveTransitionProgress = 0f;
+        invalidate();
+    }
+
     public void setTopClip(int value) {
         topClip = value;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 0fcee8232..d0e92ca7f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -35,12 +35,6 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Vibrator;
-
-import androidx.recyclerview.widget.ItemTouchHelper;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -55,39 +49,51 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import androidx.recyclerview.widget.ItemTouchHelper;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.telegram.messenger.AccountInstance;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
-import org.telegram.messenger.MediaDataController;
+import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DialogObject;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.ImageLocation;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.NotificationsController;
+import org.telegram.messenger.R;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.XiaomiUtilities;
-import org.telegram.messenger.FileLog;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
-import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.MenuDrawable;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
 import org.telegram.ui.Adapters.DialogsAdapter;
 import org.telegram.ui.Adapters.DialogsSearchAdapter;
 import org.telegram.ui.Cells.AccountSelectCell;
 import org.telegram.ui.Cells.ArchiveHintInnerCell;
+import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.DialogsEmptyCell;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.DrawerActionCell;
@@ -102,12 +108,6 @@
 import org.telegram.ui.Cells.ShadowSectionCell;
 import org.telegram.ui.Cells.TextCell;
 import org.telegram.ui.Cells.UserCell;
-import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.ActionBar.MenuDrawable;
 import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.AnimatedArrowDrawable;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -116,8 +116,8 @@
 import org.telegram.ui.Components.CombinedDrawable;
 import org.telegram.ui.Components.CubicBezierInterpolator;
 import org.telegram.ui.Components.DialogsItemAnimator;
-import org.telegram.ui.Components.FragmentContextView;
 import org.telegram.ui.Components.EmptyTextProgressView;
+import org.telegram.ui.Components.FragmentContextView;
 import org.telegram.ui.Components.JoinGroupAlert;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.NumberTextView;
@@ -126,7 +126,6 @@
 import org.telegram.ui.Components.RLottieDrawable;
 import org.telegram.ui.Components.RadialProgressView;
 import org.telegram.ui.Components.RecyclerListView;
-import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 import org.telegram.ui.Components.StickersAlert;
 import org.telegram.ui.Components.UndoView;
@@ -245,10 +244,10 @@
     private final static int mute = 104;
     private final static int archive = 105;
 
+    private boolean allowShowHiddenView;
     private boolean allowScrollToHiddenView;
+    private boolean scrolledToHiddenView;
     private boolean scrollingManually;
-    private int totalConsumedAmount;
-    private boolean startedScrollAtTop;
 
     private class ContentView extends SizeNotifierFrameLayout {
 
@@ -386,16 +385,9 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
         public boolean onInterceptTouchEvent(MotionEvent ev) {
             int action = ev.getActionMasked();
             if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
-                if (action == MotionEvent.ACTION_DOWN) {
-                    int currentPosition = layoutManager.findFirstVisibleItemPosition();
-                    startedScrollAtTop = currentPosition <= 1;
-                } else {
-                    if (actionBar.isActionModeShowed()) {
-                        allowMoving = true;
-                    }
+                if (action != MotionEvent.ACTION_DOWN && actionBar.isActionModeShowed()) {
+                    allowMoving = true;
                 }
-                totalConsumedAmount = 0;
-                allowScrollToHiddenView = false;
             }
             return super.onInterceptTouchEvent(ev);
         }
@@ -1045,21 +1037,29 @@ public boolean onTouchEvent(MotionEvent e) {
                 boolean result = super.onTouchEvent(e);
                 if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
                     if (allowScrollToHiddenView) {
-                        int currentPosition = layoutManager.findFirstVisibleItemPosition();
-                        if (currentPosition == 0) {
-                            View view = layoutManager.findViewByPosition(currentPosition);
-                            int height = AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) / 4 * 3;
-                            int diff = view.getTop() + view.getMeasuredHeight();
-                            if (view != null) {
-                                if (diff < height) {
-                                    listView.smoothScrollBy(0, diff, CubicBezierInterpolator.EASE_OUT_QUINT);
-                                } else {
-                                    listView.smoothScrollBy(0, view.getTop(), CubicBezierInterpolator.EASE_OUT_QUINT);
+                        if (layoutManager.findFirstVisibleItemPosition() == 0) {
+                            DialogCell view = (DialogCell) layoutManager.findViewByPosition(0);
+                            if (!allowShowHiddenView) {
+                                final int dy = view.getTop() + view.getMeasuredHeight();
+                                if (dy != 0) {
+                                    waitingForScrollFinished = true;
+                                    listView.smoothScrollBy(0, dy, CubicBezierInterpolator.EASE_OUT_QUINT);
+                                }
+                            } else {
+                                final int dy = view.getTop();
+                                if (dy != 0) {
+                                    waitingForScrollFinished = true;
+                                    listView.smoothScrollBy(0, dy, CubicBezierInterpolator.EASE_OUT_QUINT);
                                 }
+                                view.startArchiveTransition();
                             }
                         }
+                        allowShowHiddenView = false;
                         allowScrollToHiddenView = false;
+                        scrolledToHiddenView = true;
                     }
+                } else if (action == MotionEvent.ACTION_DOWN && !allowScrollToHiddenView) {
+                    scrolledToHiddenView = false;
                 }
                 return result;
             }
@@ -1110,6 +1110,7 @@ protected void onAllAnimationsDone() {
         listView.setInstantClick(true);
         listView.setTag(4);
         layoutManager = new LinearLayoutManager(context) {
+
             @Override
             public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
                 if (hasHiddenArchive() && position == 1) {
@@ -1123,7 +1124,7 @@ public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State
 
             @Override
             public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {
-                if (listView.getAdapter() == dialogsAdapter && dialogsType == 0 && !onlySelect && !allowScrollToHiddenView && folderId == 0 && dy < 0 && getMessagesController().hasHiddenArchive()) {
+                if (listView.getAdapter() == dialogsAdapter && dialogsType == 0 && !onlySelect && folderId == 0 && getMessagesController().hasHiddenArchive()) {
                     int currentPosition = layoutManager.findFirstVisibleItemPosition();
                     if (currentPosition == 0) {
                         View view = layoutManager.findViewByPosition(currentPosition);
@@ -1131,29 +1132,42 @@ public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerVi
                             currentPosition = 1;
                         }
                     }
-                    if (currentPosition != 0 && currentPosition != RecyclerView.NO_POSITION) {
-                        View view = layoutManager.findViewByPosition(currentPosition);
-                        if (view != null) {
-                            int dialogHeight = AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) + 1;
-                            int canScrollDy = -view.getTop() + (currentPosition - 1) * dialogHeight;
-                            int positiveDy = Math.abs(dy);
-                            if (canScrollDy < positiveDy) {
-                                totalConsumedAmount += Math.abs(dy);
-                                dy = -canScrollDy;
-                                if (startedScrollAtTop && totalConsumedAmount >= AndroidUtilities.dp(150)) {
+                    if (!allowScrollToHiddenView && dy < 0) {
+                        if (currentPosition != 0 && currentPosition != RecyclerView.NO_POSITION) {
+                            View view = layoutManager.findViewByPosition(currentPosition);
+                            if (view != null) {
+                                int dialogHeight = AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) + 1;
+                                int canScrollDy = -view.getTop() + (currentPosition - 1) * dialogHeight;
+                                int positiveDy = Math.abs(dy);
+                                if (canScrollDy < positiveDy) {
+                                    dy = -canScrollDy;
                                     allowScrollToHiddenView = true;
-                                    try {
-                                        listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
-                                    } catch (Exception ignore) {
-
-                                    }
                                 }
                             }
                         }
+                    } else if (allowScrollToHiddenView && currentPosition == 0) {
+                        DialogCell view = (DialogCell) layoutManager.findViewByPosition(0);
+                        float progress = 1f + (float) view.getTop() / view.getHeight();
+                        view.setArchiveScrollProgress(progress);
+                        setAllowShowHiddenView(progress >= 0.8f);
                     }
                 }
                 return super.scrollVerticallyBy(dy, recycler, state);
             }
+
+            private void setAllowShowHiddenView(boolean allow) {
+                if (allowShowHiddenView != allow) {
+                    allowShowHiddenView = allow;
+                    // poor performance on pre-lollipop
+                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                        try {
+                            listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,
+                                    HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
+                        } catch (Exception ignore) {
+                        }
+                    }
+                }
+            }
         };
         layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
         listView.setLayoutManager(layoutManager);
@@ -1647,7 +1661,10 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                         goingDown = firstVisibleItem > prevPosition;
                     }
                     if (changed && scrollUpdated && (goingDown || !goingDown && scrollingManually)) {
-                        hideFloatingButton(goingDown);
+                        if ((!allowScrollToHiddenView && !scrolledToHiddenView) ||
+                                (layoutManager.findFirstVisibleItemPosition() != 0 && scrollingManually)) {
+                            hideFloatingButton(goingDown);
+                        }
                     }
                     prevPosition = firstVisibleItem;
                     prevTop = firstViewTop;
@@ -3339,11 +3356,16 @@ private void didSelectResult(final long dialog_id, boolean useAlert, final boole
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countPaint, null, null, Theme.key_chats_unreadCounter));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countGrayPaint, null, null, Theme.key_chats_unreadCounterMuted));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countTextPaint, null, null, Theme.key_chats_unreadCounterText));
+        arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_archiveOverlayPaint, null, null, Theme.key_avatar_backgroundArchivedHidden));
+        arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_archiveOverlaySliderPaint, null, null, Theme.key_chats_archiveSliderBackground));
+        arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_archiveOverlaySliderIconBackgroundPaint, null, null, Theme.key_chats_archiveSliderIconBackground));
+        arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_archiveOverlayTextPaint, null, null, Theme.key_chats_archiveOverlayText));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class, ProfileSearchCell.class}, null, new Paint[]{Theme.dialogs_namePaint, Theme.dialogs_searchNamePaint}, null, null, Theme.key_chats_name));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class, ProfileSearchCell.class}, null, new Paint[]{Theme.dialogs_nameEncryptedPaint, Theme.dialogs_searchNameEncryptedPaint}, null, null, Theme.key_chats_secretName));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class, ProfileSearchCell.class}, null, new Drawable[]{Theme.dialogs_lockDrawable}, null, Theme.key_chats_secretIcon));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class, ProfileSearchCell.class}, null, new Drawable[]{Theme.dialogs_groupDrawable, Theme.dialogs_broadcastDrawable, Theme.dialogs_botDrawable}, null, Theme.key_chats_nameIcon));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class, ProfileSearchCell.class}, null, new Drawable[]{Theme.dialogs_scamDrawable}, null, Theme.key_chats_draft));
+        arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_archiveArrowDrawable}, null, Theme.key_avatar_backgroundArchivedHidden));
         arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_pinnedDrawable, Theme.dialogs_reorderDrawable}, null, Theme.key_chats_pinnedIcon));
         if (SharedConfig.useThreeLinesLayout) {
             arrayList.add(new ThemeDescription(listView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messagePaint, null, null, Theme.key_chats_message_threeLines));
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/archive_swipe.png b/TMessagesProj/src/main/res/drawable-mdpi/archive_swipe.png
new file mode 100644
index 000000000..157182ecd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/archive_swipe.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/archive_swipe.png b/TMessagesProj/src/main/res/drawable-xhdpi/archive_swipe.png
new file mode 100644
index 000000000..b441d44f3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/archive_swipe.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/archive_swipe.png b/TMessagesProj/src/main/res/drawable-xxhdpi/archive_swipe.png
new file mode 100644
index 000000000..c3b05a418
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/archive_swipe.png differ
diff --git a/TMessagesProj/src/main/res/drawble-hdpi/archive_swipe.png b/TMessagesProj/src/main/res/drawble-hdpi/archive_swipe.png
new file mode 100644
index 000000000..5a19ea219
Binary files /dev/null and b/TMessagesProj/src/main/res/drawble-hdpi/archive_swipe.png differ
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index c3204d01b..13df938c7 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -153,6 +153,8 @@
     <string name="ArchivePinnedInfo">Swipe left on the archive to hide it.</string>
     <string name="ArchiveHidden">Archive hidden.</string>
     <string name="ArchiveHiddenInfo">Swipe down to see the archive.</string>
+    <string name="ArchiveSwipeDown">Swipe down for Archive</string>
+    <string name="ArchiveRelease">Release for Archive</string>
     <string name="ChatArchived">Chat archived.</string>
     <string name="ChatsArchived">Chats archived.</string>
     <string name="ChatArchivedInfo">Hide the archive by swiping left on it.</string>
