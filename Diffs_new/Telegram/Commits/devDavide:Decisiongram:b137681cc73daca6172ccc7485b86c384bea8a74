diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 020cb1ef8..b1a15e680 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -21,7 +21,9 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Created by davide on 04/10/15.
@@ -32,9 +34,10 @@
 
     private static final int LAYOUT_RES_ID = R.layout.item_vote_list;
     private boolean editable;
+    private int maxVote;
     private List<Vote> votes;
     private List<Boolean> originalVotes;
-    private List<Vote> newVotes;
+    private Map<Option,Vote> newVotes;
     private OnVoteChangeListener onVoteChangeListener;
     private UsersDecisionVotes usersDecisionVotes;
 
@@ -55,11 +58,25 @@ public void voteChanges(boolean areThereChangesToSave) {
     public void setData(UsersDecisionVotes usersDecisionVotes, int currentUserId) {
         this.usersDecisionVotes = usersDecisionVotes;
         this.votes = usersDecisionVotes.getVotes(currentUserId);
-        this.newVotes = new ArrayList<>();
+        this.newVotes = new HashMap<>();
         this.originalVotes = new ArrayList<>();
         for (Vote v : votes){
             originalVotes.add(v.isVote() == null ? null :new Boolean(v.isVote().booleanValue()));
         }
+        updateMaxVote();
+    }
+
+    private void updateMaxVote() {
+        maxVote = 0;
+        for (Option o : usersDecisionVotes.getOptions()){
+            maxVote = Math.max(maxVote, getPositiveVoteCount(o, newVotes.get(o)));
+        }
+    }
+
+    private int getPositiveVoteCount(Option o, Vote newVote) {
+        int positiveVoteCount = usersDecisionVotes.getPositiveVoteCount(o);
+        positiveVoteCount += newVote == null ? 0 : (newVote.isVote() == true ? +1 : -1);
+        return  positiveVoteCount;
     }
 
     public void setEditable(boolean editable) {
@@ -102,8 +119,8 @@ public View getView(final int position, View convertView, ViewGroup parent) {
         View rowView = inflater.inflate(LAYOUT_RES_ID, parent, false);
         ImageView optionImage = (ImageView)rowView.findViewById(R.id.item_option_iv_image);
         TextView optionTitle = (TextView)rowView.findViewById(R.id.item_option_tv_title);
-        TextView optionVoteCount = (TextView)rowView.findViewById(R.id.item_option_tv_vote_count);
-        ImageView starImageView = (ImageView)rowView.findViewById(R.id.item_option_start_imageView);
+        final TextView optionVoteCount = (TextView)rowView.findViewById(R.id.item_option_tv_vote_count);
+        final ImageView starImageView = (ImageView)rowView.findViewById(R.id.item_option_start_imageView);
         TextView optionSubtitle = (TextView)rowView.findViewById(R.id.item_option_tv_subtitle);
 //        SurfaceView optionView = (SurfaceView)rowView.findViewById(R.id.item_option_sw_bar);
         final CheckBox optionCheckBox = (CheckBox)rowView.findViewById(R.id.item_option_cb);
@@ -115,29 +132,43 @@ public void onClick(View v) {
                 vote.setVote(optionCheckBox.isChecked());
                 vote.setVoteTime(new Date());
                 if (vote.isVote() != null && vote.isVote().equals(originalVotes.get(position))) {
-                    newVotes.remove(vote);
+                    newVotes.remove(o);
                     ;
                 } else {
-                    newVotes.add(vote);
+                    newVotes.put(o, vote);
                 }
                 Log.d(LOG_TAG, "item [" + position + "] selected[" + optionCheckBox.isChecked() + "] ");
                 onVoteChangeListener.voteChanges(!newVotes.isEmpty());
+                updateMaxVote();
+                notifyDataSetChanged();
             }
         });
 
         // TODO optionImage
         optionTitle.setText(o.getTitle());
-        optionVoteCount.setText( "(" + usersDecisionVotes.getPositiveVoteCount(o) + ")");
-        starImageView.setVisibility(position == 0 && usersDecisionVotes.getPositiveVoteCount(o) > 0 ?
-                View.VISIBLE : View.GONE);
+
+        int positiveVoteCount = getPositiveVoteCount(o, newVotes.get(o));
+        optionVoteCount.setText(formatVoteCount(positiveVoteCount));
+        //noinspection ResourceType
+        starImageView.setVisibility(getStartVisibility(positiveVoteCount));
         optionSubtitle.setText(o.getLongDescription());
         optionCheckBox.setChecked(vote.isVote() != null && vote.isVote());
 
         return rowView;
     }
 
+    private int getStartVisibility(int positiveVoteCount) {
+        return positiveVoteCount == maxVote && positiveVoteCount > 0 ?
+                View.VISIBLE : View.GONE;
+    }
+
+    private String formatVoteCount(int positiveVoteCount) {
+        return "(" + positiveVoteCount + ")";
+    }
+
+
     public Collection<Vote> getNewVotes() {
-        return newVotes;
+        return newVotes.values();
     }
 
 }
