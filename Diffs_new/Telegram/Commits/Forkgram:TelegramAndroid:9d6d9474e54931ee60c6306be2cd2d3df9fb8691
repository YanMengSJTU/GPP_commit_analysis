diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 291fd7910..dcb5b57b6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -6861,6 +6861,9 @@ public boolean canPinDialog(boolean secret) {
                 count++;
             }
         }
+        if (!mainPreferences.getBoolean("syncPins", true)) {
+            return true;
+        }
         return count < maxPinnedDialogsCount;
     }
 
@@ -7011,11 +7014,13 @@ public boolean pinDialog(long did, boolean pin, TLRPC.InputPeer peer, long taskI
                     newTaskId = taskId;
                 }
 
-                ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
-                    if (newTaskId != 0) {
-                        MessagesStorage.getInstance(currentAccount).removePendingTask(newTaskId);
-                    }
-                });
+                if (mainPreferences.getBoolean("syncPins", true)) {
+                    ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
+                        if (newTaskId != 0) {
+                            MessagesStorage.getInstance(currentAccount).removePendingTask(newTaskId);
+                        }
+                    });
+                }
             }
         }
         MessagesStorage.getInstance(currentAccount).setDialogPinned(did, dialog.pinnedNum);
@@ -7023,6 +7028,9 @@ public boolean pinDialog(long did, boolean pin, TLRPC.InputPeer peer, long taskI
     }
 
     public void loadPinnedDialogs(final long newDialogId, final ArrayList<Long> order) {
+        if (!mainPreferences.getBoolean("syncPins", true)) {
+            return;
+        }
         if (UserConfig.getInstance(currentAccount).pinnedDialogsLoaded) {
             return;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
index 88d105bbb..4366e56a1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
@@ -53,6 +53,7 @@
     private int inappCameraRow;
     private int photoHasStickerRow;
 
+    private int syncPinsRow;
     private int pinOrderRow;
 
     @Override
@@ -67,11 +68,24 @@ public boolean onFragmentCreate() {
         photoHasStickerRow = rowCount++;
 
         sectionRow2 = rowCount++;
+        syncPinsRow = rowCount++;
         pinOrderRow = rowCount++;
 
         return true;
     }
 
+    public boolean toggleGlobalMainSetting(String option, View view, boolean byDefault) {
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+        boolean optionBool = preferences.getBoolean(option, byDefault);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean(option, !optionBool);
+        editor.commit();
+        if (view instanceof TextCheckCell) {
+            ((TextCheckCell) view).setChecked(!optionBool);
+        }
+        return !optionBool;
+    }
+
     @Override
     public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
@@ -128,6 +142,8 @@ public boolean supportsPredictiveItemAnimations() {
                 if (view instanceof TextCheckCell) {
                     ((TextCheckCell) view).setChecked(SharedConfig.hasSticker);
                 }
+            } else if (position == syncPinsRow) {
+                toggleGlobalMainSetting("syncPins", view, true);
             } else if (position == pinOrderRow) {
                 presentFragment(new PinsOrderActivity());
             }
@@ -182,6 +198,10 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         String t = LocaleController.getString("PhotoHasSticker", R.string.PhotoHasSticker);
                         String info = LocaleController.getString("PhotoHasStickerInfo", R.string.PhotoHasStickerInfo);
                         textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("photoHasSticker", false), true, false);
+                    } else if (position == syncPinsRow) {
+                        String t = LocaleController.getString("SyncPins", R.string.SyncPins);
+                        String info = LocaleController.getString("SyncPinsInfo", R.string.SyncPinsInfo);
+                        textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("syncPins", true), true, false);
                     }
                     break;
                 }
@@ -203,6 +223,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             boolean fork = position == squareAvatarsRow
                         || position == inappCameraRow
                         || position == photoHasStickerRow
+                        || position == syncPinsRow
                         || position == pinOrderRow;
             return fork;
         }
@@ -247,6 +268,7 @@ public int getItemViewType(int position) {
                 return 2;
             } else if (position == squareAvatarsRow 
                 || position == inappCameraRow 
+                || position == syncPinsRow 
                 || position == photoHasStickerRow) {
                 return 3;
             } else if (position == sectionRow1
