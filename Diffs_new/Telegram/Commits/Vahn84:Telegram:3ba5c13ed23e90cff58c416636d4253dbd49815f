diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 0be48dbc6..3c57f8e78 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -22,14 +22,11 @@ android {
 
     signingConfigs {
         debug {
-            storeFile file("config/debug.keystore")
+
         }
 
         release {
-            storeFile file("config/release.keystore")
-            storePassword RELEASE_STORE_PASSWORD
-            keyAlias RELEASE_KEY_ALIAS
-            keyPassword RELEASE_KEY_PASSWORD
+
         }
     }
 
diff --git a/TMessagesProj/gradle/wrapper/gradle-wrapper.jar b/TMessagesProj/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..8c0fb64a8
Binary files /dev/null and b/TMessagesProj/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/TMessagesProj/gradle/wrapper/gradle-wrapper.properties b/TMessagesProj/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..a06734dfa
--- /dev/null
+++ b/TMessagesProj/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Mon Jun 29 20:15:52 CEST 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
diff --git a/TMessagesProj/gradlew b/TMessagesProj/gradlew
new file mode 100644
index 000000000..91a7e269e
--- /dev/null
+++ b/TMessagesProj/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/TMessagesProj/gradlew.bat b/TMessagesProj/gradlew.bat
new file mode 100644
index 000000000..8a0b282aa
--- /dev/null
+++ b/TMessagesProj/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index 3283523ab..0935010fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -49,11 +49,15 @@
 import java.util.Calendar;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 public class NotificationsController {
 
     public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
 
+	private String ANDROIDWEAR_SHAREDPREFS_RESPONSE = "androidwearresponse";
+    private static ArrayList<String> replyChoices = new ArrayList<String>();
+    private SharedPreferences wearPreferences;
     private DispatchQueue notificationsQueue = new DispatchQueue("notificationsQueue");
     private ArrayList<MessageObject> pushMessages = new ArrayList<>();
     private ArrayList<MessageObject> delayedPushMessages = new ArrayList<>();
@@ -90,6 +94,12 @@
     private AlarmManager alarmManager;
 
     private static volatile NotificationsController Instance = null;
+	
+	 public static void setAndroidWearResponse (ArrayList<String> newReply) {
+
+        replyChoices = newReply;
+
+    }
     public static NotificationsController getInstance() {
         NotificationsController localInstance = Instance;
         if (localInstance == null) {
@@ -107,6 +117,16 @@ public NotificationsController() {
         notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
         inChatSoundEnabled = preferences.getBoolean("EnableInChatSound", true);
+		
+		 wearPreferences = ApplicationLoader.applicationContext.getSharedPreferences(ANDROIDWEAR_SHAREDPREFS_RESPONSE,Activity.MODE_PRIVATE);
+        Map<String,?> keys = wearPreferences.getAll();
+
+        for(Map.Entry<String,?> entry : keys.entrySet()){
+            if( entry.getValue().toString()!=null){
+                replyChoices.add(entry.getValue().toString());
+
+            }
+        }
 
         try {
             audioManager = (AudioManager) ApplicationLoader.applicationContext.getSystemService(Context.AUDIO_SERVICE);
@@ -793,11 +813,14 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
                     .setReplyAction(msgReplyPendingIntent, remoteInputAuto)
                     .setLatestTimestamp((long) max_date * 1000);
 
+			 String[]replyArray =  replyChoices.toArray(new String[replyChoices.size()]);		
+					
             Intent replyIntent = new Intent(ApplicationLoader.applicationContext, WearReplyReceiver.class);
             replyIntent.putExtra("dialog_id", dialog_id);
             replyIntent.putExtra("max_id", max_id);
+			
             PendingIntent replyPendingIntent = PendingIntent.getBroadcast(ApplicationLoader.applicationContext, notificationIdWear, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-            RemoteInput remoteInputWear = new RemoteInput.Builder(EXTRA_VOICE_REPLY).setLabel(LocaleController.getString("Reply", R.string.Reply)).build();
+            RemoteInput remoteInputWear = new RemoteInput.Builder(EXTRA_VOICE_REPLY).setLabel(LocaleController.getString("Reply", R.string.Reply)).setChoices(replyArray).build();
             String replyToString;
             if (chat != null) {
                 replyToString = LocaleController.formatString("ReplyToGroup", R.string.ReplyToGroup, name);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 15c858b24..737e5193c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -13,7 +13,7 @@
     public static int BUILD_VERSION = 572;
     public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
     public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
+    public static String HOCKEY_APP_HASH = "a2f0dcfdb37b18294e987b740b133667";
     public static String GCM_SENDER_ID = "760348033672";
     public static String SEND_LOGS_EMAIL = "email@gmail.com";
     public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AndroidWearCannedResponseActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AndroidWearCannedResponseActivity.java
new file mode 100644
index 000000000..50ce89307
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AndroidWearCannedResponseActivity.java
@@ -0,0 +1,410 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui;
+
+import android.animation.ObjectAnimator;
+import android.animation.StateListAnimator;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.database.DataSetObserver;
+import android.graphics.Color;
+import android.graphics.Outline;
+import android.graphics.Paint;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Build;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.DragEvent;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewOutlineProvider;
+import android.view.inputmethod.EditorInfo;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.BaseAdapter;
+import android.widget.BaseExpandableListAdapter;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.googlecode.mp4parser.authoring.Edit;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.android.NotificationsController;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.R;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.TreeSet;
+
+public class AndroidWearCannedResponseActivity extends BaseFragment {
+    private ArrayList<String> editTextList = new ArrayList<String>();
+    private ArrayList<String> stringResponses = new ArrayList<String>();
+    private EditText editTextView;
+    private String ANDROIDWEAR_SHAREDPREFS_RESPONSE = "androidwearresponse";
+    private Map<String,?> keys;
+    private EditText firstNameField;
+    private EditText lastNameField;
+    private View headerLabelView;
+    private View doneButton;
+    private ImageView addResponseButton;
+    private ImageView header;
+    private SharedPreferences myPreferences;
+    private SharedPreferences.Editor editor;
+    private Context context;
+    private final static int done_button = 1;
+    private ListView listView;
+    private CustomAdapter listAdapter;
+
+    @Override
+    public View createView(final Context context, LayoutInflater inflater) {
+        this.context = context;
+
+        myPreferences = ApplicationLoader.applicationContext.getSharedPreferences(ANDROIDWEAR_SHAREDPREFS_RESPONSE, Activity.MODE_PRIVATE);
+        editor = myPreferences.edit();
+
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("AndroidWear", R.string.AndroidWear));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == done_button) {
+
+                    if(editTextList.size()>0) {
+                        saveTextResponse(editTextList);
+
+                    }
+
+                    else {
+                        finishFragment();
+                    }
+
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        listView = new ListView(context);
+        ViewGroup header = (ViewGroup)inflater.inflate(R.layout.android_responselist_header, listView, false);
+
+
+        if(myPreferences!=null) {
+
+            stringResponses = getAndroidWearResponses();
+
+            for (String text : stringResponses) {
+                Log.d("text: ", text);
+                editTextList.add(text);
+            }
+
+
+        }
+
+        else {
+            editTextList.add("");
+        }
+
+        listAdapter = new CustomAdapter(context, editTextList);
+
+        listView.setAdapter(listAdapter);
+        listView.addHeaderView(header);
+        listView.setDivider(null);
+        listView.setDividerHeight(20);
+        fragmentView = new FrameLayout(context);
+        fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        fragmentView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+
+
+
+
+        ((FrameLayout) fragmentView).addView(listView);
+
+
+
+
+        addResponseButton = new ImageView(context);
+        addResponseButton.setBackgroundResource(R.drawable.floating);
+        addResponseButton.setImageResource(R.drawable.floating_pencil);
+        addResponseButton.setScaleType(ImageView.ScaleType.CENTER);
+        if (Build.VERSION.SDK_INT >= 21) {
+            StateListAnimator animator = new StateListAnimator();
+            animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(addResponseButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
+            animator.addState(new int[]{}, ObjectAnimator.ofFloat(addResponseButton, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
+            addResponseButton.setStateListAnimator(animator);
+            addResponseButton.setOutlineProvider(new ViewOutlineProvider() {
+                @Override
+                public void getOutline(View view, Outline outline) {
+                    outline.setOval(0, 0, AndroidUtilities.dp(56), AndroidUtilities.dp(56));
+                }
+            });
+        }
+        ((FrameLayout) fragmentView).addView(addResponseButton);
+
+        FrameLayout.LayoutParams layoutParams =  (FrameLayout.LayoutParams) addResponseButton.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams.rightMargin = AndroidUtilities.dp(LocaleController.isRTL ? 0 : 16);
+        layoutParams.bottomMargin = AndroidUtilities.dp(16);
+        layoutParams.gravity = (Gravity.RIGHT | Gravity.BOTTOM);
+        addResponseButton.setLayoutParams(layoutParams);
+
+
+        addResponseButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+
+                editTextList.add("");
+                listAdapter.notifyDataSetChanged();
+
+            }
+        });
+
+
+
+
+
+
+        fragmentView.setBackgroundColor(context.getResources().getColor(R.color.lightgrey_bg));
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+
+
+       /* if (!animations) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }*/
+    }
+
+
+    private void saveTextResponse(ArrayList<String> editTextList) {
+        int i=0;
+
+
+       editor.clear();
+        i=0;
+
+        for (String editText : editTextList) {
+            Log.d(Integer.toString(i),editText);
+            editor.putString(Integer.toString(i), editText);
+            editor.commit();
+            i++;  }
+
+        NotificationsController.setAndroidWearResponse(editTextList);
+        finishFragment();
+    }
+
+    private ArrayList<String> getAndroidWearResponses (){
+
+
+        ArrayList<String> responseList = new ArrayList<String>();
+
+        keys = myPreferences.getAll();
+
+
+        TreeSet<String> treeMap = new TreeSet<String>(keys.keySet());
+        for (String setKey : treeMap) {
+            String value = keys.get(setKey).toString();
+            responseList.add(value);
+        }
+
+
+        return responseList;
+    }
+
+
+
+
+   /* @Override
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
+    }*/
+
+    public class CustomAdapter extends  BaseAdapter {
+        private Paint paint;
+        private Context context;
+        private ArrayList<String> editTextList;
+        private LinearLayout.LayoutParams layoutParams;
+        public CustomAdapter(Context context, ArrayList<String> editTextList) {
+            this.context = context;
+            this.editTextList = editTextList;
+            paint = new Paint();
+            paint.setColor(0xffd9d9d9);
+            paint.setStrokeWidth(1);
+        }
+
+        @Override
+        public int getCount() {
+            return editTextList.size();
+        }
+
+        @Override
+        public String getItem(int i) {
+            return editTextList.get(i);
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return 0;
+        }
+
+        public void addItem (String text) {
+
+
+
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+
+            final ViewHolder vh;
+            final int p = i;
+            if(view==null){
+
+                vh = new ViewHolder();
+                LayoutInflater vi = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                view = vi.inflate(R.layout.android_response_list, null);
+                vh.editText = (EditText) view.findViewById(R.id.editText1);
+                vh.deleteEditText = (ImageView) view.findViewById(R.id.deleteEditText);
+
+                vh.deleteEditText.setBackgroundResource(R.drawable.floating);
+                vh.deleteEditText.setImageResource(R.drawable.ic_close_white);
+                vh.deleteEditText.setScaleType(ImageView.ScaleType.CENTER);
+                if (Build.VERSION.SDK_INT >= 21) {
+                    StateListAnimator animator = new StateListAnimator();
+                    animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(vh.deleteEditText, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
+                    animator.addState(new int[]{}, ObjectAnimator.ofFloat(vh.deleteEditText, "translationZ", AndroidUtilities.dp(4), AndroidUtilities.dp(2)).setDuration(200));
+                    vh.deleteEditText.setStateListAnimator(animator);
+                    vh.deleteEditText.setOutlineProvider(new ViewOutlineProvider() {
+                        @Override
+                        public void getOutline(View view, Outline outline) {
+                            outline.setOval(0, 0, AndroidUtilities.dp(32), AndroidUtilities.dp(32));
+                        }
+                    });
+                }
+
+
+                vh.editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+                vh.editText.setHintTextColor(0xff979797);
+                vh.editText.setTextColor(0xff212121);
+                vh.editText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+                vh.editText.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+                vh.editText.setImeOptions(EditorInfo.IME_ACTION_NEXT);
+                AndroidUtilities.clearCursorDrawable(vh.editText);
+
+                LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) vh.editText.getLayoutParams();
+                layoutParams = (LinearLayout.LayoutParams) vh.editText.getLayoutParams();
+                layoutParams.topMargin = AndroidUtilities.dp(24);
+                layoutParams.height = AndroidUtilities.dp(36);
+                layoutParams.rightMargin = AndroidUtilities.dp(24);
+                layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+                vh.editText.setLayoutParams(layoutParams);
+                vh.editText.setSelection(vh.editText.length());
+
+
+                view.setTag(vh);
+            }
+
+            else {
+                vh = (ViewHolder) view.getTag();
+
+        }
+
+
+             vh.editText.setText(getItem(i));
+             vh.editText.addTextChangedListener(new TextWatcher() {
+                 @Override
+                 public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                 }
+
+                 @Override
+                 public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                 }
+
+                 @Override
+                 public void afterTextChanged(Editable editable) {
+                     editTextList.set(p, vh.editText.getText().toString());
+                 }
+             });
+
+            vh.deleteEditText.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+
+                    editTextList.remove(p);
+                    notifyDataSetChanged();
+                }
+            });
+
+            return view;
+        }
+
+
+        public class ViewHolder {
+
+            public EditText editText;
+            public ImageView deleteEditText;
+            public LinearLayout listItem;
+        }
+    }
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
index 22f7a4326..c625b8956 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
@@ -995,7 +995,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         if (UserConfig.passcodeType == 1 && (AndroidUtilities.isTablet() || getContext().getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)) {
             int t = 0;
-            if (passwordFrameLayout.getTag() != 0) {
+            if (passwordFrameLayout.getTag() != null) {
                 t = (Integer) passwordFrameLayout.getTag();
             }
             LayoutParams layoutParams = (LayoutParams) passwordFrameLayout.getLayoutParams();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index a2ad12143..a4e1fbabe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -89,6 +89,7 @@
     private int otherSectionRow;
     private int badgeNumberRow;
     private int pebbleAlertRow;
+    private int androidWearRow;
     private int androidAutoAlertRow;
     private int repeatRow;
     private int resetSectionRow2;
@@ -144,6 +145,7 @@ public boolean onFragmentCreate() {
         badgeNumberRow = rowCount++;
         androidAutoAlertRow = -1;
         pebbleAlertRow = rowCount++;
+		androidWearRow = rowCount++;
         repeatRow = rowCount++;
         resetSectionRow2 = rowCount++;
         resetSectionRow = rowCount++;
@@ -327,6 +329,9 @@ public void run() {
                     enabled = preferences.getBoolean("EnablePebbleNotifications", false);
                     editor.putBoolean("EnablePebbleNotifications", !enabled);
                     editor.commit();
+				} else if (i == androidWearRow) {
+
+                      presentFragment(new AndroidWearCannedResponseActivity());
                 } else if (i == androidAutoAlertRow) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                     SharedPreferences.Editor editor = preferences.edit();
@@ -665,6 +670,9 @@ public boolean hasStableIds() {
 
         @Override
         public View getView(int i, View view, ViewGroup viewGroup) {
+			TextCheckCell checkCell = null;
+            TextDetailSettingsCell textCell = null;
+
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
@@ -685,10 +693,17 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 }
             } if (type == 1) {
                 if (view == null) {
+                    if(i!=androidWearRow)
                     view = new TextCheckCell(mContext);
+                    else
+                    view = new TextDetailSettingsCell(mContext);
+                }
+				if(i!=androidWearRow) {
+                    checkCell  = (TextCheckCell) view;
+                }
+                else {
+                    textCell = (TextDetailSettingsCell) view;
                 }
-                TextCheckCell checkCell = (TextCheckCell) view;
-
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                 if (i == messageAlertRow) {
                     checkCell.setTextAndCheck(LocaleController.getString("Alert", R.string.Alert), preferences.getBoolean("EnableAll", true), true);
@@ -710,6 +725,9 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), false);
                 } else if (i == pebbleAlertRow) {
                     checkCell.setTextAndCheck(LocaleController.getString("Pebble", R.string.Pebble), preferences.getBoolean("EnablePebbleNotifications", false), true);
+				} else if (i == androidWearRow) {
+                    String value = LocaleController.getString("Android Wear", R.string.AndroidWear);
+                    textCell.setTextAndValue(value, LocaleController.getString("AndroidWearSubTitle", R.string.AndroidWearSubTitle), true);	
                 } else if (i == androidAutoAlertRow) {
                     checkCell.setTextAndCheck("Android Auto", preferences.getBoolean("EnableAutoNotifications", false), true);
                 } else if (i == notificationsServiceRow) {
@@ -723,8 +741,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 if (view == null) {
                     view = new TextDetailSettingsCell(mContext);
                 }
+                textCell = (TextDetailSettingsCell) view;
 
-                TextDetailSettingsCell textCell = (TextDetailSettingsCell) view;
 
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
 
@@ -814,13 +832,13 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     view = new TextColorCell(mContext);
                 }
 
-                TextColorCell textCell = (TextColorCell) view;
+                TextColorCell textColorCell = (TextColorCell) view;
 
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                 if (i == messageLedRow) {
-                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("MessagesLed", 0xff00ff00), true);
+                    textColorCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("MessagesLed", 0xff00ff00), true);
                 } else if (i == groupLedRow) {
-                    textCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("GroupLed", 0xff00ff00), true);
+                    textColorCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), preferences.getInt("GroupLed", 0xff00ff00), true);
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -837,7 +855,7 @@ public int getItemViewType(int i) {
                 return 0;
             } else if (i == messageAlertRow || i == messagePreviewRow || i == groupAlertRow ||
                     i == groupPreviewRow || i == inappSoundRow || i == inappVibrateRow ||
-                    i == inappPreviewRow || i == contactJoinedRow || i == pebbleAlertRow ||
+                    i == inappPreviewRow || i == contactJoinedRow || i == pebbleAlertRow || i == androidWearRow ||
                     i == notificationsServiceRow || i == badgeNumberRow || i == inappPriorityRow ||
                     i == inchatSoundRow || i == androidAutoAlertRow) {
                 return 1;
diff --git a/TMessagesProj/src/main/res/drawable-xxxhdpi/wear_head.png b/TMessagesProj/src/main/res/drawable-xxxhdpi/wear_head.png
new file mode 100644
index 000000000..2b947e8db
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxxhdpi/wear_head.png differ
diff --git a/TMessagesProj/src/main/res/layout/android_response_list.xml b/TMessagesProj/src/main/res/layout/android_response_list.xml
new file mode 100644
index 000000000..0f9580eba
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/android_response_list.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    android:id="@+id/listItem"
+    android:padding="4dp"
+    android:layout_marginRight="10dp"
+    android:layout_marginLeft="10dp"
+    android:orientation="horizontal"
+    android:gravity="center_vertical|center_horizontal"
+    >
+
+    <ImageView
+        android:id="@+id/deleteEditText"
+        android:layout_width="32dp"
+        android:layout_height="32dp"
+        android:layout_gravity="center_vertical|center_horizontal"
+        android:layout_marginLeft="10dp"
+        android:layout_marginRight="10dp"
+        android:padding="4dp"
+
+        />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_weight="4"
+        android:layout_height="wrap_content"
+        android:paddingLeft="10dp"
+        android:paddingRight="10dp"
+        android:background="#ffffffff"
+        android:layout_marginRight="24dp"
+        android:layout_marginLeft="10dp"
+        >
+
+
+    <EditText
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:id="@+id/editText1"
+        android:textColor="#ff8a8a8a"
+        android:textColorHint="@android:color/secondary_text_dark"
+        android:hint="@string/insertCustomWearResponse"
+        android:ems="10"
+        android:background="@null"
+        >
+
+
+    </EditText>
+
+   </LinearLayout>
+
+
+
+
+
+
+
+
+</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout/android_responselist_header.xml b/TMessagesProj/src/main/res/layout/android_responselist_header.xml
new file mode 100644
index 000000000..de72ed525
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/android_responselist_header.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent" android:layout_height="wrap_content" android:background="@color/primary_color"
+    android:layout_gravity="center_horizontal">
+
+    <ImageView
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:scaleType="centerCrop"
+        android:src="@drawable/wear_head"
+
+        />
+</LinearLayout>
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index b4eac3ecb..e5098da46 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
+    <color name="background_tab_pressed">#6633B5E5</color>
     <color name="divider">#dcdcdc</color>
+    <color name="primary_color">#54759e</color>
+    <color name="lightgrey_bg">#f0f0f0</color>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 903c5d2cd..a9cb3a748 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -293,6 +293,9 @@
     <string name="Events">Events</string>
     <string name="ContactJoined">Contact joined Telegram</string>
     <string name="Pebble">PEBBLE</string>
+	<string name="AndroidWear">Android Wear</string>
+    <string name="AndroidWearSubTitle">Add and edit your Android Wear canned text response</string>
+    <string name="insertCustomWearResponse">Insert your custom Android Wear response</string>
     <string name="Language">Language</string>
     <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href=\"https://telegram.org/faq#general\">Telegram FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
     <string name="AskButton">Ask a volunteer</string>
