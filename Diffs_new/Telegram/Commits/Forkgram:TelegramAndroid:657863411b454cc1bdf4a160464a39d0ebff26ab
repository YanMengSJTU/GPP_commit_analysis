diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 5b65524c2..da2aedec8 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -25,7 +25,6 @@ dependencies {
     implementation 'com.google.firebase:firebase-config:19.0.0'
     implementation 'com.google.android.gms:play-services-maps:17.0.0'
     implementation 'com.google.android.gms:play-services-auth:17.0.0'
-    implementation 'com.google.android.gms:play-services-vision:16.2.0'
     implementation 'com.google.android.gms:play-services-wallet:17.0.0'
     implementation 'com.google.android.gms:play-services-wearable:17.0.0'
     implementation 'com.google.android.gms:play-services-location:17.0.0'
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 7ee0458ba..958413531 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -382,8 +382,6 @@
         <meta-data android:name="com.google.android.gms.car.notification.SmallIcon" android:resource="@drawable/ic_player" />
         <meta-data android:name="com.google.android.gms.car.application" android:resource="@xml/automotive_app_desc" />
 
-        <meta-data android:name="com.google.android.gms.vision.DEPENDENCIES" android:value="face" />
-
         <meta-data android:name="android.max_aspect" android:value="2.5" />
 
     </application>
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MrzRecognizer.java b/TMessagesProj/src/main/java/org/telegram/messenger/MrzRecognizer.java
index d19ef6271..1100761f6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MrzRecognizer.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MrzRecognizer.java
@@ -11,10 +11,6 @@
 import android.util.Base64;
 import android.util.SparseArray;
 
-import com.google.android.gms.vision.Frame;
-import com.google.android.gms.vision.barcode.Barcode;
-import com.google.android.gms.vision.barcode.BarcodeDetector;
-
 import java.util.Calendar;
 import java.util.HashMap;
 
@@ -41,7 +37,8 @@ public static Result recognize(Bitmap bitmap, boolean tryDriverLicenseFirst){
 	}
 
 	private static Result recognizeBarcode(Bitmap bitmap){
-		BarcodeDetector detector=new BarcodeDetector.Builder(ApplicationLoader.applicationContext)/*.setBarcodeFormats(Barcode.PDF417)*/.build();
+		/*
+		BarcodeDetector detector=new BarcodeDetector.Builder(ApplicationLoader.applicationContext)/*.setBarcodeFormats(Barcode.PDF417).build();
 		if (bitmap.getWidth() > 1500 || bitmap.getHeight() > 1500) {
 			float scale = 1500f / Math.max(bitmap.getWidth(), bitmap.getHeight());
 			bitmap = Bitmap.createScaledBitmap(bitmap, Math.round(bitmap.getWidth() * scale), Math.round(bitmap.getHeight() * scale), true);
@@ -124,7 +121,7 @@ private static Result recognizeBarcode(Bitmap bitmap){
 					}catch(Exception ignore){}
 				}
 			}
-		}
+		}*/
 		return null;
 	}
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/PhotoFace.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/PhotoFace.java
deleted file mode 100644
index b35777a2c..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Paint/PhotoFace.java
+++ /dev/null
@@ -1,143 +0,0 @@
-package org.telegram.ui.Components.Paint;
-
-import android.graphics.Bitmap;
-import android.graphics.PointF;
-
-import com.google.android.gms.vision.face.Face;
-import com.google.android.gms.vision.face.Landmark;
-
-import org.telegram.ui.Components.Size;
-import org.telegram.ui.Components.Point;
-
-import java.util.List;
-
-public class PhotoFace {
-
-    private float width;
-    private float angle;
-
-    private Point foreheadPoint;
-
-    private Point eyesCenterPoint;
-    private float eyesDistance;
-
-    private Point mouthPoint;
-    private Point chinPoint;
-
-    public PhotoFace(Face face, Bitmap sourceBitmap, Size targetSize, boolean sideward) {
-        List<Landmark> landmarks = face.getLandmarks();
-
-        Point leftEyePoint = null;
-        Point rightEyePoint = null;
-
-        Point leftMouthPoint = null;
-        Point rightMouthPoint = null;
-
-        for (Landmark landmark : landmarks) {
-            PointF point = landmark.getPosition();
-
-            switch (landmark.getType()) {
-                case Landmark.LEFT_EYE: {
-                    leftEyePoint = transposePoint(point, sourceBitmap, targetSize, sideward);
-                }
-                break;
-
-                case Landmark.RIGHT_EYE: {
-                    rightEyePoint = transposePoint(point, sourceBitmap, targetSize, sideward);
-                }
-                break;
-
-                case Landmark.LEFT_MOUTH: {
-                    leftMouthPoint = transposePoint(point, sourceBitmap, targetSize, sideward);
-                }
-                break;
-
-                case Landmark.RIGHT_MOUTH: {
-                    rightMouthPoint = transposePoint(point, sourceBitmap, targetSize, sideward);
-                }
-                break;
-            }
-        }
-
-        if (leftEyePoint != null && rightEyePoint != null) {
-            if (leftEyePoint.x < rightEyePoint.x) {
-                Point temp = leftEyePoint;
-                leftEyePoint = rightEyePoint;
-                rightEyePoint = temp;
-            }
-            eyesCenterPoint = new Point(0.5f * leftEyePoint.x + 0.5f * rightEyePoint.x,
-                    0.5f * leftEyePoint.y + 0.5f * rightEyePoint.y);
-            eyesDistance = (float)Math.hypot(rightEyePoint.x - leftEyePoint.x, rightEyePoint.y - leftEyePoint.y);
-            angle = (float)Math.toDegrees(Math.PI + Math.atan2(rightEyePoint.y - leftEyePoint.y, rightEyePoint.x - leftEyePoint.x));
-
-            width = eyesDistance * 2.35f;
-
-            float foreheadHeight = 0.8f * eyesDistance;
-            float upAngle = (float)Math.toRadians(angle - 90);
-            foreheadPoint = new Point(eyesCenterPoint.x + foreheadHeight * (float)Math.cos(upAngle),
-                    eyesCenterPoint.y + foreheadHeight * (float)Math.sin(upAngle));
-        }
-
-        if (leftMouthPoint != null && rightMouthPoint != null) {
-            if (leftMouthPoint.x < rightMouthPoint.x) {
-                Point temp = leftMouthPoint;
-                leftMouthPoint = rightMouthPoint;
-                rightMouthPoint = temp;
-            }
-            mouthPoint = new Point(0.5f * leftMouthPoint.x + 0.5f * rightMouthPoint.x,
-                    0.5f * leftMouthPoint.y + 0.5f * rightMouthPoint.y);
-
-            float chinDepth = 0.7f * eyesDistance;
-            float downAngle = (float)Math.toRadians(angle + 90);
-            chinPoint = new Point(mouthPoint.x + chinDepth * (float)Math.cos(downAngle),
-                    mouthPoint.y + chinDepth * (float)Math.sin(downAngle));
-        }
-    }
-
-    public boolean isSufficient() {
-        return eyesCenterPoint != null;
-    }
-
-    private Point transposePoint(PointF point, Bitmap sourceBitmap, Size targetSize, boolean sideward) {
-        float bitmapW = sideward ? sourceBitmap.getHeight() : sourceBitmap.getWidth();
-        float bitmapH = sideward ? sourceBitmap.getWidth() : sourceBitmap.getHeight();
-        return new Point(targetSize.width * point.x / bitmapW,
-                targetSize.height * point.y / bitmapH);
-    }
-
-    public Point getPointForAnchor(int anchor) {
-        switch (anchor) {
-            case 0: {
-                return foreheadPoint;
-            }
-
-            case 1: {
-                return eyesCenterPoint;
-            }
-
-            case 2: {
-                return mouthPoint;
-            }
-
-            case 3: {
-                return chinPoint;
-            }
-
-            default: {
-                return null;
-            }
-        }
-    }
-
-    public float getWidthForAnchor(int anchor) {
-        if (anchor == 1)
-            return eyesDistance;
-
-        return width;
-    }
-
-    public float getAngle() {
-        return angle;
-    }
-
- }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
index a6a5a04d1..7a07df994 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoPaintView.java
@@ -24,10 +24,6 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import com.google.android.gms.vision.Frame;
-import com.google.android.gms.vision.face.Face;
-import com.google.android.gms.vision.face.FaceDetector;
-
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.Bitmaps;
@@ -42,7 +38,6 @@
 import org.telegram.ui.ActionBar.ActionBarPopupWindow;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.Theme;
-import org.telegram.ui.Components.Paint.PhotoFace;
 import org.telegram.ui.Components.Paint.Views.EditTextOutline;
 import org.telegram.ui.Components.Paint.Views.EntitiesContainerView;
 import org.telegram.ui.Components.Paint.Views.EntityView;
@@ -108,7 +103,7 @@
     private Animator colorPickerAnimator;
 
     private DispatchQueue queue;
-    private ArrayList<PhotoFace> faces;
+    //private ArrayList<PhotoFace> faces;
 
     private final static int gallery_menu_done = 1;
 
@@ -379,7 +374,7 @@ private void updateSettingsButton() {
 
     public void init() {
         renderView.setVisibility(View.VISIBLE);
-        detectFaces();
+        //detectFaces();
     }
 
     public void shutdown() {
@@ -1192,6 +1187,7 @@ private void showPopup(Runnable setupRunnable, View parent, int gravity, int x,
         popupWindow.startAnimation();
     }
 
+    /*
     private int getFrameRotation() {
         switch (orientation) {
             case 90: {
@@ -1255,6 +1251,7 @@ private void detectFaces() {
             }
         });
     }
+    */
 
     private StickerPosition calculateStickerPosition(TLRPC.Document document) {
         TLRPC.TL_maskCoords maskCoords = null;
@@ -1268,15 +1265,16 @@ private StickerPosition calculateStickerPosition(TLRPC.Document document) {
         }
 
         StickerPosition defaultPosition = new StickerPosition(centerPositionForEntity(), 0.75f, 0.0f);
+        /*
         if (maskCoords == null || faces == null || faces.size() == 0) {
             return defaultPosition;
         } else {
             int anchor = maskCoords.n;
 
             PhotoFace face = getRandomFaceWithVacantAnchor(anchor, document.id, maskCoords);
-            if (face == null) {
+            if (face == null) {*/
                 return defaultPosition;
-            }
+            }/*
 
             Point referencePoint = face.getPointForAnchor(anchor);
             float referenceWidth = face.getWidthForAnchor(anchor);
@@ -1347,7 +1345,7 @@ private boolean isFaceAnchorOccupied(PhotoFace face, int anchor, long documentId
 
         return false;
     }
-
+    */
     private class StickerPosition {
         private Point position;
         private float scale;
