diff --git a/README.md b/README.md
index cfa0f6d40..1c179c574 100644
--- a/README.md
+++ b/README.md
@@ -8,10 +8,8 @@ It adds some extra features to the official Telegram app:
 - [x] Decide whether to sync contact on first login
 - [ ] Always show user's name instead of contact name [optional]
 - [ ] Repeat
-- [ ] Forward without qoute
 - [ ] Show ID
-- [ ] Dialog category tabs
-- [ ] Show unread dialogs first [optional]
+- [ ] Forward without qoute
+- [ ] Ignore messages from blocked users [optional]
 - [ ] Use system emoji [optional]
 - [ ] Prefer IPv6 [optional]
-- [ ] Ignore messages from blocked users [optional]
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index d32d3e70a..cc8ce38a6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -94,6 +94,9 @@
 import org.telegram.ui.Components.RecyclerListView;
 import org.telegram.ui.Components.voip.VoIPHelper;
 
+import org.zuragram.android.ZuraConfig;
+import org.zuragram.android.ZuraSettingsActivity;
+
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.File;
@@ -142,6 +145,7 @@
     private int privacyRow;
     private int dataRow;
     private int chatRow;
+    private int zuraRow;
     private int helpRow;
     private int versionRow;
     private int rowCount;
@@ -207,6 +211,7 @@ public boolean onFragmentCreate() {
         privacyRow = rowCount++;
         dataRow = rowCount++;
         chatRow = rowCount++;
+        zuraRow = rowCount++;
         languageRow = rowCount++;
         helpRow = rowCount++;
         versionRow = rowCount++;
@@ -329,6 +334,8 @@ public boolean supportsPredictiveItemAnimations() {
                 presentFragment(new DataSettingsActivity());
             } else if (position == chatRow) {
                 presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC));
+            } else if (position == zuraRow) {
+                presentFragment(new ZuraSettingsActivity());
             } else if (position == helpRow) {
                 BottomSheet.Builder builder = new BottomSheet.Builder(context);
                 builder.setApplyTopPadding(false);
@@ -1074,6 +1081,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         textCell.setTextAndIcon(LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, true);
                     } else if (position == chatRow) {
                         textCell.setTextAndIcon(LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, true);
+                    } else if (position == zuraRow) {
+                        textCell.setTextAndIcon(LocaleController.getString("ZuraSettings", R.string.ZuraSettings), R.drawable.menu_settings, true);
                     } else if (position == helpRow) {
                         textCell.setTextAndIcon(LocaleController.getString("SettingsHelp", R.string.SettingsHelp), R.drawable.menu_help, false);
                     }
@@ -1128,7 +1137,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             return position == notificationRow || position == numberRow || position == privacyRow ||
                     position == languageRow || position == usernameRow || position == bioRow ||
                     position == versionRow || position == dataRow || position == chatRow ||
-                    position == helpRow;
+                    position == zuraRow || position == helpRow;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/zuragram/android/ZuraConfig.java b/TMessagesProj/src/main/java/org/zuragram/android/ZuraConfig.java
new file mode 100644
index 000000000..446856960
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/zuragram/android/ZuraConfig.java
@@ -0,0 +1,78 @@
+package org.zuragram.android;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+
+public class ZuraConfig {
+
+    private static boolean configLoaded;
+    private static final Object sync = new Object();
+
+    public static boolean alwaysShowName = true;
+    public static boolean ignoreBlocked = false;
+    public static boolean useIPv6 = false;
+
+
+    static {
+        loadConfig();
+    }
+
+
+    public static void saveConfig() {
+        synchronized (sync) {
+            try {
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("zuraconfing", Context.MODE_PRIVATE);
+                SharedPreferences.Editor editor = preferences.edit();
+                editor.putBoolean("alwaysShowName", alwaysShowName);
+                editor.putBoolean("ignoreBlocked", ignoreBlocked);
+                editor.putBoolean("useIPv6", useIPv6);
+
+                editor.commit();
+            } catch (Exception e) {
+                FileLog.e(e);
+            }
+        }
+    }
+
+    public static void loadConfig() {
+        synchronized (sync) {
+            if (configLoaded) {
+                return;
+            }
+
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("zuraconfig", Activity.MODE_PRIVATE);
+            alwaysShowName = preferences.getBoolean("alwaysShowName", true);
+            ignoreBlocked = preferences.getBoolean("ignoreBlocked", false);
+            useIPv6 = preferences.getBoolean("useIPv6", false);
+            configLoaded = true;
+        }
+    }
+
+    public static void toggleIPv6() {
+        useIPv6 = !useIPv6;
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("zuraconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("useIPv6", useIPv6);
+        editor.commit();
+    }
+
+    public static void toggleAlwaysShowName() {
+        alwaysShowName = !alwaysShowName;
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("zuraconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("alwaysShowName", alwaysShowName);
+        editor.commit();
+    }
+
+    public static void toggleIgnoreBlocked() {
+        ignoreBlocked = !ignoreBlocked;
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("zuraconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("ignoreBlocked", ignoreBlocked);
+        editor.commit();
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/zuragram/android/ZuraSettingsActivity.java b/TMessagesProj/src/main/java/org/zuragram/android/ZuraSettingsActivity.java
new file mode 100644
index 000000000..70574af08
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/zuragram/android/ZuraSettingsActivity.java
@@ -0,0 +1,311 @@
+package org.zuragram.android;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.support.widget.LinearLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ActionBar.ThemeDescription;
+import org.telegram.ui.Cells.EmptyCell;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.NotificationsCheckCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberPicker;
+import org.telegram.ui.Components.RecyclerListView;
+
+public class ZuraSettingsActivity extends BaseFragment {
+
+    private RecyclerListView listView;
+    private ListAdapter listAdapter;
+
+    private int rowCount;
+
+    private int zuraSettingsRow;
+    private int alwaysShowNameRow;
+    private int ignoreBlockedRow;
+    private int ipv6Row;
+    private int zuraSettingsRow2;
+
+    private int systemSettingsRow;
+    private int useSystemEmojiRow;
+    private int singleBigEmojiRow;
+    private int systemSettingsRow2;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        zuraSettingsRow = rowCount++;
+        alwaysShowNameRow = rowCount++;
+        ignoreBlockedRow = rowCount++;
+        ipv6Row = rowCount++;
+        zuraSettingsRow2 = rowCount++;
+        systemSettingsRow = rowCount++;
+        useSystemEmojiRow = rowCount++;
+        singleBigEmojiRow = rowCount++;
+        systemSettingsRow2 = rowCount++;
+
+        return true;
+    }
+
+    @SuppressLint("NewApi")
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setTitle(LocaleController.getString("ZuraSettings", R.string.ZuraSettings));
+
+        if (AndroidUtilities.isTablet()) {
+            actionBar.setOccupyStatusBar(false);
+        }
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        fragmentView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+        listView = new RecyclerListView(context);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false) {
+            @Override
+            public boolean supportsPredictiveItemAnimations() {
+                return false;
+            }
+        });
+        listView.setGlowColor(Theme.getColor(Theme.key_avatar_backgroundActionBarBlue));
+        listView.setAdapter(listAdapter);
+        listView.setItemAnimator(null);
+        listView.setLayoutAnimation(null);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+        listView.setOnItemClickListener((view, position, x, y) -> {
+            if (position == ipv6Row) {
+                ZuraConfig.toggleIPv6();
+                if (view instanceof TextCheckCell) {
+                    ((TextCheckCell) view).setChecked(ZuraConfig.useIPv6);
+                }
+                for (int a = 0; a < UserConfig.MAX_ACCOUNT_COUNT; a++) {
+                    if (UserConfig.getInstance(a).isClientActivated()) {
+                        ConnectionsManager.native_setUseIpv6(a, ZuraConfig.useIPv6);
+                    }
+                }
+            } else if (position == alwaysShowNameRow) {
+                ZuraConfig.toggleAlwaysShowName();
+                if (view instanceof TextCheckCell) {
+                    ((TextCheckCell) view).setChecked(ZuraConfig.alwaysShowName);
+                }
+            } else if (position == ignoreBlockedRow) {
+                ZuraConfig.toggleIgnoreBlocked();
+                if (view instanceof TextCheckCell) {
+                    ((TextCheckCell) view).setChecked(ZuraConfig.ignoreBlocked);
+                }
+            } else if (position == useSystemEmojiRow) {
+                SharedConfig.useSystemEmoji = !SharedConfig.useSystemEmoji;
+                SharedPreferences.Editor editor = MessagesController.getGlobalMainSettings().edit();
+                editor.putBoolean("useSystemEmoji", SharedConfig.useSystemEmoji);
+                editor.commit();
+                if (view instanceof TextCheckCell) {
+                    ((TextCheckCell) view).setChecked(SharedConfig.useSystemEmoji);
+                }
+            } else if (position == singleBigEmojiRow) {
+                SharedConfig.allowBigEmoji = !SharedConfig.allowBigEmoji;
+                SharedPreferences.Editor editor = MessagesController.getGlobalMainSettings().edit();
+                editor.putBoolean("allowBigEmoji", SharedConfig.allowBigEmoji);
+                editor.commit();
+                if (view instanceof TextCheckCell) {
+                    ((TextCheckCell) view).setChecked(SharedConfig.allowBigEmoji);
+                }
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends RecyclerListView.SelectionAdapter {
+
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public int getItemCount() {
+            return rowCount;
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            switch (holder.getItemViewType()) {
+                case 1: {
+                    if (position == systemSettingsRow2) {
+                        holder.itemView.setBackgroundDrawable(Theme.getThemedDrawable(mContext, R.drawable.greydivider_bottom, Theme.key_windowBackgroundGrayShadow));
+                    }
+                    break;
+                }
+                case 2: {
+                    break;
+                }
+                case 3: {
+                    TextCheckCell textCell = (TextCheckCell) holder.itemView;
+                    if (position == ipv6Row) {
+                        textCell.setTextAndCheck(LocaleController.getString("IPv6", R.string.IPv6), ZuraConfig.useIPv6, false);
+                    } else if (position == alwaysShowNameRow) {
+                        textCell.setTextAndCheck(LocaleController.getString("AlwaysShowName", R.string.AlwaysShowName), ZuraConfig.alwaysShowName, true);
+                    } else if (position == useSystemEmojiRow) {
+                        textCell.setTextAndCheck(LocaleController.getString("EmojiUseDefault", R.string.EmojiUseDefault), SharedConfig.useSystemEmoji, true);
+                    } else if (position == singleBigEmojiRow) {
+                        textCell.setTextAndCheck(LocaleController.getString("EmojiBigSize", R.string.EmojiBigSize), SharedConfig.allowBigEmoji, false);
+                    } else if (position == ignoreBlockedRow) {
+                        textCell.setTextAndCheck(LocaleController.getString("IgnoreBlocked", R.string.IgnoreBlocked), ZuraConfig.ignoreBlocked, true);
+                    }
+                    break;
+                }
+                case 4: {
+                    HeaderCell headerCell = (HeaderCell) holder.itemView;
+                    if (position == systemSettingsRow) {
+                        headerCell.setText(LocaleController.getString("SystemSettings", R.string.SystemSettings));
+                    } else if (position == zuraSettingsRow) {
+                        headerCell.setText(LocaleController.getString("ZuraSettings", R.string.ZuraSettings));
+                    }
+                    break;
+                }
+                case 5: {
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public boolean isEnabled(RecyclerView.ViewHolder holder) {
+            int position = holder.getAdapterPosition();
+            return position == alwaysShowNameRow || position == ignoreBlockedRow || position == ipv6Row ||
+                    position == useSystemEmojiRow || position == singleBigEmojiRow;
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = null;
+            switch (viewType) {
+                case 1:
+                    view = new ShadowSectionCell(mContext);
+                    break;
+                case 2:
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 3:
+                    view = new TextCheckCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 4:
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 5:
+                    view = new NotificationsCheckCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 6:
+                    view = new TextDetailSettingsCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+            }
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
+            return new RecyclerListView.Holder(view);
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position == systemSettingsRow2 || position == zuraSettingsRow2) {
+                return 1;
+            } else if (position == ipv6Row || position == alwaysShowNameRow ||
+                    position == ignoreBlockedRow || position == useSystemEmojiRow || position == singleBigEmojiRow) {
+                return 3;
+            } else if (position == systemSettingsRow || position == zuraSettingsRow) {
+                return 4;
+            }
+            return 6;
+        }
+    }
+
+    @Override
+    public ThemeDescription[] getThemeDescriptions() {
+        return new ThemeDescription[]{
+                new ThemeDescription(listView, ThemeDescription.FLAG_CELLBACKGROUNDCOLOR, new Class[]{EmptyCell.class, TextSettingsCell.class, TextCheckCell.class, HeaderCell.class, TextDetailSettingsCell.class, NotificationsCheckCell.class}, null, null, null, Theme.key_windowBackgroundWhite),
+                new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundGray),
+
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_avatar_backgroundActionBarBlue),
+                new ThemeDescription(listView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_avatar_backgroundActionBarBlue),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_avatar_actionBarIconBlue),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_avatar_actionBarSelectorBlue),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, null, Theme.key_actionBarDefaultSubmenuBackground),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, null, Theme.key_actionBarDefaultSubmenuItem),
+
+                new ThemeDescription(listView, ThemeDescription.FLAG_SELECTOR, null, null, null, null, Theme.key_listSelector),
+
+                new ThemeDescription(listView, 0, new Class[]{View.class}, Theme.dividerPaint, null, null, Theme.key_divider),
+
+                new ThemeDescription(listView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ShadowSectionCell.class}, null, null, null, Theme.key_windowBackgroundGrayShadow),
+
+                new ThemeDescription(listView, 0, new Class[]{TextSettingsCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{TextSettingsCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteValueText),
+
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2),
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrack),
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrackChecked),
+
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2),
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrack),
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrackChecked),
+
+                new ThemeDescription(listView, 0, new Class[]{HeaderCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlueHeader),
+
+                new ThemeDescription(listView, 0, new Class[]{TextDetailSettingsCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{TextDetailSettingsCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2),
+        };
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-zh-rCN/strings_zura.xml b/TMessagesProj/src/main/res/values-zh-rCN/strings_zura.xml
new file mode 100644
index 000000000..c16177ea1
--- /dev/null
+++ b/TMessagesProj/src/main/res/values-zh-rCN/strings_zura.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="ZuraSettings">Zura 设置</string>
+    <string name="IPv6">尝试通过 IPv6 连接</string>
+    <string name="AlwaysShowName">总是显示昵称而非备注</string>
+    <string name="IgnoreBlocked">忽略渣滓们在群里说的话</string>
+    <string name="SystemSettings">系统设置</string>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-zh-rTW/strings_zura.xml b/TMessagesProj/src/main/res/values-zh-rTW/strings_zura.xml
new file mode 100644
index 000000000..bbaa8c5d1
--- /dev/null
+++ b/TMessagesProj/src/main/res/values-zh-rTW/strings_zura.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="ZuraSettings">Zura 設定</string>
+    <string name="IPv6">嘗試透過 IPv6 連線</string>
+    <string name="AlwaysShowName">總是顯示暱稱而非備註</string>
+    <string name="IgnoreBlocked">忽略被封鎖的使用者在群組內的發言</string>
+    <string name="SystemSettings">系統設定</string>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings_zura.xml b/TMessagesProj/src/main/res/values/strings_zura.xml
new file mode 100644
index 000000000..531a0c48a
--- /dev/null
+++ b/TMessagesProj/src/main/res/values/strings_zura.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="ZuraSettings">Zura Settings</string>
+    <string name="IPv6">Try connecting through IPv6</string>
+    <string name="AlwaysShowName">Show name instead of contact name</string>
+    <string name="IgnoreBlocked">Ignore blocked users in group</string>
+    <string name="SystemSettings">System Settings</string>
+</resources>
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 806a54a0b..440d67de8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,7 +6,7 @@ buildscript {
         google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.3.2'
+        classpath 'com.android.tools.build:gradle:3.4.1'
         classpath 'com.google.gms:google-services:4.2.0'
     }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 584532c35..20f19f6e4 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Apr 16 11:10:45 CST 2019
+#Tue Jun 04 12:37:39 CST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.1.1-all.zip
