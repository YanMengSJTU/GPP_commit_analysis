diff --git a/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java b/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
index 99eced64f..20db354a9 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
@@ -13,6 +13,7 @@
 import org.telegram.utils.StringUtils;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
 
@@ -31,6 +32,8 @@
 
     private Location customLocation;
 
+    private Geocoder geocoder;
+
     public static LocationManagerHelper getInstance() {
         LocationManagerHelper localInstance = Instance;
         if (localInstance == null) {
@@ -45,6 +48,7 @@ public static LocationManagerHelper getInstance() {
     }
 
     private LocationManagerHelper() {
+        geocoder = new Geocoder(ApplicationLoader.applicationContext, Locale.ENGLISH);
         // Define a listener that responds to location updates
 
         locationListener = new LocationListener() {
@@ -101,7 +105,7 @@ public Location getLastLocation() {
     }
 
     public Location getLocation4TimeLine() {
-        if(customLocation != null) {
+        if (customLocation != null) {
             return customLocation;
         }
         return getLastLocation();
@@ -121,21 +125,37 @@ public Location getLastSavedLocation() {
     }
 
     public Location getLastSavedOrLastLocation() {
-        if(lastSavedLocation != null) {
+        if (lastSavedLocation != null) {
             return lastSavedLocation;
         }
         return getLastLocation();
     }
 
+    //TODO run in the thread
+    //
+    public List<Address> getAddressesFromLocationName(String locationName, int maxResults) {
+        try {
+            List<Address> addresses = geocoder.getFromLocationName(locationName, maxResults);
+            if (addresses == null) {
+                addresses = new ArrayList<>();
+            }
+            return addresses;
+        } catch (IOException ex) {
+//            e.printStackTrace();
+            //TODO logger
+        }
+        return new ArrayList<>();
+    }
 
+    //TODO run in the thread
     public String getAddress(Context context, double longitude, double latitude, String defaultVal) {
-        Geocoder geocoder;
-        List<Address> addresses;
+//        Geocoder geocoder;
         String address;
 //        geocoder = new Geocoder(context, Locale.getDefault()); //TODO de ?? should be english ? or ?? in real time. Save in ENG, but display in locale in real-time
-        geocoder = new Geocoder(context, Locale.ENGLISH); //TODO de ?? should be english ? or ?? in real time. Save in ENG, but display in locale in real-time
+//        geocoder = new Geocoder(context, Locale.ENGLISH); //TODO de ?? should be english ? or ?? in real time. Save in ENG, but display in locale in real-time
         try {
-            addresses = geocoder.getFromLocation(latitude, longitude, 1); // Here 1 represent max location result to returned, by documents it recommended 1 to 5
+            List<Address> addresses = geocoder.getFromLocation(latitude, longitude, 1); // Here 1 represent max location result to returned, by documents it recommended 1 to 5
+            //TODO what if addresses is empty NPE ?
             address = addresses.get(0).getAddressLine(0); // If any additional address line present than only, check with max available address lines by getMaxAddressLineIndex()
             if (StringUtils.isEmpty(address)) {
                 address = defaultVal;
@@ -153,14 +173,15 @@ public String getAddress(Context context, double longitude, double latitude, Str
         return address;
     }
 
+    //TODO run in the thread
     public String getAddress(Context context, List<Double> coordinates, String defaultVal) {
-        Geocoder geocoder;
-        List<Address> addresses;
+//        Geocoder geocoder;
         String address;
 //        geocoder = new Geocoder(context, Locale.getDefault()); //TODO de ?? should be english ? or ?? in real time. Save in ENG, but display in locale in real-time
-        geocoder = new Geocoder(context, Locale.ENGLISH); //TODO de ?? should be english ? or ?? in real time. Save in ENG, but display in locale in real-time
+//        geocoder = new Geocoder(context, Locale.ENGLISH); //TODO de ?? should be english ? or ?? in real time. Save in ENG, but display in locale in real-time
         try {
-            addresses = geocoder.getFromLocation(coordinates.get(1), coordinates.get(0), 1); // Here 1 represent max location result to returned, by documents it recommended 1 to 5
+            List<Address> addresses = geocoder.getFromLocation(coordinates.get(1), coordinates.get(0), 1); // Here 1 represent max location result to returned, by documents it recommended 1 to 5
+            //TODO what if addresses is empty NPE ?
             address = addresses.get(0).getAddressLine(0); // If any additional address line present than only, check with max available address lines by getMaxAddressLineIndex()
             if (StringUtils.isEmpty(address)) {
                 address = defaultVal;
@@ -178,10 +199,11 @@ public String getAddress(Context context, List<Double> coordinates, String defau
         return address;
     }
 
+    //TODO run in the thread
     public String getAddress(Geocoder geocoder, double longitude, double latitude) {
-        List<Address> addresses;
         try {
-            addresses = geocoder.getFromLocation(latitude, longitude, 1); // Here 1 represent max location result to returned, by documents it recommended 1 to 5
+            List<Address> addresses = geocoder.getFromLocation(latitude, longitude, 1); // Here 1 represent max location result to returned, by documents it recommended 1 to 5
+            //TODO what if addresses is empty NPE ?
             String address = addresses.get(0).getAddressLine(0); // If any additional address line present than only, check with max available address lines by getMaxAddressLineIndex()
 //            String city = addresses.get(0).getLocality();
 //            String state = addresses.get(0).getAdminArea();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
index 3cbf3bb2c..3557a9d9e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
@@ -39,12 +39,12 @@
         void didLoadedSearchResult(ArrayList<TLRPC.TL_messageMediaVenue> places);
     }
 
-    private RequestQueue requestQueue;
+    protected RequestQueue requestQueue;
     protected boolean searching;
     protected ArrayList<TLRPC.TL_messageMediaVenue> places = new ArrayList<>();
     protected ArrayList<String> iconUrls = new ArrayList<>();
-    private Location lastSearchLocation;
-    private BaseLocationAdapterDelegate delegate;
+    protected Location lastSearchLocation;
+    protected BaseLocationAdapterDelegate delegate;
     private Timer searchTimer;
 
     public BaseLocationAdapter() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityGoogleSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityGoogleSearchAdapter.java
new file mode 100644
index 000000000..999a97cdd
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/LocationActivityGoogleSearchAdapter.java
@@ -0,0 +1,81 @@
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.location.Address;
+import android.location.Location;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.location.LocationManagerHelper;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Cells.LocationCell;
+import org.telegram.utils.Constants;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by aragats on 08/03/16.
+ */
+//
+public class LocationActivityGoogleSearchAdapter extends LocationActivitySearchAdapter {
+
+
+    private Context mContext;
+
+    public LocationActivityGoogleSearchAdapter(Context context) {
+        super(context);
+        mContext = context;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        if (view == null) {
+            view = new LocationCell(mContext);
+        }
+        ((LocationCell) view).setLocation(places.get(i), null, i != places.size() - 1);
+        return view;
+    }
+
+
+    public void searchGooglePlacesWithQuery(final String query, final Location coordinate) {
+        if (lastSearchLocation != null && coordinate.distanceTo(lastSearchLocation) < 200) {
+            return;
+        }
+        lastSearchLocation = coordinate;
+        if (searching) {
+            searching = false;
+            requestQueue.cancelAll("search");
+        }
+        searching = true;
+        //TODO run in the thread
+        List<Address> addresses = LocationManagerHelper.getInstance().getAddressesFromLocationName(query, Constants.MAX_RESULTS);
+        places = (ArrayList<TLRPC.TL_messageMediaVenue>) convertAddresses(addresses);
+        searching = false;
+        notifyDataSetChanged();
+        if (delegate != null) {
+            delegate.didLoadedSearchResult(places);
+        }
+
+        notifyDataSetChanged();
+    }
+
+
+    private TLRPC.TL_messageMediaVenue convertAddress(Address address) {
+        TLRPC.TL_messageMediaVenue place = new TLRPC.TL_messageMediaVenue();
+        place.title = address.getAddressLine(0);
+        place.address = address.getAddressLine(1);
+        place.geo = new TLRPC.GeoPoint();
+        place.geo.lat = address.getLatitude();
+        place.geo._long = address.getLongitude();
+        return place;
+    }
+
+    private List<TLRPC.TL_messageMediaVenue> convertAddresses(List<Address> addresses) {
+        List<TLRPC.TL_messageMediaVenue> result = new ArrayList<>();
+        for (Address address : addresses) {
+            result.add(convertAddress(address));
+        }
+        return result;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 2b58b067e..dda214544 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -1062,6 +1062,7 @@ private void stopRefreshingProgressView() {
         }
     }
 
+    //http://stackoverflow.com/questions/5375654/how-to-implement-google-maps-search-by-address-in-android  search Google Maps
     private void openLocationChooser() {
         if (!isGoogleMapsInstalled()) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index 8d8be303b..84e85df15 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -55,4 +55,6 @@
     public static long TIME_DIFFERENCE = 1 * 24 * 60 * 60 * 1000; // 1 Day.
 
     public static String POINT = "Point";
+
+    public static final int MAX_RESULTS = 10;
 }
\ No newline at end of file
