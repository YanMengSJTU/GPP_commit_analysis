diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 4342380a4..01706651a 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -24,20 +24,20 @@ configurations {
 }
 
 dependencies {
-    compile 'com.google.android.gms:play-services-gcm:10.2.0'
-    compile 'com.google.android.gms:play-services-maps:10.2.0'
-    compile 'com.google.android.gms:play-services-vision:10.2.0'
-    compile 'com.google.android.gms:play-services-wearable:10.2.0'
-    compile 'com.google.android.gms:play-services-wallet:10.2.0'
-    compile 'com.android.support:support-core-ui:25.3.0'
-    compile 'com.android.support:support-compat:25.3.0'
-    compile 'com.android.support:support-core-utils:25.3.0'
-    compile 'com.android.support:support-v13:25.3.0'
-    compile 'com.android.support:palette-v7:25.3.0'
     compile 'com.android.support:multidex:1.0.1'
-    compile 'net.hockeyapp.android:HockeySDK:4.1.2'
-    compile 'com.stripe:stripe-android:2.0.2'
+    compile 'com.google.android.gms:play-services-gcm:11.0.4'
+    compile 'com.google.android.gms:play-services-maps:11.0.4'
+    compile 'com.google.android.gms:play-services-vision:11.0.4'
+    compile 'com.google.android.gms:play-services-wallet:11.0.4'
+    compile 'com.google.android.gms:play-services-wearable:11.0.4'
+    compile 'com.android.support:support-core-ui:25.3.1'
+    compile 'com.android.support:support-compat:25.3.1'
+    compile 'com.android.support:support-core-utils:25.3.1'
+    compile 'com.android.support:support-v13:25.3.1'
+    compile 'com.android.support:palette-v7:25.3.1'
+    compile 'net.hockeyapp.android:HockeySDK:4.1.3'
     compile 'com.googlecode.mp4parser:isoparser:1.0.6'
+    compile 'com.stripe:stripe-android:2.0.2'
     compile 'com.squareup.retrofit2:retrofit:2.3.0'
     compile 'com.squareup.retrofit2:converter-gson:2.3.0'
     compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
@@ -49,7 +49,7 @@ dependencies {
 
 android {
     compileSdkVersion 26
-    buildToolsVersion '25.0.2'
+    buildToolsVersion '26.0.2'
 
     useLibrary 'org.apache.http.legacy'
     defaultConfig.applicationId = "org.cloudveil.messenger"
@@ -121,7 +121,7 @@ android {
         }
     }
 
-    defaultConfig.versionCode = 966
+    defaultConfig.versionCode = 967
 
     sourceSets.debug {
         manifest.srcFile 'config/debug/AndroidManifest.xml'
@@ -193,7 +193,7 @@ android {
     defaultConfig {
         minSdkVersion 14
         targetSdkVersion 25
-        versionName "4.6.2"
+        versionName "4.6.3"
         multiDexEnabled true
 
         externalNativeBuild {
diff --git a/TMessagesProj/jni/audio.c b/TMessagesProj/jni/audio.c
index c6fd3650a..4225d9032 100644
--- a/TMessagesProj/jni/audio.c
+++ b/TMessagesProj/jni/audio.c
@@ -6,6 +6,7 @@
 #include <time.h>
 #include <opusfile.h>
 #include <math.h>
+#include <opusfile/internal.h>
 #include "utils.h"
 
 typedef struct {
@@ -569,7 +570,6 @@ int initPlayer(const char *path) {
         cleanupPlayer();
         return 0;
     }
-    
     _isSeekable = op_seekable(_opusFile);
     _totalPcmDuration = op_pcm_total(_opusFile, -1);
         
diff --git a/TMessagesProj/jni/opus/opusfile/stream.c b/TMessagesProj/jni/opus/opusfile/stream.c
index 0238a6b31..a08966066 100644
--- a/TMessagesProj/jni/opus/opusfile/stream.c
+++ b/TMessagesProj/jni/opus/opusfile/stream.c
@@ -99,10 +99,12 @@ static int op_fseek(void *_stream,opus_int64 _offset,int _whence){
 #else
   /*This function actually conforms to the SUSv2 and POSIX.1-2001, so we prefer
      it except on Windows.*/
-  return fseeko((FILE *)_stream,(off_t)_offset,_whence);
+  int res = fseek((FILE *)_stream,(off_t)_offset,_whence);
+  return res;
 #endif
 }
 
+
 static opus_int64 op_ftell(void *_stream){
 #if defined(_WIN32)
   /*_ftelli64() is not exposed until MSCVCRT80, and ftello()/ftello64() have
@@ -114,7 +116,7 @@ static opus_int64 op_ftell(void *_stream){
 #else
   /*This function actually conforms to the SUSv2 and POSIX.1-2001, so we prefer
      it except on Windows.*/
-  return ftello((FILE *)_stream);
+  return ftell((FILE *)_stream);
 #endif
 }
 
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
index f71278ff4..743e74d6b 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/GlobalSecuritySettings.java
@@ -21,7 +21,7 @@
     private static int DEFAULT_MIN_SECRET_CHAT_TTL = 0;
     public static final boolean LOCK_DISABLE_IN_APP_BROWSER = true;
     public static final boolean LOCK_DISABLE_AUTOPLAY_GIFS = true;
-    private static final boolean DEFAULT_LOCK_DISABLE_GIFS = false;
+    private static final boolean DEFAULT_LOCK_DISABLE_GIFS = true;
     public static final boolean LOCK_DISABLE_GLOBAL_SEARCH = true;
     private static final boolean DEFAULT_LOCK_DISABLE_STICKERS = false;
 
@@ -124,4 +124,14 @@ public static boolean getManageUsers() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
         return preferences.getBoolean("isManagingUsers", DEFAULT_MANAGE_USERS);
     }
+
+    public static void setBlockedImageUrl(String blockedImageUrl) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        preferences.edit().putString("blockedImageUrl", blockedImageUrl).apply();
+    }
+
+    public static String getBlockedImageUrl() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(GlobalSecuritySettings.class.getCanonicalName(), Activity.MODE_PRIVATE);
+        return preferences.getString("blockedImageUrl", "");
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
index c56e00ca7..c4e613447 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
@@ -28,4 +28,5 @@
     public boolean disableStickers;
     public boolean manageUsers;
     public boolean inputToggleVoiceVideo;
+    public String disableStickersImage;
 }
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index 6de1a6d2a..0b0da447e 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -46,6 +46,7 @@
     private Disposable subscription;
     Handler handler = new Handler();
     private long additionalDialogId = 0;
+    private boolean firstCall = true;
 
 
     @Nullable
@@ -105,10 +106,11 @@ private void sendDataCheckRequest() {
         }
 
         final SettingsResponse cached = loadFromCache();
+        if (cached != null && (firstCall || !ConnectionsManager.isNetworkOnline())) {
+            processResponse(cached);
+            firstCall = false;
+        }
         if (!ConnectionsManager.isNetworkOnline()) {
-            if (cached != null) {
-                processResponse(cached);
-            }
             return;
         }
 
@@ -129,9 +131,6 @@ public void accept(SettingsResponse settingsResponse) throws Exception {
                     @Override
                     public void accept(Throwable throwable) throws Exception {
                         freeSubscription();
-                        if (cached != null) {
-                            processResponse(cached);
-                        }
                     }
                 });
     }
@@ -155,6 +154,8 @@ private void addStickersToRequest(SettingsRequest request) {
             addStickerSetToRequest(StickersQuery.getStickerSets(i), request);
         }
 
+        addStickerSetToRequest(StickersQuery.newStickerSets, request);
+
         ArrayList<TLRPC.StickerSetCovered> featuredStickerSets = StickersQuery.getFeaturedStickerSetsUnfiltered();
         for (TLRPC.StickerSetCovered stickerSetCovered : featuredStickerSets) {
             addStickerSetToRequest(stickerSetCovered.set, request);
@@ -189,13 +190,8 @@ private void processResponse(@NonNull SettingsResponse settingsResponse) {
         appendAllowedDialogs(allowedBots, settingsResponse.access.bots);
 
         StickersQuery.allowedStickerSets.clear();
-        for (HashMap<Long, Boolean> data : settingsResponse.access.stickers) {
-            Long stickerId = data.keySet().iterator().next();
-            Boolean allowed = data.values().iterator().next();
-            if (allowed) {
-                StickersQuery.allowedStickerSets.add(stickerId);
-            }
-        }
+
+        appendAllowedDialogs(StickersQuery.allowedStickerSets, settingsResponse.access.stickers);
 
         GlobalSecuritySettings.setDisableSecretChat(!settingsResponse.secretChat);
         GlobalSecuritySettings.setMinSecretChatTtl(settingsResponse.secretChatMinimumLength);
@@ -207,6 +203,7 @@ private void processResponse(@NonNull SettingsResponse settingsResponse) {
         GlobalSecuritySettings.setDisabledVideoInlineRecording(!settingsResponse.inputToggleVoiceVideo);
         GlobalSecuritySettings.setLockDisableStickers(settingsResponse.disableStickers);
         GlobalSecuritySettings.setManageUsers(settingsResponse.manageUsers);
+        GlobalSecuritySettings.setBlockedImageUrl(settingsResponse.disableStickersImage);
 
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 236eb0988..00636eba6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -492,6 +492,7 @@ public void run() {
                         int currentNum = currentPart;
                         float nextNum = 0;
                         sampleStep = (float) len / 2 / (float) newPart;
+
                         for (int i = 0; i < len / 2; i++) {
                             short peak = buffer.getShort();
                             if (peak > 2500) {
@@ -3415,6 +3416,15 @@ public boolean isPlayingMessage(MessageObject messageObject) {
         return false;
     }
 
+    //CloudVeil start
+    public boolean isAudioTrackPlaying() {
+        if (audioTrackPlayer == null && audioPlayer == null && videoPlayer == null || playingMessageObject == null) {
+            return false;
+        }
+        return !isPaused && !downloadingCurrentMessage;
+    }
+
+    //CloudVeil end
     public boolean isMessagePaused() {
         return isPaused || downloadingCurrentMessage;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index d8e31a2df..79f7986c8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -9141,7 +9141,9 @@ public boolean isDialogCheckedOnServer(long currentDialogId) {
 
     public boolean isMessageAllowed(MessageObject messageObject) {
         if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.document != null && !StickersQuery.isStickerAllowed(messageObject.messageOwner.media.document)) {
-            return false;
+            if(TextUtils.isEmpty(GlobalSecuritySettings.getBlockedImageUrl())) {
+                return false;
+            }
         }
 
         if (messageObject.messageOwner.via_bot_id <= 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
index 178a3c909..0f67c446f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
@@ -14,6 +14,7 @@
 import android.widget.Toast;
 
 import org.cloudveil.messenger.GlobalSecuritySettings;
+import org.cloudveil.messenger.service.ChannelCheckingService;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
@@ -38,6 +39,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.concurrent.ConcurrentHashMap;
 
 @SuppressWarnings("unchecked")
 public class StickersQuery {
@@ -47,6 +49,8 @@
     public static final int TYPE_FAVE = 2;
 
     private static ArrayList<TLRPC.TL_messages_stickerSet> stickerSets[] = new ArrayList[]{new ArrayList<>(), new ArrayList<>()};
+
+
     private static HashMap<Long, TLRPC.TL_messages_stickerSet> stickerSetsById = new HashMap<>();
     private static HashMap<Long, TLRPC.TL_messages_stickerSet> groupStickerSets = new HashMap<>();
     private static HashMap<String, TLRPC.TL_messages_stickerSet> stickerSetsByName = new HashMap<>();
@@ -78,7 +82,8 @@
     private static boolean featuredStickersLoaded;
 
     //CloudVeil start
-    public static ArrayList<Long> allowedStickerSets = new ArrayList<>();
+    public static ConcurrentHashMap<Long, Boolean> allowedStickerSets = new ConcurrentHashMap<>();//Cl
+    public static ArrayList<TLRPC.TL_messages_stickerSet> newStickerSets = new ArrayList<>();
     //CloudVeil end
 
     public static void cleanup() {
@@ -143,7 +148,7 @@ public static boolean isStickerAllowed(TLRPC.TL_messages_stickerSet stickerSet)
     }
 
     public static boolean isStickerAllowed(long id) {
-        return !GlobalSecuritySettings.isLockDisableStickers() && allowedStickerSets.contains(id);
+        return !GlobalSecuritySettings.isLockDisableStickers() && allowedStickerSets.containsKey(id) && allowedStickerSets.get(id);
     }
 
     public static ArrayList<TLRPC.Document> getRecentStickers(int type) {
@@ -157,6 +162,55 @@ public static boolean isStickerAllowed(long id) {
         return stickers;
     }
 
+    public static void loadStickerSetAndSendToServer(TLRPC.InputStickerSet inputStickerSet) {
+        TLRPC.TL_messages_stickerSet stickerSet = null;
+
+        if (inputStickerSet.short_name != null) {
+            stickerSet = getStickerSetByName(inputStickerSet.short_name);
+        }
+        if (stickerSet == null) {
+            stickerSet = getStickerSetById(inputStickerSet.id);
+        }
+        for(TLRPC.TL_messages_stickerSet s : newStickerSets) {
+            if(s.set.id == inputStickerSet.id) {
+                return;
+            }
+        }
+        if (stickerSet == null) {
+            TLRPC.TL_messages_getStickerSet req = new TLRPC.TL_messages_getStickerSet();
+            req.stickerset = inputStickerSet;
+            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    TLRPC.TL_messages_stickerSet stickerSet = (TLRPC.TL_messages_stickerSet) response;
+
+                    for(TLRPC.TL_messages_stickerSet s : newStickerSets) {
+                        if(s.set.id == stickerSet.set.id) {
+                            return;
+                        }
+                    }
+                    newStickerSets.add(stickerSet);
+                    ChannelCheckingService.startDataChecking(ApplicationLoader.applicationContext);
+                }
+            });
+        }
+    }
+
+    public static boolean isStickerSetKnown(TLRPC.Document doc) {
+        if(doc == null) {
+            return true;
+        }
+        if(GlobalSecuritySettings.isLockDisableStickers()) {
+            return true;
+        }
+        long id = getStickerSetId(doc);
+        return allowedStickerSets.containsKey(id);
+    }
+
+
+    public static boolean isStickerAllowed(TLRPC.InputStickerSet inputStickerSet) {
+        return isStickerAllowed(inputStickerSet.id);
+    }
 
     public static ArrayList<TLRPC.Document> getRecentStickersNoCopy(int type) {
         return getRecentStickers(type);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 6a545b7e4..97e492977 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -40,18 +40,18 @@
 import android.view.ViewGroup;
 import android.view.ViewStructure;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
-import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.Emoji;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
@@ -60,8 +60,10 @@
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.browser.Browser;
+import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.LinkPath;
 import org.telegram.ui.Components.RadialProgress;
@@ -69,7 +71,6 @@
 import org.telegram.ui.Components.SeekBar;
 import org.telegram.ui.Components.SeekBarWaveform;
 import org.telegram.ui.Components.StaticLayoutEx;
-import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.TypefaceSpan;
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanMono;
@@ -87,20 +88,35 @@
 
     public interface ChatMessageCellDelegate {
         void didPressedUserAvatar(ChatMessageCell cell, TLRPC.User user);
+
         void didPressedViaBot(ChatMessageCell cell, String username);
+
         void didPressedChannelAvatar(ChatMessageCell cell, TLRPC.Chat chat, int postId);
+
         void didPressedCancelSendButton(ChatMessageCell cell);
+
         void didLongPressed(ChatMessageCell cell);
+
         void didPressedReplyMessage(ChatMessageCell cell, int id);
+
         void didPressedUrl(MessageObject messageObject, CharacterStyle url, boolean longPress);
+
         void needOpenWebView(String url, String title, String description, String originalUrl, int w, int h);
+
         void didPressedImage(ChatMessageCell cell);
+
         void didPressedShare(ChatMessageCell cell);
+
         void didPressedOther(ChatMessageCell cell);
+
         void didPressedBotButton(ChatMessageCell cell, TLRPC.KeyboardButton button);
+
         void didPressedInstantButton(ChatMessageCell cell, int type);
+
         boolean isChatAdminCell(int uid);
+
         boolean needPlayMessage(MessageObject messageObject);
+
         boolean canPerformActions();
     }
 
@@ -190,7 +206,7 @@
     private boolean instantPressed;
     private boolean instantButtonPressed;
     private Drawable instantViewSelectorDrawable;
-    private int pressedState[] = new int[] {android.R.attr.state_enabled, android.R.attr.state_pressed};
+    private int pressedState[] = new int[]{android.R.attr.state_enabled, android.R.attr.state_pressed};
 
     private RoundVideoPlayingDrawable roundVideoPlayingDrawable;
 
@@ -1049,6 +1065,13 @@ public boolean onTouchEvent(MotionEvent event) {
             return super.onTouchEvent(event);
         }
 
+        //hacky hack
+        if(MediaController.getInstance().isAudioTrackPlaying()) {
+            if(event.getAction() == MotionEvent.ACTION_CANCEL) {
+                event.setAction(MotionEvent.ACTION_UP);
+            }
+        }
+
         disallowLongPress = false;
 
         boolean result = checkTextBlockMotionEvent(event);
@@ -1123,7 +1146,7 @@ public boolean onTouchEvent(MotionEvent event) {
                         } else {
                             replyEnd = replyStartX + backgroundDrawableRight;
                         }
-                        if (x >= replyStartX && x <= replyEnd && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35)){
+                        if (x >= replyStartX && x <= replyEnd && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35)) {
                             replyPressed = true;
                             result = true;
                         }
@@ -1208,7 +1231,7 @@ public boolean onTouchEvent(MotionEvent event) {
                         } else {
                             replyEnd = replyStartX + backgroundDrawableRight;
                         }
-                        if (!(x >= replyStartX && x <= replyEnd && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35))){
+                        if (!(x >= replyStartX && x <= replyEnd && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35))) {
                             replyPressed = false;
                         }
                     }
@@ -1534,7 +1557,7 @@ private boolean isUserDataChanged() {
         TLRPC.FileLocation newPhoto = null;
 
         if (isAvatarVisible) {
-            if (currentUser != null && currentUser.photo != null){
+            if (currentUser != null && currentUser.photo != null) {
                 newPhoto = currentUser.photo.photo_small;
             } else if (currentChat != null && currentChat.photo != null) {
                 newPhoto = currentChat.photo.photo_small;
@@ -2478,7 +2501,7 @@ public int getOpacity() {
                     int maxPhotoWidth = smallImage ? AndroidUtilities.dp(48) : linkPreviewMaxWidth;
 
                     if (document != null) {
-                        if (MessageObject.isGifDocument(document)){
+                        if (MessageObject.isGifDocument(document)) {
                             if (!MediaController.getInstance().canAutoplayGifs()) {
                                 messageObject.gifState = 1;
                             }
@@ -2612,7 +2635,7 @@ public int getOpacity() {
                                 photoImage.setAllowDecodeSingleFrame(true);
                             }
 
-                            maxChildWidth = Math.max(maxChildWidth, maxPhotoWidth - (hasInvoicePreview ? AndroidUtilities.dp(12) : 0)  + additinalWidth);
+                            maxChildWidth = Math.max(maxChildWidth, maxPhotoWidth - (hasInvoicePreview ? AndroidUtilities.dp(12) : 0) + additinalWidth);
                             if (currentPhotoObject != null) {
                                 currentPhotoObject.size = -1;
                                 if (currentPhotoObjectThumb != null) {
@@ -2807,9 +2830,9 @@ public int getOpacity() {
                 } else {
                     if (isMissed) {
                         text = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
-                    } else if(call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) {
-						text = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
-					}  else {
+                    } else if (call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) {
+                        text = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
+                    } else {
                         text = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
                     }
                 }
@@ -3089,21 +3112,36 @@ public int getOpacity() {
                     availableTimeWidth = photoWidth - AndroidUtilities.dp(14);
                     backgroundWidth = photoWidth + AndroidUtilities.dp(12);
                     currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                    if (messageObject.attachPathExists) {
-                        photoImage.setImage(null, messageObject.messageOwner.attachPath,
+
+                    //CloudVeil start
+                    if ((!StickersQuery.isStickerAllowed(messageObject.messageOwner.media.document)) && !TextUtils.isEmpty(GlobalSecuritySettings.getBlockedImageUrl())) {
+                        photoImage.setImage(null, GlobalSecuritySettings.getBlockedImageUrl(),
                                 String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
                                 null,
-                                currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
-                                "b1",
-                                messageObject.messageOwner.media.document.size, "webp", 1);
-                    } else if (messageObject.messageOwner.media.document.id != 0) {
-                        photoImage.setImage(messageObject.messageOwner.media.document, null,
-                                String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
                                 null,
-                                currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
-                                "b1",
-                                messageObject.messageOwner.media.document.size, "webp", 1);
+                                null,
+                                0, "png", 1);
+                        if (!StickersQuery.isStickerSetKnown(messageObject.messageOwner.media.document)) {
+                            StickersQuery.loadStickerSetAndSendToServer(messageObject.getInputStickerSet());
+                        }
+                    } else {
+                        if (messageObject.attachPathExists) {
+                            photoImage.setImage(null, messageObject.messageOwner.attachPath,
+                                    String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
+                                    null,
+                                    currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
+                                    "b1",
+                                    messageObject.messageOwner.media.document.size, "webp", 1);
+                        } else if (messageObject.messageOwner.media.document.id != 0) {
+                            photoImage.setImage(messageObject.messageOwner.media.document, null,
+                                    String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
+                                    null,
+                                    currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
+                                    "b1",
+                                    messageObject.messageOwner.media.document.size, "webp", 1);
+                        }
                     }
+                    //CloudVeil end
                 } else {
                     int maxPhotoWidth;
                     if (messageObject.type == 5) {
@@ -3654,8 +3692,11 @@ public int getOpacity() {
                 totalHeight = AndroidUtilities.dp(70);
             }
         }
+
         updateWaveform();
+
         updateButtonState(dataChanged);
+
     }
 
     @Override
@@ -4516,7 +4557,7 @@ private void drawContent(Canvas canvas) {
                 setDrawableBounds(phone, x + AndroidUtilities.dp(205), otherY = AndroidUtilities.dp(22));
                 phone.draw(canvas);
             } else if (currentMessageObject.type == 12) {
-                Theme.chat_contactNamePaint.setColor(Theme.getColor(currentMessageObject.isOutOwner() ?  Theme.key_chat_outContactNameText : Theme.key_chat_inContactNameText));
+                Theme.chat_contactNamePaint.setColor(Theme.getColor(currentMessageObject.isOutOwner() ? Theme.key_chat_outContactNameText : Theme.key_chat_inContactNameText));
                 Theme.chat_contactPhonePaint.setColor(Theme.getColor(currentMessageObject.isOutOwner() ? Theme.key_chat_outContactPhoneText : Theme.key_chat_inContactPhoneText));
                 if (titleLayout != null) {
                     canvas.save();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
index 60b53b871..55bd5ae6f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerEmojiCell.java
@@ -10,6 +10,7 @@
 
 import android.content.Context;
 import android.graphics.Canvas;
+import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.View;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index e9fd3c4b3..3acc8d525 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -367,9 +367,6 @@
     private HashMap<Integer, MessageObject>[] messagesDict = new HashMap[]{new HashMap<>(), new HashMap<>()};
     private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap<>();
 
-    //CloudVeil start
-    protected ArrayList<MessageObject> messagesOld = new ArrayList<>();
-    //CloudVeil end
     protected ArrayList<MessageObject> messages = new ArrayList<>();
     private HashMap<Long, MessageObject.GroupedMessages> groupedMessagesMap = new HashMap<>();
     private int maxMessageId[] = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
@@ -6489,12 +6486,10 @@ public void didReceivedNotification(int id, final Object... args) {
             MessagesController messagesController = MessagesController.getInstance();
             boolean isDialogAllowed = messagesController.isDialogIdAllowed(dialog_id);
             if (messagesController.isDialogCheckedOnServer(dialog_id) && isDialogAllowed) {
-                messages = messagesController.filterMessages(messagesOld);
                 chatAdapter.notifyDataSetChanged();
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
             } else if (!isDialogAllowed) {
                 showWarning(getParentActivity());
-                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
+                return;
             }
             //ClloudVeil end
         } else if (id == NotificationCenter.messagesDidLoaded) {
@@ -8668,12 +8663,11 @@ public void run() {
             }
         }
 
+
         //CloudVeil start
-        backupMessages();
         if (MessagesController.getInstance().isDialogCheckedOnServer(dialog_id)) {
             messages = MessagesController.getInstance().filterMessages(messages);
         } else {
-            messages = new ArrayList<>();
             ChannelCheckingService.startDataChecking(dialog_id, getParentActivity());
         }
         if(chatAdapter != null) {
@@ -8682,12 +8676,6 @@ public void run() {
         //CloudVeil end
     }
 
-    private void backupMessages() {
-        messagesOld.clear();
-        for(MessageObject m : messages) {
-            messagesOld.add(m);
-        }
-    }
 
     public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline button) {
         if (inlineReturn == 0 || button.same_peer || parentLayout == null) {
@@ -11258,6 +11246,10 @@ public void updateRows() {
 
         @Override
         public int getItemCount() {
+            if(!MessagesController.getInstance().isDialogCheckedOnServer(dialog_id) ||
+                    !MessagesController.getInstance().isDialogIdAllowed(dialog_id)) {
+                return 0;
+            }
             return rowCount;
         }
 
@@ -11516,7 +11508,11 @@ public void didPressedImage(ChatMessageCell cell) {
                             SecretMediaViewer.getInstance().setParentActivity(getParentActivity());
                             SecretMediaViewer.getInstance().openMedia(message, photoViewerProvider);
                         } else if (message.type == 13) {
-                            showDialog(new StickersAlert(getParentActivity(), ChatActivity.this, message.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE && ChatObject.canSendStickers(currentChat) ? chatActivityEnterView : null));
+                            //cloudveil start
+                            if(StickersQuery.isStickerAllowed(message.getInputStickerSet())) {
+                                showDialog(new StickersAlert(getParentActivity(), ChatActivity.this, message.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE && ChatObject.canSendStickers(currentChat) ? chatActivityEnterView : null));
+                            }
+                            //cloudveil end
                         } else if (message.isVideo() || message.type == 1 || message.type == 0 && !message.isWebpageDocument() || message.isGif()) {
                             if (message.isVideo()) {
                                 sendSecretMessageRead(message);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index fa3a4f1ed..6dd73e8b9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -80,23 +80,37 @@
 
     public interface Listener {
         boolean onBackspace();
+
         void onEmojiSelected(String emoji);
+
         void onStickerSelected(TLRPC.Document sticker);
+
         void onStickersSettingsClick();
+
         void onStickersGroupClick(int chatId);
+
         void onGifSelected(TLRPC.Document gif);
+
         void onGifTab(boolean opened);
+
         void onStickersTab(boolean opened);
+
         void onClearEmojiRecent();
+
         void onShowStickerSet(TLRPC.StickerSet stickerSet, TLRPC.InputStickerSet inputStickerSet);
+
         void onStickerSetAdd(TLRPC.StickerSetCovered stickerSet);
+
         void onStickerSetRemove(TLRPC.StickerSetCovered stickerSet);
     }
 
-    public interface DragListener{
+    public interface DragListener {
         void onDragStart();
+
         void onDragEnd(float velocity);
+
         void onDragCancel();
+
         void onDrag(int offset);
     }
 
@@ -135,6 +149,7 @@ public void openSet(TLRPC.InputStickerSet set) {
     };
 
     private static final Field superListenerField;
+
     static {
         Field f = null;
         try {
@@ -145,6 +160,7 @@ public void openSet(TLRPC.InputStickerSet set) {
         }
         superListenerField = f;
     }
+
     private static final ViewTreeObserver.OnScrollChangedListener NOP = new ViewTreeObserver.OnScrollChangedListener() {
         @Override
         public void onScrollChanged() {
@@ -636,7 +652,7 @@ public EmojiView(boolean needStickers, boolean needGif, final Context context, f
 
         Drawable stickersDrawable = context.getResources().getDrawable(R.drawable.ic_smiles2_stickers);
         Theme.setDrawableColorByKey(stickersDrawable, Theme.key_chat_emojiPanelIcon);
-        icons = new Drawable[] {
+        icons = new Drawable[]{
                 Theme.createEmojiIconSelectorDrawable(context, R.drawable.ic_smiles2_recent, Theme.getColor(Theme.key_chat_emojiPanelIcon), Theme.getColor(Theme.key_chat_emojiPanelIconSelected)),
                 Theme.createEmojiIconSelectorDrawable(context, R.drawable.ic_smiles2_smile, Theme.getColor(Theme.key_chat_emojiPanelIcon), Theme.getColor(Theme.key_chat_emojiPanelIconSelected)),
                 Theme.createEmojiIconSelectorDrawable(context, R.drawable.ic_smiles2_nature, Theme.getColor(Theme.key_chat_emojiPanelIcon), Theme.getColor(Theme.key_chat_emojiPanelIconSelected)),
@@ -1052,7 +1068,19 @@ public void onPageSelected(int page) {
                                 saveNewPage();
                             }
                         }
+                    } else {
+                        if (page == trendingTabNum + 1) {
+                            if (trendingGridView.getVisibility() != VISIBLE) {
+                                showTrendingTab();
+                            }
+                        } else if (trendingGridView.getVisibility() == VISIBLE) {
+                            trendingGridView.setVisibility(GONE);
+                            stickersGridView.setVisibility(VISIBLE);
+                            stickersEmptyView.setVisibility(stickersGridAdapter.getItemCount() != 0 ? GONE : VISIBLE);
+                            saveNewPage();
+                        }
                     }
+
                     if (page == 0) {
                         pager.setCurrentItem(0);
                         return;
@@ -1292,7 +1320,9 @@ private void showTrendingTab() {
         trendingGridView.setVisibility(VISIBLE);
         stickersGridView.setVisibility(GONE);
         stickersEmptyView.setVisibility(GONE);
-        gifsGridView.setVisibility(GONE);
+        if (gifsGridView != null) {
+            gifsGridView.setVisibility(GONE);
+        }
         stickersTab.onPageScrolled(trendingTabNum + 1, (recentTabBum > 0 ? recentTabBum : stickersTabOffset) + 1);
         saveNewPage();
     }
@@ -1423,9 +1453,11 @@ private void updateStickerTabs() {
         ArrayList<TLRPC.TL_messages_stickerSet> packs = StickersQuery.getStickerSets(StickersQuery.TYPE_IMAGE);
         for (int a = 0; a < packs.size(); a++) {
             TLRPC.TL_messages_stickerSet pack = packs.get(a);
-            if (pack.set.archived || pack.documents == null || pack.documents.isEmpty()) {
+            //CLoudVeil start
+            if (pack.set.archived || pack.documents == null || pack.documents.isEmpty() || !StickersQuery.isStickerAllowed(pack)) {
                 continue;
             }
+
             stickerSets.add(pack);
         }
         if (info != null) {
@@ -2087,7 +2119,7 @@ public void notifyDataSetChanged() {
                     if (leftSide < AndroidUtilities.dp(320)) {
                         leftSide = AndroidUtilities.dp(320);
                     }
-                    width  = smallSide - leftSide;
+                    width = smallSide - leftSide;
                 } else {
                     width = AndroidUtilities.displaySize.x;
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 29e4df339..bacd613fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -179,6 +179,7 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.reloadHints);
             //CloudVeil start
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.filterDialogsReady);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.stickersDidLoaded);
             //CloudVeil end
         }
 
@@ -216,6 +217,7 @@ public void onFragmentDestroy() {
 
             //CloudVeil start
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.filterDialogsReady);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.stickersDidLoaded);
             //CloudVeil end
         }
         if (commentView != null) {
@@ -1244,6 +1246,9 @@ public void onResume() {
         } else {
             showPopup(getParentActivity());
         }
+        //Cloudveil start
+        StickersQuery.loadStickers(StickersQuery.TYPE_IMAGE, true, false);
+        //Cloudveil end
     }
 
     @Override
@@ -1373,7 +1378,7 @@ public void onRequestPermissionsResultFragment(int requestCode, String[] permiss
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
         //CloudVeil start
-        if (id == NotificationCenter.dialogsNeedReload) {
+        if (id == NotificationCenter.dialogsNeedReload || id == NotificationCenter.stickersDidLoaded) {
             ChannelCheckingService.startDataChecking(ApplicationLoader.applicationContext);
         }
         if (id == NotificationCenter.filterDialogsReady) {
diff --git a/gradle.properties b/gradle.properties
index 08f287cfb..67bca27ee 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,3 +17,4 @@ RELEASE_KEY_PASSWORD=password
 RELEASE_KEY_ALIAS=alias
 RELEASE_STORE_PASSWORD=password
 android.useDeprecatedNdk=true
+org.gradle.jvmargs=-Xmx2560M
\ No newline at end of file
