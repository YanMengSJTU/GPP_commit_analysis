diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 1beec2fff..255990483 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -5235,8 +5235,8 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
 
                 if (MessagesStorage.lastPtsValue + updates.pts_count == updates.pts) {
                     TLRPC.TL_message message = new TLRPC.TL_message();
-                    message.id=updates.pts;
-                    //message.id = updates.id;
+                    //message.id=updates.pts;
+                    message.id = updates.id;
                     if (updates instanceof TLRPC.TL_updateShortMessage) {
                         if (updates.out) {
                             message.from_id = UserConfig.getClientUserId();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
index f3263d844..e991a9744 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
@@ -25,8 +25,13 @@
 
 import com.path.android.jobqueue.JobManager;
 
+import org.eclipse.paho.android.service.MqttAndroidClient;
+import org.eclipse.paho.client.mqttv3.IMqttActionListener;
+import org.eclipse.paho.client.mqttv3.IMqttToken;
+import org.eclipse.paho.client.mqttv3.MqttException;
 import org.json.JSONObject;
 import org.telegram.messenger.audioinfo.AudioInfo;
+import org.telegram.messenger.mqtt.Connections;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.messenger.shamChat.MessageContentTypeProvider;
 import org.telegram.messenger.shamChat.PublishToTopicJob;
@@ -1297,7 +1302,8 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                             // TODO Auto-generated catch block
                             e.printStackTrace();
                         }
-                        jobManager.addJobInBackground(new PublishToTopicJob(jsonMessageObject.toString(), "groups/" + "s18271:102015"));
+                        PublishToTopicChat(jsonMessageObject.toString(), "groups/" + "s18271:102015");
+                       // jobManager.addJobInBackground(new PublishToTopicJob(jsonMessageObject.toString(), "groups/" + "s18271:102015"));
                     }
                 } else {
                     TLRPC.TL_decryptedMessage reqSend;
@@ -1957,6 +1963,40 @@ public void run() {
         });
     }
 
+    public  void  PublishToTopicChat(String topicName,String jsonMessageString) {
+
+        int qos = 1;
+        boolean retained = false;
+        String clientHandle = null;
+        clientHandle = "user102015";
+        MqttAndroidClient client = Connections.getInstance(ApplicationLoader.getInstance().getApplicationContext()).getConnection(clientHandle).getClient();
+
+        try {
+            client.publish(topicName, jsonMessageString.getBytes(), qos, retained, null, new IMqttActionListener() {
+
+                @Override
+                public void onSuccess(IMqttToken arg0) {
+
+
+                }
+
+                @Override
+                public void onFailure(IMqttToken arg0, Throwable arg1) {
+
+
+                }
+            });
+        } catch (MqttException e) {
+            e.printStackTrace();
+        }
+
+        client.close();
+
+
+
+    }
+
+
     protected void putToSendingMessages(TLRPC.Message message) {
         sendingMessages.put(message.id, message);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java b/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java
index 4842f75db..85ac8800c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/mqtt/MQTTService.java
@@ -120,6 +120,7 @@
     public static final int MQTT_NOTIFICATION_UPDATE  = 2;
 
     public TLRPC.TL_updateShortMessage messageTelegram;
+    public TLRPC.TL_updateShortChatMessage messageTelegramChatMessage;
 
     private Thread.UncaughtExceptionHandler androidDefaultUEH;
     private Thread.UncaughtExceptionHandler handler = new Thread.UncaughtExceptionHandler() {
@@ -1754,7 +1755,7 @@ public void connectionLost(Throwable cause) {
          */
 
         @Override
-        public void messageArrived(String topic, MqttMessage message) throws Exception {
+        public void messageArrived(String topic, final MqttMessage message) throws Exception {
 
             // we protect against the phone switching off while we're doing this
             //  by requesting a wake lock - we request the minimum possible wake
@@ -1892,45 +1893,50 @@ else if (packetType.equals("unknown")) {
 //    		Notify.notifcation(context, context.getString(R.string.notification, notifyArgs), intent, R.string.notifyTitle);		
                 }else { //if this is a group message
 
+
+                   int id= Utils.lastIdIncrement(context);
+
+
                     if (packetType.equals("message")){
 
-                        String threadId = null;
 
-                        JSONObject SampleMsg = null;
-                        String packetId = null;
-                        String from = null;
-                        int fromUserId = 0;
                         String to=null;
-                        String messageTypeDesc = null;
-                        int messageType = 0;
-                        String messageBody = null;
-                        String timestamp = null;
-                        //String groupOwnerId = null;
-                        int isGroupChat = 0;
-                        String latitude = null;
-                        String longitude = null;
-
-                        Boolean isChannel = false;
-                        Boolean singleChat = false;
+
 
                         try {
-                            SampleMsg = new JSONObject(jsonMessageString);
-                            packetId = SampleMsg.getString("packetId");
-                            from = SampleMsg.getString("from");
-                            fromUserId = SampleMsg.getInt("from_userid");
+
+
+
+
+                            JSONObject SampleMsg = new JSONObject(jsonMessageString);
+
                             to = SampleMsg.getString("to");
-                            messageTypeDesc = SampleMsg.getString("messageTypeDesc");
-                            timestamp = SampleMsg.getString("timestamp");
-                            messageType = SampleMsg.getInt("messageType");
-                            messageBody = SampleMsg.getString("messageBody");
-                            //groupOwnerId = SampleMsg.getString("groupOwnerId");
-                            isGroupChat = SampleMsg.getInt("isGroupChat");
 
-                            if (SampleMsg.has("latitude"))
-                                latitude = SampleMsg.getString("latitude");
+                            if(  to.startsWith("s"))
+                            {
+                                 messageTelegram= Utils.SingleChatMessage(jsonMessageString,context);
+                                Utilities.stageQueue.postRunnable(new Runnable() {
+                                    @Override
+                                    public void run() {
 
-                            if (SampleMsg.has("longitude"))
-                                latitude = SampleMsg.getString("longitude");
+
+                                        MessagesController.getInstance().processUpdates((TLRPC.Updates) messageTelegram, false);
+                                    }
+                                });
+
+                            }
+                            else if(  to.startsWith("g"))
+                            {messageTelegramChatMessage=Utils.groupChatMessage(jsonMessageString,context);
+
+                                Utilities.stageQueue.postRunnable(new Runnable() {
+                                    @Override
+                                    public void run() {
+
+                                        MessagesController.getInstance().processUpdates((TLRPC.Updates) messageTelegramChatMessage, false);
+                                    }
+                                });
+
+                            }
 
 
 
@@ -1943,59 +1949,22 @@ else if (packetType.equals("unknown")) {
 
 
 
-try {
-    messageTelegram = new TLRPC.TL_updateShortMessage();
-
-    messageTelegram.chat_id = 0;
-    //messageTelegram.date = (int)Utils.DateToTimeStamp( timestamp);
-    messageTelegram.date = 1472564180;
-    messageTelegram.flags = 1;
-    messageTelegram.from_id = 0;
-    messageTelegram.id = 1472564180;
-    messageTelegram.message = messageBody;
-    messageTelegram.out = false;
-    messageTelegram.user_id = 107359676;
-    messageTelegram.unread = false;
-    messageTelegram.out = false;
-    messageTelegram.mentioned = false;
-    messageTelegram.media_unread = false;
-    messageTelegram.silent = false;
-    //messageTelegram.id = stream.readInt32(exception);
-    messageTelegram.pts = 49;
-    messageTelegram.pts_count = 1;
-    messageTelegram.fwd_from = null;
-    messageTelegram.via_bot_id = 0;
-    messageTelegram.reply_to_msg_id = 0;
-
-                     /*   if ((flags & 128) != 0) {
-                            int magic = stream.readInt32(exception);
-                            if (magic != 0x1cb5c415) {
-                                if (exception) {
-                                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
-                                }
-                                return;
-                            }
-                            int count = stream.readInt32(exception);
-                            for (int a = 0; a < count; a++) {
-                                MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
-                                if (object == null) {
-                                    return;
-                                }
-                                entities.add(object);
-                            }
-                        }*/
-} catch (Exception e) {
-    e.printStackTrace();
-}
 
 
-                        Utilities.stageQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
 
-                                MessagesController.getInstance().processUpdates((TLRPC.Updates) messageTelegram, false);
-                            }
-                        });
+
+
+//test2
+
+
+
+
+
+
+
+
+
+
 //reza_ak
                         //if it is my own packet just ignore it
                         /*
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java
index 15f9d4be1..f5b8c8d9a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/PublishToTopicJob.java
@@ -120,14 +120,14 @@ public void onAdded() {
 		// eventually run.
 		// In this example, it would be good to update the UI with the newly
 		// posted tweet.
-
+/*
 		//if this is text message or sticker add it to database first
 		//if this is not a retry operation we add message to database
 		if (isRetry== false)
 		{
 			if (messageType == MessageContentTypeProvider.MessageContentType.TEXT.ordinal() || messageType == MessageContentTypeProvider.MessageContentType.STICKER.ordinal())
 				addChatMessageToDB(MyMessageType.OUTGOING_MSG.ordinal(), ChatMessage.MessageStatusType.SENDING.ordinal(), MessageContentTypeProvider.MessageContentType.TEXT.ordinal(), jsonMessageString);
-		}
+		}*/
 
 	}
 
@@ -190,58 +190,10 @@ public void onRun() throws Throwable {
 
 			@Override
 			public void onSuccess(IMqttToken arg0) {
-				// if publishes to topic successfully
-
-				final String jsonMessage = jsonMessageString;
-				if (messageType == MessageContentTypeProvider.MessageContentType.TEXT.ordinal() || messageType == MessageContentTypeProvider.MessageContentType.STICKER.ordinal())
-				{
-					//MAST - if message is published to mqtt - we update it to delivered status
-					//MAST - TODO - for single chat later we can improve this to make it as "Sent" status and in the MQTTService check its real delivery and then change to delivered
-					//reza_ak
-					// /updateMessageStatus(packetId, MessageStatusType.DELIVERED);
-				}
-				else {
-
-					//MAST - TODO - if it is image/video/voice/sticker
-					//Update status of message in chat message table to delivered
-					//refresh UI
-					//updateMessageStatus(packetId, MessageStatusType.DELIVERED);
-				}
-
 			}
 
 			@Override
 			public void onFailure(IMqttToken arg0, Throwable arg1) {
-				// if some error happens and doesn't send to topic
-
-				//if it is a blob message
-				if (messageType == MessageContentTypeProvider.MessageContentType.IMAGE.ordinal() || messageType == MessageContentTypeProvider.MessageContentType.VIDEO.ordinal() ||
-						messageType == MessageContentTypeProvider.MessageContentType.LOCATION.ordinal() || messageType== MessageContentTypeProvider.MessageContentType.VOICE_RECORD.ordinal()	)
-				{
-					//updateMessageStatus(packetId, ChatMessage.MessageStatusType.FAILED);
-				}
-				else {
-					//MAST - TODO - for text messages
-					//Should change message status to failed
-					//Add a retry button to its UI
-					//try sending it again
-					//updateMessageStatus(packetId, MessageStatusType.FAILED);
-
-				}
-
-
-
-				String actionTaken = "publish_message_failed";
-				/*if (DEBUG)
-					NotifySimple.notifcation(ApplicationLoader.applicationContext, actionTaken, Toast.LENGTH_SHORT);
-*/
-				//mast - this is too much just for testing
-			    /*if (isOnline())
-			    {
-					Intent backgroundService = new Intent(ApplicationLoader.getInstance(), MQTTService.class);
-					ApplicationLoader.getInstance().stopService(backgroundService);
-					ApplicationLoader.getInstance().startService(backgroundService);
-			    }*/
 
 			}
 		});
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Utils.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Utils.java
index 65cc83f0b..6517285ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Utils.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Utils.java
@@ -4,6 +4,7 @@
 import android.content.ContentUris;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.graphics.Bitmap;
@@ -35,6 +36,7 @@
 
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.telegram.tgnet.TLRPC;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
@@ -906,6 +908,197 @@ public static long DateToTimeStamp(String datetime) {
 				}
 
 			}
+
+
+
+	public static TLRPC.TL_updateShortChatMessage groupChatMessage (String jsonMessageString,Context cnt)
+	{
+
+		int id= Utils.lastIdIncrement(cnt);
+
+
+
+		String threadId = null;
+
+		JSONObject SampleMsg = null;
+		String packetId = null;
+		String from = null;
+		int fromUserId = 0;
+		String to=null;
+		String messageTypeDesc = null;
+		int messageType = 0;
+		String messageBody = null;
+		String timestamp = null;
+		//String groupOwnerId = null;
+		int isGroupChat = 0;
+		String latitude = null;
+		String longitude = null;
+
+		Boolean isChannel = false;
+		Boolean singleChat = false;
+
+		try {
+
+
+
+
+			SampleMsg = new JSONObject(jsonMessageString);
+			packetId = SampleMsg.getString("packetId");
+			from = SampleMsg.getString("from");
+			fromUserId = SampleMsg.getInt("from_userid");
+			to = SampleMsg.getString("to");
+			messageTypeDesc = SampleMsg.getString("messageTypeDesc");
+			timestamp = SampleMsg.getString("timestamp");
+			messageType = SampleMsg.getInt("messageType");
+			messageBody = SampleMsg.getString("messageBody");
+			//groupOwnerId = SampleMsg.getString("groupOwnerId");
+			isGroupChat = SampleMsg.getInt("isGroupChat");
+
+			if (SampleMsg.has("latitude"))
+				latitude = SampleMsg.getString("latitude");
+
+			if (SampleMsg.has("longitude"))
+				latitude = SampleMsg.getString("longitude");
+
+
+
+		} catch (JSONException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+		try {
+			TLRPC.TL_updateShortChatMessage messageTelegramChatMessage = new TLRPC.TL_updateShortChatMessage();
+
+			messageTelegramChatMessage.chat_id = 150010197;
+			//messageTelegram.date = (int)Utils.DateToTimeStamp( timestamp);
+			messageTelegramChatMessage.date = 1472621564;
+			messageTelegramChatMessage.flags = 1;
+			messageTelegramChatMessage.from_id = 107359676;
+			messageTelegramChatMessage.id = id;
+			messageTelegramChatMessage.message = messageBody;
+			messageTelegramChatMessage.out = false;
+			messageTelegramChatMessage.user_id = 0;
+			messageTelegramChatMessage.unread = true;
+			messageTelegramChatMessage.out = false;
+			messageTelegramChatMessage.mentioned = false;
+			messageTelegramChatMessage.media_unread = false;
+			messageTelegramChatMessage.silent = false;
+			//messageTelegramChatMessage.id = stream.readInt32(exception);
+			messageTelegramChatMessage.pts = 49;
+			messageTelegramChatMessage.pts_count = 1;
+			messageTelegramChatMessage.fwd_from = null;
+			messageTelegramChatMessage.via_bot_id = 0;
+			messageTelegramChatMessage.reply_to_msg_id = 0;
+return messageTelegramChatMessage;
+		} catch (Exception e) {
+			e.printStackTrace();
+			return null;
+		}
+
+
+	}
+	public static TLRPC.TL_updateShortMessage SingleChatMessage  (String jsonMessageString,Context cnt)
+	{
+
+		int id= Utils.lastIdIncrement(cnt);
+
+
+
+		String threadId = null;
+
+		JSONObject SampleMsg = null;
+		String packetId = null;
+		String from = null;
+		int fromUserId = 0;
+		String to=null;
+		String messageTypeDesc = null;
+		int messageType = 0;
+		String messageBody = null;
+		String timestamp = null;
+		//String groupOwnerId = null;
+		int isGroupChat = 0;
+		String latitude = null;
+		String longitude = null;
+
+		Boolean isChannel = false;
+		Boolean singleChat = false;
+
+		try {
+
+
+
+
+			SampleMsg = new JSONObject(jsonMessageString);
+			packetId = SampleMsg.getString("packetId");
+			from = SampleMsg.getString("from");
+			fromUserId = SampleMsg.getInt("from_userid");
+			to = SampleMsg.getString("to");
+			messageTypeDesc = SampleMsg.getString("messageTypeDesc");
+			timestamp = SampleMsg.getString("timestamp");
+			messageType = SampleMsg.getInt("messageType");
+			messageBody = SampleMsg.getString("messageBody");
+			//groupOwnerId = SampleMsg.getString("groupOwnerId");
+			isGroupChat = SampleMsg.getInt("isGroupChat");
+
+			if (SampleMsg.has("latitude"))
+				latitude = SampleMsg.getString("latitude");
+
+			if (SampleMsg.has("longitude"))
+				latitude = SampleMsg.getString("longitude");
+
+
+
+		} catch (JSONException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+
+		try {
+			TLRPC.TL_updateShortMessage messageTelegram = new TLRPC.TL_updateShortMessage();
+
+			messageTelegram.chat_id = 0;
+			//messageTelegram.date = (int)Utils.DateToTimeStamp( timestamp);
+			messageTelegram.date = 1472564180;
+			messageTelegram.flags = 1;
+			messageTelegram.from_id = 0;
+			messageTelegram.id = id;
+			messageTelegram.message = messageBody;
+			messageTelegram.out = false;
+			messageTelegram.user_id = 107359676;
+			messageTelegram.unread = true;
+			messageTelegram.out = false;
+			messageTelegram.mentioned = false;
+			messageTelegram.media_unread = false;
+			messageTelegram.silent = false;
+			//messageTelegram.id = stream.readInt32(exception);
+			//messageTelegram.pts = 49;
+			messageTelegram.pts_count = 1;
+			messageTelegram.fwd_from = null;
+			messageTelegram.via_bot_id = 0;
+			messageTelegram.reply_to_msg_id = 0;
+			return messageTelegram;
+
+		} catch (Exception e) {
+
+			e.printStackTrace();
+			return null;
+		}
+
+	}
+public static int lastIdIncrement (Context cnt)
+	{
+		SharedPreferences prefs = cnt.getSharedPreferences("idMessage", cnt.MODE_PRIVATE);
+		int lastId = prefs.getInt("idMessageLast", 0);
+		int lastIdMessage = lastId;
+
+		SharedPreferences.Editor editor = cnt.getSharedPreferences("idMessage", cnt.MODE_PRIVATE).edit();
+		lastId++;
+		editor.putInt("idMessageLast", lastId);
+		editor.apply();
+		return lastIdMessage;
+	}
 /*
 		  *//**
 		   * Detects packet type based on json string received
