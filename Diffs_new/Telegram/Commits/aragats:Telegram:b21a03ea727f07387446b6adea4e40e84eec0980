diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index ffc248ea6..5f4c4eb62 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -35,7 +35,7 @@
 
     public static final int savePostError = totalEvents++;
     //    public static final int loadPostsError = totalEvents++;
-    public static final int invalidPhoto = totalEvents++;
+    public static final int invalidPost = totalEvents++;
 
 
     public static final int didReceivedNewPosts = totalEvents++; //TODO
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
index 224348ef1..96f2929d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseLocationAdapter.java
@@ -62,7 +62,7 @@ public void setDelegate(BaseLocationAdapterDelegate delegate) {
         this.delegate = delegate;
     }
 
-    public void searchDelayed(final String query, final Location coordinate) {
+    public void searchDelayed(final String query, final Location coordinate, final int radius) {
         if (query == null || query.length() == 0) {
             places.clear();
             notifyDataSetChanged();
@@ -88,7 +88,7 @@ public void run() {
                         @Override
                         public void run() {
                             lastSearchLocation = null;
-                            searchGooglePlacesWithQuery(query, coordinate, Constants.RADIUS_BROWSER, Constants.FOURSQUARE_BROWSER);
+                            searchGooglePlacesWithQuery(query, coordinate, radius, Constants.FOURSQUARE_CHECKIN);
                         }
                     });
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
index 9465fc7d6..fcb6a7ea0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PostCreateActivityEnterView.java
@@ -46,6 +46,8 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.utils.Constants;
+import org.telegram.utils.StringUtils;
 
 /**
  * TODO-aragats
@@ -614,8 +616,8 @@ private String getTrimmedString(String src) {
     ///TODO change parameter to length instead of message
     private void updateCharCounter(String message) {
         //TODO when pass int to setText then you run setText(int) method that search resource with id.
-        this.charCounter.setText("" + (140 - message.length()));
-        if (message.length() > 140) {
+        this.charCounter.setText("" + (Constants.MAX_TEXT_LENGTH - message.length()));
+        if (message.length() > Constants.MAX_TEXT_LENGTH) {
             this.charCounter.setTextColor(Color.RED);
         } else {
             this.charCounter.setTextColor(Color.parseColor("#b2b2b2"));
@@ -969,6 +971,14 @@ public String getFieldText() {
         return null;
     }
 
+    public String getFieldTrimmedText() {
+        String text = getFieldText();
+        if (text == null) {
+            text = "";
+        }
+        return getTrimmedString(text);
+    }
+
     public boolean isEmojiPopupShowing() {
         return emojiPopup != null && emojiPopup.isShowing();
     }
@@ -1058,4 +1068,8 @@ public void didReceivedNotification(int id, Object... args) {
             hideEmojiPopup();
         }
     }
+
+    public boolean isValid() {
+        return getFieldTrimmedText().length() <= Constants.MAX_TEXT_LENGTH;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
index 210a9035b..b2a4bca03 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
@@ -54,17 +54,12 @@
 import org.telegram.android.location.LocationManagerHelper;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
-
-import ru.aragats.wgo.dto.Post;
-import ru.aragats.wgo.dto.Venue;
-
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseLocationAdapter;
 import org.telegram.ui.Adapters.LocationActivityAdapter;
-import org.telegram.ui.Adapters.LocationActivityGoogleSearchAdapter;
 import org.telegram.ui.Adapters.LocationActivitySearchAdapter;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
@@ -79,6 +74,8 @@
 import java.util.Locale;
 
 import ru.aragats.wgo.R;
+import ru.aragats.wgo.dto.Post;
+import ru.aragats.wgo.dto.Venue;
 
 //TODO-aragats
 public class LocationActivityAragats extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
@@ -259,7 +256,7 @@ public boolean onSearchCollapse() {
                     mapViewClip.setVisibility(View.VISIBLE);
                     searchListView.setVisibility(View.GONE);
                     emptyTextLayout.setVisibility(View.GONE);
-                    searchAdapter.searchDelayed(null, null);
+                    searchAdapter.searchDelayed(null, null, radius);
                     return true;
                 }
 
@@ -272,7 +269,7 @@ public void onTextChanged(EditText editText) {
                     if (text.length() != 0) {
                         searchWas = true;
                     }
-                    searchAdapter.searchDelayed(text, userLocation); //TODO It can be the case. getCenterLocation or leave it as a userLocation (custom moved location)
+                    searchAdapter.searchDelayed(text, userLocation, radius); //TODO It can be the case. getCenterLocation or leave it as a userLocation (custom moved location)
                 }
             });
             item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
@@ -901,7 +898,7 @@ private void positionMarker(Location location) {
             LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
             if (adapter != null) {
                 if (searchPlacesEnable) {
-                    adapter.searchGooglePlacesWithQuery(null, getCenterLocation(), Constants.RADIUS_CHECKIN, Constants.FOURSQUARE_CHECKIN);
+                    adapter.searchGooglePlacesWithQuery(null, getCenterLocation(), radius, Constants.FOURSQUARE_CHECKIN);
                 }
                 adapter.setGpsLocation(myLocation);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 60c1ab8a1..9c46d1744 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -16,7 +16,6 @@
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.location.Location;
 import android.media.ExifInterface;
 import android.net.Uri;
 import android.os.Build;
@@ -68,6 +67,7 @@
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 import org.telegram.utils.CollectionUtils;
 import org.telegram.utils.Constants;
+import org.telegram.utils.NotificationEnum;
 import org.telegram.utils.StringUtils;
 
 import java.io.File;
@@ -111,8 +111,10 @@
 
 
     //TODO - here are post for ???
+    // TODO make post insted of list of posts.
     protected ArrayList<Post> posts = new ArrayList<>();
     protected Venue venue;
+    //gps coordinates
     protected Coordinates userCoordinates;
 
 
@@ -175,7 +177,7 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewPosts);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.invalidPhoto);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.invalidPost);
 
         if (getArguments() != null) {
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -212,7 +214,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewPosts);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.invalidPhoto);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.invalidPost);
 
 
         if (!AndroidUtilities.isTablet() && getParentActivity() != null) {
@@ -221,6 +223,46 @@ public void onFragmentDestroy() {
         AndroidUtilities.unlockOrientation(getParentActivity());
     }
 
+
+    private Post buildPost() {
+        Post post = null;
+        if (!CollectionUtils.isEmpty(posts)) {
+            post = posts.get(0);
+            post.setVenue(venue);
+
+//                        //TODO invent better way. save prefix and suffix also ??  to build my custom utl instead of replacing from existing.
+//                        Image image = post.getVenue().getImage();
+//                        if(image != null && !StringUtils.isEmpty(image.getUrl())) {
+//                            image.setUrl(image.getUrl().replace("_64", "_bg_64"));
+//                            post.getVenue().setImage(image);
+//                        }
+            post.setCoordinates(userCoordinates); // TODO immer userCoordinates. So does not matter where post is attached ???
+            String text = postCreateActivityEnterView.getFieldTrimmedText();
+            post.setText(text);
+        }
+
+
+        return post;
+
+    }
+
+    // pass only valid post with venue and venue coordinates.
+    private void reBuildValidPost(Post post) {
+        if (post == null) {
+            return;
+        }
+        post.setCoordinates(venue.getCoordinates());
+        // if venue is not from Foursquare.
+        if (StringUtils.isEmpty(post.getVenue().getName())) {
+            List<Double> coordinates = post.getVenue().getCoordinates().getCoordinates();
+            String defaultAddress = String.format(Locale.US, "(%f,%f)", coordinates.get(1), coordinates.get(0));
+            String address = LocationManagerHelper.getInstance().getAddress(getParentActivity(),
+                    coordinates, defaultAddress);
+            post.getVenue().setAddress(address);
+        }
+
+    }
+
     @Override
     public View createView(final Context context, LayoutInflater inflater) {
 
@@ -242,56 +284,16 @@ public void onItemClick(final int id) {
                     }
                     finishFragment();
                 } else if (id == done_button) {
-                    Toast.makeText(getParentActivity(), "DONE BUTTON is CLICKED", Toast.LENGTH_SHORT).show();
-                    Post post = null;
-                    if (!CollectionUtils.isEmpty(posts) && posts.get(0) != null
-                            && venue != null && venue.getCoordinates() != null
-                            && userCoordinates != null) {
-                        post = posts.get(0);
-                        post.setVenue(venue);
-
-//                        //TODO invent better way. save prefix and suffix also ??  to build my custom utl instead of replacing from existing.
-//                        Image image = post.getVenue().getImage();
-//                        if(image != null && !StringUtils.isEmpty(image.getUrl())) {
-//                            image.setUrl(image.getUrl().replace("_64", "_bg_64"));
-//                            post.getVenue().setImage(image);
-//                        }
-                        post.setCoordinates(userCoordinates);
-                        String text = postCreateActivityEnterView.getFieldText();
-                        if (text != null) {
-                            text = text.trim();
-                        } else {
-                            text = "";
-                        }
-                        post.setText(text);
-                    }
-
-                    //TODO many check text, venue, coordinates and so on.
-                    if (post != null && post.getPostCoordinates() != null) {
-                        progressDialog.show();
-                        if (StringUtils.isEmpty(post.getVenue().getName())) {
-                            List<Double> coordinates = post.getVenue().getCoordinates().getCoordinates();
-                            String defaultAddress = String.format(Locale.US, "(%f,%f)", coordinates.get(1), coordinates.get(0)); // TODO the same value shoudld be int venue.getAddress();
-                            String address = LocationManagerHelper.getInstance().getAddress(getParentActivity(),
-                                    coordinates, defaultAddress);
-                            post.getVenue().setAddress(address);
-                        }
-//                        AndroidUtilities.runOnUIThread(new Runnable() {
-//                            @Override
-//                            public void run() {
+                    progressDialog.show();
+                    Post post = buildPost();
+                    boolean valid = validatePost(post);
+                    if (valid) {
+                        reBuildValidPost(post);
                         PostsController.getInstance().addPost(post);
-//                                progressDialog.dismiss();
-//                                if (postCreateActivityEnterView != null) {
-//                                    postCreateActivityEnterView.hideEmojiPopup();
-//                                }
-//                                finishFragment();
-
-//                            }
-//                        }, 2000);
-
+                    } else {
+                        progressDialog.hide();
                     }
 
-
                 } else if (id == attach_photo) {
                     attachPhotoHandle();
                 } else if (id == attach_gallery) {
@@ -742,14 +744,9 @@ private void updateTitle() {
         if (venueNameTextView == null) {
             return;
         }
-        String name;
+        String name = LocaleController.getString("CurrentLocation", R.string.CurrentLocation);
         if (venue != null && !StringUtils.isEmpty(venue.getName())) {
             name = venue.getName();
-        } else if (userCoordinates != null ||
-                (!CollectionUtils.isEmpty(posts) && posts.get(0) != null && posts.get(0).getCoordinates() != null)) { //TODO Current Location is better to rename to Location. ??? May be is better to delete Place(Ort)
-            name = LocaleController.getString("CurrentLocation", R.string.CurrentLocation);
-        } else {
-            name = LocaleController.getString("Place", R.string.Place);
         }
         venueNameTextView.setText(name);
 
@@ -776,14 +773,7 @@ private void updateSubtitle() {
                 List<Double> coordinates = venue.getCoordinates().getCoordinates();
                 addressString = String.format(Locale.US, "(%f,%f)", coordinates.get(1), coordinates.get(0));
             }
-        } else if (!CollectionUtils.isEmpty(posts) && posts.get(0) != null && posts.get(0).getCoordinates() != null) {
-            List<Double> coordinates = posts.get(0).getCoordinates().getCoordinates();
-            addressString = String.format(Locale.US, "(%f,%f)", coordinates.get(1), coordinates.get(0));
-        } else if (userCoordinates != null) {
-//            addressString = LocationManagerHelper.getInstance().getAddress(getParentActivity(),
-//                    userCoordinates.getCoordinates().get(0),
-//                    userCoordinates.getCoordinates().get(1),
-//                    userCoordinates.getCoordinates().get(0) + ", " + userCoordinates.getCoordinates().get(1));
+        } else if (userCoordinates != null && !CollectionUtils.isEmpty(userCoordinates.getCoordinates())) {
             addressString = String.format(Locale.US, "(%f,%f)",
                     userCoordinates.getCoordinates().get(1), userCoordinates.getCoordinates().get(0));
         }
@@ -915,8 +905,33 @@ public void didReceivedNotification(int id, final Object... args) {
 //            }
             progressDialog.dismiss();
             Toast.makeText(getParentActivity(), "Error in saving post", Toast.LENGTH_LONG).show();
-        } else if (id == NotificationCenter.invalidPhoto) {
-            Toast.makeText(getParentActivity(), "Invalid photo. It is too old. Please use recent photo from the last 7 days.", Toast.LENGTH_LONG).show();
+        } else if (id == NotificationCenter.invalidPost) {
+            progressDialog.dismiss();
+            NotificationEnum reason = NotificationEnum.INVALID_POST;
+            if (args != null && args.length > 0) {
+                reason = (NotificationEnum) args[0];
+            }
+            String message = "Invalid post. Some parameters are missing.";
+            switch (reason) {
+                case PHOTO_DATE_OLD:
+                    //date
+                    message = "You picked old photo. Please use recent photo from the last 7 days.";
+                    break;
+                case POST_TEXT_EMPTY:
+                    message = "Empty text. Please describe the situation.";
+                    break;
+                case POST_TEXT_LENGTH:
+                    message = "The text is too long. Please maximum 140 characters.";
+                    break;
+                case PHOTO_NOT_SET:
+                    message = "The photo is not chosen. Please choose appropriate photo.";
+                    break;
+                case VENUE_NOT_SET:
+                    message = "The venue or coordinates is not chosen. Please choose appropriate venue or coordinates.";
+                    break;
+
+            }
+            Toast.makeText(getParentActivity(), message, Toast.LENGTH_LONG).show();
 
         }
     }
@@ -1413,7 +1428,7 @@ public void didSelectLocation(TLRPC.MessageMedia location) {
                 Coordinates coordinates = new Coordinates();
                 coordinates.setCoordinates(Arrays.asList(location.geo._long, location.geo.lat));
                 coordinates.setType("Point");
-                PostCreateActivity.this.userCoordinates = coordinates;
+//                PostCreateActivity.this.userCoordinates = coordinates; // TODO I do not need to change userCoordinates.
                 Venue venue = new Venue();
                 if (location.geoPlace != null) {
                     Coordinates placeCoordinates = new Coordinates();
@@ -1494,7 +1509,7 @@ private void didSelectPhotos(ArrayList<String> photos) {
             //
 //            bitmap = Bitmap.createScaledBitmap(bitmap, 100, 100, true);
 
-
+// Create post
             Post post = new Post();
 //            post.setId(PostServiceMock.generateString("1234567890", 5));
             Image image = new Image();
@@ -1516,7 +1531,7 @@ private void didSelectPhotos(ArrayList<String> photos) {
 
             updatePost(post);
             PostCreateActivity.this.posts.clear();
-            if (validPost(post)) {
+            if (validateDate(post.getCreatedDate())) {
                 PostCreateActivity.this.posts.add(post);
                 if (post.getCoordinates() != null) {
                     venue = new Venue();
@@ -1524,16 +1539,59 @@ private void didSelectPhotos(ArrayList<String> photos) {
                     updateVenue();
                 }
             } else {
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPhoto);
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPost, NotificationEnum.PHOTO_DATE_OLD);
             }
             postCreateAdapter.notifyDataSetChanged();
         }
     }
 
-    private boolean validPost(Post post) {
-        return (new Date().getTime() - post.getCreatedDate()) < Constants.MAX_DATE_SHIFT;
+    private boolean validatePost(Post post) {
+        if (post == null) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPost, NotificationEnum.INVALID_POST);
+            return false;
+        }
+        if (StringUtils.isEmpty(post.getText())) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPost, NotificationEnum.POST_TEXT_EMPTY);
+            return false;
+        }
+        if (!validateText(post.getText())) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPost, NotificationEnum.POST_TEXT_LENGTH);
+            return false;
+        }
+        if (!validateDate(post.getCreatedDate())) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPost, NotificationEnum.PHOTO_DATE_OLD);
+            return false;
+        }
+        if (!validateImage(post.getImage())) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPost, NotificationEnum.PHOTO_NOT_SET);
+            return false;
+        }
+        if (!validateVenue(post.getVenue())) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPost, NotificationEnum.VENUE_NOT_SET);
+            return false;
+        }
+        return true;
+    }
+
+    private boolean validateDate(long date) {
+        return date != 0 && (new Date().getTime() - date) < Constants.MAX_DATE_SHIFT;
     }
 
+    private boolean validateText(String text) {
+        return !StringUtils.isEmpty(text) && (text.trim().length() <= Constants.MAX_TEXT_LENGTH);
+    }
+
+    private boolean validateImage(Image image) {
+        return image != null && !StringUtils.isEmpty(image.getUrl());
+    }
+
+    private boolean validateVenue(Venue venue) {
+        return venue != null && venue.getCoordinates() != null
+                && !CollectionUtils.isEmpty(venue.getCoordinates().getCoordinates())
+                && venue.getCoordinates().getCoordinates().size() == 2;
+    }
+
+
     private void updatePost(Post post) {
         ExifInterface exif;
         try {
@@ -1543,9 +1601,6 @@ private void updatePost(Post post) {
             e.printStackTrace();
             return;
         }
-        if (exif == null) {
-            return;
-        }
 //        new Date(new File(post.getImage().getUrl()).lastModified())
         String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME); // could be null
         if (!StringUtils.isEmpty(datetime)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index 61b631f31..d19db9bdd 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -22,9 +22,10 @@
 
     public static int POST_COUNT = 20;
 
+    public static final int MAX_TEXT_LENGTH = 140;
     public static final int RADIUS = 800; // meters 8000 for VK
-    public static final int RADIUS_BROWSER = 100_000;
-    public static final int RADIUS_CHECKIN = 800;
+    //    public static final int RADIUS_BROWSER = 100_000;
+//    public static final int RADIUS_CHECKIN = 800;
     public static final String FOURSQUARE_BROWSER = "browse";
     public static final String FOURSQUARE_CHECKIN = "checkin";
     public static final double MAX_DISTANCE_DEGREE = 0.01;
@@ -72,7 +73,7 @@
 
     public static String POINT = "Point";
 
-    public static long MAX_DATE_SHIFT = 7*24*60*60*1000;
+    public static long MAX_DATE_SHIFT = 7 * 24 * 60 * 60 * 1000;
 
     public static final int MAX_RESULTS = 10;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/NotificationEnum.java b/TMessagesProj/src/main/java/org/telegram/utils/NotificationEnum.java
new file mode 100644
index 000000000..647a84517
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/utils/NotificationEnum.java
@@ -0,0 +1,13 @@
+package org.telegram.utils;
+
+/**
+ * Created by aragats on 14/05/16.
+ */
+public enum NotificationEnum {
+    INVALID_POST,
+    PHOTO_DATE_OLD,
+    POST_TEXT_EMPTY,
+    POST_TEXT_LENGTH,
+    PHOTO_NOT_SET,
+    VENUE_NOT_SET
+}
