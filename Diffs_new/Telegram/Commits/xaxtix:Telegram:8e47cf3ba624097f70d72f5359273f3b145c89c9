diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ColorUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/ColorUtilities.java
new file mode 100644
index 000000000..1dc118b25
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ColorUtilities.java
@@ -0,0 +1,69 @@
+package org.telegram.messenger;
+
+import android.graphics.Color;
+
+import androidx.core.graphics.ColorUtils;
+
+public class ColorUtilities {
+
+    public final static float[] hslTmp = new float[3];
+    public final static float[] hslTmp2 = new float[3];
+    public final static float[] yuvTmp = new float[3];
+    public final static float[] hsvTmp = new float[3];
+    public final static float[] hsvTmp2 = new float[3];
+
+    /**
+     * RGB -> YUV.
+     * Y in the range [0..1].
+     * U in the range [-0.5..0.5].
+     * V in the range [-0.5..0.5].
+     */
+    public static void colorToYuv(int color, float[] yuv) {
+        float r = Color.red(color) / 255f;
+        float g = Color.green(color) / 255f;
+        float b = Color.blue(color) / 255f;
+
+        float y, u, v;
+        y = (float) (0.299 * r + 0.587 * g + 0.114 * b);
+        u = (float) (-0.14713 * r - 0.28886 * g + 0.436 * b);
+        v = (float) (0.615 * r - 0.51499 * g - 0.10001 * b);
+
+        yuv[0] = y;
+        yuv[1] = u;
+        yuv[2] = v;
+    }
+
+    /**
+     * YUV -> RGB.
+     * Y in the range [0..1].
+     * U in the range [-0.5..0.5].
+     * V in the range [-0.5..0.5].
+     */
+    public static int YuvToColor(float[] yuv) {
+        int r, g, b;
+
+        float y = yuv[0];
+        float u = yuv[1];
+        float v = yuv[2];
+
+        r = (int) ((y + 0.000 * u + 1.140 * v) * 255);
+        g = (int) ((y - 0.396 * u - 0.581 * v) * 255);
+        b = (int) ((y + 2.029 * u + 0.000 * v) * 255);
+
+        r = Math.min(Math.max(r, 0), 255);
+        g = Math.min(Math.max(g, 0), 255);
+        b = Math.min(Math.max(b, 0), 255);
+
+        return Color.rgb(r, g, b);
+    }
+
+    public static int replaceHue(int to, int from) {
+        ColorUtils.colorToHSL(to, hslTmp);
+        ColorUtils.colorToHSL(from, hslTmp2);
+        hslTmp[0] = hslTmp2[0];
+        if (Color.red(from) == Color.blue(from) && Color.blue(from) == Color.green(from)) {
+            hslTmp[1] = 0;
+        }
+        return ColorUtils.HSLToColor(hslTmp);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
index afbb8b5bb..b699dea30 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
@@ -113,6 +113,7 @@
     protected int currentSheetAnimationType;
 
     protected View nestedScrollChild;
+    private int softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
 
     protected class ContainerView extends FrameLayout implements NestedScrollingParent {
 
@@ -665,7 +666,7 @@ public void setTranslationY(float translationY) {
         params.dimAmount = 0;
         params.flags &= ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;
         if (focusable) {
-            params.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
+            params.softInputMode = softInputMode;
         } else {
             params.flags |= WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
         }
@@ -718,7 +719,7 @@ public void setBackgroundColor(int color) {
     public void show() {
         super.show();
         if (focusable) {
-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+            getWindow().setSoftInputMode(softInputMode);
         }
         dismissed = false;
         cancelSheetAnimation();
@@ -1123,6 +1124,11 @@ public BottomSheet setUseFullscreen(boolean value) {
             bottomSheet.isFullscreen = value;
             return bottomSheet;
         }
+
+        public Builder setSoftInputAdjustMode(int mode){
+            bottomSheet.softInputMode = mode;
+            return this;
+        }
     }
 
     protected int getLeftInset() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index 99387aaf2..af4cbc88d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -44,6 +44,8 @@
 import android.text.TextUtils;
 import android.util.StateSet;
 
+import androidx.core.graphics.ColorUtils;
+
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.telegram.messenger.AndroidUtilities;
@@ -56,6 +58,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.ColorUtilities;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.time.SunDate;
 import org.telegram.ui.Components.CombinedDrawable;
@@ -75,7 +78,6 @@
 import java.util.HashMap;
 
 public class Theme {
-
     public static class ThemeInfo {
         public String name;
         public String pathToFile;
@@ -86,6 +88,10 @@
         public int previewOutColor;
         public int sortIndex;
 
+        public boolean hasAccentColor;
+        public int accentColor;
+        public int defaultAccentColor;
+
         public JSONObject getSaveJson() {
             try {
                 JSONObject jsonObject = new JSONObject();
@@ -105,18 +111,18 @@ public String getName() {
                 return LocaleController.getString("ThemeBlue", R.string.ThemeBlue);
             } else if ("Dark".equals(name)) {
                 return LocaleController.getString("ThemeDark", R.string.ThemeDark);
-            } else if ("Dark Blue".equals(name)) {
-                return LocaleController.getString("ThemeDarkBlue", R.string.ThemeDarkBlue);
+            } else if ("Dark Tint".equals(name)) {
+                return LocaleController.getString("ThemeDarkTint", R.string.ThemeDarkTint);
             } else if ("Graphite".equals(name)) {
                 return LocaleController.getString("ThemeGraphite", R.string.ThemeGraphite);
-            } else if ("Arctic Blue".equals(name)) {
+            } else if ("Arctic".equals(name)) {
                 return LocaleController.getString("ThemeArcticBlue", R.string.ThemeArcticBlue);
             }
             return name;
         }
 
         public boolean isDark() {
-            return "Dark".equals(name) || "Dark Blue".equals(name) || "Graphite".equals(name);
+            return "Dark".equals(name) || "Dark Tint".equals(name) || "Graphite".equals(name);
         }
 
         public boolean isLight() {
@@ -153,6 +159,7 @@ public static ThemeInfo createWithString(String string) {
         }
     }
 
+
     private static final Object sync = new Object();
     private static final Object wallpaperSync = new Object();
 
@@ -1076,6 +1083,406 @@ public void run() {
     private static HashMap<String, Integer> currentColors;
     private static HashMap<String, Integer> animatingColors;
 
+    private static final String[] accentColorKeys = new String[]{
+            key_chat_unreadMessagesStartText,
+            key_radioBackgroundChecked,
+            key_dialogTextBlue,
+            key_dialogRoundCheckBox,
+            key_actionBarTabLine,
+            key_windowBackgroundWhiteBlueIcon,
+            key_chat_inSentClockSelected,
+            key_chat_goDownButtonCounterBackground,
+            key_dialogCheckboxSquareBackground,
+            key_dialogTextGray,
+            key_dialogRadioBackgroundChecked,
+            key_picker_badge,
+            key_profile_actionPressedBackground,
+            key_chat_topPanelTitle,
+            key_chat_inPreviewInstantSelectedText,
+            key_chat_outContactIcon,
+            key_chat_inPreviewLine,
+            key_location_sendLocationBackground,
+            key_profile_creatorIcon,
+            key_profile_actionBackground,
+            key_chats_sentCheck,
+            key_chat_inAudioSeekbarFill,
+            key_chats_nameMessage,
+            key_progressCircle,
+            key_chat_inContactBackground,
+            key_chat_outBubbleShadow,
+            key_chat_outFileProgressSelected,
+            key_chats_menuCloudBackgroundCats,
+            key_chats_verifiedBackground,
+            key_windowBackgroundWhiteBlueButton,
+            key_chat_inViaBotNameText,
+            key_picker_enabledButton,
+            key_chats_menuTopShadowCats,
+            key_musicPicker_buttonBackground,
+            key_avatar_nameInMessageBlue,
+            key_chats_menuTopShadow,
+            key_chats_unreadCounter,
+            key_inappPlayerPlayPause,
+            key_chat_replyPanelIcons,
+            key_featuredStickers_addedIcon,
+            key_musicPicker_checkbox,
+            key_chat_emojiPanelNewTrending,
+            key_dialogBadgeBackground,
+            key_chat_outBubbleSelected,
+            key_avatar_backgroundInProfileBlue,
+            key_dialogTextLink,
+            key_chat_inInstantSelected,
+            key_chat_status,
+            key_windowBackgroundWhiteBlueHeader,
+            key_chat_messagePanelVoiceBackground,
+            key_switchTrackBlueChecked,
+            key_fastScrollActive,
+            key_profile_status,
+            key_chat_selectedBackground,
+            key_chat_recordedVoiceBackground,
+            key_chat_topPanelLine,
+            key_chats_actionMessage,
+            key_chat_addContact,
+            key_switchTrackChecked,
+            key_chat_inLoader,
+            key_dialogButton,
+            key_chat_inlineResultIcon,
+            key_dialogLineProgress,
+            key_chat_outBubble,
+            key_chat_inLoaderSelected,
+            key_chat_inBubbleShadow,
+            key_chat_outAudioProgress,
+            key_dialogProgressCircle,
+            key_player_progress,
+            key_chat_inReplyLine,
+            key_chat_textSelectBackground,
+            key_chat_inReplyNameText,
+            key_player_buttonActive,
+            key_chat_outAudioSelectedProgress,
+            key_chat_inInstant,
+            key_groupcreate_cursor,
+            key_windowBackgroundWhiteBlueText7,
+            key_avatar_backgroundSaved,
+            key_returnToCallBackground,
+            key_windowBackgroundWhiteBlueText3,
+            key_chat_fieldOverlayText,
+            key_windowBackgroundWhiteBlueText5,
+            key_windowBackgroundWhiteBlueText4,
+            key_chat_messagePanelSend,
+            key_avatar_backgroundBlue,
+            key_windowBackgroundWhiteLinkSelection,
+            key_chat_outMediaIcon,
+            key_chats_sentClock,
+            key_chat_botSwitchToInlineText,
+            key_dialogFloatingButton,
+            key_chats_archiveBackground,
+            key_chat_inPreviewInstantText,
+            key_dialogTextBlue2,
+            key_dialogTextBlue3,
+            key_dialogTextBlue4,
+            key_actionBarTabActiveText,
+            key_chat_emojiPanelBadgeBackground,
+            key_chat_inForwardedNameText,
+            key_chats_actionBackground,
+            key_chat_inVoiceSeekbarFill,
+            key_chat_inSiteNameText,
+            key_chat_linkSelectBackground,
+            key_windowBackgroundWhiteBlueText,
+            key_chat_outFileProgress,
+            key_chats_actionPressedBackground,
+            key_switch2TrackChecked,
+            key_contextProgressOuter1,
+            key_chat_replyPanelName,
+            key_contextProgressOuter2,
+            key_chat_outMediaIconSelected,
+            key_windowBackgroundWhiteValueText,
+            key_windowBackgroundWhiteLinkText,
+            key_chat_messageLinkIn,
+            key_chats_attachMessage,
+            key_chat_attachCheckBoxCheck,
+            key_chat_attachCheckBoxBackground,
+            key_chat_attachActiveTab,
+            key_chat_attachUnactiveTab,
+            key_chat_attachPermissionImage,
+            key_chat_attachPermissionMark,
+            key_chat_attachPermissionText,
+            key_chat_attachEmptyImage,
+    };
+
+    private static final String[] accentTintColorKeys = new String[]{
+            key_chat_inVoiceSeekbarSelected,
+            key_chat_messageLinkOut,
+            key_chat_outViews,
+            key_chat_outFileInfoSelectedText,
+            key_chat_outAudioDurationSelectedText,
+            key_chat_inAudioCacheSeekbar,
+            key_chat_inFileInfoText,
+            key_chat_inAudioSelectedProgress,
+            key_chat_outVenueInfoSelectedText,
+            key_player_time,
+            key_chat_outTimeSelectedText,
+            key_chat_inTimeSelectedText,
+            key_chat_outFileBackgroundSelected,
+            key_chat_outVoiceSeekbarSelected,
+            key_chat_outVoiceSeekbar,
+            key_chat_outFileIcon,
+            key_windowBackgroundWhiteGrayText,
+            key_chat_inContactPhoneSelectedText,
+            key_actionBarDefaultSelector,
+            key_chat_serviceBackgroundSelected,
+            key_chat_inVenueInfoText,
+            key_chat_outSentClockSelected,
+            key_chat_inReplyMediaMessageSelectedText,
+            key_chat_outFileBackground,
+            key_chat_outFileInfoText,
+            key_chat_outContactPhoneSelectedText,
+            key_chat_inFileInfoSelectedText,
+            key_chat_wallpaper,
+            key_chat_outMenuSelected,
+            key_chat_outLoaderPhotoSelected,
+            key_actionBarDefaultIcon,
+            key_chat_outSentCheck,
+            key_graySectionText,
+            key_avatar_actionBarSelectorBlue,
+            key_chat_outFileSelectedIcon,
+            key_chat_adminSelectedText,
+            key_actionBarDefaultSubtitle,
+            key_contextProgressInner2,
+            key_chat_inContactPhoneText,
+            key_avatar_actionBarIconBlue,
+            key_chat_outTimeText,
+            key_chat_inMenuSelected,
+            key_actionBarDefaultArchivedTitle,
+            key_chats_menuTopBackgroundCats,
+            key_chat_outReplyMediaMessageText,
+            key_dialogLineProgressBackground,
+            key_actionBarTabSelector,
+            key_chat_outLocationBackground,
+            key_chat_inViewsSelected,
+            key_chat_inSentClock,
+            key_chat_outLoaderPhoto,
+            key_chat_outAudioCacheSeekbar,
+            key_chat_outSentCheckSelected,
+            key_chat_inVenueInfoSelectedText,
+            key_chats_archivePinBackground,
+            key_chat_inAudioDurationSelectedText,
+            key_chat_outAudioSeekbarSelected,
+            key_chat_outLoaderPhotoIconSelected,
+            key_chat_outAudioSeekbar,
+            key_chat_inVoiceSeekbar,
+            key_chat_outAudioDurationText,
+            key_chat_outMenu,
+            key_chat_outVenueInfoText,
+            key_chat_outReplyMediaMessageSelectedText,
+            key_chat_outContactPhoneText,
+            key_chat_inAudioTitleText,
+            key_actionBarDefaultArchivedIcon,
+            key_chat_serviceBackground,
+            key_chat_inBubbleSelected,
+            key_chat_outSentClock
+    };
+
+    private static String[] darkThemeSecondaryColorKeys = new String[]{
+            key_chat_inFileBackgroundSelected,
+            key_chat_outViews,
+            key_chat_inAudioSelectedProgress,
+            key_chat_outAudioSeekbarFill,
+            key_chat_outVoiceSeekbar,
+            key_chat_outFileIcon,
+            key_passport_authorizeBackgroundSelected,
+            key_windowBackgroundWhiteInputFieldActivated,
+            key_chat_outFileSelectedIcon,
+            key_chats_onlineCircle,
+            key_passport_authorizeBackground,
+            key_chat_outLoaderPhoto,
+            key_avatar_backgroundGroupCreateSpanBlue,
+            key_dialogLinkSelection,
+            key_avatar_nameInMessageCyan,
+            key_chat_searchPanelIcons,
+            key_chat_inAudioSeekbarSelected,
+            key_chat_outVenueInfoText,
+            key_chat_outContactPhoneText,
+            key_actionBarActionModeDefaultSelector,
+            key_chat_inVoiceSeekbarSelected,
+            key_chat_emojiPanelIconSelected,
+            key_checkboxSquareBackground,
+            key_chat_outFileBackgroundSelected,
+            key_chat_outVoiceSeekbarSelected,
+            key_sharedMedia_startStopLoadIcon,
+            key_chat_outFileBackground,
+            key_chat_outFileInfoText,
+            key_chat_outMenuSelected,
+            key_chat_outLoaderPhotoSelected,
+            key_dialogInputFieldActivated,
+            key_chat_outTimeText,
+            key_chat_outReplyMediaMessageText,
+            key_chat_outLoaderPhotoIcon,
+            key_chat_outContactBackground,
+            key_chat_outLocationBackground,
+            key_windowBackgroundWhiteBlueText2,
+            key_chat_inViewsSelected,
+            key_chat_outAudioCacheSeekbar,
+            key_chat_outLoaderSelected,
+            key_chat_outAudioSeekbarSelected,
+            key_chat_inLoaderPhotoSelected,
+            key_chat_outAudioSeekbar,
+            key_profile_verifiedBackground,
+            key_chat_outLoader,
+            key_chat_outAudioDurationText,
+            key_chat_outMenu,
+            key_chat_inFileSelectedIcon,
+            key_chat_outSentClock,
+            key_chat_searchPanelText
+    };
+
+    private static String[] darkThemeAdditionalAccentColorKeys = new String[]{
+            key_chats_menuPhone,
+            key_chat_outViaBotNameText,
+            key_chat_inFileProgressSelected,
+            key_chat_outPreviewLine,
+            key_dialogScrollGlow,
+            key_chat_emojiPanelStickerPackSelector,
+            key_contextProgressInner1,
+            key_chat_inLoaderPhotoIconSelected,
+            key_chat_outPreviewInstantText,
+            key_chat_outLocationIcon,
+            key_chat_outViewsSelected,
+            key_chat_outInstant,
+            key_chat_outForwardedNameText,
+            key_chat_emojiPanelTrendingTitle,
+            key_chat_outSiteNameText,
+            key_chat_outVoiceSeekbarFill,
+            key_chat_outReplyLine,
+            key_switchTrackBlueSelectorChecked,
+            key_switchTrackBlueSelector,
+            key_chat_outPreviewInstantSelectedText,
+            key_chat_outReplyNameText,
+    };
+
+    private static String[] darkBackgroundTintColorKeys = new String[]{
+            key_windowBackgroundChecked,
+            key_actionBarActionModeDefault,
+            key_actionBarActionModeDefaultTop,
+            key_chat_secretChatStatusText,
+            key_switchTrack,
+            key_actionBarDefaultSubmenuBackground,
+            key_switchTrackBlueThumb,
+            key_emptyListPlaceholder,
+            key_actionBarDefaultArchived,
+            key_chat_messagePanelCancelInlineBot,
+            key_dialogSearchBackground,
+            key_chat_botKeyboardButtonBackgroundPressed,
+            key_changephoneinfo_image,
+            key_chat_inContactNameText,
+            key_chats_menuPhoneCats,
+            key_chat_messagePanelHint,
+            key_windowBackgroundGray,
+            key_dialogGrayLine,
+            key_chats_nameMessage_threeLines,
+            key_dialogIcon,
+            key_chat_emojiPanelEmptyText,
+            key_chat_emojiPanelBackspace,
+            key_chat_replyPanelClose,
+            key_chat_emojiPanelBackground,
+            key_groupcreate_hintText,
+            key_dialogCheckboxSquareUnchecked,
+            key_chat_inBubble,
+            key_chat_unreadMessagesStartArrowIcon,
+            key_avatar_backgroundActionBarBlue,
+            key_files_folderIconBackground,
+            key_dialogInputField,
+            key_chat_outInstantSelected,
+            key_player_placeholder,
+            key_picker_disabledButton,
+            key_groupcreate_spanBackground,
+            key_location_liveLocationProgress,
+            key_stickers_menu,
+            key_dialogBackground,
+            key_checkboxSquareUnchecked,
+            key_dialogCheckboxSquareDisabled,
+            key_player_actionBar,
+            key_chats_nameIcon,
+            key_chats_nameMessageArchived,
+            key_chats_pinnedIcon,
+            key_chat_replyPanelLine,
+            key_dialogSearchHint,
+            key_switchTrackBlueThumbChecked,
+            key_chat_emojiPanelIcon,
+            key_chat_topPanelMessage,
+            key_chat_emojiPanelTrendingDescription,
+            key_windowBackgroundWhiteInputField,
+            key_chat_inLocationBackground,
+            key_radioBackground,
+            key_chat_inFileIcon,
+            key_dialogTextGray3,
+            key_dialogTextGray2,
+            key_dialogTextGray4,
+            key_chats_menuBackground,
+            key_chat_inFileBackground,
+            key_chat_stickersHintPanel,
+            key_windowBackgroundWhite,
+            key_avatar_backgroundArchived,
+            key_undo_background,
+            key_dialogTextHint,
+            key_avatar_subtitleInProfileBlue,
+            key_chats_unreadCounterMuted,
+            key_chat_messagePanelIcons,
+            key_chat_inReplyMediaMessageText,
+            key_inappPlayerTitle,
+            key_chat_botKeyboardButtonBackground,
+            key_chats_menuItemIcon,
+            key_files_folderIcon,
+            key_switchTrackBlue,
+            key_chat_topPanelClose,
+            key_windowBackgroundWhiteGrayIcon,
+            key_inappPlayerBackground,
+            key_actionBarDefault,
+            key_location_placeLocationBackground,
+            key_windowBackgroundUnchecked,
+            key_checkboxSquareDisabled,
+            key_fastScrollInactive,
+            key_chat_goDownButtonCounter,
+            key_chats_name,
+            key_chat_unreadMessagesStartBackground,
+            key_chat_inLoaderPhoto,
+            key_chat_muteIcon,
+            key_chat_inAudioDurationText,
+            key_chat_secretTimeText,
+            key_groupcreate_sectionText,
+            key_player_placeholderBackground,
+            key_windowBackgroundWhiteHintText,
+            key_player_actionBarSelector,
+            key_chats_message,
+            key_chats_date,
+            key_sharedMedia_linkPlaceholder,
+            key_chat_replyPanelMessage,
+            key_player_background,
+            key_inappPlayerClose,
+            key_chats_message_threeLines,
+            key_player_actionBarSubtitle,
+            key_chat_inAudioSeekbar,
+            key_dialogSearchIcon,
+            key_dialog_liveLocationProgress,
+            key_chat_inViews,
+            key_player_progressBackground,
+            key_windowBackgroundWhiteGrayText2,
+            key_player_actionBarTop,
+            key_windowBackgroundWhiteGrayText8,
+            key_windowBackgroundWhiteGrayText5,
+            key_windowBackgroundWhiteGrayText6,
+            key_windowBackgroundWhiteGrayText3,
+            key_windowBackgroundWhiteGrayText4,
+            key_chat_inTimeText,
+            key_dialogRadioBackground,
+            key_chat_messagePanelBackground,
+            key_graySection,
+            key_chats_muteIcon,
+            key_chat_goDownButton,
+            key_chat_inMenu,
+            key_chat_recordVoiceCancel,
+            key_chat_topPanelBackground,
+            key_dialogBackgroundGray
+    };
+
     static {
         defaultColors.put(key_dialogBackground, 0xffffffff);
         defaultColors.put(key_dialogBackgroundGray, 0xfff0f0f0);
@@ -1799,6 +2206,8 @@ public void run() {
         themesDict = new HashMap<>();
         currentColors = new HashMap<>();
 
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+
         ThemeInfo themeInfo = new ThemeInfo();
         themeInfo.name = "Default";
         themeInfo.previewBackgroundColor = 0xffcfd9e3;
@@ -1814,7 +2223,10 @@ public void run() {
         themeInfo.previewBackgroundColor = 0xff5a5d61;
         themeInfo.previewInColor = 0xff747a84;
         themeInfo.previewOutColor = 0xff82a8e3;
+        themeInfo.defaultAccentColor = 0xff3e6588;
         themeInfo.sortIndex = 3;
+        themeInfo.hasAccentColor = true;
+        themeInfo.accentColor = preferences.getInt("theme_accent_color_" + themeInfo.name, themeInfo.defaultAccentColor);
         themes.add(themeInfo);
         themesDict.put("Dark", themeInfo);
 
@@ -1829,14 +2241,17 @@ public void run() {
         themesDict.put("Blue", themeInfo);
 
         themeInfo = new ThemeInfo();
-        themeInfo.name = "Dark Blue";
+        themeInfo.name = "Dark Tint";
         themeInfo.assetName = "darkblue.attheme";
         themeInfo.previewBackgroundColor = 0xff5f6e82;
         themeInfo.previewInColor = 0xff76869c;
         themeInfo.previewOutColor = 0xff82a8e3;
         themeInfo.sortIndex = 2;
+        themeInfo.defaultAccentColor = 0xff3e618a;
+        themeInfo.hasAccentColor = true;
+        themeInfo.accentColor = preferences.getInt("theme_accent_color_" + themeInfo.name, themeInfo.defaultAccentColor);
         themes.add(themeInfo);
-        themesDict.put("Dark Blue", currentNightTheme = themeInfo);
+        themesDict.put("Dark Tint", currentNightTheme = themeInfo);
 
         if (BuildVars.DEBUG_VERSION) {
             themeInfo = new ThemeInfo();
@@ -1851,16 +2266,19 @@ public void run() {
         }
 
         themeInfo = new ThemeInfo();
-        themeInfo.name = "Arctic Blue";
+        themeInfo.name = "Arctic";
         themeInfo.assetName = "arctic.attheme";
         themeInfo.previewBackgroundColor = 0xffffffff;
         themeInfo.previewInColor = 0xffebeef4;
         themeInfo.previewOutColor = 0xff7cb2fe;
+        themeInfo.defaultAccentColor = 0xff3490eb;
+        themeInfo.accentColor = preferences.getInt("theme_accent_color_" + themeInfo.name, themeInfo.defaultAccentColor);
         themeInfo.sortIndex = 5;
+        themeInfo.hasAccentColor = true;
         themes.add(themeInfo);
-        themesDict.put("Arctic Blue", themeInfo);
+        themesDict.put("Arctic", themeInfo);
 
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", Activity.MODE_PRIVATE);
+        preferences = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", Activity.MODE_PRIVATE);
         String themesString = preferences.getString("themes2", null);
         if (!TextUtils.isEmpty(themesString)) {
             try {
@@ -2410,7 +2828,7 @@ private static void sortThemes() {
 
     public static ThemeInfo applyThemeFile(File file, String themeName, boolean temporary) {
         try {
-            if (themeName.equals("Default") || themeName.equals("Dark") || themeName.equals("Blue") || themeName.equals("Dark Blue") || themeName.equals("Graphite") || themeName.equals("Arctic Blue")) {
+            if (themeName.equals("Default") || themeName.equals("Dark") || themeName.equals("Blue") || themeName.equals("Dark Tint") || themeName.equals("Graphite") || themeName.equals("Arctic")) {
                 return null;
             }
             File finalFile = new File(ApplicationLoader.getFilesDirFixed(), themeName);
@@ -2472,6 +2890,9 @@ public static void applyTheme(ThemeInfo themeInfo, boolean save, boolean removeW
                     if (removeWallpaperOverride) {
                         editor.remove("overrideThemeWallpaper");
                     }
+                    if (themeInfo.hasAccentColor && themeInfo.accentColor != themeInfo.defaultAccentColor) {
+                        editor.putInt("theme_accent_color_" + themeInfo.name, themeInfo.accentColor);
+                    }
                     editor.commit();
                 }
                 if (themeInfo.assetName != null) {
@@ -2479,6 +2900,9 @@ public static void applyTheme(ThemeInfo themeInfo, boolean save, boolean removeW
                 } else {
                     currentColors = getThemeFileValues(new File(themeInfo.pathToFile), null);
                 }
+                if (themeInfo.hasAccentColor && themeInfo.accentColor != themeInfo.defaultAccentColor) {
+                    overrideColorsToAccent(themeInfo, currentColors, themeInfo.defaultAccentColor, themeInfo.accentColor);
+                }
             } else {
                 if (!nightTheme && save) {
                     SharedPreferences preferences = MessagesController.getGlobalMainSettings();
@@ -2834,7 +3258,7 @@ public static File getAssetFile(String assetName) {
         return file;
     }
 
-    private static HashMap<String, Integer> getThemeFileValues(File file, String assetName) {
+    public static HashMap<String, Integer> getThemeFileValues(File file, String assetName) {
         FileInputStream stream = null;
         HashMap<String, Integer> stringMap = new HashMap<>();
         try {
@@ -4132,4 +4556,141 @@ public static boolean isWallpaperMotion() {
     public static boolean isPatternWallpaper() {
         return isPatternWallpaper;
     }
+
+    public static void applyAccentColor(int color, HashMap<String, Integer> themeColors) {
+        if (!currentTheme.hasAccentColor) return;
+        currentTheme.accentColor = color;
+
+        currentColors.clear();
+        currentColors.putAll(themeColors);
+
+        overrideColorsToAccent(currentTheme, currentColors, currentTheme.defaultAccentColor, color);
+
+        reloadWallpaper();
+        applyCommonTheme();
+        applyDialogsTheme();
+        applyProfileTheme();
+        applyChatTheme(false);
+    }
+
+    public static void saveAccentColor(int color) {
+        if(!currentTheme.hasAccentColor) return;
+        currentTheme.accentColor = color;
+            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, currentTheme, false);
+    }
+
+    private static class AccentColorParams {
+        float[] hslAccent;
+        int accentColor;
+        float accentBrightness;
+        int defaultAccentColor;
+        boolean isDarkTheme;
+    }
+
+    private static void overrideColorsToAccent(ThemeInfo themeInfo, HashMap<String, Integer> currentColors, int defaultAccentColor, int accentColor) {
+        AccentColorParams params = new AccentColorParams();
+        params.isDarkTheme = themeInfo.isDark();
+        params.defaultAccentColor = defaultAccentColor;
+        params.accentColor = accentColor;
+        params.hslAccent = new float[3];
+        ColorUtils.colorToHSL(accentColor, params.hslAccent);
+        params.accentBrightness = (float) Math.sqrt(
+                Color.red(accentColor) * Color.red(accentColor) * 0.241f +
+                        Color.green(accentColor) * Color.green(accentColor) * 0.691f +  Color.blue(accentColor) * Color.blue(accentColor) * 0.068f);
+        int primaryTextColor = Color.WHITE;
+        int secondaryTextColor = ColorUtils.blendARGB(accentColor, primaryTextColor, 0.4f + 0.6f * params.accentBrightness / 255f);
+        for(int i = 0; i < accentColorKeys.length; i++){
+            String key = accentColorKeys[i];
+            if(!currentColors.containsKey(key)) continue;
+            currentColors.put(key, transformColorToAccent(params,currentColors.get(key)));
+        }
+        for(int i = 0; i < accentTintColorKeys.length; i++){
+            String key = accentTintColorKeys[i];
+            if(!currentColors.containsKey(key)) continue;
+            currentColors.put(key, transformColorToAccent(params,currentColors.get(key)));
+        }
+        if(themeInfo.isDark()) {
+            int secondaryColor = ColorUtils.blendARGB(accentColor, params.accentBrightness > 200f ? Color.BLACK : Color.WHITE, 0.2f + 0.4f * params.accentBrightness / 255f);
+            for(int i = 0; i < darkThemeSecondaryColorKeys.length; i++){
+                String key = darkThemeSecondaryColorKeys[i];
+                if(!currentColors.containsKey(key)) continue;
+                int color = currentColors.get(key);
+                currentColors.put(key, ColorUtils.setAlphaComponent(secondaryColor, color >>> 24));
+            }
+            for(int i = 0; i < darkThemeAdditionalAccentColorKeys.length; i++){
+                String key = darkThemeAdditionalAccentColorKeys[i];
+                if(!currentColors.containsKey(key)) continue;
+                currentColors.put(key, transformColorToAccent(params,currentColors.get(key)));
+            }
+            if (params.accentBrightness / 255 > 0.75f) {
+                int darkColor = ColorUtils.blendARGB(accentColor, Color.BLACK, 0.2f + 0.4f * params.accentBrightness / 255f);
+                currentColors.put(key_profile_actionIcon, darkColor);
+                currentColors.put(key_chat_inMediaIcon, darkColor);
+                currentColors.put(key_chat_unreadMessagesStartText,darkColor);
+            }
+        }
+        if (themeInfo.name.equals("Dark Tint")) {
+            for (int i = 0; i < darkBackgroundTintColorKeys.length; i++) {
+                String key = darkBackgroundTintColorKeys[i];
+                if (!currentColors.containsKey(key)) continue;
+                currentColors.put(key, transformColorToAccent(params, currentColors.get(key)));
+            }
+        }
+
+        currentColors.put(key_chat_messageTextOut, primaryTextColor);
+        currentColors.put(key_chat_outSentCheckSelected, secondaryTextColor);
+        currentColors.put(key_chat_outSentCheck, secondaryTextColor);
+        currentColors.put(key_chat_outTimeText, secondaryTextColor);
+    }
+
+    private static int transformColorToAccent(AccentColorParams params, int color) {
+        float[] hslTmp = ColorUtilities.hslTmp;
+        float[] hsvTmp = ColorUtilities.hsvTmp;
+        float[] hsvTmp2 = ColorUtilities.hsvTmp2;
+
+        ColorUtils.colorToHSL(color, hslTmp);
+        hslTmp[0] = params.hslAccent[0];
+        if (hslTmp[1] > 0.35f && hslTmp[2] < 0.75f) {
+            Color.colorToHSV(color, hsvTmp);
+            Color.colorToHSV(params.defaultAccentColor, hsvTmp2);
+            float dif = hsvTmp2[1] - hslTmp[1];
+            Color.colorToHSV(params.accentColor, hsvTmp);
+            float k = params.isDarkTheme ? params.accentBrightness / 255f : (1f - params.accentBrightness / 255f);
+            hsvTmp[2] = clamp(hsvTmp[2] - dif * k,0f,1f);
+
+            ColorUtils.colorToHSL(Color.HSVToColor(hsvTmp), hslTmp);
+        } else {
+            hslTmp[1] *= params.accentBrightness / 255f;
+        }
+        if (Color.red(params.accentColor) == Color.blue(params.accentColor) && Color.blue(params.accentColor) == Color.green(params.accentColor)) {
+            hslTmp[1] = 0;
+        }
+        clamp(hslTmp[1], 0, 1f);
+        clamp(hslTmp[2], 0, 1f);
+        return ColorUtils.setAlphaComponent(ColorUtils.HSLToColor(hslTmp), color >>> 24);
+    }
+
+    private static float clamp(float val, float min, float max) {
+        return Math.max(min, Math.min(max, val));
+    }
+
+    public static HashMap<String, Integer> getThemeColors(ThemeInfo themeInfo) {
+        if(themeInfo == getCurrentTheme()){
+            return currentColors;
+        } else if(themeInfo.pathToFile == null && themeInfo.assetName == null) {
+            return defaultColors;
+        }
+
+        HashMap<String,Integer> colors;
+        if (themeInfo.assetName != null) {
+            colors = getThemeFileValues(null, themeInfo.assetName);
+        } else {
+            colors = getThemeFileValues(new File(themeInfo.pathToFile), null);
+        }
+        if (themeInfo.hasAccentColor && themeInfo.accentColor != themeInfo.defaultAccentColor) {
+            overrideColorsToAccent(themeInfo, colors, themeInfo.defaultAccentColor, themeInfo.accentColor);
+        }
+
+        return colors;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatListCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatListCell.java
index e6f5b8dc1..1a39c26c3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatListCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatListCell.java
@@ -36,10 +36,16 @@ public ListView(Context context, boolean threeLines) {
             textPaint.setTextSize(AndroidUtilities.dp(13));
 
             button = new RadioButton(context) {
+
+                float lastButtonProgress;
                 @Override
                 public void invalidate() {
                     super.invalidate();
-                    ListView.this.invalidate();
+                    //remove endless redraw
+                    if(lastButtonProgress != button.getProgress()){
+                        ListView.this.invalidate();
+                    }
+                    lastButtonProgress = button.getProgress();
                 }
             };
             button.setSize(AndroidUtilities.dp(20));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
index 1d6bbbe30..4d49d4c39 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/HeaderCell.java
@@ -31,7 +31,7 @@
 
     private TextView textView;
     private SimpleTextView textView2;
-    private int height = 40;
+    public static final int HEIGHT = 40;
 
     public HeaderCell(Context context) {
         this(context, false, 21, 15, false);
@@ -49,7 +49,7 @@ public HeaderCell(Context context, boolean dialog, int padding, int topMargin, b
         textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         textView.setEllipsize(TextUtils.TruncateAt.END);
         textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        textView.setMinHeight(AndroidUtilities.dp(height - topMargin));
+        textView.setMinHeight(AndroidUtilities.dp(HEIGHT - topMargin));
         if (dialog) {
             textView.setTextColor(Theme.getColor(Theme.key_dialogTextBlue2));
         } else {
@@ -66,7 +66,7 @@ public HeaderCell(Context context, boolean dialog, int padding, int topMargin, b
     }
 
     public void setHeight(int value) {
-        textView.setMinHeight(AndroidUtilities.dp(height) - ((LayoutParams) textView.getLayoutParams()).topMargin);
+        textView.setMinHeight(AndroidUtilities.dp(HEIGHT) - ((LayoutParams) textView.getLayoutParams()).topMargin);
     }
 
     public void setEnabled(boolean value, ArrayList<Animator> animators) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
new file mode 100644
index 000000000..0280df9cc
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
@@ -0,0 +1,445 @@
+package org.telegram.ui.Components;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ComposeShader;
+import android.graphics.LinearGradient;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.RadialGradient;
+import android.graphics.Shader;
+import android.graphics.SweepGradient;
+import android.graphics.drawable.Drawable;
+import android.text.Editable;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.inputmethod.EditorInfo;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.Utilities;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ActionBar.ThemeDescription;
+import org.telegram.ui.WallpaperActivity;
+
+import java.util.ArrayList;
+
+public class ColorPickerView extends FrameLayout {
+
+    private LinearLayout linearLayout;
+
+    private final int paramValueSliderWidth = AndroidUtilities.dp(20);
+
+    private Paint colorWheelPaint;
+    private Paint valueSliderPaint;
+    private Paint circlePaint;
+    private Drawable circleDrawable;
+
+    private int centerX;
+    private int centerY;
+    private int lx;
+    private int ly;
+
+    boolean ignoreTextChange;
+
+    private Bitmap colorWheelBitmap;
+
+    private EditTextBoldCursor[] colorEditText = new EditTextBoldCursor[2];
+
+    private int colorWheelRadius;
+
+    private float[] colorHSV = new float[] { 0.0f, 0.0f, 1.0f };
+
+    private float[] hsvTemp = new float[3];
+    private LinearGradient colorGradient;
+
+    private boolean circlePressed;
+    private boolean colorPressed;
+
+    private onColorChangeListener listener;
+
+    public ColorPickerView(Context context) {
+        super(context);
+
+        setWillNotDraw(false);
+
+        circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        circleDrawable = context.getResources().getDrawable(R.drawable.knob_shadow).mutate();
+
+        colorWheelPaint = new Paint();
+        colorWheelPaint.setAntiAlias(true);
+        colorWheelPaint.setDither(true);
+
+        valueSliderPaint = new Paint();
+        valueSliderPaint.setAntiAlias(true);
+        valueSliderPaint.setDither(true);
+
+        linearLayout = new LinearLayout(context);
+        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+        addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 64, Gravity.LEFT | Gravity.TOP, 12, 14, 21, 0));
+        for (int a = 0; a < 2; a++) {
+            final int num = a;
+
+            colorEditText[a] = new EditTextBoldCursor(context) {
+                @Override
+                public void setTextColor(int color) {
+                    super.setTextColor(color);
+                    setLineColors(Theme.getColor(Theme.key_windowBackgroundWhiteInputField), Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated), Theme.getColor(Theme.key_windowBackgroundWhiteRedText3));
+                }
+            };
+            colorEditText[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            colorEditText[a].setHintColor(Theme.getColor(Theme.key_windowBackgroundWhiteHintText));
+            colorEditText[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
+            colorEditText[a].setBackgroundDrawable(null);
+            colorEditText[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
+            colorEditText[a].setCursorSize(AndroidUtilities.dp(20));
+            colorEditText[a].setCursorWidth(1.5f);
+            colorEditText[a].setSingleLine(true);
+            colorEditText[a].setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
+            colorEditText[a].setHeaderHintColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlueHeader));
+            colorEditText[a].setTransformHintToHeader(true);
+            colorEditText[a].setPadding(0, 0, 0, 0);
+            if (a == 0) {
+                colorEditText[a].setInputType(InputType.TYPE_CLASS_TEXT);
+                colorEditText[a].setHintText(LocaleController.getString("BackgroundHexColorCode", R.string.BackgroundHexColorCode));
+            } else {
+                colorEditText[a].setInputType(InputType.TYPE_CLASS_NUMBER);
+                colorEditText[a].setHintText(LocaleController.getString("BackgroundBrightness", R.string.BackgroundBrightness));
+            }
+            colorEditText[a].setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            InputFilter[] inputFilters = new InputFilter[1];
+            inputFilters[0] = new InputFilter.LengthFilter(a == 0 ? 7 : 3);
+            colorEditText[a].setFilters(inputFilters);
+            linearLayout.addView(colorEditText[a], LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, a == 0 ? 0.67f : 0.31f, 0, 0, a != 1 ? 23 : 0, 0));
+            colorEditText[a].addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+                    if (ignoreTextChange) {
+                        return;
+                    }
+                    ignoreTextChange = true;
+                    if (num == 0) {
+                        for (int a = 0; a < editable.length(); a++) {
+                            char ch = editable.charAt(a);
+                            if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'f' || ch >= 'A' && ch <= 'F' || ch == '#' && a == 0)) {
+                                editable.replace(a, a + 1, "");
+                                a--;
+                            }
+                        }
+                        if (editable.length() == 0) {
+                            editable.append("#");
+                        } else if (editable.charAt(0) != '#') {
+                            editable.insert(0, "#");
+                        }
+                        try {
+                            setColor(Integer.parseInt(editable.toString().substring(1), 16) | 0xff000000);
+                        } catch (Exception e) {
+                            setColor(0xffffffff);
+                        }
+                        listener.onColorChanged(getColor());
+                        colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
+                    } else {
+                        int value = Utilities.parseInt(editable.toString());
+                        if (value > 255 || value < 0) {
+                            if (value > 255) {
+                                value = 255;
+                            } else {
+                                value = 0;
+                            }
+                            editable.replace(0, editable.length(), "" + value);
+                        }
+                        colorHSV[2] = value / 255.0f;
+                        listener.onColorChanged(getColor());
+                        int red = Color.red(getColor());
+                        int green = Color.green(getColor());
+                        int blue = Color.blue(getColor());
+                        colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
+                    }
+                    invalidate();
+                    ignoreTextChange = false;
+                }
+            });
+            colorEditText[a].setOnEditorActionListener((textView, i, keyEvent) -> {
+                if (i == EditorInfo.IME_ACTION_DONE) {
+                    AndroidUtilities.hideKeyboard(textView);
+                    return true;
+                }
+                return false;
+            });
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+        int size = Math.min(widthSize, heightSize);
+        measureChild(linearLayout, MeasureSpec.makeMeasureSpec(widthSize - AndroidUtilities.dp(42), MeasureSpec.EXACTLY), heightMeasureSpec);
+        setMeasuredDimension(size, size);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        centerX = getWidth() / 2 - paramValueSliderWidth * 2 + AndroidUtilities.dp(11);
+        centerY = getHeight() / 2 + AndroidUtilities.dp(34);
+
+        canvas.drawBitmap(colorWheelBitmap, centerX - colorWheelRadius, centerY - colorWheelRadius, null);
+
+        float hueAngle = (float) Math.toRadians(colorHSV[0]);
+        int colorPointX = (int) (-Math.cos(hueAngle) * colorHSV[1] * colorWheelRadius) + centerX;
+        int colorPointY = (int) (-Math.sin(hueAngle) * colorHSV[1] * colorWheelRadius) + centerY;
+
+        float pointerRadius = 0.075f * colorWheelRadius;
+
+        hsvTemp[0] = colorHSV[0];
+        hsvTemp[1] = colorHSV[1];
+        hsvTemp[2] = 1.0f;
+
+        drawPointerArrow(canvas, colorPointX, colorPointY, Color.HSVToColor(hsvTemp));
+
+        lx = centerX + colorWheelRadius + paramValueSliderWidth * 2;
+        ly = centerY - colorWheelRadius;
+        int width = AndroidUtilities.dp(9);
+        int height = colorWheelRadius * 2;
+        if (colorGradient == null) {
+            colorGradient = new LinearGradient(lx, ly, lx + width, ly + height, new int[]{Color.BLACK, Color.HSVToColor(hsvTemp)}, null, Shader.TileMode.CLAMP);
+        }
+        valueSliderPaint.setShader(colorGradient);
+        canvas.drawRect(lx, ly, lx + width, ly + height, valueSliderPaint);
+        drawPointerArrow(canvas, lx + width / 2, (int) (ly + colorHSV[2] * height), Color.HSVToColor(colorHSV));
+    }
+
+    private void drawPointerArrow(Canvas canvas, int x, int y, int color) {
+        int side = AndroidUtilities.dp(13);
+        circleDrawable.setBounds(x - side, y - side, x + side, y + side);
+        circleDrawable.draw(canvas);
+
+        circlePaint.setColor(0xffffffff);
+        canvas.drawCircle(x, y, AndroidUtilities.dp(11), circlePaint);
+        circlePaint.setColor(color);
+        canvas.drawCircle(x, y, AndroidUtilities.dp(9), circlePaint);
+    }
+
+    @Override
+    protected void onSizeChanged(int width, int height, int oldw, int oldh) {
+        if (colorWheelRadius != AndroidUtilities.dp(120)) {
+            colorWheelRadius = AndroidUtilities.dp(120);//Math.max(1, width / 2 - paramValueSliderWidth - AndroidUtilities.dp(20));
+            colorWheelBitmap = createColorWheelBitmap(colorWheelRadius * 2, colorWheelRadius * 2, colorWheelRadius, colorWheelPaint);
+            colorGradient = null;
+        }
+    }
+
+    public static Bitmap createColorWheelBitmap(int width, int height,int colorWheelRadius,Paint paint) {
+        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+
+        int colorCount = 12;
+        int colorAngleStep = 360 / 12;
+        int[] colors = new int[colorCount + 1];
+        float[] hsv = new float[]{0.0f, 1.0f, 1.0f};
+        for (int i = 0; i < colors.length; i++) {
+            hsv[0] = (i * colorAngleStep + 180) % 360;
+            colors[i] = Color.HSVToColor(hsv);
+        }
+        colors[colorCount] = colors[0];
+
+        SweepGradient sweepGradient = new SweepGradient(width / 2, height / 2, colors, null);
+        RadialGradient radialGradient = new RadialGradient(width / 2, height / 2, colorWheelRadius, 0xffffffff, 0x00ffffff, Shader.TileMode.CLAMP);
+        ComposeShader composeShader = new ComposeShader(sweepGradient, radialGradient, PorterDuff.Mode.SRC_OVER);
+
+        paint.setShader(composeShader);
+
+        Canvas canvas = new Canvas(bitmap);
+        canvas.drawCircle(width / 2, height / 2, colorWheelRadius, paint);
+
+        return bitmap;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        int action = event.getAction();
+        switch (action) {
+            case MotionEvent.ACTION_DOWN:
+            case MotionEvent.ACTION_MOVE:
+
+                int x = (int) event.getX();
+                int y = (int) event.getY();
+                int cx = x - centerX;
+                int cy = y - centerY;
+                double d = Math.sqrt(cx * cx + cy * cy);
+
+                if (circlePressed || !colorPressed && d <= colorWheelRadius) {
+                    if (d > colorWheelRadius) {
+                        d = colorWheelRadius;
+                    }
+                    if (!circlePressed) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    circlePressed = true;
+                    colorHSV[0] = (float) (Math.toDegrees(Math.atan2(cy, cx)) + 180.0f);
+                    colorHSV[1] = Math.max(0.0f, Math.min(1.0f, (float) (d / colorWheelRadius)));
+                    colorGradient = null;
+                }
+                if (colorPressed || !circlePressed && x >= lx && x <= lx + paramValueSliderWidth && y >= ly && y <= ly + colorWheelRadius * 2) {
+                    float value = (y - ly) / (colorWheelRadius * 2.0f);
+                    if (value < 0.0f) {
+                        value = 0.0f;
+                    } else if (value > 1.0f) {
+                        value = 1.0f;
+                    }
+                    colorHSV[2] = value;
+                    if (!colorPressed) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    colorPressed = true;
+                }
+                if (colorPressed || circlePressed) {
+                    if(listener != null) listener.onColorChanged(getColor());
+                    if (!ignoreTextChange) {
+                        int red = Color.red(getColor());
+                        int green = Color.green(getColor());
+                        int blue = Color.blue(getColor());
+                        ignoreTextChange = true;
+                        colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
+                        colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
+                        for (int b = 0; b < 2; b++) {
+                            colorEditText[b].setSelection(colorEditText[b].length());
+                        }
+                        ignoreTextChange = false;
+                    }
+                    invalidate();
+                }
+
+                return true;
+            case MotionEvent.ACTION_UP:
+                colorPressed = false;
+                circlePressed = false;
+                break;
+        }
+        return super.onTouchEvent(event);
+    }
+
+    public void setColor(int color) {
+        if (!ignoreTextChange) {
+            ignoreTextChange = true;
+            int red = Color.red(color);
+            int green = Color.green(color);
+            int blue = Color.blue(color);
+            Color.colorToHSV(color, colorHSV);
+            colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
+            colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
+            for (int b = 0; b < 2; b++) {
+                colorEditText[b].setSelection(colorEditText[b].length());
+            }
+            ignoreTextChange = false;
+        } else {
+            Color.colorToHSV(color, colorHSV);
+        }
+        colorGradient = null;
+        invalidate();
+    }
+
+    public int getColor() {
+        return (Color.HSVToColor(colorHSV) & 0x00ffffff) | 0xff000000;
+    }
+
+    public void addThemeDescriptions(ArrayList<ThemeDescription> arrayList) {
+        for (int a = 0; a < colorEditText.length; a++) {
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteBlackText));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteHintText));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteBlueHeader));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_windowBackgroundWhiteInputFieldActivated));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteRedText3));
+        }
+    }
+
+    public interface onColorChangeListener {
+        void onColorChanged(int color);
+    }
+
+    public void setListener(onColorChangeListener listener) {
+        this.listener = listener;
+    }
+
+
+    public static class ColorPickerDialogView extends FrameLayout {
+
+        public ColorPickerView colorPickerView;
+        public TextView saveButton;
+        public TextView cancelButton;
+
+        public ColorPickerDialogView(@NonNull Context context) {
+            super(context);
+
+            colorPickerView = new ColorPickerView(context);
+            colorPickerView.setColor(Theme.getCurrentTheme().accentColor);
+
+            addView(colorPickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+            FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) colorPickerView.getLayoutParams();
+            lp.bottomMargin = AndroidUtilities.dp(40);
+
+            FrameLayout buttonsContainer = new FrameLayout(context) {
+                @Override
+                public void onDraw(Canvas canvas) {
+                    int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
+                    Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), bottom);
+                    Theme.chat_composeShadowDrawable.draw(canvas);
+                }
+            };
+
+            buttonsContainer.setWillNotDraw(false);
+            buttonsContainer.setPadding(0, AndroidUtilities.dp(3), 0, 0);
+            addView(buttonsContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 51, Gravity.BOTTOM));
+
+
+            cancelButton = new TextView(context);
+            cancelButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            cancelButton.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            cancelButton.setGravity(Gravity.CENTER);
+            cancelButton.setPadding(AndroidUtilities.dp(21), 0, AndroidUtilities.dp(21), 0);
+            cancelButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector), 0));
+            buttonsContainer.addView(cancelButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
+
+
+            saveButton = new TextView(context);
+            saveButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+            saveButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            saveButton.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
+            saveButton.setText(LocaleController.getString("Save", R.string.Save).toUpperCase());
+            saveButton.setGravity(Gravity.CENTER);
+            saveButton.setPadding(AndroidUtilities.dp(21), 0, AndroidUtilities.dp(21), 0);
+            saveButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector), 0));
+            buttonsContainer.addView(saveButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.RIGHT | Gravity.TOP));
+        }
+
+        public void addThemeDescriptions(ArrayList<ThemeDescription> list) {
+            colorPickerView.addThemeDescriptions(list);
+            list.add(new ThemeDescription(saveButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
+            list.add(new ThemeDescription(cancelButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
+        }
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index 3ffdeb958..b48cdc656 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -9,12 +9,14 @@
 package org.telegram.ui;
 
 import android.Manifest;
+import android.animation.ValueAnimator;
 import android.app.Activity;
 import android.app.TimePickerDialog;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
@@ -36,6 +38,7 @@
 import android.os.Vibrator;
 
 import androidx.core.content.FileProvider;
+import androidx.core.graphics.ColorUtils;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
@@ -43,11 +46,13 @@
 import android.text.InputType;
 import android.text.TextPaint;
 import android.text.TextUtils;
+import android.util.SparseIntArray;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.WindowManager;
 import android.view.inputmethod.EditorInfo;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
@@ -66,6 +71,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.ColorUtilities;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.time.SunDate;
@@ -89,6 +95,7 @@
 import org.telegram.ui.Cells.TextSettingsCell;
 import org.telegram.ui.Cells.ThemeCell;
 import org.telegram.ui.Cells.ThemeTypeCell;
+import org.telegram.ui.Components.ColorPickerView;
 import org.telegram.ui.Components.EditTextBoldCursor;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RadioButton;
@@ -105,6 +112,8 @@
 import java.util.List;
 import java.util.Locale;
 
+import static org.telegram.ui.Cells.HeaderCell.HEIGHT;
+
 public class ThemeActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
     public final static int THEME_TYPE_BASIC = 0;
@@ -113,7 +122,12 @@
 
     private ListAdapter listAdapter;
     private RecyclerListView innerListView;
+    private RecyclerListView accentColorsListView;
     private RecyclerListView listView;
+    private ColorPickerView.ColorPickerDialogView colorPickerContentView;
+    private BottomSheet colorPickerBottomSheet;
+    private AccentColorsAdapter accentColorsAdapter;
+    private boolean bottomSheetDidAction;
     @SuppressWarnings("FieldCanBeLocal")
     private LinearLayoutManager layoutManager;
 
@@ -121,6 +135,7 @@
     private ArrayList<Theme.ThemeInfo> defaultThemes = new ArrayList<>();
 
     boolean hasCustomThemes;
+    boolean themeHasAccentColor;
 
     private int backgroundRow;
     private int textSizeHeaderRow;
@@ -171,6 +186,7 @@
     private int themeStart2Row;
     private int themeEnd2Row;
     private int themeInfo2Row;
+    private int themeAccentColorsRow;
 
     private int rowCount;
 
@@ -179,10 +195,50 @@
     private int previousUpdatedType;
     private boolean previousByLocation;
 
+    private int textSizeRowHeight;
+
     private GpsLocationListener gpsLocationListener = new GpsLocationListener();
     private GpsLocationListener networkLocationListener = new GpsLocationListener();
 
     private final static int create_theme = 1;
+    private int lastSelectedAccentColor;
+
+    ThemeDescription[] selfDescriptions;
+    ThemeDescription[] colorPickerDescriptions;
+
+    Bitmap colorPickerWheelBitmap;
+
+    HashMap<String,Integer> colorPickerThemeColors;
+
+
+    private final static HashMap<String,int[]> defaultPickerColors = new HashMap<>();
+    int defaultPickerColorsSize = 6;
+    static {
+        defaultPickerColors.put("arctic.attheme",new int[]{
+                0xff3490eb,
+                0xfff44336,
+                0xff9c27b0,
+                0xff3f51b5,
+                0xff009688,
+                0xffe5bd00
+        });
+        defaultPickerColors.put("dark.attheme",new int[]{
+                0xff3e6588,
+                0xffe1503f,
+                0xffb048ae,
+                0xff3960c4,
+                0xff009688,
+                0xffe5d764
+        });
+        defaultPickerColors.put("darkblue.attheme",new int[]{
+                0xff3e618a,
+                0xffe1503f,
+                0xff614576,
+                0xff3960c4,
+                0xff009688,
+                0xff948b41
+        });
+    }
 
     private class GpsLocationListener implements LocationListener {
 
@@ -416,6 +472,7 @@ protected void onDraw(Canvas canvas) {
         @Override
         protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+            textSizeRowHeight = getMeasuredHeight();
             int w = MeasureSpec.getSize(widthMeasureSpec);
             if (lastWidth != w) {
                 sizeBar.setProgress((SharedConfig.fontSize - startFontSize) / (float) (endFontSize - startFontSize));
@@ -443,8 +500,11 @@ public ThemeActivity(int type) {
     }
 
     private void updateRows() {
-        int oldRowCount = rowCount;
+        updateRows(true);
+    }
 
+    private void updateRows(boolean updateList) {
+        int oldRowCount = rowCount;
         rowCount = 0;
         emojiRow = -1;
         contactsReimportRow = -1;
@@ -468,6 +528,7 @@ private void updateRows() {
         themeStart2Row = -1;
         themeEnd2Row = -1;
         themeListRow = -1;
+        themeAccentColorsRow = -1;
         themeEndRow = -1;
         showThemesRows = -1;
         themeInfoRow = -1;
@@ -521,11 +582,13 @@ private void updateRows() {
             newThemeInfoRow = rowCount++;
             themeHeaderRow = rowCount++;
             themeListRow = rowCount++;
-            if (hasCustomThemes) {
-                showThemesRows = rowCount++;
-            }
-            themeInfoRow = rowCount++;
 
+            themeHasAccentColor = Theme.getCurrentTheme().hasAccentColor;
+            if (themeHasAccentColor) themeAccentColorsRow = rowCount++;
+            if (hasCustomThemes) showThemesRows = rowCount++;
+
+
+            themeInfoRow = rowCount++;
             chatListHeaderRow = rowCount++;
             chatListRow = rowCount++;
             chatListInfoRow = rowCount++;
@@ -607,7 +670,7 @@ private void updateRows() {
             }
         }
 
-        if (listAdapter != null) {
+        if (listAdapter != null && updateList) {
             if (currentType != THEME_TYPE_NIGHT || previousUpdatedType == -1) {
                 listAdapter.notifyDataSetChanged();
             } else {
@@ -728,7 +791,34 @@ public void onItemClick(int id) {
         fragmentView = frameLayout;
 
         listView = new RecyclerListView(context);
-        listView.setLayoutManager(layoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false));
+        listView.setLayoutManager(layoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false) {
+
+            SparseIntArray childSizesMap = new SparseIntArray();
+
+            @Override
+            public void onLayoutCompleted(RecyclerView.State state) {
+                super.onLayoutCompleted(state);
+                int n = getChildCount();
+                for (int i = 0; i < n; i++) {
+                    View v = getChildAt(i);
+                    childSizesMap.put(getPosition(v), v.getHeight());
+                }
+            }
+
+            //super.computeVerticalScrollOffset() work bad :( save height all views to improve
+            //this one need to scroll recycler to preview cell when showing colorPicker
+            @Override
+            public int computeVerticalScrollOffset(RecyclerView.State state) {
+                int firstChildPosition = findFirstVisibleItemPosition();
+                int scrolledY = (int) -findViewByPosition(firstChildPosition).getY();
+                for (int i = 0; i < firstChildPosition; i++) {
+                    int v = childSizesMap.get(i,-1);
+                    if(v == -1) return super.computeVerticalScrollOffset(state);
+                    scrolledY += v;
+                }
+                return scrolledY;
+            }
+        });
         listView.setVerticalScrollBarEnabled(false);
         listView.setAdapter(listAdapter);
         ((DefaultItemAnimator) listView.getItemAnimator()).setDelayAnimations(false);
@@ -941,9 +1031,7 @@ public void onItemClick(int id) {
     @Override
     public void onResume() {
         super.onResume();
-        if (listAdapter != null) {
-            listAdapter.notifyDataSetChanged();
-        }
+        updateRows();
     }
 
     private void openThemeCreate() {
@@ -1196,6 +1284,8 @@ private String getLocationSunString() {
         private boolean isLast;
         private boolean isFirst;
 
+        private static final float BLEND_ALPHA = 0.34f;
+
         public InnerThemeView(Context context) {
             super(context);
             setWillNotDraw(false);
@@ -1205,13 +1295,7 @@ public InnerThemeView(Context context) {
 
             textPaint.setTextSize(AndroidUtilities.dp(13));
 
-            button = new RadioButton(context) {
-                @Override
-                public void invalidate() {
-                    super.invalidate();
-                    //ListView.this.invalidate();
-                }
-            };
+            button = new RadioButton(context);
             button.setSize(AndroidUtilities.dp(20));
             button.setColor(0x66ffffff, 0xffffffff);
             addView(button, LayoutHelper.createFrame(22, 22, Gravity.LEFT | Gravity.TOP, 27, 75, 0, 0));
@@ -1229,8 +1313,18 @@ public void setTheme(Theme.ThemeInfo theme, boolean last, boolean first) {
             FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) button.getLayoutParams();
             layoutParams.leftMargin = AndroidUtilities.dp(isFirst ? 22 + 27 : 27);
             button.setLayoutParams(layoutParams);
-            inDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewInColor, PorterDuff.Mode.MULTIPLY));
-            outDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewOutColor, PorterDuff.Mode.MULTIPLY));
+
+            if (themeInfo.name.equals("Dark Tint")) {
+                inDrawable.setColorFilter(new PorterDuffColorFilter(ColorUtilities.replaceHue(themeInfo.previewInColor, themeInfo.accentColor), PorterDuff.Mode.MULTIPLY));
+            } else {
+                inDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewInColor, PorterDuff.Mode.MULTIPLY));
+            }
+            if (theme.hasAccentColor) {
+                outDrawable.setColorFilter(new PorterDuffColorFilter(ColorUtils.blendARGB(theme.accentColor, Color.WHITE, BLEND_ALPHA), PorterDuff.Mode.MULTIPLY));
+            } else {
+                outDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewOutColor, PorterDuff.Mode.MULTIPLY));
+            }
+
         }
 
         @Override
@@ -1239,24 +1333,35 @@ protected void onAttachedToWindow() {
             button.setChecked(themeInfo == Theme.getCurrentTheme(), false);
         }
 
-        public void updateCurrentThemeCheck() {
+        public void update() {
             button.setChecked(themeInfo == Theme.getCurrentTheme(), true);
+            if (themeInfo.hasAccentColor) {
+                outDrawable.setColorFilter(new PorterDuffColorFilter(ColorUtils.blendARGB(themeInfo.accentColor, Color.WHITE, BLEND_ALPHA), PorterDuff.Mode.MULTIPLY));
+
+                if(themeInfo.name.equals("Dark Tint")){
+                    inDrawable.setColorFilter(new PorterDuffColorFilter(ColorUtilities.replaceHue(themeInfo.previewInColor,themeInfo.accentColor), PorterDuff.Mode.MULTIPLY));
+                }
+            }
         }
 
         @Override
         protected void onDraw(Canvas canvas) {
-            paint.setColor(themeInfo.previewBackgroundColor);
+            if(themeInfo.name.equals("Dark Tint")){
+                paint.setColor(ColorUtilities.replaceHue(themeInfo.previewBackgroundColor,themeInfo.accentColor));
+            } else {
+                paint.setColor(themeInfo.previewBackgroundColor);
+            }
             int x = isFirst ? AndroidUtilities.dp(22) : 0;
             rect.set(x, AndroidUtilities.dp(11), x + AndroidUtilities.dp(76), AndroidUtilities.dp(11 + 97));
             canvas.drawRoundRect(rect, AndroidUtilities.dp(6), AndroidUtilities.dp(6), paint);
 
-            if ("Arctic Blue".equals(themeInfo.name)) {
+            if (themeInfo.hasAccentColor) {
                 int color = 0xffb0b5ba;
                 int r = Color.red(color);
                 int g = Color.green(color);
                 int b = Color.blue(color);
 
-                button.setColor(0xffb3b3b3, 0xff37a9f0);
+                button.setColor(0xffb3b3b3, ColorUtils.blendARGB(themeInfo.accentColor, Color.WHITE, BLEND_ALPHA));
                 Theme.chat_instantViewRectPaint.setColor(Color.argb(43, r, g, b));
                 canvas.drawRoundRect(rect, AndroidUtilities.dp(6), AndroidUtilities.dp(6), Theme.chat_instantViewRectPaint);
             } else {
@@ -1311,6 +1416,190 @@ public int getItemCount() {
         }
     }
 
+    private class AccentColorsAdapter extends RecyclerListView.SelectionAdapter {
+
+        private Context mContext;
+
+        private boolean hasCustomColor = false;
+        private int customColor;
+
+        public AccentColorsAdapter(Context context) {
+            mContext = context;
+            setCustomColor(Theme.getCurrentTheme().accentColor);
+        }
+
+        @Override
+        public boolean isEnabled(RecyclerView.ViewHolder holder) {
+            return false;
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            ColorCheckView v = new ColorCheckView(mContext);
+            v.setLayoutParams(new RecyclerView.LayoutParams(AndroidUtilities.dp(56), AndroidUtilities.dp(80)));
+            return new RecyclerListView.Holder(v);
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            ColorCheckView colorCheckView = (ColorCheckView) holder.itemView;
+            if (position >= defaultPickerColorsSize) {
+                if (hasCustomColor && position == defaultPickerColorsSize) {
+                    colorCheckView.setColor(customColor);
+                } else {
+                    colorCheckView.setPickerStyle();
+                }
+                colorCheckView.setPosition(-1);
+            } else {
+                colorCheckView.setPosition(position);
+                colorCheckView.setColor(getDefaultPickerColor(position));
+            }
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            return 0;
+        }
+
+        @Override
+        public int getItemCount() {
+            return defaultPickerColorsSize + 1 + (hasCustomColor ? 1 : 0);
+        }
+
+        public void setCustomColor(int customColor) {
+            boolean isCustomColor = true;
+            for (int i = 0; i < defaultPickerColorsSize; i++) {
+                if (getDefaultPickerColor(i) == customColor) {
+                    isCustomColor = false;
+                    break;
+                }
+            }
+
+            if (isCustomColor != this.hasCustomColor && isCustomColor)
+                notifyItemInserted(defaultPickerColorsSize);
+
+            if (isCustomColor) {
+                hasCustomColor = true;
+                this.customColor = customColor;
+                if (accentColorsListView != null) {
+                    RecyclerView.ViewHolder h = accentColorsListView.findViewHolderForAdapterPosition(defaultPickerColorsSize);
+                    if (h != null) {
+                        ColorCheckView checkView = ((ColorCheckView) h.itemView);
+                        checkView.setColor(customColor);
+                        checkView.update();
+                    }
+                }
+            } else if (hasCustomColor) {
+                RecyclerView.ViewHolder viewHolder = accentColorsListView.findViewHolderForAdapterPosition(defaultPickerColorsSize);
+                if (viewHolder != null) ((ColorCheckView) viewHolder.itemView).update();
+            }
+        }
+
+        class ColorCheckView extends View {
+
+            Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            Paint checkPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            int color;
+            float progress;
+            boolean checked;
+            boolean attached;
+            int radius = AndroidUtilities.dp(19);
+            boolean isPicker;
+            int position;
+
+            public ColorCheckView(Context context) {
+                super(context);
+                checkPaint.setStyle(Paint.Style.STROKE);
+                checkPaint.setStrokeCap(Paint.Cap.ROUND);
+                checkPaint.setStrokeWidth(AndroidUtilities.dp(2));
+                checkPaint.setColor(Color.WHITE);
+                if (colorPickerWheelBitmap == null) {
+                    colorPickerWheelBitmap = ColorPickerView.createColorWheelBitmap(radius * 2,
+                            radius * 2, radius, new Paint(Paint.ANTI_ALIAS_FLAG));
+                }
+            }
+
+            public void setPosition(int position) {
+                this.position = position;
+            }
+            public void setColor(int color) {
+                this.color = color;
+                paint.setColor(color);
+                isPicker = false;
+                setChecked(Theme.getCurrentTheme().accentColor == color, true);
+                invalidate();
+            }
+
+            public void update() {
+                if (position >= 0) {
+                    setColor(getDefaultPickerColor(position));
+                    setChecked(Theme.getCurrentTheme().accentColor == color, true);
+                } else {
+                    setChecked(Theme.getCurrentTheme().accentColor == color, true);
+                }
+            }
+
+            ValueAnimator checkAnimator;
+
+            public void setChecked(boolean checked, boolean animated) {
+                if (this.checked == checked) return;
+                this.checked = checked;
+                if (attached && !animated) {
+                    progress = checked ? 1f : 0f;
+                } else {
+                    if (checkAnimator != null) {
+                        checkAnimator.removeAllListeners();
+                        checkAnimator.cancel();
+                    }
+                    checkAnimator = ValueAnimator.ofFloat(progress, checked ? 1 : 0);
+                    checkAnimator.addUpdateListener(animation -> {
+                        progress = (float) animation.getAnimatedValue();
+                        invalidate();
+                    });
+                    checkAnimator.setDuration(150);
+                    checkAnimator.start();
+                }
+            }
+
+            @Override
+            protected void onAttachedToWindow() {
+                super.onAttachedToWindow();
+                attached = true;
+            }
+
+            @Override
+            protected void onDetachedFromWindow() {
+                super.onDetachedFromWindow();
+                attached = false;
+            }
+
+            @Override
+            protected void onDraw(Canvas canvas) {
+                if (isPicker) {
+                    canvas.drawBitmap(colorPickerWheelBitmap, (getMeasuredWidth() >> 1) - radius, (getMeasuredHeight() >> 1) - radius, paint);
+                } else {
+                    canvas.drawCircle(getMeasuredWidth() >> 1, getMeasuredHeight() >> 1, radius, paint);
+
+                    if (progress > 0) {
+                        canvas.save();
+                        canvas.translate(AndroidUtilities.dp(18), AndroidUtilities.dp(32));
+                        int endX = (int) (AndroidUtilities.dpf2(7.5f) - AndroidUtilities.dp(4) * progress);
+                        int endY = (int) (AndroidUtilities.dpf2(13.5f) - AndroidUtilities.dp(4) * progress);
+                        canvas.drawLine(AndroidUtilities.dpf2(7.5f), (int) AndroidUtilities.dpf2(13.5f), endX, endY, checkPaint);
+                        endX = (int) (AndroidUtilities.dpf2(7.5f) + AndroidUtilities.dp(8) * progress);
+                        endY = (int) (AndroidUtilities.dpf2(13f) - AndroidUtilities.dp(8) * progress);
+                        canvas.drawLine((int) AndroidUtilities.dpf2(8f), (int) AndroidUtilities.dpf2(13f), endX, endY, checkPaint);
+                        canvas.restore();
+                    }
+                }
+            }
+
+            public void setPickerStyle() {
+                isPicker = true;
+            }
+        }
+    }
+
     private class ListAdapter extends RecyclerListView.SelectionAdapter {
 
         private Context mContext;
@@ -1327,7 +1616,7 @@ public int getItemCount() {
         @Override
         public boolean isEnabled(RecyclerView.ViewHolder holder) {
             int type = holder.getItemViewType();
-            return type == 0 || type == 1 || type == 4 || type == 7 || type == 10 || type == 11;
+            return type == 0 || type == 1 || type == 4 || type == 7 || type == 10 || type == 11 || type == 12;
         }
 
         private void showOptionsForTheme(Theme.ThemeInfo themeInfo) {
@@ -1350,12 +1639,19 @@ private void showOptionsForTheme(Theme.ThemeInfo themeInfo) {
             builder.setItems(items, (dialog, which) -> {
                 if (which == 0) {
                     File currentFile;
-                    if (themeInfo.pathToFile == null && themeInfo.assetName == null) {
+                    if ((themeInfo.pathToFile == null && themeInfo.assetName == null) || (themeInfo.hasAccentColor && themeInfo.accentColor != themeInfo.defaultAccentColor)) {
                         StringBuilder result = new StringBuilder();
-                        for (HashMap.Entry<String, Integer> entry : Theme.getDefaultColors().entrySet()) {
+                        HashMap<String,Integer> colors = Theme.getThemeColors(themeInfo);
+                        for (HashMap.Entry<String, Integer> entry : colors.entrySet()) {
                             result.append(entry.getKey()).append("=").append(entry.getValue()).append("\n");
                         }
-                        currentFile = new File(ApplicationLoader.getFilesDirFixed(), "default_theme.attheme");
+                        String fileName;
+                        if (themeInfo.pathToFile == null && themeInfo.assetName == null) {
+                            fileName = "default_theme.attheme";
+                        } else {
+                            fileName = themeInfo.name + "_#" + Integer.toHexString(themeInfo.accentColor & 0xffffff) + ".attheme";
+                        }
+                        currentFile = new File(ApplicationLoader.getFilesDirFixed(), fileName);
                         FileOutputStream stream = null;
                         try {
                             stream = new FileOutputStream(currentFile);
@@ -1493,8 +1789,7 @@ protected void didSelectChatType(boolean threeLines) {
                     view = new NotificationsCheckCell(mContext, 21, 64);
                     view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
                     break;
-                case 11:
-                default: {
+                case 11: {
                     RecyclerListView horizontalListView = new RecyclerListView(mContext) {
                         @Override
                         public boolean onInterceptTouchEvent(MotionEvent e) {
@@ -1507,7 +1802,7 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
                         @Override
                         public void onDraw(Canvas canvas) {
                             super.onDraw(canvas);
-                            if (hasCustomThemes) {
+                            if (hasCustomThemes || themeHasAccentColor) {
                                 canvas.drawLine(LocaleController.isRTL ? 0 : AndroidUtilities.dp(20), getMeasuredHeight() - 1, getMeasuredWidth() - (LocaleController.isRTL ? AndroidUtilities.dp(20) : 0), getMeasuredHeight() - 1, Theme.dividerPaint);
                             }
                         }
@@ -1516,6 +1811,8 @@ public void onDraw(Canvas canvas) {
                         public void setBackgroundColor(int color) {
                             super.setBackgroundColor(color);
                             invalidateViews();
+                            //getThemeDescriptions() invoke before accentColorsListView created
+                            if (accentColorsListView != null) accentColorsListView.setBackgroundColor(color);
                         }
                     };
                     horizontalListView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
@@ -1533,6 +1830,7 @@ public boolean supportsPredictiveItemAnimations() {
                     horizontalListView.setLayoutManager(layoutManager);
                     horizontalListView.setAdapter(new InnerListAdapter(mContext));
                     horizontalListView.setOnItemClickListener((view1, position) -> {
+                        if (accentColorsListView != null) accentColorsListView.cancelClickRunnables(false);
                         InnerThemeView innerThemeView = (InnerThemeView) view1;
                         Theme.ThemeInfo themeInfo = innerThemeView.themeInfo;
                         if (themeInfo == Theme.getCurrentTheme()) {
@@ -1546,13 +1844,18 @@ public boolean supportsPredictiveItemAnimations() {
                         } else if (right > horizontalListView.getMeasuredWidth()) {
                             horizontalListView.smoothScrollBy(right - horizontalListView.getMeasuredWidth(), 0);
                         }
-
-                        int count = innerListView.getChildCount();
-                        for (int a = 0; a < count; a++) {
-                            View child = innerListView.getChildAt(a);
-                            if (child instanceof InnerThemeView) {
-                                ((InnerThemeView) child).updateCurrentThemeCheck();
+                        updateInnerItems();
+                        if (themeHasAccentColor != themeInfo.hasAccentColor) {
+                            if (themeInfo.hasAccentColor) {
+                                updateRows(false);
+                                listAdapter.notifyItemInserted(themeAccentColorsRow);
+                            } else {
+                                int oldRow = themeAccentColorsRow;
+                                updateRows(false);
+                                listAdapter.notifyItemRemoved(oldRow);
                             }
+                        } else if (themeHasAccentColor && accentColorsListView != null) {
+                            updateAccentColorsRow();
                         }
                     });
                     horizontalListView.setOnItemLongClickListener((view12, position) -> {
@@ -1564,6 +1867,114 @@ public boolean supportsPredictiveItemAnimations() {
                     view.setLayoutParams(new RecyclerView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, AndroidUtilities.dp(148)));
                     break;
                 }
+                case 12:
+                default: {
+                    RecyclerListView horizontalListView = new RecyclerListView(mContext) {
+                        @Override
+                        public void onDraw(Canvas canvas) {
+                            super.onDraw(canvas);
+                            if (hasCustomThemes) {
+                                canvas.drawLine(LocaleController.isRTL ? 0 : AndroidUtilities.dp(20), getMeasuredHeight() - 1, getMeasuredWidth() - (LocaleController.isRTL ? AndroidUtilities.dp(20) : 0), getMeasuredHeight() - 1, Theme.dividerPaint);
+                            }
+                        }
+
+                        @Override
+                        public void setBackgroundColor(int color) {
+                            super.setBackgroundColor(color);
+                            invalidateViews();
+                        }
+                    };
+                    horizontalListView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    LinearLayoutManager layoutManager = new LinearLayoutManager(mContext) {
+                        @Override
+                        public boolean supportsPredictiveItemAnimations() {
+                            return false;
+                        }
+                    };
+                    horizontalListView.setPadding(AndroidUtilities.dp(14), 0, AndroidUtilities.dp(14), 0);
+                    horizontalListView.setClipToPadding(false);
+                    layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
+                    horizontalListView.setLayoutManager(layoutManager);
+                    horizontalListView.setAdapter(accentColorsAdapter = new AccentColorsAdapter(mContext));
+                    horizontalListView.setOnItemClickListener((view1, position) -> {
+                        if (innerListView != null) innerListView.cancelClickRunnables(false);
+                        lastSelectedAccentColor = Theme.getCurrentTheme().accentColor;
+                        if (position == defaultPickerColorsSize && accentColorsAdapter.hasCustomColor) {
+                            Theme.saveAccentColor(accentColorsAdapter.customColor);
+                            updateAccentColorsRow();
+                            updateInnerItems();
+                        } else if (position >= defaultPickerColorsSize) {
+                            if (colorPickerContentView == null) {
+                                colorPickerContentView = new ColorPickerView.ColorPickerDialogView(mContext);
+                                colorPickerContentView.colorPickerView.setListener(color -> {
+                                    float[] yuv = ColorUtilities.yuvTmp;
+                                    ColorUtilities.colorToYuv(color, yuv);
+                                    if (yuv[0] > 0.75f) {
+                                        yuv[0] = 0.75f;
+                                        color = ColorUtilities.YuvToColor(yuv);
+                                    }
+                                    Theme.applyAccentColor(color,colorPickerThemeColors);
+                                    updateSelfDescriptions();
+                                });
+                                colorPickerContentView.saveButton.setOnClickListener(v -> {
+                                    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, Theme.getCurrentTheme(), false);
+                                    bottomSheetDidAction = true;
+                                    updateAccentColorsRow();
+                                    updateInnerItems();
+
+                                    colorPickerBottomSheet.dismiss();
+                                });
+                                colorPickerContentView.cancelButton.setOnClickListener(v -> {
+                                    Theme.saveAccentColor(lastSelectedAccentColor);
+                                    bottomSheetDidAction = true;
+
+                                    colorPickerBottomSheet.dismiss();
+                                });
+                            }
+                            createSelfDescriptions();
+                            updateSelfDescriptions();
+                            colorPickerThemeColors = Theme.getThemeFileValues(null, Theme.getCurrentTheme().assetName);
+
+                            colorPickerContentView.colorPickerView.setColor(lastSelectedAccentColor);
+
+                            listView.postDelayed(() -> {
+                                int bottom = textSizeRowHeight + AndroidUtilities.dp(HEIGHT) - listView.computeVerticalScrollOffset();
+                                int dif = listView.getMeasuredHeight() - colorPickerContentView.getMeasuredHeight();
+                                if (dif < 0) return;
+                                listView.smoothScrollBy(0, bottom - dif);
+                            },150);
+
+                            int softInputMode = getParentActivity().getWindow().getAttributes().softInputMode;
+                            getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);
+                            bottomSheetDidAction = false;
+
+                            colorPickerBottomSheet = new BottomSheet.Builder(getParentActivity(), true, 0)
+                                    .setCustomView(colorPickerContentView)
+                                    .setSoftInputAdjustMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)
+                                    .setApplyBottomPadding(false)
+                                    .setApplyTopPadding(false)
+                                    .setDimBehind(false);
+                            colorPickerBottomSheet.setOnDismissListener(dialog -> {
+                                getParentActivity().getWindow().setSoftInputMode(softInputMode);
+                                clearSelfDescriptions();
+                                if (!bottomSheetDidAction) {
+                                    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, Theme.getCurrentTheme(), false);
+                                    updateAccentColorsRow();
+                                    updateInnerItems();
+                                }
+                            });
+
+                            colorPickerBottomSheet.show();
+                        } else {
+                            Theme.saveAccentColor(getDefaultPickerColor(position));
+                            updateAccentColorsRow();
+                            updateInnerItems();
+                        }
+                    });
+                    view = accentColorsListView = horizontalListView;
+                    view.setLayoutParams(new RecyclerView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, AndroidUtilities.dp(80)));
+                    break;
+                }
             }
             return new RecyclerListView.Holder(view);
         }
@@ -1783,18 +2194,78 @@ public int getItemViewType(int position) {
                 return 10;
             } else if (position == themeListRow) {
                 return 11;
+            } else if (position == themeAccentColorsRow) {
+                return 12;
             }
             return 0;
         }
     }
 
+    private void updateInnerItems() {
+        int count = innerListView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = innerListView.getChildAt(a);
+            if (child instanceof InnerThemeView) {
+                ((InnerThemeView) child).update();
+            }
+        }
+    }
+
+    private void clearSelfDescriptions() {
+        selfDescriptions = null;
+        colorPickerDescriptions = null;
+    }
+
+    private void createSelfDescriptions() {
+        selfDescriptions = getThemeDescriptions();
+        ArrayList<ThemeDescription> list = new ArrayList<>();
+        if (colorPickerContentView != null) colorPickerContentView.addThemeDescriptions(list);
+        colorPickerDescriptions = list.toArray(new ThemeDescription[0]);
+    }
+
+    private void updateSelfDescriptions() {
+        if (selfDescriptions == null) return;
+        for (int i = 0; i < selfDescriptions.length; i++) {
+            String key = selfDescriptions[i].getCurrentKey();
+            selfDescriptions[i].setColor(Theme.getColor(key), false, false);
+        }
+
+        for (int i = 0; i < colorPickerDescriptions.length; i++) {
+            String key = colorPickerDescriptions[i].getCurrentKey();
+            colorPickerDescriptions[i].setColor(Theme.getColor(key), false, false);
+        }
+        if (colorPickerBottomSheet != null)
+            colorPickerBottomSheet.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+    }
+
+    private void updateAccentColorsRow() {
+        if (accentColorsListView == null) return;
+        accentColorsAdapter.setCustomColor(Theme.getCurrentTheme().accentColor);
+        int n = accentColorsListView.getChildCount();
+        for (int i = 0; i < n; i++) {
+            ((AccentColorsAdapter.ColorCheckView) accentColorsListView.getChildAt(i)).update();
+        }
+
+        n = accentColorsListView.getCachedChildCount();
+        for (int i = 0; i < n; i++) {
+            ((AccentColorsAdapter.ColorCheckView) accentColorsListView.getCachedChildAt(i)).update();
+        }
+    }
+
+    private int getDefaultPickerColor(int position){
+        int [] colors = defaultPickerColors.get(Theme.getCurrentTheme().assetName);
+        if(colors != null) {
+            return colors[position];
+        }
+        return 0;
+    }
+
     @Override
     public ThemeDescription[] getThemeDescriptions() {
         return new ThemeDescription[]{
                 new ThemeDescription(listView, ThemeDescription.FLAG_CELLBACKGROUNDCOLOR, new Class[]{TextSettingsCell.class, TextCheckCell.class, HeaderCell.class, BrightnessControlCell.class, ThemeTypeCell.class, ThemeCell.class, TextSizeCell.class, ChatListCell.class, NotificationsCheckCell.class}, null, null, null, Theme.key_windowBackgroundWhite),
                 new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundGray),
                 new ThemeDescription(innerListView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite),
-
                 new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault),
                 new ThemeDescription(listView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault),
                 new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon),
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
index cdb9c25e9..6beef6ea2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
@@ -17,39 +17,31 @@
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.ComposeShader;
-import android.graphics.LinearGradient;
 import android.graphics.Paint;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
 import android.graphics.PorterDuffXfermode;
-import android.graphics.RadialGradient;
 import android.graphics.Rect;
 import android.graphics.RectF;
-import android.graphics.Shader;
-import android.graphics.SweepGradient;
 import android.graphics.drawable.Drawable;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.InputType;
 import android.text.TextPaint;
 import android.text.TextUtils;
-import android.text.TextWatcher;
 import android.util.Property;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
 import android.widget.FrameLayout;
-import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.DownloadController;
+import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.ImageLocation;
@@ -59,24 +51,22 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.R;
-
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
 import org.telegram.ui.Cells.ChatActionCell;
 import org.telegram.ui.Cells.ChatMessageCell;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Cells.HeaderCell;
 import org.telegram.ui.Components.AnimationProperties;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.ColorPickerView;
 import org.telegram.ui.Components.CubicBezierInterpolator;
-import org.telegram.ui.Components.EditTextBoldCursor;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.MediaActionDrawable;
 import org.telegram.ui.Components.RadialProgress2;
@@ -89,9 +79,6 @@
 import java.io.FileOutputStream;
 import java.util.ArrayList;
 
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 public class WallpaperActivity extends BaseFragment implements DownloadController.FileDownloadProgressListener, NotificationCenter.NotificationCenterDelegate {
 
     private RecyclerListView listView;
@@ -114,7 +101,7 @@
     private HeaderCell intensityCell;
     private SeekBarView intensitySeekBar;
 
-    private ColorPicker colorPicker;
+    private ColorPickerView colorPicker;
 
     private ArrayList<Object> patterns;
     private TLRPC.TL_wallPaper selectedPattern;
@@ -164,328 +151,6 @@
         void didSetNewBackground();
     }
 
-    private class ColorPicker extends FrameLayout {
-
-        private LinearLayout linearLayout;
-
-        private final int paramValueSliderWidth = AndroidUtilities.dp(20);
-
-        private Paint colorWheelPaint;
-        private Paint valueSliderPaint;
-        private Paint circlePaint;
-        private Drawable circleDrawable;
-
-        private int centerX;
-        private int centerY;
-        private int lx;
-        private int ly;
-
-        boolean ignoreTextChange;
-
-        private Bitmap colorWheelBitmap;
-
-        private EditTextBoldCursor[] colorEditText = new EditTextBoldCursor[2];
-
-        private int colorWheelRadius;
-
-        private float[] colorHSV = new float[] { 0.0f, 0.0f, 1.0f };
-
-        private float[] hsvTemp = new float[3];
-        private LinearGradient colorGradient;
-
-        private boolean circlePressed;
-        private boolean colorPressed;
-
-        public ColorPicker(Context context) {
-            super(context);
-
-            setWillNotDraw(false);
-
-            circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            circleDrawable = context.getResources().getDrawable(R.drawable.knob_shadow).mutate();
-
-            colorWheelPaint = new Paint();
-            colorWheelPaint.setAntiAlias(true);
-            colorWheelPaint.setDither(true);
-
-            valueSliderPaint = new Paint();
-            valueSliderPaint.setAntiAlias(true);
-            valueSliderPaint.setDither(true);
-
-            linearLayout = new LinearLayout(context);
-            linearLayout.setOrientation(LinearLayout.HORIZONTAL);
-            addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 64, Gravity.LEFT | Gravity.TOP, 12, 14, 21, 0));
-            for (int a = 0; a < 2; a++) {
-                final int num = a;
-
-                colorEditText[a] = new EditTextBoldCursor(context);
-                colorEditText[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-                colorEditText[a].setHintColor(Theme.getColor(Theme.key_windowBackgroundWhiteHintText));
-                colorEditText[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
-                colorEditText[a].setBackgroundDrawable(null);
-                colorEditText[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
-                colorEditText[a].setCursorSize(AndroidUtilities.dp(20));
-                colorEditText[a].setCursorWidth(1.5f);
-                colorEditText[a].setSingleLine(true);
-                colorEditText[a].setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
-                colorEditText[a].setHeaderHintColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlueHeader));
-                colorEditText[a].setTransformHintToHeader(true);
-                colorEditText[a].setLineColors(Theme.getColor(Theme.key_windowBackgroundWhiteInputField), Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated), Theme.getColor(Theme.key_windowBackgroundWhiteRedText3));
-                colorEditText[a].setPadding(0, 0, 0, 0);
-                if (a == 0) {
-                    colorEditText[a].setInputType(InputType.TYPE_CLASS_TEXT);
-                    colorEditText[a].setHintText(LocaleController.getString("BackgroundHexColorCode", R.string.BackgroundHexColorCode));
-                } else {
-                    colorEditText[a].setInputType(InputType.TYPE_CLASS_NUMBER);
-                    colorEditText[a].setHintText(LocaleController.getString("BackgroundBrightness", R.string.BackgroundBrightness));
-                }
-                colorEditText[a].setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-                InputFilter[] inputFilters = new InputFilter[1];
-                inputFilters[0] = new InputFilter.LengthFilter(a == 0 ? 7 : 3);
-                colorEditText[a].setFilters(inputFilters);
-                linearLayout.addView(colorEditText[a], LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, a == 0 ? 0.67f : 0.31f, 0, 0, a != 1 ? 23 : 0, 0));
-                colorEditText[a].addTextChangedListener(new TextWatcher() {
-                    @Override
-                    public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                    }
-
-                    @Override
-                    public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                    }
-
-                    @Override
-                    public void afterTextChanged(Editable editable) {
-                        if (ignoreTextChange) {
-                            return;
-                        }
-                        ignoreTextChange = true;
-                        if (num == 0) {
-                            for (int a = 0; a < editable.length(); a++) {
-                                char ch = editable.charAt(a);
-                                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'f' || ch >= 'A' && ch <= 'F' || ch == '#' && a == 0)) {
-                                    editable.replace(a, a + 1, "");
-                                    a--;
-                                }
-                            }
-                            if (editable.length() == 0) {
-                                editable.append("#");
-                            } else if (editable.charAt(0) != '#') {
-                                editable.insert(0, "#");
-                            }
-                            try {
-                                setColor(Integer.parseInt(editable.toString().substring(1), 16) | 0xff000000);
-                            } catch (Exception e) {
-                                setColor(0xffffffff);
-                            }
-                            WallpaperActivity.this.setBackgroundColor(getColor());
-                            colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
-                        } else {
-                            int value = Utilities.parseInt(editable.toString());
-                            if (value > 255 || value < 0) {
-                                if (value > 255) {
-                                    value = 255;
-                                } else {
-                                    value = 0;
-                                }
-                                editable.replace(0, editable.length(), "" + value);
-                            }
-                            colorHSV[2] = value / 255.0f;
-                            WallpaperActivity.this.setBackgroundColor(getColor());
-                            int red = Color.red(backgroundColor);
-                            int green = Color.green(backgroundColor);
-                            int blue = Color.blue(backgroundColor);
-                            colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
-                        }
-                        ColorPicker.this.invalidate();
-                        ignoreTextChange = false;
-                    }
-                });
-                colorEditText[a].setOnEditorActionListener((textView, i, keyEvent) -> {
-                    if (i == EditorInfo.IME_ACTION_DONE) {
-                        AndroidUtilities.hideKeyboard(textView);
-                        return true;
-                    }
-                    return false;
-                });
-            }
-        }
-
-        @Override
-        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            int widthSize = MeasureSpec.getSize(widthMeasureSpec);
-            int heightSize = MeasureSpec.getSize(heightMeasureSpec);
-            int size = Math.min(widthSize, heightSize);
-            measureChild(linearLayout, MeasureSpec.makeMeasureSpec(widthSize - AndroidUtilities.dp(42), MeasureSpec.EXACTLY), heightMeasureSpec);
-            setMeasuredDimension(size, size);
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            centerX = getWidth() / 2 - paramValueSliderWidth * 2 + AndroidUtilities.dp(11);
-            centerY = getHeight() / 2 + AndroidUtilities.dp(34);
-
-            canvas.drawBitmap(colorWheelBitmap, centerX - colorWheelRadius, centerY - colorWheelRadius, null);
-
-            float hueAngle = (float) Math.toRadians(colorHSV[0]);
-            int colorPointX = (int) (-Math.cos(hueAngle) * colorHSV[1] * colorWheelRadius) + centerX;
-            int colorPointY = (int) (-Math.sin(hueAngle) * colorHSV[1] * colorWheelRadius) + centerY;
-
-            float pointerRadius = 0.075f * colorWheelRadius;
-
-            hsvTemp[0] = colorHSV[0];
-            hsvTemp[1] = colorHSV[1];
-            hsvTemp[2] = 1.0f;
-
-            drawPointerArrow(canvas, colorPointX, colorPointY, Color.HSVToColor(hsvTemp));
-
-            lx = centerX + colorWheelRadius + paramValueSliderWidth * 2;
-            ly = centerY - colorWheelRadius;
-            int width = AndroidUtilities.dp(9);
-            int height = colorWheelRadius * 2;
-            if (colorGradient == null) {
-                colorGradient = new LinearGradient(lx, ly, lx + width, ly + height, new int[]{Color.BLACK, Color.HSVToColor(hsvTemp)}, null, Shader.TileMode.CLAMP);
-            }
-            valueSliderPaint.setShader(colorGradient);
-            canvas.drawRect(lx, ly, lx + width, ly + height, valueSliderPaint);
-            drawPointerArrow(canvas, lx + width / 2, (int) (ly + colorHSV[2] * height), Color.HSVToColor(colorHSV));
-        }
-
-        private void drawPointerArrow(Canvas canvas, int x, int y, int color) {
-            int side = AndroidUtilities.dp(13);
-            circleDrawable.setBounds(x - side, y - side, x + side, y + side);
-            circleDrawable.draw(canvas);
-
-            circlePaint.setColor(0xffffffff);
-            canvas.drawCircle(x, y, AndroidUtilities.dp(11), circlePaint);
-            circlePaint.setColor(color);
-            canvas.drawCircle(x, y, AndroidUtilities.dp(9), circlePaint);
-        }
-
-        @Override
-        protected void onSizeChanged(int width, int height, int oldw, int oldh) {
-            if (colorWheelRadius != AndroidUtilities.dp(120)) {
-                colorWheelRadius = AndroidUtilities.dp(120);//Math.max(1, width / 2 - paramValueSliderWidth - AndroidUtilities.dp(20));
-                colorWheelBitmap = createColorWheelBitmap(colorWheelRadius * 2, colorWheelRadius * 2);
-                colorGradient = null;
-            }
-        }
-
-        private Bitmap createColorWheelBitmap(int width, int height) {
-            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
-
-            int colorCount = 12;
-            int colorAngleStep = 360 / 12;
-            int[] colors = new int[colorCount + 1];
-            float[] hsv = new float[]{0.0f, 1.0f, 1.0f};
-            for (int i = 0; i < colors.length; i++) {
-                hsv[0] = (i * colorAngleStep + 180) % 360;
-                colors[i] = Color.HSVToColor(hsv);
-            }
-            colors[colorCount] = colors[0];
-
-            SweepGradient sweepGradient = new SweepGradient(width / 2, height / 2, colors, null);
-            RadialGradient radialGradient = new RadialGradient(width / 2, height / 2, colorWheelRadius, 0xffffffff, 0x00ffffff, Shader.TileMode.CLAMP);
-            ComposeShader composeShader = new ComposeShader(sweepGradient, radialGradient, PorterDuff.Mode.SRC_OVER);
-
-            colorWheelPaint.setShader(composeShader);
-
-            Canvas canvas = new Canvas(bitmap);
-            canvas.drawCircle(width / 2, height / 2, colorWheelRadius, colorWheelPaint);
-
-            return bitmap;
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent event) {
-            int action = event.getAction();
-            switch (action) {
-                case MotionEvent.ACTION_DOWN:
-                case MotionEvent.ACTION_MOVE:
-
-                    int x = (int) event.getX();
-                    int y = (int) event.getY();
-                    int cx = x - centerX;
-                    int cy = y - centerY;
-                    double d = Math.sqrt(cx * cx + cy * cy);
-
-                    if (circlePressed || !colorPressed && d <= colorWheelRadius) {
-                        if (d > colorWheelRadius) {
-                            d = colorWheelRadius;
-                        }
-                        if (!circlePressed) {
-                            getParent().requestDisallowInterceptTouchEvent(true);
-                        }
-                        circlePressed = true;
-                        colorHSV[0] = (float) (Math.toDegrees(Math.atan2(cy, cx)) + 180.0f);
-                        colorHSV[1] = Math.max(0.0f, Math.min(1.0f, (float) (d / colorWheelRadius)));
-                        colorGradient = null;
-                    }
-                    if (colorPressed || !circlePressed && x >= lx && x <= lx + paramValueSliderWidth && y >= ly && y <= ly + colorWheelRadius * 2) {
-                        float value = (y - ly) / (colorWheelRadius * 2.0f);
-                        if (value < 0.0f) {
-                            value = 0.0f;
-                        } else if (value > 1.0f) {
-                            value = 1.0f;
-                        }
-                        colorHSV[2] = value;
-                        if (!colorPressed) {
-                            getParent().requestDisallowInterceptTouchEvent(true);
-                        }
-                        colorPressed = true;
-                    }
-                    if (colorPressed || circlePressed) {
-                        WallpaperActivity.this.setBackgroundColor(getColor());
-                        if (!ignoreTextChange) {
-                            int red = Color.red(backgroundColor);
-                            int green = Color.green(backgroundColor);
-                            int blue = Color.blue(backgroundColor);
-                            ignoreTextChange = true;
-                            colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
-                            colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
-                            for (int b = 0; b < 2; b++) {
-                                colorEditText[b].setSelection(colorEditText[b].length());
-                            }
-                            ignoreTextChange = false;
-                        }
-                        invalidate();
-                    }
-
-                    return true;
-                case MotionEvent.ACTION_UP:
-                    colorPressed = false;
-                    circlePressed = false;
-                    break;
-            }
-            return super.onTouchEvent(event);
-        }
-
-        public void setColor(int color) {
-            if (!ignoreTextChange) {
-                ignoreTextChange = true;
-                int red = Color.red(color);
-                int green = Color.green(color);
-                int blue = Color.blue(color);
-                Color.colorToHSV(color, colorHSV);
-                colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
-                colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
-                for (int b = 0; b < 2; b++) {
-                    colorEditText[b].setSelection(colorEditText[b].length());
-                }
-                ignoreTextChange = false;
-            } else {
-                Color.colorToHSV(color, colorHSV);
-            }
-            colorGradient = null;
-            invalidate();
-        }
-
-        public int getColor() {
-            return (Color.HSVToColor(colorHSV) & 0x00ffffff) | 0xff000000;
-        }
-    }
-
     private class PatternCell extends BackupImageView implements DownloadController.FileDownloadProgressListener {
 
         private RectF rect = new RectF();
@@ -1353,7 +1018,8 @@ public boolean onTouchEvent(MotionEvent event) {
                     });
                     patternLayout[a].addView(intensitySeekBar, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 30, Gravity.TOP | Gravity.LEFT, 9, 153, 9, 0));
                 } else {
-                    colorPicker = new ColorPicker(context);
+                    colorPicker = new ColorPickerView(context);
+                    colorPicker.setListener(this::setBackgroundColor);
                     patternLayout[a].addView(colorPicker, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.CENTER_HORIZONTAL, 0, 0, 0, 48));
                 }
             }
@@ -1960,14 +1626,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
         }
 
         if (colorPicker != null) {
-            for (int a = 0; a < colorPicker.colorEditText.length; a++) {
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteBlackText));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteHintText));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteBlueHeader));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_windowBackgroundWhiteInputFieldActivated));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteRedText3));
-            }
+            colorPicker.addThemeDescriptions(arrayList);
         }
 
         arrayList.add(new ThemeDescription(intensitySeekBar, 0, new Class[]{SeekBarView.class}, new String[]{"innerPaint1"}, null, null, null, Theme.key_player_progressBackground));
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index a61129ebc..0b1c60cd4 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -1199,7 +1199,6 @@
     <string name="AutoNightBrightness">مؤشر السطوع</string>
     <string name="AutoNightBrightnessInfo">قم بالتبديل للنمط الليلي عند انخفاض الإضاءة المحيطة إلى %1$d%% أو أقل.</string>
     <string name="ThemeDark">مظلم</string>
-    <string name="ThemeDarkBlue">أزرق غامق</string>
     <string name="ThemeGraphite">غرافيت</string>
     <string name="ThemeArcticBlue">ثلجي</string>
     <string name="ThemeBlue">أزرق</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 6ec4be24e..2b68dfa13 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -1199,7 +1199,6 @@
     <string name="AutoNightBrightness">Helligkeitsgrenze</string>
     <string name="AutoNightBrightnessInfo">Zum Nachtthema wechseln, wenn die Umgebungshelligkeit weniger als %1$d%% beträgt.</string>
     <string name="ThemeDark">Dunkel</string>
-    <string name="ThemeDarkBlue">Dunkel (Blau)</string>
     <string name="ThemeGraphite">Graphit</string>
     <string name="ThemeArcticBlue">Arktisblau</string>
     <string name="ThemeBlue">Blau</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 330bdd015..4659d3da5 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -1199,7 +1199,6 @@
     <string name="AutoNightBrightness">Nivel de luminosidad</string>
     <string name="AutoNightBrightnessInfo">Cambia a tu tema nocturno preferido cuando la luminosidad del entorno sea menor a un %1$d%%.</string>
     <string name="ThemeDark">Oscuro</string>
-    <string name="ThemeDarkBlue">Azul oscuro</string>
     <string name="ThemeGraphite">Grafito</string>
     <string name="ThemeArcticBlue">Azul ártico</string>
     <string name="ThemeBlue">Azul</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 209749fb5..b3ee49af6 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -1199,7 +1199,6 @@
     <string name="AutoNightBrightness">Soglia luminosità</string>
     <string name="AutoNightBrightnessInfo">Passa al tema notte quando la luce ambientale è inferiore al %1$d%%.</string>
     <string name="ThemeDark">Scuro</string>
-    <string name="ThemeDarkBlue">Blu scuro</string>
     <string name="ThemeGraphite">Grafite</string>
     <string name="ThemeArcticBlue">Blu artico</string>
     <string name="ThemeBlue">Blu</string>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index 60146d531..d444b86bd 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -1199,7 +1199,6 @@
     <string name="AutoNightBrightness">밝기 경계</string>
     <string name="AutoNightBrightnessInfo">주변 밝기가 %1$d%% 아래일 때 선호하시는 야간 테마로 전환합니다.</string>
     <string name="ThemeDark">다크</string>
-    <string name="ThemeDarkBlue">검푸른색</string>
     <string name="ThemeGraphite">흑연색</string>
     <string name="ThemeArcticBlue">북극 파랑</string>
     <string name="ThemeBlue">파랑</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 1d67d318a..51be19cd7 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -1199,7 +1199,6 @@
     <string name="AutoNightBrightness">Drempelwaarde omgevingslicht</string>
     <string name="AutoNightBrightnessInfo">Schakel om naar je nachtthema als het omgevingslicht minder dan  %1$d%% is.</string>
     <string name="ThemeDark">Donker</string>
-    <string name="ThemeDarkBlue">Donkerblauw</string>
     <string name="ThemeGraphite">Grafiet</string>
     <string name="ThemeArcticBlue">Arctisch Blauw</string>
     <string name="ThemeBlue">Blauw</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index e2ff41795..f583bafef 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -1199,7 +1199,6 @@
     <string name="AutoNightBrightness">Porcentagem do brilho</string>
     <string name="AutoNightBrightnessInfo">Alterna para o seu tema noturno preferido quando a luz ambiente estiver abaixo de %1$d%%.</string>
     <string name="ThemeDark">Escuro</string>
-    <string name="ThemeDarkBlue">Azul Escuro</string>
     <string name="ThemeGraphite">Grafite</string>
     <string name="ThemeArcticBlue">Azul Ártico</string>
     <string name="ThemeBlue">Azul</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 301e64c54..57cbb40bf 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <string name="AppName">Telegram</string>
+    <string name="AppName">Telegram Xaxtix</string>
     <string name="AppNameBeta">Telegram Beta</string>
     <string name="LanguageName">English</string>
     <string name="English">English</string>
@@ -1199,7 +1199,7 @@
     <string name="AutoNightBrightness">Brightness threshold</string>
     <string name="AutoNightBrightnessInfo">Switch to your preferred night theme when ambient lighting falls below %1$d%%.</string>
     <string name="ThemeDark">Dark</string>
-    <string name="ThemeDarkBlue">Dark Blue</string>
+    <string name="ThemeDarkTint">Dark Tint</string>
     <string name="ThemeGraphite">Graphite</string>
     <string name="ThemeArcticBlue">Arctic Blue</string>
     <string name="ThemeBlue">Blue</string>
