diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
index eb70d0e8c..9f7c5bb8e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Adapters;
 
+import android.app.Activity;
 import android.content.Context;
 import android.view.View;
 import android.view.ViewGroup;
@@ -18,11 +19,15 @@
 import org.telegram.messenger.object.PostObject;
 import org.telegram.ui.Cells.PostCell;
 import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.PhotoViewer;
+import org.telegram.ui.PostsActivity;
 import org.telegram.utils.StringUtils;
 
 // TODO-aragats
 public class PostsAdapter extends RecyclerView.Adapter {
 
+    //TODO find other way to get postActivity.
+    private PostsActivity postsActivity;
     private Context mContext;
     //TODO ???
     private boolean serverOnly;
@@ -36,9 +41,10 @@ public Holder(View itemView) {
         }
     }
 
-    public PostsAdapter(Context context, boolean onlyFromServer) {
+    public PostsAdapter(Context context, boolean onlyFromServer, PostsActivity postsActivity) {
         mContext = context;
         serverOnly = onlyFromServer;
+        this.postsActivity = postsActivity;
     }
 
     public void setOpenedPostId(String id) {
@@ -100,6 +106,43 @@ public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
             }
 
             cell.setPostObject(postObject, i, serverOnly);
+
+//TODO in new version. This in  onCreateViewHolder  method on ChatActivity
+            //Set delegate to open photo
+            ((PostCell) cell).setDelegate(new PostCell.PostCellDelegate() {
+                @Override
+                public void didClickedImage(PostCell cell) {
+                    PostObject postObject = cell.getPostObject();
+//                    mContext - is getParentActivity form Post Activity. look at instance creation of PostAdapter
+                    PhotoViewer.getInstance().setParentActivity((Activity)mContext);
+                    PhotoViewer.getInstance().openPhoto(postObject, postsActivity);
+                }
+
+                @Override
+                public void didPressedOther(PostCell cell) {
+
+                }
+
+//                @Override
+//                public void didPressedUserAvatar(PostCell cell, UserObject userObject) {
+//
+//                }
+
+                @Override
+                public void didPressedCancelSendButton(PostCell cell) {
+
+                }
+
+                @Override
+                public void didLongPressed(PostCell cell) {
+
+                }
+
+                @Override
+                public boolean canPerformActions() {
+                    return postsActivity != null && postsActivity.getActionBar() != null && !postsActivity.getActionBar().isActionModeShowed();
+                }
+            });
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index 50cb913dd..b055cff28 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -20,6 +20,7 @@
 import android.text.TextUtils;
 import android.text.util.Linkify;
 import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.Emoji;
@@ -35,6 +36,21 @@
 
 public class PostCell extends BaseCell {
 
+
+    public static interface PostCellDelegate {
+        public abstract void didClickedImage(PostCell cell);
+
+        public abstract void didPressedOther(PostCell cell);
+
+//        public abstract void didPressedUserAvatar(PostCell cell, UserObject userObject);
+
+        public abstract void didPressedCancelSendButton(PostCell cell);
+
+        public abstract void didLongPressed(PostCell cell);
+
+        public abstract boolean canPerformActions();
+    }
+
     private static TextPaint namePaint;
     private static TextPaint nameEncryptedPaint;
     private static TextPaint nameUnknownPaint;
@@ -130,6 +146,9 @@
 
     private boolean isSelected;
 
+//Photo
+    private PostCellDelegate delegate;
+
     public PostCell(Context context) {
         super(context);
 
@@ -208,6 +227,10 @@ public PostCell(Context context) {
         imageDrawable = new AvatarDrawable();
     }
 
+    public PostObject getPostObject() {
+        return postObject;
+    }
+
     //TODO. I have 2 method for setting posts. setPostObject and setPost.
     public void setPostObject(PostObject postObject, int i, boolean server) {
         //TODO I should store id or object. And retrieve from Controller by id.
@@ -247,7 +270,7 @@ protected void onAttachedToWindow() {
         photoImage.onAttachedToWindow();
     }
 
-    @Override
+    @Override //TODO setMeasure. size of post.
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(72) + (useSeparator ? 1 : 0));
         int textHeight = 0;
@@ -277,7 +300,37 @@ public boolean onTouchEvent(MotionEvent event) {
                 getBackground().setHotspot(event.getX(), event.getY());
             }
         }
-        return super.onTouchEvent(event);
+
+        float x = event.getX();
+        float y = event.getY();
+
+        boolean result = false;
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (delegate == null || delegate.canPerformActions()) {
+
+                if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+//                    imagePressed = true;
+                    result = true;
+                }
+            }
+
+            if (result) {
+                startCheckLongPress();
+            }
+
+        } else if (event.getAction() == MotionEvent.ACTION_UP) {
+//            imagePressed = false;
+            playSoundEffect(SoundEffectConstants.CLICK);
+            didClickedImage();
+            invalidate();
+        }
+
+        if (!result) {
+            result = super.onTouchEvent(event);
+        }
+
+        return result;
+//        return super.onTouchEvent(event);
     }
 
     public void buildLayout() {
@@ -916,4 +969,21 @@ private boolean containsUrls(String message) {
         }
         return false;
     }
+
+
+    private void didClickedImage() {
+        if (this.delegate != null) {
+            this.delegate.didClickedImage(this);
+        }
+    }
+
+
+    public void setDelegate(PostCellDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+
+    public ImageReceiver getPhotoImage() {
+        return photoImage;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 270962eda..8f52c05a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -36,6 +36,7 @@
 import android.view.VelocityTracker;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.AdapterView;
@@ -64,6 +65,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.android.MessageObject;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.object.PostObject;
 import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.android.AnimationCompat.AnimatorSetProxy;
@@ -72,6 +74,7 @@
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.ClippingImageView;
 import org.telegram.android.ImageReceiver;
@@ -93,6 +96,14 @@
 
 public class PhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
 
+
+    //TODO-aragats new
+    private PostPhotoViewerProvider postPlaceProvider;
+    //TODO-aragats new
+    private ArrayList<PostObject> imagesPostObjectArr = new ArrayList<PostObject>();
+    //TODO-aragats new
+    private PostObject currentPostObjectObject;
+
     private int classGuid;
     private PhotoViewerProvider placeProvider;
     private boolean isVisible;
@@ -824,6 +835,7 @@ public boolean dispatchKeyEventPreIme(KeyEvent event) {
         actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
         containerView.addView(actionBar, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
+        //TODO save image to gallery
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
@@ -835,6 +847,13 @@ public void onItemClick(int id) {
                     closePhoto(true, false);
                 } else if (id == gallery_menu_save) {
                     File f = null;
+                    //TODO-aragats new
+                    if(currentPostObjectObject != null) {
+                        currentFileNames[0] = Utilities.MD5(currentPostObjectObject.getImage().getUrl()) + ".jpg";
+                        f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), currentFileNames[0]);
+                    }
+                    else
+                        //new
                     if (currentMessageObject != null) {
                         f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
                     } else if (currentFileLocation != null) {
@@ -2086,6 +2105,9 @@ private void updateSelectedCount() {
     private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<MessageObject> messages, final ArrayList<Object> photos, int index, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
         currentMessageObject = null;
+        //TODO-aragat new
+        currentPostObjectObject = null;
+        //
         currentFileLocation = null;
         currentPathObject = null;
         currentIndex = -1;
@@ -2104,6 +2126,9 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         needCaptionLayout = false;
         canShowBottom = true;
         imagesArr.clear();
+        //TODO-aragats new
+        imagesPostObjectArr.clear();
+        //
         imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
         avatarsArr.clear();
@@ -2907,6 +2932,362 @@ public void run() {
         }
     }
 
+
+    //TODO-legacy rewrite this method accrodign to new openPhoto because this version is legacy from previous revision
+    //TODO my openPhoto
+    public void openPhoto(final PostObject postObject, final PostPhotoViewerProvider provider) {
+        if (parentActivity == null || isVisible || provider == null || checkAnimation()) {
+            return;
+        }
+        //filocation we do not need here. messageObject is used to find ChatMediaCell by id from messageObject. // method is implemented in provider.
+        final PlaceProviderObject object = provider.getPlaceForPhoto(postObject);
+        if (object == null) {
+            return;
+        }
+
+        try {
+            if (windowView.getParent() != null) {
+                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+                wm.removeView(windowView);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+
+        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+        try {
+            wm.addView(windowView, windowLayoutParams);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return;
+        }
+
+        actionBar.setTitle(LocaleController.formatString("Of", org.telegram.messenger.R.string.Of, 1, 1));
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
+
+        postPlaceProvider = provider;
+
+        if (velocityTracker == null) {
+            velocityTracker = VelocityTracker.obtain();
+        }
+
+        disableShowCheck = true;
+        animationInProgress = 1;
+        onPhotoShow(postObject, object);
+        isVisible = true;
+        backgroundDrawable.setAlpha(255);
+        toggleActionBar(true, false);
+
+        AndroidUtilities.lockOrientation(parentActivity);
+
+        final Rect drawRegion = object.imageReceiver.getDrawRegion();
+
+        animatingImageView.setVisibility(View.VISIBLE);
+        animatingImageView.setRadius(object.radius);
+        animatingImageView.setNeedRadius(object.radius != 0);
+        animatingImageView.setImageBitmap(object.thumb);
+
+        ViewProxy.setAlpha(animatingImageView, 1.0f);
+        ViewProxy.setPivotX(animatingImageView, 0.0f);
+        ViewProxy.setPivotY(animatingImageView, 0.0f);
+        ViewProxy.setScaleX(animatingImageView, 1.0f);
+        ViewProxy.setScaleY(animatingImageView, 1.0f);
+        ViewProxy.setTranslationX(animatingImageView, object.viewX + drawRegion.left);
+        ViewProxy.setTranslationY(animatingImageView, object.viewY + drawRegion.top);
+        final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
+        layoutParams.width = drawRegion.right - drawRegion.left;
+        layoutParams.height = drawRegion.bottom - drawRegion.top;
+        animatingImageView.setLayoutParams(layoutParams);
+
+        containerView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                containerView.getViewTreeObserver().removeOnPreDrawListener(this);
+
+                float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
+                float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
+                float scale = scaleX > scaleY ? scaleY : scaleX;
+                float width = layoutParams.width * scale;
+                float height = layoutParams.height * scale;
+                float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
+                float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
+                int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+                int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+
+                int coords2[] = new int[2];
+                object.parentView.getLocationInWindow(coords2);
+                int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
+                if (clipTop < 0) {
+                    clipTop = 0;
+                }
+                int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
+                if (clipBottom < 0) {
+                    clipBottom = 0;
+                }
+                clipTop = Math.max(clipTop, clipVertical);
+                clipBottom = Math.max(clipBottom, clipVertical);
+
+                AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+                animatorSet.playTogether(
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleX", scale),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleY", scale),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationX", xPos),
+                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", yPos),
+                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0, 255),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipHorizontal", clipHorizontal, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipTop", clipTop, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipBottom", clipBottom, 0),
+                        ObjectAnimatorProxy.ofInt(animatingImageView, "radius", 0),
+                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f, 1.0f)
+                );
+
+                animationEndRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        animationInProgress = 0;
+                        transitionAnimationStartTime = 0;
+                        containerView.invalidate();
+                        animatingImageView.setVisibility(View.GONE);
+                        AndroidUtilities.unlockOrientation(parentActivity);
+                        if (showAfterAnimation != null) {
+                            showAfterAnimation.imageReceiver.setVisible(true, true);
+                        }
+                        if (hideAfterAnimation != null) {
+                            hideAfterAnimation.imageReceiver.setVisible(false, true);
+                        }
+                    }
+                };
+
+                animatorSet.setDuration(200);
+                animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        if (animationEndRunnable != null) {
+                            animationEndRunnable.run();
+                            animationEndRunnable = null;
+                        }
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        onAnimationEnd(animation);
+                    }
+                });
+                transitionAnimationStartTime = System.currentTimeMillis();
+                animatorSet.start();
+// TODO does not work now &
+//                animatingImageView.setOnDrawListener(new ClippingImageView.onDrawListener() {
+//                    @Override
+//                    public void onDraw() {
+//                        disableShowCheck = false;
+//                        animatingImageView.setOnDrawListener(null);
+//                        object.imageReceiver.setVisible(false, true);
+//                    }
+//                });
+                return true;
+            }
+        });
+    }
+
+
+    //TODO-aragats my photo opener.
+    private void onPhotoShow(final PostObject postObject, final PlaceProviderObject object) {
+        classGuid = ConnectionsManager.getInstance().generateClassGuid();
+//        currentMessageObject = null;  // TODO I removed it because it break getting  currentPlaceObject
+        currentFileLocation = null;
+        currentPathObject = null;
+        currentIndex = -1;
+        currentFileNames[0] = null;
+        currentFileNames[1] = null;
+        currentFileNames[2] = null;
+        avatarsUserId = 0;
+        currentDialogId = 0;
+        totalImagesCount = 0;
+        isFirstLoading = true;
+        needSearchImageInArr = false;
+        loadingMoreImages = false;
+        cacheEndReached = false;
+        opennedFromMedia = false;
+        canShowBottom = true;
+        imagesArr.clear();
+        //new
+        imagesPostObjectArr.clear();
+        imagesArrLocations.clear();
+        imagesArrLocationsSizes.clear();
+        avatarsArr.clear();
+        imagesArrLocals.clear();
+        imagesByIds.clear();
+        imagesArrTemp.clear();
+        imagesByIdsTemp.clear();
+        currentUserAvatarLocation = null;
+        currentThumb = object.thumb;
+        menuItem.setVisibility(View.VISIBLE);
+        bottomLayout.setVisibility(View.VISIBLE);
+        checkImageView.setVisibility(View.GONE);
+        pickerView.setVisibility(View.GONE);
+
+
+        for (int a = 0; a < 3; a++) {
+            if (radialProgressViews[a] != null) {
+                radialProgressViews[a].setBackgroundState(-1, false);
+            }
+        }
+
+        if (postObject != null) {
+            imagesPostObjectArr.add(postObject);
+            menuItem.showSubItem(gallery_menu_showall);
+            setImageIndexPost(0, true);
+        }
+
+    }
+
+
+    // TODO-aragats new my
+    public void setImageIndexPost(int index, boolean init) {
+        if (currentIndex == index) {
+            return;
+        }
+        if (!init) {
+            currentThumb = null;
+        }
+        currentFileNames[0] = getFileName(index);
+        currentFileNames[1] = getFileName(index + 1);
+        currentFileNames[2] = getFileName(index - 1);
+        postPlaceProvider.willSwitchFromPhoto(currentPostObjectObject);
+        int prevIndex = currentIndex;
+        currentIndex = index;
+
+        boolean sameImage = false;
+
+//        currentMessageObject = imagesArr.get(currentIndex); // TODO is important to load data.
+
+        if (!imagesPostObjectArr.isEmpty()) {
+            //TODO in new version there is not deleteButton
+//            deleteButton.setVisibility(View.VISIBLE);
+            currentPostObjectObject = imagesPostObjectArr.get(currentIndex);
+
+            nameTextView.setText(ContactsController.formatName(this.currentPostObjectObject.getVenueName(), ""));
+            dateTextView.setText(LocaleController.formatterYearMax.format(currentPostObjectObject.getCreatedDate()));
+
+            actionBar.setTitle(LocaleController.formatString("Of", org.telegram.messenger.R.string.Of, (totalImagesCount - imagesPostObjectArr.size()) + currentIndex + 1, totalImagesCount));
+
+            menuItem.showSubItem(gallery_menu_save);
+            shareButton.setVisibility(View.VISIBLE);
+        }
+
+
+        if (currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(true, true);
+            } else {
+                showAfterAnimation = currentPlaceObject;
+            }
+        }
+        //TODO delete currentMessageObject
+        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPostObjectObject);
+        if (currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(false, true);
+            } else {
+                hideAfterAnimation = currentPlaceObject;
+            }
+        }
+
+        if (!sameImage) {
+            draggingDown = false;
+            translationX = 0;
+            translationY = 0;
+            scale = 1;
+            animateToX = 0;
+            animateToY = 0;
+            animateToScale = 1;
+            //TODO in new version this parameter is 0;
+//            animationDuration = 0;
+            animationStartTime = 0;
+
+            pinchStartDistance = 0;
+            pinchStartScale = 1;
+            pinchCenterX = 0;
+            pinchCenterY = 0;
+            pinchStartX = 0;
+            pinchStartY = 0;
+            moveStartX = 0;
+            moveStartY = 0;
+            zooming = false;
+            moving = false;
+            doubleTap = false;
+            invalidCoords = false;
+            canDragDown = true;
+            changingPage = false;
+            switchImageAfterAnimation = 0;
+            canZoom = currentFileNames[0] != null && !currentFileNames[0].endsWith("mp4") && radialProgressViews[0].backgroundState != 0;
+            canZoom = true; //TODO MY Aragats
+            updateMinMax(scale);
+        }
+
+        if (prevIndex == -1) {
+            setIndexToImagePost(centerImage, currentIndex);
+            setIndexToImagePost(rightImage, currentIndex + 1);
+            setIndexToImagePost(leftImage, currentIndex - 1);
+
+            for (int a = 0; a < 3; a++) {
+                checkProgress(a, false); //currentFileNames all element = null
+            }
+        } else {
+            checkProgress(0, false);
+            if (prevIndex > currentIndex) {
+                ImageReceiver temp = rightImage;
+                rightImage = centerImage;
+                centerImage = leftImage;
+                leftImage = temp;
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[2];
+                radialProgressViews[2] = tempProgress;
+                setIndexToImagePost(leftImage, currentIndex - 1);
+
+                checkProgress(1, false);
+                checkProgress(2, false);
+            } else if (prevIndex < currentIndex) {
+                ImageReceiver temp = leftImage;
+                leftImage = centerImage;
+                centerImage = rightImage;
+                rightImage = temp;
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[1];
+                radialProgressViews[1] = tempProgress;
+                setIndexToImagePost(rightImage, currentIndex + 1);
+
+                checkProgress(1, false);
+                checkProgress(2, false);
+            }
+        }
+    }
+
+    //TODO-aragats my new
+    private void setIndexToImagePost(ImageReceiver imageReceiver, int index) {
+
+        PostObject postObject = null;
+        if (!imagesPostObjectArr.isEmpty() && index < imagesPostObjectArr.size() && index >= 0) {
+            postObject = imagesPostObjectArr.get(index);
+        }
+
+        //TODO set Image for imageReceiver
+        if (postObject != null) {
+            imageReceiver.setImage(postObject.getImage().getUrl(), null, new AvatarDrawable(), null, 0);
+        } else {
+            imageReceiver.setImageBitmap((Bitmap) null);
+        }
+
+    }
+
     public void closePhoto(boolean animated, boolean fromEditMode) {
         if (!fromEditMode && currentEditMode != 0) {
             if (currentEditMode == 1) {
@@ -2959,7 +3340,19 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
         }
         ConnectionsManager.getInstance().cancelRpcsForClassGuid(classGuid);
 
-        final PlaceProviderObject object = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+
+        //WAS
+//        final PlaceProviderObject object = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+
+        //NOW
+        PlaceProviderObject object1 = null;
+        if (placeProvider != null) {
+            object1 = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        } else if (this.postPlaceProvider != null) {
+            object1 = this.postPlaceProvider.getPlaceForPhoto(currentPostObjectObject);
+        }
+        //TODO
+        final PlaceProviderObject object = object1;
 
         if (animated) {
             animationInProgress = 1;
@@ -3139,6 +3532,9 @@ private void onPhotoClosed(PlaceProviderObject object) {
         isVisible = false;
         disableShowCheck = true;
         currentMessageObject = null;
+        //TODO-aragats my custom
+        currentPostObjectObject = null;
+        //
         currentFileLocation = null;
         currentPathObject = null;
         currentThumb = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
new file mode 100644
index 000000000..8b6871fc9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
@@ -0,0 +1,48 @@
+package org.telegram.ui;
+
+import android.graphics.Bitmap;
+
+import org.telegram.android.MessageObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.object.PostObject;
+
+/**
+ * Created by aragats on 05/07/15.
+ */
+//TODO-aragats. This is copy form PhotoViewerProvvider from PhotoViewer.
+public interface PostPhotoViewerProvider {
+
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(PostObject postObject);
+
+//    Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+
+//    void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+
+    public void willSwitchFromPhoto(PostObject postObject);
+
+
+    void willHidePhotoViewer();
+
+    boolean isPhotoChecked(int index);
+
+    void setPhotoChecked(int index);
+
+    void cancelButtonPressed();
+
+    void sendButtonPressed(int index);
+
+    int getSelectedCount();
+
+    void updatePhotoAtIndex(int index);
+
+
+    public static interface MyPhotoViewerProvider {
+        public void willSwitchFromPhoto(PostObject postObject);
+        public void willHidePhotoViewer();
+        public boolean isPhotoChecked(int index);
+        public void setPhotoChecked(int index);
+        public void cancelButtonPressed();
+        public void sendButtonPressed(int index);
+        public int getSelectedCount();
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index d0b3b9000..5fd0ce5c5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -38,6 +38,7 @@
 import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.ContactsController;
+import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.PostsController;
@@ -66,9 +67,9 @@
 /*
 TODO-aragats
  */
-public class PostsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+public class PostsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PostPhotoViewerProvider {
 
-    private RecyclerListView listView;
+    private RecyclerListView postListView;
     private LinearLayoutManager layoutManager;
     private PostsAdapter postsAdapter;
     private PostsSearchAdapter postsSearchAdapter;
@@ -98,6 +99,84 @@
 
     private MessagesActivityDelegate delegate;
 
+    //TODO-legacy. update according to new version.
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(PostObject postObjectObject) {
+        if (postObjectObject == null) {
+            return null;
+        }
+        int count = this.postListView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            PostObject postObjectToOpen = null;
+            ImageReceiver imageReceiver = null;
+            View view = this.postListView.getChildAt(a);
+            if (view instanceof PostCell) {
+                PostCell cell = (PostCell) view;
+                PostObject post = cell.getPostObject();
+                if (post != null && post.getId() != null && post.getId().equals(postObjectObject.getId())) {
+                    postObjectToOpen = post;
+                    imageReceiver = cell.getPhotoImage();
+                }
+            }
+
+            if (postObjectToOpen != null) {
+                int coords[] = new int[2];
+                view.getLocationInWindow(coords);
+                PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                object.viewX = coords[0];
+                object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                object.parentView = postListView;
+                object.imageReceiver = imageReceiver;
+                object.thumb = imageReceiver.getBitmap();
+                object.radius = imageReceiver.getRoundRadius();
+                return object;
+            }
+        }
+        return null;
+
+    }
+
+    @Override
+    public void willSwitchFromPhoto(PostObject postObject) {
+
+    }
+
+    @Override
+    public void willHidePhotoViewer() {
+
+    }
+
+    @Override
+    public boolean isPhotoChecked(int index) {
+        return false;
+    }
+
+    @Override
+    public void setPhotoChecked(int index) {
+
+    }
+
+    @Override
+    public void cancelButtonPressed() {
+
+    }
+
+    @Override
+    public void sendButtonPressed(int index) {
+
+    }
+
+    @Override
+    public int getSelectedCount() {
+        return 0;
+    }
+
+    @Override
+    public void updatePhotoAtIndex(int index) {
+
+    }
+
     public interface MessagesActivityDelegate {
         void didSelectDialog(PostsActivity fragment, long dialog_id, boolean param);
     }
@@ -179,9 +258,9 @@ public View createView(final Context context, LayoutInflater inflater) {
             @Override
             public void onSearchExpand() {
                 searching = true;
-                if (listView != null) {
+                if (postListView != null) {
                     if (searchString != null) {
-                        listView.setEmptyView(searchEmptyView);
+                        postListView.setEmptyView(searchEmptyView);
                         progressView.setVisibility(View.INVISIBLE);
                         emptyView.setVisibility(View.INVISIBLE);
                     }
@@ -201,14 +280,14 @@ public boolean onSearchCollapse() {
                 }
                 searching = false;
                 searchWas = false;
-                if (listView != null) {
+                if (postListView != null) {
                     searchEmptyView.setVisibility(View.INVISIBLE);
                     if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
                         emptyView.setVisibility(View.INVISIBLE);
-                        listView.setEmptyView(progressView);
+                        postListView.setEmptyView(progressView);
                     } else {
                         progressView.setVisibility(View.INVISIBLE);
-                        listView.setEmptyView(emptyView);
+                        postListView.setEmptyView(emptyView);
                     }
                     if (!onlySelect) {
                         floatingButton.setVisibility(View.VISIBLE);
@@ -216,8 +295,8 @@ public boolean onSearchCollapse() {
                         ViewProxy.setTranslationY(floatingButton, AndroidUtilities.dp(100));
                         hideFloatingButton(false);
                     }
-                    if (listView.getAdapter() != postsAdapter) {
-                        listView.setAdapter(postsAdapter);
+                    if (postListView.getAdapter() != postsAdapter) {
+                        postListView.setAdapter(postsAdapter);
                         postsAdapter.notifyDataSetChanged();
                     }
                 }
@@ -235,14 +314,14 @@ public void onTextChanged(EditText editText) {
                 if (text.length() != 0) {
                     searchWas = true;
                     if (postsSearchAdapter != null) {
-                        listView.setAdapter(postsSearchAdapter);
+                        postListView.setAdapter(postsSearchAdapter);
                         postsSearchAdapter.notifyDataSetChanged();
                     }
-                    if (searchEmptyView != null && listView.getEmptyView() != searchEmptyView) {
+                    if (searchEmptyView != null && postListView.getEmptyView() != searchEmptyView) {
                         emptyView.setVisibility(View.INVISIBLE);
                         progressView.setVisibility(View.INVISIBLE);
                         searchEmptyView.showTextView();
-                        listView.setEmptyView(searchEmptyView);
+                        postListView.setEmptyView(searchEmptyView);
                     }
                 }
                 if (postsSearchAdapter != null) {
@@ -285,11 +364,11 @@ public void onItemClick(int id) {
         FrameLayout frameLayout = new FrameLayout(context);
         fragmentView = frameLayout;
 
-        listView = new RecyclerListView(context);
-        listView.setVerticalScrollBarEnabled(true);
-        listView.setItemAnimator(null);
-        listView.setInstantClick(true);
-        listView.setLayoutAnimation(null);
+        postListView = new RecyclerListView(context);
+        postListView.setVerticalScrollBarEnabled(true);
+        postListView.setItemAnimator(null);
+        postListView.setInstantClick(true);
+        postListView.setLayoutAnimation(null);
         layoutManager = new LinearLayoutManager(context) {
             @Override
             public boolean supportsPredictiveItemAnimations() {
@@ -297,20 +376,20 @@ public boolean supportsPredictiveItemAnimations() {
             }
         };
         layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
-        listView.setLayoutManager(layoutManager);
+        postListView.setLayoutManager(layoutManager);
         if (Build.VERSION.SDK_INT >= 11) {
-            listView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
+            postListView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
         }
-        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
-        listView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
+        frameLayout.addView(postListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        postListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
             @Override
             public void onItemClick(View view, int position) {
-                if (listView == null || listView.getAdapter() == null) {
+                if (postListView == null || postListView.getAdapter() == null) {
                     return;
                 }
                 String post_id = "";
                 String message_id = "";
-                RecyclerView.Adapter adapter = listView.getAdapter();
+                RecyclerView.Adapter adapter = postListView.getAdapter();
                 if (adapter == postsAdapter) {
                     PostObject postObject = postsAdapter.getItem(position);
                     if (postObject == null) {
@@ -362,12 +441,12 @@ public void onItemClick(View view, int position) {
                 }
             }
         });
-        listView.setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() {
+        postListView.setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() {
             @Override
             public void onItemClick(View view, int position) {
                 if (onlySelect || searching && searchWas || getParentActivity() == null) {
                     if (searchWas && searching) {
-                        RecyclerView.Adapter adapter = listView.getAdapter();
+                        RecyclerView.Adapter adapter = postListView.getAdapter();
                         if (adapter == postsSearchAdapter) {
                             Object item = postsSearchAdapter.getItem(position);
                             if (item instanceof String) {
@@ -512,7 +591,7 @@ public void onClick(View v) {
             }
         });
 
-        listView.setOnScrollListener(new RecyclerView.OnScrollListener() {
+        postListView.setOnScrollListener(new RecyclerView.OnScrollListener() {
             @Override
             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                 if (newState == RecyclerView.SCROLL_STATE_DRAGGING && searching && searchWas) {
@@ -565,11 +644,12 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
         });
 
         if (searchString == null) {
-            postsAdapter = new PostsAdapter(context, serverOnly);
+            //TODO find way not to pass PostActivity
+            postsAdapter = new PostsAdapter(context, serverOnly, PostsActivity.this);
             if (AndroidUtilities.isTablet() && StringUtils.isEmpty(openedPostId)) {
                 postsAdapter.setOpenedPostId(openedPostId);
             }
-            listView.setAdapter(postsAdapter);
+            postListView.setAdapter(postsAdapter);
         }
         int type = 0;
         if (searchString != null) {
@@ -594,11 +674,11 @@ public void searchStateChanged(boolean search) {
         if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
             searchEmptyView.setVisibility(View.INVISIBLE);
             emptyView.setVisibility(View.INVISIBLE);
-            listView.setEmptyView(progressView);
+            postListView.setEmptyView(progressView);
         } else {
             searchEmptyView.setVisibility(View.INVISIBLE);
             progressView.setVisibility(View.INVISIBLE);
-            listView.setEmptyView(emptyView);
+            postListView.setEmptyView(emptyView);
         }
         if (searchString != null) {
             actionBar.openSearchField(searchString);
@@ -653,20 +733,20 @@ public void didReceivedNotification(int id, Object... args) {
             if (postsSearchAdapter != null) {
                 postsSearchAdapter.notifyDataSetChanged();
             }
-            if (listView != null) {
+            if (postListView != null) {
                 try {
                     if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
                         searchEmptyView.setVisibility(View.INVISIBLE);
                         emptyView.setVisibility(View.INVISIBLE);
-                        listView.setEmptyView(progressView);
+                        postListView.setEmptyView(progressView);
                     } else {
                         progressView.setVisibility(View.INVISIBLE);
                         if (searching && searchWas) {
                             emptyView.setVisibility(View.INVISIBLE);
-                            listView.setEmptyView(searchEmptyView);
+                            postListView.setEmptyView(searchEmptyView);
                         } else {
                             searchEmptyView.setVisibility(View.INVISIBLE);
-                            listView.setEmptyView(emptyView);
+                            postListView.setEmptyView(emptyView);
                         }
                     }
                 } catch (Exception e) {
@@ -674,7 +754,7 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.emojiDidLoaded) {
-            if (listView != null) {
+            if (postListView != null) {
                 updateVisibleRows(0);
             }
         } else if (id == NotificationCenter.updateInterfaces) {
@@ -738,12 +818,12 @@ private void hideFloatingButton(boolean hide) {
     }
 
     private void updateVisibleRows(int mask) {
-        if (listView == null) {
+        if (postListView == null) {
             return;
         }
-        int count = listView.getChildCount();
+        int count = postListView.getChildCount();
         for (int a = 0; a < count; a++) {
-            View child = listView.getChildAt(a);
+            View child = postListView.getChildAt(a);
             if (child instanceof PostCell) {
                 PostCell cell = (PostCell) child;
                 if ((mask & PostsController.UPDATE_MASK_NEW_MESSAGE) != 0) {
@@ -780,4 +860,11 @@ public boolean isMainDialogList() {
     private void didSelectResult(final String dialog_id, boolean useAlert, final boolean param) {
         //TODO here onlySelect Posts (Dialog)
     }
+
+
+    //TODO it is needed for PhotoViewer.
+
+    public ActionBar getActionBar() {
+        return actionBar;
+    }
 }
