diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 096f7e1ce..ad1c123a3 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -41,7 +41,6 @@
     private final BaseFragment baseFragment;
     private final int[] participantsUserIds;
     private boolean editable;
-    private int maxVote;
     private List<Vote> votes;
     private List<Boolean> originalVotes;
     private Map<Option,Vote> newVotes;
@@ -74,19 +73,6 @@ public void setData(UsersDecisionVotes usersDecisionVotes, int currentUserId) {
         for (Vote v : votes){
             originalVotes.add(v.isVote() == null ? null :new Boolean(v.isVote().booleanValue()));
         }
-        updateMaxVote();
-    }
-
-    private void updateMaxVote() {
-        maxVote = 0;
-        for (Option o : usersDecisionVotes.getOptions()){
-            maxVote = Math.max(maxVote, getPositiveVoteCount(o));
-        }
-    }
-
-    private int getPositiveVoteCount(Option o) {
-        int positiveVoteCount = usersDecisionVotes.getPositiveVoteCount(o);
-        return  positiveVoteCount;
     }
 
     public void setEditable(boolean editable) {
@@ -150,7 +136,6 @@ public void onClick(View v) {
                 Log.d(LOG_TAG, "item [" + position + "] selected[" + optionCheckBox.isChecked() + "] ");
                 usersDecisionVotes.setVote(vote.getUserId(),o, vote);
                 onVoteChangeListener.voteChanges(!newVotes.isEmpty());
-                updateMaxVote();
                 notifyDataSetChanged();
             }
         });
@@ -173,10 +158,10 @@ public void onClick(View v) {
         optionSubtitle.setText(o.getLongDescription());
         optionSubtitle.setOnClickListener(openOptionDetailOnClickLister);
 
-        int positiveVoteCount = getPositiveVoteCount(o);
+        int positiveVoteCount = usersDecisionVotes.getPositiveVoteCount(o);
         optionVoteCount.setText(formatVoteCount(positiveVoteCount));
         //noinspection ResourceType
-        starImageView.setVisibility(getStartVisibility(positiveVoteCount));
+        starImageView.setVisibility(usersDecisionVotes.isWinningOption(o) ? View.VISIBLE : View.INVISIBLE);
 
 
         StackedBar stackedBarStackedBar = new StackedBar(getContext(), usersDecisionVotes.getUsers().size(),
@@ -188,11 +173,6 @@ public void onClick(View v) {
         return rowView;
     }
 
-    private int getStartVisibility(int positiveVoteCount) {
-        return positiveVoteCount == maxVote && positiveVoteCount > 0 ?
-                View.VISIBLE : View.INVISIBLE;
-    }
-
     private String formatVoteCount(int positiveVoteCount) {
         return "(" + positiveVoteCount + ")";
     }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
index 374b3db21..b6a62cb98 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/UsersDecisionVotes.java
@@ -36,6 +36,7 @@ public int compare(Option o1, Option o2) {
     private final List<TLRPC.User> users;
     private final List<Option> options;
     private final Map<UserIdOptionKey, Vote> voteMap = new HashMap<>();
+    private int maxVote;
 
     public UsersDecisionVotes(Decision decision, List<TLRPC.User> users, List<Option> optionsPar, List<Vote> votes) {
         this.decision = decision;
@@ -60,6 +61,13 @@ public UsersDecisionVotes(Decision decision, List<TLRPC.User> users, List<Option
             voteMap.put(new UserIdOptionKey(v.getUserId(), option.getId()), v);
         }
         Collections.sort(options,optionsComparator);
+
+        // calculate max votes
+        maxVote = 0;
+        for (Option o : getOptions()){
+            maxVote = Math.max(maxVote, getPositiveVoteCount(o));
+        }
+
     }
 
     public Decision getDecision(){
@@ -118,8 +126,10 @@ public Vote getVotes(int userId, Option option){
     public void setVote(int userID, Option option, Vote vote){
         voteMap.put(new UserIdOptionKey(userID,option.getId()), vote);
         // update cache
-        cachedPositiveVoteCount.put(option,calculateVoteCount(option));
+        Integer positiveVoteCout = calculateVoteCount(option);
+        cachedPositiveVoteCount.put(option, positiveVoteCout);
         Collections.sort(options, optionsComparator);
+        maxVote = Math.max(maxVote, positiveVoteCout);
     }
 
     private final Map<Option, Integer> cachedPositiveVoteCount = new HashMap<>();
@@ -158,4 +168,9 @@ private int calculateVoteCount(Option option) {
         Log.d(LOG_TAG, "Option ["+optionId+"] not found.");
         return null;
     }
+
+    public boolean isWinningOption(Option o){
+        int count = getPositiveVoteCount(o);
+        return  count != 0 && count == maxVote;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index cbba8f2ca..9d8a46888 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -220,7 +220,7 @@ protected void sendMessage(long groupChatId, String message) {
         long peer = -groupChatId;
         MessageObject replyToMsg = null;
         TLRPC.WebPage webPAge = null;
-        boolean searchLinks = true;
+        boolean searchLinks = false;
         boolean asAdmin = false;
         SendMessagesHelper.getInstance().sendMessage(message, peer, replyToMsg, webPAge, searchLinks, asAdmin);
         Log.i(LOG_TAG, "sent message [" + message + "] in group [" + groupChatId + "]");
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java
index 57f3e5f3e..34a4bc67a 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.widget.EditText;
@@ -22,6 +23,7 @@
     public static final int ACTION_BAR_BACK_ITEM_ID = -1;
 
     private static final float TITLE_FONT_SIZE = 19;
+    private static final String LOG_TAG = "uiUtils";
 
     public static TextView init(ActionBar actionBar, int title, int drawableIcon){
         return init(actionBar, ApplicationLoader.applicationContext.getString(title), drawableIcon);
@@ -92,5 +94,41 @@ public static String getText(EditText ed){
         return text;
     }
 
+    /**
+     * Constant for setDynamicTextSize() method
+     */
+    private static final float MAX_FONT_SIZE = 19;
+    private static final float MIN_FONT_SIZE = 11;
+    private static final int MIN_TEXT_THRESHOLD_LEN = 15;
+    private static final int MAX_TEXT_THRESHOLD_LEN = 40;
+    private static final float SCALE = (MAX_FONT_SIZE- MIN_FONT_SIZE) / (MAX_TEXT_THRESHOLD_LEN - MIN_TEXT_THRESHOLD_LEN);
+
+    public static void setDynamicTextSize(TextView tv){
+        int len = tv.getText() == null ? 0 : tv.getText().toString().length();
+        float fontSize;
+        if (len < MIN_TEXT_THRESHOLD_LEN)
+            fontSize = MAX_FONT_SIZE;
+        else if (len > MAX_TEXT_THRESHOLD_LEN)
+            fontSize = MIN_FONT_SIZE;
+        else
+            fontSize = MIN_FONT_SIZE + SCALE * (MAX_TEXT_THRESHOLD_LEN - len);
+
+        int lines;
+        if (len < 9)
+            lines = 1;
+        if (fontSize == MIN_FONT_SIZE)
+            lines = 3;
+        else
+            lines = 2;
+
+        Log.d(LOG_TAG, "font size returned :" + fontSize + " lines:"+lines);
+
+        tv.setTextSize(fontSize);
+        tv.setLines(lines);
+        tv.setEllipsize(TextUtils.TruncateAt.END);
+        tv.setWidth(AndroidUtilities.dp(100));
+        tv.setGravity(Gravity.TOP|Gravity.LEFT);
+    }
+
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index 6aeb59212..70767e8a2 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -282,20 +282,16 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
 
         // build first row
         {
-            int firstRowHeight = AndroidUtilities.dp(40);
+            int firstRowHeight = AndroidUtilities.dp(50);
             TableRow row = newRow();
             // first cell is empty
             TextView emptyCell = new TextView(getContext());
             for (Option option : usersDecisionVotes.getOptions()) {
-                TextView tvChoice = new TextView(getContext());
-                tvChoice.setText(option.getTitle());
-                tvChoice.setGravity(Gravity.CENTER);
-                tvChoice.setTextAppearance(getContext(), android.R.style.TextAppearance_Medium);
-                tvChoice.setTypeface(tvChoice.getTypeface(), Typeface.BOLD);
-                tvChoice.setEllipsize(TextUtils.TruncateAt.END);
-                tvChoice.setLines(1);
-                tvChoice.setWidth(AndroidUtilities.dp(80));
-                add2Row(row, tvChoice, firstRowHeight);
+                TextView tvOption = new TextView(getContext());
+                tvOption.setText(option.getTitle());
+                tvOption.setTypeface(tvOption.getTypeface(), Typeface.BOLD);
+                UIUtils.setDynamicTextSize(tvOption);
+                add2Row(row, tvOption, firstRowHeight);
             }
             tableLayout.addView(row);
             fixedColumn.addView(emptyCell, ViewGroup.LayoutParams.WRAP_CONTENT, firstRowHeight);
@@ -307,12 +303,26 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
 
             TableRow row = newRow();
             for (Option option : usersDecisionVotes.getOptions()) {
+                LinearLayout rowLayout = new LinearLayout(getContext());
+                rowLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, secondRowHeight));
+                rowLayout.setOrientation(LinearLayout.HORIZONTAL);
+                rowLayout.setGravity(Gravity.CENTER);
+
+                ImageView starImageView = new ImageView(getContext());
+                starImageView.setImageResource(R.drawable.assign_manager);
+                starImageView.setVisibility(usersDecisionVotes.isWinningOption(option) ? View.VISIBLE : View.INVISIBLE);
+                starImageView.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
+                rowLayout.addView(starImageView);
+
+
                 TextView tvVoteCount = new TextView(getContext());
                 tvVoteCount.setTextSize(18);
                 tvVoteCount.setGravity(Gravity.CENTER);
                 tvVoteCount.setText(Integer.toString(usersDecisionVotes.getPositiveVoteCount(option)));
                 tvVoteCount.setHeight(secondRowHeight);
-                add2Row(row, tvVoteCount, secondRowHeight);
+                rowLayout.addView(tvVoteCount);
+
+                add2Row(row, rowLayout,secondRowHeight);
             }
             tableLayout.addView(row);
             fixedColumn.addView(emptyCell, ViewGroup.LayoutParams.WRAP_CONTENT, secondRowHeight);
diff --git a/TMessagesProj/src/main/res/layout/item_vote_list.xml b/TMessagesProj/src/main/res/layout/item_vote_list.xml
index 69755fffb..0941c07f7 100644
--- a/TMessagesProj/src/main/res/layout/item_vote_list.xml
+++ b/TMessagesProj/src/main/res/layout/item_vote_list.xml
@@ -24,6 +24,7 @@
         android:layout_alignParentTop="true"
         android:layout_toRightOf="@+id/item_option_iv_image"
         android:paddingLeft="8dp"
+        android:ellipsize="end"
         android:maxLines="2"
         android:text="Title that can dskfjsdkl dklsjfklsdjf klsjsklfdlong"
         android:textAppearance="?android:attr/textAppearanceLarge"
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
index 8add9c046..caa776120 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
@@ -144,7 +144,7 @@ private Vote getVote(int userId, Option option) {
     }
 
     @Override
-    public List<Vote> getUserVoteForDecision(long decisionId, int userId) {
+    public List<Vote> getVotes(long decisionId, @Nullable Integer userId) {
         List<Vote> votes = new ArrayList<>();
         for (Option c : getOptions(decisionId)) {
             votes.add(getVote(userId, c));
@@ -152,11 +152,6 @@ private Vote getVote(int userId, Option option) {
         return votes;
     }
 
-    @Override
-    public List<Vote> getVotes(long decisionId, @Nullable Integer userId) {
-        return null;
-    }
-
     @Override
     public Option save(Option o) {
         Option found = getOption(o.getTitle(), getDecision(o.getDecisionId()));
