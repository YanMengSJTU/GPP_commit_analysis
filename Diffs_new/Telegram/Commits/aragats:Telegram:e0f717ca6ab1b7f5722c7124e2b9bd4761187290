diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 8f52c05a5..8f0ecaf72 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -103,6 +103,8 @@
     private ArrayList<PostObject> imagesPostObjectArr = new ArrayList<PostObject>();
     //TODO-aragats new
     private PostObject currentPostObjectObject;
+    //TODO-aragats new
+    private PostsActivity parentPostActivity;
 
     private int classGuid;
     private PhotoViewerProvider placeProvider;
@@ -1239,6 +1241,7 @@ public void onCaptionEnter() {
 
             @Override
             public void onTextChanged(CharSequence text, boolean bigChange) {
+                //TODO-aragat to add parentPostActivity.
                 if (mentionsAdapter != null && captionEditText != null && parentChatActivity != null && text != null) {
                     mentionsAdapter.searchUsernameOrHashtag(text.toString(), captionEditText.getCursorPosition(), parentChatActivity.messages);
                 }
@@ -2102,6 +2105,98 @@ private void updateSelectedCount() {
         pickerView.updateSelectedCount(placeProvider.getSelectedCount(), false);
     }
 
+
+    //TODO-aragats new
+    private void onPhotoShowNew(final PostObject postObject, final PlaceProviderObject object) {
+        classGuid = ConnectionsManager.getInstance().generateClassGuid();
+        currentMessageObject = null;
+        //TODO-aragat new
+        currentPostObjectObject = null;
+        //
+        currentFileLocation = null;
+        currentPathObject = null;
+        currentIndex = -1;
+        currentFileNames[0] = null;
+        currentFileNames[1] = null;
+        currentFileNames[2] = null;
+        avatarsUserId = 0;
+        currentDialogId = 0;
+        totalImagesCount = 0;
+        currentEditMode = 0;
+        isFirstLoading = true;
+        needSearchImageInArr = false;
+        loadingMoreImages = false;
+        cacheEndReached = false;
+        opennedFromMedia = false;
+        needCaptionLayout = false;
+        canShowBottom = true;
+        imagesArr.clear();
+        //TODO-aragats new
+        imagesPostObjectArr.clear();
+        //
+        imagesArrLocations.clear();
+        imagesArrLocationsSizes.clear();
+        avatarsArr.clear();
+        imagesArrLocals.clear();
+        imagesByIds.clear();
+        imagesArrTemp.clear();
+        imagesByIdsTemp.clear();
+        currentUserAvatarLocation = null;
+        containerView.setPadding(0, 0, 0, 0);
+        currentThumb = object != null ? object.thumb : null;
+        menuItem.setVisibility(View.VISIBLE);
+        bottomLayout.setVisibility(View.VISIBLE);
+        shareButton.setVisibility(View.GONE);
+        menuItem.hideSubItem(gallery_menu_showall);
+        ViewProxy.setTranslationY(actionBar, 0);
+        ViewProxy.setTranslationY(pickerView, 0);
+        ViewProxy.setAlpha(checkImageView, 1.0f);
+        ViewProxy.setAlpha(pickerView, 1.0f);
+        checkImageView.clearAnimation();
+        pickerView.clearAnimation();
+        editorDoneLayout.clearAnimation();
+        checkImageView.setVisibility(View.GONE);
+        pickerView.setVisibility(View.GONE);
+        cropItem.setVisibility(View.GONE);
+        tuneItem.setVisibility(View.GONE);
+        captionItem.setVisibility(View.GONE);
+        captionDoneItem.setVisibility(View.GONE);
+        captionEditText.clearAnimation();
+        captionEditText.setVisibility(View.GONE);
+        mentionListView.setVisibility(View.GONE);
+        editorDoneLayout.setVisibility(View.GONE);
+        captionTextView.setTag(null);
+        captionTextView.clearAnimation();
+        captionTextView.setVisibility(View.INVISIBLE);
+        if (photoCropView != null) {
+            photoCropView.clearAnimation();
+            photoCropView.setVisibility(View.GONE);
+        }
+        if (photoFilterView != null) {
+            photoFilterView.clearAnimation();
+            photoFilterView.setVisibility(View.GONE);
+        }
+
+        for (int a = 0; a < 3; a++) {
+            if (radialProgressViews[a] != null) {
+                radialProgressViews[a].setBackgroundState(-1, false);
+            }
+        }
+
+        if (postObject != null) {
+            imagesPostObjectArr.add(postObject);
+
+            menuItem.showSubItem(gallery_menu_showall);
+//            else
+//            menuItem.hideSubItem(gallery_menu_showall);
+
+            setImageIndexPostNew(0, true);
+        }
+
+    }
+
+
+
     private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<MessageObject> messages, final ArrayList<Object> photos, int index, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
         currentMessageObject = null;
@@ -2488,6 +2583,144 @@ private void setImageIndex(int index, boolean init) {
         createGifForCurrentImage();
     }
 
+
+
+    private void setImageIndexPostNew(int index, boolean init) {
+        if (currentIndex == index) {
+            return;
+        }
+        if (!init) {
+            currentThumb = null;
+        }
+        currentFileNames[0] = getFileName(index);
+        currentFileNames[1] = getFileName(index + 1);
+        currentFileNames[2] = getFileName(index - 1);
+        postPlaceProvider.willSwitchFromPhoto(currentPostObjectObject);
+        int prevIndex = currentIndex;
+        currentIndex = index;
+
+        boolean sameImage = false;
+
+        if (!imagesPostObjectArr.isEmpty()) {
+            menuItem.showSubItem(gallery_menu_delete);
+            if (currentIndex < 0 || currentIndex >= imagesPostObjectArr.size()) {
+                closePhoto(false, false);
+                return;
+            }
+            currentPostObjectObject = imagesPostObjectArr.get(currentIndex);
+
+                nameTextView.setText("USER-Aragats");
+            long date = currentPostObjectObject.getCreatedDate();
+            String dateString = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(new Date(date)), LocaleController.formatterDay.format(new Date(date)));
+
+                dateTextView.setText(dateString);
+            CharSequence caption = currentPostObjectObject.getMessage();
+            setCurrentCaption(caption);
+
+            if (totalImagesCount != 0 && !needSearchImageInArr) {
+
+                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesPostObjectArr.size()) + currentIndex + 1, totalImagesCount));
+
+            }
+//            if (currentMessageObject.messageOwner.ttl != 0) {
+//                menuItem.hideSubItem(gallery_menu_save);
+//                shareButton.setVisibility(View.GONE);
+//            } else {
+//                menuItem.showSubItem(gallery_menu_save);
+//                shareButton.setVisibility(View.VISIBLE);
+//            }
+            menuItem.showSubItem(gallery_menu_save);
+            shareButton.setVisibility(View.VISIBLE);
+        }
+
+        if (currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(true, true);
+            } else {
+                showAfterAnimation = currentPlaceObject;
+            }
+        }
+        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPostObjectObject);
+        if (currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(false, true);
+            } else {
+                hideAfterAnimation = currentPlaceObject;
+            }
+        }
+
+        if (!sameImage) {
+            draggingDown = false;
+            translationX = 0;
+            translationY = 0;
+            scale = 1;
+            animateToX = 0;
+            animateToY = 0;
+            animateToScale = 1;
+            animationStartTime = 0;
+            imageMoveAnimation = null;
+            changeModeAnimation = null;
+
+            pinchStartDistance = 0;
+            pinchStartScale = 1;
+            pinchCenterX = 0;
+            pinchCenterY = 0;
+            pinchStartX = 0;
+            pinchStartY = 0;
+            moveStartX = 0;
+            moveStartY = 0;
+            zooming = false;
+            moving = false;
+            doubleTap = false;
+            invalidCoords = false;
+            canDragDown = true;
+            changingPage = false;
+            switchImageAfterAnimation = 0;
+            canZoom = !imagesArrLocals.isEmpty() || (currentFileNames[0] != null && !currentFileNames[0].endsWith("mp4") && radialProgressViews[0].backgroundState != 0);
+            updateMinMax(scale);
+        }
+
+        if (prevIndex == -1) {
+            setImages();
+
+            for (int a = 0; a < 3; a++) {
+                checkProgress(a, false);
+            }
+        } else {
+            checkProgress(0, false);
+            if (prevIndex > currentIndex) {
+                ImageReceiver temp = rightImage;
+                rightImage = centerImage;
+                centerImage = leftImage;
+                leftImage = temp;
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[2];
+                radialProgressViews[2] = tempProgress;
+                setIndexToImage(leftImage, currentIndex - 1);
+
+                checkProgress(1, false);
+                checkProgress(2, false);
+            } else if (prevIndex < currentIndex) {
+                ImageReceiver temp = leftImage;
+                leftImage = centerImage;
+                centerImage = rightImage;
+                rightImage = temp;
+
+                RadialProgressView tempProgress = radialProgressViews[0];
+                radialProgressViews[0] = radialProgressViews[1];
+                radialProgressViews[1] = tempProgress;
+                setIndexToImage(rightImage, currentIndex + 1);
+
+                checkProgress(1, false);
+                checkProgress(2, false);
+            }
+        }
+
+//        createGifForCurrentImage();
+    }
+
+
     private void setCurrentCaption(final CharSequence caption) {
         if (caption != null && caption.length() > 0) {
             captionTextView = captionTextViewOld;
@@ -2933,6 +3166,215 @@ public void run() {
     }
 
 
+
+    //TODO-aragats new
+    //final PostPhotoViewerProvider provider, PostsActivity postsActivity are the same class.
+    public void openPhotoNew(final PostObject postObject, final PostPhotoViewerProvider provider, PostsActivity postsActivity) {
+        if (parentActivity == null || isVisible || provider == null || checkAnimation() || postObject == null) {
+            return;
+        }
+
+        //filocation we do not need here. messageObject is used to find ChatMediaCell by id from messageObject. // method is implemented in provider.
+        final PlaceProviderObject object = provider.getPlaceForPhoto(postObject);
+        if (object == null) {
+            return;
+        }
+
+
+        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+        if (windowView.attachedToWindow) {
+            try {
+                wm.removeView(windowView);
+            } catch (Exception e) {
+                //don't promt
+            }
+        }
+
+
+
+        try {
+            if (postObject.getImage() != null) {
+                windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
+                windowLayoutParams.flags = 0;
+                windowLayoutParams.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;
+                windowView.setFocusable(true);
+                containerView.setFocusable(true);
+            } else {
+                windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
+                windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
+                windowLayoutParams.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED;
+                windowView.setFocusable(false);
+                containerView.setFocusable(false);
+            }
+            wm.addView(windowView, windowLayoutParams);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return;
+        }
+
+        parentPostActivity = postsActivity;
+
+        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+
+        postPlaceProvider = provider;
+
+        if (velocityTracker == null) {
+            velocityTracker = VelocityTracker.obtain();
+        }
+
+        isVisible = true;
+        toggleActionBar(true, false);
+
+        if (object != null) {
+            disableShowCheck = true;
+            animationInProgress = 1;
+            onPhotoShowNew(postObject, object);
+
+            final Rect drawRegion = object.imageReceiver.getDrawRegion();
+            int orientation = object.imageReceiver.getOrientation();
+
+            animatingImageView.setVisibility(View.VISIBLE);
+            animatingImageView.setRadius(object.radius);
+            animatingImageView.setOrientation(orientation);
+            animatingImageView.setNeedRadius(object.radius != 0);
+            animatingImageView.setImageBitmap(object.thumb);
+
+            ViewProxy.setAlpha(animatingImageView, 1.0f);
+            ViewProxy.setPivotX(animatingImageView, 0.0f);
+            ViewProxy.setPivotY(animatingImageView, 0.0f);
+            ViewProxy.setScaleX(animatingImageView, 1.0f);
+            ViewProxy.setScaleY(animatingImageView, 1.0f);
+            ViewProxy.setTranslationX(animatingImageView, object.viewX + drawRegion.left);
+            ViewProxy.setTranslationY(animatingImageView, object.viewY + drawRegion.top);
+            final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
+            layoutParams.width = drawRegion.right - drawRegion.left;
+            layoutParams.height = drawRegion.bottom - drawRegion.top;
+            animatingImageView.setLayoutParams(layoutParams);
+
+            float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
+            float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
+            float scale = scaleX > scaleY ? scaleY : scaleX;
+            float width = layoutParams.width * scale;
+            float height = layoutParams.height * scale;
+            float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
+            float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
+            int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+            int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+
+            int coords2[] = new int[2];
+            object.parentView.getLocationInWindow(coords2);
+            int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
+            if (clipTop < 0) {
+                clipTop = 0;
+            }
+            int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
+            if (clipBottom < 0) {
+                clipBottom = 0;
+            }
+            clipTop = Math.max(clipTop, clipVertical);
+            clipBottom = Math.max(clipBottom, clipVertical);
+
+            animationValues[0][0] = ViewProxy.getScaleX(animatingImageView);
+            animationValues[0][1] = ViewProxy.getScaleY(animatingImageView);
+            animationValues[0][2] = ViewProxy.getTranslationX(animatingImageView);
+            animationValues[0][3] = ViewProxy.getTranslationY(animatingImageView);
+            animationValues[0][4] = clipHorizontal;
+            animationValues[0][5] = clipTop;
+            animationValues[0][6] = clipBottom;
+            animationValues[0][7] = animatingImageView.getRadius();
+
+            animationValues[1][0] = scale;
+            animationValues[1][1] = scale;
+            animationValues[1][2] = xPos;
+            animationValues[1][3] = yPos;
+            animationValues[1][4] = 0;
+            animationValues[1][5] = 0;
+            animationValues[1][6] = 0;
+            animationValues[1][7] = 0;
+
+            animatingImageView.setAnimationProgress(0);
+            backgroundDrawable.setAlpha(0);
+            ViewProxy.setAlpha(containerView, 0);
+
+            final AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+            animatorSet.playTogether(
+                    ObjectAnimatorProxy.ofFloat(animatingImageView, "animationProgress", 0.0f, 1.0f),
+                    ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0, 255),
+                    ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f, 1.0f)
+            );
+
+            animationEndRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (containerView == null) {
+                        return;
+                    }
+                    animationInProgress = 0;
+                    transitionAnimationStartTime = 0;
+                    setImages();
+                    containerView.invalidate();
+                    animatingImageView.setVisibility(View.GONE);
+                    if (showAfterAnimation != null) {
+                        showAfterAnimation.imageReceiver.setVisible(true, true);
+                    }
+                    if (hideAfterAnimation != null) {
+                        hideAfterAnimation.imageReceiver.setVisible(false, true);
+                    }
+                }
+            };
+
+            animatorSet.setDuration(200);
+            animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animation) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            NotificationCenter.getInstance().setAnimationInProgress(false);
+                            if (animationEndRunnable != null) {
+                                animationEndRunnable.run();
+                                animationEndRunnable = null;
+                            }
+                        }
+                    });
+                }
+
+                @Override
+                public void onAnimationCancel(Object animation) {
+                    onAnimationEnd(animation);
+                }
+            });
+            transitionAnimationStartTime = System.currentTimeMillis();
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    NotificationCenter.getInstance().setAnimationInProgress(true);
+                    animatorSet.start();
+                }
+            });
+
+            backgroundDrawable.drawRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    disableShowCheck = false;
+                    object.imageReceiver.setVisible(false, true);
+                }
+            };
+        } else {
+            backgroundDrawable.setAlpha(255);
+            ViewProxy.setAlpha(containerView, 1.0f);
+            onPhotoShowNew(postObject, object);
+        }
+    }
+
+
     //TODO-legacy rewrite this method accrodign to new openPhoto because this version is legacy from previous revision
     //TODO my openPhoto
     public void openPhoto(final PostObject postObject, final PostPhotoViewerProvider provider) {
@@ -3317,12 +3759,14 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
             currentEditMode = 0;
         }
 
-        if (parentActivity == null || !isVisible || checkAnimation() || placeProvider == null) {
+        if (parentActivity == null || !isVisible || checkAnimation() || (placeProvider == null && postPlaceProvider == null)) {
             return;
         }
 
         captionEditText.onDestroy();
         parentChatActivity = null;
+        //TODO-aragata
+        parentPostActivity = null;
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
