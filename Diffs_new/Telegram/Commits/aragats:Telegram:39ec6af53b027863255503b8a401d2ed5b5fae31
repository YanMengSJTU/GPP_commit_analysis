diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 40cab7174..6045d3354 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -115,24 +115,6 @@
         </activity>
 
 
-        <service android:name="org.telegram.android.AuthenticatorService" android:exported="true">
-            <intent-filter>
-                <action android:name="android.accounts.AccountAuthenticator"/>
-            </intent-filter>
-            <meta-data android:name="android.accounts.AccountAuthenticator"
-                android:resource="@xml/auth"/>
-        </service>
-
-        <service android:name="org.telegram.android.ContactsSyncAdapterService" android:exported="true">
-            <intent-filter>
-                <action android:name="android.content.SyncAdapter" />
-            </intent-filter>
-            <meta-data android:name="android.content.SyncAdapter"
-                android:resource="@xml/sync_contacts" />
-            <meta-data android:name="android.provider.CONTACTS_STRUCTURE"
-                android:resource="@xml/contacts" />
-        </service>
-
         <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
         <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
         <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java b/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java
deleted file mode 100644
index 1d9c4bdcc..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.android;
-
-import android.accounts.AbstractAccountAuthenticator;
-import android.accounts.Account;
-import android.accounts.AccountAuthenticatorResponse;
-import android.accounts.AccountManager;
-import android.accounts.NetworkErrorException;
-import android.app.Service;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.IBinder;
-
-public class AuthenticatorService extends Service {
-
-    private static class Authenticator extends AbstractAccountAuthenticator {
-        private final Context context;
-
-        public Authenticator(Context context) {
-            super(context);
-            this.context = context;
-        }
-
-        @Override
-        public Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options)
-                throws NetworkErrorException {
-            return null;
-        }
-
-        @Override
-        public Bundle getAccountRemovalAllowed(AccountAuthenticatorResponse response, Account account) throws NetworkErrorException {
-            return super.getAccountRemovalAllowed(response, account);
-        }
-
-        @Override
-        public Bundle confirmCredentials(AccountAuthenticatorResponse response, Account account, Bundle options) throws NetworkErrorException {
-            return null;
-        }
-
-        @Override
-        public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {
-            return null;
-        }
-
-        @Override
-        public Bundle getAuthToken(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options)
-                throws NetworkErrorException {
-            return null;
-        }
-
-        @Override
-        public String getAuthTokenLabel(String authTokenType) {
-            return null;
-        }
-
-        @Override
-        public Bundle hasFeatures(AccountAuthenticatorResponse response,
-                                  Account account, String[] features)
-                throws NetworkErrorException {
-            return null;
-        }
-
-        @Override
-        public Bundle updateCredentials(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options)
-                throws NetworkErrorException {
-            return null;
-        }
-
-    }
-
-    private static Authenticator authenticator = null;
-
-    protected Authenticator getAuthenticator() {
-        if (authenticator == null) {
-            authenticator = new Authenticator(this);
-        }
-        return authenticator;
-    }
-
-
-    @Override
-    public IBinder onBind(Intent intent) {
-        if (intent.getAction().equals(AccountManager.ACTION_AUTHENTICATOR_INTENT)) {
-            return getAuthenticator().getIBinder();
-        } else {
-            return null;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java
deleted file mode 100644
index 852a84838..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.android;
-
-import android.accounts.Account;
-import android.accounts.OperationCanceledException;
-import android.app.Service;
-import android.content.AbstractThreadedSyncAdapter;
-import android.content.ContentProviderClient;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SyncResult;
-import android.os.Bundle;
-import android.os.IBinder;
-
-import org.telegram.messenger.FileLog;
-
-public class ContactsSyncAdapterService extends Service {
-    private static SyncAdapterImpl sSyncAdapter = null;
-
-    public ContactsSyncAdapterService() {
-        super();
-    }
-
-    private static class SyncAdapterImpl extends AbstractThreadedSyncAdapter {
-        private Context mContext;
-
-        public SyncAdapterImpl(Context context) {
-            super(context, true);
-            mContext = context;
-        }
-
-        @Override
-        public void onPerformSync(Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult) {
-            try {
-                ContactsSyncAdapterService.performSync(mContext, account, extras, authority, provider, syncResult);
-            } catch (OperationCanceledException e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-    }
-
-    @Override
-    public IBinder onBind(Intent intent) {
-        return getSyncAdapter().getSyncAdapterBinder();
-    }
-
-    private SyncAdapterImpl getSyncAdapter() {
-        if (sSyncAdapter == null) {
-            sSyncAdapter = new SyncAdapterImpl(this);
-        }
-        return sSyncAdapter;
-    }
-
-    private static void performSync(Context context, Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult)
-            throws OperationCanceledException {
-        FileLog.d("telegram", "performSync: " + account.toString());
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index d5b634181..539bb05bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -19,8 +19,6 @@
 import android.database.Cursor;
 import android.graphics.BitmapFactory;
 import android.graphics.Point;
-import android.hardware.Sensor;
-import android.hardware.SensorManager;
 import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.Build;
@@ -30,11 +28,8 @@
 
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.DispatchQueue;
-import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 
 import java.io.File;
@@ -45,7 +40,6 @@
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Locale;
 
 public class MediaController implements NotificationCenter.NotificationCenterDelegate {
 
@@ -309,13 +303,13 @@ public void checkAutodownloadSettings() {
         lastCheckMask = currentMask;
 
         int mask = getAutodownloadMask();
-        if (mask == 0) {
-            MessagesStorage.getInstance().clearDownloadQueue(0);
-        } else {
-            if ((mask & AUTODOWNLOAD_MASK_PHOTO) == 0) {
-                MessagesStorage.getInstance().clearDownloadQueue(AUTODOWNLOAD_MASK_PHOTO);
-            }
-        }
+//        if (mask == 0) {
+//            MessagesStorage.getInstance().clearDownloadQueue(0);
+//        } else {
+//            if ((mask & AUTODOWNLOAD_MASK_PHOTO) == 0) {
+//                MessagesStorage.getInstance().clearDownloadQueue(AUTODOWNLOAD_MASK_PHOTO);
+//            }
+//        }
     }
 
     public boolean canDownloadMedia(int type) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 93a84ad11..249a62615 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -55,6 +55,7 @@
 
     private static volatile MessagesStorage Instance = null;
 
+    @Deprecated
     public static MessagesStorage getInstance() {
         MessagesStorage localInstance = Instance;
         if (localInstance == null) {
@@ -483,28 +484,8 @@ public User getUser(final int user_id) {
 
 
     public void removeFromDownloadQueue(final long id, final int type, final boolean move) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (move) {
-                        int minDate = -1;
-                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT min(date) FROM download_queue WHERE type = %d", type));
-                        if (cursor.next()) {
-                            minDate = cursor.intValue(0);
-                        }
-                        cursor.dispose();
-                        if (minDate != -1) {
-                            database.executeFast(String.format(Locale.US, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", minDate - 1, id, type)).stepThis().dispose();
-                        }
-                    } else {
-                        database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", id, type)).stepThis().dispose();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
+        //Queue in DB.
+
     }
 
 
@@ -525,62 +506,6 @@ public void run() {
         });
     }
 
-    public void getDownloadQueue(final int type) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    final ArrayList<DownloadObject> objects = new ArrayList<>();
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", type));
-                    while (cursor.next()) {
-                        DownloadObject downloadObject = new DownloadObject();
-                        downloadObject.type = cursor.intValue(1);
-                        downloadObject.id = cursor.longValue(0);
-                        ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(2));
-                        if (data != null && cursor.byteBufferValue(2, data.buffer) != 0) {
-                            downloadObject.object = TLClassStore.Instance().TLdeserialize(data, data.readInt32(false), false);
-                        }
-                        buffersStorage.reuseFreeBuffer(data);
-                        objects.add(downloadObject);
-                    }
-                    cursor.dispose();
-
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            MediaController.getInstance().processDownloadObjects(type, objects);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-
-    public void saveSecretParams(final int lsv, final int sg, final byte[] pbytes) {
-        storageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
-                    state.bindInteger(1, lsv);
-                    state.bindInteger(2, sg);
-                    ByteBufferDesc data = buffersStorage.getFreeBuffer(pbytes != null ? pbytes.length : 1);
-                    if (pbytes != null) {
-                        data.writeRaw(pbytes);
-                    }
-                    state.bindByteBuffer(3, data.buffer);
-                    state.step();
-                    state.dispose();
-                    buffersStorage.reuseFreeBuffer(data);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
 
     public void saveDiffParams() {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index bc486fb33..866701d99 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -82,7 +82,6 @@ public static PostsController getInstance() {
 
     public PostsController() {
         ImageLoader.getInstance();
-        MessagesStorage.getInstance();
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
deleted file mode 100644
index b46557b61..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
+++ /dev/null
@@ -1,180 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.ui.Adapters;
-
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.MessagesStorage;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class BaseSearchAdapter extends BaseFragmentAdapter {
-
-    protected static class HashtagObject {
-        String hashtag;
-        int date;
-    }
-
-    protected ArrayList<TLRPC.User> globalSearch = new ArrayList<>();
-    private long reqId = 0;
-    private int lastReqId;
-    protected String lastFoundUsername = null;
-
-    protected ArrayList<HashtagObject> hashtags;
-    protected HashMap<String, HashtagObject> hashtagsByText;
-    protected boolean hashtagsLoadedFromDb = false;
-
-    public void queryServerSearch(final String query) {
-//        if (reqId != 0) {
-//            ConnectionsManager.getInstance().cancelRpc(reqId, true);
-//            reqId = 0;
-//        }
-    }
-
-    public void loadRecentHashtags() {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT id, date FROM hashtag_recent_v2 WHERE 1");
-                    final ArrayList<HashtagObject> arrayList = new ArrayList<>();
-                    final HashMap<String, HashtagObject> hashMap = new HashMap<>();
-                    while (cursor.next()) {
-                        HashtagObject hashtagObject = new HashtagObject();
-                        hashtagObject.hashtag = cursor.stringValue(0);
-                        hashtagObject.date = cursor.intValue(1);
-                        arrayList.add(hashtagObject);
-                        hashMap.put(hashtagObject.hashtag, hashtagObject);
-                    }
-                    cursor.dispose();
-                    Collections.sort(arrayList, new Comparator<HashtagObject>() {
-                        @Override
-                        public int compare(HashtagObject lhs, HashtagObject rhs) {
-                            if (lhs.date < rhs.date) {
-                                return 1;
-                            } else if (lhs.date > rhs.date) {
-                                return -1;
-                            } else {
-                                return 0;
-                            }
-                        }
-                    });
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            setHashtags(arrayList, hashMap);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void addHashtagsFromMessage(String message) {
-        if (message == null) {
-            return;
-        }
-        boolean changed = false;
-        Pattern pattern = Pattern.compile("(^|\\s)#[\\w@\\.]+");
-        Matcher matcher = pattern.matcher(message);
-        while (matcher.find()) {
-            int start = matcher.start();
-            int end = matcher.end();
-            if (message.charAt(start) != '@' && message.charAt(start) != '#') {
-                start++;
-            }
-            String hashtag = message.substring(start, end);
-            if (hashtagsByText == null) {
-                hashtagsByText = new HashMap<>();
-                hashtags = new ArrayList<>();
-            }
-            HashtagObject hashtagObject = hashtagsByText.get(hashtag);
-            if (hashtagObject == null) {
-                hashtagObject = new HashtagObject();
-                hashtagObject.hashtag = hashtag;
-                hashtagsByText.put(hashtagObject.hashtag, hashtagObject);
-            } else {
-                hashtags.remove(hashtagObject);
-            }
-            hashtagObject.date = (int) (System.currentTimeMillis() / 1000);
-            hashtags.add(0, hashtagObject);
-            changed = true;
-        }
-        if (changed) {
-            putRecentHashtags(hashtags);
-        }
-    }
-
-    private void putRecentHashtags(final ArrayList<HashtagObject> arrayList) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    MessagesStorage.getInstance().getDatabase().beginTransaction();
-                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO hashtag_recent_v2 VALUES(?, ?)");
-                    for (int a = 0; a < arrayList.size(); a++) {
-                        if (a == 100) {
-                            break;
-                        }
-                        HashtagObject hashtagObject = arrayList.get(a);
-                        state.requery();
-                        state.bindString(1, hashtagObject.hashtag);
-                        state.bindInteger(2, hashtagObject.date);
-                        state.step();
-                    }
-                    state.dispose();
-                    MessagesStorage.getInstance().getDatabase().commitTransaction();
-                    if (arrayList.size() >= 100) {
-                        MessagesStorage.getInstance().getDatabase().beginTransaction();
-                        for (int a = 100; a < arrayList.size(); a++) {
-                            MessagesStorage.getInstance().getDatabase().executeFast("DELETE FROM hashtag_recent_v2 WHERE id = '" + arrayList.get(a).hashtag + "'").stepThis().dispose();
-                        }
-                        MessagesStorage.getInstance().getDatabase().commitTransaction();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    public void clearRecentHashtags() {
-        hashtags = new ArrayList<>();
-        hashtagsByText = new HashMap<>();
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    MessagesStorage.getInstance().getDatabase().executeFast("DELETE FROM hashtag_recent_v2 WHERE 1").stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
-
-    protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, HashtagObject> hashMap) {
-        hashtags = arrayList;
-        hashtagsByText = hashMap;
-        hashtagsLoadedFromDb = true;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
index 2e28a5e63..241e96c8d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
@@ -8,20 +8,10 @@
 
 package org.telegram.ui.Adapters;
 
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.MessagesStorage;
 import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashMap;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -49,46 +39,7 @@ public void queryServerSearch(final String query) {
 //        }
     }
 
-    public void loadRecentHashtags() {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT id, date FROM hashtag_recent_v2 WHERE 1");
-                    final ArrayList<HashtagObject> arrayList = new ArrayList<>();
-                    final HashMap<String, HashtagObject> hashMap = new HashMap<>();
-                    while (cursor.next()) {
-                        HashtagObject hashtagObject = new HashtagObject();
-                        hashtagObject.hashtag = cursor.stringValue(0);
-                        hashtagObject.date = cursor.intValue(1);
-                        arrayList.add(hashtagObject);
-                        hashMap.put(hashtagObject.hashtag, hashtagObject);
-                    }
-                    cursor.dispose();
-                    Collections.sort(arrayList, new Comparator<HashtagObject>() {
-                        @Override
-                        public int compare(HashtagObject lhs, HashtagObject rhs) {
-                            if (lhs.date < rhs.date) {
-                                return 1;
-                            } else if (lhs.date > rhs.date) {
-                                return -1;
-                            } else {
-                                return 0;
-                            }
-                        }
-                    });
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            setHashtags(arrayList, hashMap);
-                        }
-                    });
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
+
 
     public void addHashtagsFromMessage(String message) {
         if (message == null) {
@@ -120,57 +71,15 @@ public void addHashtagsFromMessage(String message) {
             hashtags.add(0, hashtagObject);
             changed = true;
         }
-        if (changed) {
-            putRecentHashtags(hashtags);
-        }
+//        if (changed) {
+//            putRecentHashtags(hashtags);
+//        }
     }
 
-    private void putRecentHashtags(final ArrayList<HashtagObject> arrayList) {
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    MessagesStorage.getInstance().getDatabase().beginTransaction();
-                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO hashtag_recent_v2 VALUES(?, ?)");
-                    for (int a = 0; a < arrayList.size(); a++) {
-                        if (a == 100) {
-                            break;
-                        }
-                        HashtagObject hashtagObject = arrayList.get(a);
-                        state.requery();
-                        state.bindString(1, hashtagObject.hashtag);
-                        state.bindInteger(2, hashtagObject.date);
-                        state.step();
-                    }
-                    state.dispose();
-                    MessagesStorage.getInstance().getDatabase().commitTransaction();
-                    if (arrayList.size() >= 100) {
-                        MessagesStorage.getInstance().getDatabase().beginTransaction();
-                        for (int a = 100; a < arrayList.size(); a++) {
-                            MessagesStorage.getInstance().getDatabase().executeFast("DELETE FROM hashtag_recent_v2 WHERE id = '" + arrayList.get(a).hashtag + "'").stepThis().dispose();
-                        }
-                        MessagesStorage.getInstance().getDatabase().commitTransaction();
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-    }
 
     public void clearRecentHashtags() {
         hashtags = new ArrayList<>();
         hashtagsByText = new HashMap<>();
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    MessagesStorage.getInstance().getDatabase().executeFast("DELETE FROM hashtag_recent_v2 WHERE 1").stepThis().dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
     }
 
     protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, HashtagObject> hashMap) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index 9a8d30e2a..e53d909d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -30,7 +30,6 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.R;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index 5d80fd443..2a618cc45 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -36,7 +36,6 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.volley.AuthFailureError;
 import org.telegram.android.volley.Request;
