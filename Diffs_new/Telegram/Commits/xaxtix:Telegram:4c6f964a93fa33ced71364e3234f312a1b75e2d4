diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
index b717d6e99..cb804af6f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
@@ -7,7 +7,6 @@
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.ColorFilter;
-import android.graphics.CornerPathEffect;
 import android.graphics.Paint;
 import android.graphics.Path;
 import android.graphics.PixelFormat;
@@ -22,13 +21,12 @@
 import androidx.annotation.Nullable;
 import androidx.core.graphics.ColorUtils;
 
-import com.google.android.exoplayer2.util.Log;
-
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.DialogsActivity;
 
 
 public class ArchivedPullForegroundDrawable {
@@ -74,8 +72,7 @@
     private int diameter = AndroidUtilities.dp(18);
 
     private View dialogCell;
-    private View contentView;
-    private View listView;
+    private DialogsActivity.DialogsRecyclerView listView;
 
     public float pullProgress;
 
@@ -128,19 +125,18 @@ public void setDialogCell(View view) {
         releaseTooltip = LocaleController.getString("ReleaseForArchive", R.string.ReleaseForArchive);
     }
 
-    public void setParentViews(View contentView, View listView) {
-        this.contentView = contentView;
+    public void setListView(DialogsActivity.DialogsRecyclerView listView) {
         this.listView = listView;
     }
 
     public void drawOverScroll(Canvas canvas) {
-        int overscroll = (int) listView.getTranslationY();
+        int overscroll = (int) listView.getViewOffset();
 
         float cX = outCx;
         float cY = outCy + overscroll;
 
         canvas.save();
-        canvas.clipRect(0, 0, contentView.getMeasuredWidth(), overscroll + 1);
+        canvas.clipRect(0, 0, listView.getMeasuredWidth(), overscroll + 1);
         if (outProgress == 0f) {
             canvas.drawPaint(backgroundPaint);
         } else {
@@ -176,7 +172,7 @@ public void drawOverScroll(Canvas canvas) {
     public void draw(Canvas canvas) {
         if (!willDraw || isOut || dialogCell == null || listView == null) return;
 
-        int overscroll = (int) listView.getTranslationY();
+        int overscroll = (int) listView.getViewOffset();
         int visibleHeight = (int) (dialogCell.getHeight() * pullProgress);
 
         float bounceP = bounceIn ? (0.07f * bounceProgress) - 0.05f : 0.02f * bounceProgress;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
index 076795097..86b5a0814 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
@@ -77,9 +77,9 @@
     private int sectionsType;
     private int sectionOffset;
 
-    private Drawable selectorDrawable;
-    private int selectorPosition;
-    private android.graphics.Rect selectorRect = new android.graphics.Rect();
+    protected Drawable selectorDrawable;
+    protected int selectorPosition;
+    protected android.graphics.Rect selectorRect = new android.graphics.Rect();
     private boolean isChildViewEnabled;
 
     private boolean selfOnLayout;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 66dbf6cb9..a7451ca9c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -41,6 +41,7 @@
 import android.view.HapticFeedbackConstants;
 import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.ViewOutlineProvider;
 import android.view.ViewTreeObserver;
 import android.view.animation.AccelerateDecelerateInterpolator;
@@ -50,13 +51,11 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.ItemTouchHelper;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
 import androidx.recyclerview.widget.RecyclerView;
 
-import org.checkerframework.checker.units.qual.A;
 import org.telegram.messenger.AccountInstance;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
@@ -138,7 +137,7 @@
 
 public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    private RecyclerListView listView;
+    private DialogsRecyclerView listView;
     private LinearLayoutManager layoutManager;
     private DialogsAdapter dialogsAdapter;
     private DialogsSearchAdapter dialogsSearchAdapter;
@@ -267,14 +266,6 @@ public ContentView(Context context) {
             super(context);
         }
 
-        @Override
-        protected void onDraw(Canvas canvas) {
-            if (archivedPullForegroundDrawable != null && listView.getTranslationY() != 0) {
-                archivedPullForegroundDrawable.drawOverScroll(canvas);
-            }
-            super.onDraw(canvas);
-        }
-
         @Override
         protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             int widthSize = View.MeasureSpec.getSize(widthMeasureSpec);
@@ -415,6 +406,205 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
         }
     }
 
+    public class DialogsRecyclerView extends RecyclerListView {
+
+        private boolean firstLayout = true;
+        private boolean ignoreLayout;
+
+        float viewOffset;
+
+        public DialogsRecyclerView(Context context) {
+            super(context);
+        }
+
+        public void setViewsOffset(float viewOffset) {
+            this.viewOffset = viewOffset;
+
+            if (selectorPosition != NO_POSITION) {
+                View v = layoutManager.findViewByPosition(selectorPosition);
+                if (v != null) {
+                    selectorRect.set(v.getLeft(), (int) (v.getTop() + viewOffset),
+                            v.getRight(), (int) (v.getBottom() + viewOffset));
+                    selectorDrawable.setBounds(selectorRect);
+                }
+            }
+
+            int n = getChildCount();
+            for (int i = 0; i < n; i++) {
+                getChildAt(i).setTranslationY(viewOffset);
+            }
+            invalidate();
+
+        }
+
+        public float getViewOffset() {
+            return viewOffset;
+        }
+
+        @Override
+        public void addView(View child, int index, ViewGroup.LayoutParams params) {
+            super.addView(child, index, params);
+            child.setTranslationY(viewOffset);
+        }
+
+        @Override
+        public void removeView(View view) {
+            super.removeView(view);
+            view.setTranslationY(0);
+        }
+
+        @Override
+        public void onDraw(Canvas canvas) {
+            if (archivedPullForegroundDrawable != null && viewOffset != 0) {
+                archivedPullForegroundDrawable.drawOverScroll(canvas);
+            }
+            super.onDraw(canvas);
+        }
+
+
+        @Override
+        protected void dispatchDraw(Canvas canvas) {
+            super.dispatchDraw(canvas);
+            if (slidingView != null && pacmanAnimation != null) {
+                pacmanAnimation.draw(canvas, slidingView.getTop() + slidingView.getMeasuredHeight() / 2);
+            }
+        }
+
+        @Override
+        public void setAdapter(RecyclerView.Adapter adapter) {
+            super.setAdapter(adapter);
+            firstLayout = true;
+        }
+
+        private void checkIfAdapterValid() {
+            if (listView != null && dialogsAdapter != null && listView.getAdapter() == dialogsAdapter && lastItemsCount != dialogsAdapter.getItemCount()) {
+                ignoreLayout = true;
+                dialogsAdapter.notifyDataSetChanged();
+                ignoreLayout = false;
+            }
+        }
+
+        @Override
+        public void setPadding(int left, int top, int right, int bottom) {
+            super.setPadding(left, top, right, bottom);
+            if (searchEmptyView != null) {
+                searchEmptyView.setPadding(left, top, right, bottom);
+            }
+        }
+
+        @Override
+        protected void onMeasure(int widthSpec, int heightSpec) {
+            if (firstLayout && getMessagesController().dialogsLoaded) {
+                if (hasHiddenArchive()) {
+                    ignoreLayout = true;
+                    layoutManager.scrollToPositionWithOffset(1, 0);
+                    ignoreLayout = false;
+                }
+                firstLayout = false;
+            }
+            checkIfAdapterValid();
+            super.onMeasure(widthSpec, heightSpec);
+        }
+
+        @Override
+        protected void onLayout(boolean changed, int l, int t, int r, int b) {
+            super.onLayout(changed, l, t, r, b);
+            if ((dialogRemoveFinished != 0 || dialogInsertFinished != 0 || dialogChangeFinished != 0) && !dialogsItemAnimator.isRunning()) {
+                onDialogAnimationFinished();
+            }
+        }
+
+        @Override
+        public void requestLayout() {
+            if (ignoreLayout) {
+                return;
+            }
+            super.requestLayout();
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent e) {
+            if (waitingForScrollFinished || dialogRemoveFinished != 0 || dialogInsertFinished != 0 || dialogChangeFinished != 0) {
+                return false;
+            }
+            int action = e.getAction();
+            if (action == MotionEvent.ACTION_DOWN) {
+                listView.setOverScrollMode(View.OVER_SCROLL_ALWAYS);
+            }
+            if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
+                if (!itemTouchhelper.isIdle() && swipeController.swipingFolder) {
+                    swipeController.swipeFolderBack = true;
+                    if (itemTouchhelper.checkHorizontalSwipe(null, ItemTouchHelper.LEFT) != 0) {
+                        SharedConfig.toggleArchiveHidden();
+                        getUndoView().showWithAction(0, UndoView.ACTION_ARCHIVE_PINNED, null, null);
+                        archivePullViewState = SharedConfig.archiveHidden ? ARCHIVE_ITEM_STATE_HIDDEN : ARCHIVE_ITEM_STATE_PINNED;
+                        if (archivedPullForegroundDrawable != null)
+                            archivedPullForegroundDrawable.setWillDraw(archivePullViewState != ARCHIVE_ITEM_STATE_PINNED);
+                    }
+                }
+            }
+            boolean result = super.onTouchEvent(e);
+            if ((action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) &&
+                    archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && hasHiddenArchive()) {
+
+                int currentPosition = layoutManager.findFirstVisibleItemPosition();
+                if (currentPosition == 0) {
+                    View view = layoutManager.findViewByPosition(currentPosition);
+                    int height = (int) (AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) * ArchivedPullForegroundDrawable.SNAP_HEIGHT);
+                    int diff = view.getTop() + view.getMeasuredHeight();
+                    if (view != null) {
+                        long pullingTime = System.currentTimeMillis() - startArchivePullingTime;
+                        if (diff < height || pullingTime < ArchivedPullForegroundDrawable.minPullingTime) {
+                            listView.smoothScrollBy(0, diff, CubicBezierInterpolator.EASE_OUT_QUINT);
+                            archivePullViewState = ARCHIVE_ITEM_STATE_HIDDEN;
+                        } else {
+                            if (archivePullViewState != ARCHIVE_ITEM_STATE_SHOWED) {
+                                ((DialogCell) view).startOutAnimation();
+                                listView.smoothScrollBy(0, view.getTop(), CubicBezierInterpolator.EASE_OUT_QUINT);
+                                if (!canShowHiddenArchive) {
+                                    canShowHiddenArchive = true;
+                                    listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
+                                }
+                                archivePullViewState = ARCHIVE_ITEM_STATE_SHOWED;
+                            }
+                        }
+
+                        if (listView.getViewOffset() != 0) {
+                            ValueAnimator valueAnimator = ValueAnimator.ofFloat(listView.getViewOffset(), 0f);
+                            valueAnimator.addUpdateListener(animation ->
+                                    listView.setViewsOffset((float) animation.getAnimatedValue()));
+
+                            valueAnimator.setDuration((long) (350f - 120f * (listView.getViewOffset() / ArchivedPullForegroundDrawable.maxOverScroll)));
+                            valueAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
+                            listView.setScrollEnabled(false);
+                            valueAnimator.addListener(new AnimatorListenerAdapter() {
+                                @Override
+                                public void onAnimationEnd(Animator animation) {
+                                    super.onAnimationEnd(animation);
+                                    listView.setScrollEnabled(true);
+                                }
+                            });
+                            valueAnimator.start();
+                        }
+                    }
+                }
+            }
+            return result;
+        }
+
+        @Override
+        public boolean onInterceptTouchEvent(MotionEvent e) {
+            if (waitingForScrollFinished || dialogRemoveFinished != 0 || dialogInsertFinished != 0 || dialogChangeFinished != 0) {
+                return false;
+            }
+            if (e.getAction() == MotionEvent.ACTION_DOWN) {
+                allowSwipeDuringCurrentTouch = !actionBar.isActionModeShowed();
+                checkIfAdapterValid();
+            }
+            return super.onInterceptTouchEvent(e);
+        }
+    }
+
     class SwipeController extends ItemTouchHelper.Callback {
 
         private RectF buttonInstance;
@@ -984,151 +1174,7 @@ public void onItemClick(int id) {
         ContentView contentView = new ContentView(context);
         fragmentView = contentView;
 
-        listView = new RecyclerListView(context) {
-
-            private boolean firstLayout = true;
-            private boolean ignoreLayout;
-
-            @Override
-            public void setTranslationY(float translationY) {
-                contentView.invalidate();
-                super.setTranslationY(translationY);
-            }
-
-            @Override
-            protected void dispatchDraw(Canvas canvas) {
-                super.dispatchDraw(canvas);
-                if (slidingView != null && pacmanAnimation != null) {
-                    pacmanAnimation.draw(canvas, slidingView.getTop() + slidingView.getMeasuredHeight() / 2);
-                }
-            }
-
-            @Override
-            public void setAdapter(Adapter adapter) {
-                super.setAdapter(adapter);
-                firstLayout = true;
-            }
-
-            private void checkIfAdapterValid() {
-                if (listView != null && dialogsAdapter != null && listView.getAdapter() == dialogsAdapter && lastItemsCount != dialogsAdapter.getItemCount()) {
-                    ignoreLayout = true;
-                    dialogsAdapter.notifyDataSetChanged();
-                    ignoreLayout = false;
-                }
-            }
-
-            @Override
-            public void setPadding(int left, int top, int right, int bottom) {
-                super.setPadding(left, top, right, bottom);
-                if (searchEmptyView != null) {
-                    searchEmptyView.setPadding(left, top, right, bottom);
-                }
-            }
-
-            @Override
-            protected void onMeasure(int widthSpec, int heightSpec) {
-                if (firstLayout && getMessagesController().dialogsLoaded) {
-                    if (hasHiddenArchive()) {
-                        ignoreLayout = true;
-                        layoutManager.scrollToPositionWithOffset(1, 0);
-                        ignoreLayout = false;
-                    }
-                    firstLayout = false;
-                }
-                checkIfAdapterValid();
-                super.onMeasure(widthSpec, heightSpec);
-            }
-
-            @Override
-            protected void onLayout(boolean changed, int l, int t, int r, int b) {
-                super.onLayout(changed, l, t, r, b);
-                if ((dialogRemoveFinished != 0 || dialogInsertFinished != 0 || dialogChangeFinished != 0) && !dialogsItemAnimator.isRunning()) {
-                    onDialogAnimationFinished();
-                }
-            }
-
-            @Override
-            public void requestLayout() {
-                if (ignoreLayout) {
-                    return;
-                }
-                super.requestLayout();
-            }
-
-            @Override
-            public boolean onTouchEvent(MotionEvent e) {
-                if (waitingForScrollFinished || dialogRemoveFinished != 0 || dialogInsertFinished != 0 || dialogChangeFinished != 0) {
-                    return false;
-                }
-                int action = e.getAction();
-                if (action == MotionEvent.ACTION_DOWN) {
-                    listView.setOverScrollMode(View.OVER_SCROLL_ALWAYS);
-                }
-                if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
-                    if (!itemTouchhelper.isIdle() && swipeController.swipingFolder) {
-                        swipeController.swipeFolderBack = true;
-                        if (itemTouchhelper.checkHorizontalSwipe(null, ItemTouchHelper.LEFT) != 0) {
-                            SharedConfig.toggleArchiveHidden();
-                            getUndoView().showWithAction(0, UndoView.ACTION_ARCHIVE_PINNED, null, null);
-                            archivePullViewState = SharedConfig.archiveHidden ? ARCHIVE_ITEM_STATE_HIDDEN : ARCHIVE_ITEM_STATE_PINNED;
-                            if (archivedPullForegroundDrawable != null)
-                                archivedPullForegroundDrawable.setWillDraw(archivePullViewState != ARCHIVE_ITEM_STATE_PINNED);
-                        }
-                    }
-                }
-                boolean result = super.onTouchEvent(e);
-                if ((action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) &&
-                        archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && hasHiddenArchive()) {
-
-                    int currentPosition = layoutManager.findFirstVisibleItemPosition();
-                    if (currentPosition == 0) {
-                        View view = layoutManager.findViewByPosition(currentPosition);
-                        int height = (int) (AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) * ArchivedPullForegroundDrawable.SNAP_HEIGHT);
-                        int diff = view.getTop() + view.getMeasuredHeight();
-                        if (view != null) {
-                            long pullingTime = System.currentTimeMillis() - startArchivePullingTime;
-                            if (diff < height || pullingTime < ArchivedPullForegroundDrawable.minPullingTime) {
-                                listView.smoothScrollBy(0, diff, CubicBezierInterpolator.EASE_OUT_QUINT);
-                                archivePullViewState = ARCHIVE_ITEM_STATE_HIDDEN;
-                            } else {
-                                if (archivePullViewState != ARCHIVE_ITEM_STATE_SHOWED) {
-                                    ((DialogCell) view).startOutAnimation();
-                                    listView.smoothScrollBy(0, view.getTop(), CubicBezierInterpolator.EASE_OUT_QUINT);
-                                    if (!canShowHiddenArchive) {
-                                        canShowHiddenArchive = true;
-                                        listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
-                                    }
-                                    archivePullViewState = ARCHIVE_ITEM_STATE_SHOWED;
-                                }
-                            }
-
-                            if (listView.getTranslationY() != 0) {
-                                ValueAnimator valueAnimator = ValueAnimator.ofFloat(listView.getTranslationY(), 0f);
-                                valueAnimator.addUpdateListener(animation ->
-                                        listView.setTranslationY((float) animation.getAnimatedValue()));
-
-                                valueAnimator.setDuration((long) (350f - 120f * (listView.getTranslationY() / ArchivedPullForegroundDrawable.maxOverScroll)));
-                                valueAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
-                                valueAnimator.start();
-                            }
-                        }
-                    }
-                }
-                return result;
-            }
-
-            @Override
-            public boolean onInterceptTouchEvent(MotionEvent e) {
-                if (waitingForScrollFinished || dialogRemoveFinished != 0 || dialogInsertFinished != 0 || dialogChangeFinished != 0) {
-                    return false;
-                }
-                if (e.getAction() == MotionEvent.ACTION_DOWN) {
-                    allowSwipeDuringCurrentTouch = !actionBar.isActionModeShowed();
-                    checkIfAdapterValid();
-                }
-                return super.onInterceptTouchEvent(e);
-            }
-        };
+        listView = new DialogsRecyclerView(context);
         dialogsItemAnimator = new DialogsItemAnimator() {
 
             @Override
@@ -1195,11 +1241,7 @@ public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State
             @Override
             public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {
                 boolean isDragging = listView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING;
-                if (listView.getTranslationY() != 0 && isDragging) {
-                    //this hack needed for smooth translateY, recycler can't save translations for touches
-                    dy -= (listView.getTranslationY() - lastTranslation) * 2f;
-                }
-                lastTranslation = (int) listView.getTranslationY();
+
                 int measuredDy = dy;
                 if (listView.getAdapter() == dialogsAdapter && dialogsType == 0 && !onlySelect && folderId == 0 && dy < 0 && getMessagesController().hasHiddenArchive() && archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN) {
                     listView.setOverScrollMode(View.OVER_SCROLL_ALWAYS);
@@ -1230,16 +1272,16 @@ public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerVi
                     }
                 }
 
-                if (listView.getTranslationY() != 0 && dy > 0 && isDragging) {
-                    float ty = (int) listView.getTranslationY();
-                    ty -= dy / 2f;
+                if (listView.getViewOffset() != 0 && dy > 0 && isDragging) {
+                    float ty = (int) listView.getViewOffset();
+                    ty -= dy;
                     if (ty < 0) {
                         measuredDy = (int) ty;
                         ty = 0;
                     } else {
                         measuredDy = 0;
                     }
-                    listView.setTranslationY(ty);
+                    listView.setViewsOffset(ty);
                 }
 
 
@@ -1273,16 +1315,15 @@ public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerVi
                         if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && measuredDy - usedDy != 0 && dy < 0 && isDragging) {
                             float ty;
 
-                            float tk = (listView.getTranslationY() / ArchivedPullForegroundDrawable.maxOverScroll);
+                            float tk = (listView.getViewOffset() / ArchivedPullForegroundDrawable.maxOverScroll);
                             tk = 1f - tk;
-                            ty = (listView.getTranslationY() - (dy / 2f) * ArchivedPullForegroundDrawable.startPullOverScroll * tk);
-
-                            listView.setTranslationY(ty);
+                            ty = (listView.getViewOffset() - dy * ArchivedPullForegroundDrawable.startPullOverScroll * tk);
+                            listView.setViewsOffset(ty);
                         }
 
                         if (archivedPullForegroundDrawable != null) {
                             archivedPullForegroundDrawable.pullProgress = k;
-                            archivedPullForegroundDrawable.setParentViews(contentView, listView);
+                            archivedPullForegroundDrawable.setListView(listView);
                         }
                     } else {
                         startArchivePullingTime = 0;
@@ -1292,7 +1333,7 @@ public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerVi
                         if (archivedPullForegroundDrawable != null) {
                             archivedPullForegroundDrawable.resetText();
                             archivedPullForegroundDrawable.pullProgress = 0f;
-                            archivedPullForegroundDrawable.setParentViews(contentView, listView);
+                            archivedPullForegroundDrawable.setListView(listView);
                         }
                     }
                     if (firstView != null) firstView.invalidate();
