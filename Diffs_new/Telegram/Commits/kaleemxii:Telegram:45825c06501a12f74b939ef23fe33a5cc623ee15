diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 9c7b7adf1..3eb77f94c 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -6,13 +6,14 @@ repositories {
 
 dependencies {
     compile 'com.android.support:support-v4:23.1.+'
-    compile "com.google.android.gms:play-services-gcm:8.4.0"
-    compile "com.google.android.gms:play-services-maps:8.4.0"
+    compile 'com.google.android.gms:play-services-gcm:8.4.0'
+    compile 'com.google.android.gms:play-services-maps:8.4.0'
     compile 'net.hockeyapp.android:HockeySDK:3.6.+'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
     compile 'com.google.android.gms:play-services-identity:8.4.0'
     compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
     compile 'com.fasterxml.jackson.core:jackson-databind:2.3.2'
+    compile 'com.google.android.gms:play-services-maps:8.4.0'
 }
 
 android {
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.17.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.17.so
new file mode 100644
index 000000000..df080198f
Binary files /dev/null and b/TMessagesProj/libs/armeabi-v7a/libtmessages.17.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.17.so b/TMessagesProj/libs/armeabi/libtmessages.17.so
new file mode 100644
index 000000000..4d67d5e8a
Binary files /dev/null and b/TMessagesProj/libs/armeabi/libtmessages.17.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.17.so b/TMessagesProj/libs/x86/libtmessages.17.so
new file mode 100644
index 000000000..f18d7a98d
Binary files /dev/null and b/TMessagesProj/libs/x86/libtmessages.17.so differ
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 74e63fcda..ee1a5c656 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -37,6 +37,8 @@
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
     <uses-permission android:name="android.permission.USE_FINGERPRINT" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
 
     <application
         android:name=".ApplicationLoader"
@@ -155,6 +157,11 @@
                 android:resource="@xml/auth"/>
         </service>
 
+        <service
+            android:name=".LocationService"
+            android:exported="true">
+        </service>
+
         <service android:name=".ContactsSyncAdapterService" android:exported="true">
             <intent-filter>
                 <action android:name="android.content.SyncAdapter" />
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
new file mode 100644
index 000000000..fbb64884f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
@@ -0,0 +1,162 @@
+package org.telegram.messenger;
+
+import android.app.Service;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.support.v4.app.ActivityCompat;
+import android.util.Log;
+import android.widget.Toast;
+
+/**
+ * Created by gaukumar on 30-01-2016.
+ */
+public class LocationService extends Service {
+    public static final String BROADCAST_ACTION = "Hello World";
+    private static final int HALF_MINUTE = 1000 * 30 * 1;
+    public LocationManager locationManager;
+    public MyLocationListener listener;
+    public Location previousBestLocation = null;
+
+    Intent intent;
+    int counter = 0;
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        intent = new Intent(BROADCAST_ACTION);
+    }
+
+    @Override
+    public void onStart(Intent intent, int startId) {
+        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
+        listener = new MyLocationListener();
+        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+            return;
+        }
+        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 4000, 5, listener);
+        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 4000, 5, listener);
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    protected boolean isBetterLocation(Location location, Location currentBestLocation) {
+        if (currentBestLocation == null) {
+            // A new location is always better than no location
+            return true;
+        }
+
+        // Check whether the new location fix is newer or older
+        long timeDelta = location.getTime() - currentBestLocation.getTime();
+        boolean isSignificantlyNewer = timeDelta > HALF_MINUTE;
+        boolean isSignificantlyOlder = timeDelta < -HALF_MINUTE;
+        boolean isNewer = timeDelta > 0;
+
+        // If it's been more than one minute since the current location, use the new location
+        // because the user has likely moved
+        if (isSignificantlyNewer) {
+            return true;
+            // If the new location is more than two minutes older, it must be worse
+        } else if (isSignificantlyOlder) {
+            return false;
+        }
+
+        // Check whether the new location fix is more or less accurate
+        int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation.getAccuracy());
+        boolean isLessAccurate = accuracyDelta > 0;
+        boolean isMoreAccurate = accuracyDelta < 0;
+        boolean isSignificantlyLessAccurate = accuracyDelta > 200;
+
+        // Check if the old and new location are from the same provider
+        boolean isFromSameProvider = isSameProvider(location.getProvider(),
+                currentBestLocation.getProvider());
+
+        // Determine location quality using a combination of timeliness and accuracy
+        if (isMoreAccurate) {
+            return true;
+        } else if (isNewer && !isLessAccurate) {
+            return true;
+        } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {
+            return true;
+        }
+        return false;
+    }
+
+
+    /** Checks whether two providers are the same */
+    private boolean isSameProvider(String provider1, String provider2) {
+        if (provider1 == null) {
+            return provider2 == null;
+        }
+        return provider1.equals(provider2);
+    }
+
+
+    @Override
+    public void onDestroy() {
+        // handler.removeCallbacks(sendUpdatesToUI);
+        super.onDestroy();
+        Log.v("STOP_SERVICE", "DONE");
+        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+            return;
+        }
+        locationManager.removeUpdates(listener);
+    }
+
+    public static Thread performOnBackgroundThread(final Runnable runnable) {
+        final Thread t = new Thread() {
+            @Override
+            public void run() {
+                try {
+                    runnable.run();
+                } finally {
+
+                }
+            }
+        };
+        t.start();
+        return t;
+    }
+
+    public class MyLocationListener implements LocationListener
+    {
+
+        public void onLocationChanged(final Location loc)
+        {
+
+            if(isBetterLocation(loc, previousBestLocation)) {
+                loc.getLatitude();
+                loc.getLongitude();
+                Toast.makeText( getApplicationContext(), "Changed. Lat: "+loc.getLatitude()+", Long: "+loc.getLongitude(), Toast.LENGTH_SHORT).show();
+                intent.putExtra("Latitude", loc.getLatitude());
+                intent.putExtra("Longitude", loc.getLongitude());
+                intent.putExtra("Provider", loc.getProvider());
+                sendBroadcast(intent);
+            }
+        }
+
+        public void onProviderDisabled(String provider)
+        {
+            Toast.makeText(getApplicationContext(), "Gps Disabled", Toast.LENGTH_SHORT).show();
+        }
+
+        public void onProviderEnabled(String provider)
+        {
+            Toast.makeText( getApplicationContext(), "Gps Enabled", Toast.LENGTH_SHORT).show();
+        }
+
+        public void onStatusChanged(String provider, int status, Bundle extras)
+        {
+
+        }
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index fc10b9360..616a65257 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -47,7 +47,9 @@
 public class NotificationsController {
 
     public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
-
+    private static volatile NotificationsController Instance = null;
+    public ArrayList<MessageObject> popupMessages = new ArrayList<>();
+    protected AudioManager audioManager;
     private DispatchQueue notificationsQueue = new DispatchQueue("notificationsQueue");
     private ArrayList<MessageObject> pushMessages = new ArrayList<>();
     private ArrayList<MessageObject> delayedPushMessages = new ArrayList<>();
@@ -60,7 +62,6 @@
     private HashMap<Long, Integer> pushDialogsOverrideMention = new HashMap<>();
     private int wearNotificationId = 10000;
     private int autoNotificationId = 20000;
-    public ArrayList<MessageObject> popupMessages = new ArrayList<>();
     private long openned_dialog_id = 0;
     private int total_unread_count = 0;
     private int personal_count = 0;
@@ -69,10 +70,8 @@
     private boolean inChatSoundEnabled = true;
     private int lastBadgeCount;
     private String launcherClassName;
-
     private Runnable notificationDelayRunnable;
     private PowerManager.WakeLock notificationDelayWakelock;
-
     private long lastSoundPlay;
     private long lastSoundOutPlay;
     private SoundPool soundPool;
@@ -80,23 +79,8 @@
     private int soundOut;
     private boolean soundInLoaded;
     private boolean soundOutLoaded;
-    protected AudioManager audioManager;
     private AlarmManager alarmManager;
 
-    private static volatile NotificationsController Instance = null;
-    public static NotificationsController getInstance() {
-        NotificationsController localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (MessagesController.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new NotificationsController();
-                }
-            }
-        }
-        return localInstance;
-    }
-
     public NotificationsController() {
         notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
@@ -140,6 +124,72 @@ public void run() {
         };
     }
 
+    public static NotificationsController getInstance() {
+        NotificationsController localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (MessagesController.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new NotificationsController();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    private static String getLauncherClassName(Context context) {
+        try {
+            PackageManager pm = context.getPackageManager();
+
+            Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.addCategory(Intent.CATEGORY_LAUNCHER);
+
+            List<ResolveInfo> resolveInfos = pm.queryIntentActivities(intent, 0);
+            for (ResolveInfo resolveInfo : resolveInfos) {
+                String pkgName = resolveInfo.activityInfo.applicationInfo.packageName;
+                if (pkgName.equalsIgnoreCase(context.getPackageName())) {
+                    return resolveInfo.activityInfo.name;
+                }
+            }
+        } catch (Throwable e) {
+            FileLog.e("tmessages", e);
+        }
+        return null;
+    }
+
+    public static void updateServerNotificationsSettings(long dialog_id) {
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
+        if ((int) dialog_id == 0) {
+            return;
+        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
+        req.settings = new TLRPC.TL_inputPeerNotifySettings();
+        req.settings.sound = "default";
+        req.settings.events_mask = 0;
+        int mute_type = preferences.getInt("notify2_" + dialog_id, 0);
+        if (mute_type == 3) {
+            req.settings.mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
+        } else {
+            req.settings.mute_until = mute_type != 2 ? 0 : Integer.MAX_VALUE;
+        }
+        req.settings.show_previews = preferences.getBoolean("preview_" + dialog_id, true);
+
+        req.peer = new TLRPC.TL_inputNotifyPeer();
+
+        ((TLRPC.TL_inputNotifyPeer) req.peer).peer = MessagesController.getInputPeer((int) dialog_id);
+        if (((TLRPC.TL_inputNotifyPeer) req.peer).peer == null) {
+            return;
+        }
+
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        });
+    }
+
     public void cleanup() {
         popupMessages.clear();
         notificationsQueue.postRunnable(new Runnable() {
@@ -467,7 +517,7 @@ public void run() {
                             notifyOverride = 1;
                         }
                     }
-                    boolean canAddValue = !(notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || ((int)dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0);
+                    boolean canAddValue = !(notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || ((int) dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0);
 
                     Integer currentCount = pushDialogs.get(dialog_id);
                     Integer newCount = entry.getValue();
@@ -719,7 +769,7 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
         }
 
         String msg = null;
-        if ((int)dialog_id == 0 || AndroidUtilities.needShowPasscode(false) || UserConfig.isWaitingForPasscodeEnter) {
+        if ((int) dialog_id == 0 || AndroidUtilities.needShowPasscode(false) || UserConfig.isWaitingForPasscodeEnter) {
             msg = LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
         } else {
             if (chat_id == 0 && from_id != 0) {
@@ -952,26 +1002,6 @@ private void scheduleNotificationRepeat() {
         }
     }
 
-    private static String getLauncherClassName(Context context) {
-        try {
-            PackageManager pm = context.getPackageManager();
-
-            Intent intent = new Intent(Intent.ACTION_MAIN);
-            intent.addCategory(Intent.CATEGORY_LAUNCHER);
-
-            List<ResolveInfo> resolveInfos = pm.queryIntentActivities(intent, 0);
-            for (ResolveInfo resolveInfo : resolveInfos) {
-                String pkgName = resolveInfo.activityInfo.applicationInfo.packageName;
-                if (pkgName.equalsIgnoreCase(context.getPackageName())) {
-                    return resolveInfo.activityInfo.name;
-                }
-            }
-        } catch (Throwable e) {
-            FileLog.e("tmessages", e);
-        }
-        return null;
-    }
-
     private boolean isPersonalMessage(MessageObject messageObject) {
         return messageObject.messageOwner.to_id != null && messageObject.messageOwner.to_id.chat_id == 0 && messageObject.messageOwner.to_id.channel_id == 0
                 && (messageObject.messageOwner.action == null || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty);
@@ -1093,6 +1123,10 @@ public void run() {
     }
 
     private void showOrUpdateNotification(boolean notifyAboutLast) {
+        showOrUpdateNotification(notifyAboutLast, false, "Join", "Cancel");
+    }
+
+    private void showOrUpdateNotification(boolean notifyAboutLast, boolean isButtonRequired, String leftBtnName, String rightBtnName) {
         if (!UserConfig.isClientActivated() || pushMessages.isEmpty()) {
             dismissNotification();
             return;
@@ -1287,16 +1321,34 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             } else {
                 detailText = LocaleController.formatString("NotificationMessagesPeopleDisplayOrder", R.string.NotificationMessagesPeopleDisplayOrder, LocaleController.formatPluralString("NewMessages", total_unread_count), LocaleController.formatPluralString("FromChats", pushDialogs.size()));
             }
+            NotificationCompat.Builder mBuilder;
+            if (isButtonRequired) {
+                Intent dummyIntent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
+                PendingIntent pIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, (int) System.currentTimeMillis(), dummyIntent, 0);
+
+                mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+                        .setContentTitle(name)
+                        .setSmallIcon(R.drawable.notification)
+                        .setAutoCancel(true)
+                        .setNumber(total_unread_count)
+                        .setContentIntent(contentIntent)
+                        .setGroup("messages")
+                        .setGroupSummary(true)
+                        .setColor(0xff2ca5e0)
+                        .addAction(R.drawable.ic_reply_icon, leftBtnName, pIntent)
+                        .addAction(R.drawable.cancel_b, rightBtnName, pIntent);
+            } else {
+                mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+                        .setContentTitle(name)
+                        .setSmallIcon(R.drawable.notification)
+                        .setAutoCancel(true)
+                        .setNumber(total_unread_count)
+                        .setContentIntent(contentIntent)
+                        .setGroup("messages")
+                        .setGroupSummary(true)
+                        .setColor(0xff2ca5e0);
+            }
 
-            NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setContentTitle(name)
-                    .setSmallIcon(R.drawable.notification)
-                    .setAutoCancel(true)
-                    .setNumber(total_unread_count)
-                    .setContentIntent(contentIntent)
-                    .setGroup("messages")
-                    .setGroupSummary(true)
-                    .setColor(0xff2ca5e0);
 
             if (!notifyAboutLast) {
                 mBuilder.setPriority(NotificationCompat.PRIORITY_LOW);
@@ -1639,37 +1691,4 @@ public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
             }
         });
     }
-
-    public static void updateServerNotificationsSettings(long dialog_id) {
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
-        if ((int)dialog_id == 0) {
-            return;
-        }
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
-        req.settings = new TLRPC.TL_inputPeerNotifySettings();
-        req.settings.sound = "default";
-        req.settings.events_mask = 0;
-        int mute_type = preferences.getInt("notify2_" + dialog_id, 0);
-        if (mute_type == 3) {
-            req.settings.mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
-        } else {
-            req.settings.mute_until = mute_type != 2 ? 0 : Integer.MAX_VALUE;
-        }
-        req.settings.show_previews = preferences.getBoolean("preview_" + dialog_id, true);
-
-        req.peer = new TLRPC.TL_inputNotifyPeer();
-
-        ((TLRPC.TL_inputNotifyPeer)req.peer).peer = MessagesController.getInputPeer((int) dialog_id);
-        if (((TLRPC.TL_inputNotifyPeer)req.peer).peer == null) {
-            return;
-        }
-
-        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-
-            }
-        });
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 0c0ab7b83..8ffcf72fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -49,29 +49,31 @@
 import org.springframework.web.client.RestTemplate;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.LocationService;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NativeCrashManager;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
 import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.query.StickersQuery;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
+import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PasscodeView;
 
@@ -85,6 +87,10 @@
 
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate {
 
+    private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<>();
+    private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<>();
+    private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<>();
+    protected DrawerLayoutContainer drawerLayoutContainer;
     private boolean finished;
     private String videoPath;
     private String sendingText;
@@ -95,18 +101,13 @@
     private ArrayList<String> documentsOriginalPathsArray;
     private ArrayList<TLRPC.User> contactsToSend;
     private int currentConnectionState;
-    private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<>();
-    private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<>();
-    private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<>();
     private ViewTreeObserver.OnGlobalLayoutListener onGlobalLayoutListener;
-
     private ActionBarLayout actionBarLayout;
     private ActionBarLayout layersActionBarLayout;
     private ActionBarLayout rightActionBarLayout;
     private FrameLayout shadowTablet;
     private FrameLayout shadowTabletSide;
     private ImageView backgroundTablet;
-    protected DrawerLayoutContainer drawerLayoutContainer;
     private DrawerLayoutAdapter drawerLayoutAdapter;
     private PasscodeView passcodeView;
     private AlertDialog visibleDialog;
@@ -150,6 +151,9 @@ protected void onCreate(Bundle savedInstanceState) {
 
         super.onCreate(savedInstanceState);
 
+        //Starting LocationPushService
+        launchLocationService();
+
         if (UserConfig.passcodeHash.length() != 0 && UserConfig.appLocked) {
             UserConfig.lastPauseTime = ConnectionsManager.getInstance().getCurrentTime();
         }
@@ -2135,4 +2139,7 @@ protected void onPostExecute(Greeting greeting) {
 
     }
 
+    public void launchLocationService() {
+        startService(new Intent(getBaseContext(), LocationService.class));
+    }
 }
