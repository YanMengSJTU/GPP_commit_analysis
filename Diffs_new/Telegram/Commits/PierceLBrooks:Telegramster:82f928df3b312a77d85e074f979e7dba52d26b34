diff --git a/Telegram/settings.gradle b/Telegram/settings.gradle
index 867a4183d..6fa9f40c8 100644
--- a/Telegram/settings.gradle
+++ b/Telegram/settings.gradle
@@ -1 +1 @@
-include ':TMessagesProj'
+include ':TMessagesProj', ':sfml'
diff --git a/Telegram/sfml/.gitignore b/Telegram/sfml/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/Telegram/sfml/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/Telegram/sfml/build.gradle b/Telegram/sfml/build.gradle
new file mode 100644
index 000000000..de40ccfd7
--- /dev/null
+++ b/Telegram/sfml/build.gradle
@@ -0,0 +1,38 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 28
+    defaultConfig {
+        minSdkVersion 21
+        targetSdkVersion 28
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+        externalNativeBuild {
+            cmake {
+                cFlags "-Wno-c++11-narrowing"
+                cppFlags "-Wno-c++11-narrowing"
+                abiFilters "armeabi-v7a"
+            }
+        }
+    }
+    sourceSets {
+        main {
+            jniLibs.srcDirs = ['jniLibs']
+        }
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+    externalNativeBuild {
+        cmake {
+            path "./../../CMakeLists.txt"
+        }
+    }
+}
+
+dependencies {
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
+    implementation 'com.android.support:appcompat-v7:28.0.0'
+}
diff --git a/Telegram/sfml/jniLibs/armeabi-v7a/libopenal.so b/Telegram/sfml/jniLibs/armeabi-v7a/libopenal.so
new file mode 100644
index 000000000..9b5821e7b
Binary files /dev/null and b/Telegram/sfml/jniLibs/armeabi-v7a/libopenal.so differ
diff --git a/Telegram/sfml/proguard-rules.pro b/Telegram/sfml/proguard-rules.pro
new file mode 100644
index 000000000..f1b424510
--- /dev/null
+++ b/Telegram/sfml/proguard-rules.pro
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/Telegram/sfml/src/main/AndroidManifest.xml b/Telegram/sfml/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..11959cb47
--- /dev/null
+++ b/Telegram/sfml/src/main/AndroidManifest.xml
@@ -0,0 +1,5 @@
+<manifest
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.piercelbrooks.sfml">
+
+</manifest>
diff --git a/Telegram/sfml/src/main/java/com/piercelbrooks/sfml/SFMLActivity.java b/Telegram/sfml/src/main/java/com/piercelbrooks/sfml/SFMLActivity.java
new file mode 100644
index 000000000..d64df2676
--- /dev/null
+++ b/Telegram/sfml/src/main/java/com/piercelbrooks/sfml/SFMLActivity.java
@@ -0,0 +1,145 @@
+
+// Author: Pierce Brooks
+
+package com.piercelbrooks.sfml;
+
+import android.app.NativeActivity;
+import android.content.Context;
+import android.os.Bundle;
+import android.os.PersistableBundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+public abstract class SFMLActivity extends NativeActivity implements Lock {
+    static {
+        loadLibraries();
+    }
+
+    private static final String TAG = "SFML";
+    private static final String VIBRATOR_SERVICE = Context.VIBRATOR_SERVICE;
+    private static SFMLActivity self = null;
+
+    private ReentrantLock lock;
+
+    public SFMLActivity() {
+        super();
+        lock = new ReentrantLock();
+        self = this;
+    }
+
+    public static SFMLActivity getSelf() {
+        return self;
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        commonOnCreate(savedInstanceState, null);
+        super.onCreate(savedInstanceState);
+    }
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
+        commonOnCreate(savedInstanceState, persistentState);
+        super.onCreate(savedInstanceState, persistentState);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        finish();
+    }
+
+    @Override
+    protected void finalize() throws Throwable {
+        super.finalize();
+    }
+
+    private void commonOnCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
+        loadLibraries();
+    }
+
+    private static void loadLibrary(String library) {
+        loadLibrary(library, true);
+    }
+
+    private static void loadLibrary(String library, boolean variant) {
+        Log.d(TAG, "loadLibrary "+library);
+        if (variant) {
+            if (BuildConfig.DEBUG) {
+                System.loadLibrary(library+"-d");
+                return;
+            }
+        }
+        System.loadLibrary(library);
+    }
+
+    private static void loadLibraries() {
+        loadLibrary("openal", false);
+        loadLibrary("sfml-system");
+        loadLibrary("sfml-window");
+        loadLibrary("sfml-audio");
+        loadLibrary("sfml-graphics");
+        loadLibrary("sfml-network");
+        loadLibrary("sfml-activity");
+        loadLibrary("sfml_android", false);
+    }
+
+    @Override
+    public String toString() {
+        return TAG;
+    }
+
+    @Override
+    public Object getSystemService(@NonNull String name) {
+        return super.getSystemService(name);
+    }
+
+    @Override
+    public void lock() {
+        lock.lock();
+    }
+
+    @Override
+    public void lockInterruptibly() throws InterruptedException {
+        lock.lockInterruptibly();
+    }
+
+    @Override
+    public boolean tryLock() {
+        return lock.tryLock();
+    }
+
+    @Override
+    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
+        return lock.tryLock(time, unit);
+    }
+
+    @Override
+    public void unlock() {
+        lock.unlock();
+    }
+
+    @Override
+    public Condition newCondition() {
+        return lock.newCondition();
+    }
+
+    protected abstract String getNativeClass();
+}
diff --git a/Telegram/sfml/src/main/res/values/strings.xml b/Telegram/sfml/src/main/res/values/strings.xml
new file mode 100644
index 000000000..0ee6eb35e
--- /dev/null
+++ b/Telegram/sfml/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="lib_name">SFML-2.4.1_Android-Modern</string>
+</resources>
