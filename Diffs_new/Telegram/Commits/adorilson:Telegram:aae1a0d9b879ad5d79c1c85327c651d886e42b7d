diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index ae4f75bbb..727d5795c 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -83,7 +83,7 @@ android {
     }
 
     defaultConfig {
-        minSdkVersion 18
+        minSdkVersion 19
         targetSdkVersion 23
         versionCode 720
         versionName "3.4.2"
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 01fc8c0a1..504602084 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -2871,13 +2871,7 @@ private boolean convertVideo(final MessageObject messageObject) {
         int rotateRender = 0;
         File cacheFile = new File(messageObject.messageOwner.attachPath);
 
-        if (Build.VERSION.SDK_INT < 18 && resultHeight > resultWidth && resultWidth != originalWidth && resultHeight != originalHeight) {
-            int temp = resultHeight;
-            resultHeight = resultWidth;
-            resultWidth = temp;
-            rotationValue = 90;
-            rotateRender = 270;
-        } else if (Build.VERSION.SDK_INT > 20) {
+        if (Build.VERSION.SDK_INT > 20) {
             if (rotationValue == 90) {
                 int temp = resultHeight;
                 resultHeight = resultWidth;
@@ -2949,29 +2943,7 @@ private boolean convertVideo(final MessageObject messageObject) {
                             int colorFormat;
                             int processorType = PROCESSOR_TYPE_OTHER;
                             String manufacturer = Build.MANUFACTURER.toLowerCase();
-                            if (Build.VERSION.SDK_INT < 18) {
-                                MediaCodecInfo codecInfo = selectCodec(MIME_TYPE);
-                                colorFormat = selectColorFormat(codecInfo, MIME_TYPE);
-                                if (colorFormat == 0) {
-                                    throw new RuntimeException("no supported color format");
-                                }
-                                String codecName = codecInfo.getName();
-                                if (codecName.contains("OMX.qcom.")) {
-                                    processorType = PROCESSOR_TYPE_QCOM;
-                                } else if (codecName.contains("OMX.Intel.")) {
-                                    processorType = PROCESSOR_TYPE_INTEL;
-                                } else if (codecName.equals("OMX.MTK.VIDEO.ENCODER.AVC")) {
-                                    processorType = PROCESSOR_TYPE_MTK;
-                                } else if (codecName.equals("OMX.SEC.AVC.Encoder")) {
-                                    processorType = PROCESSOR_TYPE_SEC;
-                                    swapUV = 1;
-                                } else if (codecName.equals("OMX.TI.DUCATI1.VIDEO.H264E")) {
-                                    processorType = PROCESSOR_TYPE_TI;
-                                }
-                                FileLog.e("tmessages", "codec = " + codecInfo.getName() + " manufacturer = " + manufacturer + "device = " + Build.MODEL);
-                            } else {
-                                colorFormat = MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface;
-                            }
+                            colorFormat = MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface;
                             FileLog.e("tmessages", "colorFormat = " + colorFormat);
 
                             int resultHeightAligned = resultHeight;
@@ -3016,25 +2988,15 @@ private boolean convertVideo(final MessageObject messageObject) {
                             outputFormat.setInteger(MediaFormat.KEY_BIT_RATE, bitrate != 0 ? bitrate : 921600);
                             outputFormat.setInteger(MediaFormat.KEY_FRAME_RATE, 25);
                             outputFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 10);
-                            if (Build.VERSION.SDK_INT < 18) {
-                                outputFormat.setInteger("stride", resultWidth + 32);
-                                outputFormat.setInteger("slice-height", resultHeight);
-                            }
-
                             encoder = MediaCodec.createEncoderByType(MIME_TYPE);
                             encoder.configure(outputFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
-                            if (Build.VERSION.SDK_INT >= 18) {
-                                inputSurface = new InputSurface(encoder.createInputSurface());
-                                inputSurface.makeCurrent();
-                            }
+                            inputSurface = new InputSurface(encoder.createInputSurface());
+                            inputSurface.makeCurrent();
+
                             encoder.start();
 
                             decoder = MediaCodec.createDecoderByType(inputFormat.getString(MediaFormat.KEY_MIME));
-                            if (Build.VERSION.SDK_INT >= 18) {
-                                outputSurface = new OutputSurface();
-                            } else {
-                                outputSurface = new OutputSurface(resultWidth, resultHeight, rotateRender);
-                            }
+                            outputSurface = new OutputSurface();
                             decoder.configure(inputFormat, outputSurface.getSurface(), null, 0);
                             decoder.start();
 
@@ -3045,9 +3007,6 @@ private boolean convertVideo(final MessageObject messageObject) {
                             if (Build.VERSION.SDK_INT < 21) {
                                 decoderInputBuffers = decoder.getInputBuffers();
                                 encoderOutputBuffers = encoder.getOutputBuffers();
-                                if (Build.VERSION.SDK_INT < 18) {
-                                    encoderInputBuffers = encoder.getInputBuffers();
-                                }
                             }
 
                             checkConversionCanceled();
@@ -3169,11 +3128,7 @@ private boolean convertVideo(final MessageObject messageObject) {
                                             throw new RuntimeException("unexpected result from decoder.dequeueOutputBuffer: " + decoderStatus);
                                         } else {
                                             boolean doRender;
-                                            if (Build.VERSION.SDK_INT >= 18) {
-                                                doRender = info.size != 0;
-                                            } else {
-                                                doRender = info.size != 0 || info.presentationTimeUs != 0;
-                                            }
+                                            doRender = info.size != 0;
                                             if (endTime > 0 && info.presentationTimeUs >= endTime) {
                                                 inputDone = true;
                                                 decoderDone = true;
@@ -3198,36 +3153,15 @@ private boolean convertVideo(final MessageObject messageObject) {
                                                     FileLog.e("tmessages", e);
                                                 }
                                                 if (!errorWait) {
-                                                    if (Build.VERSION.SDK_INT >= 18) {
-                                                        outputSurface.drawImage(false);
-                                                        inputSurface.setPresentationTime(info.presentationTimeUs * 1000);
-                                                        inputSurface.swapBuffers();
-                                                    } else {
-                                                        int inputBufIndex = encoder.dequeueInputBuffer(TIMEOUT_USEC);
-                                                        if (inputBufIndex >= 0) {
-                                                            outputSurface.drawImage(true);
-                                                            ByteBuffer rgbBuf = outputSurface.getFrame();
-                                                            ByteBuffer yuvBuf = encoderInputBuffers[inputBufIndex];
-                                                            yuvBuf.clear();
-                                                            Utilities.convertVideoFrame(rgbBuf, yuvBuf, colorFormat, resultWidth, resultHeight, padding, swapUV);
-                                                            encoder.queueInputBuffer(inputBufIndex, 0, bufferSize, info.presentationTimeUs, 0);
-                                                        } else {
-                                                            FileLog.e("tmessages", "input buffer not available");
-                                                        }
-                                                    }
+                                                    outputSurface.drawImage(false);
+                                                    inputSurface.setPresentationTime(info.presentationTimeUs * 1000);
+                                                    inputSurface.swapBuffers();
                                                 }
                                             }
                                             if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
                                                 decoderOutputAvailable = false;
                                                 FileLog.e("tmessages", "decoder stream end");
-                                                if (Build.VERSION.SDK_INT >= 18) {
-                                                    encoder.signalEndOfInputStream();
-                                                } else {
-                                                    int inputBufIndex = encoder.dequeueInputBuffer(TIMEOUT_USEC);
-                                                    if (inputBufIndex >= 0) {
-                                                        encoder.queueInputBuffer(inputBufIndex, 0, 1, info.presentationTimeUs, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
-                                                    }
-                                                }
+                                                encoder.signalEndOfInputStream();
                                             }
                                         }
                                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index fc10b9360..3734f0ccb 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -1411,10 +1411,6 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
 
     @SuppressLint("InlinedApi")
     private void showExtraNotifications(NotificationCompat.Builder notificationBuilder, boolean notifyAboutLast) {
-        if (Build.VERSION.SDK_INT < 18) {
-            return;
-        }
-
         ArrayList<Long> sortedDialogs = new ArrayList<>();
         HashMap<Long, ArrayList<MessageObject>> messagesByDialogs = new HashMap<>();
         for (int a = 0; a < pushMessages.size(); a++) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
index 6f160865a..7956573da 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
@@ -153,8 +153,8 @@
      * recursively traverses itemView and invalidates display list for each ViewGroup that matches
      * this criteria.
      */
-    private static final boolean FORCE_INVALIDATE_DISPLAY_LIST = Build.VERSION.SDK_INT == 18
-            || Build.VERSION.SDK_INT == 19 || Build.VERSION.SDK_INT == 20;
+    private static final boolean FORCE_INVALIDATE_DISPLAY_LIST = Build.VERSION.SDK_INT == 19 ||
+            Build.VERSION.SDK_INT == 20;
 
     private static final boolean DISPATCH_TEMP_DETACH = false;
     public static final int HORIZONTAL = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index c2e5d39df..76e2a7365 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -38,7 +38,6 @@
 public class ActionBarPopupWindow extends PopupWindow {
 
     private static final Field superListenerField;
-    private static final boolean animationEnabled = Build.VERSION.SDK_INT >= 18;
     private static DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
     private AnimatorSet windowAnimatorSet;
     static {
@@ -131,54 +130,51 @@ public void setBackScaleX(float value) {
 
         public void setBackScaleY(float value) {
             backScaleY = value;
-            if (animationEnabled) {
-                int count = getItemsCount();
-                int visibleCount = 0;
-                for (int a = 0; a < count; a++) {
-                    visibleCount += getItemAt(a).getVisibility() == VISIBLE ? 1 : 0;
+            int count = getItemsCount();
+            int visibleCount = 0;
+            for (int a = 0; a < count; a++) {
+                visibleCount += getItemAt(a).getVisibility() == VISIBLE ? 1 : 0;
+            }
+            int height = getMeasuredHeight() - AndroidUtilities.dp(16);
+            if (showedFromBotton) {
+                for (int a = lastStartedChild; a >= 0; a--) {
+                    View child = getItemAt(a);
+                    if (child.getVisibility() != VISIBLE) {
+                        continue;
+                    }
+                    Integer position = positions.get(child);
+                    if (position != null && height - (position * AndroidUtilities.dp(48) + AndroidUtilities.dp(32)) > value * height) {
+                        break;
+                    }
+                    lastStartedChild = a - 1;
+                    startChildAnimation(child);
                 }
-                int height = getMeasuredHeight() - AndroidUtilities.dp(16);
-                if (showedFromBotton) {
-                    for (int a = lastStartedChild; a >= 0; a--) {
-                        View child = getItemAt(a);
-                        if (child.getVisibility() != VISIBLE) {
-                            continue;
-                        }
-                        Integer position = positions.get(child);
-                        if (position != null && height - (position * AndroidUtilities.dp(48) + AndroidUtilities.dp(32)) > value * height) {
-                            break;
-                        }
-                        lastStartedChild = a - 1;
-                        startChildAnimation(child);
+            } else {
+                for (int a = lastStartedChild; a < count; a++) {
+                    View child = getItemAt(a);
+                    if (child.getVisibility() != VISIBLE) {
+                        continue;
                     }
-                } else {
-                    for (int a = lastStartedChild; a < count; a++) {
-                        View child = getItemAt(a);
-                        if (child.getVisibility() != VISIBLE) {
-                            continue;
-                        }
-                        Integer position = positions.get(child);
-                        if (position != null && (position + 1) * AndroidUtilities.dp(48) - AndroidUtilities.dp(24) > value * height) {
-                            break;
-                        }
-                        lastStartedChild = a + 1;
-                        startChildAnimation(child);
+                    Integer position = positions.get(child);
+                    if (position != null && (position + 1) * AndroidUtilities.dp(48) - AndroidUtilities.dp(24) > value * height) {
+                        break;
                     }
+                    lastStartedChild = a + 1;
+                    startChildAnimation(child);
                 }
             }
+
             invalidate();
         }
 
         private void startChildAnimation(View child) {
-            if (animationEnabled) {
-                AnimatorSet animatorSet = new AnimatorSet();
-                animatorSet.playTogether(
-                        ObjectAnimator.ofFloat(child, "alpha", 0.0f, 1.0f),
-                        ObjectAnimator.ofFloat(child, "translationY", AndroidUtilities.dp(showedFromBotton ? 6 : -6), 0));
-                animatorSet.setDuration(180);
-                animatorSet.setInterpolator(decelerateInterpolator);
-                animatorSet.start();
-            }
+            AnimatorSet animatorSet = new AnimatorSet();
+            animatorSet.playTogether(
+                    ObjectAnimator.ofFloat(child, "alpha", 0.0f, 1.0f),
+                    ObjectAnimator.ofFloat(child, "translationY", AndroidUtilities.dp(showedFromBotton ? 6 : -6), 0));
+            animatorSet.setDuration(180);
+            animatorSet.setInterpolator(decelerateInterpolator);
+            animatorSet.start();
         }
 
         @Override
@@ -305,60 +301,58 @@ public void showAsDropDown(View anchor, int xoff, int yoff) {
     }
 
     public void startAnimation() {
-        if (animationEnabled) {
-            if (windowAnimatorSet != null) {
-                return;
-            }
-            ActionBarPopupWindowLayout content = (ActionBarPopupWindowLayout) getContentView();
-            content.setTranslationY(0);
-            content.setAlpha(1.0f);
-            content.setPivotX(content.getMeasuredWidth());
-            content.setPivotY(0);
-            int count = content.getItemsCount();
-            content.positions.clear();
-            int visibleCount = 0;
-            for (int a = 0; a < count; a++) {
-                View child = content.getItemAt(a);
-                if (child.getVisibility() != View.VISIBLE) {
-                    continue;
-                }
-                content.positions.put(child, visibleCount);
-                child.setAlpha(0.0f);
-                visibleCount++;
-            }
-            if (content.showedFromBotton) {
-                content.lastStartedChild = count - 1;
-            } else {
-                content.lastStartedChild = 0;
+        if (windowAnimatorSet != null) {
+            return;
+        }
+        ActionBarPopupWindowLayout content = (ActionBarPopupWindowLayout) getContentView();
+        content.setTranslationY(0);
+        content.setAlpha(1.0f);
+        content.setPivotX(content.getMeasuredWidth());
+        content.setPivotY(0);
+        int count = content.getItemsCount();
+        content.positions.clear();
+        int visibleCount = 0;
+        for (int a = 0; a < count; a++) {
+            View child = content.getItemAt(a);
+            if (child.getVisibility() != View.VISIBLE) {
+                continue;
             }
-            windowAnimatorSet = new AnimatorSet();
-            windowAnimatorSet.playTogether(
-                    ObjectAnimator.ofFloat(content, "backScaleY", 0.0f, 1.0f),
-                    ObjectAnimator.ofInt(content, "backAlpha", 0, 255));
-            windowAnimatorSet.setDuration(150 + 16 * visibleCount);
-            windowAnimatorSet.addListener(new Animator.AnimatorListener() {
-                @Override
-                public void onAnimationStart(Animator animation) {
+            content.positions.put(child, visibleCount);
+            child.setAlpha(0.0f);
+            visibleCount++;
+        }
+        if (content.showedFromBotton) {
+            content.lastStartedChild = count - 1;
+        } else {
+            content.lastStartedChild = 0;
+        }
+        windowAnimatorSet = new AnimatorSet();
+        windowAnimatorSet.playTogether(
+                ObjectAnimator.ofFloat(content, "backScaleY", 0.0f, 1.0f),
+                ObjectAnimator.ofInt(content, "backAlpha", 0, 255));
+        windowAnimatorSet.setDuration(150 + 16 * visibleCount);
+        windowAnimatorSet.addListener(new Animator.AnimatorListener() {
+            @Override
+            public void onAnimationStart(Animator animation) {
 
-                }
+            }
 
-                @Override
-                public void onAnimationEnd(Animator animation) {
-                    windowAnimatorSet = null;
-                }
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                windowAnimatorSet = null;
+            }
 
-                @Override
-                public void onAnimationCancel(Animator animation) {
-                    onAnimationEnd(animation);
-                }
+            @Override
+            public void onAnimationCancel(Animator animation) {
+                onAnimationEnd(animation);
+            }
 
-                @Override
-                public void onAnimationRepeat(Animator animation) {
+            @Override
+            public void onAnimationRepeat(Animator animation) {
 
-                }
-            });
-            windowAnimatorSet.start();
-        }
+            }
+        });
+        windowAnimatorSet.start();
     }
 
     @Override
@@ -386,7 +380,7 @@ public void dismiss() {
 
     public void dismiss(boolean animated) {
         setFocusable(false);
-        if (animationEnabled && animated) {
+        if (animated) {
             if (windowAnimatorSet != null) {
                 windowAnimatorSet.cancel();
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
index 5ae8a44ef..3eb42bd65 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
@@ -792,7 +792,7 @@ public Builder setTag(int tag) {
         }
 
         public Builder setUseRevealAnimation() {
-            if (Build.VERSION.SDK_INT >= 18 && !AndroidUtilities.isTablet()) {
+            if (!AndroidUtilities.isTablet()) {
                 bottomSheet.useRevealAnimation = true;
             }
             return this;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index d90474f38..4f0f941e1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -2533,9 +2533,7 @@ public boolean didSelectVideo(String path) {
                 Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
                 File video = AndroidUtilities.generateVideoPath();
                 if (video != null) {
-                    if (Build.VERSION.SDK_INT >= 18) {
-                        takeVideoIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(video));
-                    }
+                    takeVideoIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(video));
                     takeVideoIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1536));
                     currentPicturePath = video.getAbsolutePath();
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/StaticLayoutEx.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/StaticLayoutEx.java
index dd150066e..0cc9c6d16 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/StaticLayoutEx.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/StaticLayoutEx.java
@@ -39,15 +39,8 @@ public static void init() {
 
         try {
             final Class<?> textDirClass;
-            if (Build.VERSION.SDK_INT >= 18) {
-                textDirClass = TextDirectionHeuristic.class;
-                sTextDirection = TextDirectionHeuristics.FIRSTSTRONG_LTR;
-            } else {
-                ClassLoader loader = StaticLayoutEx.class.getClassLoader();
-                textDirClass = loader.loadClass(TEXT_DIR_CLASS);
-                Class<?> textDirsClass = loader.loadClass(TEXT_DIRS_CLASS);
-                sTextDirection = textDirsClass.getField(TEXT_DIR_FIRSTSTRONG_LTR).get(textDirsClass);
-            }
+            textDirClass = TextDirectionHeuristic.class;
+            sTextDirection = TextDirectionHeuristics.FIRSTSTRONG_LTR;
 
             final Class<?>[] signature = new Class[]{
                     CharSequence.class,
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 381ab590c..bf1de35fb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -2965,9 +2965,7 @@ public void run() {
                     if (containerView == null) {
                         return;
                     }
-                    if (Build.VERSION.SDK_INT >= 18) {
-                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
-                    }
+                    containerView.setLayerType(View.LAYER_TYPE_NONE, null);
                     animationInProgress = 0;
                     transitionAnimationStartTime = 0;
                     setImages();
@@ -3017,9 +3015,7 @@ public void run() {
                     animatorSet.start();
                 }
             });
-            if (Build.VERSION.SDK_INT >= 18) {
-                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
-            }
+            containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             backgroundDrawable.drawRunnable = new Runnable() {
                 @Override
                 public void run() {
@@ -3186,9 +3182,7 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
             animationEndRunnable = new Runnable() {
                 @Override
                 public void run() {
-                    if (Build.VERSION.SDK_INT >= 18) {
-                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
-                    }
+                    containerView.setLayerType(View.LAYER_TYPE_NONE, null);
                     animationInProgress = 0;
                     onPhotoClosed(object);
                 }
@@ -3213,9 +3207,7 @@ public void onAnimationCancel(Object animation) {
                 }
             });
             transitionAnimationStartTime = System.currentTimeMillis();
-            if (Build.VERSION.SDK_INT >= 18) {
-                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
-            }
+            containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             animatorSet.start();
         } else {
             AnimatorSet animatorSet = new AnimatorSet();
@@ -3232,9 +3224,7 @@ public void run() {
                     if (containerView == null) {
                         return;
                     }
-                    if (Build.VERSION.SDK_INT >= 18) {
-                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
-                    }
+                    containerView.setLayerType(View.LAYER_TYPE_NONE, null);
                     animationInProgress = 0;
                     onPhotoClosed(object);
                     containerView.setScaleX(1.0f);
@@ -3252,9 +3242,7 @@ public void onAnimationEnd(Object animation) {
                 }
             });
             transitionAnimationStartTime = System.currentTimeMillis();
-            if (Build.VERSION.SDK_INT >= 18) {
-                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
-            }
+            containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             animatorSet.start();
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index 6ad6cabc8..7ebf8cf5b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -283,33 +283,6 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
             }
         });
 
-        if (Build.VERSION.SDK_INT < 18) {
-            try {
-                MediaCodecInfo codecInfo = MediaController.selectCodec(MediaController.MIME_TYPE);
-                if (codecInfo == null) {
-                    compressVideo.setVisibility(View.GONE);
-                } else {
-                    String name = codecInfo.getName();
-                    if (name.equals("OMX.google.h264.encoder") ||
-                            name.equals("OMX.ST.VFM.H264Enc") ||
-                            name.equals("OMX.Exynos.avc.enc") ||
-                            name.equals("OMX.MARVELL.VIDEO.HW.CODA7542ENCODER") ||
-                            name.equals("OMX.MARVELL.VIDEO.H264ENCODER") ||
-                            name.equals("OMX.k3.video.encoder.avc") || //fix this later
-                            name.equals("OMX.TI.DUCATI1.VIDEO.H264E")) { //fix this later
-                        compressVideo.setVisibility(View.GONE);
-                    } else {
-                        if (MediaController.selectColorFormat(codecInfo, MediaController.MIME_TYPE) == 0) {
-                            compressVideo.setVisibility(View.GONE);
-                        }
-                    }
-                }
-            } catch (Exception e) {
-                compressVideo.setVisibility(View.GONE);
-                FileLog.e("tmessages", e);
-            }
-        }
-
         TextView titleTextView = (TextView) fragmentView.findViewById(R.id.original_title);
         titleTextView.setText(LocaleController.getString("OriginalVideo", R.string.OriginalVideo));
         titleTextView = (TextView) fragmentView.findViewById(R.id.edited_title);
