diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 94f287824..cd7311492 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -1626,6 +1626,7 @@ private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
     }
 
 
+    //TODO PhotoPicker
     private void onPhotoShow(final ArrayList<Object> photos, int index, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
         //TODO-aragat new
@@ -1725,15 +1726,6 @@ private void onPhotoShow(final ArrayList<Object> photos, int index, final PlaceP
 
     }
 
-    //TODO-aragats new
-    private void setImagesPostNew() {
-        if (animationInProgress == 0) {
-            setIndexToImagePostNew(centerImage, currentIndex);
-            setIndexToImagePostNew(rightImage, currentIndex + 1);
-            setIndexToImagePostNew(leftImage, currentIndex - 1);
-        }
-    }
-
 
     private void setImages() {
         if (animationInProgress == 0) {
@@ -1976,7 +1968,7 @@ private void setImageIndexPostNew(int index, boolean init) {
         }
 
         if (prevIndex == -1) {
-            setImagesPostNew();
+            setImages();
 
             for (int a = 0; a < 3; a++) {
                 checkProgress(a, false);
@@ -1992,7 +1984,7 @@ private void setImageIndexPostNew(int index, boolean init) {
                 RadialProgressView tempProgress = radialProgressViews[0];
                 radialProgressViews[0] = radialProgressViews[2];
                 radialProgressViews[2] = tempProgress;
-                setIndexToImagePostNew(leftImage, currentIndex - 1);
+                setIndexToImage(leftImage, currentIndex - 1);
 
                 checkProgress(1, false);
                 checkProgress(2, false);
@@ -2005,7 +1997,7 @@ private void setImageIndexPostNew(int index, boolean init) {
                 RadialProgressView tempProgress = radialProgressViews[0];
                 radialProgressViews[0] = radialProgressViews[1];
                 radialProgressViews[1] = tempProgress;
-                setIndexToImagePostNew(rightImage, currentIndex + 1);
+                setIndexToImage(rightImage, currentIndex + 1);
 
                 checkProgress(1, false);
                 checkProgress(2, false);
@@ -2118,23 +2110,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
             } else {
                 imageReceiver.setImageBitmap((Bitmap) null);
             }
-        } else {
-            int size[] = new int[1];
-            imageReceiver.setNeedsQualityThumb(false);
-            if (size[0] == 0) {
-                imageReceiver.setImageBitmap((Bitmap) null);
-            } else {
-                imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
-            }
-
-        }
-    }
-
-
-    //TODO-aragats new
-    private void setIndexToImagePostNew(ImageReceiver imageReceiver, int index) {
-        imageReceiver.setOrientation(0, false);
-        if (!imagesPostArr.isEmpty()) {
+        } else if(!imagesPostArr.isEmpty()) {
             if (index >= 0 && index < imagesPostArr.size() && imagesPostArr.get(index) != null) {
                 Post post = imagesPostArr.get(index);
                 int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
@@ -2153,21 +2129,16 @@ private void setIndexToImagePostNew(ImageReceiver imageReceiver, int index) {
             } else {
                 imageReceiver.setImageBitmap((Bitmap) null);
             }
-        }
-
-
-//        PostObject post = null;
-//        if (!imagesPostArr.isEmpty() && index < imagesPostArr.size() && index >= 0) {
-//            post = imagesPostArr.get(index);
-//        }
-//
-//        //TODO set Image for imageReceiver
-//        if (post != null) {
-//            imageReceiver.setImage(post.getImage().getUrl(), null, new AvatarDrawable(), null, 0);
-//        } else {
-//            imageReceiver.setImageBitmap((Bitmap) null);
-//        }
+        } else {
+            int size[] = new int[1];
+            imageReceiver.setNeedsQualityThumb(false);
+            if (size[0] == 0) {
+                imageReceiver.setImageBitmap((Bitmap) null);
+            } else {
+                imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
+            }
 
+        }
     }
 
 
@@ -2176,6 +2147,7 @@ public boolean isShowingImage(String object) {
     }
 
 
+    //TODO image PhotoPicker.
     public void openPhotoForSelect(final ArrayList<Object> photos, final int index, int type, final PhotoViewerProvider provider) {
         sendPhotoType = type;
         if (pickerView != null) {
@@ -2197,6 +2169,8 @@ private boolean checkAnimation() {
         return animationInProgress != 0;
     }
 
+
+    // TODO photo from image picker
     public void openPhoto(final ArrayList<Object> photos, final int index, final PhotoViewerProvider provider) {
         if (parentActivity == null || isVisible || provider == null && checkAnimation() && photos == null) {
             return;
@@ -2413,7 +2387,7 @@ public void run() {
                     }
                     animationInProgress = 0;
                     transitionAnimationStartTime = 0;
-                    setImagesPostNew();
+                    setImages();
                     containerView.invalidate();
                     animatingImageView.setVisibility(View.GONE);
                     if (showAfterAnimation != null) {
@@ -2469,353 +2443,6 @@ public void run() {
         }
     }
 
-
-    //TODO-legacy rewrite this method accrodign to new openPhoto because this version is legacy from previous revision
-    //TODO my openPhoto
-    public void openPhoto(final Post post, final PostPhotoViewerProvider provider) {
-        if (parentActivity == null || isVisible || provider == null || checkAnimation()) {
-            return;
-        }
-        //filocation we do not need here. messageObject is used to find ChatMediaCell by id from messageObject. // method is implemented in provider.
-        final PlaceProviderObject object = provider.getPlaceForPhoto(post);
-        if (object == null) {
-            return;
-        }
-
-        try {
-            if (windowView.getParent() != null) {
-                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-                wm.removeView(windowView);
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-
-        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
-        try {
-            wm.addView(windowView, windowLayoutParams);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            return;
-        }
-
-        actionBar.setTitle(LocaleController.formatString("Of", org.telegram.messenger.R.string.Of, 1, 1));
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
-
-        postPlaceProvider = provider;
-
-        if (velocityTracker == null) {
-            velocityTracker = VelocityTracker.obtain();
-        }
-
-        disableShowCheck = true;
-        animationInProgress = 1;
-        onPhotoShow(post, object);
-        isVisible = true;
-        backgroundDrawable.setAlpha(255);
-        toggleActionBar(true, false);
-
-        AndroidUtilities.lockOrientation(parentActivity);
-
-        final Rect drawRegion = object.imageReceiver.getDrawRegion();
-
-        animatingImageView.setVisibility(View.VISIBLE);
-        animatingImageView.setRadius(object.radius);
-        animatingImageView.setNeedRadius(object.radius != 0);
-        animatingImageView.setImageBitmap(object.thumb);
-
-        ViewProxy.setAlpha(animatingImageView, 1.0f);
-        ViewProxy.setPivotX(animatingImageView, 0.0f);
-        ViewProxy.setPivotY(animatingImageView, 0.0f);
-        ViewProxy.setScaleX(animatingImageView, 1.0f);
-        ViewProxy.setScaleY(animatingImageView, 1.0f);
-        ViewProxy.setTranslationX(animatingImageView, object.viewX + drawRegion.left);
-        ViewProxy.setTranslationY(animatingImageView, object.viewY + drawRegion.top);
-        final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
-        layoutParams.width = drawRegion.right - drawRegion.left;
-        layoutParams.height = drawRegion.bottom - drawRegion.top;
-        animatingImageView.setLayoutParams(layoutParams);
-
-        containerView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                containerView.getViewTreeObserver().removeOnPreDrawListener(this);
-
-                float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
-                float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
-                float scale = scaleX > scaleY ? scaleY : scaleX;
-                float width = layoutParams.width * scale;
-                float height = layoutParams.height * scale;
-                float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
-                float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
-                int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
-                int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
-
-                int coords2[] = new int[2];
-                object.parentView.getLocationInWindow(coords2);
-                int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
-                if (clipTop < 0) {
-                    clipTop = 0;
-                }
-                int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
-                if (clipBottom < 0) {
-                    clipBottom = 0;
-                }
-                clipTop = Math.max(clipTop, clipVertical);
-                clipBottom = Math.max(clipBottom, clipVertical);
-
-                AnimatorSetProxy animatorSet = new AnimatorSetProxy();
-                animatorSet.playTogether(
-                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleX", scale),
-                        ObjectAnimatorProxy.ofFloat(animatingImageView, "scaleY", scale),
-                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationX", xPos),
-                        ObjectAnimatorProxy.ofFloat(animatingImageView, "translationY", yPos),
-                        ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 0, 255),
-                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipHorizontal", clipHorizontal, 0),
-                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipTop", clipTop, 0),
-                        ObjectAnimatorProxy.ofInt(animatingImageView, "clipBottom", clipBottom, 0),
-                        ObjectAnimatorProxy.ofInt(animatingImageView, "radius", 0),
-                        ObjectAnimatorProxy.ofFloat(containerView, "alpha", 0.0f, 1.0f)
-                );
-
-                animationEndRunnable = new Runnable() {
-                    @Override
-                    public void run() {
-                        animationInProgress = 0;
-                        transitionAnimationStartTime = 0;
-                        containerView.invalidate();
-                        animatingImageView.setVisibility(View.GONE);
-                        AndroidUtilities.unlockOrientation(parentActivity);
-                        if (showAfterAnimation != null) {
-                            showAfterAnimation.imageReceiver.setVisible(true, true);
-                        }
-                        if (hideAfterAnimation != null) {
-                            hideAfterAnimation.imageReceiver.setVisible(false, true);
-                        }
-                    }
-                };
-
-                animatorSet.setDuration(200);
-                animatorSet.addListener(new AnimatorListenerAdapterProxy() {
-                    @Override
-                    public void onAnimationEnd(Object animation) {
-                        if (animationEndRunnable != null) {
-                            animationEndRunnable.run();
-                            animationEndRunnable = null;
-                        }
-                    }
-
-                    @Override
-                    public void onAnimationCancel(Object animation) {
-                        onAnimationEnd(animation);
-                    }
-                });
-                transitionAnimationStartTime = System.currentTimeMillis();
-                animatorSet.start();
-// TODO does not work now &
-//                animatingImageView.setOnDrawListener(new ClippingImageView.onDrawListener() {
-//                    @Override
-//                    public void onDraw() {
-//                        disableShowCheck = false;
-//                        animatingImageView.setOnDrawListener(null);
-//                        object.imageReceiver.setVisible(false, true);
-//                    }
-//                });
-                return true;
-            }
-        });
-    }
-
-
-    //TODO-aragats my photo opener.
-    private void onPhotoShow(final Post post, final PlaceProviderObject object) {
-        classGuid = ConnectionsManager.getInstance().generateClassGuid();
-//        currentMessageObject = null;  // TODO I removed it because it break getting  currentPlaceObject
-        currentPathObject = null;
-        currentIndex = -1;
-        currentFileNames[0] = null;
-        currentFileNames[1] = null;
-        currentFileNames[2] = null;
-        totalImagesCount = 0;
-        isFirstLoading = true;
-        needSearchImageInArr = false;
-        loadingMoreImages = false;
-        cacheEndReached = false;
-        opennedFromMedia = false;
-        canShowBottom = true;
-        //new
-        imagesPostArr.clear();
-        imagesArrLocationsSizes.clear();
-        imagesArrLocals.clear();
-        currentUserAvatarLocation = null;
-        currentThumb = object.thumb;
-        menuItem.setVisibility(View.VISIBLE);
-        bottomLayout.setVisibility(View.VISIBLE);
-        checkImageView.setVisibility(View.GONE);
-        pickerView.setVisibility(View.GONE);
-
-
-        for (int a = 0; a < 3; a++) {
-            if (radialProgressViews[a] != null) {
-                radialProgressViews[a].setBackgroundState(-1, false);
-            }
-        }
-
-        if (post != null) {
-            imagesPostArr.add(post);
-            menuItem.showSubItem(gallery_menu_showall);
-            setImageIndexPost(0, true);
-        }
-
-    }
-
-
-    // TODO-aragats new my
-    public void setImageIndexPost(int index, boolean init) {
-        if (currentIndex == index) {
-            return;
-        }
-        if (!init) {
-            currentThumb = null;
-        }
-        currentFileNames[0] = getFileName(index);
-        currentFileNames[1] = getFileName(index + 1);
-        currentFileNames[2] = getFileName(index - 1);
-        postPlaceProvider.willSwitchFromPhoto(currentPost);
-        int prevIndex = currentIndex;
-        currentIndex = index;
-
-        boolean sameImage = false;
-
-//        currentMessageObject = imagesArr.get(currentIndex); // TODO is important to load data.
-
-        if (!imagesPostArr.isEmpty()) {
-            //TODO in new version there is not deleteButton
-//            deleteButton.setVisibility(View.VISIBLE);
-            currentPost = imagesPostArr.get(currentIndex);
-
-            nameTextView.setText(ContactsController.formatName(this.currentPost.getVenue().getName(), ""));
-            dateTextView.setText(LocaleController.formatterYearMax.format(currentPost.getCreatedDate()));
-
-            actionBar.setTitle(LocaleController.formatString("Of", org.telegram.messenger.R.string.Of, (totalImagesCount - imagesPostArr.size()) + currentIndex + 1, totalImagesCount));
-
-            menuItem.showSubItem(gallery_menu_save);
-            shareButton.setVisibility(View.VISIBLE);
-        }
-
-
-        if (currentPlaceObject != null) {
-            if (animationInProgress == 0) {
-                currentPlaceObject.imageReceiver.setVisible(true, true);
-            } else {
-                showAfterAnimation = currentPlaceObject;
-            }
-        }
-        //TODO delete currentMessageObject
-        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPost);
-        if (currentPlaceObject != null) {
-            if (animationInProgress == 0) {
-                currentPlaceObject.imageReceiver.setVisible(false, true);
-            } else {
-                hideAfterAnimation = currentPlaceObject;
-            }
-        }
-
-        if (!sameImage) {
-            draggingDown = false;
-            translationX = 0;
-            translationY = 0;
-            scale = 1;
-            animateToX = 0;
-            animateToY = 0;
-            animateToScale = 1;
-            //TODO in new version this parameter is 0;
-//            animationDuration = 0;
-            animationStartTime = 0;
-
-            pinchStartDistance = 0;
-            pinchStartScale = 1;
-            pinchCenterX = 0;
-            pinchCenterY = 0;
-            pinchStartX = 0;
-            pinchStartY = 0;
-            moveStartX = 0;
-            moveStartY = 0;
-            zooming = false;
-            moving = false;
-            doubleTap = false;
-            invalidCoords = false;
-            canDragDown = true;
-            changingPage = false;
-            switchImageAfterAnimation = 0;
-            canZoom = currentFileNames[0] != null && !currentFileNames[0].endsWith("mp4") && radialProgressViews[0].backgroundState != 0;
-            canZoom = true; //TODO MY Aragats
-            updateMinMax(scale);
-        }
-
-        if (prevIndex == -1) {
-            setIndexToImagePost(centerImage, currentIndex);
-            setIndexToImagePost(rightImage, currentIndex + 1);
-            setIndexToImagePost(leftImage, currentIndex - 1);
-
-            for (int a = 0; a < 3; a++) {
-                checkProgress(a, false); //currentFileNames all element = null
-            }
-        } else {
-            checkProgress(0, false);
-            if (prevIndex > currentIndex) {
-                ImageReceiver temp = rightImage;
-                rightImage = centerImage;
-                centerImage = leftImage;
-                leftImage = temp;
-
-                RadialProgressView tempProgress = radialProgressViews[0];
-                radialProgressViews[0] = radialProgressViews[2];
-                radialProgressViews[2] = tempProgress;
-                setIndexToImagePost(leftImage, currentIndex - 1);
-
-                checkProgress(1, false);
-                checkProgress(2, false);
-            } else if (prevIndex < currentIndex) {
-                ImageReceiver temp = leftImage;
-                leftImage = centerImage;
-                centerImage = rightImage;
-                rightImage = temp;
-
-                RadialProgressView tempProgress = radialProgressViews[0];
-                radialProgressViews[0] = radialProgressViews[1];
-                radialProgressViews[1] = tempProgress;
-                setIndexToImagePost(rightImage, currentIndex + 1);
-
-                checkProgress(1, false);
-                checkProgress(2, false);
-            }
-        }
-    }
-
-    //TODO-aragats my new
-    private void setIndexToImagePost(ImageReceiver imageReceiver, int index) {
-
-        Post post = null;
-        if (!imagesPostArr.isEmpty() && index < imagesPostArr.size() && index >= 0) {
-            post = imagesPostArr.get(index);
-        }
-
-        //TODO set Image for imageReceiver
-        if (post != null) {
-            imageReceiver.setImage(post.getImage().getUrl(), null, new AvatarDrawable(), null, 0);
-        } else {
-            imageReceiver.setImageBitmap((Bitmap) null);
-        }
-
-    }
-
     public void closePhoto(boolean animated, boolean fromEditMode) {
         if (!fromEditMode && currentEditMode != 0) {
             if (currentEditMode == 1) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 21c440435..c62227ff9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -1520,7 +1520,8 @@ public void didClickedImage(PostMediaCell cell) {
                         Post post = cell.getPost();
 
                         PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                        PhotoViewer.getInstance().openPhoto(post, PostCreateActivity.this);
+//                        PhotoViewer.getInstance().openPhoto(post, PostCreateActivity.this);
+//                        PhotoViewer.getInstance().openPhotoNew(post, PostCreateActivity.this);
 
                         //TODO open location view
 //                                LocationActivity fragment = new LocationActivity();
