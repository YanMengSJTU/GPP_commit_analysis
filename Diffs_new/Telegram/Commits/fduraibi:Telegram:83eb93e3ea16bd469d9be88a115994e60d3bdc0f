diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 373a298ac..8ca947579 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -23,8 +23,10 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion '19.1.0'
+    //compileSdkVersion 19
+    //buildToolsVersion '19.1.0'
+    compileSdkVersion 20
+    buildToolsVersion '20.0.0'
 
     useAaptPngCruncher = true
     useOldManifestMerger true
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index 0478c6a1e..271e52ef5 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -6,19 +6,13 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.telegram.android;
 
-import android.accounts.Account;
-import android.accounts.AccountManager;
 import android.app.Activity;
 import android.app.AlertDialog;
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.graphics.Bitmap;
@@ -404,6 +398,7 @@ protected void finalize() throws Throwable {
     public void cleanUp() {
         ContactsController.getInstance().cleanup();
         MediaController.getInstance().cleanup();
+        NotificationsController.getInstance().cleanup();
 
         dialogs_dict.clear();
         dialogs.clear();
@@ -1866,7 +1861,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 if (msgObj.messageOwner.attachPath != null && msgObj.messageOwner.attachPath.length() != 0) {
                     video.path = msgObj.messageOwner.attachPath;
                 } else {
-                    video.path = Utilities.getCacheDir().toString() + File.separator + msgObj.getFileName();
+                    video.path = AndroidUtilities.getCacheDir().toString() + File.separator + msgObj.getFileName();
                 }
                 Bitmap thumb = ThumbnailUtils.createVideoThumbnail(video.path, MediaStore.Video.Thumbnails.MINI_KIND);
                 video.thumb = FileLoader.scaleAndSaveImage(thumb, 90, 90, 55, false);
@@ -1892,7 +1887,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 if (msgObj.messageOwner.attachPath != null && msgObj.messageOwner.attachPath.length() != 0) {
                     document.path = msgObj.messageOwner.attachPath;
                 } else {
-                    document.path = Utilities.getCacheDir().toString() + File.separator + msgObj.getFileName();
+                    document.path = AndroidUtilities.getCacheDir().toString() + File.separator + msgObj.getFileName();
                 }
                 File f = new File(document.path);
                 if (!f.exists() || f.length() == 0) {
@@ -1912,12 +1907,12 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                 if (msgObj.messageOwner.attachPath != null && msgObj.messageOwner.attachPath.length() != 0) {
                     audio.path = msgObj.messageOwner.attachPath;
                 } else {
-                    audio.path = Utilities.getCacheDir().toString() + File.separator + msgObj.getFileName();
+                    audio.path = AndroidUtilities.getCacheDir().toString() + File.separator + msgObj.getFileName();
                 }
 
                 File f = new File(audio.path);
                 if (!f.exists() || f.length() == 0) {
-                    audio.path = Utilities.getCacheDir().toString() + File.separator + "1_" + audio.id + ".m4a";
+                    audio.path = AndroidUtilities.getCacheDir().toString() + File.separator + "1_" + audio.id + ".m4a";
                 }
                 audio.date = ConnectionsManager.getInstance().getCurrentTime();
             } else if (msgObj.messageOwner.message != null) {
@@ -3357,9 +3352,9 @@ public void getDifference() {
         req.date = MessagesStorage.lastDateValue;
         req.qts = MessagesStorage.lastQtsValue;
         FileLog.e("tmessages", "start getDifference with date = " + MessagesStorage.lastDateValue + " pts = " + MessagesStorage.lastPtsValue + " seq = " + MessagesStorage.lastSeqValue);
-        if (ConnectionsManager.getInstance().connectionState == 0) {
-            ConnectionsManager.getInstance().connectionState = 3;
-            final int stateCopy = ConnectionsManager.getInstance().connectionState;
+        if (ConnectionsManager.getInstance().getConnectionState() == 0) {
+            ConnectionsManager.getInstance().setConnectionState(3);
+            final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
             Utilities.RunOnUIThread(new Runnable() {
                 @Override
                 public void run() {
@@ -3380,7 +3375,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         usersDict.put(user.id, user);
                     }
 
-                    final ArrayList<Integer> readMessages = new ArrayList<Integer>();
                     final ArrayList<TLRPC.TL_updateMessageID> msgUpdates = new ArrayList<TLRPC.TL_updateMessageID>();
                     if (!res.other_updates.isEmpty()) {
                         for (int a = 0; a < res.other_updates.size(); a++) {
@@ -3389,8 +3383,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                 msgUpdates.add((TLRPC.TL_updateMessageID) upd);
                                 res.other_updates.remove(a);
                                 a--;
-                            } else if (upd instanceof TLRPC.TL_updateReadMessages) {
-                                readMessages.addAll(upd.messages);
                             }
                         }
                     }
@@ -3407,12 +3399,6 @@ public void run() {
                             for (TLRPC.Chat chat : res.chats) {
                                 chats.put(chat.id, chat);
                             }
-
-                            if (currentPushMessage != null && readMessages.contains(currentPushMessage.messageOwner.id)) {
-                                NotificationManager mNotificationManager = (NotificationManager) ApplicationLoader.applicationContext.getSystemService(Context.NOTIFICATION_SERVICE);
-                                mNotificationManager.cancel(1);
-                                currentPushMessage = null;
-                            }
                         }
                     });
 
@@ -3455,7 +3441,7 @@ public void run() {
                                             }
                                         }
 
-                                        MessageObject lastMessage = null;
+                                        final ArrayList<MessageObject> pushMessages = new ArrayList<MessageObject>();
                                         for (TLRPC.Message message : res.new_messages) {
                                             MessageObject obj = new MessageObject(message, usersDict);
 
@@ -3468,13 +3454,10 @@ public void run() {
                                                 }
                                             }
 
-                                            if (!(res instanceof TLRPC.TL_updates_differenceSlice)) {
-                                                if ((dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) && !obj.isOut() && obj.messageOwner.unread && (lastMessage == null || lastMessage.messageOwner.date < obj.messageOwner.date)) {
-                                                    if (!readMessages.contains(obj.messageOwner.id)) {
-                                                        lastMessage = obj;
-                                                    }
-                                                }
+                                            if (!obj.isFromMe() && obj.isUnread()) {
+                                                pushMessages.add(obj);
                                             }
+
                                             long uid;
                                             if (message.dialog_id != 0) {
                                                 uid = message.dialog_id;
@@ -3498,7 +3481,6 @@ public void run() {
 
                                         processPendingEncMessages();
 
-                                        final MessageObject object = lastMessage;
                                         Utilities.RunOnUIThread(new Runnable() {
                                             @Override
                                             public void run() {
@@ -3508,8 +3490,11 @@ public void run() {
                                                     updateInterfaceWithMessages(key, value);
                                                 }
                                                 NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
-                                                if (object != null) {
-                                                    showInAppNotification(object);
+                                                if (!pushMessages.isEmpty()) {
+                                                    NotificationsController.getInstance().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice));
+                                                    if (res.other_updates == null || res.other_updates.isEmpty()) {
+                                                        NotificationsController.getInstance().processReadMessages(null, 0, 0, 0);
+                                                    }
                                                 }
                                             }
                                         });
@@ -3534,7 +3519,7 @@ public void run() {
                                         MessagesStorage.lastDateValue = res.state.date;
                                         MessagesStorage.lastPtsValue = res.state.pts;
                                         MessagesStorage.lastQtsValue = res.state.qts;
-                                        ConnectionsManager.getInstance().connectionState = 0;
+                                        ConnectionsManager.getInstance().setConnectionState(0);
                                         processUpdatesQueue(true);
                                     } else if (res instanceof TLRPC.TL_updates_differenceSlice) {
                                         MessagesStorage.lastDateValue = res.intermediate_state.date;
@@ -3545,7 +3530,7 @@ public void run() {
                                     } else if (res instanceof TLRPC.TL_updates_differenceEmpty) {
                                         MessagesStorage.lastSeqValue = res.seq;
                                         MessagesStorage.lastDateValue = res.date;
-                                        ConnectionsManager.getInstance().connectionState = 0;
+                                        ConnectionsManager.getInstance().setConnectionState(0);
                                         processUpdatesQueue(true);
                                     }
                                     MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
@@ -3557,8 +3542,8 @@ public void run() {
                     });
                 } else {
                     gettingDifference = false;
-                    ConnectionsManager.getInstance().connectionState = 0;
-                    final int stateCopy = ConnectionsManager.getInstance().connectionState;
+                    ConnectionsManager.getInstance().setConnectionState(0);
+                    final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
                     Utilities.RunOnUIThread(new Runnable() {
                         @Override
                         public void run() {
@@ -3567,7 +3552,7 @@ public void run() {
                     });
                 }
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric);
+        });
     }
 
     public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
@@ -3610,16 +3595,9 @@ public void run() {
                             if (printUpdate) {
                                 NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_USER_PRINT);
                             }
-                            if (obj.messageOwner.from_id != UserConfig.getClientUserId()) {
-                                long dialog_id;
-                                if (obj.messageOwner.to_id.chat_id != 0) {
-                                    dialog_id = -obj.messageOwner.to_id.chat_id;
-                                } else {
-                                    dialog_id = obj.messageOwner.to_id.user_id;
-                                }
-                                if (dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0 || !ApplicationLoader.isScreenOn) {
-                                    showInAppNotification(obj);
-                                }
+                            if (!obj.isFromMe() && obj.isUnread()) {
+                                NotificationsController.getInstance().processNewMessages(objArr, true);
+                                NotificationsController.getInstance().processReadMessages(null, 0, 0, 0);
                             }
                             updateInterfaceWithMessages(-updates.chat_id, objArr);
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
@@ -3673,16 +3651,9 @@ public void run() {
                             if (printUpdate) {
                                 NotificationCenter.getInstance().postNotificationName(updateInterfaces, UPDATE_MASK_USER_PRINT);
                             }
-                            if (obj.messageOwner.from_id != UserConfig.getClientUserId()) {
-                                long dialog_id;
-                                if (obj.messageOwner.to_id.chat_id != 0) {
-                                    dialog_id = -obj.messageOwner.to_id.chat_id;
-                                } else {
-                                    dialog_id = obj.messageOwner.to_id.user_id;
-                                }
-                                if (dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0 || !ApplicationLoader.isScreenOn) {
-                                    showInAppNotification(obj);
-                                }
+                            if (!obj.isFromMe() && obj.isUnread()) {
+                                NotificationsController.getInstance().processNewMessages(objArr, true);
+                                NotificationsController.getInstance().processReadMessages(null, 0, 0, 0);
                             }
                             updateInterfaceWithMessages(updates.from_id, objArr);
                             NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
@@ -3784,7 +3755,7 @@ public void run() {
                 public void run(TLObject response, TLRPC.TL_error error) {
 
                 }
-            }, null, true, RPCRequest.RPCRequestClassGeneric);
+            });
         }
         MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
     }
@@ -3796,6 +3767,7 @@ public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayLi
         long currentTime = System.currentTimeMillis();
 
         final HashMap<Long, ArrayList<MessageObject>> messages = new HashMap<Long, ArrayList<MessageObject>>();
+        final ArrayList<MessageObject> pushMessages = new ArrayList<MessageObject>();
         final ArrayList<TLRPC.Message> messagesArr = new ArrayList<TLRPC.Message>();
         final ArrayList<Integer> markAsReadMessages = new ArrayList<Integer>();
         final HashMap<Integer, Integer> markAsReadEncrypted = new HashMap<Integer, Integer>();
@@ -3805,7 +3777,6 @@ public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayLi
         final ArrayList<TLRPC.Update> updatesOnMainThread = new ArrayList<TLRPC.Update>();
         final ArrayList<TLRPC.TL_updateEncryptedMessagesRead> tasks = new ArrayList<TLRPC.TL_updateEncryptedMessagesRead>();
         final ArrayList<Integer> contactsIds = new ArrayList<Integer>();
-        MessageObject lastMessage = null;
 
         boolean checkForUsers = true;
         ConcurrentHashMap<Integer, TLRPC.User> usersDict;
@@ -3883,13 +3854,9 @@ public void run() {
                 }
                 arr.add(obj);
                 MessagesStorage.lastPtsValue = update.pts;
-                if (upd.message.from_id != UserConfig.getClientUserId() && upd.message.to_id != null) {
-                    if (uid != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
-                        lastMessage = obj;
-                    }
+                if (!obj.isFromMe() && obj.isUnread()) {
+                    pushMessages.add(obj);
                 }
-            } else if (update instanceof TLRPC.TL_updateMessageID) {
-                //can't be here
             } else if (update instanceof TLRPC.TL_updateReadMessages) {
                 markAsReadMessages.addAll(update.messages);
                 MessagesStorage.lastPtsValue = update.pts;
@@ -3937,37 +3904,6 @@ public void run() {
             } else if (update instanceof TLRPC.TL_updateUserPhoto) {
                 interfaceUpdateMask |= UPDATE_MASK_AVATAR;
                 MessagesStorage.getInstance().clearUserPhotos(update.user_id);
-               /*if (!(update.photo instanceof TLRPC.TL_userProfilePhotoEmpty)) { DEPRECATED
-                    if (usersDict.containsKey(update.user_id)) {
-                        TLRPC.TL_messageService newMessage = new TLRPC.TL_messageService();
-                        newMessage.action = new TLRPC.TL_messageActionUserUpdatedPhoto();
-                        newMessage.action.newUserPhoto = update.photo;
-                        newMessage.local_id = newMessage.id = UserConfig.getNewMessageId();
-                        UserConfig.saveConfig(false);
-                        newMessage.unread = true;
-                        newMessage.date = update.date;
-                        newMessage.from_id = update.user_id;
-                        newMessage.to_id = new TLRPC.TL_peerUser();
-                        newMessage.to_id.user_id = UserConfig.clientUserId;
-                        newMessage.out = false;
-                        newMessage.dialog_id = update.user_id;
-
-                        messagesArr.add(newMessage);
-                        MessageObject obj = new MessageObject(newMessage, usersDict);
-                        ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
-                        if (arr == null) {
-                            arr = new ArrayList<MessageObject>();
-                            messages.put(newMessage.dialog_id, arr);
-                        }
-                        arr.add(obj);
-                        if (newMessage.from_id != UserConfig.clientUserId && newMessage.to_id != null) {
-                            if (newMessage.dialog_id != openned_dialog_id || ApplicationLoader.lastPauseTime != 0) {
-                                lastMessage = obj;
-                            }
-                        }
-                    }
-                }*/
-
                 updatesOnMainThread.add(update);
             } else if (update instanceof TLRPC.TL_updateContactRegistered) {
                 if (enableJoined && usersDict.containsKey(update.user_id)) {
@@ -3991,11 +3927,7 @@ public void run() {
                         messages.put(newMessage.dialog_id, arr);
                     }
                     arr.add(obj);
-                    if (newMessage.from_id != UserConfig.getClientUserId() && newMessage.to_id != null) {
-                        if (newMessage.dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
-                            lastMessage = obj;
-                        }
-                    }
+                    pushMessages.add(obj);
                 }
             } else if (update instanceof TLRPC.TL_updateContactLink) {
                 if (update.my_link instanceof TLRPC.TL_contacts_myLinkContact || update.my_link instanceof TLRPC.TL_contacts_myLinkRequested && update.my_link.contact) {
@@ -4040,11 +3972,7 @@ public void run() {
                     messages.put(newMessage.dialog_id, arr);
                 }
                 arr.add(obj);
-                if (newMessage.from_id != UserConfig.getClientUserId() && newMessage.to_id != null) {
-                    if (newMessage.dialog_id != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
-                        lastMessage = obj;
-                    }
-                }
+                pushMessages.add(obj);
             } else if (update instanceof TLRPC.TL_updateNewGeoChatMessage) {
                 //DEPRECATED
             } else if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
@@ -4061,11 +3989,7 @@ public void run() {
                         messages.put(uid, arr);
                     }
                     arr.add(obj);
-                    if (message.from_id != UserConfig.getClientUserId() && message.to_id != null) {
-                        if (uid != openned_dialog_id || ConnectionsManager.lastPauseTime != 0) {
-                            lastMessage = obj;
-                        }
-                    }
+                    pushMessages.add(obj);
                 }
             } else if (update instanceof TLRPC.TL_updateEncryptedChatTyping) {
                 TLRPC.EncryptedChat encryptedChat = getEncryptedChat(update.chat_id);
@@ -4176,6 +4100,10 @@ public void run() {
                         }
                     });
                 }
+            } else if (update instanceof TLRPC.TL_updateUserBlocked) {
+                //TODO
+            } else if (update instanceof TLRPC.TL_updateNotifySettings) {
+                updatesOnMainThread.add(update);
             }
         }
         if (!messages.isEmpty()) {
@@ -4192,7 +4120,6 @@ public void run() {
             updatePrintingStrings();
         }
 
-        final MessageObject lastMessageArg = lastMessage;
         final int interfaceUpdateMaskFinal = interfaceUpdateMask;
         final boolean printChangedArg = printChanged;
 
@@ -4206,116 +4133,146 @@ public void run() {
             MessagesStorage.getInstance().putMessages(messagesArr, true, true);
         }
 
-        if (!messages.isEmpty() || !markAsReadMessages.isEmpty() || !deletedMessages.isEmpty() || printChanged || !chatInfoToUpdate.isEmpty() || !updatesOnMainThread.isEmpty() || !markAsReadEncrypted.isEmpty() || !contactsIds.isEmpty()) {
-            Utilities.RunOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    int updateMask = interfaceUpdateMaskFinal;
-
-                    boolean avatarsUpdate = false;
-                    if (!updatesOnMainThread.isEmpty()) {
-                        ArrayList<TLRPC.User> dbUsers = new ArrayList<TLRPC.User>();
-                        ArrayList<TLRPC.User> dbUsersStatus = new ArrayList<TLRPC.User>();
-                        for (TLRPC.Update update : updatesOnMainThread) {
-                            TLRPC.User toDbUser = new TLRPC.User();
-                            toDbUser.id = update.user_id;
-                            TLRPC.User currentUser = users.get(update.user_id);
-                            if (update instanceof TLRPC.TL_updateUserStatus) {
-                                if (currentUser != null) {
-                                    currentUser.id = update.user_id;
-                                    currentUser.status = update.status;
+        Utilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                int updateMask = interfaceUpdateMaskFinal;
+
+                boolean avatarsUpdate = false;
+                if (!updatesOnMainThread.isEmpty()) {
+                    ArrayList<TLRPC.User> dbUsers = new ArrayList<TLRPC.User>();
+                    ArrayList<TLRPC.User> dbUsersStatus = new ArrayList<TLRPC.User>();
+                    SharedPreferences.Editor editor = null;
+                    for (TLRPC.Update update : updatesOnMainThread) {
+                        TLRPC.User toDbUser = new TLRPC.User();
+                        toDbUser.id = update.user_id;
+                        TLRPC.User currentUser = users.get(update.user_id);
+                        if (update instanceof TLRPC.TL_updateUserStatus) {
+                            if (currentUser != null) {
+                                currentUser.id = update.user_id;
+                                currentUser.status = update.status;
+                            }
+                            toDbUser.status = update.status;
+                            dbUsersStatus.add(toDbUser);
+                        } else if (update instanceof TLRPC.TL_updateUserName) {
+                            if (currentUser != null) {
+                                currentUser.first_name = update.first_name;
+                                currentUser.last_name = update.last_name;
+                            }
+                            toDbUser.first_name = update.first_name;
+                            toDbUser.last_name = update.last_name;
+                            dbUsers.add(toDbUser);
+                        } else if (update instanceof TLRPC.TL_updateUserPhoto) {
+                            if (currentUser != null) {
+                                currentUser.photo = update.photo;
+                            }
+                            avatarsUpdate = true;
+                            toDbUser.photo = update.photo;
+                            dbUsers.add(toDbUser);
+                        } else if (update instanceof TLRPC.TL_updateNotifySettings) {
+                            if (update.notify_settings instanceof TLRPC.TL_peerNotifySettings && update.peer instanceof TLRPC.TL_notifyPeer) {
+                                if (editor == null) {
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                    editor = preferences.edit();
+                                }
+                                int dialog_id = update.peer.peer.user_id;
+                                if (dialog_id == 0) {
+                                    dialog_id = -update.peer.peer.chat_id;
+                                }
+                                if (update.notify_settings.mute_until != 0) {
+                                    editor.putInt("notify2_" + dialog_id, 2);
+                                } else {
+                                    editor.remove("notify2_" + dialog_id);
                                 }
-                                toDbUser.status = update.status;
-                                dbUsersStatus.add(toDbUser);
-                            } else if (update instanceof TLRPC.TL_updateUserName) {
-                                if (currentUser != null) {
-                                    currentUser.first_name = update.first_name;
-                                    currentUser.last_name = update.last_name;
+                            } else if (update.peer instanceof TLRPC.TL_notifyChats) {
+                                if (editor == null) {
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                    editor = preferences.edit();
                                 }
-                                toDbUser.first_name = update.first_name;
-                                toDbUser.last_name = update.last_name;
-                                dbUsers.add(toDbUser);
-                            } else if (update instanceof TLRPC.TL_updateUserPhoto) {
-                                if (currentUser != null) {
-                                    currentUser.photo = update.photo;
+                                editor.putBoolean("EnableGroup", update.notify_settings.mute_until == 0);
+                                editor.putBoolean("EnablePreviewGroup", update.notify_settings.show_previews);
+                            } else if (update.peer instanceof TLRPC.TL_notifyUsers) {
+                                if (editor == null) {
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                    editor = preferences.edit();
                                 }
-                                avatarsUpdate = true;
-                                toDbUser.photo = update.photo;
-                                dbUsers.add(toDbUser);
+                                editor.putBoolean("EnableAll", update.notify_settings.mute_until == 0);
+                                editor.putBoolean("EnablePreviewAll", update.notify_settings.show_previews);
                             }
                         }
-                        MessagesStorage.getInstance().updateUsers(dbUsersStatus, true, true, true);
-                        MessagesStorage.getInstance().updateUsers(dbUsers, false, true, true);
                     }
-
-                    if (!messages.isEmpty()) {
-                        for (HashMap.Entry<Long, ArrayList<MessageObject>> entry : messages.entrySet()) {
-                            Long key = entry.getKey();
-                            ArrayList<MessageObject> value = entry.getValue();
-                            updateInterfaceWithMessages(key, value);
-                        }
-                        NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                    if (editor != null) {
+                        editor.commit();
+                        NotificationCenter.getInstance().postNotificationName(notificationsSettingsUpdated);
                     }
-                    if (!markAsReadMessages.isEmpty()) {
-                        for (Integer id : markAsReadMessages) {
-                            MessageObject obj = dialogMessage.get(id);
-                            if (obj != null) {
-                                obj.messageOwner.unread = false;
-                                updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
-                            }
-                        }
+                    MessagesStorage.getInstance().updateUsers(dbUsersStatus, true, true, true);
+                    MessagesStorage.getInstance().updateUsers(dbUsers, false, true, true);
+                }
 
-                        if (currentPushMessage != null && markAsReadMessages.contains(currentPushMessage.messageOwner.id)) {
-                            NotificationManager mNotificationManager = (NotificationManager)ApplicationLoader.applicationContext.getSystemService(Context.NOTIFICATION_SERVICE);
-                            mNotificationManager.cancel(1);
-                            currentPushMessage = null;
-                        }
+                if (!messages.isEmpty()) {
+                    for (HashMap.Entry<Long, ArrayList<MessageObject>> entry : messages.entrySet()) {
+                        Long key = entry.getKey();
+                        ArrayList<MessageObject> value = entry.getValue();
+                        updateInterfaceWithMessages(key, value);
                     }
-                    if (!markAsReadEncrypted.isEmpty()) {
-                        for (HashMap.Entry<Integer, Integer> entry : markAsReadEncrypted.entrySet()) {
-                            NotificationCenter.getInstance().postNotificationName(messagesReadedEncrypted, entry.getKey(), entry.getValue());
-                            long dialog_id = (long)(entry.getKey()) << 32;
-                            TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-                            if (dialog != null) {
-                                MessageObject message = dialogMessage.get(dialog.top_message);
-                                if (message != null && message.messageOwner.date <= entry.getValue()) {
-                                    message.messageOwner.unread = false;
-                                    updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
-                                }
-                            }
+                    NotificationCenter.getInstance().postNotificationName(dialogsNeedReload);
+                }
+                if (!pushMessages.isEmpty()) {
+                    NotificationsController.getInstance().processNewMessages(pushMessages, true);
+                }
+                if (!markAsReadMessages.isEmpty()) {
+                    for (Integer id : markAsReadMessages) {
+                        MessageObject obj = dialogMessage.get(id);
+                        if (obj != null) {
+                            obj.messageOwner.unread = false;
+                            updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                         }
                     }
-                    if (!deletedMessages.isEmpty()) {
-                        NotificationCenter.getInstance().postNotificationName(messagesDeleted, deletedMessages);
-                        for (Integer id : deletedMessages) {
-                            MessageObject obj = dialogMessage.get(id);
-                            if (obj != null) {
-                                obj.deleted = true;
+                }
+                if (!markAsReadEncrypted.isEmpty()) {
+                    for (HashMap.Entry<Integer, Integer> entry : markAsReadEncrypted.entrySet()) {
+                        NotificationCenter.getInstance().postNotificationName(messagesReadedEncrypted, entry.getKey(), entry.getValue());
+                        long dialog_id = (long)(entry.getKey()) << 32;
+                        TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
+                        if (dialog != null) {
+                            MessageObject message = dialogMessage.get(dialog.top_message);
+                            if (message != null && message.messageOwner.date <= entry.getValue()) {
+                                message.messageOwner.unread = false;
+                                updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                             }
                         }
                     }
-                    if (printChangedArg) {
-                        updateMask |= UPDATE_MASK_USER_PRINT;
-                    }
-                    if (!contactsIds.isEmpty()) {
-                        updateMask |= UPDATE_MASK_NAME;
-                        updateMask |= UPDATE_MASK_USER_PHONE;
-                    }
-                    if (!chatInfoToUpdate.isEmpty()) {
-                        for (TLRPC.ChatParticipants info : chatInfoToUpdate) {
-                            MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
-                            NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
+                }
+                if (!markAsReadMessages.isEmpty() || !messages.isEmpty()) {
+                    NotificationsController.getInstance().processReadMessages(markAsReadMessages, 0, 0, 0);
+                }
+                if (!deletedMessages.isEmpty()) {
+                    NotificationCenter.getInstance().postNotificationName(messagesDeleted, deletedMessages);
+                    for (Integer id : deletedMessages) {
+                        MessageObject obj = dialogMessage.get(id);
+                        if (obj != null) {
+                            obj.deleted = true;
                         }
                     }
-                    if (updateMask != 0) {
-                        NotificationCenter.getInstance().postNotificationName(updateInterfaces, updateMask);
-                    }
-                    if (lastMessageArg != null) {
-                        showInAppNotification(lastMessageArg);
+                }
+                if (printChangedArg) {
+                    updateMask |= UPDATE_MASK_USER_PRINT;
+                }
+                if (!contactsIds.isEmpty()) {
+                    updateMask |= UPDATE_MASK_NAME;
+                    updateMask |= UPDATE_MASK_USER_PHONE;
+                }
+                if (!chatInfoToUpdate.isEmpty()) {
+                    for (TLRPC.ChatParticipants info : chatInfoToUpdate) {
+                        MessagesStorage.getInstance().updateChatInfo(info.chat_id, info, true);
+                        NotificationCenter.getInstance().postNotificationName(chatInfoDidLoaded, info.chat_id, info);
                     }
                 }
-            });
-        }
+                if (updateMask != 0) {
+                    NotificationCenter.getInstance().postNotificationName(updateInterfaces, updateMask);
+                }
+            }
+        });
 
         if (!markAsReadMessages.isEmpty() || !markAsReadEncrypted.isEmpty()) {
             MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
@@ -4391,324 +4348,6 @@ private boolean updatePrintingUsersWithNewMessages(long uid, ArrayList<MessageOb
         return false;
     }
 
-    private void playNotificationSound() {
-        if (lastSoundPlay > System.currentTimeMillis() - 1800) {
-            return;
-        }
-        try {
-            lastSoundPlay = System.currentTimeMillis();
-            soundPool.play(sound, 1, 1, 1, 0, 1);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    private void showInAppNotification(MessageObject messageObject) {
-        if (!UserConfig.isClientActivated()) {
-            return;
-        }
-        if (ConnectionsManager.lastPauseTime != 0) {
-            ConnectionsManager.lastPauseTime = System.currentTimeMillis();
-            FileLog.e("tmessages", "reset sleep timeout by received message");
-        }
-        if (messageObject == null) {
-            return;
-        }
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-        boolean globalEnabled = preferences.getBoolean("EnableAll", true);
-        boolean groupEnabled = preferences.getBoolean("EnableGroup", true);
-
-        long dialog_id = messageObject.messageOwner.dialog_id;
-        int chat_id = messageObject.messageOwner.to_id.chat_id;
-        int user_id = messageObject.messageOwner.to_id.user_id;
-        if (user_id == 0) {
-            user_id = messageObject.messageOwner.from_id;
-        } else if (user_id == UserConfig.getClientUserId()) {
-            user_id = messageObject.messageOwner.from_id;
-        }
-
-        if (dialog_id == 0) {
-            if (chat_id != 0) {
-                dialog_id = -chat_id;
-            } else if (user_id != 0) {
-                dialog_id = user_id;
-            }
-        }
-
-        int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
-        if (notify_override == 2 || (!globalEnabled || chat_id != 0 && !groupEnabled) && notify_override == 0) {
-            return;
-        }
-
-        TLRPC.User user = users.get(user_id);
-        if (user == null) {
-            return;
-        }
-        TLRPC.Chat chat = null;
-        if (chat_id != 0) {
-            chat = chats.get(chat_id);
-            if (chat == null) {
-                return;
-            }
-        }
-
-        int vibrate_override = preferences.getInt("vibrate_" + dialog_id, 0);
-
-        if (ConnectionsManager.lastPauseTime == 0 && ApplicationLoader.isScreenOn) {
-            boolean inAppSounds = preferences.getBoolean("EnableInAppSounds", true);
-            boolean inAppVibrate = preferences.getBoolean("EnableInAppVibrate", true);
-            boolean inAppPreview = preferences.getBoolean("EnableInAppPreview", true);
-
-            if (inAppSounds || inAppVibrate || inAppPreview) {
-                if ((int)dialog_id == 0) {
-                    TLRPC.EncryptedChat encChat = encryptedChats.get((int)(dialog_id >> 32));
-                    if (encChat == null) {
-                        return;
-                    }
-                }
-
-                if (inAppPreview) {
-                    NotificationCenter.getInstance().postNotificationName(701, messageObject);
-                }
-                if (inAppVibrate && vibrate_override == 0 || vibrate_override == 1) {
-                    Vibrator v = (Vibrator)ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
-                    v.vibrate(100);
-                }
-                if (inAppSounds) {
-                    playNotificationSound();
-                }
-            }
-        } else {
-            TLRPC.FileLocation photoPath = null;
-            String defaultPath = Settings.System.DEFAULT_NOTIFICATION_URI.getPath();
-
-            NotificationManager mNotificationManager = (NotificationManager)ApplicationLoader.applicationContext.getSystemService(Context.NOTIFICATION_SERVICE);
-            Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
-            String msg = null;
-
-            if ((int)dialog_id != 0) {
-                if (chat_id != 0) {
-                    intent.putExtra("chatId", chat_id);
-                } else if (user_id != 0) {
-                    intent.putExtra("userId", user_id);
-                }
-
-                if (user.photo != null && user.photo.photo_small != null && user.photo.photo_small.volume_id != 0 && user.photo.photo_small.local_id != 0) {
-                    photoPath = user.photo.photo_small;
-                }
-
-                if (chat_id == 0 && user_id != 0) {
-                    if (preferences.getBoolean("EnablePreviewAll", true)) {
-                        if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
-                            if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserJoined) {
-                                msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, Utilities.formatName(user.first_name, user.last_name));
-                            } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                                msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, Utilities.formatName(user.first_name, user.last_name));
-                            } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                                String date = String.format("%s %s %s", LocaleController.formatterYear.format(((long)messageObject.messageOwner.date) * 1000), LocaleController.getString("OtherAt", R.string.OtherAt), LocaleController.formatterDay.format(((long)messageObject.messageOwner.date) * 1000));
-                                msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
-                            }
-                        } else {
-                            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
-                                if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                    msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, Utilities.formatName(user.first_name, user.last_name), messageObject.messageOwner.message);
-                                } else {
-                                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(user.first_name, user.last_name));
-                                }
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                                msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, Utilities.formatName(user.first_name, user.last_name));
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                                msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, Utilities.formatName(user.first_name, user.last_name));
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                                msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, Utilities.formatName(user.first_name, user.last_name));
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                                msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, Utilities.formatName(user.first_name, user.last_name));
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, Utilities.formatName(user.first_name, user.last_name));
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                                msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, Utilities.formatName(user.first_name, user.last_name));
-                            }
-                        }
-                    } else {
-                        msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(user.first_name, user.last_name));
-                    }
-                } else if (chat_id != 0) {
-                    if (preferences.getBoolean("EnablePreviewGroup", true)) {
-                        if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
-                            if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
-                                if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                    msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                                } else {
-                                    TLRPC.User u2 = users.get(messageObject.messageOwner.action.user_id);
-                                    if (u2 == null) {
-                                        return;
-                                    }
-                                    msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, Utilities.formatName(user.first_name, user.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
-                                }
-                            } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditTitle) {
-                                msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, Utilities.formatName(user.first_name, user.last_name), messageObject.messageOwner.action.title);
-                            } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
-                                msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                            } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
-                                if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                    msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                                } else if (messageObject.messageOwner.action.user_id == user.id) {
-                                    msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                                } else {
-                                    TLRPC.User u2 = users.get(messageObject.messageOwner.action.user_id);
-                                    if (u2 == null) {
-                                        return;
-                                    }
-                                    msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, Utilities.formatName(user.first_name, user.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
-                                }
-                            }
-                        } else {
-                            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
-                                if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                    msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, Utilities.formatName(user.first_name, user.last_name), chat.title, messageObject.messageOwner.message);
-                                } else {
-                                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                                }
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                                msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                                msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                                msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                                msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                            } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                                msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                            }
-                        }
-                    } else {
-                        msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(user.first_name, user.last_name), chat.title);
-                    }
-                }
-            } else {
-                msg = LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
-                int enc_id = (int)(dialog_id >> 32);
-                intent.putExtra("encId", enc_id);
-            }
-            if (msg == null) {
-                return;
-            }
-
-            boolean needVibrate = false;
-            String choosenSoundPath = null;
-            int ledColor = 0xff00ff00;
-
-            choosenSoundPath = preferences.getString("sound_path_" + dialog_id, null);
-
-            if (chat_id != 0) {
-                if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
-                    choosenSoundPath = null;
-                } else if (choosenSoundPath == null) {
-                    choosenSoundPath = preferences.getString("GroupSoundPath", defaultPath);
-                }
-                needVibrate = preferences.getBoolean("EnableVibrateGroup", true);
-                ledColor = preferences.getInt("GroupLed", 0xff00ff00);
-            } else if (user_id != 0) {
-                if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
-                    choosenSoundPath = null;
-                } else if (choosenSoundPath == null) {
-                    choosenSoundPath = preferences.getString("GlobalSoundPath", defaultPath);
-                }
-                needVibrate = preferences.getBoolean("EnableVibrateAll", true);
-                ledColor = preferences.getInt("MessagesLed", 0xff00ff00);
-            }
-            if (preferences.contains("color_" + dialog_id)) {
-                ledColor = preferences.getInt("color_" + dialog_id, 0);
-            }
-
-            if (!needVibrate && vibrate_override == 1) {
-                needVibrate = true;
-            } else if (needVibrate && vibrate_override == 2) {
-                needVibrate = false;
-            }
-
-            String name = Utilities.formatName(user.first_name, user.last_name);
-            if ((int)dialog_id == 0) {
-                name = LocaleController.getString("AppName", R.string.AppName);
-            }
-            String msgShort = msg.replace(name + ": ", "").replace(name + " ", "");
-
-            intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
-            intent.setFlags(32768);
-            PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, intent, PendingIntent.FLAG_ONE_SHOT);
-
-            NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setContentTitle(name)
-                    .setSmallIcon(R.drawable.notification)
-                    .setStyle(new NotificationCompat.BigTextStyle().bigText(msgShort))
-                    .setContentText(msgShort)
-                    .setAutoCancel(true)
-                    .setTicker(msg);
-
-            if (photoPath != null) {
-                Bitmap img = FileLoader.getInstance().getImageFromMemory(photoPath, null, null, "50_50", false);
-                if (img != null) {
-                    mBuilder.setLargeIcon(img);
-                }
-            }
-
-            if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
-                if (choosenSoundPath.equals(defaultPath)) {
-                    mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
-                } else {
-                    mBuilder.setSound(Uri.parse(choosenSoundPath), AudioManager.STREAM_NOTIFICATION);
-                }
-            }
-
-            currentPushMessage = null;
-            mBuilder.setContentIntent(contentIntent);
-            mNotificationManager.cancel(1);
-            Notification notification = mBuilder.build();
-            if (ledColor != 0) {
-                notification.ledARGB = ledColor;
-            }
-            notification.ledOnMS = 1000;
-            notification.ledOffMS = 1000;
-            if (needVibrate) {
-                notification.vibrate = new long[]{0, 100, 0, 100};
-            } else {
-                notification.vibrate = new long[]{0, 0};
-            }
-            notification.flags |= Notification.FLAG_SHOW_LIGHTS;
-            try {
-                mNotificationManager.notify(1, notification);
-                if (preferences.getBoolean("EnablePebbleNotifications", false)) {
-                    sendAlertToPebble(msg);
-                }
-                currentPushMessage = messageObject;
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-    }
-
-    public void sendAlertToPebble(String message) {
-        try {
-            final Intent i = new Intent("com.getpebble.action.SEND_NOTIFICATION");
-
-            final HashMap<String, String> data = new HashMap<String, String>();
-            data.put("title", LocaleController.getString("AppName", R.string.AppName));
-            data.put("body", message);
-            final JSONObject jsonData = new JSONObject(data);
-            final String notificationData = new JSONArray().put(jsonData).toString();
-
-            i.putExtra("messageType", "PEBBLE_ALERT");
-            i.putExtra("sender", LocaleController.formatString("AppName", R.string.AppName));
-            i.putExtra("notificationData", notificationData);
-
-            ApplicationLoader.applicationContext.sendBroadcast(i);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
     public void dialogsUnreadCountIncr(final HashMap<Long, Integer> values) {
         Utilities.RunOnUIThread(new Runnable() {
             @Override
@@ -4810,18 +4449,19 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
         if (chat == null) {
             return null;
         }
-        SerializedData is = new SerializedData(message.bytes);
+        ByteBufferDesc is = BuffersStorage.getInstance().getFreeBuffer(message.bytes.length);
+        is.writeRaw(message.bytes);
+        is.position(0);
         long fingerprint = is.readInt64();
         if (chat.key_fingerprint == fingerprint) {
             byte[] messageKey = is.readData(16);
             MessageKeyData keyData = Utilities.generateMessageKeyData(chat.auth_key, messageKey, false);
 
-            byte[] messageData = is.readData(message.bytes.length - 24);
-            messageData = Utilities.aesIgeEncryption(messageData, keyData.aesKey, keyData.aesIv, false, false, 0);
+            Utilities.aesIgeEncryption(is.buffer, keyData.aesKey, keyData.aesIv, false, false, 24, is.limit() - 24);
 
-            is = new SerializedData(messageData);
             int len = is.readInt32();
             TLObject object = TLClassStore.Instance().TLdeserialize(is, is.readInt32());
+            BuffersStorage.getInstance().reuseFreeBuffer(is);
             if (object != null) {
 
                 int from_id = chat.admin_id;
@@ -4919,6 +4559,10 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         newMessage.media.video.access_hash = message.file.access_hash;
                         newMessage.media.video.key = decryptedMessage.media.key;
                         newMessage.media.video.iv = decryptedMessage.media.iv;
+                        newMessage.media.video.mime_type = decryptedMessage.media.mime_type;
+                        if (newMessage.media.video.mime_type == null) {
+                            newMessage.media.video.mime_type = "video/mp4";
+                        }
                     } else if (decryptedMessage.media instanceof TLRPC.TL_decryptedMessageMediaDocument) {
                         if (decryptedMessage.media.key == null || decryptedMessage.media.key.length != 32 || decryptedMessage.media.iv == null || decryptedMessage.media.iv.length != 32) {
                             return null;
@@ -4961,6 +4605,10 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         newMessage.media.audio.iv = decryptedMessage.media.iv;
                         newMessage.media.audio.dc_id = message.file.dc_id;
                         newMessage.media.audio.duration = decryptedMessage.media.duration;
+                        newMessage.media.audio.mime_type = decryptedMessage.media.mime_type;
+                        if (newMessage.media.audio.mime_type == null) {
+                            newMessage.media.audio.mime_type = "audio/ogg";
+                        }
                     } else {
                         return null;
                     }
@@ -5019,6 +4667,7 @@ public void run() {
         } else {
             FileLog.e("tmessages", "fingerprint mismatch");
         }
+        BuffersStorage.getInstance().reuseFreeBuffer(is);
         return null;
     }
 
@@ -5085,7 +4734,7 @@ public void declineSecretChat(int chat_id) {
             public void run(TLObject response, TLRPC.TL_error error) {
 
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric);
+        });
     }
 
     public void acceptSecretChat(final TLRPC.EncryptedChat encryptedChat) {
@@ -5180,12 +4829,12 @@ public void run() {
                                 });
                             }
                         }
-                    }, null, true, RPCRequest.RPCRequestClassGeneric);
+                    });
                 } else {
                     acceptingChats.remove(encryptedChat.id);
                 }
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric);
+        });
     }
 
     public void startSecretChat(final Context context, final TLRPC.User user) {
@@ -5324,7 +4973,7 @@ public void run() {
                                 });
                             }
                         }
-                    }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+                    }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
                 } else {
                     delayedEncryptedChatUpdates.clear();
                     Utilities.RunOnUIThread(new Runnable() {
@@ -5342,7 +4991,7 @@ public void run() {
                     });
                 }
             }
-        }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
         progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
             @Override
             public void onClick(DialogInterface dialog, int which) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 1b4313306..426959720 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -621,7 +621,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             canvas.translate(photoImage.imageX + AndroidUtilities.dp(8), photoImage.imageY + AndroidUtilities.dp(6));
             infoLayout.draw(canvas);
             if (infoLayout2 != null) {
-                canvas.translate(infoOffset, photoImage.imageY + Utilities.dp(6));
+                canvas.translate(infoOffset, photoImage.imageY + AndroidUtilities.dp(6));
                 infoLayout2.draw(canvas);
             }
             canvas.restore();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 14fd3fefb..718ad1044 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -2843,7 +2843,7 @@ private void processSelectedOption(int option) {
 
                 File f = new File(ObjectPath);
                 if (!f.exists() || f.length() == 0) {
-                    ObjectPath = Utilities.getCacheDir().toString() + File.separator + selectedObject.getFileName();
+                    ObjectPath = AndroidUtilities.getCacheDir().toString() + File.separator + selectedObject.getFileName();
                 }
 
                 if (ObjectPath == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
index 06f7ba7df..91ed1e366 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ChatActivityEnterView.java
@@ -313,9 +313,9 @@ private void sendMessage() {
     public boolean processSendingText(String text) {
         text = getTrimmedString(text);
         if (text.length() != 0) {
-            int count = (int)Math.ceil(text.length() / 2048.0f);
+            int count = (int)Math.ceil(text.length() / 4096.0f);
             for (int a = 0; a < count; a++) {
-                String mess = text.substring(a * 2048, Math.min((a + 1) * 2048, text.length()));
+                String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
                 MessagesController.getInstance().sendMessage(mess, dialog_id);
             }
             return true;
