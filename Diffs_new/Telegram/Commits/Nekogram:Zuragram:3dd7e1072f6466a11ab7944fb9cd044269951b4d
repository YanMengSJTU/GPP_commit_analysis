diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index db4d52aa5..83aaa9a36 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -174,6 +174,9 @@
 import org.telegram.ui.Components.UndoView;
 import org.telegram.ui.Components.voip.VoIPHelper;
 
+import org.zuragram.android.ZuraConfig;
+import org.zuragram.android.MessageHelper;
+
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileWriter;
@@ -444,6 +447,8 @@
     private Path aspectPath;
     private Paint aspectPaint;
 
+    private static boolean noForwardQuote;
+
     private PhotoViewer.PhotoViewerProvider photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
 
         @Override
@@ -554,6 +559,7 @@ public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
 
     private final static int copy = 10;
     private final static int forward = 11;
+    private final static int forward_noquote = 95;
     private final static int delete = 12;
     private final static int chat_enc_timer = 13;
     private final static int chat_menu_attach = 14;
@@ -566,6 +572,7 @@ public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
     private final static int star = 22;
     private final static int edit = 23;
     private final static int add_shortcut = 24;
+    private final static int show_pinned = 25;
 
     private final static int bot_help = 30;
     private final static int bot_settings = 31;
@@ -1081,7 +1088,8 @@ public void onItemClick(final int id) {
                         return;
                     }
                     createDeleteMessagesAlert(null, null);
-                } else if (id == forward) {
+                } else if (id == forward || id == forward_noquote) {
+                    noForwardQuote = id == forward_noquote;
                     Bundle args = new Bundle();
                     args.putBoolean("onlySelect", true);
                     args.putInt("dialogsType", 3);
@@ -1266,6 +1274,10 @@ public void onItemClick(final int id) {
                         chatActivityEnterView.getEditField().setSelectionOverride(editTextStart, editTextEnd);
                         chatActivityEnterView.getEditField().makeSelectedRegular();
                     }
+                } else if (id == show_pinned) {
+                    SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+                    preferences.edit().putInt("pin_" + dialog_id, 0).commit();
+                    updatePinnedMessageView(true);
                 }
             }
         });
@@ -1435,6 +1447,21 @@ public boolean forceShowClear() {
         if (!ChatObject.isChannel(currentChat) || currentChat != null && currentChat.megagroup && TextUtils.isEmpty(currentChat.username)) {
             headerItem.addSubItem(clear_history, LocaleController.getString("ClearHistory", R.string.ClearHistory));
         }
+
+        boolean allowShowPinned;
+        if (currentChat != null) {
+            allowShowPinned = ChatObject.canUserDoAction(currentChat, ChatObject.ACTION_PIN) || ChatObject.isChannel(currentChat);
+        } else if (currentUser != null && currentUser.self) {
+            allowShowPinned = true;
+        } else if (userInfo != null) {
+            allowShowPinned = userInfo.can_pin_message;
+        } else {
+            allowShowPinned = false;
+        }
+        if (allowShowPinned) {
+            headerItem.addSubItem(show_pinned, LocaleController.getString("PinnedMessage", R.string.PinnedMessage));
+        }
+
         if (currentUser == null || !currentUser.self) {
             muteItem = headerItem.addSubItem(mute, null);
         }
@@ -1493,6 +1520,7 @@ public boolean forceShowClear() {
             }
             actionModeViews.add(actionMode.addItemWithWidth(star, R.drawable.ic_ab_fave, AndroidUtilities.dp(54)));
             actionModeViews.add(actionMode.addItemWithWidth(copy, R.drawable.ic_ab_copy, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItemWithWidth(forward_noquote, R.drawable.ic_ab_forward, AndroidUtilities.dp(54)));
             actionModeViews.add(actionMode.addItemWithWidth(forward, R.drawable.ic_ab_forward, AndroidUtilities.dp(54)));
             actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.ic_ab_delete, AndroidUtilities.dp(54)));
         } else {
@@ -2707,6 +2735,15 @@ public boolean onTouchEvent(MotionEvent event) {
                     builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> MessagesController.getInstance(currentAccount).pinMessage(currentChat, currentUser, 0, false));
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    builder.setNeutralButton(LocaleController.getString("Hide", R.string.Hide),(dialogInterface, i) -> {
+                        SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
+                        if (chatInfo != null) {
+                            preferences.edit().putInt("pin_" + dialog_id, chatInfo.pinned_msg_id).commit();
+                        } else if (userInfo != null) {
+                            preferences.edit().putInt("pin_" + dialog_id, userInfo.pinned_msg_id).commit();
+                        }
+                        updatePinnedMessageView(true);
+                    });
                     showDialog(builder.create());
                 } else {
                     SharedPreferences preferences = MessagesController.getNotificationsSettings(currentAccount);
@@ -5455,14 +5492,18 @@ private void searchLinks(final CharSequence charSequence, final boolean force) {
     }
 
     private void forwardMessages(ArrayList<MessageObject> arrayList, boolean fromMyName) {
+        forwardMessages(arrayList, fromMyName, 0);
+    }
+
+    private void forwardMessages(ArrayList<MessageObject> arrayList, boolean fromMyName, long did) {
         if (arrayList == null || arrayList.isEmpty()) {
             return;
         }
         if (!fromMyName) {
-            AlertsCreator.showSendMediaAlert(SendMessagesHelper.getInstance(currentAccount).sendMessage(arrayList, dialog_id), this);
+            AlertsCreator.showSendMediaAlert(SendMessagesHelper.getInstance(currentAccount).sendMessage(arrayList, did == 0 ? dialog_id : did), this);
         } else {
             for (MessageObject object : arrayList) {
-                SendMessagesHelper.getInstance(currentAccount).processForwardFromMyName(object, dialog_id);
+                SendMessagesHelper.getInstance(currentAccount).processForwardFromMyName(object, did == 0 ? dialog_id : did);
             }
         }
     }
@@ -5808,7 +5849,7 @@ public void showFieldPanel(boolean show, MessageObject messageObjectToReply, Mes
                 }
             }
             if (forwardingMessages != null) {
-                forwardMessages(forwardingMessages, false);
+                forwardMessages(forwardingMessages, noForwardQuote);
             }
             chatActivityEnterView.setForceShowSendButton(false, false);
             chatActivityEnterView.hideTopView(false);
@@ -10917,8 +10958,8 @@ private void createDeleteMessagesAlert(final MessageObject finalSelectedObject,
         builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", count)));
         builder.setTitle(LocaleController.getString("Message", R.string.Message));
 
-        final boolean[] checks = new boolean[3];
-        final boolean[] deleteForAll = new boolean[1];
+        final boolean[] checks = new boolean[4];
+        final boolean[] deleteForAll = new boolean[] {true};
         TLRPC.User user = null;
         int revokeTimeLimit;
         boolean canRevokeInbox = currentUser != null && MessagesController.getInstance(currentAccount).canRevokePmInbox;
@@ -10987,42 +11028,11 @@ private void createDeleteMessagesAlert(final MessageObject finalSelectedObject,
                     user = MessagesController.getInstance(currentAccount).getUser(from_id);
                 }
             }
-            if (user != null && user.id != UserConfig.getInstance(currentAccount).getClientUserId() && loadParticipant != 2) {
-                if (loadParticipant == 1 && !currentChat.creator) {
-                    final AlertDialog progressDialog[] = new AlertDialog[] {new AlertDialog(getParentActivity(), 3)};
-
-                    TLRPC.TL_channels_getParticipant req = new TLRPC.TL_channels_getParticipant();
-                    req.channel = MessagesController.getInputChannel(currentChat);
-                    req.user_id = MessagesController.getInstance(currentAccount).getInputUser(user);
-                    int requestId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> AndroidUtilities.runOnUIThread(() -> {
-                        try {
-                            progressDialog[0].dismiss();
-                        } catch (Throwable ignore) {
-
-                        }
-                        progressDialog[0] = null;
-                        int loadType = 2;
-                        if (response != null) {
-                            TLRPC.TL_channels_channelParticipant participant = (TLRPC.TL_channels_channelParticipant) response;
-                            if (!(participant.participant instanceof TLRPC.TL_channelParticipantAdmin || participant.participant instanceof TLRPC.TL_channelParticipantCreator)) {
-                                loadType = 0;
-                            }
-                        }
-                        createDeleteMessagesAlert(finalSelectedObject, finalSelectedGroup, loadType);
-                    }));
-                    AndroidUtilities.runOnUIThread(() -> {
-                        if (progressDialog[0] == null) {
-                            return;
-                        }
-                        progressDialog[0].setOnCancelListener(dialog -> ConnectionsManager.getInstance(currentAccount).cancelRequest(requestId, true));
-                        showDialog(progressDialog[0]);
-                    }, 1000);
-                    return;
-                }
+            if (user != null && loadParticipant != 2) {
                 FrameLayout frameLayout = new FrameLayout(getParentActivity());
                 int num = 0;
-                for (int a = 0; a < 3; a++) {
-                    if (!canBan && a == 0) {
+                for (int a = 0; a < 4; a++) {
+                    if ((!canBan && a == 0) || (user.id == UserConfig.getInstance(currentAccount).getClientUserId() && a != 3) || (user.id != UserConfig.getInstance(currentAccount).getClientUserId() && a == 3)) {
                         continue;
                     }
                     CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1);
@@ -11034,6 +11044,9 @@ private void createDeleteMessagesAlert(final MessageObject finalSelectedObject,
                         cell.setText(LocaleController.getString("DeleteReportSpam", R.string.DeleteReportSpam), "", false, false);
                     } else if (a == 2) {
                         cell.setText(LocaleController.formatString("DeleteAllFrom", R.string.DeleteAllFrom, ContactsController.formatName(user.first_name, user.last_name)), "", false, false);
+                    } else if (a == 3) {
+                        cell.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteRedText));
+                        cell.setText(LocaleController.getString("DeleteAllFromSelf", R.string.DeleteAllFromSelf), "", false, false);
                     }
                     cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16) : AndroidUtilities.dp(8), 0, LocaleController.isRTL ? AndroidUtilities.dp(8) : AndroidUtilities.dp(16), 0);
                     frameLayout.addView(cell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.TOP | Gravity.LEFT, 0, 48 * num, 0, 0));
@@ -11054,9 +11067,9 @@ private void createDeleteMessagesAlert(final MessageObject finalSelectedObject,
                 CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1);
                 cell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                 if (currentChat != null) {
-                    cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", false, false);
+                    cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", true, false);
                 } else {
-                    cell.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(currentUser)), "", false, false);
+                    cell.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(currentUser)), "", true, false);
                 }
                 cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16) : AndroidUtilities.dp(8), 0, LocaleController.isRTL ? AndroidUtilities.dp(8) : AndroidUtilities.dp(16), 0);
                 frameLayout.addView(cell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 0));
@@ -11105,9 +11118,9 @@ private void createDeleteMessagesAlert(final MessageObject finalSelectedObject,
                 CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1);
                 cell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                 if (currentChat != null) {
-                    cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", false, false);
+                    cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", true, false);
                 } else {
-                    cell.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(currentUser)), "", false, false);
+                    cell.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(currentUser)), "", true, false);
                 }
                 cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16) : AndroidUtilities.dp(8), 0, LocaleController.isRTL ? AndroidUtilities.dp(8) : AndroidUtilities.dp(16), 0);
                 frameLayout.addView(cell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 0));
@@ -11188,6 +11201,13 @@ private void createDeleteMessagesAlert(final MessageObject finalSelectedObject,
                 if (checks[2]) {
                     MessagesController.getInstance(currentAccount).deleteUserChannelHistory(currentChat, userFinal, 0);
                 }
+                if (checks[3]) {
+                    if(ChatObject.isChannel(currentChat) && (currentChat.creator || currentChat.admin_rights != null && (currentChat.admin_rights.delete_messages))){
+                        MessagesController.getInstance(currentAccount).deleteUserChannelHistory(currentChat, userFinal, 0);
+                    } else {
+                        MessageHelper.getInstance(currentAccount).deleteUserChannelHistoryWithSearch(dialog_id, userFinal);
+                    }
+                }
             }
         });
         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
@@ -11347,7 +11367,7 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
                             items.add(LocaleController.getString("Copy", R.string.Copy));
                             options.add(3);
                         }
-                        if (ChatObject.isChannel(currentChat) && currentChat.megagroup && !TextUtils.isEmpty(currentChat.username)) {
+                        if (ChatObject.isChannel(currentChat) && !TextUtils.isEmpty(currentChat.username)) {
                             items.add(LocaleController.getString("CopyLink", R.string.CopyLink));
                             options.add(22);
                         }
@@ -11459,6 +11479,20 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
                         if (!selectedObject.needDrawBluredPreview() && !selectedObject.isLiveLocation()) {
                             items.add(LocaleController.getString("Forward", R.string.Forward));
                             options.add(2);
+                            items.add(LocaleController.getString("NoQuoteForward", R.string.NoQuoteForward));
+                            options.add(95);
+                            boolean allowRepeat;
+                            if (ChatObject.isChannel(currentChat) && !currentChat.megagroup) {
+                                allowRepeat =  currentChat.creator || (currentChat.admin_rights != null && currentChat.admin_rights.post_messages);
+                            } else {
+                                allowRepeat = true;
+                            }
+                            if(allowRepeat){
+                                items.add(LocaleController.getString("Repeat", R.string.Repeat));
+                                options.add(94);
+                                items.add("prpr");
+                                options.add(27);
+                            }
                         }
                         if (allowUnpin) {
                             items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
@@ -11533,6 +11567,45 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
                         items.add(LocaleController.getString("Delete", R.string.Delete));
                         options.add(1);
                     }
+                    if (chatInfo != null && chatInfo.participants != null && chatInfo.participants.participants != null) {
+                        for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
+                            TLRPC.ChatParticipant participant = chatInfo.participants.participants.get(a);
+                            if (participant.user_id != selectedObject.messageOwner.from_id || participant.user_id == UserConfig.getInstance(currentAccount).getCurrentUser().id) {
+                                continue;
+                            }
+
+                            boolean allowKick;
+                            boolean canEditAdmin;
+                            boolean canRestrict;
+                            boolean editingAdmin;
+                            final TLRPC.ChannelParticipant channelParticipant;
+
+                            if (ChatObject.isChannel(currentChat)) {
+                                channelParticipant = ((TLRPC.TL_chatChannelParticipant) participant).channelParticipant;
+                                canEditAdmin = ChatObject.canAddAdmins(currentChat);
+                                allowKick = canRestrict = ChatObject.canBlockUsers(currentChat) && (!(channelParticipant instanceof TLRPC.TL_channelParticipantAdmin || channelParticipant instanceof TLRPC.TL_channelParticipantCreator) || channelParticipant.can_edit);
+                                editingAdmin = channelParticipant instanceof TLRPC.TL_channelParticipantAdmin;
+                            } else {
+                                allowKick = currentChat.creator || participant instanceof TLRPC.TL_chatParticipant && (ChatObject.canBlockUsers(currentChat) || participant.inviter_id == UserConfig.getInstance(currentAccount).getClientUserId());
+                                canEditAdmin = currentChat.creator;
+                                canRestrict = currentChat.creator;
+                                editingAdmin = participant instanceof TLRPC.TL_chatParticipantAdmin;
+                            }
+
+                            if (canEditAdmin) {
+                                items.add(editingAdmin ? LocaleController.getString("EditAdminRights", R.string.EditAdminRights) : LocaleController.getString("SetAsAdmin", R.string.SetAsAdmin));
+                                options.add(97);
+                            }
+                            if (canRestrict) {
+                                items.add(LocaleController.getString("ChangePermissions", R.string.ChangePermissions));
+                                options.add(98);
+                            }
+                            if (allowKick) {
+                                items.add(LocaleController.getString("KickFromGroup", R.string.KickFromGroup));
+                                options.add(99);
+                            }
+                        }
+                    }
                 }
             }
             if (options.isEmpty()) {
@@ -11557,6 +11630,10 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
         if (item != null) {
             item.setVisibility(View.VISIBLE);
         }
+        item = actionMode.getItem(forward_noquote);
+        if (item != null) {
+            item.setVisibility(View.VISIBLE);
+        }
         item = actionMode.getItem(delete);
         if (item != null) {
             item.setVisibility(View.VISIBLE);
@@ -11706,6 +11783,7 @@ private void processSelectedOption(int option) {
                 break;
             }
             case 2: {
+                noForwardQuote = false;
                 forwardingMessage = selectedObject;
                 forwardingMessageGroup = selectedObjectGroup;
                 Bundle args = new Bundle();
@@ -12084,6 +12162,34 @@ private void processSelectedOption(int option) {
                 builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                 showDialog(builder.create());
                 break;
+            } case 27: {
+                SendMessagesHelper.getInstance(currentAccount).sendMessage("/prpr", dialog_id, selectedObject, null, false, null, null, null);
+                break;
+            } case 94: {
+                ArrayList<MessageObject> messages =  new ArrayList<>();
+                messages.add(selectedObject);
+                forwardMessages(messages, false);
+                break;
+            } case 95: {
+                noForwardQuote = true;
+                forwardingMessage = selectedObject;
+                forwardingMessageGroup = selectedObjectGroup;
+                Bundle args = new Bundle();
+                args.putBoolean("onlySelect", true);
+                args.putInt("dialogsType", 3);
+                DialogsActivity fragment = new DialogsActivity(args);
+                fragment.setDelegate(this);
+                presentFragment(fragment);
+                break;
+            } case 97: {
+                doAdminActions(97);
+                break;
+            } case 98: {
+                doAdminActions(98);
+                break;
+            } case 99: {
+                doAdminActions(99);
+                break;
             }
         }
         selectedObject = null;
@@ -12134,7 +12240,7 @@ public void didSelectDialogs(DialogsActivity fragment, ArrayList<Long> dids, Cha
                 if (message != null) {
                     SendMessagesHelper.getInstance(currentAccount).sendMessage(message.toString(), did, null, null, true, null, null, null);
                 }
-                SendMessagesHelper.getInstance(currentAccount).sendMessage(fmessages, did);
+                forwardMessages(fmessages, noForwardQuote, did);
             }
             fragment.finishFragment();
         } else {
@@ -13125,6 +13231,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             } else if (position >= messagesStartRow && position < messagesEndRow) {
                 MessageObject message = messages.get(position - messagesStartRow);
                 View view = holder.itemView;
+                boolean fromUserBlocked = MessagesController.getInstance(currentAccount).blockedUsers.indexOfKey(message.getFromId()) >= 0 && ZuraConfig.ignoreBlocked;
 
                 if (view instanceof ChatMessageCell) {
                     final ChatMessageCell messageCell = (ChatMessageCell) view;
@@ -13267,6 +13374,9 @@ public void onAnimationEnd(Animator animation) {
                             }
                         });
                     }
+                    if(fromUserBlocked){
+                        messageCell.setVisibility(View.GONE);
+                    }
                 } else if (view instanceof ChatActionCell) {
                     ChatActionCell actionCell = (ChatActionCell) view;
                     actionCell.setMessageObject(message);
@@ -13929,4 +14039,124 @@ public void notifyItemRangeRemoved(int positionStart, int itemCount) {
                 new ThemeDescription(null, 0, null, null, null, attachAlertDelegate, Theme.key_dialogCameraIcon),
         };
     }
+
+    private void kickUser(int uid) {
+        if (uid != 0) {
+            MessagesController.getInstance(currentAccount).deleteUserFromChat(currentChat.id, MessagesController.getInstance(currentAccount).getUser(uid), chatInfo);
+        } else {
+            NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.closeChats);
+            if (AndroidUtilities.isTablet()) {
+                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats, -(long) currentChat.id);
+            } else {
+                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
+            }
+            MessagesController.getInstance(currentAccount).deleteUserFromChat(currentChat.id, MessagesController.getInstance(currentAccount).getUser(UserConfig.getInstance(currentAccount).getClientUserId()), chatInfo);
+            finishFragment();
+        }
+    }
+    private void openRightsEdit(int action, int user_id, TLRPC.ChatParticipant participant, TLRPC.TL_chatAdminRights adminRights, TLRPC.TL_chatBannedRights bannedRights) {
+        ChatRightsEditActivity fragment = new ChatRightsEditActivity(user_id, currentChat.id, adminRights, currentChat.default_banned_rights, bannedRights, action, true, false);
+        fragment.setDelegate((rights, rightsAdmin, rightsBanned) -> {
+            if (action == 0) {
+                if (participant instanceof TLRPC.TL_chatChannelParticipant) {
+                    TLRPC.TL_chatChannelParticipant channelParticipant1 = ((TLRPC.TL_chatChannelParticipant) participant);
+                    if (rights == 1) {
+                        channelParticipant1.channelParticipant = new TLRPC.TL_channelParticipantAdmin();
+                    } else {
+                        channelParticipant1.channelParticipant = new TLRPC.TL_channelParticipant();
+                    }
+                    channelParticipant1.channelParticipant.inviter_id = UserConfig.getInstance(currentAccount).getClientUserId();
+                    channelParticipant1.channelParticipant.user_id = participant.user_id;
+                    channelParticipant1.channelParticipant.date = participant.date;
+                    channelParticipant1.channelParticipant.banned_rights = rightsBanned;
+                    channelParticipant1.channelParticipant.admin_rights = rightsAdmin;
+                } else if (participant instanceof TLRPC.ChatParticipant) {
+                    TLRPC.ChatParticipant newParticipant;
+                    if (rights == 1) {
+                        newParticipant = new TLRPC.TL_chatParticipantAdmin();
+                    } else {
+                        newParticipant = new TLRPC.TL_chatParticipant();
+                    }
+                    newParticipant.user_id = participant.user_id;
+                    newParticipant.date = participant.date;
+                    newParticipant.inviter_id = participant.inviter_id;
+                    int index = chatInfo.participants.participants.indexOf(participant);
+                    if (index >= 0) {
+                        chatInfo.participants.participants.set(index, newParticipant);
+                    }
+                }
+            } else if (action == 1) {
+                if (rights == 0) {
+                    if (currentChat.megagroup && chatInfo != null && chatInfo.participants != null) {
+                        boolean changed = false;
+                        for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
+                            TLRPC.ChannelParticipant p = ((TLRPC.TL_chatChannelParticipant) chatInfo.participants.participants.get(a)).channelParticipant;
+                            if (p.user_id == participant.user_id) {
+                                if (chatInfo != null) {
+                                    chatInfo.participants_count--;
+                                }
+                                chatInfo.participants.participants.remove(a);
+                                changed = true;
+                                break;
+                            }
+                        }
+                        if (chatInfo != null && chatInfo.participants != null) {
+                            for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
+                                TLRPC.ChatParticipant p = chatInfo.participants.participants.get(a);
+                                if (p.user_id == participant.user_id) {
+                                    chatInfo.participants.participants.remove(a);
+                                    changed = true;
+                                    break;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        });
+        presentFragment(fragment);
+    }
+
+    private void doAdminActions(int option){
+        int action = 0;
+        switch (option){
+            case 97:
+                action = 0;
+                break;
+            case 98 :
+                action = 1;
+                break;
+            case 99 :
+                action = 2;
+                break;
+        }
+        if(action == 2){
+            kickUser(selectedObject.messageOwner.from_id);
+            return;
+        }
+        for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
+            TLRPC.ChatParticipant participant = chatInfo.participants.participants.get(a);
+            if (participant.user_id != selectedObject.messageOwner.from_id) {
+                continue;
+            }
+            final TLRPC.ChannelParticipant channelParticipant;
+            TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(participant.user_id);
+            if (ChatObject.isChannel(currentChat)) {
+                channelParticipant = ((TLRPC.TL_chatChannelParticipant) participant).channelParticipant;
+            } else {
+                channelParticipant = null;
+            }
+            if (channelParticipant instanceof TLRPC.TL_channelParticipantAdmin || participant instanceof TLRPC.TL_chatParticipantAdmin) {
+                AlertDialog.Builder builder2 = new AlertDialog.Builder(getParentActivity());
+                builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder2.setMessage(LocaleController.formatString("AdminWillBeRemoved", R.string.AdminWillBeRemoved, ContactsController.formatName(user.first_name, user.last_name)));
+                int finalAction = action;
+                builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> openRightsEdit(finalAction, user.id, participant, channelParticipant != null ? channelParticipant.admin_rights : null, channelParticipant != null ? channelParticipant.banned_rights : null));
+                builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                showDialog(builder2.create());
+            } else {
+                openRightsEdit(action, user.id, participant, channelParticipant != null ? channelParticipant.admin_rights : null, channelParticipant != null ? channelParticipant.banned_rights : null);
+            }
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/zuragram/android/MessageHelper.java b/TMessagesProj/src/main/java/org/zuragram/android/MessageHelper.java
new file mode 100644
index 000000000..93955c055
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/zuragram/android/MessageHelper.java
@@ -0,0 +1,150 @@
+package org.zuragram.android;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+
+public class MessageHelper {
+
+    private static volatile MessageHelper[] Instance = new MessageHelper[UserConfig.MAX_ACCOUNT_COUNT];
+    private int currentAccount;
+    private int reqId;
+    private int mergeReqId;
+    private int lastReqId;
+    private int messagesSearchCount[] = new int[]{0, 0};
+
+    public MessageHelper(int num) {
+        currentAccount = num;
+    }
+
+    public static MessageHelper getInstance(int num) {
+        MessageHelper localInstance = Instance[num];
+        if (localInstance == null) {
+            synchronized (MessageHelper.class) {
+                localInstance = Instance[num];
+                if (localInstance == null) {
+                    Instance[num] = localInstance = new MessageHelper(num);
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    public void deleteUserChannelHistoryWithSearch(final long dialog_id, final TLRPC.User user) {
+        deleteUserChannelHistoryWithSearch(dialog_id, user, false);
+    }
+
+    public void deleteUserChannelHistoryWithSearch(final long dialog_id, final TLRPC.User user, final boolean internal) {
+        boolean firstQuery = !internal;
+        if (reqId != 0) {
+            ConnectionsManager.getInstance(currentAccount).cancelRequest(reqId, true);
+            reqId = 0;
+        }
+        if (mergeReqId != 0) {
+            ConnectionsManager.getInstance(currentAccount).cancelRequest(mergeReqId, true);
+            mergeReqId = 0;
+        }
+        if (firstQuery) {
+            TLRPC.InputPeer inputPeer = MessagesController.getInstance(currentAccount).getInputPeer((int) dialog_id);
+            if (inputPeer == null) {
+                return;
+            }
+            final TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+            req.peer = inputPeer;
+            req.limit = 1;
+            req.q = "";
+            if (user != null) {
+                req.from_id = MessagesController.getInstance(currentAccount).getInputUser(user);
+                req.flags |= 1;
+            }
+            req.filter = new TLRPC.TL_inputMessagesFilterEmpty();
+            mergeReqId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            mergeReqId = 0;
+                            if (response != null) {
+                                TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                                messagesSearchCount[0] = res.count;
+                                FileLog.d("total " + String.valueOf(messagesSearchCount[0]));
+                                deleteUserChannelHistoryWithSearch(dialog_id, user, true);
+                            }
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
+        } else {
+            final TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+            req.peer = MessagesController.getInstance(currentAccount).getInputPeer((int) dialog_id);
+            if (req.peer == null) {
+                return;
+            }
+            req.limit = 100;
+            req.q = "";
+            req.offset_id = 0;
+            if (user != null) {
+                req.from_id = MessagesController.getInstance(currentAccount).getInputUser(user);
+                req.flags |= 1;
+            }
+            req.filter = new TLRPC.TL_inputMessagesFilterEmpty();
+            final int currentReqId = ++lastReqId;
+            reqId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (currentReqId == lastReqId) {
+                                reqId = 0;
+                                if (response != null) {
+                                    TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                                    messagesSearchCount[1] = res.messages.size();
+                                    for (int a = 0; a < res.messages.size(); a++) {
+                                        TLRPC.Message message = res.messages.get(a);
+                                        if (message instanceof TLRPC.TL_messageEmpty || message.action instanceof TLRPC.TL_messageActionHistoryClear || message instanceof TLRPC.TL_messageService) {
+                                            res.messages.remove(a);
+                                            a--;
+                                        }
+                                    }
+                                    ArrayList<Integer> ids = new ArrayList<>();
+                                    ArrayList<Long> random_ids = new ArrayList<>();
+                                    int channelId = 0;
+                                    for (int a = 0; a < res.messages.size(); a++) {
+                                        TLRPC.Message message = res.messages.get(a);
+                                        ids.add(message.id);
+                                        if (message.random_id != 0) {
+                                            random_ids.add(message.random_id);
+                                        }
+                                        channelId = message.to_id.channel_id;
+                                    }
+                                    MessagesController.getInstance(currentAccount).deleteMessages(ids, random_ids, null, channelId, true);
+                                    messagesSearchCount[0] = messagesSearchCount[0] - messagesSearchCount[1];
+                                    FileLog.d("found " + String.valueOf(messagesSearchCount[1]));
+                                    FileLog.d("after " + String.valueOf(messagesSearchCount[0]));
+                                    if (messagesSearchCount[0] > 0) {
+                                        try {
+                                            Thread.sleep(1000);
+                                        } catch (InterruptedException e) {
+                                            e.printStackTrace();
+                                        }
+                                        deleteUserChannelHistoryWithSearch(dialog_id, user, true);
+                                    }
+                                }
+                            }
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/res/values-zh-rCN/strings_zura.xml b/TMessagesProj/src/main/res/values-zh-rCN/strings_zura.xml
index c16177ea1..1ae36fa98 100644
--- a/TMessagesProj/src/main/res/values-zh-rCN/strings_zura.xml
+++ b/TMessagesProj/src/main/res/values-zh-rCN/strings_zura.xml
@@ -5,4 +5,8 @@
     <string name="AlwaysShowName">总是显示昵称而非备注</string>
     <string name="IgnoreBlocked">忽略渣滓们在群里说的话</string>
     <string name="SystemSettings">系统设置</string>
+    <string name="Hide">隐藏</string>
+    <string name="DeleteAllFromSelf">删除所有您发送的消息</string>
+    <string name="Repeat">复读</string>
+    <string name="NoQuoteForward">无引用转发</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-zh-rTW/strings_zura.xml b/TMessagesProj/src/main/res/values-zh-rTW/strings_zura.xml
index bbaa8c5d1..50b550c0f 100644
--- a/TMessagesProj/src/main/res/values-zh-rTW/strings_zura.xml
+++ b/TMessagesProj/src/main/res/values-zh-rTW/strings_zura.xml
@@ -5,4 +5,8 @@
     <string name="AlwaysShowName">總是顯示暱稱而非備註</string>
     <string name="IgnoreBlocked">忽略被封鎖的使用者在群組內的發言</string>
     <string name="SystemSettings">系統設定</string>
+    <string name="Hide">隱藏</string>
+    <string name="DeleteAllFromSelf">刪除所有您傳送的訊息</string>
+    <string name="Repeat">復讀</string>
+    <string name="NoQuoteForward">無引用轉發</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings_zura.xml b/TMessagesProj/src/main/res/values/strings_zura.xml
index 531a0c48a..5a3a1ef6f 100644
--- a/TMessagesProj/src/main/res/values/strings_zura.xml
+++ b/TMessagesProj/src/main/res/values/strings_zura.xml
@@ -5,4 +5,8 @@
     <string name="AlwaysShowName">Show name instead of contact name</string>
     <string name="IgnoreBlocked">Ignore blocked users in group</string>
     <string name="SystemSettings">System Settings</string>
+    <string name="Hide">Hide</string>
+    <string name="DeleteAllFromSelf">Delete all from yourself</string>
+    <string name="Repeat">Repeat</string>
+    <string name="NoQuoteForward">NoQuote forward</string>
 </resources>
\ No newline at end of file
