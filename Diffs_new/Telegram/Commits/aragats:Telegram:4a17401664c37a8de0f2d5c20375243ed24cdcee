diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index ed4433b9e..50cb913dd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -14,9 +14,11 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.text.Layout;
+import android.text.Spannable;
 import android.text.StaticLayout;
 import android.text.TextPaint;
 import android.text.TextUtils;
+import android.text.util.Linkify;
 import android.view.MotionEvent;
 
 import org.telegram.android.AndroidUtilities;
@@ -26,6 +28,7 @@
 import org.telegram.android.PostsController;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
+import org.telegram.messenger.dto.Image;
 import org.telegram.messenger.object.PostObject;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.utils.StringUtils;
@@ -40,6 +43,18 @@
     private static TextPaint timePaint;
     private static TextPaint countPaint;
 
+    //Text
+
+    private int textTop = AndroidUtilities.dp(65);
+    private int textLeft;
+
+    private static TextPaint textPaint;
+
+    private static int fontSize = AndroidUtilities.dp(16);
+
+    private PostObject.TextLayoutBlock block;
+
+    //Text
     private static Drawable checkDrawable;
     private static Drawable halfCheckDrawable;
     private static Drawable clockDrawable;
@@ -53,6 +68,7 @@
     private static Paint linePaint;
     private static Paint backPaint;
 
+
     private String currentPostId;
     private long lastMessageDate;
     private PostObject postObject;
@@ -62,6 +78,15 @@
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
 
+
+    //IMmge
+    private int photoWidth;
+    private int photoHeight;
+    private AvatarDrawable imageDrawable;
+    private ImageReceiver photoImage;
+    //
+    protected int backgroundWidth = 100;
+    //
     private CharSequence lastPrintString = null;
 
     public boolean useSeparator = false;
@@ -98,6 +123,7 @@
     private int countTop = AndroidUtilities.dp(39);
     private int countLeft;
     private int countWidth;
+    private int avatarLeft;
     private StaticLayout countLayout;
 
     private int avatarTop = AndroidUtilities.dp(10);
@@ -156,6 +182,19 @@ public PostCell(Context context) {
             groupDrawable = getResources().getDrawable(R.drawable.list_group);
             broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
             muteDrawable = getResources().getDrawable(R.drawable.mute_grey);
+
+
+            //Text
+
+            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            textPaint.setColor(0xff000000);
+            textPaint.linkColor = 0xff316f9f;
+//                textPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            textPaint.setTextSize(fontSize);
+
+//            textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
+
+            //Text
         }
 
         setBackgroundResource(R.drawable.list_selector);
@@ -163,8 +202,13 @@ public PostCell(Context context) {
         avatarImage = new ImageReceiver(this);
         avatarImage.setRoundRadius(AndroidUtilities.dp(26));
         avatarDrawable = new AvatarDrawable();
+
+        //PHOTO
+        photoImage = new ImageReceiver(this);
+        imageDrawable = new AvatarDrawable();
     }
-//TODO. I have 2 method for setting posts. setPostObject and setPost.
+
+    //TODO. I have 2 method for setting posts. setPostObject and setPost.
     public void setPostObject(PostObject postObject, int i, boolean server) {
         //TODO I should store id or object. And retrieve from Controller by id.
         currentPostId = postObject.getId();
@@ -193,17 +237,25 @@ public String getPostId() {
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
         avatarImage.onDetachedFromWindow();
+        photoImage.onDetachedFromWindow();
     }
 
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
         avatarImage.onAttachedToWindow();
+        photoImage.onAttachedToWindow();
     }
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(72) + (useSeparator ? 1 : 0));
+        int textHeight = 0;
+        if (this.block != null && this.block.textLayout != null) {
+            textHeight = this.block.textLayout.getHeight();
+        }
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(82) + textHeight + (useSeparator ? 1 : 0));
+
     }
 
     @Override
@@ -219,6 +271,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
     @Override
     public boolean onTouchEvent(MotionEvent event) {
+        //TODO use  backgroundWidth to detect press event
         if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
             if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
                 getBackground().setHotspot(event.getX(), event.getY());
@@ -325,7 +378,6 @@ public void buildLayout() {
         //  here was building name string
 
 
-
         if (nameString.length() == 0) {
             nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
         }
@@ -387,13 +439,15 @@ public void buildLayout() {
         }
 
         int messageWidth = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline + 16);
-        int avatarLeft;
+
         if (!LocaleController.isRTL) {
             messageLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
             avatarLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 13 : 9);
+            textLeft = AndroidUtilities.dp(9);
         } else {
             messageLeft = AndroidUtilities.dp(16);
             avatarLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.isTablet() ? 65 : 61);
+            textLeft = getMeasuredWidth() - AndroidUtilities.dp(61);
         }
         avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(52), AndroidUtilities.dp(52));
         if (drawError) {
@@ -487,8 +541,102 @@ public void buildLayout() {
                 }
             }
         }
+
+
+        //TEXT
+
+        // TODO It should be before creating Cell. somewhere in generating entities. Because it is static layout. in Cell we just find the position. !!
+        generateTextLayout(this.postObject);
+
+
+        /// TEXT
+        //Photo
+
+        if (this.postObject != null) {
+
+            if (AndroidUtilities.isTablet()) {
+                photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 1.0f); //0.7f
+            } else {
+                photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 1.0f); // here
+            }
+
+
+            //TODO my way of calculating imageWidth
+//            int imageMaxWidth = getMeasuredWidth() - AndroidUtilities.dp(12);
+//
+//            int imageMaxWidthOpt;
+//            if (AndroidUtilities.isTablet()) {
+//                imageMaxWidthOpt = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(12);
+//            } else {
+//                imageMaxWidthOpt = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(12);
+//            }
+//
+//            imageMaxWidth = Math.max(imageMaxWidthOpt, imageMaxWidth);
+            ///
+
+//            photoWidth = imageMaxWidth;
+
+
+            photoHeight = photoWidth + AndroidUtilities.dp(100);
+
+            if (photoWidth > AndroidUtilities.getPhotoSize()) {
+                photoWidth = AndroidUtilities.getPhotoSize();
+            }
+            if (photoHeight > AndroidUtilities.getPhotoSize()) {
+                photoHeight = AndroidUtilities.getPhotoSize();
+            }
+
+
+            if (postObject.getPreviewImage() != null) {
+                Image previewImage = this.postObject.getPreviewImage();
+
+                float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
+
+                if (previewImage.getSize() == 0) { // size of the file.
+                    previewImage.setSize(-1);
+                }
+
+                int w = (int) (previewImage.getWidth() / scale);
+                int h = (int) (previewImage.getHeight() / scale);
+                if (w == 0) {
+                    w = AndroidUtilities.dp(100);
+                }
+
+                if (h == 0) {
+                    h = AndroidUtilities.dp(100);
+                }
+                //TODO it is important part to prevent very high and small images!!
+//                if (h > photoHeight) {
+//                    float scale2 = h;
+//                    h = photoHeight;
+//                    scale2 /= h;
+//                    w = (int) (w / scale2);
+//                } else if (h < AndroidUtilities.dp(120)) {
+//                    h = AndroidUtilities.dp(120);
+//                    float hScale = (float) post.getHeight() / h;
+//                    if (post.getWidth() / hScale < photoWidth) {
+//                        w = (int) (post.getWidth() / hScale);
+//                    }
+//                }
+
+                photoWidth = w;
+                photoHeight = h;
+                backgroundWidth = w + AndroidUtilities.dp(12);
+
+//                photoImage.setImageCoords(avatarLeft, avatarTop + AndroidUtilities.dp(62) + this.block.textLayout.getHeight(), photoWidth, photoHeight);
+                photoImage.setImageCoords(0, avatarTop + AndroidUtilities.dp(62) + this.block.textLayout.getHeight(), photoWidth, photoHeight);
+
+
+                photoImage.setForcePreview(false);
+//                photoImage.setImage(post.getFullImage(), null, imageDrawable); // TODO fix it. Create drawable.
+
+                invalidate();
+            }
+        }
+
     }
 
+
     public void setPostSelected(boolean value) {
         if (isSelected != value) {
             invalidate();
@@ -548,8 +696,8 @@ public void update(int mask) {
         avatarImage.setImage(postObject.getVenuePreviewImageUrl(), null, avatarDrawable, null, 0);
 
         //Photo
-        // TODO null ? // Set image
-//        photoImage.setImage(postObject.getPreviewImageUrl(), null, imageDrawable); // TODO fix it. Create drawable.
+        // TODO null ?
+        photoImage.setImage(postObject.getPreviewImageUrl(), null, imageDrawable, null, 0); // TODO fix it. Create drawable.
 
         //Photo
 
@@ -640,5 +788,132 @@ protected void onDraw(Canvas canvas) {
         }
 
         avatarImage.draw(canvas);
+        //Photo
+        photoImage.draw(canvas);
+
+
+        // TEXT
+
+        canvas.save();
+        canvas.translate(textLeft, textTop);
+        try {
+            //TODO draw text message
+            this.block.textLayout.draw(canvas);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        canvas.restore();
+    }
+
+
+    //TODO utils method ?
+    // TODO It should be before creating Cell. somewhere in generating entities. Because it is static layout. in Cell we just find the position. !!
+    private void generateTextLayout(PostObject postObject) {
+        if (postObject == null || postObject.getMessage() == null || postObject.getMessage().length() == 0) {
+            return;
+        }
+
+        CharSequence messageText = postObject.getMessage();
+
+        messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+
+        if (messageText instanceof Spannable && containsUrls(postObject.getMessage())) {
+            if (postObject.getMessage().length() < 100) {
+                Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS | Linkify.PHONE_NUMBERS);
+            } else {
+                Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS);
+            }
+        }
+
+
+        int textMaxWidth;
+
+        if (!LocaleController.isRTL) {
+            textMaxWidth = getMeasuredWidth() - avatarLeft - AndroidUtilities.dp(14);
+        } else {
+            textMaxWidth = getMeasuredWidth() - avatarLeft - AndroidUtilities.dp(72);
+        }
+
+
+        int textMaxWidthOpt;
+        if (AndroidUtilities.isTablet()) {
+            textMaxWidthOpt = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(40);
+        } else {
+            textMaxWidthOpt = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(40);
+        }
+
+        textMaxWidth = Math.max(textMaxWidthOpt, textMaxWidth);
+
+        StaticLayout textLayout = null;
+
+        try {
+            textLayout = new StaticLayout(messageText, textPaint, textMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return;
+        }
+        this.block = new PostObject.TextLayoutBlock();
+
+        this.block.textLayout = textLayout;
+        this.block.textYOffset = 0;
+        this.block.charactersOffset = 0;
+
+
+    }
+
+
+    //TODO utils method ?
+    private boolean containsUrls(String message) {
+        if (message == null || message.length() < 3 || message.length() > 1024 * 20) {
+            return false;
+        }
+
+        boolean containsSomething = false;
+
+        int length = message.length();
+
+        int digitsInRow = 0;
+        int schemeSequence = 0;
+        int dotSequence = 0;
+
+        char lastChar = 0;
+
+        for (int i = 0; i < length; i++) {
+            char c = message.charAt(i);
+
+            if (c >= '0' && c <= '9') {
+                digitsInRow++;
+                if (digitsInRow >= 6) {
+                    return true;
+                }
+                schemeSequence = 0;
+                dotSequence = 0;
+            } else if (c == ':') {
+                if (schemeSequence == 0) {
+                    schemeSequence = 1;
+                } else {
+                    schemeSequence = 0;
+                }
+            } else if (c == '/') {
+                if (schemeSequence == 2) {
+                    return true;
+                }
+                if (schemeSequence == 1) {
+                    schemeSequence++;
+                } else {
+                    schemeSequence = 0;
+                }
+            } else if (c == '.') {
+                if (dotSequence == 0 && lastChar != ' ') {
+                    dotSequence++;
+                } else {
+                    dotSequence = 0;
+                }
+            } else if (c != ' ' && lastChar == '.' && dotSequence == 1) {
+                return true;
+            }
+            lastChar = c;
+        }
+        return false;
     }
 }
