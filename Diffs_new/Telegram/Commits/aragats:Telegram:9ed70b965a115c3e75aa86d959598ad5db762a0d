diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index d72e00cbe..66b3d5a05 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -60,12 +60,10 @@
     private HashMap<String, CacheImage> imageLoadingByUrl = new HashMap<>();
     private HashMap<String, CacheImage> imageLoadingByKeys = new HashMap<>();
     private HashMap<Integer, CacheImage> imageLoadingByTag = new HashMap<>();
-    private HashMap<String, ThumbGenerateInfo> waitingForQualityThumb = new HashMap<>();
     private HashMap<Integer, String> waitingForQualityThumbByTag = new HashMap<>();
     private LinkedList<HttpImageTask> httpTasks = new LinkedList<>();
     private DispatchQueue cacheOutQueue = new DispatchQueue("cacheOutQueue");
     private DispatchQueue cacheThumbOutQueue = new DispatchQueue("cacheThumbOutQueue");
-    private DispatchQueue thumbGeneratingQueue = new DispatchQueue("thumbGeneratingQueue");
     private DispatchQueue imageLoadQueue = new DispatchQueue("imageLoadQueue");
     private ConcurrentHashMap<String, Float> fileProgresses = new ConcurrentHashMap<>();
     private HashMap<String, ThumbGenerateTask> thumbGenerateTasks = new HashMap<>();
@@ -89,11 +87,6 @@
 
     private File telegramPath = null;
 
-    private class ThumbGenerateInfo {
-        private int count;
-        private TLRPC.FileLocation fileLocation;
-        private String filter;
-    }
 
     private class HttpFileTask extends AsyncTask<Void, Void, Boolean> {
 
@@ -1329,14 +1322,14 @@ public void clearMemory() {
     private void removeFromWaitingForThumb(Integer TAG) {
         String location = waitingForQualityThumbByTag.get(TAG);
         if (location != null) {
-            ThumbGenerateInfo info = waitingForQualityThumb.get(location);
-            if (info != null) {
-                info.count--;
-                if (info.count == 0) {
-                    waitingForQualityThumb.remove(location);
-                }
-            }
-            waitingForQualityThumbByTag.remove(TAG);
+//            ThumbGenerateInfo info = waitingForQualityThumb.get(location);
+//            if (info != null) {
+//                info.count--;
+//                if (info.count == 0) {
+//                    waitingForQualityThumb.remove(location);
+//                }
+//            }
+//            waitingForQualityThumbByTag.remove(TAG);
         }
     }
 
@@ -1420,17 +1413,6 @@ public void putImageToCache(BitmapDrawable bitmap, String key) {
         memCache.put(key, bitmap);
     }
 
-    private void generateThumb(int mediaType, File originalPath, TLRPC.FileLocation thumbLocation, String filter) {
-        if (mediaType != FileLoader.MEDIA_DIR_IMAGE && mediaType != FileLoader.MEDIA_DIR_VIDEO && mediaType != FileLoader.MEDIA_DIR_DOCUMENT || originalPath == null || thumbLocation == null) {
-            return;
-        }
-        String name = FileLoader.getAttachFileName(thumbLocation);
-        ThumbGenerateTask task = thumbGenerateTasks.get(name);
-        if (task == null) {
-            task = new ThumbGenerateTask(mediaType, originalPath, thumbLocation, filter);
-            thumbGeneratingQueue.postRunnable(task);
-        }
-    }
 
     private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiver, final String key, final String url, final String ext, final String httpLocation, final String filter, final int size, final boolean cacheOnly, final int thumb) {
         if (imageReceiver == null || url == null || key == null) {
@@ -1638,11 +1620,6 @@ private void fileDidLoaded(final String location, final File finalFile, final in
         imageLoadQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                ThumbGenerateInfo info = waitingForQualityThumb.get(location);
-                if (info != null) {
-                    generateThumb(type, finalFile, info.fileLocation, info.filter);
-                    waitingForQualityThumb.remove(location);
-                }
                 CacheImage img = imageLoadingByUrl.get(location);
                 if (img == null) {
                     return;
@@ -2104,12 +2081,4 @@ public static void saveMessageThumbs(TLRPC.Message message) {
         }
     }
 
-    public static void saveMessagesThumbs(ArrayList<TLRPC.Message> messages) {
-        if (messages == null || messages.isEmpty()) {
-            return;
-        }
-        for (TLRPC.Message message : messages) {
-            saveMessageThumbs(message);
-        }
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
deleted file mode 100644
index 5cd8ecce8..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ /dev/null
@@ -1,486 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-import java.io.RandomAccessFile;
-import java.io.File;
-import java.nio.channels.FileChannel;
-import java.util.ArrayList;
-import java.util.Scanner;
-
-public class FileLoadOperation {
-
-    private static class RequestInfo {
-        private long requestToken = 0;
-        private int offset = 0;
-        private TLRPC.TL_upload_file response = null;
-    }
-
-    private final static int stateIdle = 0;
-    private final static int stateDownloading = 1;
-    private final static int stateFailed = 2;
-    private final static int stateFinished = 3;
-
-    private final static int downloadChunkSize = 1024 * 32;
-    private final static int maxDownloadRequests = 3;
-
-    private int datacenter_id;
-    private TLRPC.InputFileLocation location;
-    private volatile int state = stateIdle;
-    private int downloadedBytes;
-    private int totalBytesCount;
-    private FileLoadOperationDelegate delegate;
-    private byte[] key;
-    private byte[] iv;
-
-    private int nextDownloadOffset = 0;
-    private ArrayList<RequestInfo> requestInfos = new ArrayList<>(maxDownloadRequests);
-    private ArrayList<RequestInfo> delayedRequestInfos = new ArrayList<>(maxDownloadRequests - 1);
-
-    private File cacheFileTemp;
-    private File cacheFileFinal;
-    private File cacheIvTemp;
-
-    private String ext;
-    private RandomAccessFile fileOutputStream;
-    private RandomAccessFile fiv;
-    private File storePath = null;
-    private File tempPath = null;
-    private boolean isForceRequest = false;
-
-    public interface FileLoadOperationDelegate {
-        void didFinishLoadingFile(FileLoadOperation operation, File finalFile);
-        void didFailedLoadingFile(FileLoadOperation operation, int state);
-        void didChangedLoadProgress(FileLoadOperation operation, float progress);
-    }
-
-    public FileLoadOperation(TLRPC.FileLocation photoLocation, String extension, int size) {
-        if (photoLocation instanceof TLRPC.TL_fileEncryptedLocation) {
-            location = new TLRPC.TL_inputEncryptedFileLocation();
-            location.id = photoLocation.volume_id;
-            location.volume_id = photoLocation.volume_id;
-            location.access_hash = photoLocation.secret;
-            location.local_id = photoLocation.local_id;
-            iv = new byte[32];
-            System.arraycopy(photoLocation.iv, 0, iv, 0, iv.length);
-            key = photoLocation.key;
-            datacenter_id = photoLocation.dc_id;
-        } else if (photoLocation instanceof TLRPC.TL_fileLocation) {
-            location = new TLRPC.TL_inputFileLocation();
-            location.volume_id = photoLocation.volume_id;
-            location.secret = photoLocation.secret;
-            location.local_id = photoLocation.local_id;
-            datacenter_id = photoLocation.dc_id;
-        }
-        totalBytesCount = size;
-        ext = extension != null ? extension : "jpg";
-    }
-
-    public FileLoadOperation(TLRPC.Video videoLocation) {
-        if (videoLocation instanceof TLRPC.TL_videoEncrypted) {
-            location = new TLRPC.TL_inputEncryptedFileLocation();
-            location.id = videoLocation.id;
-            location.access_hash = videoLocation.access_hash;
-            datacenter_id = videoLocation.dc_id;
-            iv = new byte[32];
-            System.arraycopy(videoLocation.iv, 0, iv, 0, iv.length);
-            key = videoLocation.key;
-        } else if (videoLocation instanceof TLRPC.TL_video) {
-            location = new TLRPC.TL_inputVideoFileLocation();
-            datacenter_id = videoLocation.dc_id;
-            location.id = videoLocation.id;
-            location.access_hash = videoLocation.access_hash;
-        }
-        totalBytesCount = videoLocation.size;
-        ext = ".mp4";
-    }
-
-    public FileLoadOperation(TLRPC.Audio audioLocation) {
-        if (audioLocation instanceof TLRPC.TL_audioEncrypted) {
-            location = new TLRPC.TL_inputEncryptedFileLocation();
-            location.id = audioLocation.id;
-            location.access_hash = audioLocation.access_hash;
-            datacenter_id = audioLocation.dc_id;
-            iv = new byte[32];
-            System.arraycopy(audioLocation.iv, 0, iv, 0, iv.length);
-            key = audioLocation.key;
-        } else if (audioLocation instanceof TLRPC.TL_audio) {
-            location = new TLRPC.TL_inputAudioFileLocation();
-            datacenter_id = audioLocation.dc_id;
-            location.id = audioLocation.id;
-            location.access_hash = audioLocation.access_hash;
-        }
-        totalBytesCount = audioLocation.size;
-        ext = ".ogg";
-    }
-
-    public FileLoadOperation(TLRPC.Document documentLocation) {
-        if (documentLocation instanceof TLRPC.TL_documentEncrypted) {
-            location = new TLRPC.TL_inputEncryptedFileLocation();
-            location.id = documentLocation.id;
-            location.access_hash = documentLocation.access_hash;
-            datacenter_id = documentLocation.dc_id;
-            iv = new byte[32];
-            System.arraycopy(documentLocation.iv, 0, iv, 0, iv.length);
-            key = documentLocation.key;
-        } else if (documentLocation instanceof TLRPC.TL_document) {
-            location = new TLRPC.TL_inputDocumentFileLocation();
-            datacenter_id = documentLocation.dc_id;
-            location.id = documentLocation.id;
-            location.access_hash = documentLocation.access_hash;
-        }
-        totalBytesCount = documentLocation.size;
-        ext = FileLoader.getDocumentFileName(documentLocation);
-        int idx;
-        if (ext == null || (idx = ext.lastIndexOf(".")) == -1) {
-            ext = "";
-        } else {
-            ext = ext.substring(idx);
-            if (ext.length() <= 1) {
-                ext = "";
-            }
-        }
-    }
-
-    public void setForceRequest(boolean forceRequest) {
-        isForceRequest = forceRequest;
-    }
-
-    public boolean isForceRequest() {
-        return isForceRequest;
-    }
-
-    public void setPaths(File store, File temp) {
-        storePath = store;
-        tempPath = temp;
-    }
-
-    public void start() {
-        if (state != stateIdle) {
-            return;
-        }
-        state = stateDownloading;
-        if (location == null) {
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                }
-            });
-            return;
-        }
-        Long mediaId = null;
-        String fileNameFinal;
-        String fileNameTemp;
-        String fileNameIv = null;
-        if (location.volume_id != 0 && location.local_id != 0) {
-            fileNameTemp = location.volume_id + "_" + location.local_id + "_temp." + ext;
-            fileNameFinal = location.volume_id + "_" + location.local_id + "." + ext;
-            if (key != null) {
-                fileNameIv = location.volume_id + "_" + location.local_id + ".iv";
-            }
-            if (datacenter_id == Integer.MIN_VALUE || location.volume_id == Integer.MIN_VALUE || datacenter_id == 0) {
-                cleanup();
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                    }
-                });
-                return;
-            }
-        } else {
-            fileNameTemp = datacenter_id + "_" + location.id + "_temp" + ext;
-            fileNameFinal = datacenter_id + "_" + location.id + ext;
-            if (key != null) {
-                fileNameIv = datacenter_id + "_" + location.id + ".iv";
-            }
-            if (datacenter_id == 0 || location.id == 0) {
-                cleanup();
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                    }
-                });
-                return;
-            }
-        }
-
-        cacheFileFinal = new File(storePath, fileNameFinal);
-        boolean exist = cacheFileFinal.exists();
-        if (exist && totalBytesCount != 0 && totalBytesCount != cacheFileFinal.length()) {
-            cacheFileFinal.delete();
-        }
-
-        if (!cacheFileFinal.exists()) {
-            cacheFileTemp = new File(tempPath, fileNameTemp);
-            if (cacheFileTemp.exists()) {
-                downloadedBytes = (int)cacheFileTemp.length();
-                nextDownloadOffset = downloadedBytes = downloadedBytes / 1024 * 1024;
-            }
-            if (fileNameIv != null) {
-                cacheIvTemp = new File(tempPath, fileNameIv);
-                try {
-                    fiv = new RandomAccessFile(cacheIvTemp, "rws");
-                    long len = cacheIvTemp.length();
-                    if (len > 0 && len % 32 == 0) {
-                        fiv.read(iv, 0, 32);
-                    } else {
-                        downloadedBytes = 0;
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                    downloadedBytes = 0;
-                }
-            }
-            try {
-                fileOutputStream = new RandomAccessFile(cacheFileTemp, "rws");
-                if (downloadedBytes != 0) {
-                    fileOutputStream.seek(downloadedBytes);
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-            if (fileOutputStream == null) {
-                cleanup();
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                    }
-                });
-                return;
-            }
-            Utilities.stageQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    if (totalBytesCount != 0 && downloadedBytes == totalBytesCount) {
-                        try {
-                            onFinishLoadingFile();
-                        } catch (Exception e) {
-                            delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                        }
-                    } else {
-                        startDownloadRequest();
-                    }
-                }
-            });
-        } else {
-            try {
-                onFinishLoadingFile();
-            } catch (Exception e) {
-                delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-            }
-        }
-    }
-
-    public void cancel() {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (state == stateFinished || state == stateFailed) {
-                    return;
-                }
-                state = stateFailed;
-                cleanup();
-                for (RequestInfo requestInfo : requestInfos) {
-                    if (requestInfo.requestToken != 0) {
-                        ConnectionsManager.getInstance().cancelRpc(requestInfo.requestToken, true, true);
-                    }
-                }
-                delegate.didFailedLoadingFile(FileLoadOperation.this, 1);
-            }
-        });
-    }
-
-    private void cleanup() {
-        try {
-            if (fileOutputStream != null) {
-                fileOutputStream.close();
-                fileOutputStream = null;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-
-        try {
-            if (fiv != null) {
-                fiv.close();
-                fiv = null;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        for (RequestInfo requestInfo : delayedRequestInfos) {
-            if (requestInfo.response != null) {
-                requestInfo.response.disableFree = false;
-                requestInfo.response.freeResources();
-            }
-        }
-        delayedRequestInfos.clear();
-    }
-
-    private void onFinishLoadingFile() throws Exception {
-        if (state != stateDownloading) {
-            return;
-        }
-        state = stateFinished;
-        cleanup();
-        if (cacheIvTemp != null) {
-            cacheIvTemp.delete();
-        }
-        if (cacheFileTemp != null) {
-            if (!cacheFileTemp.renameTo(cacheFileFinal)) {
-                cacheFileFinal = cacheFileTemp;
-            }
-        }
-        delegate.didFinishLoadingFile(FileLoadOperation.this, cacheFileFinal);
-    }
-
-    private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error) {
-        requestInfos.remove(requestInfo);
-        if (error == null) {
-            try {
-                if (downloadedBytes != requestInfo.offset) {
-                    if (state == stateDownloading) {
-                        delayedRequestInfos.add(requestInfo);
-                        requestInfo.response.disableFree = true;
-                    }
-                    return;
-                }
-
-                if (requestInfo.response.bytes == null || requestInfo.response.bytes.limit() == 0) {
-                    onFinishLoadingFile();
-                    return;
-                }
-                if (key != null) {
-                    Utilities.aesIgeEncryption(requestInfo.response.bytes.buffer, key, iv, false, true, 0, requestInfo.response.bytes.limit());
-                }
-                if (fileOutputStream != null) {
-                    FileChannel channel = fileOutputStream.getChannel();
-                    channel.write(requestInfo.response.bytes.buffer);
-                }
-                if (fiv != null) {
-                    fiv.seek(0);
-                    fiv.write(iv);
-                }
-                int currentBytesSize = requestInfo.response.bytes.limit();
-                downloadedBytes += currentBytesSize;
-                if (totalBytesCount > 0 && state == stateDownloading) {
-                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)downloadedBytes / (float)totalBytesCount));
-                }
-
-                for (int a = 0; a < delayedRequestInfos.size(); a++) {
-                    RequestInfo delayedRequestInfo = delayedRequestInfos.get(a);
-                    if (downloadedBytes == delayedRequestInfo.offset) {
-                        delayedRequestInfos.remove(a);
-                        processRequestResult(delayedRequestInfo, null);
-                        delayedRequestInfo.response.disableFree = false;
-                        delayedRequestInfo.response.freeResources();
-                        break;
-                    }
-                }
-
-                if (currentBytesSize != downloadChunkSize) {
-                    onFinishLoadingFile();
-                } else {
-                    if (totalBytesCount != downloadedBytes && downloadedBytes % downloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount > downloadedBytes) {
-                        startDownloadRequest();
-                    } else {
-                        onFinishLoadingFile();
-                    }
-                }
-            } catch (Exception e) {
-                cleanup();
-                delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                FileLog.e("tmessages", e);
-            }
-        } else {
-            if (error.text.contains("FILE_MIGRATE_")) {
-                String errorMsg = error.text.replace("FILE_MIGRATE_", "");
-                Scanner scanner = new Scanner(errorMsg);
-                scanner.useDelimiter("");
-                Integer val;
-                try {
-                    val = scanner.nextInt();
-                } catch (Exception e) {
-                    val = null;
-                }
-                if (val == null) {
-                    cleanup();
-                    delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                } else {
-                    datacenter_id = val;
-                    nextDownloadOffset = 0;
-                    startDownloadRequest();
-                }
-            } else if (error.text.contains("OFFSET_INVALID")) {
-                if (downloadedBytes % downloadChunkSize == 0) {
-                    try {
-                        onFinishLoadingFile();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                        cleanup();
-                        delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                    }
-                } else {
-                    cleanup();
-                    delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-                }
-            } else if (error.text.contains("RETRY_LIMIT")) {
-                cleanup();
-                delegate.didFailedLoadingFile(FileLoadOperation.this, 2);
-            } else {
-                if (location != null) {
-                    FileLog.e("tmessages", "" + location + " id = " + location.id + " access_hash = " + location.access_hash + " volume_id = " + location.local_id + " secret = " + location.secret);
-                }
-                cleanup();
-                delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
-            }
-        }
-    }
-
-    private void startDownloadRequest() {
-        if (state != stateDownloading || totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount || requestInfos.size() + delayedRequestInfos.size() >= maxDownloadRequests) {
-            return;
-        }
-        int count = 1;
-        if (totalBytesCount > 0) {
-            count = Math.max(0, maxDownloadRequests - requestInfos.size() - delayedRequestInfos.size());
-        }
-
-        for (int a = 0; a < count; a++) {
-            if (totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount) {
-                break;
-            }
-            boolean isLast = totalBytesCount <= 0 || a == count - 1 || totalBytesCount > 0 && nextDownloadOffset + downloadChunkSize >= totalBytesCount;
-            TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
-            req.location = location;
-            req.offset = nextDownloadOffset;
-            req.limit = downloadChunkSize;
-            nextDownloadOffset += downloadChunkSize;
-
-            final RequestInfo requestInfo = new RequestInfo();
-            requestInfos.add(requestInfo);
-            requestInfo.offset = req.offset;
-//            requestInfo.requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-//                @Override
-//                public void run(TLObject response, TLRPC.TL_error error) {
-//                    requestInfo.response = (TLRPC.TL_upload_file) response;
-//                    processRequestResult(requestInfo, error);
-//                }
-//            }, null, true, RPCRequest.RPCRequestClassDownloadMedia | (isForceRequest ? RPCRequest.RPCRequestClassForceDownload : 0), datacenter_id, isLast);
-        }
-    }
-
-    public void setDelegate(FileLoadOperationDelegate delegate) {
-        this.delegate = delegate;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 9c9aedd4b..0bcb55ece 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -8,14 +8,9 @@
 
 package org.telegram.messenger;
 
-import org.telegram.android.AndroidUtilities;
-
 import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.Semaphore;
 
 public class FileLoader {
 
@@ -42,23 +37,8 @@
     private HashMap<Integer, File> mediaDirs = null;
     private volatile DispatchQueue fileLoaderQueue = new DispatchQueue("fileUploadQueue");
 
-    private LinkedList<FileUploadOperation> uploadOperationQueue = new LinkedList<>();
-    private LinkedList<FileUploadOperation> uploadSmallOperationQueue = new LinkedList<>();
-    private LinkedList<FileLoadOperation> loadOperationQueue = new LinkedList<>();
-    private LinkedList<FileLoadOperation> audioLoadOperationQueue = new LinkedList<>();
-    private LinkedList<FileLoadOperation> photoLoadOperationQueue = new LinkedList<>();
-    private ConcurrentHashMap<String, FileUploadOperation> uploadOperationPaths = new ConcurrentHashMap<>();
-    private ConcurrentHashMap<String, FileUploadOperation> uploadOperationPathsEnc = new ConcurrentHashMap<>();
-    private ConcurrentHashMap<String, FileLoadOperation> loadOperationPaths = new ConcurrentHashMap<>();
-    private HashMap<String, Long> uploadSizes = new HashMap<>();
-
     private FileLoaderDelegate delegate = null;
 
-    private int currentLoadOperationsCount = 0;
-    private int currentAudioLoadOperationsCount = 0;
-    private int currentPhotoLoadOperationsCount = 0;
-    private int currentUploadOperationsCount = 0;
-    private int currentUploadSmallOperationsCount = 0;
 
     private static volatile FileLoader Instance = null;
 
@@ -95,170 +75,10 @@ public File getDirectory(int type) {
     }
 
 
-
-    public void cancelLoadFile(TLRPC.PhotoSize photo) {
-        cancelLoadFile(null, null, null, photo.location, null);
-    }
-
-    public void cancelLoadFile(TLRPC.FileLocation location, String ext) {
-        cancelLoadFile(null, null, null, location, ext);
-    }
-
-    private void cancelLoadFile(final TLRPC.Video video, final TLRPC.Document document, final TLRPC.Audio audio, final TLRPC.FileLocation location, final String locationExt) {
-        if (video == null && location == null && document == null && audio == null) {
-            return;
-        }
-        fileLoaderQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                String fileName = null;
-                if (video != null) {
-                    fileName = getAttachFileName(video);
-                } else if (location != null) {
-                    fileName = getAttachFileName(location, locationExt);
-                } else if (document != null) {
-                    fileName = getAttachFileName(document);
-                } else if (audio != null) {
-                    fileName = getAttachFileName(audio);
-                }
-                if (fileName == null) {
-                    return;
-                }
-                FileLoadOperation operation = loadOperationPaths.get(fileName);
-                if (operation != null) {
-                    loadOperationPaths.remove(fileName);
-                    if (audio != null) {
-                        audioLoadOperationQueue.remove(operation);
-                    } else if (location != null) {
-                        photoLoadOperationQueue.remove(operation);
-                    } else {
-                        loadOperationQueue.remove(operation);
-                    }
-                    operation.cancel();
-                }
-            }
-        });
-    }
-
-    public boolean isLoadingFile(final String fileName) {
-        final Semaphore semaphore = new Semaphore(0);
-        final Boolean[] result = new Boolean[1];
-        fileLoaderQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                result[0] = loadOperationPaths.containsKey(fileName);
-                semaphore.release();
-            }
-        });
-        try {
-            semaphore.acquire();
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-        return result[0];
-    }
-
-    private void checkDownloadQueue(final TLRPC.Audio audio, final TLRPC.FileLocation location, final String arg1) {
-        fileLoaderQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                loadOperationPaths.remove(arg1);
-                FileLoadOperation operation;
-                if (audio != null) {
-                    currentAudioLoadOperationsCount--;
-                    if (!audioLoadOperationQueue.isEmpty()) {
-                        operation = audioLoadOperationQueue.get(0);
-                        int maxCount = operation.isForceRequest() ? 3 : 1;
-                        if (currentAudioLoadOperationsCount < maxCount) {
-                            operation = audioLoadOperationQueue.poll();
-                            if (operation != null) {
-                                currentAudioLoadOperationsCount++;
-                                operation.start();
-                            }
-                        }
-                    }
-                } else if (location != null) {
-                    currentPhotoLoadOperationsCount--;
-                    if (!photoLoadOperationQueue.isEmpty()) {
-                        operation = photoLoadOperationQueue.get(0);
-                        int maxCount = operation.isForceRequest() ? 3 : 1;
-                        if (currentPhotoLoadOperationsCount < maxCount) {
-                            operation = photoLoadOperationQueue.poll();
-                            if (operation != null) {
-                                currentPhotoLoadOperationsCount++;
-                                operation.start();
-                            }
-                        }
-                    }
-                } else {
-                    currentLoadOperationsCount--;
-                    if (!loadOperationQueue.isEmpty()) {
-                        operation = loadOperationQueue.get(0);
-                        int maxCount = operation.isForceRequest() ? 3 : 1;
-                        if (currentLoadOperationsCount < maxCount) {
-                            operation = loadOperationQueue.poll();
-                            if (operation != null) {
-                                currentLoadOperationsCount++;
-                                operation.start();
-                            }
-                        }
-                    }
-                }
-            }
-        });
-    }
-
     public void setDelegate(FileLoaderDelegate delegate) {
         this.delegate = delegate;
     }
 
-    public static File getPathToMessage(TLRPC.Message message) {
-        if (message == null) {
-            return new File("");
-        }
-        if (message instanceof TLRPC.TL_messageService) {
-            if (message.action.photo != null) {
-                ArrayList<TLRPC.PhotoSize> sizes = message.action.photo.sizes;
-                if (sizes.size() > 0) {
-                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        return getPathToAttach(sizeFull);
-                    }
-                }
-            }
-        } else {
-            if (message.media instanceof TLRPC.TL_messageMediaVideo) {
-                return getPathToAttach(message.media.video);
-            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                return getPathToAttach(message.media.document);
-            } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
-                return getPathToAttach(message.media.audio);
-            } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                ArrayList<TLRPC.PhotoSize> sizes = message.media.photo.sizes;
-                if (sizes.size() > 0) {
-                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        return getPathToAttach(sizeFull);
-                    }
-                }
-            }
-        }
-        return new File("");
-    }
-
-    public static File getExistPathToAttach(TLObject attach) {
-        File path = getInstance().getDirectory(MEDIA_DIR_CACHE);
-        String fileName = getAttachFileName(attach);
-        File attachPath = new File(path, fileName);
-        if (attachPath.exists()) {
-            return attachPath;
-        }
-        return getPathToAttach(attach);
-    }
-
-    public static File getPathToAttach(TLObject attach) {
-        return getPathToAttach(attach, null, false);
-    }
 
     public static File getPathToAttach(TLObject attach, boolean forceCache) {
         return getPathToAttach(attach, null, forceCache);
@@ -312,83 +132,18 @@ public static File getPathToAttach(TLObject attach, String ext, boolean forceCac
         return new File(dir, getAttachFileName(attach, ext));
     }
 
-    public static TLRPC.PhotoSize getClosestPhotoSizeWithSize(ArrayList<TLRPC.PhotoSize> sizes, int side) {
-        return getClosestPhotoSizeWithSize(sizes, side, false);
-    }
-
-    public static TLRPC.PhotoSize getClosestPhotoSizeWithSize(ArrayList<TLRPC.PhotoSize> sizes, int side, boolean byMinSide) {
-        if (sizes == null || sizes.isEmpty()) {
-            return null;
-        }
-        int lastSide = 0;
-        TLRPC.PhotoSize closestObject = null;
-        for (TLRPC.PhotoSize obj : sizes) {
-            if (obj == null) {
-                continue;
-            }
-            if (byMinSide) {
-                int currentSide = obj.h >= obj.w ? obj.w : obj.h;
-                if (closestObject == null || side > 100 && closestObject.location != null && closestObject.location.dc_id == Integer.MIN_VALUE || obj instanceof TLRPC.TL_photoCachedSize || side > lastSide && lastSide < currentSide) {
-                    closestObject = obj;
-                    lastSide = currentSide;
-                }
-            } else {
-                int currentSide = obj.w >= obj.h ? obj.w : obj.h;
-                if (closestObject == null || side > 100 && closestObject.location != null && closestObject.location.dc_id == Integer.MIN_VALUE || obj instanceof TLRPC.TL_photoCachedSize || currentSide <= side && lastSide < currentSide) {
-                    closestObject = obj;
-                    lastSide = currentSide;
-                }
-            }
-        }
-        return closestObject;
-    }
-
-    public static String getDocumentFileName(TLRPC.Document document) {
-        if (document != null) {
-            if (document.file_name != null) {
-                return document.file_name;
-            }
-            for (TLRPC.DocumentAttribute documentAttribute : document.attributes) {
-                if (documentAttribute instanceof TLRPC.TL_documentAttributeFilename) {
-                    return documentAttribute.file_name;
-                }
-            }
-        }
-        return "";
-    }
-
     public static String getAttachFileName(TLObject attach) {
         return getAttachFileName(attach, null);
     }
 
     public static String getAttachFileName(TLObject attach, String ext) {
-        if (attach instanceof TLRPC.Video) {
-            TLRPC.Video video = (TLRPC.Video) attach;
-            return video.dc_id + "_" + video.id + "." + (ext != null ? ext : "mp4");
-        } else if (attach instanceof TLRPC.Document) {
-            TLRPC.Document document = (TLRPC.Document) attach;
-            String docExt = getDocumentFileName(document);
-            int idx;
-            if (docExt == null || (idx = docExt.lastIndexOf(".")) == -1) {
-                docExt = "";
-            } else {
-                docExt = docExt.substring(idx);
-            }
-            if (docExt.length() > 1) {
-                return document.dc_id + "_" + document.id + docExt;
-            } else {
-                return document.dc_id + "_" + document.id;
-            }
-        } else if (attach instanceof TLRPC.PhotoSize) {
+        if (attach instanceof TLRPC.PhotoSize) {
             TLRPC.PhotoSize photo = (TLRPC.PhotoSize) attach;
             if (photo.location == null) {
                 return "";
             }
             return photo.location.volume_id + "_" + photo.location.local_id + "." + (ext != null ? ext : "jpg");
-        } else if (attach instanceof TLRPC.Audio) {
-            TLRPC.Audio audio = (TLRPC.Audio) attach;
-            return audio.dc_id + "_" + audio.id + "." + (ext != null ? ext : "ogg");
-        } else if (attach instanceof TLRPC.FileLocation) {
+        }  else if (attach instanceof TLRPC.FileLocation) {
             TLRPC.FileLocation location = (TLRPC.FileLocation) attach;
             return location.volume_id + "_" + location.local_id + "." + (ext != null ? ext : "jpg");
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
deleted file mode 100644
index 01fe60f65..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ /dev/null
@@ -1,409 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-import android.app.Activity;
-import android.content.SharedPreferences;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-
-public class FileUploadOperation {
-    private int uploadChunkSize = 1024 * 32;
-    private String uploadingFilePath;
-    public int state = 0;
-    private byte[] readBuffer;
-    public FileUploadOperationDelegate delegate;
-    private long requestToken = 0;
-    private int currentPartNum = 0;
-    private long currentFileId;
-    private boolean isLastPart = false;
-    private long totalFileSize = 0;
-    private int totalPartsCount = 0;
-    private long currentUploaded = 0;
-    private int saveInfoTimes = 0;
-    private byte[] key;
-    private byte[] iv;
-    private byte[] ivChange;
-    private boolean isEncrypted = false;
-    private int fingerprint = 0;
-    private boolean isBigFile = false;
-    private String fileKey;
-    private int estimatedSize = 0;
-    private int uploadStartTime = 0;
-    private FileInputStream stream;
-    private MessageDigest mdEnc = null;
-    private boolean started = false;
-
-    public interface FileUploadOperationDelegate {
-        void didFinishUploadingFile(FileUploadOperation operation, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile, byte[] key, byte[] iv);
-        void didFailedUploadingFile(FileUploadOperation operation);
-        void didChangedUploadProgress(FileUploadOperation operation, float progress);
-    }
-
-    public FileUploadOperation(String location, boolean encrypted, int estimated) {
-        uploadingFilePath = location;
-        isEncrypted = encrypted;
-        estimatedSize = estimated;
-    }
-
-    public void start() {
-        if (state != 0) {
-            return;
-        }
-        state = 1;
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                startUploadRequest();
-            }
-        });
-    }
-
-    public void cancel() {
-        if (state != 1) {
-            return;
-        }
-        state = 2;
-        if (requestToken != 0) {
-            ConnectionsManager.getInstance().cancelRpc(requestToken, true);
-        }
-        delegate.didFailedUploadingFile(this);
-        cleanup();
-    }
-
-    private void cleanup() {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("uploadinfo", Activity.MODE_PRIVATE);
-        preferences.edit().remove(fileKey + "_time").
-                remove(fileKey + "_size").
-                remove(fileKey + "_uploaded").
-                remove(fileKey + "_id").
-                remove(fileKey + "_iv").
-                remove(fileKey + "_key").
-                remove(fileKey + "_ivc").commit();
-        try {
-            if (stream != null) {
-                stream.close();
-                stream = null;
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    protected void checkNewDataAvailable(final long finalSize) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                if (estimatedSize != 0 && finalSize != 0) {
-                    estimatedSize = 0;
-                    totalFileSize = finalSize;
-                    totalPartsCount = (int) (totalFileSize + uploadChunkSize - 1) / uploadChunkSize;
-                    if (started) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("uploadinfo", Activity.MODE_PRIVATE);
-                        storeFileUploadInfo(preferences);
-                    }
-                }
-                if (requestToken == 0) {
-                    startUploadRequest();
-                }
-            }
-        });
-    }
-
-    private void storeFileUploadInfo(SharedPreferences preferences) {
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.putInt(fileKey + "_time", uploadStartTime);
-        editor.putLong(fileKey + "_size", totalFileSize);
-        editor.putLong(fileKey + "_id", currentFileId);
-        editor.remove(fileKey + "_uploaded");
-        if (isEncrypted) {
-            editor.putString(fileKey + "_iv", Utilities.bytesToHex(iv));
-            editor.putString(fileKey + "_ivc", Utilities.bytesToHex(ivChange));
-            editor.putString(fileKey + "_key", Utilities.bytesToHex(key));
-        }
-        editor.commit();
-    }
-
-    private void startUploadRequest() {
-        if (state != 1) {
-            return;
-        }
-
-        TLObject finalRequest;
-
-        try {
-            started = true;
-            if (stream == null) {
-                File cacheFile = new File(uploadingFilePath);
-                stream = new FileInputStream(cacheFile);
-                if (estimatedSize != 0) {
-                    totalFileSize = estimatedSize;
-                } else {
-                    totalFileSize = cacheFile.length();
-                }
-                if (totalFileSize > 10 * 1024 * 1024) {
-                    isBigFile = true;
-                } else {
-                    try {
-                        mdEnc = MessageDigest.getInstance("MD5");
-                    } catch (NoSuchAlgorithmException e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                uploadChunkSize = (int) Math.max(32, (totalFileSize + 1024 * 3000 - 1) / (1024 * 3000));
-                if (1024 % uploadChunkSize != 0) {
-                    int chunkSize = 64;
-                    while (uploadChunkSize > chunkSize) {
-                        chunkSize *= 2;
-                    }
-                    uploadChunkSize = chunkSize;
-                }
-
-                uploadChunkSize *= 1024;
-                totalPartsCount = (int) (totalFileSize + uploadChunkSize - 1) / uploadChunkSize;
-                readBuffer = new byte[uploadChunkSize];
-
-                fileKey = Utilities.MD5(uploadingFilePath + (isEncrypted ? "enc" : ""));
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("uploadinfo", Activity.MODE_PRIVATE);
-                long fileSize = preferences.getLong(fileKey + "_size", 0);
-                uploadStartTime = (int)(System.currentTimeMillis() / 1000);
-                boolean rewrite = false;
-                if (estimatedSize == 0 && fileSize == totalFileSize) {
-                    currentFileId = preferences.getLong(fileKey + "_id", 0);
-                    int date = preferences.getInt(fileKey + "_time", 0);
-                    long uploadedSize = preferences.getLong(fileKey + "_uploaded", 0);
-                    if (isEncrypted) {
-                        String ivString = preferences.getString(fileKey + "_iv", null);
-                        String keyString = preferences.getString(fileKey + "_key", null);
-                        if (ivString != null && keyString != null) {
-                            key = Utilities.hexToBytes(keyString);
-                            iv = Utilities.hexToBytes(ivString);
-                            if (key != null && iv != null && key.length == 32 && iv.length == 32) {
-                                ivChange = new byte[32];
-                                System.arraycopy(iv, 0, ivChange, 0, 32);
-                            } else {
-                                rewrite = true;
-                            }
-                        } else {
-                            rewrite = true;
-                        }
-                    }
-                    if (!rewrite && date != 0) {
-                        if (isBigFile && date < uploadStartTime - 60 * 60 * 24) {
-                            date = 0;
-                        } else if (!isBigFile && date < uploadStartTime - 60 * 60 * 1.5f) {
-                            date = 0;
-                        }
-                        if (date != 0) {
-                            if (uploadedSize > 0) {
-                                currentUploaded = uploadedSize;
-                                currentPartNum = (int) (uploadedSize / uploadChunkSize);
-                                if (!isBigFile) {
-                                    for (int b = 0; b < currentUploaded / uploadChunkSize; b++) {
-                                        int read = stream.read(readBuffer);
-                                        int toAdd = 0;
-                                        if (isEncrypted && read % 16 != 0) {
-                                            toAdd += 16 - read % 16;
-                                        }
-                                        ByteBufferDesc sendBuffer = BuffersStorage.getInstance().getFreeBuffer(read + toAdd);
-                                        if (read != uploadChunkSize || totalPartsCount == currentPartNum + 1) {
-                                            isLastPart = true;
-                                        }
-                                        sendBuffer.writeRaw(readBuffer, 0, read);
-                                        if (isEncrypted) {
-                                            for (int a = 0; a < toAdd; a++) {
-                                                sendBuffer.writeByte(0);
-                                            }
-                                            Utilities.aesIgeEncryption(sendBuffer.buffer, key, ivChange, true, true, 0, read + toAdd);
-                                        }
-                                        sendBuffer.rewind();
-                                        mdEnc.update(sendBuffer.buffer);
-                                        BuffersStorage.getInstance().reuseFreeBuffer(sendBuffer);
-                                    }
-                                } else {
-                                    stream.skip(uploadedSize);
-                                    if (isEncrypted) {
-                                        String ivcString = preferences.getString(fileKey + "_ivc", null);
-                                        if (ivcString != null) {
-                                            ivChange = Utilities.hexToBytes(ivcString);
-                                            if (ivChange == null || ivChange.length != 32) {
-                                                rewrite = true;
-                                                currentUploaded = 0;
-                                                currentPartNum = 0;
-                                            }
-                                        } else {
-                                            rewrite = true;
-                                            currentUploaded = 0;
-                                            currentPartNum = 0;
-                                        }
-                                    }
-                                }
-                            } else {
-                                rewrite = true;
-                            }
-                        }
-                    } else {
-                        rewrite = true;
-                    }
-                } else {
-                    rewrite = true;
-                }
-                if (rewrite) {
-                    if (isEncrypted) {
-                        iv = new byte[32];
-                        key = new byte[32];
-                        ivChange = new byte[32];
-                        Utilities.random.nextBytes(iv);
-                        Utilities.random.nextBytes(key);
-                        System.arraycopy(iv, 0, ivChange, 0, 32);
-                    }
-                    currentFileId = Utilities.random.nextLong();
-                    if (estimatedSize == 0) {
-                        storeFileUploadInfo(preferences);
-                    }
-                }
-
-                if (isEncrypted) {
-                    try {
-                        java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
-                        byte[] arr = new byte[64];
-                        System.arraycopy(key, 0, arr, 0, 32);
-                        System.arraycopy(iv, 0, arr, 32, 32);
-                        byte[] digest = md.digest(arr);
-                        for (int a = 0; a < 4; a++) {
-                            fingerprint |= ((digest[a] ^ digest[a + 4]) & 0xFF) << (a * 8);
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            } else if (estimatedSize == 0) {
-                if (saveInfoTimes >= 4) {
-                    saveInfoTimes = 0;
-                }
-                if (isBigFile && currentUploaded % (1024 * 1024) == 0 || !isBigFile && saveInfoTimes == 0) {
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("uploadinfo", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    editor.putLong(fileKey + "_uploaded", currentUploaded);
-                    if (isEncrypted) {
-                        editor.putString(fileKey + "_ivc", Utilities.bytesToHex(ivChange));
-                    }
-                    editor.commit();
-                }
-                saveInfoTimes++;
-            }
-
-            if (estimatedSize != 0) {
-                long size = stream.getChannel().size();
-                if (currentUploaded + uploadChunkSize > size) {
-                    return;
-                }
-            }
-
-            int read = stream.read(readBuffer);
-            int toAdd = 0;
-            if (isEncrypted && read % 16 != 0) {
-                toAdd += 16 - read % 16;
-            }
-            ByteBufferDesc sendBuffer = BuffersStorage.getInstance().getFreeBuffer(read + toAdd);
-            if (read != uploadChunkSize || estimatedSize == 0 && totalPartsCount == currentPartNum + 1) {
-                isLastPart = true;
-            }
-            sendBuffer.writeRaw(readBuffer, 0, read);
-            if (isEncrypted) {
-                for (int a = 0; a < toAdd; a++) {
-                    sendBuffer.writeByte(0);
-                }
-                Utilities.aesIgeEncryption(sendBuffer.buffer, key, ivChange, true, true, 0, read + toAdd);
-            }
-            sendBuffer.rewind();
-            if (!isBigFile) {
-                mdEnc.update(sendBuffer.buffer);
-            }
-            if (isBigFile) {
-                TLRPC.TL_upload_saveBigFilePart req = new TLRPC.TL_upload_saveBigFilePart();
-                req.file_part = currentPartNum;
-                req.file_id = currentFileId;
-                if (estimatedSize != 0) {
-                    req.file_total_parts = -1;
-                } else {
-                    req.file_total_parts = totalPartsCount;
-                }
-                req.bytes = sendBuffer;
-                finalRequest = req;
-            } else {
-                TLRPC.TL_upload_saveFilePart req = new TLRPC.TL_upload_saveFilePart();
-                req.file_part = currentPartNum;
-                req.file_id = currentFileId;
-                req.bytes = sendBuffer;
-                finalRequest = req;
-            }
-            currentUploaded += read;
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-            delegate.didFailedUploadingFile(this);
-            cleanup();
-            return;
-        }
-//        requestToken = ConnectionsManager.getInstance().performRpc(finalRequest, new RPCRequest.RPCRequestDelegate() {
-//            @Override
-//            public void run(TLObject response, TLRPC.TL_error error) {
-//                requestToken = 0;
-//                if (error == null) {
-//                    if (response instanceof TLRPC.TL_boolTrue) {
-//                        currentPartNum++;
-//                        delegate.didChangedUploadProgress(FileUploadOperation.this, currentUploaded / (float) totalFileSize);
-//                        if (isLastPart) {
-//                            state = 3;
-//                            if (key == null) {
-//                                TLRPC.InputFile result;
-//                                if (isBigFile) {
-//                                    result = new TLRPC.TL_inputFileBig();
-//                                } else {
-//                                    result = new TLRPC.TL_inputFile();
-//                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
-//                                }
-//                                result.parts = currentPartNum;
-//                                result.id = currentFileId;
-//                                result.name = uploadingFilePath.substring(uploadingFilePath.lastIndexOf("/") + 1);
-//                                delegate.didFinishUploadingFile(FileUploadOperation.this, result, null, null, null);
-//                                cleanup();
-//                            } else {
-//                                TLRPC.InputEncryptedFile result;
-//                                if (isBigFile) {
-//                                    result = new TLRPC.TL_inputEncryptedFileBigUploaded();
-//                                } else {
-//                                    result = new TLRPC.TL_inputEncryptedFileUploaded();
-//                                    result.md5_checksum = String.format(Locale.US, "%32s", new BigInteger(1, mdEnc.digest()).toString(16)).replace(' ', '0');
-//                                }
-//                                result.parts = currentPartNum;
-//                                result.id = currentFileId;
-//                                result.key_fingerprint = fingerprint;
-//                                delegate.didFinishUploadingFile(FileUploadOperation.this, null, result, key, iv);
-//                                cleanup();
-//                            }
-//                        } else {
-//                            startUploadRequest();
-//                        }
-//                    } else {
-//                        delegate.didFailedUploadingFile(FileUploadOperation.this);
-//                        cleanup();
-//                    }
-//                } else {
-//                    delegate.didFailedUploadingFile(FileUploadOperation.this);
-//                    cleanup();
-//                }
-//            }
-//        }, null, true, RPCRequest.RPCRequestClassUploadMedia, ConnectionsManager.DEFAULT_DATACENTER_ID);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 674af6c5d..94f287824 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -2067,15 +2067,7 @@ private void checkProgress(int a, boolean animated) {
                     radialProgressViews[a].setBackgroundState(-1, animated);
                 }
             } else {
-                if (currentFileNames[a].endsWith("mp4")) {
-                    if (!FileLoader.getInstance().isLoadingFile(currentFileNames[a])) {
-                        radialProgressViews[a].setBackgroundState(2, false);
-                    } else {
-                        radialProgressViews[a].setBackgroundState(1, false);
-                    }
-                } else {
-                    radialProgressViews[a].setBackgroundState(0, animated);
-                }
+                radialProgressViews[a].setBackgroundState(0, animated);
                 Float progress = ImageLoader.getInstance().getFileProgress(currentFileNames[a]);
                 if (progress == null) {
                     progress = 0.0f;
