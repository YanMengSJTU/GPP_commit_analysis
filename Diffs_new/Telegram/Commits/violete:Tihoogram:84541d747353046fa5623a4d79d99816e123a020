diff --git a/TMessagesProj/README.md b/TMessagesProj/README.md
new file mode 100644
index 000000000..a62f87d15
--- /dev/null
+++ b/TMessagesProj/README.md
@@ -0,0 +1,38 @@
+## Socializer messenger for Android
+
+Socializer is an enhanced version of Telegram messenger. Its source code is forked from an open source project. (https://github.com/DrKLO/Telegram)
+This archive file contains the official source code for [Socializer App for Android](https://play.google.com/store/apps/details?id=org.telegram.socializer.messenger).
+Please read below guidelines of Telegram and then take a look at **src/main/java/org/telegram/socializer/messenger/BuildVars.java** and fill it with correct values.
+
+## Telegram messenger for Android
+
+[Telegram](http://telegram.org) is a messaging app with a focus on speed and security. It’s superfast, simple and free.
+This repo contains the official source code for [Telegram App for Android](https://play.google.com/store/apps/details?id=org.telegram.socializer.messenger).
+
+##Creating your Telegram Application
+
+We welcome all developers to use our API and source code to create applications on our platform.
+There are several things we require from **all developers** for the moment.
+
+1. [**Obtain your own api_id**](https://core.telegram.org/api/obtaining_api_id) for your application.
+2. Please **do not** use the name Telegram for your app — or make sure your users understand that it is unofficial.
+3. Kindly **do not** use our standard logo (white paper plane in a blue circle) as your app's logo.
+3. Please study our [**security guidelines**](https://core.telegram.org/mtproto/security_guidelines) and take good care of your users' data and privacy.
+4. Please remember to publish **your** code too in order to comply with the licences.
+
+### API, Protocol documentation
+
+Telegram API manuals: http://core.telegram.org/api
+
+MTproto protocol manuals: http://core.telegram.org/mtproto
+
+### Usage
+
+**Beware of using the dev branch and uploading it to any markets, in many cases it not will work as expected**.
+
+First of all, take a look at **src/main/java/org/telegram/messenger/BuildVars.java** and fill it with correct values.
+Import the root folder into your IDE (tested on Android Studio), then run project.
+
+### Localization
+
+We moved all translations to https://www.transifex.com/projects/p/telegram/. Please use it.
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index a08317c6c..b3f58503f 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -134,6 +134,10 @@
             android:windowSoftInputMode="adjustResize|stateHidden">
         </activity>
 
+        <activity android:name="sec.swap.WebAppSearchTermsActivity"
+                  android:label="@string/SWAPTerms"
+                  android:theme="@style/Theme.Swap.Activity"/>
+
         <!-- Adad -->
         <activity
             android:name="ir.adad.client.AdadActivity"
diff --git a/TMessagesProj/src/main/assets/terms_en.txt b/TMessagesProj/src/main/assets/terms_en.txt
new file mode 100644
index 000000000..79d792779
--- /dev/null
+++ b/TMessagesProj/src/main/assets/terms_en.txt
@@ -0,0 +1,358 @@
+﻿Samsung Service Terms and Conditions
+
+These terms and conditions ("Terms and Conditions") govern and regulate the use of the services and applications (each, a "Service", and collectively, the "Services") provided to users ("You", "Your" or "Users") by Samsung Electronics Co., Ltd. (“Samsung”) and/or its subsidiaries and affiliates (collectively, "Subsidiaries") and described in more detail at [http://swap.sec.net/search] (the "Website"). You may use the Services to locate, browse and use applications, data files and other content, some of which may be offered by Samsung or its Subsidiaries and some of which may be made available by third parties that are not affiliated with Samsung (collectively, "Third Party Product"). You agree that Samsung and its Subsidiaries are not responsible for any Third Party Product and make no representations or warranties relating to such Third Party Product, and You access such Third Party Product at your own risk. You also acknowledge and agree that additional policies, terms, conditions and licenses ("Special Terms") may govern your use of a particular Service or Third Party Product, in which case such Special Terms shall supplement these Terms and Conditions with respect to Your use of such Service or Third Party Product. You agree to abide by such other Special Terms, including where applicable representing that you are of sufficient legal age to use such Service or Third Party Product. In the event of a conflict or inconsistency between these Terms and Conditions and any such Special Terms, the Special Terms shall prevail with respect to Your use of that part or feature of the particular Service or Third Party Product giving rise to the conflict or inconsistency.
+Please read these Terms and Conditions carefully. Your use of any Samsung Service indicates that you have read, accepted and unconditionally agreed to these Terms and Conditions and any other applicable terms. The Privacy Policy for the Samsung Services is incorporated herein by Mobile Messenger which is providing Samsung Service. You may not Use the Services if You are a (a) person who is not of legal age to form a binding contract with Samsung or (b) person who is barred from receiving the Services under the laws of any country including the country in which You are a resident or from which You are using the Services. Your use of the Services includes the ability to enter into agreements and/or to make transactions electronically. YOU ACKNOWLEDGE THAT YOUR ELECTRONIC ASSENT CONSTITUTES YOUR AGREEMENT AND INTENT TO BE BOUND BY THESE TERMS AND CONDITIONS AND HONOR ALL TRANSACTIONS YOU ENTER INTO.
+How You may accept the Terms and Conditions,
+How Samsung may change the Terms and Conditions, and
+How You or Samsung may terminate Your account
+
+1. Acceptance of the Terms and Conditions
+
+1.1. Before You are permitted to Use the Services You are required to accept the Terms and Conditions and any Special Terms, as the case may be. Terms and Conditions and any Special Terms may be accepted by clicking the "accept" button if such button or function is available or present via the user interface for the respective Service. 
+
+1.2. You also accept the Terms and Conditions or any Special Terms when You access or actually start to use the Services. In this case You understand that You are bound by and Samsung will treat You as being bound by the Terms and Conditions from the moment You access or start using the Services.
+
+2. Changes to the Terms and Conditions
+
+2.1. Samsung reserves the right, in its sole discretion, to modify, update, add to, discontinue, remove or otherwise change any portion of these Terms and Conditions at any time.
+
+2.2. When Samsung amends these Terms and Conditions, we will revise the “last updated” date located at the bottom of these Terms and Conditions. For changes that we consider to be material, we will place a notice on the Website by revising the link on the homepage to read substantially as “Updated Terms and Conditions” for a reasonable amount of time. If you provide information to us or access or use any Samsung Service in any way after these Terms and Conditions have been changed, you will be deemed to have unconditionally consented and agreed to such changes. The most current version of these Terms and Conditions will be available on the Website and will supersede all previous versions.
+
+3. Termination
+
+3.1. As long as You comply with these Terms and Conditions, Samsung grants you a personal, non-exclusive, non-transferable, limited privilege to enter and use the Services.
+
+3.2. You close Your Account at any time.
+
+3.3. You agree that Samsung may stop (permanently or temporarily) providing any or all of the Services (or any features within the Services) to You or to users generally at Samsung’s sole discretion, without prior notice to you. 
+
+3.4. Without limiting the generality of the foregoing, Samsung is entitled to disable your account at any time and without observing any notice period if:
+a. You are in breach of these Terms and Conditions; 
+b. You have clearly demonstrated (regardless of whether directly or through Your actions or statements or otherwise) that You do not intend to comply with these Terms and Conditions;
+c. Samsung, (including Samsung's Subsidiaries) or any supplier or partner of Samsung providing the Services to or together with Samsung decide to terminate the provision of the Services or any parts thereof (either worldwide or in the country where You are a resident or from where You are Using the Services) or if any supplier or partner of Samsung decides to terminate the entire relationship with Samsung and regardless of the reason of such termination, including where Samsung or any supplier or partner of Samsung are of the opinion that the provision of the Services or parts thereof to You or to Samsung or together with Samsung are no longer commercially feasible; or 
+d. Samsung (including Samsung's Subsidiaries) or any supplier or partner of Samsung providing the Services to or together with Samsung are required by applicable law to terminate the provision of the Services or parts thereof (for example if due to changes in applicable law or due to court rulings or judgments the Services or parts thereof become or are considered unlawful).
+
+3.5. The termination of this Agreement shall have no prejudice to any rights, obligations and liabilities that You or Samsung have accrued or incurred during the term of this Agreement.
+How You may Use the Services and 
+How Samsung may use Your content or how You may use Samsung's content
+
+4. Provision of the Services and limitations of usage
+
+4.1. The Services are provided to You by Samsung and Samsung's Subsidiaries. 
+
+4.2. Unless otherwise specified in these Terms and Conditions or any applicable Special Terms, You are permitted to, and You agree that You will, (1) use the Services for personal and non-commercial use and purposes only, (2) not reproduce, duplicate, copy, sell, trade or resell any of the Services or parts thereof, (3) not remove any proprietary notice language corresponding to the Services, and (4) make no modifications to any such Services.
+
+4.3. You may not attempt to gain unauthorized access to any portion or feature of the Services, or any other systems or networks connected to the Services or to any Samsung server, or to any of the services offered on or through the Services, by hacking or any other illegitimate means.
+
+4.4. When You Use the Services You will at all times observe these Terms and Conditions and any applicable law or regulation in the relevant jurisdictions including the jurisdiction where You are a resident or from where You are using the Services.
+
+4.5. Samsung may at any time and in its sole discretion without prior warning or notice:
+a. change the Services or suspend and/or cease providing the Services or any part of the Services;
+b. disable or suspend Your Use of the Services including access to Your User account(s) and any files or other content contained in Your account(s) either temporarily or permanently; 
+c. set a limit on the number of transmissions You may send or receive through the Services or on the amount of storage space used for the provision of the Services or any part of the Services to You; and
+d. review, flag, filter, modify, refuse, reject, block access to or remove any or all Content from the Services. 
+
+4.6. From time to time, Samsung may discover a Third Party Product accessible through the Services that violates the legal agreements developers enter into with Samsung or it Subsidiaries, laws, regulations or other policies. You agree that in such an instance Samsung retains the right to make it non accessible any such Third Party Product from your device in its sole discretion. 
+
+4.7. You are not permitted to Use any of the Services (including any attempts to do so) other than through the interface made available to You by Samsung and You will not Use the Services (including any attempts to do so) through any automated tools (including software and/or hardware), functions, services or otherwise (including scripts or web crawlers).
+
+4.8. You will comply with and follow all instructions made available to You by Samsung in connection with the Services and You will not engage in any activity that may cause interference with or disruption to the Services or any servers, networks or other equipment connected to the Services.
+
+4.9. Some of the Services can be used or are particularly useful when used over mobile networks. You should be aware that Your network provider may charge You for access to its network, the duration of Your mobile phone's/ mobile device's connection to the network and the data volume used to use the Services or Third Party Products. You are entirely responsible to check with Your network provider whether any such costs may apply before using the Services or Third Party Products in this respect.
+
+5. Advertisements
+
+5.1. You agree that Samsung, as part of the Services, places or displays to You advertisements, promotion materials or other content and materials or products for promotional purposes.
+
+6. Software and software updates and updates to the Services
+Services originating from Samsung may communicate with Samsung servers from time to time to check for available updates, such as bug fixes, patches, enhanced functions, missing plug-ins and new versions (collectively, "Software Updates"). By using these Services and/or Third Party Products, You agree to use Software Updates. Such Software Updates may be in various forms and are generally provided for the purposes of improving the performance, security and reliability of the Services or the applicable Third Party Product or the device used to access the Services.
+
+7. Content provided in the Services and content rights
+
+7.1. All content that is made available in the Services or accessible as part of or by the use of the Services (including audio and sound files, data files, images, music, photographs, software, videos and written text) ("Content") is entirely the responsibility of the originator of such Content. The Content may include, without limitation, advertisements, promotional material, sponsored elements or other material.
+
+7.2. The Content may be protected by proprietary or intellectual property rights of third parties (such as partners, advertisers and sponsors or their agents who provide such Content to Samsung). You are not permitted to modify, rent, lease, loan, sell, distribute or create derivative works based on any Content (either in whole or in part) or to grant licenses in the Content.
+
+7.3. You understand that by using the Services You are exposed to the risk that You may find some Content offensive, indecent or objectionable and that any Use of the Services as regards such exposure is entirely at Your own risk.
+
+8. User Content and User Content License
+
+8.1. By uploading, transmitting, creating, posting, displaying or otherwise providing any information, materials, documents, media files or other content on or through the Services ("User Content") You hereby grant Samsung and Samsung's Subsidiaries an irrevocable, unlimited, worldwide, royalty-free, and non-exclusive license to copy, reproduce, adapt, modify, edit, distribute, translate, digitize, publish, publicly perform and publicly display the User Content ("User Content License") to the full extent necessary to provide the Services.
+
+8.2. The User Content License shall include a right for Samsung and Samsung's Subsidiaries to (a) perform all technical steps necessary to process and prepare the User Content for use in the Services, including any modification and/or adaption required to provide the Services to Users and/or to transmit or distribute the User Content over public networks and in media and (b) make available and sublicense the User Content to third parties for the use of the User Content in connection with the provision of the respective Services by these third parties.
+
+8.3. Samsung does not claim ownership of the User Content and You will retain any copyright and any other rights to any User Content provided by You on or through the Services.
+
+8.4. Any protection and enforcement of any intellectual property rights which exist or pertain to the User Content are entirely Your responsibility and Samsung is not obliged to protect and enforce the User Content on Your behalf.
+
+8.5. You are entirely responsible to backup Your User Content stored with Samsung or through the Services to another location outside the Services (e.g. by means of creating local copies or backups with specialized online backup services) to avoid loss of Your User Content and other data.
+
+8.6. If you send or post certain specific submissions at our request (e.g., via message boards or in connection with contests) or if you send us creative suggestions, ideas, notes, photographs, drawings, concepts, or any other information (each, a "Submission" and collectively, the "Submissions") despite our request that you not send us any unsolicited Submissions or other creative materials, the Submission will be treated as non-confidential and non-proprietary in each instance. "Submissions" are separate and apart from User Content. None of the Submissions shall be subject to any obligation of confidence on the part of Samsung, and Samsung shall not be liable for any use or disclosure of any Submissions. Any Submission may be used by Samsung without restriction for any purpose whatsoever, including, without limitation, reproduction, disclosure, transmission, publication, broadcast or posting, and You hereby irrevocably waive, release and give up any claim that any use of such Submission violates any of Your rights, including, without limitation, copyrights, trademarks, moral rights, privacy rights, proprietary or other property rights, publicity rights, or right to credit for the material or ideas. Samsung shall have and is irrevocably granted the right, but not the obligation, to reproduce, modify, adapt, publish, broadcast, license, perform, post, sell, translate, incorporate, create derivative works from, distribute and otherwise use the Submission in any and all media, now known or hereafter devised, throughout the universe, in perpetuity, without according You any compensation or credit. By submitting a Submission to any Samsung Service or Samsung, you represent that such Submission is original with you and does not violate or infringe upon the rights of any third parties, including, without limitation, any intellectual property rights and rights of publicity and/or privacy. Submissions will not be acknowledged or returned. You agree and understand that Samsung is not obligated to use any Submission you make to any Samsung Service or Samsung and you have no right to compel such use. You hereby acknowledge and agree that Your relationship with Samsung is not a confidential, fiduciary, or other special relationship, and that your decision to submit any material to Samsung does not place Samsung in a position that is any different from the position held by members of the general public with regard to your Submission. You understand and acknowledge that Samsung has wide access to ideas, stories, designs, and other literary materials, and that new ideas are constantly being submitted to it or being developed by Samsung’s own employees. Many ideas or stories may be competitive with, similar or identical to your Submission in theme, idea, plot, format or other respects. You acknowledge and agree that You will not be entitled to any compensation as a result of Samsung’s use of any such similar or identical material. Finally, you acknowledge that, with respect to any claim you may have relating to or arising out of a Samsung 's actual or alleged exploitation or use of any material You submit to any Samsung Service and/or Samsung, the damage, if any, thereby caused will not be irreparable or otherwise sufficient to entitle you to injunctive or other equitable relief or to in any way enjoin the production, distribution, exhibition or other exploitation of any production based on or allegedly based on the material, and Your rights and remedies in any such event shall be strictly limited to the right to recover damages, if any, in an action at law. Solely to avoid undue repetition, references to "Samsung" in this subparagraph shall be deemed to include Samsung Subsidiaries.
+
+9. Samsung Services License
+
+9.1. As between You and Samsung, Samsung owns all right, title and interest in and to the Services, including without limitation all applicable intellectual property rights or other proprietary rights in such Services, regardless of whether registered/legally secured or not.
+
+9.2. Except for the rights granted to You in these Terms and Conditions and any Special Terms, Samsung retains all rights in or pertaining to the Services.
+
+9.3. You are not permitted to (a) grant any other User or third party a license to Use the Services or otherwise to access Your account or the Services, (b) Use the Services to provide services to other Users or any other third parties or (c) otherwise assign, grant a sublicense in, or grant a security interest in or over the Samsung License or any rights under it, loan or lease the Services and/or the Samsung License, or otherwise transfer the Samsung License or any rights under it to any third party.
+
+9.4. You are not permitted to copy, edit, modify, alter or create a derivative work of, reverse engineer, decompile or otherwise attempt to extract the source code of Samsung Services (or any part of it), unless expressly permitted by Samsung in writing, or to the extent permitted under the laws applicable to You, and You will not permit or grant a license to any third party to do so.
+
+10. Trademarks
+
+10.1. You are not entitled to use any of Samsung's (including Samsung's Subsidiaries) trade names, trademarks, service marks, logos, domain names, or other distinctive brand features ("Samsung's Brands") without Samsung's prior written consent. To the extent that You are entitled to use Samsung's Brands under a separate written agreement with Samsung, such use is only permitted in accordance with such separate agreement.
+
+10.2. You are not permitted to remove, obscure, conceal, modify or otherwise alter any proprietary rights notices, signs, trademarks, service marks, trade names, logos or other marks of Samsung, Samsung's Subsidiaries or any third party (including copyright and trade mark notices) which pertain to, are affixed to or which are contained within the Services and You agree not to use any such signs, trademarks, service marks, trade names, logos or other marks of Samsung, Samsung's Subsidiaries or any third party in a way that is intended to, likely to or foreseeable to mislead others or cause confusion about the owner, license holder or authorized User, as the case may be, of such marks, names or logos.
+What You should know about your Registration Data and Account Data
+
+11. Privacy and protection of personal data
+
+11.1. See Privacy Policy of Mobile Messenger which provides a way to use WebApp Search to learn more about how Samsung protects and handles Your personal data and information when You use the Services.
+How You and Samsung are liable under these Terms and Conditions
+
+12. YOUR WARRANTIES AND REPRESENTATIONS
+
+12.1. YOU ARE ENTIRELY RESPONSIBLE FOR THE USER CONTENT PROVIDED BY YOU AND FOR ANY CONSEQUENCES ARISING IN CONNECTION WITH THAT USER CONTENT (INCLUDING ANY LOSS OR DAMAGE SUFFERED OR INCURRED BY SAMSUNG AND SAMSUNG'S SUBSIDIARIES). IN PARTICULAR, YOU WARRANT AND REPRESENT TO SAMSUNG THAT:
+A. YOU ARE THE OWNER OF ALL RIGHTS PERTAINING TO THE USER CONTENT OR OTHERWISE AUTHORIZED TO GRANT SAMSUNG THE USER CONTENT LICENSE;
+B. THE USER CONTENT WILL NOT INFRINGE ANY INTELLECTUAL PROPERTY OR OTHER THIRD PARTY RIGHTS; 
+C. THE USER CONTENT WILL NOT CONTAIN ANY MATERIAL WHICH IS HARMFUL, INACCURATE, PORNOGRAPHIC, ABUSIVE, OBSCENE, THREATENING, DEFAMATORY, OR WHICH IS OTHERWISE ILLEGAL OR WHICH DOES NOT COMPLY WITH APPLICABLE LAW OR SAMSUNG'S CONTENT GUIDELINES;
+D. THE USER CONTENT WILL NOT CONTAIN ANY VIRUSES OR OTHER HARMFUL SOFTWARE, CODE OR SIMILAR MEANS AND DEVICES WHICH COULD DAMAGE, HARM, DISABLE OR OTHERWISE IMPACT OR LIMIT THE FUNCTION AND PERFORMANCE OF THE SERVICES AND/OR ANY DEVICE ACCESSING SUCH USER CONTENT. REGARDLESS OF WHETHER THIS DEVICE BELONGS TO SAMSUNG OR ANY OTHER USER OR THIRD PARTY INCLUDING SERVER, NETWORKS NODES OR ANY SIMILAR EQUIPMENT;
+E. THE USER CONTENT WILL COMPLY AND CONFORM TO ANY AGE CLASSIFICATION RULES AND REQUIREMENTS (INCLUDING ACCURATE AND ADEQUATE CLASSIFICATION AND RATING OF ANY USER CONTENT, AS THE CASE MAY BE) UNDER THE LAWS OF ANY COUNTRY, INCLUDING THE COUNTRY IN WHICH YOU ARE A RESIDENT OR FROM WHICH YOU ARE USING THE SERVICES; AND
+F. THE USE OF THE USER CONTENT BY SAMSUNG OR SAMSUNG'S SUBSIDIARIES WILL NOT IMPOSE ANY OBLIGATION UPON SAMSUNG OR SAMSUNG'S SUBSIDIARIES TO PAY ANY KIND OF MONETARY CONTRIBUTION (INCLUDING LICENSE FEES, DUES OR OTHERWISE) TO ANY THIRD PARTY (IN PARTICULAR COLLECTING SOCIETIES).
+
+12.2. YOU AGREE TO INDEMNIFY AND HOLD HARMLESS SAMSUNG AND THE SAMSUNG SUBSIDIARIES FROM ANY LOSS, DAMAGE, LIABILITY OR EXPENSE INCURRED BY SAMSUNG AND THE SAMSUNG SUBSIDIARIES AS A RESULT OF ANY BREACH OF YOUR REPRESENTATIONS, WARRANTIES, COVENANTS OR OBLIGATIONS UNDER THESE TERMS AND CONDITIONS.
+
+13. SAMSUNG'S WARRANTIES AND REPRESENTATIONS
+
+13.1. UNLESS OTHERWISE EXPRESSLY STATED IN THIS AGREEMENT, SAMSUNG, THE SAMSUNG SUBSIDIARIES, AND ITS SUPPLIERS, PARTNERS AND/OR LICENSORS EXCLUDE ALL WARRANTIES AND CONDITIONS OF ANY KIND WHETHER EXPRESSLY OR IMPLIED. IN PARTICULAR BUT WITHOUT LIMITATION, SAMSUNG, THE SAMSUNG SUBSIDIARIES, AND ITS SUPPLIERS, PARTNERS AND/OR LICENSORS DO NOT WARRANT OR REPRESENT THAT:
+A. THE SERVICES ARE FIT FOR ANY PURPOSE OR MEET YOUR REQUIREMENTS OR ARE PROVIDED TO YOU WITHOUT ANY ERRORS OR DEFICIENCIES OR THAT THEY ARE IN COMPLIANCE WITH ANY QUALITY LEVELS, AS THE CASE MAY BE;
+B. THE SERVICES ARE AVAILABLE TO YOU AT ANY TIME AND PROVIDED TO YOU WITHOUT DISRUPTION, INTERRUPTION OR DELAY;
+C. THE SERVICES DO NOT INFRINGE ANY COPYRIGHT OR VIOLATE ANY LAWS WHETHER IN THE COUNTRY WHERE YOU ARE A RESIDENT OR ELSEWHERE IN THE WORLD;
+D. ANY INFORMATION (WHETHER ORAL OR WRITTEN) OBTAINED BY YOU FROM SAMSUNG OR AS A RESULT OF YOUR USE OF THE SERVICES (INCLUDING ANY MATERIALS OR PRODUCTS) WILL BE SUITABLE, ACCURATE, COMPLETE, OR RELIABLE; AND
+E. THAT ANY DEFICIENCIES IN THE SERVICES, INCLUDING ANY DEFECTS IN PERFORMANCE, OPERATION OR FUNCTIONALITY OF THE SERVICES OR ANY SOFTWARE PROVIDED TO YOU AS PART OF THE SERVICES WILL BE FIXED, CORRECTED OR OTHERWISE REMEDIED. 
+
+13.2. ANY DOCUMENTS OR MATERIAL (INCLUDING ANY SOFTWARE AND FIRMWARE UPDATES) DOWNLOADED, INSTALLED OR OTHERWISE OBTAINED THROUGH THE USE OF THE SERVICES ARE PROVIDED BY SAMSUNG "AS IS" AND AT YOUR OWN RISK. SAMSUNG IS NOT RESPONSIBLE FOR ANY DAMAGE TO YOUR MOBILE PHONE OR MOBILE PHONE'S, SOFTWARE, COMPUTER SYSTEM OR OTHER DEVICE OR DEVICE'S SOFTWARE OR ANY LOSS OF DATA THAT IS CAUSED BY OR RESULTS FROM THE DOWNLOAD AND/OR USE OF ANY SUCH DOCUMENTS AND/OR MATERIAL.
+
+14. YOUR LIABILITY
+
+14.1. YOU ARE ENTIRELY RESPONSIBLE FOR ANY BREACH OF YOUR OBLIGATIONS UNDER 
+A. THESE TERMS AND CONDITIONS; AND 
+B. ANY APPLICABLE LAW OR REGULATION IN THE RELEVANT JURISDICTIONS, INCLUDING THE JURISDICTION WHERE YOU ARE A RESIDENT OR FROM WHERE YOU ARE USING THE SERVICES
+AND FOR THE CONSEQUENCES OF ANY SUCH BREACH, INCLUDING ANY LOSS OR DAMAGE WHICH SAMSUNG OR ANY THIRD PARTY MAY INCUR OR SUFFER. SAMSUNG WILL HAVE NO RESPONSIBILITY TO YOU OR TO ANY THIRD PARTY IN RESPECT OF SUCH BREACH.
+
+15. SAMSUNG'S LIABILITY
+
+15.1. SUBJECT TO CLAUSE ‎17.3, SAMSUNG AND THE SAMSUNG SUBSIDIARIES ARE NOT LIABLE TO YOU, REGARDLESS OF THE LEGAL GROUNDS, IN PARTICULAR WHETHER IN CONTRACT, TORT (INCLUDING NEGLIGENCE) OR ANY THEORY OF LIABILITY, AND WHETHER OR NOT THE POSSIBILITY OF SUCH DAMAGE OR LOSSES HAS BEEN NOTIFIED TO SAMSUNG, FOR:
+A. ANY INDIRECT, INCIDENTAL, SPECIAL OR CONSEQUENTIAL DAMAGES;
+B. ANY LOSS OF INCOME, BUSINESS, ACTUAL OR ANTICIPATED PROFITS, OPPORTUNITY, GOODWILL OR REPUTATION (WHETHER DIRECT OR INDIRECT);
+C. ANY DAMAGE TO AND/OR CORRUPTION OR LOSS OF DATA (WHETHER DIRECT OR INDIRECT);
+D. ANY LOSS OR DAMAGE AS A RESULT OF: 
+I. ANY BREACH OF THE TERMS AND CONDITIONS OF THIS AGREEMENT OR ANY OTHER AGREEMENT OR CONTRACTUAL RELATIONSHIP BETWEEN SAMSUNG AND YOU WHICH IS ATTRIBUTABLE TO NEGLIGENCE ON THE PART OF SAMSUNG, THE SAMSUNG SUBSIDIARIES AND ITS SUPPLIERS, PARTNERS AND/OR LICENSORS; 
+II. ANY RELIANCE PLACED BY YOU ON THE SUITABILITY, ACCURACY, COMPLETENESS, RELIABILITY OR EXISTENCE OF ANY (A) SERVICES (INCLUDING ANY SOFTWARE, INFORMATION, DOCUMENTS, MATERIALS MADE AVAILABLE TO YOU AS PART OR IN COURSE OF THE USAGE OF THE SERVICES) OR (B) ADVERTISING OR AS A RESULT OF ANY RELATIONSHIP OR TRANSACTION BETWEEN YOU AND ANY ADVERTISER OR SPONSOR WHOSE ADVERTISING (INCLUDING ANY PROMOTIONAL MATERIAL) IS MADE AVAILABLE ON OR BY YOUR USE OF THE SERVICES; 
+III. ANY CHANGES, MODIFICATIONS, EXTENSIONS OR LIMITATIONS (INCLUDING ANY SUSPENSION OF YOUR USE OF THE SERVICES, ACCESS TO YOUR ACCOUNT AND ACCOUNT DATA OR YOUR REGISTRATION DATA) TO THE SERVICES, OR ANY PERMANENT OR TEMPORARY CESSATION IN THE PROVISION OF THE SERVICES (OR ANY PART OF THEM); OR
+IV. THE USE OF YOUR ACCOUNT DATA BY ANY OTHER PERSON THAN YOURSELF (REGARDLESS OF WHETHER WITH OR WITHOUT YOUR KNOWLEDGE). YOU ARE FULLY RESPONSIBLE AND LIABLE TO COMPENSATE SAMSUNG FOR ANY DAMAGE AND/OR LOSS INCURRED DUE TO THE USE OF YOUR ACCOUNT DATA BY SOMEONE ELSE.
+
+15.2. IN THE EVENT THAT SAMSUNG OR THE SAMSUNG SUBSIDIARIES ARE LIABLE FOR A BREACH OF THESE TERMS AND CONDITIONS, SAMSUNG'S LIABILITY SHALL BE LIMITED TO ACTUAL DAMAGES WHICH SAMSUNG MUST TYPICALLY EXPECT AT THE TIME OF THE CONCLUSION OF THIS AGREEMENT DUE TO THE CIRCUMSTANCES KNOWN AT THE TIME. 
+
+15.3. NOTHING IN THESE TERMS AND CONDITIONS SHALL EXCLUDE OR LIMIT SAMSUNG'S
+A. LIABILITY FOR DEATH, PERSONAL INJURY OR FRAUD OR IN ACCORDANCE WITH ANY PRODUCT LIABILITY ACT; AND
+B. WARRANTY OR LIABILITY FOR DAMAGES OR LOSSES WHICH MAY NOT BE LAWFULLY EXCLUDED OR LIMITED BY APPLICABLE LAW. IF THE LAWS IN THE USER'S JURISDICTION DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES, TERMS OR CONDITIONS OR THE LIMITATION OR EXCLUSION OF LIABILITY FOR LOSS OR DAMAGE CAUSED BY NEGLIGENCE, BREACH OF CONTRACT OR BREACH OF IMPLIED TERMS, OR INCIDENTAL OR CONSEQUENTIAL DAMAGES, ONLY THE LIMITATIONS WHICH ARE LAWFUL IN THAT JURISDICTION WILL APPLY TO THE USER AND SAMSUNG'S LIABILITY AND WARRANTY WILL BE LIMITED TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW.
+
+16. Force Majeure
+
+16.1. Samsung is not liable or responsible for any failure to perform, or delay in performance of any of Samsung's obligations under this Agreement that is caused by events outside Samsung's reasonable control ("Force Majeure Event"), in particular (without limitation) (a) unavailability of public or private telecommunication networks (b) acts, decrees, legislation, regulations or restrictions of any government or (c) strikes, lock-outs or other industrial action, civil commotion, riot, invasion, terrorist attacks or threats of terrorist attacks, war (whether declared or not) or any natural disaster. 
+
+16.2. Samsung's performance under this Agreement is deemed to be suspended for the period that Force Majeure Event continues, and Samsung will have an extension of time for performance for the duration of that period. 
+
+16.3. Samsung will use its reasonable efforts to bring the Force Majeure Event to a close or to find a solution by which Samsung's obligations under this Agreement may be performed despite the Force Majeure Event.
+
+17. Links to third party sites and other content
+
+17.1. The Services may contain hyper links to content resources and services of third parties, including other websites ("External Resources"). Samsung is not responsible for and has no control over the content (including advertisements, products and other materials) provided, made available and/or displayed to You under these External Resources and is not liable for any damage or loss incurred by You due to or as a result of the content (including any reliance by You on the availability, accuracy, applicability or completeness of the content) which is made available to You, provided to You or displayed to You under these External Resources. 
+
+17.2. You may from time to time and as a result of or through the Use of the Services purchase or avail Yourself of services, goods or software which is provided to You by a third party. Your use of such other services, goods or software may be subject to separate terms and conditions between You and the respective third party. This Agreement does not affect Your legal relationship with that third party and Samsung is not liable or responsible for any services, goods or software provided to You by any third party.
+What else You should know and understand
+
+18. Language of this Agreement
+Samsung may provide You with a translation of the English version of these Terms and Conditions. This translation is provided for Your convenience only. In the event of any conflict between the English language version and the translation version of these Terms and Conditions and to the extent permissible by applicable law, the English language version takes precedence over any translation version.
+
+19. Procedure for making claims and notices regarding infringement of intellectual property rights and other rights
+
+19.1. Samsung may respond to notices of alleged copyright infringement or violation of other laws in accordance with applicable law and may terminate, suspend or block access (either temporary or permanently) to accounts of Users who repeatedly infringe copyright laws or violate other applicable law.
+
+19.2. Any notices regarding any copyright infringement or violation of other laws by the Services, any content provided with or displayed in the Services or any User Content should be sent to [http://help.content.samsung.com].
+
+20. Confidentiality
+
+20.1. The Services may contain information which is confidential to Samsung including, without limitation, all information designated as confidential or recognisable as trade or business secrets or for other reasons recognisable or made available to You as confidential.
+
+20.2. Unless stated otherwise in these Terms and Conditions You will (a) keep such information confidential for an unlimited period of time and not disclose such information without Samsung's prior written consent and (b) neither record or otherwise utilise such information unless required for the purposes of these Terms and Conditions.
+
+20.3. Clause ‎22.1 shall not apply in the event that You are required to disclose information which is confidential to Samsung according to applicable law. In this case and to the extent permissible by applicable law, You will notify Samsung immediately of any disclosure of any information which is confidential to Samsung.
+
+21. General provisions
+
+21.1. Samsung will rely only on the written Terms and Conditions. Any representations, statements or agreements made or entered into elsewhere, whether directly or indirectly, written or oral or in advertising are not binding towards Samsung unless expressly confirmed in writing by Samsung to You.
+
+21.2. Samsung may provide You with notices (including notices relating to changes to the Agreement or termination of the Services or parts thereof) by postings on or via the Services. 
+
+21.3. If Samsung does not exercise or enforce any legal right or remedy which is set out in these Terms and Conditions or which Samsung has the benefit of under any applicable law, this will not be construed as a formal waiver of Samsung's rights or remedies and such rights or remedies will remain available to Samsung. 
+
+21.4. If any provision of these Terms and Conditions is held to be invalid, illegal or unenforceable (in whole or in part) as determined by a court of law having jurisdiction to decide on this matter, the validity, legality and enforceability of the remaining provisions shall not in any way be affected or impaired.
+
+21.5. Each of the Samsung's Subsidiaries is an intended third party beneficiary to these Terms and Conditions Agreement and shall be entitled to directly enforce and rely upon any provision of these Terms and Conditions which confers a benefit on (or rights in favour of) them. Subject to the foregoing, no other person shall be a third party beneficiary to these Terms and Conditions.
+
+21.6. You are not permitted to transfer, assign or otherwise dispose of these Terms and Conditions which is personal to You, or any of Your rights or obligations arising under these Terms and Conditions without the prior written consent of Samsung.
+
+21.7. This Agreement and Your relationship with Samsung under these Terms and Conditions shall be governed and construed in accordance with the laws of the jurisdiction where You are a resident, without regard to its conflict of law provisions. Subject to Samsung right to seek injunctive remedies (or an equivalent type of urgent legal relief) in any jurisdiction, You unconditionally consent and agree that: (1) any claim, dispute, or controversy (whether in contract, tort, or otherwise) you may have against the officers, directors and employees of Samsung and its Subsidiaries (all such individuals and entities collectively referred to herein as the “Samsung Entities”) arising out of, relating to, or connected in any way with the Services or the determination of the scope or applicability of this agreement to arbitrate, will be resolved exclusively by final and binding arbitration administered by JAMS or another mutually-acceptable alternative dispute resolution provider ("Arbitration Tribunal") and conducted before a sole arbitrator in accordance with the rules of the Arbitration Tribunal; (2) this arbitration agreement is made pursuant to a transaction involving interstate commerce in the United States, and shall be governed by the Federal Arbitration Act (“FAA”), 9 U.S.C. §§ 1-16; (3) the arbitrator’s decision shall be controlled by these Terms and Conditions and any of the other agreements referenced herein that the applicable User may have entered into in connection with the Services; (4) the arbitrator shall honor claims of privilege recognized at law; (5) there shall be no authority for any claims to be arbitrated on a class or representative basis, arbitration can decide only your and/or the applicable Samsung Entity’s individual claims; the arbitrator may not consolidate or join the claims of other persons or parties who may be similarly situated; (6) the arbitrator shall not have the power to award punitive damages against you or any Samsung Entity; (7) in the event that the administrative fees and deposits that must be paid to initiate arbitration against any Samsung Entity exceed $125 USD, and You are unable (or not required under the rules of the Arbitration Tribunal) to pay any fees and deposits that exceed this amount, Samsung agrees to pay them and/or forward them on Your behalf, subject to ultimate allocation by the arbitrator. In addition, if You are able to demonstrate that the costs of arbitration will be prohibitive as compared to the costs of litigation, Samsung will pay as much of Your filing and hearing fees in connection with the arbitration as the arbitrator deems necessary to prevent the arbitration from being cost-prohibitive; and (8) with the exception of subparts (5) and (6) above, if any part of this arbitration provision is deemed to be invalid, unenforceable or illegal, or otherwise conflicts with the rules of the Arbitration Tribunal, then the balance of this arbitration provision shall remain in effect and shall be construed in accordance with its terms as if the invalid, unenforceable, illegal or conflicting provision were not contained herein. If, however, subpart (5) or subpart (6) is found to be invalid, unenforceable or illegal, then if Samsung so elects, the entirety of this arbitration provision shall be null and void, and neither You nor Samsung shall be entitled to arbitrate their dispute.
+
+
+
+< Samsung WebApp Search Terms and Conditions for Users >
+
+1. Your Use of Samsung Services
+Your use of the Samsung WebApp Search website at swap.sec.net/search and any application, software, services, websites and other related services provided by us or any third party designated by us, including without limitation and services powered by Samsung WebApp Search (collectively, “Services”, excluding any application, software or services provided to you by Samsung under a separate written agreement) is subject to the terms and conditions set out below (collectively, the “Terms”).
+“Samsung” means Samsung Electronics Co., Ltd, and Samsung Affiliated Companies, as defined in Section 14.5. You may contact us through the Help menu of the Store.
+By using the Service, you can purchase, access and download the content and software applications available in the Store (“Application(s)”), including updates, either at no charge or for the price indicated. Applications available in the Store may be provided by third parties or Samsung. If you purchase a third party Application, you will enter into a contract directly with the third party Application provider, not Samsung.
+
+2. Accepting the Terms
+
+2.1 PLEASE READ THESE TERMS CAREFULLY. THESE TERMS CONSTITUTE A BINDING LEGAL AGREEMENT BETWEEN YOU AND SAMSUNG RELATING TO YOUR USE OF THE STORE AND THE SERVICES. In order to use the Services, you must first agree to the Terms. If you do not accept the Terms, you may not use the Services. 
+
+2.2 Samsung may modify these Terms from time to time. If you continue to use the Service after such modification, you will be deemed to have read, understood and unconditionally agreed to such changes. 
+
+2.3 You may not use the Services or provide us with personal information if: (a) you are under the age of 18 or under the age of majority in your jurisdiction; however, if you are between 13 and 18 (or the age of majority in your jurisdiction) and you have obtained the permission from your parent or legal guardian for your use of the Services, and your parent or legal guardian agrees to these Terms on your behalf, you may use the Store or Services provided you comply with Section 2.4 below), (b) you are a person barred from receiving the Services under the applicable laws of the jurisdiction in which you are a resident or from which you use the Services, or (c) you are in a country or location to which Samsung does not provide the Services.
+
+2.4 If you are between the ages of 13 and 18 (or the age of majority in your jurisdiction), before you use the Services, Samsung may ask you to confirm that you have obtained the permission of your parent or legal guardian, and that they have agreed to these Terms on your behalf. Even if Samsung does not do this, if you use the Services, you are representing the foregoing is true.
+
+3. Service Territory 
+The Service is made available only in certain countries and/or territories, at Samsung’s sole discretion. If you do not reside in one of these countries or territories, you may not use the Services. Samsung may use certain technologies to verify such compliance.
+
+4. Privacy 
+Samsung respects your privacy. In order to make the Services available to you and process the transactions made by you, Samsung may collect certain information and personal data from you, and use such information and data in accordance with our Privacy Policy. Samsung may update the Privacy Policy from time to time, so please periodically review the Privacy Policy. 
+
+5. License of Application
+
+5.1 The Applications and any other content made available to you through the Services are licensed, not sold, to you. Your license to each Application you obtain through the Service is subject to the applicable end user license agreement or other applicable end user terms of use. All rights not expressly granted to you are hereby reserved. 
+
+5.2 You acknowledge that your license of each third party Application through the Services is governed by a separate agreement between you and the third party Application provider only, and the third party Application provider is solely responsible for (a) the licensed third party Application, (b) the content and functionalities therein, (c) any warranties provided, and (d) any claims you may have relating to or your use of such third party Application. You acknowledge that Samsung is (i) acting solely as a distributor in providing the third party Application to you, (ii) is not a party to such license, and (iii) is not responsible for the third party Application, the content and functionalities therein, or any warranties or claims you may have relating to or your use of the third party Application. 
+
+5.3 The Services makes available Applications to end user customers for non-commercial uses only. You warrant and represent that you will use the Application only on your devices for your personal use. Applications may be used any number of times and to a number of your devices. You also acknowledge that: (a) (a) not all of your devices, regardless of whether it is the same platform or not, may qualify for multiple using.
+
+6. System Requirements 
+Use of the Services requires a device which is compatible with the Services, and may require a device such as a computer, Internet access (fees may apply), and certain software (fees may apply). Because use of the Services involves hardware, software and Internet access, your ability to use the Services may be affected by the performance of these factors. High speed Internet access is strongly recommended. You acknowledge and agree that such system requirements, which may change from time to time, are solely your responsibility.
+
+7. Proprietary Rights 
+
+7.1 Samsung (and Samsung’s licensors, as applicable) owns all rights, title and interest in and to the Services, including all associated intellectual property rights, whether registered or not, and wherever in the world such rights may exist. 
+
+7.2 Nothing in these Terms gives you a right to use any of Samsung’s trade names, trademarks, service marks, logos, domain names, and other distinctive brand features. 
+
+7.4 You agree that you shall not remove, obscure, or alter any proprietary rights notices (including copyright and trade mark notices) which may be affixed to or contained within the Services or Applications. 
+
+8. Software updates and availability of Services
+
+8.1 The Services may automatically update WebApp Search from Samsung from time to time. These updates may improve, enhance and further develop the Services and may take the form of bug fixes, enhanced functions, new software modules or completely new versions. You agree to use and allow Samsung to provide such updates to you as part of your use of the Services.
+
+8.2 Samsung reserves the right, at its sole discretion, to modify the Services at any time, with or without notice to you. The Services may not be available at all times, such as during maintenance breaks. Samsung may decide, at its sole discretion, to suspend or terminate the Services (or any part thereof) at any time. 
+
+9. Termination 
+
+9.1 These Terms will continue to apply until terminated by you or by Samsung in accordance with the terms herein. 
+
+9.2 Samsung may, at any time and for any reason, terminate your access to the Services without notice.  
+
+10. Disclaimers and Limitation of Liability
+
+10.1 Third Party Websites and Content. The Services may include links to other websites and/or content. Samsung has no control over, and no responsibility or liability for, websites and content which are not provided by Samsung.
+
+10.2 Disclaimers. THE SERVICES ARE PROVIDED “AS IS”, "WHERE IS" AND “AS AVAILABLE” AND WITHOUT WARRANTIES OF ANY KIND. SAMSUNG AND ITS LICENSORS MAKE NO REPRESENTATIONS OR WARRANTIES OR GUARANTEES OF ANY KIND OR NATURE, WHETHER EXPRESS OR IMPLIED, REGARDING THE SERVICES, AND TO THE EXTENT PROHIBITED BY LAW, SPECIFICALLY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. WITHOUT LIMITING THE PREVIOUS DISCLAIMER, SAMSUNG AND ITS LICENSORS DO NOT REPRESENT, WARRANT OR GUARANTEE THAT THE SERVICE WILL (I) BE COMPATIBLE WITH YOUR HARDWARE OR SOFTWARE, (II) OPERATE IN AN UNINTERRUPTED, TIMELY, SECURE OR ERROR-FREE MANNER, (III) WILL ALWAYS BE AVAILABLE OR FREE FROM ALL HARMFUL COMPONENTS OR ERRORS, INCLUDING BUT NOT LIMITED TO VIRUSES, INTERFERENCES, CORRUPTION OR OTHER SECURITY INSTRUCTIONS, OR (IV) WILL BE SECURE OR IMMUNE (INCLUDING THE CONTENT DELIVERED TO YOU OR THE INFORMATION YOU PROVIDED) FROM HACKING OR OTHER UNAUTHORIZED ACCESS.
+
+10.3 Limitation of Liability. TO THE EXTENT PROHIBITED BY LAW, IN NO EVENT SHALL SAMSUNG OR ITS LICENSORS BE LIABLE TO YOU FOR ANY INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL, EXEMPLARY, PUNITIVE DAMAGES OR LOST PROFITS, EVEN IF SAMSUNG HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION WILL APPLY REGARDLESS OF THE THEORY OF LIABILITY, WHETHER FRAUD, MISREPRESENTATION, BREACH OF CONTRACT, NEGILIGENCE, PERSONAL INJURY, PRODUCT LIABILITY, INFRINGEMENT OR ANY OTHER THEORY, REGARDLESS OF WHETHER OR NOT SAMSUNG HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION AND WAIVER ALSO APPLIES TO ANY CLAIM YOU MAY BRING AGAINST ANY OTHER PARTY TO THE EXTENT THAT SAMSUNG WOULD BE REQUIRED TO INDEMNIFY SUCH PARTY FOR ANY CLAIM. IN NO EVENT SHALL SAMSUNG’S AGGREGRATE LIABLITY TO YOU UNDER THIS AGREEMENT EXCEED THE PURCHASE PRICE OF THE APPLICABLE APPLICATION. 
+
+11. Indemnification
+You will indemnify, release and hold harmless Samsung, its licensors, and all officers, directors, agents and employees of Samsung and its licensors, and any party acting on Samsung’s behalf, from and against any and all third party claims, actions, liabilities, losses, damages, judgments, costs and expenses, including reasonable attorneys’ fees arising out of (i) any use of the Services by you or by any person that you allow to use the Services not in accordance with these Terms, (ii) any breach of these Term by you or by any person that you allow to use the Services or (iii) any violation of any laws, regulations or the rights of any third party by you or by any person that you allow to use the Services. 
+
+12. Copyright Protection 
+Samsung will respond to notices of alleged copyright infringement and may terminate the accounts of alleged infringers. If you believe a third party is infringing your copyrights, please contact us through the Help menu of the Store.
+
+13. Advertisements 
+Some of the Services are supported by advertising revenue and may display advertisements and promotions. As consideration for access to and use of the Services, you agree that Samsung may place advertising on the Services at its sole discretion.
+
+14. General Legal Terms 
+
+14.1 These Terms and all other terms and policies referred to herein constitute the entire legal agreement between you and Samsung governing your use of the Services and supersede any prior agreements between you and Samsung relating to the Services, excluding any application, software and services which Samsung may provide to you under a separate written agreement. 
+
+14.2 You agree that Samsung may provide you with notices, including those regarding changes to these Terms, by postings on the Services. 
+
+14.3 You agree that if Samsung does not exercise or enforce any rights or remedy which is contained in the Terms or which Samsung has at law or in equity, such omission will not be taken to be a waiver of any or all such rights and remedies, and that those rights and remedies will remain available to Samsung. 
+
+14.4 If any court of law with competent jurisdiction rules that any provision of these Terms is invalid, such provision will be removed from the Terms without affecting the rest of the Terms. The remaining provisions of the Terms will continue to be valid and enforceable. 
+
+14.5 You acknowledge and agree that each Samsung Affiliated Company shall be third party beneficiaries to the Terms and shall be entitled to directly enforce, and rely upon any provision of these Terms, which confer a benefit on or rights in favor of each Samsung Affiliated Company. Other than the foregoing, no other person or company shall be third party beneficiaries hereunder. For the purposes of herein, an “Affiliated Company” of Samsung is any company, corporation, firm, partnership or other entity that controls , is controlled by, or is under common control with Samsung; the terms “controls” and “controlled” mean the ability to direct the management of the relevant entity.
+
+14.6 You may not transfer, assign, charge or otherwise dispose of these Terms, or any of your rights or obligations arising under these Terms. Samsung may transfer, assign, charge, sub-contract or otherwise dispose of these Terms, or any of its rights or obligations arising under these Terms, at any time.
+
+14.7 These Terms, and your relationship with Samsung under these Terms, shall be governed by the laws of the State of California without reference to provisions on conflict of law. Notwithstanding the foregoing, Samsung has the right to seek injunctive remedies or an equivalent urgent legal relief in any jurisdiction.
+
+14.8 By using the Services, you unconditionally consent and agree that: (a) any claim, dispute or controversy (whether in contract, tort, or otherwise) you may have against any Samsung Affiliated Company, the officers, directors, agents and employees of any Samsung Affiliated Company (“Samsung Entity(ies)”) arising out of, relating to, or connected in any way with the Services or the determination of the scope or applicability of this provision, will be resolved exclusively by final and binding arbitration administered by JAMS and conducted before a sole arbitrator in accordance with the rules of JAMS; (b) this provision is made pursuant to a transaction involving interstate commerce, and shall be governed by the Federal Arbitration Act (“FAA”), 9 U.S.C. §§ 1-16; (c) the arbitration shall be held in San Jose, California; (d) the arbitrator’s decision shall be controlled by the terms and conditions of these Terms and any other agreements, policies, guidelines and terms referenced herein that you have agreed to in connection with the Service or Store; (e) the arbitrator shall apply California law consistent with the FAA and applicable statutes of limitations, and shall honor claims of privilege recognized at law; (f) there shall be no authority for any claims to be arbitrated on a class or representative basis, arbitration can decide only your and/or the applicable Samsung Entity’s individual claims; the arbitrator may not consolidate or join the claims of other persons or parties who may be similarly situated; (g) the arbitrator shall not have the power to award punitive damages against you or any Samsung Entity; (h) in the event that the administrative fees and deposits that must be paid to initiate arbitration against any Samsung Entity exceed One Hundred Twenty-Five US Dollars (US$125), and you are unable (or not required under the rules of JAMS) to pay any fees and deposits that exceed this amount, Samsung agrees to pay and/or forward such fees on your behalf, subject to ultimate allocation by the arbitrator. In addition, if you are able to demonstrate that the costs of arbitration will be prohibitive as compared to the costs of litigation, Samsung will pay as much of your filing and hearing fees in connection with the arbitration as the arbitrator determines necessary to prevent the arbitration from being cost prohibitive; and (i) with the exception of subsection (f) above, if any part of this arbitration provision is deemed invalid, unenforceable or illegal, or otherwise conflicts with the rules of JAMS, the balance of this arbitration provision shall remain in effect and shall be construed in accordance with its terms as if the invalid, unenforceable, illegal or conflicting provision were not contained herein. If, however, subsection (f) above is found to be invalid, unenforceable or illegal, the entirety of this arbitration provision shall be null and void, and neither you nor Samsung shall be entitled to arbitrate the dispute. For more information on JAMS and/or the rules of JAMS, visit their website at www.jamsadr.com.
+
+
+
+END USER LICENSE AGREEMENT
+This End User License Agreement ("Agreement") is a binding contract between you and Samsung which governs your use of the application provided by Samsung (the “Application”). PLEASE READ THIS AGREEMENT CAREFULLY BEFORE ACCESSING OR USING THE APPLICATION BECAUSE IT CONSTITUTES A BINDING LEGAL AGREEMENT BETWEEN YOU AND SAMSUNG. 
+THE APPLICATION IS NOT INTENDED FOR USE BY ANYONE UNDER THE AGE OF 13. IF YOU ARE UNDER THE AGE OF 13, YOU MAY NOT USE THE APPLICATION OR PROVIDE SAMSUNG WITH ANY PERSONALLY IDENTIFIABLE INFORMATION. If you are 13 or older but under the age of 18, you represent that you have reviewed these terms and conditions with your parent or legal guardian and that you and your parent or guardian understand and consent to these terms and conditions. If you are a parent or guardian permitting a person under the age of 18 ("Minor") to use the Application, you agree to: (i) supervise the Minor's use of the Application; (ii) assume all risks associated with the Minor’s use of the Application, including the transmission of content to and from third parties via the Internet; (iii) assume any liability resulting from the Minor’s use of the Application; (iv) ensure the accuracy and truthfulness of all information submitted by the Minor; and (v) assume responsibility and are bound by this Agreement for the Minor’s access and use of the Application.
+BY ACCESSING OR USING THE APPLICATION, YOU ACKNOWLEDGE THAT YOU HAVE READ AND UNDERSTOOD THIS AGREEMENT, AND YOU AGREE TO COMPLY WITH AND BE BOUND BY ITS TERMS. IF YOU ARE NOT WILLING TO BE BOUND BY THE TERMS OF THIS AGREEMENT, YOU MAY NOT ACCESS OR USE THE APPLICATION. YOUR USE OF THE APPLICATION IS SUBJECT TO THE PRIVACY POLICY THAT APPLIES TO THE SERVICE, WHICH IS HEREBY INCORPORATED BY MOBILE MESSENGER WHICH IS PROVIDING SAMSUNG SERVICE, AND OTHER POLICIES, GUIDELINES AND TERMS THAT SAMSUNG MAY ADOPT FROM TIME TO TIME. 
+Samsung may modify this Agreement from time to time. If you continue to access or use the Application after such modification, you will be deemed to have read, understood and unconditionally agreed to such changes. 
+
+1. LICENSE
+
+1.1 Grant of License. Subject to the terms and conditions of this Agreement, Samsung hereby grants to you, and you accept, a limited, personal, nonexclusive, nontransferable and revocable license to use the Application only as authorized in this Agreement. The Application is only for your own personal use. You may not use the Application for any commercial purpose or in any way not expressly permitted by this Agreement. Your access to the Application is licensed, not sold. All references to the Application includes all related graphics, user interfaces, scripts and software used to implement and provide access to the Application, and any updates, upgrades, enhancements, modifications, revisions or additions to the Application made available to end users by Samsung. However, Samsung is under no obligation to provide any updates, upgrades, enhancements, modifications, revisions or additions to the Application. 
+
+1.2 Restrictions. You may not reverse engineer, copy, decompile, disassemble, derive the source code of, modify, adapt, capture, reproduce, publicly display, publicly perform, transfer, sell, license, create derivative works from or based upon, republish, upload, edit, post, transmit, distribute, exploit, circumvent or otherwise translate (or encourage or assist any other person to do any of the foregoing) the Application in whole or in part.
+
+2. INTELLECTUAL PROPERTY, LICENSES
+
+2.1 Ownership. The Application is proprietary to Samsung and its licensors (if any), and protected under applicable copyright, patent, trademark and trade secret laws. You further acknowledge and agree that, as between you and Samsung, Samsung owns and shall continue to own all right, title and interest in and to the Application, including associated intellectual property rights under the above referenced applicable laws. This Agreement does not grant you any ownership interest in or to the Application, but only a limited license to use that is revocable in accordance with the terms of this Agreement. 
+
+2.2 Right To Suspend or Discontinue Application. Samsung reserves the right to suspend the Application without notice. Without limiting the generality of the foregoing, and notwithstanding any other provision of this Agreement, Samsung and its licensors reserve the right to suspend, remove or disable access to the Application, or discontinue the Application, in whole or in part, at any time without notice for any reason, and in no event shall Samsung be liable for any claims, costs or damages caused by or arising out of such actions. 
+
+2.3 Third Party Materials. The Application includes software developed by and data provided by third parties.
+
+3. CONTENT; INFORMATION
+
+3.1 Objectionable Content. You understand that by using the Application, you may encounter content that may be offensive, indecent, explicit or objectionable. You agree to use the Application at your sole risk and that Samsung shall have no liability to you for content that may be offensive, indecent, explicit or objectionable. 
+
+4. TERM; TERMINATION
+
+4.1 Effective Date. This Agreement is effective upon your acceptance of the Agreement, or upon your  accessing or otherwise using the Application. The Application has no predetermined termination date and may continue until such time as Samsung decides to terminate the Application or when this Agreement is terminated consistent with the terms herein. 
+
+4.2 Termination by Samsung. If you fail, or Samsung reasonably suspects that you have failed to comply with any of the provisions of this Agreement, without limiting Samsung's other rights and remedies, all of which are expressly reserved, at its sole discretion and without notice to you, Samsung may immediately discontinue your access to the Application and terminate this Agreement. 
+
+5. INDEMNIFICATION 
+You will indemnify, release and hold harmless Samsung, its parent, subsidiaries and affiliates, and all officers, directors, agents and employees thereof, and any party acting on Samsung’s behalf, from and against any and all third party claims, actions, liabilities, losses, damages, judgments, costs and expenses, including reasonable attorneys’ fees (collectively, "Claims") arising out of (i) any use of the Application by you or by any person that you allow to use the Application that is not in accordance to the terms of this Agreement, (ii) any breach of this Agreement by you or by any person that you allow to use the Application or (iii) any violation of any laws, regulations or the rights of any third party by you or by any person that you allow to use the Application.
+
+6. DISCLAIMER
+
+6.1 Disclaimer of Warranties. THE APPLICATION IS PROVIDED “AS IS”, "WHERE IS" AND “AS AVAILABLE” AND WITHOUT WARRANTIES OF ANY KIND. SAMSUNG AND ITS LICENSORS MAKE NO REPRESENTATIONS OR WARRANTIES OR GUARANTEES OF ANY KIND OR NATURE, WHETHER EXPRESS OR IMPLIED, REGARDING THE APPLICATION, AND SPECIFICALLY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+WITHOUT LIMITING THE PREVIOUS DISCLAIMER, SAMSUNG AND ITS LICENSORS DO NOT REPRESENT, WARRANT OR GUARANTEE THAT THE APPLICATION WILL (i) OPERATE IN AN UNINTERRUPTED, TIMELY, SECURE OR ERROR-FREE MANNER, (ii) WILL ALWAYS BE AVAILABLE OR FREE FROM ALL HARMFUL COMPONENTS OR ERRORS OR (iii) WILL BE SECURE OR IMMUNE (INCLUDING THE CONTENT DELIVERED TO YOU OR THE INFORMATION YOU PROVIDED) FROM UNAUTHORIZED ACCESS.
+
+6.2 Disclaimer of Certain Damages. TO THE EXTENT PROHBITED BY LAW, IN NO EVENT SHALL SAMSUNG OR ITS LICENSOR BE LIABLE TO YOU FOR ANY INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL, EXEMPLARY, PUNITIVE DAMAGES OR LOST PROFITS, EVEN IF SAMSUNG HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION WILL APPLY REGARDLESS OF THE THEORY OF LIABILITY, WHETHER FRAUD, MISREPRESENTATION, BREACH OF CONTRACT, NEGILIGENCE, PERSONAL INJURY, PRODUCT LIABILITY, INFRINGEMENT OR ANY OTHER THEORY REGARDLESS OF WHETHER OR NOT SAMSUNG HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION AND WAIVER ALSO APPLIES TO ANY CLAIMS YOU MAY BRING AGAINST ANY OTHER PARTY TO THE EXTENT THAT SAMSUNG WOULD BE REQUIRED TO INDEMNIFY THAT PARTY FOR SUCH CLAIM. 
+
+7. PRIVACY 
+Samsung respects your privacy. The Privacy Policy governs how Samsung transfers information provided by you or relate to your use of the Application. Mobile Messenger may provide the Privacy Policy and may update the Privacy Policy from time to time, so please periodically review the Privacy Policy. 
+
+8. GENERAL TERMS
+
+8.1 Choice of Law. This Agreement, including all revisions and amendments thereto, is governed by and construed in accordance with the laws of California, without regard to its conflict or choice of law principles.
+
+8.2 Arbitration. By using the Application, you unconditionally consent and agree that: (i) any claim, dispute or controversy (whether in contract, tort, or otherwise) you may have against any Samsung entity, the officers, directors, agents and employees of any Samsung entity (the “Samsung Entity(ies)”) arising out of, relating to, or connected in any way with the Application or the determination of the scope or applicability of this clause, will be resolved exclusively by final and binding arbitration administered by JAMS and conducted before a sole arbitrator in accordance with the rules of JAMS; (ii) this clause is made pursuant to a transaction involving interstate commerce, and shall be governed by the Federal Arbitration Act (“FAA”), 9 U.S.C. §§ 1-16; (iii) the arbitration shall be held in San Jose, California; (iv) the arbitrator’s decision shall be controlled by the terms and conditions of this Agreement and any other agreements referenced herein that you have agreed to in connection with the Application; (v) the arbitrator shall apply California law consistent with the FAA and applicable statutes of limitations, and shall honor claims of privilege recognized at law; (vi) there shall be no authority for any claims to be arbitrated on a class or representative basis, arbitration can decide only your and/or the applicable Samsung Entity’s individual claims; the arbitrator may not consolidate or join the claims of other persons or parties who may be similarly situated; (vii) the arbitrator shall not have the power to award punitive damages against you or any Samsung Entity; (viii) in the event that the administrative fees and deposits that must be paid to initiate arbitration against any Samsung Entity exceed One Hundred Twenty-Five US Dollars (US$125), and you are unable (or not required under the rules of JAMS) to pay any fees and deposits that exceed this amount, Samsung agrees to pay them and/or forward them on your behalf, subject to ultimate allocation by the arbitrator. In addition, if you are able to demonstrate that the costs of arbitration will be prohibitive as compared to the costs of litigation, Samsung will pay as much of your filing and hearing fees in connection with the arbitration as the arbitrator deems necessary to prevent the arbitration from being cost prohibitive; and (ix) with the exception of subsection (vi) above, if any part of this arbitration provision is deemed invalid, unenforceable or illegal, or otherwise conflicts with the rules of JAMS, the balance of this arbitration provision shall remain in effect and shall be construed in accordance with its terms as if the invalid, unenforceable, illegal or conflicting provision were not contained herein. If, however, subsection (vi) above is found to be invalid, unenforceable or illegal, the entirety of this arbitration provision shall be null and void, and neither you nor Samsung shall be entitled to arbitrate the dispute. For more information on JAMS and/or the rules of JAMS, visit their website at www.jamsadr.com.
+
+8.3 Severability. If any term or provision of this Agreement is held to be void or unenforceable by any judicial or administrative authority, such determination shall not affect the validity of enforceability of the remaining terms and provisions of this Agreement. The remaining provisions of this Agreement shall remain in effect and shall be construed in accordance with its terms. 
+
+8.4 Survival. Sections 1.2, 2, 4, 5, 6 and 8 of this Agreement, and any other provision that by its nature should continue to be in effect, shall survive the expiration or earlier termination of this Agreement, and shall remain valid and binding.
+
+8.5 Headings. The headings contained in this Agreement are for reference purposes only and shall not affect the meaning or interpretation of this Agreement.
+
+8.6 No Waiver. The failure of Samsung to enforce at any time any of the provisions of this Agreement, or the failure by Samsung to require at any time performance by you of any of the provisions of this Agreement, shall in no way be construed to be a present or future waiver of such provisions, nor in any way affect the right of Samsung to enforce such provision thereafter. The express waiver by Samsung of any provision, condition or requirement of this Agreement shall not constitute a waiver of any future obligation to comply with such provision, condition or requirement.
\ No newline at end of file
diff --git a/TMessagesProj/src/main/assets/terms_ko.txt b/TMessagesProj/src/main/assets/terms_ko.txt
new file mode 100644
index 000000000..deed33e06
--- /dev/null
+++ b/TMessagesProj/src/main/assets/terms_ko.txt
@@ -0,0 +1,170 @@
+﻿“웹앱 검색 사이트” 이용약관
+
+제1장 총 칙
+제 1 조 [목적]
+본 약관은 웹앱 검색 사이트에서 제공하는 각종 서비스를 이용함에 있어, 삼성전자 주식회사와 이용자 간의 권리 및 의무 등에 대한 기본적인 사항을 규정함을 목적으로 합니다.
+
+제 2 조 [용어의 정의] 
+본 약관에서 사용하는 용어의 정의는 다음과 같습니다.
+1. “회사”라 함은 삼성전자 주식회사를 말합니다.
+2. “회사 등”이라 함은 “회사” 및 “회사”가 지정한 제3자를 말합니다.
+3. “이용자”라 함은, 본 약관에 동의함을 전제로 회사가 제공하는 모든 “서비스”를 이용하는 자를 말합니다. 
+4. “서비스”라 함은, “스토어”에서 “회사”가 제공하는 모든 “애플리케이션”, 각종 소프트웨어, 그리고 그 밖의 관련 서비스를 말하며, 별도의 서면 계약에 따라 제공되는 서비스는 제외합니다.
+5. “애플리케이션”이라 함은, “스토어”에서 제공하여 무료로 사용할 수 있는 각종 애플리케이션을 의미하는데, 여기에는 프로그램, 소프트웨어, 기타 콘텐츠 등이 포함될 수 있습니다.
+6. “제3자 애플리케이션”이라 함은, “애플리케이션” 중 “회사”가 아닌 제3자가 개발한 “애플리케이션”을 말합니다.
+7. “스토어”라 함은 “회사”가 운영하고 있는 온라인 스토어로서, 웹앱 검색 사이트 (http://swap.sec.net/search) 을 말합니다.
+8. “이용자 단말”이라 함은 컴퓨터, 노트북, 스마트폰, 태블릿PC 등 인터넷 연결이 가능하여 인터넷 상의 콘텐츠를 검색, 구매, 이용 또는 보관할 수 있는 일체의 제품을 말합니다.
+9. “등록 데이터”라 함은 “서비스”를 이용하는데 필요한 각종 정보를 말합니다.
+10. “메신저”라 함은 “이용자”가 “서비스”를 제공받기 위하여 이용하는  모바일 메신저 프로그램을 말합니다.
+
+제 3 조 [약관의 효력]
+① “서비스”를 이용하려면 먼저 약관에 동의하여야 합니다. 약관에 동의하지 않는 경우 “서비스”를 이용할 수 없습니다.
+② “회사”는 필요한 경우 관련 법령에 따라 본 약관을 변경할 수 있습니다.
+③ 약관을 변경할 경우 “회사”는 적용일자 및 변경 사유를 명시하여 적용일자 10일 전부터 변경 약관을 웹앱 검색 사이트(http://swap.sec.net/search)에 공지합니다. 단, “이용자”에게 불리하거나 중대한 사항의 변경은 30일 전부터 공지합니다.
+④ 다음과 같은 경우에는 “이용자”가 변경 약관에 동의한 것으로 봅니다.
+1. 변경 약관의 적용일자 전까지 이에 대한 반대의사를 스토어에 명시된 연락처 등 적절한 방법을 통해 표시하지 않은 경우
+2. 변경 약관의 적용일자 이후에 특별한 의사 표시 없이 “서비스”를 이용할 경우 
+⑤ “이용자”가 변경 약관에 동의하지 않는 경우 “회사”는 변경 전 약관에 따른 “서비스” 제공이 기술적, 영업적으로 가능한 때에는 그에 따라 “서비스”를 제공할 수 있으나, 그렇지 않은 경우 “이용자”와의 계약을 해지하거나 “이용자”의 “서비스” 이용을 제한할 수 있습니다. 
+
+제 4 조 [개인정보의 취급] 
+“회사”는 “서비스” 제공 과정에서 “이용자”의 개인정보를 수집, 이용하지 않으며, “이용자”의 개인정보는 관련 법령 및 “메신저” 제조회사의 개인정보 취급방침(자세한 사항은 “메신저” 제조회사의 개인정보취급방침∙처리방침을 참조하시기 바랍니다)에 따라 보호, 관리됩니다. 
+ 
+제2장 “서비스”의 이용
+제 5 조 [“서비스”의 내용]
+“회사”는 다음과 같은 “서비스”를 직접 또는 제3자가 제공하는 서비스를 중개하는 방식으로 제공합니다.
+1. “애플리케이션” 및/또는 관련 정보, 각종 부가서비스의 제공
+2. 이미 제공된 “애플리케이션”에 대한 업데이트 및 관련 콘텐츠 다운로드, 기타 관련 정보의 제공
+3. 추가 응용 프로그램, 소프트웨어 기타 콘텐츠 다운로드
+4. 기타 각 호에 부수하거나 신규로 추가되는 서비스
+
+제 6 조 [“서비스”의 제한] 
+다음과 같은 경우, “회사”는 “서비스”의 전부 또는 일부를 제공하지 않을 수 있습니다. 
+1. 본 약관 또는 관련 법률에 따라 “서비스” 이용이 제한되는 자인 경우
+2. 대한민국 또는 “이용자”가 거주하는 국가나 “서비스”를 제공받는 국가의 관련 법령에 따라 “이용자”의 “서비스” 이용이 제한되는 경우 
+3. 미성년자가 법정대리인의 동의 없이 “서비스”를 이용하는 경우
+
+제 7 조 [“서비스”의 중지 및 변경] 
+① “회사”는 그 필요에 따라 “서비스”의 전부 또는 일부를 변경, 개선, 수정(추가, 삭제 등을 포함합니다)할 수 있습니다.
+② “회사”는 다음과 같은 경우 또는 이에 해당하는 사실이 존재한다고 의심할 만한 합리적 이유가 있는 경우 “서비스”의 전부 또는 일부를 중지하거나 제한, 변경할 수 있습니다.
+1. “이용자”가 타인의 개인정보를 도용한 경우
+2. “이용자”가 “회사”를 포함한 제3자의 지식재산권을 침해하는 행위를 하는 경우
+3. “이용자”가 “회사”의 기술적 보호조치를 회피 혹은 무력화하는 행위를 하는 경우
+4. “이용자”가 본 약관 위반행위 및 “회사”를 포함한 제3자의 명예를 훼손하거나 업무를 방해하는 등 법령위반 행위 또는 미풍양속에 반하는 행위를 하는 경우
+5. 컴퓨터 등 정보통신설비의 보수점검, 장비의 교체 및 고장, 통신의 두절 등의 사유가 발생한 경우
+6. “서비스”를 위한 설비 등의 유지보수 등으로 인한 부득이한 사정이 있는 경우
+7. 정전, 제반 설비의 장애 또는 이용량의 폭주 등으로 정상적인 “서비스” 이용에 지장이 있는 경우
+8. 경영상 이유 등으로 인하여 “서비스”를 제공할 수 없는 부득이한 사정이 발생한 경우
+9. 기타 천재지변, 국가비상사태, 각 국가의 법령/정책 상의 규제 또는 제한 등 불가항력적 사유가 있는 경우
+③ 제1항 및 제2항에 따라 “서비스”를 중지, 제한 또는 변경함에 있어 이로 인하여 “이용자”의 권리의무에 중요한 영향을 초래하는 경우 “회사”는 이에 대해 웹앱 검색 사이트(http://swap.sec.net/search)에 사전 공지하거나 기타 적절한 방법으로 “이용자”에게 통지합니다. 단, “회사”가 통제할 수 없는 사유로 인한 “서비스”의 중지, 제한 또는 변경이 발생하거나 긴급사유 등으로 인하여 “이용자”에 대한 공지 또는 통지가 불가능한 경우에는 그러하지 아니합니다.
+④ 본 조 제2항 제1호 내지 제5호에서 정한 사유로 “서비스”를 중지, 제한 또는 변경하는 경우, “이용자”는 “회사”의 그러한 조치 사실을 안 날로부터 30일 이내에 이의신청을 할 수 있고, 그 이의가 정당하다고 “회사”가 인정하는 경우 “회사”는 즉시 “서비스”의 이용을 재개합니다.
+
+제 8 조 [소유권 등] 
+① “이용자”는 “애플리케이션” 사용을 통해 해당 “애플리케이션” 이용을 위한 이용권한(이를 “애플리케이션 라이선스”라 합니다)만을 취득하며, 별도 약정이 없는 한, “이용자”는 해당 “애플리케이션”에 대한 소유권 기타 처분권한을 취득하는 것은 아닙니다.
+② “이용자”는 “서비스” 내에 포함되거나 이에 첨부될 수 있는 “애플리케이션”에 관한 소유권, 지식재산권 기타 권리에 관한 표시나 통지내용을 임의로 제거, 모호하게 하거나 변경할 수 없습니다.
+③ “회사 등”이 서면을 통해 명시적으로 권한을 부여하지 않는 한 “이용자”는 “서비스” 이용 시 “회사 등”의 모든 성명, 상호, 상표 등 타인의 상품 또는 서비스임을 표시한 표지 및 타인의 영업임을 표시하는 표지 등과 동일 또는 유사한 것을 제작, 사용할 수 없습니다. 
+
+제 9 조 [애플리케이션 라이선스 등] 
+① “이용자”가 본 조에 따라 취득하는 “애플리케이션 라이선스”의 구체적인 내용은 아래 명시된 “라이선스가 허여된 애플리케이션 최종 사용자 라이선스 계약”에서 정하는 바에 따릅니다. 
+② “스토어” 또는 “애플리케이션”에는 일정한 보안조치가 설정되어 있을 수 있습니다. “이용자”는 이를 임의로 해제하거나 무력화할 수 없습니다.
+
+제 10 조 [제3자 애플리케이션] 
+① ”회사”는 “스토어”를 통해 “회사”가 개발한 “애플리케이션” 또는 “제3자 애플리케이션”을 제공합니다. 
+② “회사”가 개발한 “애플리케이션”의 경우 “회사”가 해당 “애플리케이션 라이선스”의 허여자가 됩니다. 
+③ “제3자 애플리케이션”의 경우 해당 제3자(애플리케이션 공급자)가 해당 “애플리케이션 라이선스”의 허여자가 됩니다. 따라서 해당 “애플리케이션 라이선스”를 위한 계약관계도 “이용자”와 해당 제3자(애플리케이션 공급자) 사이에 성립됩니다. “회사”는 “스토어” 운영 또는 “서비스” 제공과 직접 관련되지 않는 한, 해당 “애플리케이션 라이선스” 와 관련하여 어떠한 계약상 의무나 책임도 부담하지 않습니다. 
+
+제 11 조 [기술적 요구 사항] 
+① “서비스” 이용을 위해서는 “회사”의 특정 소프트웨어, 프로그램 또는 콘텐츠(이하 “소프트웨어 등”이라 하며, 그 이용시 별도 요금이 부과될 수 있습니다), 인터넷 등 유무선 네트워크망 접속(접속시 별도 요금이 부과될 수 있습니다)이 필요하며, 수시로 이러한 요인에 대한 업데이트나 업그레이드가 필요할 수 있습니다.
+② “제3자 애플리케이션”과 관련한 업데이트나 업그레이드 서비스는 해당 제3자(애플리케이션 공급자)가 제공하며, “회사”는 이에 대해 책임을 지지 않습니다. 다만, “스토어” 이용을 위한 “소프트웨어 등”의 업데이트나 업그레이드 서비스는 “회사 등”이 제공하며, 관련 법령상 필요 시 이에 대한 “이용자”의 동의를 얻어 제공합니다.
+③ 제1항에서 정한 하드웨어, “소프트웨어 등” 및 네트워크망 접속 성능에 따라 “이용자”의 “서비스” 이용에 장애 또는 불편이 발생할 수 있습니다. 신속하고 원활한 “서비스” 이용을 위해서는 고성능의 하드웨어, “소프트웨어 등” 및/또는 고속 네트워크망 접속이 필요할 수 있습니다. 
+④ “회사”는 제1항 내지 제2항의 업데이트나 업그레이드 서비스를 적시에 제공하여 “이용자”의 “서비스” 이용에 불편이 없도록 합리적인 노력을 기울입니다. 다만, “이용자”는 이와 같은 서비스를 제공받기 위하여 이용자 단말이나 인터넷 환경 등 본 조 제1항 내지 제3항의 각 요인을 구비하여야 합니다. 
+⑤ “서비스”는 “회사 등”의 다른 제품이나 제공물의 일부가 아닙니다. “회사 등”으로부터 다른 제품을 구매, 취득하거나 대여받았다고 해서 “이용자”가 “서비스”를 이용할 수 있는 권리 또는 자격이 있다는 것을 나타내거나 이를 보장하는 것은 아닙니다. 
+
+제 12 조 [“애플리케이션”의 콘텐츠 분류] 
+“회사”는 관련 법령에 따라 필요한 경우 “애플리케이션”에 대한 이용제한등급 또는 콘텐츠 분류를 제공할 수 있습니다. “제3자 애플리케이션”의 경우에는 해당 제3자(애플리케이션 공급자)가 제공한 정보에 기초하여 이용제한등급 설정 및 콘텐츠 분류를 실시합니다. 
+
+제 13 조 [광고의 게재] 
+① 일부 “서비스”의 경우 광고 수익에 의해 지원됩니다. “회사 등”은 광고‧홍보 관련 정보를 “스토어”에 게재하거나 “애플리케이션”에 추가할 수 있습니다. 
+② 만약 “이용자”가 “회사 등”이 제공하는 광고‧홍보 관련 정보를 이용하거나 그 광고주 등과 교신 또는 거래를 하는 경우, 이는 전적으로 “이용자”와 해당 광고주 등 간의 문제입니다. 따라서 이와 관련하여 “회사”의 귀책사유가 없는 한 “회사”는 어떠한 책임이나 의무도 부담하지 않습니다. 
+
+제3장 분쟁 해결 등
+제 14 조 [분쟁의 해결] 
+①	 “이용자”는 “회사”에 대해서 불만사항이나 문의사항이 있을 경우 “스토어”에 명시된 연락처를 통해 해당 사항의 처리를 신청할 수 있고 “회사”는 이를 성실하게 처리합니다. 
+② “서비스” 이용과 관련한 피해의 구제 및 분쟁의 조정에 대해서는 콘텐츠산업진흥법 제30조에 따라 콘텐츠분쟁조정위원회에 분쟁 조정을 신청할 수 있습니다. 
+
+제 15 조 [“회사”의 보증 및 책임] 
+① “회사”는 “서비스”나 “애플리케이션”에 대하여 다음과 같은 사항을 보증하거나 보장하지 않습니다.
+1. “이용자”가 사용하는 모든 또는 임의의 하드웨어 및 “소프트웨어 등”과 호환된다는 점
+2. 항상 또는 특정 시간에 제공될 수 있거나 중단되지 않는다는 점, 또는 그 내용 및 이용이 안전하거나 오류가 없다는 점 
+3. “이용자”의 요구 사항에 맞거나 특정 수준의 성능이나 기능을 충족한다는 점
+4. 바이러스, 해킹, 손상 또는 기타 보안 침입으로부터 안전하다는 점. 다만, “회사”는 각종 보안 침입으로부터 “이용자”를 보호하기 위해 현재의 기술수준에 따라 합리적인 노력을 기울입니다.
+② “회사”는 “회사”의 본 약관 위반으로 인해 “이용자”에게 발생하는 직접 손실에 대해서만 책임을 지고, “회사”가 예측할 수 없는 “이용자”의 손실에 대해서는 아무런 책임을 부담하지 않습니다. “이용자”에 대한 “회사”의 책임은 어떤 경우에도 “이용자”에게 발생할 수 있는 데이터 손실, 영업손실 또는 사업 중단 등을 포함한 사업상 손실 기타 간접손실이나 우발손실을 포함하지 않습니다.
+③ “스토어”에 포함된 정보, 문서, “소프트웨어 등” 및 기타 자료는 ‘있는 그대로’ 제공됩니다. 해당 자료의 오류, 결함 또는 부정확함에 대하여 “회사”의 귀책사유가 없는 한 “회사”는 어떠한 책임이나 의무도 부담하지 않습니다. 
+
+제 16 조 [지식재산권 정책] 
+“회사”는 “회사”의 지식재산권 정책에 따라 “회사” 및 제3자의 지식재산권 침해 의심 사례가 보고되는 경우 관련 법령에 따라 지식재산권 침해행위의 예방 및 제거, 그로 인한 손해방지 등에 필요한 조치를 취할 수 있습니다. 이러한 조치에는 지식재산권을 침해하는 “이용자”의 “계정” 정지나 중단, “서비스” 이용계약의 해지 등이 포함됩니다. 
+
+제 17 조 [제3자 사이트 및 기타 콘텐츠 연결 링크] 
+① “서비스”에는 다른 애플리케이션 스토어, 다른 웹사이트, “제3자 애플리케이션”등을 포함한 제3자의 “소프트웨어 등” 및 기타 서비스 자원(광고, 제품 또는 기타 자료를 포함하며, 이하 “외부 자원”이라 합니다)으로 연결되는 하이퍼링크가 포함될 수 있습니다. “회사”는 “이용자”에게 제공하는 이러한 제3자의 “외부 자원”에 대하여 어떠한 권리나 이해관계도 가지지 않습니다. 
+② “외부 자원”을 통해 이루어지는 모든 광고, 서비스, 애플리케이션 또는 기타 자료는 제3자가 “이용자”에게 제공하는 것이며, 이와 관련하여 “이용자”와 해당 제3자 간의 별도 약관이 적용될 수 있습니다.
+③ 본 약관은 “이용자”와 제3자와의 법적 관계에 영향을 주지 않습니다. 제3자가 “이용자”에게 제공하는 “외부 자원”에 대하여, “회사”의 귀책사유가 없는 한 “회사”는 어떠한 책임이나 의무도 부담하지 않습니다.
+④ 특히 본 조 제1항에서 정한 것처럼 다른 애플리케이션 스토어로 연결되는 "외부 자원"의 경우, 그 다른 애플리케이션 스토어에서 애플리케이션 등을 구매하거나 그에 대한 환불을 요청할 경우, 이는 모두 그 스토어의 별도 약관에서 정한 바에 따르고, ”회사”는 이에 대하여 어떠한 책임이나 의무도 부담하지 않으며, “제3자 애플리케이션”에 관한 계약관계는 “이용자”와 해당 제3자(애플리케이션 공급자) 사이에 성립되는 것으로서 “회사”는 해당 “애플리케이션”과 관련하여 어떠한 책임이나 의무도 부담하지 않습니다.
+
+
+제 18 조 [기타] 
+① 본 약관의 일부 조항이 효력을 상실할 경우 본 약관의 나머지 조항은 여전히 유효하며 이행 가능합니다.
+② “이용자”는 사전 서면 동의 없이 본 계약 또는 본 계약에 따라 발생하는 “이용자”의 모든 권리나 의무를 제3자에게 이전, 양도, 부과 또는 달리 처리할 수 없습니다.
+③ “회사”는 천재지변 또는 이에 준하는 불가항력으로 인하여 “서비스” 또는 “애플리케이션” 등을 제공할 수 없는 경우에 “이용자”에게 발생한 손해에 대하여 책임을 지지 않습니다.
+④ “이용자” 상호 간 또는 “이용자”와 제3자 간에 “애플리케이션” 등을 매개로 하여 분쟁이 발생한 경우, “회사”의 귀책사유가 없는 한 “회사”는 어떠한 책임이나 의무도 부담하지 않습니다. 
+⑤ 본 약관 및 본 약관에 따른 “이용자”와 “회사”의 관계에는 대한민국 법률이 적용됩니다. “회사”와 “이용자”간에 “서비스”와 관련하여 분쟁이 발생한 경우 이에 대한 소송은 “이용자”의 주소를 관할하는 지방법원의 전속관할로 하고, 주소가 없는 경우 거소(상당 기간 계속 거주하는 장소)를 관할하는 지방법원의 전속관할로 합니다. 다만, 제소 당시 “이용자”의 주소 또는 거소가 분명하지 아니한 경우에는 그러하지 아니합니다. 
+
+부칙
+본 약관은 2015. **. **.부터 적용됩니다. 
+라이선스가 허여된 애플리케이션 최종 사용자 라이선스 계약 
+제 1 조 [목적]
+본 라이선스 계약은 “이용자”가 “스토어”에서 사용하는 “애플리케이션”과 관련하여, 라이선스 허여자와 “이용자” 간의 권리, 의무 및 책임 사항 등을 규정함을 목적으로 합니다.
+
+제 2 조 [라이선스의 범위] 
+① 라이선스 허여자는 “이용자”에게 개인적, 비독점적이며 양도할 수 없는 제한적 라이선스를 허여합니다. 
+② “이용자”는 다음과 같은 사항을 준수하여야 합니다.
+1. “애플리케이션”을 개체 코드 실행 파일 형태로만 비상업적 용도로 사용하여야 합니다.
+2. “애플리케이션”은 동일한 “계정”을 기준으로 복수의 “이용자 단말”에 횟수 및 기간의 제한 없이 재다운로드될 수 있습니다. 단, 이용기간의 제한 있는 “애플리케이션”의 경우에는 사용 기간이 해당 이용기간으로 제한될 수 있습니다. 또한, “이용자 단말” 또는 “애플리케이션”의 사양, 해상도 등의 사유에 따라 복수의 “이용자 단말”에서의 사용이 지원되지 않을 수도 있습니다. 
+③ 만약 본 라이선스 계약에 명시된 조건 중 한 가지라도 위반할 경우 라이선스 허여자는 “이용자”에게 허여한 라이선스를 철회 또는 제한할 수 있습니다.
+④ 본 라이선스 계약에 따라 “이용자”에게 명시적으로 허여되지 않은 모든 권리는 라이선스 허여자가 보유합니다. 따라서 “이용자”는 본 라이선스 계약에 명시된 경우를 제외하고 “애플리케이션” 또는 “애플리케이션”의 변형물이나 사본을 이용, 다른 제품에 통합, 복사, 수정, 번역 또는 제3자에게 양도할 수 없으며, 또한 “애플리케이션”의 바이너리 코드 전체 또는 일부를 디컴파일, 리버스 엔지니어링 또는 디스어셈블할 수 없습니다. 
+⑤ “애플리케이션 라이선스”는 “이용자”에게만 허여됩니다. “이용자”는 라이선스 허여자의 사전 서면 동의 없이 “애플리케이션”을 임대, 대여, 재허여, 판매, 양도, 담보로 제공, 이전 등의 행위를 할 수 없습니다. 
+
+제 3 조 [지식재산권의 소유권] 
+① “이용자”가 본 라이선스 계약에 의해서만 “애플리케이션 라이선스”를 취득합니다.
+② “이용자”는 “애플리케이션”이나 “애플리케이션” 사본에 포함되어 있을 수 있는 전자 워터마크 또는 기타 식별자를 포함하여 모든 저작권 통지 또는 이와 유사한 소유권 보호 장치를 제거 또는 변경하여서는 아니됩니다.
+
+제 4 조 [비밀 유지]	
+① “이용자”는 라이선스 허여자의 영업비밀 또는 기술정보 등을 제3자에게 제공 또는 공개하여서는 아니됩니다.
+② 전항의 규정은 다음과 같은 정보에는 적용되지 않습니다.
+1. 비밀 유지 의무 없이 합법적으로 취득한 정보(라이선스 허여자로부터 직접 또는 간접적으로 취득한 정보는 제외합니다) 
+2. 이미 “이용자”가 보유하고 있었던 정보. 단, 이러한 점을 증명할 수 있어야 함(본조를 위반하여 취득한 경우는 제외합니다) 
+3. 공지의 사실에 속하는 정보 
+③ 법률이나 규정 또는 법원 명령에 따라 정보를 공개하여야 하는 경우 그 필요한 범위 내에서 공개하는 것에 대해서는 본조 제1항이 적용되지 않습니다.
+
+제 5 조 [보증 및 지원]
+① 라이선스 허여자는 “애플리케이션”과 관련하여 어떠한 종류의 진술, 보장 또는 보증도 하지 않습니다. 
+② 라이선스 허여자는 본 라이선스 계약에 따라 “이용자”에게 기술적 지원 또는 기타 지원을 제공할 의무가 없습니다. 
+
+제 6 조 [기간 및 해지] 
+①	 본 라이선스 계약은 “이용자”가 본 라이선스 계약에 동의하는 시점이나 “애플리케이션” 사용이 완료된 시점 중 더 빠른 시점부터 효력을 발생합니다. 
+② ”이용자”가 본 라이선스 계약 조건을 준수하지 않거나 “애플리케이션”을 제거/폐기하거나 자발적으로 라이선스 허여자에게 반환하는 경우 본 라이선스 계약은 자동으로 해지됩니다. 
+③ 본 라이선스 계약이 해지되면 “이용자”는 “애플리케이션”의 사용을 중단 해야 합니다.
+④ 본 라이선스 계약이 해지되더라도 그 해지 사유에 관계없이 해지 전에 발생한 각 당사자의 권리, 의무 및 책임은 유효하게 존속합니다. 본 라이선스 계약이 해지되어도 제2조 제2항, 제3항, 제3조 내지 제5조, 제6조 제3항, 제7조 내지 제9조는 여전히 유효합니다. 
+
+제 7 조 [준거법 및 관할권] 
+① 본 라이선스 계약에 대해서는 대한민국 법률이 적용됩니다. 
+② 본 라이선스 계약으로 인해 또는 이와 관련하여 발생할 수 있는 모든 분쟁의 해결에는 소제기 당시의 “이용자”의 주소 또는 거소를 관할하는 법원이 관할권을 갖습니다. 
+
+제 8 조 [관련 법령 등 준수] 
+“이용자”는 본 라이선스 계약 외에도 관련 법령을 준수하여야 합니다. 
+
+제 9 조 [일반 조항]
+① 본 라이선스 계약의 일부 조항이 효력을 상실하는 경우 본 라이선스 계약의 나머지 조항은 여전히 유효합니다.
+② 당사자가 권리, 권한 또는 구제수단을 행사하지 않거나 행사를 지연한다고 하여 이를 포기하는 것으로 볼 수 없으며, 그 일부만을 행사한다고 하여 이와 같은 권리, 권한 또는 구제수단이나 다른 권리, 권한 또는 구제수단을 행사할 수 없는 것은 아닙니다.
+③ 본 라이선스 계약을 변경할 경우, 라이선스 허여자는 적용일자 및 변경 사유를 명시하여 적용일자 10일 전(“이용자”에게 불리하거나 중대한 사항의 변경은 30일 전)부터 변경 계약을 웹앱 검색 사이트(http://swap.sec.net/search)에 공지합니다.
+④ “이용자”가 “애플리케이션”을 “이용자 단말”에서 사용하면 본 라이선스 계약 조건에 동의하는 것으로 간주됩니다.
+⑤ 본 라이선스 계약에서 달리 정하지 않은 용어나 문구에 대해서는 “웹앱 검색 사이트 이용약관”에서 정한 바에 따릅니다.
+
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index 46631c952..beeb9fb99 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -304,4 +304,12 @@ public Dialog getVisibleDialog() {
     public void setVisibleDialog(Dialog dialog) {
         visibleDialog = dialog;
     }
+
+    /**
+     *  Socializer
+     **/
+
+    protected boolean isMoveable() {
+        return true;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatSwapCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatSwapCell.java
new file mode 100644
index 000000000..1ce1f5a36
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatSwapCell.java
@@ -0,0 +1,208 @@
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.ColorMatrix;
+import android.graphics.ColorMatrixColorFilter;
+import android.graphics.Paint;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ImageReceiver;
+import org.telegram.messenger.MessageObject;
+import org.telegram.ui.PhotoViewer;
+
+/**
+ * Created by jjie.choi on 2015-02-16.
+ */
+public class ChatSwapCell extends ChatBaseCell {
+
+    public static interface ChatSwapCellDelegate {
+        public abstract void didClickedImage(ChatSwapCell cell);
+    }
+
+    public static final int ONEOFF_TRUE = 99;
+    public static final int ONEOFF_FALSE = 98;
+
+    private int swapMsgType;
+    private String swapImgUrl;
+
+    private int photoWidth;
+    private int photoHeight;
+
+    private ImageReceiver photoImage;
+    private boolean imagePressed = false;
+
+    private boolean appLaunched = false;
+    public ChatSwapCellDelegate swapDelegate = null;
+
+    private ImageReceiver.ImageReceiverDelegate imgDelegate = new ImageReceiver.ImageReceiverDelegate() {
+        @Override
+        public void didSetImage(ImageReceiver imageReceiver, boolean set, boolean thumb) {
+            if (!thumb && swapMsgType == ONEOFF_TRUE && appLaunched) {
+
+//                photoImage.setDelegate(null);
+                Bitmap img = imageReceiver.getBitmap();
+                photoImage.clearImage();
+                photoImage.setImageBitmap(makeGray(img));
+                ChatSwapCell.this.invalidate();
+            }
+        }
+    };
+
+    public ChatSwapCell(Context context) {
+        super(context);
+        media = true;
+        photoImage = new ImageReceiver();
+        photoImage.setParentView(this);
+        photoImage.setDelegate(imgDelegate);
+    }
+
+
+    public void setSWAPMsgInfo(int type, String imgUrl, boolean isLaunched) {
+        if (swapMsgType < 0) {
+            media = false;
+        }
+        swapMsgType = type;
+        swapImgUrl = imgUrl;
+        appLaunched = isLaunched;
+    }
+
+    public int getSwapMsgType() {
+        return swapMsgType;
+    }
+
+    public boolean isLaunched() {
+        return appLaunched;
+    }
+
+    public void appLaunched() {
+        if (swapMsgType == ONEOFF_TRUE && !appLaunched) {
+            appLaunched = true;
+            Bitmap img = photoImage.getBitmap();
+            if (img != null) {
+                photoImage.setImageBitmap(makeGray(img));
+                invalidate();
+            }
+        }
+    }
+
+    @Override
+    public void setMessageObject(MessageObject messageObject) {
+        super.setMessageObject(messageObject);
+
+        photoWidth = AndroidUtilities.dp(80);
+        photoHeight = AndroidUtilities.dp(80);
+        backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+        if (swapImgUrl != null) {
+            photoImage.setImage(swapImgUrl, "80_80", null, null, 0);
+
+        }
+        invalidate();
+    }
+
+    private void didClickedImage() {
+
+        if (swapDelegate != null) {
+            swapDelegate.didClickedImage(this);
+            appLaunched();
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+
+        boolean result = false;
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (delegate == null || delegate.canPerformActions()) {
+                if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + photoImage.getImageWidth() && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                    imagePressed = true;
+                    result = true;
+                }
+                if (result) {
+                    startCheckLongPress();
+                }
+            }
+        } else {
+            if (event.getAction() != MotionEvent.ACTION_MOVE) {
+                cancelCheckLongPress();
+            }
+            if (imagePressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    imagePressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didClickedImage();
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    imagePressed = false;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!(x >= photoImage.getImageX() && x <= photoImage.getImageX() + photoImage.getImageWidth() && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+                        imagePressed = false;
+                        invalidate();
+                    }
+                }
+            }
+        }
+        if (!result) {
+            result = super.onTouchEvent(event);
+        }
+
+        return result;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        int x = 0;
+
+        if (currentMessageObject.isOut()) {
+            x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
+        } else {
+            if (isChat) {
+                x = AndroidUtilities.dp(67);
+            } else {
+                x = AndroidUtilities.dp(15);
+            }
+        }
+        photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
+
+    }
+
+    @Override
+    protected void onAfterBackgroundDraw(Canvas canvas) {
+        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
+        photoImage.draw(canvas);
+        drawTime = photoImage.getVisible();
+    }
+
+    private Bitmap makeGray(Bitmap img) {
+        int width, height;
+
+        height = img.getHeight();
+        width = img.getWidth();
+
+        Bitmap bmpGrayscale = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+        Canvas c = new Canvas(bmpGrayscale);
+        Paint paint = new Paint();
+        ColorMatrix cm = new ColorMatrix();
+
+        cm.setSaturation(0);
+        ColorMatrixColorFilter f = new ColorMatrixColorFilter(cm);
+
+        paint.setColorFilter(f);
+        c.drawBitmap(img, 0, 0, paint);
+
+        return bmpGrayscale;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index d94a3b623..9b1a58f3f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -9,9 +9,12 @@
 package org.telegram.ui;
 
 import android.Manifest;
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
+import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -20,6 +23,7 @@
 import android.content.res.Configuration;
 import android.database.Cursor;
 import android.graphics.Bitmap;
+import android.graphics.Canvas;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.media.ExifInterface;
@@ -36,6 +40,8 @@
 import android.util.SparseIntArray;
 import android.util.TypedValue;
 import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
@@ -103,6 +109,7 @@
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Cells.ChatMessageCell;
 import org.telegram.ui.Cells.ChatMusicCell;
+import org.telegram.ui.Cells.ChatSwapCell;
 import org.telegram.ui.Cells.ChatUnreadCell;
 import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -135,12 +142,17 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
 import java.util.concurrent.Semaphore;
 import java.util.regex.Matcher;
 
+import sec.swap.WebAppSearchTermsActivity;
+import sec.swap.WebLaunchListener;
+import sec.swap.WebLaunchView;
+
 @SuppressWarnings("unchecked")
 public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate,
-        PhotoViewer.PhotoViewerProvider {
+        PhotoViewer.PhotoViewerProvider, WebLaunchListener {
 
     protected TLRPC.Chat currentChat;
     protected TLRPC.User currentUser;
@@ -335,6 +347,24 @@
 
     private final static int id_chat_compose_panel = 1000;
 
+    private WebLaunchView webLaunchView;
+    private ProgressDialog swapProgressDialog;
+    private ImageView minimizeButton;
+    private View swapTooltip = null;
+    private String curWebAppName = "";
+    private int webViewStatus = 0;
+    private final static int webview_gone = 0;
+    private final static int webview_minimize = 1;
+    private final static int webview_maximize = 2;
+    private final static int swap_terms_req_code = 900;
+
+    private final static int swap_msg_type = 99;
+
+    private boolean swapAutoLaunchEnabled = true;
+    private boolean swapTermsAgreed = false;
+    private boolean swapExecuted = false;
+
+
     RecyclerListView.OnItemLongClickListener onItemLongClickListener = new RecyclerListView.OnItemLongClickListener() {
         @Override
         public boolean onItemClick(View view, int position) {
@@ -655,6 +685,13 @@ public void onFragmentDestroy() {
         if (messageObject != null && !messageObject.isMusic()) {
             MediaController.getInstance().stopAudio();
         }
+
+        if(swapProgressDialog != null) {
+            if(swapProgressDialog.isShowing())
+                swapProgressDialog.dismiss();
+        }
+        setWebViewSize(webview_gone);
+
         if (ChatObject.isChannel(currentChat)) {
             MessagesController.getInstance().startShortPoll(currentChat.id, true);
         }
@@ -2056,6 +2093,11 @@ public void onWindowSizeChanged(int size) {
                 updateMessagesVisisblePart();
             }
 
+            @Override
+            public void onWebAppSearch() {
+                checkTermsAndLaunchSearch();
+            }
+
             @Override
             public void onStickersTab(boolean opened) {
                 if (emojiButtonRed != null) {
@@ -2293,6 +2335,154 @@ public void onClick(DialogInterface dialogInterface, int i) {
         updateSecretStatus();
         updateSpamView();
 
+        /**
+         * Socializer
+         */
+        webLaunchView = new WebLaunchView(context);
+        webLaunchView.setVisibility(View.GONE);
+        contentView.addView(webLaunchView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        File file = ApplicationLoader.applicationContext.getFilesDir();
+
+
+        minimizeButton = new ImageView(context);
+        minimizeButton.setVisibility(View.GONE);
+        minimizeButton.setImageResource(R.drawable.minimizebutton);
+        contentView.addView(minimizeButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.RIGHT | Gravity.TOP, 0, 10, 6, 0));
+        minimizeButton.setOnTouchListener(new View.OnTouchListener() {
+            private boolean moveFlag = false;
+            private float posX;
+            private float posY;
+            private int imgW;
+            private Rect activityRect = new Rect();
+
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (webViewStatus == webview_gone)
+                    return true;
+
+                int action = event.getAction();
+                getParentActivity().getWindow().getDecorView().getWindowVisibleDisplayFrame(activityRect);
+                switch (action) {
+                    case MotionEvent.ACTION_DOWN: {
+                        moveFlag = false;
+                        imgW = v.getWidth();
+                        FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) v.getLayoutParams();
+                        lp.leftMargin = activityRect.width() - lp.rightMargin - imgW;
+                        lp.bottomMargin = activityRect.height() - ActionBar.getCurrentActionBarHeight() - lp.topMargin - imgW;
+                        posX = event.getX();
+                        posY = event.getY();
+                    }
+                    break;
+                    case MotionEvent.ACTION_UP:
+                    case MotionEvent.ACTION_CANCEL:
+                        if (!moveFlag) {
+                            if (webViewStatus == webview_minimize) {
+                                setWebViewSize(webview_maximize);
+                            } else {
+                                setWebViewSize(webview_minimize);
+                            }
+                        } else {
+                            FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) v.getLayoutParams();
+                            if (lp.leftMargin < 0) {
+                                lp.leftMargin = 0;
+                                lp.rightMargin = activityRect.width() - imgW;
+                            }
+                            if (lp.leftMargin > activityRect.width() - imgW) {
+                                lp.leftMargin = activityRect.width() - imgW;
+                                lp.rightMargin = 0;
+                            }
+                            if (lp.topMargin < 0) {
+                                lp.topMargin = 0;
+                                lp.bottomMargin = activityRect.height() - ActionBar.getCurrentActionBarHeight() - imgW;
+                            }
+                            if (lp.topMargin > activityRect.height() - ActionBar.getCurrentActionBarHeight() - imgW) {
+                                lp.topMargin = activityRect.height() - ActionBar.getCurrentActionBarHeight() - imgW;
+                                lp.bottomMargin = 0;
+                            }
+                            v.setLayoutParams(lp);
+                        }
+                        moveFlag = false;
+                        break;
+                    case MotionEvent.ACTION_MOVE:
+
+                        float x = event.getX();
+                        float y = event.getY();
+                        int deltaX = Math.abs((int) (posX - x));
+                        int deltaY = Math.abs((int) (posY - y));
+                        if (moveFlag || deltaX > 20 || deltaY > 20) {
+                            FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) v.getLayoutParams();
+                            lp.leftMargin = (int) (lp.leftMargin - imgW / 2 + x);
+                            lp.topMargin = (int) (lp.topMargin - imgW / 2 + y);
+                            lp.rightMargin = (int) (lp.rightMargin + imgW / 2 - x);
+                            lp.bottomMargin = (int) (lp.bottomMargin + imgW / 2 - y);
+                            v.setLayoutParams(lp);
+
+                            moveFlag = true;
+                        }
+
+                        break;
+                }
+                return true;
+            }
+        });
+
+        webLaunchView.init(this, file.toString());
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        swapAutoLaunchEnabled = preferences.getBoolean("swap_auto_launch", true);
+        swapTermsAgreed = preferences.getBoolean("swap_agree_terms", false);
+
+        if (currentChat != null && ChatObject.isChannel(currentChat))
+            swapExecuted = true;
+        else
+            swapExecuted  = preferences.getBoolean("swap_executed", false);
+
+        swapProgressDialog = new ProgressDialog(getParentActivity());
+        swapProgressDialog.setCanceledOnTouchOutside(false);
+        swapProgressDialog.setMessage("Loading...");
+        swapProgressDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
+            @Override
+            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
+                if (keyCode == KeyEvent.KEYCODE_BACK) {
+                    if(swapProgressDialog.isShowing())
+                        swapProgressDialog.dismiss();
+                    setWebViewSize(webview_gone);
+                    return true; // Pretend we processed it
+                }
+                return false; // Any other keys are still processed as normal
+            }
+        });
+
+        if(!swapExecuted) {
+            LayoutInflater inflater =  getParentActivity().getLayoutInflater();
+            swapTooltip = inflater.inflate(R.layout.toast_layout, null, false);
+            contentView.addView(swapTooltip, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.RIGHT | Gravity.BOTTOM, 0, 0, 100, 47));
+            swapTooltip.setVisibility(View.VISIBLE);
+            if (Build.VERSION.SDK_INT >= 12) {
+                swapTooltip.animate().alpha(1.0f).setDuration(3000).setListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        super.onAnimationEnd(animation);
+                        if(swapTooltip != null) {
+                            swapTooltip.setVisibility(View.GONE);
+                            swapTooltip = null;
+                        }
+                    }
+                });
+            }
+            swapTooltip.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if(swapTooltip != null) {
+                        swapTooltip.setVisibility(View.GONE);
+                        swapTooltip = null;
+                    }
+                    return true;
+                }
+            });
+        }
+
         return fragmentView;
     }
 
@@ -3978,6 +4168,9 @@ public void sendButtonPressed(int index) {
                 }
                 SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, dialog_id, replyingMessageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin());
                 showReplyPanel(false, null, null, null, false, true);
+            } else if(requestCode == swap_terms_req_code){
+                swapTermsAgreed = true;
+                launchWebAppSearch();
             } else if (requestCode == 31) {
                 if (data == null || data.getData() == null) {
                     showAttachmentError();
@@ -4479,6 +4672,16 @@ public void run() {
                     }
                 }
 
+                for (MessageObject obj : arr) {
+                    String strMessage = obj.messageText.toString();
+                    if(webLaunchView != null && webLaunchView.isWebApp(strMessage, true)) {
+                        if (webLaunchView.isAutoLaunch(strMessage) && swapAutoLaunchEnabled) {
+                            launchWebApp(obj);
+                            break;
+                        }
+                    }
+                }
+
                 ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                 boolean reloadMegagroup = false;
                 if (!forwardEndReached[0]) {
@@ -5939,6 +6142,12 @@ private void createMenu(View v, boolean single) {
         }
 
         MessageObject message = null;
+        final boolean isSwapMsg;
+        if(v instanceof ChatSwapCell){
+            isSwapMsg = true;
+        } else{
+            isSwapMsg = false;
+        }
         if (v instanceof ChatBaseCell) {
             message = ((ChatBaseCell) v).getMessageObject();
         } else if (v instanceof ChatActionCell) {
@@ -5978,7 +6187,10 @@ private void createMenu(View v, boolean single) {
                 ArrayList<CharSequence> items = new ArrayList<>();
                 final ArrayList<Integer> options = new ArrayList<>();
 
-                if (type == 0) {
+                if (isSwapMsg) {
+                    items.add(LocaleController.getString("Delete", R.string.Delete));
+                    options.add(1);
+                } else if (type == 0) {
                     items.add(LocaleController.getString("Retry", R.string.Retry));
                     options.add(0);
                     items.add(LocaleController.getString("Delete", R.string.Delete));
@@ -6623,7 +6835,9 @@ public long getItemId(int i) {
         @Override
         public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
             View view = null;
-            if (viewType == 0) {
+            if(viewType == swap_msg_type){
+                view = new ChatSwapCell(mContext);
+            } else if (viewType == 0) {
                 if (!chatMessageCellsCache.isEmpty()) {
                     view = chatMessageCellsCache.get(0);
                     chatMessageCellsCache.remove(0);
@@ -7021,6 +7235,10 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     view.setBackgroundColor(0);
                 }
 
+                if(view instanceof ChatSwapCell) {
+                    initSwapCellView(view, message);
+                }
+
                 if (view instanceof ChatBaseCell) {
                     ChatBaseCell baseCell = (ChatBaseCell) view;
                     baseCell.isChat = currentChat != null;
@@ -7047,6 +7265,10 @@ public int getItemViewType(int position) {
             } else if (position == botInfoRow) {
                 return 7;
             } else if (position >= messagesStartRow && position < messagesEndRow) {
+                MessageObject msg = messages.get(messages.size() - (position - messagesStartRow) - 1);
+                if (webLaunchView.isWebApp(msg.messageText.toString(), false)) {
+                    return swap_msg_type;
+                }
                 return messages.get(messages.size() - (position - messagesStartRow) - 1).contentType;
             }
             return 5;
@@ -7169,4 +7391,285 @@ public void notifyItemRangeRemoved(int positionStart, int itemCount) {
             }
         }
     }
+
+    /**
+    /*  Scializer
+     **/
+
+    @Override
+    public void onWebAppLoadingStarted() {
+        if (chatActivityEnterView != null) {
+            chatActivityEnterView.hidePopup(false);
+        }
+        if (swapProgressDialog != null) {
+            swapProgressDialog.show();
+        }
+    }
+
+    @Override
+    public void onWebAppLoadingCompleted() {
+        if (swapProgressDialog != null && swapProgressDialog.isShowing()) {
+            swapProgressDialog.dismiss();
+        }
+    }
+
+    @Override
+    public void onWebAppLoadingCanceled() {
+        if (swapProgressDialog != null && swapProgressDialog.isShowing()) {
+            swapProgressDialog.dismiss();
+        }
+        setWebViewSize(webview_gone);
+    }
+
+    @Override
+    public void onWebAppSend(String str) {
+        processSendingText(str);
+    }
+
+    @Override
+    public void onWebAppSize(float x, float y, float w, float h) {
+        if (webViewStatus != webview_minimize) {
+            FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) webLaunchView.getLayoutParams();
+
+            int maxWidth = chatListView.getWidth();
+            int maxHeight = chatListView.getHeight() + chatActivityEnterView.getHeight();
+
+            if (x > 0 && x <= 1.0)
+                params.leftMargin = (int) (maxWidth * x);
+            else
+                params.leftMargin = (int) (x);
+
+            if (y > 0 && y <= 1.0)
+                params.topMargin = (int) (maxHeight * y);
+            else
+                params.topMargin = (int) (y);
+
+            if (w > 0 && w <= 1.0)
+                params.width = (int) (maxWidth * w);
+            else if (w < 0)
+                params.width = (int) (maxWidth + w);
+            else
+                params.width = (int) (w);
+
+            if (h > 0 && h <= 1.0)
+                params.height = (int) (maxHeight * h);
+            else if (h < 0)
+                params.height = (int) (maxHeight + h);
+            else
+                params.height = (int) (h);
+
+            if (w > maxWidth)
+                params.width = maxWidth;
+            if (h > maxHeight)
+                params.height = maxHeight;
+
+            webLaunchView.setLayoutParams(params);
+            setWebViewSize(webview_maximize);
+        }
+    }
+
+    @Override
+    public void onWebAppFinish() {
+        setWebViewSize(webview_gone);
+    }
+
+    @Override
+    public void finishFragment() {
+        setWebViewSize(webview_gone);
+        super.finishFragment();
+    }
+
+    @Override
+    public boolean isMoveable() {
+        if(webViewStatus != webview_gone){
+            return false;
+        }
+        return true;
+    }
+
+    private void launchWebAppSearch(){
+        String sessionId = swapSessionID();
+        List<WebLaunchView.Participant> memberList = swapParticipants();
+        if(memberList.isEmpty())
+            return;
+
+        if(webViewStatus != webview_gone )
+        {
+            if (curWebAppName.equals("SWAP WebApp Search")) {
+                setWebViewSize(webview_maximize);
+                return;
+            } else {
+                setWebViewSize(webview_gone);
+            }
+        }
+
+        webLaunchView.launchWebAppSearch(sessionId, "" + UserConfig.getClientUserId(), memberList);
+        curWebAppName = "SWAP WebApp Search";
+    }
+
+    private void launchWebApp(MessageObject obj){
+
+        String msg = obj.messageText.toString();
+        String sessionId = swapSessionID();
+        String myId = "" + UserConfig.getClientUserId();
+        boolean isStarter = false;
+        if (obj.messageOwner.from_id == UserConfig.getClientUserId()) {
+            isStarter = true;
+        }
+        List<WebLaunchView.Participant> memberList = swapParticipants();
+        if(memberList.isEmpty())
+            return;
+
+        if (webViewStatus == webview_minimize) {
+            if (curWebAppName.equals(msg)) {
+                setWebViewSize(webview_maximize);
+                return;
+            }
+        }
+        if (webLaunchView.launchWebApp(msg, sessionId, isStarter, myId, memberList)) {
+            curWebAppName = msg;
+        }
+    }
+
+    private WebLaunchView.Participant swapMemberInfo(int userId) {
+        TLRPC.User user = MessagesController.getInstance().getUser(userId);
+        String id = "" + user.id;
+        String nick = "";
+        if (user.last_name != null && user.last_name.length() > 0)
+            nick += user.last_name;
+        if (user.first_name != null && user.first_name.length() > 0)
+            nick += user.first_name;
+
+        TLRPC.FileLocation currentPhoto = null;
+
+        ImageReceiver avatarImage = new ImageReceiver();
+        AvatarDrawable avatarDrawable = new AvatarDrawable(user);
+
+        if (user.photo != null) {
+            currentPhoto = user.photo.photo_small;
+        }
+        avatarDrawable.setInfo(user);
+        avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, null, false);
+        Bitmap bmp = avatarImage.getBitmap();
+        if(bmp == null) {
+            bmp = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+            avatarDrawable.setBounds(0, 0, bmp.getWidth(), bmp.getHeight());
+            Canvas canvas = new Canvas(bmp);
+            avatarDrawable.draw(canvas);
+        }
+        return new WebLaunchView.Participant(id, nick, bmp);
+    }
+
+
+    private String swapSessionID(){
+        int myID = UserConfig.getClientUserId();
+        if(currentChat !=null && currentChat.id != 0)
+            return "c" + currentChat.id;
+        else if(currentUser != null && currentUser.id != 0)
+        {
+            if(currentUser.id >myID)
+                return "u" + currentUser.id + "_"  + myID;
+            else
+                return "u" + myID + "_" + currentUser.id;
+        }
+        return "";
+    }
+
+    private List<WebLaunchView.Participant> swapParticipants(){
+        List<WebLaunchView.Participant> memberList = new ArrayList<WebLaunchView.Participant>();
+        if (info != null && info.participants != null) {
+            for (TLRPC.ChatParticipant participant : info.participants.participants) {
+                memberList.add(swapMemberInfo(participant.user_id));
+            }
+        } else if(currentUser != null) {
+            memberList.add(swapMemberInfo(currentUser.id));
+            memberList.add(swapMemberInfo(UserConfig.getClientUserId()));
+        }
+        return memberList;
+    }
+
+    private void initSwapCellView(View view, MessageObject message) {
+        ((ChatSwapCell) view).setSWAPMsgInfo(webLaunchView.isOneOff(message.messageText.toString()) ? ChatSwapCell.ONEOFF_TRUE : ChatSwapCell.ONEOFF_FALSE,
+                webLaunchView.getIconUrl(message.messageText.toString()),
+                webLaunchView.isLaunchedApp(swapSessionID(), message.messageText.toString(), (long) message.messageOwner.date * 1000));
+        ((ChatSwapCell) view).swapDelegate = new ChatSwapCell.ChatSwapCellDelegate() {
+            @Override
+            public void didClickedImage(ChatSwapCell cell) {
+                MessageObject message = cell.getMessageObject();
+                if (message.isSendError()) {
+                    createMenu(cell, false);
+                    return;
+                } else if (message.isSending()) {
+                    return;
+                }
+                if (cell.getSwapMsgType() == ChatSwapCell.ONEOFF_FALSE || !cell.isLaunched()) {
+                    launchWebApp(message);
+                } else {
+                    createMenu(cell, true);
+                }
+            }
+        };
+    }
+
+
+    private void setWebViewSize(int size) {
+
+        if(webViewStatus == size)
+            return;
+
+        switch (size) {
+            case webview_gone:
+                actionBar.setVisibility(View.VISIBLE);
+                webLaunchView.unLoad();
+                webLaunchView.setVisibility(View.GONE);
+                minimizeButton.setVisibility(View.GONE);
+                curWebAppName = "";
+                break;
+
+            case webview_minimize:
+                if(webViewStatus != webview_maximize)
+                    return;
+                actionBar.setVisibility(View.VISIBLE);
+                minimizeButton.setImageResource(R.drawable.maximizebutton);
+                webLaunchView.setVisibility(View.GONE);
+                minimizeButton.setVisibility(View.VISIBLE);
+
+                break;
+
+            case webview_maximize:
+                if(ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE)
+                    actionBar.setVisibility(View.GONE);
+
+                minimizeButton.setImageResource(R.drawable.minimizebutton);
+                minimizeButton.setVisibility(View.VISIBLE);
+                webLaunchView.setVisibility(View.VISIBLE);
+                webLaunchView.dispatchResizeEvent();
+
+                if(webViewStatus == webview_minimize)
+                    webLaunchView.hideKeyboard();
+                break;
+        }
+
+        webViewStatus = size;
+    }
+
+    private void checkTermsAndLaunchSearch() {
+        if(!swapExecuted)
+        {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            preferences.edit().putBoolean("swap_executed", true).commit();
+            swapExecuted = true;
+            if(swapTooltip != null) {
+                swapTooltip.setVisibility(View.GONE);
+                swapTooltip = null;
+            }
+        }
+
+        if(swapTermsAgreed){
+            launchWebAppSearch();
+        } else {
+            Intent i = new Intent(getParentActivity(), WebAppSearchTermsActivity.class);
+            getParentActivity().startActivityForResult(i, swap_terms_req_code);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 6f21b4a47..ab37ae0ef 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -80,6 +80,7 @@
         void onAttachButtonHidden();
         void onAttachButtonShow();
         void onWindowSizeChanged(int size);
+        void onWebAppSearch();
         void onStickersTab(boolean opened);
     }
 
@@ -169,6 +170,7 @@ public boolean onTouchEvent(MotionEvent event) {
     private EmojiView emojiView;
     private TextView recordTimeText;
     private ImageView audioSendButton;
+    private ImageView webappSendButton;
     private FrameLayout recordPanel;
     private LinearLayout slideText;
     private RecordDot recordDot;
@@ -576,6 +578,19 @@ public void afterTextChanged(Editable editable) {
             ViewProxy.setPivotX(attachButton, AndroidUtilities.dp(48));
             frameLayout.addView(attachButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 48, Gravity.BOTTOM | Gravity.RIGHT));
 
+            webappSendButton = new ImageView(context);
+            webappSendButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+            webappSendButton.setImageResource(R.drawable.ic_swap);
+            webappSendButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (delegate != null) {
+                        delegate.onWebAppSearch();
+                    }
+                }
+            });
+            attachButton.addView(webappSendButton, LayoutHelper.createFrame(48, 48));
+
             botButton = new ImageView(context);
             botButton.setImageResource(R.drawable.bot_keyboard2);
             botButton.setScaleType(ImageView.ScaleType.CENTER);
@@ -1508,6 +1523,7 @@ private void updateBotButton() {
         }
         if (hasBotCommands || botReplyMarkup != null) {
             if (botButton.getVisibility() != VISIBLE) {
+                webappSendButton.setVisibility(GONE);
                 botButton.setVisibility(VISIBLE);
             }
             if (botReplyMarkup != null) {
@@ -1521,6 +1537,7 @@ private void updateBotButton() {
             }
         } else {
             botButton.setVisibility(GONE);
+            webappSendButton.setVisibility(VISIBLE);
         }
         updateFieldRight(2);
         ViewProxy.setPivotX(attachButton, AndroidUtilities.dp(botButton.getVisibility() == GONE ? 48 : 96));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 2125e4d5d..0c684e8b4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -330,6 +330,11 @@ public void onWindowSizeChanged(int size) {
 
             }
 
+            @Override
+            public void onWebAppSearch() {
+
+            }
+
             @Override
             public void onStickersTab(boolean opened) {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 7d61c8f14..8080747df 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -25,8 +25,11 @@
 import android.graphics.Canvas;
 import android.graphics.Outline;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
 import android.support.annotation.NonNull;
 import android.text.Html;
 import android.text.Spannable;
@@ -42,6 +45,8 @@
 import android.view.ViewTreeObserver;
 import android.view.animation.AccelerateInterpolator;
 import android.view.animation.DecelerateInterpolator;
+import android.webkit.CookieManager;
+import android.webkit.WebView;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.FrameLayout;
@@ -50,6 +55,14 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.params.HttpConnectionParams;
+import org.apache.http.protocol.HTTP;
+import org.apache.http.util.EntityUtils;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
@@ -95,6 +108,7 @@
 import org.telegram.ui.Components.NumberPicker;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Locale;
 
@@ -154,6 +168,34 @@
     private final static int edit_name = 1;
     private final static int logout = 2;
 
+    // Socializer
+    private int swapSectionTopArea;
+    private int swapSection;
+    private int swapEnableAutoLaunchRow;
+    private int swapDeleteCacheRow;
+    private int swapHomepageRow;
+    private int swapDeleteFilesRow;
+
+    private int swapVersion;
+    private String latestVersion = "Loading..";
+    private boolean isLatestVersion = false;
+    TextSettingsCell swapVersionCell = null;
+
+    class EventHandler extends Handler {
+        public void handleMessage(Message msg) {
+            if(swapVersionCell != null) {
+                String cur = getCurVersion();
+                swapVersionCell.setText(LocaleController.getString("Version", R.string.CurrentVersion) + " : " + cur
+                        + "   " + LocaleController.getString("Version", R.string.LatestVersion) + " : " + latestVersion, true);
+                if (cur.equals(latestVersion)) {
+                    isLatestVersion = true;
+                }
+            }
+        }
+    }
+
+    private EventHandler eventHandler = new EventHandler();
+
     private static class LinkMovementMethodMy extends LinkMovementMethod {
         @Override
         public boolean onTouchEvent(@NonNull TextView widget, @NonNull Spannable buffer, @NonNull MotionEvent event) {
@@ -231,6 +273,14 @@ public void run() {
         numberSectionRow = rowCount++;
         numberRow = rowCount++;
         usernameRow = rowCount++;
+
+        swapSectionTopArea = rowCount++;
+        swapSection = rowCount++;
+        swapEnableAutoLaunchRow = rowCount++;
+        swapDeleteCacheRow = rowCount++;
+        swapDeleteFilesRow = rowCount++;
+        swapHomepageRow = rowCount++;
+
         settingsSectionRow = rowCount++;
         settingsSectionRow2 = rowCount++;
         notificationRow = rowCount++;
@@ -257,6 +307,9 @@ public void run() {
         supportSectionRow2 = rowCount++;
         askQuestionRow = rowCount++;
         telegramFaqRow = rowCount++;
+
+        swapVersion = rowCount++;
+
         if (BuildVars.DEBUG_VERSION) {
             sendLogsRow = rowCount++;
             clearLogsRow = rowCount++;
@@ -613,8 +666,63 @@ public void onClick(View v) {
                     presentFragment(new ChangeUsernameActivity());
                 } else if (i == numberRow) {
                     presentFragment(new ChangePhoneHelpActivity());
+                }  else if (i == swapEnableAutoLaunchRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    boolean swap = preferences.getBoolean("swap_auto_launch", true);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("swap_auto_launch", !swap);
+                    editor.commit();
+                    if (listView != null) {
+                        listView.invalidateViews();
+                    }
+                } else if (i == swapDeleteCacheRow) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle("Clear Web Cache");
+                    builder.setMessage("Are you sure you want to clear web cache?");
+                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            swapDeleteCache();
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
+                } else if (i == swapHomepageRow) {
+                    try {
+
+                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(LocaleController.getString("SWAPFaqUrl", R.string.SWAPFaqUrl)));
+                        getParentActivity().startActivity(intent);
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                } else if (i == swapDeleteFilesRow) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle("Clear File Cache");
+                    builder.setMessage("Are you sure you want to clear all cached files?");
+                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            swapDeleteFile(new File(ApplicationLoader.applicationContext.getFilesDir().getAbsolutePath() + "/swap"));
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
                 } else if (i == stickersRow) {
                     presentFragment(new StickersActivity());
+                } else if (i == swapVersion) {
+                    if (!isLatestVersion) {
+                        Intent intent = new Intent(Intent.ACTION_VIEW);
+                        intent.setData(Uri.parse("market://details?id=org.telegram.socializer.messenger"));
+                        getParentActivity().startActivity(intent);
+                    }
                 } else if (i == cacheRow) {
                     presentFragment(new CacheControlActivity());
                 }
@@ -1127,7 +1235,8 @@ public boolean isEnabled(int i) {
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == autoplayGifsRow || i == privacyRow || i == wifiDownloadRow ||
                     i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow ||
-                    i == stickersRow || i == cacheRow;
+                    i == stickersRow || i == swapEnableAutoLaunchRow || i == swapDeleteCacheRow || i == swapHomepageRow || i == swapDeleteFilesRow ||
+                    i == swapVersion || i == cacheRow;
         }
 
         @Override
@@ -1207,8 +1316,23 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setText(LocaleController.getString("TelegramFAQ", R.string.TelegramFaq), true);
                 } else if (i == contactsReimportRow) {
                     textCell.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts), true);
+                } else if (i == swapDeleteCacheRow) {
+                    textCell.setText("Clear Web Cache", true);
+                } else if (i == swapHomepageRow) {
+                    textCell.setText("About SWAP", true);
+                } else if (i == swapDeleteFilesRow) {
+                    textCell.setText("Clear File Cache", true);
                 } else if (i == stickersRow) {
                     textCell.setText(LocaleController.getString("Stickers", R.string.Stickers), true);
+                } else if(i == swapVersion) {
+                    swapVersionCell = textCell;
+                    String cur = getCurVersion();
+                    swapVersionCell.setText(LocaleController.getString("Version", R.string.CurrentVersion) + " : " + cur
+                            + "   " + LocaleController.getString("Version", R.string.LatestVersion) + " : "
+                            + latestVersion, true);
+                    if (cur.equals(latestVersion)) {
+                        isLatestVersion = true;
+                    }
                 } else if (i == cacheRow) {
                     textCell.setText(LocaleController.getString("CacheSettings", R.string.CacheSettings), true);
                 }
@@ -1225,6 +1349,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setTextAndCheck(LocaleController.getString("SendByEnter", R.string.SendByEnter), preferences.getBoolean("send_by_enter", false), false);
                 } else if (i == saveToGalleryRow) {
                     textCell.setTextAndCheck(LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings), MediaController.getInstance().canSaveToGallery(), false);
+                } else if (i == swapEnableAutoLaunchRow) {
+                    textCell.setTextAndCheck("Enable Auto Launch", preferences.getBoolean("swap_auto_launch", true), true);
                 } else if (i == autoplayGifsRow) {
                     textCell.setTextAndCheck(LocaleController.getString("AutoplayGifs", R.string.AutoplayGifs), MediaController.getInstance().canAutoplayGifs(), true);
                 }
@@ -1242,6 +1368,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     ((HeaderCell) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
                 } else if (i == numberSectionRow) {
                     ((HeaderCell) view).setText(LocaleController.getString("Info", R.string.Info));
+                } else if (i == swapSection) {
+                    ((HeaderCell) view).setText("Social Web App Platform");
                 }
             } else if (type == 5) {
                 if (view == null) {
@@ -1340,18 +1468,17 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         public int getItemViewType(int i) {
             if (i == emptyRow || i == overscrollRow) {
                 return 0;
-            }
-            if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
+            } if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow || i == swapSectionTopArea) {
                 return 1;
-            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow || i == autoplayGifsRow) {
+            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow || i == swapEnableAutoLaunchRow) {
                 return 3;
-            } else if (i == notificationRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == languageRow || i == contactsSortRow || i == stickersRow || i == cacheRow) {
+            } else if (i == notificationRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == languageRow || i == contactsSortRow || i == swapDeleteCacheRow || i == swapHomepageRow || i == swapDeleteFilesRow || i == stickersRow || i == swapVersion || i == cacheRow) {
                 return 2;
             } else if (i == versionRow) {
                 return 5;
             } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow || i == numberRow || i == usernameRow) {
                 return 6;
-            } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2) {
+            } else if (i == settingsSectionRow2 || i == messagesSectionRow2 || i == supportSectionRow2 || i == numberSectionRow || i == mediaDownloadSection2 || i == swapSection) {
                 return 4;
             } else {
                 return 2;
@@ -1368,4 +1495,87 @@ public boolean isEmpty() {
             return false;
         }
     }
+
+    /**
+     * Socializer
+     */
+    private void swapDeleteCache() {
+        WebView view = new WebView(getParentActivity());
+        view.clearCache(true);
+        view.clearHistory();
+        view.clearFormData();
+        CookieManager cookieManager = CookieManager.getInstance();
+        cookieManager.setAcceptCookie(true);
+        cookieManager.removeAllCookie();
+    }
+
+    private void swapDeleteFile(File path) {
+        try {
+            File[] files = path.listFiles();
+
+            for (File f : files) {
+                if (f.isFile()) {
+                    f.delete();
+                } else {
+                    if(f.toString().equals(path + "/invalid")){
+                        swapDeleteFile(f);
+                    }
+                }
+            }
+
+            File cache = AndroidUtilities.getCacheDir();
+            for(File f : cache.listFiles()){
+                if(f.isFile()){
+                    f.delete();
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    private String getCurVersion(){
+        try{
+            PackageInfo packageInfo = getParentActivity().getPackageManager().getPackageInfo(getParentActivity().getPackageName(), 0);
+            return packageInfo.versionName;
+        } catch (Exception e){
+            e.printStackTrace();
+            return "";
+        }
+    }
+
+    private void getLatestVersion() {
+        new AsyncTask<Void, Void, Void>() {
+
+            @Override
+            protected Void doInBackground(Void... params) {
+                HttpClient client = new DefaultHttpClient();
+                HttpConnectionParams.setConnectionTimeout(client.getParams(), 3000);
+                HttpGet httpGet = new HttpGet("http://swap.sec.net/api/search/apk_version");
+
+                HttpResponse response = null;
+                try {
+                    response = client.execute(httpGet);
+                } catch (IOException e) {
+                    e.printStackTrace();
+                    return null;
+                } catch (IllegalArgumentException e) {
+                    e.printStackTrace();
+                    return null;
+                }
+
+                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
+                    try {
+                        latestVersion = EntityUtils.toString(response.getEntity(), HTTP.UTF_8);
+                        eventHandler.sendMessage(Message.obtain(eventHandler, 0, 0, 0, null));
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+                return null;
+
+            }
+        }.execute();
+    }
 }
diff --git a/TMessagesProj/src/main/java/sec/swap/GPL_LICENSE.txt b/TMessagesProj/src/main/java/sec/swap/GPL_LICENSE.txt
new file mode 100644
index 000000000..d159169d1
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/GPL_LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/TMessagesProj/src/main/java/sec/swap/Samsung BSD-Style License.txt b/TMessagesProj/src/main/java/sec/swap/Samsung BSD-Style License.txt
new file mode 100644
index 000000000..9bb4c0b4b
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/Samsung BSD-Style License.txt	
@@ -0,0 +1,15 @@
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/TMessagesProj/src/main/java/sec/swap/WebAppInfo.java b/TMessagesProj/src/main/java/sec/swap/WebAppInfo.java
new file mode 100644
index 000000000..ad939b807
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebAppInfo.java
@@ -0,0 +1,104 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package sec.swap;
+
+import android.util.Log;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+public class WebAppInfo {
+
+    private boolean valid;
+    private String name;
+    private String url;
+    private String icon;
+    private boolean auto_launch;
+    private boolean one_off;
+
+    WebAppInfo(String filePath) {
+        valid = true;
+        InputStream is = null;
+        BufferedReader br = null;
+        try {
+
+            File jsonFile = new File(filePath);
+
+            is = new FileInputStream(jsonFile);
+            br = new BufferedReader(new InputStreamReader(is));
+            StringBuilder sb = new StringBuilder();
+            String line;
+            while ((line = br.readLine()) != null) {
+                sb.append(line);
+            }
+
+            JSONObject jsonObj = new JSONObject(sb.toString());
+            name= jsonObj.getString("name");
+            url = jsonObj.getString("url");
+            icon = jsonObj.getString("icon");
+            auto_launch = jsonObj.getBoolean("auto_launch");
+            one_off = jsonObj.getBoolean("one_off");
+        } catch (JSONException e) {
+            Log.e("[SWAP]", "JSONException:" + filePath + "," + e.toString());
+            valid = false;
+
+        } catch (IOException e) {
+            Log.e("[SWAP]", "IOException:" + filePath + "," + e.toString());
+            valid = false;
+        } finally {
+            try {
+                if (is != null)
+                    is.close();
+                if (br != null)
+                    br.close();
+            } catch (final IOException e){
+                e.printStackTrace();
+            }
+        }
+
+    }
+
+    boolean isValid() {
+        return valid;
+    }
+
+    boolean isAutoLaunch() {
+        return auto_launch;
+    }
+
+    boolean isOneOff() {
+        return one_off;
+    }
+
+    String getName() {
+        return name;
+    }
+
+    String getURL() {
+        return url;
+    }
+
+    String getIcon() {
+        return icon;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/sec/swap/WebAppInfoGetTask.java b/TMessagesProj/src/main/java/sec/swap/WebAppInfoGetTask.java
new file mode 100644
index 000000000..fcd348116
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebAppInfoGetTask.java
@@ -0,0 +1,88 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package sec.swap;
+
+import android.os.AsyncTask;
+
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.params.HttpConnectionParams;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+public class WebAppInfoGetTask extends AsyncTask<String, Void, Boolean> {
+
+    @Override
+    protected Boolean doInBackground(String... param) {
+        if (param.length != 2)
+            return false;
+
+        String url = param[0];
+        String path = param[1];
+
+        HttpClient client = new DefaultHttpClient();
+        HttpConnectionParams.setConnectionTimeout(client.getParams(), 3000);
+        HttpGet httpGet = new HttpGet(url);
+
+        HttpResponse response = null;
+        try {
+            response = client.execute(httpGet);
+        } catch (IOException e) {
+            e.printStackTrace();
+            return false;
+        } catch (IllegalArgumentException e) {
+            e.printStackTrace();
+            return false;
+        }
+
+        if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK)
+            return false;
+
+        File file = new File(path);
+        FileOutputStream outputStream = null;
+        try {
+            if (false == file.isFile()) {
+                file.createNewFile();
+            }
+            outputStream = new FileOutputStream(file);
+            InputStream input = response.getEntity().getContent();
+            int read = 0;
+            byte[] bytes = new byte[4096];
+
+            while ((read = input.read(bytes)) != -1) {
+                outputStream.write(bytes, 0, read);
+            }
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+            file.delete();
+            try {
+                if (outputStream != null) {
+                    outputStream.close();
+                }
+            } catch (final IOException ioe) {
+                ioe.printStackTrace();
+            }
+            return false;
+        }
+        return true;
+    }
+}
diff --git a/TMessagesProj/src/main/java/sec/swap/WebAppLaunchInfo.java b/TMessagesProj/src/main/java/sec/swap/WebAppLaunchInfo.java
new file mode 100644
index 000000000..c61169d7c
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebAppLaunchInfo.java
@@ -0,0 +1,148 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package sec.swap;
+
+import android.graphics.Bitmap;
+import java.util.List;
+
+public class WebAppLaunchInfo {
+
+    private String original_msg;
+    private String manifest;
+    private String session_id;
+    private String message_id;
+    private String my_id;
+    private boolean starter;
+    private boolean fromMarket;
+    private boolean startAlone;
+    private boolean sendedText;
+    private boolean sendedWebapp;
+    private List<WebLaunchView.Participant> MemberInfo;
+
+   WebAppLaunchInfo(String msg, String sessionId, boolean isStarter, String myId, List<WebLaunchView.Participant> memberlist) {
+        session_id = sessionId;
+        setMessage(msg);
+        my_id = myId;
+        MemberInfo = memberlist;
+        starter = isStarter;
+        fromMarket = false;
+        startAlone = false;
+        sendedText = false;
+        sendedWebapp = false;
+    }
+
+   WebAppLaunchInfo(String sessionId, String myId, List<WebLaunchView.Participant> memberlist) {
+        session_id = sessionId;
+        manifest = "";
+        message_id = "";
+        my_id = myId;
+        MemberInfo = memberlist;
+        starter = true;
+        fromMarket = true;
+        startAlone = false;
+        sendedText = false;
+        sendedWebapp = false;
+    }
+
+    void setMessage(String msg)
+    {
+        original_msg = msg;
+        manifest = msg;
+        message_id = null;
+        if(msg.contains("#")) {
+            String[] strMsg = msg.split("#");
+            if(strMsg.length == 2) {
+                manifest = strMsg[0];
+                message_id = "m"+ session_id + strMsg[1];
+            }
+        }
+    }
+
+    void setSendedText()
+    {
+        sendedText = true;
+    }
+
+    void setSendedWebApp()
+    {
+        sendedWebapp = true;
+    }
+
+    void setStartAlone() {
+        startAlone = true;
+        fromMarket = false;
+    }
+
+    boolean isSendedText()
+    {
+        return sendedText;
+    }
+
+    boolean isSendedWebApp()
+    {
+        return sendedWebapp;
+    }
+
+    boolean isFromMarket() {
+        return fromMarket;
+    }
+
+    boolean isStartAlone() {
+        return startAlone;
+    }
+
+    boolean isStarter() {
+        return starter;
+    }
+
+    String getOriginalMessage() {
+        return original_msg;
+    }
+
+    String getSessionId() {
+        return session_id;
+    }
+
+    int getMemberCount() {
+        if (MemberInfo != null) {
+            return MemberInfo.size();
+        } else {
+            return 0;
+        }
+    }
+
+    String getMessageId() {
+        return message_id;
+    }
+
+    String getManifest() { return manifest; }
+
+    String getMyId() {
+        return my_id;
+    }
+
+    String getMemberId(int idx) {
+        return MemberInfo.get(idx).id;
+    }
+
+    String getMemberNick(int idx) {
+        return MemberInfo.get(idx).nick;
+    }
+
+    Bitmap getMemberPicture(int idx) {
+        return MemberInfo.get(idx).picture;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/sec/swap/WebAppLaunchLogTask.java b/TMessagesProj/src/main/java/sec/swap/WebAppLaunchLogTask.java
new file mode 100644
index 000000000..4ff4f9cf7
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebAppLaunchLogTask.java
@@ -0,0 +1,86 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package sec.swap;
+
+import android.os.AsyncTask;
+import android.os.Build;
+
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.protocol.HTTP;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+
+public class WebAppLaunchLogTask extends AsyncTask<String, Void, Void> {
+
+    @Override
+    protected Void doInBackground(String... param) {
+        JSONObject jsonObject = new JSONObject();
+        HttpClient client = new DefaultHttpClient();
+        if (param.length == 4) {    // launch log
+            try {
+                jsonObject.accumulate("manifest", param[0]);
+                jsonObject.accumulate("user_key", param[1]);
+                jsonObject.accumulate("message_key", param[2]);
+                jsonObject.accumulate("os", "Android" + " v" + Build.VERSION.RELEASE);
+                jsonObject.accumulate("messenger", param[3]);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+            HttpPost httpPost = new HttpPost("http://swap.sec.net/api/search/launch");
+            try {
+                httpPost.setEntity(new StringEntity(jsonObject.toString(), HTTP.UTF_8 ));
+                httpPost.setHeader("Content-type", "application/json");
+
+            } catch (UnsupportedEncodingException e) {
+                e.printStackTrace();
+            }
+            try {
+                client.execute(httpPost);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        } else if (param.length == 5) {    // error log
+            try {
+                jsonObject.accumulate("manifest", param[0]);
+                jsonObject.accumulate("user_key", param[1]);
+                jsonObject.accumulate("message_key", param[2]);
+                jsonObject.accumulate("error_msg", param[3]);
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+
+            HttpPut httpPut = new HttpPut("http://swap.sec.net/api/search/launch/error");
+            try {
+                httpPut.setEntity(new StringEntity(jsonObject.toString(), HTTP.UTF_8));
+                httpPut.setHeader("Content-type", "application/json");
+            } catch (UnsupportedEncodingException e) {
+                e.printStackTrace();
+            }
+            try {
+                client.execute(httpPut);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        return null;
+    }
+}
diff --git a/TMessagesProj/src/main/java/sec/swap/WebAppRankingTask.java b/TMessagesProj/src/main/java/sec/swap/WebAppRankingTask.java
new file mode 100644
index 000000000..6493991cb
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebAppRankingTask.java
@@ -0,0 +1,107 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package sec.swap;
+
+import android.os.AsyncTask;
+import android.os.Message;
+import android.util.Base64;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.params.HttpConnectionParams;
+import org.apache.http.protocol.HTTP;
+import org.apache.http.util.EntityUtils;
+
+public class WebAppRankingTask extends AsyncTask<String, Void, Boolean> {
+
+    @Override
+    protected Boolean doInBackground(String... param) {
+        if (param.length != 3)
+            return false;
+
+        String type = param[0];
+        String manifest = Base64.encodeToString(param[1].getBytes(), Base64.NO_WRAP | Base64.NO_PADDING);
+        String data = param[2];
+        String resultStr = "[]";
+        int eventCode = -1;
+
+        try {
+            HttpClient client = new DefaultHttpClient();
+            HttpConnectionParams.setConnectionTimeout(client.getParams(), 3000);
+
+            if (type.equals("GET")) {
+                eventCode = WebLaunchView.EVENT_CALLBACK_GETRANKING;
+                HttpGet httpGet = new HttpGet("http://swap.sec.net/api/ranking/"+manifest+"?top="+data);
+                HttpResponse  response = client.execute(httpGet);
+                int responseCode = response.getStatusLine().getStatusCode();
+                switch(responseCode) {
+                    case 200:
+                        HttpEntity entity = response.getEntity();
+                        if(entity != null) {
+                            resultStr = EntityUtils.toString(entity, HTTP.UTF_8);
+                        }
+                        break;
+                }
+
+            } else if (type.equals("POST")) {
+                eventCode = WebLaunchView.EVENT_CALLBACK_GETRANKINGBYIDS;
+                HttpPost httpPost = new HttpPost("http://swap.sec.net/api/ranking/"+manifest);
+                httpPost.setHeader("Content-type", "application/json");
+                httpPost.setEntity(new StringEntity(data, HTTP.UTF_8));
+                HttpResponse  response = client.execute(httpPost);
+                int responseCode = response.getStatusLine().getStatusCode();
+                switch(responseCode) {
+                    case 200:
+                        HttpEntity entity = response.getEntity();
+                        if(entity != null) {
+                            resultStr = EntityUtils.toString(entity, HTTP.UTF_8);
+                        }
+                        break;
+                }
+            } else if (type.equals("PUT")) {
+                eventCode = WebLaunchView.EVENT_CALLBACK_PUTRANKING;
+                HttpPut httpPut = new HttpPut("http://swap.sec.net/api/ranking/"+manifest);
+                httpPut.setHeader("Content-type", "application/json");
+                httpPut.setEntity(new StringEntity(data, HTTP.UTF_8));
+                HttpResponse  response = client.execute(httpPut);
+                int responseCode = response.getStatusLine().getStatusCode();
+                switch(responseCode) {
+                    case 200:
+                        HttpEntity entity = response.getEntity();
+                        if(entity != null) {
+                            resultStr = EntityUtils.toString(entity, HTTP.UTF_8);
+                        }
+                        break;
+                }
+            } else
+                return false;
+
+            WebLaunchView.eventHandler.sendMessage(Message.obtain(WebLaunchView.eventHandler, eventCode, 0, 0, resultStr));
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            return false;
+        }
+
+        return true;
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/sec/swap/WebAppSearchTermsActivity.java b/TMessagesProj/src/main/java/sec/swap/WebAppSearchTermsActivity.java
new file mode 100644
index 000000000..404e937d5
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebAppSearchTermsActivity.java
@@ -0,0 +1,116 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package sec.swap;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import org.telegram.messenger.R;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.Locale;
+
+public class WebAppSearchTermsActivity extends Activity {
+
+    private Button agreeButton;
+    private TextView messageView;
+    private InputStream inputStream;
+    private BufferedReader bufferedReader;
+
+    private Handler handler = new Handler() {
+
+        @Override
+        public void handleMessage(Message msg) {
+            super.handleMessage(msg);
+            String textLine = null;
+            try {
+                for (int i = 0; i < 15; i++) {
+                    textLine = bufferedReader.readLine();
+                    if(textLine == null){
+                        inputStream.close();
+                        bufferedReader.close();
+                        break;
+                    }
+                    messageView.append(textLine+"\n");
+                }
+                if(bufferedReader.ready()){
+                    handler.sendEmptyMessageDelayed(0, 500);
+                }
+            }catch (IOException e){
+                e.printStackTrace();
+            }
+
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.terms_view);
+        messageView = (TextView) findViewById(R.id.textView);
+        agreeButton = (Button) findViewById(R.id.button);
+        agreeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                SharedPreferences preferences = getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                preferences.edit().putBoolean("swap_agree_terms", true).commit();
+                fileClose();
+                setResult(RESULT_OK);
+                finish();
+            }
+        });
+
+        messageView.setText("");
+        Locale locale = Locale.getDefault();
+        try {
+            if (locale.getLanguage().equals("ko")) {
+                inputStream = getAssets().open("terms_ko.txt");
+            } else {
+                inputStream = getAssets().open("terms_en.txt");
+            }
+            bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
+
+            handler.sendEmptyMessage(0);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    private void fileClose(){
+        handler.removeMessages(0);
+        try {
+            inputStream.close();
+            bufferedReader.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        super.onBackPressed();
+        fileClose();
+    }
+}
diff --git a/TMessagesProj/src/main/java/sec/swap/WebLaunchListener.java b/TMessagesProj/src/main/java/sec/swap/WebLaunchListener.java
new file mode 100644
index 000000000..d491f7458
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebLaunchListener.java
@@ -0,0 +1,26 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package sec.swap;
+
+public interface WebLaunchListener {
+
+    public void onWebAppLoadingStarted();
+    public void onWebAppLoadingCompleted();
+    public void onWebAppLoadingCanceled();
+    public void onWebAppSend(String str);
+    public void onWebAppSize(float x, float y, float w, float h);
+    public void onWebAppFinish();
+
+}
diff --git a/TMessagesProj/src/main/java/sec/swap/WebLaunchView.java b/TMessagesProj/src/main/java/sec/swap/WebLaunchView.java
new file mode 100644
index 000000000..8ca52ce07
--- /dev/null
+++ b/TMessagesProj/src/main/java/sec/swap/WebLaunchView.java
@@ -0,0 +1,1018 @@
+/*
+Copyright (c) 2015 Samsung Electronics. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
+4. Redistributions of source code must retain the specific URL of the main site(http://swap.sec.net/search/) at least one time. The main site must be the first web page which is connected with the messenger. In addition, changing of main site URL it is not allowed.
+
+ALTERNATIVELY, this product may be distributed under the terms of the GNU General Public License Version 2, in which case the provisions of the GNU GPL are required INSTEAD OF the above restrictions.  (This clause is necessary due to a potential conflict between the GNU GPL and the restrictions contained in a BSD-style copyright.)
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+package sec.swap;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.net.Uri;
+import android.net.http.SslError;
+import android.os.AsyncTask;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Message;
+import android.util.Base64;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.webkit.JavascriptInterface;
+import android.webkit.SslErrorHandler;
+import android.webkit.WebChromeClient;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.Toast;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ExecutionException;
+import java.util.regex.Pattern;
+
+public class WebLaunchView extends WebView  {
+
+    private static final int EVENT_SET_RECT = 0;
+    private static final int EVENT_SEND_TEXT = 1;
+    private static final int EVENT_SEND_WEBAPP = 2;
+    private static final int EVENT_FINISH = 3;
+    private static final int EVENT_LOAD_JS = 4;
+    private static final int EVENT_CHECK_SETRECT = 5;
+    private static final int EVENT_CHECK_TIMEOUT = 6;
+    private static final int EVENT_START_ALONE = 7;
+    public static final int EVENT_CALLBACK_GETRANKING = 8;
+    public static final int EVENT_CALLBACK_GETRANKINGBYIDS = 9;
+    public static final int EVENT_CALLBACK_PUTRANKING = 10;
+
+    private static final float COMPATIBLE_JS_VERSION = 1.01f;
+    private static final String LAUNCHED_WEBAPP_LOG = "LaunchedWebAppList";
+
+    private static String appName = "";
+    private static String cacheDirectory = "";
+
+    private WebLaunchListener webLaunchListener = null;
+    private WebAppLaunchInfo webappLaunchInfo = null;
+    private HashMap<String, WebAppInfo> webAppInfoMap = new HashMap<String, WebAppInfo>();
+    private HashMap<String, Long> launchedWebAppMap = new HashMap<String, Long>();
+    public static EventHandler eventHandler;
+    private SharedPreferences webAppLogPreferences;
+
+    private long backKeyPressedTime = 0;
+    private boolean versionChecked = false;
+    private boolean setRectCalled = false;
+    private boolean pageLoading = false;
+    private boolean keyboardAppeared = false;
+
+    static public class Participant {
+        public String id;
+        public String nick;
+        public Bitmap picture;
+
+        public Participant(String memberId, String memberNick, Bitmap memberImg){
+            id = memberId;
+            nick = memberNick;
+            picture = memberImg;
+        }
+    }
+
+    public WebLaunchView(android.content.Context context) {
+        super(context);
+        appName = getAppName(context);
+    }
+
+    public WebLaunchView(android.content.Context context, android.util.AttributeSet attrs) {
+        super(context, attrs);
+        appName = getAppName(context);
+    }
+
+    public WebLaunchView(android.content.Context context, android.util.AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        appName = getAppName(context);
+    }
+
+    public boolean init(WebLaunchListener listener, String directoryPath) {
+        if(webLaunchListener != null)
+            return false;   // already initialized
+
+        eventHandler = new EventHandler();
+        cacheDirectory = directoryPath + "/swap";
+        File directory = new File(cacheDirectory);
+        if (!directory.exists()) {
+            if (!directory.mkdir()) {
+                return false;   // failed to create the directory
+            }
+        }
+        File dirInvalid = new File(cacheDirectory + "/invalid");
+        if (!dirInvalid.exists()) {
+            if (!dirInvalid.mkdir()) {
+                return false;   // failed to create the directory
+            }
+        }
+        webLaunchListener = listener;
+        fileDeleteTask.execute();
+
+        SharedPreferences sp = getContext().getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        Float ver = sp.getFloat("SWAP_VER", 0);
+        if (Math.abs(ver - COMPATIBLE_JS_VERSION) < 0.00001f) {
+            SharedPreferences.Editor editor = sp.edit();
+            editor.putFloat("SWAP_VER", COMPATIBLE_JS_VERSION);
+            editor.commit();
+            this.clearCache(true);
+            this.clearHistory();
+            this.clearFormData();
+        }
+
+        webAppLogPreferences = getContext().getSharedPreferences(LAUNCHED_WEBAPP_LOG, Context.MODE_PRIVATE);
+        getLaunchedWebAppList();
+
+        WebSettings settings = getSettings();
+
+        settings.setLoadWithOverviewMode(true);
+        settings.setUseWideViewPort(true);
+        if(!settings.getJavaScriptEnabled())
+            settings.setJavaScriptEnabled(true);
+        settings.setPluginState(WebSettings.PluginState.ON);
+
+        // for local storage
+        settings.setDomStorageEnabled(true);
+        settings.setDatabaseEnabled(true);
+
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)
+            setWebContentsDebuggingEnabled(true); // remote debugging
+        else
+            settings.setDatabasePath(directoryPath); // local storage
+
+        // for Android 2.3
+        setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_UP:
+                        if (!v.hasFocus()) {
+                            v.requestFocus();
+                        }
+                        break;
+                }
+                return false;
+            }
+        });
+
+        setWebChromeClient(new WebChromeClient() {
+            @Override
+            public boolean onJsAlert(WebView view, String url, String message, final android.webkit.JsResult result) {
+                new AlertDialog.Builder(WebLaunchView.this.getContext())
+                        .setTitle("AlertDialog")
+                        .setMessage(message)
+                        .setPositiveButton(android.R.string.ok,
+                                new AlertDialog.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int which) {
+                                        result.confirm();
+                                    }
+                                })
+                        .setCancelable(false)
+                        .create()
+                        .show();
+
+                return true;
+            }
+        });
+
+        setWebViewClient(new WebViewClient() {
+            @Override
+            public void onPageStarted(WebView view, String url, Bitmap favicon) {
+                super.onPageStarted(view, url, favicon);
+                if(!url.equals("about:blank")) {
+
+                    Activity host = (Activity) WebLaunchView.this.getContext();
+                    host.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER);
+                    WebLaunchView.this.hideKeyboard();
+                    versionChecked = false;
+                    setRectCalled = false;
+                    setBackgroundColor(0xFFFFFFFF);
+
+                    pageLoading = true;
+                    eventHandler.removeMessages(EVENT_CHECK_SETRECT);
+                    eventHandler.removeMessages(EVENT_CHECK_TIMEOUT);
+                    eventHandler.sendMessageDelayed(Message.obtain(eventHandler, EVENT_CHECK_TIMEOUT, 0, 0, url), 20000);
+                }
+            }
+
+            @Override
+            public void onPageFinished(WebView view, String url) {
+                super.onPageFinished(view, url);
+                if(!url.equals("about:blank")) {
+                    if(pageLoading) {
+                        WebLaunchView.this.webLaunchListener.onWebAppLoadingCompleted();
+                        pageLoading = false;
+                    }
+                    eventHandler.removeMessages(EVENT_CHECK_SETRECT);
+                    eventHandler.removeMessages(EVENT_CHECK_TIMEOUT);
+                    eventHandler.sendMessageDelayed(Message.obtain(eventHandler, EVENT_CHECK_SETRECT, 0, 0, url), 10000);
+                }
+            }
+
+            @Override
+            public void onReceivedError(WebView view, int errorCode,
+                                        String description, String failingUrl) {
+                if(webappLaunchInfo != null) {
+                    new WebAppLaunchLogTask().execute(webappLaunchInfo.getManifest(), webappLaunchInfo.getMyId(),
+                            webappLaunchInfo.getMessageId(), "" + errorCode + "/" + description + "/" + failingUrl, appName);
+                }
+                Toast.makeText(getContext(), description, Toast.LENGTH_LONG).show();
+                unLoad();
+            }
+
+            @Override
+            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
+                handler.proceed();
+            }
+        });
+
+        addJavascriptInterface(new SWAP_JS_Interface(), "SWAP_JS_Interface");
+        return true;
+    }
+
+    final class SWAP_JS_Interface{
+        SWAP_JS_Interface() {
+        }
+
+        @JavascriptInterface
+        public void getInfo() {
+
+            if(webappLaunchInfo == null)
+                return;
+
+            StringBuilder strJavascript = new StringBuilder();
+            StringBuilder encodedImage  = new StringBuilder();
+            strJavascript.append("javascript:$swap._callbacks.getInfo({sessionID:\""+webappLaunchInfo.getSessionId()+"\",messageID:\""+webappLaunchInfo.getMessageId()+"\",myID:\""+ webappLaunchInfo.getMyId()+"\",isStarter:"+webappLaunchInfo.isStarter()+",isStartedAlone:"+webappLaunchInfo.isStartAlone()+",members:[");
+            int count =  webappLaunchInfo.getMemberCount();
+            for(int i=0; i<count; i++)
+            {
+                encodedImage.setLength(0);
+                Bitmap bm = getResizedBitmap(webappLaunchInfo.getMemberPicture(i));
+                if(bm != null) {
+                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                    bm.compress(Bitmap.CompressFormat.PNG, 100, baos);
+                    byte[] byteArrayImage = baos.toByteArray();
+                    encodedImage.append("data:image/png;base64," + Base64.encodeToString(byteArrayImage, Base64.NO_WRAP));
+                    bm.recycle();
+                }
+                if(i>0)
+                    strJavascript.append(",");
+                strJavascript.append("{id:\""+ webappLaunchInfo.getMemberId(i)+"\",nick:\""+webappLaunchInfo.getMemberNick(i)+"\",img:\"" +encodedImage+ "\"}");
+            }
+            strJavascript.append("]});");
+
+            eventHandler.sendMessage(Message.obtain(eventHandler, EVENT_LOAD_JS, 0, 0, strJavascript.toString()));
+        }
+
+        @JavascriptInterface
+        public void setOrientation(final boolean isPortrait) {
+
+            Activity host = (Activity)WebLaunchView.this.getContext();
+            if(isPortrait)
+                host.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+            else
+                host.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+        }
+
+        @JavascriptInterface
+        public void setRect(final float x, final float y, final float w, final float h ) {
+            if(webappLaunchInfo == null)
+                return;
+
+            eventHandler.set(x, y, w, h);
+            eventHandler.removeMessages(EVENT_SET_RECT);
+            eventHandler.sendMessageDelayed(Message.obtain(eventHandler, EVENT_SET_RECT, 0, 0, null), 10);
+        }
+
+        @JavascriptInterface
+        public void setBackgroundColor(String color ) {
+            if(webappLaunchInfo == null)
+                return;
+            try {
+                WebLaunchView.this.setBackgroundColor(Color.parseColor(color));
+            }
+            catch(Exception e)
+            {
+                WebLaunchView.this.setBackgroundColor(0xFFFFFFFF);
+            }
+        }
+        @JavascriptInterface
+        public void popupUrl(String url ) {
+
+            if(url == null || !url.toLowerCase().startsWith("http"))
+                return;
+
+            Intent i = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+            WebLaunchView.this.getContext().startActivity(i);
+
+        }
+
+        @JavascriptInterface
+        public void shareString(String str ) {
+            try {
+                Intent intent = new Intent(Intent.ACTION_SEND);
+                intent.setType("text/plain");
+                intent.putExtra(Intent.EXTRA_TEXT, str);
+                WebLaunchView.this.getContext().startActivity(Intent.createChooser(intent, ""));
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        @JavascriptInterface
+        public void sendWebApp() {
+            if(webappLaunchInfo == null ||  !webappLaunchInfo.isStartAlone())
+                return;
+
+            if(webappLaunchInfo.isStarter() && !webappLaunchInfo.isSendedWebApp()) {
+                eventHandler.sendMessage(Message.obtain(eventHandler,EVENT_FINISH, 0, 0, null));
+                eventHandler.sendMessageDelayed(Message.obtain(eventHandler, EVENT_SEND_WEBAPP, 0, 0, webappLaunchInfo.getOriginalMessage()), 1000);
+                webappLaunchInfo.setSendedWebApp();
+            }
+        }
+
+        @JavascriptInterface
+        public void sendText(final String str) {
+            if(webappLaunchInfo == null)
+                return;
+
+            if(webappLaunchInfo.isStarter() && !webappLaunchInfo.isSendedText()) {
+                String msg;
+                if(webappLaunchInfo.isFromMarket())
+                    msg = str;
+                else {
+                    WebAppInfo info = getWebAppInfo(webappLaunchInfo.getManifest(), false);
+                    if (info == null) {
+                        return;
+                    }
+                    msg = "["+info.getName()+"]\n" + str;
+                }
+
+                eventHandler.sendMessageDelayed(Message.obtain(eventHandler, EVENT_SEND_TEXT, 0, 0, msg), 1000);
+                webappLaunchInfo.setSendedText();
+            }
+        }
+
+        @JavascriptInterface
+        public void startAlone(final String url) {
+            if (webappLaunchInfo == null || !webappLaunchInfo.isFromMarket() )
+                return;
+
+            if (!isWebApp(url, true))
+                return;
+
+            webappLaunchInfo.setMessage(url);
+            webappLaunchInfo.setStartAlone();
+            eventHandler.sendMessage(Message.obtain(eventHandler, EVENT_START_ALONE, 0, 0, null));
+        }
+
+        @JavascriptInterface
+        public void copyToClipboard(final String str) {
+            if(android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                android.text.ClipboardManager clipboard = (android.text.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+                clipboard.setText(str);
+            } else {
+                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+                android.content.ClipData clip = android.content.ClipData.newPlainText("Copied Text", str);
+                clipboard.setPrimaryClip(clip);
+            }
+            Toast.makeText(getContext(), "It has been copied to clipboard", Toast.LENGTH_SHORT).show();
+
+        }
+
+        @JavascriptInterface
+        public void sendErrorLog(final String str) {
+            if(webappLaunchInfo == null)
+                return;
+
+            new WebAppLaunchLogTask().execute(webappLaunchInfo.getManifest(), webappLaunchInfo.getMyId(), webappLaunchInfo.getMessageId(), str, appName);
+        }
+
+        @JavascriptInterface
+        public void finish() {
+            if(webappLaunchInfo == null)
+                return;
+
+            eventHandler.sendMessage(Message.obtain(eventHandler, EVENT_FINISH, 0, 0, null));
+        }
+
+        @JavascriptInterface
+        public void getRanking(final int top) {
+            if(webappLaunchInfo == null)
+                return;
+            new WebAppRankingTask().execute("GET", webappLaunchInfo.getManifest(), "" + top);
+        }
+
+        @JavascriptInterface
+        public void getRankingByIDs(final String strData) {
+            if(webappLaunchInfo == null)
+                return;
+            new WebAppRankingTask().execute("POST", webappLaunchInfo.getManifest(), strData);
+        }
+
+        @JavascriptInterface
+        public void putRanking(final String strData) {
+            if(webappLaunchInfo == null)
+                return;
+            new WebAppRankingTask().execute("PUT", webappLaunchInfo.getManifest(), strData);
+        }
+    }
+
+    private Bitmap getResizedBitmap(Bitmap img) {
+        final int MAX = 128;
+
+        int height = img.getHeight();
+        int width = img.getWidth();
+        int newWidth = width;
+        int newHeight = height;
+        float rate = 0.0f;
+
+        if (width > height) {
+            if (width > MAX) {
+                rate = MAX / (float) width;
+                newHeight = (int) (height * rate);
+                newWidth = MAX;
+            }
+        } else {
+            if (height > MAX) {
+                rate = MAX / (float) height;
+                newWidth = (int) (width * rate);
+                newHeight = MAX;
+            }
+        }
+        return Bitmap.createScaledBitmap(img, newWidth, newHeight, true);
+    }
+
+    private WebAppInfo getWebAppInfo(String msg, boolean reconn)
+    {
+        if(msg.contains("#")) {
+            String[] strMsg = msg.split("#");
+            if(strMsg.length == 2) {
+                msg = strMsg[0];
+            }
+        }
+
+        if (!android.webkit.URLUtil.isValidUrl(msg)) {
+            return null;
+        }
+
+        msg = changeHostNameToLower(msg);
+
+        if (!isWebAppUrlPattern(msg)) {
+            return null;
+        }
+
+        WebAppInfo webAppInfo = webAppInfoMap.get(msg);
+        if(webAppInfo != null)
+            return webAppInfo;
+
+        String filePath = cacheDirectory;
+        String url = "";
+        try {
+            url = URLEncoder.encode(msg, "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+        filePath += "/" + url;
+        File jsonFile = new File(filePath);
+
+        if (jsonFile.exists() && jsonFile.isFile()) {
+            webAppInfo = new WebAppInfo(filePath);
+            webAppInfoMap.put(msg, webAppInfo);
+            return webAppInfo;
+        }
+
+        File invalidFile = new File(cacheDirectory + "/invalid/" + url);
+        if (invalidFile.exists() && invalidFile.isFile()) {
+            if (reconn) {
+                invalidFile.delete();
+            } else {
+                return null;
+            }
+        }
+
+        return getWebAppInfoFromNetwork(msg);
+    }
+
+    private WebAppInfo getWebAppInfoFromNetwork(String url)
+    {
+        if (!isWebAppUrlPattern(url)) {
+            return null;
+        }
+
+        if (!isNetworkOnline()) {
+            return null;
+        }
+
+        String filePath = cacheDirectory;
+        String name = "";
+        try {
+            name = URLEncoder.encode(url, "UTF-8");
+            filePath = filePath + "/" + name;
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+
+        try {
+            if (!new WebAppInfoGetTask().execute(url, filePath).get()) {
+                File file = new File(cacheDirectory + "/invalid/" + name);
+                if (false == file.isFile()) {
+                    file.createNewFile();
+                }
+                return null;
+            }
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } catch (ExecutionException e) {
+            e.printStackTrace();
+        } catch(IOException e){
+            e.printStackTrace();
+        }
+
+        WebAppInfo webAppInfo  = new WebAppInfo(filePath);
+        webAppInfoMap.put(url, webAppInfo);
+        return webAppInfo;
+    }
+
+    public boolean isWebApp(String msg, boolean reconn) {
+        if(msg == null)
+            return false;
+
+        if (getWebAppInfo(msg, reconn) != null) {
+            return true;
+        }
+        return false;
+    }
+
+    public void launchWebAppSearch(String sessionId, String myId, List<WebLaunchView.Participant> memberlist) {
+
+        webLaunchListener.onWebAppLoadingStarted();
+
+        if (!isNetworkOnline()) {
+            Toast.makeText(getContext(), "Error: No connection to Internet", Toast.LENGTH_SHORT).show();
+            webLaunchListener.onWebAppLoadingCanceled();
+            return;
+        }
+
+        webappLaunchInfo= new WebAppLaunchInfo(sessionId, myId, memberlist);
+        loadUrl("http://swap.sec.net/search/");
+
+    }
+
+    public boolean launchWebApp(String msg, String sessionId, boolean isStarter, String myId, List<WebLaunchView.Participant> memberlist) {
+
+        if (!isNetworkOnline()) {
+            Toast.makeText(getContext(), "Error: No connection to Internet", Toast.LENGTH_SHORT).show();
+            return false;
+        }
+
+        if (webappLaunchInfo != null) {
+            Toast.makeText(getContext(), "Information: Another WebApp is running", Toast.LENGTH_SHORT).show();
+            return false;
+        }
+
+        webappLaunchInfo = new WebAppLaunchInfo(changeHostNameToLower(msg), sessionId, isStarter, myId, memberlist);
+        if(webappLaunchInfo.getManifest() == null || webappLaunchInfo.getMessageId() == null)
+        {
+            Toast.makeText(getContext(), "Error: The message doesn't include message_id", Toast.LENGTH_SHORT).show();
+            return false;
+        }
+
+
+        if(!realLaunchWebApp()) {
+            unLoad();
+            return false;
+        }
+
+        if (launchedWebAppMap.get(webappLaunchInfo.getMessageId()) == null) {
+            long launchTime = System.currentTimeMillis();
+            webAppLogPreferences.edit().putLong(webappLaunchInfo.getMessageId(), launchTime).commit();
+            launchedWebAppMap.put(webappLaunchInfo.getMessageId(), launchTime);
+        }
+        return true;
+    }
+
+    private boolean realLaunchWebApp()
+    {
+        if (!isNetworkOnline()) {
+            Toast.makeText(getContext(), "Error: No connection to Internet", Toast.LENGTH_SHORT).show();
+            return false;
+        }
+        WebAppInfo webAppInfo = getWebAppInfoFromNetwork(webappLaunchInfo.getManifest());
+        if (webAppInfo == null)
+        {
+            Toast.makeText(getContext(), "Error: Can't connect to "+webappLaunchInfo.getManifest(), Toast.LENGTH_SHORT).show();
+            return false;
+        }
+        if(!webAppInfo.isValid()) {
+            Toast.makeText(WebLaunchView.this.getContext(),String.format("Error: %s is invalid", webappLaunchInfo.getManifest()), Toast.LENGTH_LONG).show();
+            return false;
+        }
+
+        webLaunchListener.onWebAppLoadingStarted();
+        String tempURL = webAppInfo.getURL();
+
+        if(tempURL.contains("?")){
+            tempURL = tempURL + "&sessionID=" + webappLaunchInfo.getSessionId();
+        }else{
+            tempURL = tempURL + "?sessionID=" + webappLaunchInfo.getSessionId();
+        }
+
+        loadUrl(tempURL);
+        new WebAppLaunchLogTask().execute(webappLaunchInfo.getManifest(), webappLaunchInfo.getMyId(), webappLaunchInfo.getMessageId(), appName);
+        return true;
+    }
+
+
+    public void unLoad()
+    {
+        if(webappLaunchInfo != null)
+        {
+            webappLaunchInfo = null;
+            stopLoading();
+            loadUrl("about:blank");
+
+            eventHandler.removeMessages(EVENT_SET_RECT);
+            eventHandler.removeMessages(EVENT_FINISH);
+            eventHandler.removeMessages(EVENT_LOAD_JS);
+            eventHandler.removeMessages(EVENT_CHECK_SETRECT);
+            eventHandler.removeMessages(EVENT_CHECK_TIMEOUT);
+            eventHandler.removeMessages(EVENT_START_ALONE);
+
+            if(pageLoading) {
+                webLaunchListener.onWebAppLoadingCanceled();
+                pageLoading = false;
+            }
+
+            Activity host = (Activity)WebLaunchView.this.getContext();
+            host.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER);
+            WebLaunchView.this.hideKeyboard();
+        }
+
+    }
+
+    public boolean isAutoLaunch(String msg)
+    {
+        WebAppInfo webAppInfo = getWebAppInfo(msg, false);
+        if( webAppInfo != null)
+            return webAppInfo.isAutoLaunch();
+        return false;
+    }
+
+    public boolean isOneOff(String msg)
+    {
+        WebAppInfo webAppInfo = getWebAppInfo(msg, false);
+        if( webAppInfo != null)
+            return webAppInfo.isOneOff();
+        return true;
+    }
+
+    public String getIconUrl(String msg){
+        WebAppInfo webAppInfo = getWebAppInfo(msg, false);
+        if( webAppInfo == null)
+            return null;
+
+        return webAppInfo.getIcon();
+    }
+
+    class EventHandler extends Handler {
+
+        private float mx=0, my=0, mw=0, mh=0;
+
+        public void set(float x, float y, float w, float h) {
+
+            mx = x;
+            my = y;
+            mw = w;
+            mh = h;
+        }
+
+        public void handleMessage(Message msg) {
+
+            if(msg.what == EVENT_SET_RECT) {
+                if(webappLaunchInfo == null)
+                    return;
+
+                float x = mx;
+                float y = my;
+                float w = mw;
+                float h = mh;
+
+                if(x > 1.0 || x<0 )
+                    x = convertPixelToDp(x);
+                if(y > 1.0 || y<0 )
+                    y = convertPixelToDp(y);
+                if(w > 1.0 || w<0 )
+                    w = convertPixelToDp(w);
+                if(h > 1.0 || h<0 )
+                    h = convertPixelToDp(h);
+
+                if(pageLoading)
+                {
+                    pageLoading = false;
+                    WebLaunchView.this.webLaunchListener.onWebAppLoadingCompleted();
+                }
+
+                webLaunchListener.onWebAppSize(x, y, w, h);
+
+                setRectCalled = true;
+                if(!versionChecked) {
+                    WebLaunchView.this.loadUrl("javascript:$swap._checkVersion("+ COMPATIBLE_JS_VERSION +");");
+                    versionChecked = true;
+                }
+            }
+            else if(msg.what == EVENT_FINISH) {
+                webLaunchListener.onWebAppFinish();
+            }
+            else if(msg.what == EVENT_SEND_TEXT) {
+                webLaunchListener.onWebAppSend((String)msg.obj);
+            }
+            else if(msg.what == EVENT_SEND_WEBAPP) {
+                webLaunchListener.onWebAppSend((String)msg.obj);
+            }
+            else if (msg.what == EVENT_LOAD_JS) {
+                WebLaunchView.this.loadUrl((String)msg.obj);
+            }
+            else if (msg.what == EVENT_CHECK_SETRECT) {
+
+                if(setRectCalled == false && webappLaunchInfo != null && WebLaunchView.this.getVisibility() != View.VISIBLE)
+                {
+                    Toast.makeText(WebLaunchView.this.getContext(),String.format("Error: %s failed to call $swap.setRect API", (String)msg.obj), Toast.LENGTH_LONG).show();
+                    unLoad();
+                }
+            }
+            else if (msg.what == EVENT_CHECK_TIMEOUT) {
+
+
+                if(pageLoading == true && webappLaunchInfo != null)
+                {
+                    Toast.makeText(WebLaunchView.this.getContext(),String.format("Error: Timeout to %s", (String)msg.obj), Toast.LENGTH_LONG).show();
+                    unLoad();
+                }
+            }
+            else if (msg.what == EVENT_START_ALONE) {
+                if (!realLaunchWebApp())
+                    unLoad();
+            }
+            else if (msg.what == EVENT_CALLBACK_GETRANKING) {
+                if(webappLaunchInfo == null)
+                    return;
+                WebLaunchView.this.loadUrl("javascript:$swap._callbacks.getRanking("+ (String)msg.obj + ");");
+            }
+            else if (msg.what == EVENT_CALLBACK_GETRANKINGBYIDS) {
+                if(webappLaunchInfo == null)
+                    return;
+                WebLaunchView.this.loadUrl("javascript:$swap._callbacks.getRankingByIDs("+ (String)msg.obj + ");");
+            }
+            else if (msg.what == EVENT_CALLBACK_PUTRANKING) {
+                if(webappLaunchInfo == null)
+                    return;
+                WebLaunchView.this.loadUrl("javascript:$swap._callbacks.putRanking("+ (String)msg.obj + ");");
+            }
+        }
+    }
+
+    private float convertPixelToDp(float input) {
+        return (input * getContext().getResources().getDisplayMetrics().density + 0.5f);
+    }
+
+    private int convertDpToPixel(int input) {
+        return (int) (input / getContext().getResources().getDisplayMetrics().density + 0.5f);
+    }
+
+    private boolean isNetworkOnline() {
+        ConnectivityManager cm = (ConnectivityManager) getContext().getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo netInfoMobile = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
+        NetworkInfo netInfoWifi = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
+
+        if ((netInfoMobile != null && netInfoMobile.isConnected()) || (netInfoWifi != null && netInfoWifi.isConnected())) {
+            return true;
+        }
+
+        return false;
+    }
+
+    public boolean isLaunchedApp(String sessionId, String msg, long msgDate) {
+        if (msg.contains("#")) {
+            long aWeekAgo = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000);
+            String[] strMsg = msg.split("#");
+            if(strMsg.length != 2)
+                return false;
+            if (launchedWebAppMap.get("m" + sessionId + strMsg[1]) != null) {
+                return true;
+            } else if (msgDate < aWeekAgo) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private AsyncTask<Void, Void, Void> fileDeleteTask = new AsyncTask<Void, Void, Void>() {
+        @Override
+        protected Void doInBackground(Void... voids) {
+            File directory = new File(cacheDirectory);
+            if (directory.exists()) {
+                File[] listFiles = directory.listFiles();
+                long aWeekAgo = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000);
+                for (File listFile : listFiles) {
+                    if (listFile.lastModified() < aWeekAgo) {
+                        listFile.delete();
+                    }
+                }
+            }
+            return null;
+        }
+    };
+
+    private void getLaunchedWebAppList() {
+        if (webAppLogPreferences == null) {
+            webAppLogPreferences = getContext().getSharedPreferences(LAUNCHED_WEBAPP_LOG, Context.MODE_PRIVATE);
+        }
+
+        SharedPreferences.Editor editor = webAppLogPreferences.edit();
+        long aWeekAgo = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000);
+
+        Map<String, ?> allItem = webAppLogPreferences.getAll();
+        for (Map.Entry<String, ?> item : allItem.entrySet()) {
+            long date = webAppLogPreferences.getLong(item.getKey(), 0);
+            if (date < aWeekAgo) {
+                editor.remove(item.getKey());
+            } else {
+                launchedWebAppMap.put(item.getKey(), date);
+            }
+        }
+        editor.commit();
+    }
+
+    public void hideKeyboard() {
+        Activity activity =  (Activity)this.getContext();
+        View view = activity.getCurrentFocus();
+        if (view != null) {
+            InputMethodManager inputManager = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);
+            inputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
+        }
+    }
+
+    private String getAppName(Context ctx){
+        String name = ctx.getString(ctx.getApplicationInfo().labelRes);
+        try{
+            PackageInfo info = ctx.getPackageManager().getPackageInfo(ctx.getPackageName(), 0);
+            name += " v" + info.versionName;
+        } catch (PackageManager.NameNotFoundException e){
+
+        }
+        return name;
+    }
+
+    public void onBackKey()  {
+        long currentTime =  System.currentTimeMillis();
+        if(currentTime - backKeyPressedTime <= 300)
+            eventHandler.sendMessage(Message.obtain(eventHandler,EVENT_FINISH, 0, 0, null));
+        backKeyPressedTime = currentTime;
+
+        if(webappLaunchInfo != null) {
+            loadUrl("javascript:$swap._callbacks.onBackKey();");
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        super.pauseTimers(); // for timer
+        if(webappLaunchInfo != null)
+            loadUrl("javascript:$swap._callbacks.onPause();");
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        super.resumeTimers();
+        if(webappLaunchInfo != null)
+            loadUrl("javascript:$swap._callbacks.onResume();");
+    }
+
+
+    @Override
+    protected void onLayout(boolean changed, int l, int t, int r, int b) {
+        super.onLayout(changed, l, t, r, b);
+
+        Rect rect = new Rect();
+        WebLaunchView.this.getWindowVisibleDisplayFrame(rect);
+        int heightDiff = WebLaunchView.this.getRootView().getHeight() - (rect.bottom - rect.top);
+        if (heightDiff > 100) {
+            keyboardAppeared = true;
+        } else { // fire resize event when keyboard is gone
+            if(keyboardAppeared) {
+                keyboardAppeared = false;
+                dispatchResizeEvent();
+            }
+        }
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        dispatchResizeEvent();
+    }
+
+    private boolean isWebAppUrlPattern(String url){
+        String regexAlphaChars = "a-z" +
+                "\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u00ff" + // Latin-1
+                "\\u0100-\\u024f" + // Latin Extended A and B
+                "\\u0253\\u0254\\u0256\\u0257\\u0259\\u025b\\u0263\\u0268\\u026f\\u0272\\u0289\\u028b" + // IPA Extensions
+                "\\u02bb" + // Hawaiian
+                "\\u0300-\\u036f" + // Combining diacritics
+                "\\u1e00-\\u1eff" + // Latin Extended Additional (mostly for Vietnamese)
+                "\\u0400-\\u04ff\\u0500-\\u0527" +  // Cyrillic
+                "\\u2de0-\\u2dff\\ua640-\\ua69f" +  // Cyrillic Extended A/B
+                "\\u0591-\\u05bf\\u05c1-\\u05c2\\u05c4-\\u05c5\\u05c7" +
+                "\\u05d0-\\u05ea\\u05f0-\\u05f4" + // Hebrew
+                "\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41" +
+                "\\ufb43-\\ufb44\\ufb46-\\ufb4f" + // Hebrew Pres. Forms
+                "\\u0610-\\u061a\\u0620-\\u065f\\u066e-\\u06d3\\u06d5-\\u06dc" +
+                "\\u06de-\\u06e8\\u06ea-\\u06ef\\u06fa-\\u06fc\\u06ff" + // Arabic
+                "\\u0750-\\u077f\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe" + // Arabic Supplement and Extended A
+                "\\ufb50-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb" + // Pres. Forms A
+                "\\ufe70-\\ufe74\\ufe76-\\ufefc" + // Pres. Forms B
+                "\\u200c" +                        // Zero-Width Non-Joiner
+                "\\u0e01-\\u0e3a\\u0e40-\\u0e4e" + // Thai
+                "\\u1100-\\u11ff\\u3130-\\u3185\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF" + // Hangul (Korean)
+                "\\u3003\\u3005\\u303b" +           // Kanji/Han iteration marks
+                "\\uff21-\\uff3a\\uff41-\\uff5a" +  // full width Alphabet
+                "\\uff66-\\uff9f" +                 // half width Katakana
+                "\\uffa1-\\uffdc";
+
+        String urlRegex = "(https?://)?" +
+                // user:pass authentication
+                "(?:\\S{1,64}(?::\\S{0,64})?@)?" +
+                "(?:" +
+                // sindresorhus/ip-regex
+                "(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}" +
+                "|" +
+                // host name
+                "[" + regexAlphaChars + "0-9][" + regexAlphaChars + "0-9\\-]{0,64}" +
+                // domain name
+                "(?:\\.[" + regexAlphaChars + "0-9][" + regexAlphaChars + "0-9\\-]{1,64}){0,10}" +
+
+                // TLD identifier
+                "(?:\\.(xn--[0-9a-z]{2,16}|[" + regexAlphaChars + "]{2,24}))" +
+                ")" +
+                // port number
+                "(?::\\d{2,5})?" +
+                // resource path
+                "(?:/(?:\\S{0,255}[^\\s.;,(\\[\\]{}<>\"'])?)?";
+
+        Pattern p = Pattern.compile("(?i)" + urlRegex + "(\\.json)(#\\d+)?");
+        return p.matcher(url).matches();
+    }
+
+    private String changeHostNameToLower(String msg){
+        try {
+            URL url = new URL(msg);
+            String host = url.getHost();
+            String lowerHost = host.toLowerCase();
+            msg = msg.replaceFirst(host, lowerHost);
+
+        } catch (MalformedURLException e) {
+            e.printStackTrace();
+        }
+        return msg;
+    }
+    public void dispatchResizeEvent() {
+        loadUrl("javascript:window.dispatchEvent(new Event('resize'));");
+    }
+
+}
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_swap.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_swap.png
new file mode 100644
index 000000000..334f183e7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_swap.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/maximizebutton.png b/TMessagesProj/src/main/res/drawable-xxhdpi/maximizebutton.png
new file mode 100644
index 000000000..a4339eaf2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/maximizebutton.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/minimizebutton.png b/TMessagesProj/src/main/res/drawable-xxhdpi/minimizebutton.png
new file mode 100644
index 000000000..661fb80ba
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/minimizebutton.png differ
diff --git a/TMessagesProj/src/main/res/layout/terms_view.xml b/TMessagesProj/src/main/res/layout/terms_view.xml
new file mode 100644
index 000000000..785374d49
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/terms_view.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    android:orientation="vertical">
+
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/scrollView"
+        android:layout_gravity="center_horizontal"
+        android:padding="10dp"
+        android:layout_weight="1" >
+        <TextView
+            android:textColor="#000000"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:text=""
+            android:layout_marginLeft="5dp"
+            android:layout_marginRight="5dp"
+            android:id="@+id/textView" />
+        </ScrollView>
+
+
+    <Button
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/SWAPAgree"
+        android:id="@+id/button"
+        android:height="50dp"
+        android:layout_gravity="center_vertical" />
+
+
+</LinearLayout>
diff --git a/TMessagesProj/src/main/res/layout/toast_layout.xml b/TMessagesProj/src/main/res/layout/toast_layout.xml
new file mode 100644
index 000000000..4216389e7
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/toast_layout.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/toast_layout_root"
+    android:orientation="vertical"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_margin="10dip"
+    android:clickable="true"
+    >
+
+    <TextView android:id="@+id/text"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textColor="#ff9933"
+        android:textSize="17sp"
+        android:background="@drawable/msg_in_photo"
+        android:text = "@string/SWAPTooltip"
+        android:paddingTop="10dp"
+        android:paddingBottom="10dp"
+        android:paddingLeft="16dp"
+        android:paddingRight="16dp"
+        />
+
+    <ImageView android:src="@drawable/stickers_back_arrow"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginRight="13dp"
+        android:layout_marginTop="-3dp"
+        android:layout_gravity="right"
+        />
+
+</LinearLayout>
+
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 95c5325a2..37f747aac 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1061,4 +1061,12 @@
     <string name="updateBuild">704</string>
     <!--Tihoogram-->
     <string name="tihoogram_channel_id">tihoogram</string>
+
+    <!--Socializer-->
+    <string name="SWAPFaqUrl">http://swap.sec.net/swap/en-us/faq.html?utm_source=socializer&amp;utm_medium=app&amp;utm_campaign=stats</string>
+    <string name="SWAPAgree">I agree</string>
+    <string name="SWAPTerms">SWAP Market Terms and Conditions</string>
+    <string name="SWAPTooltip">Share and use webapps\nin the chat room</string>
+    <string name="CurrentVersion">Version</string>
+    <string name="LatestVersion">Latest</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index 444570aed..a04d63d41 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -77,4 +77,19 @@
         <item name="android:windowExitAnimation">@anim/no_animation</item>
     </style>
 
+    <style name="Theme.Swap.Activity" parent="Theme.TMessages.Start">
+        <item name="android:actionBarStyle">@style/Theme.Swap.ActionBar</item>
+
+    </style>
+
+
+    <style name="Theme.Swap.ActionBar" parent="ActionBar.Transparent.TMessages.Start">
+        <item name="android:titleTextStyle">@style/Theme.Swap.ActionBarTitle</item>
+    </style>
+
+    <style name="Theme.Swap.ActionBarTitle" parent="@android:style/TextAppearance.Holo.Widget.ActionBar.Title">
+        <item name="android:textColor">#ffffff</item>
+        <item name="android:textStyle">bold</item>
+    </style>
+
 </resources>
