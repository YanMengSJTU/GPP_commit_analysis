diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
index ff491d013..b717d6e99 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ArchivedPullForegroundDrawable.java
@@ -7,6 +7,7 @@
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.ColorFilter;
+import android.graphics.CornerPathEffect;
 import android.graphics.Paint;
 import android.graphics.Path;
 import android.graphics.PixelFormat;
@@ -21,6 +22,8 @@
 import androidx.annotation.Nullable;
 import androidx.core.graphics.ColorUtils;
 
+import com.google.android.exoplayer2.util.Log;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.LocaleController;
@@ -35,6 +38,7 @@
     public final static float endPullParallax = 0.25f;
     public final static float startPullOverScroll = 0.2f;
     public final static float maxOverScroll = AndroidUtilities.dp(72);
+    public static long minPullingTime = 200L;
     public int scrollDy;
 
 
@@ -64,7 +68,7 @@
     private boolean bounceIn = false;
 
 
-    private int startPadding = AndroidUtilities.dp(27);
+    private int startPadding = AndroidUtilities.dp(28);
     private int smallMargin = AndroidUtilities.dp(8);
     private int radius = AndroidUtilities.dp(9);
     private int diameter = AndroidUtilities.dp(18);
@@ -142,7 +146,10 @@ public void drawOverScroll(Canvas canvas) {
         } else {
 
 
-            float outBackgroundRadius = outRadius + (dialogCell.getWidth() - outRadius) * (1f - outProgress);
+            float bounceP = bounceIn ? (0.07f * bounceProgress) - 0.05f : 0.02f * bounceProgress;
+            bounceP += bounceP * outOverScroll;
+
+            float outBackgroundRadius = outRadius + (dialogCell.getWidth() - outRadius) * (1f - outProgress) + (outRadius * bounceP);
             canvas.drawCircle(cX, cY, outBackgroundRadius, backgroundPaint);
 
             //clip rect work faster then clip path, and in this case users see no difference
@@ -157,22 +164,20 @@ public void drawOverScroll(Canvas canvas) {
         if (outProgressHalf > 1f) outProgressHalf = 1f;
 
         paintSecondary.setAlpha((int) ((1f - outProgressHalf) * 0.4f * 255));
-        rectF.set(startPadding, smallMargin , startPadding + diameter, smallMargin + overscroll + radius);
+        rectF.set(startPadding, smallMargin, startPadding + diameter, smallMargin + overscroll + radius);
         canvas.drawRoundRect(rectF, radius, radius, paintSecondary);
 
 
-
         canvas.restore();
 
     }
 
 
     public void draw(Canvas canvas) {
-        if (!willDraw || isOut || dialogCell == null) return;
+        if (!willDraw || isOut || dialogCell == null || listView == null) return;
 
         int overscroll = (int) listView.getTranslationY();
         int visibleHeight = (int) (dialogCell.getHeight() * pullProgress);
-        int invisibleHeight = dialogCell.getHeight() - visibleHeight;
 
         float bounceP = bounceIn ? (0.07f * bounceProgress) - 0.05f : 0.02f * bounceProgress;
         bounceP += bounceP * outOverScroll;
@@ -198,7 +203,6 @@ public void draw(Canvas canvas) {
             float outBackgroundRadius = outRadius + (dialogCell.getWidth() - outRadius) * (1f - outProgress) + (outRadius * bounceP);
             canvas.drawCircle(cX, cY, outBackgroundRadius, backgroundPaint);
 
-            //clip rect work faster then clip path, and in this case users see no difference
             canvas.clipRect(
                     cX - outBackgroundRadius, cY - outBackgroundRadius,
                     cX + outBackgroundRadius, cY + outBackgroundRadius
@@ -237,7 +241,7 @@ public void draw(Canvas canvas) {
         }
 
 
-        textIn();
+        if (pullProgress > 0f) textIn();
 
         float textY = dialogCell.getHeight() - ((diameter + smallMargin * 2) / 2f) + AndroidUtilities.dp(6);
         tooltipTextPaint.setAlpha((int) (255 * textSwappingProgress * startPullProgress * textInProgress));
@@ -342,11 +346,10 @@ private void updateTextProgress(float pullProgress) {
         }
     }
 
-    Runnable r = new Runnable() {
+    Runnable textInRunnable = new Runnable() {
         @Override
         public void run() {
             animateToTextIn = true;
-
             if (textIntAnimator != null) textIntAnimator.cancel();
             textInProgress = 0f;
             textIntAnimator = ValueAnimator.ofFloat(0f, 1f);
@@ -368,8 +371,8 @@ private void textIn() {
                 }
             } else {
                 wasSendCallback = true;
-                dialogCell.removeCallbacks(r);
-                dialogCell.postDelayed(r, 120);
+                dialogCell.removeCallbacks(textInRunnable);
+                dialogCell.postDelayed(textInRunnable, 200);
             }
         }
     }
@@ -435,19 +438,25 @@ public void onAnimationEnd(Animator animation) {
 
         AnimatorSet bounce = new AnimatorSet();
         bounce.playSequentially(bounceIn, bounceOut);
-        bounce.setStartDelay(200);
+        bounce.setStartDelay(180);
 
         outAnimator.playTogether(out, bounce);
         outAnimator.start();
     }
 
     public void doNotShow() {
-        if (outAnimator != null) {
-            outAnimator.removeAllListeners();
-            outAnimator.cancel();
-        }
+        if (textSwipingAnimator != null) textSwipingAnimator.cancel();
+        if (textIntAnimator != null) textIntAnimator.cancel();
+        if(dialogCell != null) dialogCell.removeCallbacks(textInRunnable);
+        textSwappingProgress = 1f;
+        arrowRotateProgress = 1f;
+        animateToEndText = false;
+        arrowAnimateTo = false;
+        animateToTextIn = false;
+        wasSendCallback = false;
+        textInProgress = 0f;
+        isOut = true;
         outProgress = 1f;
-        animateOut = true;
     }
 
     public void showHidden() {
@@ -470,7 +479,7 @@ public void destroyView() {
     }
 
     public boolean isDraw() {
-        return !(!willDraw || isOut || dialogCell == null);
+        return !(!willDraw || isOut);
     }
 
 
@@ -480,6 +489,7 @@ public void setWillDraw(boolean b) {
 
     public void resetText() {
         if (textIntAnimator != null) textIntAnimator.cancel();
+        if (dialogCell != null) dialogCell.removeCallbacks(textInRunnable);
         textInProgress = 0f;
         animateToTextIn = false;
         wasSendCallback = false;
@@ -492,17 +502,18 @@ public Paint getBackgroundPaint() {
     private class ArrowDrawable extends Drawable {
 
         Path path = new Path();
-        Paint paint = new Paint();
+        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
 
         public ArrowDrawable() {
             int h = AndroidUtilities.dp(18);
-            path.moveTo(h >> 1, AndroidUtilities.dpf2(4.58f));
-            path.lineTo(AndroidUtilities.dpf2(3.95f), AndroidUtilities.dpf2(9.66f));
-            path.lineTo(AndroidUtilities.dpf2(7.06f), AndroidUtilities.dpf2(9.66f));
-            path.lineTo(AndroidUtilities.dpf2(7.06f), AndroidUtilities.dpf2(11.6f));
-            path.lineTo(h - AndroidUtilities.dpf2(7.06f), AndroidUtilities.dpf2(11.6f));
-            path.lineTo(h - AndroidUtilities.dpf2(7.06f), AndroidUtilities.dpf2(9.66f));
-            path.lineTo(h - AndroidUtilities.dpf2(3.95f), AndroidUtilities.dpf2(9.66f));
+            path.moveTo(h >> 1, AndroidUtilities.dpf2(4.98f));
+            path.lineTo(AndroidUtilities.dpf2(4.95f), AndroidUtilities.dpf2(9f));
+            path.lineTo(h - AndroidUtilities.dpf2(4.95f), AndroidUtilities.dpf2(9f));
+            path.lineTo(h >> 1, AndroidUtilities.dpf2(4.98f));
+
+            paint.setStyle(Paint.Style.FILL_AND_STROKE);
+            paint.setStrokeJoin(Paint.Join.ROUND);
+            paint.setStrokeWidth(AndroidUtilities.dpf2(1f));
         }
 
         public void setColor(int color) {
@@ -524,6 +535,11 @@ public void draw(@NonNull Canvas canvas) {
             canvas.save();
             canvas.translate(getBounds().left, getBounds().top);
             canvas.drawPath(path, paint);
+            int h = AndroidUtilities.dp(18);
+            canvas.drawRect(AndroidUtilities.dpf2(7.56f),
+                    AndroidUtilities.dpf2(8f),
+                    h - AndroidUtilities.dpf2(7.56f),
+                    AndroidUtilities.dpf2(11.1f), paint);
             canvas.restore();
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index a06381be2..66dbf6cb9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -50,11 +50,13 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.ItemTouchHelper;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
 import androidx.recyclerview.widget.RecyclerView;
 
+import org.checkerframework.checker.units.qual.A;
 import org.telegram.messenger.AccountInstance;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
@@ -252,8 +254,8 @@
 
     private int archivePullViewState;
     private boolean scrollingManually;
-    private int totalConsumedAmount;
-    private boolean startedScrollAtTop;
+    private long startArchivePullingTime;
+    boolean canShowHiddenArchive = false;
 
     public ArchivedPullForegroundDrawable archivedPullForegroundDrawable;
 
@@ -263,7 +265,6 @@
 
         public ContentView(Context context) {
             super(context);
-            setWillNotDraw(false);
         }
 
         @Override
@@ -271,7 +272,6 @@ protected void onDraw(Canvas canvas) {
             if (archivedPullForegroundDrawable != null && listView.getTranslationY() != 0) {
                 archivedPullForegroundDrawable.drawOverScroll(canvas);
             }
-
             super.onDraw(canvas);
         }
 
@@ -405,13 +405,11 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
             if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
                 if (action == MotionEvent.ACTION_DOWN) {
                     int currentPosition = layoutManager.findFirstVisibleItemPosition();
-                    startedScrollAtTop = currentPosition <= 1;
                 } else {
                     if (actionBar.isActionModeShowed()) {
                         allowMoving = true;
                     }
                 }
-                totalConsumedAmount = 0;
             }
             return super.onInterceptTouchEvent(ev);
         }
@@ -512,9 +510,12 @@ public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
                     slidingView = null;
                     listView.invalidate();
                     int added = getMessagesController().addDialogToFolder(dialog.id, folderId == 0 ? 1 : 0, -1, 0);
-                    if (added == 2) {
-                        dialogsAdapter.notifyItemChanged(count - 1);
+
+                    int lastItemPosition = layoutManager.findLastVisibleItemPosition();
+                    if (lastItemPosition == count - 1) {
+                        layoutManager.findViewByPosition(lastItemPosition).requestLayout();
                     }
+
                     if (added != 2 || position != 0) {
                         dialogsItemAnimator.prepareForRemove();
                         lastItemsCount--;
@@ -1085,24 +1086,28 @@ public boolean onTouchEvent(MotionEvent e) {
                         int height = (int) (AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) * ArchivedPullForegroundDrawable.SNAP_HEIGHT);
                         int diff = view.getTop() + view.getMeasuredHeight();
                         if (view != null) {
-                            if (diff < height) {
+                            long pullingTime = System.currentTimeMillis() - startArchivePullingTime;
+                            if (diff < height || pullingTime < ArchivedPullForegroundDrawable.minPullingTime) {
                                 listView.smoothScrollBy(0, diff, CubicBezierInterpolator.EASE_OUT_QUINT);
                                 archivePullViewState = ARCHIVE_ITEM_STATE_HIDDEN;
                             } else {
                                 if (archivePullViewState != ARCHIVE_ITEM_STATE_SHOWED) {
                                     ((DialogCell) view).startOutAnimation();
                                     listView.smoothScrollBy(0, view.getTop(), CubicBezierInterpolator.EASE_OUT_QUINT);
+                                    if (!canShowHiddenArchive) {
+                                        canShowHiddenArchive = true;
+                                        listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
+                                    }
                                     archivePullViewState = ARCHIVE_ITEM_STATE_SHOWED;
                                 }
                             }
 
                             if (listView.getTranslationY() != 0) {
                                 ValueAnimator valueAnimator = ValueAnimator.ofFloat(listView.getTranslationY(), 0f);
-                                valueAnimator.addUpdateListener(animation -> {
-                                    listView.setTranslationY((float) animation.getAnimatedValue());
-                                });
+                                valueAnimator.addUpdateListener(animation ->
+                                        listView.setTranslationY((float) animation.getAnimatedValue()));
 
-                                valueAnimator.setDuration(250);
+                                valueAnimator.setDuration((long) (350f - 120f * (listView.getTranslationY() / ArchivedPullForegroundDrawable.maxOverScroll)));
                                 valueAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                                 valueAnimator.start();
                             }
@@ -1125,6 +1130,21 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
             }
         };
         dialogsItemAnimator = new DialogsItemAnimator() {
+
+            @Override
+            public void onRemoveStarting(RecyclerView.ViewHolder item) {
+                super.onRemoveStarting(item);
+                if (layoutManager.findFirstVisibleItemPosition() == 0) {
+                    View v = layoutManager.findViewByPosition(0);
+                    if (v != null) v.invalidate();
+                    if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN) {
+                        archivePullViewState = ARCHIVE_ITEM_STATE_SHOWED;
+                    }
+                    if (archivedPullForegroundDrawable != null)
+                        archivedPullForegroundDrawable.doNotShow();
+                }
+            }
+
             @Override
             public void onRemoveFinished(RecyclerView.ViewHolder item) {
                 if (dialogRemoveFinished == 2) {
@@ -1159,8 +1179,6 @@ protected void onAllAnimationsDone() {
         listView.setTag(4);
         layoutManager = new LinearLayoutManager(context) {
 
-            boolean canShow = false;
-
             @Override
             public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
                 if (hasHiddenArchive() && position == 1) {
@@ -1176,7 +1194,8 @@ public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State
 
             @Override
             public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {
-                if (listView.getTranslationY() != 0) {
+                boolean isDragging = listView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING;
+                if (listView.getTranslationY() != 0 && isDragging) {
                     //this hack needed for smooth translateY, recycler can't save translations for touches
                     dy -= (listView.getTranslationY() - lastTranslation) * 2f;
                 }
@@ -1193,27 +1212,25 @@ public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerVi
                     }
 
 
-                    if (listView.getScrollState() != RecyclerView.SCROLL_STATE_DRAGGING) {
+                    if (!isDragging) {
                         View view = layoutManager.findViewByPosition(currentPosition);
                         int dialogHeight = AndroidUtilities.dp(SharedConfig.useThreeLinesLayout ? 78 : 72) + 1;
                         int canScrollDy = -view.getTop() + (currentPosition - 1) * dialogHeight;
                         int positiveDy = Math.abs(dy);
                         if (canScrollDy < positiveDy) {
-                            totalConsumedAmount += Math.abs(dy);
                             measuredDy = -canScrollDy;
                         }
-                    } else {
-                        if (currentPosition == 0) {
-                            View v = layoutManager.findViewByPosition(currentPosition);
-                            float k = 1f + (v.getTop() / (float) v.getMeasuredHeight());
-                            if (k > 1f) k = 1f;
-                            listView.setOverScrollMode(View.OVER_SCROLL_NEVER);
-                            measuredDy *= ArchivedPullForegroundDrawable.startPullParallax - ArchivedPullForegroundDrawable.endPullParallax * k;
-                        }
+                    } else if (currentPosition == 0) {
+                        View v = layoutManager.findViewByPosition(currentPosition);
+                        float k = 1f + (v.getTop() / (float) v.getMeasuredHeight());
+                        if (k > 1f) k = 1f;
+                        listView.setOverScrollMode(View.OVER_SCROLL_NEVER);
+                        measuredDy *= ArchivedPullForegroundDrawable.startPullParallax - ArchivedPullForegroundDrawable.endPullParallax * k;
+                        if (measuredDy > -1) measuredDy = -1;
                     }
                 }
 
-                if (listView.getTranslationY() != 0 && dy > 0) {
+                if (listView.getTranslationY() != 0 && dy > 0 && isDragging) {
                     float ty = (int) listView.getTranslationY();
                     ty -= dy / 2f;
                     if (ty < 0) {
@@ -1231,44 +1248,54 @@ public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerVi
                     if (archivedPullForegroundDrawable != null)
                         archivedPullForegroundDrawable.scrollDy = usedDy;
                     int currentPosition = layoutManager.findFirstVisibleItemPosition();
+                    View firstView = null;
                     if (currentPosition == 0) {
-                        DialogCell dialogCell = (DialogCell) layoutManager.findViewByPosition(currentPosition);
+                        firstView = layoutManager.findViewByPosition(currentPosition);
+                    }
+                    if (currentPosition == 0 && firstView != null && firstView.getBottom() >= AndroidUtilities.dp(4)) {
+                        if (startArchivePullingTime == 0)
+                            startArchivePullingTime = System.currentTimeMillis();
                         if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && archivedPullForegroundDrawable != null) {
                             archivedPullForegroundDrawable.showHidden();
                         }
 
-                        float k = 1f + (dialogCell.getTop() / (float) dialogCell.getMeasuredHeight());
+                        float k = 1f + (firstView.getTop() / (float) firstView.getMeasuredHeight());
                         if (k > 1f) k = 1f;
-                        boolean canShowInternal = k > ArchivedPullForegroundDrawable.SNAP_HEIGHT;
-                        if (canShow != canShowInternal) {
-                            canShow = canShowInternal;
+                        long pullingTime = System.currentTimeMillis() - startArchivePullingTime;
+                        boolean canShowInternal = k > ArchivedPullForegroundDrawable.SNAP_HEIGHT && pullingTime > ArchivedPullForegroundDrawable.minPullingTime + 20;
+                        if (canShowHiddenArchive != canShowInternal) {
+                            canShowHiddenArchive = canShowInternal;
                             if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN) {
                                 listView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
                             }
                         }
 
-                        if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && measuredDy - usedDy != 0 && dy < 0) {
+                        if (archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN && measuredDy - usedDy != 0 && dy < 0 && isDragging) {
                             float ty;
 
                             float tk = (listView.getTranslationY() / ArchivedPullForegroundDrawable.maxOverScroll);
                             tk = 1f - tk;
                             ty = (listView.getTranslationY() - (dy / 2f) * ArchivedPullForegroundDrawable.startPullOverScroll * tk);
 
-
                             listView.setTranslationY(ty);
-
                         }
 
                         if (archivedPullForegroundDrawable != null) {
                             archivedPullForegroundDrawable.pullProgress = k;
                             archivedPullForegroundDrawable.setParentViews(contentView, listView);
                         }
-                        dialogCell.invalidate();
                     } else {
-                        archivedPullForegroundDrawable.resetText();
-                        canShow = false;
+                        startArchivePullingTime = 0;
+                        canShowHiddenArchive = false;
                         archivePullViewState = ARCHIVE_ITEM_STATE_HIDDEN;
+
+                        if (archivedPullForegroundDrawable != null) {
+                            archivedPullForegroundDrawable.resetText();
+                            archivedPullForegroundDrawable.pullProgress = 0f;
+                            archivedPullForegroundDrawable.setParentViews(contentView, listView);
+                        }
                     }
+                    if (firstView != null) firstView.invalidate();
                     return usedDy;
                 }
                 return super.scrollVerticallyBy(measuredDy, recycler, state);
