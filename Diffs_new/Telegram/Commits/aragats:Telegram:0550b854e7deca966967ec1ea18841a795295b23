diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index a7646f15d..35eb6e4d7 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -33,48 +33,30 @@
 public class ConnectionsManager implements Action.ActionDelegate{
 
     private ArrayList<Long> sessionsToDestroy = new ArrayList<>();
-    private ArrayList<Long> destroyingSessions = new ArrayList<>();
     private HashMap<Integer, ArrayList<Long>> quickAckIdToRequestIds = new HashMap<>();
 
     private HashMap<Long, Integer> pingIdToDate = new HashMap<>();
     private ConcurrentHashMap<Integer, ArrayList<Long>> requestsByGuids = new ConcurrentHashMap<>(100, 1.0f, 2);
-    private ConcurrentHashMap<Long, Integer> requestsByClass = new ConcurrentHashMap<>(100, 1.0f, 2);
     private volatile int connectionState = 2;
 
     private ArrayList<RPCRequest> requestQueue = new ArrayList<>();
     private ArrayList<RPCRequest> runningRequests = new ArrayList<>();
     private ArrayList<Action> actionQueue = new ArrayList<>();
 
-    private ArrayList<Integer> unknownDatacenterIds = new ArrayList<>();
-    private ArrayList<Integer> unauthorizedDatacenterIds = new ArrayList<>();
-    private final HashMap<Integer, ArrayList<NetworkMessage>> genericMessagesToDatacenters = new HashMap<>();
 
-    private TLRPC.TL_auth_exportedAuthorization movingAuthorization;
-    public static final int DEFAULT_DATACENTER_ID = Integer.MAX_VALUE;
-    private static final int DC_UPDATE_TIME = 60 * 60;
-    private long lastOutgoingMessageId = 0;
+
     private int isTestBackend = 0;
     private int timeDifference = 0;
-    private int currentPingTime;
-    private int lastDestroySessionRequestTime;
-    private boolean updatingDcSettings = false;
-    private int updatingDcStartTime = 0;
-    private int lastDcUpdateTime = 0;
-    private long pushSessionId;
-    private boolean registeringForPush = false;
+
 
     private boolean paused = false;
-    private long lastPingTime = System.currentTimeMillis();
-    private long lastPushPingTime = 0;
+
     private boolean pushMessagesReceived = true;
-    private boolean sendingPushPing = false;
     private int nextSleepTimeout = 30000;
-    private long nextPingId = 0;
 
     private long lastPauseTime = System.currentTimeMillis();
     private boolean appPaused = true;
 
-    private volatile long nextCallToken = 1;
 
     private PowerManager.WakeLock wakeLock = null;
 
@@ -149,7 +131,6 @@ public void run() {
     };
 
     public ConnectionsManager() {
-        lastOutgoingMessageId = 0;
         loadSession();
 
         if (!isNetworkOnline()) {
@@ -308,8 +289,6 @@ public void run() {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("dataconfig", Context.MODE_PRIVATE);
                     isTestBackend = preferences.getInt("datacenterSetId", 0);
                     timeDifference = preferences.getInt("timeDifference", 0);
-                    lastDcUpdateTime = preferences.getInt("lastDcUpdateTime", 0);
-                    pushSessionId = preferences.getLong("pushSessionId", 0);
 
                     try {
                         sessionsToDestroy.clear();
@@ -490,67 +469,14 @@ public int generateClassGuid() {
     public void cancelRpcsForClassGuid(int guid) {
         ArrayList<Long> requests = requestsByGuids.get(guid);
         if (requests != null) {
-            for (Long request : requests) {
-                cancelRpc(request, true);
-            }
+//            for (Long request : requests) {
+//                cancelRpc(request, true);
+//            }
             requestsByGuids.remove(guid);
         }
     }
 
 
-    public void cancelRpc(final long token, final boolean notifyServer) {
-        cancelRpc(token, notifyServer, false);
-    }
-
-    public void cancelRpc(final long token, final boolean notifyServer, final boolean ifNotSent) {
-        if (token == 0) {
-            return;
-        }
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                boolean found = false;
-
-                for (int i = 0; i < requestQueue.size(); i++) {
-                    RPCRequest request = requestQueue.get(i);
-                    if (request.token == token) {
-                        found = true;
-                        request.cancelled = true;
-                        FileLog.d("tmessages", "===== Cancelled queued rpc request " + request.rawRequest);
-                        requestQueue.remove(i);
-                        break;
-                    }
-                }
-
-                if (!ifNotSent) {
-                    for (int i = 0; i < runningRequests.size(); i++) {
-                        RPCRequest request = runningRequests.get(i);
-                        if (request.token == token) {
-                            found = true;
-
-                            FileLog.d("tmessages", "===== Cancelled running rpc request " + request.rawRequest);
-
-                            if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                                if (notifyServer) {
-                                    TLRPC.TL_rpc_drop_answer dropAnswer = new TLRPC.TL_rpc_drop_answer();
-                                    dropAnswer.req_msg_id = request.runningMessageId;
-                                }
-                            }
-
-                            request.cancelled = true;
-                            request.rawRequest.freeResources();
-                            request.rpcRequest.freeResources();
-                            runningRequests.remove(i);
-                            break;
-                        }
-                    }
-                    if (!found) {
-                        FileLog.d("tmessages", "***** Warning: cancelling unknown request");
-                    }
-                }
-            }
-        });
-    }
 
     //TODO NEED
     public static boolean isNetworkOnline() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageKeyData.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageKeyData.java
deleted file mode 100644
index 669f3a029..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageKeyData.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-public class MessageKeyData {
-
-    public byte[] aesKey;
-    public byte[] aesIv;
-
-    public static MessageKeyData generateMessageKeyData(byte[] authKey, byte[] messageKey, boolean incoming) {
-        MessageKeyData keyData = new MessageKeyData();
-        if (authKey == null || authKey.length == 0) {
-            keyData.aesIv = null;
-            keyData.aesKey = null;
-            return keyData;
-        }
-
-        int x = incoming ? 8 : 0;
-
-        SerializedData data = new SerializedData();
-        data.writeRaw(messageKey);
-        data.writeRaw(authKey, x, 32);
-        byte[] sha1_a = Utilities.computeSHA1(data.toByteArray());
-        data.cleanup();
-
-        data = new SerializedData();
-        data.writeRaw(authKey, 32 + x, 16);
-        data.writeRaw(messageKey);
-        data.writeRaw(authKey, 48 + x, 16);
-        byte[] sha1_b = Utilities.computeSHA1(data.toByteArray());
-        data.cleanup();
-
-        data = new SerializedData();
-        data.writeRaw(authKey, 64 + x, 32);
-        data.writeRaw(messageKey);
-        byte[] sha1_c = Utilities.computeSHA1(data.toByteArray());
-        data.cleanup();
-
-        data = new SerializedData();
-        data.writeRaw(messageKey);
-        data.writeRaw(authKey, 96 + x, 32);
-        byte[] sha1_d = Utilities.computeSHA1(data.toByteArray());
-        data.cleanup();
-
-        data = new SerializedData();
-        data.writeRaw(sha1_a, 0, 8);
-        data.writeRaw(sha1_b, 8, 12);
-        data.writeRaw(sha1_c, 4, 12);
-        keyData.aesKey = data.toByteArray();
-        data.cleanup();
-
-        data = new SerializedData();
-        data.writeRaw(sha1_a, 8, 12);
-        data.writeRaw(sha1_b, 0, 8);
-        data.writeRaw(sha1_c, 16, 4);
-        data.writeRaw(sha1_d, 0, 8);
-        keyData.aesIv = data.toByteArray();
-        data.cleanup();
-
-        return keyData;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
index 3478326b6..b46557b61 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapter.java
@@ -42,39 +42,10 @@
     protected boolean hashtagsLoadedFromDb = false;
 
     public void queryServerSearch(final String query) {
-        if (reqId != 0) {
-            ConnectionsManager.getInstance().cancelRpc(reqId, true);
-            reqId = 0;
-        }
-        if (query == null || query.length() < 5) {
-            globalSearch.clear();
-            lastReqId = 0;
-            notifyDataSetChanged();
-            return;
-        }
-        TLRPC.TL_contacts_search req = new TLRPC.TL_contacts_search();
-        req.q = query;
-        req.limit = 50;
-        final int currentReqId = ++lastReqId;
-//        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-//            @Override
-//            public void run(final TLObject response, final TLRPC.TL_error error) {
-//                AndroidUtilities.runOnUIThread(new Runnable() {
-//                    @Override
-//                    public void run() {
-//                        if (currentReqId == lastReqId) {
-//                            if (error == null) {
-//                                TLRPC.TL_contacts_found res = (TLRPC.TL_contacts_found) response;
-//                                globalSearch = res.users;
-//                                lastFoundUsername = query;
-//                                notifyDataSetChanged();
-//                            }
-//                        }
-//                        reqId = 0;
-//                    }
-//                });
-//            }
-//        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+//        if (reqId != 0) {
+//            ConnectionsManager.getInstance().cancelRpc(reqId, true);
+//            reqId = 0;
+//        }
     }
 
     public void loadRecentHashtags() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
index 2f1dd2be2..2e28a5e63 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseSearchAdapterRecycler.java
@@ -43,39 +43,10 @@
     protected boolean hashtagsLoadedFromDb = false;
 
     public void queryServerSearch(final String query) {
-        if (reqId != 0) {
-            ConnectionsManager.getInstance().cancelRpc(reqId, true);
-            reqId = 0;
-        }
-        if (query == null || query.length() < 5) {
-            globalSearch.clear();
-            lastReqId = 0;
-            notifyDataSetChanged();
-            return;
-        }
-        TLRPC.TL_contacts_search req = new TLRPC.TL_contacts_search();
-        req.q = query;
-        req.limit = 50;
-        final int currentReqId = ++lastReqId;
-//        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-//            @Override
-//            public void run(final TLObject response, final TLRPC.TL_error error) {
-//                AndroidUtilities.runOnUIThread(new Runnable() {
-//                    @Override
-//                    public void run() {
-//                        if (currentReqId == lastReqId) {
-//                            if (error == null) {
-//                                TLRPC.TL_contacts_found res = (TLRPC.TL_contacts_found) response;
-//                                globalSearch = res.users;
-//                                lastFoundUsername = query;
-//                                notifyDataSetChanged();
-//                            }
-//                        }
-//                        reqId = 0;
-//                    }
-//                });
-//            }
-//        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+//        if (reqId != 0) {
+//            ConnectionsManager.getInstance().cancelRpc(reqId, true);
+//            reqId = 0;
+//        }
     }
 
     public void loadRecentHashtags() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index cba6d94ef..ffb668977 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -662,7 +662,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                 }
                             }
                             if (username != null || group != null || sticker != null) {
-                                runLinkRequest(username, group, sticker, 0);
+//                                runLinkRequest(username, group, sticker, 0);
                             } else {
                                 try {
                                     Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
@@ -753,43 +753,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
         return false;
     }
 
-    private void runLinkRequest(final String username, final String group, final String sticker, final int state) {
-        final ProgressDialog progressDialog = new ProgressDialog(this);
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-        long requestId = 0;
-
-        if (username != null) {
-            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
-            req.username = username;
-//            requestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() { });
-        } else if (group != null) {
-            if (state == 0) {
-                final TLRPC.TL_messages_checkChatInvite req = new TLRPC.TL_messages_checkChatInvite();
-                req.hash = group;
-//                requestId = ConnectionsManager.getInstance().performRpc(req, );
-            } else if (state == 1) {
-                TLRPC.TL_messages_importChatInvite req = new TLRPC.TL_messages_importChatInvite();
-                req.hash = group;
-//                ConnectionsManager.getInstance().performRpc(req, );
-            }
-        }
 
-        final long reqId = requestId;
-        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                ConnectionsManager.getInstance().cancelRpc(reqId, true);
-                try {
-                    dialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        progressDialog.show();
-    }
 
     public AlertDialog showAlertDialog(AlertDialog.Builder builder) {
         try {
