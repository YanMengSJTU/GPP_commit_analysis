diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 69d3a7f90..44b8707bd 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -26,6 +26,7 @@
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.messenger.support.SparseLongArray;
 import org.telegram.messenger.voip.VoIPService;
+import org.telegram.rain.RainPreferences;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.NativeByteBuffer;
 import org.telegram.tgnet.RequestDelegate;
@@ -260,6 +261,8 @@ public void run() {
     public static final int UPDATE_MASK_MESSAGE_TEXT = 32768;
     public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
 
+    private RainPreferences rainPreferences;
+
     private class ReadTask {
         public long dialogId;
         public int maxId;
@@ -367,6 +370,8 @@ public MessagesController(int num) {
         ImageLoader.getInstance();
         MessagesStorage.getInstance(currentAccount);
         LocationController.getInstance(currentAccount);
+        rainPreferences = new RainPreferences(ApplicationLoader.applicationContext);
+
         AndroidUtilities.runOnUIThread(() -> {
             MessagesController messagesController = getInstance(currentAccount);
             NotificationCenter.getInstance(currentAccount).addObserver(messagesController, NotificationCenter.FileDidUpload);
@@ -3366,7 +3371,7 @@ public void cancelTyping(int action, long dialog_id) {
     }
 
     public void sendTyping(final long dialog_id, final int action, int classGuid) {
-        if (dialog_id == 0) {
+        if (dialog_id == 0 || !rainPreferences.getEnableTypingUpdates()) {
             return;
         }
         LongSparseArray<Boolean> typings = sendingTypings.get(action);
diff --git a/TMessagesProj/src/main/java/org/telegram/rain/RainPreferences.java b/TMessagesProj/src/main/java/org/telegram/rain/RainPreferences.java
new file mode 100644
index 000000000..8ed3dc3eb
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/rain/RainPreferences.java
@@ -0,0 +1,24 @@
+package org.telegram.rain;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+public class RainPreferences {
+
+    private SharedPreferences preferences;
+
+    public RainPreferences(Context context) {
+        preferences = context.getSharedPreferences("org.telegram.messenger.rain", Context.MODE_PRIVATE);
+    }
+
+    public void setEnableTypingUpdates(boolean value) {
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("EnableTypingUpdates", value);
+        editor.apply();
+    }
+
+    public boolean getEnableTypingUpdates() {
+        return preferences.getBoolean("EnableTypingUpdates", true);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/RainSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/RainSettingsActivity.java
new file mode 100644
index 000000000..77784d256
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/RainSettingsActivity.java
@@ -0,0 +1,181 @@
+package org.telegram.ui;
+
+import android.content.Context;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.support.widget.LinearLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.rain.RainPreferences;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.RecyclerListView;
+
+public class RainSettingsActivity extends BaseFragment {
+
+    private ListAdapter listAdapter;
+    private RecyclerListView listView;
+    private RainPreferences preferences;
+
+    private int privacySectionRow;
+    private int typingUpdatesRow;
+    private int privacySection2Row;
+
+    private int rowCount;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        privacySectionRow = rowCount++;
+        typingUpdatesRow = rowCount++;
+        privacySection2Row = rowCount++;
+
+        return true;
+    }
+
+    @Override
+    public View createView(Context context) {
+
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+
+        actionBar.setTitle(LocaleController.getString("RainSettings", R.string.RainSettings));
+        if (AndroidUtilities.isTablet()) {
+            actionBar.setOccupyStatusBar(false);
+        }
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        preferences = new RainPreferences(context);
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        fragmentView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+        listView = new RecyclerListView(context);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false));
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+        listView.setAdapter(listAdapter);
+        listView.setOnItemClickListener((view, position) -> {
+            if (position == typingUpdatesRow) {
+                TextCheckCell checkCell = (TextCheckCell) view;
+                boolean newValue = !checkCell.isChecked();
+                preferences.setEnableTypingUpdates(newValue);
+                checkCell.setChecked(newValue);
+            }
+        });
+
+        return fragmentView;
+
+    }
+
+    private class ListAdapter extends RecyclerListView.SelectionAdapter {
+
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public int getItemCount() {
+            return rowCount;
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            switch (holder.getItemViewType()) {
+                case 0: {
+                    if (position == privacySection2Row) {
+                        holder.itemView.setBackgroundDrawable(Theme.getThemedDrawable(mContext, R.drawable.greydivider_bottom, Theme.key_windowBackgroundGrayShadow));
+                    } else {
+                        holder.itemView.setBackgroundDrawable(Theme.getThemedDrawable(mContext, R.drawable.greydivider, Theme.key_windowBackgroundGrayShadow));
+                    }
+                    break;
+                }
+                case 2: {
+                    HeaderCell headerCell = (HeaderCell) holder.itemView;
+                    if (position == privacySectionRow) {
+                        headerCell.setText(LocaleController.getString("PrivacyTitle", R.string.PrivacyTitle));
+                    }
+                    break;
+                }
+                case 3: {
+                    TextCheckCell checkCell = (TextCheckCell) holder.itemView;
+                    if (position == typingUpdatesRow) {
+                        checkCell.setTextAndCheck(LocaleController.getString("SendTypingUpdates", R.string.SendTypingUpdates), preferences.getEnableTypingUpdates(), false);
+                    }
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public boolean isEnabled(RecyclerView.ViewHolder holder) {
+            int position = holder.getAdapterPosition();
+            return (position == typingUpdatesRow);
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = null;
+
+            switch (viewType) {
+                case 0: {
+                    view = new ShadowSectionCell(mContext);
+                    break;
+                }
+                case 2: {
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                }
+                case 3: {
+                    view = new TextCheckCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                }
+            }
+
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
+            return new RecyclerListView.Holder(view);
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position == privacySection2Row) {
+                return 0;
+            }
+            if (position == privacySectionRow) {
+                return 2;
+            }
+            if (position == typingUpdatesRow) {
+                return 3;
+            }
+            return 1;
+        }
+
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 6001e2081..e3f41a8a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -150,6 +150,7 @@
     private int privacyRow;
     private int dataRow;
     private int chatRow;
+    private int rainRow;
     private int helpRow;
     private int versionRow;
     private int rowCount;
@@ -227,6 +228,7 @@ public boolean onFragmentCreate() {
         privacyRow = rowCount++;
         dataRow = rowCount++;
         chatRow = rowCount++;
+        rainRow = rowCount++;
         languageRow = rowCount++;
         helpRow = rowCount++;
         versionRow = rowCount++;
@@ -357,6 +359,8 @@ public boolean supportsPredictiveItemAnimations() {
                 presentFragment(new DataSettingsActivity());
             } else if (position == chatRow) {
                 presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC));
+            } else if (position == rainRow) {
+                presentFragment(new RainSettingsActivity());
             } else if (position == helpRow) {
                 BottomSheet.Builder builder = new BottomSheet.Builder(context);
                 builder.setApplyTopPadding(false);
@@ -1204,6 +1208,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         textCell.setTextAndIcon(LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, true);
                     } else if (position == chatRow) {
                         textCell.setTextAndIcon(LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, true);
+                    } else if (position == rainRow) {
+                        textCell.setTextAndIcon(LocaleController.getString("RainSettings", R.string.RainSettings), R.drawable.menu_settings, true);
                     } else if (position == helpRow) {
                         textCell.setTextAndIcon(LocaleController.getString("SettingsHelp", R.string.SettingsHelp), R.drawable.menu_help, false);
                     }
@@ -1258,7 +1264,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             return position == notificationRow || position == numberRow || position == privacyRow ||
                     position == languageRow || position == usernameRow || position == bioRow ||
                     position == versionRow || position == dataRow || position == chatRow ||
-                    position == helpRow;
+                    position == rainRow || position == helpRow;
         }
 
         @Override
@@ -1335,7 +1341,7 @@ public int getItemViewType(int position) {
             } else if (position == settingsSectionRow) {
                 return 1;
             } else if (position == notificationRow || position == privacyRow || position == languageRow ||
-                    position == dataRow || position == chatRow || position == helpRow) {
+                    position == dataRow || position == chatRow || position == rainRow || position == helpRow) {
                 return 2;
             } else if (position == versionRow) {
                 return 5;
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index e30bce462..01323faee 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -2491,4 +2491,6 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
     <string name="formatDateScheduleDay">EEE MMM d</string>
+    <string name="RainSettings" translatable="false">Rain Experiments</string>
+    <string name="SendTypingUpdates" translatable="false">Send typing updates</string>
 </resources>
