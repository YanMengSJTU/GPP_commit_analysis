diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index e5b320f8b..2e039bfdf 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -780,7 +780,7 @@ public void run() {
                 }
                 if (rTree == null) {
                     rTree = RTree.create();
-                    String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/";
+                    String cameraFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath() + "/" + "Camera/"; //TODO hard code???
 
                     // TODO filter files list. and in parallel check time of the last update?
 //               TODO  Or update rTree one per week ! (per day). OR if the number of files is changed. new photo added or something deleted. !!
@@ -801,7 +801,10 @@ public boolean accept(File dir, String name) {
                             continue;
                         }
                         String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME);
-                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd hh:mm:ss", Locale.getDefault());
+                        if (datetime == null) {
+                            continue;
+                        }
+                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(Constants.SIMPLE_DATE_FORMAT_PATTERN, Locale.getDefault());
                         Date date;
                         try {
                             date = simpleDateFormat.parse(datetime);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index fa24d7b96..ffc248ea6 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -9,6 +9,7 @@
 package org.telegram.android;
 
 import ru.aragats.wgo.ApplicationLoader;
+
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.FileLog;
 
@@ -18,8 +19,6 @@
 public class NotificationCenter {
 
 
-
-
     private static int totalEvents = 1;
 
     public static final int switchToOfflineMode = totalEvents++;
@@ -35,7 +34,9 @@
     public static final int offlinePostsLoaded = totalEvents++;
 
     public static final int savePostError = totalEvents++;
-//    public static final int loadPostsError = totalEvents++;
+    //    public static final int loadPostsError = totalEvents++;
+    public static final int invalidPhoto = totalEvents++;
+
 
     public static final int didReceivedNewPosts = totalEvents++; //TODO
     public static final int updateInterfaces = totalEvents++; //TODO
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 69dd83c9f..bbd087177 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -277,8 +277,8 @@ public void loadPosts(final String idOffset, final int offset, final int count,
             nextOffset = 0;
             loadLocalPosts(postRequest, reload);
         } else {
-            loadPostFromServer(postRequest, reload);
-//            loadVKPhotos(postRequest, reload);
+//            loadPostFromServer(postRequest, reload);
+            loadVKPhotos(postRequest, reload);
         }
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java b/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
index 1a942d0e6..d76b360b7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/location/LocationManagerHelper.java
@@ -10,14 +10,18 @@
 import android.location.LocationManager;
 import android.os.Bundle;
 
+import org.telegram.messenger.TLRPC;
+import org.telegram.utils.CollectionUtils;
 import org.telegram.utils.StringUtils;
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
 
 import ru.aragats.wgo.ApplicationLoader;
+import ru.aragats.wgo.dto.Coordinates;
 
 /**
  * Created by aragats on 15/09/15.
@@ -109,7 +113,7 @@ public Location getLastLocation() {
         List<String> providers = lm.getProviders(true);
         Location l = null;
         for (int i = providers.size() - 1; i >= 0; i--) {
-            l = lm.getLastKnownLocation(providers.get(i));
+            l = lm.getLastKnownLocation(providers.get(i)); // TODO potential error.
             if (l != null) {
                 break;
             }
@@ -327,4 +331,38 @@ public Location getCustomLocation() {
     public void setCustomLocation(Location customLocation) {
         this.customLocation = customLocation;
     }
+
+
+    public static Coordinates convertLocationToCoordinates(Location location) {
+        if (location == null) {
+            return null;
+        }
+        Coordinates coordinates = new Coordinates();
+        coordinates.setCoordinates(Arrays.asList(location.getLongitude(), location.getLatitude()));
+        coordinates.setType("Point");
+        return coordinates;
+    }
+
+    public static Location convertCoordinatesToLocation(Coordinates coordinates) {
+        if (coordinates == null || CollectionUtils.isEmpty(coordinates.getCoordinates())) {
+            return null;
+        }
+        List<Double> coords = coordinates.getCoordinates();
+        Location location = new Location("network");
+        location.setLatitude(coords.get(1));
+        location.setLongitude(coords.get(0));
+        return location;
+    }
+
+    public static Location convertGeoPointToLocation(TLRPC.GeoPoint geoPoint) {
+        if (geoPoint == null) {
+            return null;
+        }
+        Location location = new Location("network");
+        location.setLatitude(geoPoint.lat);
+        location.setLongitude(geoPoint._long);
+        return location;
+    }
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
index 7044bc993..7de4bc89b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
@@ -35,6 +35,7 @@
 import android.widget.LinearLayout;
 import android.widget.ListView;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.google.android.gms.maps.CameraUpdate;
 import com.google.android.gms.maps.CameraUpdateFactory;
@@ -126,6 +127,9 @@
 
 
     private boolean searchPlacesEnable;
+    private boolean restrictedArea;
+    private int radius;
+
 
     public interface LocationActivityDelegate {
         void didSelectLocation(TLRPC.MessageMedia location);
@@ -134,6 +138,9 @@
     public LocationActivityAragats(Bundle args) {
         super(args);
         searchPlacesEnable = getArguments().getBoolean(Constants.SEARCH_PLACES_ENABLE_ARG, false);
+        // Circle area restriction.
+        restrictedArea = getArguments().getBoolean(Constants.RESTRICTED_AREA, false);
+        radius = getArguments().getInt(Constants.RADIUS_ARG, Constants.RADIUS);
     }
 
     @Override
@@ -465,9 +472,15 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                             location.geo.lat = userLocation.getLatitude();
                             location.geo._long = userLocation.getLongitude();
                             location.isCustomLocation = adapter.isCustomLocation();
-                            delegate.didSelectLocation(location);
+                            // check whether is inside the radius only when there is the radius.
+                            boolean valid = validChosenLocation(LocationManagerHelper.convertGeoPointToLocation(location.geo));
+                            if (valid) {
+                                delegate.didSelectLocation(location);
+                                finishFragment();
+                            } else {
+                                Toast.makeText(getParentActivity(), "Invalid location. Choose the location inside the circle", Toast.LENGTH_LONG).show();
+                            }
                         }
-                        finishFragment();
                     } else {
                         TLRPC.TL_messageMediaVenue object = adapter.getItem(position);
                         if (object != null && delegate != null) {
@@ -577,6 +590,11 @@ public void onClick(View v) {
                         adapter.setCustomLocation(null);
                         userLocationMoved = false;
                         googleMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(myLocation.getLatitude(), myLocation.getLongitude())));
+                        // TODO back to location of the center ????? of the custom location. do I need it ?
+                        if (restrictedArea && customLocation != null) {
+                            adapter.setCustomLocation(customLocation);
+                            googleMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(customLocation.getLatitude(), customLocation.getLongitude())));
+                        }
                     }
                 }
             });
@@ -645,7 +663,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                 userLocation.setLatitude(20.659322);
                 userLocation.setLongitude(-11.406250);
                 if (customLocation != null) {
-                    userLocation = customLocation;
+                    userLocation = new Location(customLocation);
                     adapter.setCustomLocation(userLocation);
                 }
             }
@@ -671,16 +689,20 @@ public void onMyLocationChange(Location location) {
 
 
             //TODO in case of myLocation is null. it does not work !!!! Consider it !!!!
-            // Circle area restriction.
-            boolean restrictedArea = getArguments().getBoolean(Constants.RESTRICTED_AREA, false);
-            final int radius = getArguments().getInt(Constants.RADIUS_ARG, Constants.RADIUS);
             if (restrictedArea) {
                 googleMap.setOnCameraChangeListener(new GoogleMap.OnCameraChangeListener() {
                     @Override
                     public void onCameraChange(CameraPosition cameraPosition) {
+                        //TODO reuse validChosenLocation;
                         if (userLocation != null && myLocation != null) {
-                            if (myLocation.distanceTo(userLocation) > radius) {
-                                CameraUpdate position = CameraUpdateFactory.newLatLng(new LatLng(myLocation.getLatitude(), myLocation.getLongitude()));
+                            Location centerLocation = myLocation;
+                            if (customLocation != null) {
+                                centerLocation = customLocation;
+                            }
+                            if (centerLocation.distanceTo(userLocation) > radius) {
+                                userLocation = new Location(centerLocation);
+                                adapter.setCustomLocation(userLocation); // ?
+                                CameraUpdate position = CameraUpdateFactory.newLatLng(new LatLng(centerLocation.getLatitude(), centerLocation.getLongitude()));
                                 googleMap.animateCamera(position);
                             }
                         }
@@ -688,6 +710,10 @@ public void onCameraChange(CameraPosition cameraPosition) {
                 });
 
                 if (myLocation != null) {
+                    Location centerLocation = myLocation;
+                    if (customLocation != null) {
+                        centerLocation = customLocation;
+                    }
 //                googleMap.addCircle(new CircleOptions()
 //                        .center(new LatLng(myLocation.getLatitude(), myLocation.getLongitude()))
 //                        .radius(Constants.RADIUS)
@@ -696,7 +722,7 @@ public void onCameraChange(CameraPosition cameraPosition) {
 //                        .strokeWidth(2));
 
                     CircleOptions circleOptions = new CircleOptions()
-                            .center(new LatLng(myLocation.getLatitude(), myLocation.getLongitude()))
+                            .center(new LatLng(centerLocation.getLatitude(), centerLocation.getLongitude()))
                             .radius(radius)
                             .strokeWidth(1)
                             .strokeColor(Color.BLUE)
@@ -884,7 +910,7 @@ private void positionMarker(Location location) {
             }
             if (!userLocationMoved) {
                 if (customLocation != null) {
-                    userLocation = customLocation; // again assign but already done earlier.
+                    userLocation = new Location(customLocation); // again assign but already done earlier.
                     latLng = new LatLng(customLocation.getLatitude(), customLocation.getLongitude());
                 } else {
                     userLocation = new Location(location);
@@ -976,4 +1002,21 @@ public void setCustomLocation(Location customLocation) {
     public Location getCustomLocation() {
         return customLocation;
     }
+
+
+    private boolean validChosenLocation(Location location) {
+        if (restrictedArea) {
+            if (location != null && myLocation != null) {
+                Location centerLocation = myLocation;
+                if (customLocation != null) {
+                    centerLocation = customLocation;
+                }
+                if (centerLocation.distanceTo(location) <= radius) {
+                    return true;
+                }
+            }
+            return false;
+        }
+        return true;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index f1d1469dc..6212e0ba2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -31,9 +31,6 @@
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
 import org.telegram.android.NotificationCenter;
-import ru.aragats.wgo.ApplicationLoader;
-import ru.aragats.wgo.R;
-
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
@@ -47,11 +44,16 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
+import ru.aragats.wgo.ApplicationLoader;
+import ru.aragats.wgo.R;
+
 public class PhotoAlbumPickerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
     public interface PhotoAlbumPickerActivityDelegate {
         void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos);
+
         boolean didSelectVideo(String path);
+
         void startPhotoSelectActivity();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index b856b7c79..60c1ab8a1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -71,8 +71,12 @@
 import org.telegram.utils.StringUtils;
 
 import java.io.File;
+import java.io.IOException;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 
@@ -154,7 +158,7 @@ public PostCreateActivity(Bundle args) {
     public boolean onFragmentCreate() {
         //TODO-temp
 //        PostsController.getInstance().loadCurrentVenue("location");
-        userCoordinates = convertLocationToCoordinates(LocationManagerHelper.getInstance().getLastLocation());
+        userCoordinates = LocationManagerHelper.convertLocationToCoordinates(LocationManagerHelper.getInstance().getLastLocation());
         if (userCoordinates != null && venue == null) {
             venue = new Venue();
             venue.setCoordinates(userCoordinates);
@@ -171,6 +175,7 @@ public boolean onFragmentCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewPosts);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.invalidPhoto);
 
         if (getArguments() != null) {
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -207,6 +212,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewPosts);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.invalidPhoto);
 
 
         if (!AndroidUtilities.isTablet() && getParentActivity() != null) {
@@ -739,7 +745,8 @@ private void updateTitle() {
         String name;
         if (venue != null && !StringUtils.isEmpty(venue.getName())) {
             name = venue.getName();
-        } else if (userCoordinates != null) { //TODO Current Location is better to rename to Location. ??? May be is better to delete Place(Ort)
+        } else if (userCoordinates != null ||
+                (!CollectionUtils.isEmpty(posts) && posts.get(0) != null && posts.get(0).getCoordinates() != null)) { //TODO Current Location is better to rename to Location. ??? May be is better to delete Place(Ort)
             name = LocaleController.getString("CurrentLocation", R.string.CurrentLocation);
         } else {
             name = LocaleController.getString("Place", R.string.Place);
@@ -769,6 +776,9 @@ private void updateSubtitle() {
                 List<Double> coordinates = venue.getCoordinates().getCoordinates();
                 addressString = String.format(Locale.US, "(%f,%f)", coordinates.get(1), coordinates.get(0));
             }
+        } else if (!CollectionUtils.isEmpty(posts) && posts.get(0) != null && posts.get(0).getCoordinates() != null) {
+            List<Double> coordinates = posts.get(0).getCoordinates().getCoordinates();
+            addressString = String.format(Locale.US, "(%f,%f)", coordinates.get(1), coordinates.get(0));
         } else if (userCoordinates != null) {
 //            addressString = LocationManagerHelper.getInstance().getAddress(getParentActivity(),
 //                    userCoordinates.getCoordinates().get(0),
@@ -904,8 +914,9 @@ public void didReceivedNotification(int id, final Object... args) {
 //                postCreateActivityEnterView.setFieldText("");
 //            }
             progressDialog.dismiss();
-            Toast.makeText(getParentActivity(), "Error in saving post", Toast.LENGTH_SHORT).show();
-
+            Toast.makeText(getParentActivity(), "Error in saving post", Toast.LENGTH_LONG).show();
+        } else if (id == NotificationCenter.invalidPhoto) {
+            Toast.makeText(getParentActivity(), "Invalid photo. It is too old. Please use recent photo from the last 7 days.", Toast.LENGTH_LONG).show();
 
         }
     }
@@ -1000,9 +1011,13 @@ public void onPause() {
                 //TODO save text before pause.
                 if (text != null) {
                     editor.putString(Constants.PREF_NEW_POST_TEXT, text);
+                } else {
+                    editor.remove(Constants.PREF_NEW_POST_TEXT);
                 }
                 if (!posts.isEmpty()) {
                     editor.putString(Constants.PREF_NEW_POST_PHOTO, posts.get(0).getPreviewImage().getUrl());
+                } else {
+                    editor.remove(Constants.PREF_NEW_POST_PHOTO);
                 }
                 editor.commit();
                 PostsController.getInstance().setLastVenue(venue);
@@ -1234,6 +1249,10 @@ public void didPressedCancelSendButton(PostMediaCell cell) {
                         Post post = cell.getPost();
                         posts.remove(post);
                         posts.clear();
+                        venue = new Venue();
+                        userCoordinates = LocationManagerHelper.convertLocationToCoordinates(LocationManagerHelper.getInstance().getLastLocation());
+                        venue.setCoordinates(userCoordinates);
+                        updateVenue();
                         postCreateAdapter.notifyDataSetChanged();
                     }
 
@@ -1384,6 +1403,10 @@ private void openLocationChooser() {
         args.putInt(Constants.RADIUS_ARG, Constants.RADIUS);
         args.putBoolean(Constants.SEARCH_PLACES_ENABLE_ARG, true);
         LocationActivityAragats fragment = new LocationActivityAragats(args);
+        Post post = getPost();
+        if (post != null && post.getCoordinates() != null) {
+            fragment.setCustomLocation(LocationManagerHelper.convertCoordinatesToLocation(post.getCoordinates()));
+        }
         fragment.setDelegate(new LocationActivityAragats.LocationActivityDelegate() {
             @Override
             public void didSelectLocation(TLRPC.MessageMedia location) {
@@ -1490,13 +1513,64 @@ private void didSelectPhotos(ArrayList<String> photos) {
             //TODO-temp
 //            PostCreateActivity.this.post = new PostObject(post);
             //DELETE ALL to store only one
-            PostCreateActivity.this.posts.clear();
-            PostCreateActivity.this.posts.add(post);
 
+            updatePost(post);
+            PostCreateActivity.this.posts.clear();
+            if (validPost(post)) {
+                PostCreateActivity.this.posts.add(post);
+                if (post.getCoordinates() != null) {
+                    venue = new Venue();
+                    venue.setCoordinates(post.getCoordinates());
+                    updateVenue();
+                }
+            } else {
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.invalidPhoto);
+            }
             postCreateAdapter.notifyDataSetChanged();
         }
     }
 
+    private boolean validPost(Post post) {
+        return (new Date().getTime() - post.getCreatedDate()) < Constants.MAX_DATE_SHIFT;
+    }
+
+    private void updatePost(Post post) {
+        ExifInterface exif;
+        try {
+            exif = new ExifInterface(post.getImage().getUrl());
+        } catch (IOException e) {
+            //TODO handle exception.
+            e.printStackTrace();
+            return;
+        }
+        if (exif == null) {
+            return;
+        }
+//        new Date(new File(post.getImage().getUrl()).lastModified())
+        String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME); // could be null
+        if (!StringUtils.isEmpty(datetime)) {
+            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(Constants.SIMPLE_DATE_FORMAT_PATTERN, Locale.getDefault());
+            Date date;
+            try {
+                date = simpleDateFormat.parse(datetime);
+            } catch (ParseException e) {
+                //TODO handle exception
+                e.printStackTrace();
+                return;
+            }
+            post.setCreatedDate(date.getTime());
+        }
+        float[] coords = new float[2];
+        boolean result = exif.getLatLong(coords);
+        if (result) {
+            Coordinates coordinates = new Coordinates();
+            coordinates.setType(Constants.POINT);
+            coordinates.setCoordinates(Arrays.asList((double) coords[1], (double) coords[0]));
+            post.setCoordinates(coordinates);
+        }
+
+    }
+
     // url = file path or whatever suitable URL you want.
     public static String getMimeType(String url) {
         String type = null;
@@ -1598,15 +1672,11 @@ private void clearStates() {
 
     }
 
-
-    private Coordinates convertLocationToCoordinates(Location location) {
-        if (location == null) {
-            return null;
+    private Post getPost() {
+        if (!CollectionUtils.isEmpty(posts)) {
+            return posts.get(0);
         }
-        Coordinates coordinates = new Coordinates();
-        coordinates.setCoordinates(Arrays.asList(location.getLongitude(), location.getLatitude()));
-        coordinates.setType("Point");
-        return coordinates;
+        return null;
     }
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index 50f815c17..61b631f31 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -1,5 +1,8 @@
 package org.telegram.utils;
 
+import java.text.SimpleDateFormat;
+import java.util.Locale;
+
 /**
  * Created by aragats on 15/05/15.
  */
@@ -69,9 +72,14 @@
 
     public static String POINT = "Point";
 
+    public static long MAX_DATE_SHIFT = 7*24*60*60*1000;
+
     public static final int MAX_RESULTS = 10;
 
 
     public static final int IMAGE_2_MB = 2 * 1024 * 1024; // 1 MB
     public static final int IMAGE_1_MB = 1024 * 1024; // 1 MB
+
+    public static final String SIMPLE_DATE_FORMAT_PATTERN = "yyyy:MM:dd hh:mm:ss";
+    public static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat(SIMPLE_DATE_FORMAT_PATTERN, Locale.getDefault());
 }
\ No newline at end of file
