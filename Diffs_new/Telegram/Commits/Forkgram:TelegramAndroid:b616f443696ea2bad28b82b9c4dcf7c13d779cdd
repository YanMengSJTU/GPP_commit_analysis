diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 3b7a5b2e1..028784e77 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -17,7 +17,6 @@ dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.0'
     implementation 'com.google.firebase:firebase-config:16.0.0'
     implementation 'com.google.android.gms:play-services-maps:15.0.1'
-    implementation 'com.google.android.gms:play-services-wallet:16.0.0'
     implementation 'com.google.android.gms:play-services-wearable:15.0.1'
     implementation 'com.android.support:support-core-ui:28.0.0-rc01'
     implementation 'com.android.support:support-compat:28.0.0-rc01'
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 8f1c716be..90cdfd1f2 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -367,8 +367,6 @@
         <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_W" android:value="632dp" />
         <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_H" android:value="598dp" />
 
-        <!--<meta-data android:name="com.google.android.gms.wallet.api.enabled" android:value="true" />-->
-
         <meta-data android:name="com.google.android.gms.car.notification.SmallIcon" android:resource="@drawable/ic_player" />
         <meta-data android:name="com.google.android.gms.car.application" android:resource="@xml/automotive_app_desc" />
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java
index dcbeb139f..a9ed29b4c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PaymentFormActivity.java
@@ -58,32 +58,13 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.google.android.gms.common.api.GoogleApiClient;
-import com.google.android.gms.wallet.Cart;
-import com.google.android.gms.wallet.FullWallet;
-import com.google.android.gms.wallet.FullWalletRequest;
-import com.google.android.gms.wallet.LineItem;
-import com.google.android.gms.wallet.MaskedWallet;
-import com.google.android.gms.wallet.MaskedWalletRequest;
-import com.google.android.gms.wallet.PaymentMethodTokenizationParameters;
-import com.google.android.gms.wallet.PaymentMethodTokenizationType;
-import com.google.android.gms.wallet.Wallet;
-import com.google.android.gms.wallet.WalletConstants;
-import com.google.android.gms.wallet.fragment.WalletFragment;
-import com.google.android.gms.wallet.fragment.WalletFragmentInitParams;
-import com.google.android.gms.wallet.fragment.WalletFragmentMode;
-import com.google.android.gms.wallet.fragment.WalletFragmentOptions;
-import com.google.android.gms.wallet.fragment.WalletFragmentStyle;
 import com.stripe.android.Stripe;
 import com.stripe.android.TokenCallback;
 import com.stripe.android.exception.APIConnectionException;
 import com.stripe.android.exception.APIException;
 import com.stripe.android.model.Card;
 import com.stripe.android.model.Token;
-import com.stripe.android.net.StripeApiHandler;
-import com.stripe.android.net.TokenParser;
 
-import org.json.JSONException;
 import org.json.JSONObject;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
@@ -169,8 +150,6 @@
     private HashMap<String, String> codesMap = new HashMap<>();
     private HashMap<String, String> phoneFormatMap = new HashMap<>();
 
-    private GoogleApiClient googleApiClient;
-
     private EditTextBoldCursor[] inputFields;
     private RadioCell[] radioCells;
     private ActionBarMenuItem doneItem;
@@ -187,7 +166,6 @@
     private TextCheckCell checkCell1;
     private TextInfoPrivacyCell bottomCell[] = new TextInfoPrivacyCell[3];
     private TextSettingsCell settingsCell1;
-    private FrameLayout androidPayContainer;
     private LinearLayout linearLayout2;
 
     private PaymentFormActivityDelegate delegate;
@@ -405,16 +383,6 @@ public void onResume() {
                 FileLog.e(e);
             }
         }
-        if (googleApiClient != null) {
-            googleApiClient.connect();
-        }
-    }
-
-    @Override
-    public void onPause() {
-        if (googleApiClient != null) {
-            googleApiClient.disconnect();
-        }
     }
 
     @SuppressLint({"SetJavaScriptEnabled", "AddJavascriptInterface"})
@@ -992,14 +960,6 @@ public void afterTextChanged(Editable s) {
                 }
             }
             if (isWebView) {
-                if (androidPayPublicKey != null) {
-                    initAndroidPay(context);
-                }
-                androidPayContainer = new FrameLayout(context);
-                androidPayContainer.setId(fragment_container_id);
-                androidPayContainer.setBackgroundDrawable(Theme.getSelectorDrawable(true));
-                androidPayContainer.setVisibility(View.GONE);
-                linearLayout2.addView(androidPayContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
 
                 webviewLoading = true;
                 showEditDoneProgress(true, true);
@@ -1086,8 +1046,6 @@ public void onPageFinished(WebView view, String url) {
                     }
                 }
 
-                initAndroidPay(context);
-
                 inputFields = new EditTextBoldCursor[FIELDS_COUNT_CARD];
                 for (int a = 0; a < FIELDS_COUNT_CARD; a++) {
                     if (a == FIELD_CARD) {
@@ -1483,12 +1441,6 @@ public void afterTextChanged(Editable s) {
                         bottomCell[0].setBackgroundDrawable(Theme.getThemedDrawable(context, R.drawable.greydivider_bottom, Theme.key_windowBackgroundGrayShadow));
                         updateSavePaymentField();
                         linearLayout2.addView(bottomCell[0], LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-                    } else if (a == FIELD_CARD) {
-                        androidPayContainer = new FrameLayout(context);
-                        androidPayContainer.setId(fragment_container_id);
-                        androidPayContainer.setBackgroundDrawable(Theme.getSelectorDrawable(true));
-                        androidPayContainer.setVisibility(View.GONE);
-                        container.addView(androidPayContainer, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL | Gravity.RIGHT, 0, 0, 4, 0));
                     }
 
                     if (allowDivider) {
@@ -2075,45 +2027,6 @@ private void showPayAlert(final String totalPrice) {
         showDialog(builder.create());
     }
 
-    private void initAndroidPay(Context context) {
-        /*if (Build.VERSION.SDK_INT < 19) {
-            return;
-        }
-        googleApiClient = new GoogleApiClient.Builder(context)
-                .addConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {
-                    @Override
-                    public void onConnected(Bundle bundle) {
-
-                    }
-
-                    @Override
-                    public void onConnectionSuspended(int i) {
-
-                    }
-                })
-                .addOnConnectionFailedListener(connectionResult -> {
-
-                })
-                .addApi(Wallet.API, new Wallet.WalletOptions.Builder()
-                        .setEnvironment(paymentForm.invoice.test ? WalletConstants.ENVIRONMENT_TEST : WalletConstants.ENVIRONMENT_PRODUCTION)
-                        .setTheme(WalletConstants.THEME_LIGHT)
-                        .build())
-                .build();
-
-        Wallet.Payments.isReadyToPay(googleApiClient).setResultCallback(
-                booleanResult -> {
-                    if (booleanResult.getStatus().isSuccess()) {
-                        if (booleanResult.getValue()) {
-                            showAndroidPay();
-                        }
-                    } else {
-
-                    }
-                }
-        );
-        googleApiClient.connect();*/
-    }
-
     private String getTotalPriceString(ArrayList<TLRPC.TL_labeledPrice> prices) {
         long amount = 0;
         for (int a = 0; a < prices.size(); a++) {
@@ -2212,149 +2125,6 @@ public void didReceivedNotification(int id, int account, Object... args) {
         }
     }
 
-    private void showAndroidPay() {
-        if (getParentActivity() == null || androidPayContainer == null) {
-            return;
-        }
-
-        WalletFragmentOptions.Builder optionsBuilder = WalletFragmentOptions.newBuilder();
-        optionsBuilder.setEnvironment(paymentForm.invoice.test ? WalletConstants.ENVIRONMENT_TEST : WalletConstants.ENVIRONMENT_PRODUCTION);
-        optionsBuilder.setMode(WalletFragmentMode.BUY_BUTTON);
-
-        WalletFragmentStyle walletFragmentStyle;
-        if (androidPayPublicKey != null) {
-            androidPayContainer.setBackgroundColor(androidPayBackgroundColor);
-            walletFragmentStyle = new WalletFragmentStyle()
-                .setBuyButtonText(WalletFragmentStyle.BuyButtonText.BUY_WITH)
-                .setBuyButtonAppearance(androidPayBlackTheme ? WalletFragmentStyle.BuyButtonAppearance.ANDROID_PAY_LIGHT_WITH_BORDER : WalletFragmentStyle.BuyButtonAppearance.ANDROID_PAY_DARK)
-                .setBuyButtonWidth(WalletFragmentStyle.Dimension.MATCH_PARENT);
-        } else {
-            walletFragmentStyle = new WalletFragmentStyle()
-                    .setBuyButtonText(WalletFragmentStyle.BuyButtonText.LOGO_ONLY)
-                    .setBuyButtonAppearance(WalletFragmentStyle.BuyButtonAppearance.ANDROID_PAY_LIGHT_WITH_BORDER)
-                    .setBuyButtonWidth(WalletFragmentStyle.Dimension.WRAP_CONTENT);
-        }
-
-        optionsBuilder.setFragmentStyle(walletFragmentStyle);
-        WalletFragment walletFragment = WalletFragment.newInstance(optionsBuilder.build());
-        FragmentManager fragmentManager = getParentActivity().getFragmentManager();
-        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-        fragmentTransaction.replace(fragment_container_id, walletFragment);
-        fragmentTransaction.commit();
-
-        ArrayList<TLRPC.TL_labeledPrice> arrayList = new ArrayList<>(paymentForm.invoice.prices);
-        if (shippingOption != null) {
-            arrayList.addAll(shippingOption.prices);
-        }
-        totalPriceDecimal = getTotalPriceDecimalString(arrayList);
-
-        PaymentMethodTokenizationParameters parameters;
-        if (androidPayPublicKey != null) {
-            parameters = PaymentMethodTokenizationParameters.newBuilder()
-                    .setPaymentMethodTokenizationType(PaymentMethodTokenizationType.NETWORK_TOKEN)
-                    .addParameter("publicKey", androidPayPublicKey)
-                    .build();
-        } else {
-            parameters = PaymentMethodTokenizationParameters.newBuilder()
-                    .setPaymentMethodTokenizationType(PaymentMethodTokenizationType.PAYMENT_GATEWAY)
-                    .addParameter("gateway", "stripe")
-                    .addParameter("stripe:publishableKey", stripeApiKey)
-                    .addParameter("stripe:version", StripeApiHandler.VERSION)
-                    .build();
-        }
-
-        MaskedWalletRequest maskedWalletRequest = MaskedWalletRequest.newBuilder()
-                .setPaymentMethodTokenizationParameters(parameters)
-                .setEstimatedTotalPrice(totalPriceDecimal)
-                .setCurrencyCode(paymentForm.invoice.currency)
-                .build();
-
-        WalletFragmentInitParams initParams = WalletFragmentInitParams.newBuilder()
-                .setMaskedWalletRequest(maskedWalletRequest)
-                .setMaskedWalletRequestCode(LOAD_MASKED_WALLET_REQUEST_CODE)
-                .build();
-
-        walletFragment.initialize(initParams);
-        androidPayContainer.setVisibility(View.VISIBLE);
-        AnimatorSet animatorSet = new AnimatorSet();
-        animatorSet.playTogether(ObjectAnimator.ofFloat(androidPayContainer, "alpha", 0.0f, 1.0f));
-        animatorSet.setInterpolator(new DecelerateInterpolator());
-        animatorSet.setDuration(180);
-        animatorSet.start();
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (requestCode == LOAD_MASKED_WALLET_REQUEST_CODE) {
-            if (resultCode == Activity.RESULT_OK) {
-                showEditDoneProgress(true, true);
-                setDonePressed(true);
-
-                MaskedWallet maskedWallet = data.getParcelableExtra(WalletConstants.EXTRA_MASKED_WALLET);
-
-                Cart.Builder cardBuilder = Cart.newBuilder()
-                        .setCurrencyCode(paymentForm.invoice.currency)
-                        .setTotalPrice(totalPriceDecimal);
-
-                ArrayList<TLRPC.TL_labeledPrice> arrayList = new ArrayList<>(paymentForm.invoice.prices);
-                if (shippingOption != null) {
-                    arrayList.addAll(shippingOption.prices);
-                }
-                for (int a = 0; a < arrayList.size(); a++) {
-                    TLRPC.TL_labeledPrice price = arrayList.get(a);
-                    String amount = LocaleController.getInstance().formatCurrencyDecimalString(price.amount, paymentForm.invoice.currency, false);
-                    cardBuilder.addLineItem(LineItem.newBuilder()
-                            .setCurrencyCode(paymentForm.invoice.currency)
-                            .setQuantity("1")
-                            .setDescription(price.label)
-                            .setTotalPrice(amount)
-                            .setUnitPrice(amount).build());
-                }
-                FullWalletRequest fullWalletRequest = FullWalletRequest.newBuilder()
-                        .setCart(cardBuilder.build())
-                        .setGoogleTransactionId(maskedWallet.getGoogleTransactionId())
-                        .build();
-                Wallet.Payments.loadFullWallet(googleApiClient, fullWalletRequest, LOAD_FULL_WALLET_REQUEST_CODE);
-            } else {
-                showEditDoneProgress(true, false);
-                setDonePressed(false);
-            }
-        } else if (requestCode == LOAD_FULL_WALLET_REQUEST_CODE) {
-            if (resultCode == Activity.RESULT_OK) {
-                FullWallet fullWallet = data.getParcelableExtra(WalletConstants.EXTRA_FULL_WALLET);
-                String tokenJSON = fullWallet.getPaymentMethodToken().getToken();
-                try {
-                    if (androidPayPublicKey != null) {
-                        androidPayCredentials = new TLRPC.TL_inputPaymentCredentialsAndroidPay();
-                        androidPayCredentials.payment_token = new TLRPC.TL_dataJSON();
-                        androidPayCredentials.payment_token.data = tokenJSON;
-                        androidPayCredentials.google_transaction_id = fullWallet.getGoogleTransactionId();
-                        String[] descriptions = fullWallet.getPaymentDescriptions();
-                        if (descriptions.length > 0) {
-                            cardName = descriptions[0];
-                        } else {
-                            cardName = "Android Pay";
-                        }
-                    } else {
-                        Token token = TokenParser.parseToken(tokenJSON);
-                        paymentJson = String.format(Locale.US, "{\"type\":\"%1$s\", \"id\":\"%2$s\"}", token.getType(), token.getId());
-                        Card card = token.getCard();
-                        cardName = card.getType() + " *" + card.getLast4();
-                    }
-                    goToNextStep();
-                    showEditDoneProgress(true, false);
-                    setDonePressed(false);
-                } catch (JSONException ignore) {
-                    showEditDoneProgress(true, false);
-                    setDonePressed(false);
-                }
-            } else {
-                showEditDoneProgress(true, false);
-                setDonePressed(false);
-            }
-        }
-    }
-
     private void goToNextStep() {
         if (currentStep == 0) {
             int nextStep;
