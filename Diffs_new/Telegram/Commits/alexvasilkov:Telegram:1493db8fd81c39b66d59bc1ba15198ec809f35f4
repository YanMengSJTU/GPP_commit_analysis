diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index 2df7d2f9f..5952acfc1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -2047,7 +2047,7 @@ public static void openDocument(MessageObject message, Activity activity, BaseFr
             if (parentFragment != null && f.getName().toLowerCase().endsWith("attheme")) {
                 Theme.ThemeInfo themeInfo = Theme.applyThemeFile(f, message.getDocumentName(), true);
                 if (themeInfo != null) {
-                    parentFragment.presentFragment(new ThemePreviewActivity(f, themeInfo));
+                    parentFragment.presentFragment(new ThemePreviewActivity(themeInfo));
                 } else {
                     AlertDialog.Builder builder = new AlertDialog.Builder(activity);
                     builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/ArrayUtils.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/ArrayUtils.java
index 5f6998fe8..0aca568f2 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/ArrayUtils.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/ArrayUtils.java
@@ -134,6 +134,17 @@ public static boolean contains(int[] array, int value) {
         return false;
     }
 
+    public static int indexOf(int[] array, int value) {
+        if (array != null) {
+            for (int a = 0; a < array.length; a++) {
+                if (array[a] == value) {
+                    return a;
+                }
+            }
+        }
+        return -1;
+    }
+
     public static long total(long[] array) {
         long total = 0;
         for (long value : array) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index 1d0dfa081..9b4a1bc3d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -95,7 +95,26 @@
         final float[] accentBaseColorHsv = new float[3];
         final float[] accentColorHsv = new float[3];
 
-        public JSONObject getSaveJson() {
+        ThemeInfo() {}
+
+        public ThemeInfo(ThemeInfo other) {
+            name = other.name;
+            pathToFile = other.pathToFile;
+            assetName = other.assetName;
+            previewBackgroundColor = other.previewBackgroundColor;
+            previewInColor = other.previewInColor;
+            previewOutColor = other.previewOutColor;
+            sortIndex = other.sortIndex;
+            accentColorOptions = other.accentColorOptions;
+            accentBaseColor = other.accentBaseColor;
+            accentColor = other.accentColor;
+            accentBaseColor = other.accentBaseColor;
+
+            Color.colorToHSV(accentBaseColor, accentBaseColorHsv);
+            Color.colorToHSV(accentColor, accentColorHsv);
+        }
+
+        JSONObject getSaveJson() {
             try {
                 JSONObject jsonObject = new JSONObject();
                 jsonObject.put("name", name);
@@ -2529,39 +2548,48 @@ private static void sortThemes() {
         });
     }
 
+    public static void applyThemeTemporary(ThemeInfo themeInfo) {
+        previousTheme = getCurrentTheme();
+        applyTheme(themeInfo, false, false, false);
+    }
+
     public static ThemeInfo applyThemeFile(File file, String themeName, boolean temporary) {
-        try {
-            if (themeName.equals("Default") || themeName.equals("Blue") || themeName.equals("Dark Blue") || themeName.equals("Graphite") || themeName.equals("Arctic Blue")) {
-                return null;
-            }
-            File finalFile = new File(ApplicationLoader.getFilesDirFixed(), themeName);
-            if (!AndroidUtilities.copyFile(file, finalFile)) {
-                return null;
-            }
+        if (themeName.equals("Default") || themeName.equals("Blue") || themeName.equals("Dark Blue") || themeName.equals("Graphite") || themeName.equals("Arctic Blue")) {
+            return null;
+        }
 
-            boolean newTheme = false;
-            ThemeInfo themeInfo = themesDict.get(themeName);
-            if (themeInfo == null) {
-                newTheme = true;
-                themeInfo = new ThemeInfo();
+        try {
+            if (temporary) {
+                ThemeInfo themeInfo = new ThemeInfo();
                 themeInfo.name = themeName;
-                themeInfo.pathToFile = finalFile.getAbsolutePath();
-            }
-            if (!temporary) {
+                themeInfo.pathToFile = file.getAbsolutePath();
+                applyThemeTemporary(themeInfo);
+                return themeInfo;
+            } else {
+                File finalFile = new File(ApplicationLoader.getFilesDirFixed(), themeName);
+                if (!AndroidUtilities.copyFile(file, finalFile)) {
+                    Theme.applyPreviousTheme();
+                    return null;
+                }
+
                 previousTheme = null;
-                if (newTheme) {
+
+                ThemeInfo themeInfo = themesDict.get(themeName);
+                if (themeInfo == null) {
+                    themeInfo = new ThemeInfo();
+                    themeInfo.name = themeName;
+                    themeInfo.pathToFile = finalFile.getAbsolutePath();
+
                     themes.add(themeInfo);
                     themesDict.put(themeInfo.name, themeInfo);
                     otherThemes.add(themeInfo);
                     sortThemes();
                     saveOtherThemes();
                 }
-            } else {
-                previousTheme = currentTheme;
-            }
 
-            applyTheme(themeInfo, !temporary, true, false);
-            return themeInfo;
+                applyTheme(themeInfo, true, true, false);
+                return themeInfo;
+            }
         } catch (Exception e) {
             FileLog.e(e);
         }
@@ -2600,7 +2628,6 @@ private static void applyTheme(ThemeInfo themeInfo, boolean save, boolean remove
                 } else {
                     currentColorsNoAccent = getThemeFileValues(new File(themeInfo.pathToFile), null);
                 }
-                applyThemeAccent(currentColorsNoAccent, currentColors, themeInfo);
             } else {
                 if (!nightTheme && save) {
                     SharedPreferences preferences = MessagesController.getGlobalMainSettings();
@@ -2611,7 +2638,7 @@ private static void applyTheme(ThemeInfo themeInfo, boolean save, boolean remove
                     }
                     editor.commit();
                 }
-                currentColors.clear();
+                currentColorsNoAccent.clear();
                 themedWallpaperFileOffset = 0;
                 wallpaper = null;
                 themedWallpaper = null;
@@ -2620,17 +2647,82 @@ private static void applyTheme(ThemeInfo themeInfo, boolean save, boolean remove
             if (!nightTheme) {
                 currentDayTheme = currentTheme;
             }
-            reloadWallpaper();
-            applyCommonTheme();
-            applyDialogsTheme();
-            applyProfileTheme();
-            applyChatTheme(false);
-            AndroidUtilities.runOnUIThread(() -> NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.didSetNewTheme, nightTheme));
+            refreshThemeColors();
         } catch (Exception e) {
             FileLog.e(e);
         }
     }
 
+    private static void refreshThemeColors() {
+        currentColors.clear();
+        currentColors.putAll(currentColorsNoAccent);
+        ThemeInfo themeInfo = currentTheme;
+
+        if (themeInfo.accentColor != 0 && themeInfo.accentBaseColor != 0 && themeInfo.accentColor != themeInfo.accentBaseColor) {
+            for (String key: currentColorsNoAccent.keySet()) {
+                if (!themeAccentExclusionKeys.contains(key)) {
+                    int color = currentColorsNoAccent.get(key);
+                    int newColor = changeColorAccent(themeInfo.accentBaseColorHsv, themeInfo.accentColorHsv, color);
+                    if (newColor != color) currentColors.put(key, newColor);
+                }
+            }
+        }
+
+        reloadWallpaper();
+        applyCommonTheme();
+        applyDialogsTheme();
+        applyProfileTheme();
+        applyChatTheme(false);
+        AndroidUtilities.runOnUIThread(() -> NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.didSetNewTheme, false));
+    }
+
+    public static int changeColorAccent(ThemeInfo themeInfo, int accent, int color) {
+        if (accent == 0 || themeInfo.accentBaseColor == 0 || accent == themeInfo.accentBaseColor) {
+            return color;
+        }
+
+        Color.colorToHSV(accent, hsv);
+        return changeColorAccent(themeInfo.accentBaseColorHsv, hsv, color);
+    }
+
+    public static int changeColorAccent(int color) {
+        return changeColorAccent(currentTheme, currentTheme.accentColor, color);
+    }
+
+    private static int changeColorAccent(float[] baseHsv, float[] accentHsv, int color) {
+        final float baseH = baseHsv[0];
+        final float baseS = baseHsv[1];
+        final float baseV = baseHsv[2];
+
+        final float accentH = accentHsv[0];
+        final float accentS = accentHsv[1];
+        final float accentV = accentHsv[2];
+
+        Color.colorToHSV(color, hsv);
+        final float colorH = hsv[0];
+        final float colorS = hsv[1];
+        final float colorV = hsv[2];
+
+        // Only changing color's accent if its hue is close to base accent
+        final float diffH = Math.min(Math.abs(colorH - baseH), Math.abs(colorH - baseH - 360f));
+        if (diffH > 30f) return color;
+
+        // Calculating saturation distance between the color and its base. To preserve better
+        // contrast colors closer to base color will receive the most brightness change.
+        float dist = Math.min(1.5f * colorS / baseS, 1f);
+
+        hsv[0] = colorH + accentH - baseH;
+        hsv[1] = colorS * accentS / baseS;
+        hsv[2] = colorV * (1f - dist + dist * accentV / baseV);
+
+        return Color.HSVToColor(Color.alpha(color), hsv);
+    }
+
+    public static void applyCurrentThemeAccent(int accent) {
+        currentTheme.setAccentColor(accent);
+        refreshThemeColors();
+    }
+
     public static void saveThemeAccent(ThemeInfo themeInfo, int accent) {
         if ("Dark Blue".equals(themeInfo.name)) {
             MessagesController.getGlobalMainSettings().edit().putInt("accentForDarkBlue", accent).commit();
@@ -2863,6 +2955,8 @@ public static void checkAutoNightThemeConditions(boolean force) {
     }
 
     private static void applyDayNightThemeMaybe(boolean night) {
+        if (previousTheme != null) return; // Avoiding theme switch if showing temporary theme
+
         if (night) {
             if (currentTheme != currentNightTheme) {
                 lastThemeSwitchTime = SystemClock.elapsedRealtime();
@@ -3038,61 +3132,6 @@ public static File getAssetFile(String assetName) {
         return stringMap;
     }
 
-    private static void applyThemeAccent(HashMap<String, Integer> source, HashMap<String, Integer> destination, ThemeInfo themeInfo) {
-        destination.clear();
-        destination.putAll(source);
-
-        if (themeInfo.accentColor == 0 || themeInfo.accentBaseColor == 0 || themeInfo.accentColor == themeInfo.accentBaseColor) {
-            return;
-        }
-
-        for (String key: source.keySet()) {
-            if (!themeAccentExclusionKeys.contains(key)) {
-                int color = source.get(key);
-                int newColor = changeColorAccent(themeInfo.accentBaseColorHsv, themeInfo.accentColorHsv, color);
-                if (newColor != color) destination.put(key, newColor);
-            }
-        }
-    }
-
-    public static int changeColorAccent(ThemeInfo themeInfo, int accent, int color) {
-        if (accent == 0 || themeInfo.accentBaseColor == 0 || accent == themeInfo.accentBaseColor) {
-            return color;
-        }
-
-        Color.colorToHSV(accent, hsv);
-        return changeColorAccent(themeInfo.accentBaseColorHsv, hsv, color);
-    }
-
-    private static int changeColorAccent(float[] baseHsv, float[] accentHsv, int color) {
-        final float baseH = baseHsv[0];
-        final float baseS = baseHsv[1];
-        final float baseV = baseHsv[2];
-
-        final float accentH = accentHsv[0];
-        final float accentS = accentHsv[1];
-        final float accentV = accentHsv[2];
-
-        Color.colorToHSV(color, hsv);
-        final float colorH = hsv[0];
-        final float colorS = hsv[1];
-        final float colorV = hsv[2];
-
-        // Only changing color's accent if its hue is close to base accent
-        final float diffH = Math.min(Math.abs(colorH - baseH), Math.abs(colorH - baseH - 360f));
-        if (diffH > 30f) return color;
-
-        // Calculating saturation distance between the color and its base. To preserve better
-        // contrast colors closer to base color will receive the most brightness change.
-        float dist = Math.min(1.5f * colorS / baseS, 1f);
-
-        hsv[0] = colorH + accentH - baseH;
-        hsv[1] = colorS * accentS / baseS;
-        hsv[2] = colorV * (1f - dist + dist * accentV / baseV);
-
-        return Color.HSVToColor(Color.alpha(color), hsv);
-    }
-
     public static void createCommonResources(Context context) {
         if (dividerPaint == null) {
             dividerPaint = new Paint();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 02133f1f1..d5a5e862a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -7708,7 +7708,7 @@ public void drawNamesLayout(Canvas canvas) {
                     Theme.chat_namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
                 } else if (currentChat != null) {
                     if (ChatObject.isChannel(currentChat) && !currentChat.megagroup) {
-                        Theme.chat_namePaint.setColor(AvatarDrawable.getNameColorForId(5));
+                        Theme.chat_namePaint.setColor(Theme.changeColorAccent(AvatarDrawable.getNameColorForId(5)));
                     } else {
                         Theme.chat_namePaint.setColor(AvatarDrawable.getNameColorForId(currentChat.id));
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java
index f8df3e6a2..f339385b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemeCell.java
@@ -197,6 +197,9 @@ public void setTheme(Theme.ThemeInfo themeInfo, boolean divider) {
             paint.setColor(Theme.getDefaultColor(Theme.key_actionBarDefault));
         }
         paintStroke.setColor(themeInfo.accentColor);
+        if (themeInfo.accentColor != 0) {
+            paintStroke.setAlpha(180);
+        }
     }
 
     public void updateCurrentThemeCheck() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
index 3a66c4f84..b3ece0a90 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelAdminLogActivity.java
@@ -1311,7 +1311,7 @@ private void processSelectedOption(int option) {
                         }
                         Theme.ThemeInfo themeInfo = Theme.applyThemeFile(locFile, selectedObject.getDocumentName(), true);
                         if (themeInfo != null) {
-                            presentFragment(new ThemePreviewActivity(locFile, themeInfo));
+                            presentFragment(new ThemePreviewActivity(themeInfo));
                         } else {
                             scrollToPositionOnRecreate = -1;
                             if (getParentActivity() == null) {
@@ -2146,7 +2146,7 @@ public void didPressImage(ChatMessageCell cell, float x, float y) {
                                 }
                                 Theme.ThemeInfo themeInfo = Theme.applyThemeFile(locFile, message.getDocumentName(), true);
                                 if (themeInfo != null) {
-                                    presentFragment(new ThemePreviewActivity(locFile, themeInfo));
+                                    presentFragment(new ThemePreviewActivity(themeInfo));
                                     return;
                                 } else {
                                     scrollToPositionOnRecreate = -1;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index df86afe5b..ecfb43b4d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -12851,7 +12851,7 @@ private void processSelectedOption(int option) {
 
                         Theme.ThemeInfo themeInfo = Theme.applyThemeFile(locFile, selectedObject.getDocumentName(), true);
                         if (themeInfo != null) {
-                            presentFragment(new ThemePreviewActivity(locFile, themeInfo));
+                            presentFragment(new ThemePreviewActivity(themeInfo));
                         } else {
                             scrollToPositionOnRecreate = -1;
                             if (getParentActivity() == null) {
@@ -14220,7 +14220,7 @@ public void didPressImage(ChatMessageCell cell, float x, float y) {
                                 }
                                 Theme.ThemeInfo themeInfo = Theme.applyThemeFile(locFile, message.getDocumentName(), true);
                                 if (themeInfo != null) {
-                                    presentFragment(new ThemePreviewActivity(locFile, themeInfo));
+                                    presentFragment(new ThemePreviewActivity(themeInfo));
                                     return;
                                 } else {
                                     scrollToPositionOnRecreate = -1;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index 5325ed8db..78f9370bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -29,6 +29,7 @@
 
     private TextPaint namePaint;
     private int color;
+    private boolean needApplyColorAccent;
     private StaticLayout textLayout;
     private float textWidth;
     private float textHeight;
@@ -82,7 +83,7 @@ public void setProfile(boolean value) {
         isProfile = value;
     }
 
-    public static int getColorIndex(int id) {
+    private static int getColorIndex(int id) {
         if (id >= 0 && id < 7) {
             return id;
         }
@@ -131,6 +132,7 @@ public void setAvatarType(int value) {
         } else {
             color = Theme.getColor(Theme.key_avatar_backgroundSaved);
         }
+        needApplyColorAccent = false;
     }
 
     public void setArchivedAvatarHiddenProgress(float progress) {
@@ -149,6 +151,7 @@ public void setInfo(TLRPC.Chat chat) {
 
     public void setColor(int value) {
         color = value;
+        needApplyColorAccent = false;
     }
 
     public void setTextSize(int size) {
@@ -160,7 +163,7 @@ public void setInfo(int id, String firstName, String lastName, boolean isBroadca
     }
 
     public int getColor() {
-        return color;
+        return needApplyColorAccent ? Theme.changeColorAccent(color) : color;
     }
 
     public void setInfo(int id, String firstName, String lastName, boolean isBroadcast, String custom) {
@@ -169,6 +172,7 @@ public void setInfo(int id, String firstName, String lastName, boolean isBroadca
         } else {
             color = getColorForId(id);
         }
+        needApplyColorAccent = id == 5; // Tinting manually set blue color
 
         drawBrodcast = isBroadcast;
         avatarType = AVATAR_TYPE_NORMAL;
@@ -238,7 +242,7 @@ public void draw(Canvas canvas) {
         }
         int size = bounds.width();
         namePaint.setColor(Theme.getColor(Theme.key_avatar_text));
-        Theme.avatar_backgroundPaint.setColor(color);
+        Theme.avatar_backgroundPaint.setColor(getColor());
         canvas.save();
         canvas.translate(bounds.left, bounds.top);
         canvas.drawCircle(size / 2.0f, size / 2.0f, size / 2.0f, Theme.avatar_backgroundPaint);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPicker.java
new file mode 100644
index 000000000..8160e0b7d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPicker.java
@@ -0,0 +1,388 @@
+package org.telegram.ui.Components;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ComposeShader;
+import android.graphics.LinearGradient;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.RadialGradient;
+import android.graphics.Shader;
+import android.graphics.SweepGradient;
+import android.graphics.drawable.Drawable;
+import android.text.Editable;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.inputmethod.EditorInfo;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.Utilities;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ActionBar.ThemeDescription;
+
+import java.util.ArrayList;
+
+public class ColorPicker extends FrameLayout {
+
+    private final ColorPickerDelegate delegate;
+    private final boolean useDefaultTheme;
+
+    private LinearLayout linearLayout;
+
+    private final int paramValueSliderWidth = AndroidUtilities.dp(20);
+
+    private Paint colorWheelPaint;
+    private Paint valueSliderPaint;
+    private Paint circlePaint;
+    private Drawable circleDrawable;
+
+    private int centerX;
+    private int centerY;
+    private int lx;
+    private int ly;
+
+    boolean ignoreTextChange;
+
+    private Bitmap colorWheelBitmap;
+
+    private EditTextBoldCursor[] colorEditText = new EditTextBoldCursor[2];
+
+    private int colorWheelRadius;
+
+    private float[] colorHSV = new float[] { 0.0f, 0.0f, 1.0f };
+
+    private float[] hsvTemp = new float[3];
+    private LinearGradient colorGradient;
+
+    private boolean circlePressed;
+    private boolean colorPressed;
+
+    public ColorPicker(Context context, ColorPickerDelegate delegate) {
+        this(context, delegate, false);
+
+    }
+
+    public ColorPicker(Context context, ColorPickerDelegate delegate, boolean useDefaultTheme) {
+        super(context);
+
+        this.delegate = delegate;
+        this.useDefaultTheme = useDefaultTheme;
+
+        setWillNotDraw(false);
+
+        circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        circleDrawable = context.getResources().getDrawable(R.drawable.knob_shadow).mutate();
+
+        colorWheelPaint = new Paint();
+        colorWheelPaint.setAntiAlias(true);
+        colorWheelPaint.setDither(true);
+
+        valueSliderPaint = new Paint();
+        valueSliderPaint.setAntiAlias(true);
+        valueSliderPaint.setDither(true);
+
+        linearLayout = new LinearLayout(context);
+        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+        addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 64, Gravity.LEFT | Gravity.TOP, 12, 14, 21, 0));
+        for (int a = 0; a < 2; a++) {
+            final int num = a;
+
+            colorEditText[a] = new EditTextBoldCursor(context);
+            colorEditText[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+            colorEditText[a].setHintColor(getThemedColor(Theme.key_windowBackgroundWhiteHintText));
+            colorEditText[a].setTextColor(getThemedColor(Theme.key_windowBackgroundWhiteBlackText));
+            colorEditText[a].setBackgroundDrawable(null);
+            colorEditText[a].setCursorColor(getThemedColor(Theme.key_windowBackgroundWhiteBlackText));
+            colorEditText[a].setCursorSize(AndroidUtilities.dp(20));
+            colorEditText[a].setCursorWidth(1.5f);
+            colorEditText[a].setSingleLine(true);
+            colorEditText[a].setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
+            colorEditText[a].setHeaderHintColor(getThemedColor(Theme.key_windowBackgroundWhiteBlueHeader));
+            colorEditText[a].setTransformHintToHeader(true);
+            colorEditText[a].setLineColors(getThemedColor(Theme.key_windowBackgroundWhiteInputField), getThemedColor(Theme.key_windowBackgroundWhiteInputFieldActivated), getThemedColor(Theme.key_windowBackgroundWhiteRedText3));
+            colorEditText[a].setPadding(0, 0, 0, 0);
+            if (a == 0) {
+                colorEditText[a].setInputType(InputType.TYPE_CLASS_TEXT);
+                colorEditText[a].setHintText(
+                        LocaleController.getString("BackgroundHexColorCode", R.string.BackgroundHexColorCode));
+            } else {
+                colorEditText[a].setInputType(InputType.TYPE_CLASS_NUMBER);
+                colorEditText[a].setHintText(LocaleController.getString("BackgroundBrightness", R.string.BackgroundBrightness));
+            }
+            colorEditText[a].setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+            InputFilter[] inputFilters = new InputFilter[1];
+            inputFilters[0] = new InputFilter.LengthFilter(a == 0 ? 7 : 3);
+            colorEditText[a].setFilters(inputFilters);
+            linearLayout.addView(colorEditText[a], LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, a == 0 ? 0.67f : 0.31f, 0, 0, a != 1 ? 23 : 0, 0));
+            colorEditText[a].addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+                    if (ignoreTextChange) {
+                        return;
+                    }
+                    ignoreTextChange = true;
+                    if (num == 0) {
+                        for (int a = 0; a < editable.length(); a++) {
+                            char ch = editable.charAt(a);
+                            if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'f' || ch >= 'A' && ch <= 'F' || ch == '#' && a == 0)) {
+                                editable.replace(a, a + 1, "");
+                                a--;
+                            }
+                        }
+                        if (editable.length() == 0) {
+                            editable.append("#");
+                        } else if (editable.charAt(0) != '#') {
+                            editable.insert(0, "#");
+                        }
+                        try {
+                            setColor(Integer.parseInt(editable.toString().substring(1), 16) | 0xff000000);
+                        } catch (Exception e) {
+                            setColor(0xffffffff);
+                        }
+                        colorEditText[1].setText(String.valueOf((int) (255 * colorHSV[2])));
+                        delegate.setColor(getColor());
+                    } else {
+                        int value = Utilities.parseInt(editable.toString());
+                        if (value > 255 || value < 0) {
+                            if (value > 255) {
+                                value = 255;
+                            } else {
+                                value = 0;
+                            }
+                            editable.replace(0, editable.length(), "" + value);
+                        }
+                        colorHSV[2] = value / 255.0f;
+                        int color = getColor();
+                        int red = Color.red(color);
+                        int green = Color.green(color);
+                        int blue = Color.blue(color);
+                        colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
+                        delegate.setColor(color);
+                    }
+                    ignoreTextChange = false;
+                }
+            });
+            colorEditText[a].setOnEditorActionListener((textView, i, keyEvent) -> {
+                if (i == EditorInfo.IME_ACTION_DONE) {
+                    AndroidUtilities.hideKeyboard(textView);
+                    return true;
+                }
+                return false;
+            });
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+        int size = Math.min(widthSize, heightSize);
+        measureChild(linearLayout, MeasureSpec.makeMeasureSpec(widthSize - AndroidUtilities.dp(42), MeasureSpec.EXACTLY), heightMeasureSpec);
+        setMeasuredDimension(size, size);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        centerX = getWidth() / 2 - paramValueSliderWidth * 2 + AndroidUtilities.dp(11);
+        centerY = getHeight() / 2 + AndroidUtilities.dp(34);
+
+        canvas.drawBitmap(colorWheelBitmap, centerX - colorWheelRadius, centerY - colorWheelRadius, null);
+
+        float hueAngle = (float) Math.toRadians(colorHSV[0]);
+        int colorPointX = (int) (-Math.cos(hueAngle) * colorHSV[1] * colorWheelRadius) + centerX;
+        int colorPointY = (int) (-Math.sin(hueAngle) * colorHSV[1] * colorWheelRadius) + centerY;
+
+        hsvTemp[0] = colorHSV[0];
+        hsvTemp[1] = colorHSV[1];
+        hsvTemp[2] = 1.0f;
+
+        drawPointerArrow(canvas, colorPointX, colorPointY, Color.HSVToColor(hsvTemp));
+
+        lx = centerX + colorWheelRadius + paramValueSliderWidth * 2;
+        ly = centerY - colorWheelRadius;
+        int width = AndroidUtilities.dp(9);
+        int height = colorWheelRadius * 2;
+        if (colorGradient == null) {
+            colorGradient = new LinearGradient(lx, ly, lx + width, ly + height, new int[]{Color.BLACK, Color.HSVToColor(hsvTemp)}, null, Shader.TileMode.CLAMP);
+        }
+        valueSliderPaint.setShader(colorGradient);
+        canvas.drawRect(lx, ly, lx + width, ly + height, valueSliderPaint);
+        drawPointerArrow(canvas, lx + width / 2, (int) (ly + colorHSV[2] * height), Color.HSVToColor(colorHSV));
+    }
+
+    private void drawPointerArrow(Canvas canvas, int x, int y, int color) {
+        int side = AndroidUtilities.dp(13);
+        circleDrawable.setBounds(x - side, y - side, x + side, y + side);
+        circleDrawable.draw(canvas);
+
+        circlePaint.setColor(0xffffffff);
+        canvas.drawCircle(x, y, AndroidUtilities.dp(11), circlePaint);
+        circlePaint.setColor(color);
+        canvas.drawCircle(x, y, AndroidUtilities.dp(9), circlePaint);
+    }
+
+    @Override
+    protected void onSizeChanged(int width, int height, int oldw, int oldh) {
+        if (colorWheelRadius != AndroidUtilities.dp(120)) {
+            colorWheelRadius = AndroidUtilities.dp(120);//Math.max(1, width / 2 - paramValueSliderWidth - AndroidUtilities.dp(20));
+            colorWheelBitmap = createColorWheelBitmap(colorWheelRadius * 2, colorWheelRadius * 2);
+            colorGradient = null;
+        }
+    }
+
+    private Bitmap createColorWheelBitmap(int width, int height) {
+        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+
+        int colorCount = 12;
+        int colorAngleStep = 360 / 12;
+        int[] colors = new int[colorCount + 1];
+        float[] hsv = new float[]{0.0f, 1.0f, 1.0f};
+        for (int i = 0; i < colors.length; i++) {
+            hsv[0] = (i * colorAngleStep + 180) % 360;
+            colors[i] = Color.HSVToColor(hsv);
+        }
+        colors[colorCount] = colors[0];
+
+        SweepGradient sweepGradient = new SweepGradient(0.5f * width, 0.5f * height, colors, null);
+        RadialGradient radialGradient = new RadialGradient(0.5f * width, 0.5f * height, colorWheelRadius, 0xffffffff, 0x00ffffff, Shader.TileMode.CLAMP);
+        ComposeShader composeShader = new ComposeShader(sweepGradient, radialGradient, PorterDuff.Mode.SRC_OVER);
+
+        colorWheelPaint.setShader(composeShader);
+
+        Canvas canvas = new Canvas(bitmap);
+        canvas.drawCircle(0.5f * width, 0.5f * height, colorWheelRadius, colorWheelPaint);
+
+        return bitmap;
+    }
+
+    private int getThemedColor(String key) {
+        return useDefaultTheme ? Theme.getDefaultColor(key) : Theme.getColor(key);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        int action = event.getAction();
+        switch (action) {
+            case MotionEvent.ACTION_DOWN:
+            case MotionEvent.ACTION_MOVE:
+
+                int x = (int) event.getX();
+                int y = (int) event.getY();
+                int cx = x - centerX;
+                int cy = y - centerY;
+                double d = Math.sqrt(cx * cx + cy * cy);
+
+                if (circlePressed || !colorPressed && d <= colorWheelRadius) {
+                    if (d > colorWheelRadius) {
+                        d = colorWheelRadius;
+                    }
+                    if (!circlePressed) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    circlePressed = true;
+                    colorHSV[0] = (float) (Math.toDegrees(Math.atan2(cy, cx)) + 180.0f);
+                    colorHSV[1] = Math.max(0.0f, Math.min(1.0f, (float) (d / colorWheelRadius)));
+                    colorGradient = null;
+                }
+                if (colorPressed || !circlePressed && x >= lx && x <= lx + paramValueSliderWidth && y >= ly && y <= ly + colorWheelRadius * 2) {
+                    float value = (y - ly) / (colorWheelRadius * 2.0f);
+                    if (value < 0.0f) {
+                        value = 0.0f;
+                    } else if (value > 1.0f) {
+                        value = 1.0f;
+                    }
+                    colorHSV[2] = value;
+                    if (!colorPressed) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    colorPressed = true;
+                }
+                if (colorPressed || circlePressed) {
+                    int color = getColor();
+                    if (!ignoreTextChange) {
+                        int red = Color.red(color);
+                        int green = Color.green(color);
+                        int blue = Color.blue(color);
+                        ignoreTextChange = true;
+                        colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
+                        colorEditText[1].setText(String.valueOf((int) (255 * colorHSV[2])));
+                        for (int b = 0; b < 2; b++) {
+                            colorEditText[b].setSelection(colorEditText[b].length());
+                        }
+                        ignoreTextChange = false;
+                    }
+                    delegate.setColor(color);
+                    invalidate();
+                }
+
+                return true;
+            case MotionEvent.ACTION_UP:
+                colorPressed = false;
+                circlePressed = false;
+                break;
+        }
+        return super.onTouchEvent(event);
+    }
+
+    public void setColor(int color) {
+        if (!ignoreTextChange) {
+            ignoreTextChange = true;
+            int red = Color.red(color);
+            int green = Color.green(color);
+            int blue = Color.blue(color);
+            Color.colorToHSV(color, colorHSV);
+            colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
+            colorEditText[1].setText(String.valueOf((int) (255 * colorHSV[2])));
+            for (int b = 0; b < 2; b++) {
+                colorEditText[b].setSelection(colorEditText[b].length());
+            }
+            ignoreTextChange = false;
+        } else {
+            Color.colorToHSV(color, colorHSV);
+        }
+        colorGradient = null;
+        invalidate();
+    }
+
+    public int getColor() {
+        return (Color.HSVToColor(colorHSV) & 0x00ffffff) | 0xff000000;
+    }
+
+
+    public void provideThemeDescriptions(ArrayList<ThemeDescription> arrayList) {
+        for (int a = 0; a < colorEditText.length; a++) {
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteBlackText));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteHintText));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteBlueHeader));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_windowBackgroundWhiteInputFieldActivated));
+            arrayList.add(new ThemeDescription(colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteRedText3));
+        }
+    }
+
+
+    public interface ColorPickerDelegate {
+        void setColor(int color);
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index 1f8373d22..0e9f216d4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -71,6 +71,7 @@
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.support.ArrayUtils;
 import org.telegram.messenger.time.SunDate;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
@@ -1396,25 +1397,28 @@ private int tint(int color) {
         }
     }
 
-    private static class InnerAccentView extends View {
-        private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-        private int currentColor;
-        private float checkedState;
-        private ObjectAnimator checkAnimator;
+    private abstract static class InnerAccentViewBase extends View {
+        final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        final float radius = AndroidUtilities.dp(20);
+        ObjectAnimator checkAnimator;
+        float checkedState;
+        Theme.ThemeInfo currentTheme;
+        int currentColor;
 
-        public InnerAccentView(Context context) {
+        InnerAccentViewBase(Context context) {
             super(context);
-            paint.setStrokeWidth(AndroidUtilities.dp(3));
         }
 
-        void setColor(int color) {
+        void setThemeAndColor(Theme.ThemeInfo themeInfo, int color) {
+            currentTheme = themeInfo;
             currentColor = color;
-            paint.setColor(color);
             invalidate();
         }
 
+        abstract boolean isChecked();
+
         void updateCheckedState(boolean animate) {
-            boolean checked = Theme.getCurrentTheme().accentColor == currentColor;
+            boolean checked = isChecked();
 
             if (checkAnimator != null) {
                 checkAnimator.cancel();
@@ -1456,16 +1460,90 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         @Override
         protected void onDraw(Canvas canvas) {
-            float center = 0.5f * getMeasuredWidth();
-            float rad = AndroidUtilities.dp(20);
+            paint.setColor(currentColor);
+            paint.setStyle(Paint.Style.STROKE);
+            paint.setStrokeWidth(AndroidUtilities.dp(3));
+            paint.setAlpha(Math.round(255f * checkedState));
+            canvas.drawCircle(0.5f * getMeasuredWidth(), 0.5f * getMeasuredHeight(), radius - 0.5f * paint.getStrokeWidth(), paint);
+
+            paint.setAlpha(255);
+            paint.setStyle(Paint.Style.FILL);
+        }
+    }
+
+
+    private static class InnerAccentView extends InnerAccentViewBase {
+        InnerAccentView(Context context) {
+            super(context);
+        }
+
+        @Override
+        boolean isChecked() {
+            return Theme.getCurrentTheme().accentColor == currentColor;
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            super.onDraw(canvas);
+            canvas.drawCircle(0.5f * getMeasuredWidth(), 0.5f * getMeasuredHeight(), radius - AndroidUtilities.dp(5) * checkedState, paint);
+        }
+    }
+
+    private static class InnerCustomAccentView extends InnerAccentViewBase {
+        private int[] colors = new int[7];
+
+        InnerCustomAccentView(Context context) {
+            super(context);
+        }
+
+        @Override
+        void setThemeAndColor(Theme.ThemeInfo themeInfo, int color) {
+            int[] options = themeInfo == null ? null : themeInfo.accentColorOptions;
+            if (options != null && options.length >= 8) {
+                colors = new int[] { options[6], options[4], options[7], options[2], options[0], options[5], options[3] };
+            } else {
+                colors = new int[7];
+            }
+            super.setThemeAndColor(themeInfo, color);
+        }
+
+        @Override
+        boolean isChecked() {
+            return ArrayUtils.indexOf(currentTheme.accentColorOptions, currentTheme.accentColor) == -1;
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            super.onDraw(canvas);
+
+            float centerX = 0.5f * getMeasuredWidth();
+            float centerY = 0.5f * getMeasuredHeight();
 
             paint.setStyle(Paint.Style.STROKE);
+            paint.setStrokeWidth(radius - AndroidUtilities.dp(10) * checkedState);
             paint.setAlpha(Math.round(255f * checkedState));
-            canvas.drawCircle(center, center, rad - 0.5f * paint.getStrokeWidth(), paint);
+            canvas.drawCircle(centerX, centerY, AndroidUtilities.dp(10), paint);
+
+            float radSmall = AndroidUtilities.dp(5);
+            float radRing = (radius - radSmall) * (1f - checkedState);
 
             paint.setStyle(Paint.Style.FILL);
-            paint.setAlpha(255);
-            canvas.drawCircle(center, center, rad - AndroidUtilities.dp(5) * checkedState, paint);
+
+            paint.setColor(colors[0]);
+            paint.setAlpha(Math.round(255f * (1f - checkedState)));
+            canvas.drawCircle(centerX, centerY, radSmall, paint);
+
+            double angle = 0.0;
+            for (int a = 0; a < 6; a++) {
+                float cx = centerX + radRing * (float) Math.sin(angle);
+                float cy = centerY - radRing * (float) Math.cos(angle);
+
+                paint.setColor(colors[a + 1]);
+                paint.setAlpha(Math.round(255f * (1f - checkedState)));
+                canvas.drawCircle(cx, cy, radSmall, paint);
+
+                angle += Math.PI / 3;
+            }
         }
     }
 
@@ -1520,20 +1598,41 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             return false;
         }
 
+        @Override
+        public int getItemViewType(int position) {
+            return position == getItemCount() - 1 ? 1 : 0;
+        }
+
         @Override
         public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-            return new RecyclerListView.Holder(new InnerAccentView(mContext));
+            switch (viewType) {
+                case 0:
+                    return new RecyclerListView.Holder(new InnerAccentView(mContext));
+                case 1:
+                default:
+                    return new RecyclerListView.Holder(new InnerCustomAccentView(mContext));
+            }
         }
 
         @Override
         public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
-            InnerAccentView view = (InnerAccentView) holder.itemView;
-            view.setColor(currentTheme.accentColorOptions[position]);
+            switch (getItemViewType(position)) {
+                case 0: {
+                    InnerAccentView view = (InnerAccentView) holder.itemView;
+                    view.setThemeAndColor(currentTheme, currentTheme.accentColorOptions[position]);
+                    break;
+                }
+                case 1: {
+                    InnerCustomAccentView view = (InnerCustomAccentView) holder.itemView;
+                    view.setThemeAndColor(currentTheme, currentTheme.accentColor);
+                    break;
+                }
+            }
         }
 
         @Override
         public int getItemCount() {
-            return currentTheme.accentColorOptions == null ? 0 : currentTheme.accentColorOptions.length;
+            return currentTheme.accentColorOptions == null ? 0 : currentTheme.accentColorOptions.length + 1;
         }
 
         int getAccentColor(int pos) {
@@ -1541,15 +1640,7 @@ int getAccentColor(int pos) {
         }
 
         int findCurrentAccent() {
-            int[] options = currentTheme.accentColorOptions;
-            if (options != null) {
-                for (int a = 0, count = options.length; a < count; a++) {
-                    if (options[a] == currentTheme.accentColor) {
-                        return a;
-                    }
-                }
-            }
-            return -1;
+            return ArrayUtils.indexOf(currentTheme.accentColorOptions, currentTheme.accentColor);
         }
     }
 
@@ -1837,11 +1928,16 @@ public void onDraw(Canvas canvas) {
                     ThemeAccentsListAdapter accentsAdapter = new ThemeAccentsListAdapter(mContext);
                     accentsListView.setAdapter(accentsAdapter);
                     accentsListView.setOnItemClickListener((view1, position) -> {
-                        int newAccent = accentsAdapter.getAccentColor(position);
                         Theme.ThemeInfo currentTheme = Theme.getCurrentTheme();
-                        if (currentTheme.accentColor != newAccent) {
-                            Theme.saveThemeAccent(currentTheme, newAccent);
-                            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, currentTheme, false);
+
+                        if (position == accentsAdapter.getItemCount() - 1) {
+                            presentFragment(new ThemePreviewActivity(currentTheme, ThemePreviewActivity.SCREEN_TYPE_ACCENT_COLOR));
+                        } else {
+                            int newAccent = accentsAdapter.getAccentColor(position);
+                            if (currentTheme.accentColor != newAccent) {
+                                Theme.saveThemeAccent(currentTheme, newAccent);
+                                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, currentTheme, false);
+                            }
                         }
 
                         int left = view1.getLeft();
@@ -1856,8 +1952,8 @@ public void onDraw(Canvas canvas) {
                         int count = accentsListView.getChildCount();
                         for (int a = 0; a < count; a++) {
                             View child = accentsListView.getChildAt(a);
-                            if (child instanceof InnerAccentView) {
-                                ((InnerAccentView) child).updateCheckedState(true);
+                            if (child instanceof InnerAccentViewBase) {
+                                ((InnerAccentViewBase) child).updateCheckedState(true);
                             }
                         }
                     });
@@ -2052,6 +2148,9 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     ThemeAccentsListAdapter adapter = (ThemeAccentsListAdapter) accentsList.getAdapter();
                     adapter.notifyDataSetChanged();
                     int pos = adapter.findCurrentAccent();
+                    if (pos == -1) {
+                        pos = adapter.getItemCount() - 1;
+                    }
                     if (pos != -1) {
                         ((LinearLayoutManager) accentsList.getLayoutManager()).scrollToPositionWithOffset(pos, listView.getMeasuredWidth() / 2 - AndroidUtilities.dp(42));
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
index c6b2523cc..8beacf824 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemePreviewActivity.java
@@ -33,6 +33,7 @@
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
@@ -53,10 +54,12 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.MenuDrawable;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ActionBar.ThemeDescription;
 import org.telegram.ui.Cells.ChatActionCell;
 import org.telegram.ui.Cells.ChatMessageCell;
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Components.ColorPicker;
 import org.telegram.ui.Components.CombinedDrawable;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
@@ -67,6 +70,12 @@
 
 public class ThemePreviewActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
+    public static final int SCREEN_TYPE_PREVIEW = 0;
+    public static final int SCREEN_TYPE_ACCENT_COLOR = 1;
+
+    private final int screenType;
+
+    private ViewPager viewPager;
     private FrameLayout page1;
     private RecyclerListView listView;
     private DialogsAdapter dialogsAdapter;
@@ -78,15 +87,30 @@
     private RecyclerListView listView2;
     private MessagesAdapter messagesAdapter;
 
+    private ColorPicker colorPicker;
+    private int lastPickedColor;
+    private Runnable applyAccentAction = () -> {
+        applyAccentScheduled = false;
+        applyAccent(lastPickedColor);
+    };
+    private boolean applyAccentScheduled;
+
     private Theme.ThemeInfo applyingTheme;
-    private File themeFile;
-    private boolean applied;
+    private ThemeDescription[] themeDescriptions;
+
+    public ThemePreviewActivity(Theme.ThemeInfo themeInfo) {
+        this(themeInfo, SCREEN_TYPE_PREVIEW);
+    }
 
-    public ThemePreviewActivity(File file, Theme.ThemeInfo themeInfo) {
+    public ThemePreviewActivity(Theme.ThemeInfo themeInfo, int screenType) {
         super();
+        this.screenType = screenType;
         swipeBackEnabled = false;
         applyingTheme = themeInfo;
-        themeFile = file;
+
+        if (screenType == SCREEN_TYPE_ACCENT_COLOR) {
+            Theme.applyThemeTemporary(new Theme.ThemeInfo(applyingTheme));
+        }
     }
 
     @Override
@@ -322,10 +346,11 @@ public boolean drawChild(Canvas canvas, View child, long drawingTime) {
 
         listView2.setAdapter(messagesAdapter);
 
-        fragmentView = new FrameLayout(context);
-        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        LinearLayout linearLayout = new LinearLayout(context);
+        linearLayout.setOrientation(LinearLayout.VERTICAL);
+        fragmentView = linearLayout;
 
-        final ViewPager viewPager = new ViewPager(context);
+        viewPager = new ViewPager(context);
         viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
             @Override
             public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
@@ -379,15 +404,29 @@ public void unregisterDataSetObserver(DataSetObserver observer) {
             }
         });
         AndroidUtilities.setViewPagerEdgeEffectColor(viewPager, Theme.getColor(Theme.key_actionBarDefault));
-        frameLayout.addView(viewPager, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 0, 0, 48));
+        linearLayout.addView(viewPager, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 0, 1f));
 
         View shadow = new View(context);
         shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
-        frameLayout.addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 48));
+        linearLayout.addView(shadow, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 3, Gravity.NO_GRAVITY, 0, -3, 0, 0));
+
+        if (screenType == SCREEN_TYPE_ACCENT_COLOR) {
+            FrameLayout colorPickerFrame = new FrameLayout(context);
+            colorPickerFrame.setBackgroundColor(0xffffffff);
+            linearLayout.addView(colorPickerFrame, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL));
+
+            colorPicker = new ColorPicker(context, this::scheduleApplyAccent, true);
+            colorPicker.setColor(applyingTheme.accentColor);
+            colorPickerFrame.addView(colorPicker, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 342, Gravity.CENTER_HORIZONTAL));
+
+            View shadow2 = new View(context);
+            shadow2.setBackgroundColor(0x12000000);
+            linearLayout.addView(shadow2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1, Gravity.NO_GRAVITY, 0, -1, 0, 0));
+        }
 
         FrameLayout bottomLayout = new FrameLayout(context);
         bottomLayout.setBackgroundColor(0xffffffff);
-        frameLayout.addView(bottomLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.BOTTOM));
+        linearLayout.addView(bottomLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
 
         dotsContainer = new View(context) {
 
@@ -415,7 +454,9 @@ protected void onDraw(Canvas canvas) {
         bottomLayout.addView(cancelButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
         cancelButton.setOnClickListener(v -> {
             Theme.applyPreviousTheme();
-            parentLayout.rebuildAllFragmentViews(false, false);
+            if (screenType != SCREEN_TYPE_ACCENT_COLOR) {
+                parentLayout.rebuildAllFragmentViews(false, false);
+            }
             finishFragment();
         });
 
@@ -429,24 +470,33 @@ protected void onDraw(Canvas canvas) {
         doneButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         bottomLayout.addView(doneButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
         doneButton.setOnClickListener(v -> {
-            applied = true;
-            parentLayout.rebuildAllFragmentViews(false, false);
-            Theme.applyThemeFile(themeFile, applyingTheme.name, false);
+            if (screenType == SCREEN_TYPE_PREVIEW) {
+                parentLayout.rebuildAllFragmentViews(false, false);
+                Theme.applyThemeFile(new File(applyingTheme.pathToFile), applyingTheme.name, false);
+            } else if (screenType == SCREEN_TYPE_ACCENT_COLOR) {
+                Theme.saveThemeAccent(applyingTheme, colorPicker.getColor());
+                Theme.applyPreviousTheme();
+                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, applyingTheme, false);
+            }
             finishFragment();
         });
 
+        themeDescriptions = getThemeDescriptionsInternal();
+
         return fragmentView;
     }
 
     @Override
     public boolean onFragmentCreate() {
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiDidLoad);
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
         return super.onFragmentCreate();
     }
 
     @Override
     public void onFragmentDestroy() {
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiDidLoad);
+        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
         super.onFragmentDestroy();
     }
 
@@ -475,7 +525,9 @@ public void onPause() {
     @Override
     public boolean onBackPressed() {
         Theme.applyPreviousTheme();
-        parentLayout.rebuildAllFragmentViews(false, false);
+        if (screenType != SCREEN_TYPE_ACCENT_COLOR) {
+            parentLayout.rebuildAllFragmentViews(false, false);
+        }
         return super.onBackPressed();
     }
 
@@ -493,9 +545,33 @@ public void didReceivedNotification(int id, int account, Object... args) {
                     cell.update(0);
                 }
             }
+        } else if (id == NotificationCenter.didSetNewWallpapper) {
+            if (page2 != null) {
+                page2.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
+            }
         }
     }
 
+    private void scheduleApplyAccent(int accent) {
+        lastPickedColor = accent;
+        if (!applyAccentScheduled) {
+            applyAccentScheduled = true;
+            fragmentView.postDelayed(applyAccentAction, 16L); // To not apply accent color too often
+        }
+    }
+
+    private void applyAccent(int accent) {
+        Theme.applyCurrentThemeAccent(accent);
+
+        for (int i = 0; i < themeDescriptions.length; i++) {
+            ThemeDescription description = themeDescriptions[i];
+            description.setColor(Theme.getColor(description.getCurrentKey()), false, false);
+        }
+
+        listView.invalidateViews();
+        listView2.invalidateViews();
+    }
+
     public class DialogsAdapter extends RecyclerListView.SelectionAdapter {
 
         private Context mContext;
@@ -936,4 +1012,27 @@ public int getItemViewType(int i) {
             return 4;
         }
     }
+
+
+    private ThemeDescription[] getThemeDescriptionsInternal() {
+        return new ThemeDescription[] {
+                new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite),
+                new ThemeDescription(viewPager, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault),
+
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, Theme.key_actionBarDefaultSearch),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, Theme.key_actionBarDefaultSearchPlaceholder),
+                new ThemeDescription(listView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault),
+
+                new ThemeDescription(actionBar2, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault),
+                new ThemeDescription(listView2, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault),
+
+                new ThemeDescription(floatingButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chats_actionIcon),
+                new ThemeDescription(floatingButton, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chats_actionBackground),
+                new ThemeDescription(floatingButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_chats_actionPressedBackground),
+        };
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
index cdb9c25e9..4289e1e5a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
@@ -17,34 +17,22 @@
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.ComposeShader;
-import android.graphics.LinearGradient;
 import android.graphics.Paint;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
 import android.graphics.PorterDuffXfermode;
-import android.graphics.RadialGradient;
 import android.graphics.Rect;
 import android.graphics.RectF;
-import android.graphics.Shader;
-import android.graphics.SweepGradient;
 import android.graphics.drawable.Drawable;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.InputType;
 import android.text.TextPaint;
 import android.text.TextUtils;
-import android.text.TextWatcher;
 import android.util.Property;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
 import android.widget.FrameLayout;
-import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
@@ -75,8 +63,8 @@
 import org.telegram.ui.Cells.HeaderCell;
 import org.telegram.ui.Components.AnimationProperties;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.Components.ColorPicker;
 import org.telegram.ui.Components.CubicBezierInterpolator;
-import org.telegram.ui.Components.EditTextBoldCursor;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.MediaActionDrawable;
 import org.telegram.ui.Components.RadialProgress2;
@@ -97,7 +85,6 @@
     private RecyclerListView listView;
     private BackupImageView backgroundImage;
     private FrameLayout buttonsContainer;
-    private Drawable themedWallpaper;
     private AnimatorSet motionAnimation;
     private RadialProgress2 radialProgress;
     private FrameLayout bottomOverlayChat;
@@ -125,8 +112,6 @@
     private float currentIntensity = 0.4f;
     private float previousIntensity;
 
-    private boolean viewCreated;
-
     private PorterDuff.Mode blendMode = PorterDuff.Mode.SRC_IN;
 
     private int TAG;
@@ -164,328 +149,6 @@
         void didSetNewBackground();
     }
 
-    private class ColorPicker extends FrameLayout {
-
-        private LinearLayout linearLayout;
-
-        private final int paramValueSliderWidth = AndroidUtilities.dp(20);
-
-        private Paint colorWheelPaint;
-        private Paint valueSliderPaint;
-        private Paint circlePaint;
-        private Drawable circleDrawable;
-
-        private int centerX;
-        private int centerY;
-        private int lx;
-        private int ly;
-
-        boolean ignoreTextChange;
-
-        private Bitmap colorWheelBitmap;
-
-        private EditTextBoldCursor[] colorEditText = new EditTextBoldCursor[2];
-
-        private int colorWheelRadius;
-
-        private float[] colorHSV = new float[] { 0.0f, 0.0f, 1.0f };
-
-        private float[] hsvTemp = new float[3];
-        private LinearGradient colorGradient;
-
-        private boolean circlePressed;
-        private boolean colorPressed;
-
-        public ColorPicker(Context context) {
-            super(context);
-
-            setWillNotDraw(false);
-
-            circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            circleDrawable = context.getResources().getDrawable(R.drawable.knob_shadow).mutate();
-
-            colorWheelPaint = new Paint();
-            colorWheelPaint.setAntiAlias(true);
-            colorWheelPaint.setDither(true);
-
-            valueSliderPaint = new Paint();
-            valueSliderPaint.setAntiAlias(true);
-            valueSliderPaint.setDither(true);
-
-            linearLayout = new LinearLayout(context);
-            linearLayout.setOrientation(LinearLayout.HORIZONTAL);
-            addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 64, Gravity.LEFT | Gravity.TOP, 12, 14, 21, 0));
-            for (int a = 0; a < 2; a++) {
-                final int num = a;
-
-                colorEditText[a] = new EditTextBoldCursor(context);
-                colorEditText[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-                colorEditText[a].setHintColor(Theme.getColor(Theme.key_windowBackgroundWhiteHintText));
-                colorEditText[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
-                colorEditText[a].setBackgroundDrawable(null);
-                colorEditText[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
-                colorEditText[a].setCursorSize(AndroidUtilities.dp(20));
-                colorEditText[a].setCursorWidth(1.5f);
-                colorEditText[a].setSingleLine(true);
-                colorEditText[a].setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
-                colorEditText[a].setHeaderHintColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlueHeader));
-                colorEditText[a].setTransformHintToHeader(true);
-                colorEditText[a].setLineColors(Theme.getColor(Theme.key_windowBackgroundWhiteInputField), Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated), Theme.getColor(Theme.key_windowBackgroundWhiteRedText3));
-                colorEditText[a].setPadding(0, 0, 0, 0);
-                if (a == 0) {
-                    colorEditText[a].setInputType(InputType.TYPE_CLASS_TEXT);
-                    colorEditText[a].setHintText(LocaleController.getString("BackgroundHexColorCode", R.string.BackgroundHexColorCode));
-                } else {
-                    colorEditText[a].setInputType(InputType.TYPE_CLASS_NUMBER);
-                    colorEditText[a].setHintText(LocaleController.getString("BackgroundBrightness", R.string.BackgroundBrightness));
-                }
-                colorEditText[a].setImeOptions(EditorInfo.IME_ACTION_DONE | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-                InputFilter[] inputFilters = new InputFilter[1];
-                inputFilters[0] = new InputFilter.LengthFilter(a == 0 ? 7 : 3);
-                colorEditText[a].setFilters(inputFilters);
-                linearLayout.addView(colorEditText[a], LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, a == 0 ? 0.67f : 0.31f, 0, 0, a != 1 ? 23 : 0, 0));
-                colorEditText[a].addTextChangedListener(new TextWatcher() {
-                    @Override
-                    public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                    }
-
-                    @Override
-                    public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                    }
-
-                    @Override
-                    public void afterTextChanged(Editable editable) {
-                        if (ignoreTextChange) {
-                            return;
-                        }
-                        ignoreTextChange = true;
-                        if (num == 0) {
-                            for (int a = 0; a < editable.length(); a++) {
-                                char ch = editable.charAt(a);
-                                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'f' || ch >= 'A' && ch <= 'F' || ch == '#' && a == 0)) {
-                                    editable.replace(a, a + 1, "");
-                                    a--;
-                                }
-                            }
-                            if (editable.length() == 0) {
-                                editable.append("#");
-                            } else if (editable.charAt(0) != '#') {
-                                editable.insert(0, "#");
-                            }
-                            try {
-                                setColor(Integer.parseInt(editable.toString().substring(1), 16) | 0xff000000);
-                            } catch (Exception e) {
-                                setColor(0xffffffff);
-                            }
-                            WallpaperActivity.this.setBackgroundColor(getColor());
-                            colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
-                        } else {
-                            int value = Utilities.parseInt(editable.toString());
-                            if (value > 255 || value < 0) {
-                                if (value > 255) {
-                                    value = 255;
-                                } else {
-                                    value = 0;
-                                }
-                                editable.replace(0, editable.length(), "" + value);
-                            }
-                            colorHSV[2] = value / 255.0f;
-                            WallpaperActivity.this.setBackgroundColor(getColor());
-                            int red = Color.red(backgroundColor);
-                            int green = Color.green(backgroundColor);
-                            int blue = Color.blue(backgroundColor);
-                            colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
-                        }
-                        ColorPicker.this.invalidate();
-                        ignoreTextChange = false;
-                    }
-                });
-                colorEditText[a].setOnEditorActionListener((textView, i, keyEvent) -> {
-                    if (i == EditorInfo.IME_ACTION_DONE) {
-                        AndroidUtilities.hideKeyboard(textView);
-                        return true;
-                    }
-                    return false;
-                });
-            }
-        }
-
-        @Override
-        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-            int widthSize = MeasureSpec.getSize(widthMeasureSpec);
-            int heightSize = MeasureSpec.getSize(heightMeasureSpec);
-            int size = Math.min(widthSize, heightSize);
-            measureChild(linearLayout, MeasureSpec.makeMeasureSpec(widthSize - AndroidUtilities.dp(42), MeasureSpec.EXACTLY), heightMeasureSpec);
-            setMeasuredDimension(size, size);
-        }
-
-        @Override
-        protected void onDraw(Canvas canvas) {
-            centerX = getWidth() / 2 - paramValueSliderWidth * 2 + AndroidUtilities.dp(11);
-            centerY = getHeight() / 2 + AndroidUtilities.dp(34);
-
-            canvas.drawBitmap(colorWheelBitmap, centerX - colorWheelRadius, centerY - colorWheelRadius, null);
-
-            float hueAngle = (float) Math.toRadians(colorHSV[0]);
-            int colorPointX = (int) (-Math.cos(hueAngle) * colorHSV[1] * colorWheelRadius) + centerX;
-            int colorPointY = (int) (-Math.sin(hueAngle) * colorHSV[1] * colorWheelRadius) + centerY;
-
-            float pointerRadius = 0.075f * colorWheelRadius;
-
-            hsvTemp[0] = colorHSV[0];
-            hsvTemp[1] = colorHSV[1];
-            hsvTemp[2] = 1.0f;
-
-            drawPointerArrow(canvas, colorPointX, colorPointY, Color.HSVToColor(hsvTemp));
-
-            lx = centerX + colorWheelRadius + paramValueSliderWidth * 2;
-            ly = centerY - colorWheelRadius;
-            int width = AndroidUtilities.dp(9);
-            int height = colorWheelRadius * 2;
-            if (colorGradient == null) {
-                colorGradient = new LinearGradient(lx, ly, lx + width, ly + height, new int[]{Color.BLACK, Color.HSVToColor(hsvTemp)}, null, Shader.TileMode.CLAMP);
-            }
-            valueSliderPaint.setShader(colorGradient);
-            canvas.drawRect(lx, ly, lx + width, ly + height, valueSliderPaint);
-            drawPointerArrow(canvas, lx + width / 2, (int) (ly + colorHSV[2] * height), Color.HSVToColor(colorHSV));
-        }
-
-        private void drawPointerArrow(Canvas canvas, int x, int y, int color) {
-            int side = AndroidUtilities.dp(13);
-            circleDrawable.setBounds(x - side, y - side, x + side, y + side);
-            circleDrawable.draw(canvas);
-
-            circlePaint.setColor(0xffffffff);
-            canvas.drawCircle(x, y, AndroidUtilities.dp(11), circlePaint);
-            circlePaint.setColor(color);
-            canvas.drawCircle(x, y, AndroidUtilities.dp(9), circlePaint);
-        }
-
-        @Override
-        protected void onSizeChanged(int width, int height, int oldw, int oldh) {
-            if (colorWheelRadius != AndroidUtilities.dp(120)) {
-                colorWheelRadius = AndroidUtilities.dp(120);//Math.max(1, width / 2 - paramValueSliderWidth - AndroidUtilities.dp(20));
-                colorWheelBitmap = createColorWheelBitmap(colorWheelRadius * 2, colorWheelRadius * 2);
-                colorGradient = null;
-            }
-        }
-
-        private Bitmap createColorWheelBitmap(int width, int height) {
-            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
-
-            int colorCount = 12;
-            int colorAngleStep = 360 / 12;
-            int[] colors = new int[colorCount + 1];
-            float[] hsv = new float[]{0.0f, 1.0f, 1.0f};
-            for (int i = 0; i < colors.length; i++) {
-                hsv[0] = (i * colorAngleStep + 180) % 360;
-                colors[i] = Color.HSVToColor(hsv);
-            }
-            colors[colorCount] = colors[0];
-
-            SweepGradient sweepGradient = new SweepGradient(width / 2, height / 2, colors, null);
-            RadialGradient radialGradient = new RadialGradient(width / 2, height / 2, colorWheelRadius, 0xffffffff, 0x00ffffff, Shader.TileMode.CLAMP);
-            ComposeShader composeShader = new ComposeShader(sweepGradient, radialGradient, PorterDuff.Mode.SRC_OVER);
-
-            colorWheelPaint.setShader(composeShader);
-
-            Canvas canvas = new Canvas(bitmap);
-            canvas.drawCircle(width / 2, height / 2, colorWheelRadius, colorWheelPaint);
-
-            return bitmap;
-        }
-
-        @Override
-        public boolean onTouchEvent(MotionEvent event) {
-            int action = event.getAction();
-            switch (action) {
-                case MotionEvent.ACTION_DOWN:
-                case MotionEvent.ACTION_MOVE:
-
-                    int x = (int) event.getX();
-                    int y = (int) event.getY();
-                    int cx = x - centerX;
-                    int cy = y - centerY;
-                    double d = Math.sqrt(cx * cx + cy * cy);
-
-                    if (circlePressed || !colorPressed && d <= colorWheelRadius) {
-                        if (d > colorWheelRadius) {
-                            d = colorWheelRadius;
-                        }
-                        if (!circlePressed) {
-                            getParent().requestDisallowInterceptTouchEvent(true);
-                        }
-                        circlePressed = true;
-                        colorHSV[0] = (float) (Math.toDegrees(Math.atan2(cy, cx)) + 180.0f);
-                        colorHSV[1] = Math.max(0.0f, Math.min(1.0f, (float) (d / colorWheelRadius)));
-                        colorGradient = null;
-                    }
-                    if (colorPressed || !circlePressed && x >= lx && x <= lx + paramValueSliderWidth && y >= ly && y <= ly + colorWheelRadius * 2) {
-                        float value = (y - ly) / (colorWheelRadius * 2.0f);
-                        if (value < 0.0f) {
-                            value = 0.0f;
-                        } else if (value > 1.0f) {
-                            value = 1.0f;
-                        }
-                        colorHSV[2] = value;
-                        if (!colorPressed) {
-                            getParent().requestDisallowInterceptTouchEvent(true);
-                        }
-                        colorPressed = true;
-                    }
-                    if (colorPressed || circlePressed) {
-                        WallpaperActivity.this.setBackgroundColor(getColor());
-                        if (!ignoreTextChange) {
-                            int red = Color.red(backgroundColor);
-                            int green = Color.green(backgroundColor);
-                            int blue = Color.blue(backgroundColor);
-                            ignoreTextChange = true;
-                            colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
-                            colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
-                            for (int b = 0; b < 2; b++) {
-                                colorEditText[b].setSelection(colorEditText[b].length());
-                            }
-                            ignoreTextChange = false;
-                        }
-                        invalidate();
-                    }
-
-                    return true;
-                case MotionEvent.ACTION_UP:
-                    colorPressed = false;
-                    circlePressed = false;
-                    break;
-            }
-            return super.onTouchEvent(event);
-        }
-
-        public void setColor(int color) {
-            if (!ignoreTextChange) {
-                ignoreTextChange = true;
-                int red = Color.red(color);
-                int green = Color.green(color);
-                int blue = Color.blue(color);
-                Color.colorToHSV(color, colorHSV);
-                colorEditText[0].setText(String.format("#%02x%02x%02x", (byte) red, (byte) green, (byte) blue));
-                colorEditText[1].setText("" + (int) (255 * colorHSV[2]));
-                for (int b = 0; b < 2; b++) {
-                    colorEditText[b].setSelection(colorEditText[b].length());
-                }
-                ignoreTextChange = false;
-            } else {
-                Color.colorToHSV(color, colorHSV);
-            }
-            colorGradient = null;
-            invalidate();
-        }
-
-        public int getColor() {
-            return (Color.HSVToColor(colorHSV) & 0x00ffffff) | 0xff000000;
-        }
-    }
-
     private class PatternCell extends BackupImageView implements DownloadController.FileDownloadProgressListener {
 
         private RectF rect = new RectF();
@@ -1353,7 +1016,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     });
                     patternLayout[a].addView(intensitySeekBar, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 30, Gravity.TOP | Gravity.LEFT, 9, 153, 9, 0));
                 } else {
-                    colorPicker = new ColorPicker(context);
+                    colorPicker = new ColorPicker(context, this::setBackgroundColor);
                     patternLayout[a].addView(colorPicker, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.CENTER_HORIZONTAL, 0, 0, 0, 48));
                 }
             }
@@ -1955,19 +1618,12 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
         for (int a = 0; a < patternsSaveButton.length; a++) {
             arrayList.add(new ThemeDescription(patternsSaveButton[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
         }
-        for (int a = 0; a < patternsSaveButton.length; a++) {
-            arrayList.add(new ThemeDescription(patternsSaveButton[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
+        for (int a = 0; a < patternsCancelButton.length; a++) {
+            arrayList.add(new ThemeDescription(patternsCancelButton[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
         }
 
         if (colorPicker != null) {
-            for (int a = 0; a < colorPicker.colorEditText.length; a++) {
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteBlackText));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteHintText));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_HINTTEXTCOLOR | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteBlueHeader));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_windowBackgroundWhiteInputFieldActivated));
-                arrayList.add(new ThemeDescription(colorPicker.colorEditText[a], ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_windowBackgroundWhiteRedText3));
-            }
+            colorPicker.provideThemeDescriptions(arrayList);
         }
 
         arrayList.add(new ThemeDescription(intensitySeekBar, 0, new Class[]{SeekBarView.class}, new String[]{"innerPaint1"}, null, null, null, Theme.key_player_progressBackground));
