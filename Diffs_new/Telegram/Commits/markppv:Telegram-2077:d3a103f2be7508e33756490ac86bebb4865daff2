diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
index 182b51525..2860a7951 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
@@ -8,9 +8,10 @@
 
 package org.telegram.messenger;
 
-import androidx.annotation.UiThread;
 import android.util.SparseArray;
 
+import androidx.annotation.UiThread;
+
 import java.util.ArrayList;
 
 public class NotificationCenter {
@@ -160,6 +161,7 @@
     public static final int notificationsCountUpdated = totalEvents++;
     public static final int playerDidStartPlaying = totalEvents++;
     public static final int closeSearchByActiveAction = totalEvents++;
+    public static final int themeTransitionViewPrepared = totalEvents++;
 
     private SparseArray<ArrayList<Object>> observers = new SparseArray<>();
     private SparseArray<ArrayList<Object>> removeAfterBroadcast = new SparseArray<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index e145bda5a..9c5789695 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -25,11 +25,14 @@
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.os.Handler;
+import android.os.HandlerThread;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
 import android.view.Menu;
 import android.view.MotionEvent;
+import android.view.PixelCopy;
 import android.view.VelocityTracker;
 import android.view.View;
 import android.view.ViewGroup;
@@ -46,6 +49,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.ui.Components.CubicBezierInterpolator;
 import org.telegram.ui.Components.LayoutHelper;
@@ -56,9 +60,13 @@
 
     public interface ActionBarLayoutDelegate {
         boolean onPreIme();
+
         boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
+
         boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
+
         boolean needCloseLastFragment(ActionBarLayout layout);
+
         void onRebuildAllFragments(ActionBarLayout layout, boolean last);
     }
 
@@ -361,7 +369,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                 layerShadowDrawable.setAlpha((int) (0xff * alpha));
                 layerShadowDrawable.draw(canvas);
             } else if (child == containerViewBack) {
-                float opacity = Math.min(0.8f, (width - translationX) / (float)width);
+                float opacity = Math.min(0.8f, (width - translationX) / (float) width);
                 if (opacity < 0) {
                     opacity = 0;
                 }
@@ -1322,7 +1330,8 @@ public float getThemeAnimationValue() {
         return themeAnimationValue;
     }
 
-    public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
+    public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme,
+                                    boolean withThemeTransitionView) {
         if (transitionAnimationInProgress || startedTracking) {
             animateThemeAfterAnimation = true;
             animateSetThemeAfterAnimation = theme;
@@ -1333,8 +1342,9 @@ public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
             themeAnimatorSet.cancel();
             themeAnimatorSet = null;
         }
-        boolean startAnimation = false;
-        for (int i = 0; i < 1 /* todo 2 */; i++) {
+        boolean hasFragments = false;
+        boolean dontStartAnimation = false;
+        for (int i = 0; i < 2; i++) {
             BaseFragment fragment;
             if (i == 0) {
                 fragment = getLastFragment();
@@ -1349,7 +1359,7 @@ public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
                 fragment = fragmentsStack.get(fragmentsStack.size() - 2);
             }
             if (fragment != null) {
-                startAnimation = true;
+                hasFragments = true;
                 themeAnimatorDescriptions[i] = fragment.getThemeDescriptions();
                 animateStartColors[i] = new int[themeAnimatorDescriptions[i].length];
                 for (int a = 0; a < themeAnimatorDescriptions[i].length; a++) {
@@ -1360,38 +1370,86 @@ public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
                     }
                 }
                 if (i == 0) {
-                    Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(),
-                            Bitmap.Config.ARGB_8888);
-                    bitmap.setHasAlpha(false);
-                    Canvas canvas = new Canvas(bitmap);
-                    draw(canvas);
+                    if (withThemeTransitionView) {
+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                            dontStartAnimation = true;
+                            final HandlerThread handlerThread = new HandlerThread("PixelCopy");
+                            handlerThread.start();
+                            Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(),
+                                    Bitmap.Config.ARGB_8888);
+                            int[] viewCoords = new int[2];
+                            getLocationInWindow(viewCoords);
+                            Rect viewRect = new Rect(
+                                    viewCoords[0], viewCoords[1],
+                                    viewCoords[0] + getWidth(),
+                                    viewCoords[1] + getHeight());
+                            int actionBarColor = Theme.getColor(Theme.key_actionBarDefault);
+                            themeTransitionView.setVisibility(VISIBLE);
+                            themeTransitionView.bringToFront();
+                            int index = i;
+                            PixelCopy.request(parentActivity.getWindow(), viewRect, bitmap, copyResult -> {
+                                if (copyResult == PixelCopy.SUCCESS) {
+                                    Canvas canvas = new Canvas(bitmap);
+                                    Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+                                    paint.setColor(actionBarColor);
+                                    canvas.drawRect(0, 0, getWidth(), AndroidUtilities.statusBarHeight, paint);
+                                    themeTransitionView.post(() -> {
+                                        themeTransitionView.setImageBitmap(bitmap);
+                                        applyThemeAndSetAnimateEndColors(theme, nightTheme, index);
+                                        NotificationCenter.getGlobalInstance().postNotificationName(
+                                                NotificationCenter.themeTransitionViewPrepared);
+                                        startAnimation(true);
+                                    });
+                                } else {
+                                    themeTransitionView.post(() -> {
+                                        themeTransitionView.setVisibility(GONE);
+                                        applyThemeAndSetAnimateEndColors(theme, nightTheme, index);
+                                        NotificationCenter.getGlobalInstance().postNotificationName(
+                                                NotificationCenter.themeTransitionViewPrepared);
+                                        startAnimation(true);
+                                    });
+                                }
+                                handlerThread.quitSafely();
+                            }, new Handler(handlerThread.getLooper()));
+                        } else {
+                            Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(),
+                                    Bitmap.Config.ARGB_8888);
+                            bitmap.setHasAlpha(false);
+                            Canvas canvas = new Canvas(bitmap);
+                            draw(canvas);
 
-                    themeTransitionView.setImageBitmap(bitmap);
-                    themeTransitionView.setVisibility(VISIBLE);
-                    themeTransitionView.bringToFront();
+                            themeTransitionView.setImageBitmap(bitmap);
+                            themeTransitionView.setVisibility(VISIBLE);
+                            themeTransitionView.bringToFront();
 
-                    Theme.applyTheme(theme, nightTheme);
-                }
-                animateEndColors[i] = new int[themeAnimatorDescriptions[i].length];
-                for (int a = 0; a < themeAnimatorDescriptions[i].length; a++) {
-                    animateEndColors[i][a] = themeAnimatorDescriptions[i][a].getSetColor();
+                            applyThemeAndSetAnimateEndColors(theme, nightTheme, i);
+
+                            NotificationCenter.getGlobalInstance().postNotificationName(
+                                    NotificationCenter.themeTransitionViewPrepared);
+                        }
+                    } else applyThemeAndSetAnimateEndColors(theme, nightTheme, i);
                 }
+                setAnimateEndColors(i);
             }
         }
-        if (startAnimation) {
-            themeAnimatorSet = new AnimatorSet();
-            themeAnimatorSet.addListener(new AnimatorListenerAdapter() {
-                @Override
-                public void onAnimationEnd(Animator animation) {
-                    if (animation.equals(themeAnimatorSet)) {
-                        for (int a = 0; a < 2; a++) {
-                            themeAnimatorDescriptions[a] = null;
-                            animateStartColors[a] = null;
-                            animateEndColors[a] = null;
-                            themeAnimatorDelegate[a] = null;
-                        }
-                        Theme.setAnimatingColor(false);
-                        themeAnimatorSet = null;
+        if (hasFragments && !dontStartAnimation) startAnimation(withThemeTransitionView);
+    }
+
+    private void startAnimation(boolean withThemeTransitionView) {
+        themeAnimatorSet = new AnimatorSet();
+        themeAnimatorSet.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                if (animation.equals(themeAnimatorSet)) {
+                    for (int a = 0; a < 2; a++) {
+                        themeAnimatorDescriptions[a] = null;
+                        animateStartColors[a] = null;
+                        animateEndColors[a] = null;
+                        themeAnimatorDelegate[a] = null;
+                    }
+                    Theme.setAnimatingColor(false);
+                    themeAnimatorSet = null;
+                    if (withThemeTransitionView) {
                         themeTransitionView.animate()
                                 .alpha(0f)
                                 .setDuration(200)
@@ -1404,17 +1462,29 @@ public void onAnimationEnd(Animator animation) {
                                 .start();
                     }
                 }
-            });
-            int count = fragmentsStack.size() - (inPreviewMode || transitionAnimationPreviewMode ? 2 : 1);
-            for (int a = 0; a < count; a++) {
-                BaseFragment fragment = fragmentsStack.get(a);
-                fragment.clearViews();
-                fragment.setParentLayout(this);
             }
-            Theme.setAnimatingColor(true);
-            themeAnimatorSet.playTogether(ObjectAnimator.ofFloat(this, "themeAnimationValue", 0.0f, 1.0f));
-            themeAnimatorSet.setDuration(0);
-            themeAnimatorSet.start();
+        });
+        int count = fragmentsStack.size() - (inPreviewMode || transitionAnimationPreviewMode ? 2 : 1);
+        for (int a = 0; a < count; a++) {
+            BaseFragment fragment = fragmentsStack.get(a);
+            fragment.clearViews();
+            fragment.setParentLayout(this);
+        }
+        Theme.setAnimatingColor(true);
+        themeAnimatorSet.playTogether(ObjectAnimator.ofFloat(this, "themeAnimationValue", 0.0f, 1.0f));
+        themeAnimatorSet.setDuration(withThemeTransitionView ? 0 : 200);
+        themeAnimatorSet.start();
+    }
+
+    private void applyThemeAndSetAnimateEndColors(Theme.ThemeInfo theme, boolean nightTheme, int i) {
+        Theme.applyTheme(theme, nightTheme);
+        setAnimateEndColors(i);
+    }
+
+    private void setAnimateEndColors(int i) {
+        animateEndColors[i] = new int[themeAnimatorDescriptions[i].length];
+        for (int a = 0; a < themeAnimatorDescriptions[i].length; a++) {
+            animateEndColors[i][a] = themeAnimatorDescriptions[i][a].getSetColor();
         }
     }
 
@@ -1481,7 +1551,7 @@ private void checkNeedRebuild() {
             rebuildAllFragmentViews(rebuildLastAfterAnimation, showLastAfterAnimation);
             rebuildAfterAnimation = false;
         } else if (animateThemeAfterAnimation) {
-            animateThemedValues(animateSetThemeAfterAnimation, animateSetThemeNightAfterAnimation);
+            animateThemedValues(animateSetThemeAfterAnimation, animateSetThemeNightAfterAnimation, false);
             animateSetThemeAfterAnimation = null;
             animateThemeAfterAnimation = false;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index ff579a379..614c925b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -2818,12 +2818,12 @@ private static void applyDayNightThemeMaybe(boolean night) {
         if (night) {
             if (currentTheme != currentNightTheme) {
                 lastThemeSwitchTime = SystemClock.elapsedRealtime();
-                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, currentNightTheme, true);
+                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, currentNightTheme, true, false);
             }
         } else {
             if (currentTheme != currentDayTheme) {
                 lastThemeSwitchTime = SystemClock.elapsedRealtime();
-                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, currentDayTheme, true);
+                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, currentDayTheme, true, false);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index e36a7696d..27784bf4b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -41,41 +41,45 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
+import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.camera.CameraController;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.AlertDialog;
-import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.ActionBar.ActionBarLayout;
+import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.Cells.DrawerAddCell;
 import org.telegram.ui.Cells.DrawerUserCell;
 import org.telegram.ui.Cells.LanguageCell;
-import org.telegram.ui.Components.AudioPlayerAlert;
 import org.telegram.ui.Components.AlertsCreator;
+import org.telegram.ui.Components.AudioPlayerAlert;
 import org.telegram.ui.Components.BlockingUpdateView;
 import org.telegram.ui.Components.EmbedBottomSheet;
 import org.telegram.ui.Components.JoinGroupAlert;
@@ -85,7 +89,6 @@
 import org.telegram.ui.Components.RecyclerListView;
 import org.telegram.ui.Components.SharingLocationsAlert;
 import org.telegram.ui.Components.StickersAlert;
-import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.TermsOfServiceView;
 import org.telegram.ui.Components.ThemeEditorView;
 import org.telegram.ui.Components.UpdateAppAlertDialog;
@@ -96,9 +99,6 @@
 import java.util.List;
 import java.util.Map;
 
-import androidx.recyclerview.widget.DefaultItemAnimator;
-import androidx.recyclerview.widget.LinearLayoutManager;
-
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate {
 
     private boolean finished;
@@ -2731,11 +2731,12 @@ public void didReceivedNotification(int id, final int account, Object... args) {
             drawerLayoutContainer.setBehindKeyboardColor(Theme.getColor(Theme.key_windowBackgroundWhite));
         } else if (id == NotificationCenter.needSetDayNightTheme) {
             Theme.ThemeInfo theme = (Theme.ThemeInfo) args[0];
-            boolean nigthTheme = (Boolean) args[1];
-            actionBarLayout.animateThemedValues(theme, nigthTheme);
-            if (AndroidUtilities.isTablet()) {
-                layersActionBarLayout.animateThemedValues(theme, nigthTheme);
-                rightActionBarLayout.animateThemedValues(theme, nigthTheme);
+            boolean nightTheme = (Boolean) args[1];
+            boolean withThemeTransitionView = (Boolean) args[2];
+            actionBarLayout.animateThemedValues(theme, nightTheme, withThemeTransitionView);
+            if (!withThemeTransitionView && AndroidUtilities.isTablet()) {
+                layersActionBarLayout.animateThemedValues(theme, nightTheme, false);
+                rightActionBarLayout.animateThemedValues(theme, nightTheme, false);
             }
         } else if (id == NotificationCenter.notificationsCountUpdated) {
             if (sideMenu != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index cdc38078a..42f042218 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -624,6 +624,7 @@ public boolean onFragmentCreate() {
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.locationPermissionGranted);
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.themeListUpdated);
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.themeTransitionViewPrepared);
         return super.onFragmentCreate();
     }
 
@@ -634,6 +635,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.locationPermissionGranted);
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.themeListUpdated);
+        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.themeTransitionViewPrepared);
         Theme.saveAutoNightThemeConfig();
     }
 
@@ -647,6 +649,8 @@ public void didReceivedNotification(int id, int account, Object... args) {
             }
         } else if (id == NotificationCenter.themeListUpdated) {
             updateRows();
+        } else if (id == NotificationCenter.themeTransitionViewPrepared) {
+            updateCurrentThemeChecks();
         }
     }
 
@@ -849,7 +853,7 @@ public void onItemClick(int id) {
                         if (themeInfo == Theme.getCurrentTheme()) {
                             return;
                         }
-                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false);
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false, false);
                     } else {
                         Theme.setCurrentNightTheme(themeInfo);
                     }
@@ -1540,15 +1544,7 @@ public boolean supportsPredictiveItemAnimations() {
                         if (themeInfo == Theme.getCurrentTheme()) {
                             return;
                         }
-                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false);
-
-                        int count = innerListView.getChildCount();
-                        for (int a = 0; a < count; a++) {
-                            View child = innerListView.getChildAt(a);
-                            if (child instanceof InnerThemeView) {
-                                ((InnerThemeView) child).updateCurrentThemeCheck();
-                            }
-                        }
+                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false, true);
                     });
                     horizontalListView.setOnItemLongClickListener((view12, position) -> {
                         InnerThemeView innerThemeView = (InnerThemeView) view12;
@@ -1773,6 +1769,18 @@ public int getItemViewType(int position) {
         }
     }
 
+    private void updateCurrentThemeChecks() {
+        if (innerListView != null) {
+            int count = innerListView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View child = innerListView.getChildAt(a);
+                if (child instanceof InnerThemeView) {
+                    ((InnerThemeView) child).updateCurrentThemeCheck();
+                }
+            }
+        }
+    }
+
     @Override
     public ThemeDescription[] getThemeDescriptions() {
         return new ThemeDescription[]{
