diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index bbe9454ca..09dbe4b13 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -597,19 +597,6 @@ public static Spannable replaceTags(String str) {
         return new SpannableStringBuilder(str);
     }
 
-    public static boolean needShowPasscode(boolean reset) {
-        boolean wasInBackground;
-        if (Build.VERSION.SDK_INT >= 14) {
-            wasInBackground = ForegroundDetector.getInstance().isWasInBackground(reset);
-            if (reset) {
-                ForegroundDetector.getInstance().resetBackgroundVar();
-            }
-        } else {
-            wasInBackground = UserConfig.lastPauseTime != 0;
-        }
-        return UserConfig.passcodeHash.length() > 0 && wasInBackground &&
-                (UserConfig.appLocked || UserConfig.autoLockIn != 0 && UserConfig.lastPauseTime != 0 && !UserConfig.appLocked && (UserConfig.lastPauseTime + UserConfig.autoLockIn) <= ConnectionsManager.getInstance().getCurrentTime());
-    }
 
     public static void shakeTextView(final TextView textView, final float x, final int num) {
         if (num == 6) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index c1bdc8112..47dbb771b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -23,33 +23,16 @@
 public class UserConfig {
 
     private static User currentUser;
-    public static boolean registeredForPush = false;
-    public static boolean registeredForInternalPush = false;
-    public static String pushString = "";
-    public static int lastSendMessageId = -210000;
     public static int lastLocalId = -210000;
-    public static int lastBroadcastId = -1;
-    public static String contactsHash = "";
-    public static String importHash = "";
-    public static boolean blockedUsersLoaded = false;
     private final static Object sync = new Object();
-    public static boolean saveIncomingPhotos = false;
-    public static int contactsVersion = 1;
-    public static String passcodeHash = "";
-    public static byte[] passcodeSalt = new byte[0];
-    public static boolean appLocked = false;
-    public static int passcodeType = 0;
-    public static int autoLockIn = 60 * 60;
-    public static int lastPauseTime = 0;
-    public static boolean isWaitingForPasscodeEnter = false;
     public static int lastUpdateVersion;
 
     public static int getNewMessageId() {
-        int id;
-        synchronized (sync) {
-            id = lastSendMessageId;
-            lastSendMessageId--;
-        }
+        int id = 0;
+//        synchronized (sync) {
+//            id = lastSendMessageId;
+//            lastSendMessageId--;
+//        }
         return id;
     }
 
@@ -62,23 +45,7 @@ public static void saveConfig(boolean withFile, File oldFile) {
             try {
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("userconfing", Context.MODE_PRIVATE);
                 SharedPreferences.Editor editor = preferences.edit();
-                editor.putBoolean("registeredForPush", registeredForPush);
-                editor.putString("pushString", pushString);
-                editor.putInt("lastSendMessageId", lastSendMessageId);
                 editor.putInt("lastLocalId", lastLocalId);
-                editor.putString("contactsHash", contactsHash);
-                editor.putString("importHash", importHash);
-                editor.putBoolean("saveIncomingPhotos", saveIncomingPhotos);
-                editor.putInt("contactsVersion", contactsVersion);
-                editor.putInt("lastBroadcastId", lastBroadcastId);
-                editor.putBoolean("registeredForInternalPush", registeredForInternalPush);
-                editor.putBoolean("blockedUsersLoaded", blockedUsersLoaded);
-                editor.putString("passcodeHash1", passcodeHash);
-                editor.putString("passcodeSalt", passcodeSalt.length > 0 ? Base64.encodeToString(passcodeSalt, Base64.DEFAULT) : "");
-                editor.putBoolean("appLocked", appLocked);
-                editor.putInt("passcodeType", passcodeType);
-                editor.putInt("autoLockIn", autoLockIn);
-                editor.putInt("lastPauseTime", lastPauseTime);
                 editor.putInt("lastUpdateVersion", lastUpdateVersion);
 
                 if (currentUser != null) {
@@ -133,6 +100,7 @@ public static void setCurrentUser(User user) {
 
     public static void loadConfig() {
         synchronized (sync) {
+            //TODO which file I read.
             final File configFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "user.dat");
             if (configFile.exists()) {
                 try {
@@ -145,14 +113,7 @@ public static void loadConfig() {
                         PostsStorage.lastDateValue = data.readInt32(false);
                         PostsStorage.lastPtsValue = data.readInt32(false);
                         PostsStorage.lastSeqValue = data.readInt32(false);
-                        registeredForPush = data.readBool(false);
-                        pushString = data.readString(false);
-                        lastSendMessageId = data.readInt32(false);
                         lastLocalId = data.readInt32(false);
-                        contactsHash = data.readString(false);
-                        importHash = data.readString(false);
-                        saveIncomingPhotos = data.readBool(false);
-                        contactsVersion = 0;
                         PostsStorage.lastQtsValue = data.readInt32(false);
                         PostsStorage.lastSecretVersion = data.readInt32(false);
                         int val = data.readInt32(false);
@@ -172,21 +133,11 @@ public void run() {
                         currentUser = UserServiceMock.getRandomUser();
 
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("userconfing", Context.MODE_PRIVATE);
-                        registeredForPush = preferences.getBoolean("registeredForPush", false);
-                        pushString = preferences.getString("pushString", "");
-                        lastSendMessageId = preferences.getInt("lastSendMessageId", -210000);
                         lastLocalId = preferences.getInt("lastLocalId", -210000);
-                        contactsHash = preferences.getString("contactsHash", "");
-                        importHash = preferences.getString("importHash", "");
-                        saveIncomingPhotos = preferences.getBoolean("saveIncomingPhotos", false);
-                        contactsVersion = preferences.getInt("contactsVersion", 0);
                     }
                     if (lastLocalId > -210000) {
                         lastLocalId = -210000;
                     }
-                    if (lastSendMessageId > -210000) {
-                        lastSendMessageId = -210000;
-                    }
                     data.cleanup();
                     Utilities.stageQueue.postRunnable(new Runnable() {
                         @Override
@@ -199,22 +150,7 @@ public void run() {
                 }
             } else {
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("userconfing", Context.MODE_PRIVATE);
-                registeredForPush = preferences.getBoolean("registeredForPush", false);
-                pushString = preferences.getString("pushString", "");
-                lastSendMessageId = preferences.getInt("lastSendMessageId", -210000);
                 lastLocalId = preferences.getInt("lastLocalId", -210000);
-                contactsHash = preferences.getString("contactsHash", "");
-                importHash = preferences.getString("importHash", "");
-                saveIncomingPhotos = preferences.getBoolean("saveIncomingPhotos", false);
-                contactsVersion = preferences.getInt("contactsVersion", 0);
-                lastBroadcastId = preferences.getInt("lastBroadcastId", -1);
-                registeredForInternalPush = preferences.getBoolean("registeredForInternalPush", false);
-                blockedUsersLoaded = preferences.getBoolean("blockedUsersLoaded", false);
-                passcodeHash = preferences.getString("passcodeHash1", "");
-                appLocked = preferences.getBoolean("appLocked", false);
-                passcodeType = preferences.getInt("passcodeType", 0);
-                autoLockIn = preferences.getInt("autoLockIn", 60 * 60);
-                lastPauseTime = preferences.getInt("lastPauseTime", 0);
                 lastUpdateVersion = preferences.getInt("lastUpdateVersion", 511);
                 String user = preferences.getString("user", null);
                 if (user != null) {
@@ -226,69 +162,14 @@ public void run() {
                         data.cleanup();
                     }
                 }
-                String passcodeSaltString = preferences.getString("passcodeSalt", "");
-                if (passcodeSaltString.length() > 0) {
-                    passcodeSalt = Base64.decode(passcodeSaltString, Base64.DEFAULT);
-                } else {
-                    passcodeSalt = new byte[0];
-                }
             }
         }
     }
 
-    public static boolean checkPasscode(String passcode) {
-        if (passcodeSalt.length == 0) {
-            boolean result = Utilities.MD5(passcode).equals(passcodeHash);
-            if (result) {
-                try {
-                    passcodeSalt = new byte[16];
-                    Utilities.random.nextBytes(passcodeSalt);
-                    byte[] passcodeBytes = passcode.getBytes("UTF-8");
-                    byte[] bytes = new byte[32 + passcodeBytes.length];
-                    System.arraycopy(passcodeSalt, 0, bytes, 0, 16);
-                    System.arraycopy(passcodeBytes, 0, bytes, 16, passcodeBytes.length);
-                    System.arraycopy(passcodeSalt, 0, bytes, passcodeBytes.length + 16, 16);
-                    passcodeHash = Utilities.bytesToHex(Utilities.computeSHA256(bytes, 0, bytes.length));
-                    saveConfig(false);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-            return result;
-        } else {
-            try {
-                byte[] passcodeBytes = passcode.getBytes("UTF-8");
-                byte[] bytes = new byte[32 + passcodeBytes.length];
-                System.arraycopy(passcodeSalt, 0, bytes, 0, 16);
-                System.arraycopy(passcodeBytes, 0, bytes, 16, passcodeBytes.length);
-                System.arraycopy(passcodeSalt, 0, bytes, passcodeBytes.length + 16, 16);
-                String hash = Utilities.bytesToHex(Utilities.computeSHA256(bytes, 0, bytes.length));
-                return passcodeHash.equals(hash);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-        return false;
-    }
+
 
     public static void clearConfig() {
         currentUser = null;
-        registeredForInternalPush = false;
-        registeredForPush = false;
-        contactsHash = "";
-        importHash = "";
-        lastSendMessageId = -210000;
-        contactsVersion = 1;
-        lastBroadcastId = -1;
-        saveIncomingPhotos = false;
-        blockedUsersLoaded = false;
-        appLocked = false;
-        passcodeType = 0;
-        passcodeHash = "";
-        passcodeSalt = new byte[0];
-        autoLockIn = 60 * 60;
-        lastPauseTime = 0;
-        isWaitingForPasscodeEnter = false;
         lastUpdateVersion = BuildVars.BUILD_VERSION;
         saveConfig(true);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
deleted file mode 100644
index 6ea4003fe..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ /dev/null
@@ -1,1034 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.graphics.Canvas;
-import android.graphics.Rect;
-import android.graphics.Typeface;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.os.Vibrator;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.InputType;
-import android.text.TextWatcher;
-import android.text.method.PasswordTransformationMethod;
-import android.util.TypedValue;
-import android.view.ActionMode;
-import android.view.ContextMenu;
-import android.view.Gravity;
-import android.view.HapticFeedbackConstants;
-import android.view.KeyEvent;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
-import ru.aragats.wgo.ApplicationLoader;
-import ru.aragats.wgo.R;
-
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.UserConfig;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
-
-import java.util.ArrayList;
-import java.util.Locale;
-
-public class PasscodeView extends FrameLayout {
-
-    public interface PasscodeViewDelegate {
-        void didAcceptedPassword();
-    }
-
-    private class AnimatingTextView extends FrameLayout {
-
-        private ArrayList<TextView> characterTextViews;
-        private ArrayList<TextView> dotTextViews;
-        private StringBuilder stringBuilder;
-        private String DOT = "\u2022";
-        private AnimatorSetProxy currentAnimation;
-        private Runnable dotRunnable;
-
-        public AnimatingTextView(Context context) {
-            super(context);
-            characterTextViews = new ArrayList<>(4);
-            dotTextViews = new ArrayList<>(4);
-            stringBuilder = new StringBuilder(4);
-
-            for (int a = 0; a < 4; a++) {
-                TextView textView = new TextView(context);
-                textView.setTextColor(0xffffffff);
-                textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 36);
-                textView.setGravity(Gravity.CENTER);
-                ViewProxy.setAlpha(textView, 0);
-                ViewProxy.setPivotX(textView, AndroidUtilities.dp(25));
-                ViewProxy.setPivotY(textView, AndroidUtilities.dp(25));
-                addView(textView);
-                LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
-                layoutParams.width = AndroidUtilities.dp(50);
-                layoutParams.height = AndroidUtilities.dp(50);
-                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-                textView.setLayoutParams(layoutParams);
-                characterTextViews.add(textView);
-
-                textView = new TextView(context);
-                textView.setTextColor(0xffffffff);
-                textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 36);
-                textView.setGravity(Gravity.CENTER);
-                ViewProxy.setAlpha(textView, 0);
-                textView.setText(DOT);
-                ViewProxy.setPivotX(textView, AndroidUtilities.dp(25));
-                ViewProxy.setPivotY(textView, AndroidUtilities.dp(25));
-                addView(textView);
-                layoutParams = (LayoutParams) textView.getLayoutParams();
-                layoutParams.width = AndroidUtilities.dp(50);
-                layoutParams.height = AndroidUtilities.dp(50);
-                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-                textView.setLayoutParams(layoutParams);
-                dotTextViews.add(textView);
-            }
-        }
-
-        private int getXForTextView(int pos) {
-            return (getMeasuredWidth() - stringBuilder.length() * AndroidUtilities.dp(30)) / 2 + pos * AndroidUtilities.dp(30) - AndroidUtilities.dp(10);
-        }
-
-        public void appendCharacter(String c) {
-            if (stringBuilder.length() == 4) {
-                return;
-            }
-            try {
-                performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-
-            ArrayList<Object> animators = new ArrayList<>();
-            final int newPos = stringBuilder.length();
-            stringBuilder.append(c);
-
-            TextView textView = characterTextViews.get(newPos);
-            textView.setText(c);
-            ViewProxy.setTranslationX(textView, getXForTextView(newPos));
-            animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0, 1));
-            animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0, 1));
-            animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0, 1));
-            animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationY", AndroidUtilities.dp(20), 0));
-            textView = dotTextViews.get(newPos);
-            ViewProxy.setTranslationX(textView, getXForTextView(newPos));
-            ViewProxy.setAlpha(textView, 0);
-            animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0, 1));
-            animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0, 1));
-            animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationY", AndroidUtilities.dp(20), 0));
-
-            for (int a = newPos + 1; a < 4; a++) {
-                textView = characterTextViews.get(a);
-                if (ViewProxy.getAlpha(textView) != 0) {
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                }
-
-                textView = dotTextViews.get(a);
-                if (ViewProxy.getAlpha(textView) != 0) {
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                }
-            }
-
-            if (dotRunnable != null) {
-                AndroidUtilities.cancelRunOnUIThread(dotRunnable);
-            }
-            dotRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    if (dotRunnable != this) {
-                        return;
-                    }
-                    ArrayList<Object> animators = new ArrayList<>();
-
-                    TextView textView = characterTextViews.get(newPos);
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                    textView = dotTextViews.get(newPos);
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 1));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 1));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 1));
-
-                    currentAnimation = new AnimatorSetProxy();
-                    currentAnimation.setDuration(150);
-                    currentAnimation.playTogether(animators);
-                    currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                        @Override
-                        public void onAnimationEnd(Object animation) {
-                            if (animation.equals(currentAnimation)) {
-                                currentAnimation = null;
-                            }
-                        }
-                    });
-                    currentAnimation.start();
-                }
-            };
-            AndroidUtilities.runOnUIThread(dotRunnable, 1500);
-
-            for (int a = 0; a < newPos; a++) {
-                textView = characterTextViews.get(a);
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationX", getXForTextView(a)));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationY", 0));
-                textView = dotTextViews.get(a);
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationX", getXForTextView(a)));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 1));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 1));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 1));
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationY", 0));
-            }
-
-            if (currentAnimation != null) {
-                currentAnimation.cancel();
-            }
-            currentAnimation = new AnimatorSetProxy();
-            currentAnimation.setDuration(150);
-            currentAnimation.playTogether(animators);
-            currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                @Override
-                public void onAnimationEnd(Object animation) {
-                    if (animation.equals(currentAnimation)) {
-                        currentAnimation = null;
-                    }
-                }
-            });
-            currentAnimation.start();
-        }
-
-        public String getString() {
-            return stringBuilder.toString();
-        }
-
-        public int lenght() {
-            return stringBuilder.length();
-        }
-
-        public void eraseLastCharacter() {
-            if (stringBuilder.length() == 0) {
-                return;
-            }
-            try {
-                performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-
-            ArrayList<Object> animators = new ArrayList<>();
-            int deletingPos = stringBuilder.length() - 1;
-            if (deletingPos != 0) {
-                stringBuilder.deleteCharAt(deletingPos);
-            }
-
-            for (int a = deletingPos; a < 4; a++) {
-                TextView textView = characterTextViews.get(a);
-                if (ViewProxy.getAlpha(textView) != 0) {
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationY", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationX", getXForTextView(a)));
-                }
-
-                textView = dotTextViews.get(a);
-                if (ViewProxy.getAlpha(textView) != 0) {
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationY", 0));
-                    animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationX", getXForTextView(a)));
-                }
-            }
-
-            if (deletingPos == 0) {
-                stringBuilder.deleteCharAt(deletingPos);
-            }
-
-            for (int a = 0; a < deletingPos; a++) {
-                TextView textView = characterTextViews.get(a);
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationX", getXForTextView(a)));
-                textView = dotTextViews.get(a);
-                animators.add(ObjectAnimatorProxy.ofFloat(textView, "translationX", getXForTextView(a)));
-            }
-
-            if (dotRunnable != null) {
-                AndroidUtilities.cancelRunOnUIThread(dotRunnable);
-                dotRunnable = null;
-            }
-
-            if (currentAnimation != null) {
-                currentAnimation.cancel();
-            }
-            currentAnimation = new AnimatorSetProxy();
-            currentAnimation.setDuration(150);
-            currentAnimation.playTogether(animators);
-            currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                @Override
-                public void onAnimationEnd(Object animation) {
-                    if (animation.equals(currentAnimation)) {
-                        currentAnimation = null;
-                    }
-                }
-            });
-            currentAnimation.start();
-        }
-
-        private void eraseAllCharacters(boolean animated) {
-            if (stringBuilder.length() == 0) {
-                return;
-            }
-            if (dotRunnable != null) {
-                AndroidUtilities.cancelRunOnUIThread(dotRunnable);
-                dotRunnable = null;
-            }
-            if (currentAnimation != null) {
-                currentAnimation.cancel();
-                currentAnimation = null;
-            }
-            stringBuilder.delete(0, stringBuilder.length());
-            if (animated) {
-                ArrayList<Object> animators = new ArrayList<>();
-
-                for (int a = 0; a < 4; a++) {
-                    TextView textView = characterTextViews.get(a);
-                    if (ViewProxy.getAlpha(textView) != 0) {
-                        animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                        animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                        animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                    }
-
-                    textView = dotTextViews.get(a);
-                    if (ViewProxy.getAlpha(textView) != 0) {
-                        animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleX", 0));
-                        animators.add(ObjectAnimatorProxy.ofFloat(textView, "scaleY", 0));
-                        animators.add(ObjectAnimatorProxy.ofFloat(textView, "alpha", 0));
-                    }
-                }
-
-                currentAnimation = new AnimatorSetProxy();
-                currentAnimation.setDuration(150);
-                currentAnimation.playTogether(animators);
-                currentAnimation.addListener(new AnimatorListenerAdapterProxy() {
-                    @Override
-                    public void onAnimationEnd(Object animation) {
-                        if (animation.equals(currentAnimation)) {
-                            currentAnimation = null;
-                        }
-                    }
-                });
-                currentAnimation.start();
-            } else {
-                for (int a = 0; a < 4; a++) {
-                    TextView textView = characterTextViews.get(a);
-                    ViewProxy.setAlpha(textView, 0);
-                    textView = dotTextViews.get(a);
-                    ViewProxy.setAlpha(textView, 0);
-                }
-            }
-        }
-
-        @Override
-        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-            if (dotRunnable != null) {
-                AndroidUtilities.cancelRunOnUIThread(dotRunnable);
-                dotRunnable = null;
-            }
-            if (currentAnimation != null) {
-                currentAnimation.cancel();
-                currentAnimation = null;
-            }
-
-            for (int a = 0; a < 4; a++) {
-                if (a < stringBuilder.length()) {
-                    TextView textView = characterTextViews.get(a);
-                    ViewProxy.setAlpha(textView, 0);
-                    ViewProxy.setScaleX(textView, 1);
-                    ViewProxy.setScaleY(textView, 1);
-                    ViewProxy.setTranslationY(textView, 0);
-                    ViewProxy.setTranslationX(textView, getXForTextView(a));
-
-                    textView = dotTextViews.get(a);
-                    ViewProxy.setAlpha(textView, 1);
-                    ViewProxy.setScaleX(textView, 1);
-                    ViewProxy.setScaleY(textView, 1);
-                    ViewProxy.setTranslationY(textView, 0);
-                    ViewProxy.setTranslationX(textView, getXForTextView(a));
-                } else {
-                    TextView textView = characterTextViews.get(a);
-                    ViewProxy.setAlpha(textView, 0);
-                    textView = dotTextViews.get(a);
-                    ViewProxy.setAlpha(textView, 0);
-                }
-            }
-            super.onLayout(changed, left, top, right, bottom);
-        }
-    }
-
-    private Drawable backgroundDrawable;
-    private FrameLayout numbersFrameLayout;
-    private ArrayList<TextView> numberTextViews;
-    private ArrayList<TextView> lettersTextViews;
-    private ArrayList<FrameLayout> numberFrameLayouts;
-    private FrameLayout passwordFrameLayout;
-    private ImageView eraseView;
-    private EditText passwordEditText;
-    private AnimatingTextView passwordEditText2;
-    private FrameLayout backgroundFrameLayout;
-    private TextView passcodeTextView;
-    private ImageView checkImage;
-    private int keyboardHeight = 0;
-
-    private Rect rect = new Rect();
-
-    private PasscodeViewDelegate delegate;
-
-    public PasscodeView(final Context context) {
-        super(context);
-
-        setWillNotDraw(false);
-        setVisibility(GONE);
-
-        backgroundFrameLayout = new FrameLayout(context);
-        addView(backgroundFrameLayout);
-        LayoutParams layoutParams = (LayoutParams) backgroundFrameLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        backgroundFrameLayout.setLayoutParams(layoutParams);
-
-        passwordFrameLayout = new FrameLayout(context);
-        addView(passwordFrameLayout);
-        layoutParams = (LayoutParams) passwordFrameLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        passwordFrameLayout.setLayoutParams(layoutParams);
-
-        ImageView imageView = new ImageView(context);
-        imageView.setScaleType(ImageView.ScaleType.FIT_XY);
-        imageView.setImageResource(R.drawable.passcode_logo);
-        passwordFrameLayout.addView(imageView);
-        layoutParams = (LayoutParams) imageView.getLayoutParams();
-        if (AndroidUtilities.density < 1) {
-            layoutParams.width = AndroidUtilities.dp(30);
-            layoutParams.height = AndroidUtilities.dp(30);
-        } else {
-            layoutParams.width = AndroidUtilities.dp(40);
-            layoutParams.height = AndroidUtilities.dp(40);
-        }
-        layoutParams.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
-        layoutParams.bottomMargin = AndroidUtilities.dp(100);
-        imageView.setLayoutParams(layoutParams);
-
-        passcodeTextView = new TextView(context);
-        passcodeTextView.setTextColor(0xffffffff);
-        passcodeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        passcodeTextView.setGravity(Gravity.CENTER_HORIZONTAL);
-        passwordFrameLayout.addView(passcodeTextView);
-        layoutParams = (LayoutParams) passcodeTextView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.bottomMargin = AndroidUtilities.dp(62);
-        layoutParams.gravity = Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;
-        passcodeTextView.setLayoutParams(layoutParams);
-
-        passwordEditText2 = new AnimatingTextView(context);
-        passwordFrameLayout.addView(passwordEditText2);
-        layoutParams = (FrameLayout.LayoutParams) passwordEditText2.getLayoutParams();
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(70);
-        layoutParams.rightMargin = AndroidUtilities.dp(70);
-        layoutParams.bottomMargin = AndroidUtilities.dp(6);
-        layoutParams.gravity = Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;
-        passwordEditText2.setLayoutParams(layoutParams);
-
-        passwordEditText = new EditText(context);
-        passwordEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 36);
-        passwordEditText.setTextColor(0xffffffff);
-        passwordEditText.setMaxLines(1);
-        passwordEditText.setLines(1);
-        passwordEditText.setGravity(Gravity.CENTER_HORIZONTAL);
-        passwordEditText.setSingleLine(true);
-        passwordEditText.setImeOptions(EditorInfo.IME_ACTION_DONE);
-        passwordEditText.setTypeface(Typeface.DEFAULT);
-        passwordEditText.setBackgroundDrawable(null);
-        AndroidUtilities.clearCursorDrawable(passwordEditText);
-        passwordFrameLayout.addView(passwordEditText);
-        layoutParams = (FrameLayout.LayoutParams) passwordEditText.getLayoutParams();
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.leftMargin = AndroidUtilities.dp(70);
-        layoutParams.rightMargin = AndroidUtilities.dp(70);
-        layoutParams.bottomMargin = AndroidUtilities.dp(6);
-        layoutParams.gravity = Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;
-        passwordEditText.setLayoutParams(layoutParams);
-        passwordEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_DONE) {
-                    processDone();
-                    return true;
-                }
-                return false;
-            }
-        });
-        passwordEditText.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-
-            }
-
-            @Override
-            public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-            }
-
-            @Override
-            public void afterTextChanged(Editable s) {
-                if (passwordEditText.length() == 4 && UserConfig.passcodeType == 0) {
-                    processDone();
-                }
-            }
-        });
-        if (android.os.Build.VERSION.SDK_INT < 11) {
-            passwordEditText.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener() {
-                public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
-                    menu.clear();
-                }
-            });
-        } else {
-            passwordEditText.setCustomSelectionActionModeCallback(new ActionMode.Callback() {
-                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
-                    return false;
-                }
-
-                public void onDestroyActionMode(ActionMode mode) {
-                }
-
-                public boolean onCreateActionMode(ActionMode mode, Menu menu) {
-                    return false;
-                }
-
-                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-                    return false;
-                }
-            });
-        }
-
-        checkImage = new ImageView(context);
-        checkImage.setImageResource(R.drawable.passcode_check);
-        checkImage.setScaleType(ImageView.ScaleType.CENTER);
-        checkImage.setBackgroundResource(R.drawable.bar_selector_lock);
-        passwordFrameLayout.addView(checkImage);
-        layoutParams = (LayoutParams) checkImage.getLayoutParams();
-        layoutParams.width = AndroidUtilities.dp(60);
-        layoutParams.height = AndroidUtilities.dp(60);
-        layoutParams.bottomMargin = AndroidUtilities.dp(4);
-        layoutParams.rightMargin = AndroidUtilities.dp(10);
-        layoutParams.gravity = Gravity.BOTTOM | Gravity.RIGHT;
-        checkImage.setLayoutParams(layoutParams);
-        checkImage.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                processDone();
-            }
-        });
-
-        FrameLayout lineFrameLayout = new FrameLayout(context);
-        lineFrameLayout.setBackgroundColor(0x26ffffff);
-        passwordFrameLayout.addView(lineFrameLayout);
-        layoutParams = (LayoutParams) lineFrameLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = AndroidUtilities.dp(1);
-        layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
-        layoutParams.leftMargin = AndroidUtilities.dp(20);
-        layoutParams.rightMargin = AndroidUtilities.dp(20);
-        lineFrameLayout.setLayoutParams(layoutParams);
-
-        numbersFrameLayout = new FrameLayout(context);
-        addView(numbersFrameLayout);
-        layoutParams = (LayoutParams) numbersFrameLayout.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        numbersFrameLayout.setLayoutParams(layoutParams);
-
-        lettersTextViews = new ArrayList<>(10);
-        numberTextViews = new ArrayList<>(10);
-        numberFrameLayouts = new ArrayList<>(10);
-        for (int a = 0; a < 10; a++) {
-            TextView textView = new TextView(context);
-            textView.setTextColor(0xffffffff);
-            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 36);
-            textView.setGravity(Gravity.CENTER);
-            textView.setText(String.format(Locale.US, "%d", a));
-            numbersFrameLayout.addView(textView);
-            layoutParams = (LayoutParams) textView.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(50);
-            layoutParams.height = AndroidUtilities.dp(50);
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            textView.setLayoutParams(layoutParams);
-            numberTextViews.add(textView);
-
-            textView = new TextView(context);
-            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
-            textView.setTextColor(0x7fffffff);
-            textView.setGravity(Gravity.CENTER);
-            numbersFrameLayout.addView(textView);
-            layoutParams = (LayoutParams) textView.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(50);
-            layoutParams.height = AndroidUtilities.dp(20);
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            textView.setLayoutParams(layoutParams);
-            switch (a) {
-                case 0:
-                    textView.setText("+");
-                    break;
-                case 2:
-                    textView.setText("ABC");
-                    break;
-                case 3:
-                    textView.setText("DEF");
-                    break;
-                case 4:
-                    textView.setText("GHI");
-                    break;
-                case 5:
-                    textView.setText("JKL");
-                    break;
-                case 6:
-                    textView.setText("MNO");
-                    break;
-                case 7:
-                    textView.setText("PRQS");
-                    break;
-                case 8:
-                    textView.setText("TUV");
-                    break;
-                case 9:
-                    textView.setText("WXYZ");
-                    break;
-                default:
-                    break;
-            }
-            lettersTextViews.add(textView);
-        }
-        eraseView = new ImageView(context);
-        eraseView.setScaleType(ImageView.ScaleType.CENTER);
-        eraseView.setImageResource(R.drawable.passcode_delete);
-        numbersFrameLayout.addView(eraseView);
-        layoutParams = (LayoutParams) eraseView.getLayoutParams();
-        layoutParams.width = AndroidUtilities.dp(50);
-        layoutParams.height = AndroidUtilities.dp(50);
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        eraseView.setLayoutParams(layoutParams);
-        for (int a = 0; a < 11; a++) {
-            FrameLayout frameLayout = new FrameLayout(context);
-            frameLayout.setBackgroundResource(R.drawable.bar_selector_lock);
-            frameLayout.setTag(a);
-            if (a == 10) {
-                frameLayout.setOnLongClickListener(new OnLongClickListener() {
-                    @Override
-                    public boolean onLongClick(View v) {
-                        passwordEditText.setText("");
-                        passwordEditText2.eraseAllCharacters(true);
-                        return true;
-                    }
-                });
-            }
-            frameLayout.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    int tag = (Integer) v.getTag();
-                    int key = KeyEvent.KEYCODE_DEL;
-                    switch (tag) {
-                        case 0:
-                            passwordEditText2.appendCharacter("0");
-                            break;
-                        case 1:
-                            passwordEditText2.appendCharacter("1");
-                            break;
-                        case 2:
-                            passwordEditText2.appendCharacter("2");
-                            break;
-                        case 3:
-                            passwordEditText2.appendCharacter("3");
-                            break;
-                        case 4:
-                            passwordEditText2.appendCharacter("4");
-                            break;
-                        case 5:
-                            passwordEditText2.appendCharacter("5");
-                            break;
-                        case 6:
-                            passwordEditText2.appendCharacter("6");
-                            break;
-                        case 7:
-                            passwordEditText2.appendCharacter("7");
-                            break;
-                        case 8:
-                            passwordEditText2.appendCharacter("8");
-                            break;
-                        case 9:
-                            passwordEditText2.appendCharacter("9");
-                            break;
-                        case 10:
-                            passwordEditText2.eraseLastCharacter();
-                            break;
-                    }
-                    if (passwordEditText2.lenght() == 4) {
-                        processDone();
-                    }
-                }
-            });
-            numberFrameLayouts.add(frameLayout);
-        }
-        for (int a = 10; a >= 0; a--) {
-            FrameLayout frameLayout = numberFrameLayouts.get(a);
-            numbersFrameLayout.addView(frameLayout);
-            layoutParams = (LayoutParams) frameLayout.getLayoutParams();
-            layoutParams.width = AndroidUtilities.dp(100);
-            layoutParams.height = AndroidUtilities.dp(100);
-            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-            frameLayout.setLayoutParams(layoutParams);
-        }
-    }
-
-    public void setDelegate(PasscodeViewDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    private void processDone() {
-        String password = "";
-        if (UserConfig.passcodeType == 0) {
-            password = passwordEditText2.getString();
-        } else if (UserConfig.passcodeType == 1) {
-            password = passwordEditText.getText().toString();
-        }
-        if (password.length() == 0) {
-            onPasscodeError();
-            return;
-        }
-        if (!UserConfig.checkPasscode(password)) {
-            passwordEditText.setText("");
-            passwordEditText2.eraseAllCharacters(true);
-            onPasscodeError();
-            return;
-        }
-        passwordEditText.clearFocus();
-        AndroidUtilities.hideKeyboard(passwordEditText);
-
-        if (Build.VERSION.SDK_INT >= 14) {
-            AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
-            animatorSetProxy.setDuration(200);
-            animatorSetProxy.playTogether(
-                    ObjectAnimatorProxy.ofFloat(this, "translationY", AndroidUtilities.dp(20)),
-                    ObjectAnimatorProxy.ofFloat(this, "alpha", AndroidUtilities.dp(0.0f)));
-            animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
-                @Override
-                public void onAnimationEnd(Object animation) {
-                    PasscodeView.this.clearAnimation();
-                    setVisibility(View.GONE);
-                }
-            });
-            animatorSetProxy.start();
-        } else {
-            setVisibility(View.GONE);
-        }
-
-        UserConfig.appLocked = false;
-        UserConfig.saveConfig(false);
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didSetPasscode);
-        setOnTouchListener(null);
-        if (delegate != null) {
-            delegate.didAcceptedPassword();
-        }
-    }
-
-    private void shakeTextView(final float x, final int num) {
-        if (num == 6) {
-            passcodeTextView.clearAnimation();
-            return;
-        }
-        AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
-        animatorSetProxy.playTogether(ObjectAnimatorProxy.ofFloat(passcodeTextView, "translationX", AndroidUtilities.dp(x)));
-        animatorSetProxy.setDuration(50);
-        animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
-            @Override
-            public void onAnimationEnd(Object animation) {
-                shakeTextView(num == 5 ? 0 : -x, num + 1);
-            }
-        });
-        animatorSetProxy.start();
-    }
-
-    private void onPasscodeError() {
-        Vibrator v = (Vibrator) getContext().getSystemService(Context.VIBRATOR_SERVICE);
-        if (v != null) {
-            v.vibrate(200);
-        }
-        shakeTextView(2, 0);
-    }
-
-    public void onResume() {
-        if (UserConfig.passcodeType == 1) {
-            if (passwordEditText != null) {
-                passwordEditText.requestFocus();
-                AndroidUtilities.showKeyboard(passwordEditText);
-            }
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    if (passwordEditText != null) {
-                        passwordEditText.requestFocus();
-                        AndroidUtilities.showKeyboard(passwordEditText);
-                    }
-                }
-            }, 200);
-        }
-    }
-
-    public void onShow() {
-        if (UserConfig.passcodeType == 1) {
-            if (passwordEditText != null) {
-                passwordEditText.requestFocus();
-                AndroidUtilities.showKeyboard(passwordEditText);
-            }
-        } else {
-            Activity parentActivity = (Activity) getContext();
-            if (parentActivity != null) {
-                View currentFocus = parentActivity.getCurrentFocus();
-                if (currentFocus != null) {
-                    currentFocus.clearFocus();
-                    AndroidUtilities.hideKeyboard(((Activity) getContext()).getCurrentFocus());
-                }
-            }
-        }
-        if (getVisibility() == View.VISIBLE) {
-            return;
-        }
-        if (Build.VERSION.SDK_INT >= 14) {
-            ViewProxy.setAlpha(this, 1.0f);
-            ViewProxy.setTranslationY(this, 0);
-            this.clearAnimation();
-        }
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        int selectedBackground = preferences.getInt("selectedBackground", 1000001);
-        boolean customTheme = false;
-        if (selectedBackground == 1000001) {
-            backgroundFrameLayout.setBackgroundColor(0xff517c9e);
-        } else {
-            backgroundDrawable = ApplicationLoader.getCachedWallpaper();
-            if (backgroundDrawable != null) {
-                backgroundFrameLayout.setBackgroundColor(0xbf000000);
-            } else {
-                backgroundFrameLayout.setBackgroundColor(0xff517c9e);
-            }
-        }
-
-        passcodeTextView.setText(LocaleController.getString("EnterYourPasscode", R.string.EnterYourPasscode));
-
-        if (UserConfig.passcodeType == 0) {
-            //InputFilter[] filterArray = new InputFilter[1];
-            //filterArray[0] = new InputFilter.LengthFilter(4);
-            //passwordEditText.setFilters(filterArray);
-            //passwordEditText.setInputType(InputType.TYPE_CLASS_PHONE);
-            //passwordEditText.setFocusable(false);
-            //passwordEditText.setFocusableInTouchMode(false);
-            numbersFrameLayout.setVisibility(VISIBLE);
-            passwordEditText.setVisibility(GONE);
-            passwordEditText2.setVisibility(VISIBLE);
-            checkImage.setVisibility(GONE);
-        } else if (UserConfig.passcodeType == 1) {
-            passwordEditText.setFilters(new InputFilter[0]);
-            passwordEditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
-            numbersFrameLayout.setVisibility(GONE);
-            passwordEditText.setFocusable(true);
-            passwordEditText.setFocusableInTouchMode(true);
-            passwordEditText.setVisibility(VISIBLE);
-            passwordEditText2.setVisibility(GONE);
-            checkImage.setVisibility(VISIBLE);
-        }
-        setVisibility(VISIBLE);
-        passwordEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
-        passwordEditText.setText("");
-        passwordEditText2.eraseAllCharacters(false);
-
-        setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int width = MeasureSpec.getSize(widthMeasureSpec);
-        int height = AndroidUtilities.displaySize.y - (Build.VERSION.SDK_INT >= 21 ? 0 : AndroidUtilities.statusBarHeight);
-
-        LayoutParams layoutParams;
-
-        if (!AndroidUtilities.isTablet() && getContext().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            layoutParams = (LayoutParams) passwordFrameLayout.getLayoutParams();
-            layoutParams.width = UserConfig.passcodeType == 0 ? width / 2 : width;
-            layoutParams.height = AndroidUtilities.dp(140);
-            layoutParams.topMargin = (height - AndroidUtilities.dp(140)) / 2;
-            passwordFrameLayout.setLayoutParams(layoutParams);
-
-            layoutParams = (LayoutParams) numbersFrameLayout.getLayoutParams();
-            layoutParams.height = height;
-            layoutParams.leftMargin = width / 2;
-            layoutParams.topMargin = height - layoutParams.height;
-            layoutParams.width = width / 2;
-            numbersFrameLayout.setLayoutParams(layoutParams);
-        } else {
-            int top = 0;
-            int left = 0;
-            if (AndroidUtilities.isTablet()) {
-                if (width > AndroidUtilities.dp(498)) {
-                    left = (width - AndroidUtilities.dp(498)) / 2;
-                    width = AndroidUtilities.dp(498);
-                }
-                if (height > AndroidUtilities.dp(528)) {
-                    top = (height - AndroidUtilities.dp(528)) / 2;
-                    height = AndroidUtilities.dp(528);
-                }
-            }
-            layoutParams = (LayoutParams) passwordFrameLayout.getLayoutParams();
-            layoutParams.height = height / 3;
-            layoutParams.width = width;
-            layoutParams.topMargin = top;
-            layoutParams.leftMargin = left;
-            passwordFrameLayout.setTag(top);
-            passwordFrameLayout.setLayoutParams(layoutParams);
-
-            layoutParams = (LayoutParams) numbersFrameLayout.getLayoutParams();
-            layoutParams.height = height / 3 * 2;
-            layoutParams.leftMargin = left;
-            layoutParams.topMargin = height - layoutParams.height + top;
-            layoutParams.width = width;
-            numbersFrameLayout.setLayoutParams(layoutParams);
-        }
-
-        int sizeBetweenNumbersX = (layoutParams.width - AndroidUtilities.dp(50) * 3) / 4;
-        int sizeBetweenNumbersY = (layoutParams.height - AndroidUtilities.dp(50) * 4) / 5;
-
-        for (int a = 0; a < 11; a++) {
-            LayoutParams layoutParams1;
-            int num;
-            if (a == 0) {
-                num = 10;
-            } else if (a == 10) {
-                num = 11;
-            } else {
-                num = a - 1;
-            }
-            int row = num / 3;
-            int col = num % 3;
-            int top;
-            if (a < 10) {
-                TextView textView = numberTextViews.get(a);
-                TextView textView1 = lettersTextViews.get(a);
-                layoutParams = (LayoutParams) textView.getLayoutParams();
-                layoutParams1 = (LayoutParams) textView1.getLayoutParams();
-                top = layoutParams1.topMargin = layoutParams.topMargin = sizeBetweenNumbersY + (sizeBetweenNumbersY + AndroidUtilities.dp(50)) * row;
-                layoutParams1.leftMargin = layoutParams.leftMargin = sizeBetweenNumbersX + (sizeBetweenNumbersX + AndroidUtilities.dp(50)) * col;
-                layoutParams1.topMargin += AndroidUtilities.dp(40);
-                textView.setLayoutParams(layoutParams);
-                textView1.setLayoutParams(layoutParams1);
-            } else {
-                layoutParams = (LayoutParams) eraseView.getLayoutParams();
-                top = layoutParams.topMargin = sizeBetweenNumbersY + (sizeBetweenNumbersY + AndroidUtilities.dp(50)) * row + AndroidUtilities.dp(8);
-                layoutParams.leftMargin = sizeBetweenNumbersX + (sizeBetweenNumbersX + AndroidUtilities.dp(50)) * col;
-                top -= AndroidUtilities.dp(8);
-                eraseView.setLayoutParams(layoutParams);
-            }
-
-            FrameLayout frameLayout = numberFrameLayouts.get(a);
-            layoutParams1 = (LayoutParams) frameLayout.getLayoutParams();
-            layoutParams1.topMargin = top - AndroidUtilities.dp(17);
-            layoutParams1.leftMargin = layoutParams.leftMargin - AndroidUtilities.dp(25);
-            frameLayout.setLayoutParams(layoutParams1);
-        }
-
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        View rootView = getRootView();
-        int usableViewHeight = rootView.getHeight() - AndroidUtilities.statusBarHeight - AndroidUtilities.getViewInset(rootView);
-        getWindowVisibleDisplayFrame(rect);
-        keyboardHeight = usableViewHeight - (rect.bottom - rect.top);
-
-        if (UserConfig.passcodeType == 1 && (AndroidUtilities.isTablet() || getContext().getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)) {
-            int t = 0;
-            if (passwordFrameLayout.getTag() != null) {
-                t = (Integer) passwordFrameLayout.getTag();
-            }
-            LayoutParams layoutParams = (LayoutParams) passwordFrameLayout.getLayoutParams();
-            layoutParams.topMargin = t + layoutParams.height - keyboardHeight / 2 - (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
-            passwordFrameLayout.setLayoutParams(layoutParams);
-        }
-
-        super.onLayout(changed, left, top, right, bottom);
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (getVisibility() != VISIBLE) {
-            return;
-        }
-        if (backgroundDrawable != null) {
-            if (backgroundDrawable instanceof ColorDrawable) {
-                backgroundDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
-                backgroundDrawable.draw(canvas);
-            } else {
-                float scaleX = (float) getMeasuredWidth() / (float) backgroundDrawable.getIntrinsicWidth();
-                float scaleY = (float) (getMeasuredHeight() + keyboardHeight) / (float) backgroundDrawable.getIntrinsicHeight();
-                float scale = scaleX < scaleY ? scaleY : scaleX;
-                int width = (int) Math.ceil(backgroundDrawable.getIntrinsicWidth() * scale);
-                int height = (int) Math.ceil(backgroundDrawable.getIntrinsicHeight() * scale);
-                int x = (getMeasuredWidth() - width) / 2;
-                int y = (getMeasuredHeight() - height + keyboardHeight) / 2;
-                backgroundDrawable.setBounds(x, y, x + width, y + height);
-                backgroundDrawable.draw(canvas);
-            }
-        } else {
-            super.onDraw(canvas);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index d64439a85..0d489fcb4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -51,7 +51,6 @@
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
 import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.PasscodeView;
 
 import java.io.BufferedReader;
 import java.io.InputStream;
@@ -64,14 +63,8 @@
 
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate {
     private boolean finished;
-    private String videoPath;
     private String sendingText;
     private ArrayList<Uri> photoPathsArray;
-    private ArrayList<String> documentsPathsArray;
-    private ArrayList<Uri> documentsUrisArray;
-    private String documentsMimeType;
-    private ArrayList<String> documentsOriginalPathsArray;
-//    private ArrayList<TLRPC.User> contactsToSend;
     private int currentConnectionState;
     private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<>();
     private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<>();
@@ -85,12 +78,8 @@
     private ImageView backgroundTablet;
     protected DrawerLayoutContainer drawerLayoutContainer;
     private DrawerLayoutAdapter drawerLayoutAdapter;
-    private PasscodeView passcodeView;
     private AlertDialog visibleDialog;
 
-    private Intent passcodeSaveIntent;
-    private boolean passcodeSaveIntentIsNew;
-    private boolean passcodeSaveIntentIsRestore;
 
     private boolean tabletFullSize;
 
@@ -127,9 +116,9 @@ protected void onCreate(Bundle savedInstanceState) {
 
         super.onCreate(savedInstanceState);
 
-        if (UserConfig.passcodeHash.length() != 0 && UserConfig.appLocked) {
-            UserConfig.lastPauseTime = ConnectionsManager.getInstance().getCurrentTime();
-        }
+//        if (UserConfig.appLocked) {
+//            UserConfig.lastPauseTime = ConnectionsManager.getInstance().getCurrentTime();
+//        }
 
         int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
         if (resourceId > 0) {
@@ -299,13 +288,6 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
 
         ApplicationLoader.loadWallpaper();
 
-        passcodeView = new PasscodeView(this);
-        drawerLayoutContainer.addView(passcodeView);
-        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) passcodeView.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.MATCH_PARENT;
-        passcodeView.setLayoutParams(layoutParams1);
-
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeOtherAppActivities, this);
         currentConnectionState = ConnectionsManager.getInstance().getConnectionState();
 
@@ -360,133 +342,92 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             drawerLayoutContainer.setAllowOpenDrawer(allowOpen, false);
         }
 
-        handleIntent(getIntent(), false, savedInstanceState != null, false);
+        handleIntent(getIntent(), false, savedInstanceState != null);
         needLayout();
     }
 
-    private void showPasscodeActivity() {
-        if (passcodeView == null) {
-            return;
-        }
-        UserConfig.appLocked = true;
-        if (PhotoViewer.getInstance().isVisible()) {
-            PhotoViewer.getInstance().closePhoto(false, true);
-        }
-        passcodeView.onShow();
-        UserConfig.isWaitingForPasscodeEnter = true;
-        drawerLayoutContainer.setAllowOpenDrawer(false, false);
-        passcodeView.setDelegate(new PasscodeView.PasscodeViewDelegate() {
-            @Override
-            public void didAcceptedPassword() {
-                UserConfig.isWaitingForPasscodeEnter = false;
-                if (passcodeSaveIntent != null) {
-                    handleIntent(passcodeSaveIntent, passcodeSaveIntentIsNew, passcodeSaveIntentIsRestore, true);
-                    passcodeSaveIntent = null;
-                }
-                drawerLayoutContainer.setAllowOpenDrawer(true, false);
-                actionBarLayout.showLastFragment();
-                if (AndroidUtilities.isTablet()) {
-                    layersActionBarLayout.showLastFragment();
-                    rightActionBarLayout.showLastFragment();
-                }
-            }
-        });
-    }
 
-    private boolean handleIntent(Intent intent, boolean isNew, boolean restore, boolean fromPassword) {
+    private boolean handleIntent(Intent intent, boolean isNew, boolean restore) {
         int flags = intent.getFlags();
-        if (!fromPassword && (AndroidUtilities.needShowPasscode(true) || UserConfig.isWaitingForPasscodeEnter)) {
-            showPasscodeActivity();
-            passcodeSaveIntent = intent;
-            passcodeSaveIntentIsNew = isNew;
-            passcodeSaveIntentIsRestore = restore;
-            UserConfig.saveConfig(false);
-        } else {
-            boolean pushOpened = false;
-
-            Integer push_user_id = 0;
-            Integer push_chat_id = 0;
-            Integer push_enc_id = 0;
-            Integer open_settings = 0;
-            boolean showDialogsList = false;
-
-            photoPathsArray = null;
-            videoPath = null;
-            sendingText = null;
-            documentsPathsArray = null;
-            documentsOriginalPathsArray = null;
-            documentsMimeType = null;
-            documentsUrisArray = null;
-//            contactsToSend = null;
-
-            if (UserConfig.isClientActivated() && (flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0) {
-                if (intent != null && intent.getAction() != null && !restore) {
-                    if (Intent.ACTION_SEND.equals(intent.getAction())) {
-                        boolean error = false;
-                        String type = intent.getType();
-                        if (type != null && type.equals(ContactsContract.Contacts.CONTENT_VCARD_TYPE)) {
-                            try {
-                                Uri uri = (Uri) intent.getExtras().get(Intent.EXTRA_STREAM);
-                                if (uri != null) {
-                                    ContentResolver cr = getContentResolver();
-                                    InputStream stream = cr.openInputStream(uri);
-
-                                    String name = null;
-                                    String nameEncoding = null;
-                                    String nameCharset = null;
-                                    ArrayList<String> phones = new ArrayList<>();
-                                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
-                                    String line;
-                                    while ((line = bufferedReader.readLine()) != null) {
-                                        String[] args = line.split(":");
-                                        if (args.length != 2) {
-                                            continue;
+        boolean pushOpened = false;
+
+        Integer push_user_id = 0;
+        Integer push_chat_id = 0;
+        Integer push_enc_id = 0;
+        Integer open_settings = 0;
+        boolean showDialogsList = false;
+
+        photoPathsArray = null;
+        sendingText = null;
+
+        if (UserConfig.isClientActivated() && (flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0) {
+            if (intent != null && intent.getAction() != null && !restore) {
+                if (Intent.ACTION_SEND.equals(intent.getAction())) {
+                    boolean error = false;
+                    String type = intent.getType();
+                    if (type != null && type.equals(ContactsContract.Contacts.CONTENT_VCARD_TYPE)) {
+                        try {
+                            Uri uri = (Uri) intent.getExtras().get(Intent.EXTRA_STREAM);
+                            if (uri != null) {
+                                ContentResolver cr = getContentResolver();
+                                InputStream stream = cr.openInputStream(uri);
+
+                                String name = null;
+                                String nameEncoding = null;
+                                String nameCharset = null;
+                                ArrayList<String> phones = new ArrayList<>();
+                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
+                                String line;
+                                while ((line = bufferedReader.readLine()) != null) {
+                                    String[] args = line.split(":");
+                                    if (args.length != 2) {
+                                        continue;
+                                    }
+                                    if (args[0].startsWith("FN")) {
+                                        String[] params = args[0].split(";");
+                                        for (String param : params) {
+                                            String[] args2 = param.split("=");
+                                            if (args2.length != 2) {
+                                                continue;
+                                            }
+                                            if (args2[0].equals("CHARSET")) {
+                                                nameCharset = args2[1];
+                                            } else if (args2[0].equals("ENCODING")) {
+                                                nameEncoding = args2[1];
+                                            }
                                         }
-                                        if (args[0].startsWith("FN")) {
-                                            String[] params = args[0].split(";");
-                                            for (String param : params) {
-                                                String[] args2 = param.split("=");
-                                                if (args2.length != 2) {
-                                                    continue;
-                                                }
-                                                if (args2[0].equals("CHARSET")) {
-                                                    nameCharset = args2[1];
-                                                } else if (args2[0].equals("ENCODING")) {
-                                                    nameEncoding = args2[1];
+                                        name = args[1];
+                                        if (nameEncoding != null && nameEncoding.equalsIgnoreCase("QUOTED-PRINTABLE")) {
+                                            while (name.endsWith("=") && nameEncoding != null) {
+                                                name = name.substring(0, name.length() - 1);
+                                                line = bufferedReader.readLine();
+                                                if (line == null) {
+                                                    break;
                                                 }
+                                                name += line;
                                             }
-                                            name = args[1];
-                                            if (nameEncoding != null && nameEncoding.equalsIgnoreCase("QUOTED-PRINTABLE")) {
-                                                while (name.endsWith("=") && nameEncoding != null) {
-                                                    name = name.substring(0, name.length() - 1);
-                                                    line = bufferedReader.readLine();
-                                                    if (line == null) {
-                                                        break;
-                                                    }
-                                                    name += line;
-                                                }
-                                                byte[] bytes = AndroidUtilities.decodeQuotedPrintable(name.getBytes());
-                                                if (bytes != null && bytes.length != 0) {
-                                                    String decodedName = new String(bytes, nameCharset);
-                                                    if (decodedName != null) {
-                                                        name = decodedName;
-                                                    }
+                                            byte[] bytes = AndroidUtilities.decodeQuotedPrintable(name.getBytes());
+                                            if (bytes != null && bytes.length != 0) {
+                                                String decodedName = new String(bytes, nameCharset);
+                                                if (decodedName != null) {
+                                                    name = decodedName;
                                                 }
                                             }
-                                        } else if (args[0].startsWith("TEL")) {
-                                            String phone = PhoneFormat.stripExceptNumbers(args[1], true);
-                                            if (phone.length() > 0) {
-                                                phones.add(phone);
-                                            }
+                                        }
+                                    } else if (args[0].startsWith("TEL")) {
+                                        String phone = PhoneFormat.stripExceptNumbers(args[1], true);
+                                        if (phone.length() > 0) {
+                                            phones.add(phone);
                                         }
                                     }
-                                    try {
-                                        bufferedReader.close();
-                                        stream.close();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                    if (name != null && !phones.isEmpty()) {
+                                }
+                                try {
+                                    bufferedReader.close();
+                                    stream.close();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                                if (name != null && !phones.isEmpty()) {
 //                                        contactsToSend = new ArrayList<>();
 //                                        for (String phone : phones) {
 //                                            TLRPC.User user = new TLRPC.TL_userContact();
@@ -496,260 +437,225 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
 //                                            user.id = 0;
 //                                            contactsToSend.add(user);
 //                                        }
-                                    }
-                                } else {
-                                    error = true;
                                 }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
+                            } else {
                                 error = true;
                             }
-                        } else {
-                            if (type != null && (type.equals("text/plain") || type.equals("message/rfc822")) && (intent.getStringExtra(Intent.EXTRA_TEXT) != null || intent.getCharSequenceExtra(Intent.EXTRA_TEXT) != null)) {
-                                String text = intent.getStringExtra(Intent.EXTRA_TEXT);
-                                if (text == null) {
-                                    text = intent.getCharSequenceExtra(Intent.EXTRA_TEXT).toString();
-                                }
-                                String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                            error = true;
+                        }
+                    } else {
+                        if (type != null && (type.equals("text/plain") || type.equals("message/rfc822")) && (intent.getStringExtra(Intent.EXTRA_TEXT) != null || intent.getCharSequenceExtra(Intent.EXTRA_TEXT) != null)) {
+                            String text = intent.getStringExtra(Intent.EXTRA_TEXT);
+                            if (text == null) {
+                                text = intent.getCharSequenceExtra(Intent.EXTRA_TEXT).toString();
+                            }
+                            String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
 
-                                if (text != null && text.length() != 0) {
-                                    if ((text.startsWith("http://") || text.startsWith("https://")) && subject != null && subject.length() != 0) {
-                                        text = subject + "\n" + text;
-                                    }
-                                    sendingText = text;
-                                    if (sendingText.contains("WhatsApp")) { //who needs this sent from ...?
-                                        sendingText = null;
-                                    }
-                                } else {
-                                    error = true;
+                            if (text != null && text.length() != 0) {
+                                if ((text.startsWith("http://") || text.startsWith("https://")) && subject != null && subject.length() != 0) {
+                                    text = subject + "\n" + text;
+                                }
+                                sendingText = text;
+                                if (sendingText.contains("WhatsApp")) { //who needs this sent from ...?
+                                    sendingText = null;
                                 }
+                            } else {
+                                error = true;
+                            }
+                        }
+                        Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+                        if (parcelable != null) {
+                            String path;
+                            if (!(parcelable instanceof Uri)) {
+                                parcelable = Uri.parse(parcelable.toString());
                             }
-                            Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
-                            if (parcelable != null) {
-                                String path;
-                                if (!(parcelable instanceof Uri)) {
-                                    parcelable = Uri.parse(parcelable.toString());
+                            Uri uri = (Uri) parcelable;
+                            if (uri != null && (type != null && type.startsWith("image/") || uri.toString().toLowerCase().endsWith(".jpg"))) {
+                                String tempPath = AndroidUtilities.getPath(uri);
+                                if (photoPathsArray == null) {
+                                    photoPathsArray = new ArrayList<>();
                                 }
-                                Uri uri = (Uri) parcelable;
-                                if (uri != null && (type != null && type.startsWith("image/") || uri.toString().toLowerCase().endsWith(".jpg"))) {
-                                    String tempPath = AndroidUtilities.getPath(uri);
+                                photoPathsArray.add(uri);
+                            } else {
+                                path = AndroidUtilities.getPath(uri);
+                            }
+                        } else if (sendingText == null) {
+                            error = true;
+                        }
+                    }
+                    if (error) {
+                        Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                    }
+                } else if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
+                    boolean error = false;
+                    try {
+                        ArrayList<Parcelable> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
+                        String type = intent.getType();
+                        if (uris != null) {
+                            if (type != null && type.startsWith("image/")) {
+                                for (Parcelable parcelable : uris) {
+                                    if (!(parcelable instanceof Uri)) {
+                                        parcelable = Uri.parse(parcelable.toString());
+                                    }
+                                    Uri uri = (Uri) parcelable;
                                     if (photoPathsArray == null) {
                                         photoPathsArray = new ArrayList<>();
                                     }
                                     photoPathsArray.add(uri);
-                                } else {
-                                    path = AndroidUtilities.getPath(uri);
-                                    if (path != null) {
-                                        if (path.startsWith("file:")) {
-                                            path = path.replace("file://", "");
-                                        }
-                                        if (type != null && type.startsWith("video/")) {
-                                            videoPath = path;
-                                        } else {
-                                            if (documentsPathsArray == null) {
-                                                documentsPathsArray = new ArrayList<>();
-                                                documentsOriginalPathsArray = new ArrayList<>();
-                                            }
-                                            documentsPathsArray.add(path);
-                                            documentsOriginalPathsArray.add(uri.toString());
-                                        }
-                                    } else {
-                                        if (documentsUrisArray == null) {
-                                            documentsUrisArray = new ArrayList<>();
-                                        }
-                                        documentsUrisArray.add(uri);
-                                        documentsMimeType = type;
-                                    }
                                 }
-                            } else if (sendingText == null) {
-                                error = true;
-                            }
-                        }
-                        if (error) {
-                            Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
-                        }
-                    } else if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
-                        boolean error = false;
-                        try {
-                            ArrayList<Parcelable> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
-                            String type = intent.getType();
-                            if (uris != null) {
-                                if (type != null && type.startsWith("image/")) {
-                                    for (Parcelable parcelable : uris) {
-                                        if (!(parcelable instanceof Uri)) {
-                                            parcelable = Uri.parse(parcelable.toString());
-                                        }
-                                        Uri uri = (Uri) parcelable;
-                                        if (photoPathsArray == null) {
-                                            photoPathsArray = new ArrayList<>();
-                                        }
-                                        photoPathsArray.add(uri);
+                            } else {
+                                for (Parcelable parcelable : uris) {
+                                    if (!(parcelable instanceof Uri)) {
+                                        parcelable = Uri.parse(parcelable.toString());
                                     }
-                                } else {
-                                    for (Parcelable parcelable : uris) {
-                                        if (!(parcelable instanceof Uri)) {
-                                            parcelable = Uri.parse(parcelable.toString());
-                                        }
-                                        String path = AndroidUtilities.getPath((Uri) parcelable);
-                                        String originalPath = parcelable.toString();
-                                        if (originalPath == null) {
-                                            originalPath = path;
-                                        }
-                                        if (path != null) {
-                                            if (path.startsWith("file:")) {
-                                                path = path.replace("file://", "");
-                                            }
-                                            if (documentsPathsArray == null) {
-                                                documentsPathsArray = new ArrayList<>();
-                                                documentsOriginalPathsArray = new ArrayList<>();
-                                            }
-                                            documentsPathsArray.add(path);
-                                            documentsOriginalPathsArray.add(originalPath);
-                                        }
+                                    String path = AndroidUtilities.getPath((Uri) parcelable);
+                                    String originalPath = parcelable.toString();
+                                    if (originalPath == null) {
+                                        originalPath = path;
                                     }
                                 }
-                            } else {
-                                error = true;
                             }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
+                        } else {
                             error = true;
                         }
-                        if (error) {
-                            Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
-                        }
-                    } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {
-                        Uri data = intent.getData();
-                        if (data != null) {
-                            String username = null;
-                            String group = null;
-                            String sticker = null;
-                            String scheme = data.getScheme();
-                            if (scheme != null) {
-                                if ((scheme.equals("http") || scheme.equals("https"))) {
-                                    String host = data.getHost().toLowerCase();
-                                    if (host.equals("telegram.me")) {
-                                        String path = data.getPath();
-                                        if (path != null && path.length() >= 6) {
-                                            path = path.substring(1);
-                                            if (path.startsWith("joinchat/")) {
-                                                group = path.replace("joinchat/", "");
-                                            } else if (path.startsWith("addstickers/")) {
-                                                sticker = path.replace("addstickers/", "");
-                                            } else {
-                                                username = path;
-                                            }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        error = true;
+                    }
+                    if (error) {
+                        Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                    }
+                } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {
+                    Uri data = intent.getData();
+                    if (data != null) {
+                        String username = null;
+                        String group = null;
+                        String sticker = null;
+                        String scheme = data.getScheme();
+                        if (scheme != null) {
+                            if ((scheme.equals("http") || scheme.equals("https"))) {
+                                String host = data.getHost().toLowerCase();
+                                if (host.equals("telegram.me")) {
+                                    String path = data.getPath();
+                                    if (path != null && path.length() >= 6) {
+                                        path = path.substring(1);
+                                        if (path.startsWith("joinchat/")) {
+                                            group = path.replace("joinchat/", "");
+                                        } else if (path.startsWith("addstickers/")) {
+                                            sticker = path.replace("addstickers/", "");
+                                        } else {
+                                            username = path;
                                         }
                                     }
-                                } else if (scheme.equals("tg")) {
-                                    String url = data.toString();
-                                    if (url.startsWith("tg:resolve") || url.startsWith("tg://resolve")) {
-                                        url = url.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org");
-                                        data = Uri.parse(url);
-                                        username = data.getQueryParameter("domain");
-                                    } else if (url.startsWith("tg:join") || url.startsWith("tg://join")) {
-                                        url = url.replace("tg:join", "tg://telegram.org").replace("tg://join", "tg://telegram.org");
-                                        data = Uri.parse(url);
-                                        group = data.getQueryParameter("invite");
-                                    } else if (url.startsWith("tg:addstickers") || url.startsWith("tg://addstickers")) {
-                                        url = url.replace("tg:addstickers", "tg://telegram.org").replace("tg://addstickers", "tg://telegram.org");
-                                        data = Uri.parse(url);
-                                        sticker = data.getQueryParameter("set");
-                                    }
+                                }
+                            } else if (scheme.equals("tg")) {
+                                String url = data.toString();
+                                if (url.startsWith("tg:resolve") || url.startsWith("tg://resolve")) {
+                                    url = url.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org");
+                                    data = Uri.parse(url);
+                                    username = data.getQueryParameter("domain");
+                                } else if (url.startsWith("tg:join") || url.startsWith("tg://join")) {
+                                    url = url.replace("tg:join", "tg://telegram.org").replace("tg://join", "tg://telegram.org");
+                                    data = Uri.parse(url);
+                                    group = data.getQueryParameter("invite");
+                                } else if (url.startsWith("tg:addstickers") || url.startsWith("tg://addstickers")) {
+                                    url = url.replace("tg:addstickers", "tg://telegram.org").replace("tg://addstickers", "tg://telegram.org");
+                                    data = Uri.parse(url);
+                                    sticker = data.getQueryParameter("set");
                                 }
                             }
-                            if (username != null || group != null || sticker != null) {
+                        }
+                        if (username != null || group != null || sticker != null) {
 //                                runLinkRequest(username, group, sticker, 0);
-                            } else {
-                                try {
-                                    Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
-                                    if (cursor != null) {
-                                        if (cursor.moveToFirst()) {
-                                            int userId = cursor.getInt(cursor.getColumnIndex("DATA4"));
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                                            push_user_id = userId;
-                                        }
-                                        cursor.close();
+                        } else {
+                            try {
+                                Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
+                                if (cursor != null) {
+                                    if (cursor.moveToFirst()) {
+                                        int userId = cursor.getInt(cursor.getColumnIndex("DATA4"));
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                        push_user_id = userId;
                                     }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
+                                    cursor.close();
                                 }
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
                             }
                         }
-                    } else if (intent.getAction().equals("org.telegram.messenger.OPEN_ACCOUNT")) {
-                        open_settings = 1;
-                    } else if (intent.getAction().startsWith("com.tmessages.openchat")) {
-                        int chatId = intent.getIntExtra("chatId", 0);
-                        int userId = intent.getIntExtra("userId", 0);
-                        int encId = intent.getIntExtra("encId", 0);
-                        if (chatId != 0) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                            push_chat_id = chatId;
-                        } else if (userId != 0) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                            push_user_id = userId;
-                        } else if (encId != 0) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                            push_enc_id = encId;
-                        } else {
-                            showDialogsList = true;
-                        }
+                    }
+                } else if (intent.getAction().equals("org.telegram.messenger.OPEN_ACCOUNT")) {
+                    open_settings = 1;
+                } else if (intent.getAction().startsWith("com.tmessages.openchat")) {
+                    int chatId = intent.getIntExtra("chatId", 0);
+                    int userId = intent.getIntExtra("userId", 0);
+                    int encId = intent.getIntExtra("encId", 0);
+                    if (chatId != 0) {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        push_chat_id = chatId;
+                    } else if (userId != 0) {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        push_user_id = userId;
+                    } else if (encId != 0) {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        push_enc_id = encId;
+                    } else {
+                        showDialogsList = true;
                     }
                 }
             }
+        }
 
-            if (showDialogsList) {
-                if (!AndroidUtilities.isTablet()) {
-                    actionBarLayout.removeAllFragments();
-                } else {
-                    if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
-                        for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
-                            layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
-                            a--;
-                        }
-                        layersActionBarLayout.closeLastFragment(false);
+        if (showDialogsList) {
+            if (!AndroidUtilities.isTablet()) {
+                actionBarLayout.removeAllFragments();
+            } else {
+                if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                    for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
+                        layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
+                        a--;
                     }
+                    layersActionBarLayout.closeLastFragment(false);
                 }
-                pushOpened = false;
-                isNew = false;
             }
-            if (!pushOpened && !isNew) {
-                if (AndroidUtilities.isTablet()) {
-                    if (!UserConfig.isClientActivated()) {
-                        if (layersActionBarLayout.fragmentsStack.isEmpty()) {
+            pushOpened = false;
+            isNew = false;
+        }
+        if (!pushOpened && !isNew) {
+            if (AndroidUtilities.isTablet()) {
+                if (!UserConfig.isClientActivated()) {
+                    if (layersActionBarLayout.fragmentsStack.isEmpty()) {
 //                            layersActionBarLayout.addFragmentToStack(new LoginActivity());
 //                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
-                        }
-                    } else {
-                        if (actionBarLayout.fragmentsStack.isEmpty()) {
-                            actionBarLayout.addFragmentToStack(new PostsActivity(null));
-                            drawerLayoutContainer.setAllowOpenDrawer(true, false);
-                        }
                     }
                 } else {
                     if (actionBarLayout.fragmentsStack.isEmpty()) {
-                        if (!UserConfig.isClientActivated()) {
+                        actionBarLayout.addFragmentToStack(new PostsActivity(null));
+                        drawerLayoutContainer.setAllowOpenDrawer(true, false);
+                    }
+                }
+            } else {
+                if (actionBarLayout.fragmentsStack.isEmpty()) {
+                    if (!UserConfig.isClientActivated()) {
 //                            actionBarLayout.addFragmentToStack(new LoginActivity());
 //                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
-                        } else {
-                            actionBarLayout.addFragmentToStack(new PostsActivity(null));
-                            drawerLayoutContainer.setAllowOpenDrawer(true, false);
-                        }
+                    } else {
+                        actionBarLayout.addFragmentToStack(new PostsActivity(null));
+                        drawerLayoutContainer.setAllowOpenDrawer(true, false);
                     }
                 }
-                actionBarLayout.showLastFragment();
-                if (AndroidUtilities.isTablet()) {
-                    layersActionBarLayout.showLastFragment();
-                    rightActionBarLayout.showLastFragment();
-                }
             }
-
-            intent.setAction(null);
-            return pushOpened;
+            actionBarLayout.showLastFragment();
+            if (AndroidUtilities.isTablet()) {
+                layersActionBarLayout.showLastFragment();
+                rightActionBarLayout.showLastFragment();
+            }
         }
-        return false;
-    }
 
+        intent.setAction(null);
+        return pushOpened;
+    }
 
 
     public AlertDialog showAlertDialog(AlertDialog.Builder builder) {
@@ -780,7 +686,7 @@ public void onDismiss(DialogInterface dialog) {
     @Override
     protected void onNewIntent(Intent intent) {
         super.onNewIntent(intent);
-        handleIntent(intent, true, false, false);
+        handleIntent(intent, true, false);
     }
 
 //    @Override
@@ -850,10 +756,6 @@ public void needLayout() {
                     chatFragment.onPause();
                     actionBarLayout.fragmentsStack.remove(1);
                     rightActionBarLayout.fragmentsStack.add(chatFragment);
-                    if (passcodeView.getVisibility() != View.VISIBLE) {
-                        actionBarLayout.showLastFragment();
-                        rightActionBarLayout.showLastFragment();
-                    }
                 }
 
                 rightActionBarLayout.setVisibility(rightActionBarLayout.fragmentsStack.isEmpty() ? View.GONE : View.VISIBLE);
@@ -876,9 +778,6 @@ public void needLayout() {
                     chatFragment.onPause();
                     rightActionBarLayout.fragmentsStack.remove(0);
                     actionBarLayout.addFragmentToStack(chatFragment);
-                    if (passcodeView.getVisibility() != View.VISIBLE) {
-                        actionBarLayout.showLastFragment();
-                    }
                 }
             }
         }
@@ -907,10 +806,6 @@ public void onGlobalLayout() {
 
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (UserConfig.passcodeHash.length() != 0 && UserConfig.lastPauseTime != 0) {
-            UserConfig.lastPauseTime = 0;
-            UserConfig.saveConfig(false);
-        }
         super.onActivityResult(requestCode, resultCode, data);
         if (actionBarLayout.fragmentsStack.size() != 0) {
             BaseFragment fragment = actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1);
@@ -931,7 +826,6 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     @Override
     protected void onPause() {
         super.onPause();
-        onPasscodePause();
         actionBarLayout.onPause();
         if (AndroidUtilities.isTablet()) {
             rightActionBarLayout.onPause();
@@ -960,15 +854,10 @@ protected void onDestroy() {
     @Override
     protected void onResume() {
         super.onResume();
-        onPasscodeResume();
-        if (passcodeView.getVisibility() != View.VISIBLE) {
-            actionBarLayout.onResume();
-            if (AndroidUtilities.isTablet()) {
-                rightActionBarLayout.onResume();
-                layersActionBarLayout.onResume();
-            }
-        } else {
-            passcodeView.onResume();
+        actionBarLayout.onResume();
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onResume();
+            layersActionBarLayout.onResume();
         }
         //TODO-CONFIG HOCKEY_APP_HASH
         AndroidUtilities.checkForCrashes(this);
@@ -1030,59 +919,15 @@ public void didReceivedNotification(int id, Object... args) {
         } else if (id == NotificationCenter.screenStateChanged) {
             if (!ApplicationLoader.mainInterfacePaused) {
                 if (!ApplicationLoader.isScreenOn) {
-                    onPasscodePause();
+//                    onPasscodePause();
                 } else {
-                    onPasscodeResume();
+//                    onPasscodeResume();
                 }
             }
         }
     }
 
-    private void onPasscodePause() {
-        if (lockRunnable != null) {
-            AndroidUtilities.cancelRunOnUIThread(lockRunnable);
-            lockRunnable = null;
-        }
-        if (UserConfig.passcodeHash.length() != 0) {
-            UserConfig.lastPauseTime = ConnectionsManager.getInstance().getCurrentTime();
-            lockRunnable = new Runnable() {
-                @Override
-                public void run() {
-                    if (lockRunnable == this) {
-                        if (AndroidUtilities.needShowPasscode(true)) {
-                            FileLog.e("tmessages", "lock app");
-                            showPasscodeActivity();
-                        } else {
-                            FileLog.e("tmessages", "didn't pass lock check");
-                        }
-                        lockRunnable = null;
-                    }
-                }
-            };
-            if (UserConfig.appLocked) {
-                AndroidUtilities.runOnUIThread(lockRunnable, 1000);
-            } else if (UserConfig.autoLockIn != 0) {
-                AndroidUtilities.runOnUIThread(lockRunnable, (long) UserConfig.autoLockIn * 1000 + 1000);
-            }
-        } else {
-            UserConfig.lastPauseTime = 0;
-        }
-        UserConfig.saveConfig(false);
-    }
 
-    private void onPasscodeResume() {
-        if (lockRunnable != null) {
-            AndroidUtilities.cancelRunOnUIThread(lockRunnable);
-            lockRunnable = null;
-        }
-        if (AndroidUtilities.needShowPasscode(true)) {
-            showPasscodeActivity();
-        }
-        if (UserConfig.lastPauseTime != 0) {
-            UserConfig.lastPauseTime = 0;
-            UserConfig.saveConfig(false);
-        }
-    }
 
     private void updateCurrentConnectionState() {
         String text = null;
@@ -1130,10 +975,6 @@ protected void onSaveInstanceState(Bundle outState) {
 
     @Override
     public void onBackPressed() {
-        if (passcodeView.getVisibility() == View.VISIBLE) {
-            finish();
-            return;
-        }
         if (PhotoViewer.getInstance().isVisible()) {
             PhotoViewer.getInstance().closePhoto(true, false);
         } else if (drawerLayoutContainer.isDrawerOpened()) {
