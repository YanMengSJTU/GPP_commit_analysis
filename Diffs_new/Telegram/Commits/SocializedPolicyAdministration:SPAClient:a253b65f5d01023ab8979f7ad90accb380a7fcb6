diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
index 0810c0260..458e37def 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
@@ -106,7 +106,7 @@ public void onResponse(String response) {
                                         } else {
                                             String[] values = results[i].split(" ");
                                             BigInteger value = paillierPrivateKey.decrypt(new BigInteger(values[0]));
-                                            BigInteger weight = paillierPrivateKey.decrypt(new BigInteger(values[1]));
+                                            BigInteger weight = new BigInteger(values[1]);
                                             editor.putInt(settings[j] + "_result", value.divide(weight).intValue());
                                         }
                                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
index cde0e5687..1733835ff 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
@@ -166,9 +166,9 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                     // pass
                 } else if (i > usersSize) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
-                    boolean containsLastSeen = preferences.contains("last_seen_setting");
-                    boolean containsPasscodeLock = preferences.contains("passcode_lock_setting");
-                    boolean containsAverage = preferences.contains("average_policy");
+                    boolean containsLastSeen = preferences.getBoolean("last_seen_setting", false);
+                    boolean containsPasscodeLock = preferences.getBoolean("passcode_lock_setting", false);
+                    boolean containsAverage = preferences.getBoolean("average_policy", false);
                     // boolean containsMinMax = preferences.contains("maximum_minimum_policy");
                     if (usersSize >= leastNumberForSendSPARequest &&
                             (containsLastSeen || containsPasscodeLock
@@ -263,12 +263,10 @@ private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscod
         String opeK = preferences.getString("ope_key", "1");
         PaillierPublicKey pk = new PaillierPublicKey(new BigInteger(paillierN),
                 new BigInteger(paillierG));
-        PaillierPrivateKey pp = new PaillierPrivateKey(new BigInteger(paillierL), new BigInteger(paillierM), new BigInteger(paillierN));
         for (int i = 0; i < respondentsSize; ++i) {
             String[] cu = usersPhoneAndWeight.get(i);
             respondentsId.add(cu[0]);
-            BigInteger w = pk.encrypt(new BigInteger(cu[1]));
-            respondentsWeight.add(w.toString());
+            respondentsWeight.add(cu[1]);
         }
         final JSONObject sendC = new JSONObject();
         try {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java b/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
index 0f906f887..4ae37d53a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPARequest.java
@@ -118,6 +118,8 @@ public void onItemClick(int id) {
         listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                final long startTime = System.currentTimeMillis();
+                for (int num = 0; num < 1; ++num) {
                 if (i < 0 || i > settingSize || getParentActivity() == null) {
                     return;
                 }
@@ -181,28 +183,34 @@ public void onClick(DialogInterface dialog, int which) {
                         String setting = settings[j];
                         if (setting.compareTo("last_seen_setting") == 0) {
                             if (settingsValues[j] == 1) {
-                                values[j] = paillier.encrypt(new BigInteger("0")).toString()
-                                        + " " + paillier.encrypt(new BigInteger("0")).toString()
-                                        + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString();
+                                int weightInt = Integer.parseInt(weight);
+                                values[j] = paillier.encrypt(new BigInteger("" + 0 * weightInt)).toString()
+                                        + " " + paillier.encrypt(new BigInteger("" + 0 * weightInt)).toString()
+                                        + " " + paillier.encrypt(new BigInteger("" + 1 * weightInt)).toString();
                             } else if (settingsValues[j] == 2) {
-                                values[j] = paillier.encrypt(new BigInteger("0")).toString()
-                                        + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
-                                        + " " + paillier.encrypt(new BigInteger("0")).toString();
+                                int weightInt = Integer.parseInt(weight);
+                                values[j] = paillier.encrypt(new BigInteger("" + 0 * weightInt)).toString()
+                                        + " " + paillier.encrypt(new BigInteger("" + 1 * weightInt)).toString()
+                                        + " " + paillier.encrypt(new BigInteger("" + 0 * weightInt)).toString();
                             } else if (settingsValues[j] == 4) {
-                                values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
-                                        + " " + paillier.encrypt(new BigInteger("0")).toString()
-                                        + " " + paillier.encrypt(new BigInteger("0")).toString();
+                                int weightInt = Integer.parseInt(weight);
+                                values[j] = paillier.encrypt(new BigInteger("" + 1 * weightInt)).toString()
+                                        + " " + paillier.encrypt(new BigInteger("" + 0 * weightInt)).toString()
+                                        + " " + paillier.encrypt(new BigInteger("" + 0 * weightInt)).toString();
                             }
                         } else if (setting.compareTo("passcode_lock_setting") == 0) {
-                            if (settingsValues[j] == 0x01) {
-                                values[j] = paillier.encrypt(new BigInteger("0")).toString()
-                                        + " " + paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString();
-                            } else if (settingsValues[j] == 0x10) {
-                                values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("1")).toString()
-                                        + " " + paillier.encrypt(new BigInteger("0")).toString();
+                            if (settingsValues[j] == 1) {
+                                int weightInt = Integer.parseInt(weight);
+                                values[j] = paillier.encrypt(new BigInteger("" + 0 * weightInt))
+                                        + " " + paillier.encrypt(new BigInteger("" + 1 * weightInt));
+                            } else if (settingsValues[j] == 2) {
+                                int weightInt = Integer.parseInt(weight);
+                                values[j] = paillier.encrypt(new BigInteger("" + 1 * weightInt))
+                                        + " " + paillier.encrypt(new BigInteger("" + 0 * weightInt));
                             }
                         } else if (setting.compareTo("average") == 0) {
-                            values[j] = paillier.multiple(new BigInteger(weight), new BigInteger("" +settingsValues[j])).toString()
+                            int weightInt = Integer.parseInt(weight);
+                            values[j] = paillier.encrypt(new BigInteger("" + settingsValues[j] * weightInt)).toString()
                                     + " " + weight;
                         } else if (setting.compareTo("maximum_minimum_policy") == 0) {
                             values[j] = paillier.encrypt(new BigInteger("" + settingsValues[j])).toString();
@@ -226,11 +234,11 @@ public void onResponse(String response) {
                                     Toast toast = Toast.makeText(context, text, duration);
                                     toast.show();
 
-                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
-                                    SharedPreferences.Editor editor = preferences.edit();
-                                    // For test
+                                    // SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                                    // SharedPreferences.Editor editor = preferences.edit();
+                                    // // For test
                                     // editor.putStringSet("spa_request_poll_service", new TreeSet<String>());
-                                    editor.commit();
+                                    // editor.commit();
                                 }
                             },
                             new Response.ErrorListener() {
@@ -262,9 +270,19 @@ public void onErrorResponse(VolleyError error) {
                             return params;
                         }
                     };
+
                     RequestQueue queue = Volley.newRequestQueue(context);
                     queue.add(stringRequest);
+
+                }
                 }
+                final long endTime = System.currentTimeMillis();
+                Log.v("spa", "time: " + (endTime - startTime));
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                SharedPreferences.Editor editor = preferences.edit();
+                // For test
+                editor.putStringSet("spa_request_poll_service", new TreeSet<String>());
+                editor.commit();
             }
         });
 
