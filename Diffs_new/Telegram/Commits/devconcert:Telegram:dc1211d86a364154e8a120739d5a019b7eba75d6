diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index 4c022177e..9f8877852 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -15,6 +15,9 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+
+
     <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
     <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
 
diff --git a/TMessagesProj/config/release/AndroidManifest.xml b/TMessagesProj/config/release/AndroidManifest.xml
index 2006614f1..a85032a3b 100644
--- a/TMessagesProj/config/release/AndroidManifest.xml
+++ b/TMessagesProj/config/release/AndroidManifest.xml
@@ -15,6 +15,8 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+
     <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
     <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
 
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 92a353ec2..46ca55b19 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -110,6 +110,12 @@
             android:theme="@style/Theme.TMessages.PopupNotification">
         </activity>
 
+        <activity
+            android:name="org.telegramkr.passcodelock.core.PasscodeLockActivity"
+            android:theme="@style/TitleTextColor"
+            android:windowSoftInputMode="stateHidden" >
+        </activity>
+
         <receiver android:name="org.telegram.android.SmsListener">
             <intent-filter>
                 <action android:name="android.provider.Telephony.SMS_RECEIVED" />
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
index 0c35f754f..fa6008a66 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
@@ -802,7 +802,7 @@ public static String formatUserStatus(TLRPC.User user) {
                 if (user.status.expires == -1) {
                     return getString("Invisible", R.string.Invisible);
                 } else {
-                    return formatDateOnline(user.status.expires);
+                    return getString("Offline", R.string.Offline);//getString("Invisible", R.string.Invisible);//return formatDateOnline(user.status.expires);
                 }
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
index d4e3ee6c8..32d3dec77 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ApplicationLoader.java
@@ -42,6 +42,9 @@
 import org.telegram.android.ScreenReceiver;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegramkr.passcodelock.core.LockManager;
+import org.telegramkr.passcodelock.core.PasscodeLock;
+import org.telegramkr.passcodelock.core.PasscodeLockActivity;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -62,6 +65,9 @@
     public static volatile boolean isScreenOn = false;
     public static volatile boolean mainInterfacePaused = true;
 
+    public static boolean isPasscodeLock = false;
+    public static boolean isPasscodeLockOn = false;
+
     public static void postInitApplication() {
         if (applicationInited) {
             return;
@@ -85,7 +91,7 @@ public static void postInitApplication() {
         }
 
         try {
-            PowerManager pm = (PowerManager)ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
+            PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
             isScreenOn = pm.isScreenOn();
             FileLog.e("tmessages", "screen state = " + isScreenOn);
         } catch (Exception e) {
@@ -101,7 +107,7 @@ public static void postInitApplication() {
             SendMessagesHelper.getInstance().checkUnsentMessages();
         }
 
-        ApplicationLoader app = (ApplicationLoader)ApplicationLoader.applicationContext;
+        ApplicationLoader app = (ApplicationLoader) ApplicationLoader.applicationContext;
         app.initPlayServices();
         FileLog.e("tmessages", "app initied");
 
@@ -112,6 +118,7 @@ public static void postInitApplication() {
     @Override
     public void onCreate() {
         super.onCreate();
+
         applicationContext = getApplicationContext();
         NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
 
@@ -121,6 +128,9 @@ public void onCreate() {
         java.lang.System.setProperty("java.net.preferIPv6Addresses", "false");
 
         startPushService();
+
+        // For Passcode Lock
+        LockManager.getInstance().enableAppLock(this);
     }
 
     public static void startPushService() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index c28c39c19..e959da652 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -1287,7 +1287,7 @@ private void updateSubtitle() {
                 if (user != null) {
                     currentUser = user;
                 }
-                actionBarLayer.setSubtitle(LocaleController.formatUserStatus(currentUser));
+                //actionBarLayer.setSubtitle(LocaleController.formatUserStatus(currentUser));
             }
         } else {
             lastPrintString = printString;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index c02b79357..22b892c20 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -9,6 +9,7 @@
 package org.telegram.ui;
 
 import android.app.Activity;
+import android.app.Application;
 import android.content.ContentResolver;
 import android.content.Intent;
 import android.content.SharedPreferences;
@@ -46,6 +47,9 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Views.ActionBar.ActionBarLayout;
 import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegramkr.passcodelock.core.LockManager;
+import org.telegramkr.passcodelock.core.PasscodeLock;
+import org.telegramkr.passcodelock.core.PasscodeLockActivity;
 
 import java.io.BufferedReader;
 import java.io.InputStream;
@@ -79,6 +83,17 @@
     protected void onCreate(Bundle savedInstanceState) {
         ApplicationLoader.postInitApplication();
 
+//
+//        // For PasscodeLock
+//        if (LockManager.getInstance().getAppLock().isPasscodeSet()) {
+//            Intent intent = new Intent(this, PasscodeLockActivity.class);
+//            startActivity(intent);
+//            intent.putExtra(PasscodeLock.TYPE, PasscodeLock.UNLOCK_PASSWORD);
+//            startActivityForResult(intent, PasscodeLock.UNLOCK_PASSWORD);
+//            Toast.makeText(this, "Test00000",
+//                    Toast.LENGTH_SHORT).show();
+//        }
+
         if (!UserConfig.isClientActivated()) {
             Intent intent = getIntent();
             if (intent != null && intent.getAction() != null && (Intent.ACTION_SEND.equals(intent.getAction()) || intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE))) {
@@ -819,6 +834,12 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
                 fragment.onActivityResultFragment(requestCode, resultCode, data);
             }
         }
+
+        if(requestCode == PasscodeLock.UNLOCK_PASSWORD) {
+            if (resultCode == Activity.RESULT_OK) {
+                ApplicationLoader.isPasscodeLock = true;
+            }
+        }
     }
 
     @Override
@@ -831,6 +852,8 @@ protected void onPause() {
         }
         ApplicationLoader.mainInterfacePaused = true;
         ConnectionsManager.getInstance().setAppPaused(true, false);
+
+        ApplicationLoader.isPasscodeLock = false;
     }
 
     @Override
@@ -853,6 +876,19 @@ protected void onResume() {
         ApplicationLoader.mainInterfacePaused = false;
         ConnectionsManager.getInstance().setAppPaused(false, false);
         actionBarLayout.getActionBar().setBackOverlayVisible(currentConnectionState != 0);
+
+        // For PasscodeLock
+        if(ApplicationLoader.isPasscodeLockOn) {
+            ApplicationLoader.isPasscodeLockOn = false;
+        } else if(!ApplicationLoader.isPasscodeLock) {
+            ApplicationLoader.isPasscodeLockOn = false;
+            if (LockManager.getInstance().getAppLock().isPasscodeSet()) {
+                Intent intent = new Intent(this, PasscodeLockActivity.class);
+                startActivity(intent);
+                intent.putExtra(PasscodeLock.TYPE, PasscodeLock.UNLOCK_PASSWORD);
+                startActivityForResult(intent, PasscodeLock.UNLOCK_PASSWORD);
+            }
+        }
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index e30f7e63f..ff7f5c761 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -34,6 +34,8 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.telegramkr.messenger.R;
+
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.PhoneFormat.PhoneFormat;
@@ -50,7 +52,6 @@
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
-import org.telegramkr.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.UserConfig;
 import org.telegram.android.MessageObject;
@@ -100,6 +101,9 @@
     private int contactsSortRow;
     private int rowCount;
 
+    // For Passcode
+    private int passcodeLockRow;
+
     private static class LinkMovementMethodMy extends LinkMovementMethod {
         @Override
         public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
@@ -183,6 +187,7 @@ public void run() {
         languageRow = rowCount++;
         notificationRow = rowCount++;
         blockedRow = rowCount++;
+        passcodeLockRow = rowCount++;        // For PasscodeLock
         backgroundRow = rowCount++;
         terminateSessionsRow = rowCount++;
         mediaDownloadSection = rowCount++;
@@ -197,6 +202,7 @@ public void run() {
         //contactsSortRow = rowCount++;
         //contactsReimportRow = rowCount++;
         supportSectionRow = rowCount++;
+
         if (BuildVars.DEBUG_VERSION) {
             sendLogsRow = rowCount++;
             clearLogsRow = rowCount++;
@@ -491,6 +497,8 @@ public void onClick(DialogInterface dialog, int which, boolean isChecked) {
                                 });
                         builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
                         showAlertDialog(builder);
+                    }else if (i == passcodeLockRow) {
+                        presentFragment(new SettingsPasscodeLockActivity());
                     }
                 }
             });
@@ -721,7 +729,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == textSizeRow || i == enableAnimationsRow || i == blockedRow || i == notificationRow || i == backgroundRow ||
+            return i == passcodeLockRow || i == textSizeRow || i == enableAnimationsRow || i == blockedRow || i == notificationRow || i == backgroundRow ||
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == terminateSessionsRow || i == wifiDownloadRow ||
                     i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow;
@@ -900,6 +908,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 } else if (i == contactsReimportRow) {
                     textView.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts));
                     divider.setVisibility(View.INVISIBLE);
+                } else if (i == passcodeLockRow) {
+                    textView.setText(LocaleController.getString("PasscodeLock", R.string.PasscodeLock));
+                    divider.setVisibility(passcodeLockRow != 0 ? View.VISIBLE : View.INVISIBLE);
                 }
             } else if (type == 3) {
                 if (view == null) {
@@ -1079,7 +1090,7 @@ public int getItemViewType(int i) {
                 return 5;
             } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow) {
                 return 3;
-            } else if (i == numberRow || i == notificationRow || i == blockedRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == terminateSessionsRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow) {
+            } else if (i == numberRow || i == notificationRow || i == blockedRow || i == backgroundRow || i == passcodeLockRow || i == askQuestionRow || i == sendLogsRow || i == terminateSessionsRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow) {
                 return 2;
             } else if (i == logoutRow) {
                 return 4;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsPasscodeLockActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsPasscodeLockActivity.java
new file mode 100644
index 000000000..19c9177e6
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsPasscodeLockActivity.java
@@ -0,0 +1,270 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ * Copyright DEVCONCERT, 2014.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.Color;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.android.LocaleController;
+import org.telegram.android.NotificationCenter;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Views.ActionBar.ActionBarLayer;
+import org.telegram.ui.Views.ActionBar.BaseFragment;
+import org.telegramkr.messenger.R;
+import org.telegramkr.passcodelock.core.PasscodeLock;
+import org.telegramkr.passcodelock.core.PasscodeLockActivity;
+import org.telegramkr.passcodelock.core.LockManager;
+
+public class SettingsPasscodeLockActivity extends BaseFragment{
+    private ListView listView;
+    private TextView changePasswordTextView;
+
+    private int passcodeLockServiceRow;
+    private int passcodeLockChangePasswordRow;
+    private int rowCount = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        passcodeLockServiceRow = rowCount++;
+        passcodeLockChangePasswordRow = rowCount++;
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("PasscodeLock", R.string.PasscodeLock));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
+            final ListAdapter listAdapter = new ListAdapter(getParentActivity());
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == passcodeLockServiceRow) {
+                        // 화면 암호잠금 바로 켜기
+                        int type = LockManager.getInstance().getAppLock().isPasscodeSet() ? PasscodeLock.DISABLE_PASSLOCK
+                                : PasscodeLock.ENABLE_PASSLOCK;
+                        Intent intent = new Intent(getParentActivity(), PasscodeLockActivity.class);
+                        intent.putExtra(PasscodeLock.TYPE, type);
+                        startActivityForResult(intent, type);
+
+                    }else if(i == passcodeLockChangePasswordRow){
+                        if(LockManager.getInstance().getAppLock().isPasscodeSet()) {
+                            // 암호 변경 화면 출력
+                            Intent intent = new Intent(getParentActivity(), PasscodeLockActivity.class);
+                            intent.putExtra(PasscodeLock.TYPE, PasscodeLock.CHANGE_PASSWORD);
+                            intent.putExtra(PasscodeLock.MESSAGE,
+                                    LocaleController.getString("PasscodeLock_enter_old", R.string.PasscodeLock_enter_old));
+                            startActivityForResult(intent, PasscodeLock.CHANGE_PASSWORD);
+                        }
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public void updateUI() {
+        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("PasscodeLock", Activity.MODE_PRIVATE);
+        if (LockManager.getInstance().getAppLock().isPasscodeSet()) {
+            // OFF -> ON
+            if(changePasswordTextView != null){
+                changePasswordTextView.setTextColor(Color.BLACK);
+            }
+
+            final SharedPreferences.Editor editor = preferences.edit();
+            editor.putBoolean("PasscodeLock", true);
+            editor.commit();
+
+        } else {
+            if (getParentActivity() == null) {
+                return;
+            }
+            // OFF -> ON
+            if(changePasswordTextView != null){
+                changePasswordTextView.setTextColor(Color.GRAY);
+            }
+
+            // ON -> OFF
+            final SharedPreferences.Editor editor = preferences.edit();
+            editor.putBoolean("PasscodeLock", false);
+            editor.commit();
+        }
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        switch (requestCode) {
+            case PasscodeLock.DISABLE_PASSLOCK:
+                if (resultCode == Activity.RESULT_OK) {
+                    ApplicationLoader.isPasscodeLockOn = false;
+                    Toast.makeText(getParentActivity(), LocaleController.getString("PasscodeLock_disable", R.string.PasscodeLock_disable),
+                            Toast.LENGTH_SHORT).show();
+                }
+                break;
+            case PasscodeLock.ENABLE_PASSLOCK:
+            case PasscodeLock.CHANGE_PASSWORD:
+                if (resultCode == Activity.RESULT_OK) {
+                    ApplicationLoader.isPasscodeLockOn = true;
+                    Toast.makeText(getParentActivity(), LocaleController.getString("PasscodeLock_setup", R.string.PasscodeLock_setup),
+                            Toast.LENGTH_SHORT).show();
+                }
+                break;
+            default:
+                break;
+        }
+        updateUI();
+        listView.invalidateViews();
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_check_notify_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+
+                ImageView checkButton = (ImageView)view.findViewById(R.id.settings_row_check_button);
+                boolean enabled = false;
+
+                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("PasscodeLock", Activity.MODE_PRIVATE);
+
+                // 암호설정된 녀석을 가지고 확인
+                if (i == passcodeLockServiceRow) {
+                    if (LockManager.getInstance().getAppLock().isPasscodeSet()) {
+                        enabled = preferences.getBoolean("PasscodeLock", true);
+                    } else {
+                        enabled = preferences.getBoolean("PasscodeLock", false);
+                    }
+                    textView.setText(LocaleController.getString("PasscodeLock_manage", R.string.PasscodeLock_manage));
+                    divider.setVisibility(View.INVISIBLE);
+                }
+
+                if (enabled) {
+                    checkButton.setImageResource(R.drawable.btn_check_on);
+                } else {
+                    checkButton.setImageResource(R.drawable.btn_check_off);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+                }
+
+                changePasswordTextView = (TextView)view.findViewById(R.id.settings_row_text);
+                if (i == passcodeLockChangePasswordRow) {
+                    changePasswordTextView.setText(LocaleController.getString("PasscodeLock_change", R.string.PasscodeLock_change));
+                    if(LockManager.getInstance().getAppLock().isPasscodeSet()) {
+                        changePasswordTextView.setTextColor(Color.BLACK);
+                        ApplicationLoader.isPasscodeLockOn = true;
+                    } else {
+                        changePasswordTextView.setTextColor(Color.GRAY);
+                    }
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == passcodeLockServiceRow ) {
+                return 1;
+            } else if(i == passcodeLockChangePasswordRow){
+                return 2;
+            } else {
+                return 3;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/HomePage.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/HomePage.java
deleted file mode 100644
index 099bb41a4..000000000
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/HomePage.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package org.telegramkr.passcodelock;
-
-import me.dawson.applock.core.AppLock;
-import me.dawson.applock.core.AppLockActivity;
-import me.dawson.applock.core.BaseActivity;
-import me.dawson.applock.core.LockManager;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.Toast;
-
-public class HomePage extends BaseActivity implements OnClickListener {
-	public static final String TAG = "HomePage";
-
-	private Button btOnOff;
-	private Button btChange;
-
-	protected void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-		setContentView(R.layout.page_home);
-
-		btOnOff = (Button) findViewById(R.id.bt_on_off);
-		btOnOff.setOnClickListener(this);
-
-		btChange = (Button) findViewById(R.id.bt_change);
-		btChange.setText(R.string.change_passcode);
-		btChange.setOnClickListener(this);
-
-		updateUI();
-	}
-
-	@Override
-	public void onClick(View view) {
-		if (view.equals(btOnOff)) {
-			int type = LockManager.getInstance().getAppLock().isPasscodeSet() ? AppLock.DISABLE_PASSLOCK
-					: AppLock.ENABLE_PASSLOCK;
-			Intent intent = new Intent(this, AppLockActivity.class);
-			intent.putExtra(AppLock.TYPE, type);
-			startActivityForResult(intent, type);
-		} else if (view.equals(btChange)) {
-			Intent intent = new Intent(this, AppLockActivity.class);
-			intent.putExtra(AppLock.TYPE, AppLock.CHANGE_PASSWORD);
-			intent.putExtra(AppLock.MESSAGE,
-					getString(R.string.enter_old_passcode));
-			startActivityForResult(intent, AppLock.CHANGE_PASSWORD);
-		}
-	}
-
-	@Override
-	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-		super.onActivityResult(requestCode, resultCode, data);
-
-		switch (requestCode) {
-		case AppLock.DISABLE_PASSLOCK:
-			break;
-		case AppLock.ENABLE_PASSLOCK:
-		case AppLock.CHANGE_PASSWORD:
-			if (resultCode == RESULT_OK) {
-				Toast.makeText(this, getString(R.string.setup_passcode),
-						Toast.LENGTH_SHORT).show();
-			}
-			break;
-		default:
-			break;
-		}
-		updateUI();
-	}
-
-	private void updateUI() {
-		if (LockManager.getInstance().getAppLock().isPasscodeSet()) {
-			btOnOff.setText(R.string.disable_passcode);
-			btChange.setEnabled(true);
-		} else {
-			btOnOff.setText(R.string.enable_passcode);
-			btChange.setEnabled(false);
-		}
-	}
-
-}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/SettingsPasscodeLockActivity.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/SettingsPasscodeLockActivity.java
deleted file mode 100644
index f7639c988..000000000
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/SettingsPasscodeLockActivity.java
+++ /dev/null
@@ -1,751 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegramkr.passcodelock;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.provider.Settings;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ImageView;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationsController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.android.MessagesController;
-import org.telegram.ui.ApplicationLoader;
-import org.telegramkr.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.ColorPickerView;
-
-public class SettingsPasscodeLockActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
-    private ListView listView;
-    private boolean reseting = false;
-
-    private int notificationsServiceRow;
-    private int messageSectionRow;
-    private int messageAlertRow;
-    private int messagePreviewRow;
-    private int messageVibrateRow;
-    private int messageSoundRow;
-    private int messageLedRow;
-    private int messagePopupNotificationRow;
-    private int groupSectionRow;
-    private int groupAlertRow;
-    private int groupPreviewRow;
-    private int groupVibrateRow;
-    private int groupSoundRow;
-    private int groupLedRow;
-    private int groupPopupNotificationRow;
-    private int inappSectionRow;
-    private int inappSoundRow;
-    private int inappVibrateRow;
-    private int inappPreviewRow;
-    private int eventsSectionRow;
-    private int contactJoinedRow;
-    private int otherSectionRow;
-    private int badgeNumberRow;
-    private int pebbleAlertRow;
-    private int resetSectionRow;
-    private int resetNotificationsRow;
-    private int rowCount = 0;
-
-    @Override
-    public boolean onFragmentCreate() {
-        notificationsServiceRow = rowCount++;
-        messageSectionRow = rowCount++;
-        messageAlertRow = rowCount++;
-        messagePreviewRow = rowCount++;
-        messageVibrateRow = rowCount++;
-        messageLedRow = rowCount++;
-        messagePopupNotificationRow = rowCount++;
-        messageSoundRow = rowCount++;
-        groupSectionRow = rowCount++;
-        groupAlertRow = rowCount++;
-        groupPreviewRow = rowCount++;
-        groupVibrateRow = rowCount++;
-        groupLedRow = rowCount++;
-        groupPopupNotificationRow = rowCount++;
-        groupSoundRow = rowCount++;
-        inappSectionRow = rowCount++;
-        inappSoundRow = rowCount++;
-        inappVibrateRow = rowCount++;
-        inappPreviewRow = rowCount++;
-        eventsSectionRow = rowCount++;
-        contactJoinedRow = rowCount++;
-        otherSectionRow = rowCount++;
-        badgeNumberRow = rowCount++;
-        pebbleAlertRow = rowCount++;
-        resetSectionRow = rowCount++;
-        resetNotificationsRow = rowCount++;
-
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-
-        return super.onFragmentCreate();
-    }
-
-    @Override
-    public void onFragmentDestroy() {
-        super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-    }
-
-    @Override
-    public View createView(LayoutInflater inflater, ViewGroup container) {
-        if (fragmentView == null) {
-            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
-            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
-            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
-            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
-                @Override
-                public void onItemClick(int id) {
-                    if (id == -1) {
-                        finishFragment();
-                    }
-                }
-            });
-
-            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
-            final ListAdapter listAdapter = new ListAdapter(getParentActivity());
-            listView = (ListView)fragmentView.findViewById(R.id.listView);
-            listView.setAdapter(listAdapter);
-            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-                @Override
-                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
-                    if (i == messageAlertRow || i == groupAlertRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled;
-                        if (i == messageAlertRow) {
-                            enabled = preferences.getBoolean("EnableAll", true);
-                            editor.putBoolean("EnableAll", !enabled);
-                        } else if (i == groupAlertRow) {
-                            enabled = preferences.getBoolean("EnableGroup", true);
-                            editor.putBoolean("EnableGroup", !enabled);
-                        }
-                        editor.commit();
-                        listView.invalidateViews();
-                        updateServerNotificationsSettings(i == groupAlertRow);
-                    } else if (i == messagePreviewRow || i == groupPreviewRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled;
-                        if (i == messagePreviewRow) {
-                            enabled = preferences.getBoolean("EnablePreviewAll", true);
-                            editor.putBoolean("EnablePreviewAll", !enabled);
-                        } else if (i == groupPreviewRow) {
-                            enabled = preferences.getBoolean("EnablePreviewGroup", true);
-                            editor.putBoolean("EnablePreviewGroup", !enabled);
-                        }
-                        editor.commit();
-                        listView.invalidateViews();
-                        updateServerNotificationsSettings(i == groupPreviewRow);
-                    } else if (i == messageSoundRow || i == groupSoundRow) {
-                        try {
-                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
-                            Uri currentSound = null;
-
-                            String defaultPath = null;
-                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-                            if (defaultUri != null) {
-                                defaultPath = defaultUri.getPath();
-                            }
-
-                            if (i == messageSoundRow) {
-                                String path = preferences.getString("GlobalSoundPath", defaultPath);
-                                if (path != null && !path.equals("NoSound")) {
-                                    if (path.equals(defaultPath)) {
-                                        currentSound = defaultUri;
-                                    } else {
-                                        currentSound = Uri.parse(path);
-                                    }
-                                }
-                            } else if (i == groupSoundRow) {
-                                String path = preferences.getString("GroupSoundPath", defaultPath);
-                                if (path != null && !path.equals("NoSound")) {
-                                    if (path.equals(defaultPath)) {
-                                        currentSound = defaultUri;
-                                    } else {
-                                        currentSound = Uri.parse(path);
-                                    }
-                                }
-                            }
-                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
-                            startActivityForResult(tmpIntent, i);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (i == resetNotificationsRow) {
-                        if (reseting) {
-                            return;
-                        }
-                        reseting = true;
-                        TLRPC.TL_account_resetNotifySettings req = new TLRPC.TL_account_resetNotifySettings();
-                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                            @Override
-                            public void run(TLObject response, TLRPC.TL_error error) {
-                                AndroidUtilities.RunOnUIThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        MessagesController.getInstance().enableJoined = true;
-                                        reseting = false;
-                                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                        SharedPreferences.Editor editor = preferences.edit();
-                                        editor.clear();
-                                        editor.commit();
-                                        if (listView != null) {
-                                            listView.invalidateViews();
-                                        }
-                                        if (getParentActivity() != null) {
-                                            Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("ResetNotificationsText", R.string.ResetNotificationsText), Toast.LENGTH_SHORT);
-                                            toast.show();
-                                        }
-                                    }
-                                });
-                            }
-                        });
-                    } else if (i == inappSoundRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableInAppSounds", true);
-                        editor.putBoolean("EnableInAppSounds", !enabled);
-                        editor.commit();
-                        listView.invalidateViews();
-                    } else if (i == inappVibrateRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableInAppVibrate", true);
-                        editor.putBoolean("EnableInAppVibrate", !enabled);
-                        editor.commit();
-                        listView.invalidateViews();
-                    } else if (i == inappPreviewRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableInAppPreview", true);
-                        editor.putBoolean("EnableInAppPreview", !enabled);
-                        editor.commit();
-                        listView.invalidateViews();
-                    } else if (i == contactJoinedRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnableContactJoined", true);
-                        MessagesController.getInstance().enableJoined = !enabled;
-                        editor.putBoolean("EnableContactJoined", !enabled);
-                        editor.commit();
-                        listView.invalidateViews();
-                    } else if (i == pebbleAlertRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("EnablePebbleNotifications", false);
-                        editor.putBoolean("EnablePebbleNotifications", !enabled);
-                        editor.commit();
-                        listView.invalidateViews();
-                    } else if (i == badgeNumberRow) {
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = preferences.edit();
-                        boolean enabled = preferences.getBoolean("badgeNumber", true);
-                        editor.putBoolean("badgeNumber", !enabled);
-                        editor.commit();
-                        listView.invalidateViews();
-                        NotificationsController.getInstance().setBadgeEnabled(!enabled);
-                    } else if (i == notificationsServiceRow) {
-                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        boolean enabled = preferences.getBoolean("pushService", true);
-                        if (!enabled) {
-                            final SharedPreferences.Editor editor = preferences.edit();
-                            editor.putBoolean("pushService", !enabled);
-                            editor.commit();
-                            listView.invalidateViews();
-                            ApplicationLoader.startPushService();
-                        } else {
-                            if (getParentActivity() == null) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setMessage(LocaleController.getString("NotificationsServiceDisableInfo", R.string.NotificationsServiceDisableInfo));
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    ApplicationLoader.stopPushService();
-                                    final SharedPreferences.Editor editor = preferences.edit();
-                                    editor.putBoolean("pushService", false);
-                                    editor.commit();
-                                    listView.invalidateViews();
-                                }
-                            });
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                            showAlertDialog(builder);
-                        }
-                    } else if (i == messageLedRow || i == groupLedRow) {
-                        if (getParentActivity() == null) {
-                            return;
-                        }
-
-                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
-                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
-
-                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                        if (i == messageLedRow) {
-                            colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
-                        } else if (i == groupLedRow) {
-                            colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
-                        }
-
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
-                        builder.setView(view);
-                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (i == messageLedRow) {
-                                    editor.putInt("MessagesLed", colorPickerView.getColor());
-                                } else if (i == groupLedRow) {
-                                    editor.putInt("GroupLed", colorPickerView.getColor());
-                                }
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (i == messageLedRow) {
-                                    editor.putInt("MessagesLed", 0);
-                                } else if (i == groupLedRow) {
-                                    editor.putInt("GroupLed", 0);
-                                }
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        showAlertDialog(builder);
-                    } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("PopupNotification", R.string.PopupNotification));
-                        builder.setItems(new CharSequence[] {
-                                LocaleController.getString("NoPopup", R.string.NoPopup),
-                                LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn),
-                                LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff),
-                                LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup)
-                        }, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (i == messagePopupNotificationRow) {
-                                    editor.putInt("popupAll", which);
-                                } else if (i == groupPopupNotificationRow) {
-                                    editor.putInt("popupGroup", which);
-                                }
-                                editor.commit();
-                                if (listView != null) {
-                                    listView.invalidateViews();
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
-                    } else if (i == messageVibrateRow || i == groupVibrateRow) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
-                        builder.setItems(new CharSequence[] {
-                                LocaleController.getString("Disabled", R.string.Disabled),
-                                LocaleController.getString("Default", R.string.Default),
-                                LocaleController.getString("Short", R.string.Short),
-                                LocaleController.getString("Long", R.string.Long)
-                        }, new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = preferences.edit();
-                                String param = "vibrate_messages";
-                                if (i == groupVibrateRow) {
-                                    param = "vibrate_group";
-                                }
-                                if (which == 0) {
-                                    editor.putInt(param, 2);
-                                } else if (which == 1) {
-                                    editor.putInt(param, 0);
-                                } else if (which == 2) {
-                                    editor.putInt(param, 1);
-                                } else if (which == 3) {
-                                    editor.putInt(param, 3);
-                                }
-                                editor.commit();
-                                if (listView != null) {
-                                    listView.invalidateViews();
-                                }
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showAlertDialog(builder);
-                    }
-                }
-            });
-        } else {
-            ViewGroup parent = (ViewGroup)fragmentView.getParent();
-            if (parent != null) {
-                parent.removeView(fragmentView);
-            }
-        }
-        return fragmentView;
-    }
-
-    public void updateServerNotificationsSettings(boolean group) {
-        //disable global settings sync
-        /*SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
-        req.settings = new TLRPC.TL_inputPeerNotifySettings();
-        req.settings.sound = "default";
-        req.settings.events_mask = 0;
-        if (!group) {
-            req.peer = new TLRPC.TL_inputNotifyUsers();
-            req.settings.mute_until = preferences.getBoolean("EnableAll", true) ? 0 : Integer.MAX_VALUE;
-            req.settings.show_previews = preferences.getBoolean("EnablePreviewAll", true);
-        } else {
-            req.peer = new TLRPC.TL_inputNotifyChats();
-            req.settings.mute_until = preferences.getBoolean("EnableGroup", true) ? 0 : Integer.MAX_VALUE;
-            req.settings.show_previews = preferences.getBoolean("EnablePreviewGroup", true);
-        }
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
-
-            }
-        });*/
-    }
-
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-            String name = null;
-            if (ringtone != null) {
-                Ringtone rng = RingtoneManager.getRingtone(getParentActivity(), ringtone);
-                if (rng != null) {
-                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
-                        name = LocaleController.getString("Default", R.string.Default);
-                    } else {
-                        name = rng.getTitle(getParentActivity());
-                    }
-                    rng.stop();
-                }
-            }
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            SharedPreferences.Editor editor = preferences.edit();
-
-            if (requestCode == messageSoundRow) {
-                if (name != null && ringtone != null) {
-                    editor.putString("GlobalSound", name);
-                    editor.putString("GlobalSoundPath", ringtone.toString());
-                } else {
-                    editor.putString("GlobalSound", "NoSound");
-                    editor.putString("GlobalSoundPath", "NoSound");
-                }
-            } else if (requestCode == groupSoundRow) {
-                if (name != null && ringtone != null) {
-                    editor.putString("GroupSound", name);
-                    editor.putString("GroupSoundPath", ringtone.toString());
-                } else {
-                    editor.putString("GroupSound", "NoSound");
-                    editor.putString("GroupSoundPath", "NoSound");
-                }
-            }
-            editor.commit();
-            listView.invalidateViews();
-        }
-    }
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.notificationsSettingsUpdated) {
-            listView.invalidateViews();
-        }
-    }
-
-    private class ListAdapter extends BaseFragmentAdapter {
-        private Context mContext;
-
-        public ListAdapter(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
-        }
-
-        @Override
-        public boolean isEnabled(int i) {
-            return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow);
-        }
-
-        @Override
-        public int getCount() {
-            return rowCount;
-        }
-
-        @Override
-        public Object getItem(int i) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @Override
-        public boolean hasStableIds() {
-            return false;
-        }
-
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            int type = getItemViewType(i);
-            if (type == 0) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_section_text);
-                if (i == messageSectionRow) {
-                    textView.setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
-                } else if (i == groupSectionRow) {
-                    textView.setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
-                } else if (i == inappSectionRow) {
-                    textView.setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
-                } else if (i == eventsSectionRow) {
-                    textView.setText(LocaleController.getString("Events", R.string.Events));
-                } else if (i == otherSectionRow) {
-                    textView.setText(LocaleController.getString("PhoneOther", R.string.PhoneOther));
-                } else if (i == resetSectionRow) {
-                    textView.setText(LocaleController.getString("Reset", R.string.Reset));
-                }
-            } if (type == 1) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_check_notify_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View divider = view.findViewById(R.id.settings_row_divider);
-
-                ImageView checkButton = (ImageView)view.findViewById(R.id.settings_row_check_button);
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                boolean enabled = false;
-                boolean enabledAll = preferences.getBoolean("EnableAll", true);
-                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
-
-                if (i == messageAlertRow || i == groupAlertRow) {
-                    if (i == messageAlertRow) {
-                        enabled = enabledAll;
-                    } else if (i == groupAlertRow) {
-                        enabled = enabledGroup;
-                    }
-                    textView.setText(LocaleController.getString("Alert", R.string.Alert));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == messagePreviewRow || i == groupPreviewRow) {
-                    if (i == messagePreviewRow) {
-                        enabled = preferences.getBoolean("EnablePreviewAll", true);
-                    } else if (i == groupPreviewRow) {
-                        enabled = preferences.getBoolean("EnablePreviewGroup", true);
-                    }
-                    textView.setText(LocaleController.getString("MessagePreview", R.string.MessagePreview));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == inappSoundRow) {
-                    enabled = preferences.getBoolean("EnableInAppSounds", true);
-                    textView.setText(LocaleController.getString("InAppSounds", R.string.InAppSounds));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == inappVibrateRow) {
-                    enabled = preferences.getBoolean("EnableInAppVibrate", true);
-                    textView.setText(LocaleController.getString("InAppVibrate", R.string.InAppVibrate));
-                    divider.setVisibility(View.VISIBLE);
-                } else if (i == inappPreviewRow) {
-                    enabled = preferences.getBoolean("EnableInAppPreview", true);
-                    textView.setText(LocaleController.getString("InAppPreview", R.string.InAppPreview));
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == contactJoinedRow) {
-                    enabled = preferences.getBoolean("EnableContactJoined", true);
-                    textView.setText(LocaleController.getString("ContactJoined", R.string.ContactJoined));
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == pebbleAlertRow) {
-                    enabled = preferences.getBoolean("EnablePebbleNotifications", false);
-                    textView.setText(LocaleController.getString("Pebble", R.string.Pebble));
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == notificationsServiceRow) {
-                    enabled = preferences.getBoolean("pushService", true);
-                    textView.setText(LocaleController.getString("NotificationsService", R.string.NotificationsService));
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == badgeNumberRow) {
-                    enabled = preferences.getBoolean("badgeNumber", true);
-                    textView.setText(LocaleController.getString("BadgeNumber", R.string.BadgeNumber));
-                    divider.setVisibility(View.VISIBLE);
-                }
-                if (enabled) {
-                    checkButton.setImageResource(R.drawable.btn_check_on);
-                } else {
-                    checkButton.setImageResource(R.drawable.btn_check_off);
-                }
-            } else if (type == 2) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView textViewDetail = (TextView)view.findViewById(R.id.settings_row_text_detail);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                boolean enabledAll = preferences.getBoolean("EnableAll", true);
-                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
-
-                if (i == messageSoundRow || i == groupSoundRow) {
-                    String name = null;
-                    if (i == messageSoundRow) {
-                        name = preferences.getString("GlobalSound", LocaleController.getString("Default", R.string.Default));
-                    } else if (i == groupSoundRow) {
-                        name = preferences.getString("GroupSound", LocaleController.getString("Default", R.string.Default));
-                    }
-                    if (name.equals("NoSound")) {
-                        textViewDetail.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                    } else {
-                        textViewDetail.setText(name);
-                    }
-                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == resetNotificationsRow) {
-                    textView.setText(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications));
-                    textViewDetail.setText(LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom));
-                    divider.setVisibility(View.INVISIBLE);
-                } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
-                    textView.setText(LocaleController.getString("PopupNotification", R.string.PopupNotification));
-                    int option = 0;
-                    if (i == messagePopupNotificationRow) {
-                        option = preferences.getInt("popupAll", 0);
-                    } else if (i == groupPopupNotificationRow) {
-                        option = preferences.getInt("popupGroup", 0);
-                    }
-                    if (option == 0) {
-                        textViewDetail.setText(LocaleController.getString("NoPopup", R.string.NoPopup));
-                    } else if (option == 1) {
-                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn));
-                    } else if (option == 2) {
-                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff));
-                    } else if (option == 3) {
-                        textViewDetail.setText(LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup));
-                    }
-                    divider.setVisibility(View.VISIBLE);
-                }
-            } else if (type == 3) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                View colorView = view.findViewById(R.id.settings_color);
-                View divider = view.findViewById(R.id.settings_row_divider);
-                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                if (i == messageLedRow) {
-                    colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
-                } else if (i == groupLedRow) {
-                    colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
-                }
-                divider.setVisibility(View.VISIBLE);
-            } else if (type == 4) {
-                if (view == null) {
-                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
-                }
-                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
-                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
-
-                View divider = view.findViewById(R.id.settings_row_divider);
-                SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                int value = 0;
-                textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
-                divider.setVisibility(View.VISIBLE);
-                if (i == messageVibrateRow) {
-                    value = preferences.getInt("vibrate_messages", 0);
-                } else if (i == groupVibrateRow) {
-                    value = preferences.getInt("vibrate_group", 0);
-                }
-                if (value == 0) {
-                    detailTextView.setText(LocaleController.getString("Default", R.string.Default));
-                } else if (value == 1) {
-                    detailTextView.setText(LocaleController.getString("Short", R.string.Short));
-                } else if (value == 2) {
-                    detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
-                } else if (value == 3) {
-                    detailTextView.setText(LocaleController.getString("Long", R.string.Long));
-                }
-            }
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            if (i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow) {
-                return 0;
-            } else if (i == messageAlertRow || i == messagePreviewRow ||
-                    i == groupAlertRow || i == groupPreviewRow ||
-                    i == inappSoundRow || i == inappVibrateRow || i == inappPreviewRow ||
-                    i == contactJoinedRow ||
-                    i == pebbleAlertRow || i == notificationsServiceRow || i == badgeNumberRow) {
-                return 1;
-            } else if (i == messageLedRow || i == groupLedRow) {
-                return 3;
-            } else if (i == groupVibrateRow || i == messageVibrateRow) {
-                return 4;
-            } else {
-                return 2;
-            }
-        }
-
-        @Override
-        public int getViewTypeCount() {
-            return 5;
-        }
-
-        @Override
-        public boolean isEmpty() {
-            return false;
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLock.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLock.java
deleted file mode 100644
index 2c6b8d137..000000000
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLock.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package org.telegramkr.passcodelock.core;
-
-import java.util.HashSet;
-
-public abstract class AppLock {
-	public static final int ENABLE_PASSLOCK = 0;
-	public static final int DISABLE_PASSLOCK = 1;
-	public static final int CHANGE_PASSWORD = 2;
-	public static final int UNLOCK_PASSWORD = 3;
-
-	public static final String MESSAGE = "message";
-	public static final String TYPE = "type";
-
-	public static final int DEFAULT_TIMEOUT = 0; // 2000ms
-
-	protected int lockTimeOut;
-	protected HashSet<String> ignoredActivities;
-
-	public void setTimeout(int timeout) {
-		this.lockTimeOut = timeout;
-	}
-
-	public AppLock() {
-		ignoredActivities = new HashSet<String>();
-		lockTimeOut = DEFAULT_TIMEOUT;
-	}
-
-	public void addIgnoredActivity(Class<?> clazz) {
-		String clazzName = clazz.getName();
-		this.ignoredActivities.add(clazzName);
-	}
-
-	public void removeIgnoredActivity(Class<?> clazz) {
-		String clazzName = clazz.getName();
-		this.ignoredActivities.remove(clazzName);
-	}
-
-	public abstract void enable();
-
-	public abstract void disable();
-
-	public abstract boolean setPasscode(String passcode);
-
-	public abstract boolean checkPasscode(String passcode);
-
-	public abstract boolean isPasscodeSet();
-}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockActivity.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockActivity.java
deleted file mode 100644
index bb65a71de..000000000
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockActivity.java
+++ /dev/null
@@ -1,355 +0,0 @@
-package org.telegramkr.passcodelock.core;
-
-import me.dawson.applock.R;
-import android.content.Intent;
-import android.os.Bundle;
-import android.text.InputFilter;
-import android.text.InputType;
-import android.text.Spanned;
-import android.text.method.PasswordTransformationMethod;
-import android.view.Gravity;
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnTouchListener;
-import android.view.animation.Animation;
-import android.view.animation.AnimationUtils;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import android.widget.Toast;
-
-public class AppLockActivity extends BaseActivity {
-	public static final String TAG = "AppLockActivity";
-
-	private int type = -1;
-	private String oldPasscode = null;
-
-	protected EditText codeField1 = null;
-	protected EditText codeField2 = null;
-	protected EditText codeField3 = null;
-	protected EditText codeField4 = null;
-	protected InputFilter[] filters = null;
-	protected TextView tvMessage = null;
-
-	@Override
-	protected void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-
-		setContentView(R.layout.page_passcode);
-
-		tvMessage = (TextView) findViewById(R.id.tv_message);
-
-		Bundle extras = getIntent().getExtras();
-		if (extras != null) {
-			String message = extras.getString(AppLock.MESSAGE);
-			if (message != null) {
-				tvMessage.setText(message);
-			}
-
-			type = extras.getInt(AppLock.TYPE, -1);
-		}
-
-		filters = new InputFilter[2];
-		filters[0] = new InputFilter.LengthFilter(1);
-		filters[1] = numberFilter;
-
-		codeField1 = (EditText) findViewById(R.id.passcode_1);
-		setupEditText(codeField1);
-
-		codeField2 = (EditText) findViewById(R.id.passcode_2);
-		setupEditText(codeField2);
-
-		codeField3 = (EditText) findViewById(R.id.passcode_3);
-		setupEditText(codeField3);
-
-		codeField4 = (EditText) findViewById(R.id.passcode_4);
-		setupEditText(codeField4);
-
-		// setup the keyboard
-		((Button) findViewById(R.id.button0)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button1)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button2)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button3)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button4)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button5)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button6)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button7)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button8)).setOnClickListener(btnListener);
-		((Button) findViewById(R.id.button9)).setOnClickListener(btnListener);
-
-		((Button) findViewById(R.id.button_clear))
-				.setOnClickListener(new OnClickListener() {
-					@Override
-					public void onClick(View view) {
-						clearFields();
-					}
-				});
-
-		((Button) findViewById(R.id.button_erase))
-				.setOnClickListener(new OnClickListener() {
-					@Override
-					public void onClick(View view) {
-						onDeleteKey();
-					}
-				});
-
-		overridePendingTransition(R.anim.slide_up, R.anim.nothing);
-
-		switch (type) {
-
-		case AppLock.DISABLE_PASSLOCK:
-			this.setTitle("Disable Passcode");
-			break;
-		case AppLock.ENABLE_PASSLOCK:
-			this.setTitle("Enable Passcode");
-			break;
-		case AppLock.CHANGE_PASSWORD:
-			this.setTitle("Change Passcode");
-			break;
-		case AppLock.UNLOCK_PASSWORD:
-			this.setTitle("Unlock Passcode");
-			break;
-		}
-	}
-
-	public int getType() {
-		return type;
-	}
-
-	protected void onPasscodeInputed() {
-		String passLock = codeField1.getText().toString()
-				+ codeField2.getText().toString()
-				+ codeField3.getText().toString() + codeField4.getText();
-
-		codeField1.setText("");
-		codeField2.setText("");
-		codeField3.setText("");
-		codeField4.setText("");
-		codeField1.requestFocus();
-
-		switch (type) {
-
-		case AppLock.DISABLE_PASSLOCK:
-			if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
-				setResult(RESULT_OK);
-				LockManager.getInstance().getAppLock().setPasscode(null);
-				finish();
-			} else {
-				onPasscodeError();
-			}
-			break;
-
-		case AppLock.ENABLE_PASSLOCK:
-			if (oldPasscode == null) {
-				tvMessage.setText(R.string.reenter_passcode);
-				oldPasscode = passLock;
-			} else {
-				if (passLock.equals(oldPasscode)) {
-					setResult(RESULT_OK);
-					LockManager.getInstance().getAppLock()
-							.setPasscode(passLock);
-					finish();
-				} else {
-					oldPasscode = null;
-					tvMessage.setText(R.string.enter_passcode);
-					onPasscodeError();
-				}
-			}
-			break;
-
-		case AppLock.CHANGE_PASSWORD:
-			if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
-				tvMessage.setText(R.string.enter_passcode);
-				type = AppLock.ENABLE_PASSLOCK;
-			} else {
-				onPasscodeError();
-			}
-			break;
-
-		case AppLock.UNLOCK_PASSWORD:
-			if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
-				setResult(RESULT_OK);
-				finish();
-			} else {
-				onPasscodeError();
-			}
-			break;
-
-		default:
-			break;
-		}
-	}
-
-	@Override
-	public void onBackPressed() {
-		if (type == AppLock.UNLOCK_PASSWORD) {
-			// back to home screen
-			Intent intent = new Intent();
-			intent.setAction(Intent.ACTION_MAIN);
-			intent.addCategory(Intent.CATEGORY_HOME);
-			this.startActivity(intent);
-			finish();
-		} else {
-			finish();
-		}
-	}
-
-	protected void setupEditText(EditText editText) {
-		editText.setInputType(InputType.TYPE_NULL);
-		editText.setFilters(filters);
-		editText.setOnTouchListener(touchListener);
-		editText.setTransformationMethod(PasswordTransformationMethod
-				.getInstance());
-	}
-
-	public boolean onKeyDown(int keyCode, KeyEvent event) {
-		if (keyCode == KeyEvent.KEYCODE_DEL) {
-			onDeleteKey();
-			return true;
-		}
-		return super.onKeyDown(keyCode, event);
-	}
-
-	private void onDeleteKey() {
-		if (codeField1.isFocused()) {
-
-		} else if (codeField2.isFocused()) {
-			codeField1.requestFocus();
-			codeField1.setText("");
-		} else if (codeField3.isFocused()) {
-			codeField2.requestFocus();
-			codeField2.setText("");
-		} else if (codeField4.isFocused()) {
-			codeField3.requestFocus();
-			codeField3.setText("");
-		}
-	}
-
-	private OnClickListener btnListener = new OnClickListener() {
-		@Override
-		public void onClick(View view) {
-			int currentValue = -1;
-			int id = view.getId();
-			if (id == R.id.button0) {
-				currentValue = 0;
-			} else if (id == R.id.button1) {
-				currentValue = 1;
-			} else if (id == R.id.button2) {
-				currentValue = 2;
-			} else if (id == R.id.button3) {
-				currentValue = 3;
-			} else if (id == R.id.button4) {
-				currentValue = 4;
-			} else if (id == R.id.button5) {
-				currentValue = 5;
-			} else if (id == R.id.button6) {
-				currentValue = 6;
-			} else if (id == R.id.button7) {
-				currentValue = 7;
-			} else if (id == R.id.button8) {
-				currentValue = 8;
-			} else if (id == R.id.button9) {
-				currentValue = 9;
-			} else {
-			}
-
-			// set the value and move the focus
-			String currentValueString = String.valueOf(currentValue);
-			if (codeField1.isFocused()) {
-				codeField1.setText(currentValueString);
-				codeField2.requestFocus();
-				codeField2.setText("");
-			} else if (codeField2.isFocused()) {
-				codeField2.setText(currentValueString);
-				codeField3.requestFocus();
-				codeField3.setText("");
-			} else if (codeField3.isFocused()) {
-				codeField3.setText(currentValueString);
-				codeField4.requestFocus();
-				codeField4.setText("");
-			} else if (codeField4.isFocused()) {
-				codeField4.setText(currentValueString);
-			}
-
-			if (codeField4.getText().toString().length() > 0
-					&& codeField3.getText().toString().length() > 0
-					&& codeField2.getText().toString().length() > 0
-					&& codeField1.getText().toString().length() > 0) {
-				onPasscodeInputed();
-			}
-		}
-	};
-
-	protected void onPasscodeError() {
-		Toast toast = Toast.makeText(this, getString(R.string.passcode_wrong),
-				Toast.LENGTH_SHORT);
-		toast.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 30);
-		toast.show();
-
-		Thread thread = new Thread() {
-			public void run() {
-				Animation animation = AnimationUtils.loadAnimation(
-						AppLockActivity.this, R.anim.shake);
-				findViewById(R.id.ll_applock).startAnimation(animation);
-				codeField1.setText("");
-				codeField2.setText("");
-				codeField3.setText("");
-				codeField4.setText("");
-				codeField1.requestFocus();
-			}
-		};
-		runOnUiThread(thread);
-	}
-
-	private InputFilter numberFilter = new InputFilter() {
-		@Override
-		public CharSequence filter(CharSequence source, int start, int end,
-				Spanned dest, int dstart, int dend) {
-
-			if (source.length() > 1) {
-				return "";
-			}
-
-			if (source.length() == 0) // erase
-			{
-				return null;
-			}
-
-			try {
-				int number = Integer.parseInt(source.toString());
-				if ((number >= 0) && (number <= 9))
-					return String.valueOf(number);
-				else
-					return "";
-			} catch (NumberFormatException e) {
-				return "";
-			}
-		}
-	};
-
-	private OnTouchListener touchListener = new OnTouchListener() {
-		@Override
-		public boolean onTouch(View v, MotionEvent event) {
-			v.performClick();
-			clearFields();
-			return false;
-		}
-	};
-
-	private void clearFields() {
-		codeField1.setText("");
-		codeField2.setText("");
-		codeField3.setText("");
-		codeField4.setText("");
-
-		codeField1.postDelayed(new Runnable() {
-
-			@Override
-			public void run() {
-				codeField1.requestFocus();
-			}
-		}, 200);
-	}
-}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockImpl.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockImpl.java
deleted file mode 100644
index 2405ccd81..000000000
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/AppLockImpl.java
+++ /dev/null
@@ -1,215 +0,0 @@
-package org.telegramkr.passcodelock.core;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-import android.util.Log;
-
-public class AppLockImpl extends AppLock implements PageListener {
-	public static final String TAG = "DefaultAppLock";
-
-	private static final String PASSWORD_PREFERENCE_KEY = "passcode";
-	private static final String PASSWORD_SALT = "7xn7@c$";
-
-	private SharedPreferences settings;
-
-	private int liveCount;
-	private int visibleCount;
-
-	private long lastActive;
-
-	public AppLockImpl(Application app) {
-		super();
-		SharedPreferences settings = PreferenceManager
-				.getDefaultSharedPreferences(app);
-		this.settings = settings;
-		this.liveCount = 0;
-		this.visibleCount = 0;
-	}
-
-	public void enable() {
-		BaseActivity.setListener(this);
-	}
-
-	public void disable() {
-		BaseActivity.setListener(null);
-	}
-
-	public boolean checkPasscode(String passcode) {
-		passcode = PASSWORD_SALT + passcode + PASSWORD_SALT;
-		passcode = Encryptor.getSHA1(passcode);
-		String storedPasscode = "";
-
-		if (settings.contains(PASSWORD_PREFERENCE_KEY)) {
-			storedPasscode = settings.getString(PASSWORD_PREFERENCE_KEY, "");
-		}
-
-		if (passcode.equalsIgnoreCase(storedPasscode)) {
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setPasscode(String passcode) {
-		SharedPreferences.Editor editor = settings.edit();
-
-		if (passcode == null) {
-			editor.remove(PASSWORD_PREFERENCE_KEY);
-			editor.commit();
-			this.disable();
-		} else {
-			passcode = PASSWORD_SALT + passcode + PASSWORD_SALT;
-			passcode = Encryptor.getSHA1(passcode);
-			editor.putString(PASSWORD_PREFERENCE_KEY, passcode);
-			editor.commit();
-			this.enable();
-		}
-
-		return true;
-	}
-
-	// Check if we need to show the lock screen at startup
-	public boolean isPasscodeSet() {
-		if (settings.contains(PASSWORD_PREFERENCE_KEY)) {
-			return true;
-		}
-
-		return false;
-	}
-
-	private boolean isIgnoredActivity(Activity activity) {
-		String clazzName = activity.getClass().getName();
-
-		// ignored activities
-		if (ignoredActivities.contains(clazzName)) {
-			Log.d(TAG, "ignore activity " + clazzName);
-			return true;
-		}
-
-		return false;
-	}
-
-	private boolean shouldLockSceen(Activity activity) {
-
-		// already unlock
-		if (activity instanceof AppLockActivity) {
-			AppLockActivity ala = (AppLockActivity) activity;
-			if (ala.getType() == AppLock.UNLOCK_PASSWORD) {
-				Log.d(TAG, "already unlock activity");
-				return false;
-			}
-		}
-
-		// no pass code set
-		if (!isPasscodeSet()) {
-			Log.d(TAG, "lock passcode not set.");
-			return false;
-		}
-
-		// no enough timeout
-		long passedTime = System.currentTimeMillis() - lastActive;
-		if (lastActive > 0 && passedTime <= lockTimeOut) {
-			Log.d(TAG, "no enough timeout " + passedTime + " for "
-					+ lockTimeOut);
-			return false;
-		}
-
-		// start more than one page
-		if (visibleCount > 1) {
-			return false;
-		}
-
-		return true;
-	}
-
-	@Override
-	public void onActivityPaused(Activity activity) {
-		String clazzName = activity.getClass().getName();
-		Log.d(TAG, "onActivityPaused " + clazzName);
-
-		if (isIgnoredActivity(activity)) {
-			return;
-		}
-	}
-
-	@Override
-	public void onActivityResumed(Activity activity) {
-		String clazzName = activity.getClass().getName();
-		Log.d(TAG, "onActivityResumed " + clazzName);
-
-		if (isIgnoredActivity(activity)) {
-			return;
-		}
-
-		if (shouldLockSceen(activity)) {
-			Intent intent = new Intent(activity.getApplicationContext(),
-					AppLockActivity.class);
-			intent.putExtra(AppLock.TYPE, AppLock.UNLOCK_PASSWORD);
-			intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-			activity.getApplication().startActivity(intent);
-		}
-
-		lastActive = 0;
-	}
-
-	@Override
-	public void onActivityCreated(Activity activity) {
-
-		if (isIgnoredActivity(activity)) {
-			return;
-		}
-
-		liveCount++;
-	}
-
-	@Override
-	public void onActivityDestroyed(Activity activity) {
-		if (isIgnoredActivity(activity)) {
-			return;
-		}
-
-		liveCount--;
-		if (liveCount == 0) {
-			lastActive = System.currentTimeMillis();
-			Log.d(TAG, "set last active " + lastActive);
-		}
-	}
-
-	@Override
-	public void onActivitySaveInstanceState(Activity activity) {
-		if (isIgnoredActivity(activity)) {
-			return;
-		}
-	}
-
-	@Override
-	public void onActivityStarted(Activity activity) {
-		String clazzName = activity.getClass().getName();
-		Log.d(TAG, "onActivityStarted " + clazzName);
-
-		if (isIgnoredActivity(activity)) {
-			return;
-		}
-
-		visibleCount++;
-	}
-
-	@Override
-	public void onActivityStopped(Activity activity) {
-		String clazzName = activity.getClass().getName();
-		Log.d(TAG, "onActivityStopped " + clazzName);
-
-		if (isIgnoredActivity(activity)) {
-			return;
-		}
-
-		visibleCount--;
-		if (visibleCount == 0) {
-			lastActive = System.currentTimeMillis();
-			Log.d(TAG, "set last active " + lastActive);
-		}
-	}
-}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/BaseActivity.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/BaseActivity.java
index f4d5aa253..a0b454419 100644
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/BaseActivity.java
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/BaseActivity.java
@@ -3,74 +3,74 @@
 import android.app.Activity;
 import android.os.Bundle;
 
-public class BaseActivity extends Activity {
-
-	private static PageListener pageListener;
-
-	public static void setListener(PageListener listener) {
-		pageListener = listener;
-	}
-
-	@Override
-	protected void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-
-		if (pageListener != null) {
-			pageListener.onActivityCreated(this);
-		}
-	}
-
-	@Override
-	protected void onStart() {
-		super.onStart();
-
-		if (pageListener != null) {
-			pageListener.onActivityStarted(this);
-		}
-	}
-
-	@Override
-	protected void onResume() {
-		super.onResume();
-
-		if (pageListener != null) {
-			pageListener.onActivityResumed(this);
-		}
-	}
-
-	@Override
-	protected void onPause() {
-		super.onPause();
-
-		if (pageListener != null) {
-			pageListener.onActivityPaused(this);
-		}
-	}
-
-	@Override
-	protected void onStop() {
-		super.onStop();
-
-		if (pageListener != null) {
-			pageListener.onActivityStopped(this);
-		}
-	}
-
-	@Override
-	protected void onDestroy() {
-		super.onDestroy();
-
-		if (pageListener != null) {
-			pageListener.onActivityDestroyed(this);
-		}
-	}
-
-	@Override
-	protected void onSaveInstanceState(Bundle outState) {
-		super.onSaveInstanceState(outState);
-
-		if (pageListener != null) {
-			pageListener.onActivitySaveInstanceState(this);
-		}
-	}
+public class BaseActivity extends Activity{
+
+    private static PageListener pageListener;
+
+    public static void setListener(PageListener listener) {
+        pageListener = listener;
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (pageListener != null) {
+            pageListener.onActivityCreated(this);
+        }
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+
+        if (pageListener != null) {
+            pageListener.onActivityStarted(this);
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        if (pageListener != null) {
+            pageListener.onActivityResumed(this);
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        if (pageListener != null) {
+            pageListener.onActivityPaused(this);
+        }
+    }
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+
+        if (pageListener != null) {
+            pageListener.onActivityStopped(this);
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+
+        if (pageListener != null) {
+            pageListener.onActivityDestroyed(this);
+        }
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        if (pageListener != null) {
+            pageListener.onActivitySaveInstanceState(this);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/Encryptor.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/Encryptor.java
index f0e8b0d5a..5f473b797 100644
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/Encryptor.java
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/Encryptor.java
@@ -7,34 +7,34 @@
 
 public class Encryptor {
 
-	private static String bytes2Hex(byte[] bytes) {
-		String hs = "";
-		String stmp = "";
-		for (int n = 0; n < bytes.length; n++) {
-			stmp = (Integer.toHexString(bytes[n] & 0XFF));
-			if (stmp.length() == 1) {
-				hs += "0" + stmp;
-			} else {
-				hs += stmp;
-			}
-		}
-		return hs.toLowerCase(Locale.ENGLISH);
-	}
+    private static String bytes2Hex(byte[] bytes) {
+        String hs = "";
+        String stmp = "";
+        for (int n = 0; n < bytes.length; n++) {
+            stmp = (Integer.toHexString(bytes[n] & 0XFF));
+            if (stmp.length() == 1) {
+                hs += "0" + stmp;
+            } else {
+                hs += stmp;
+            }
+        }
+        return hs.toLowerCase(Locale.ENGLISH);
+    }
 
-	public static String getSHA1(String text) {
-		String sha1 = null;
-		if (TextUtils.isEmpty(text)) {
-			return sha1;
-		}
-		MessageDigest sha1Digest = null;
-		try {
-			sha1Digest = MessageDigest.getInstance("SHA-1");
-		} catch (Exception e) {
-			return sha1;
-		}
-		byte[] textBytes = text.getBytes();
-		sha1Digest.update(textBytes, 0, text.length());
-		byte[] sha1hash = sha1Digest.digest();
-		return bytes2Hex(sha1hash);
-	}
+    public static String getSHA1(String text) {
+        String sha1 = null;
+        if (TextUtils.isEmpty(text)) {
+            return sha1;
+        }
+        MessageDigest sha1Digest = null;
+        try {
+            sha1Digest = MessageDigest.getInstance("SHA-1");
+        } catch (Exception e) {
+            return sha1;
+        }
+        byte[] textBytes = text.getBytes();
+        sha1Digest.update(textBytes, 0, text.length());
+        byte[] sha1hash = sha1Digest.digest();
+        return bytes2Hex(sha1hash);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/LockManager.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/LockManager.java
index 1ab6953e2..fb918d8ac 100644
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/LockManager.java
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/LockManager.java
@@ -4,41 +4,41 @@
 
 public class LockManager {
 
-	private volatile static LockManager instance;
-	private AppLock curAppLocker;
-
-	public static LockManager getInstance() {
-		synchronized (LockManager.class) {
-			if (instance == null) {
-				instance = new LockManager();
-			}
-		}
-		return instance;
-	}
-
-	public void enableAppLock(Application app) {
-		if (curAppLocker == null) {
-			curAppLocker = new AppLockImpl(app);
-		}
-		curAppLocker.enable();
-	}
-
-	public boolean isAppLockEnabled() {
-		if (curAppLocker == null) {
-			return false;
-		} else {
-			return true;
-		}
-	}
-
-	public void setAppLock(AppLock appLocker) {
-		if (curAppLocker != null) {
-			curAppLocker.disable();
-		}
-		curAppLocker = appLocker;
-	}
-
-	public AppLock getAppLock() {
-		return curAppLocker;
-	}
+    private volatile static LockManager instance;
+    private PasscodeLock curAppLocker;
+
+    public static LockManager getInstance() {
+        synchronized (LockManager.class) {
+            if (instance == null) {
+                instance = new LockManager();
+            }
+        }
+        return instance;
+    }
+
+    public void enableAppLock(Application app) {
+        if (curAppLocker == null) {
+            curAppLocker = new PasscodeLockImpl(app);
+        }
+        curAppLocker.enable();
+    }
+
+    public boolean isAppLockEnabled() {
+        if (curAppLocker == null) {
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    public void setAppLock(PasscodeLock appLocker) {
+        if (curAppLocker != null) {
+            curAppLocker.disable();
+        }
+        curAppLocker = appLocker;
+    }
+
+    public PasscodeLock getAppLock() {
+        return curAppLocker;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PageListener.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PageListener.java
index 8bcbfec63..f7b0e4c28 100644
--- a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PageListener.java
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PageListener.java
@@ -4,17 +4,17 @@
 
 public interface PageListener {
 
-	void onActivityCreated(Activity activity);
+    void onActivityCreated(Activity activity);
 
-	void onActivityStarted(Activity activity);
+    void onActivityStarted(Activity activity);
 
-	void onActivityResumed(Activity activity);
+    void onActivityResumed(Activity activity);
 
-	void onActivityPaused(Activity activity);
+    void onActivityPaused(Activity activity);
 
-	void onActivityStopped(Activity activity);
+    void onActivityStopped(Activity activity);
 
-	void onActivitySaveInstanceState(Activity activity);
+    void onActivitySaveInstanceState(Activity activity);
 
-	void onActivityDestroyed(Activity activity);
+    void onActivityDestroyed(Activity activity);
 }
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLock.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLock.java
new file mode 100644
index 000000000..2c7882df8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLock.java
@@ -0,0 +1,48 @@
+package org.telegramkr.passcodelock.core;
+
+import java.util.HashSet;
+
+public abstract class PasscodeLock {
+    public static final int ERROR_PASSLOCK = -1;
+    public static final int ENABLE_PASSLOCK = 0;
+    public static final int DISABLE_PASSLOCK = 1;
+    public static final int CHANGE_PASSWORD = 2;
+    public static final int UNLOCK_PASSWORD = 3;
+
+    public static final String MESSAGE = "message";
+    public static final String TYPE = "type";
+
+    public static final int DEFAULT_TIMEOUT = 0; // 2000ms
+
+    protected int lockTimeOut;
+    protected HashSet<String> ignoredActivities;
+
+    public void setTimeout(int timeout) {
+        this.lockTimeOut = timeout;
+    }
+
+    public PasscodeLock() {
+        ignoredActivities = new HashSet<String>();
+        lockTimeOut = DEFAULT_TIMEOUT;
+    }
+
+    public void addIgnoredActivity(Class<?> clazz) {
+        String clazzName = clazz.getName();
+        this.ignoredActivities.add(clazzName);
+    }
+
+    public void removeIgnoredActivity(Class<?> clazz) {
+        String clazzName = clazz.getName();
+        this.ignoredActivities.remove(clazzName);
+    }
+
+    public abstract void enable();
+
+    public abstract void disable();
+
+    public abstract boolean setPasscode(String passcode);
+
+    public abstract boolean checkPasscode(String passcode);
+
+    public abstract boolean isPasscodeSet();
+}
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLockActivity.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLockActivity.java
new file mode 100644
index 000000000..b0507eada
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLockActivity.java
@@ -0,0 +1,358 @@
+package org.telegramkr.passcodelock.core;
+
+import org.telegram.android.LocaleController;
+import org.telegramkr.messenger.R;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.text.InputFilter;
+import android.text.InputType;
+import android.text.Spanned;
+import android.text.method.PasswordTransformationMethod;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnTouchListener;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+public class PasscodeLockActivity extends BaseActivity {
+    public static final String TAG = PasscodeLockActivity.class.getName();
+
+    private int type = -1;
+    private String oldPasscode = null;
+
+    protected EditText codeField1 = null;
+    protected EditText codeField2 = null;
+    protected EditText codeField3 = null;
+    protected EditText codeField4 = null;
+    protected InputFilter[] filters = null;
+    protected TextView tvMessage = null;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(R.layout.passcode_page);
+
+        tvMessage = (TextView) findViewById(R.id.tv_message);
+
+        Bundle extras = getIntent().getExtras();
+        if (extras != null) {
+            String message = extras.getString(PasscodeLock.MESSAGE);
+            if (message != null) {
+                tvMessage.setText(message);
+            }
+
+            type = extras.getInt(PasscodeLock.TYPE, -1);
+        }
+
+        filters = new InputFilter[2];
+        filters[0] = new InputFilter.LengthFilter(1);
+        filters[1] = numberFilter;
+
+        codeField1 = (EditText) findViewById(R.id.passcode_1);
+        setupEditText(codeField1);
+
+        codeField2 = (EditText) findViewById(R.id.passcode_2);
+        setupEditText(codeField2);
+
+        codeField3 = (EditText) findViewById(R.id.passcode_3);
+        setupEditText(codeField3);
+
+        codeField4 = (EditText) findViewById(R.id.passcode_4);
+        setupEditText(codeField4);
+
+        // setup the keyboard
+        ((Button) findViewById(R.id.button0)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button1)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button2)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button3)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button4)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button5)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button6)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button7)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button8)).setOnClickListener(btnListener);
+        ((Button) findViewById(R.id.button9)).setOnClickListener(btnListener);
+
+        ((Button) findViewById(R.id.button_clear))
+                .setOnClickListener(new OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        clearFields();
+                    }
+                });
+
+        ((Button) findViewById(R.id.button_erase))
+                .setOnClickListener(new OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        onDeleteKey();
+                    }
+                });
+
+        overridePendingTransition(R.anim.slide_up, R.anim.nothing);
+        switch (type) {
+        case PasscodeLock.DISABLE_PASSLOCK:
+            this.setTitle(LocaleController.getString("PasscodeLock_disable",R.string.PasscodeLock_disable));
+            break;
+        case PasscodeLock.ENABLE_PASSLOCK:
+            this.setTitle(LocaleController.getString("PasscodeLock_enable",R.string.PasscodeLock_enable));
+            break;
+        case PasscodeLock.CHANGE_PASSWORD:
+            this.setTitle(LocaleController.getString("PasscodeLock_change",R.string.PasscodeLock_change));
+            break;
+        case PasscodeLock.UNLOCK_PASSWORD:
+            this.setTitle(LocaleController.getString("PasscodeLock_unlock",R.string.PasscodeLock_unlock));
+            break;
+        case PasscodeLock.ERROR_PASSLOCK:
+            finish();
+            break;
+        }
+        this.setTitleColor(Color.BLUE);
+    }
+
+    public int getType() {
+        return type;
+    }
+
+    protected void onPasscodeInputed() {
+        String passLock = codeField1.getText().toString()
+                + codeField2.getText().toString()
+                + codeField3.getText().toString() + codeField4.getText();
+
+        codeField1.setText("");
+        codeField2.setText("");
+        codeField3.setText("");
+        codeField4.setText("");
+        codeField1.requestFocus();
+
+        switch (type) {
+
+        case PasscodeLock.DISABLE_PASSLOCK:
+            if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
+                setResult(RESULT_OK);
+                LockManager.getInstance().getAppLock().setPasscode(null);
+                finish();
+            } else {
+                onPasscodeError();
+            }
+            break;
+
+        case PasscodeLock.ENABLE_PASSLOCK:
+            if (oldPasscode == null) {
+                tvMessage.setText(R.string.PasscodeLock_reenter);
+                oldPasscode = passLock;
+            } else {
+                if (passLock.equals(oldPasscode)) {
+                    setResult(RESULT_OK);
+                    LockManager.getInstance().getAppLock()
+                            .setPasscode(passLock);
+                    finish();
+                } else {
+                    oldPasscode = null;
+                    tvMessage.setText(R.string.PasscodeLock_enter);
+                    onPasscodeError();
+                }
+            }
+            break;
+
+        case PasscodeLock.CHANGE_PASSWORD:
+            if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
+                tvMessage.setText(R.string.PasscodeLock_enter);
+                type = PasscodeLock.ENABLE_PASSLOCK;
+            } else {
+                onPasscodeError();
+            }
+            break;
+
+        case PasscodeLock.UNLOCK_PASSWORD:
+            if (LockManager.getInstance().getAppLock().checkPasscode(passLock)) {
+                setResult(RESULT_OK);
+                finish();
+            } else {
+                onPasscodeError();
+            }
+            break;
+        default:
+            break;
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (type == PasscodeLock.UNLOCK_PASSWORD) {
+            // back to home screen
+            Intent intent = new Intent();
+            intent.setAction(Intent.ACTION_MAIN);
+            intent.addCategory(Intent.CATEGORY_HOME);
+            this.startActivity(intent);
+            finish();
+        } else {
+            finish();
+        }
+    }
+
+    protected void setupEditText(EditText editText) {
+        editText.setInputType(InputType.TYPE_NULL);
+        editText.setFilters(filters);
+        editText.setOnTouchListener(touchListener);
+        editText.setTransformationMethod(PasswordTransformationMethod
+                .getInstance());
+    }
+
+    public boolean onKeyDown(int keyCode, KeyEvent event) {
+        if (keyCode == KeyEvent.KEYCODE_DEL) {
+            onDeleteKey();
+            return true;
+        }
+        return super.onKeyDown(keyCode, event);
+    }
+
+    private void onDeleteKey() {
+        if (codeField1.isFocused()) {
+
+        } else if (codeField2.isFocused()) {
+            codeField1.requestFocus();
+            codeField1.setText("");
+        } else if (codeField3.isFocused()) {
+            codeField2.requestFocus();
+            codeField2.setText("");
+        } else if (codeField4.isFocused()) {
+            codeField3.requestFocus();
+            codeField3.setText("");
+        }
+    }
+
+    private OnClickListener btnListener = new OnClickListener() {
+        @Override
+        public void onClick(View view) {
+            int currentValue = -1;
+            int id = view.getId();
+            if (id == R.id.button0) {
+                currentValue = 0;
+            } else if (id == R.id.button1) {
+                currentValue = 1;
+            } else if (id == R.id.button2) {
+                currentValue = 2;
+            } else if (id == R.id.button3) {
+                currentValue = 3;
+            } else if (id == R.id.button4) {
+                currentValue = 4;
+            } else if (id == R.id.button5) {
+                currentValue = 5;
+            } else if (id == R.id.button6) {
+                currentValue = 6;
+            } else if (id == R.id.button7) {
+                currentValue = 7;
+            } else if (id == R.id.button8) {
+                currentValue = 8;
+            } else if (id == R.id.button9) {
+                currentValue = 9;
+            } else {
+            }
+
+            // set the value and move the focus
+            String currentValueString = String.valueOf(currentValue);
+            if (codeField1.isFocused()) {
+                codeField1.setText(currentValueString);
+                codeField2.requestFocus();
+                codeField2.setText("");
+            } else if (codeField2.isFocused()) {
+                codeField2.setText(currentValueString);
+                codeField3.requestFocus();
+                codeField3.setText("");
+            } else if (codeField3.isFocused()) {
+                codeField3.setText(currentValueString);
+                codeField4.requestFocus();
+                codeField4.setText("");
+            } else if (codeField4.isFocused()) {
+                codeField4.setText(currentValueString);
+            }
+
+            if (codeField4.getText().toString().length() > 0
+                    && codeField3.getText().toString().length() > 0
+                    && codeField2.getText().toString().length() > 0
+                    && codeField1.getText().toString().length() > 0) {
+                onPasscodeInputed();
+            }
+        }
+    };
+
+    protected void onPasscodeError() {
+        Toast toast = Toast.makeText(this, getString(R.string.PasscodeLock_wrong),
+                Toast.LENGTH_SHORT);
+        toast.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 30);
+        toast.show();
+
+        Thread thread = new Thread() {
+            public void run() {
+                Animation animation = AnimationUtils.loadAnimation(
+                        PasscodeLockActivity.this, R.anim.shake);
+                findViewById(R.id.ll_applock).startAnimation(animation);
+                codeField1.setText("");
+                codeField2.setText("");
+                codeField3.setText("");
+                codeField4.setText("");
+                codeField1.requestFocus();
+            }
+        };
+        runOnUiThread(thread);
+    }
+
+    private InputFilter numberFilter = new InputFilter() {
+        @Override
+        public CharSequence filter(CharSequence source, int start, int end,
+                Spanned dest, int dstart, int dend) {
+
+            if (source.length() > 1) {
+                return "";
+            }
+
+            if (source.length() == 0) // erase
+            {
+                return null;
+            }
+
+            try {
+                int number = Integer.parseInt(source.toString());
+                if ((number >= 0) && (number <= 9))
+                    return String.valueOf(number);
+                else
+                    return "";
+            } catch (NumberFormatException e) {
+                return "";
+            }
+        }
+    };
+
+    private OnTouchListener touchListener = new OnTouchListener() {
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            v.performClick();
+            clearFields();
+            return false;
+        }
+    };
+
+    private void clearFields() {
+        codeField1.setText("");
+        codeField2.setText("");
+        codeField3.setText("");
+        codeField4.setText("");
+
+        codeField1.postDelayed(new Runnable() {
+
+            @Override
+            public void run() {
+                codeField1.requestFocus();
+            }
+        }, 200);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLockImpl.java b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLockImpl.java
new file mode 100644
index 000000000..348d73e9f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegramkr/passcodelock/core/PasscodeLockImpl.java
@@ -0,0 +1,216 @@
+package org.telegramkr.passcodelock.core;
+
+import android.app.Activity;
+import android.app.Application;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.util.Log;
+import org.telegram.messenger.BuildVars;
+
+public class PasscodeLockImpl extends PasscodeLock implements PageListener {
+    public static final String TAG = "DefaultPasscodeLockLock";
+
+    private static final String PASSWORD_PREFERENCE_KEY = "passcode";
+    //private static final String PASSWORD_SALT = "8xn9@c$";
+
+    private SharedPreferences settings;
+
+    private int liveCount;
+    private int visibleCount;
+
+    private long lastActive;
+
+    public PasscodeLockImpl(Application app) {
+        super();
+        SharedPreferences settings = PreferenceManager
+                .getDefaultSharedPreferences(app);
+        this.settings = settings;
+        this.liveCount = 0;
+        this.visibleCount = 0;
+    }
+
+    public void enable() {
+        BaseActivity.setListener(this);
+    }
+
+    public void disable() {
+        BaseActivity.setListener(null);
+    }
+
+    public boolean checkPasscode(String passcode) {
+        passcode = BuildVars.PASSWORD_SALT + passcode + BuildVars.PASSWORD_SALT;
+        passcode = Encryptor.getSHA1(passcode);
+        String storedPasscode = "";
+
+        if (settings.contains(PASSWORD_PREFERENCE_KEY)) {
+            storedPasscode = settings.getString(PASSWORD_PREFERENCE_KEY, "");
+        }
+
+        if (passcode.equalsIgnoreCase(storedPasscode)) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public boolean setPasscode(String passcode) {
+        SharedPreferences.Editor editor = settings.edit();
+
+        if (passcode == null) {
+            editor.remove(PASSWORD_PREFERENCE_KEY);
+            editor.commit();
+            this.disable();
+        } else {
+            passcode = BuildVars.PASSWORD_SALT + passcode + BuildVars.PASSWORD_SALT;
+            passcode = Encryptor.getSHA1(passcode);
+            editor.putString(PASSWORD_PREFERENCE_KEY, passcode);
+            editor.commit();
+            this.enable();
+        }
+
+        return true;
+    }
+
+    // Check if we need to show the lock screen at startup
+    public boolean isPasscodeSet() {
+        if (settings.contains(PASSWORD_PREFERENCE_KEY)) {
+            return true;
+        }
+
+        return false;
+    }
+
+    private boolean isIgnoredActivity(Activity activity) {
+        String clazzName = activity.getClass().getName();
+
+        // ignored activities
+        if (ignoredActivities.contains(clazzName)) {
+            Log.d(TAG, "ignore activity " + clazzName);
+            return true;
+        }
+
+        return false;
+    }
+
+    private boolean shouldLockSceen(Activity activity) {
+
+        // already unlock
+        if (activity instanceof PasscodeLockActivity) {
+            PasscodeLockActivity ala = (PasscodeLockActivity) activity;
+            if (ala.getType() == PasscodeLock.UNLOCK_PASSWORD) {
+                Log.d(TAG, "already unlock activity");
+                return false;
+            }
+        }
+
+        // no pass code set
+        if (!isPasscodeSet()) {
+            Log.d(TAG, "lock passcode not set.");
+            return false;
+        }
+
+        // no enough timeout
+        long passedTime = System.currentTimeMillis() - lastActive;
+        if (lastActive > 0 && passedTime <= lockTimeOut) {
+            Log.d(TAG, "no enough timeout " + passedTime + " for "
+                    + lockTimeOut);
+            return false;
+        }
+
+        // start more than one page
+        if (visibleCount > 1) {
+            return false;
+        }
+
+        return true;
+    }
+
+    @Override
+    public void onActivityPaused(Activity activity) {
+        String clazzName = activity.getClass().getName();
+        Log.d(TAG, "onActivityPaused " + clazzName);
+
+        if (isIgnoredActivity(activity)) {
+            return;
+        }
+    }
+
+    @Override
+    public void onActivityResumed(Activity activity) {
+        String clazzName = activity.getClass().getName();
+        Log.d(TAG, "onActivityResumed " + clazzName);
+
+        if (isIgnoredActivity(activity)) {
+            return;
+        }
+
+        if (shouldLockSceen(activity)) {
+            Intent intent = new Intent(activity.getApplicationContext(),
+                    PasscodeLockActivity.class);
+            intent.putExtra(PasscodeLock.TYPE, PasscodeLock.UNLOCK_PASSWORD);
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            activity.getApplication().startActivity(intent);
+        }
+
+        lastActive = 0;
+    }
+
+    @Override
+    public void onActivityCreated(Activity activity) {
+
+        if (isIgnoredActivity(activity)) {
+            return;
+        }
+
+        liveCount++;
+    }
+
+    @Override
+    public void onActivityDestroyed(Activity activity) {
+        if (isIgnoredActivity(activity)) {
+            return;
+        }
+
+        liveCount--;
+        if (liveCount == 0) {
+            lastActive = System.currentTimeMillis();
+            Log.d(TAG, "set last active " + lastActive);
+        }
+    }
+
+    @Override
+    public void onActivitySaveInstanceState(Activity activity) {
+        if (isIgnoredActivity(activity)) {
+            return;
+        }
+    }
+
+    @Override
+    public void onActivityStarted(Activity activity) {
+        String clazzName = activity.getClass().getName();
+        Log.d(TAG, "onActivityStarted " + clazzName);
+
+        if (isIgnoredActivity(activity)) {
+            return;
+        }
+
+        visibleCount++;
+    }
+
+    @Override
+    public void onActivityStopped(Activity activity) {
+        String clazzName = activity.getClass().getName();
+        Log.d(TAG, "onActivityStopped " + clazzName);
+
+        if (isIgnoredActivity(activity)) {
+            return;
+        }
+
+        visibleCount--;
+        if (visibleCount == 0) {
+            lastActive = System.currentTimeMillis();
+            Log.d(TAG, "set last active " + lastActive);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/res/anim/passcode_slide_up.xml b/TMessagesProj/src/main/res/anim/passcode_slide_up.xml
index 46231cf44..4859c69fa 100644
--- a/TMessagesProj/src/main/res/anim/passcode_slide_up.xml
+++ b/TMessagesProj/src/main/res/anim/passcode_slide_up.xml
@@ -3,11 +3,4 @@
     android:duration="300"
     android:fromYDelta="100%p"
     android:interpolator="@android:anim/accelerate_decelerate_interpolator"
-    android:toYDelta="0" />
-
-    -<set xmlns:android="http://schemas.android.com/apk/res/android">
--    <translate
--        android:fromYDelta="0%"
--        android:toYDelta="-100%"
--        android:duration="200"/>
--</set>
+    android:toYDelta="0" />
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/padlock_icon.png b/TMessagesProj/src/main/res/drawable-hdpi/padlock_icon.png
new file mode 100644
index 000000000..898fa242d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/padlock_icon.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/padlock_icon.png b/TMessagesProj/src/main/res/drawable-mdpi/padlock_icon.png
new file mode 100644
index 000000000..3dd4d0dbc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/padlock_icon.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/padlock_icon.png b/TMessagesProj/src/main/res/drawable-xhdpi/padlock_icon.png
new file mode 100644
index 000000000..efb79cc37
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/padlock_icon.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/padlock_icon.png b/TMessagesProj/src/main/res/drawable-xxhdpi/padlock_icon.png
new file mode 100644
index 000000000..88627b040
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/padlock_icon.png differ
diff --git a/TMessagesProj/src/main/res/drawable/passcode_button_background.xml b/TMessagesProj/src/main/res/drawable/passcode_button_background.xml
index a6798739f..988aada5a 100644
--- a/TMessagesProj/src/main/res/drawable/passcode_button_background.xml
+++ b/TMessagesProj/src/main/res/drawable/passcode_button_background.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <item android:drawable="@drawable/button_pressed" android:state_pressed="true"/>
-    <item android:drawable="@drawable/button_pressed" android:state_focused="true"/>
-    <item android:drawable="@drawable/button_normal"/>
+    <item android:drawable="@drawable/passcode_button_pressed" android:state_pressed="true"/>
+    <item android:drawable="@drawable/passcode_button_pressed" android:state_focused="true"/>
+    <item android:drawable="@drawable/passcode_button_normal"/>
 
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/passcode_edittext_background.xml b/TMessagesProj/src/main/res/drawable/passcode_edittext_background.xml
index 4b208b19e..b2698f65a 100644
--- a/TMessagesProj/src/main/res/drawable/passcode_edittext_background.xml
+++ b/TMessagesProj/src/main/res/drawable/passcode_edittext_background.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <selector xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <item android:drawable="@drawable/edittext_pressed" android:state_pressed="true"/>
-    <item android:drawable="@drawable/edittext_pressed" android:state_focused="true"/>
-    <item android:drawable="@drawable/edittext_normal"/>
+    <item android:drawable="@drawable/passcode_edittext_pressed" android:state_pressed="true"/>
+    <item android:drawable="@drawable/passcode_edittext_pressed" android:state_focused="true"/>
+    <item android:drawable="@drawable/passcode_edittext_normal"/>
 
 </selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/passcode_home.xml b/TMessagesProj/src/main/res/layout/passcode_home.xml
deleted file mode 100644
index a9031c6cd..000000000
--- a/TMessagesProj/src/main/res/layout/passcode_home.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:id="@+id/rl_root"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    tools:context=".HomePage" >
-
-    <Button
-        android:id="@+id/bt_on_off"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-
-    <Button
-        android:id="@+id/bt_change"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_below="@+id/bt_on_off" />
-
-</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/passcode_page.xml b/TMessagesProj/src/main/res/layout/passcode_page.xml
index adc2b7741..c6c6a10d9 100644
--- a/TMessagesProj/src/main/res/layout/passcode_page.xml
+++ b/TMessagesProj/src/main/res/layout/passcode_page.xml
@@ -12,16 +12,24 @@
         android:layout_gravity="center"
         android:gravity="center"
         android:orientation="vertical"
-        android:paddingLeft="16dp"
-        android:paddingRight="16dp" >
+        android:paddingLeft="10dp"
+        android:paddingRight="10dp" >
+
+        <ImageView
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:paddingTop="6dp"
+            android:singleLine="true"
+            android:src="@drawable/padlock_icon" />
 
         <TextView
             android:id="@+id/tv_message"
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
             android:gravity="center"
-            android:paddingBottom="16dp"
-            android:paddingTop="16dp"
+            android:paddingTop="6dp"
+            android:paddingBottom="6dp"
             android:singleLine="true"
             android:textColor="#FF464646"
             android:textSize="18sp" />
@@ -59,7 +67,7 @@
             android:id="@+id/tl_keys"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            android:paddingTop="30dp"
+            android:paddingTop="10dp"
             android:shrinkColumns="*"
             android:stretchColumns="*" >
 
@@ -118,14 +126,13 @@
             </TableRow>
 
             <TableRow>
-
                 <Button
                     android:id="@+id/button_clear"
                     style="@style/PasscodeButtonStyle"
                     android:clickable="false"
                     android:focusable="false"
                     android:focusableInTouchMode="false"
-                    android:text="Clear" />
+                    android:text="@string/PasscodeLock_clean" />
 
                 <Button
                     android:id="@+id/button0"
@@ -135,7 +142,7 @@
                 <Button
                     android:id="@+id/button_erase"
                     style="@style/PasscodeButtonStyle"
-                    android:text="Del" />
+                    android:text="@string/PasscodeLock_del" />
             </TableRow>
         </TableLayout>
     </LinearLayout>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index a9f245432..ef13bc211 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -446,6 +446,20 @@
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">a h:mm</string>
     <string name="formatDateAtTime">%1$s %2$s</string>
+    <!-- For Passcode -->
+    <string name="PasscodeLock">화면 암호잠금</string>
+    <string name="PasscodeLock_unlock">암호잠금 해제</string>
+    <string name="PasscodeLock_manage">암호잠금 설정</string>
+    <string name="PasscodeLock_enter">암호를 입력해주세요</string>
+    <string name="PasscodeLock_enter_old">이전 암호를 입력해주세요</string>
+    <string name="PasscodeLock_reenter">암호를 다시 입력해주세요</string>
+    <string name="PasscodeLock_change">암호변경하기</string>
+    <string name="PasscodeLock_setup">암호 설정완료</string>
+    <string name="PasscodeLock_wrong">잘못된 암호입니다. 다시 입력해주세요.</string>
+    <string name="PasscodeLock_disable">텔레그램 암호설정을 해제합니다.</string>
+    <string name="PasscodeLock_enable">텔레그램 암호를 입력해주세요.</string>
+    <string name="PasscodeLock_clean">지움</string>
+    <string name="PasscodeLock_del">삭제</string>
     <!--Don't change this! Not for localization!-->
     <string name="CacheTag">CACHE_TAG</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index 7d667489b..c5515c39a 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -6,4 +6,10 @@
     <color name="settings_background_color">#ffffffff</color>
     <color name="divider">#dcdcdc</color>
     <color name="header">#ff54759e</color>
+
+    <!-- For Passcode Color-->
+    <color name="light_gray">#FFE5E5E5</color>
+    <color name="gray">#FFCCCCCC</color>
+    <color name="black">#FF000000</color>
+    <color name="light_blue">#FF78c8e6</color>
 </resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 02535a0a6..ba756fc7a 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -435,6 +435,23 @@
     <string name="FromContacts_few">from %1$d contacts</string>
     <string name="FromContacts_many">from %1$d contacts</string>
     <string name="FromContacts_other">from %1$d contacts</string>
+
+
+    <!-- For Passcode -->
+    <string name="PasscodeLock">Passcode Lock</string>
+    <string name="PasscodeLock_unlock">Passcode UnLock</string>
+    <string name="PasscodeLock_manage">Manage passcode</string>
+    <string name="PasscodeLock_enter">Enter passcode</string>
+    <string name="PasscodeLock_enter_old">Enter old passcode</string>
+    <string name="PasscodeLock_reenter">Re-enter passcode</string>
+    <string name="PasscodeLock_change">Change passcode</string>
+    <string name="PasscodeLock_setup">Setup Passcode</string>
+    <string name="PasscodeLock_wrong">Wrong passcode, please try again.</string>
+    <string name="PasscodeLock_disable">Disable passcode</string>
+    <string name="PasscodeLock_enable">Enable passcode</string>
+    <string name="PasscodeLock_clean">CLEAN</string>
+    <string name="PasscodeLock_del">DEL</string>
+
     <!--date formatters-->
     <string name="formatterMonth">MMM dd</string>
     <string name="formatterYear">dd.MM.yy</string>
@@ -444,7 +461,8 @@
     <string name="formatterWeek">EEE</string>
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s at %2$s</string>
+    <string name="formatDateAtTime">%1$s \'at\' %2$s</string>
+
     <!--Don't change this! Not for localization!-->
     <string name="CacheTag">CACHE_TAG</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index a6dcf0b96..c5b811325 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -63,4 +63,32 @@
         <item name="android:textColor">#000000</item>
     </style>
 
+    <!-- PASSCODE -->
+
+    <style name="PasscodeInputIStyle">
+        <item name="android:gravity">center</item>
+        <item name="android:maxLength">1</item>
+        <item name="android:textColor">@color/light_blue</item>
+        <item name="android:textSize">60sp</item>
+        <item name="android:background">@drawable/passcode_edittext_background</item>
+        <item name="android:inputType">textPassword|number</item>
+        <item name="android:layout_width">0dp</item>
+        <item name="android:layout_height">80dp</item>
+        <item name="android:layout_margin">4dp</item>
+        <item name="android:layout_weight">1</item>
+        <item name="android:singleLine">true</item>
+    </style>
+
+    <style name="PasscodeButtonStyle" parent="@android:style/Widget.Button">
+        <item name="android:textSize">25sp</item>
+        <item name="android:textColor">#FF464646</item>
+        <item name="android:gravity">center</item>
+        <item name="android:background">@drawable/passcode_button_background</item>
+        <item name="android:layout_margin">3dp</item>
+        <item name="android:layout_width">130dp</item>
+        <item name="android:layout_height">80dp</item>
+    </style>
+    <style name="TitleTextColor">
+        <item name="android:textColor">#a23421</item>
+    </style>
 </resources>
