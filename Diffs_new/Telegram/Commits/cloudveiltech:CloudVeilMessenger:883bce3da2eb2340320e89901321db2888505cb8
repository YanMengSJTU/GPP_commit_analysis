diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 5fd749fa3..036c71cef 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -141,7 +141,7 @@ android {
         }
     }
 
-    defaultConfig.versionCode = 1518
+    defaultConfig.versionCode = 1519
 
     sourceSets.debug {
         manifest.srcFile 'config/debug/AndroidManifest.xml'
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 7223b7337..7e3398fbf 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -15,6 +15,7 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.os.SystemClock;
+import android.support.v4.app.NotificationManagerCompat;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.util.LongSparseArray;
@@ -24,6 +25,7 @@
 import android.widget.Toast;
 
 import org.cloudveil.messenger.GlobalSecuritySettings;
+import org.cloudveil.messenger.service.ChannelCheckingService;
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.messenger.support.SparseLongArray;
 import org.telegram.messenger.voip.VoIPService;
@@ -49,8 +51,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountDownLatch;
 
-import android.support.v4.app.NotificationManagerCompat;
-
 public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
     //CLoudVeil start
     public ConcurrentHashMap<Long, Boolean> allowedDialogs = new ConcurrentHashMap<>();
@@ -334,6 +334,7 @@ public int compare(TLRPC.TL_dialog dialog1, TLRPC.TL_dialog dialog2) {
 
     private int currentAccount;
     private static volatile MessagesController[] Instance = new MessagesController[UserConfig.MAX_ACCOUNT_COUNT];
+
     public static MessagesController getInstance(int num) {
         MessagesController localInstance = Instance[num];
         if (localInstance == null) {
@@ -1041,7 +1042,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
                         oldUser.photo = user.photo;
                         oldUser.flags |= 32;
                     } else {
-                        oldUser.flags = oldUser.flags &~ 32;
+                        oldUser.flags = oldUser.flags & ~32;
                         oldUser.photo = null;
                     }
                 }
@@ -1075,7 +1076,7 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
                     user.photo = oldUser.photo;
                     user.flags |= 32;
                 } else {
-                    user.flags = user.flags &~ 32;
+                    user.flags = user.flags & ~32;
                     user.photo = null;
                 }
                 users.put(user.id, user);
@@ -1139,7 +1140,7 @@ public void putChat(final TLRPC.Chat chat, boolean fromCache) {
                         oldChat.username = chat.username;
                         oldChat.flags |= 64;
                     } else {
-                        oldChat.flags = oldChat.flags &~ 64;
+                        oldChat.flags = oldChat.flags & ~64;
                         oldChat.username = null;
                     }
                     if (chat.participants_count != 0) {
@@ -1166,19 +1167,19 @@ public void putChat(final TLRPC.Chat chat, boolean fromCache) {
                     int newFlags2 = chat.default_banned_rights != null ? chat.default_banned_rights.flags : 0;
                     oldChat.default_banned_rights = chat.default_banned_rights;
                     if (oldChat.default_banned_rights == null) {
-                        oldChat.flags &=~ 262144;
+                        oldChat.flags &= ~262144;
                     } else {
                         oldChat.flags |= 262144;
                     }
                     oldChat.banned_rights = chat.banned_rights;
                     if (oldChat.banned_rights == null) {
-                        oldChat.flags &=~ 32768;
+                        oldChat.flags &= ~32768;
                     } else {
                         oldChat.flags |= 32768;
                     }
                     oldChat.admin_rights = chat.admin_rights;
                     if (oldChat.admin_rights == null) {
-                        oldChat.flags &=~ 16384;
+                        oldChat.flags &= ~16384;
                     } else {
                         oldChat.flags |= 16384;
                     }
@@ -1213,7 +1214,7 @@ public void putChat(final TLRPC.Chat chat, boolean fromCache) {
                     chat.username = oldChat.username;
                     chat.flags |= 64;
                 } else {
-                    chat.flags = chat.flags &~ 64;
+                    chat.flags = chat.flags & ~64;
                     chat.username = null;
                 }
                 if (oldChat.participants_count != 0 && chat.participants_count == 0) {
@@ -10074,6 +10075,50 @@ public boolean checkCanOpenChat(final Bundle bundle, final BaseFragment fragment
         return true;
     }
 
+    //CloudVeil start
+    private static ReopenDialogAfterCheckDelegate delegateInstance;
+    private static AlertDialog progressDialog;
+    private static class ReopenDialogAfterCheckDelegate implements NotificationCenter.NotificationCenterDelegate {
+        private final TLRPC.User user;
+        private final TLRPC.Chat chat;
+        private final BaseFragment fragment;
+        private final int type;
+        private final boolean closeLast;
+
+        ReopenDialogAfterCheckDelegate(TLRPC.User user, TLRPC.Chat chat, BaseFragment fragment, int type, boolean closeLast) {
+            this.user = user;
+            this.chat = chat;
+            this.fragment = fragment;
+            this.type = type;
+            this.closeLast = closeLast;
+        }
+
+        @Override
+        public void didReceivedNotification(int id, int account, Object... args) {
+            MessagesController.openChatOrProfileWith(user, chat, fragment, type, closeLast);
+
+            NotificationCenter.getInstance(fragment.getCurrentAccount()).removeObserver(this, NotificationCenter.filterDialogsReady);
+            delegateInstance = null;
+            if(progressDialog != null) {
+                progressDialog.dismiss();
+            }
+            progressDialog = null;
+        }
+    }
+
+    private static void openUncheckedDialog(long dialogId, TLRPC.User user, TLRPC.Chat chat, BaseFragment fragment, int type, boolean closeLast) {
+        if (progressDialog != null) {
+            progressDialog.dismiss();
+        }
+        delegateInstance = new ReopenDialogAfterCheckDelegate(user, chat, fragment, type, closeLast);
+        progressDialog = new AlertDialog(fragment.getParentActivity(), 3);
+        NotificationCenter.getInstance(fragment.getCurrentAccount()).addObserver(delegateInstance, NotificationCenter.filterDialogsReady);
+        ChannelCheckingService.startDataChecking(fragment.getCurrentAccount(), dialogId, fragment.getParentActivity());
+        progressDialog.show();
+    }
+
+    //CloudVeil end
+
     public static void openChatOrProfileWith(TLRPC.User user, TLRPC.Chat chat, BaseFragment fragment, int type, boolean closeLast) {
         if (user == null && chat == null || fragment == null) {
             return;
@@ -10090,18 +10135,29 @@ public static void openChatOrProfileWith(TLRPC.User user, TLRPC.Chat chat, BaseF
         }
 
         //CloudVeil start
-        if(chat != null) {
+        if (chat != null) {
             int dialogId = chat.id > 0 ? -chat.id : chat.id;
-            if(!MessagesController.getInstance(fragment.getCurrentAccount()).isDialogIdAllowed(dialogId)) {
+            if (!MessagesController.getInstance(fragment.getCurrentAccount()).isDialogIdAllowed(dialogId)) {
                 ChatActivity.showWarning(fragment, chat, null, null);
                 return;
+            } else if (!MessagesController.getInstance(fragment.getCurrentAccount()).isDialogCheckedOnServer(dialogId)) {
+                openUncheckedDialog(dialogId, user, chat, fragment, type, closeLast);
+                return;
             }
         } else if (user != null) {
             if (!MessagesController.getInstance(fragment.getCurrentAccount()).isDialogIdAllowed(user.id)) {
                 ChatActivity.showWarning(fragment, user, null, null);
                 return;
+            } else if (!MessagesController.getInstance(fragment.getCurrentAccount()).isDialogCheckedOnServer(user.id)) {
+                openUncheckedDialog(user.id, user, chat, fragment, type, closeLast);
+                return;
             }
         }
+        delegateInstance = null;
+        if(progressDialog != null) {
+            progressDialog.dismiss();
+        }
+        progressDialog = null;
         //CloudVeil end
 
         if (reason != null) {
@@ -10149,7 +10205,7 @@ public void openByUserName(String username, final BaseFragment fragment, final i
             if (fragment.getParentActivity() == null) {
                 return;
             }
-            final AlertDialog progressDialog[] = new AlertDialog[] {new AlertDialog(fragment.getParentActivity(), 3)};
+            final AlertDialog progressDialog[] = new AlertDialog[]{new AlertDialog(fragment.getParentActivity(), 3)};
 
             TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
             req.username = username;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
index 20e0d911b..a8aaf7a91 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
@@ -20,6 +20,7 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
@@ -97,14 +98,18 @@ public PhotoPickerSearchCell(Context context, boolean allowGifs) {
         layoutParams.height = AndroidUtilities.dp(48);
         layoutParams.width = 0;
         searchButton.setLayoutParams(layoutParams);
-        searchButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
+
+        //CloudVeil start
+        if (!GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH) {
+            searchButton.setOnClickListener(v -> {
                 if (delegate != null) {
                     delegate.didPressedSearchButton(0);
                 }
-            }
-        });
+            });
+        } else {
+            searchButton.setAlpha(0.5f);
+        }
+        //CloudVeil end
 
         FrameLayout frameLayout = new FrameLayout(context);
         frameLayout.setBackgroundColor(0);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 7343ee74f..e66893b4e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -10592,7 +10592,6 @@ public void onResume() {
         }
         //CloudVeil end
 
-
         AndroidUtilities.requestAdjustResize(getParentActivity(), classGuid);
         MediaController.getInstance().startRaiseToEarSensors(this);
         checkRaiseSensors();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
index b2b69d534..d299a7222 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
@@ -666,6 +666,7 @@ public void onClick(View widget) {
     private static void performAskAQuestion(BaseFragment fragment) {
         int currentAccount = fragment.getCurrentAccount();
         final SharedPreferences preferences = MessagesController.getMainSettings(currentAccount);
+
         int uid = preferences.getInt("support_id", 0);
         TLRPC.User supportUser = null;
         if (uid != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LogoutActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LogoutActivity.java
index 173727321..c9ab951d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LogoutActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LogoutActivity.java
@@ -129,7 +129,10 @@ public void onItemClick(int id) {
             } else if (position == phoneRow) {
                 presentFragment(new ChangePhoneHelpActivity());
             } else if (position == supportRow) {
-                showDialog(AlertsCreator.createSupportAlert(LogoutActivity.this));
+                //showDialog(AlertsCreator.createSupportAlert(LogoutActivity.this));
+                //CloudVeil start
+                MessagesController.getInstance(currentAccount).openByUserName("cloudveilbot", LogoutActivity.this, 0);
+                //CloudVeil end
             } else if (position == logoutRow) {
                 if (getParentActivity() == null) {
                     return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index e96dcad1a..08c765e76 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -19,6 +19,7 @@
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
+import org.cloudveil.messenger.GlobalSecuritySettings;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
@@ -464,7 +465,9 @@ public int getItemCount() {
                 }
                 case 1:
                 default: {
-                    PhotoPickerSearchCell cell = new PhotoPickerSearchCell(mContext, allowGifs);
+                    //CloudVeil start
+                    PhotoPickerSearchCell cell = new PhotoPickerSearchCell(mContext, allowGifs && !GlobalSecuritySettings.LOCK_DISABLE_GLOBAL_SEARCH);
+                    //CloudVeil end
                     cell.setDelegate(index -> openPhotoPicker(null, index));
                     view = cell;
                     break;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 53acd0ad6..8982e1ca8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -388,7 +388,10 @@ public boolean supportsPredictiveItemAnimations() {
                         Integer tag = (Integer) v2.getTag();
                         switch (tag) {
                             case 0: {
-                                showDialog(AlertsCreator.createSupportAlert(SettingsActivity.this));
+                                //CloudVeil start
+                               // showDialog(AlertsCreator.createSupportAlert(SettingsActivity.this));
+                                MessagesController.getInstance(currentAccount).openByUserName("cloudveilbot", SettingsActivity.this, 0);
+                                //CloudVeil end
                                 break;
                             }
                             case 1:
