diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index 13fba7c6d..abe48dc2e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -516,6 +516,66 @@ public void onClick(DialogInterface dialog, int which) {
                         });
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                         showAlertDialog(builder);
+                    } else if (i == messagePriorityRow || i == groupPriorityRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault),
+                                LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh),
+                                LocaleController.getString("NotificationsPriorityMax", R.string.NotificationsPriorityMax)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                if (i == messagePriorityRow) {
+                                    preferences.edit().putInt("priority_messages", which).commit();
+                                } else if (i == groupPriorityRow) {
+                                    preferences.edit().putInt("priority_group", which).commit();
+                                }
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == repeatRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever),
+                                LocaleController.formatPluralString("Minutes", 5),
+                                LocaleController.formatPluralString("Minutes", 10),
+                                LocaleController.formatPluralString("Minutes", 30),
+                                LocaleController.formatPluralString("Hours", 1),
+                                LocaleController.formatPluralString("Hours", 2),
+                                LocaleController.formatPluralString("Hours", 4)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                int minutes = 0;
+                                if (which == 1) {
+                                    minutes = 5;
+                                } else if (which == 2) {
+                                    minutes = 10;
+                                } else if (which == 3) {
+                                    minutes = 30;
+                                } else if (which == 4) {
+                                    minutes = 60;
+                                } else if (which == 5) {
+                                    minutes = 60 * 2;
+                                } else if (which == 6) {
+                                    minutes = 60 * 4;
+                                }
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                preferences.edit().putInt("repeat_messages", minutes).commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
                     }
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(!enabled);
@@ -781,6 +841,33 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         value = LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup);
                     }
                     textCell.setTextAndValue(LocaleController.getString("PopupNotification", R.string.PopupNotification), value, true);
+                } else if (i == repeatRow) {
+                    textCell.setMultilineDetail(false);
+                    int minutes = preferences.getInt("repeat_messages", 60);
+                    String value;
+                    if (minutes == 0) {
+                        value = LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
+                    } else if (minutes < 60) {
+                        value = LocaleController.formatPluralString("Minutes", minutes);
+                    } else {
+                        value = LocaleController.formatPluralString("Hours", minutes / 60);
+                    }
+                    textCell.setTextAndValue(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications), value, false);
+                } else if (i == messagePriorityRow || i == groupPriorityRow) {
+                    textCell.setMultilineDetail(false);
+                    int value = 0;
+                    if (i == messagePriorityRow) {
+                        value = preferences.getInt("priority_messages", 1);
+                    } else if (i == groupPriorityRow) {
+                        value = preferences.getInt("priority_group", 1);
+                    }
+                    if (value == 0) {
+                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityDefault", R.string.NotificationsPriorityDefault), false);
+                    } else if (value == 1) {
+                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh), false);
+                    } else if (value == 2) {
+                        textCell.setTextAndValue(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), LocaleController.getString("NotificationsPriorityMax", R.string.NotificationsPriorityMax), false);
+                    }
                 }
             } else if (type == 3) {
                 if (view == null) {
@@ -810,7 +897,7 @@ public int getItemViewType(int i) {
                 return 0;
             } else if(i == messageVibrationSpeedRow || i == groupVibrationSpeedRow || i == messageVibrationCountRow || i == groupVibrationCountRow) {
                 return 2;
-            }  else if (i == messageAlertRow || i == messagePreviewRow || i == groupAlertRow ||
+            } else if (i == messageAlertRow || i == messagePreviewRow || i == groupAlertRow ||
                     i == groupPreviewRow || i == inappSoundRow || i == inappVibrateRow ||
                     i == inappPreviewRow || i == contactJoinedRow || i == pebbleAlertRow ||
                     i == notificationsServiceRow || i == badgeNumberRow || i == inappPriorityRow ||
