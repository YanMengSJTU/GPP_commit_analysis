diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index e2dc8a9f0..53a009020 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -127,7 +127,7 @@ android {
         }
     }
 
-    defaultConfig.versionCode = 1360
+    defaultConfig.versionCode = 1361
 
     sourceSets.debug {
         manifest.srcFile 'config/debug/AndroidManifest.xml'
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 7dc6d3a21..fb50e2f00 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -20,6 +20,7 @@
 import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
@@ -29,7 +30,9 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.PowerManager;
 import android.preference.PreferenceManager;
+import android.provider.Settings;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -280,6 +283,7 @@ public void onFragmentDestroy() {
     private void showPopup(final Context context) {
         SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
         if (defaultSharedPreferences.getBoolean("popupShown", false)) {
+            showBatteryWarning(context);
             return;
         }
 
@@ -299,6 +303,44 @@ private void setPopupShown() {
         SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(ApplicationLoader.applicationContext);
         defaultSharedPreferences.edit().putBoolean("popupShown", true).apply();
     }
+
+    private boolean isBatteryOptimized(final Context context) {
+        PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+        String name = context.getPackageName();
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            return !powerManager.isIgnoringBatteryOptimizations(name);
+        }
+        return false;
+    }
+
+    private void showBatteryWarning(final Context context) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {//not used
+            return;
+        }
+        if (!isBatteryOptimized(context)) {
+            return;
+        }
+
+        SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
+        long now = System.currentTimeMillis();
+        long lastTime = defaultSharedPreferences.getLong("batteryWarningTime", 0);
+        if (now - lastTime < 24 * 60 * 60 * 1000) {//one day
+            return;
+        }
+        defaultSharedPreferences.edit().putLong("batteryWarningTime", now).apply();
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(context.getString(R.string.warning))
+                .setMessage(context.getString(R.string.cloudveil_battery_warning))
+                .setPositiveButton(context.getString(R.string.open_settings), (dialog, which) -> {
+                    dialog.dismiss();
+                    Intent intent = new Intent(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS);
+                    context.startActivity(intent);
+                })
+                .setNegativeButton(context.getString(R.string.cancel), (dialog, which) -> dialog.dismiss());
+        showDialog(builder.create(), dialog -> setPopupShown());
+    }
+
     //CloudVeil end
 
     @Override
@@ -1531,9 +1573,10 @@ public void onResume() {
                     }
                 }
             }
-    //Cloudveil start
+            //Cloudveil start
         } else {
             showPopup(getParentActivity());
+
             if (GlobalSecuritySettings.LOCK_DISABLE_AUTOPLAY_GIFS && SharedConfig.autoplayGifs) {
                 SharedConfig.toggleAutoplayGifs();
             }
@@ -1543,7 +1586,7 @@ public void onResume() {
         }
 
         DataQuery.getInstance(currentAccount).loadStickers(DataQuery.TYPE_IMAGE, true, false);
-    //Cloudveil end
+        //Cloudveil end
     }
 
     @Override
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 78d4f8ec9..234709ad1 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -2183,10 +2183,13 @@
     <string name="formatDateAtTime">%1$s at %2$s</string>
 
     <string name="cloudveil_message_warning">CloudVeil Messenger uses a server based system to control access to Bots, Channels, and Groups and other policy rules. This is used to block unacceptable content. Your Telegram id and list of channels, bots, and groups will be sent to our system to allow this to work. We do not have access to your messages themselves.</string>
+    <string name="cloudveil_battery_warning">Your phone is optimizing battery life for this app.  Please disable it to allow your messages to come through.</string>
+
     <string name="warning">Warning</string>
     <string name="cloudveil_message_dialog_forbidden">This channel/group/bot is blocked by our server policy. Please contact CloudVeil Support at support@cloudveil.org to request it be unblocked.</string>
     <string name="cloudveil_hidden_for_protection">Content blocked for your protection.</string>
     <string name="cloudveil_disabled_for_protection">This is disabled for your protection.</string>
     <string name="contact">Contact</string>
     <string name="cancel">Cancel</string>
+    <string name="open_settings">Open Settings</string>
 </resources>
