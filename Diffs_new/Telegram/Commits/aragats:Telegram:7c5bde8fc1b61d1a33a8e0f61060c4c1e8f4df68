diff --git a/TMessagesProj/src/main/java/org/telegram/android/DownloadObject.java b/TMessagesProj/src/main/java/org/telegram/android/DownloadObject.java
deleted file mode 100644
index f0de07a35..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/DownloadObject.java
+++ /dev/null
@@ -1,17 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.7.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import org.telegram.messenger.TLObject;
-
-public class DownloadObject {
-    public TLObject object;
-    public int type;
-    public long id;
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 539bb05bc..4a194b0c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -327,32 +327,6 @@ private int getCurrentDownloadMask() {
         }
     }
 
-    protected void processDownloadObjects(int type, ArrayList<DownloadObject> objects) {
-        if (objects.isEmpty()) {
-            return;
-        }
-//        ArrayList<DownloadObject> queue = null;
-//        if (type == AUTODOWNLOAD_MASK_PHOTO) {
-//            queue = photoDownloadQueue;
-//        }
-//        for (DownloadObject downloadObject : objects) {
-//            String path = FileLoader.getAttachFileName(downloadObject.object);
-//            if (downloadQueueKeys.containsKey(path)) {
-//                continue;
-//            }
-//
-////            boolean added = true;
-////            if (downloadObject.object instanceof TLRPC.PhotoSize) {
-////                FileLoader.getInstance().loadFile((TLRPC.PhotoSize)downloadObject.object, null, false);
-////            } else {
-////                added = false;
-////            }
-////            if (added) {
-////                queue.add(downloadObject);
-////                downloadQueueKeys.put(path, downloadObject);
-////            }
-//        }
-    }
 
     private void checkDownloadFinished(String fileName, int state) {
 //        DownloadObject downloadObject = downloadQueueKeys.get(fileName);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 35eb6e4d7..2e7ee35ed 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -30,7 +30,7 @@
 import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
-public class ConnectionsManager implements Action.ActionDelegate{
+public class ConnectionsManager implements Action.ActionDelegate {
 
     private ArrayList<Long> sessionsToDestroy = new ArrayList<>();
     private HashMap<Integer, ArrayList<Long>> quickAckIdToRequestIds = new HashMap<>();
@@ -39,12 +39,9 @@
     private ConcurrentHashMap<Integer, ArrayList<Long>> requestsByGuids = new ConcurrentHashMap<>(100, 1.0f, 2);
     private volatile int connectionState = 2;
 
-    private ArrayList<RPCRequest> requestQueue = new ArrayList<>();
-    private ArrayList<RPCRequest> runningRequests = new ArrayList<>();
     private ArrayList<Action> actionQueue = new ArrayList<>();
 
 
-
     private int isTestBackend = 0;
     private int timeDifference = 0;
 
@@ -75,60 +72,6 @@ public static ConnectionsManager getInstance() {
         return localInstance;
     }
 
-    private Runnable stageRunnable = new Runnable() {
-        @Override
-        public void run() {
-            Utilities.stageQueue.handler.removeCallbacks(stageRunnable);
-
-            long currentTime = System.currentTimeMillis();
-            if (lastPauseTime != 0 && lastPauseTime < currentTime - nextSleepTimeout) {
-                boolean dontSleep = !pushMessagesReceived;
-                if (!dontSleep) {
-                    for (RPCRequest request : runningRequests) {
-                        if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
-                            dontSleep = true;
-                        } else if (request.retryCount < 10 && (request.runningStartTime + 60 > (int) (currentTime / 1000)) && ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0)) {
-                            dontSleep = true;
-                            break;
-                        }
-                    }
-                }
-                if (!dontSleep) {
-                    for (RPCRequest request : requestQueue) {
-                        if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
-                            dontSleep = true;
-                        } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                            dontSleep = true;
-                            break;
-                        }
-                    }
-                }
-                if (!dontSleep) {
-                    if (!paused) {
-                        FileLog.e("tmessages", "pausing network and timers by sleep time = " + nextSleepTimeout);
-
-                    }
-                    try {
-                        paused = true;
-                        Utilities.stageQueue.postRunnable(stageRunnable, 1000);
-                        return;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                } else {
-                    lastPauseTime += 30 * 1000;
-                    FileLog.e("tmessages", "don't sleep 30 seconds because of salt, upload or download request");
-                }
-            }
-            if (paused) {
-                paused = false;
-                FileLog.e("tmessages", "resume network and timers");
-            }
-
-
-            Utilities.stageQueue.postRunnable(stageRunnable, 1000);
-        }
-    };
 
     public ConnectionsManager() {
         loadSession();
@@ -137,7 +80,6 @@ public ConnectionsManager() {
             connectionState = 1;
         }
 
-        Utilities.stageQueue.postRunnable(stageRunnable, 1000);
 
         try {
             PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
@@ -178,7 +120,7 @@ public void run() {
 
     //TODO NEED?
     public void applicationMovedToForeground() {
-        Utilities.stageQueue.postRunnable(stageRunnable);
+//        Utilities.stageQueue.postRunnable(stageRunnable);
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -412,38 +354,8 @@ public void cleanUp() {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                for (int a = 0; a < requestQueue.size(); a++) {
-                    RPCRequest request = requestQueue.get(a);
-                    if ((request.flags & RPCRequest.RPCRequestClassWithoutLogin) != 0) {
-                        continue;
-                    }
-                    requestQueue.remove(a);
-                    if (request.completionBlock != null) {
-                        TLRPC.TL_error implicitError = new TLRPC.TL_error();
-                        implicitError.code = -1000;
-                        implicitError.text = "";
-                        request.completionBlock.run(null, implicitError);
-                    }
-                    a--;
-                }
-                for (int a = 0; a < runningRequests.size(); a++) {
-                    RPCRequest request = runningRequests.get(a);
-                    if ((request.flags & RPCRequest.RPCRequestClassWithoutLogin) != 0) {
-                        continue;
-                    }
-                    runningRequests.remove(a);
-                    if (request.completionBlock != null) {
-                        TLRPC.TL_error implicitError = new TLRPC.TL_error();
-                        implicitError.code = -1000;
-                        implicitError.text = "";
-                        request.completionBlock.run(null, implicitError);
-                    }
-                    a--;
-                }
                 pingIdToDate.clear();
                 quickAckIdToRequestIds.clear();
-
-
                 sessionsToDestroy.clear();
                 saveSession();
             }
@@ -477,7 +389,6 @@ public void cancelRpcsForClassGuid(int guid) {
     }
 
 
-
     //TODO NEED
     public static boolean isNetworkOnline() {
         try {
@@ -547,7 +458,6 @@ public int getTimeDifference() {
     //================================================================================
 
 
-
     //================================================================================
     // Actors manage
     //================================================================================
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NetworkMessage.java b/TMessagesProj/src/main/java/org/telegram/messenger/NetworkMessage.java
deleted file mode 100644
index 67cd93cf4..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NetworkMessage.java
+++ /dev/null
@@ -1,15 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-public class NetworkMessage {
-    public TLRPC.TL_protoMessage protoMessage;
-    public Object rawRequest;
-    public long requestId;
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java b/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
deleted file mode 100644
index 63dd660f4..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-import java.util.ArrayList;
-
-public class RPCRequest {
-    public interface RPCRequestDelegate {
-        void run(TLObject response, TLRPC.TL_error error);
-    }
-    public interface RPCQuickAckDelegate {
-        void quickAck();
-    }
-
-    public static int RPCRequestClassGeneric = 1;
-    public static int RPCRequestClassDownloadMedia = 2;
-    public static int RPCRequestClassUploadMedia = 4;
-    public static int RPCRequestClassEnableUnauthorized = 8;
-    public static int RPCRequestClassFailOnServerErrors = 16;
-    public static int RPCRequestClassCanCompress = 32;
-    public static int RPCRequestClassPush = 64;
-    public static int RPCRequestClassWithoutLogin = 128;
-    public static int RPCRequestClassTryDifferentDc = 256;
-    public static int RPCRequestClassForceDownload = 512;
-
-    static int RPCRequestClassTransportMask = (RPCRequestClassGeneric | RPCRequestClassDownloadMedia | RPCRequestClassUploadMedia);
-
-    long token;
-    boolean cancelled;
-
-    int serverFailureCount;
-    int flags;
-    boolean wait = false;
-    boolean salt = false;
-    protected int retryCount = 0;
-    protected int lastResendTime = 0;
-    protected boolean completed = false;
-
-    TLObject rawRequest;
-    TLObject rpcRequest;
-    int serializedLength;
-
-    RPCRequestDelegate completionBlock;
-    RPCQuickAckDelegate quickAckBlock;
-
-    boolean requiresCompletion;
-
-    long runningMessageId;
-    int runningMessageSeqNo;
-    int runningDatacenterId;
-    int transportChannelToken;
-
-    int runningStartTime;
-    int runningMinStartTime;
-
-    boolean confirmed;
-
-    boolean initRequest = false;
-
-    ArrayList<Long> respondsToMessageIds = new ArrayList<>();
-
-    public void addRespondMessageId(long messageId) {
-        respondsToMessageIds.add(messageId);
-    }
-
-    boolean respondsToMessageId(long messageId) {
-        return runningMessageId == messageId || respondsToMessageIds.contains(messageId);
-    }
-}
-
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ServerSalt.java b/TMessagesProj/src/main/java/org/telegram/messenger/ServerSalt.java
deleted file mode 100644
index 88aa01958..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ServerSalt.java
+++ /dev/null
@@ -1,15 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.messenger;
-
-public class ServerSalt {
-    public int validSince;
-    public int validUntil;
-    public long value;
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index ffb668977..9ee488a74 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -10,7 +10,6 @@
 
 import android.app.Activity;
 import android.app.AlertDialog;
-import android.app.ProgressDialog;
 import android.content.ContentResolver;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -48,8 +47,6 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBarLayout;
