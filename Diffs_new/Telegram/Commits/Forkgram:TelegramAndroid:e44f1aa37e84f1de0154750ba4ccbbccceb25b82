diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 34a87a9e0..08c186506 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -19,10 +19,10 @@ dependencies {
 
     compileOnly 'org.checkerframework:checker-qual:2.5.2'
     compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
-    implementation 'com.google.android.gms:play-services-maps:16.1.0'
     implementation 'net.hockeyapp.android:HockeySDK:5.1.1'
     implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
     implementation 'com.stripe:stripe-android:2.0.2'
+    implementation 'org.osmdroid:osmdroid-android:6.1.0'
 }
 
 def getStringForConfig(String s) {
@@ -307,4 +307,3 @@ android {
         manifestPlaceholders = [applicationClassName: "ApplicationLoader"]
     }
 }
-
diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index fc90b680d..dc8111b51 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -9,12 +9,9 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-
     <application
         android:allowBackup="false"
         android:icon="@mipmap/ic_launcher"
diff --git a/TMessagesProj/config/debug/AndroidManifest_SDK23.xml b/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
index 6bb983704..989d4ffa6 100644
--- a/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
+++ b/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
@@ -9,14 +9,11 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.CALL_PHONE" />
     <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
 
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-
     <application
         android:allowBackup="false"
         android:icon="@mipmap/ic_launcher"
diff --git a/TMessagesProj/config/release/AndroidManifest.xml b/TMessagesProj/config/release/AndroidManifest.xml
index 966d152aa..dcf354cca 100644
--- a/TMessagesProj/config/release/AndroidManifest.xml
+++ b/TMessagesProj/config/release/AndroidManifest.xml
@@ -9,12 +9,9 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-
     <application
         android:allowBackup="false"
         android:icon="@mipmap/ic_launcher"
diff --git a/TMessagesProj/config/release/AndroidManifest_SDK23.xml b/TMessagesProj/config/release/AndroidManifest_SDK23.xml
index 6b238c105..cbffaee9b 100644
--- a/TMessagesProj/config/release/AndroidManifest_SDK23.xml
+++ b/TMessagesProj/config/release/AndroidManifest_SDK23.xml
@@ -9,14 +9,11 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.CALL_PHONE" />
     <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
 
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-
     <application
         android:allowBackup="false"
         android:icon="@mipmap/ic_launcher"
diff --git a/TMessagesProj/proguard-rules.pro b/TMessagesProj/proguard-rules.pro
index 344807a02..5832da641 100644
--- a/TMessagesProj/proguard-rules.pro
+++ b/TMessagesProj/proguard-rules.pro
@@ -16,4 +16,9 @@
 -dontwarn com.googlecode.mp4parser.**
 # Use -keep to explicitly keep any other classes shrinking would remove
 -dontoptimize
--dontobfuscate
\ No newline at end of file
+-dontobfuscate
+
+# https://github.com/osmdroid/osmdroid/issues/633
+-dontwarn org.osmdroid.tileprovider.modules.NetworkAvailabliltyCheck
+# Osmdroid
+-dontwarn org.osmdroid.**
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index 1ee134eef..92821fb98 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -356,27 +356,7 @@ public static void removeAdjustResize(Activity activity, int classGuid) {
     }
 
     public static boolean isGoogleMapsInstalled(final BaseFragment fragment) {
-        try {
-            ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
-            return true;
-        } catch (PackageManager.NameNotFoundException e) {
-            if (fragment.getParentActivity() == null) {
-                return false;
-            }
-            AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getParentActivity());
-            builder.setMessage(LocaleController.getString("InstallGoogleMaps", R.string.InstallGoogleMaps));
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
-                try {
-                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.google.android.apps.maps"));
-                    fragment.getParentActivity().startActivityForResult(intent, 500);
-                } catch (Exception e1) {
-                    FileLog.e(e1);
-                }
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            fragment.showDialog(builder.create());
-            return false;
-        }
+        return true;
     }
 
     public static int[] toIntArray(List<Integer> integers) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java
index 237e998d4..3b5706899 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharingLiveLocationCell.java
@@ -19,7 +19,7 @@
 import android.view.Gravity;
 import android.widget.FrameLayout;
 
-import com.google.android.gms.maps.model.LatLng;
+import org.osmdroid.util.GeoPoint;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ContactsController;
@@ -205,9 +205,9 @@ public void setDialog(LocationActivity.LiveLocation info, Location userLocation)
             }
         }
 
-        LatLng position = info.marker.getPosition();
-        location.setLatitude(position.latitude);
-        location.setLongitude(position.longitude);
+        GeoPoint position = info.marker.getPosition();
+        location.setLatitude(position.getLatitude());
+        location.setLongitude(position.getLongitude());
 
         String time = LocaleController.formatLocationUpdateDate(info.object.edit_date != 0 ? info.object.edit_date : info.object.date);
         if (userLocation != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index bd33231d5..dc5c39d9b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -4,6 +4,7 @@
  * You should have received a copy of the license in this archive (see LICENSE).
  *
  * Copyright Nikolai Kudashov, 2013-2018.
+ * Copyright Ruslan Boitsov, 2017-2019.
  */
 
 package org.telegram.ui;
@@ -29,12 +30,15 @@
 import android.graphics.PorterDuffColorFilter;
 import android.graphics.RectF;
 import android.graphics.Shader;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.location.Location;
 import android.location.LocationManager;
 import android.net.Uri;
 import android.os.Build;
 import android.util.SparseArray;
+import android.text.Html;
+import android.text.method.LinkMovementMethod;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
@@ -43,21 +47,23 @@
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-
-import com.google.android.gms.maps.CameraUpdate;
-import com.google.android.gms.maps.CameraUpdateFactory;
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.MapView;
-
-import com.google.android.gms.maps.MapsInitializer;
-import com.google.android.gms.maps.model.BitmapDescriptorFactory;
-import com.google.android.gms.maps.model.CircleOptions;
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.LatLngBounds;
-import com.google.android.gms.maps.model.Marker;
-import com.google.android.gms.maps.model.MarkerOptions;
+import android.widget.TextView;
+
+import org.osmdroid.api.IMapController;
+import org.osmdroid.config.Configuration;
+import org.osmdroid.tileprovider.tilesource.ITileSource;
+import org.osmdroid.tileprovider.tilesource.TileSourceFactory;
+import org.osmdroid.tileprovider.tilesource.XYTileSource;
+import org.osmdroid.util.BoundingBox;
+import org.osmdroid.views.MapView;
+import org.osmdroid.util.GeoPoint;
+import org.osmdroid.views.overlay.Marker;
+import org.osmdroid.views.overlay.mylocation.GpsMyLocationProvider;
+import org.osmdroid.views.overlay.mylocation.IMyLocationProvider;
+import org.osmdroid.views.overlay.mylocation.MyLocationNewOverlay;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.LocationController;
@@ -112,7 +118,6 @@
         public Marker marker;
     }
 
-    private GoogleMap googleMap;
     private MapView mapView;
     private EmptyTextProgressView emptyView;
     private FrameLayout mapViewClip;
@@ -127,6 +132,7 @@
     private LinearLayoutManager layoutManager;
     private AvatarDrawable avatarDrawable;
     private ActionBarMenuItem otherItem;
+    private TextView attributionOverlay;
 
     private boolean checkGpsEnabled = true;
 
@@ -158,7 +164,6 @@
     private MessageObject messageObject;
     private boolean userLocationMoved = false;
     private boolean firstWas = false;
-    private CircleOptions circleOptions;
     private LocationActivityDelegate delegate;
 
     private int liveLocationType;
@@ -166,9 +171,11 @@
     private int overScrollHeight = AndroidUtilities.displaySize.x - ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(66);
 
     private final static int share = 1;
-    private final static int map_list_menu_map = 2;
-    private final static int map_list_menu_satellite = 3;
-    private final static int map_list_menu_hybrid = 4;
+    private final static int map_list_menu_osm = 2;
+    private final static int map_list_menu_wiki = 3;
+    private final static int map_list_menu_cartodark = 4;
+
+    private MyLocationNewOverlay myLocationOverlay;
 
     public interface LocationActivityDelegate {
         void didSelectLocation(TLRPC.MessageMedia location, int live);
@@ -201,20 +208,9 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.didReceiveNewMessages);
         NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
         NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.replaceMessagesObjects);
-        try {
-            if (googleMap != null) {
-                googleMap.setMyLocationEnabled(false);
-            }
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-        try {
-            if (mapView != null) {
-                mapView.onDestroy();
-            }
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
+        // TODO
+        // proper exit, like upstream does with
+        // setMyLocationEnabled(false);
         if (adapter != null) {
             adapter.destroy();
         }
@@ -241,17 +237,36 @@ public View createView(Context context) {
             public void onItemClick(int id) {
                 if (id == -1) {
                     finishFragment();
-                } else if (id == map_list_menu_map) {
-                    if (googleMap != null) {
-                        googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
+                } else if (id == map_list_menu_osm) {
+                    if (mapView != null) {
+                        attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"));
+                        mapView.setTileSource(TileSourceFactory.MAPNIK);
                     }
-                } else if (id == map_list_menu_satellite) {
-                    if (googleMap != null) {
-                        googleMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
+                } else if (id == map_list_menu_wiki) {
+                    if (mapView != null) {
+                        // Create a custom tile source
+                        ITileSource tileSource = new XYTileSource(
+                                "Wikimedia", 0, 19,
+                                256, ".png",
+                                new String[] {"https://maps.wikimedia.org/osm-intl/"},
+                                "© OpenStreetMap contributors");
+                        attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"));
+                        mapView.setTileSource(tileSource);
                     }
-                } else if (id == map_list_menu_hybrid) {
-                    if (googleMap != null) {
-                        googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
+                } else if (id == map_list_menu_cartodark) {
+                    if (mapView != null) {
+                        // Create a custom tile source
+                        ITileSource tileSource = new XYTileSource(
+                                "Carto Dark", 0, 20,
+                                256, ".png",
+                                new String[] {
+                                        "https://cartodb-basemaps-a.global.ssl.fastly.net/dark_all/",
+                                        "https://cartodb-basemaps-b.global.ssl.fastly.net/dark_all/",
+                                        "https://cartodb-basemaps-c.global.ssl.fastly.net/dark_all/",
+                                        "https://cartodb-basemaps-d.global.ssl.fastly.net/dark_all/"},
+                                "© OpenStreetMap contributors, © CARTO");
+                        attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, © <a href=\"https://carto.com/attributions\">CARTO</a>"));
+                        mapView.setTileSource(tileSource);
                     }
                 } else if (id == share) {
                     try {
@@ -322,9 +337,9 @@ public void onTextChanged(EditText editText) {
         }
 
         otherItem = menu.addItem(0, R.drawable.ic_ab_other);
-        otherItem.addSubItem(map_list_menu_map, R.drawable.msg_map, LocaleController.getString("Map", R.string.Map));
-        otherItem.addSubItem(map_list_menu_satellite, R.drawable.msg_satellite, LocaleController.getString("Satellite", R.string.Satellite));
-        otherItem.addSubItem(map_list_menu_hybrid, R.drawable.msg_hybrid, LocaleController.getString("Hybrid", R.string.Hybrid));
+        otherItem.addSubItem(map_list_menu_osm, R.drawable.msg_map, "Standard OSM");
+        otherItem.addSubItem(map_list_menu_wiki, R.drawable.msg_map, "Wikimedia");
+        otherItem.addSubItem(map_list_menu_cartodark, R.drawable.msg_map, "Carto Dark");
         otherItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
 
         fragmentView = new FrameLayout(context) {
@@ -379,6 +394,7 @@ public void getOutline(View view, Outline outline) {
         searchWas = false;
         searching = false;
         mapViewClip = new FrameLayout(context);
+        mapViewClip.addView(getAttributionOverlay(context), LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM, LocaleController.isRTL ? 0 : 4, 0, LocaleController.isRTL ? 4 : 0, 5));
         mapViewClip.setBackgroundDrawable(new MapPlaceholderDrawable());
         if (adapter != null) {
             adapter.destroy();
@@ -423,8 +439,9 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
         });
         listView.setOnItemClickListener((view, position) -> {
             if (position == 1 && messageObject != null && !messageObject.isLiveLocation()) {
-                if (googleMap != null) {
-                    googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long), googleMap.getMaxZoomLevel() - 4));
+                if (mapView != null) {
+                    final IMapController controller = mapView.getController();
+                    controller.animateTo(new GeoPoint(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long),mapView.getMaxZoomLevel() -2, null);
                 }
             } else if (position == 1 && liveLocationType != 2) {
                 if (delegate != null && userLocation != null) {
@@ -467,7 +484,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                     }
                     finishFragment();
                 } else if (object instanceof LiveLocation) {
-                    googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(((LiveLocation) object).marker.getPosition(), googleMap.getMaxZoomLevel() - 4));
+                    final IMapController controller = mapView.getController();
+                    controller.animateTo(((LiveLocation) object).marker.getPosition(), mapView.getMaxZoomLevel() -2 ,null);
                 }
             }
         });
@@ -481,9 +499,11 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
 
         frameLayout.addView(mapViewClip, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
 
+        Configuration.getInstance().setUserAgentValue("Telegram-FOSS(F-Droid) "+BuildConfig.VERSION_NAME);
+
         mapView = new MapView(context) {
             @Override
-            public boolean onInterceptTouchEvent(MotionEvent ev) {
+            public boolean onTouchEvent(MotionEvent ev) {
                 if (messageObject == null) {
                     if (ev.getAction() == MotionEvent.ACTION_DOWN) {
                         if (animatorSet != null) {
@@ -514,43 +534,27 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                             animatorSet.start();
                             userLocationMoved = true;
                         }
-                        if (googleMap != null && userLocation != null) {
-                            userLocation.setLatitude(googleMap.getCameraPosition().target.latitude);
-                            userLocation.setLongitude(googleMap.getCameraPosition().target.longitude);
+                        if (mapView != null && userLocation != null) {
+                            userLocation.setLatitude(mapView.getMapCenter().getLatitude());
+                            userLocation.setLongitude(mapView.getMapCenter().getLongitude());
                         }
                         adapter.setCustomLocation(userLocation);
                     }
                 }
-                return super.onInterceptTouchEvent(ev);
+                return super.onTouchEvent(ev);
             }
         };
-        final MapView map = mapView;
-        new Thread(() -> {
-            try {
-                map.onCreate(null);
-            } catch (Exception e) {
-                //this will cause exception, but will preload google maps?
+
+        AndroidUtilities.runOnUIThread(() -> {
+        if (mapView != null && getParentActivity() != null) {
+            mapView.setPadding(AndroidUtilities.dp(70), 0, AndroidUtilities.dp(70), AndroidUtilities.dp(10));
+            onMapInit();
+            mapsInitialized = true;
+            if (onResumeCalled) {
+                mapView.onResume();
             }
-            AndroidUtilities.runOnUIThread(() -> {
-                if (mapView != null && getParentActivity() != null) {
-                    try {
-                        map.onCreate(null);
-                        MapsInitializer.initialize(ApplicationLoader.applicationContext);
-                        mapView.getMapAsync(map1 -> {
-                            googleMap = map1;
-                            googleMap.setPadding(AndroidUtilities.dp(70), 0, AndroidUtilities.dp(70), AndroidUtilities.dp(10));
-                            onMapInit();
-                        });
-                        mapsInitialized = true;
-                        if (onResumeCalled) {
-                            mapView.onResume();
-                        }
-                    } catch (Exception e) {
-                        FileLog.e(e);
-                    }
-                }
-            });
-        }).start();
+        }
+    });
 
         View shadow = new View(context);
         shadow.setBackgroundResource(R.drawable.header_shadow_reverse);
@@ -660,18 +664,21 @@ public void getOutline(View view, Outline outline) {
                 }
             }
             if (messageObject != null) {
-                if (myLocation != null && googleMap != null) {
-                    googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(myLocation.getLatitude(), myLocation.getLongitude()), googleMap.getMaxZoomLevel() - 4));
+                if (myLocation != null && mapView != null) {
+                    final IMapController controller = mapView.getController();
+                    controller.animateTo(new GeoPoint(myLocation.getLatitude(), myLocation.getLongitude()), mapView.getMaxZoomLevel() - 2, null);
                 }
             } else {
-                if (myLocation != null && googleMap != null) {
+                if (myLocation != null && mapView != null) {
                     AnimatorSet animatorSet = new AnimatorSet();
                     animatorSet.setDuration(200);
                     animatorSet.play(ObjectAnimator.ofFloat(locationButton, "alpha", 0.0f));
                     animatorSet.start();
                     adapter.setCustomLocation(null);
                     userLocationMoved = false;
-                    googleMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(myLocation.getLatitude(), myLocation.getLongitude())));
+
+                    final IMapController controller = mapView.getController();
+                    controller.animateTo(new GeoPoint(myLocation.getLatitude(), myLocation.getLongitude()));
                 }
             }
         });
@@ -684,6 +691,15 @@ public void getOutline(View view, Outline outline) {
         return fragmentView;
     }
 
+    private TextView getAttributionOverlay(Context context) {
+        attributionOverlay = new TextView(context);
+        attributionOverlay.setText(Html.fromHtml("© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"));
+        attributionOverlay.setShadowLayer(1,-1,-1, Color.WHITE);
+        attributionOverlay.setLinksClickable(true);
+        attributionOverlay.setMovementMethod(LinkMovementMethod.getInstance());
+        return attributionOverlay;
+    }
+
     private Bitmap createUserBitmap(LiveLocation liveLocation) {
         Bitmap result = null;
         try {
@@ -750,7 +766,7 @@ private int getMessageId(TLRPC.Message message) {
 
     private LiveLocation addUserMarker(TLRPC.Message message) {
         LiveLocation liveLocation;
-        LatLng latLng = new LatLng(message.media.geo.lat, message.media.geo._long);
+        GeoPoint latLng = new GeoPoint(message.media.geo.lat, message.media.geo._long);
         if ((liveLocation = markersMap.get(message.from_id)) == null) {
             liveLocation = new LiveLocation();
             liveLocation.object = message;
@@ -769,17 +785,27 @@ private LiveLocation addUserMarker(TLRPC.Message message) {
             }
 
             try {
-                MarkerOptions options = new MarkerOptions().position(latLng);
+                Marker marker = new Marker(mapView);
+                marker.setPosition(latLng);
+                // InfoWindow workaround
+                marker.setOnMarkerClickListener(new Marker.OnMarkerClickListener() {
+                    @Override
+                    public boolean onMarkerClick(Marker marker, MapView mapView) {
+                        return false;
+                    }
+                });
                 Bitmap bitmap = createUserBitmap(liveLocation);
                 if (bitmap != null) {
-                    options.icon(BitmapDescriptorFactory.fromBitmap(bitmap));
-                    options.anchor(0.5f, 0.907f);
-                    liveLocation.marker = googleMap.addMarker(options);
+                    marker.setIcon(new BitmapDrawable(getParentActivity().getResources(), bitmap));
+                    marker.setAnchor(0.5f, 0.907f);
+                    mapView.getOverlays().add(marker);
+                    liveLocation.marker = marker;
+
                     markers.add(liveLocation);
                     markersMap.put(liveLocation.id, liveLocation);
                     LocationController.SharingLocationInfo myInfo = LocationController.getInstance(currentAccount).getSharingLocationInfo(dialogId);
                     if (liveLocation.id == UserConfig.getInstance(currentAccount).getClientUserId() && myInfo != null && liveLocation.object.id == myInfo.mid && myLocation != null) {
-                        liveLocation.marker.setPosition(new LatLng(myLocation.getLatitude(), myLocation.getLongitude()));
+                        liveLocation.marker.setPosition(new GeoPoint(myLocation.getLatitude(), myLocation.getLongitude()));
                     }
                 }
             } catch (Exception e) {
@@ -793,50 +819,93 @@ private LiveLocation addUserMarker(TLRPC.Message message) {
     }
 
     private void onMapInit() {
-        if (googleMap == null) {
+        if (mapView == null) {
             return;
         }
+        //Paris, Tour Eiffel
+        GeoPoint initLocation = new GeoPoint(48.85825,2.29448);
+        final IMapController controller = mapView.getController();
+        mapView.setMaxZoomLevel(20.0);
+        mapView.setMultiTouchControls(true);
+        mapView.setBuiltInZoomControls(false);
+        controller.setCenter(initLocation);
+        controller.setZoom(7.);
 
         if (messageObject != null) {
             if (messageObject.isLiveLocation()) {
                 LiveLocation liveLocation = addUserMarker(messageObject.messageOwner);
                 if (!getRecentLocations()) {
-                    googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(liveLocation.marker.getPosition(), googleMap.getMaxZoomLevel() - 4));
+                    controller.setCenter(liveLocation.marker.getPosition());
+                    controller.setZoom(mapView.getMaxZoomLevel() - 2);
                 }
             } else {
-                LatLng latLng = new LatLng(userLocation.getLatitude(), userLocation.getLongitude());
-                try {
-                    googleMap.addMarker(new MarkerOptions().position(latLng).icon(BitmapDescriptorFactory.fromResource(R.drawable.map_pin)));
-                } catch (Exception e) {
-                    FileLog.e(e);
+                GeoPoint latLng = new GeoPoint(userLocation.getLatitude(), userLocation.getLongitude());
+                Marker marker = new Marker(mapView);
+                marker.setPosition(latLng);
+                // InfoWindow workaround
+                marker.setOnMarkerClickListener(new Marker.OnMarkerClickListener() {
+                    @Override
+                    public boolean onMarkerClick(Marker marker, MapView mapView) {
+                        return false;
+                    }
+                });
+                if (Build.VERSION.SDK_INT >= 21) {
+                    marker.setIcon(getParentActivity().getDrawable(R.drawable.map_pin));
+                } else {
+                    marker.setIcon(getParentActivity().getResources().getDrawable(R.drawable.map_pin));
                 }
-                CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 4);
-                googleMap.moveCamera(position);
+                marker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM);
+                mapView.getOverlays().add(marker);
+                controller.setCenter(latLng);
+                controller.setZoom(mapView.getMaxZoomLevel() - 2);
                 firstFocus = false;
                 getRecentLocations();
             }
         } else {
             userLocation = new Location("network");
-            userLocation.setLatitude(20.659322);
-            userLocation.setLongitude(-11.406250);
+            userLocation.setLatitude(48.85825);
+            userLocation.setLongitude(2.29448);
         }
+        GpsMyLocationProvider imlp = new GpsMyLocationProvider(getParentActivity());
+        imlp.setLocationUpdateMinDistance(10);
+        imlp.setLocationUpdateMinTime(10000);
+        imlp.addLocationSource(LocationManager.NETWORK_PROVIDER);
+        myLocationOverlay = new MyLocationNewOverlay(imlp, mapView) {
+            @Override
+            public void onLocationChanged(final Location location, IMyLocationProvider source) {
+                super.onLocationChanged(location, source);
+                if (location != null) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            positionMarker(location);
+                            LocationController.getInstance(currentAccount).setGoogleMapLocation(location, isFirstLocation);
+                            isFirstLocation = false;
+                        }
+                    });
+                }
+            }
+        };
+        myLocationOverlay.enableMyLocation();
+        myLocationOverlay.setDrawAccuracyEnabled(true);
 
-        try {
-            googleMap.setMyLocationEnabled(true);
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-        googleMap.getUiSettings().setMyLocationButtonEnabled(false);
-        googleMap.getUiSettings().setZoomControlsEnabled(false);
-        googleMap.getUiSettings().setCompassEnabled(false);
-        //googleMap.getUiSettings().setMapToolbarEnabled(false);
-        googleMap.setOnMyLocationChangeListener(location -> {
-            positionMarker(location);
-            LocationController.getInstance(currentAccount).setGoogleMapLocation(location, isFirstLocation);
-            isFirstLocation = false;
+        myLocationOverlay.runOnFirstFix(new Runnable() {
+            public void run() {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        positionMarker(myLocationOverlay.getLastFix());
+                        LocationController.getInstance(currentAccount).setGoogleMapLocation(myLocationOverlay.getLastFix(), isFirstLocation);
+                        isFirstLocation = false;
+                    }
+                });
+            }
         });
+        mapView.getOverlays().add(myLocationOverlay);
         positionMarker(myLocation = getLastLocation());
 
+        attributionOverlay.bringToFront();
+
         if (checkGpsEnabled && getParentActivity() != null) {
             checkGpsEnabled = false;
             if (!getParentActivity().getPackageManager().hasSystemFeature(PackageManager.FEATURE_LOCATION_GPS)) {
@@ -952,8 +1021,8 @@ private void updateClipView(int firstVisibleItem) {
                 layoutParams = (FrameLayout.LayoutParams) mapView.getLayoutParams();
                 if (layoutParams != null && layoutParams.height != overScrollHeight + AndroidUtilities.dp(10)) {
                     layoutParams.height = overScrollHeight + AndroidUtilities.dp(10);
-                    if (googleMap != null) {
-                        googleMap.setPadding(AndroidUtilities.dp(70), 0, AndroidUtilities.dp(70), AndroidUtilities.dp(10));
+                    if (mapView != null) {
+                        mapView.setPadding(AndroidUtilities.dp(70), 0, AndroidUtilities.dp(70), AndroidUtilities.dp(10));
                     }
                     mapView.setLayoutParams(layoutParams);
                 }
@@ -987,8 +1056,8 @@ private void fixLayoutInternal(final boolean resume) {
             layoutParams = (FrameLayout.LayoutParams) mapView.getLayoutParams();
             if (layoutParams != null) {
                 layoutParams.height = overScrollHeight + AndroidUtilities.dp(10);
-                if (googleMap != null) {
-                    googleMap.setPadding(AndroidUtilities.dp(70), 0, AndroidUtilities.dp(70), AndroidUtilities.dp(10));
+                if (mapView != null) {
+                    mapView.setPadding(AndroidUtilities.dp(70), 0, AndroidUtilities.dp(70), AndroidUtilities.dp(10));
                 }
                 mapView.setLayoutParams(layoutParams);
             }
@@ -1008,16 +1077,20 @@ private void fixLayoutInternal(final boolean resume) {
     }
 
     private Location getLastLocation() {
-        LocationManager lm = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
-        List<String> providers = lm.getProviders(true);
-        Location l = null;
-        for (int i = providers.size() - 1; i >= 0; i--) {
-            l = lm.getLastKnownLocation(providers.get(i));
-            if (l != null) {
-                break;
+        if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && getParentActivity().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+            return null;
+        } else {
+            LocationManager lm = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
+            List<String> providers = lm.getProviders(true);
+            Location l = null;
+            for (int i = providers.size() - 1; i >= 0; i--) {
+                l = lm.getLastKnownLocation(providers.get(i));
+                if (l != null) {
+                    break;
+                }
             }
+            return l;
         }
-        return l;
     }
 
     private void positionMarker(Location location) {
@@ -1028,10 +1101,10 @@ private void positionMarker(Location location) {
         LiveLocation liveLocation = markersMap.get(UserConfig.getInstance(currentAccount).getClientUserId());
         LocationController.SharingLocationInfo myInfo = LocationController.getInstance(currentAccount).getSharingLocationInfo(dialogId);
         if (liveLocation != null && myInfo != null && liveLocation.object.id == myInfo.mid) {
-            liveLocation.marker.setPosition(new LatLng(location.getLatitude(), location.getLongitude()));
+            liveLocation.marker.setPosition(new GeoPoint(location.getLatitude(), location.getLongitude()));
         }
-        if (messageObject == null && googleMap != null) {
-            LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
+        if (messageObject == null && mapView != null) {
+            GeoPoint latLng = new GeoPoint(location.getLatitude(), location.getLongitude());
             if (adapter != null) {
                 if (adapter.isPulledUp()) {
                     adapter.searchPlacesWithQuery(null, myLocation, true);
@@ -1041,12 +1114,13 @@ private void positionMarker(Location location) {
             if (!userLocationMoved) {
                 userLocation = new Location(location);
                 if (firstWas) {
-                    CameraUpdate position = CameraUpdateFactory.newLatLng(latLng);
-                    googleMap.animateCamera(position);
+                    final IMapController controller = mapView.getController();
+                    controller.animateTo(latLng);
                 } else {
                     firstWas = true;
-                    CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 4);
-                    googleMap.moveCamera(position);
+                    final IMapController controller = mapView.getController();
+                    controller.setZoom(mapView.getMaxZoomLevel() - 2);
+                    controller.setCenter(latLng);
                 }
             }
         } else {
@@ -1064,30 +1138,34 @@ public void setDialogId(long did) {
     }
 
     private void fetchRecentLocations(ArrayList<TLRPC.Message> messages) {
-        LatLngBounds.Builder builder = null;
+        BoundingBox builder = null;
+        List<GeoPoint> GeoPoints = new ArrayList<>();
         if (firstFocus) {
-            builder = new LatLngBounds.Builder();
+            builder = null;
         }
         int date = ConnectionsManager.getInstance(currentAccount).getCurrentTime();
         for (int a = 0; a < messages.size(); a++) {
             TLRPC.Message message = messages.get(a);
             if (message.date + message.media.period > date) {
-                if (builder != null) {
-                    LatLng latLng = new LatLng(message.media.geo.lat, message.media.geo._long);
-                    builder.include(latLng);
+                if (firstFocus) {
+                    GeoPoint latLng = new GeoPoint(message.media.geo.lat, message.media.geo._long);
+                    GeoPoints.add(latLng);
                 }
                 addUserMarker(message);
             }
         }
-        if (builder != null) {
+        if (GeoPoints.size()>0) {
+            builder = BoundingBox.fromGeoPoints(GeoPoints);
+        }
+        if (firstFocus) {
             firstFocus = false;
             adapter.setLiveLocations(markers);
             if (messageObject.isLiveLocation()) {
                 try {
-                    final LatLngBounds bounds = builder.build();
+                    final BoundingBox bounds = builder;
                     if (messages.size() > 1) {
                         try {
-                            googleMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, AndroidUtilities.dp(60)));
+                            mapView.zoomToBoundingBox(bounds, false,AndroidUtilities.dp(60));
                         } catch (Exception e) {
                             FileLog.e(e);
                         }
@@ -1120,7 +1198,7 @@ private boolean getRecentLocations() {
         ConnectionsManager.getInstance(currentAccount).sendRequest(req, (response, error) -> {
             if (response != null) {
                 AndroidUtilities.runOnUIThread(() -> {
-                    if (googleMap == null) {
+                    if (mapView == null) {
                         return;
                     }
                     TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
@@ -1148,12 +1226,8 @@ public void didReceivedNotification(int id, int account, Object... args) {
         if (id == NotificationCenter.closeChats) {
             removeSelfFromStack();
         } else if (id == NotificationCenter.locationPermissionGranted) {
-            if (googleMap != null) {
-                try {
-                    googleMap.setMyLocationEnabled(true);
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
+            if (mapView != null && mapsInitialized) {
+                myLocationOverlay.enableMyLocation();
             }
         } else if (id == NotificationCenter.didReceiveNewMessages) {
             long did = (Long) args[0];
@@ -1190,7 +1264,7 @@ public void didReceivedNotification(int id, int account, Object... args) {
                 if (liveLocation != null) {
                     LocationController.SharingLocationInfo myInfo = LocationController.getInstance(currentAccount).getSharingLocationInfo(did);
                     if (myInfo == null || myInfo.mid != messageObject.getId()) {
-                        liveLocation.marker.setPosition(new LatLng(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long));
+                        liveLocation.marker.setPosition(new GeoPoint(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long));
                     }
                     updated = true;
                 }
@@ -1210,6 +1284,10 @@ public void onPause() {
             } catch (Exception e) {
                 FileLog.e(e);
             }
+            if(mapView.getOverlays().contains(myLocationOverlay)) {
+                mapView.getOverlays().remove(myLocationOverlay);
+            }
+            myLocationOverlay.disableMyLocation();
         }
         onResumeCalled = false;
     }
@@ -1222,18 +1300,13 @@ public void onResume() {
         if (mapView != null && mapsInitialized) {
             try {
                 mapView.onResume();
-            } catch (Throwable e) {
-                FileLog.e(e);
-            }
-        }
-        onResumeCalled = true;
-        if (googleMap != null) {
-            try {
-                googleMap.setMyLocationEnabled(true);
             } catch (Exception e) {
                 FileLog.e(e);
             }
+            mapView.getOverlays().add(myLocationOverlay);
+            myLocationOverlay.enableMyLocation();
         }
+        onResumeCalled = true;
         fixLayoutInternal(true);
         if (checkPermission && Build.VERSION.SDK_INT >= 23) {
             Activity activity = getParentActivity();
@@ -1246,14 +1319,6 @@ public void onResume() {
         }
     }
 
-    @Override
-    public void onLowMemory() {
-        super.onLowMemory();
-        if (mapView != null && mapsInitialized) {
-            mapView.onLowMemory();
-        }
-    }
-
     public void setDelegate(LocationActivityDelegate delegate) {
         this.delegate = delegate;
     }
