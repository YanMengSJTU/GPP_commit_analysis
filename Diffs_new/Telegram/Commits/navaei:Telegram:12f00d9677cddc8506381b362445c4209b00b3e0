diff --git a/TMessagesProj/jni/tgnet/Connection.cpp b/TMessagesProj/jni/tgnet/Connection.cpp
index 2b4618ca1..fd4f586a9 100644
--- a/TMessagesProj/jni/tgnet/Connection.cpp
+++ b/TMessagesProj/jni/tgnet/Connection.cpp
@@ -114,14 +114,13 @@ void Connection::onReceivedData(NativeByteBuffer *buffer) {
         hasSomeDataSinceLastConnect = true;
 
         //TODO must delete
-        uint32_t currentPacketLength = buffer->readUint32(nullptr)-12;
-        uint32_t sequenceFromServer = buffer->readUint32(nullptr);
-        if (currentPacketLength + 4 < buffer->remaining()) {
-            int len = currentPacketLength;
-            int remaning = buffer->remaining();
-        }
+//        uint32_t currentPacketLength = buffer->readUint32(nullptr)-12;
+//        uint32_t sequenceFromServer = buffer->readUint32(nullptr);
+//        if (currentPacketLength + 4 < buffer->remaining()) {
+//            int len = currentPacketLength;
+//            int remaning = buffer->remaining();
+//        }
 
-        /*
         uint32_t currentPacketLength = 0;
         uint32_t mark = buffer->position();
         uint8_t fByte = buffer->readByte(nullptr);
@@ -199,7 +198,7 @@ void Connection::onReceivedData(NativeByteBuffer *buffer) {
             }
             return;
         }
-*/
+
 
         uint32_t old = buffer->limit();
         buffer->limit(buffer->position() + currentPacketLength);
diff --git a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
index 054d55001..9d0daf564 100644
--- a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
+++ b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
@@ -750,11 +750,11 @@ void ConnectionsManager::onConnectionDataReceived(Connection *connection, Native
             delete object;
         }
     } else {
-//        if (length < 24 + 32 || (length - 24) % 16 != 0 || !datacenter->decryptServerResponse(keyId, data->bytes() + mark + 8, data->bytes() + mark + 24, length - 24)) {
-//            DEBUG_E("connection(%p) unable to decrypt server response", connection);
-//            connection->reconnect();
-//            return;
-//        }
+        if (length < 24 + 32 || (length - 24) % 16 != 0 || !datacenter->decryptServerResponse(keyId, data->bytes() + mark + 8, data->bytes() + mark + 24, length - 24)) {
+            DEBUG_E("connection(%p) unable to decrypt server response", connection);
+            connection->reconnect();
+            return;
+        }
         data->position(mark + 24);
 
         int64_t messageServerSalt = data->readInt64(&error);
