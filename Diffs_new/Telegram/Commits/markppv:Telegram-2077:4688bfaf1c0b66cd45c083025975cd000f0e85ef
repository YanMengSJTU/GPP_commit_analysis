diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 6da013ac4..f5b787a58 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -378,4 +378,8 @@ public static String MD5(String md5) {
         }
         return null;
     }
+
+    public static float lerp(float a, float b, float f) {
+        return a + f * (b - a);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index efbdcfe16..2174e361f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -24,7 +24,6 @@
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
-import androidx.annotation.Keep;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
@@ -39,6 +38,8 @@
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 
+import androidx.annotation.Keep;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
@@ -1345,6 +1346,10 @@ public float getThemeAnimationValue() {
     }
 
     public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
+        animateThemedValues(theme, nightTheme, true, true);
+    }
+
+    public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme, boolean animated, boolean removeWallpaperOverride) {
         if (transitionAnimationInProgress || startedTracking) {
             animateThemeAfterAnimation = true;
             animateSetThemeAfterAnimation = theme;
@@ -1382,7 +1387,7 @@ public void animateThemedValues(Theme.ThemeInfo theme, boolean nightTheme) {
                     }
                 }
                 if (i == 0) {
-                    Theme.applyTheme(theme, nightTheme);
+                    Theme.applyTheme(theme, nightTheme, removeWallpaperOverride);
                 }
                 animateEndColors[i] = new int[themeAnimatorDescriptions[i].length];
                 for (int a = 0; a < themeAnimatorDescriptions[i].length; a++) {
@@ -1431,7 +1436,7 @@ public void onAnimationCancel(Animator animation) {
             }
             Theme.setAnimatingColor(true);
             themeAnimatorSet.playTogether(ObjectAnimator.ofFloat(this, "themeAnimationValue", 0.0f, 1.0f));
-            themeAnimatorSet.setDuration(200);
+            themeAnimatorSet.setDuration(animated ? 200 : 0);
             themeAnimatorSet.start();
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
index 45dd88ad1..5107be27c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -42,8 +42,11 @@
 import android.os.SystemClock;
 import android.text.TextPaint;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.StateSet;
 
+import androidx.annotation.ColorInt;
+
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.telegram.messenger.AndroidUtilities;
@@ -58,6 +61,9 @@
 import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.time.SunDate;
+import org.telegram.ui.ActionBar.tinter.ArcticThemeTinter;
+import org.telegram.ui.ActionBar.tinter.DarkThemeTinter;
+import org.telegram.ui.ActionBar.tinter.DefaultThemeTinter;
 import org.telegram.ui.ActionBar.tinter.ThemeTinter;
 import org.telegram.ui.Components.CombinedDrawable;
 import org.telegram.ui.Components.RLottieDrawable;
@@ -79,6 +85,10 @@
 public class Theme {
 
     public static class ThemeInfo {
+
+        private static final ThemeTinter defaultThemeTinter =
+                new DefaultThemeTinter();
+
         public String name;
         public String pathToFile;
         public String assetName;
@@ -88,6 +98,8 @@
         public int previewOutColor;
         public int sortIndex;
 
+        public ThemeTinter tinter = defaultThemeTinter;
+
         public JSONObject getSaveJson() {
             try {
                 JSONObject jsonObject = new JSONObject();
@@ -105,10 +117,8 @@ public String getName() {
                 return LocaleController.getString("Default", R.string.Default);
             } else if ("Blue".equals(name)) {
                 return LocaleController.getString("ThemeBlue", R.string.ThemeBlue);
-            } else if ("Dark".equals(name)) {
+            } else if ("Dark".equals(name) || "Dark Blue".equals(name)) {
                 return LocaleController.getString("ThemeDark", R.string.ThemeDark);
-            } else if ("Dark Blue".equals(name)) {
-                return LocaleController.getString("ThemeDarkBlue", R.string.ThemeDarkBlue);
             } else if ("Graphite".equals(name)) {
                 return LocaleController.getString("ThemeGraphite", R.string.ThemeGraphite);
             } else if ("Arctic Blue".equals(name)) {
@@ -117,6 +127,15 @@ public String getName() {
             return name;
         }
 
+        public ThemeTinter getTinter() {
+            return tinter;
+        }
+
+        public boolean hasTintColors() {
+            final int[] baseTintColors = tinter.getBaseTintColors();
+            return baseTintColors != null && baseTintColors.length > 0;
+        }
+
         public boolean isDark() {
             return "Dark".equals(name) || "Dark Blue".equals(name) || "Graphite".equals(name);
         }
@@ -1082,7 +1101,7 @@ public void run() {
     private static HashMap<String, Integer> originalCurrentColors;
     private static HashMap<String, Integer> animatingColors;
 
-    private static ThemeTinter tinter;
+    private static HashMap<String, Integer> tintColors = new HashMap<>();
 
     static {
         originalDefaultColors.put(key_dialogBackground, 0xffffffff);
@@ -1819,7 +1838,7 @@ public void run() {
         themes.add(currentDayTheme = currentTheme = defaultTheme = themeInfo);
         themesDict.put("Default", defaultTheme);
 
-        themeInfo = new ThemeInfo();
+       /* themeInfo = new ThemeInfo();
         themeInfo.name = "Dark";
         themeInfo.assetName = "dark.attheme";
         themeInfo.previewBackgroundColor = 0xff5a5d61;
@@ -1827,7 +1846,7 @@ public void run() {
         themeInfo.previewOutColor = 0xff82a8e3;
         themeInfo.sortIndex = 3;
         themes.add(themeInfo);
-        themesDict.put("Dark", themeInfo);
+        themesDict.put("Dark", themeInfo);*/
 
         themeInfo = new ThemeInfo();
         themeInfo.name = "Blue";
@@ -1842,6 +1861,7 @@ public void run() {
         themeInfo = new ThemeInfo();
         themeInfo.name = "Dark Blue";
         themeInfo.assetName = "darkblue.attheme";
+        themeInfo.tinter = new DarkThemeTinter();
         themeInfo.previewBackgroundColor = 0xff5f6e82;
         themeInfo.previewInColor = 0xff76869c;
         themeInfo.previewOutColor = 0xff82a8e3;
@@ -1864,6 +1884,7 @@ public void run() {
         themeInfo = new ThemeInfo();
         themeInfo.name = "Arctic Blue";
         themeInfo.assetName = "arctic.attheme";
+        themeInfo.tinter = new ArcticThemeTinter();
         themeInfo.previewBackgroundColor = 0xffffffff;
         themeInfo.previewInColor = 0xffebeef4;
         themeInfo.previewOutColor = 0xff7cb2fe;
@@ -2463,7 +2484,11 @@ public static void applyTheme(ThemeInfo themeInfo) {
     }
 
     public static void applyTheme(ThemeInfo themeInfo, boolean nightTheme) {
-        applyTheme(themeInfo, true, true, nightTheme);
+        applyTheme(themeInfo, nightTheme, true);
+    }
+
+    public static void applyTheme(ThemeInfo themeInfo, boolean nightTheme, boolean removeWallpaperOverride) {
+        applyTheme(themeInfo, true, removeWallpaperOverride, nightTheme);
     }
 
     public static void applyTheme(ThemeInfo themeInfo, boolean save, boolean removeWallpaperOverride, final boolean nightTheme) {
@@ -2487,15 +2512,33 @@ public static void applyTheme(ThemeInfo themeInfo, boolean save, boolean removeW
                 }
                 if (themeInfo.assetName != null) {
                     originalCurrentColors = getThemeFileValues(null, themeInfo.assetName);
-                    tinter = ThemeTinter.get(themeInfo);
-                    currentColors = new HashMap<>(originalCurrentColors.size());
-                    tinter.tint(originalCurrentColors.get(key_chat_outBubble),//Color.parseColor("#3f7c36"),
+                } else {
+                    originalCurrentColors = getThemeFileValues(new File(themeInfo.pathToFile), null);
+                }
+                currentColors = new HashMap<>(originalCurrentColors.size());
+                if (themeInfo.hasTintColors()) {
+                    int tintColor;
+
+                    if (tintColors.containsKey(themeInfo.assetName)) {
+                        tintColor = tintColors.get(themeInfo.assetName);
+                    } else {
+                        tintColor = restoreThemeTintColor(themeInfo);
+
+                        if (tintColor == 0) {
+                            tintColor = themeInfo.getTinter().getBaseTintColors()[0];
+                        }
+
+                        tintColors.put(themeInfo.assetName, tintColor);
+                    }
+
+                    themeInfo.getTinter().tint(tintColor,
                             originalCurrentColors.get(key_chat_outBubble),
-                            new Map[] { originalCurrentColors, originalDefaultColors },
-                            new Map[] { currentColors, defaultColors });
+                            new Map[]{originalCurrentColors, originalDefaultColors},
+                            new Map[]{currentColors, defaultColors});
                 } else {
-                    currentColors = originalCurrentColors = getThemeFileValues(new File(themeInfo.pathToFile), null);
-                    tinter = null;
+                    themeInfo.getTinter().tint(0, 0,
+                            new Map[]{originalCurrentColors, originalDefaultColors},
+                            new Map[]{currentColors, defaultColors});
                 }
             } else {
                 if (!nightTheme && save) {
@@ -2509,7 +2552,6 @@ public static void applyTheme(ThemeInfo themeInfo, boolean save, boolean removeW
                 }
                 currentColors.clear();
                 defaultColors.putAll(originalDefaultColors);
-                tinter = ThemeTinter.defaultThemeTinter;
                 themedWallpaperFileOffset = 0;
                 wallpaper = null;
                 themedWallpaper = null;
@@ -2526,6 +2568,7 @@ public static void applyTheme(ThemeInfo themeInfo, boolean save, boolean removeW
             AndroidUtilities.runOnUIThread(() -> NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.didSetNewTheme, nightTheme));
         } catch (Exception e) {
             FileLog.e(e);
+            Log.e("tele2077", "err", e);
         }
     }
 
@@ -2566,6 +2609,51 @@ public static String getCurrentNightThemeName() {
         return text;
     }
 
+    public static int getTintColor() {
+        return currentTheme.hasTintColors() ? tintColors.get(currentTheme.assetName) : 0;
+    }
+
+    public static void setTintColor(@ColorInt int tintColor) {
+        setTintColor(tintColor, true, true);
+    }
+
+    public static void setTintColor(@ColorInt int tintColor, boolean animated, boolean save) {
+        if (!currentTheme.hasTintColors()) return;
+        if (tintColors.get(currentTheme.assetName) != tintColor) {
+            tintColors.put(currentTheme.assetName, tintColor);
+            if (save) saveThemeTintColor(currentTheme, tintColor);
+            NotificationCenter.getGlobalInstance().postNotificationName(
+                    NotificationCenter.needSetDayNightTheme,
+                    currentTheme, isCurrentThemeNight(),
+                    animated, false);
+        }
+    }
+
+    public static void saveThemeExtraTintColor(ThemeInfo themeInfo, @ColorInt int extraTintColor) {
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt("theme_tint_color_" + themeInfo.assetName, extraTintColor);
+        editor.putInt("theme_extra_tint_color_" + themeInfo.assetName, extraTintColor);
+        editor.commit();
+    }
+
+    public static int restoreThemeExtraTintColor(ThemeInfo themeInfo) {
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+        return preferences.getInt("theme_extra_tint_color_" + themeInfo.assetName, 0);
+    }
+
+    private static void saveThemeTintColor(ThemeInfo themeInfo, @ColorInt int tintColor) {
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt("theme_tint_color_" + themeInfo.assetName, tintColor);
+        editor.commit();
+    }
+
+    public static int restoreThemeTintColor(ThemeInfo themeInfo) {
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+        return preferences.getInt("theme_tint_color_" + themeInfo.assetName, 0);
+    }
+
     public static ThemeInfo getCurrentTheme() {
         return currentDayTheme != null ? currentDayTheme : defaultTheme;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ArcticThemeTinter.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ArcticThemeTinter.java
index 812a7be56..573d3c899 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ArcticThemeTinter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ArcticThemeTinter.java
@@ -4,6 +4,8 @@
 
 import androidx.core.graphics.ColorUtils;
 
+import org.telegram.messenger.Utilities;
+
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -192,6 +194,8 @@
         keys.add(key_chat_outFileProgressSelected);
         keys.add(key_chat_outMediaIconSelected);
         keys.add(key_chat_adminSelectedText);
+        contentColorRules.put(key_chats_verifiedCheck, ColorRule.PRIMARY);
+        contentColorRules.put(key_profile_verifiedCheck, ColorRule.PRIMARY);
         contentColorRules.put(key_chat_attachCheckBoxCheck, ColorRule.PRIMARY);
         contentColorRules.put(key_chat_outAudioSeekbar, ColorRule.TERTIARY);
         contentColorRules.put(key_chat_outAudioSeekbarSelected, ColorRule.TERTIARY);
@@ -255,6 +259,22 @@
         contentColorRules.put(key_chat_outMenuSelected, new ColorRule(-5, -0.37f, 0.98f, 0.7f, 0.75f));
     }
 
+    @Override
+    public int[] getBaseTintColors() {
+        return new int[] {
+                Color.parseColor("#007afe"), // blue
+                Color.parseColor("#01c1ec"), // lightblue
+                Color.parseColor("#28b227"), // green
+                Color.parseColor("#ea6ba3"), // pink
+                Color.parseColor("#ef8201"), // orange
+                Color.parseColor("#9471ee"), // violet
+                Color.parseColor("#d23213"), // red
+                Color.parseColor("#ecb304"), // yellow
+                Color.parseColor("#6d819e"), // gray
+                Color.parseColor("#000000"), // black
+        };
+    }
+
     @Override
     public void tint(int tintColor,
                      int themeAccentColor,
@@ -305,7 +325,7 @@ public void tint(int tintColor,
 
                     int alpha;
                     if (originalSaturation > 0f) {
-                        alpha = (int) (lerp(rule.minAlpha, rule.maxAlpha,
+                        alpha = (int) (Utilities.lerp(rule.minAlpha, rule.maxAlpha,
                                 Math.min(1f, saturation / originalSaturation)) * 255);
                     } else alpha = (int) rule.maxAlpha * 255;
 
@@ -315,10 +335,6 @@ public void tint(int tintColor,
         }
     }
 
-    private static float lerp(float a, float b, float f) {
-        return a + f * (b - a);
-    }
-
     private static class ColorRule {
 
         private final static ColorRule PRIMARY = new ColorRule(0, -1f, 1f);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DarkThemeTinter.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DarkThemeTinter.java
index 18e75d303..2c2a51e3b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DarkThemeTinter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DarkThemeTinter.java
@@ -6,7 +6,60 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.telegram.ui.ActionBar.Theme.*;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_backgroundBlue;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_backgroundCyan;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_backgroundGreen;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_backgroundOrange;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_backgroundPink;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_backgroundRed;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_backgroundViolet;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_nameInMessageBlue;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_nameInMessageCyan;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_nameInMessageGreen;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_nameInMessageOrange;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_nameInMessagePink;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_nameInMessageRed;
+import static org.telegram.ui.ActionBar.Theme.key_avatar_nameInMessageViolet;
+import static org.telegram.ui.ActionBar.Theme.key_calls_callReceivedGreenIcon;
+import static org.telegram.ui.ActionBar.Theme.key_calls_callReceivedRedIcon;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachAudioBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachContactBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachEmptyImage;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachFileBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachGalleryBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachLocationBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachMediaBanBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachPermissionImage;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachPermissionMark;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachPermissionText;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachPhotoBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_attachPollBackground;
+import static org.telegram.ui.ActionBar.Theme.key_chat_outBroadcast;
+import static org.telegram.ui.ActionBar.Theme.key_chat_outGreenCall;
+import static org.telegram.ui.ActionBar.Theme.key_chat_recordedVoiceDot;
+import static org.telegram.ui.ActionBar.Theme.key_chat_reportSpam;
+import static org.telegram.ui.ActionBar.Theme.key_chat_sentError;
+import static org.telegram.ui.ActionBar.Theme.key_chats_draft;
+import static org.telegram.ui.ActionBar.Theme.key_chats_secretIcon;
+import static org.telegram.ui.ActionBar.Theme.key_chats_secretName;
+import static org.telegram.ui.ActionBar.Theme.key_chats_sentError;
+import static org.telegram.ui.ActionBar.Theme.key_checkbox;
+import static org.telegram.ui.ActionBar.Theme.key_contacts_inviteBackground;
+import static org.telegram.ui.ActionBar.Theme.key_dialogRedIcon;
+import static org.telegram.ui.ActionBar.Theme.key_dialogTextRed;
+import static org.telegram.ui.ActionBar.Theme.key_dialogTextRed2;
+import static org.telegram.ui.ActionBar.Theme.key_featuredStickers_delButton;
+import static org.telegram.ui.ActionBar.Theme.key_featuredStickers_delButtonPressed;
+import static org.telegram.ui.ActionBar.Theme.key_location_sendLiveLocationBackground;
+import static org.telegram.ui.ActionBar.Theme.key_switch2Track;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteGreenText;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteGreenText2;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteRedText;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteRedText2;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteRedText3;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteRedText4;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteRedText5;
+import static org.telegram.ui.ActionBar.Theme.key_windowBackgroundWhiteRedText6;
 
 public class DarkThemeTinter implements ThemeTinter {
 
@@ -80,11 +133,29 @@
         notTintingKeys.add(key_windowBackgroundWhiteRedText6);
     }
 
+    @Override
+    public int[] getBaseTintColors() {
+        return new int[] {
+                Color.parseColor("#3A8BE9"), // blue
+                Color.parseColor("#01c1ec"), // lightblue
+                Color.parseColor("#28b227"), // green
+                Color.parseColor("#ea6ba3"), // pink
+                Color.parseColor("#ef8201"), // orange
+                Color.parseColor("#9471ee"), // violet
+                Color.parseColor("#d23213"), // red
+                Color.parseColor("#ecb304"), // yellow
+                Color.parseColor("#6d819e"), // gray
+        };
+    }
+
     @Override
     public void tint(int tintColor, int themeAccentColor, Map<String, Integer>[] inColors, Map<String, Integer>[] outColors) {
         final float[] tintColorHsv = new float[3];
         Color.colorToHSV(tintColor, tintColorHsv);
 
+        tintColorHsv[1] *= 0.731f;
+        tintColorHsv[2] *= 0.59f;
+
         final float[] themeAccentColorHsv = new float[3];
         Color.colorToHSV(themeAccentColor, themeAccentColorHsv);
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DefaultThemeTinter.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DefaultThemeTinter.java
index b68ca5967..4f5700c31 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DefaultThemeTinter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/DefaultThemeTinter.java
@@ -4,6 +4,11 @@
 
 public class DefaultThemeTinter implements ThemeTinter {
 
+    @Override
+    public int[] getBaseTintColors() {
+        return null;
+    }
+
     @Override
     public void tint(int tintColor,
                      int themeAccentColor,
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ThemeTinter.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ThemeTinter.java
index 3aeaee2de..a30e52592 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ThemeTinter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/tinter/ThemeTinter.java
@@ -2,25 +2,11 @@
 
 import androidx.annotation.ColorInt;
 
-import org.telegram.ui.ActionBar.Theme;
-
 import java.util.Map;
 
 public interface ThemeTinter {
 
-    ThemeTinter defaultThemeTinter = new DefaultThemeTinter();
-    ThemeTinter arcticThemeTinter = new ArcticThemeTinter();
-    ThemeTinter darkThemeTinter = new DarkThemeTinter();
-
-    static ThemeTinter get(Theme.ThemeInfo themeInfo) {
-        if ("arctic.attheme".equals(themeInfo.assetName)) {
-            return arcticThemeTinter;
-        } else if ("darkblue.attheme".equals(themeInfo.assetName)) {
-            return darkThemeTinter;
-        } else {
-            return defaultThemeTinter;
-        }
-    }
+    int[] getBaseTintColors();
 
     void tint(@ColorInt int tintColor,
               @ColorInt int themeAccentColor,
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index d6bf70168..0fbef27e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -92,7 +92,9 @@ public static int getColorIndex(int id) {
     }
 
     public static int getColorForId(int id) {
-        return Theme.getColor(Theme.keys_avatar_background[getColorIndex(id)]);
+        if (id == ID_PLACEHOLDER) {
+            return Theme.getColor(Theme.key_avatar_backgroundInProfileBlue);
+        } else return Theme.getColor(Theme.keys_avatar_background[getColorIndex(id)]);
     }
 
     public static int getButtonColorForId(int id) {
@@ -104,7 +106,9 @@ public static int getIconColorForId(int id) {
     }
 
     public static int getProfileColorForId(int id) {
-        return Theme.getColor(Theme.keys_avatar_background[getColorIndex(id)]);
+        if (id == ID_PLACEHOLDER) {
+            return Theme.getColor(Theme.key_avatar_backgroundInProfileBlue);
+        } else return Theme.getColor(Theme.keys_avatar_background[getColorIndex(id)]);
     }
 
     public static int getProfileTextColorForId(int id) {
@@ -116,7 +120,9 @@ public static int getProfileBackColorForId(int id) {
     }
 
     public static int getNameColorForId(int id) {
-        return Theme.getColor(Theme.keys_avatar_nameInMessage[getColorIndex(id)]);
+        if (id == ID_PLACEHOLDER) {
+            return Theme.getColor(Theme.key_avatar_backgroundInProfileBlue);
+        } else return Theme.getColor(Theme.keys_avatar_nameInMessage[getColorIndex(id)]);
     }
 
     public void setInfo(TLRPC.User user) {
@@ -166,9 +172,7 @@ public int getColor() {
     }
 
     public void setInfo(int id, String firstName, String lastName, boolean isBroadcast, String custom) {
-        if (id == ID_PLACEHOLDER) {
-            color = Theme.getColor(Theme.key_avatar_backgroundInProfileBlue);
-        } else if (isProfile) {
+        if (isProfile) {
             color = getProfileColorForId(id);
         } else {
             color = getColorForId(id);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 786c41baa..589796988 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -42,45 +42,49 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+
 import com.google.android.gms.common.api.Status;
 
 import org.telegram.messenger.AccountInstance;
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.LocationController;
-import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.LocationController;
 import org.telegram.messenger.MediaController;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
 import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.camera.CameraController;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.AlertDialog;
-import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.ActionBar.ActionBarLayout;
+import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.Cells.DrawerAddCell;
 import org.telegram.ui.Cells.DrawerUserCell;
 import org.telegram.ui.Cells.LanguageCell;
-import org.telegram.ui.Components.AudioPlayerAlert;
 import org.telegram.ui.Components.AlertsCreator;
+import org.telegram.ui.Components.AudioPlayerAlert;
 import org.telegram.ui.Components.BlockingUpdateView;
 import org.telegram.ui.Components.EmbedBottomSheet;
 import org.telegram.ui.Components.JoinGroupAlert;
@@ -90,7 +94,6 @@
 import org.telegram.ui.Components.RecyclerListView;
 import org.telegram.ui.Components.SharingLocationsAlert;
 import org.telegram.ui.Components.StickersAlert;
-import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.TermsOfServiceView;
 import org.telegram.ui.Components.ThemeEditorView;
 import org.telegram.ui.Components.UpdateAppAlertDialog;
@@ -101,9 +104,6 @@
 import java.util.List;
 import java.util.Map;
 
-import androidx.recyclerview.widget.DefaultItemAnimator;
-import androidx.recyclerview.widget.LinearLayoutManager;
-
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate {
 
     private boolean finished;
@@ -2792,11 +2792,13 @@ public void didReceivedNotification(int id, final int account, Object... args) {
             drawerLayoutContainer.setBehindKeyboardColor(Theme.getColor(Theme.key_windowBackgroundWhite));
         } else if (id == NotificationCenter.needSetDayNightTheme) {
             Theme.ThemeInfo theme = (Theme.ThemeInfo) args[0];
-            boolean nigthTheme = (Boolean) args[1];
-            actionBarLayout.animateThemedValues(theme, nigthTheme);
+            boolean nightTheme = (Boolean) args[1];
+            boolean animated = args.length > 2 ? (Boolean) args[2] : true;
+            boolean removeWallpaperOverride = args.length > 3 ? (Boolean) args[3] : true;
+            actionBarLayout.animateThemedValues(theme, nightTheme, animated, removeWallpaperOverride);
             if (AndroidUtilities.isTablet()) {
-                layersActionBarLayout.animateThemedValues(theme, nigthTheme);
-                rightActionBarLayout.animateThemedValues(theme, nigthTheme);
+                layersActionBarLayout.animateThemedValues(theme, nightTheme, animated, removeWallpaperOverride);
+                rightActionBarLayout.animateThemedValues(theme, nightTheme, animated, removeWallpaperOverride);
             }
         } else if (id == NotificationCenter.notificationsCountUpdated) {
             if (sideMenu != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
index 3ffdeb958..d0e154d6a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemeActivity.java
@@ -9,6 +9,7 @@
 package org.telegram.ui;
 
 import android.Manifest;
+import android.animation.ValueAnimator;
 import android.app.Activity;
 import android.app.TimePickerDialog;
 import android.content.Context;
@@ -34,12 +35,6 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Vibrator;
-
-import androidx.core.content.FileProvider;
-import androidx.recyclerview.widget.DefaultItemAnimator;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.text.InputType;
 import android.text.TextPaint;
 import android.text.TextUtils;
@@ -54,13 +49,20 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.ColorInt;
+import androidx.core.content.FileProvider;
+import androidx.interpolator.view.animation.FastOutSlowInInterpolator;
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildConfig;
-import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaDataController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
@@ -99,6 +101,7 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Collections;
 import java.util.HashMap;
@@ -113,6 +116,7 @@
 
     private ListAdapter listAdapter;
     private RecyclerListView innerListView;
+    private RecyclerListView accentsListView;
     private RecyclerListView listView;
     @SuppressWarnings("FieldCanBeLocal")
     private LinearLayoutManager layoutManager;
@@ -164,6 +168,7 @@
     private int chatListInfoRow;
     private int themeStartRow;
     private int themeListRow;
+    private int themeAccentsRow;
     private int themeEndRow;
     private int showThemesRows;
     private int themeInfoRow;
@@ -468,6 +473,7 @@ private void updateRows() {
         themeStart2Row = -1;
         themeEnd2Row = -1;
         themeListRow = -1;
+        themeAccentsRow = -1;
         themeEndRow = -1;
         showThemesRows = -1;
         themeInfoRow = -1;
@@ -521,6 +527,9 @@ private void updateRows() {
             newThemeInfoRow = rowCount++;
             themeHeaderRow = rowCount++;
             themeListRow = rowCount++;
+            if (Theme.getCurrentTheme().hasTintColors()) {
+                themeAccentsRow = rowCount++;
+            }
             if (hasCustomThemes) {
                 showThemesRows = rowCount++;
             }
@@ -657,6 +666,7 @@ public boolean onFragmentCreate() {
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.locationPermissionGranted);
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
         NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.themeListUpdated);
+        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewTheme);
         return super.onFragmentCreate();
     }
 
@@ -667,6 +677,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.locationPermissionGranted);
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
         NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.themeListUpdated);
+        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewTheme);
         Theme.saveAutoNightThemeConfig();
     }
 
@@ -678,8 +689,11 @@ public void didReceivedNotification(int id, int account, Object... args) {
             if (listView != null) {
                 listView.invalidateViews();
             }
-        } else if (id == NotificationCenter.themeListUpdated) {
+        } else if (id == NotificationCenter.themeListUpdated || id == NotificationCenter.didSetNewTheme) {
             updateRows();
+            if (innerListView != null) {
+                innerListView.getAdapter().notifyDataSetChanged();
+            }
         }
     }
 
@@ -1229,8 +1243,43 @@ public void setTheme(Theme.ThemeInfo theme, boolean last, boolean first) {
             FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) button.getLayoutParams();
             layoutParams.leftMargin = AndroidUtilities.dp(isFirst ? 22 + 27 : 27);
             button.setLayoutParams(layoutParams);
-            inDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewInColor, PorterDuff.Mode.MULTIPLY));
-            outDrawable.setColorFilter(new PorterDuffColorFilter(theme.previewOutColor, PorterDuff.Mode.MULTIPLY));
+
+            final int tintColor = Theme.restoreThemeTintColor(themeInfo);
+
+            int inDrawableColor = theme.previewInColor;
+            int outDrawableColor = theme.previewOutColor;
+            int backgroundColor = theme.previewBackgroundColor;
+
+            if (tintColor != 0) {
+                float[] tintColorHsv = new float[3];
+                Color.colorToHSV(tintColor, tintColorHsv);
+
+                if ("darkblue.attheme".equals(theme.assetName)) {
+                    float[] previewOutColorHsv = new float[3];
+                    Color.colorToHSV(theme.previewOutColor, previewOutColorHsv);
+
+                    float[] previewInColorHsv = new float[3];
+                    Color.colorToHSV(theme.previewInColor, previewInColorHsv);
+                    previewInColorHsv[0] += tintColorHsv[0] - previewOutColorHsv[0];
+                    previewInColorHsv[1] *= tintColorHsv[1] / previewOutColorHsv[1];
+                    previewInColorHsv[2] *= tintColorHsv[2] / previewOutColorHsv[2];
+
+                    float[] backgroundColorHsv = new float[3];
+                    Color.colorToHSV(theme.previewBackgroundColor, backgroundColorHsv);
+                    backgroundColorHsv[0] += tintColorHsv[0] - previewOutColorHsv[0];
+                    backgroundColorHsv[1] *= tintColorHsv[1] / previewOutColorHsv[1];
+                    backgroundColorHsv[2] *= tintColorHsv[2] / previewOutColorHsv[2];
+
+                    inDrawableColor = Color.HSVToColor(previewInColorHsv);
+                    backgroundColor = Color.HSVToColor(backgroundColorHsv);
+                }
+
+                outDrawableColor = tintColor;
+            }
+
+            paint.setColor(backgroundColor);
+            inDrawable.setColorFilter(new PorterDuffColorFilter(inDrawableColor, PorterDuff.Mode.MULTIPLY));
+            outDrawable.setColorFilter(new PorterDuffColorFilter(outDrawableColor, PorterDuff.Mode.MULTIPLY));
         }
 
         @Override
@@ -1245,7 +1294,6 @@ public void updateCurrentThemeCheck() {
 
         @Override
         protected void onDraw(Canvas canvas) {
-            paint.setColor(themeInfo.previewBackgroundColor);
             int x = isFirst ? AndroidUtilities.dp(22) : 0;
             rect.set(x, AndroidUtilities.dp(11), x + AndroidUtilities.dp(76), AndroidUtilities.dp(11 + 97));
             canvas.drawRoundRect(rect, AndroidUtilities.dp(6), AndroidUtilities.dp(6), paint);
@@ -1255,14 +1303,14 @@ protected void onDraw(Canvas canvas) {
                 int r = Color.red(color);
                 int g = Color.green(color);
                 int b = Color.blue(color);
-
-                button.setColor(0xffb3b3b3, 0xff37a9f0);
                 Theme.chat_instantViewRectPaint.setColor(Color.argb(43, r, g, b));
                 canvas.drawRoundRect(rect, AndroidUtilities.dp(6), AndroidUtilities.dp(6), Theme.chat_instantViewRectPaint);
-            } else {
-                button.setColor(0x66ffffff, 0xffffffff);
             }
 
+            if (themeInfo.hasTintColors()) {
+                button.setColor(Theme.getColor(Theme.key_radioBackground), Theme.getColor(Theme.key_radioBackgroundChecked));
+            } else button.setColor(0x66ffffff, 0xffffffff);
+
             inDrawable.setBounds(x + AndroidUtilities.dp(6), AndroidUtilities.dp(22), x + AndroidUtilities.dp(6 + 43), AndroidUtilities.dp(22 + 14));
             inDrawable.draw(canvas);
 
@@ -1309,6 +1357,157 @@ public int getItemViewType(int position) {
         public int getItemCount() {
             return defaultThemes.size();
         }
+
+        public int getCheckedPosition() {
+            for (int i = 0; i < defaultThemes.size(); i++) {
+                if (defaultThemes.get(i) == Theme.getCurrentTheme()) {
+                    return i;
+                }
+            }
+            return -1;
+        }
+    }
+
+    private class ThemeAccentView extends View {
+
+        private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        private final ValueAnimator checkedAnimator = ValueAnimator.ofFloat(0f, 1f);
+
+        private boolean isChecked;
+        private boolean isCustom;
+
+        public ThemeAccentView(Context context, boolean custom) {
+            super(context);
+            isCustom = custom;
+            paint.setStrokeWidth(AndroidUtilities.dp(2f));
+            checkedAnimator.setInterpolator(new FastOutSlowInInterpolator());
+            checkedAnimator.addUpdateListener((animator) -> invalidate());
+            checkedAnimator.setDuration(200);
+        }
+
+        public int getColor() {
+            return paint.getColor();
+        }
+
+        public void setColor(int color) {
+            paint.setColor(color);
+        }
+
+        public boolean isChecked() {
+            return isChecked;
+        }
+
+        public void setChecked(boolean checked) {
+            if (isChecked != checked) {
+                isChecked = checked;
+                checkedAnimator.cancel();
+                checkedAnimator.setFloatValues(
+                        (float) checkedAnimator.getAnimatedValue(),
+                        isChecked ? 1f : 0f);
+                checkedAnimator.start();
+            }
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            super.onDraw(canvas);
+            final int cx = getWidth() / 2;
+            final int cy = getHeight() / 2;
+            float radius = (Math.min(cx, cy)) - AndroidUtilities.dp(12f) - paint.getStrokeWidth();
+
+            if (!isCustom) {
+                paint.setStyle(Paint.Style.FILL);
+                final float factor = Utilities.lerp(1f, 0.8f, (float) checkedAnimator.getAnimatedValue());
+                canvas.drawCircle(cx, cy, radius * factor, paint);
+
+                paint.setStyle(Paint.Style.STROKE);
+                canvas.drawCircle(cx, cy, radius, paint);
+            } else {
+                float littleRadius = radius / 3.75f;
+                radius *= 0.85f;
+                float step = 360f / 6f;
+                paint.setStyle(Paint.Style.FILL);
+
+                int[] tintColors = Theme.getCurrentTheme().tinter.getBaseTintColors();
+                int[] colors = {
+                        tintColors[4], tintColors[7], tintColors[2], tintColors[0],
+                        tintColors[5], tintColors[3], tintColors[6]
+                };
+
+                for (int i = 0; i < 6; i++) {
+                    float dx = (float) Math.cos(Math.toRadians(i * step - 90)) * radius;
+                    float dy = (float) Math.sin(Math.toRadians(i * step - 90)) * radius;
+                    paint.setColor(colors[i]);
+                    canvas.drawCircle(cx + dx, cy + dy, littleRadius, paint);
+                }
+                paint.setColor(colors[6]);
+                canvas.drawCircle(cx, cy, littleRadius, paint);
+            }
+        }
+    }
+
+    private class ThemeAccentsListAdapter extends RecyclerListView.SelectionAdapter {
+
+        private final Context context;
+        private final int itemSize;
+
+        private int[] colors = new int[0];
+        private Integer checkedColor = null;
+
+        public ThemeAccentsListAdapter(Context context, int itemSize) {
+            this.context = context;
+            this.itemSize = itemSize;
+        }
+
+        @Override
+        public boolean isEnabled(RecyclerView.ViewHolder holder) {
+            return false;
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            final ThemeAccentView itemView = new ThemeAccentView(context, viewType == 1);
+            itemView.setLayoutParams(new ViewGroup.LayoutParams(itemSize, itemSize));
+            return new RecyclerListView.Holder(itemView);
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            if (position < colors.length) {
+                ThemeAccentView view = (ThemeAccentView) holder.itemView;
+                view.setChecked(colors[position] == checkedColor);
+                view.setColor(colors[position]);
+            }
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            return position < colors.length ? 0 : 1;
+        }
+
+        @Override
+        public int getItemCount() {
+            return colors.length + 1;
+        }
+
+        public void setColors(@ColorInt int[] colors) {
+            this.colors = colors;
+        }
+
+        public void setCheckedColor(@ColorInt int checkedColor) {
+            this.checkedColor = checkedColor;
+        }
+
+        public Integer getCheckedColor() {
+            return checkedColor;
+        }
+
+        public int getCheckedPosition() {
+            for (int i = 0; i < colors.length; i++) {
+                if (colors[i] == checkedColor) return i;
+            }
+            return -1;
+        }
     }
 
     private class ListAdapter extends RecyclerListView.SelectionAdapter {
@@ -1327,7 +1526,7 @@ public int getItemCount() {
         @Override
         public boolean isEnabled(RecyclerView.ViewHolder holder) {
             int type = holder.getItemViewType();
-            return type == 0 || type == 1 || type == 4 || type == 7 || type == 10 || type == 11;
+            return type == 0 || type == 1 || type == 4 || type == 7 || type == 10 || type == 11 || type == 12;
         }
 
         private void showOptionsForTheme(Theme.ThemeInfo themeInfo) {
@@ -1494,7 +1693,6 @@ protected void didSelectChatType(boolean threeLines) {
                     view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
                     break;
                 case 11:
-                default: {
                     RecyclerListView horizontalListView = new RecyclerListView(mContext) {
                         @Override
                         public boolean onInterceptTouchEvent(MotionEvent e) {
@@ -1507,7 +1705,7 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
                         @Override
                         public void onDraw(Canvas canvas) {
                             super.onDraw(canvas);
-                            if (hasCustomThemes) {
+                            if (hasCustomThemes || Theme.getCurrentTheme().hasTintColors()) {
                                 canvas.drawLine(LocaleController.isRTL ? 0 : AndroidUtilities.dp(20), getMeasuredHeight() - 1, getMeasuredWidth() - (LocaleController.isRTL ? AndroidUtilities.dp(20) : 0), getMeasuredHeight() - 1, Theme.dividerPaint);
                             }
                         }
@@ -1535,23 +1733,14 @@ public boolean supportsPredictiveItemAnimations() {
                     horizontalListView.setOnItemClickListener((view1, position) -> {
                         InnerThemeView innerThemeView = (InnerThemeView) view1;
                         Theme.ThemeInfo themeInfo = innerThemeView.themeInfo;
-                        if (themeInfo == Theme.getCurrentTheme()) {
-                            return;
-                        }
-                        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false);
-                        int left = view1.getLeft();
-                        int right = view1.getRight();
-                        if (left < 0) {
-                            horizontalListView.smoothScrollBy(left - AndroidUtilities.dp(8), 0);
-                        } else if (right > horizontalListView.getMeasuredWidth()) {
-                            horizontalListView.smoothScrollBy(right - horizontalListView.getMeasuredWidth(), 0);
-                        }
-
-                        int count = innerListView.getChildCount();
-                        for (int a = 0; a < count; a++) {
-                            View child = innerListView.getChildAt(a);
-                            if (child instanceof InnerThemeView) {
-                                ((InnerThemeView) child).updateCurrentThemeCheck();
+                        if (themeInfo != Theme.getCurrentTheme()) {
+                            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false);
+                            int count = innerListView.getChildCount();
+                            for (int a = 0; a < count; a++) {
+                                View child = innerListView.getChildAt(a);
+                                if (child instanceof InnerThemeView) {
+                                    ((InnerThemeView) child).updateCurrentThemeCheck();
+                                }
                             }
                         }
                     });
@@ -1563,6 +1752,55 @@ public boolean supportsPredictiveItemAnimations() {
                     view = innerListView = horizontalListView;
                     view.setLayoutParams(new RecyclerView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, AndroidUtilities.dp(148)));
                     break;
+                case 12:
+                default: {
+                    RecyclerListView accentsListView = new RecyclerListView(mContext) {
+                        @Override
+                        public boolean onInterceptTouchEvent(MotionEvent e) {
+                            if (getParent() != null && getParent().getParent() != null) {
+                                getParent().getParent().requestDisallowInterceptTouchEvent(true);
+                            }
+                            return super.onInterceptTouchEvent(e);
+                        }
+
+                        @Override
+                        public void onDraw(Canvas canvas) {
+                            super.onDraw(canvas);
+                            if (hasCustomThemes) {
+                                canvas.drawLine(LocaleController.isRTL ? 0 : AndroidUtilities.dp(20),
+                                        getMeasuredHeight() - 1, getMeasuredWidth() -
+                                                (LocaleController.isRTL ? AndroidUtilities.dp(20) : 0),
+                                        getMeasuredHeight() - 1, Theme.dividerPaint);
+                            }
+                        }
+                    };
+                    accentsListView.setOnItemClickListener((view1, position) -> {
+                        ThemeAccentView themeAccentView = (ThemeAccentView) view1;
+                        if (themeAccentView.isCustom) {
+                            presentFragment(new WallpaperActivity());
+                        } else if (!themeAccentView.isChecked()) {
+                            Theme.setTintColor(themeAccentView.getColor());
+                        }
+                    });
+                    accentsListView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    accentsListView.setItemAnimator(null);
+                    accentsListView.setLayoutAnimation(null);
+                    accentsListView.setClipToPadding(false);
+                    accentsListView.setLayoutManager(new LinearLayoutManager(
+                            mContext, LinearLayoutManager.HORIZONTAL, false) {
+                        @Override
+                        public boolean supportsPredictiveItemAnimations() {
+                            return false;
+                        }
+                    });
+                    accentsListView.setPadding(AndroidUtilities.dp(8f), 0, AndroidUtilities.dp(8f), 0);
+                    final int itemSize = AndroidUtilities.dp(64);
+                    accentsListView.setAdapter(new ThemeAccentsListAdapter(mContext, itemSize));
+                    view = ThemeActivity.this.accentsListView = accentsListView;
+                    view.setLayoutParams(new RecyclerView.LayoutParams(
+                            ViewGroup.LayoutParams.MATCH_PARENT,
+                            itemSize));
+                    break;
                 }
             }
             return new RecyclerListView.Holder(view);
@@ -1735,6 +1973,43 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     }
                     break;
                 }
+                case 12: {
+                    RecyclerListView accentsListView = (RecyclerListView) holder.itemView;
+                    ThemeAccentsListAdapter accentsListAdapter = (ThemeAccentsListAdapter)
+                            accentsListView.getAdapter();
+
+                    boolean isFirstTime = accentsListAdapter.getCheckedColor() == null;
+
+                    final Theme.ThemeInfo currentTheme = Theme.getCurrentTheme();
+                    int[] tintColors = currentTheme.getTinter().getBaseTintColors();
+                    final int extraTintColor = Theme.restoreThemeExtraTintColor(currentTheme);
+
+                    if (extraTintColor != 0) {
+                        tintColors = Arrays.copyOf(tintColors, tintColors.length + 1);
+                        tintColors[tintColors.length - 1] = extraTintColor;
+                    }
+
+                    accentsListAdapter.setColors(tintColors);
+                    accentsListAdapter.setCheckedColor(Theme.getTintColor());
+                    accentsListAdapter.notifyDataSetChanged();
+
+                    final int checkedPosition = accentsListAdapter.getCheckedPosition();
+                    if (checkedPosition >= 0) {
+                        int scrollOffset = accentsListView.computeHorizontalScrollOffset();
+                        int left = accentsListView.getPaddingLeft() + AndroidUtilities.dp(64f) * checkedPosition - scrollOffset;
+                        int right = left + AndroidUtilities.dp(64f);
+
+                        if (left < 0) {
+                            accentsListView.smoothScrollBy(left - AndroidUtilities.dp(8), 0);
+                        } else if (right > accentsListView.getMeasuredWidth()) {
+                            if (isFirstTime) {
+                                accentsListView.post(() -> accentsListView.scrollBy(right - accentsListView.getMeasuredWidth(), 0));
+                            } else {
+                                accentsListView.smoothScrollBy(right - accentsListView.getMeasuredWidth(), 0);
+                            }
+                        }
+                    }
+                }
             }
         }
 
@@ -1783,6 +2058,8 @@ public int getItemViewType(int position) {
                 return 10;
             } else if (position == themeListRow) {
                 return 11;
+            } else if (position == themeAccentsRow) {
+                return 12;
             }
             return 0;
         }
@@ -1790,10 +2067,16 @@ public int getItemViewType(int position) {
 
     @Override
     public ThemeDescription[] getThemeDescriptions() {
+        final ThemeDescription.ThemeDescriptionDelegate accentsListViewDelegate = () -> {
+            if (accentsListView != null) {
+                accentsListView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+            }
+        };
         return new ThemeDescription[]{
                 new ThemeDescription(listView, ThemeDescription.FLAG_CELLBACKGROUNDCOLOR, new Class[]{TextSettingsCell.class, TextCheckCell.class, HeaderCell.class, BrightnessControlCell.class, ThemeTypeCell.class, ThemeCell.class, TextSizeCell.class, ChatListCell.class, NotificationsCheckCell.class}, null, null, null, Theme.key_windowBackgroundWhite),
                 new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundGray),
                 new ThemeDescription(innerListView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite),
+                new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUND, null, null, null, accentsListViewDelegate, Theme.key_windowBackgroundWhite),
 
                 new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault),
                 new ThemeDescription(listView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault),
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
index cdb9c25e9..b632a3b3b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpaperActivity.java
@@ -47,9 +47,13 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.DownloadController;
+import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.ImageLocation;
@@ -59,19 +63,17 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.R;
-
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.ActionBar.ThemeDescription;
 import org.telegram.ui.Cells.ChatActionCell;
 import org.telegram.ui.Cells.ChatMessageCell;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Cells.HeaderCell;
 import org.telegram.ui.Components.AnimationProperties;
 import org.telegram.ui.Components.BackupImageView;
@@ -89,9 +91,6 @@
 import java.io.FileOutputStream;
 import java.util.ArrayList;
 
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 public class WallpaperActivity extends BaseFragment implements DownloadController.FileDownloadProgressListener, NotificationCenter.NotificationCenterDelegate {
 
     private RecyclerListView listView;
@@ -724,6 +723,15 @@ public boolean isChecked() {
         }
     }
 
+    private boolean isSelectingAccent;
+    private boolean isColorPickerShowed;
+    private int previousAccentColor;
+
+    public WallpaperActivity() {
+        isSelectingAccent = true;
+        currentWallpaper = Theme.getCachedWallpaperNonBlocking();
+    }
+
     public WallpaperActivity(Object wallPaper, Bitmap bitmap) {
         super();
         currentWallpaper = wallPaper;
@@ -795,11 +803,18 @@ public void onFragmentDestroy() {
     public View createView(Context context) {
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
-        actionBar.setTitle(LocaleController.getString("BackgroundPreview", R.string.BackgroundPreview));
+        if (!isSelectingAccent) {
+            actionBar.setTitle(LocaleController.getString("BackgroundPreview", R.string.BackgroundPreview));
+        } else {
+            actionBar.setTitle(LocaleController.getString("AccentColor", R.string.AccentColor));
+        }
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
                 if (id == -1) {
+                    if (isSelectingAccent) {
+                        Theme.setTintColor(previousAccentColor, false, false);
+                    }
                     finishFragment();
                 } else if (id == share_item) {
                     if (getParentActivity() == null) {
@@ -892,7 +907,7 @@ public void setAlpha(float alpha) {
         } else {
             textsCount = 2;
             startIndex = 0;
-            buttonsAvailable = true;
+            buttonsAvailable = !isSelectingAccent;
         }
         frameLayout.addView(backgroundImage, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 0, 0, 48));
         backgroundImage.getImageReceiver().setDelegate((imageReceiver, set, thumb) -> {
@@ -1210,7 +1225,7 @@ public void onDraw(Canvas canvas) {
             backgroundImage.setTranslationY(offsetY * progress);
         });
 
-        if (currentWallpaper instanceof WallpapersListActivity.ColorWallpaper) {
+        if (currentWallpaper instanceof WallpapersListActivity.ColorWallpaper || isSelectingAccent) {
             isBlurred = false;
 
             for (int a = 0; a < 2; a++) {
@@ -1253,7 +1268,11 @@ public void onDraw(Canvas canvas) {
                 patternsButtonsContainer[a].addView(patternsCancelButton[a], LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
                 patternsCancelButton[a].setOnClickListener(v -> {
                     if (num == 0) {
-                        setBackgroundColor(previousBackgroundColor);
+                        if (!isSelectingAccent) {
+                            setBackgroundColor(previousBackgroundColor);
+                        } else {
+                            Theme.setTintColor(previousAccentColor, false, false);
+                        }
                     } else {
                         selectedPattern = previousSelectedPattern;
                         if (selectedPattern == null) {
@@ -1269,7 +1288,9 @@ public void onDraw(Canvas canvas) {
                         updateButtonState(radialProgress, null, WallpaperActivity.this, false, true);
                         updateSelectedPattern(true);
                     }
-                    showPatternsView(num, false);
+                    if (!isSelectingAccent) {
+                        showPatternsView(num, false);
+                    } else finishFragment();
                 });
 
                 patternsSaveButton[a] = new TextView(context);
@@ -1281,7 +1302,14 @@ public void onDraw(Canvas canvas) {
                 patternsSaveButton[a].setPadding(AndroidUtilities.dp(21), 0, AndroidUtilities.dp(21), 0);
                 patternsSaveButton[a].setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector), 0));
                 patternsButtonsContainer[a].addView(patternsSaveButton[a], LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.RIGHT | Gravity.TOP));
-                patternsSaveButton[a].setOnClickListener(v -> showPatternsView(num, false));
+                patternsSaveButton[a].setOnClickListener(v -> {
+                    if (!isSelectingAccent) {
+                        showPatternsView(num, false);
+                    } else {
+                        Theme.saveThemeExtraTintColor(Theme.getCurrentTheme(), Theme.getTintColor());
+                        finishFragment();
+                    }
+                });
 
                 if (a == 1) {
                     patternsListView = new RecyclerListView(context) {
@@ -1388,6 +1416,12 @@ public void didReceivedNotification(int id, int account, Object... args) {
     @Override
     public void onResume() {
         super.onResume();
+        if (isSelectingAccent) {
+            if (!isColorPickerShowed) {
+                colorPicker.post(() -> showPatternsView(0, true, false));
+                isColorPickerShowed = true;
+            }
+        }
         if (isMotion) {
             parallaxEffect.setEnabled(true);
         }
@@ -1583,11 +1617,20 @@ public void onAnimationEnd(Animator animation) {
     }
 
     private void showPatternsView(int num, boolean show) {
+        showPatternsView(num, show, true);
+    }
+
+    private void showPatternsView(int num, boolean show, boolean animated) {
         boolean showMotion = show && num == 1 && selectedPattern != null;
         if (show) {
             if (num == 0) {
-                previousBackgroundColor = backgroundColor;
-                colorPicker.setColor(backgroundColor);
+                if (!isSelectingAccent) {
+                    previousBackgroundColor = backgroundColor;
+                    colorPicker.setColor(backgroundColor);
+                } else {
+                    previousAccentColor = Theme.getTintColor();
+                    colorPicker.setColor(previousAccentColor);
+                }
             } else {
                 previousSelectedPattern = selectedPattern;
                 previousIntensity = currentIntensity;
@@ -1611,8 +1654,10 @@ private void showPatternsView(int num, boolean show) {
             patternLayout[num].setVisibility(View.VISIBLE);
             animators.add(ObjectAnimator.ofFloat(listView, View.TRANSLATION_Y, -patternLayout[num].getMeasuredHeight() + AndroidUtilities.dp(48)));
             animators.add(ObjectAnimator.ofFloat(buttonsContainer, View.TRANSLATION_Y, -patternLayout[num].getMeasuredHeight() + AndroidUtilities.dp(48)));
-            animators.add(ObjectAnimator.ofFloat(checkBoxView[2], View.ALPHA, showMotion ? 1.0f : 0.0f));
-            animators.add(ObjectAnimator.ofFloat(checkBoxView[0], View.ALPHA, showMotion ? 0.0f : 1.0f));
+            if (!isSelectingAccent) {
+                animators.add(ObjectAnimator.ofFloat(checkBoxView[2], View.ALPHA, showMotion ? 1.0f : 0.0f));
+                animators.add(ObjectAnimator.ofFloat(checkBoxView[0], View.ALPHA, showMotion ? 0.0f : 1.0f));
+            }
             animators.add(ObjectAnimator.ofFloat(backgroundImage, View.ALPHA, 0.0f));
             if (patternLayout[otherNum].getVisibility() == View.VISIBLE) {
                 animators.add(ObjectAnimator.ofFloat(patternLayout[otherNum], View.ALPHA, 0.0f));
@@ -1625,8 +1670,10 @@ private void showPatternsView(int num, boolean show) {
             animators.add(ObjectAnimator.ofFloat(listView, View.TRANSLATION_Y, 0));
             animators.add(ObjectAnimator.ofFloat(buttonsContainer, View.TRANSLATION_Y, 0));
             animators.add(ObjectAnimator.ofFloat(patternLayout[num], View.TRANSLATION_Y, patternLayout[num].getMeasuredHeight()));
-            animators.add(ObjectAnimator.ofFloat(checkBoxView[0], View.ALPHA, 1.0f));
-            animators.add(ObjectAnimator.ofFloat(checkBoxView[2], View.ALPHA, 0.0f));
+            if (!isSelectingAccent) {
+                animators.add(ObjectAnimator.ofFloat(checkBoxView[0], View.ALPHA, 1.0f));
+                animators.add(ObjectAnimator.ofFloat(checkBoxView[2], View.ALPHA, 0.0f));
+            }
             animators.add(ObjectAnimator.ofFloat(backgroundImage, View.ALPHA, 1.0f));
         }
         animatorSet.playTogether(animators);
@@ -1639,11 +1686,13 @@ public void onAnimationEnd(Animator animation) {
                 } else if (!show) {
                     patternLayout[num].setVisibility(View.INVISIBLE);
                 }
-                checkBoxView[showMotion ? 0 : 2].setVisibility(View.INVISIBLE);
+                if (!isSelectingAccent) {
+                    checkBoxView[showMotion ? 0 : 2].setVisibility(View.INVISIBLE);
+                }
             }
         });
         animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT);
-        animatorSet.setDuration(200);
+        animatorSet.setDuration(animated ? 200 : 0);
         animatorSet.start();
     }
 
@@ -1674,6 +1723,11 @@ public void onAnimationEnd(Animator animation) {
     }
 
     private void setBackgroundColor(int color) {
+        if (isSelectingAccent) {
+            Theme.setTintColor(color, false, false);
+            return;
+        }
+
         backgroundColor = color;
         backgroundImage.setBackgroundColor(backgroundColor);
         if (checkBoxView[0] != null) {
@@ -1739,6 +1793,8 @@ private void setCurrentImage(boolean setThumb) {
             } else {
                 backgroundImage.setImage(wallPaper.imageUrl, imageFilter, wallPaper.thumbUrl, "100_100_b");
             }
+        } else if (currentWallpaper instanceof Drawable) {
+            backgroundImage.setImageDrawable((Drawable) currentWallpaper);
         }
     }
 
@@ -1796,60 +1852,114 @@ public ListAdapter(Context context) {
 
             int date = (int) (System.currentTimeMillis() / 1000) - 60 * 60;
 
-            TLRPC.Message message;
+            if (!isSelectingAccent) {
+                TLRPC.Message message;
 
-            message = new TLRPC.TL_message();
-            if (currentWallpaper instanceof WallpapersListActivity.ColorWallpaper) {
-                message.message = LocaleController.getString("BackgroundColorSinglePreviewLine2", R.string.BackgroundColorSinglePreviewLine2);
-                //message.message = LocaleController.getString("BackgroundColorPreviewLine2", R.string.BackgroundColorPreviewLine2);
-            } else {
-                message.message = LocaleController.getString("BackgroundPreviewLine2", R.string.BackgroundPreviewLine2);
-            }
-            message.date = date + 60;
-            message.dialog_id = 1;
-            message.flags = 259;
-            message.from_id = UserConfig.getInstance(currentAccount).getClientUserId();
-            message.id = 1;
-            message.media = new TLRPC.TL_messageMediaEmpty();
-            message.out = true;
-            message.to_id = new TLRPC.TL_peerUser();
-            message.to_id.user_id = 0;
-            MessageObject messageObject = new MessageObject(currentAccount, message, true);
-            messageObject.eventId = 1;
-            messageObject.resetLayout();
-            messages.add(messageObject);
-
-            message = new TLRPC.TL_message();
-            if (currentWallpaper instanceof WallpapersListActivity.ColorWallpaper) {
-                message.message = LocaleController.getString("BackgroundColorSinglePreviewLine1", R.string.BackgroundColorSinglePreviewLine1);
-                //message.message = LocaleController.getString("BackgroundColorPreviewLine1", R.string.BackgroundColorPreviewLine1);
+                message = new TLRPC.TL_message();
+                if (currentWallpaper instanceof WallpapersListActivity.ColorWallpaper) {
+                    message.message = LocaleController.getString("BackgroundColorSinglePreviewLine2", R.string.BackgroundColorSinglePreviewLine2);
+                    //message.message = LocaleController.getString("BackgroundColorPreviewLine2", R.string.BackgroundColorPreviewLine2);
+                } else {
+                    message.message = LocaleController.getString("BackgroundPreviewLine2", R.string.BackgroundPreviewLine2);
+                }
+                message.date = date + 60;
+                message.dialog_id = 1;
+                message.flags = 259;
+                message.from_id = UserConfig.getInstance(currentAccount).getClientUserId();
+                message.id = 1;
+                message.media = new TLRPC.TL_messageMediaEmpty();
+                message.out = true;
+                message.to_id = new TLRPC.TL_peerUser();
+                message.to_id.user_id = 0;
+                MessageObject messageObject = new MessageObject(currentAccount, message, true);
+                messageObject.eventId = 1;
+                messageObject.resetLayout();
+                messages.add(messageObject);
+
+                message = new TLRPC.TL_message();
+                if (currentWallpaper instanceof WallpapersListActivity.ColorWallpaper) {
+                    message.message = LocaleController.getString("BackgroundColorSinglePreviewLine1", R.string.BackgroundColorSinglePreviewLine1);
+                    //message.message = LocaleController.getString("BackgroundColorPreviewLine1", R.string.BackgroundColorPreviewLine1);
+                } else {
+                    message.message = LocaleController.getString("BackgroundPreviewLine1", R.string.BackgroundPreviewLine1);
+                }
+                message.date = date + 60;
+                message.dialog_id = 1;
+                message.flags = 257 + 8;
+                message.from_id = 0;
+                message.id = 1;
+                message.reply_to_msg_id = 5;
+                message.media = new TLRPC.TL_messageMediaEmpty();
+                message.out = false;
+                message.to_id = new TLRPC.TL_peerUser();
+                message.to_id.user_id = UserConfig.getInstance(currentAccount).getClientUserId();
+                messageObject = new MessageObject(currentAccount, message, true);
+                messageObject.eventId = 1;
+                messageObject.resetLayout();
+                messages.add(messageObject);
+
+                message = new TLRPC.TL_message();
+                message.message = LocaleController.formatDateChat(date);
+                message.id = 0;
+                message.date = date;
+                messageObject = new MessageObject(currentAccount, message, false);
+                messageObject.type = 10;
+                messageObject.contentType = 1;
+                messageObject.isDateObject = true;
+                messages.add(messageObject);
             } else {
-                message.message = LocaleController.getString("BackgroundPreviewLine1", R.string.BackgroundPreviewLine1);
+                TLRPC.Message message = new TLRPC.TL_message();
+
+                message.message = LocaleController.getString("AccentColorPreviewMessage1", R.string.AccentColorPreviewMessage1);
+                message.date = date + 60;
+                message.dialog_id = 1;
+                message.flags = 259;
+                message.from_id = UserConfig.getInstance(currentAccount).getClientUserId();
+                message.id = 1;
+                message.media = new TLRPC.TL_messageMediaEmpty();
+                message.out = true;
+                message.to_id = new TLRPC.TL_peerUser();
+                message.to_id.user_id = 0;
+                MessageObject message0 = new MessageObject(currentAccount, message, true);
+                message0.resetLayout();
+                message0.eventId = 1;
+                messages.add(message0);
+
+                message = new TLRPC.TL_message();
+                message.message = LocaleController.getString("AccentColorPreviewMessage2", R.string.AccentColorPreviewMessage2);
+                message.date = date + 960;
+                message.dialog_id = 1;
+                message.flags = 259;
+                message.from_id = UserConfig.getInstance(currentAccount).getClientUserId();
+                message.id = 1;
+                message.media = new TLRPC.TL_messageMediaEmpty();
+                message.out = true;
+                message.to_id = new TLRPC.TL_peerUser();
+                message.to_id.user_id = 0;
+                MessageObject message1 = new MessageObject(currentAccount, message, true);
+                message1.resetLayout();
+                message1.eventId = 1;
+                messages.add(0, message1);
+
+                message = new TLRPC.TL_message();
+                message.message = LocaleController.getString("AccentColorPreviewMessage3", R.string.AccentColorPreviewMessage3);
+                message.date = date + 60;
+                message.dialog_id = 1;
+                message.flags = 257 + 8;
+                message.from_id = 0;
+                message.id = 1;
+                message.reply_to_msg_id = 5;
+                message.media = new TLRPC.TL_messageMediaEmpty();
+                message.out = false;
+                message.to_id = new TLRPC.TL_peerUser();
+                message.to_id.user_id = UserConfig.getInstance(currentAccount).getClientUserId();
+                MessageObject message2 = new MessageObject(currentAccount, message, true);
+                message2.customReplyName = LocaleController.getString("AccentColorPreviewName", R.string.AccentColorPreviewName);
+                message2.eventId = 1;
+                message2.resetLayout();
+                message2.replyMessageObject = message1;
+                messages.add(0, message2);
             }
-            message.date = date + 60;
-            message.dialog_id = 1;
-            message.flags = 257 + 8;
-            message.from_id = 0;
-            message.id = 1;
-            message.reply_to_msg_id = 5;
-            message.media = new TLRPC.TL_messageMediaEmpty();
-            message.out = false;
-            message.to_id = new TLRPC.TL_peerUser();
-            message.to_id.user_id = UserConfig.getInstance(currentAccount).getClientUserId();
-            messageObject = new MessageObject(currentAccount, message, true);
-            messageObject.eventId = 1;
-            messageObject.resetLayout();
-            messages.add(messageObject);
-
-            message = new TLRPC.TL_message();
-            message.message = LocaleController.formatDateChat(date);
-            message.id = 0;
-            message.date = date;
-            messageObject = new MessageObject(currentAccount, message, false);
-            messageObject.type = 10;
-            messageObject.contentType = 1;
-            messageObject.isDateObject = true;
-            messages.add(messageObject);
         }
 
         @Override
@@ -1952,8 +2062,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
         arrayList.add(new ThemeDescription(bottomOverlayChat, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground));
         arrayList.add(new ThemeDescription(bottomOverlayChatText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
 
-        for (int a = 0; a < patternsSaveButton.length; a++) {
-            arrayList.add(new ThemeDescription(patternsSaveButton[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
+        for (int a = 0; a < patternsCancelButton.length; a++) {
+            arrayList.add(new ThemeDescription(patternsCancelButton[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
         }
         for (int a = 0; a < patternsSaveButton.length; a++) {
             arrayList.add(new ThemeDescription(patternsSaveButton[a], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 301e64c54..52a2ceb22 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1231,6 +1231,7 @@
     <string name="AskAQuestion">Ask a Question</string>
     <string name="EnableAnimations">Enable Animations</string>
     <string name="ChatSettings">Chat Settings</string>
+    <string name="AccentColor">Accent Color</string>
     <string name="SettingsHelp">Help</string>
     <string name="Account">Account</string>
     <string name="Unblock">Unblock</string>
@@ -1307,6 +1308,10 @@
     <string name="FontSizePreviewReply">Reinhardt, we need to find you some new tunes &#127926;.</string>
     <string name="FontSizePreviewLine1">Ah, you kids today with techno music! You should enjoy the classics, like Hasselhoff!</string>
     <string name="FontSizePreviewLine2">I can\'t even take you seriously right now.</string>
+    <string name="AccentColorPreviewName">Alex Cassio</string>
+    <string name="AccentColorPreviewMessage1">Twenty years from now you will be more disappointed by the things that you didn\'t do than by the ones you did do, so throw off the bowlines, sail away from safe harboor, catch the trade winds in your sails.</string>
+    <string name="AccentColorPreviewMessage2">Mark Twain said that ☝️</string>
+    <string name="AccentColorPreviewMessage3">Reminds me of a Chinese proverb: the best time to plant a tree was 20 years ago. The second best time is now.</string>
     <string name="BackgroundColorSinglePreviewLine1">Press \'Set\' to apply the background.</string>
     <string name="BackgroundColorSinglePreviewLine2">Enjoy the view.</string>
     <string name="SetBackground">SET BACKGROUND</string>
