diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index ed0db1e8e..ee8e12f08 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -12,7 +12,7 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 22
+    compileSdkVersion 21
     buildToolsVersion '22.0.1'
 
     compileOptions {
@@ -22,7 +22,7 @@ android {
 
     signingConfigs {
         debug {
-            storeFile file("config/debug.keystore")
+            //storeFile file("config/debug.keystore")
         }
 
         release {
@@ -72,7 +72,7 @@ android {
 
     defaultConfig {
         minSdkVersion 8
-        targetSdkVersion 22
+        targetSdkVersion 21
         versionCode 586
         versionName "3.1.2"
     }
diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index a9ed995de..4516c09a0 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -3,45 +3,62 @@
     package="org.telegram.messenger"
     android:installLocation="auto">
 
-    <uses-feature android:name="android.hardware.location.gps" android:required="false" />
-    <uses-feature android:name="android.hardware.location.network" android:required="false" />
-    <uses-feature android:name="android.hardware.location" android:required="false" />
-    <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
+    <uses-feature
+        android:name="android.hardware.location.gps"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.location.network"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.location"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.LOCATION"
+        android:required="false" />
 
     <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
+    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" />
     <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
-    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
+    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
+    <permission
+        android:name="org.telegram.messenger.permission.MAPS_RECEIVE"
+        android:protectionLevel="signature" />
+    <permission
+        android:name="org.telegram.messenger.permission.C2D_MESSAGE"
+        android:protectionLevel="signature" />
 
     <application
+        android:name=".ApplicationLoader"
         android:allowBackup="false"
+        android:hardwareAccelerated="@bool/useHardwareAcceleration"
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
-        android:theme="@style/Theme.TMessages.Start"
-        android:name=".ApplicationLoader"
-        android:hardwareAccelerated="@bool/useHardwareAcceleration"
-        android:largeHeap="true">
+        android:largeHeap="true"
+        android:theme="@style/Theme.TMessages.Start">
 
-        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyCTNmNqbWovP9ETcAob98YlrfOQEAC0CJ4" />
+        <meta-data
+            android:name="com.google.android.maps.v2.API_KEY"
+            android:value="AIzaSyCTNmNqbWovP9ETcAob98YlrfOQEAC0CJ4" />
 
         <activity android:name="net.hockeyapp.android.UpdateActivity" />
 
         <receiver
             android:name="org.telegram.android.GcmBroadcastReceiver"
-            android:permission="com.google.android.c2dm.permission.SEND" >
+            android:permission="com.google.android.c2dm.permission.SEND">
             <intent-filter>
                 <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                 <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
+
                 <category android:name="org.telegram.messenger" />
             </intent-filter>
         </receiver>
 
-        <uses-library android:name="com.google.android.maps" android:required="false"/>
+        <uses-library
+            android:name="com.google.android.maps"
+            android:required="false" />
 
     </application>
 
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index e5c2d138d..e5581a919 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -3,20 +3,35 @@
     package="org.telegram.messenger"
     android:installLocation="auto">
 
-    <supports-screens android:anyDensity="true"
-                      android:largeScreens="true"
-                      android:normalScreens="true"
-                      android:resizeable="true"
-                      android:smallScreens="true"
-                      android:xlargeScreens="true"/>
-
-    <uses-feature android:glEsVersion="0x00020000" android:required="false"/>
-    <uses-feature android:name="android.hardware.telephony" android:required="false" />
-    <uses-feature android:name="android.hardware.camera.autofocus" android:required="false" />
-    <uses-feature android:name="android.hardware.camera" android:required="false" />
-    <uses-feature android:name="android.hardware.wifi" android:required="false" />
-    <uses-feature android:name="android.hardware.screen.PORTRAIT" android:required="false" />
-    <uses-feature android:name="android.hardware.microphone" android:required="false" />
+    <supports-screens
+        android:anyDensity="true"
+        android:largeScreens="true"
+        android:normalScreens="true"
+        android:resizeable="true"
+        android:smallScreens="true"
+        android:xlargeScreens="true" />
+
+    <uses-feature
+        android:glEsVersion="0x00020000"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.telephony"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.camera.autofocus"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.camera"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.wifi"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.screen.PORTRAIT"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.microphone"
+        android:required="false" />
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.RECORD_AUDIO" />
@@ -24,17 +39,17 @@
     <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
     <uses-permission android:name="android.permission.RECEIVE_SMS" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.CAMERA" />
     <uses-permission android:name="android.permission.GET_ACCOUNTS" />
     <uses-permission android:name="android.permission.READ_CONTACTS" />
     <uses-permission android:name="android.permission.WRITE_CONTACTS" />
-    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS"/>
-    <uses-permission android:name="android.permission.READ_PROFILE"/>
-    <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS"/>
-    <uses-permission android:name="android.permission.READ_SYNC_SETTINGS"/>
-    <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS"/>
+    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS" />
+    <uses-permission android:name="android.permission.READ_PROFILE" />
+    <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS" />
+    <uses-permission android:name="android.permission.READ_SYNC_SETTINGS" />
+    <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS" />
     <uses-permission android:name="android.permission.VIBRATE" />
     <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
@@ -57,62 +72,72 @@
             android:windowSoftInputMode="adjustPan">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
+
                 <category android:name="android.intent.category.LAUNCHER" />
                 <category android:name="android.intent.category.MULTIWINDOW_LAUNCHER" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="image/*"/>
+                <action android:name="android.intent.action.SEND" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="image/*" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="video/*"/>
+                <action android:name="android.intent.action.SEND" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="video/*" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND_MULTIPLE"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="image/*"/>
+                <action android:name="android.intent.action.SEND_MULTIPLE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="image/*" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="text/plain"/>
+                <action android:name="android.intent.action.SEND" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="text/plain" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="*/*"/>
+                <action android:name="android.intent.action.SEND" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="*/*" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.SEND_MULTIPLE"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="*/*"/>
+                <action android:name="android.intent.action.SEND_MULTIPLE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="*/*" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.VIEW"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile"/>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile" />
             </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.VIEW"/>
+                <action android:name="android.intent.action.VIEW" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
-                <data android:host="telegram.me" android:scheme="http" />
-                <data android:host="telegram.me" android:scheme="https" />
+
+                <data
+                    android:host="telegram.me"
+                    android:scheme="http" />
+                <data
+                    android:host="telegram.me"
+                    android:scheme="https" />
             </intent-filter>
-            <intent-filter android:icon="@drawable/ic_launcher" android:priority="1">
+            <intent-filter
+                android:icon="@drawable/ic_launcher"
+                android:priority="1">
                 <action android:name="android.intent.action.VIEW" />
+
                 <category android:name="android.intent.category.BROWSABLE" />
                 <category android:name="android.intent.category.DEFAULT" />
+
                 <data android:scheme="tg" />
             </intent-filter>
         </activity>
         <activity
             android:name="org.telegram.ui.IntroActivity"
-            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
-        </activity>
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize"></activity>
         <activity
             android:name="org.telegram.ui.PopupNotificationActivity"
             android:configChanges="keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize"
@@ -120,18 +145,17 @@
             android:launchMode="singleTask"
             android:taskAffinity=""
             android:theme="@style/Theme.TMessages.PopupNotification"
-            android:windowSoftInputMode="adjustResize|stateHidden">
-        </activity>
+            android:windowSoftInputMode="adjustResize|stateHidden"></activity>
 
         <receiver android:name="org.telegram.android.AutoMessageHeardReceiver">
             <intent-filter>
-                <action android:name="org.telegram.messenger.ACTION_MESSAGE_HEARD"/>
+                <action android:name="org.telegram.messenger.ACTION_MESSAGE_HEARD" />
             </intent-filter>
         </receiver>
 
         <receiver android:name="org.telegram.android.AutoMessageReplyReceiver">
             <intent-filter>
-                <action android:name="org.telegram.messenger.ACTION_MESSAGE_REPLY"/>
+                <action android:name="org.telegram.messenger.ACTION_MESSAGE_REPLY" />
             </intent-filter>
         </receiver>
 
@@ -141,30 +165,47 @@
             </intent-filter>
         </receiver>
 
-        <service android:name="org.telegram.android.AuthenticatorService" android:exported="true">
+        <service
+            android:name="org.telegram.android.AuthenticatorService"
+            android:exported="true">
             <intent-filter>
-                <action android:name="android.accounts.AccountAuthenticator"/>
+                <action android:name="android.accounts.AccountAuthenticator" />
             </intent-filter>
-            <meta-data android:name="android.accounts.AccountAuthenticator"
-                android:resource="@xml/auth"/>
+            <meta-data
+                android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/auth" />
         </service>
 
-        <service android:name="org.telegram.android.ContactsSyncAdapterService" android:exported="true">
+        <service
+            android:name="org.telegram.android.ContactsSyncAdapterService"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.content.SyncAdapter" />
             </intent-filter>
-            <meta-data android:name="android.content.SyncAdapter"
+
+            <meta-data
+                android:name="android.content.SyncAdapter"
                 android:resource="@xml/sync_contacts" />
-            <meta-data android:name="android.provider.CONTACTS_STRUCTURE"
+            <meta-data
+                android:name="android.provider.CONTACTS_STRUCTURE"
                 android:resource="@xml/contacts" />
         </service>
 
-        <service android:name="org.telegram.android.NotificationsService" android:enabled="true"/>
-        <service android:name="org.telegram.android.NotificationRepeat" android:exported="false"/>
-        <service android:name="org.telegram.android.VideoEncodingService" android:enabled="true"/>
-        <service android:name="org.telegram.android.MusicPlayerService" android:exported="true" android:enabled="true"/>
+        <service
+            android:name="org.telegram.android.NotificationsService"
+            android:enabled="true" />
+        <service
+            android:name="org.telegram.android.NotificationRepeat"
+            android:exported="false" />
+        <service
+            android:name="org.telegram.android.VideoEncodingService"
+            android:enabled="true" />
+        <service
+            android:name="org.telegram.android.MusicPlayerService"
+            android:enabled="true"
+            android:exported="true" />
 
-        <receiver android:name="org.telegram.android.MusicPlayerReceiver" >
+        <receiver android:name="org.telegram.android.MusicPlayerReceiver">
             <intent-filter>
                 <action android:name="org.telegram.android.musicplayer.close" />
                 <action android:name="org.telegram.android.musicplayer.pause" />
@@ -176,23 +217,42 @@
             </intent-filter>
         </receiver>
 
-        <receiver android:name="org.telegram.android.AppStartReceiver" android:enabled="true">
+        <receiver
+            android:name="org.telegram.android.AppStartReceiver"
+            android:enabled="true">
             <intent-filter>
                 <action android:name="org.telegram.start" />
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
             </intent-filter>
         </receiver>
 
-        <receiver android:name="org.telegram.android.WearReplyReceiver" android:enabled="true"/>
+        <receiver
+            android:name="org.telegram.android.WearReplyReceiver"
+            android:enabled="true" />
+
+        <uses-library
+            android:name="com.sec.android.app.multiwindow"
+            android:required="false" />
 
-        <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
-        <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
-        <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
-        <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_H" android:value="598dp" />
-        <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_W" android:value="632dp" />
-        <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_H" android:value="598dp" />
+        <meta-data
+            android:name="com.sec.android.support.multiwindow"
+            android:value="true" />
+        <meta-data
+            android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W"
+            android:value="632dp" />
+        <meta-data
+            android:name="com.sec.android.multiwindow.DEFAULT_SIZE_H"
+            android:value="598dp" />
+        <meta-data
+            android:name="com.sec.android.multiwindow.MINIMUM_SIZE_W"
+            android:value="632dp" />
+        <meta-data
+            android:name="com.sec.android.multiwindow.MINIMUM_SIZE_H"
+            android:value="598dp" />
 
-        <meta-data android:name="com.google.android.gms.car.application" android:resource="@xml/automotive_app_desc" />
+        <meta-data
+            android:name="com.google.android.gms.car.application"
+            android:resource="@xml/automotive_app_desc" />
 
     </application>
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 69e12e748..f6031413e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -52,6 +52,7 @@
 import org.telegram.android.video.MP4Builder;
 import org.telegram.android.video.Mp4Movie;
 import org.telegram.android.video.OutputSurface;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
@@ -60,8 +61,8 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.Cells.ChatMediaCell;
+import org.telegram.ui.ChatActivity;
 import org.telegram.ui.Components.GifDrawable;
 
 import java.io.File;
@@ -79,6 +80,8 @@
 
 public class MediaController implements NotificationCenter.NotificationCenterDelegate, SensorEventListener {
 
+    private static boolean raiseEnabled = false;
+
     private native int startRecord(String path);
 
     private native int writeFrame(ByteBuffer frame, int len);
@@ -99,6 +102,7 @@
 
     public static int[] readArgs = new int[3];
 
+
     public interface FileDownloadProgressListener {
         void onFailedDownload(String fileName);
 
@@ -111,6 +115,11 @@
         int getObserverTag();
     }
 
+    public interface ChatActivityDelegate {
+        long onDialogIdRequested();
+        ArrayList<MessageObject> onChatMessagesRequested();
+    }
+
     private class AudioBuffer {
         public AudioBuffer(int capacity) {
             buffer = ByteBuffer.allocateDirect(capacity);
@@ -473,6 +482,7 @@ public void run() {
     private String[] mediaProjections = null;
 
     private static volatile MediaController Instance = null;
+    private static ChatActivityDelegate mCallback;
 
     public static MediaController getInstance() {
         MediaController localInstance = Instance;
@@ -487,6 +497,11 @@ public static MediaController getInstance() {
         return localInstance;
     }
 
+    public static MediaController getInstance(ChatActivity chatActivity) {
+        if (raiseEnabled) mCallback = chatActivity;
+        return getInstance();
+    }
+
     public MediaController() {
         try {
             recordBufferSize = AudioRecord.getMinBufferSize(16000, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
@@ -530,6 +545,7 @@ public MediaController() {
         saveToGallery = preferences.getBoolean("save_gallery", false);
         shuffleMusic = preferences.getBoolean("shuffleMusic", false);
         repeatMode = preferences.getInt("repeatMode", 0);
+        raiseEnabled = preferences.getBoolean("raise_to_talk", false);
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
@@ -1273,7 +1289,13 @@ private boolean isNearToSensor(float value) {
     @Override
     public void onSensorChanged(SensorEvent event) {
         FileLog.e("tmessages", "proximity changed to " + event.values[0]);
-        if (proximitySensor != null && audioTrackPlayer == null && audioPlayer == null || isPaused || (useFrontSpeaker == isNearToSensor(event.values[0]))) {
+
+        if ((proximitySensor != null
+                && audioTrackPlayer == null
+                && audioPlayer == null
+                || isPaused
+                || (useFrontSpeaker == isNearToSensor(event.values[0])))
+                && !raiseEnabled) {
             return;
         }
         boolean newValue = isNearToSensor(event.values[0]);
@@ -1284,15 +1306,44 @@ public void onSensorChanged(SensorEvent event) {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
+
         ignoreProximity = true;
         useFrontSpeaker = newValue;
+
+        if (raiseEnabled) {
+            // TODO: raise to talk logic
+            if (getUnheardMessages().isEmpty()) {
+                // record message
+                if (useFrontSpeaker)
+                    startRecording(mCallback.onDialogIdRequested(), getLastMessage());
+                else
+                    stopRecording(true);
+            } else {
+                MessageObject latestUnheardMessage = getUnheardMessages().get(getUnheardMessages().size() - 1);
+                // get unheard messages and play them
+                if (useFrontSpeaker) {
+                    if (playingMessageObject == null
+                            || (playingMessageObject != null && latestUnheardMessage.getId() != playingMessageObject.getId()))
+                        playingMessageObject = latestUnheardMessage;
+                    if (playingMessageObject != null)
+                        playCurrentMessageOnSpeaker();
+                } else if (playingMessageObject != null
+                            && isPlayingAudio(playingMessageObject))
+                        pauseAudio(playingMessageObject);
+            }
+        } else {
+            playCurrentMessageOnSpeaker();
+        }
+        ignoreProximity = false;
+    }
+
+    private void playCurrentMessageOnSpeaker() {
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioRouteChanged, useFrontSpeaker);
         MessageObject currentMessageObject = playingMessageObject;
         float progress = playingMessageObject.audioProgress;
         clenupPlayer(false, true);
         currentMessageObject.audioProgress = progress;
         playAudio(currentMessageObject);
-        ignoreProximity = false;
     }
 
     @Override
@@ -1300,8 +1351,12 @@ public void onAccuracyChanged(Sensor sensor, int accuracy) {
 
     }
 
-    private void stopProximitySensor() {
-        if (ignoreProximity) {
+    public void stopProximitySensor() {
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean raiseEnabled = preferences.getBoolean("raise_to_talk", false);
+
+        if (ignoreProximity && !raiseEnabled) {
             return;
         }
         try {
@@ -1318,7 +1373,7 @@ private void stopProximitySensor() {
         }
     }
 
-    private void startProximitySensor() {
+    public void startProximitySensor() {
         if (ignoreProximity) {
             return;
         }
@@ -1444,6 +1499,24 @@ public MessageObject getPlayingMessageObject() {
         return playingMessageObject;
     }
 
+    public ArrayList<MessageObject> getUnheardMessages() {
+
+        ArrayList<MessageObject> messages = mCallback.onChatMessagesRequested();
+        ArrayList<MessageObject> tmpUnreadMsg = new ArrayList<>();
+        for (MessageObject msg : messages)
+            if (msg.type == 2
+                    && msg.isUnread()
+                    && !msg.isOut())
+                tmpUnreadMsg.add(msg);
+
+        return tmpUnreadMsg;
+    }
+
+    public MessageObject getLastMessage() {
+        return mCallback.onChatMessagesRequested() != null
+                && !mCallback.onChatMessagesRequested().isEmpty() ? mCallback.onChatMessagesRequested().get(mCallback.onChatMessagesRequested().size() - 1) : null;
+    }
+
     private void buildShuffledPlayList() {
         if (playlist.isEmpty()) {
             return;
@@ -1671,9 +1744,9 @@ public void onPeriodicNotification(AudioTrack audioTrack) {
                     });
                     audioTrackPlayer.play();
                     startProgressTimer();
-                    if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                        startProximitySensor();
-                    }
+                    //if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
+                    //    startProximitySensor();
+                    //}
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                     if (audioTrackPlayer != null) {
@@ -1864,7 +1937,7 @@ public void toggleRepeatMode() {
     }
 
     public boolean pauseAudio(MessageObject messageObject) {
-        stopProximitySensor();
+        if (!raiseEnabled) stopProximitySensor();
         if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
             return false;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 58c244048..250df2d2f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -9,13 +9,13 @@
 package org.telegram.messenger;
 
 public class BuildVars {
-    public static boolean DEBUG_VERSION = false;
+    public static boolean DEBUG_VERSION = true;
     public static int BUILD_VERSION = 586;
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
+    public static int APP_ID = 24886; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "0045e071e67dc06118d0c24b63fc46db"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static String HOCKEY_APP_HASH = "4b8e27aebc96ef120dca0fbb38c99c85";
     public static String GCM_SENDER_ID = "760348033672";
-    public static String SEND_LOGS_EMAIL = "email@gmail.com";
+    public static String SEND_LOGS_EMAIL = "fabiofigo71@gmail.com";
     public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
     public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
     public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 697d5c06b..920b9c679 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -124,7 +124,7 @@
 import java.util.concurrent.Semaphore;
 
 public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate,
-        PhotoViewer.PhotoViewerProvider {
+        PhotoViewer.PhotoViewerProvider, MediaController.ChatActivityDelegate {
 
     protected TLRPC.Chat currentChat;
     protected TLRPC.User currentUser;
@@ -316,8 +316,11 @@ public ChatActivity(Bundle args) {
         super(args);
     }
 
+
+
     @Override
     public boolean onFragmentCreate() {
+
         final int chatId = arguments.getInt("chat_id", 0);
         final int userId = arguments.getInt("user_id", 0);
         final int encId = arguments.getInt("enc_id", 0);
@@ -519,6 +522,11 @@ public void run() {
             SecretChatHelper.getInstance().sendNotifyLayerMessage(currentEncryptedChat, null);
         }
 
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+
+        if (preferences.getBoolean("raise_to_talk", false))
+            MediaController.getInstance(this).startProximitySensor();
+
         return true;
     }
 
@@ -585,6 +593,10 @@ public void onFragmentDestroy() {
         if (messageObject != null && !messageObject.isMusic()) {
             MediaController.getInstance().stopAudio();
         }
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        if (preferences.getBoolean("raise_to_talk", false))
+            MediaController.getInstance().stopProximitySensor();
     }
 
     @Override
@@ -4521,6 +4533,7 @@ public void run() {
         chatListView.setOnItemLongClickListener(onItemLongClickListener);
         chatListView.setOnItemClickListener(onItemClickListener);
         chatListView.setLongClickable(true);
+
     }
 
     @Override
@@ -4566,6 +4579,7 @@ public void onPause() {
             chatLeaveTime = System.currentTimeMillis();
             updateInformationForScreenshotDetector();
         }
+
     }
 
     private void updateInformationForScreenshotDetector() {
@@ -5202,6 +5216,16 @@ public int getSelectedCount() {
         return 0;
     }
 
+    @Override
+    public long onDialogIdRequested() {
+        return dialog_id;
+    }
+
+    @Override
+    public ArrayList<MessageObject> onChatMessagesRequested() {
+        return messages;
+    }
+
     public class ChatActivityAdapter extends RecyclerView.Adapter {
 
         private Context mContext;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index b939a3ec7..192b1165f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -379,71 +379,11 @@ public void onClick(View v) {
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
-                    if (parentFragment != null) {
-                        String action;
-                        TLRPC.Chat currentChat;
-                        if ((int) dialog_id < 0) {
-                            currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
-                            if (currentChat != null && currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
-                                action = "bigchat_upload_audio";
-                            } else {
-                                action = "chat_upload_audio";
-                            }
-                        } else {
-                            action = "pm_upload_audio";
-                        }
-                        if (!MessagesController.isFeatureEnabled(action, parentFragment)) {
-                            return false;
-                        }
-                    }
-                    startedDraggingX = -1;
-                    MediaController.getInstance().startRecording(dialog_id, replyingMessageObject);
-                    updateAudioRecordIntefrace();
-                    audioSendButton.getParent().requestDisallowInterceptTouchEvent(true);
+                    if (startAudioMessageRecording()) return false;
                 } else if (motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
-                    startedDraggingX = -1;
-                    MediaController.getInstance().stopRecording(true);
-                    recordingAudio = false;
-                    updateAudioRecordIntefrace();
+                    stopAudioMessageRecording();
                 } else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE && recordingAudio) {
-                    float x = motionEvent.getX();
-                    if (x < -distCanMove) {
-                        MediaController.getInstance().stopRecording(false);
-                        recordingAudio = false;
-                        updateAudioRecordIntefrace();
-                    }
-
-                    x = x + ViewProxy.getX(audioSendButton);
-                    FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) slideText.getLayoutParams();
-                    if (startedDraggingX != -1) {
-                        float dist = (x - startedDraggingX);
-                        params.leftMargin = AndroidUtilities.dp(30) + (int) dist;
-                        slideText.setLayoutParams(params);
-                        float alpha = 1.0f + dist / distCanMove;
-                        if (alpha > 1) {
-                            alpha = 1;
-                        } else if (alpha < 0) {
-                            alpha = 0;
-                        }
-                        ViewProxy.setAlpha(slideText, alpha);
-                    }
-                    if (x <= ViewProxy.getX(slideText) + slideText.getWidth() + AndroidUtilities.dp(30)) {
-                        if (startedDraggingX == -1) {
-                            startedDraggingX = x;
-                            distCanMove = (recordPanel.getMeasuredWidth() - slideText.getMeasuredWidth() - AndroidUtilities.dp(48)) / 2.0f;
-                            if (distCanMove <= 0) {
-                                distCanMove = AndroidUtilities.dp(80);
-                            } else if (distCanMove > AndroidUtilities.dp(80)) {
-                                distCanMove = AndroidUtilities.dp(80);
-                            }
-                        }
-                    }
-                    if (params.leftMargin > AndroidUtilities.dp(30)) {
-                        params.leftMargin = AndroidUtilities.dp(30);
-                        slideText.setLayoutParams(params);
-                        ViewProxy.setAlpha(slideText, 1);
-                        startedDraggingX = -1;
-                    }
+                    cancelAudioMessageRecording(motionEvent);
                 }
                 view.onTouchEvent(motionEvent);
                 return true;
@@ -474,6 +414,79 @@ public void onClick(View view) {
         checkSendButton(false);
     }
 
+    private void cancelAudioMessageRecording(MotionEvent motionEvent) {
+        float x = motionEvent.getX();
+        if (x < -distCanMove) {
+            MediaController.getInstance().stopRecording(false);
+            recordingAudio = false;
+            updateAudioRecordIntefrace();
+        }
+
+        x = x + ViewProxy.getX(audioSendButton);
+        LayoutParams params = (LayoutParams) slideText.getLayoutParams();
+        if (startedDraggingX != -1) {
+            float dist = (x - startedDraggingX);
+            params.leftMargin = AndroidUtilities.dp(30) + (int) dist;
+            slideText.setLayoutParams(params);
+            float alpha = 1.0f + dist / distCanMove;
+            if (alpha > 1) {
+                alpha = 1;
+            } else if (alpha < 0) {
+                alpha = 0;
+            }
+            ViewProxy.setAlpha(slideText, alpha);
+        }
+        if (x <= ViewProxy.getX(slideText) + slideText.getWidth() + AndroidUtilities.dp(30)) {
+            if (startedDraggingX == -1) {
+                startedDraggingX = x;
+                distCanMove = (recordPanel.getMeasuredWidth() - slideText.getMeasuredWidth() - AndroidUtilities.dp(48)) / 2.0f;
+                if (distCanMove <= 0) {
+                    distCanMove = AndroidUtilities.dp(80);
+                } else if (distCanMove > AndroidUtilities.dp(80)) {
+                    distCanMove = AndroidUtilities.dp(80);
+                }
+            }
+        }
+        if (params.leftMargin > AndroidUtilities.dp(30)) {
+            params.leftMargin = AndroidUtilities.dp(30);
+            slideText.setLayoutParams(params);
+            ViewProxy.setAlpha(slideText, 1);
+            startedDraggingX = -1;
+        }
+    }
+
+    private void stopAudioMessageRecording() {
+        startedDraggingX = -1;
+        MediaController.getInstance().stopRecording(true);
+        recordingAudio = false;
+        updateAudioRecordIntefrace();
+    }
+
+    private boolean startAudioMessageRecording() {
+        if (parentFragment != null) {
+            String action;
+            TLRPC.Chat currentChat;
+            if ((int) dialog_id < 0) {
+                currentChat = MessagesController.getInstance().getChat(-(int) dialog_id);
+                if (currentChat != null && currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
+                    action = "bigchat_upload_audio";
+                } else {
+                    action = "chat_upload_audio";
+                }
+            } else {
+                action = "pm_upload_audio";
+            }
+            if (!MessagesController.isFeatureEnabled(action, parentFragment)) {
+                return true;
+            }
+        }
+        startedDraggingX = -1;
+        MediaController.getInstance().startRecording(dialog_id, replyingMessageObject);
+        updateAudioRecordIntefrace();
+        audioSendButton.getParent().requestDisallowInterceptTouchEvent(true);
+        return false;
+    }
+
     public void addTopView(View view, int height) {
         if (view == null) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 119f3dcd6..211d6318f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -139,6 +139,7 @@
     private int contactsReimportRow;
     private int contactsSortRow;
     private int rowCount;
+    private int enableRaiseToTalkRow;
 
     private final static int edit_name = 1;
     private final static int logout = 2;
@@ -241,6 +242,7 @@ public void run() {
         textSizeRow = rowCount++;
         stickersRow = rowCount++;
         sendByEnterRow = rowCount++;
+        enableRaiseToTalkRow = rowCount++;
         supportSectionRow = rowCount++;
         supportSectionRow2 = rowCount++;
         askQuestionRow = rowCount++;
@@ -595,6 +597,15 @@ public void onClick(DialogInterface dialog, int which, boolean isChecked) {
                     presentFragment(new ChangePhoneHelpActivity());
                 } else if (i == stickersRow) {
                     presentFragment(new StickersActivity());
+                } else if (i == enableRaiseToTalkRow){
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    boolean raiseToTalk = preferences.getBoolean("raise_to_talk", false);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("raise_to_talk", !raiseToTalk);
+                    editor.commit();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!raiseToTalk);
+                    }
                 }
             }
         });
@@ -1069,7 +1080,7 @@ public boolean isEnabled(int i) {
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == privacyRow || i == wifiDownloadRow ||
                     i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow ||
-                    i == stickersRow;
+                    i == stickersRow || i == enableRaiseToTalkRow;
         }
 
         @Override
@@ -1165,6 +1176,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setTextAndCheck(LocaleController.getString("SendByEnter", R.string.SendByEnter), preferences.getBoolean("send_by_enter", false), false);
                 } else if (i == saveToGalleryRow) {
                     textCell.setTextAndCheck(LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings), MediaController.getInstance().canSaveToGallery(), false);
+                } else if (i == enableRaiseToTalkRow) {
+                    textCell.setTextAndCheck("Raise to talk", preferences.getBoolean("raise_to_talk", false), false);
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -1267,7 +1280,7 @@ public int getItemViewType(int i) {
             }
             if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
                 return 1;
-            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow) {
+            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow || i == enableRaiseToTalkRow) {
                 return 3;
             } else if (i == notificationRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == languageRow || i == contactsSortRow || i == stickersRow) {
                 return 2;
