diff --git a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
index af06cc34..a5ffd9c6 100644
--- a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
+++ b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
@@ -19,14 +19,54 @@
 import android.util.Log;
 import android.view.View;
 import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
 import io.reactivex.ObservableSource;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.functions.Action;
+import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Function;
 import io.reactivex.observers.DisposableObserver;
 import io.reactivex.schedulers.Schedulers;
+
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.Callable;
 
 public class MainActivity extends Activity {
+
+    static List<Student> students = new ArrayList<>();
+
+    class Student{
+        class Course{
+            Course(String name){
+                this.name = name;
+            }
+
+            public String getName() {
+                return name;
+            }
+
+            public void setName(String name) {
+                this.name = name;
+            }
+
+            private String name;
+        }
+
+        public List<Course> getCourses() {
+            return courses;
+        }
+
+        List<Course> courses = new ArrayList<>();
+        public Student(){
+            courses.add(new Course("c1"));
+            courses.add(new Course("c2"));
+        }
+    }
+
     private static final String TAG = "RxAndroidSamples";
 
     private final CompositeDisposable disposables = new CompositeDisposable();
@@ -39,6 +79,8 @@
                 onRunSchedulerExampleButtonClicked();
             }
         });
+        students.add(new Student());
+        students.add(new Student());
     }
 
     @Override protected void onDestroy() {
@@ -47,33 +89,135 @@
     }
 
     void onRunSchedulerExampleButtonClicked() {
+        func1(false);
+        func2(false);
+        func3(true);
+    }
+
+    private void func3(boolean b) {
+        if(!b){
+            return;
+        }
+        disposables.add(sampleObservable3()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(new DisposableObserver<Student.Course>() {
+                    @Override public void onComplete() {
+                        Log.d(TAG, "onComplete()");
+                    }
+
+                    @Override public void onError(Throwable e) {
+                        Log.e(TAG, "onError()", e);
+                    }
+
+                    @Override public void onNext(Student.Course course) {
+                        Log.d(TAG, "onNext(" + course.getName() + ")");
+                    }
+                }));
+    }
+
+    private void func2(boolean b) {
+        if(!b){
+            return;
+        }
+        disposables.add(sampleObservable2()
+                // Run on a background thread
+                .subscribeOn(Schedulers.io())
+                // Be notified on the main thread
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(new DisposableObserver<String>() {
+                    @Override public void onComplete() {
+                        Log.d(TAG, "onComplete()");
+                    }
+
+                    @Override public void onError(Throwable e) {
+                        Log.e(TAG, "onError()", e);
+                    }
+
+                    @Override public void onNext(String string) {
+                        Log.d(TAG, "onNext(" + string + ")");
+                    }
+                }));
+    }
+
+    private void func1(boolean b) {
+        if(!b){
+            return;
+        }
         disposables.add(sampleObservable()
-            // Run on a background thread
-            .subscribeOn(Schedulers.io())
-            // Be notified on the main thread
-            .observeOn(AndroidSchedulers.mainThread())
-            .subscribeWith(new DisposableObserver<String>() {
-                @Override public void onComplete() {
-                    Log.d(TAG, "onComplete()");
-                }
-
-                @Override public void onError(Throwable e) {
-                    Log.e(TAG, "onError()", e);
-                }
-
-                @Override public void onNext(String string) {
-                    Log.d(TAG, "onNext(" + string + ")");
-                }
-            }));
+                // Run on a background thread
+                .subscribeOn(Schedulers.io())
+                // Be notified on the main thread
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(new DisposableObserver<String>() {
+                    @Override public void onComplete() {
+                        Log.d(TAG, "onComplete()");
+                    }
+
+                    @Override public void onError(Throwable e) {
+                        Log.e(TAG, "onError()", e);
+                    }
+
+                    @Override public void onNext(String string) {
+                        Log.d(TAG, "onNext(" + string + ")");
+                    }
+                }));
     }
 
+
     static Observable<String> sampleObservable() {
         return Observable.defer(new Callable<ObservableSource<? extends String>>() {
-          @Override public ObservableSource<? extends String> call() throws Exception {
+            @Override
+            public ObservableSource<? extends String> call() throws Exception {
                 // Do some long running operation
-                SystemClock.sleep(5000);
                 return Observable.just("one", "two", "three", "four", "five");
             }
         });
     }
+
+    static Observable<String> sampleObservable2() {
+        return (Observable<String>) Observable.just(1,2,3,4)
+                .map(new io.reactivex.functions.Function<Integer, String>(){
+
+                    @Override
+                    public String apply(Integer integer) {
+                        return String.valueOf(integer)+", Hello!";
+                    }
+                });
+    }
+
+    static Observable<Student.Course> sampleObservable3() {
+        return Observable.fromIterable(students)
+                .flatMap(new Function<Student, Observable<Student.Course>>() {
+                    @Override
+                    public Observable<Student.Course> apply(Student student) throws Exception {
+                        return Observable.fromIterable(student.getCourses());
+                    }
+                });
+    }
+
+    static Observable<String> sampleObservable4(){
+        return Observable.fromIterable(students)
+                .flatMap(new Function<Student, Observable<Student.Course>>() {
+                    @Override
+                    public Observable<Student.Course> apply(Student student) throws Exception {
+                        return Observable.fromIterable(student.getCourses());
+                    }
+                })
+                .doOnNext(
+                        new Consumer<Student.Course>() {
+                            @Override
+                            public void accept(Student.Course course) throws Exception {
+                                course.setName(course.getName() + "...new suffix");
+                            }
+                        }
+                )
+                .map(new Function<Student.Course, String>() {
+
+                    @Override
+                    public String apply(Student.Course course) throws Exception {
+                        return course.getName();
+                    }
+                });
+    }
 }
