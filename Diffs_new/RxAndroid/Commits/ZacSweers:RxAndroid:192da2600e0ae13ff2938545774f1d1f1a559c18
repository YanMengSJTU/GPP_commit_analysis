diff --git a/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java b/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java
index b94594d2..f03575d1 100644
--- a/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java
+++ b/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java
@@ -14,16 +14,26 @@
 package rx.android.schedulers;
 
 import android.os.Looper;
+
 import rx.Scheduler;
 import rx.android.plugins.RxAndroidPlugins;
 import rx.android.plugins.RxAndroidSchedulersHook;
+import rx.annotations.Experimental;
+import rx.schedulers.Schedulers;
 
 /** Android-specific Schedulers. */
 public final class AndroidSchedulers {
-    private static final AndroidSchedulers INSTANCE = new AndroidSchedulers();
+    private static AndroidSchedulers INSTANCE = new AndroidSchedulers();
 
     private final Scheduler mainThreadScheduler;
 
+    private static synchronized AndroidSchedulers getInstance() {
+        if (INSTANCE == null) {
+            INSTANCE = new AndroidSchedulers();
+        }
+        return INSTANCE;
+    }
+
     private AndroidSchedulers() {
         RxAndroidSchedulersHook hook = RxAndroidPlugins.getInstance().getSchedulersHook();
 
@@ -37,7 +47,7 @@ private AndroidSchedulers() {
 
     /** A {@link Scheduler} which executes actions on the Android UI thread. */
     public static Scheduler mainThread() {
-        return INSTANCE.mainThreadScheduler;
+        return getInstance().mainThreadScheduler;
     }
 
     /** A {@link Scheduler} which executes actions on {@code looper}. */
@@ -45,4 +55,17 @@ public static Scheduler from(Looper looper) {
         if (looper == null) throw new NullPointerException("looper == null");
         return new LooperScheduler(looper);
     }
+
+    /**
+     * Resets the current {@link Schedulers} instance.
+     * <p>
+     * This API is experimental. Resetting the schedulers is dangerous
+     * during application runtime and also bad code could invoke it in
+     * the middle of an application life-cycle and really break applications
+     * if not used cautiously.
+     */
+    @Experimental
+    public static void reset() {
+        INSTANCE = null;
+    }
 }
diff --git a/rxandroid/src/test/java/rx/android/schedulers/ResetSchedulersTest.java b/rxandroid/src/test/java/rx/android/schedulers/ResetSchedulersTest.java
new file mode 100644
index 00000000..1e5498d8
--- /dev/null
+++ b/rxandroid/src/test/java/rx/android/schedulers/ResetSchedulersTest.java
@@ -0,0 +1,42 @@
+package rx.android.schedulers;
+
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import rx.Scheduler;
+import rx.android.plugins.RxAndroidPlugins;
+import rx.android.plugins.RxAndroidSchedulersHook;
+import rx.schedulers.TestScheduler;
+
+import static org.junit.Assert.assertTrue;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public final class ResetSchedulersTest {
+
+    @Test
+    public void reset() {
+        RxAndroidPlugins.getInstance().reset();
+
+        final TestScheduler testScheduler = new TestScheduler();
+        RxAndroidPlugins.getInstance().registerSchedulersHook(new RxAndroidSchedulersHook() {
+            @Override
+            public Scheduler getMainThreadScheduler() {
+                return testScheduler;
+            }
+        });
+        AndroidSchedulers.reset();
+
+        assertTrue(AndroidSchedulers.mainThread().equals(testScheduler));
+
+        RxAndroidPlugins.getInstance().reset();
+        RxAndroidPlugins.getInstance().registerSchedulersHook(RxAndroidSchedulersHook.getDefaultInstance());
+        AndroidSchedulers.reset();
+
+        assertTrue(AndroidSchedulers.mainThread() instanceof LooperScheduler);
+    }
+
+}
