diff --git a/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java b/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java
index 45cfd2c2..d86497af 100644
--- a/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java
+++ b/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java
@@ -16,6 +16,8 @@
 import android.widget.CompoundButton;
 import com.google.auto.value.AutoValue;
 
+/** @deprecated this class will be removed soon */
+@Deprecated
 @AutoValue
 public abstract class OnCheckedChangeEvent {
     public abstract CompoundButton view();
diff --git a/rxandroid/src/main/java/rx/android/view/OnClickEvent.java b/rxandroid/src/main/java/rx/android/view/OnClickEvent.java
index 9b5353b8..761a5877 100644
--- a/rxandroid/src/main/java/rx/android/view/OnClickEvent.java
+++ b/rxandroid/src/main/java/rx/android/view/OnClickEvent.java
@@ -17,6 +17,8 @@
 
 import com.google.auto.value.AutoValue;
 
+/** @deprecated this class will be removed soon */
+@Deprecated
 @AutoValue
 public abstract class OnClickEvent {
     public abstract View view();
diff --git a/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java b/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
index 047addb5..40a2db85 100644
--- a/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
+++ b/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
@@ -17,8 +17,8 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.Subscription;
-import rx.android.internal.Assertions;
 import rx.android.AndroidSubscriptions;
+import rx.android.internal.Assertions;
 import rx.functions.Action0;
 
 import java.util.ArrayList;
@@ -26,24 +26,24 @@
 import java.util.Map;
 import java.util.WeakHashMap;
 
-final class OnSubscribeViewClick implements Observable.OnSubscribe<OnClickEvent> {
+final class OnSubscribeViewClick<T extends View> implements Observable.OnSubscribe<T> {
     private final boolean emitInitialValue;
-    private final View view;
+    private final T view;
 
-    public OnSubscribeViewClick(final View view, final boolean emitInitialValue) {
+    public OnSubscribeViewClick(final T view, final boolean emitInitialValue) {
         this.emitInitialValue = emitInitialValue;
         this.view = view;
     }
 
     @Override
-    public void call(final Subscriber<? super OnClickEvent> observer) {
+    public void call(final Subscriber<? super T> observer) {
         Assertions.assertUiThread();
         final CompositeOnClickListener composite = CachedListeners.getFromViewOrCreate(view);
 
         final View.OnClickListener listener = new View.OnClickListener() {
             @Override
             public void onClick(final View clicked) {
-                observer.onNext(OnClickEvent.create(view));
+                observer.onNext(view);
             }
         };
 
@@ -55,14 +55,14 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(OnClickEvent.create(view));
+            observer.onNext(view);
         }
 
         composite.addOnClickListener(listener);
         observer.add(subscription);
     }
 
-    private static class CompositeOnClickListener implements View.OnClickListener {
+    static class CompositeOnClickListener implements View.OnClickListener {
         private final List<View.OnClickListener> listeners = new ArrayList<View.OnClickListener>();
 
         public boolean addOnClickListener(final View.OnClickListener listener) {
@@ -81,11 +81,11 @@ public void onClick(final View view) {
         }
     }
 
-    private static class CachedListeners {
-        private static final Map<View, CompositeOnClickListener> sCachedListeners = new WeakHashMap<View, CompositeOnClickListener>();
+    static class CachedListeners {
+        private static final Map<View, CompositeOnClickListener> cachedListeners = new WeakHashMap<View, CompositeOnClickListener>();
 
         public static CompositeOnClickListener getFromViewOrCreate(final View view) {
-            final CompositeOnClickListener cached = sCachedListeners.get(view);
+            final CompositeOnClickListener cached = cachedListeners.get(view);
 
             if (cached != null) {
                 return cached;
@@ -93,7 +93,7 @@ public static CompositeOnClickListener getFromViewOrCreate(final View view) {
 
             final CompositeOnClickListener listener = new CompositeOnClickListener();
 
-            sCachedListeners.put(view, listener);
+            cachedListeners.put(view, listener);
             view.setOnClickListener(listener);
 
             return listener;
diff --git a/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClickOld.java b/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClickOld.java
new file mode 100644
index 00000000..69b3b426
--- /dev/null
+++ b/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClickOld.java
@@ -0,0 +1,61 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.view;
+
+import android.view.View;
+import rx.Observable;
+import rx.Subscriber;
+import rx.Subscription;
+import rx.android.internal.Assertions;
+import rx.android.AndroidSubscriptions;
+import rx.functions.Action0;
+
+/** @deprecated this class will be removed soon */
+@Deprecated
+final class OnSubscribeViewClickOld implements Observable.OnSubscribe<OnClickEvent> {
+    private final boolean emitInitialValue;
+    private final View view;
+
+    public OnSubscribeViewClickOld(final View view, final boolean emitInitialValue) {
+        this.emitInitialValue = emitInitialValue;
+        this.view = view;
+    }
+
+    @Override
+    public void call(final Subscriber<? super OnClickEvent> observer) {
+        Assertions.assertUiThread();
+        final OnSubscribeViewClick.CompositeOnClickListener composite = OnSubscribeViewClick.CachedListeners.getFromViewOrCreate(view);
+
+        final View.OnClickListener listener = new View.OnClickListener() {
+            @Override
+            public void onClick(final View clicked) {
+                observer.onNext(OnClickEvent.create(view));
+            }
+        };
+
+        final Subscription subscription = AndroidSubscriptions.unsubscribeInUiThread(new Action0() {
+            @Override
+            public void call() {
+                composite.removeOnClickListener(listener);
+            }
+        });
+
+        if (emitInitialValue) {
+            observer.onNext(OnClickEvent.create(view));
+        }
+
+        composite.addOnClickListener(listener);
+        observer.add(subscription);
+    }
+}
diff --git a/rxandroid/src/main/java/rx/android/view/ViewObservable.java b/rxandroid/src/main/java/rx/android/view/ViewObservable.java
index 53586d26..06b141df 100644
--- a/rxandroid/src/main/java/rx/android/view/ViewObservable.java
+++ b/rxandroid/src/main/java/rx/android/view/ViewObservable.java
@@ -26,12 +26,24 @@ private ViewObservable() {
         throw new AssertionError("No instances");
     }
 
+    /** @deprecated this method will soon be replaced by renamed {@link #forClicks} */
+    @Deprecated
     public static Observable<OnClickEvent> clicks(final View view) {
         return clicks(view, false);
     }
 
+    /** @deprecated this method will soon be replaced by renamed {@link #forClicks} */
+    @Deprecated
     public static Observable<OnClickEvent> clicks(final View view, final boolean emitInitialValue) {
-        return Observable.create(new OnSubscribeViewClick(view, emitInitialValue));
+        return Observable.create(new OnSubscribeViewClickOld(view, emitInitialValue));
+    }
+
+    public static <T extends View> Observable<T> forClicks(final T view, final boolean emitInitialValue) {
+        return Observable.create(new OnSubscribeViewClick<T>(view, emitInitialValue));
+    }
+
+    public static <T extends View> Observable<T> forClicks(final T view) {
+        return forClicks(view, false);
     }
 
     /**
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
index b014b952..31239e07 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
@@ -18,9 +18,8 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.Subscription;
-import rx.android.view.OnCheckedChangeEvent;
-import rx.android.internal.Assertions;
 import rx.android.AndroidSubscriptions;
+import rx.android.internal.Assertions;
 import rx.functions.Action0;
 
 import java.util.ArrayList;
@@ -28,7 +27,7 @@
 import java.util.Map;
 import java.util.WeakHashMap;
 
-class OnSubscribeCompoundButtonInput implements Observable.OnSubscribe<OnCheckedChangeEvent> {
+class OnSubscribeCompoundButtonInput implements Observable.OnSubscribe<Boolean> {
     private final boolean emitInitialValue;
     private final CompoundButton button;
 
@@ -38,14 +37,14 @@ public OnSubscribeCompoundButtonInput(final CompoundButton button, final boolean
     }
 
     @Override
-    public void call(final Subscriber<? super OnCheckedChangeEvent> observer) {
+    public void call(final Subscriber<? super Boolean> observer) {
         Assertions.assertUiThread();
         final CompositeOnCheckedChangeListener composite = CachedListeners.getFromViewOrCreate(button);
 
         final CompoundButton.OnCheckedChangeListener listener = new CompoundButton.OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(final CompoundButton view, final boolean checked) {
-                observer.onNext(OnCheckedChangeEvent.create(button, checked));
+                observer.onNext(button.isChecked());
             }
         };
 
@@ -57,14 +56,14 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(OnCheckedChangeEvent.create(button));
+            observer.onNext(button.isChecked());
         }
 
         composite.addOnCheckedChangeListener(listener);
         observer.add(subscription);
     }
 
-    private static class CompositeOnCheckedChangeListener implements CompoundButton.OnCheckedChangeListener {
+    static class CompositeOnCheckedChangeListener implements CompoundButton.OnCheckedChangeListener {
         private final List<CompoundButton.OnCheckedChangeListener> listeners = new ArrayList<CompoundButton.OnCheckedChangeListener>();
 
         public boolean addOnCheckedChangeListener(final CompoundButton.OnCheckedChangeListener listener) {
@@ -83,11 +82,11 @@ public void onCheckedChanged(final CompoundButton button, final boolean checked)
         }
     }
 
-    private static class CachedListeners {
-        private static final Map<View, CompositeOnCheckedChangeListener> sCachedListeners = new WeakHashMap<View, CompositeOnCheckedChangeListener>();
+    static class CachedListeners {
+        private static final Map<View, CompositeOnCheckedChangeListener> cachedListeners = new WeakHashMap<View, CompositeOnCheckedChangeListener>();
 
         public static CompositeOnCheckedChangeListener getFromViewOrCreate(final CompoundButton button) {
-            final CompositeOnCheckedChangeListener cached = sCachedListeners.get(button);
+            final CompositeOnCheckedChangeListener cached = cachedListeners.get(button);
 
             if (cached != null) {
                 return cached;
@@ -95,7 +94,7 @@ public static CompositeOnCheckedChangeListener getFromViewOrCreate(final Compoun
 
             final CompositeOnCheckedChangeListener listener = new CompositeOnCheckedChangeListener();
 
-            sCachedListeners.put(button, listener);
+            cachedListeners.put(button, listener);
             button.setOnCheckedChangeListener(listener);
 
             return listener;
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInputOld.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInputOld.java
new file mode 100644
index 00000000..4e155201
--- /dev/null
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInputOld.java
@@ -0,0 +1,65 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.widget;
+
+import android.widget.CompoundButton;
+import rx.Observable;
+import rx.Subscriber;
+import rx.Subscription;
+import rx.android.view.OnCheckedChangeEvent;
+import rx.android.internal.Assertions;
+import rx.android.AndroidSubscriptions;
+import rx.functions.Action0;
+
+/** @deprecated this class will be removed soon */
+@Deprecated
+class OnSubscribeCompoundButtonInputOld implements Observable.OnSubscribe<OnCheckedChangeEvent> {
+    private final boolean emitInitialValue;
+    private final CompoundButton button;
+
+    public OnSubscribeCompoundButtonInputOld(final CompoundButton button, final boolean emitInitialValue) {
+        this.emitInitialValue = emitInitialValue;
+        this.button = button;
+    }
+
+    @Override
+    public void call(final Subscriber<? super OnCheckedChangeEvent> observer) {
+        Assertions.assertUiThread();
+        final OnSubscribeCompoundButtonInput.CompositeOnCheckedChangeListener composite =
+                OnSubscribeCompoundButtonInput.CachedListeners.getFromViewOrCreate(button);
+
+        final CompoundButton.OnCheckedChangeListener listener = new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(final CompoundButton view, final boolean checked) {
+                observer.onNext(OnCheckedChangeEvent.create(button, checked));
+            }
+        };
+
+        final Subscription subscription = AndroidSubscriptions.unsubscribeInUiThread(new Action0() {
+            @Override
+            public void call() {
+                composite.removeOnCheckedChangeListener(listener);
+            }
+        });
+
+        if (emitInitialValue) {
+            observer.onNext(OnCheckedChangeEvent.create(button));
+        }
+
+        composite.addOnCheckedChangeListener(listener);
+        observer.add(subscription);
+    }
+}
+
+
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
index c647bac9..2efdf0d1 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
@@ -13,32 +13,32 @@
  */
 package rx.android.widget;
 
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.widget.TextView;
 import rx.Observable;
 import rx.Subscriber;
 import rx.Subscription;
-import rx.android.internal.Assertions;
 import rx.android.AndroidSubscriptions;
+import rx.android.internal.Assertions;
 import rx.functions.Action0;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.widget.TextView;
 
-class OnSubscribeTextViewInput implements Observable.OnSubscribe<OnTextChangeEvent> {
+class OnSubscribeTextViewInput<T extends TextView> implements Observable.OnSubscribe<T> {
     private final boolean emitInitialValue;
-    private final TextView input;
+    private final T input;
 
-    public OnSubscribeTextViewInput(final TextView input, final boolean emitInitialValue) {
+    public OnSubscribeTextViewInput(final T input, final boolean emitInitialValue) {
         this.input = input;
         this.emitInitialValue = emitInitialValue;
     }
 
     @Override
-    public void call(final Subscriber<? super OnTextChangeEvent> observer) {
+    public void call(final Subscriber<? super T> observer) {
         Assertions.assertUiThread();
         final TextWatcher watcher = new SimpleTextWatcher() {
             @Override
             public void afterTextChanged(final Editable editable) {
-                observer.onNext(OnTextChangeEvent.create(input));
+                observer.onNext(input);
             }
         };
 
@@ -50,14 +50,14 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(OnTextChangeEvent.create(input));
+            observer.onNext(input);
         }
 
         input.addTextChangedListener(watcher);
         observer.add(subscription);
     }
 
-    private static class SimpleTextWatcher implements TextWatcher {
+    static class SimpleTextWatcher implements TextWatcher {
         @Override
         public void beforeTextChanged(final CharSequence sequence, final int start, final int count, final int after) {
             // nothing to do
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInputOld.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInputOld.java
new file mode 100644
index 00000000..6bad75ea
--- /dev/null
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInputOld.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.widget;
+
+import rx.Observable;
+import rx.Subscriber;
+import rx.Subscription;
+import rx.android.internal.Assertions;
+import rx.android.AndroidSubscriptions;
+import rx.functions.Action0;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.widget.TextView;
+
+/** @deprecated this class will be removed soon */
+@Deprecated
+class OnSubscribeTextViewInputOld implements Observable.OnSubscribe<OnTextChangeEvent> {
+    private final boolean emitInitialValue;
+    private final TextView input;
+
+    public OnSubscribeTextViewInputOld(final TextView input, final boolean emitInitialValue) {
+        this.input = input;
+        this.emitInitialValue = emitInitialValue;
+    }
+
+    @Override
+    public void call(final Subscriber<? super OnTextChangeEvent> observer) {
+        Assertions.assertUiThread();
+        final TextWatcher watcher = new OnSubscribeTextViewInput.SimpleTextWatcher() {
+            @Override
+            public void afterTextChanged(final Editable editable) {
+                observer.onNext(OnTextChangeEvent.create(input));
+            }
+        };
+
+        final Subscription subscription = AndroidSubscriptions.unsubscribeInUiThread(new Action0() {
+            @Override
+            public void call() {
+                input.removeTextChangedListener(watcher);
+            }
+        });
+
+        if (emitInitialValue) {
+            observer.onNext(OnTextChangeEvent.create(input));
+        }
+
+        input.addTextChangedListener(watcher);
+        observer.add(subscription);
+    }
+}
+
diff --git a/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java b/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java
index 20e51832..213d2e73 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java
@@ -18,6 +18,8 @@
 
 import com.google.auto.value.AutoValue;
 
+/** @deprecated this class will be removed soon */
+@Deprecated
 @AutoValue
 public abstract class OnTextChangeEvent {
     public abstract TextView view();
diff --git a/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java b/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
index 78eccf39..6dfc035d 100644
--- a/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
+++ b/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
@@ -1,3 +1,16 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package rx.android.widget;
 
 import android.widget.AbsListView;
@@ -13,20 +26,44 @@ private WidgetObservable() {
         throw new AssertionError("No instances");
     }
 
+    /** @deprecated this method will soon be replaced by renamed {@link #forText} */
+    @Deprecated
     public static Observable<OnTextChangeEvent> text(final TextView input) {
         return text(input, false);
     }
 
+    /** @deprecated this method will soon be replaced by renamed {@link #forText} */
+    @Deprecated
     public static Observable<OnTextChangeEvent> text(final TextView input, final boolean emitInitialValue) {
-        return Observable.create(new OnSubscribeTextViewInput(input, emitInitialValue));
+        return Observable.create(new OnSubscribeTextViewInputOld(input, emitInitialValue));
     }
 
+    public static <T extends TextView> Observable<T> forText(final T textView) {
+        return forText(textView, false);
+    }
+
+    public static <T extends TextView> Observable<T> forText(final T textView, final boolean emitInitialValue) {
+        return Observable.create(new OnSubscribeTextViewInput<T>(textView, emitInitialValue));
+    }
+
+    /** @deprecated this method will soon be removed, use {@link #toggle} instead */
+    @Deprecated
     public static Observable<OnCheckedChangeEvent> input(final CompoundButton button) {
         return input(button, false);
     }
 
+    /** @deprecated this method will soon be removed, use {@link #toggle} instead */
+    @Deprecated
     public static Observable<OnCheckedChangeEvent> input(final CompoundButton button, final boolean emitInitialValue) {
-        return Observable.create(new OnSubscribeCompoundButtonInput(button, emitInitialValue));
+        return Observable.create(new OnSubscribeCompoundButtonInputOld(button, emitInitialValue));
+    }
+
+    public static Observable<Boolean> toggle(final CompoundButton view) {
+        return toggle(view, false);
+    }
+
+    public static Observable<Boolean> toggle(final CompoundButton view, final boolean emitInitialValue) {
+        return Observable.create(new OnSubscribeCompoundButtonInput(view, emitInitialValue));
     }
 
     public static Observable<OnItemClickEvent> itemClicks(final AdapterView<?> adapterView) {
diff --git a/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java b/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
index 291a63a3..5266b6e9 100644
--- a/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
+++ b/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
@@ -13,53 +13,46 @@
  */
 package rx.android.view;
 
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.inOrder;
+
 import android.app.Activity;
 import android.view.View;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-
 import rx.Observable;
 import rx.Observer;
 import rx.Subscription;
 import rx.observers.TestObserver;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.inOrder;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.refEq;
-import static org.mockito.Mockito.times;
-
 @RunWith(RobolectricTestRunner.class)
 public class OperatorViewClickTest {
-    private static OnClickEvent mkMockedEvent(final View view) {
-        return refEq(OnClickEvent.create(view));
-    }
 
     @Test
-    @SuppressWarnings("unchecked")
     public void testWithoutInitialValue() {
         final View view = new View(Robolectric.buildActivity(Activity.class).create().get());
-        final Observable<OnClickEvent> observable = ViewObservable.clicks(view, false);
-        final Observer<OnClickEvent> observer = mock(Observer.class);
-        final Subscription subscription = observable.subscribe(new TestObserver<OnClickEvent>(observer));
+        final Observable<View> observable = ViewObservable.forClicks(view, false);
+        final Observer<View> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<View>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, never()).onNext(any(OnClickEvent.class));
+        inOrder.verify(observer, never()).onNext(any(View.class));
 
         view.performClick();
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(view));
+        inOrder.verify(observer, times(1)).onNext(view);
 
         view.performClick();
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(view));
+        inOrder.verify(observer, times(1)).onNext(view);
 
         subscription.unsubscribe();
-        inOrder.verify(observer, never()).onNext(any(OnClickEvent.class));
+        inOrder.verify(observer, never()).onNext(any(View.class));
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));
         inOrder.verify(observer, never()).onCompleted();
@@ -69,22 +62,22 @@ public void testWithoutInitialValue() {
     @SuppressWarnings("unchecked")
     public void testWithInitialValue() {
         final View view = new View(Robolectric.buildActivity(Activity.class).create().get());
-        final Observable<OnClickEvent> observable = ViewObservable.clicks(view, true);
-        final Observer<OnClickEvent> observer = mock(Observer.class);
-        final Subscription subscription = observable.subscribe(new TestObserver<OnClickEvent>(observer));
+        final Observable<View> observable = ViewObservable.forClicks(view, true);
+        final Observer<View> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<View>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(view));
+        inOrder.verify(observer, times(1)).onNext(view);
 
         view.performClick();
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(view));
+        inOrder.verify(observer, times(1)).onNext(view);
 
         view.performClick();
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(view));
+        inOrder.verify(observer, times(1)).onNext(view);
 
         subscription.unsubscribe();
-        inOrder.verify(observer, never()).onNext(any(OnClickEvent.class));
+        inOrder.verify(observer, never()).onNext(any(View.class));
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));
         inOrder.verify(observer, never()).onCompleted();
@@ -94,34 +87,34 @@ public void testWithInitialValue() {
     @SuppressWarnings("unchecked")
     public void testMultipleSubscriptions() {
         final View view = new View(Robolectric.buildActivity(Activity.class).create().get());
-        final Observable<OnClickEvent> observable = ViewObservable.clicks(view, false);
+        final Observable<View> observable = ViewObservable.forClicks(view, false);
 
-        final Observer<OnClickEvent> observer1 = mock(Observer.class);
-        final Observer<OnClickEvent> observer2 = mock(Observer.class);
+        final Observer<View> observer1 = mock(Observer.class);
+        final Observer<View> observer2 = mock(Observer.class);
 
-        final Subscription subscription1 = observable.subscribe(new TestObserver<OnClickEvent>(observer1));
-        final Subscription subscription2 = observable.subscribe(new TestObserver<OnClickEvent>(observer2));
+        final Subscription subscription1 = observable.subscribe(new TestObserver<View>(observer1));
+        final Subscription subscription2 = observable.subscribe(new TestObserver<View>(observer2));
 
         final InOrder inOrder1 = inOrder(observer1);
         final InOrder inOrder2 = inOrder(observer2);
 
         view.performClick();
-        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(view));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(view));
+        inOrder1.verify(observer1, times(1)).onNext(view);
+        inOrder2.verify(observer2, times(1)).onNext(view);
 
         view.performClick();
-        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(view));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(view));
+        inOrder1.verify(observer1, times(1)).onNext(view);
+        inOrder2.verify(observer2, times(1)).onNext(view);
         subscription1.unsubscribe();
 
         view.performClick();
-        inOrder1.verify(observer1, never()).onNext(any(OnClickEvent.class));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(view));
+        inOrder1.verify(observer1, never()).onNext(any(View.class));
+        inOrder2.verify(observer2, times(1)).onNext(view);
         subscription2.unsubscribe();
 
         view.performClick();
-        inOrder1.verify(observer1, never()).onNext(any(OnClickEvent.class));
-        inOrder2.verify(observer2, never()).onNext(any(OnClickEvent.class));
+        inOrder1.verify(observer1, never()).onNext(any(View.class));
+        inOrder2.verify(observer2, never()).onNext(any(View.class));
 
         inOrder1.verify(observer1, never()).onError(any(Throwable.class));
         inOrder2.verify(observer2, never()).onError(any(Throwable.class));
diff --git a/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java b/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
index 20440f21..e1b126f8 100644
--- a/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
+++ b/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
@@ -24,23 +24,19 @@
 import rx.Observable;
 import rx.Observer;
 import rx.Subscription;
-import rx.android.view.OnCheckedChangeEvent;
 import rx.observers.TestObserver;
 
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.refEq;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.anyBoolean;
 
 @RunWith(RobolectricTestRunner.class)
 public class OperatorCompoundButtonInputTest {
-    private static OnCheckedChangeEvent mkMockedEvent(final CompoundButton button, final boolean value) {
-        return refEq(OnCheckedChangeEvent.create(button, value));
-    }
 
-    private static CompoundButton mkCompoundButton(final boolean value) {
+    private static CompoundButton createCompoundButton(final boolean value) {
         final Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         final CheckBox checkbox = new CheckBox(activity);
 
@@ -51,30 +47,30 @@ private static CompoundButton mkCompoundButton(final boolean value) {
     @Test
     @SuppressWarnings("unchecked")
     public void testWithoutInitialValue() {
-        final CompoundButton button = mkCompoundButton(true);
-        final Observable<OnCheckedChangeEvent> observable = WidgetObservable.input(button, false);
-        final Observer<OnCheckedChangeEvent> observer = mock(Observer.class);
-        final Subscription subscription = observable.subscribe(new TestObserver<OnCheckedChangeEvent>(observer));
+        final CompoundButton button = createCompoundButton(true);
+        final Observable<Boolean> observable = WidgetObservable.toggle(button, false);
+        final Observer<Boolean> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<Boolean>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, never()).onNext(any(OnCheckedChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(anyBoolean());
 
         button.setChecked(true);
-        inOrder.verify(observer, never()).onNext(any(OnCheckedChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(anyBoolean());
 
         button.setChecked(false);
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(button, false));
+        inOrder.verify(observer, times(1)).onNext(false);
 
         button.setChecked(true);
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(button, true));
+        inOrder.verify(observer, times(1)).onNext(true);
 
         button.setChecked(false);
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(button, false));
+        inOrder.verify(observer, times(1)).onNext(false);
         subscription.unsubscribe();
 
         button.setChecked(true);
-        inOrder.verify(observer, never()).onNext(any(OnCheckedChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(anyBoolean());
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));
         inOrder.verify(observer, never()).onCompleted();
@@ -83,30 +79,30 @@ public void testWithoutInitialValue() {
     @Test
     @SuppressWarnings("unchecked")
     public void testWithInitialValue() {
-        final CompoundButton button = mkCompoundButton(true);
-        final Observable<OnCheckedChangeEvent> observable = WidgetObservable.input(button, true);
-        final Observer<OnCheckedChangeEvent> observer = mock(Observer.class);
-        final Subscription subscription = observable.subscribe(new TestObserver<OnCheckedChangeEvent>(observer));
+        final CompoundButton button = createCompoundButton(true);
+        final Observable<Boolean> observable = WidgetObservable.toggle(button, true);
+        final Observer<Boolean> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<Boolean>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(button, true));
+        inOrder.verify(observer, times(1)).onNext(true);
 
         button.setChecked(false);
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(button, false));
+        inOrder.verify(observer, times(1)).onNext(false);
 
         button.setChecked(true);
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(button, true));
+        inOrder.verify(observer, times(1)).onNext(true);
 
         button.setChecked(true);
-        inOrder.verify(observer, never()).onNext(any(OnCheckedChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(anyBoolean());
 
         button.setChecked(false);
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(button, false));
+        inOrder.verify(observer, times(1)).onNext(false);
         subscription.unsubscribe();
 
         button.setChecked(true);
-        inOrder.verify(observer, never()).onNext(any(OnCheckedChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(anyBoolean());
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));
         inOrder.verify(observer, never()).onCompleted();
@@ -115,35 +111,35 @@ public void testWithInitialValue() {
     @Test
     @SuppressWarnings("unchecked")
     public void testMultipleSubscriptions() {
-        final CompoundButton button = mkCompoundButton(false);
-        final Observable<OnCheckedChangeEvent> observable = WidgetObservable.input(button, false);
+        final CompoundButton button = createCompoundButton(false);
+        final Observable<Boolean> observable = WidgetObservable.toggle(button, false);
 
-        final Observer<OnCheckedChangeEvent> observer1 = mock(Observer.class);
-        final Observer<OnCheckedChangeEvent> observer2 = mock(Observer.class);
+        final Observer<Boolean> observer1 = mock(Observer.class);
+        final Observer<Boolean> observer2 = mock(Observer.class);
 
-        final Subscription subscription1 = observable.subscribe(new TestObserver<OnCheckedChangeEvent>(observer1));
-        final Subscription subscription2 = observable.subscribe(new TestObserver<OnCheckedChangeEvent>(observer2));
+        final Subscription subscription1 = observable.subscribe(new TestObserver<Boolean>(observer1));
+        final Subscription subscription2 = observable.subscribe(new TestObserver<Boolean>(observer2));
 
         final InOrder inOrder1 = inOrder(observer1);
         final InOrder inOrder2 = inOrder(observer2);
 
         button.setChecked(true);
-        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(button, true));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(button, true));
+        inOrder1.verify(observer1, times(1)).onNext(true);
+        inOrder2.verify(observer2, times(1)).onNext(true);
 
         button.setChecked(false);
-        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(button, false));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(button, false));
+        inOrder1.verify(observer1, times(1)).onNext(false);
+        inOrder2.verify(observer2, times(1)).onNext(false);
         subscription1.unsubscribe();
 
         button.setChecked(true);
-        inOrder1.verify(observer1, never()).onNext(any(OnCheckedChangeEvent.class));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(button, true));
+        inOrder1.verify(observer1, never()).onNext(anyBoolean());
+        inOrder2.verify(observer2, times(1)).onNext(true);
         subscription2.unsubscribe();
 
         button.setChecked(false);
-        inOrder1.verify(observer1, never()).onNext(any(OnCheckedChangeEvent.class));
-        inOrder2.verify(observer2, never()).onNext(any(OnCheckedChangeEvent.class));
+        inOrder1.verify(observer1, never()).onNext(anyBoolean());
+        inOrder2.verify(observer2, never()).onNext(anyBoolean());
 
         inOrder1.verify(observer1, never()).onError(any(Throwable.class));
         inOrder1.verify(observer1, never()).onCompleted();
diff --git a/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java b/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
index 6fd9ae26..3e1a78da 100644
--- a/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
+++ b/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
@@ -13,50 +13,31 @@
  */
 package rx.android.widget;
 
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.times;
+
 import android.app.Activity;
-import android.text.TextUtils;
 import android.widget.EditText;
 import android.widget.TextView;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.ArgumentMatcher;
 import org.mockito.InOrder;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import rx.Observable;
 import rx.Observer;
 import rx.Subscription;
+import rx.functions.Func1;
 import rx.observers.TestObserver;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.inOrder;
-import static org.mockito.Mockito.argThat;
-
 @RunWith(RobolectricTestRunner.class)
 public class OperatorTextViewInputTest {
-    private static OnTextChangeEvent mkMockedEvent(final TextView view, final CharSequence text) {
-        return argThat(new ArgumentMatcher<OnTextChangeEvent>() {
-            @Override
-            public boolean matches(final Object argument) {
-                if (!(argument instanceof OnTextChangeEvent)) {
-                    return false;
-                }
-
-                final OnTextChangeEvent event = (OnTextChangeEvent) argument;
-
-                if (event.view() != view) {
-                    return false;
-                }
-
-                return TextUtils.equals(event.text(), text);
-            }
-        });
-    }
 
-    private static TextView mkTextView(final CharSequence value) {
+    private static TextView createTextView(final String value) {
         final Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         final TextView text = new TextView(activity);
 
@@ -67,7 +48,7 @@ private static TextView mkTextView(final CharSequence value) {
         return text;
     }
 
-    private static EditText mkEditText(final CharSequence value) {
+    private static EditText createEditText(final String value) {
         final Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         final EditText text = new EditText(activity);
 
@@ -81,27 +62,27 @@ private static EditText mkEditText(final CharSequence value) {
     @Test
     @SuppressWarnings("unchecked")
     public void testOverloadedMethodDefaultsWithoutInitialValue() {
-        final TextView input = mkTextView("initial");
-        final Observable<OnTextChangeEvent> observable = WidgetObservable.text(input);
-        final Observer<OnTextChangeEvent> observer = mock(Observer.class);
-        final Subscription subscription = observable.subscribe(new TestObserver<OnTextChangeEvent>(observer));
+        final TextView input = createTextView("initial");
+        final Observable<TextView> observable = WidgetObservable.forText(input);
+        final Observer<TextView> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<TextView>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, never()).onNext(any(OnTextChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(any(TextView.class));
 
         input.setText("1");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "1"));
+        inOrder.verify(observer, times(1)).onNext(input);
 
         input.setText("2");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "2"));
+        inOrder.verify(observer, times(1)).onNext(input);
 
         input.setText("3");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "3"));
+        inOrder.verify(observer, times(1)).onNext(input);
 
         subscription.unsubscribe();
         input.setText("4");
-        inOrder.verify(observer, never()).onNext(any(OnTextChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(any(TextView.class));
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));
         inOrder.verify(observer, never()).onCompleted();
@@ -110,27 +91,27 @@ public void testOverloadedMethodDefaultsWithoutInitialValue() {
     @Test
     @SuppressWarnings("unchecked")
     public void testWithoutInitialValue() {
-        final TextView input = mkTextView("initial");
-        final Observable<OnTextChangeEvent> observable = WidgetObservable.text(input, false);
-        final Observer<OnTextChangeEvent> observer = mock(Observer.class);
-        final Subscription subscription = observable.subscribe(new TestObserver<OnTextChangeEvent>(observer));
+        final TextView input = createTextView("initial");
+        final Observable<TextView> observable = WidgetObservable.forText(input, false);
+        final Observer<TextView> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<TextView>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, never()).onNext(any(OnTextChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(any(TextView.class));
 
         input.setText("1");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "1"));
+        inOrder.verify(observer, times(1)).onNext(input);
 
         input.setText("2");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "2"));
+        inOrder.verify(observer, times(1)).onNext(input);
 
         input.setText("3");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "3"));
+        inOrder.verify(observer, times(1)).onNext(input);
 
         subscription.unsubscribe();
         input.setText("4");
-        inOrder.verify(observer, never()).onNext(any(OnTextChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(any(TextView.class));
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));
         inOrder.verify(observer, never()).onCompleted();
@@ -139,27 +120,27 @@ public void testWithoutInitialValue() {
     @Test
     @SuppressWarnings("unchecked")
     public void testWithInitialValue() {
-        final TextView input = mkTextView("initial");
-        final Observable<OnTextChangeEvent> observable = WidgetObservable.text(input, true);
-        final Observer<OnTextChangeEvent> observer = mock(Observer.class);
-        final Subscription subscription = observable.subscribe(new TestObserver<OnTextChangeEvent>(observer));
+        final TextView input = createTextView("initial");
+        final Observable<TextView> observable = WidgetObservable.forText(input, true);
+        final Observer<TextView> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<TextView>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "initial"));
+        inOrder.verify(observer, times(1)).onNext(input);
 
-        input.setText("1");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "1"));
+        input.setText("one");
+        inOrder.verify(observer, times(1)).onNext(input);
 
-        input.setText("2");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "2"));
+        input.setText("two");
+        inOrder.verify(observer, times(1)).onNext(input);
 
-        input.setText("3");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "3"));
+        input.setText("three");
+        inOrder.verify(observer, times(1)).onNext(input);
 
         subscription.unsubscribe();
-        input.setText("4");
-        inOrder.verify(observer, never()).onNext(any(OnTextChangeEvent.class));
+        input.setText("four");
+        inOrder.verify(observer, never()).onNext(any(TextView.class));
 
         inOrder.verify(observer, never()).onError(any(Throwable.class));
         inOrder.verify(observer, never()).onCompleted();
@@ -168,35 +149,35 @@ public void testWithInitialValue() {
     @Test
     @SuppressWarnings("unchecked")
     public void testMultipleSubscriptions() {
-        final TextView input = mkTextView("initial");
-        final Observable<OnTextChangeEvent> observable = WidgetObservable.text(input, false);
+        final TextView input = createTextView("initial");
+        final Observable<TextView> observable = WidgetObservable.forText(input, false);
 
-        final Observer<OnTextChangeEvent> observer1 = mock(Observer.class);
-        final Observer<OnTextChangeEvent> observer2 = mock(Observer.class);
+        final Observer<TextView> observer1 = mock(Observer.class);
+        final Observer<TextView> observer2 = mock(Observer.class);
 
-        final Subscription subscription1 = observable.subscribe(new TestObserver<OnTextChangeEvent>(observer1));
-        final Subscription subscription2 = observable.subscribe(new TestObserver<OnTextChangeEvent>(observer2));
+        final Subscription subscription1 = observable.subscribe(new TestObserver<TextView>(observer1));
+        final Subscription subscription2 = observable.subscribe(new TestObserver<TextView>(observer2));
 
         final InOrder inOrder1 = inOrder(observer1);
         final InOrder inOrder2 = inOrder(observer2);
 
         input.setText("1");
-        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(input, "1"));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(input, "1"));
+        inOrder1.verify(observer1, times(1)).onNext(input);
+        inOrder2.verify(observer2, times(1)).onNext(input);
 
         input.setText("2");
-        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(input, "2"));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(input, "2"));
+        inOrder1.verify(observer1, times(1)).onNext(input);
+        inOrder2.verify(observer2, times(1)).onNext(input);
         subscription1.unsubscribe();
 
         input.setText("3");
-        inOrder1.verify(observer1, never()).onNext(any(OnTextChangeEvent.class));
-        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(input, "3"));
+        inOrder1.verify(observer1, never()).onNext(any(TextView.class));
+        inOrder2.verify(observer2, times(1)).onNext(input);
         subscription2.unsubscribe();
 
         input.setText("4");
-        inOrder1.verify(observer1, never()).onNext(any(OnTextChangeEvent.class));
-        inOrder2.verify(observer2, never()).onNext(any(OnTextChangeEvent.class));
+        inOrder1.verify(observer1, never()).onNext(any(TextView.class));
+        inOrder2.verify(observer2, never()).onNext(any(TextView.class));
 
         inOrder1.verify(observer1, never()).onError(any(Throwable.class));
         inOrder2.verify(observer2, never()).onError(any(Throwable.class));
@@ -208,17 +189,46 @@ public void testMultipleSubscriptions() {
     @Test
     @SuppressWarnings("unchecked")
     public void testTextViewSubclass() {
-        final EditText input = mkEditText("initial");
-        final Observable<OnTextChangeEvent> observable = WidgetObservable.text(input, false);
-        final Observer<OnTextChangeEvent> observer = mock(Observer.class);
-        observable.subscribe(new TestObserver<OnTextChangeEvent>(observer));
+        final EditText input = createEditText("initial");
+        final Observable<EditText> observable = WidgetObservable.forText(input, false);
+        final Observer<EditText> observer = mock(Observer.class);
+        observable.subscribe(new TestObserver<EditText>(observer));
 
         final InOrder inOrder = inOrder(observer);
 
-        inOrder.verify(observer, never()).onNext(any(OnTextChangeEvent.class));
+        inOrder.verify(observer, never()).onNext(any(EditText.class));
 
         input.setText("1");
-        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, "1"));
+        inOrder.verify(observer, times(1)).onNext(input);
     }
-}
 
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testLegacyStringObservableCompatibility() {
+        final EditText input = createEditText("initial");
+        final Observable<String> observable = WidgetObservable.forText(input, false)
+            .map(new Func1<EditText, String>() {
+
+                    @Override
+                    public String call(EditText view) {
+                        return view.getText().toString();
+                    }
+                });
+        final Observer<String> observer = mock(Observer.class);
+        observable.subscribe(new TestObserver<String>(observer));
+
+        final InOrder inOrder = inOrder(observer);
+
+        inOrder.verify(observer, never()).onNext(anyString());
+
+        input.setText("1");
+        inOrder.verify(observer, times(1)).onNext("1");
+
+        input.setText("2");
+        inOrder.verify(observer, times(1)).onNext("2");
+
+        input.setText("3");
+        inOrder.verify(observer, times(1)).onNext("3");
+    }
+
+}
