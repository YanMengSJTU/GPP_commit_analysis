diff --git a/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
index 138e6945..ea50ab36 100644
--- a/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
+++ b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
@@ -80,21 +80,26 @@ public Boolean call(LifecycleEvent lifecycleEvent) {
      * {@link android.app.Application.ActivityLifecycleCallbacks} provided in
      * API 14 to listen for Activity lifecycle.
      *
-     * @param activity the activity we want to monitor lifecycle sequence for
-     * @param source   the source sequence
-     * @param bindEvent the binding {@link LifecycleEvent} associated with the <code>source</code> Observable.
-     * <p>
+     *</p>
      * This helps figuring out the corresponding next lifecycle event in which to unsubscribe.
-     * <pre> {@code
-     *  @Override
-     *  protected void onStart() {
+     * <pre>
+     * {@code
+     *  class MyActivity extends Activity {
+     *    protected void onStart() {
      *      super.onStart();
      *      subscription = LifecycleObservable.bindActivityLifecycle(
      *          this,
      *          ViewObservable.clicks(button),
      *          LifecycleEvent.START)
      *         .subscribe(...);
-     * }</pre>
+     *   }
+     *  }
+     * }
+     * </pre>
+     *
+     * @param activity the activity we want to monitor lifecycle sequence for
+     * @param source   the source sequence
+     * @param bindEvent the binding {@link LifecycleEvent} associated with the <code>source</code> Observable.
      */
     @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     public static <T> Observable<T> bindActivityLifecycle(Activity activity, Observable<T> source, final LifecycleEvent bindEvent) {
@@ -167,14 +172,14 @@ public Boolean call(Boolean shouldComplete) {
 
     private static <T> Observable<T> bindLifecycle(Observable<LifecycleEvent> lifecycle,
                                                    Observable<T> source,
-                                                   LifecycleEvent registerEvent) {
+                                                   LifecycleEvent bindEvent) {
         if (lifecycle == null || source == null) {
             throw new IllegalArgumentException("Lifecycle and Observable must be given");
         }
 
         // Make sure we're truly comparing a single stream to itself
         Observable<LifecycleEvent> sharedLifecycle = lifecycle.share();
-        final Observable<LifecycleEvent> bindUntil = Observable.just(getActivityStoppingLifecycleEvent(registerEvent));
+        final Observable<LifecycleEvent> bindUntil = Observable.just(getActivityStoppingLifecycleEvent(bindEvent));
 
         // Keep emitting from source until the corresponding event occurs in the lifecycle
         return source.lift(
@@ -237,35 +242,7 @@ public LifecycleEvent call(LifecycleEvent lastEvent) {
             new Func1<LifecycleEvent, LifecycleEvent>() {
                 @Override
                 public LifecycleEvent call(LifecycleEvent lastEvent) {
-                    if (lastEvent == null) {
-                        throw new NullPointerException("Cannot bind to null LifecycleEvent.");
-                    }
-
-                    switch (lastEvent) {
-                        case ATTACH:
-                            return LifecycleEvent.DETACH;
-                        case CREATE:
-                            return LifecycleEvent.DESTROY;
-                        case CREATE_VIEW:
-                            return LifecycleEvent.DESTROY_VIEW;
-                        case START:
-                            return LifecycleEvent.STOP;
-                        case RESUME:
-                            return LifecycleEvent.PAUSE;
-                        case PAUSE:
-                            return LifecycleEvent.STOP;
-                        case STOP:
-                            return LifecycleEvent.DESTROY_VIEW;
-                        case DESTROY_VIEW:
-                            return LifecycleEvent.DESTROY;
-                        case DESTROY:
-                            return LifecycleEvent.DETACH;
-                        case DETACH:
-                            throw new IllegalStateException("Cannot bind to Fragment lifecycle when outside of it.");
-                        default:
-                            throw new UnsupportedOperationException("Binding to LifecycleEvent " + lastEvent
-                                    + " not yet implemented");
-                    }
+                    return getActivityStoppingLifecycleEvent(lastEvent);
                 }
             };
 
diff --git a/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java b/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java
index 72b75480..e0103878 100644
--- a/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java
+++ b/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java
@@ -34,7 +34,7 @@ public void call(Subscriber<? super LifecycleEvent> subscriber) {
     public void onActivityCreated(final Activity activity, Bundle bundle) {
         Observable
                 .just(activity)
-                .filter(filter)
+                .filter(sameInstance)
                 .subscribe(sendCreateEvent);
     }
 
@@ -42,7 +42,7 @@ public void onActivityCreated(final Activity activity, Bundle bundle) {
     public void onActivityStarted(Activity activity) {
         Observable
                 .just(activity)
-                .filter(filter)
+                .filter(sameInstance)
                 .subscribe(sendStartEvent);
     }
 
@@ -50,7 +50,7 @@ public void onActivityStarted(Activity activity) {
     public void onActivityResumed(Activity activity) {
         Observable
                 .just(activity)
-                .filter(filter)
+                .filter(sameInstance)
                 .subscribe(sendResumeEvent);
     }
 
@@ -58,7 +58,7 @@ public void onActivityResumed(Activity activity) {
     public void onActivityPaused(Activity activity) {
         Observable
                 .just(activity)
-                .filter(filter)
+                .filter(sameInstance)
                 .subscribe(sendPauseEvent);
     }
 
@@ -66,7 +66,7 @@ public void onActivityPaused(Activity activity) {
     public void onActivityStopped(Activity activity) {
         Observable
                 .just(activity)
-                .filter(filter)
+                .filter(sameInstance)
                 .subscribe(sendStopEvent);
     }
 
@@ -78,18 +78,18 @@ public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
     public void onActivityDestroyed(Activity activity) {
         Observable
                 .just(activity)
-                .filter(filter)
+                .filter(sameInstance)
                 .doOnNext(sendDestroyEvent)
                 .subscribe(unregisterActivityLifecycleCallbacks);
 
     }
 
-    private final Func1<Activity, Boolean> filter =
+    private final Func1<Activity, Boolean> sameInstance =
             new Func1<Activity, Boolean>() {
                 @Override
                 public Boolean call(Activity callbackActivity) {
                     // Application notify all instances of ActivityLifecycleCallbacks when a particular
-                    // event is emitted, we use identity comparison to filter out events related
+                    // event is emitted, we use identity comparison to sameInstance out events related
                     // to the instance of Activity we're currently monitoring
                     return callbackActivity == activityToMonitor;
                 }
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/ActivityLifecycleCallbacksObservableTest.java b/rxandroid/src/test/java/rx/android/lifecycle/ActivityLifecycleCallbacksObservableTest.java
index ea412a8f..dd2c28cf 100644
--- a/rxandroid/src/test/java/rx/android/lifecycle/ActivityLifecycleCallbacksObservableTest.java
+++ b/rxandroid/src/test/java/rx/android/lifecycle/ActivityLifecycleCallbacksObservableTest.java
@@ -47,9 +47,8 @@ public void testBindOnCreate() {
         assertFalse(bindActivityRule.activity.getSubscription().isUnsubscribed());
 
         // We will unsubscribe onDestroy, but the current version of Robolectric doesn't emit this event
-        // correctly  see https://github.com/robolectric/robolectric/issues/1429 (has been fixed on Snapshot BTW)
-        // FIXME update this test once Robolectric bug https://github.com/robolectric/robolectric/issues/1429
-        // once the fix (currently in robolectric:3.0-SNAPSHOT) will be released
+        // correctly  see https://github.com/robolectric/robolectric/issues/1429 (has been fixed in Snapshot BTW)
+        // FIXME update this test once the fix is released (currently in robolectric:3.0-SNAPSHOT)
         //bindActivityRule.controller.destroy();
         //assertTrue(bindActivityRule.activity.getSubscription().isUnsubscribed());
     }
@@ -139,9 +138,8 @@ public void testBindOnStop() {
         assertFalse(bindActivityRule.activity.getSubscription().isUnsubscribed());
 
         // We will unsubscribe onDestroy, but the current version of Robolectric doesn't emit this event
-        // correctly  see https://github.com/robolectric/robolectric/issues/1429 (has been fixed on Snapshot BTW)
-        // FIXME update this test once Robolectric bug https://github.com/robolectric/robolectric/issues/1429
-        // once the fix (currently in robolectric:3.0-SNAPSHOT) will be released
+        // correctly  see https://github.com/robolectric/robolectric/issues/1429 (has been fixed in Snapshot BTW)
+        // FIXME update this test once the fix is released (currently in robolectric:3.0-SNAPSHOT)
         //bindActivityRule.controller.destroy();
         //assertTrue(bindActivityRule.activity.getSubscription().isUnsubscribed());
     }
