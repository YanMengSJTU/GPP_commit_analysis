diff --git a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
index af06cc34..c6d3d0ed 100644
--- a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
+++ b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
@@ -18,62 +18,99 @@
 import android.os.SystemClock;
 import android.util.Log;
 import android.view.View;
+
+import org.reactivestreams.Subscriber;
+import org.reactivestreams.Subscription;
+
+import io.reactivex.BackpressureStrategy;
+import io.reactivex.Flowable;
+import io.reactivex.FlowableEmitter;
+import io.reactivex.FlowableOnSubscribe;
 import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
 import io.reactivex.ObservableSource;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.functions.Consumer;
 import io.reactivex.observers.DisposableObserver;
 import io.reactivex.schedulers.Schedulers;
+
 import java.util.concurrent.Callable;
 
 public class MainActivity extends Activity {
     private static final String TAG = "RxAndroidSamples";
 
-    private final CompositeDisposable disposables = new CompositeDisposable();
 
-    @Override protected void onCreate(Bundle savedInstanceState) {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main_activity);
         findViewById(R.id.button_run_scheduler).setOnClickListener(new View.OnClickListener() {
-            @Override public void onClick(View v) {
-                onRunSchedulerExampleButtonClicked();
+            @Override
+            public void onClick(View v) {
+                funcion01();
             }
         });
     }
 
-    @Override protected void onDestroy() {
-        super.onDestroy();
-        disposables.clear();
-    }
 
-    void onRunSchedulerExampleButtonClicked() {
-        disposables.add(sampleObservable()
-            // Run on a background thread
-            .subscribeOn(Schedulers.io())
-            // Be notified on the main thread
-            .observeOn(AndroidSchedulers.mainThread())
-            .subscribeWith(new DisposableObserver<String>() {
-                @Override public void onComplete() {
-                    Log.d(TAG, "onComplete()");
-                }
-
-                @Override public void onError(Throwable e) {
-                    Log.e(TAG, "onError()", e);
-                }
-
-                @Override public void onNext(String string) {
-                    Log.d(TAG, "onNext(" + string + ")");
-                }
-            }));
-    }
+    void funcion01() {
+
+
+        Flowable.create(new FlowableOnSubscribe<Integer>() {
+            @Override
+            public void subscribe(FlowableEmitter<Integer> emitter) throws Exception {
+
+                Log.e("xiaxl: ", "---subscribe---");
+
+
+                emitter.onNext(0);
+                emitter.onComplete();
+
 
-    static Observable<String> sampleObservable() {
-        return Observable.defer(new Callable<ObservableSource<? extends String>>() {
-          @Override public ObservableSource<? extends String> call() throws Exception {
-                // Do some long running operation
-                SystemClock.sleep(5000);
-                return Observable.just("one", "two", "three", "four", "five");
+                Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
+                Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
             }
-        });
+        }, BackpressureStrategy.ERROR)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Subscriber<Integer>() {
+                    @Override
+                    public void onSubscribe(Subscription s) {
+
+                        Log.e("xiaxl: ", "onSubscribe beforeRequst");
+                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
+                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
+
+                        s.request(Long.MAX_VALUE);
+                    }
+
+                    @Override
+                    public void onNext(Integer integer) {
+
+                        Log.e("xiaxl: ", "onNext");
+                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
+                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
+                    }
+
+                    @Override
+                    public void onError(Throwable t) {
+                        Log.e("xiaxl: ", "onError");
+                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
+                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
+                    }
+
+                    @Override
+                    public void onComplete() {
+                        //由于Reactive-Streams的兼容性，方法onCompleted被重命名为onComplete
+                        Log.e("xiaxl: ", "onComplete");
+                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
+                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
+                    }
+                });
+
+
     }
+
 }
