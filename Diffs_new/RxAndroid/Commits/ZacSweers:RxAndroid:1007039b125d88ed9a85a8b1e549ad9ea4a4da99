diff --git a/rxandroid/src/main/java/io/reactivex/android/plugins/RxAndroidPlugins.java b/rxandroid/src/main/java/io/reactivex/android/plugins/RxAndroidPlugins.java
index 11ca46dc..a1327164 100644
--- a/rxandroid/src/main/java/io/reactivex/android/plugins/RxAndroidPlugins.java
+++ b/rxandroid/src/main/java/io/reactivex/android/plugins/RxAndroidPlugins.java
@@ -57,6 +57,22 @@ public static Scheduler onMainThreadScheduler(Scheduler scheduler) {
         return apply(f, scheduler);
     }
 
+    /**
+     * Returns the current hook function.
+     * @return the hook function, may be null
+     */
+    public static Function<Callable<Scheduler>, Scheduler> getInitMainThreadSchedulerHandler() {
+        return onInitMainThreadHandler;
+    }
+
+    /**
+     * Returns the current hook function.
+     * @return the hook function, may be null
+     */
+    public static Function<Scheduler, Scheduler> getOnMainThreadSchedulerHandler() {
+        return onMainThreadHandler;
+    }
+
     /**
      * Removes all handlers and resets the default behavior.
      */
diff --git a/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java b/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java
index 3d4fb776..b17a89e4 100644
--- a/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java
+++ b/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java
@@ -26,9 +26,11 @@
 import io.reactivex.Scheduler;
 import io.reactivex.android.testutil.EmptyScheduler;
 import io.reactivex.functions.Function;
+import io.reactivex.schedulers.Schedulers;
 
 import static junit.framework.TestCase.fail;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 
 @RunWith(RobolectricTestRunner.class)
@@ -158,4 +160,37 @@ public void overrideInitMainSchedulerThrowsWhenSchedulerCallableReturnsNull() {
         }
     }
 
+    @Test
+    public void getInitMainThreadSchedulerHandlerReturnsHandler() {
+        Function<Callable<Scheduler>, Scheduler> handler = new Function<Callable<Scheduler>, Scheduler>() {
+            @Override public Scheduler apply(Callable<Scheduler> schedulerCallable) throws Exception {
+                return Schedulers.trampoline();
+            }
+        };
+        RxAndroidPlugins.setInitMainThreadSchedulerHandler(handler);
+        assertSame(handler, RxAndroidPlugins.getInitMainThreadSchedulerHandler());
+    }
+
+    @Test
+    public void getMainThreadSchedulerHandlerReturnsHandler() {
+        Function<Scheduler, Scheduler> handler = new Function<Scheduler, Scheduler>() {
+            @Override public Scheduler apply(Scheduler scheduler) {
+                return Schedulers.trampoline();
+            }
+        };
+        RxAndroidPlugins.setMainThreadSchedulerHandler(handler);
+        assertSame(handler, RxAndroidPlugins.getOnMainThreadSchedulerHandler());
+    }
+
+    @Test
+    public void getInitMainThreadSchedulerHandlerReturnsNullIfNotSet() {
+        RxAndroidPlugins.reset();
+        assertNull(RxAndroidPlugins.getInitMainThreadSchedulerHandler());
+    }
+
+    @Test
+    public void getMainThreadSchedulerHandlerReturnsNullIfNotSet() {
+        RxAndroidPlugins.reset();
+        assertNull(RxAndroidPlugins.getOnMainThreadSchedulerHandler());
+    }
 }
