diff --git a/.gitignore b/.gitignore
index 0a81078b..bd6827bc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -48,6 +48,9 @@ out
 *.iml
 atlassian-ide-plugin.xml
 
+# AndroidStudio specific files/directories
+local.properties
+
 # Eclipse specific files/directories
 .classpath
 .project
diff --git a/rxandroid-framework/build.gradle b/rxandroid-framework/build.gradle
new file mode 100644
index 00000000..0ed9dfb2
--- /dev/null
+++ b/rxandroid-framework/build.gradle
@@ -0,0 +1,31 @@
+buildscript {
+    repositories { jcenter() }
+    dependencies {
+        classpath 'com.netflix.nebula:gradle-rxjava-project-plugin:1.12.+'
+        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:1.12.+'
+    }
+}
+
+apply plugin: 'rxjava-project'
+apply plugin: 'provided-base'
+
+dependencies {
+    compile "io.reactivex:rxjava:$rxJavaVersion"
+    provided 'com.google.android:android:4.0.1.2'
+    provided 'com.google.android:support-v4:r7'
+
+    // testing
+    testCompile 'junit:junit-dep:4.11'
+    testCompile 'org.mockito:mockito-core:1.10.8'
+    testCompile('org.robolectric:robolectric:2.4') {
+        exclude group: 'com.android.support'
+    }
+}
+
+test {
+    testLogging {
+        exceptionFormat "full"
+        events "started"
+        displayGranularity 2
+    }
+}
diff --git a/rxandroid-framework/src/main/java/rx/android/observables/ReactiveDialog.java b/rxandroid-framework/src/main/java/rx/android/observables/ReactiveDialog.java
new file mode 100644
index 00000000..ecc42f8e
--- /dev/null
+++ b/rxandroid-framework/src/main/java/rx/android/observables/ReactiveDialog.java
@@ -0,0 +1,191 @@
+/**
+ * Copyright 2014 Novoda, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.observables;
+
+import android.app.DialogFragment;
+import android.app.FragmentManager;
+import android.content.DialogInterface;
+import android.os.Bundle;
+
+import rx.Observable;
+import rx.Observer;
+import rx.Subscriber;
+import rx.Subscription;
+import rx.functions.Func1;
+
+/**
+ * Wrapper for DialogFragment that allows to observe on the result of the user interaction.
+ *
+ * @param <T> The type of data expected as return value from the fragment, can be boolean for confirmation dialogs,
+ *            or more complex for data input dialogs.
+ */
+public class ReactiveDialog<T> extends DialogFragment {
+
+    private static final String REACTIVE_DIALOG_KEY = "REACTIVE_DIALOG_KEY";
+
+    private static final SubscriberVault subscriberVault = new SubscriberVault();
+
+    public interface ReactiveDialogListener<V> extends Observer<V> {
+        void onCompleteWith(V value);
+
+        void onCancel();
+    }
+
+    /**
+     * Returns an observable for the dialog result.
+     * The dialog is shown at subscription time.
+     */
+    public Observable<Result<T>> show(final FragmentManager manager) {
+        return Observable.create(new Observable.OnSubscribe<Result<T>>() {
+            @Override
+            public void call(Subscriber<? super Result<T>> subscriber) {
+                final long key = subscriberVault.store(subscriber);
+                storeSubscriberKey(key);
+                subscriber.add(new Subscription() {
+                    @Override
+                    public void unsubscribe() {
+                        subscriberVault.remove(key);
+                    }
+
+                    @Override
+                    public boolean isUnsubscribed() {
+                        return !subscriberVault.containsKey(key);
+                    }
+                });
+                show(manager, null);
+            }
+        });
+    }
+
+    /**
+     * Returns an unwrapped version of the dialog observable.
+     * Cancelled events are ignored to allow for simpler composition in the case of data input dialogs.
+     */
+    public Observable<T> showIgnoringCancelEvents(final FragmentManager manager) {
+        return show(manager)
+                .filter(new Func1<Result<T>, Boolean>() {
+                    @Override
+                    public Boolean call(Result<T> tResult) {
+                        return !tResult.isCanceled();
+                    }
+                })
+                .map(new Func1<Result<T>, T>() {
+                    @Override
+                    public T call(Result<T> tResult) {
+                        return tResult.getValue();
+                    }
+                });
+    }
+
+    @Override
+    public void onCancel(DialogInterface dialog) {
+        super.onCancel(dialog);
+        getListener().onCancel();
+    }
+
+    /**
+     * Get the wrapped subscriber for the observable.
+     */
+    protected ReactiveDialogListener<T> getListener() {
+        Subscriber<Result<T>> subscriber = subscriberVault.get(getSubscriberKey());
+        if (subscriber == null) {
+            throw new IllegalStateException("No listener attached, you are probably trying to deliver a result after completion of the observable");
+        }
+        return new ReactiveDialogObserver(subscriber);
+    }
+
+    private void storeSubscriberKey(long key) {
+        if (getArguments() == null) {
+            setArguments(new Bundle());
+        }
+        getArguments().putLong(REACTIVE_DIALOG_KEY, key);
+    }
+
+    private long getSubscriberKey() {
+        return getArguments().getLong(REACTIVE_DIALOG_KEY);
+    }
+
+    /**
+     * A wrapper for the subscriber from the observable.
+     * The wrapper takes care of wrapping values into a result object before passing them and removes itself from the vault upon completion or failure.
+     */
+    private class ReactiveDialogObserver implements ReactiveDialogListener<T> {
+
+        private final Subscriber<? super Result<T>> subscriber;
+
+        public ReactiveDialogObserver(Subscriber<? super Result<T>> subscriber) {
+            this.subscriber = subscriber;
+        }
+
+        @Override
+        public void onNext(T value) {
+            subscriber.onNext(Result.asSuccess(value));
+        }
+
+        @Override
+        public void onCompleteWith(T value) {
+            subscriber.onNext(Result.asSuccess(value));
+            subscriber.onCompleted();
+            subscriberVault.remove(getSubscriberKey());
+        }
+
+        @Override
+        public void onCancel() {
+            subscriber.onNext(Result.<T>asCanceled());
+            subscriber.onCompleted();
+            subscriberVault.remove(getSubscriberKey());
+        }
+
+        @Override
+        public void onError(Throwable throwable) {
+            subscriber.onError(throwable);
+            subscriberVault.remove(getSubscriberKey());
+        }
+
+        @Override
+        public void onCompleted() {
+            subscriber.onCompleted();
+            subscriberVault.remove(getSubscriberKey());
+        }
+    }
+
+    public final static class Result<V> {
+
+        private final V value;
+        private final boolean canceled;
+
+        static <V> Result<V> asSuccess(V value) {
+            return new Result<V>(value, false);
+        }
+
+        static <V> Result<V> asCanceled() {
+            return new Result<V>(null, true);
+        }
+
+        private Result(V value, boolean canceled) {
+            this.value = value;
+            this.canceled = canceled;
+        }
+
+        public V getValue() {
+            return value;
+        }
+
+        public boolean isCanceled() {
+            return canceled;
+        }
+    }
+}
diff --git a/rxandroid-framework/src/main/java/rx/android/observables/SubscriberVault.java b/rxandroid-framework/src/main/java/rx/android/observables/SubscriberVault.java
new file mode 100644
index 00000000..dbd7fe5d
--- /dev/null
+++ b/rxandroid-framework/src/main/java/rx/android/observables/SubscriberVault.java
@@ -0,0 +1,46 @@
+/**
+ * Copyright 2014 Novoda, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.observables;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import rx.Subscriber;
+
+final class SubscriberVault {
+
+    private static long idGenerator;
+
+    private final Map<Long, Subscriber> subscriberMap = new HashMap<Long, Subscriber>();
+
+    <T> long store(Subscriber<T> subscriber) {
+        long id = idGenerator++;
+        subscriberMap.put(id, subscriber);
+        return id;
+    }
+
+    public <T> Subscriber<T> get(long key) {
+        return subscriberMap.get(key);
+    }
+
+    public boolean containsKey(long key) {
+        return subscriberMap.containsKey(key);
+    }
+
+    public <T> Subscriber<T> remove(long subscriberKey) {
+        return subscriberMap.remove(subscriberKey);
+    }
+}
diff --git a/rxandroid-framework/src/test/java/rx/android/observables/ReactiveDialogTest.java b/rxandroid-framework/src/test/java/rx/android/observables/ReactiveDialogTest.java
new file mode 100644
index 00000000..d0544e2e
--- /dev/null
+++ b/rxandroid-framework/src/test/java/rx/android/observables/ReactiveDialogTest.java
@@ -0,0 +1,135 @@
+/**
+ * Copyright 2014 Novoda, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.observables;
+
+import android.app.Activity;
+import android.app.FragmentManager;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.shadows.ShadowDialog;
+
+import rx.Observable;
+import rx.Observer;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.MockitoAnnotations.initMocks;
+import static rx.android.observables.ReactiveDialog.Result;
+
+@RunWith(RobolectricTestRunner.class)
+public class ReactiveDialogTest {
+
+    @Mock
+    private Observer<String> mockObserver;
+
+    @Mock
+    private Observer<Result<String>> mockResultObserver;
+
+    private ReactiveDialog<String> reactiveDialog;
+    private FragmentManager fragmentManager;
+
+    @Before
+    public void setUp() {
+        initMocks(this);
+        reactiveDialog = new ReactiveDialog<String>();
+        Activity activity = Robolectric
+                .buildActivity(Activity.class).create().start()
+                .resume().get();
+        fragmentManager = activity.getFragmentManager();
+    }
+
+    @Test
+    public void itSendsListenerEventToObserver() {
+        ArgumentCaptor<Result> argumentCaptor = ArgumentCaptor.forClass(Result.class);
+        Observable<Result<String>> observable = reactiveDialog.show(fragmentManager);
+        observable.subscribe(mockResultObserver);
+
+        reactiveDialog.getListener().onCompleteWith("this");
+        verify(mockResultObserver).onNext(argumentCaptor.capture());
+        Result result = argumentCaptor.getValue();
+
+        assertNotNull(ShadowDialog.getLatestDialog());
+        assertFalse(result.isCanceled());
+        assertEquals(result.getValue(), "this");
+    }
+
+    @Test
+    public void itSendsCanceledResultIfDialogIsCanceledToObserver() {
+        ArgumentCaptor<Result> argumentCaptor = ArgumentCaptor.forClass(Result.class);
+        Observable<Result<String>> observable = reactiveDialog.show(fragmentManager);
+        observable.subscribe(mockResultObserver);
+
+        reactiveDialog.getListener().onCancel();
+        verify(mockResultObserver).onNext(argumentCaptor.capture());
+
+        assertNotNull(ShadowDialog.getLatestDialog());
+        assertTrue(argumentCaptor.getValue().isCanceled());
+    }
+
+    @Test
+    public void unwrappedObservableSendsListenerEventToObserver() {
+        Observable<String> observable = reactiveDialog.showIgnoringCancelEvents(fragmentManager);
+        observable.subscribe(mockObserver);
+
+        reactiveDialog.getListener().onCompleteWith("this");
+
+        assertNotNull(ShadowDialog.getLatestDialog());
+        verify(mockObserver).onNext("this");
+    }
+
+    @Test
+    public void unwrappedObservableIgnoresCanceledCanceledEvents() {
+        Observable<String> observable = reactiveDialog.showIgnoringCancelEvents(fragmentManager);
+        observable.subscribe(mockObserver);
+
+        reactiveDialog.getListener().onCancel();
+
+        assertNotNull(ShadowDialog.getLatestDialog());
+        verify(mockObserver, never()).onNext(anyString());
+    }
+
+    @Test
+    public void itSendsListenerErrorsToObserver() {
+        Observable<Result<String>> observable = reactiveDialog.show(fragmentManager);
+        observable.subscribe(mockResultObserver);
+        Throwable throwable = new Throwable();
+
+        reactiveDialog.getListener().onError(throwable);
+
+        assertNotNull(ShadowDialog.getLatestDialog());
+        verify(mockResultObserver).onError(throwable);
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void itFailsIfDeliverAfterCompletion() {
+        Observable<Result<String>> observable = reactiveDialog.show(fragmentManager);
+        observable.subscribe(mockResultObserver);
+
+        reactiveDialog.getListener().onCompleted();
+        reactiveDialog.getListener().onNext("this");
+    }
+}
diff --git a/rxandroid-framework/src/test/java/rx/android/observables/SubscriberVaultTest.java b/rxandroid-framework/src/test/java/rx/android/observables/SubscriberVaultTest.java
new file mode 100644
index 00000000..1d8ca18d
--- /dev/null
+++ b/rxandroid-framework/src/test/java/rx/android/observables/SubscriberVaultTest.java
@@ -0,0 +1,52 @@
+/**
+ * Copyright 2014 Novoda, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.observables;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import rx.Subscriber;
+
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertSame;
+import static org.mockito.Mockito.mock;
+
+public class SubscriberVaultTest {
+
+    private SubscriberVault subscriberVault;
+
+    @Before
+    public void setUp() {
+        subscriberVault = new SubscriberVault();
+    }
+
+    @Test
+    public void itStoresValuesForAGivenKey() {
+        Subscriber mockSubscriber = mock(Subscriber.class);
+        long id = subscriberVault.store(mockSubscriber);
+
+        assertSame(subscriberVault.get(id), mockSubscriber);
+    }
+
+    @Test
+    public void itRemovesValuesForAGivenKey() {
+        Subscriber mockSubscriber = mock(Subscriber.class);
+        long id = subscriberVault.store(mockSubscriber);
+        subscriberVault.remove(id);
+
+        assertNull(subscriberVault.get(id));
+    }
+}
diff --git a/rxandroid/build.gradle b/rxandroid/build.gradle
index 20fa6785..358108af 100644
--- a/rxandroid/build.gradle
+++ b/rxandroid/build.gradle
@@ -1,6 +1,16 @@
 // Multi-module modules aren't really supported
 version = rootProject.version
 
+configurations {
+    // This is a rough approximation of Android plug-in's 'provided' configuration, where
+    // you can give compile-time only dependencies.
+    compileOnly
+}
+
+dependencies {
+    compileOnly "com.google.auto.value:auto-value:1.0-rc1"
+}
+
 test {
     testLogging {
         exceptionFormat "full"
@@ -9,3 +19,9 @@ test {
     }
 }
 
+sourceSets {
+    main {
+        compileClasspath += configurations.compileOnly
+    }
+}
+
diff --git a/rxandroid/src/main/java/rx/android/AndroidSubscriptions.java b/rxandroid/src/main/java/rx/android/AndroidSubscriptions.java
index 1c456677..1f808aa0 100644
--- a/rxandroid/src/main/java/rx/android/AndroidSubscriptions.java
+++ b/rxandroid/src/main/java/rx/android/AndroidSubscriptions.java
@@ -22,9 +22,8 @@
 import android.os.Looper;
 
 public final class AndroidSubscriptions {
-
     private AndroidSubscriptions() {
-        // no instance
+        throw new AssertionError("No instances");
     }
 
     /**
diff --git a/rxandroid/src/main/java/rx/android/content/ContentObservable.java b/rxandroid/src/main/java/rx/android/content/ContentObservable.java
index 1aa90e27..4a6910ad 100644
--- a/rxandroid/src/main/java/rx/android/content/ContentObservable.java
+++ b/rxandroid/src/main/java/rx/android/content/ContentObservable.java
@@ -17,6 +17,10 @@
 import static rx.android.schedulers.AndroidSchedulers.mainThread;
 
 public final class ContentObservable {
+    private ContentObservable() {
+        throw new AssertionError("No instances");
+    }
+
     private static final Func1<Activity, Boolean> ACTIVITY_VALIDATOR = new Func1<Activity, Boolean>() {
         @Override
         public Boolean call(Activity activity) {
@@ -147,7 +151,4 @@ public Boolean call(android.support.v4.app.Fragment fragment) {
     public static Observable<Cursor> fromCursor(final Cursor cursor) {
         return Observable.create(new OnSubscribeCursor(cursor));
     }
-
-    private ContentObservable() {
-    }
 }
diff --git a/rxandroid/src/main/java/rx/android/internal/Assertions.java b/rxandroid/src/main/java/rx/android/internal/Assertions.java
index b06af4eb..f67ac9e3 100644
--- a/rxandroid/src/main/java/rx/android/internal/Assertions.java
+++ b/rxandroid/src/main/java/rx/android/internal/Assertions.java
@@ -15,7 +15,11 @@
 
 import android.os.Looper;
 
-public class Assertions {
+public final class Assertions {
+    private Assertions() {
+        throw new AssertionError("No instances");
+    }
+
     public static void assertUiThread() {
         if (Looper.getMainLooper() != Looper.myLooper()) {
             throw new IllegalStateException("Observers must subscribe from the main UI thread, but was " + Thread.currentThread());
diff --git a/rxandroid/src/main/java/rx/android/lifecycle/LifecycleEvent.java b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleEvent.java
new file mode 100644
index 00000000..5d6ca6be
--- /dev/null
+++ b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleEvent.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package rx.android.lifecycle;
+
+/**
+ * Lifecycle events that can be emitted by Activities or Fragments.
+ */
+public enum LifecycleEvent {
+
+    ATTACH,
+    CREATE,
+    CREATE_VIEW,
+    START,
+    RESUME,
+    PAUSE,
+    STOP,
+    DESTROY_VIEW,
+    DESTROY,
+    DETACH
+
+}
diff --git a/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
new file mode 100644
index 00000000..43e8068c
--- /dev/null
+++ b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
@@ -0,0 +1,195 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package rx.android.lifecycle;
+
+import rx.Observable;
+import rx.functions.Func1;
+import rx.functions.Func2;
+
+public class LifecycleObservable {
+
+    private LifecycleObservable() {
+        throw new AssertionError("No instances");
+    }
+
+    /**
+     * Binds the given source to a lifecycle.
+     * <p/>
+     * When the lifecycle event occurs, the source will cease to emit any notifications.
+     *
+     * @param lifecycle the lifecycle sequence
+     * @param source    the source sequence
+     * @param event     the event which should conclude notifications from the source
+     */
+    public static <T> Observable<T> bindUntilLifecycleEvent(Observable<LifecycleEvent> lifecycle,
+                                                            Observable<T> source,
+                                                            final LifecycleEvent event) {
+        if (lifecycle == null || source == null) {
+            throw new IllegalArgumentException("Lifecycle and Observable must be given");
+        }
+
+        return source.lift(
+                new OperatorSubscribeUntil<T, LifecycleEvent>(
+                        lifecycle.takeFirst(new Func1<LifecycleEvent, Boolean>() {
+                            @Override
+                            public Boolean call(LifecycleEvent lifecycleEvent) {
+                                return lifecycleEvent == event;
+                            }
+                        })
+                )
+        );
+    }
+
+    /**
+     * Binds the given source to an Activity lifecycle.
+     * <p/>
+     * This helper automatically determines (based on the lifecycle sequence itself) when the source
+     * should stop emitting items. In the case that the lifecycle sequence is in the
+     * creation phase (CREATE, START, etc) it will choose the equivalent destructive phase (DESTROY,
+     * STOP, etc). If used in the destructive phase, the notifications will cease at the next event;
+     * for example, if used in PAUSE, it will unsubscribe in STOP.
+     * <p/>
+     * Due to the differences between the Activity and Fragment lifecycles, this method should only
+     * be used for an Activity lifecycle.
+     *
+     * @param lifecycle the lifecycle sequence of an Activity
+     * @param source    the source sequence
+     */
+    public static <T> Observable<T> bindActivityLifecycle(Observable<LifecycleEvent> lifecycle, Observable<T> source) {
+        return bindLifecycle(lifecycle, source, ACTIVITY_LIFECYCLE);
+    }
+
+    /**
+     * Binds the given source to a Fragment lifecycle.
+     * <p/>
+     * This helper automatically determines (based on the lifecycle sequence itself) when the source
+     * should stop emitting items. In the case that the lifecycle sequence is in the
+     * creation phase (CREATE, START, etc) it will choose the equivalent destructive phase (DESTROY,
+     * STOP, etc). If used in the destructive phase, the notifications will cease at the next event;
+     * for example, if used in PAUSE, it will unsubscribe in STOP.
+     * <p/>
+     * Due to the differences between the Activity and Fragment lifecycles, this method should only
+     * be used for a Fragment lifecycle.
+     *
+     * @param lifecycle the lifecycle sequence of a Fragment
+     * @param source    the source sequence
+     */
+    public static <T> Observable<T> bindFragmentLifecycle(Observable<LifecycleEvent> lifecycle, Observable<T> source) {
+        return bindLifecycle(lifecycle, source, FRAGMENT_LIFECYCLE);
+    }
+
+    private static <T> Observable<T> bindLifecycle(Observable<LifecycleEvent> lifecycle,
+                                                   Observable<T> source,
+                                                   Func1<LifecycleEvent, LifecycleEvent> correspondingEvents) {
+        if (lifecycle == null || source == null) {
+            throw new IllegalArgumentException("Lifecycle and Observable must be given");
+        }
+
+        // Make sure we're truly comparing a single stream to itself
+        Observable<LifecycleEvent> sharedLifecycle = lifecycle.share();
+
+        // Keep emitting from source until the corresponding event occurs in the lifecycle
+        return source.lift(
+                new OperatorSubscribeUntil<T, Boolean>(
+                        Observable.combineLatest(
+                                sharedLifecycle.take(1).map(correspondingEvents),
+                                sharedLifecycle.skip(1),
+                                new Func2<LifecycleEvent, LifecycleEvent, Boolean>() {
+                                    @Override
+                                    public Boolean call(LifecycleEvent bindUntilEvent, LifecycleEvent lifecycleEvent) {
+                                        return lifecycleEvent == bindUntilEvent;
+                                    }
+                                })
+                                .takeFirst(new Func1<Boolean, Boolean>() {
+                                    @Override
+                                    public Boolean call(Boolean shouldComplete) {
+                                        return shouldComplete;
+                                    }
+                                })
+                )
+        );
+    }
+
+    // Figures out which corresponding next lifecycle event in which to unsubscribe, for Activities
+    private static final Func1<LifecycleEvent, LifecycleEvent> ACTIVITY_LIFECYCLE =
+            new Func1<LifecycleEvent, LifecycleEvent>() {
+                @Override
+                public LifecycleEvent call(LifecycleEvent lastEvent) {
+                    if (lastEvent == null) {
+                        throw new NullPointerException("Cannot bind to null LifecycleEvent.");
+                    }
+
+                    switch (lastEvent) {
+                        case CREATE:
+                            return LifecycleEvent.DESTROY;
+                        case START:
+                            return LifecycleEvent.STOP;
+                        case RESUME:
+                            return LifecycleEvent.PAUSE;
+                        case PAUSE:
+                            return LifecycleEvent.STOP;
+                        case STOP:
+                            return LifecycleEvent.DESTROY;
+                        case DESTROY:
+                            throw new IllegalStateException("Cannot bind to Activity lifecycle when outside of it.");
+                        case ATTACH:
+                        case CREATE_VIEW:
+                        case DESTROY_VIEW:
+                        case DETACH:
+                            throw new IllegalStateException("Cannot bind to " + lastEvent + " for an Activity.");
+                        default:
+                            throw new UnsupportedOperationException("Binding to LifecycleEvent " + lastEvent
+                                    + " not yet implemented");
+                    }
+                }
+            };
+
+    // Figures out which corresponding next lifecycle event in which to unsubscribe, for Fragments
+    private static final Func1<LifecycleEvent, LifecycleEvent> FRAGMENT_LIFECYCLE =
+            new Func1<LifecycleEvent, LifecycleEvent>() {
+                @Override
+                public LifecycleEvent call(LifecycleEvent lastEvent) {
+                    if (lastEvent == null) {
+                        throw new NullPointerException("Cannot bind to null LifecycleEvent.");
+                    }
+
+                    switch (lastEvent) {
+                        case ATTACH:
+                            return LifecycleEvent.DETACH;
+                        case CREATE:
+                            return LifecycleEvent.DESTROY;
+                        case CREATE_VIEW:
+                            return LifecycleEvent.DESTROY_VIEW;
+                        case START:
+                            return LifecycleEvent.STOP;
+                        case RESUME:
+                            return LifecycleEvent.PAUSE;
+                        case PAUSE:
+                            return LifecycleEvent.STOP;
+                        case STOP:
+                            return LifecycleEvent.DESTROY_VIEW;
+                        case DESTROY_VIEW:
+                            return LifecycleEvent.DESTROY;
+                        case DESTROY:
+                            return LifecycleEvent.DETACH;
+                        case DETACH:
+                            throw new IllegalStateException("Cannot bind to Fragment lifecycle when outside of it.");
+                        default:
+                            throw new UnsupportedOperationException("Binding to LifecycleEvent " + lastEvent
+                                    + " not yet implemented");
+                    }
+                }
+            };
+}
diff --git a/rxandroid/src/main/java/rx/android/lifecycle/OperatorSubscribeUntil.java b/rxandroid/src/main/java/rx/android/lifecycle/OperatorSubscribeUntil.java
new file mode 100644
index 00000000..5513b34a
--- /dev/null
+++ b/rxandroid/src/main/java/rx/android/lifecycle/OperatorSubscribeUntil.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package rx.android.lifecycle;
+
+import rx.Observable;
+import rx.Subscriber;
+import rx.observers.SerializedSubscriber;
+
+/**
+ * Returns an Observable that emits the items from the source Observable until another Observable
+ * emits an item.
+ * <p>
+ * Unlike takeUntil, this choose to unsubscribe the parent rather than calling onComplete().
+ */
+final class OperatorSubscribeUntil<T, R> implements Observable.Operator<T, T> {
+
+    private final Observable<? extends R> other;
+
+    public OperatorSubscribeUntil(final Observable<? extends R> other) {
+        this.other = other;
+    }
+
+    @Override
+    public Subscriber<? super T> call(final Subscriber<? super T> child) {
+        final Subscriber<T> parent = new SerializedSubscriber<T>(child);
+
+        other.unsafeSubscribe(new Subscriber<R>(child) {
+
+            @Override
+            public void onCompleted() {
+                parent.unsubscribe();
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                parent.onError(e);
+            }
+
+            @Override
+            public void onNext(R t) {
+                parent.unsubscribe();
+            }
+
+        });
+
+        return parent;
+    }
+}
diff --git a/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java b/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java
index cf6c0344..0ea2d40d 100644
--- a/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java
+++ b/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java
@@ -21,14 +21,13 @@
  * Schedulers that have Android specific functionality
  */
 public class AndroidSchedulers {
+    private AndroidSchedulers(){
+        throw new AssertionError("No instances");
+    }
 
     private static final Scheduler MAIN_THREAD_SCHEDULER =
             new HandlerThreadScheduler(new Handler(Looper.getMainLooper()));
 
-    private AndroidSchedulers(){
-
-    }
-
     /**
      * {@link Scheduler} which uses the provided {@link Handler} to execute an action
      * @param handler The handler that will be used when executing the action
diff --git a/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java b/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java
index fff73b1c..45cfd2c2 100644
--- a/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java
+++ b/rxandroid/src/main/java/rx/android/view/OnCheckedChangeEvent.java
@@ -14,17 +14,18 @@
 package rx.android.view;
 
 import android.widget.CompoundButton;
+import com.google.auto.value.AutoValue;
 
-public class OnCheckedChangeEvent {
-    public final CompoundButton view;
-    public final boolean value;
+@AutoValue
+public abstract class OnCheckedChangeEvent {
+    public abstract CompoundButton view();
+    public abstract boolean value();
 
-    public OnCheckedChangeEvent(final CompoundButton view) {
-        this(view, view.isChecked());
+    public static OnCheckedChangeEvent create(final CompoundButton view) {
+        return create(view, view.isChecked());
     }
 
-    public OnCheckedChangeEvent(final CompoundButton view, final boolean value) {
-        this.view = view;
-        this.value = value;
+    public static OnCheckedChangeEvent create(final CompoundButton view, final boolean value) {
+        return new AutoValue_OnCheckedChangeEvent(view, value);
     }
 }
diff --git a/rxandroid/src/main/java/rx/android/view/OnClickEvent.java b/rxandroid/src/main/java/rx/android/view/OnClickEvent.java
index c2d2c283..9b5353b8 100644
--- a/rxandroid/src/main/java/rx/android/view/OnClickEvent.java
+++ b/rxandroid/src/main/java/rx/android/view/OnClickEvent.java
@@ -15,10 +15,13 @@
 
 import android.view.View;
 
-public class OnClickEvent {
-    public final View view;
+import com.google.auto.value.AutoValue;
 
-    public OnClickEvent(final View view) {
-        this.view = view;
+@AutoValue
+public abstract class OnClickEvent {
+    public abstract View view();
+
+    public static OnClickEvent create(View view) {
+        return new AutoValue_OnClickEvent(view);
     }
 }
diff --git a/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java b/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
index da5e27e8..047addb5 100644
--- a/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
+++ b/rxandroid/src/main/java/rx/android/view/OnSubscribeViewClick.java
@@ -43,7 +43,7 @@ public void call(final Subscriber<? super OnClickEvent> observer) {
         final View.OnClickListener listener = new View.OnClickListener() {
             @Override
             public void onClick(final View clicked) {
-                observer.onNext(new OnClickEvent(view));
+                observer.onNext(OnClickEvent.create(view));
             }
         };
 
@@ -55,7 +55,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnClickEvent(view));
+            observer.onNext(OnClickEvent.create(view));
         }
 
         composite.addOnClickListener(listener);
diff --git a/rxandroid/src/main/java/rx/android/view/ViewActions.java b/rxandroid/src/main/java/rx/android/view/ViewActions.java
index 9ad41de8..280747b3 100644
--- a/rxandroid/src/main/java/rx/android/view/ViewActions.java
+++ b/rxandroid/src/main/java/rx/android/view/ViewActions.java
@@ -14,7 +14,7 @@
 package rx.android.view;
 
 import android.view.View;
-
+import android.widget.TextView;
 import rx.functions.Action1;
 
 /**
@@ -112,4 +112,28 @@ private ViewActions() {
     public static Action1<? super Boolean> setVisibility(View view, int visibilityOnFalse) {
         return new ViewActionSetVisibility(view, visibilityOnFalse);
     }
+
+    /**
+     * Set the text of a {@link TextView} based on values emitted by an Observable.
+     */
+    public static Action1<? super CharSequence> setText(TextView textView) {
+        return new ViewAction1<TextView, CharSequence>(textView) {
+            @Override
+            public void call(TextView view, CharSequence text) {
+                view.setText(text);
+            }
+        };
+    }
+
+    /**
+     * Set the text of a {@link TextView} based on values emitted by an Observable.
+     */
+    public static Action1<? super Integer> setTextResource(TextView textView) {
+        return new ViewAction1<TextView, Integer>(textView) {
+            @Override
+            public void call(TextView view, Integer resId) {
+                view.setText(resId);
+            }
+        };
+    }
 }
diff --git a/rxandroid/src/main/java/rx/android/widget/OnItemClickEvent.java b/rxandroid/src/main/java/rx/android/widget/OnItemClickEvent.java
index 2e046351..53cfb2a1 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnItemClickEvent.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnItemClickEvent.java
@@ -17,16 +17,16 @@
 import android.widget.Adapter;
 import android.widget.AdapterView;
 
-public class OnItemClickEvent {
-    public final AdapterView<?> parent;
-    public final View view;
-    public final int position;
-    public final long id;
+import com.google.auto.value.AutoValue;
 
-    public OnItemClickEvent(AdapterView<?> parent, View view, int position, long id) {
-        this.parent = parent;
-        this.view = view;
-        this.position = position;
-        this.id = id;
+@AutoValue
+public abstract class OnItemClickEvent {
+    abstract public AdapterView<?> parent();
+    abstract public View view();
+    abstract public int position();
+    abstract public long id();
+
+    public static OnItemClickEvent create(AdapterView<?> parent, View view, int position, long id) {
+        return new AutoValue_OnItemClickEvent(parent, view, position, id);
     }
 }
diff --git a/rxandroid/src/main/java/rx/android/widget/OnListViewScrollEvent.java b/rxandroid/src/main/java/rx/android/widget/OnListViewScrollEvent.java
index e082c08f..42506b3d 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnListViewScrollEvent.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnListViewScrollEvent.java
@@ -16,70 +16,19 @@
 
 import android.widget.AbsListView;
 
-public class OnListViewScrollEvent {
-    public final AbsListView listView;
-    public final int scrollState;
-    public final int firstVisibleItem;
-    public final int visibleItemCount;
-    public final int totalItemCount;
+import com.google.auto.value.AutoValue;
 
-    public OnListViewScrollEvent(
-        AbsListView listView, int scrollState, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-        this.listView = listView;
-        this.scrollState = scrollState;
-        this.firstVisibleItem = firstVisibleItem;
-        this.visibleItemCount = visibleItemCount;
-        this.totalItemCount = totalItemCount;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (o == null || getClass() != o.getClass()) {
-            return false;
-        }
-
-        OnListViewScrollEvent that = (OnListViewScrollEvent) o;
-
-        if (firstVisibleItem != that.firstVisibleItem) {
-            return false;
-        }
-        if (scrollState != that.scrollState) {
-            return false;
-        }
-        if (totalItemCount != that.totalItemCount) {
-            return false;
-        }
-        if (visibleItemCount != that.visibleItemCount) {
-            return false;
-        }
-        if (!listView.equals(that.listView)) {
-            return false;
-        }
+@AutoValue
+public abstract class OnListViewScrollEvent {
+    public abstract AbsListView listView();
+    public abstract int scrollState();
+    public abstract int firstVisibleItem();
+    public abstract int visibleItemCount();
+    public abstract int totalItemCount();
 
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = listView.hashCode();
-        result = 31 * result + scrollState;
-        result = 31 * result + firstVisibleItem;
-        result = 31 * result + visibleItemCount;
-        result = 31 * result + totalItemCount;
-        return result;
+    public static OnListViewScrollEvent create(
+        AbsListView listView, int scrollState, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+        return new AutoValue_OnListViewScrollEvent(listView, scrollState, firstVisibleItem, visibleItemCount, totalItemCount);
     }
 
-    @Override
-    public String toString() {
-        return "OnListViewScrollEvent{" +
-            "listView=" + listView +
-            ", scrollState=" + scrollState +
-            ", firstVisibleItem=" + firstVisibleItem +
-            ", visibleItemCount=" + visibleItemCount +
-            ", totalItemCount=" + totalItemCount +
-            '}';
-    }
 }
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeAdapterViewOnItemClick.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeAdapterViewOnItemClick.java
index 0cea1177..8c28d932 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnSubscribeAdapterViewOnItemClick.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeAdapterViewOnItemClick.java
@@ -45,7 +45,7 @@ public void call(final Subscriber<? super OnItemClickEvent> observer) {
         final AbsListView.OnItemClickListener listener = new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                observer.onNext(new OnItemClickEvent(parent, view, position, id));
+                observer.onNext(OnItemClickEvent.create(parent, view, position, id));
             }
         };
 
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
index 73a1d98c..b014b952 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeCompoundButtonInput.java
@@ -45,7 +45,7 @@ public void call(final Subscriber<? super OnCheckedChangeEvent> observer) {
         final CompoundButton.OnCheckedChangeListener listener = new CompoundButton.OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(final CompoundButton view, final boolean checked) {
-                observer.onNext(new OnCheckedChangeEvent(button, checked));
+                observer.onNext(OnCheckedChangeEvent.create(button, checked));
             }
         };
 
@@ -57,7 +57,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnCheckedChangeEvent(button));
+            observer.onNext(OnCheckedChangeEvent.create(button));
         }
 
         composite.addOnCheckedChangeListener(listener);
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeListViewScroll.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeListViewScroll.java
index 2e6f72de..5d13286b 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnSubscribeListViewScroll.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeListViewScroll.java
@@ -50,7 +50,7 @@ public void onScrollStateChanged(AbsListView view, int scrollState) {
 
             @Override
             public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
-                OnListViewScrollEvent event = new OnListViewScrollEvent(view, this.currentScrollState, firstVisibleItem,
+                OnListViewScrollEvent event = OnListViewScrollEvent.create(view, this.currentScrollState, firstVisibleItem,
                     visibleItemCount, totalItemCount);
                 observer.onNext(event);
             }
diff --git a/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java b/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
index 98b0c24c..c647bac9 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnSubscribeTextViewInput.java
@@ -38,7 +38,7 @@ public void call(final Subscriber<? super OnTextChangeEvent> observer) {
         final TextWatcher watcher = new SimpleTextWatcher() {
             @Override
             public void afterTextChanged(final Editable editable) {
-                observer.onNext(new OnTextChangeEvent(input));
+                observer.onNext(OnTextChangeEvent.create(input));
             }
         };
 
@@ -50,7 +50,7 @@ public void call() {
         });
 
         if (emitInitialValue) {
-            observer.onNext(new OnTextChangeEvent(input));
+            observer.onNext(OnTextChangeEvent.create(input));
         }
 
         input.addTextChangedListener(watcher);
diff --git a/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java b/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java
index b1edf554..20e51832 100644
--- a/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java
+++ b/rxandroid/src/main/java/rx/android/widget/OnTextChangeEvent.java
@@ -16,16 +16,18 @@
 import android.text.SpannableString;
 import android.widget.TextView;
 
-public class OnTextChangeEvent {
-    public final TextView view;
-    public final CharSequence text;
+import com.google.auto.value.AutoValue;
 
-    public OnTextChangeEvent(final TextView view) {
-        this(view, new SpannableString(view.getText()));
+@AutoValue
+public abstract class OnTextChangeEvent {
+    public abstract TextView view();
+    public abstract CharSequence text();
+
+    public static OnTextChangeEvent create(final TextView view) {
+        return create(view, new SpannableString(view.getText()));
     }
 
-    public OnTextChangeEvent(final TextView view, final CharSequence text) {
-        this.view = view;
-        this.text = text;
+    public static OnTextChangeEvent create(final TextView view, final CharSequence text) {
+        return new AutoValue_OnTextChangeEvent(view, text);
     }
 }
diff --git a/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java b/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
index eb3ec6e8..78eccf39 100644
--- a/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
+++ b/rxandroid/src/main/java/rx/android/widget/WidgetObservable.java
@@ -10,6 +10,7 @@
 
 public final class WidgetObservable {
     private WidgetObservable() {
+        throw new AssertionError("No instances");
     }
 
     public static Observable<OnTextChangeEvent> text(final TextView input) {
diff --git a/rxandroid/src/test/java/rx/android/TestUtil.java b/rxandroid/src/test/java/rx/android/TestUtil.java
index 1320de37..61c152c8 100644
--- a/rxandroid/src/test/java/rx/android/TestUtil.java
+++ b/rxandroid/src/test/java/rx/android/TestUtil.java
@@ -25,13 +25,12 @@
 import rx.Subscriber;
 
 public class TestUtil {
-
-    static public final String STRING_EXPECTATION = "Hello";
-
     private TestUtil() {
-        throw new AssertionError("Utility class");
+        throw new AssertionError("No instances");
     }
 
+    static public final String STRING_EXPECTATION = "Hello";
+
     public static View createView() {
         return new View(Robolectric.application);
     }
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/LifecycleObservableTest.java b/rxandroid/src/test/java/rx/android/lifecycle/LifecycleObservableTest.java
new file mode 100644
index 00000000..e91e9286
--- /dev/null
+++ b/rxandroid/src/test/java/rx/android/lifecycle/LifecycleObservableTest.java
@@ -0,0 +1,194 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package rx.android.lifecycle;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+import rx.Observable;
+import rx.Subscription;
+import rx.functions.Action1;
+import rx.subjects.BehaviorSubject;
+import rx.subjects.PublishSubject;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public class LifecycleObservableTest {
+
+    private BehaviorSubject<LifecycleEvent> lifecycle;
+    private Observable<Object> observable;
+
+    @Before
+    public void setup() {
+        lifecycle = BehaviorSubject.create();
+
+        // Simulate an actual lifecycle (hot Observable that does not end)
+        observable = PublishSubject.create().asObservable();
+    }
+
+    @Test
+    public void testBindUntilLifecycleEvent() {
+        Subscription untilStop =
+                LifecycleObservable.bindUntilLifecycleEvent(lifecycle, observable, LifecycleEvent.STOP).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.CREATE);
+        assertFalse(untilStop.isUnsubscribed());
+        lifecycle.onNext(LifecycleEvent.START);
+        assertFalse(untilStop.isUnsubscribed());
+        lifecycle.onNext(LifecycleEvent.RESUME);
+        assertFalse(untilStop.isUnsubscribed());
+        lifecycle.onNext(LifecycleEvent.PAUSE);
+        assertFalse(untilStop.isUnsubscribed());
+        lifecycle.onNext(LifecycleEvent.STOP);
+        assertTrue(untilStop.isUnsubscribed());
+    }
+
+    @Test
+    public void testBindActivityLifecycle() {
+        lifecycle.onNext(LifecycleEvent.CREATE);
+        Subscription createSub = LifecycleObservable.bindActivityLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.START);
+        assertFalse(createSub.isUnsubscribed());
+        Subscription startSub = LifecycleObservable.bindActivityLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.RESUME);
+        assertFalse(createSub.isUnsubscribed());
+        assertFalse(startSub.isUnsubscribed());
+        Subscription resumeSub = LifecycleObservable.bindActivityLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.PAUSE);
+        assertFalse(createSub.isUnsubscribed());
+        assertFalse(startSub.isUnsubscribed());
+        assertTrue(resumeSub.isUnsubscribed());
+        Subscription pauseSub = LifecycleObservable.bindActivityLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.STOP);
+        assertFalse(createSub.isUnsubscribed());
+        assertTrue(startSub.isUnsubscribed());
+        assertTrue(pauseSub.isUnsubscribed());
+        Subscription stopSub = LifecycleObservable.bindActivityLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.DESTROY);
+        assertTrue(createSub.isUnsubscribed());
+        assertTrue(stopSub.isUnsubscribed());
+    }
+
+    @Test(expected = RuntimeException.class)
+    public void testThrowsExceptionOutsideActivityLifecycle() {
+        lifecycle.onNext(LifecycleEvent.CREATE);
+        lifecycle.onNext(LifecycleEvent.START);
+        lifecycle.onNext(LifecycleEvent.RESUME);
+        lifecycle.onNext(LifecycleEvent.PAUSE);
+        lifecycle.onNext(LifecycleEvent.STOP);
+        lifecycle.onNext(LifecycleEvent.DESTROY);
+
+        LifecycleObservable.bindActivityLifecycle(lifecycle, observable)
+                .subscribe(null, new Action1<Throwable>() {
+                    @Override
+                    public void call(Throwable throwable) {
+                        throw new RuntimeException(throwable);
+                    }
+                });
+    }
+
+    @Test
+    public void testBindFragmentLifecycle() {
+        lifecycle.onNext(LifecycleEvent.ATTACH);
+        Subscription attachSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.CREATE);
+        assertFalse(attachSub.isUnsubscribed());
+        Subscription createSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.CREATE_VIEW);
+        assertFalse(attachSub.isUnsubscribed());
+        assertFalse(createSub.isUnsubscribed());
+        Subscription createViewSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.START);
+        assertFalse(attachSub.isUnsubscribed());
+        assertFalse(createSub.isUnsubscribed());
+        assertFalse(createViewSub.isUnsubscribed());
+        Subscription startSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.RESUME);
+        assertFalse(attachSub.isUnsubscribed());
+        assertFalse(createSub.isUnsubscribed());
+        assertFalse(createViewSub.isUnsubscribed());
+        assertFalse(startSub.isUnsubscribed());
+        Subscription resumeSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.PAUSE);
+        assertFalse(attachSub.isUnsubscribed());
+        assertFalse(createSub.isUnsubscribed());
+        assertFalse(createViewSub.isUnsubscribed());
+        assertFalse(startSub.isUnsubscribed());
+        assertTrue(resumeSub.isUnsubscribed());
+        Subscription pauseSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.STOP);
+        assertFalse(attachSub.isUnsubscribed());
+        assertFalse(createSub.isUnsubscribed());
+        assertFalse(createViewSub.isUnsubscribed());
+        assertTrue(startSub.isUnsubscribed());
+        assertTrue(pauseSub.isUnsubscribed());
+        Subscription stopSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.DESTROY_VIEW);
+        assertFalse(attachSub.isUnsubscribed());
+        assertFalse(createSub.isUnsubscribed());
+        assertTrue(createViewSub.isUnsubscribed());
+        assertTrue(stopSub.isUnsubscribed());
+        Subscription destroyViewSub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.DESTROY);
+        assertFalse(attachSub.isUnsubscribed());
+        assertTrue(createSub.isUnsubscribed());
+        assertTrue(destroyViewSub.isUnsubscribed());
+        Subscription destroySub = LifecycleObservable.bindFragmentLifecycle(lifecycle, observable).subscribe();
+
+        lifecycle.onNext(LifecycleEvent.DETACH);
+        assertTrue(attachSub.isUnsubscribed());
+        assertTrue(destroySub.isUnsubscribed());
+    }
+
+    @Test(expected = RuntimeException.class)
+    public void testThrowsExceptionOutsideFragmentLifecycle() {
+        lifecycle.onNext(LifecycleEvent.ATTACH);
+        lifecycle.onNext(LifecycleEvent.CREATE);
+        lifecycle.onNext(LifecycleEvent.CREATE_VIEW);
+        lifecycle.onNext(LifecycleEvent.START);
+        lifecycle.onNext(LifecycleEvent.RESUME);
+        lifecycle.onNext(LifecycleEvent.PAUSE);
+        lifecycle.onNext(LifecycleEvent.STOP);
+        lifecycle.onNext(LifecycleEvent.DESTROY_VIEW);
+        lifecycle.onNext(LifecycleEvent.DESTROY);
+        lifecycle.onNext(LifecycleEvent.DETACH);
+
+        LifecycleObservable.bindFragmentLifecycle(lifecycle, observable)
+                .subscribe(null, new Action1<Throwable>() {
+                    @Override
+                    public void call(Throwable throwable) {
+                        throw new RuntimeException(throwable);
+                    }
+                });
+    }
+}
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/OperatorSubscribeUntilTest.java b/rxandroid/src/test/java/rx/android/lifecycle/OperatorSubscribeUntilTest.java
new file mode 100644
index 00000000..b7c14938
--- /dev/null
+++ b/rxandroid/src/test/java/rx/android/lifecycle/OperatorSubscribeUntilTest.java
@@ -0,0 +1,78 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package rx.android.lifecycle;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.mockito.Spy;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+import rx.Observable;
+import rx.Subscriber;
+import rx.Subscription;
+import rx.observers.TestSubscriber;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.*;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public class OperatorSubscribeUntilTest {
+
+    @Spy
+    private Subscriber<Object> subscriber = new TestSubscriber<Object>();
+
+    @Before
+    public void setup() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testSourceUnsubscribesOnNext() {
+        Subscription subscription = Observable.never()
+                .lift(new OperatorSubscribeUntil<Object, Object>(Observable.just(new Object())))
+                .subscribe(subscriber);
+
+        verify(subscriber, never()).onNext(any());
+        assertTrue(subscription.isUnsubscribed());
+    }
+
+    @Test
+    public void testSourceUnsubscribesOnComplete() {
+        Subscription subscription = Observable.never()
+                .lift(new OperatorSubscribeUntil<Object, Object>(Observable.empty()))
+                .subscribe(subscriber);
+
+        verify(subscriber, never()).onCompleted();
+        assertTrue(subscription.isUnsubscribed());
+    }
+
+    @Test
+    public void testSourceReceivesExceptions() {
+        Exception exception = new RuntimeException();
+        Subscription subscription = Observable.never()
+                .lift(new OperatorSubscribeUntil<Object, String>(Observable.<String>error(exception)))
+                .subscribe(subscriber);
+
+        verify(subscriber, atLeastOnce()).onError(exception);
+        assertTrue(subscription.isUnsubscribed());
+    }
+
+}
diff --git a/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java b/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
index 4966fbd7..291a63a3 100644
--- a/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
+++ b/rxandroid/src/test/java/rx/android/view/OperatorViewClickTest.java
@@ -37,7 +37,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class OperatorViewClickTest {
     private static OnClickEvent mkMockedEvent(final View view) {
-        return refEq(new OnClickEvent(view));
+        return refEq(OnClickEvent.create(view));
     }
 
     @Test
diff --git a/rxandroid/src/test/java/rx/android/view/ViewActionSetTextTest.java b/rxandroid/src/test/java/rx/android/view/ViewActionSetTextTest.java
new file mode 100644
index 00000000..cbf9755e
--- /dev/null
+++ b/rxandroid/src/test/java/rx/android/view/ViewActionSetTextTest.java
@@ -0,0 +1,46 @@
+package rx.android.view;
+
+import android.widget.TextView;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mockito;
+import org.robolectric.RobolectricTestRunner;
+import rx.subjects.PublishSubject;
+
+import static org.mockito.Mockito.verify;
+
+@RunWith(RobolectricTestRunner.class)
+public class ViewActionSetTextTest {
+
+    private TextView textView;
+
+    @Before
+    public void setUp() {
+        textView = Mockito.mock(TextView.class);
+    }
+
+    @Test
+    public void testSetsTextViewCharSequence() {
+        final PublishSubject<String> subject = PublishSubject.create();
+        subject.subscribe(ViewActions.setText(textView));
+
+        subject.onNext("Hello");
+        verify(textView).setText("Hello");
+
+        subject.onNext("World");
+        verify(textView).setText("World");
+    }
+
+    @Test
+    public void testSetsTextViewTextResource() {
+        final PublishSubject<Integer> subject = PublishSubject.create();
+        subject.subscribe(ViewActions.setTextResource(textView));
+
+        subject.onNext(1);
+        verify(textView).setText(1);
+
+        subject.onNext(3);
+        verify(textView).setText(3);
+    }
+}
diff --git a/rxandroid/src/test/java/rx/android/widget/OperatorAdapterViewOnItemClickTest.java b/rxandroid/src/test/java/rx/android/widget/OperatorAdapterViewOnItemClickTest.java
index 450c69a5..2ba70dc8 100644
--- a/rxandroid/src/test/java/rx/android/widget/OperatorAdapterViewOnItemClickTest.java
+++ b/rxandroid/src/test/java/rx/android/widget/OperatorAdapterViewOnItemClickTest.java
@@ -228,8 +228,9 @@ private void performTestAdapterViewClickAllViewsEmitAllEvents(AdapterView<? exte
         final InOrder inOrder = inOrder(observer);
 
         for (int i = 0; i < adapter.getCount(); i++) {
-            adapterView.performItemClick(any(View.class), i, i);
-            inOrder.verify(observer, times(1)).onNext(new OnItemClickEvent(adapterView, any(View.class), i, i));
+            View fakeItem = new View(adapterView.getContext());
+            adapterView.performItemClick(fakeItem, i, i);
+            inOrder.verify(observer, times(1)).onNext(OnItemClickEvent.create(adapterView, fakeItem, i, i));
         }
 
         subscription.unsubscribe();
@@ -313,9 +314,10 @@ private void performTestAdapterViewMultipleSubscriptionsClickAllViewsEmitAllEven
 
         final int count = adapter.getCount();
         for (int i = 0; i < count; i++) {
-            adapterView.performItemClick(any(View.class), i, i);
-            inOrder1.verify(observer1, times(1)).onNext(new OnItemClickEvent(adapterView, any(View.class), i, i));
-            inOrder2.verify(observer2, times(1)).onNext(new OnItemClickEvent(adapterView, any(View.class), i, i));
+            View fakeItem = new View(adapterView.getContext());
+            adapterView.performItemClick(fakeItem, i, i);
+            inOrder1.verify(observer1, times(1)).onNext(OnItemClickEvent.create(adapterView, fakeItem, i, i));
+            inOrder2.verify(observer2, times(1)).onNext(OnItemClickEvent.create(adapterView, fakeItem, i, i));
         }
 
         subscription1.unsubscribe();
@@ -342,9 +344,10 @@ private void performTestAdapterViewMultipleSubscriptionsClickAllViewsEmitAllEven
 
         final int count = adapter.getCount();
         for (int i = 0; i < count; i++) {
-            adapterView.performItemClick(any(View.class), i, i);
+            View fakeItem = new View(adapterView.getContext());
+            adapterView.performItemClick(fakeItem, i, i);
             inOrder1.verify(observer1, never()).onNext(any(OnItemClickEvent.class));
-            inOrder2.verify(observer2, times(1)).onNext(new OnItemClickEvent(adapterView, any(View.class), i, i));
+            inOrder2.verify(observer2, times(1)).onNext(OnItemClickEvent.create(adapterView, fakeItem, i, i));
         }
         subscription2.unsubscribe();
     }
diff --git a/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java b/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
index 9098a0f5..7f111a0b 100644
--- a/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
+++ b/rxandroid/src/test/java/rx/android/widget/OperatorCompoundButtonInputTest.java
@@ -32,7 +32,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class OperatorCompoundButtonInputTest {
     private static OnCheckedChangeEvent mkMockedEvent(final CompoundButton button, final boolean value) {
-        return refEq(new OnCheckedChangeEvent(button, value));
+        return refEq(OnCheckedChangeEvent.create(button, value));
     }
 
     private static CompoundButton mkCompoundButton(final boolean value) {
diff --git a/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java b/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
index 6b297dce..56da254f 100644
--- a/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
+++ b/rxandroid/src/test/java/rx/android/widget/OperatorTextViewInputTest.java
@@ -43,11 +43,11 @@ public boolean matches(final Object argument) {
 
                 final OnTextChangeEvent event = (OnTextChangeEvent) argument;
 
-                if (event.view != view) {
+                if (event.view() != view) {
                     return false;
                 }
 
-                return TextUtils.equals(event.text, text);
+                return TextUtils.equals(event.text(), text);
             }
         });
     }
diff --git a/sample-app/src/main/AndroidManifest.xml b/sample-app/src/main/AndroidManifest.xml
index 018e199e..5e958a23 100644
--- a/sample-app/src/main/AndroidManifest.xml
+++ b/sample-app/src/main/AndroidManifest.xml
@@ -1,56 +1,75 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="rx.android.samples" >
+<manifest
+    package="rx.android.samples"
+    xmlns:android="http://schemas.android.com/apk/res/android">
 
     <application
         android:name=".SamplesApplication"
         android:allowBackup="true"
         android:icon="@drawable/ic_launcher"
-        android:theme="@style/AppTheme"
-        android:label="@string/app_name">
-        <activity
-                android:name=".UIBindingActivity">
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme">
+        <activity android:name=".app.SamplesMenuActivity">
 
             <intent-filter>
-                <category android:name="android.intent.category.LAUNCHER"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <action android:name="android.intent.action.MAIN" />
             </intent-filter>
         </activity>
-        <activity
-                android:name=".RetainedFragmentActivity">
+        <activity android:name=".lifeycle.ListFragmentActivity">
 
             <intent-filter>
-                <category android:name="android.intent.category.LAUNCHER"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <action android:name="android.intent.action.MAIN" />
             </intent-filter>
         </activity>
-        <activity
-            android:name=".ListeningFragmentActivity">
+        <activity android:name=".lifeycle.UIBindingActivity">
 
             <intent-filter>
-                <category android:name="android.intent.category.LAUNCHER"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <action android:name="android.intent.action.MAIN" />
             </intent-filter>
         </activity>
-        <activity
-            android:name=".ListFragmentActivity">
+        <activity android:name=".lifeycle.RetainedFragmentActivity">
 
             <intent-filter>
-                <category android:name="android.intent.category.LAUNCHER"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <action android:name="android.intent.action.MAIN" />
             </intent-filter>
         </activity>
-        <activity
-            android:name=".ListenInOutActivity">
+        <activity android:name=".lifeycle.ListeningFragmentActivity">
 
             <intent-filter>
-                <category android:name="android.intent.category.LAUNCHER"/>
-                <category android:name="android.intent.category.DEFAULT"/>
-                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+        <activity android:name=".lifeycle.ListenInOutActivity">
+
+            <intent-filter>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <action android:name="android.intent.action.MAIN" />
+            </intent-filter>
+        </activity>
+        <activity android:name=".widget.TextViewActivity">
+
+            <intent-filter>
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.DEFAULT" />
+
+                <action android:name="android.intent.action.MAIN" />
             </intent-filter>
         </activity>
     </application>
diff --git a/sample-app/src/main/java/rx/android/samples/app/MenuItems.java b/sample-app/src/main/java/rx/android/samples/app/MenuItems.java
new file mode 100644
index 00000000..760a75ab
--- /dev/null
+++ b/sample-app/src/main/java/rx/android/samples/app/MenuItems.java
@@ -0,0 +1,41 @@
+package rx.android.samples.app;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import rx.android.samples.lifeycle.ListFragmentActivity;
+import rx.android.samples.lifeycle.ListenInOutActivity;
+import rx.android.samples.lifeycle.ListeningFragmentActivity;
+import rx.android.samples.lifeycle.RetainedFragmentActivity;
+import rx.android.samples.lifeycle.UIBindingActivity;
+import rx.android.samples.widget.TextViewActivity;
+
+import java.util.Arrays;
+import java.util.List;
+
+class MenuItems {
+
+    static final String[] titles = new String[]{
+            "List Fragment Activity",
+            "Listening Fragment",
+            "Listen In and Out",
+            "Retained Fragment",
+            "UI Binding Activity",
+            "Text View Activity"
+    };
+
+    static final List<Class<? extends Activity>> samples = Arrays.asList(
+            ListFragmentActivity.class,
+            ListeningFragmentActivity.class,
+            ListenInOutActivity.class,
+            RetainedFragmentActivity.class,
+            UIBindingActivity.class,
+            TextViewActivity.class
+    );
+
+    public static Intent intentForSample(Context context, int position) {
+        if (position > samples.size()) throw new IllegalArgumentException("No sample found at position " + position);
+        return new Intent(context, samples.get(position));
+    }
+}
+
diff --git a/sample-app/src/main/java/rx/android/samples/app/SamplesMenuActivity.java b/sample-app/src/main/java/rx/android/samples/app/SamplesMenuActivity.java
new file mode 100644
index 00000000..84a738c7
--- /dev/null
+++ b/sample-app/src/main/java/rx/android/samples/app/SamplesMenuActivity.java
@@ -0,0 +1,30 @@
+package rx.android.samples.app;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.ListView;
+import rx.android.samples.R;
+
+public class SamplesMenuActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.samples_menu_activity);
+
+        ArrayAdapter<String> menuAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1);
+        menuAdapter.addAll(MenuItems.titles);
+
+        ListView listView = (ListView) findViewById(android.R.id.list);
+        listView.setAdapter(menuAdapter);
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                startActivity(MenuItems.intentForSample(SamplesMenuActivity.this, position));
+            }
+        });
+    }
+}
diff --git a/sample-app/src/main/java/rx/android/samples/ListFragmentActivity.java b/sample-app/src/main/java/rx/android/samples/lifeycle/ListFragmentActivity.java
similarity index 93%
rename from sample-app/src/main/java/rx/android/samples/ListFragmentActivity.java
rename to sample-app/src/main/java/rx/android/samples/lifeycle/ListFragmentActivity.java
index 11069fe0..5263f819 100644
--- a/sample-app/src/main/java/rx/android/samples/ListFragmentActivity.java
+++ b/sample-app/src/main/java/rx/android/samples/lifeycle/ListFragmentActivity.java
@@ -1,4 +1,4 @@
-package rx.android.samples;
+package rx.android.samples.lifeycle;
 
 import android.app.Activity;
 import android.app.Fragment;
@@ -12,6 +12,8 @@
 import rx.Observable;
 import rx.Subscriber;
 import rx.android.content.ContentObservable;
+import rx.android.samples.R;
+import rx.android.samples.SampleObservables;
 import rx.android.widget.OnListViewScrollEvent;
 import rx.android.widget.WidgetObservable;
 import rx.functions.Action1;
@@ -64,12 +66,12 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 .subscribe(new Action1<OnListViewScrollEvent>() {
                     @Override
                     public void call(OnListViewScrollEvent event) {
-                        if (event.totalItemCount == 0) {
+                        if (event.totalItemCount() == 0) {
                             return;
                         }
 
                         int progress =
-                            (int) ((100.0 * (event.firstVisibleItem + event.visibleItemCount)) / event.totalItemCount);
+                            (int) ((100.0 * (event.firstVisibleItem() + event.visibleItemCount())) / event.totalItemCount());
                         progressBar.setProgress(progress);
                     }
                 });
diff --git a/sample-app/src/main/java/rx/android/samples/ListenInOutActivity.java b/sample-app/src/main/java/rx/android/samples/lifeycle/ListenInOutActivity.java
similarity index 95%
rename from sample-app/src/main/java/rx/android/samples/ListenInOutActivity.java
rename to sample-app/src/main/java/rx/android/samples/lifeycle/ListenInOutActivity.java
index 91a1840b..559da266 100644
--- a/sample-app/src/main/java/rx/android/samples/ListenInOutActivity.java
+++ b/sample-app/src/main/java/rx/android/samples/lifeycle/ListenInOutActivity.java
@@ -1,4 +1,4 @@
-package rx.android.samples;
+package rx.android.samples.lifeycle;
 
 import android.app.Activity;
 import android.os.Bundle;
@@ -6,10 +6,11 @@
 import android.widget.TextView;
 import android.widget.Toast;
 import android.widget.ToggleButton;
-
 import rx.Observable;
 import rx.Observer;
 import rx.Subscription;
+import rx.android.samples.R;
+import rx.android.samples.SampleObservables;
 import rx.observables.ConnectableObservable;
 
 import static rx.android.content.ContentObservable.bindActivity;
diff --git a/sample-app/src/main/java/rx/android/samples/ListeningFragmentActivity.java b/sample-app/src/main/java/rx/android/samples/lifeycle/ListeningFragmentActivity.java
similarity index 96%
rename from sample-app/src/main/java/rx/android/samples/ListeningFragmentActivity.java
rename to sample-app/src/main/java/rx/android/samples/lifeycle/ListeningFragmentActivity.java
index 11ac1f17..b8d2cdab 100644
--- a/sample-app/src/main/java/rx/android/samples/ListeningFragmentActivity.java
+++ b/sample-app/src/main/java/rx/android/samples/lifeycle/ListeningFragmentActivity.java
@@ -1,4 +1,4 @@
-package rx.android.samples;
+package rx.android.samples.lifeycle;
 
 import android.app.Activity;
 import android.app.Fragment;
@@ -8,14 +8,14 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 import android.widget.Toast;
-
 import rx.Subscriber;
 import rx.Subscription;
+import rx.android.samples.R;
+import rx.android.samples.SampleObservables;
 import rx.android.content.ContentObservable;
 import rx.observables.ConnectableObservable;
 import rx.subscriptions.Subscriptions;
 
-
 /**
  * Problem:
  * You have a background sequence which keeps emitting items (either a limited or unlimited number)
diff --git a/sample-app/src/main/java/rx/android/samples/RetainedFragmentActivity.java b/sample-app/src/main/java/rx/android/samples/lifeycle/RetainedFragmentActivity.java
similarity index 97%
rename from sample-app/src/main/java/rx/android/samples/RetainedFragmentActivity.java
rename to sample-app/src/main/java/rx/android/samples/lifeycle/RetainedFragmentActivity.java
index 65e080dd..f7bed73f 100644
--- a/sample-app/src/main/java/rx/android/samples/RetainedFragmentActivity.java
+++ b/sample-app/src/main/java/rx/android/samples/lifeycle/RetainedFragmentActivity.java
@@ -1,4 +1,4 @@
-package rx.android.samples;
+package rx.android.samples.lifeycle;
 
 import android.app.Activity;
 import android.app.Fragment;
@@ -8,12 +8,12 @@
 import android.view.ViewGroup;
 import android.view.Window;
 import android.widget.TextView;
-
 import org.json.JSONException;
 import org.json.JSONObject;
-
 import rx.Observable;
 import rx.Subscription;
+import rx.android.samples.R;
+import rx.android.samples.SampleObservables;
 import rx.functions.Action1;
 import rx.functions.Func1;
 import rx.subscriptions.Subscriptions;
diff --git a/sample-app/src/main/java/rx/android/samples/UIBindingActivity.java b/sample-app/src/main/java/rx/android/samples/lifeycle/UIBindingActivity.java
similarity index 97%
rename from sample-app/src/main/java/rx/android/samples/UIBindingActivity.java
rename to sample-app/src/main/java/rx/android/samples/lifeycle/UIBindingActivity.java
index 3c34494c..4e735563 100644
--- a/sample-app/src/main/java/rx/android/samples/UIBindingActivity.java
+++ b/sample-app/src/main/java/rx/android/samples/lifeycle/UIBindingActivity.java
@@ -1,4 +1,4 @@
-package rx.android.samples;
+package rx.android.samples.lifeycle;
 
 import android.app.Activity;
 import android.app.Fragment;
@@ -13,6 +13,8 @@
 import org.json.JSONObject;
 import rx.Observable;
 import rx.Subscription;
+import rx.android.samples.R;
+import rx.android.samples.SampleObservables;
 import rx.android.schedulers.AndroidSchedulers;
 import rx.functions.Action1;
 import rx.functions.Func1;
diff --git a/sample-app/src/main/java/rx/android/samples/widget/TextViewActivity.java b/sample-app/src/main/java/rx/android/samples/widget/TextViewActivity.java
new file mode 100644
index 00000000..03bae1c9
--- /dev/null
+++ b/sample-app/src/main/java/rx/android/samples/widget/TextViewActivity.java
@@ -0,0 +1,44 @@
+package rx.android.samples.widget;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.widget.EditText;
+import android.widget.TextView;
+import rx.Subscription;
+import rx.android.samples.R;
+import rx.android.widget.OnTextChangeEvent;
+import rx.android.widget.WidgetObservable;
+import rx.functions.Action1;
+import rx.subscriptions.Subscriptions;
+
+/**
+ * An activity demonstrating how to observe changes on a {@link TextView} using the
+ * view observable methods {@link WidgetObservable#text}
+ */
+public class TextViewActivity extends Activity {
+
+    private TextView textView;
+    private EditText inputTextView;
+    private Subscription subscription = Subscriptions.empty();
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.text_view_operator_activity);
+        textView = (TextView) findViewById(R.id.text_view);
+        inputTextView = (EditText) findViewById(R.id.input);
+
+        subscription = WidgetObservable.text(inputTextView, true).subscribe(new Action1<OnTextChangeEvent>() {
+            @Override
+            public void call(OnTextChangeEvent onTextChangeEvent) {
+                textView.setText(onTextChangeEvent.text());
+            }
+        });
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        subscription.unsubscribe();
+    }
+}
diff --git a/sample-app/src/main/res/layout/list_fragment_activity.xml b/sample-app/src/main/res/layout/list_fragment_activity.xml
index dcf41594..e6bfefca 100644
--- a/sample-app/src/main/res/layout/list_fragment_activity.xml
+++ b/sample-app/src/main/res/layout/list_fragment_activity.xml
@@ -2,12 +2,12 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context="rx.android.samples.ListeningFragmentActivity">
+    tools:context="rx.android.samples.lifeycle.ListeningFragmentActivity">
 
     <fragment
         android:tag="retained_list_fragment"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:name="rx.android.samples.ListFragmentActivity$RetainedListFragment" />
+        android:name="rx.android.samples.lifeycle.ListFragmentActivity$RetainedListFragment" />
 
 </RelativeLayout>
diff --git a/sample-app/src/main/res/layout/listen_in_out_activity.xml b/sample-app/src/main/res/layout/listen_in_out_activity.xml
index 94c1fd86..612bdd6d 100644
--- a/sample-app/src/main/res/layout/listen_in_out_activity.xml
+++ b/sample-app/src/main/res/layout/listen_in_out_activity.xml
@@ -6,7 +6,7 @@
     android:paddingRight="@dimen/activity_horizontal_margin"
     android:paddingTop="@dimen/activity_vertical_margin"
     android:paddingBottom="@dimen/activity_vertical_margin"
-    tools:context="rx.android.samples.ListenInOutActivity">
+    tools:context="rx.android.samples.lifeycle.ListenInOutActivity">
 
     <TextView
         android:id="@android:id/text1"
diff --git a/sample-app/src/main/res/layout/listening_fragment_activity.xml b/sample-app/src/main/res/layout/listening_fragment_activity.xml
index 8b267945..9b6d53b3 100644
--- a/sample-app/src/main/res/layout/listening_fragment_activity.xml
+++ b/sample-app/src/main/res/layout/listening_fragment_activity.xml
@@ -2,13 +2,13 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context="rx.android.samples.ListeningFragmentActivity">
+    tools:context="rx.android.samples.lifeycle.ListeningFragmentActivity">
 
     <fragment
         android:tag="retained_fragment"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:name="rx.android.samples.ListeningFragmentActivity$ListeningFragment"
+        android:name="rx.android.samples.lifeycle.ListeningFragmentActivity$ListeningFragment"
         tools:layout="@layout/retained_fragment" />
 
 </RelativeLayout>
diff --git a/sample-app/src/main/res/layout/retained_fragment_activity.xml b/sample-app/src/main/res/layout/retained_fragment_activity.xml
index 2ac313cc..660aa447 100644
--- a/sample-app/src/main/res/layout/retained_fragment_activity.xml
+++ b/sample-app/src/main/res/layout/retained_fragment_activity.xml
@@ -2,13 +2,13 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context="rx.android.samples.RetainedFragmentActivity">
+    tools:context="rx.android.samples.lifeycle.RetainedFragmentActivity">
 
     <fragment
         android:tag="retained_fragment"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:name="rx.android.samples.RetainedFragmentActivity$RetainedFragment"
+        android:name="rx.android.samples.lifeycle.RetainedFragmentActivity$RetainedFragment"
         tools:layout="@layout/retained_fragment" />
 
 </RelativeLayout>
diff --git a/sample-app/src/main/res/layout/samples_menu_activity.xml b/sample-app/src/main/res/layout/samples_menu_activity.xml
new file mode 100644
index 00000000..ad3a4821
--- /dev/null
+++ b/sample-app/src/main/res/layout/samples_menu_activity.xml
@@ -0,0 +1,10 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ListView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+</RelativeLayout>
diff --git a/sample-app/src/main/res/layout/samples_menu_fragment.xml b/sample-app/src/main/res/layout/samples_menu_fragment.xml
new file mode 100644
index 00000000..c185843b
--- /dev/null
+++ b/sample-app/src/main/res/layout/samples_menu_fragment.xml
@@ -0,0 +1,10 @@
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ListView
+        android:id="@android:id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+</FrameLayout>
diff --git a/sample-app/src/main/res/layout/text_view_operator_activity.xml b/sample-app/src/main/res/layout/text_view_operator_activity.xml
new file mode 100644
index 00000000..00ff2b6a
--- /dev/null
+++ b/sample-app/src/main/res/layout/text_view_operator_activity.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <EditText
+        android:id="@+id/input"
+        android:hint="Type something here"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content" />
+
+    <TextView
+        android:id="@+id/text_view"
+        android:gravity="center"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/sample-app/src/main/res/layout/ui_binding_activity.xml b/sample-app/src/main/res/layout/ui_binding_activity.xml
index a2d28e8f..17c2cc77 100644
--- a/sample-app/src/main/res/layout/ui_binding_activity.xml
+++ b/sample-app/src/main/res/layout/ui_binding_activity.xml
@@ -2,13 +2,13 @@
                 xmlns:tools="http://schemas.android.com/tools"
                 android:layout_width="match_parent"
                 android:layout_height="match_parent"
-                tools:context="rx.android.samples.RetainedFragmentActivity">
+    tools:context="rx.android.samples.lifeycle.RetainedFragmentActivity">
 
     <fragment
             android:tag="retained_fragment_v2"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            android:name="rx.android.samples.UIBindingActivity$RetainedBindingFragment"
+        android:name="rx.android.samples.lifeycle.UIBindingActivity$RetainedBindingFragment"
             tools:layout="@layout/retained_fragment" />
 
 </RelativeLayout>
diff --git a/settings.gradle b/settings.gradle
index 62c4dfcd..e4b947bb 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,5 @@
 rootProject.name='rxandroid-root'
-include 'rxandroid', 'sample-app'
+
+include 'rxandroid'
+include 'rxandroid-framework'
+include 'sample-app'
