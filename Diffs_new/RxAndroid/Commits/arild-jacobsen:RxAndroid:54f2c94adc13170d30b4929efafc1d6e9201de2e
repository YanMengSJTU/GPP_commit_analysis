diff --git a/src/main/java/rx/android/events/OnSeekBarEvent.java b/src/main/java/rx/android/events/OnSeekBarEvent.java
new file mode 100644
index 00000000..0abeb99a
--- /dev/null
+++ b/src/main/java/rx/android/events/OnSeekBarEvent.java
@@ -0,0 +1,40 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.events;
+
+import android.widget.SeekBar;
+
+public class OnSeekBarEvent {
+    public final SeekBar seekBar;
+    public final int progress;
+    public final boolean fromUser;
+    private final EventType eventType;
+
+    public OnSeekBarEvent(final SeekBar seekBar, final int progress, final boolean fromUser, final EventType eventType) {
+        this.seekBar = seekBar;
+        this.progress = progress;
+        this.fromUser = fromUser;
+        this.eventType = eventType;
+    }
+
+    public boolean is(EventType et) {
+        return eventType == et;
+    }
+
+    public enum EventType {
+        START_TRACKING_TOUCH,
+        STOP_TRACKING_TOUCH,
+        PROGRESS_CHANGED
+    }
+}
diff --git a/src/main/java/rx/android/observables/ViewObservable.java b/src/main/java/rx/android/observables/ViewObservable.java
index 4a8af72d..d5506d11 100644
--- a/src/main/java/rx/android/observables/ViewObservable.java
+++ b/src/main/java/rx/android/observables/ViewObservable.java
@@ -16,15 +16,17 @@
 import android.view.View;
 import android.widget.AdapterView;
 import android.widget.CompoundButton;
+import android.widget.SeekBar;
 import android.widget.TextView;
-
 import rx.Observable;
 import rx.android.events.OnCheckedChangeEvent;
 import rx.android.events.OnClickEvent;
 import rx.android.events.OnItemClickEvent;
+import rx.android.events.OnSeekBarEvent;
 import rx.android.events.OnTextChangeEvent;
 import rx.android.operators.OperatorAdapterViewOnItemClick;
 import rx.android.operators.OperatorCompoundButtonInput;
+import rx.android.operators.OperatorSeekBarInput;
 import rx.android.operators.OperatorTextViewInput;
 import rx.android.operators.OperatorViewClick;
 
@@ -54,6 +56,14 @@
         return Observable.create(new OperatorCompoundButtonInput(button, emitInitialValue));
     }
 
+    public static Observable<OnSeekBarEvent> input(final SeekBar seekBar) {
+        return input(seekBar, false);
+    }
+
+    public static Observable<OnSeekBarEvent> input(final SeekBar seekBar, final boolean emitInitialValue) {
+        return Observable.create(new OperatorSeekBarInput(seekBar, emitInitialValue));
+    }
+
     public static Observable<OnItemClickEvent> itemClicks(final AdapterView<?> adapterView) {
         return Observable.create(new OperatorAdapterViewOnItemClick(adapterView));
     }
diff --git a/src/main/java/rx/android/operators/OperatorSeekBarInput.java b/src/main/java/rx/android/operators/OperatorSeekBarInput.java
new file mode 100644
index 00000000..6bb1721c
--- /dev/null
+++ b/src/main/java/rx/android/operators/OperatorSeekBarInput.java
@@ -0,0 +1,104 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.operators;
+
+import android.widget.SeekBar;
+import rx.Observable;
+import rx.Subscriber;
+import rx.android.events.OnSeekBarEvent;
+import rx.android.observables.Assertions;
+import rx.android.subscriptions.AndroidSubscriptions;
+import rx.functions.Action0;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static rx.android.events.OnSeekBarEvent.EventType;
+
+public class OperatorSeekBarInput implements Observable.OnSubscribe<OnSeekBarEvent> {
+    public static final int LISTENER_TAG = 0xBDD2ADD1;
+    private final SeekBar seekBar;
+    private final boolean emitInitialValue;
+
+    public OperatorSeekBarInput(final SeekBar seekBar, final boolean emitInitialValue) {
+        this.seekBar = seekBar;
+        this.emitInitialValue = emitInitialValue;
+    }
+
+    @Override
+    public void call(final Subscriber<? super OnSeekBarEvent> subscriber) {
+        Assertions.assertUiThread();
+        final ObservableListener listener = getListener();
+        listener.addSubscriber(subscriber);
+
+        subscriber.add(AndroidSubscriptions.unsubscribeInUiThread(new Action0() {
+            @Override
+            public void call() {
+                listener.unsubscribe(subscriber);
+            }
+        }));
+
+        if (emitInitialValue) {
+            subscriber.onNext(new OnSeekBarEvent(seekBar, seekBar.getProgress(), false, EventType.PROGRESS_CHANGED));
+        }
+        seekBar.setOnSeekBarChangeListener(listener);
+    }
+
+    private ObservableListener getListener() {
+        Object tag = seekBar.getTag(LISTENER_TAG);
+        if (!(tag instanceof ObservableListener)) {
+            tag = new ObservableListener();
+            seekBar.setTag(LISTENER_TAG, tag);
+        }
+        return (ObservableListener) tag;
+    }
+
+    private class ObservableListener implements SeekBar.OnSeekBarChangeListener {
+        private final Set<Subscriber<? super OnSeekBarEvent>> subscribers = new HashSet<Subscriber<? super OnSeekBarEvent>>();
+
+        @Override
+        public void onProgressChanged(final SeekBar seekBar, final int progress, final boolean fromUser) {
+            for (Subscriber<? super OnSeekBarEvent> subscriber : subscribers) {
+                subscriber.onNext(new OnSeekBarEvent(seekBar, progress, fromUser, EventType.PROGRESS_CHANGED));
+            }
+        }
+
+        @Override
+        public void onStartTrackingTouch(final SeekBar seekBar) {
+            for (Subscriber<? super OnSeekBarEvent> subscriber : subscribers) {
+                subscriber.onNext(new OnSeekBarEvent(seekBar, seekBar.getProgress(), false, EventType.START_TRACKING_TOUCH));
+            }
+        }
+
+        @Override
+        public void onStopTrackingTouch(final SeekBar seekBar) {
+            for (Subscriber<? super OnSeekBarEvent> subscriber : subscribers) {
+                subscriber.onNext(new OnSeekBarEvent(seekBar, seekBar.getProgress(), false, EventType.STOP_TRACKING_TOUCH));
+            }
+        }
+
+        public void addSubscriber(final Subscriber<? super OnSeekBarEvent> subscriber) {
+            subscribers.add(subscriber);
+        }
+
+        public void unsubscribe(final Subscriber<? super OnSeekBarEvent> unsubscriber) {
+            Assertions.assertUiThread();
+            subscribers.remove(unsubscriber);
+            if (subscribers.isEmpty()) {
+                seekBar.setOnSeekBarChangeListener(null);
+                seekBar.setTag(LISTENER_TAG, null);
+            }
+        }
+    }
+}
diff --git a/src/test/java/rx/android/operators/OperatorSeekBarInputTest.java b/src/test/java/rx/android/operators/OperatorSeekBarInputTest.java
new file mode 100644
index 00000000..494ecd23
--- /dev/null
+++ b/src/test/java/rx/android/operators/OperatorSeekBarInputTest.java
@@ -0,0 +1,187 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rx.android.operators;
+
+import android.app.Activity;
+import android.widget.SeekBar;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentMatcher;
+import org.mockito.InOrder;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import rx.Observable;
+import rx.Observer;
+import rx.Subscription;
+import rx.android.events.OnSeekBarEvent;
+import rx.android.observables.ViewObservable;
+import rx.observers.TestObserver;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.argThat;
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+
+@RunWith(RobolectricTestRunner.class)
+public class OperatorSeekBarInputTest {
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testOverloadedMethodDefaultsWithoutInitialValue() {
+        final SeekBar input = mkSeekBar(15);
+        final Observable<OnSeekBarEvent> observable = ViewObservable.input(input);
+        final Observer<OnSeekBarEvent> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<OnSeekBarEvent>(observer));
+
+        final InOrder inOrder = inOrder(observer);
+
+        inOrder.verify(observer, never()).onNext(any(OnSeekBarEvent.class));
+
+        input.setProgress(1);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 1));
+
+        input.setProgress(2);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 2));
+
+        input.setProgress(3);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 3));
+
+        subscription.unsubscribe();
+        input.setProgress(4);
+        inOrder.verify(observer, never()).onNext(any(OnSeekBarEvent.class));
+
+        inOrder.verify(observer, never()).onError(any(Throwable.class));
+        inOrder.verify(observer, never()).onCompleted();
+    }
+
+    private static SeekBar mkSeekBar(final int value) {
+        final Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        final SeekBar bar = new SeekBar(activity);
+        bar.setProgress(value);
+        return bar;
+    }
+
+    private static OnSeekBarEvent mkMockedEvent(final SeekBar view, final int progress) {
+        return argThat(new ArgumentMatcher<OnSeekBarEvent>() {
+            @Override
+            public boolean matches(final Object argument) {
+                if (!(argument instanceof OnSeekBarEvent)) {
+                    return false;
+                }
+                final OnSeekBarEvent event = (OnSeekBarEvent) argument;
+                return event.seekBar == view && event.progress == progress;
+            }
+        });
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testWithoutInitialValue() {
+        final SeekBar input = mkSeekBar(0);
+        final Observable<OnSeekBarEvent> observable = ViewObservable.input(input, false);
+        final Observer<OnSeekBarEvent> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<OnSeekBarEvent>(observer));
+
+        final InOrder inOrder = inOrder(observer);
+
+        inOrder.verify(observer, never()).onNext(any(OnSeekBarEvent.class));
+
+        input.setProgress(1);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 1));
+
+        input.setProgress(2);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 2));
+
+        input.setProgress(3);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 3));
+
+        subscription.unsubscribe();
+        input.setProgress(4);
+        inOrder.verify(observer, never()).onNext(any(OnSeekBarEvent.class));
+
+        inOrder.verify(observer, never()).onError(any(Throwable.class));
+        inOrder.verify(observer, never()).onCompleted();
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testWithInitialValue() {
+        final SeekBar input = mkSeekBar(0);
+        final Observable<OnSeekBarEvent> observable = ViewObservable.input(input, true);
+        final Observer<OnSeekBarEvent> observer = mock(Observer.class);
+        final Subscription subscription = observable.subscribe(new TestObserver<OnSeekBarEvent>(observer));
+
+        final InOrder inOrder = inOrder(observer);
+
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 0));
+
+        input.setProgress(1);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 1));
+
+        input.setProgress(2);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 2));
+
+        input.setProgress(3);
+        inOrder.verify(observer, times(1)).onNext(mkMockedEvent(input, 3));
+
+        subscription.unsubscribe();
+        input.setProgress(4);
+        inOrder.verify(observer, never()).onNext(any(OnSeekBarEvent.class));
+
+        inOrder.verify(observer, never()).onError(any(Throwable.class));
+        inOrder.verify(observer, never()).onCompleted();
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testMultipleSubscriptions() {
+        final SeekBar input = mkSeekBar(0);
+        final Observable<OnSeekBarEvent> observable = ViewObservable.input(input, false);
+
+        final Observer<OnSeekBarEvent> observer1 = mock(Observer.class);
+        final Observer<OnSeekBarEvent> observer2 = mock(Observer.class);
+
+        final Subscription subscription1 = observable.subscribe(new TestObserver<OnSeekBarEvent>(observer1));
+        final Subscription subscription2 = observable.subscribe(new TestObserver<OnSeekBarEvent>(observer2));
+
+        final InOrder inOrder1 = inOrder(observer1);
+        final InOrder inOrder2 = inOrder(observer2);
+
+        input.setProgress(1);
+        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(input, 1));
+        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(input, 1));
+
+        input.setProgress(2);
+        inOrder1.verify(observer1, times(1)).onNext(mkMockedEvent(input, 2));
+        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(input, 2));
+        subscription1.unsubscribe();
+
+        input.setProgress(3);
+        inOrder1.verify(observer1, never()).onNext(any(OnSeekBarEvent.class));
+        inOrder2.verify(observer2, times(1)).onNext(mkMockedEvent(input, 3));
+        subscription2.unsubscribe();
+
+        input.setProgress(4);
+        inOrder1.verify(observer1, never()).onNext(any(OnSeekBarEvent.class));
+        inOrder2.verify(observer2, never()).onNext(any(OnSeekBarEvent.class));
+
+        inOrder1.verify(observer1, never()).onError(any(Throwable.class));
+        inOrder2.verify(observer2, never()).onError(any(Throwable.class));
+
+        inOrder1.verify(observer1, never()).onCompleted();
+        inOrder2.verify(observer2, never()).onCompleted();
+    }
+}
