diff --git a/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
index 61711322..7bb15618 100644
--- a/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
+++ b/rxandroid/src/main/java/rx/android/lifecycle/LifecycleObservable.java
@@ -2,9 +2,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * <p/>
  * http://www.apache.org/licenses/LICENSE-2.0
- *
+ * <p/>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -90,7 +90,7 @@ public Boolean call(LifecycleEvent lifecycleEvent) {
      *      subscription = LifecycleObservable.bindActivityLifecycle(
      *          this,
      *          ViewObservable.clicks(button),
-     *          LifecycleEvent.START)
+     *          LifecycleEvent.STOP)
      *         .subscribe(...);
      *   }
      *  }
@@ -99,20 +99,20 @@ public Boolean call(LifecycleEvent lifecycleEvent) {
      *
      * @param activity the activity we want to monitor lifecycle sequence for
      * @param source   the source sequence
-     * @param bindEvent the binding {@link LifecycleEvent} associated with the <code>source</code> Observable.
+     * @param event the event which should conclude notifications from the source.
      */
     @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    public static <T> Observable<T> bindActivityLifecycle(Activity activity, Observable<T> source, final LifecycleEvent bindEvent) {
+    public static <T> Observable<T> bindActivityUntilLifecycle(Activity activity, Observable<T> source, final LifecycleEvent event) {
         // Make sure we're running on ICS or higher to use ActivityLifecycleCallbacks
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-            throw new IllegalStateException ("This method is only available on API >= 14");
+            throw new IllegalStateException("This method is only available on API >= 14");
         }
 
         OnSubscribeActivityLifecycleCallbacks lifecycleCallbacks = new OnSubscribeActivityLifecycleCallbacks(activity);
-        Observable<T> observable =  bindLifecycle(
+        Observable<T> observable = bindLifecycle(
                 Observable.create(lifecycleCallbacks),
                 source,
-                bindEvent);
+                event);
 
         activity.getApplication().registerActivityLifecycleCallbacks(lifecycleCallbacks);
 
@@ -172,16 +172,16 @@ public Boolean call(Boolean shouldComplete) {
 
     private static <T> Observable<T> bindLifecycle(Observable<LifecycleEvent> lifecycle,
                                                    Observable<T> source,
-                                                   LifecycleEvent bindEvent) {
+                                                   LifecycleEvent event) {
         if (lifecycle == null || source == null) {
             throw new IllegalArgumentException("Lifecycle and Observable must be given");
         }
 
         // Make sure we're truly comparing a single stream to itself
         Observable<LifecycleEvent> sharedLifecycle = lifecycle.share();
-        final Observable<LifecycleEvent> bindUntil = Observable.just(getActivityStoppingLifecycleEvent(bindEvent));
+        final Observable<LifecycleEvent> bindUntil = Observable.just(event);
 
-        // Keep emitting from source until the corresponding event occurs in the lifecycle
+        // Keep emitting from source until the bindUntil event occurs in the lifecycle
         return source.lift(
                 new OperatorSubscribeUntil<T, Boolean>(
                         Observable.combineLatest(
@@ -208,7 +208,32 @@ public Boolean call(Boolean shouldComplete) {
             new Func1<LifecycleEvent, LifecycleEvent>() {
                 @Override
                 public LifecycleEvent call(LifecycleEvent lastEvent) {
-                    return getActivityStoppingLifecycleEvent(lastEvent);
+                    if (lastEvent == null) {
+                        throw new NullPointerException("Cannot bind to null LifecycleEvent.");
+                    }
+
+                    switch (lastEvent) {
+                        case CREATE:
+                            return LifecycleEvent.DESTROY;
+                        case START:
+                            return LifecycleEvent.STOP;
+                        case RESUME:
+                            return LifecycleEvent.PAUSE;
+                        case PAUSE:
+                            return LifecycleEvent.STOP;
+                        case STOP:
+                            return LifecycleEvent.DESTROY;
+                        case DESTROY:
+                            throw new IllegalStateException("Cannot bind to Activity lifecycle when outside of it.");
+                        case ATTACH:
+                        case CREATE_VIEW:
+                        case DESTROY_VIEW:
+                        case DETACH:
+                            throw new IllegalStateException("Cannot bind to " + lastEvent + " for an Activity.");
+                        default:
+                            throw new UnsupportedOperationException("Binding to LifecycleEvent " + lastEvent
+                                    + " not yet implemented");
+                    }
                 }
             };
 
@@ -249,32 +274,4 @@ public LifecycleEvent call(LifecycleEvent lastEvent) {
                 }
             };
 
-    private static LifecycleEvent getActivityStoppingLifecycleEvent(LifecycleEvent lastEvent) {
-        if (lastEvent == null) {
-            throw new NullPointerException("Cannot bind to null LifecycleEvent.");
-        }
-
-        switch (lastEvent) {
-            case CREATE:
-                return LifecycleEvent.DESTROY;
-            case START:
-                return LifecycleEvent.STOP;
-            case RESUME:
-                return LifecycleEvent.PAUSE;
-            case PAUSE:
-                return LifecycleEvent.STOP;
-            case STOP:
-                return LifecycleEvent.DESTROY;
-            case DESTROY:
-                throw new IllegalStateException("Cannot bind to Activity lifecycle when outside of it.");
-            case ATTACH:
-            case CREATE_VIEW:
-            case DESTROY_VIEW:
-            case DETACH:
-                throw new IllegalStateException("Cannot bind to " + lastEvent + " for an Activity.");
-            default:
-                throw new UnsupportedOperationException("Binding to LifecycleEvent " + lastEvent
-                        + " not yet implemented");
-        }
-    }
 }
diff --git a/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java b/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java
index 36f6ed3a..f5c0bf88 100644
--- a/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java
+++ b/rxandroid/src/main/java/rx/android/lifecycle/OnSubscribeActivityLifecycleCallbacks.java
@@ -6,8 +6,6 @@
 
 import rx.Observable;
 import rx.Subscriber;
-import rx.functions.Action1;
-import rx.functions.Func1;
 
 /**
  * This instance lives within the scope of an {@code Activity} in order to forward Lifecycle events
@@ -30,42 +28,27 @@ public void call(Subscriber<? super LifecycleEvent> subscriber) {
 
     @Override
     public void onActivityCreated(final Activity activity, Bundle bundle) {
-        Observable
-                .just(activity)
-                .filter(sameInstance)
-                .subscribe(sendCreateEvent);
+        sendEvent(activity, LifecycleEvent.CREATE);
     }
 
     @Override
     public void onActivityStarted(Activity activity) {
-        Observable
-                .just(activity)
-                .filter(sameInstance)
-                .subscribe(sendStartEvent);
+        sendEvent(activity, LifecycleEvent.START);
     }
 
     @Override
     public void onActivityResumed(Activity activity) {
-        Observable
-                .just(activity)
-                .filter(sameInstance)
-                .subscribe(sendResumeEvent);
+        sendEvent(activity, LifecycleEvent.RESUME);
     }
 
     @Override
     public void onActivityPaused(Activity activity) {
-        Observable
-                .just(activity)
-                .filter(sameInstance)
-                .subscribe(sendPauseEvent);
+        sendEvent(activity, LifecycleEvent.PAUSE);
     }
 
     @Override
     public void onActivityStopped(Activity activity) {
-        Observable
-                .just(activity)
-                .filter(sameInstance)
-                .subscribe(sendStopEvent);
+        sendEvent(activity, LifecycleEvent.STOP);
     }
 
     @Override
@@ -74,83 +57,24 @@ public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
 
     @Override
     public void onActivityDestroyed(Activity activity) {
-        Observable
-                .just(activity)
-                .filter(sameInstance)
-                .doOnNext(sendDestroyEvent)
-                .subscribe(unregisterActivityLifecycleCallbacks);
+        sendEventAndUnregister(activity, LifecycleEvent.DESTROY);
 
     }
 
-    private final Func1<Activity, Boolean> sameInstance =
-            new Func1<Activity, Boolean>() {
-                @Override
-                public Boolean call(Activity callbackActivity) {
-                    // Application notify all instances of ActivityLifecycleCallbacks when a particular
-                    // event is emitted, we use identity comparison to sameInstance out events related
-                    // to the instance of Activity we're currently monitoring
-                    return callbackActivity == activityToMonitor;
-                }
-            };
-
-
-    // Actions
-    private final Action1<Activity> sendCreateEvent = new Action1<Activity>() {
-        @Override
-        public void call(Activity activity) {
-            subscriber.onNext(LifecycleEvent.CREATE);
+    private void sendEvent(Activity activity, LifecycleEvent event) {
+        // Application notify all instances of ActivityLifecycleCallbacks when a particular
+        // event is emitted, we use identity comparison to filter out events related
+        // to the instance of Activity we're currently monitoring
+        if (activity == activityToMonitor && subscriber != null) {
+            subscriber.onNext(event);
         }
-    };
-
-    private final Action1<Activity> sendStartEvent = new Action1<Activity>() {
-        @Override
-        public void call(Activity activity) {
-            if (subscriber != null) {
-                subscriber.onNext(LifecycleEvent.START);
-            }
-        }
-    };
-
-    private final Action1<Activity> sendResumeEvent = new Action1<Activity>() {
-        @Override
-        public void call(Activity activity) {
-            if (subscriber != null) {
-                subscriber.onNext(LifecycleEvent.RESUME);
-            }
-        }
-    };
-
-    private final Action1<Activity> sendPauseEvent = new Action1<Activity>() {
-        @Override
-        public void call(Activity activity) {
-            if (subscriber != null) {
-                subscriber.onNext(LifecycleEvent.PAUSE);
-            }
-        }
-    };
-
-    private final Action1<Activity> sendStopEvent = new Action1<Activity>() {
-        @Override
-        public void call(Activity activity) {
-            if (subscriber != null) {
-                subscriber.onNext(LifecycleEvent.STOP);
-            }
-        }
-    };
-
-    private final Action1<Activity> sendDestroyEvent = new Action1<Activity>() {
-        @Override
-        public void call(Activity activity) {
-            if (subscriber != null) {
-                subscriber.onNext(LifecycleEvent.DESTROY);
-            }
-        }
-    };
+    }
 
-    private final Action1<Activity> unregisterActivityLifecycleCallbacks = new Action1<Activity>() {
-        @Override
-        public void call(Activity activity) {
-            activity.getApplication().unregisterActivityLifecycleCallbacks(OnSubscribeActivityLifecycleCallbacks.this);
+    private void sendEventAndUnregister(Activity activity, LifecycleEvent event) {
+        if (activity == activityToMonitor && subscriber != null) {
+            subscriber.onNext(event);
+            activity.getApplication().unregisterActivityLifecycleCallbacks(this);
         }
-    };
+    }
+
 }
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnCreateEventActivity.java b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnCreateEventActivity.java
index f6ab63ac..fe2868c6 100644
--- a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnCreateEventActivity.java
+++ b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnCreateEventActivity.java
@@ -17,9 +17,9 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        subscription = LifecycleObservable.bindActivityLifecycle(this,
+        subscription = LifecycleObservable.bindActivityUntilLifecycle(this,
                 ViewObservable.clicks(button),
-                LifecycleEvent.CREATE)
+                LifecycleEvent.DESTROY)
                 .subscribe(new Action1<OnClickEvent>() {
                     @Override
                     public void call(OnClickEvent onClickEvent) {
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnDestroyEventActivity.java b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnDestroyEventActivity.java
index 2fe9e3bf..134b27f7 100644
--- a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnDestroyEventActivity.java
+++ b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnDestroyEventActivity.java
@@ -15,7 +15,7 @@
     @Override
     protected void onDestroy() {
         super.onDestroy();
-        subscription = LifecycleObservable.bindActivityLifecycle(this,
+        subscription = LifecycleObservable.bindActivityUntilLifecycle(this,
                 ViewObservable.clicks(button),
                 LifecycleEvent.DESTROY)
                 .subscribe(new Action1<OnClickEvent>() {
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnPauseEventActivity.java b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnPauseEventActivity.java
index 8f5e9d4f..804945ac 100644
--- a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnPauseEventActivity.java
+++ b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnPauseEventActivity.java
@@ -15,9 +15,9 @@
     @Override
     protected void onPause() {
         super.onPause();
-        subscription = LifecycleObservable.bindActivityLifecycle(this,
+        subscription = LifecycleObservable.bindActivityUntilLifecycle(this,
                 ViewObservable.clicks(button),
-                LifecycleEvent.PAUSE)
+                LifecycleEvent.STOP)
                 .subscribe(new Action1<OnClickEvent>() {
                     @Override
                     public void call(OnClickEvent onClickEvent) {
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnResumeEventActivity.java b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnResumeEventActivity.java
index 4991a839..0a90426a 100644
--- a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnResumeEventActivity.java
+++ b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnResumeEventActivity.java
@@ -15,9 +15,9 @@
     @Override
     protected void onResume() {
         super.onResume();
-        subscription = LifecycleObservable.bindActivityLifecycle(this,
+        subscription = LifecycleObservable.bindActivityUntilLifecycle(this,
                 ViewObservable.clicks(button),
-                LifecycleEvent.RESUME)
+                LifecycleEvent.PAUSE)
                 .subscribe(new Action1<OnClickEvent>() {
                     @Override
                     public void call(OnClickEvent onClickEvent) {
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStartEventActivity.java b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStartEventActivity.java
index 2c546873..6242199f 100644
--- a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStartEventActivity.java
+++ b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStartEventActivity.java
@@ -15,9 +15,9 @@
     @Override
     protected void onStart() {
         super.onStart();
-        subscription = LifecycleObservable.bindActivityLifecycle(this,
+        subscription = LifecycleObservable.bindActivityUntilLifecycle(this,
                 ViewObservable.clicks(button),
-                LifecycleEvent.START)
+                LifecycleEvent.STOP)
                 .subscribe(new Action1<OnClickEvent>() {
                     @Override
                     public void call(OnClickEvent onClickEvent) {
diff --git a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStopEventActivity.java b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStopEventActivity.java
index 4a580f65..f6cf0405 100644
--- a/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStopEventActivity.java
+++ b/rxandroid/src/test/java/rx/android/lifecycle/scenarios/BindOnStopEventActivity.java
@@ -15,9 +15,9 @@
     @Override
     protected void onStop() {
         super.onStop();
-        subscription = LifecycleObservable.bindActivityLifecycle(this,
+        subscription = LifecycleObservable.bindActivityUntilLifecycle(this,
                 ViewObservable.clicks(button),
-                LifecycleEvent.STOP)
+                LifecycleEvent.DESTROY)
                 .subscribe(new Action1<OnClickEvent>() {
                     @Override
                     public void call(OnClickEvent onClickEvent) {
diff --git a/sample-app/src/main/java/rx/android/samples/LifecycleObservableActivityComposition.java b/sample-app/src/main/java/rx/android/samples/LifecycleObservableActivityComposition.java
index d24da26f..c11d7fb0 100644
--- a/sample-app/src/main/java/rx/android/samples/LifecycleObservableActivityComposition.java
+++ b/sample-app/src/main/java/rx/android/samples/LifecycleObservableActivityComposition.java
@@ -53,9 +53,9 @@ protected void onStart() {
         super.onStart();
 
         subscription =
-                LifecycleObservable.bindActivityLifecycle(this,
+                LifecycleObservable.bindActivityUntilLifecycle(this,
                         ViewObservable.clicks(button),
-                        LifecycleEvent.START)
+                        LifecycleEvent.STOP)
                         .subscribe(new Action1<OnClickEvent>() {
                             @Override
                             public void call(OnClickEvent onClickEvent) {
