diff --git a/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java b/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java
index 84ebe291..c42ee8a2 100644
--- a/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java
+++ b/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java
@@ -14,9 +14,11 @@
 package io.reactivex.android;
 
 import android.os.Looper;
+
+import java.util.concurrent.atomic.AtomicBoolean;
+
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.Disposable;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
  * A {@linkplain Disposable disposable} which ensures its {@linkplain #onDispose()
@@ -69,15 +71,12 @@ public final boolean isDisposed() {
     @Override
     public final void dispose() {
         if (unsubscribed.compareAndSet(false, true)) {
-            if (Looper.myLooper() == Looper.getMainLooper()) {
-                onDispose();
-            } else {
-                AndroidSchedulers.mainThread().scheduleDirect(new Runnable() {
-                    @Override public void run() {
-                        onDispose();
-                    }
-                });
-            }
+            AndroidSchedulers.mainThread().scheduleDirect(new Runnable() {
+                @Override
+                public void run() {
+                    onDispose();
+                }
+            });
         }
     }
 
diff --git a/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java b/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java
index 5428dc21..f6d19c88 100644
--- a/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java
+++ b/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java
@@ -13,16 +13,18 @@
  */
 package io.reactivex.android;
 
-import io.reactivex.disposables.Disposable;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import io.reactivex.disposables.Disposable;
+
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -54,7 +56,7 @@
     assertTrue(latch.await(1, SECONDS));
   }
 
-  @Test public void onUnsubscribeRunsSyncOnMainThread() {
+  @Test public void onUnsubscribeDoesNotRunSyncOnMainThread() {
     ShadowLooper.pauseMainLooper();
 
     final AtomicBoolean called = new AtomicBoolean();
@@ -64,7 +66,7 @@
       }
     }.dispose();
 
-    assertTrue(called.get());
+    assertFalse(called.get());
   }
 
   @Test public void unsubscribeTwiceDoesNotRunTwice() {
@@ -106,6 +108,22 @@
     assertTrue(called.get());
   }
 
+  @Test public void onUnsubscribeGoesThroughMainThreadSchedulerEvenOnMainThread() throws InterruptedException {
+    ShadowLooper.pauseMainLooper();
+
+    final AtomicBoolean called = new AtomicBoolean();
+    new MainThreadDisposable() {
+      @Override protected void onDispose() {
+        called.set(true);
+      }
+    }.dispose(); // Robolectric tests run on its main thread.
+
+    assertFalse(called.get()); // Callback has not yet run.
+
+    ShadowLooper.runMainLooperOneTask();
+    assertTrue(called.get());
+  }
+
   @Test
   public void disposedState() {
     MainThreadDisposable disposable = new MainThreadDisposable() {
