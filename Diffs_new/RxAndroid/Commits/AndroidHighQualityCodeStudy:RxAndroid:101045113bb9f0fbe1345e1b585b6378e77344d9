diff --git a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
index c6d3d0ed..056b6e31 100644
--- a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
+++ b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
@@ -15,7 +15,6 @@
 
 import android.app.Activity;
 import android.os.Bundle;
-import android.os.SystemClock;
 import android.util.Log;
 import android.view.View;
 
@@ -29,14 +28,12 @@
 import io.reactivex.Observable;
 import io.reactivex.ObservableEmitter;
 import io.reactivex.ObservableOnSubscribe;
-import io.reactivex.ObservableSource;
 import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.annotations.NonNull;
 import io.reactivex.functions.Consumer;
-import io.reactivex.observers.DisposableObserver;
+import io.reactivex.functions.Function;
 import io.reactivex.schedulers.Schedulers;
 
-import java.util.concurrent.Callable;
 
 public class MainActivity extends Activity {
     private static final String TAG = "RxAndroidSamples";
@@ -57,20 +54,15 @@ public void onClick(View v) {
 
     void funcion01() {
 
-
         Flowable.create(new FlowableOnSubscribe<Integer>() {
             @Override
             public void subscribe(FlowableEmitter<Integer> emitter) throws Exception {
-
-                Log.e("xiaxl: ", "---subscribe---");
-
-
+                // IO线程
+                // 请求网络数据
                 emitter.onNext(0);
                 emitter.onComplete();
 
 
-                Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
-                Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
             }
         }, BackpressureStrategy.ERROR)
                 .subscribeOn(Schedulers.io())
@@ -78,39 +70,68 @@ public void subscribe(FlowableEmitter<Integer> emitter) throws Exception {
                 .subscribe(new Subscriber<Integer>() {
                     @Override
                     public void onSubscribe(Subscription s) {
-
-                        Log.e("xiaxl: ", "onSubscribe beforeRequst");
-                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
-                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
-
                         s.request(Long.MAX_VALUE);
                     }
 
                     @Override
                     public void onNext(Integer integer) {
-
-                        Log.e("xiaxl: ", "onNext");
-                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
-                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
+                        // 主线程
+                        // 更新 UI
                     }
 
                     @Override
                     public void onError(Throwable t) {
-                        Log.e("xiaxl: ", "onError");
-                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
-                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
+                        // 主线程
+                        // 错误 UI
                     }
 
                     @Override
                     public void onComplete() {
-                        //由于Reactive-Streams的兼容性，方法onCompleted被重命名为onComplete
-                        Log.e("xiaxl: ", "onComplete");
-                        Log.e("xiaxl: ", "Thread Name: " + Thread.currentThread().getName());
-                        Log.e("xiaxl: ", "Thread ID: " + Thread.currentThread().getId());
+                        // 主线程
+                        // 更新 UI
                     }
                 });
+    }
+
 
+    void funcion02() {
 
+        Observable.create(new ObservableOnSubscribe<String>() {
+            @Override
+            public void subscribe(ObservableEmitter<String> e) throws Exception {
+                // IO 线程
+                // 请求网络数据
+                e.onNext("123456");
+            }
+        }).map(new Function<String, Integer>() {
+            @Override
+            public Integer apply(String s) {
+                // IO 线程
+                // 网络数据解析(数据转化)
+                //
+                // throw new RequestFailException("获取网络请求失败");
+                return 123;
+            }
+        }).doOnNext(new Consumer<Integer>() {    //保存登录结果UserInfo
+            @Override
+            public void accept(@NonNull Integer bean) throws Exception {
+                // IO 线程
+                // 保存网络数据
+
+            }
+        }).subscribeOn(Schedulers.io())   //IO线程
+                .observeOn(AndroidSchedulers.mainThread())  //主线程
+                .subscribe(new Consumer<Integer>() {
+                    @Override
+                    public void accept(@NonNull Integer bean) throws Exception {
+                        // 更新UI
+                    }
+                }, new Consumer<Throwable>() {
+                    @Override
+                    public void accept(@NonNull Throwable throwable) throws Exception {
+                        // 错误 显示错误页面
+                    }
+                });
     }
 
 }
