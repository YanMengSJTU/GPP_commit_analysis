diff --git a/build.gradle b/build.gradle
index d0ac38f6..189dd8d2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -23,5 +23,5 @@ subprojects {
 ext {
     minSdkVersion = 14
     compileSdkVersion = 28
-    sourceCompatibility = JavaVersion.VERSION_1_7
+    sourceCompatibility = JavaVersion.VERSION_1_8
 }
diff --git a/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java b/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java
index 84ebe291..2f54a430 100644
--- a/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java
+++ b/rxandroid/src/main/java/io/reactivex/android/MainThreadDisposable.java
@@ -72,11 +72,7 @@ public final void dispose() {
             if (Looper.myLooper() == Looper.getMainLooper()) {
                 onDispose();
             } else {
-                AndroidSchedulers.mainThread().scheduleDirect(new Runnable() {
-                    @Override public void run() {
-                        onDispose();
-                    }
-                });
+                AndroidSchedulers.mainThread().scheduleDirect(this::onDispose);
             }
         }
     }
diff --git a/rxandroid/src/main/java/io/reactivex/android/schedulers/AndroidSchedulers.java b/rxandroid/src/main/java/io/reactivex/android/schedulers/AndroidSchedulers.java
index 78bebe3d..d84dc031 100644
--- a/rxandroid/src/main/java/io/reactivex/android/schedulers/AndroidSchedulers.java
+++ b/rxandroid/src/main/java/io/reactivex/android/schedulers/AndroidSchedulers.java
@@ -31,11 +31,7 @@
     }
 
     private static final Scheduler MAIN_THREAD = RxAndroidPlugins.initMainThreadScheduler(
-            new Callable<Scheduler>() {
-                @Override public Scheduler call() throws Exception {
-                    return MainHolder.DEFAULT;
-                }
-            });
+            () -> MainHolder.DEFAULT);
 
     /** A {@link Scheduler} which executes actions on the Android main thread. */
     public static Scheduler mainThread() {
diff --git a/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java b/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java
index 5428dc21..9c307fdc 100644
--- a/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java
+++ b/rxandroid/src/test/java/io/reactivex/android/MainThreadDisposableTest.java
@@ -39,15 +39,13 @@
 
   @Test public void verifyThrowsOffMainThread() throws InterruptedException {
     final CountDownLatch latch = new CountDownLatch(1);
-    new Thread(new Runnable() {
-      @Override public void run() {
-        try {
-          MainThreadDisposable.verifyMainThread();
-          fail();
-        } catch (IllegalStateException e) {
-          assertTrue(e.getMessage().startsWith("Expected to be called on the main thread"));
-          latch.countDown();
-        }
+    new Thread(() -> {
+      try {
+        MainThreadDisposable.verifyMainThread();
+        fail();
+      } catch (IllegalStateException e) {
+        assertTrue(e.getMessage().startsWith("Expected to be called on the main thread"));
+        latch.countDown();
       }
     }).start();
 
@@ -88,15 +86,13 @@
 
     final CountDownLatch latch = new CountDownLatch(1);
     final AtomicBoolean called = new AtomicBoolean();
-    new Thread(new Runnable() {
-      @Override public void run() {
-        new MainThreadDisposable() {
-          @Override protected void onDispose() {
-            called.set(true);
-          }
-        }.dispose();
-        latch.countDown();
-      }
+    new Thread(() -> {
+      new MainThreadDisposable() {
+        @Override protected void onDispose() {
+          called.set(true);
+        }
+      }.dispose();
+      latch.countDown();
     }).start();
 
     assertTrue(latch.await(1, SECONDS));
diff --git a/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java b/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java
index b17a89e4..e3649062 100644
--- a/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java
+++ b/rxandroid/src/test/java/io/reactivex/android/plugins/RxAndroidPluginsTest.java
@@ -45,11 +45,9 @@ public void setUpAndTearDown() {
     public void mainThreadHandlerCalled() {
         final AtomicReference<Scheduler> schedulerRef = new AtomicReference<>();
         final Scheduler newScheduler = new EmptyScheduler();
-        RxAndroidPlugins.setMainThreadSchedulerHandler(new Function<Scheduler, Scheduler>() {
-            @Override public Scheduler apply(Scheduler scheduler) {
-                schedulerRef.set(scheduler);
-                return newScheduler;
-            }
+        RxAndroidPlugins.setMainThreadSchedulerHandler(scheduler -> {
+            schedulerRef.set(scheduler);
+            return newScheduler;
         });
 
         Scheduler scheduler = new EmptyScheduler();
@@ -60,10 +58,8 @@ public void mainThreadHandlerCalled() {
 
     @Test
     public void resetClearsMainThreadHandler() {
-        RxAndroidPlugins.setMainThreadSchedulerHandler(new Function<Scheduler, Scheduler>() {
-            @Override public Scheduler apply(Scheduler scheduler) {
-                throw new AssertionError();
-            }
+        RxAndroidPlugins.setMainThreadSchedulerHandler(scheduler -> {
+            throw new AssertionError();
         });
         RxAndroidPlugins.reset();
 
@@ -77,17 +73,13 @@ public void initMainThreadHandlerCalled() {
         final AtomicReference<Callable<Scheduler>> schedulerRef = new AtomicReference<>();
         final Scheduler newScheduler = new EmptyScheduler();
         RxAndroidPlugins
-                .setInitMainThreadSchedulerHandler(new Function<Callable<Scheduler>, Scheduler>() {
-                    @Override public Scheduler apply(Callable<Scheduler> scheduler) {
-                        schedulerRef.set(scheduler);
-                        return newScheduler;
-                    }
+                .setInitMainThreadSchedulerHandler(scheduler -> {
+                    schedulerRef.set(scheduler);
+                    return newScheduler;
                 });
 
-        Callable<Scheduler> scheduler = new Callable<Scheduler>() {
-            @Override public Scheduler call() throws Exception {
-                throw new AssertionError();
-            }
+        Callable<Scheduler> scheduler = () -> {
+            throw new AssertionError();
         };
         Scheduler actual = RxAndroidPlugins.initMainThreadScheduler(scheduler);
         assertSame(newScheduler, actual);
@@ -97,18 +89,12 @@ public void initMainThreadHandlerCalled() {
     @Test
     public void resetClearsInitMainThreadHandler() throws Exception {
         RxAndroidPlugins
-                .setInitMainThreadSchedulerHandler(new Function<Callable<Scheduler>, Scheduler>() {
-                    @Override public Scheduler apply(Callable<Scheduler> scheduler) {
-                        throw new AssertionError();
-                    }
+                .setInitMainThreadSchedulerHandler(scheduler -> {
+                    throw new AssertionError();
                 });
 
         final Scheduler scheduler = new EmptyScheduler();
-        Callable<Scheduler> schedulerCallable = new Callable<Scheduler>() {
-            @Override public Scheduler call() throws Exception {
-                return scheduler;
-            }
-        };
+        Callable<Scheduler> schedulerCallable = () -> scheduler;
 
         RxAndroidPlugins.reset();
 
@@ -119,15 +105,9 @@ public void resetClearsInitMainThreadHandler() throws Exception {
     @Test
     public void defaultMainThreadSchedulerIsInitializedLazily() {
         Function<Callable<Scheduler>, Scheduler> safeOverride =
-                new Function<Callable<Scheduler>, Scheduler>() {
-            @Override public Scheduler apply(Callable<Scheduler> scheduler) {
-                return new EmptyScheduler();
-            }
-        };
-        Callable<Scheduler> unsafeDefault = new Callable<Scheduler>() {
-            @Override public Scheduler call() throws Exception {
-                throw new AssertionError();
-            }
+                scheduler -> new EmptyScheduler();
+        Callable<Scheduler> unsafeDefault = () -> {
+            throw new AssertionError();
         };
 
        RxAndroidPlugins.setInitMainThreadSchedulerHandler(safeOverride);
@@ -146,11 +126,7 @@ public void overrideInitMainSchedulerThrowsWhenSchedulerCallableIsNull() {
 
     @Test
     public void overrideInitMainSchedulerThrowsWhenSchedulerCallableReturnsNull() {
-        Callable<Scheduler> nullResultCallable = new Callable<Scheduler>() {
-            @Override public Scheduler call() throws Exception {
-                return null;
-            }
-        };
+        Callable<Scheduler> nullResultCallable = () -> null;
 
         try {
             RxAndroidPlugins.initMainThreadScheduler(nullResultCallable);
@@ -162,22 +138,14 @@ public void overrideInitMainSchedulerThrowsWhenSchedulerCallableReturnsNull() {
 
     @Test
     public void getInitMainThreadSchedulerHandlerReturnsHandler() {
-        Function<Callable<Scheduler>, Scheduler> handler = new Function<Callable<Scheduler>, Scheduler>() {
-            @Override public Scheduler apply(Callable<Scheduler> schedulerCallable) throws Exception {
-                return Schedulers.trampoline();
-            }
-        };
+        Function<Callable<Scheduler>, Scheduler> handler = schedulerCallable -> Schedulers.trampoline();
         RxAndroidPlugins.setInitMainThreadSchedulerHandler(handler);
         assertSame(handler, RxAndroidPlugins.getInitMainThreadSchedulerHandler());
     }
 
     @Test
     public void getMainThreadSchedulerHandlerReturnsHandler() {
-        Function<Scheduler, Scheduler> handler = new Function<Scheduler, Scheduler>() {
-            @Override public Scheduler apply(Scheduler scheduler) {
-                return Schedulers.trampoline();
-            }
-        };
+        Function<Scheduler, Scheduler> handler = scheduler -> Schedulers.trampoline();
         RxAndroidPlugins.setMainThreadSchedulerHandler(handler);
         assertSame(handler, RxAndroidPlugins.getOnMainThreadSchedulerHandler());
     }
diff --git a/rxandroid/src/test/java/io/reactivex/android/schedulers/AndroidSchedulersTest.java b/rxandroid/src/test/java/io/reactivex/android/schedulers/AndroidSchedulersTest.java
index d4a72897..0e6d58bf 100644
--- a/rxandroid/src/test/java/io/reactivex/android/schedulers/AndroidSchedulersTest.java
+++ b/rxandroid/src/test/java/io/reactivex/android/schedulers/AndroidSchedulersTest.java
@@ -51,11 +51,9 @@ public void setUpAndTearDown() {
     public void mainThreadCallsThroughToHook() {
         final AtomicInteger called = new AtomicInteger();
         final Scheduler newScheduler = new EmptyScheduler();
-        RxAndroidPlugins.setMainThreadSchedulerHandler(new Function<Scheduler, Scheduler>() {
-            @Override public Scheduler apply(Scheduler scheduler) {
-                called.getAndIncrement();
-                return newScheduler;
-            }
+        RxAndroidPlugins.setMainThreadSchedulerHandler(scheduler -> {
+            called.getAndIncrement();
+            return newScheduler;
         });
 
         assertSame(newScheduler, AndroidSchedulers.mainThread());
@@ -94,15 +92,12 @@ public void fromReturnsUsableScheduler() {
     public void asyncIgnoredPre16() {
         ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 14);
 
-        ShadowLooper mainLooper = ShadowLooper.getShadowMainLooper();
+        ShadowLooper mainLooper = shadowOf(Looper.getMainLooper());
         mainLooper.pause();
         ShadowMessageQueue mainMessageQueue = shadowOf(Looper.getMainLooper().getQueue());
 
         Scheduler main = AndroidSchedulers.from(Looper.getMainLooper(), true);
-        main.scheduleDirect(new Runnable() {
-            @Override public void run() {
-            }
-        });
+        main.scheduleDirect(() -> {});
 
         Message message = mainMessageQueue.getHead();
         assertFalse(message.isAsynchronous());
diff --git a/rxandroid/src/test/java/io/reactivex/android/schedulers/HandlerSchedulerTest.java b/rxandroid/src/test/java/io/reactivex/android/schedulers/HandlerSchedulerTest.java
index 693691fe..126045d3 100644
--- a/rxandroid/src/test/java/io/reactivex/android/schedulers/HandlerSchedulerTest.java
+++ b/rxandroid/src/test/java/io/reactivex/android/schedulers/HandlerSchedulerTest.java
@@ -105,11 +105,9 @@ public void directScheduleOnceWithNegativeDelayPostsImmediately() {
     public void directScheduleOnceUsesHook() {
         final CountingRunnable newCounter = new CountingRunnable();
         final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-        RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {
-            @Override public Runnable apply(Runnable runnable) {
-                runnableRef.set(runnable);
-                return newCounter;
-            }
+        RxJavaPlugins.setScheduleHandler(runnable -> {
+            runnableRef.set(runnable);
+            return newCounter;
         });
 
         CountingRunnable counter = new CountingRunnable();
@@ -151,11 +149,9 @@ public void directScheduleOnceWithDelayPostsWithDelay() {
     public void directScheduleOnceWithDelayUsesHook() {
         final CountingRunnable newCounter = new CountingRunnable();
         final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-        RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {
-            @Override public Runnable apply(Runnable runnable) {
-                runnableRef.set(runnable);
-                return newCounter;
-            }
+        RxJavaPlugins.setScheduleHandler(runnable -> {
+            runnableRef.set(runnable);
+            return newCounter;
         });
 
         CountingRunnable counter = new CountingRunnable();
@@ -209,11 +205,9 @@ public void directSchedulePeriodicallyReschedulesItself() {
     public void directSchedulePeriodicallyUsesHookOnce() {
         final CountingRunnable newCounter = new CountingRunnable();
         final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-        RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {
-            @Override public Runnable apply(Runnable runnable) {
-                runnableRef.set(runnable);
-                return newCounter;
-            }
+        RxJavaPlugins.setScheduleHandler(runnable -> {
+            runnableRef.set(runnable);
+            return newCounter;
         });
 
         CountingRunnable counter = new CountingRunnable();
@@ -344,11 +338,9 @@ public void workerScheduleOnceWithNegativeDelayPostsImmediately() {
     public void workerScheduleOnceUsesHook() {
         final CountingRunnable newCounter = new CountingRunnable();
         final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-        RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {
-            @Override public Runnable apply(Runnable runnable) {
-                runnableRef.set(runnable);
-                return newCounter;
-            }
+        RxJavaPlugins.setScheduleHandler(runnable -> {
+            runnableRef.set(runnable);
+            return newCounter;
         });
 
         Worker worker = scheduler.createWorker();
@@ -396,11 +388,9 @@ public void workerScheduleOnceWithDelayPostsWithDelay() {
     public void workerScheduleOnceWithDelayUsesHook() {
         final CountingRunnable newCounter = new CountingRunnable();
         final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-        RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {
-            @Override public Runnable apply(Runnable runnable) {
-                runnableRef.set(runnable);
-                return newCounter;
-            }
+        RxJavaPlugins.setScheduleHandler(runnable -> {
+            runnableRef.set(runnable);
+            return newCounter;
         });
 
         Worker worker = scheduler.createWorker();
@@ -462,11 +452,9 @@ public void workerSchedulePeriodicallyUsesHookOnce() {
 
         final CountingRunnable newCounter = new CountingRunnable();
         final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-        RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {
-            @Override public Runnable apply(Runnable runnable) {
-                runnableRef.set(runnable);
-                return newCounter;
-            }
+        RxJavaPlugins.setScheduleHandler(runnable -> {
+            runnableRef.set(runnable);
+            return newCounter;
         });
 
         CountingRunnable counter = new CountingRunnable();
@@ -592,12 +580,10 @@ public void workerDisposableTracksDisposedState() {
     @Test
     public void workerUnsubscriptionDuringSchedulingCancelsScheduledAction() {
         final AtomicReference<Worker> workerRef = new AtomicReference<>();
-        RxJavaPlugins.setScheduleHandler(new Function<Runnable, Runnable>() {
-            @Override public Runnable apply(Runnable runnable) {
-                // Purposefully unsubscribe in an asinine point after the normal unsubscribed check.
-                workerRef.get().dispose();
-                return runnable;
-            }
+        RxJavaPlugins.setScheduleHandler(runnable -> {
+            // Purposefully unsubscribe in an asinine point after the normal unsubscribed check.
+            workerRef.get().dispose();
+            return runnable;
         });
 
         Worker worker = scheduler.createWorker();
@@ -664,21 +650,13 @@ public void throwingActionRoutedToRxJavaPlugins() {
 
         try {
             final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-                @Override
-                public void accept(Throwable throwable) throws Exception {
-                    throwableRef.set(throwable);
-                }
-            });
+            RxJavaPlugins.setErrorHandler(throwableRef::set);
 
             Worker worker = scheduler.createWorker();
 
             final NullPointerException npe = new NullPointerException();
-            Runnable action = new Runnable() {
-                @Override
-                public void run() {
-                    throw npe;
-                }
+            Runnable action = () -> {
+                throw npe;
             };
             worker.schedule(action);
 
@@ -783,9 +761,7 @@ public void workerSchedulePeriodicallyInputValidation() {
     public void directScheduleSetAsync() {
         ShadowMessageQueue mainMessageQueue = shadowOf(Looper.getMainLooper().getQueue());
 
-        scheduler.scheduleDirect(new Runnable() {
-            @Override public void run() {
-            }
+        scheduler.scheduleDirect(() -> {
         });
 
         Message message = mainMessageQueue.getHead();
@@ -797,9 +773,7 @@ public void workerScheduleSetAsync() {
         ShadowMessageQueue mainMessageQueue = shadowOf(Looper.getMainLooper().getQueue());
 
         Worker worker = scheduler.createWorker();
-        worker.schedule(new Runnable() {
-            @Override public void run() {
-            }
+        worker.schedule(() -> {
         });
 
         Message message = mainMessageQueue.getHead();
@@ -811,9 +785,7 @@ public void workerSchedulePeriodicallySetAsync() {
         ShadowMessageQueue mainMessageQueue = shadowOf(Looper.getMainLooper().getQueue());
 
         Worker worker = scheduler.createWorker();
-        worker.schedulePeriodically(new Runnable() {
-            @Override public void run() {
-            }
+        worker.schedulePeriodically(() -> {
         }, 1, 1, MINUTES);
 
         Message message = mainMessageQueue.getHead();
@@ -822,6 +794,6 @@ public void workerSchedulePeriodicallySetAsync() {
 
     private static void idleMainLooper(long amount, TimeUnit unit) {
         // TODO delete this when https://github.com/robolectric/robolectric/pull/2592 is released.
-        ShadowLooper.idleMainLooper(unit.toMillis(amount));
+        ShadowLooper.idleMainLooper(unit.toMillis(amount), TimeUnit.MILLISECONDS);
     }
 }
diff --git a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
index af06cc34..b8a60bdd 100644
--- a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
+++ b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
@@ -34,11 +34,7 @@
     @Override protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main_activity);
-        findViewById(R.id.button_run_scheduler).setOnClickListener(new View.OnClickListener() {
-            @Override public void onClick(View v) {
-                onRunSchedulerExampleButtonClicked();
-            }
-        });
+        findViewById(R.id.button_run_scheduler).setOnClickListener(v -> onRunSchedulerExampleButtonClicked());
     }
 
     @Override protected void onDestroy() {
@@ -68,12 +64,10 @@ void onRunSchedulerExampleButtonClicked() {
     }
 
     static Observable<String> sampleObservable() {
-        return Observable.defer(new Callable<ObservableSource<? extends String>>() {
-          @Override public ObservableSource<? extends String> call() throws Exception {
-                // Do some long running operation
-                SystemClock.sleep(5000);
-                return Observable.just("one", "two", "three", "four", "five");
-            }
-        });
+        return Observable.defer(() -> {
+              // Do some long running operation
+              SystemClock.sleep(5000);
+              return Observable.just("one", "two", "three", "four", "five");
+          });
     }
 }
