diff --git a/README.md b/README.md
index 77870ae8..18e5e754 100644
--- a/README.md
+++ b/README.md
@@ -1,93 +1,28 @@
-# RxAndroid: Reactive Extensions for Android
+# Doppl Fork
 
-Android specific bindings for [RxJava](http://github.com/ReactiveX/RxJava).
+This is a fork of the RxAndroid library to provide tests and modifications to support 
+iOS development with J2objc using the [Doppl build framework](http://doppl.co/).
 
-This module adds the minimum classes to RxJava that make writing reactive components in Android
-applications easy and hassle-free. More specifically, it provides a `Scheduler` that schedules on
-the main thread or any given `Looper`.
+## Versions
 
+[1.2.1](https://github.com/doppllib/RxAndroid/tree/v1.2.1)
 
-## Communication
-
-Since RxAndroid is part of the RxJava family the communication channels are similar:
-
-- Google Group: [RxJava][list]
-- Twitter: [@RxJava][twitter]
-- StackOverflow: [rx-android][so]
-- [GitHub Issues][issues]
-
-
-# Binaries
+## Usage
 
 ```groovy
-compile 'io.reactivex:rxandroid:1.2.1'
-// Because RxAndroid releases are few and far between, it is recommended you also
-// explicitly depend on RxJava's latest version for bug fixes and new features.
-compile 'io.reactivex:rxjava:1.1.6'
+dependencies {
+    compile 'io.reactivex:rxandroid:1.2.1'
+    doppl 'co.doppl.io.reactivex:rxandroid:1.2.1.3'
+}
 ```
 
-* RxAndroid: <a href='http://search.maven.org/#search%7Cga%7C1%7Crxandroid'><img src='http://img.shields.io/maven-central/v/io.reactivex/rxandroid.svg'></a>
-* RxJava: <a href='http://search.maven.org/#search%7Cga%7C1%7Crxjava'><img src='http://img.shields.io/maven-central/v/io.reactivex/rxjava.svg'></a>
-
-Additional binaries and dependency information for can be found at [http://search.maven.org](http://search.maven.org/#search%7Cga%7C1%7Crxandroid).
-
-
-## Build
-
-To build:
-
-```bash
-$ git clone git@github.com:ReactiveX/RxAndroid.git
-$ cd RxAndroid/
-$ ./gradlew build
-```
-
-Further details on building can be found on the RxJava [Getting Started][start] page of the wiki.
-
-<a href='https://travis-ci.org/ReactiveX/RxAndroid/builds'><img src='https://api.travis-ci.org/ReactiveX/RxAndroid.svg?branch=1.x'></a>
-
-# Sample usage
-
-A sample project which provides runnable code examples that demonstrate uses of the classes in this
-project is available in the `sample-app/` folder.
-
-## Observing on the main thread
-
-One of the most common operations when dealing with asynchronous tasks on Android is to observe the task's
-result or outcome on the main thread. Using vanilla Android, this would typically be accomplished with an
-`AsyncTask`. With RxJava instead you would declare your `Observable` to be observed on the main thread:
-
-```java
-Observable.just("one", "two", "three", "four", "five")
-        .subscribeOn(Schedulers.newThread())
-        .observeOn(AndroidSchedulers.mainThread())
-        .subscribe(/* an Observer */);
-```
-
-This will execute the `Observable` on a new thread, and emit results through `onNext` on the main thread.
-
-## Observing on arbitrary loopers
-
-The previous sample is merely a specialization of a more general concept: binding asynchronous
-communication to an Android message loop, or `Looper`. In order to observe an `Observable` on an arbitrary
-`Looper`, create an associated `Scheduler` by calling `AndroidSchedulers.from`:
-
-```java
-Looper backgroundLooper = // ...
-Observable.just("one", "two", "three", "four", "five")
-        .observeOn(AndroidSchedulers.from(backgroundLooper))
-        .subscribe(/* an Observer */)
-```
-
-This will execute the Observable on a new thread and emit results through `onNext` on whatever thread is
-running `backgroundLooper`.
-
+## Status
 
-## Bugs and Feedback
+Stable. No known memory issues. RxJava itself has memory leaks, just fyi.
 
-For bugs, feature requests, and discussion please use [GitHub Issues][issues].
-For general usage questions please use the [mailing list][list] or [StackOverflow][so].
+## Library Development
 
+See [docs](http://doppl.co/docs/createlibrary.html) for an overview of our setup and repo org for forked library development.
 
 ## LICENSE
 
