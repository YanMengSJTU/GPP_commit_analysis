diff --git a/rxandroid/src/main/java/rx/android/content/ContentObservable.java b/rxandroid/src/main/java/rx/android/content/ContentObservable.java
index 747354b3..1d6a6782 100644
--- a/rxandroid/src/main/java/rx/android/content/ContentObservable.java
+++ b/rxandroid/src/main/java/rx/android/content/ContentObservable.java
@@ -21,6 +21,7 @@
 import android.os.Handler;
 
 import rx.Observable;
+import rx.functions.Func0;
 
 public final class ContentObservable {
     private ContentObservable() {
@@ -75,6 +76,20 @@ private ContentObservable() {
      * Observable completes or an error occurs.
      */
     public static Observable<Cursor> fromCursor(final Cursor cursor) {
-        return Observable.create(new OnSubscribeCursor(cursor));
+        return Observable.create(new OnSubscribeCursor(new Func0<Cursor>() {
+            @Override
+            public Cursor call() {
+                return cursor;
+            }
+        }));
+    }
+
+    /**
+     * Create Observable that emits the returned {@link android.database.Cursor} from query for each available position
+     * of the cursor moving to the next position before each call and closing the cursor whether the
+     * Observable completes or an error occurs.
+     */
+    public static Observable<Cursor> fromCursor(Func0<Cursor> cursorQuery) {
+        return Observable.create(new OnSubscribeCursor(cursorQuery));
     }
 }
diff --git a/rxandroid/src/main/java/rx/android/content/OnSubscribeCursor.java b/rxandroid/src/main/java/rx/android/content/OnSubscribeCursor.java
index 3c0c2624..3f9330ed 100644
--- a/rxandroid/src/main/java/rx/android/content/OnSubscribeCursor.java
+++ b/rxandroid/src/main/java/rx/android/content/OnSubscribeCursor.java
@@ -17,36 +17,39 @@
 
 import rx.Observable;
 import rx.Subscriber;
+import rx.functions.Func0;
 
 /**
  * Emits a {@link android.database.Cursor} for every available position.
  */
 final class OnSubscribeCursor implements Observable.OnSubscribe<Cursor> {
 
-    private final Cursor cursor;
+    private Func0<Cursor> cursorQuery;
 
-    OnSubscribeCursor(final Cursor cursor) {
-        this.cursor = cursor;
+    OnSubscribeCursor(Func0<Cursor> cursorQuery) {
+        this.cursorQuery = cursorQuery;
     }
 
     @Override
     public void call(final Subscriber<? super Cursor> subscriber) {
         try {
-            while (!subscriber.isUnsubscribed() && cursor.moveToNext()) {
-                subscriber.onNext(cursor);
-            }
-            if (!subscriber.isUnsubscribed()) {
-                subscriber.onCompleted();
+            Cursor cursor = cursorQuery.call();
+            try {
+                while (!subscriber.isUnsubscribed() && cursor.moveToNext()) {
+                    subscriber.onNext(cursor);
+                }
+                if (!subscriber.isUnsubscribed()) {
+                    subscriber.onCompleted();
+                }
+            } finally {
+                if (!cursor.isClosed()) {
+                    cursor.close();
+                }
             }
         } catch (Throwable e) {
             if (!subscriber.isUnsubscribed()) {
                 subscriber.onError(e);
             }
-        } finally {
-            if (!cursor.isClosed()) {
-                cursor.close();
-            }
         }
     }
-
 }
diff --git a/rxandroid/src/test/java/rx/android/content/ContentObservableTest.java b/rxandroid/src/test/java/rx/android/content/ContentObservableTest.java
index 6ee9809b..01f978b3 100644
--- a/rxandroid/src/test/java/rx/android/content/ContentObservableTest.java
+++ b/rxandroid/src/test/java/rx/android/content/ContentObservableTest.java
@@ -2,9 +2,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * <p/>
  * http://www.apache.org/licenses/LICENSE-2.0
- *
+ * <p/>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -23,6 +23,7 @@
 
 import rx.Observable;
 import rx.Subscriber;
+import rx.functions.Func0;
 import rx.observers.TestSubscriber;
 
 import static org.mockito.Mockito.doThrow;
@@ -33,7 +34,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
 public class ContentObservableTest {
@@ -125,4 +125,26 @@ public void givenCursorWhenFromCursorCalledThenEmitsAndClosesCursorAfterObservab
         verify(cursor).close();
     }
 
+    @Test
+    public void queriedCursorWhenFromCursorCalledThenEmitsAndClosesCursorAfterObservableError() {
+        final Subscriber<Cursor> subscriber = spy(new TestSubscriber<Cursor>());
+        final RuntimeException throwable = mock(RuntimeException.class);
+        final Cursor cursor = mock(Cursor.class);
+
+        Observable<Cursor> observable = ContentObservable.fromCursor(new Func0<Cursor>() {
+            @Override
+            public Cursor call() {
+                when(cursor.isAfterLast()).thenReturn(false, false, true);
+                when(cursor.moveToNext()).thenReturn(true).thenThrow(throwable);
+                when(cursor.getCount()).thenReturn(2);
+                return cursor;
+            }
+        });
+        observable.subscribe(subscriber);
+
+        verify(subscriber, never()).onCompleted();
+        verify(subscriber).onNext(cursor);
+        verify(subscriber).onError(throwable);
+        verify(cursor).close();
+    }
 }
