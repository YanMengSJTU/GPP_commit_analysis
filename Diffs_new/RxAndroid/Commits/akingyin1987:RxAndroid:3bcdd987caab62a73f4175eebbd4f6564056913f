diff --git a/MeaterialDesing/.gitignore b/MeaterialDesing/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/MeaterialDesing/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/MeaterialDesing/build.gradle b/MeaterialDesing/build.gradle
new file mode 100644
index 00000000..7007f770
--- /dev/null
+++ b/MeaterialDesing/build.gradle
@@ -0,0 +1,24 @@
+apply plugin: 'com.android.library'
+
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    buildToolsVersion rootProject.ext.buildToolsVersion
+
+    defaultConfig {
+        minSdkVersion rootProject.ext.minSdkVersion
+    }
+
+    compileOptions {
+        sourceCompatibility rootProject.ext.sourceCompatibility
+        targetCompatibility rootProject.ext.sourceCompatibility
+    }
+}
+
+
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile files('libs/nineoldandroids-2.4.0.jar')
+}
diff --git a/MeaterialDesing/libs/nineoldandroids-2.4.0.jar b/MeaterialDesing/libs/nineoldandroids-2.4.0.jar
new file mode 100644
index 00000000..43ee45ff
Binary files /dev/null and b/MeaterialDesing/libs/nineoldandroids-2.4.0.jar differ
diff --git a/MeaterialDesing/proguard-rules.pro b/MeaterialDesing/proguard-rules.pro
new file mode 100644
index 00000000..2589703d
--- /dev/null
+++ b/MeaterialDesing/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Applications/adt-bundle-mac-x86_64-20140321/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/MeaterialDesing/src/androidTest/java/com/gc/materialdesign/ApplicationTest.java b/MeaterialDesing/src/androidTest/java/com/gc/materialdesign/ApplicationTest.java
new file mode 100644
index 00000000..35dcaa4a
--- /dev/null
+++ b/MeaterialDesing/src/androidTest/java/com/gc/materialdesign/ApplicationTest.java
@@ -0,0 +1,13 @@
+package com.gc.myapplication;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
diff --git a/MeaterialDesing/src/androidTest/java/com/gc/module_gc.xml b/MeaterialDesing/src/androidTest/java/com/gc/module_gc.xml
new file mode 100644
index 00000000..a5792725
--- /dev/null
+++ b/MeaterialDesing/src/androidTest/java/com/gc/module_gc.xml
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="module_gc" default="compile.module.gc">
+  <dirname property="module.gc.basedir" file="${ant.file.module_gc}"/>
+  
+  <property name="module.jdk.home.gc" value="${project.jdk.home}"/>
+  <property name="module.jdk.bin.gc" value="${project.jdk.bin}"/>
+  <property name="module.jdk.classpath.gc" value="${project.jdk.classpath}"/>
+  
+  <property name="compiler.args.gc" value="-encoding GBK -source 8 ${compiler.args}"/>
+  
+  <property name="gc.output.dir" value="${module.gc.basedir}/../../../../../../../../out/production/gc"/>
+  <property name="gc.testoutput.dir" value="${module.gc.basedir}/../../../../../../../../out/test/gc"/>
+  
+  <path id="gc.module.bootclasspath">
+    <!-- Paths to be included in compilation bootclasspath -->
+  </path>
+  
+  <path id="gc.module.production.classpath">
+    <path refid="${module.jdk.classpath.gc}"/>
+  </path>
+  
+  <path id="gc.runtime.production.module.classpath">
+    <pathelement location="${gc.output.dir}"/>
+  </path>
+  
+  <path id="gc.module.classpath">
+    <path refid="${module.jdk.classpath.gc}"/>
+    <pathelement location="${gc.output.dir}"/>
+  </path>
+  
+  <path id="gc.runtime.module.classpath">
+    <pathelement location="${gc.testoutput.dir}"/>
+    <pathelement location="${gc.output.dir}"/>
+  </path>
+  
+  
+  <patternset id="excluded.from.module.gc">
+    <patternset refid="ignored.files"/>
+  </patternset>
+  
+  <patternset id="excluded.from.compilation.gc">
+    <patternset refid="excluded.from.module.gc"/>
+  </patternset>
+  
+  <path id="gc.module.sourcepath">
+    <dirset dir="${module.gc.basedir}">
+      <include name="materialdesign"/>
+    </dirset>
+  </path>
+  
+  
+  <target name="compile.module.gc" depends="compile.module.gc.production,compile.module.gc.tests" description="Compile module gc"/>
+  
+  <target name="compile.module.gc.production" depends="register.custom.compilers" description="Compile module gc; production classes">
+    <mkdir dir="${gc.output.dir}"/>
+    <javac2 destdir="${gc.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.gc}/javac">
+      <compilerarg line="${compiler.args.gc}"/>
+      <bootclasspath refid="gc.module.bootclasspath"/>
+      <classpath refid="gc.module.production.classpath"/>
+      <src refid="gc.module.sourcepath"/>
+      <patternset refid="excluded.from.compilation.gc"/>
+    </javac2>
+    
+    <copy todir="${gc.output.dir}">
+      <fileset dir="${module.gc.basedir}/materialdesign">
+        <patternset refid="compiler.resources"/>
+        <type type="file"/>
+      </fileset>
+    </copy>
+  </target>
+  
+  <target name="compile.module.gc.tests" depends="register.custom.compilers,compile.module.gc.production" description="compile module gc; test classes" unless="skip.tests"/>
+  
+  <target name="clean.module.gc" description="cleanup module">
+    <delete dir="${gc.output.dir}"/>
+    <delete dir="${gc.testoutput.dir}"/>
+  </target>
+</project>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/AndroidManifest.xml b/MeaterialDesing/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..dd7f620d
--- /dev/null
+++ b/MeaterialDesing/src/main/AndroidManifest.xml
@@ -0,0 +1,11 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.gc.materialdesign">
+
+    <application android:allowBackup="true"
+        android:label="@string/app_name"
+        android:icon="@drawable/ic_launcher"
+        android:theme="@style/AppTheme">
+
+    </application>
+
+</manifest>
diff --git a/MeaterialDesing/src/main/gen/com/gc/materialdesign/BuildConfig.java b/MeaterialDesing/src/main/gen/com/gc/materialdesign/BuildConfig.java
new file mode 100644
index 00000000..60bbd74f
--- /dev/null
+++ b/MeaterialDesing/src/main/gen/com/gc/materialdesign/BuildConfig.java
@@ -0,0 +1,8 @@
+/*___Generated_by_IDEA___*/
+
+package com.gc.materialdesign;
+
+/* This stub is only used by the IDE. It is NOT the BuildConfig class actually packed into the APK */
+public final class BuildConfig {
+  public final static boolean DEBUG = Boolean.parseBoolean(null);
+}
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/gen/com/gc/materialdesign/Manifest.java b/MeaterialDesing/src/main/gen/com/gc/materialdesign/Manifest.java
new file mode 100644
index 00000000..a872edf0
--- /dev/null
+++ b/MeaterialDesing/src/main/gen/com/gc/materialdesign/Manifest.java
@@ -0,0 +1,7 @@
+/*___Generated_by_IDEA___*/
+
+package com.gc.materialdesign;
+
+/* This stub is only used by the IDE. It is NOT the Manifest class actually packed into the APK */
+public final class Manifest {
+}
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/utils/Utils.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/utils/Utils.java
new file mode 100644
index 00000000..b496f754
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/utils/Utils.java
@@ -0,0 +1,34 @@
+package com.gc.materialdesign.utils;
+
+import android.content.res.Resources;
+import android.util.TypedValue;
+import android.view.View;
+
+public class Utils {
+	
+	
+	/**
+	 * Convert Dp to Pixel
+	 */
+	public static int dpToPx(float dp, Resources resources){
+		float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());
+		return (int) px;
+	}
+	
+	public static int getRelativeTop(View myView) {
+//	    if (myView.getParent() == myView.getRootView())
+	    if(myView.getId() == android.R.id.content)
+	        return myView.getTop();
+	    else
+	        return myView.getTop() + getRelativeTop((View) myView.getParent());
+	}
+	
+	public static int getRelativeLeft(View myView) {
+//	    if (myView.getParent() == myView.getRootView())
+		if(myView.getId() == android.R.id.content)
+			return myView.getLeft();
+		else
+			return myView.getLeft() + getRelativeLeft((View) myView.getParent());
+	}
+	
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Button.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Button.java
new file mode 100644
index 00000000..0092b4e4
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Button.java
@@ -0,0 +1,173 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+
+public abstract class Button extends CustomView {
+
+	final static String ANDROIDXML = "http://schemas.android.com/apk/res/android";
+
+	// Complete in child class
+	int minWidth;
+	int minHeight;
+	int background;
+	float rippleSpeed = 10f;
+	int rippleSize = 3;
+	Integer rippleColor;
+	OnClickListener onClickListener;
+	int backgroundColor = Color.parseColor("#1E88E5");
+
+	public Button(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setDefaultProperties();
+		setAttributes(attrs);
+		beforeBackground = backgroundColor;
+		if(rippleColor==null)
+		rippleColor = makePressColor();
+	}
+
+	protected void setDefaultProperties() {
+		// Min size
+		setMinimumHeight(Utils.dpToPx(minHeight, getResources()));
+		setMinimumWidth(Utils.dpToPx(minWidth, getResources()));
+		// Background shape
+		setBackgroundResource(background);
+		setBackgroundColor(backgroundColor);
+	}
+
+	// Set atributtes of XML to View
+	abstract protected void setAttributes(AttributeSet attrs);
+
+	// ### RIPPLE EFFECT ###
+
+	float x = -1, y = -1;
+	float radius = -1;
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		if (isEnabled()) {
+			isLastTouch = true;
+			if (event.getAction() == MotionEvent.ACTION_DOWN) {
+				radius = getHeight() / rippleSize;
+				x = event.getX();
+				y = event.getY();
+			} else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+				radius = getHeight() / rippleSize;
+				x = event.getX();
+				y = event.getY();
+				if (!((event.getX() <= getWidth() && event.getX() >= 0) && (event
+						.getY() <= getHeight() && event.getY() >= 0))) {
+					isLastTouch = false;
+					x = -1;
+					y = -1;
+				}
+			} else if (event.getAction() == MotionEvent.ACTION_UP) {
+				if ((event.getX() <= getWidth() && event.getX() >= 0)
+						&& (event.getY() <= getHeight() && event.getY() >= 0)) {
+					radius++;
+				} else {
+					isLastTouch = false;
+					x = -1;
+					y = -1;
+				}
+			}
+		}
+		return true;
+	}
+
+	@Override
+	protected void onFocusChanged(boolean gainFocus, int direction,
+			Rect previouslyFocusedRect) {
+		if (!gainFocus) {
+			x = -1;
+			y = -1;
+		}
+	}
+
+	@Override
+	public boolean onInterceptTouchEvent(MotionEvent ev) {
+		// super.onInterceptTouchEvent(ev);
+		return true;
+	}
+
+	public Bitmap makeCircle() {
+		Bitmap output = Bitmap.createBitmap(
+				getWidth() - Utils.dpToPx(6, getResources()), getHeight()
+						- Utils.dpToPx(7, getResources()), Config.ARGB_8888);
+		Canvas canvas = new Canvas(output);
+		canvas.drawARGB(0, 0, 0, 0);
+		Paint paint = new Paint();
+		paint.setAntiAlias(true);
+		paint.setColor(rippleColor);
+		canvas.drawCircle(x, y, radius, paint);
+		if (radius > getHeight() / rippleSize)
+			radius += rippleSpeed;
+		if (radius >= getWidth()) {
+			x = -1;
+			y = -1;
+			radius = getHeight() / rippleSize;
+			if (onClickListener != null)
+				onClickListener.onClick(this);
+		}
+		return output;
+	}
+
+	/**
+	 * Make a dark color to ripple effect
+	 * 
+	 * @return
+	 */
+	protected int makePressColor() {
+		int r = (this.backgroundColor >> 16) & 0xFF;
+		int g = (this.backgroundColor >> 8) & 0xFF;
+		int b = (this.backgroundColor >> 0) & 0xFF;
+		r = (r - 30 < 0) ? 0 : r - 30;
+		g = (g - 30 < 0) ? 0 : g - 30;
+		b = (b - 30 < 0) ? 0 : b - 30;
+		return Color.rgb(r, g, b);
+	}
+
+	@Override
+	public void setOnClickListener(OnClickListener l) {
+		onClickListener = l;
+	}
+
+	// Set color of background
+	public void setBackgroundColor(int color) {
+		this.backgroundColor = color;
+		if (isEnabled())
+			beforeBackground = backgroundColor;
+		try {
+			LayerDrawable layer = (LayerDrawable) getBackground();
+			GradientDrawable shape = (GradientDrawable) layer
+					.findDrawableByLayerId(R.id.shape_bacground);
+			shape.setColor(backgroundColor);
+			rippleColor = makePressColor();
+		} catch (Exception ex) {
+			// Without bacground
+		}
+	}
+
+	abstract public TextView getTextView();
+
+	public void setRippleSpeed(float rippleSpeed) {
+		this.rippleSpeed = rippleSpeed;
+	}
+
+	public float getRippleSpeed() {
+		return this.rippleSpeed;
+	}
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFlat.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFlat.java
new file mode 100644
index 00000000..7497fd84
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFlat.java
@@ -0,0 +1,119 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+
+public class ButtonFlat extends Button {
+	
+	TextView textButton;
+
+	public ButtonFlat(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		
+	}
+	
+	protected void setDefaultProperties(){
+		minHeight = 36;
+		minWidth = 88;
+		rippleSize = 3;
+		// Min size
+		setMinimumHeight(Utils.dpToPx(minHeight, getResources()));
+		setMinimumWidth(Utils.dpToPx(minWidth, getResources()));
+		setBackgroundResource(R.drawable.background_transparent);
+	}
+
+	@Override
+	protected void setAttributes(AttributeSet attrs) {
+		// Set text button
+		String text = null;
+		int textResource = attrs.getAttributeResourceValue(ANDROIDXML,"text",-1);
+		if(textResource != -1){
+			text = getResources().getString(textResource);
+		}else{
+			text = attrs.getAttributeValue(ANDROIDXML,"text");
+		}
+		if(text != null){
+			textButton = new TextView(getContext());
+			textButton.setText(text.toUpperCase());
+			textButton.setTextColor(backgroundColor);
+			textButton.setTypeface(null, Typeface.BOLD);
+			RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
+			params.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+			textButton.setLayoutParams(params);
+			addView(textButton);
+		}
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,"background",-1);
+		if(bacgroundColor != -1){
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		}else{
+			// Color by hexadecimal
+			// Color by hexadecimal
+			background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+			if (background != -1)
+				setBackgroundColor(background);
+		}
+	}
+	
+	
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if (x != -1) {
+			
+			Paint paint = new Paint();
+			paint.setAntiAlias(true);
+			paint.setColor(makePressColor());
+			canvas.drawCircle(x, y, radius, paint);
+			if(radius > getHeight()/rippleSize)
+				radius += rippleSpeed;
+			if(radius >= getWidth()){
+				x = -1;
+				y = -1;
+				radius = getHeight()/rippleSize;
+				if(onClickListener != null)
+					onClickListener.onClick(this);
+			}
+		}		
+		invalidate();
+	}
+	
+	/**
+	 * Make a dark color to ripple effect
+	 * @return
+	 */
+	@Override
+	protected int makePressColor(){
+		return Color.parseColor("#88DDDDDD");	
+	}
+	
+	public void setText(String text){
+		textButton.setText(text.toUpperCase());
+	}
+	
+	// Set color of background
+	public void setBackgroundColor(int color){
+		backgroundColor = color;
+		if(isEnabled())
+			beforeBackground = backgroundColor;
+		textButton.setTextColor(color);
+	}
+
+	@Override
+	public TextView getTextView() {
+		return textButton;
+	}
+	
+	public String getText(){
+        	return textButton.getText().toString();
+ 	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFloat.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFloat.java
new file mode 100644
index 00000000..556d3742
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFloat.java
@@ -0,0 +1,183 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PorterDuff.Mode;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.view.animation.BounceInterpolator;
+import android.widget.ImageView;
+import android.widget.ImageView.ScaleType;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+import com.nineoldandroids.animation.ObjectAnimator;
+import com.nineoldandroids.view.ViewHelper;
+
+
+public class ButtonFloat extends Button{
+	
+	int sizeIcon = 24;
+	int sizeRadius = 28;
+	
+	
+	ImageView icon; // Icon of float button
+	Drawable drawableIcon;
+	
+	
+	
+	public ButtonFloat(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setBackgroundResource(R.drawable.background_button_float);
+		sizeRadius = 28;
+		setDefaultProperties();
+		icon = new ImageView(context);
+		icon.setAdjustViewBounds(true);
+		icon.setScaleType(ScaleType.CENTER_CROP);
+		if(drawableIcon != null) {
+			icon.setImageDrawable(drawableIcon);
+//			try {
+//				icon.setBackground(drawableIcon);
+//			} catch (NoSuchMethodError e) {
+//				icon.setBackgroundDrawable(drawableIcon);
+//			}
+		}
+		RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(Utils.dpToPx(sizeIcon, getResources()),Utils.dpToPx(sizeIcon, getResources()));
+		params.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+		icon.setLayoutParams(params);
+		addView(icon);		
+		
+	}
+	
+	protected void setDefaultProperties(){
+		rippleSpeed = Utils.dpToPx(2, getResources());
+		rippleSize = Utils.dpToPx(5, getResources());
+		setMinimumWidth(Utils.dpToPx(sizeRadius*2, getResources()));
+		setMinimumHeight(Utils.dpToPx(sizeRadius*2, getResources()));
+		super.background = R.drawable.background_button_float;
+//		super.setDefaultProperties();
+	}
+	
+	
+	// Set atributtes of XML to View
+	protected void setAttributes(AttributeSet attrs){
+		//Set background Color
+		// Color by resource
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,"background",-1);
+		if(bacgroundColor != -1){
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		}else{
+			// Color by hexadecimal
+			background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+			if (background != -1)
+				setBackgroundColor(background);
+		}
+		
+		// Set Ripple Color
+		// Color by resource
+		int rippleColor = attrs.getAttributeResourceValue(MATERIALDESIGNXML,
+				"rippleColor", -1);
+		if (rippleColor != -1) {
+			setRippleColor(getResources().getColor(rippleColor));
+		} else {
+			// Color by hexadecimal
+			int background = attrs.getAttributeIntValue(MATERIALDESIGNXML, "rippleColor", -1);
+			if (background != -1)
+				setRippleColor(background);
+			else
+				setRippleColor(makePressColor());
+		}
+		// Icon of button
+		int iconResource = attrs.getAttributeResourceValue(MATERIALDESIGNXML,"iconFloat",-1);
+		if(iconResource != -1)
+			drawableIcon = getResources().getDrawable(iconResource);
+		boolean animate = attrs.getAttributeBooleanValue(MATERIALDESIGNXML,"animate", false);
+		if(animate){
+			post(new Runnable() {
+				
+				@Override
+				public void run() {
+					float originalY = ViewHelper.getY(ButtonFloat.this)-Utils.dpToPx(24, getResources());
+					ViewHelper.setY(ButtonFloat.this,ViewHelper.getY(ButtonFloat.this)+getHeight()*3);
+					ObjectAnimator animator = ObjectAnimator.ofFloat(ButtonFloat.this, "y", originalY);
+					animator.setInterpolator(new BounceInterpolator());
+					animator.setDuration(1500);
+					animator.start();
+				}
+			});
+		}
+					
+	}
+		
+	Integer height;
+	Integer width;
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if (x != -1) {
+			Rect src = new Rect(0, 0, getWidth(), getHeight());
+			Rect dst = new Rect(Utils.dpToPx(1, getResources()), Utils.dpToPx(2, getResources()), getWidth()-Utils.dpToPx(1, getResources()), getHeight()-Utils.dpToPx(2, getResources()));
+			canvas.drawBitmap(cropCircle(makeCircle()), src, dst, null);
+		}
+		invalidate();
+	}
+	
+	
+	
+	
+	public ImageView getIcon() {
+		return icon;
+	}
+
+	public void setIcon(ImageView icon) {
+		this.icon = icon;
+	}
+
+	public Drawable getDrawableIcon() {
+		return drawableIcon;
+	}
+
+	public void setDrawableIcon(Drawable drawableIcon) {
+		this.drawableIcon = drawableIcon;
+		try {
+			icon.setBackground(drawableIcon);
+		} catch (NoSuchMethodError e) {
+			icon.setBackgroundDrawable(drawableIcon);
+		}
+	}
+
+	public Bitmap cropCircle(Bitmap bitmap) {
+	    Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
+	            bitmap.getHeight(), Config.ARGB_8888);
+	    Canvas canvas = new Canvas(output);
+
+	    final int color = 0xff424242;
+	    final Paint paint = new Paint();
+	    final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
+
+	    paint.setAntiAlias(true);
+	    canvas.drawARGB(0, 0, 0, 0);
+	    paint.setColor(color);
+	    canvas.drawCircle(bitmap.getWidth() / 2, bitmap.getHeight() / 2,
+	            bitmap.getWidth()/2, paint);
+	    paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
+	    canvas.drawBitmap(bitmap, rect, rect, paint);
+	    return output;
+	}
+
+	@Override
+	public TextView getTextView() {
+		return null;
+	}
+	
+	public void setRippleColor(int rippleColor) {
+		this.rippleColor = rippleColor;
+	}
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFloatSmall.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFloatSmall.java
new file mode 100644
index 00000000..9cd60651
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonFloatSmall.java
@@ -0,0 +1,33 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.widget.RelativeLayout;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+
+public class ButtonFloatSmall extends ButtonFloat {
+	
+	public ButtonFloatSmall(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		sizeRadius = 20;
+		sizeIcon = 20;
+		setDefaultProperties();
+		RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(Utils.dpToPx(sizeIcon, getResources()),Utils.dpToPx(sizeIcon, getResources()));
+		params.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+		icon.setLayoutParams(params);
+	}
+	
+	protected void setDefaultProperties(){
+		rippleSpeed = Utils.dpToPx(2, getResources());
+		rippleSize = 10;		
+		// Min size
+		setMinimumHeight(Utils.dpToPx(sizeRadius*2, getResources()));
+		setMinimumWidth(Utils.dpToPx(sizeRadius*2, getResources()));
+		// Background shape
+		setBackgroundResource(R.drawable.background_button_float);
+//		setBackgroundColor(backgroundColor);
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonIcon.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonIcon.java
new file mode 100644
index 00000000..65a4b78d
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonIcon.java
@@ -0,0 +1,57 @@
+package com.gc.materialdesign.views;
+
+import android.R;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.ColorDrawable;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+
+import com.gc.materialdesign.utils.Utils;
+
+public class ButtonIcon extends ButtonFloat {
+
+	public ButtonIcon(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setBackground(new ColorDrawable(getResources().getColor(R.color.transparent)));
+		rippleSpeed = Utils.dpToPx(2, getResources());
+		rippleSize = Utils.dpToPx(5, getResources());
+	}
+	
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		boolean returnBool = super.onTouchEvent(event);
+		if(x != -1){
+			x = getWidth() / 2;
+			y = getHeight() / 2;
+		}
+		return returnBool;
+	}
+	
+	@Override
+	protected void onDraw(Canvas canvas) {
+		if (x != -1) {
+			Paint paint = new Paint();
+			paint.setAntiAlias(true);
+			paint.setColor(makePressColor());
+			canvas.drawCircle(x, y, radius, paint);
+			if(radius > getHeight()/rippleSize)
+				radius += rippleSpeed;
+			if(radius >= getWidth() / 2 - rippleSpeed){
+				x = -1;
+				y = -1;
+				radius = getHeight()/rippleSize;
+				if(onClickListener != null)
+					onClickListener.onClick(this);
+			}
+		}
+		invalidate();
+	}
+	
+	@Override
+	protected int makePressColor() {
+		return backgroundColor;
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonRectangle.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonRectangle.java
new file mode 100644
index 00000000..a99a1ed8
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ButtonRectangle.java
@@ -0,0 +1,149 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+
+public class ButtonRectangle extends Button {
+	
+	TextView textButton;
+	
+	int paddingTop,paddingBottom, paddingLeft, paddingRight;
+	
+	
+	public ButtonRectangle(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setDefaultProperties();
+	}
+	@Override
+	protected void setDefaultProperties(){
+//		paddingBottom = Utils.dpToPx(16, getResources());
+//		paddingLeft = Utils.dpToPx(16, getResources());
+//		paddingRight = Utils.dpToPx(16, getResources());
+//		paddingTop = Utils.dpToPx(16, getResources());
+		super.minWidth = 80;
+		super.minHeight = 36;
+		super.background = R.drawable.background_button_rectangle;
+		super.setDefaultProperties();
+	}
+	
+	
+	// Set atributtes of XML to View
+	protected void setAttributes(AttributeSet attrs){
+		
+		//Set background Color
+		// Color by resource
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,"background",-1);
+		if(bacgroundColor != -1){
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		}else{
+			// Color by hexadecimal
+			// Color by hexadecimal
+			background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+			if (background != -1)
+				setBackgroundColor(background);
+		}
+		
+		// Set Padding
+		String value = attrs.getAttributeValue(ANDROIDXML,"padding");
+//		if(value != null){
+//			float padding = Float.parseFloat(value.replace("dip", ""));
+//			paddingBottom = Utils.dpToPx(padding, getResources());
+//			paddingLeft = Utils.dpToPx(padding, getResources());
+//			paddingRight = Utils.dpToPx(padding, getResources());
+//			paddingTop = Utils.dpToPx(padding, getResources());
+//		}else{
+//			value = attrs.getAttributeValue(ANDROIDXML,"paddingLeft");
+//			paddingLeft = (value == null) ? paddingLeft : (int) Float.parseFloat(value.replace("dip", ""));
+//			value = attrs.getAttributeValue(ANDROIDXML,"paddingTop");
+//			paddingTop = (value == null) ? paddingTop : (int) Float.parseFloat(value.replace("dip", ""));
+//			value = attrs.getAttributeValue(ANDROIDXML,"paddingRight");
+//			paddingRight = (value == null) ? paddingRight : (int) Float.parseFloat(value.replace("dip", ""));
+//			value = attrs.getAttributeValue(ANDROIDXML,"paddingBottom");
+//			paddingBottom = (value == null) ? paddingBottom : (int) Float.parseFloat(value.replace("dip", ""));
+//		}
+		
+		
+		// Set text button
+		String text = null;
+		int textResource = attrs.getAttributeResourceValue(ANDROIDXML,"text",-1);
+		if(textResource != -1){
+			text = getResources().getString(textResource);
+		}else{
+			text = attrs.getAttributeValue(ANDROIDXML,"text");
+		}
+		if(text != null){
+			textButton = new TextView(getContext());
+			textButton.setText(text);
+			textButton.setTextColor(Color.WHITE);
+			textButton.setTypeface(null, Typeface.BOLD);
+			RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
+			params.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+			params.setMargins(Utils.dpToPx(5, getResources()), Utils.dpToPx(5, getResources()), Utils.dpToPx(5, getResources()), Utils.dpToPx(5, getResources()));
+			textButton.setLayoutParams(params);			
+			addView(textButton);
+//					FrameLayout.LayoutParams params = (LayoutParams) textView.getLayoutParams();
+//					params.width = getWidth();
+//					params.gravity = Gravity.CENTER_HORIZONTAL;
+////					params.setMargins(paddingLeft, paddingTop, paddingRight, paddingRight);
+//					textView.setLayoutParams(params);
+			
+		}
+		
+		rippleSpeed = attrs.getAttributeFloatValue(MATERIALDESIGNXML,
+				"rippleSpeed", Utils.dpToPx(6, getResources()));
+	}
+	
+//	/**
+//	 * Center text in button
+//	 */
+//	boolean txtCenter = false;
+//	private void centrarTexto(){
+//		if((textButton.getWidth()+paddingLeft+paddingRight)>Utils.dpToPx(80, getResources()))
+//			setMinimumWidth(textButton.getWidth()+paddingLeft+paddingRight);
+//		setMinimumHeight(textButton.getHeight()+paddingBottom+paddingTop);
+//		textButton.setX(getWidth()/2-textButton.getWidth()/2 - paddingTop + paddingBottom);
+//		textButton.setY(getHeight()/2-textButton.getHeight()/2 - paddingLeft + paddingRight);
+//		txtCenter = true;
+//	}
+	
+	Integer height;
+	Integer width;
+	@Override
+	protected void onDraw(Canvas canvas) {
+//		if(!txtCenter)
+//		centrarTexto();
+		super.onDraw(canvas);
+		if (x != -1) {
+			Rect src = new Rect(0, 0, getWidth()-Utils.dpToPx(6, getResources()), getHeight()-Utils.dpToPx(7, getResources()));
+			Rect dst = new Rect(Utils.dpToPx(6, getResources()), Utils.dpToPx(6, getResources()), getWidth()-Utils.dpToPx(6, getResources()), getHeight()-Utils.dpToPx(7, getResources()));
+			canvas.drawBitmap(makeCircle(), src, dst, null);
+		}
+		invalidate();
+	}
+	
+	public void setText(String text){
+			textButton.setText(text);
+	}
+	
+	public void setTextColor(int color){
+		textButton.setTextColor(color);
+	}
+	@Override
+	public TextView getTextView() {
+		return textButton;
+	}
+
+	public String getText(){
+        	return textButton.getText().toString();
+ 	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Card.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Card.java
new file mode 100644
index 00000000..b60d2617
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Card.java
@@ -0,0 +1,54 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.util.AttributeSet;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+
+public class Card extends CustomView {
+	
+	TextView textButton;
+	
+	int paddingTop,paddingBottom, paddingLeft, paddingRight;
+	int backgroundColor = Color.parseColor("#FFFFFF");
+	
+	public Card(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setAttributes(attrs);
+	}
+	
+	
+	// Set atributtes of XML to View
+	protected void setAttributes(AttributeSet attrs){
+		
+		setBackgroundResource(R.drawable.background_button_rectangle);
+		//Set background Color
+		// Color by resource
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,"background",-1);
+		if(bacgroundColor != -1){
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		}else{
+			// Color by hexadecimal
+			String background = attrs.getAttributeValue(ANDROIDXML,"background");
+			if(background != null)
+				setBackgroundColor(Color.parseColor(background));
+			else
+				setBackgroundColor(this.backgroundColor);
+		}
+	}
+	
+	// Set color of background
+	public void setBackgroundColor(int color){
+		this.backgroundColor = color;
+		if(isEnabled())
+			beforeBackground = backgroundColor;
+		LayerDrawable layer = (LayerDrawable) getBackground();
+		GradientDrawable shape =  (GradientDrawable) layer.findDrawableByLayerId(R.id.shape_bacground);
+		shape.setColor(backgroundColor);
+	}
+	
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/CheckBox.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/CheckBox.java
new file mode 100644
index 00000000..b37e9e43
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/CheckBox.java
@@ -0,0 +1,229 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.RelativeLayout;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+
+public class CheckBox extends CustomView {
+
+	int backgroundColor = Color.parseColor("#4CAF50");
+
+	Check checkView;
+
+	boolean press = false;
+	boolean check = false;
+
+	OnCheckListener onCheckListener;
+
+	public CheckBox(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setAttributes(attrs);
+	}
+
+	// Set atributtes of XML to View
+	protected void setAttributes(AttributeSet attrs) {
+
+		setBackgroundResource(R.drawable.background_checkbox);
+
+		// Set size of view
+		setMinimumHeight(Utils.dpToPx(48, getResources()));
+		setMinimumWidth(Utils.dpToPx(48, getResources()));
+
+		// Set background Color
+		// Color by resource
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,
+				"background", -1);
+		if (bacgroundColor != -1) {
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		} else {
+			// Color by hexadecimal
+			// Color by hexadecimal
+			int background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+			if (background != -1)
+				setBackgroundColor(background);
+		}
+
+		boolean check = attrs.getAttributeBooleanValue(MATERIALDESIGNXML,
+				"check", false);
+		if (check) {
+			post(new Runnable() {
+
+				@Override
+				public void run() {
+					setChecked(true);
+					setPressed(false);
+					changeBackgroundColor(getResources().getColor(
+							android.R.color.transparent));
+				}
+			});
+		}
+
+		checkView = new Check(getContext());
+		RelativeLayout.LayoutParams params = new LayoutParams(Utils.dpToPx(20,
+				getResources()), Utils.dpToPx(20, getResources()));
+		params.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+		checkView.setLayoutParams(params);
+		addView(checkView);
+
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		if (isEnabled()) {
+			isLastTouch = true;
+			if (event.getAction() == MotionEvent.ACTION_DOWN) {
+				changeBackgroundColor((check) ? makePressColor() : Color
+						.parseColor("#446D6D6D"));
+			} else if (event.getAction() == MotionEvent.ACTION_UP) {
+				changeBackgroundColor(getResources().getColor(
+						android.R.color.transparent));
+				press = false;
+				if ((event.getX() <= getWidth() && event.getX() >= 0)
+						&& (event.getY() <= getHeight() && event.getY() >= 0)) {
+					isLastTouch = false;
+					check = !check;
+					if (onCheckListener != null)
+						onCheckListener.onCheck(check);
+					if (check) {
+						step = 0;
+					}
+					if (check)
+						checkView.changeBackground();
+				}
+			}
+		}
+		return true;
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if (press) {
+			Paint paint = new Paint();
+			paint.setAntiAlias(true);
+			paint.setColor((check) ? makePressColor() : Color
+					.parseColor("#446D6D6D"));
+			canvas.drawCircle(getWidth() / 2, getHeight() / 2, getWidth() / 2,
+					paint);
+		}
+		invalidate();
+	}
+
+	private void changeBackgroundColor(int color) {
+		LayerDrawable layer = (LayerDrawable) getBackground();
+		GradientDrawable shape = (GradientDrawable) layer
+				.findDrawableByLayerId(R.id.shape_bacground);
+		shape.setColor(color);
+	}
+
+	/**
+	 * Make a dark color to press effect
+	 * 
+	 * @return
+	 */
+	protected int makePressColor() {
+		int r = (this.backgroundColor >> 16) & 0xFF;
+		int g = (this.backgroundColor >> 8) & 0xFF;
+		int b = (this.backgroundColor >> 0) & 0xFF;
+		r = (r - 30 < 0) ? 0 : r - 30;
+		g = (g - 30 < 0) ? 0 : g - 30;
+		b = (b - 30 < 0) ? 0 : b - 30;
+		return Color.argb(70, r, g, b);
+	}
+
+	@Override
+	public void setBackgroundColor(int color) {
+		backgroundColor = color;
+		if (isEnabled())
+			beforeBackground = backgroundColor;
+		changeBackgroundColor(color);
+	}
+
+	public void setChecked(boolean check) {
+		this.check = check;
+		setPressed(false);
+		changeBackgroundColor(getResources().getColor(
+				android.R.color.transparent));
+		if (check) {
+			step = 0;
+		}
+		if (check)
+			checkView.changeBackground();
+
+	}
+
+	public boolean isCheck() {
+		return check;
+	}
+
+	// Indicate step in check animation
+	int step = 0;
+
+	// View that contains checkbox
+	class Check extends View {
+
+		Bitmap sprite;
+
+		public Check(Context context) {
+			super(context);
+			setBackgroundResource(R.drawable.background_checkbox_uncheck);
+			sprite = BitmapFactory.decodeResource(context.getResources(),
+					R.drawable.sprite_check);
+		}
+
+		public void changeBackground() {
+			if (check) {
+				setBackgroundResource(R.drawable.background_checkbox_check);
+				LayerDrawable layer = (LayerDrawable) getBackground();
+				GradientDrawable shape = (GradientDrawable) layer
+						.findDrawableByLayerId(R.id.shape_bacground);
+				shape.setColor(backgroundColor);
+			} else {
+				setBackgroundResource(R.drawable.background_checkbox_uncheck);
+			}
+		}
+
+		@Override
+		protected void onDraw(Canvas canvas) {
+			super.onDraw(canvas);
+
+			if (check) {
+				if (step < 11)
+					step++;
+			} else {
+				if (step >= 0)
+					step--;
+				if (step == -1)
+					changeBackground();
+			}
+			Rect src = new Rect(40 * step, 0, (40 * step) + 40, 40);
+			Rect dst = new Rect(0, 0, this.getWidth() - 2, this.getHeight());
+			canvas.drawBitmap(sprite, src, dst, null);
+			invalidate();
+
+		}
+
+	}
+
+	public void setOncheckListener(OnCheckListener onCheckListener) {
+		this.onCheckListener = onCheckListener;
+	}
+
+	public interface OnCheckListener {
+		public void onCheck(boolean check);
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/CustomView.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/CustomView.java
new file mode 100644
index 00000000..107cf7ae
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/CustomView.java
@@ -0,0 +1,32 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.util.AttributeSet;
+import android.widget.RelativeLayout;
+
+public class CustomView extends RelativeLayout{
+	
+	
+	final static String MATERIALDESIGNXML = "http://schemas.android.com/apk/res-auto";
+	final static String ANDROIDXML = "http://schemas.android.com/apk/res/android";
+	
+	final int disabledBackgroundColor = Color.parseColor("#E2E2E2");
+	int beforeBackground;
+	
+	// Indicate if user touched this view the last time
+	public boolean isLastTouch = false;
+
+	public CustomView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+	
+	@Override
+	public void setEnabled(boolean enabled) {
+		super.setEnabled(enabled);
+		if(enabled)
+			setBackgroundColor(beforeBackground);
+		else
+			setBackgroundColor(disabledBackgroundColor);
+	}
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/LayoutRipple.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/LayoutRipple.java
new file mode 100644
index 00000000..98c3bf41
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/LayoutRipple.java
@@ -0,0 +1,198 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+
+public class LayoutRipple extends CustomView {
+
+	int background;
+	float rippleSpeed = 10f;
+	int rippleSize = 3;
+
+	OnClickListener onClickListener;
+	int backgroundColor = Color.parseColor("#FFFFFF");
+
+	Integer rippleColor;
+	Float xRippleOrigin;
+	Float yRippleOrigin;
+
+	public LayoutRipple(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setAttributes(attrs);
+	}
+
+	// Set atributtes of XML to View
+	protected void setAttributes(AttributeSet attrs) {
+
+		// Set background Color
+		// Color by resource
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,
+				"background", -1);
+		if (bacgroundColor != -1) {
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		} else {
+			// Color by hexadecimal
+			background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+			if (background != -1)
+				setBackgroundColor(background);
+			else
+				setBackgroundColor(this.backgroundColor);
+		}
+		// Set Ripple Color
+		// Color by resource
+		int rippleColor = attrs.getAttributeResourceValue(MATERIALDESIGNXML,
+				"rippleColor", -1);
+		if (rippleColor != -1) {
+			setRippleColor(getResources().getColor(rippleColor));
+		} else {
+			// Color by hexadecimal
+			int background = attrs.getAttributeIntValue(MATERIALDESIGNXML, "rippleColor", -1);
+			if (background != -1)
+				setRippleColor(background);
+			else
+				setRippleColor(makePressColor());
+		}
+		
+		rippleSpeed = attrs.getAttributeFloatValue(MATERIALDESIGNXML,
+				"rippleSpeed", 20f);
+	}
+
+	// Set color of background
+	public void setBackgroundColor(int color) {
+		this.backgroundColor = color;
+		if (isEnabled())
+			beforeBackground = backgroundColor;
+		super.setBackgroundColor(color);
+	}
+
+	public void setRippleSpeed(int rippleSpeed) {
+		this.rippleSpeed = rippleSpeed;
+	}
+
+	// ### RIPPLE EFFECT ###
+
+	float x = -1, y = -1;
+	float radius = -1;
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		if (isEnabled()) {
+			isLastTouch = true;
+			if (event.getAction() == MotionEvent.ACTION_DOWN) {
+				radius = getHeight() / rippleSize;
+				x = event.getX();
+				y = event.getY();
+			} else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+				radius = getHeight() / rippleSize;
+				x = event.getX();
+				y = event.getY();
+				if (!((event.getX() <= getWidth() && event.getX() >= 0) && (event
+						.getY() <= getHeight() && event.getY() >= 0))) {
+					isLastTouch = false;
+					x = -1;
+					y = -1;
+				}
+			} else if (event.getAction() == MotionEvent.ACTION_UP) {
+				if ((event.getX() <= getWidth() && event.getX() >= 0)
+						&& (event.getY() <= getHeight() && event.getY() >= 0)) {
+					radius++;
+				} else {
+					isLastTouch = false;
+					x = -1;
+					y = -1;
+				}
+			}
+		}
+		return true;
+	}
+
+	@Override
+	protected void onFocusChanged(boolean gainFocus, int direction,
+			Rect previouslyFocusedRect) {
+		if (!gainFocus) {
+			x = -1;
+			y = -1;
+		}
+	}
+
+	@Override
+	public boolean onInterceptTouchEvent(MotionEvent ev) {
+		// super.onInterceptTouchEvent(ev);
+		return true;
+	}
+
+	public Bitmap makeCircle() {
+		Bitmap output = Bitmap.createBitmap(getWidth(), getHeight(),
+				Config.ARGB_8888);
+		Canvas canvas = new Canvas(output);
+		canvas.drawARGB(0, 0, 0, 0);
+		Paint paint = new Paint();
+		paint.setAntiAlias(true);
+		if (rippleColor == null)
+			rippleColor = makePressColor();
+		paint.setColor(rippleColor);
+		x = (xRippleOrigin == null) ? x : xRippleOrigin;
+		y = (yRippleOrigin == null) ? y : yRippleOrigin;
+		canvas.drawCircle(x, y, radius, paint);
+		if (radius > getHeight() / rippleSize)
+			radius += rippleSpeed;
+		if (radius >= getWidth()) {
+			x = -1;
+			y = -1;
+			radius = getHeight() / rippleSize;
+			if (onClickListener != null)
+				onClickListener.onClick(this);
+		}
+		return output;
+	}
+
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if (x != -1) {
+			Rect src = new Rect(0, 0, getWidth(), getHeight());
+			Rect dst = new Rect(0, 0, getWidth(), getHeight());
+			canvas.drawBitmap(makeCircle(), src, dst, null);
+		}
+		invalidate();
+	}
+
+	/**
+	 * Make a dark color to ripple effect
+	 * 
+	 * @return
+	 */
+	protected int makePressColor() {
+		int r = (this.backgroundColor >> 16) & 0xFF;
+		int g = (this.backgroundColor >> 8) & 0xFF;
+		int b = (this.backgroundColor >> 0) & 0xFF;
+		r = (r - 30 < 0) ? 0 : r - 30;
+		g = (g - 30 < 0) ? 0 : g - 30;
+		b = (b - 30 < 0) ? 0 : b - 30;
+		return Color.rgb(r, g, b);
+	}
+
+	@Override
+	public void setOnClickListener(OnClickListener l) {
+		onClickListener = l;
+	}
+
+	public void setRippleColor(int rippleColor) {
+		this.rippleColor = rippleColor;
+	}
+
+	public void setxRippleOrigin(Float xRippleOrigin) {
+		this.xRippleOrigin = xRippleOrigin;
+	}
+
+	public void setyRippleOrigin(Float yRippleOrigin) {
+		this.yRippleOrigin = yRippleOrigin;
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarCircularIndetermininate.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarCircularIndetermininate.java
new file mode 100644
index 00000000..f7cad058
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarCircularIndetermininate.java
@@ -0,0 +1,171 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.RectF;
+import android.util.AttributeSet;
+
+import com.gc.materialdesign.utils.Utils;
+
+public class ProgressBarCircularIndetermininate extends CustomView {
+	
+	
+	final static String ANDROIDXML = "http://schemas.android.com/apk/res/android";
+	
+	int backgroundColor = Color.parseColor("#1E88E5");
+	
+
+	public ProgressBarCircularIndetermininate(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setAttributes(attrs);
+		
+	}
+	
+	// Set atributtes of XML to View
+		protected void setAttributes(AttributeSet attrs){
+			
+			setMinimumHeight(Utils.dpToPx(32, getResources()));
+			setMinimumWidth(Utils.dpToPx(32, getResources()));
+			
+			//Set background Color
+			// Color by resource
+			int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,"background",-1);
+			if(bacgroundColor != -1){
+				setBackgroundColor(getResources().getColor(bacgroundColor));
+			}else{
+				// Color by hexadecimal
+				int background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+				if (background != -1)
+					setBackgroundColor(background);
+				else
+					setBackgroundColor(Color.parseColor("#1E88E5"));
+			}
+			
+			setMinimumHeight(Utils.dpToPx(3, getResources()));
+			
+						
+		}
+	
+	/**
+	 * Make a dark color to ripple effect
+	 * @return
+	 */
+	protected int makePressColor(){
+		int r = (this.backgroundColor >> 16) & 0xFF;
+		int g = (this.backgroundColor >> 8) & 0xFF;
+		int b = (this.backgroundColor >> 0) & 0xFF;
+//		r = (r+90 > 245) ? 245 : r+90;
+//		g = (g+90 > 245) ? 245 : g+90;
+//		b = (b+90 > 245) ? 245 : b+90;
+		return Color.argb(128,r, g, b);		
+	}
+	
+	
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if(firstAnimationOver == false)
+			drawFirstAnimation(canvas);
+		if(cont > 0)
+			drawSecondAnimation(canvas);
+		invalidate();
+		
+	}
+	
+	float radius1 = 0;
+	float radius2 = 0;
+	int cont = 0;
+	boolean firstAnimationOver = false;
+	/**
+	 * Draw first animation of view
+	 * @param canvas
+	 */
+	private void drawFirstAnimation(Canvas canvas){
+		if(radius1 < getWidth()/2){
+			Paint paint = new Paint();
+			paint.setAntiAlias(true);
+			paint.setColor(makePressColor());
+			radius1 = (radius1 >= getWidth()/2)? (float)getWidth()/2 : radius1+1;
+			canvas.drawCircle(getWidth()/2, getHeight()/2, radius1, paint);
+		}else{
+			Bitmap bitmap = Bitmap.createBitmap(canvas.getWidth(), canvas.getHeight(), Bitmap.Config.ARGB_8888);
+		    Canvas temp = new Canvas(bitmap);
+		    Paint paint = new Paint();
+			paint.setAntiAlias(true);
+			paint.setColor(makePressColor());
+			temp.drawCircle(getWidth()/2, getHeight()/2, getHeight()/2, paint);
+		    Paint transparentPaint = new Paint();
+		    transparentPaint.setAntiAlias(true);
+		    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
+		    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
+		    if(cont >= 50){
+		    	radius2 = (radius2 >= getWidth()/2)? (float)getWidth()/2 : radius2+1;
+		    }else{
+		    	radius2 = (radius2 >= getWidth()/2-Utils.dpToPx(4, getResources()))? (float)getWidth()/2-Utils.dpToPx(4, getResources()) : radius2+1;
+		    }
+		    temp.drawCircle(getWidth()/2, getHeight()/2, radius2, transparentPaint);
+		    canvas.drawBitmap(bitmap, 0, 0, new Paint());
+		    if(radius2 >= getWidth()/2-Utils.dpToPx(4, getResources()))
+		    	cont++;
+		    if(radius2 >= getWidth()/2)
+		    	firstAnimationOver = true;
+		}
+	}
+	
+	int arcD = 1;
+	int arcO = 0;
+	float rotateAngle = 0;
+	int limite = 0;
+	/**
+	 * Draw second animation of view
+	 * @param canvas
+	 */
+	private void drawSecondAnimation(Canvas canvas){
+		if(arcO == limite)
+			arcD+=6;
+		if(arcD >= 290 || arcO > limite){
+			arcO+=6;
+			arcD-=6;
+		}
+		if(arcO > limite + 290){
+			limite = arcO;
+			arcO = limite;
+			arcD = 1;
+		}
+		rotateAngle += 4;
+		canvas.rotate(rotateAngle,getWidth()/2, getHeight()/2);
+		
+	    Bitmap bitmap = Bitmap.createBitmap(canvas.getWidth(), canvas.getHeight(), Bitmap.Config.ARGB_8888);
+	    Canvas temp = new Canvas(bitmap);
+	    Paint paint = new Paint();
+		paint.setAntiAlias(true);
+		paint.setColor(backgroundColor);
+//		temp.drawARGB(0, 0, 0, 255);
+		temp.drawArc(new RectF(0, 0, getWidth(), getHeight()), arcO, arcD, true, paint);
+	    Paint transparentPaint = new Paint();
+	    transparentPaint.setAntiAlias(true);
+	    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));
+	    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
+	    temp.drawCircle(getWidth()/2, getHeight()/2, (getWidth()/2)-Utils.dpToPx(4, getResources()), transparentPaint);
+
+	    canvas.drawBitmap(bitmap, 0, 0, new Paint());
+	}
+	
+	
+	
+	
+	
+	// Set color of background
+	public void setBackgroundColor(int color){
+		super.setBackgroundColor(getResources().getColor(android.R.color.transparent));
+		if(isEnabled())
+			beforeBackground = backgroundColor;
+		this.backgroundColor = color;
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarDetermininate.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarDetermininate.java
new file mode 100644
index 00000000..1747368d
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarDetermininate.java
@@ -0,0 +1,136 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.RelativeLayout;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+
+public class ProgressBarDetermininate extends CustomView {
+	
+	
+	int max = 100;
+	int min = 0;
+	int progress = 0;
+	
+	int backgroundColor = Color.parseColor("#1E88E5");
+	
+	View progressView;
+
+	public ProgressBarDetermininate(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setAttributes(attrs);
+	}
+	
+	// Set atributtes of XML to View
+		protected void setAttributes(AttributeSet attrs){
+			
+			progressView = new View(getContext());
+			RelativeLayout.LayoutParams params = new LayoutParams(1,1);
+			progressView.setLayoutParams(params);
+			progressView.setBackgroundResource(R.drawable.background_progress);
+			addView(progressView);
+			
+			//Set background Color
+			// Color by resource
+			int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,"background",-1);
+			if(bacgroundColor != -1){
+				setBackgroundColor(getResources().getColor(bacgroundColor));
+			}else{
+				// Color by hexadecimal
+				int background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+				if (background != -1)
+					setBackgroundColor(background);
+				else
+					setBackgroundColor(Color.parseColor("#1E88E5"));
+			}
+			
+			min = attrs.getAttributeIntValue(MATERIALDESIGNXML,"min", 0);
+			max = attrs.getAttributeIntValue(MATERIALDESIGNXML,"max", 100);
+			progress = attrs.getAttributeIntValue(MATERIALDESIGNXML,"progress", min);
+			
+			setMinimumHeight(Utils.dpToPx(3, getResources()));
+			
+			post(new Runnable() {
+				
+				@Override
+				public void run() {
+					RelativeLayout.LayoutParams params = (LayoutParams) progressView.getLayoutParams();
+					params.height = getHeight();
+					progressView.setLayoutParams(params);
+				}
+			});
+						
+		}
+	
+	/**
+	 * Make a dark color to ripple effect
+	 * @return
+	 */
+	protected int makePressColor(){
+		int r = (this.backgroundColor >> 16) & 0xFF;
+		int g = (this.backgroundColor >> 8) & 0xFF;
+		int b = (this.backgroundColor >> 0) & 0xFF;
+		return Color.argb(128,r, g, b);		
+	}
+	
+	// SETTERS
+	
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if(pendindProgress!=-1)
+			setProgress(pendindProgress);
+	}
+	
+	public void setMax(int max){
+		this.max = max;
+	}
+	
+	public void setMin(int min){
+		this.min = min;
+	}
+	
+	int pendindProgress = -1;
+	public void setProgress(int progress){
+		if(getWidth() == 0){
+			pendindProgress = progress;
+		}else{
+			this.progress = progress;
+			if(progress > max)
+				progress = max;
+			if(progress < min)
+				progress = min;
+			int totalWidth = max-min;
+			double progressPercent = (double)progress/(double)totalWidth;
+			int progressWidth =(int) (getWidth()*progressPercent);
+			RelativeLayout.LayoutParams params = (LayoutParams) progressView.getLayoutParams();
+			params.width = progressWidth;
+			params.height = getHeight();
+			progressView.setLayoutParams(params);
+			pendindProgress = -1;
+		}
+	}
+	
+	public int getProgress(){
+		return progress;
+	}
+	
+	// Set color of background
+	public void setBackgroundColor(int color){
+		this.backgroundColor = color;
+		if(isEnabled())
+			beforeBackground = backgroundColor;
+		LayerDrawable layer = (LayerDrawable) progressView.getBackground();
+		GradientDrawable shape =  (GradientDrawable) layer.findDrawableByLayerId(R.id.shape_bacground);
+		shape.setColor(color);
+		super.setBackgroundColor(makePressColor());
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarIndeterminate.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarIndeterminate.java
new file mode 100644
index 00000000..bae7e910
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarIndeterminate.java
@@ -0,0 +1,57 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+
+import com.gc.materialdesign.R;
+import com.nineoldandroids.animation.Animator;
+import com.nineoldandroids.animation.Animator.AnimatorListener;
+import com.nineoldandroids.animation.ObjectAnimator;
+import com.nineoldandroids.view.ViewHelper;
+
+public class ProgressBarIndeterminate extends ProgressBarDetermininate {
+
+	public ProgressBarIndeterminate(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		post(new Runnable() {
+			
+			@Override
+			public void run() {
+				// Make progress animation
+				
+				setProgress(60);
+				Animation anim = AnimationUtils.loadAnimation(getContext(), R.anim.progress_indeterminate_animation);
+				progressView.startAnimation(anim);
+				final ObjectAnimator anim2 = ObjectAnimator.ofFloat(progressView, "x", getWidth());
+				anim2.setDuration(1200);
+				anim2.addListener(new AnimatorListener() {
+					
+					int cont = 1;
+					int suma = 1;
+					int duration = 1200;
+					
+					public void onAnimationEnd(Animator arg0) {
+						// Repeat animation
+						ViewHelper.setX(progressView,-progressView.getWidth()/2);
+						cont += suma;
+						ObjectAnimator anim2Repeat = ObjectAnimator.ofFloat(progressView, "x", getWidth());
+						anim2Repeat.setDuration(duration/cont);
+						anim2Repeat.addListener(this);
+						anim2Repeat.start();
+						if(cont == 3 || cont == 1) suma *=-1;
+						
+					}
+					
+					public void onAnimationStart(Animator arg0) {}
+					public void onAnimationRepeat(Animator arg0) {}
+					public void onAnimationCancel(Animator arg0) {}
+				});
+						
+				anim2.start();
+			}
+		});
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarIndeterminateDeterminate.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarIndeterminateDeterminate.java
new file mode 100644
index 00000000..1618bd14
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ProgressBarIndeterminateDeterminate.java
@@ -0,0 +1,79 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.util.AttributeSet;
+
+import com.nineoldandroids.animation.Animator;
+import com.nineoldandroids.animation.Animator.AnimatorListener;
+import com.nineoldandroids.animation.ObjectAnimator;
+import com.nineoldandroids.view.ViewHelper;
+
+public class ProgressBarIndeterminateDeterminate extends ProgressBarDetermininate {
+	
+	boolean firstProgress = true;
+	boolean runAnimation = true;
+	ObjectAnimator animation;
+	
+	
+
+	public ProgressBarIndeterminateDeterminate(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		post(new Runnable() {
+			
+			@Override
+			public void run() {
+				// Make progress animation
+				
+				setProgress(60);
+				ViewHelper.setX(progressView,getWidth()+progressView.getWidth()/2);
+				animation = ObjectAnimator.ofFloat(progressView, "x", -progressView.getWidth()/2);
+				animation.setDuration(1200);
+				animation.addListener(new AnimatorListener() {
+					
+					int cont = 1;
+					int suma = 1;
+					int duration = 1200;
+					
+					public void onAnimationEnd(Animator arg0) {
+						// Repeat animation
+						if(runAnimation){
+						ViewHelper.setX(progressView,getWidth()+progressView.getWidth()/2);
+						cont += suma;
+						animation = ObjectAnimator.ofFloat(progressView, "x", -progressView.getWidth()/2);
+						animation.setDuration(duration/cont);
+						animation.addListener(this);
+						animation.start();
+						if(cont == 3 || cont == 1) suma *=-1;
+						}
+						
+					}
+					
+					public void onAnimationStart(Animator arg0) {}
+					public void onAnimationRepeat(Animator arg0) {}
+					public void onAnimationCancel(Animator arg0) {}
+				});
+				animation.start();
+			}
+		});
+	}
+	
+	@Override
+	public void setProgress(int progress) {
+		if(firstProgress){
+			firstProgress = false;
+		}else{
+			stopIndeterminate();
+		}
+		super.setProgress(progress);
+	}
+	
+	/**
+	 * Stop indeterminate animation to convert view in determinate progress bar
+	 */
+	private void stopIndeterminate(){
+		animation.cancel();
+		ViewHelper.setX(progressView,0);
+		runAnimation = false;
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ScrollView.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ScrollView.java
new file mode 100644
index 00000000..f4d087fd
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/ScrollView.java
@@ -0,0 +1,38 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.ViewGroup;
+
+
+public class ScrollView extends android.widget.ScrollView {
+	
+	/*
+	 * This class avoid problems in scrollviews with elements in library
+	 * Use it if you want use a ScrollView in your App
+	 */
+
+	public ScrollView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+	
+	@Override
+	public boolean onTouchEvent(MotionEvent ev) {
+//		if(!onInterceptTouchEvent(ev)){
+	    	for(int i = 0; i < ((ViewGroup)getChildAt(0)).getChildCount(); i++){
+	    		try {
+					CustomView child =(CustomView) ((ViewGroup)getChildAt(0)).getChildAt(i);
+					if(child.isLastTouch){
+						child.onTouchEvent(ev);
+						return true;
+					}
+				} catch (ClassCastException e) {
+				}
+	        }
+//	    }
+	    return super.onTouchEvent(ev);
+	}
+	
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Slider.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Slider.java
new file mode 100644
index 00000000..c70f6390
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Slider.java
@@ -0,0 +1,438 @@
+package com.gc.materialdesign.views;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.Window;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+import com.nineoldandroids.view.ViewHelper;
+
+public class Slider extends CustomView {
+
+	// Event when slider change value
+	public interface OnValueChangedListener {
+		public void onValueChanged(int value);
+	}
+
+	int backgroundColor = Color.parseColor("#4CAF50");
+
+	Ball ball;
+	NumberIndicator numberIndicator;
+
+	boolean showNumberIndicator = false;
+	boolean press = false;
+
+	int value = 0;
+	int max = 100;
+	int min = 0;
+
+	OnValueChangedListener onValueChangedListener;
+
+	public Slider(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setAttributes(attrs);
+	}
+
+	// Set atributtes of XML to View
+	protected void setAttributes(AttributeSet attrs) {
+
+		setBackgroundResource(R.drawable.background_transparent);
+
+		// Set size of view
+		setMinimumHeight(Utils.dpToPx(48, getResources()));
+		setMinimumWidth(Utils.dpToPx(80, getResources()));
+
+		// Set background Color
+		// Color by resource
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,
+				"background", -1);
+		if (bacgroundColor != -1) {
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		} else {
+			// Color by hexadecimal
+			int background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+			if (background != -1)
+				setBackgroundColor(background);
+		}
+
+		showNumberIndicator = attrs.getAttributeBooleanValue(MATERIALDESIGNXML,
+				"showNumberIndicator", false);
+		min = attrs.getAttributeIntValue(MATERIALDESIGNXML, "min", 0);
+		max = attrs.getAttributeIntValue(MATERIALDESIGNXML, "max", 0);
+		value = attrs.getAttributeIntValue(MATERIALDESIGNXML, "value", min);
+
+		ball = new Ball(getContext());
+		RelativeLayout.LayoutParams params = new LayoutParams(Utils.dpToPx(20,
+				getResources()), Utils.dpToPx(20, getResources()));
+		params.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);
+		ball.setLayoutParams(params);
+		addView(ball);
+
+		// Set if slider content number indicator
+		// TODO
+		if (showNumberIndicator) {
+			numberIndicator = new NumberIndicator(getContext());
+		}
+
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if (!placedBall)
+			placeBall();
+
+		if (value == min) {
+			// Crop line to transparent effect
+			Bitmap bitmap = Bitmap.createBitmap(canvas.getWidth(),
+					canvas.getHeight(), Bitmap.Config.ARGB_8888);
+			Canvas temp = new Canvas(bitmap);
+			Paint paint = new Paint();
+			paint.setColor(Color.parseColor("#B0B0B0"));
+			paint.setStrokeWidth(Utils.dpToPx(2, getResources()));
+			temp.drawLine(getHeight() / 2, getHeight() / 2, getWidth()
+					- getHeight() / 2, getHeight() / 2, paint);
+			Paint transparentPaint = new Paint();
+			transparentPaint.setColor(getResources().getColor(
+					android.R.color.transparent));
+			transparentPaint.setXfermode(new PorterDuffXfermode(
+					PorterDuff.Mode.CLEAR));
+			temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,
+					ViewHelper.getY(ball) + ball.getHeight() / 2,
+					ball.getWidth() / 2, transparentPaint);
+
+			canvas.drawBitmap(bitmap, 0, 0, new Paint());
+		} else {
+			Paint paint = new Paint();
+			paint.setColor(Color.parseColor("#B0B0B0"));
+			paint.setStrokeWidth(Utils.dpToPx(2, getResources()));
+			canvas.drawLine(getHeight() / 2, getHeight() / 2, getWidth()
+					- getHeight() / 2, getHeight() / 2, paint);
+			paint.setColor(backgroundColor);
+			float division = (ball.xFin - ball.xIni) / (max-min);
+			int value = this.value - min;
+			canvas.drawLine(getHeight() / 2, getHeight() / 2, value * division
+					+ getHeight() / 2, getHeight() / 2, paint);
+
+		}
+
+		if (press && !showNumberIndicator) {
+			Paint paint = new Paint();
+			paint.setColor(backgroundColor);
+			paint.setAntiAlias(true);
+			canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,
+					getHeight() / 2, getHeight() / 3, paint);
+		}
+		invalidate();
+
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		isLastTouch = true;
+		if (isEnabled()) {
+			if (event.getAction() == MotionEvent.ACTION_DOWN
+					|| event.getAction() == MotionEvent.ACTION_MOVE) {
+				if (numberIndicator != null
+						&& numberIndicator.isShowing() == false)
+					numberIndicator.show();
+				if ((event.getX() <= getWidth() && event.getX() >= 0)) {
+					press = true;
+					// calculate value
+					int newValue = 0;
+					float division = (ball.xFin - ball.xIni) / (max-min);
+					if (event.getX() > ball.xFin) {
+						newValue = max;
+					} else if (event.getX() < ball.xIni) {
+						newValue = min;
+					} else {
+						newValue = min + (int) ((event.getX() - ball.xIni) / division);
+					}
+					if (value != newValue) {
+						value = newValue;
+						if (onValueChangedListener != null)
+							onValueChangedListener.onValueChanged(newValue);
+					}
+					// move ball indicator
+					float x = event.getX();
+					x = (x < ball.xIni) ? ball.xIni : x;
+					x = (x > ball.xFin) ? ball.xFin : x;
+					ViewHelper.setX(ball, x);
+					ball.changeBackground();
+
+					// If slider has number indicator
+					if (numberIndicator != null) {
+						// move number indicator
+						numberIndicator.indicator.x = x;
+						numberIndicator.indicator.finalY = Utils
+								.getRelativeTop(this) - getHeight() / 2;
+						numberIndicator.indicator.finalSize = getHeight() / 2;
+						numberIndicator.numberIndicator.setText("");
+					}
+
+				} else {
+					press = false;
+					isLastTouch = false;
+					if (numberIndicator != null)
+						numberIndicator.dismiss();
+
+				}
+
+			} else if (event.getAction() == MotionEvent.ACTION_UP) {
+				if (numberIndicator != null)
+					numberIndicator.dismiss();
+				isLastTouch = false;
+				press = false;
+				if ((event.getX() <= getWidth() && event.getX() >= 0)) {
+
+				}
+			}
+		}
+		return true;
+	}
+
+	/**
+	 * Make a dark color to press effect
+	 * 
+	 * @return
+	 */
+	protected int makePressColor() {
+		int r = (this.backgroundColor >> 16) & 0xFF;
+		int g = (this.backgroundColor >> 8) & 0xFF;
+		int b = (this.backgroundColor >> 0) & 0xFF;
+		r = (r - 30 < 0) ? 0 : r - 30;
+		g = (g - 30 < 0) ? 0 : g - 30;
+		b = (b - 30 < 0) ? 0 : b - 30;
+		return Color.argb(70, r, g, b);
+	}
+
+	private void placeBall() {
+		ViewHelper.setX(ball, getHeight() / 2 - ball.getWidth() / 2);
+		ball.xIni = ViewHelper.getX(ball);
+		ball.xFin = getWidth() - getHeight() / 2 - ball.getWidth() / 2;
+		ball.xCen = getWidth() / 2 - ball.getWidth() / 2;
+		placedBall = true;
+	}
+
+	// GETERS & SETTERS
+
+	public OnValueChangedListener getOnValueChangedListener() {
+		return onValueChangedListener;
+	}
+
+	public void setOnValueChangedListener(
+			OnValueChangedListener onValueChangedListener) {
+		this.onValueChangedListener = onValueChangedListener;
+	}
+
+	public int getValue() {
+		return value;
+	}
+
+	public void setValue(final int value) {
+		if (placedBall == false)
+			post(new Runnable() {
+
+				@Override
+				public void run() {
+					setValue(value);
+				}
+			});
+		else {
+			this.value = value;
+			float division = (ball.xFin - ball.xIni) / max;
+			ViewHelper.setX(ball,
+					value * division + getHeight() / 2 - ball.getWidth() / 2);
+			ball.changeBackground();
+		}
+
+	}
+
+	public int getMax() {
+		return max;
+	}
+
+	public void setMax(int max) {
+		this.max = max;
+	}
+
+	public int getMin() {
+		return min;
+	}
+
+	public void setMin(int min) {
+		this.min = min;
+	}
+
+	public boolean isShowNumberIndicator() {
+		return showNumberIndicator;
+	}
+
+	public void setShowNumberIndicator(boolean showNumberIndicator) {
+		this.showNumberIndicator = showNumberIndicator;
+		numberIndicator = (showNumberIndicator) ? new NumberIndicator(
+				getContext()) : null;
+	}
+
+	@Override
+	public void setBackgroundColor(int color) {
+		backgroundColor = color;
+		if (isEnabled())
+			beforeBackground = backgroundColor;
+	}
+
+	boolean placedBall = false;
+
+	class Ball extends View {
+
+		float xIni, xFin, xCen;
+
+		public Ball(Context context) {
+			super(context);
+			setBackgroundResource(R.drawable.background_switch_ball_uncheck);
+		}
+
+		public void changeBackground() {
+			if (value != min) {
+				setBackgroundResource(R.drawable.background_checkbox);
+				LayerDrawable layer = (LayerDrawable) getBackground();
+				GradientDrawable shape = (GradientDrawable) layer
+						.findDrawableByLayerId(R.id.shape_bacground);
+				shape.setColor(backgroundColor);
+			} else {
+				setBackgroundResource(R.drawable.background_switch_ball_uncheck);
+			}
+		}
+
+	}
+
+	// Slider Number Indicator
+
+	class NumberIndicator extends Dialog {
+
+		Indicator indicator;
+		TextView numberIndicator;
+
+		public NumberIndicator(Context context) {
+			super(context, android.R.style.Theme_Translucent);
+		}
+
+		@Override
+		protected void onCreate(Bundle savedInstanceState) {
+			requestWindowFeature(Window.FEATURE_NO_TITLE);
+			super.onCreate(savedInstanceState);
+			setContentView(R.layout.number_indicator_spinner);
+			setCanceledOnTouchOutside(false);
+
+			RelativeLayout content = (RelativeLayout) this
+					.findViewById(R.id.number_indicator_spinner_content);
+			indicator = new Indicator(this.getContext());
+			content.addView(indicator);
+
+			numberIndicator = new TextView(getContext());
+			numberIndicator.setTextColor(Color.WHITE);
+			numberIndicator.setGravity(Gravity.CENTER);
+			content.addView(numberIndicator);
+
+			indicator.setLayoutParams(new RelativeLayout.LayoutParams(
+					RelativeLayout.LayoutParams.FILL_PARENT,
+					RelativeLayout.LayoutParams.FILL_PARENT));
+		}
+
+		@Override
+		public void dismiss() {
+			super.dismiss();
+			indicator.y = 0;
+			indicator.size = 0;
+			indicator.animate = true;
+		}
+
+		@Override
+		public void onBackPressed() {
+		}
+
+	}
+
+	class Indicator extends RelativeLayout {
+
+		// Position of number indicator
+		float x = 0;
+		float y = 0;
+		// Size of number indicator
+		float size = 0;
+
+		// Final y position after animation
+		float finalY = 0;
+		// Final size after animation
+		float finalSize = 0;
+
+		boolean animate = true;
+
+		boolean numberIndicatorResize = false;
+
+		public Indicator(Context context) {
+			super(context);
+			setBackgroundColor(getResources().getColor(
+					android.R.color.transparent));
+		}
+
+		@Override
+		protected void onDraw(Canvas canvas) {
+			super.onDraw(canvas);
+
+			if (numberIndicatorResize == false) {
+				RelativeLayout.LayoutParams params = (LayoutParams) numberIndicator.numberIndicator
+						.getLayoutParams();
+				params.height = (int) finalSize * 2;
+				params.width = (int) finalSize * 2;
+				numberIndicator.numberIndicator.setLayoutParams(params);
+			}
+
+			Paint paint = new Paint();
+			paint.setAntiAlias(true);
+			paint.setColor(backgroundColor);
+			if (animate) {
+				if (y == 0)
+					y = finalY + finalSize * 2;
+				y -= Utils.dpToPx(6, getResources());
+				size += Utils.dpToPx(2, getResources());
+			}
+			canvas.drawCircle(
+					ViewHelper.getX(ball)
+							+ Utils.getRelativeLeft((View) ball.getParent())
+							+ ball.getWidth() / 2, y, size, paint);
+			if (animate && size >= finalSize)
+				animate = false;
+			if (animate == false) {
+				ViewHelper
+						.setX(numberIndicator.numberIndicator,
+								(ViewHelper.getX(ball)
+										+ Utils.getRelativeLeft((View) ball
+												.getParent()) + ball.getWidth() / 2)
+										- size);
+				ViewHelper.setY(numberIndicator.numberIndicator, y - size);
+				numberIndicator.numberIndicator.setText(value + "");
+			}
+
+			invalidate();
+		}
+
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Switch.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Switch.java
new file mode 100644
index 00000000..6275ac5c
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/views/Switch.java
@@ -0,0 +1,248 @@
+package com.gc.materialdesign.views;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.RelativeLayout;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.utils.Utils;
+import com.nineoldandroids.animation.ObjectAnimator;
+import com.nineoldandroids.view.ViewHelper;
+
+public class Switch extends CustomView {
+
+	int backgroundColor = Color.parseColor("#4CAF50");
+
+	Ball ball;
+
+	boolean check = false;
+	boolean eventCheck = false;
+	boolean press = false;
+
+	OnCheckListener onCheckListener;
+
+	public Switch(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		setAttributes(attrs);
+		setOnClickListener(new OnClickListener() {
+
+			@Override
+			public void onClick(View arg0) {
+				if (check)
+					setChecked(false);
+				else
+					setChecked(true);
+			}
+		});
+	}
+
+	// Set atributtes of XML to View
+	protected void setAttributes(AttributeSet attrs) {
+
+		setBackgroundResource(R.drawable.background_transparent);
+
+		// Set size of view
+		setMinimumHeight(Utils.dpToPx(48, getResources()));
+		setMinimumWidth(Utils.dpToPx(80, getResources()));
+
+		// Set background Color
+		// Color by resource
+		int bacgroundColor = attrs.getAttributeResourceValue(ANDROIDXML,
+				"background", -1);
+		if (bacgroundColor != -1) {
+			setBackgroundColor(getResources().getColor(bacgroundColor));
+		} else {
+			// Color by hexadecimal
+			int background = attrs.getAttributeIntValue(ANDROIDXML, "background", -1);
+			if (background != -1)
+				setBackgroundColor(background);
+		}
+
+		check = attrs.getAttributeBooleanValue(MATERIALDESIGNXML, "check",
+				false);
+		eventCheck = check;
+		ball = new Ball(getContext());
+		RelativeLayout.LayoutParams params = new LayoutParams(Utils.dpToPx(20,
+				getResources()), Utils.dpToPx(20, getResources()));
+		params.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);
+		ball.setLayoutParams(params);
+		addView(ball);
+
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		if (isEnabled()) {
+			isLastTouch = true;
+			if (event.getAction() == MotionEvent.ACTION_DOWN) {
+				press = true;
+			} else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+				float x = event.getX();
+				x = (x < ball.xIni) ? ball.xIni : x;
+				x = (x > ball.xFin) ? ball.xFin : x;
+				if (x > ball.xCen) {
+					check = true;
+				} else {
+					check = false;
+				}
+				ViewHelper.setX(ball, x);
+				ball.changeBackground();
+				if ((event.getX() <= getWidth() && event.getX() >= 0)) {
+					isLastTouch = false;
+					press = false;
+				}
+			} else if (event.getAction() == MotionEvent.ACTION_UP) {
+				press = false;
+				isLastTouch = false;
+				if (eventCheck != check) {
+					eventCheck = check;
+					if (onCheckListener != null)
+						onCheckListener.onCheck(check);
+				}
+				if ((event.getX() <= getWidth() && event.getX() >= 0)) {
+					ball.animateCheck();
+				}
+			}
+		}
+		return true;
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas) {
+		super.onDraw(canvas);
+		if (!placedBall)
+			placeBall();
+
+		// Crop line to transparent effect
+		Bitmap bitmap = Bitmap.createBitmap(canvas.getWidth(),
+				canvas.getHeight(), Bitmap.Config.ARGB_8888);
+		Canvas temp = new Canvas(bitmap);
+		Paint paint = new Paint();
+		paint.setAntiAlias(true);
+		paint.setColor((check) ? backgroundColor : Color.parseColor("#B0B0B0"));
+		paint.setStrokeWidth(Utils.dpToPx(2, getResources()));
+		temp.drawLine(getHeight() / 2, getHeight() / 2, getWidth()
+				- getHeight() / 2, getHeight() / 2, paint);
+		Paint transparentPaint = new Paint();
+		transparentPaint.setAntiAlias(true);
+		transparentPaint.setColor(getResources().getColor(
+				android.R.color.transparent));
+		transparentPaint.setXfermode(new PorterDuffXfermode(
+				PorterDuff.Mode.CLEAR));
+		temp.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,
+				ViewHelper.getY(ball) + ball.getHeight() / 2,
+				ball.getWidth() / 2, transparentPaint);
+
+		canvas.drawBitmap(bitmap, 0, 0, new Paint());
+
+		if (press) {
+			paint.setColor((check) ? makePressColor() : Color
+					.parseColor("#446D6D6D"));
+			canvas.drawCircle(ViewHelper.getX(ball) + ball.getWidth() / 2,
+					getHeight() / 2, getHeight() / 2, paint);
+		}
+		invalidate();
+
+	}
+
+	/**
+	 * Make a dark color to press effect
+	 * 
+	 * @return
+	 */
+	protected int makePressColor() {
+		int r = (this.backgroundColor >> 16) & 0xFF;
+		int g = (this.backgroundColor >> 8) & 0xFF;
+		int b = (this.backgroundColor >> 0) & 0xFF;
+		r = (r - 30 < 0) ? 0 : r - 30;
+		g = (g - 30 < 0) ? 0 : g - 30;
+		b = (b - 30 < 0) ? 0 : b - 30;
+		return Color.argb(70, r, g, b);
+	}
+
+	// Move ball to first position in view
+	boolean placedBall = false;
+
+	private void placeBall() {
+		ViewHelper.setX(ball, getHeight() / 2 - ball.getWidth() / 2);
+		ball.xIni = ViewHelper.getX(ball);
+		ball.xFin = getWidth() - getHeight() / 2 - ball.getWidth() / 2;
+		ball.xCen = getWidth() / 2 - ball.getWidth() / 2;
+		placedBall = true;
+		ball.animateCheck();
+	}
+
+	// SETTERS
+
+	@Override
+	public void setBackgroundColor(int color) {
+		backgroundColor = color;
+		if (isEnabled())
+			beforeBackground = backgroundColor;
+		
+	}
+
+	public void setChecked(boolean check) {
+		this.check = check;
+		ball.animateCheck();
+	}
+
+	public boolean isCheck() {
+		return check;
+	}
+
+	class Ball extends View {
+
+		float xIni, xFin, xCen;
+
+		public Ball(Context context) {
+			super(context);
+			setBackgroundResource(R.drawable.background_switch_ball_uncheck);
+		}
+
+		public void changeBackground() {
+			if (check) {
+				setBackgroundResource(R.drawable.background_checkbox);
+				LayerDrawable layer = (LayerDrawable) getBackground();
+				GradientDrawable shape = (GradientDrawable) layer
+						.findDrawableByLayerId(R.id.shape_bacground);
+				shape.setColor(backgroundColor);
+			} else {
+				setBackgroundResource(R.drawable.background_switch_ball_uncheck);
+			}
+		}
+
+		public void animateCheck() {
+			changeBackground();
+			ObjectAnimator objectAnimator;
+			if (check) {
+				objectAnimator = ObjectAnimator.ofFloat(this, "x", ball.xFin);
+
+			} else {
+				objectAnimator = ObjectAnimator.ofFloat(this, "x", ball.xIni);
+			}
+			objectAnimator.setDuration(300);
+			objectAnimator.start();
+		}
+
+	}
+
+	public void setOncheckListener(OnCheckListener onCheckListener) {
+		this.onCheckListener = onCheckListener;
+	}
+
+	public interface OnCheckListener {
+		public void onCheck(boolean check);
+	}
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/ColorSelector.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/ColorSelector.java
new file mode 100644
index 00000000..8d71c265
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/ColorSelector.java
@@ -0,0 +1,92 @@
+package com.gc.materialdesign.widgets;
+
+import android.content.Context;
+import android.content.DialogInterface;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.View;
+import android.view.Window;
+import android.widget.LinearLayout.LayoutParams;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.views.Slider;
+import com.gc.materialdesign.views.Slider.OnValueChangedListener;
+
+public class ColorSelector extends android.app.Dialog implements OnValueChangedListener{
+	
+	int color = Color.BLACK;
+	View colorView;
+	
+	OnColorSelectedListener onColorSelectedListener;
+	Slider red, green, blue;
+	
+
+	public ColorSelector(Context context,Integer color, OnColorSelectedListener onColorSelectedListener) {
+		super(context, android.R.style.Theme_Translucent);
+		
+		this.onColorSelectedListener = onColorSelectedListener;
+		if(color != null)
+			this.color = color;
+		setOnDismissListener(new OnDismissListener() {
+			
+			@Override
+			public void onDismiss(DialogInterface dialog) {
+				if(ColorSelector.this.onColorSelectedListener != null)
+					ColorSelector.this.onColorSelectedListener.onColorSelected(ColorSelector.this.color);
+			}
+		});
+		
+	}
+	
+	@Override
+	  protected void onCreate(Bundle savedInstanceState) {
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+	    super.onCreate(savedInstanceState);
+	    setContentView(R.layout.color_selector);
+	    
+	    colorView = findViewById(R.id.viewColor);
+	    colorView.setBackgroundColor(color);
+	    // Resize ColorView
+	    colorView.post(new Runnable() {
+			
+			@Override
+			public void run() {
+				LayoutParams params = (LayoutParams) colorView.getLayoutParams();
+				params.height = colorView.getWidth();
+				colorView.setLayoutParams(params);
+			}
+		});
+	    
+	    
+	    // Configure Sliders
+	    red = (Slider) findViewById(R.id.red);
+	    green = (Slider) findViewById(R.id.green);
+	    blue = (Slider) findViewById(R.id.blue);
+	    
+	    int r = (this.color >> 16) & 0xFF;
+		int g = (this.color >> 8) & 0xFF;
+		int b = (this.color >> 0) & 0xFF;
+		
+		red.setValue(r);
+		green.setValue(g);
+		blue.setValue(b);
+		
+		red.setOnValueChangedListener(this);
+		green.setOnValueChangedListener(this);
+		blue.setOnValueChangedListener(this);
+	}
+
+	@Override
+	public void onValueChanged(int value) {
+		color = Color.rgb(red.getValue(), green.getValue(), blue.getValue());
+		colorView.setBackgroundColor(color);
+	}
+	
+	
+	// Event that execute when color selector is closed
+		public interface OnColorSelectedListener{
+			public void onColorSelected(int color);
+		}
+	
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/Dialog.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/Dialog.java
new file mode 100644
index 00000000..65957633
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/Dialog.java
@@ -0,0 +1,142 @@
+package com.gc.materialdesign.widgets;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.view.Window;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.views.ButtonFlat;
+
+public class Dialog extends android.app.Dialog{
+	
+	String message;
+	TextView messageTextView;
+	String title;
+	TextView titleTextView;
+	
+	ButtonFlat buttonAccept;
+	ButtonFlat buttonCancel;
+	
+	
+	View.OnClickListener onAcceptButtonClickListener;
+	View.OnClickListener onCancelButtonClickListener;
+	
+
+	public Dialog(Context context,String title, String message) {
+		super(context, android.R.style.Theme_Translucent);
+		this.message = message;
+		this.title = title;
+	}
+	
+	@Override
+	  protected void onCreate(Bundle savedInstanceState) {
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+	    super.onCreate(savedInstanceState);
+	    setContentView(R.layout.dialog);
+	    
+	    this.titleTextView = (TextView) findViewById(R.id.title);
+	    setTitle(title);
+	    
+	    this.messageTextView = (TextView) findViewById(R.id.message);
+	    setMessage(message);
+	    
+	    this.buttonAccept = (ButtonFlat) findViewById(R.id.button_accept);
+	    buttonAccept.setOnClickListener(new View.OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {
+				dismiss();
+				if(onAcceptButtonClickListener != null)
+			    	onAcceptButtonClickListener.onClick(v);
+			}
+		});
+	    this.buttonCancel = (ButtonFlat) findViewById(R.id.button_cancel);
+    	buttonCancel.setOnClickListener(new View.OnClickListener() {
+				
+				@Override
+				public void onClick(View v) {
+					dismiss();
+					if(onCancelButtonClickListener != null)
+				    	onCancelButtonClickListener.onClick(v);
+				}
+			});
+	}
+	
+	// GETERS & SETTERS
+
+	public String getMessage() {
+		return message;
+	}
+
+	public void setMessage(String message) {
+		this.message = message;
+		messageTextView.setText(message);
+	}
+
+	public TextView getMessageTextView() {
+		return messageTextView;
+	}
+
+	public void setMessageTextView(TextView messageTextView) {
+		this.messageTextView = messageTextView;
+	}
+
+	public String getTitle() {
+		return title;
+	}
+
+	public void setTitle(String title) {
+		this.title = title;
+		if(title == null)
+			titleTextView.setVisibility(View.GONE);
+		else{
+			titleTextView.setVisibility(View.VISIBLE);
+			titleTextView.setText(title);
+		}
+	}
+
+	public TextView getTitleTextView() {
+		return titleTextView;
+	}
+
+	public void setTitleTextView(TextView titleTextView) {
+		this.titleTextView = titleTextView;
+	}
+
+	public ButtonFlat getButtonAccept() {
+		return buttonAccept;
+	}
+
+	public void setButtonAccept(ButtonFlat buttonAccept) {
+		this.buttonAccept = buttonAccept;
+	}
+
+	public ButtonFlat getButtonCancel() {
+		return buttonCancel;
+	}
+
+	public void setButtonCancel(ButtonFlat buttonCancel) {
+		this.buttonCancel = buttonCancel;
+	}
+
+	public void setOnAcceptButtonClickListener(
+			View.OnClickListener onAcceptButtonClickListener) {
+		this.onAcceptButtonClickListener = onAcceptButtonClickListener;
+		if(buttonAccept != null)
+			buttonAccept.setOnClickListener(onAcceptButtonClickListener);
+	}
+
+	public void setOnCancelButtonClickListener(
+			View.OnClickListener onCancelButtonClickListener) {
+		this.onCancelButtonClickListener = onCancelButtonClickListener;
+		if(buttonCancel != null)
+			buttonCancel.setOnClickListener(onAcceptButtonClickListener);
+	}
+	
+	
+	
+	
+
+}
diff --git a/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/SnackBar.java b/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/SnackBar.java
new file mode 100644
index 00000000..90ffd9a5
--- /dev/null
+++ b/MeaterialDesing/src/main/java/com/gc/materialdesign/widgets/SnackBar.java
@@ -0,0 +1,197 @@
+package com.gc.materialdesign.widgets;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.Window;
+import android.view.animation.Animation;
+import android.view.animation.Animation.AnimationListener;
+import android.view.animation.AnimationUtils;
+import android.widget.TextView;
+
+import com.gc.materialdesign.R;
+import com.gc.materialdesign.views.ButtonFlat;
+
+public class SnackBar extends Dialog{
+	
+	String text;
+	String buttonText;
+	View.OnClickListener onClickListener;
+	Activity activity;
+	View view;
+	ButtonFlat button;
+	
+	int backgroundSnackBar = Color.parseColor("#333333");
+	int backgroundButton = Color.parseColor("#1E88E5");
+	
+	OnHideListener onHideListener;
+	
+	// Timer
+	private boolean mIndeterminate = false;
+	private int mTimer = 4 * 1000;
+
+	// With action button
+	public SnackBar(Activity activity, String text, String buttonText, View.OnClickListener onClickListener) {
+		super(activity, android.R.style.Theme_Translucent);
+		this.activity = activity;
+		this.text = text;
+		this.buttonText = buttonText;
+		this.onClickListener = onClickListener;
+	}
+	
+	// Only text
+	public SnackBar(Activity activity, String text) {
+		super(activity, android.R.style.Theme_Translucent);
+		this.activity = activity;
+		this.text = text;
+	}
+	
+	
+	@Override
+	  protected void onCreate(Bundle savedInstanceState) {
+	    super.onCreate(savedInstanceState);
+	    requestWindowFeature(Window.FEATURE_NO_TITLE);
+	    setContentView(R.layout.snackbar);
+	    setCanceledOnTouchOutside(false);
+	    ((TextView)findViewById(R.id.text)).setText(text);
+		button = (ButtonFlat) findViewById(R.id.buttonflat);
+		if(text == null || onClickListener == null){
+			button.setVisibility(View.GONE);
+		}else{
+			button.setText(buttonText);
+			
+			button.setBackgroundColor(backgroundButton);
+			
+			button.setOnClickListener(new View.OnClickListener() {
+				
+				@Override
+				public void onClick(View v) {
+					dismiss();
+					onClickListener.onClick(v);
+				}
+			});
+		}
+		view = findViewById(R.id.snackbar);
+		view.setBackgroundColor(backgroundSnackBar);
+	}
+	
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		return activity.dispatchTouchEvent(event);
+	}
+	
+	@Override
+	public void onBackPressed() {
+	}
+	
+	@Override
+	public void show() {
+		super.show();
+		view.setVisibility(View.VISIBLE);
+		view.startAnimation(AnimationUtils.loadAnimation(activity, R.anim.snackbar_show_animation));
+		
+		if (!mIndeterminate) {
+		    dismissTimer.start();
+		}
+	}
+	
+	// Dismiss timer 
+	Thread dismissTimer = new Thread(new Runnable() {
+		
+		@Override
+		public void run() {
+			try {
+				Thread.sleep(mTimer);
+			} catch (InterruptedException e) {
+				e.printStackTrace();
+			}
+			handler.sendMessage(new Message());
+		}
+	});
+	
+	Handler handler = new Handler(new Handler.Callback() {
+		
+		@Override
+		public boolean handleMessage(Message msg) {
+			if(onHideListener != null)
+				onHideListener.onHide();
+			dismiss();
+			return false;
+		}
+	});
+	
+	@Override
+	public void dismiss() {
+		Animation anim = AnimationUtils.loadAnimation(activity, R.anim.snackbar_hide_animation);
+		anim.setAnimationListener(new AnimationListener() {
+			
+			@Override
+			public void onAnimationStart(Animation animation) {
+			}
+			
+			@Override
+			public void onAnimationRepeat(Animation animation) {
+			}
+			
+			@Override
+			public void onAnimationEnd(Animation animation) {
+				SnackBar.super.dismiss();
+			}
+		});
+		view.startAnimation(anim);
+	}
+	
+	public void setIndeterminate(boolean indeterminate) {
+        	mIndeterminate = indeterminate;
+	}
+	
+	public boolean isIndeterminate() {
+		return mIndeterminate;
+	}
+
+	public void setDismissTimer(int time) {
+		mTimer = time;
+	}
+	
+	public int getDismissTimer() {
+		return mTimer;
+	}
+	
+	/**
+	 * Change background color of SnackBar
+	 * @param color
+	 */
+	public void setBackgroundSnackBar(int color){
+		backgroundSnackBar = color;
+		if(view != null)
+			view.setBackgroundColor(color);
+	}
+	
+	/**
+	 * Chage color of FlatButton in Snackbar
+	 * @param color
+	 */
+	public void setColorButton(int color){
+		backgroundButton = color;
+		if(button != null)
+			button.setBackgroundColor(color);
+	}
+	
+	/**
+	 * This event start when snackbar dismish without push the button
+	 * @author Navas
+	 *
+	 */
+	public interface OnHideListener{
+		public void onHide();
+	}
+	
+	public void setOnhideListener(OnHideListener onHideListener){
+		this.onHideListener = onHideListener;
+	}
+}
diff --git a/MeaterialDesing/src/main/module_main.xml b/MeaterialDesing/src/main/module_main.xml
new file mode 100644
index 00000000..824f8958
--- /dev/null
+++ b/MeaterialDesing/src/main/module_main.xml
@@ -0,0 +1,123 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="module_main" default="compile.module.main">
+  <dirname property="module.main.basedir" file="${ant.file.module_main}"/>
+  
+  <property name="module.jdk.home.main" value="${jdk.home.android_api_19_platform}"/>
+  <property name="module.jdk.bin.main" value="${jdk.bin.android_api_19_platform}"/>
+  <property name="module.jdk.classpath.main" value="jdk.classpath.android_api_19_platform"/>
+  
+  <property name="compiler.args.main" value="-encoding GBK -source 8 ${compiler.args}"/>
+  
+  <property name="main.output.dir" value="${module.main.basedir}/../../../../../out/production/main"/>
+  <property name="main.testoutput.dir" value="${module.main.basedir}/../../../../../out/test/main"/>
+  
+  <path id="main.module.bootclasspath">
+    <!-- Paths to be included in compilation bootclasspath -->
+  </path>
+  
+  <path id="main.module.production.classpath">
+    <path refid="${module.jdk.classpath.main}"/>
+    <path refid="library.libs.classpath"/>
+    <path refid="library.nineoldandroids-2.4.0.classpath"/>
+  </path>
+  
+  <path id="main.runtime.production.module.classpath">
+    <pathelement location="${main.output.dir}"/>
+    <path refid="library.libs.classpath"/>
+    <path refid="library.nineoldandroids-2.4.0.classpath"/>
+  </path>
+  
+  <path id="main.module.classpath">
+    <path refid="${module.jdk.classpath.main}"/>
+    <pathelement location="${main.output.dir}"/>
+    <path refid="library.libs.classpath"/>
+    <path refid="library.nineoldandroids-2.4.0.classpath"/>
+  </path>
+  
+  <path id="main.runtime.module.classpath">
+    <pathelement location="${main.testoutput.dir}"/>
+    <pathelement location="${main.output.dir}"/>
+    <path refid="library.libs.classpath"/>
+    <path refid="library.nineoldandroids-2.4.0.classpath"/>
+  </path>
+  
+  
+  <patternset id="excluded.from.module.main">
+    <patternset refid="ignored.files"/>
+  </patternset>
+  <patternset id="excluded.from.module.materialdesign">
+    <patternset refid="ignored.files"/>
+  </patternset>
+  <patternset id="excluded.from.module.materialdesigndemo">
+    <patternset refid="ignored.files"/>
+  </patternset>
+  
+  <patternset id="excluded.from.compilation.main">
+    <patternset refid="excluded.from.module.main"/>
+    <patternset refid="excluded.from.module.materialdesign"/>
+    <patternset refid="excluded.from.module.materialdesigndemo"/>
+  </patternset>
+  
+  <path id="main.module.sourcepath">
+    <dirset dir="${module.main.basedir}">
+      <include name="java"/>
+      <include name="gen"/>
+    </dirset>
+    <dirset dir="${module.main.basedir}/../../../../../MaterialDesign">
+      <include name="src"/>
+      <include name="gen"/>
+    </dirset>
+    <dirset dir="${module.main.basedir}/../../../../../MaterialDesignDemo">
+      <include name="gen"/>
+      <include name="src"/>
+    </dirset>
+  </path>
+  
+  
+  <target name="compile.module.main" depends="compile.module.main.production,compile.module.main.tests" description="Compile modules main"/>
+  
+  <target name="compile.module.main.production" depends="register.custom.compilers" description="Compile modules main; production classes">
+    <mkdir dir="${main.output.dir}"/>
+    <javac2 destdir="${main.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.main}/javac">
+      <compilerarg line="${compiler.args.main}"/>
+      <bootclasspath refid="main.module.bootclasspath"/>
+      <classpath refid="main.module.production.classpath"/>
+      <src refid="main.module.sourcepath"/>
+      <patternset refid="excluded.from.compilation.main"/>
+    </javac2>
+    
+    <copy todir="${main.output.dir}">
+      <fileset dir="${module.main.basedir}/java">
+        <patternset refid="compiler.resources"/>
+        <type type="file"/>
+      </fileset>
+      <fileset dir="${module.main.basedir}/gen">
+        <patternset refid="compiler.resources"/>
+        <type type="file"/>
+      </fileset>
+      <fileset dir="${module.main.basedir}/../../../../../MaterialDesign/src">
+        <patternset refid="compiler.resources"/>
+        <type type="file"/>
+      </fileset>
+      <fileset dir="${module.main.basedir}/../../../../../MaterialDesign/gen">
+        <patternset refid="compiler.resources"/>
+        <type type="file"/>
+      </fileset>
+      <fileset dir="${module.main.basedir}/../../../../../MaterialDesignDemo/gen">
+        <patternset refid="compiler.resources"/>
+        <type type="file"/>
+      </fileset>
+      <fileset dir="${module.main.basedir}/../../../../../MaterialDesignDemo/src">
+        <patternset refid="compiler.resources"/>
+        <type type="file"/>
+      </fileset>
+    </copy>
+  </target>
+  
+  <target name="compile.module.main.tests" depends="register.custom.compilers,compile.module.main.production" description="compile modules main; test classes" unless="skip.tests"/>
+  
+  <target name="clean.module.main" description="cleanup module">
+    <delete dir="${main.output.dir}"/>
+    <delete dir="${main.testoutput.dir}"/>
+  </target>
+</project>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/anim/progress_indeterminate_animation.xml b/MeaterialDesing/src/main/res/anim/progress_indeterminate_animation.xml
new file mode 100644
index 00000000..8d3f1bce
--- /dev/null
+++ b/MeaterialDesing/src/main/res/anim/progress_indeterminate_animation.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+<!--     <translate  -->
+<!--         android:duration="1000" -->
+<!--         android:fromXDelta="-100%" -->
+<!--         android:toXDelta="100%"  -->
+<!--         android:interpolator="@android:anim/cycle_interpolator" -->
+<!--         android:repeatCount="infinite"/> -->
+    
+    <scale 
+        android:duration="1000"
+        android:fromXScale="0.5"
+        android:fromYScale="1"
+        android:pivotX="50%"
+        android:pivotY="50%"
+        android:toXScale="2"
+        android:toYScale="1" 
+        android:repeatCount="infinite"
+        android:repeatMode="reverse"/>
+    
+
+</set>
diff --git a/MeaterialDesing/src/main/res/anim/snackbar_hide_animation.xml b/MeaterialDesing/src/main/res/anim/snackbar_hide_animation.xml
new file mode 100644
index 00000000..37c8c1ed
--- /dev/null
+++ b/MeaterialDesing/src/main/res/anim/snackbar_hide_animation.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:fromYDelta="0"
+    android:toYDelta="100%"
+    android:duration="300">
+	
+
+</translate>
diff --git a/MeaterialDesing/src/main/res/anim/snackbar_show_animation.xml b/MeaterialDesing/src/main/res/anim/snackbar_show_animation.xml
new file mode 100644
index 00000000..d17a186c
--- /dev/null
+++ b/MeaterialDesing/src/main/res/anim/snackbar_show_animation.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:fromYDelta="100%"
+    android:toYDelta="0"
+    android:duration="300">
+	
+
+</translate>
diff --git a/MeaterialDesing/src/main/res/drawable-hdpi/ic_launcher.png b/MeaterialDesing/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 00000000..96a442e5
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-hdpi/sprite_check.png b/MeaterialDesing/src/main/res/drawable-hdpi/sprite_check.png
new file mode 100644
index 00000000..483004d7
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-hdpi/sprite_check.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-mdpi/ic_launcher.png b/MeaterialDesing/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 00000000..359047df
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-mdpi/sprite_check.png b/MeaterialDesing/src/main/res/drawable-mdpi/sprite_check.png
new file mode 100644
index 00000000..483004d7
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-mdpi/sprite_check.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-xhdpi/dialog_background.9.png b/MeaterialDesing/src/main/res/drawable-xhdpi/dialog_background.9.png
new file mode 100644
index 00000000..6465ac7e
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-xhdpi/dialog_background.9.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-xhdpi/float_button1_shadowp.png b/MeaterialDesing/src/main/res/drawable-xhdpi/float_button1_shadowp.png
new file mode 100644
index 00000000..fb7ff051
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-xhdpi/float_button1_shadowp.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-xhdpi/float_button_shadow1.png b/MeaterialDesing/src/main/res/drawable-xhdpi/float_button_shadow1.png
new file mode 100644
index 00000000..7b71bee6
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-xhdpi/float_button_shadow1.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-xhdpi/ic_launcher.png b/MeaterialDesing/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..71c6d760
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-xhdpi/sprite_check.png b/MeaterialDesing/src/main/res/drawable-xhdpi/sprite_check.png
new file mode 100644
index 00000000..483004d7
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-xhdpi/sprite_check.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-xxhdpi/ic_launcher.png b/MeaterialDesing/src/main/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..4df18946
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/MeaterialDesing/src/main/res/drawable-xxhdpi/sprite_check.png b/MeaterialDesing/src/main/res/drawable-xxhdpi/sprite_check.png
new file mode 100644
index 00000000..483004d7
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable-xxhdpi/sprite_check.png differ
diff --git a/MeaterialDesing/src/main/res/drawable/background_button.9.png b/MeaterialDesing/src/main/res/drawable/background_button.9.png
new file mode 100644
index 00000000..bdaf493c
Binary files /dev/null and b/MeaterialDesing/src/main/res/drawable/background_button.9.png differ
diff --git a/MeaterialDesing/src/main/res/drawable/background_button_float.xml b/MeaterialDesing/src/main/res/drawable/background_button_float.xml
new file mode 100644
index 00000000..7c9f5607
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_button_float.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <item android:drawable="@drawable/float_button_shadow1">
+    </item>
+    <item
+        android:id="@+id/shape_bacground"
+        android:bottom="2dp"
+        android:left="1dp"
+        android:top="1dp"
+        android:right="1dp">
+        <shape android:shape="oval" >
+            <solid android:color="#1E88E5" />
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/background_button_rectangle.xml b/MeaterialDesing/src/main/res/drawable/background_button_rectangle.xml
new file mode 100644
index 00000000..9d91bee7
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_button_rectangle.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <item android:drawable="@drawable/background_button">
+    </item>
+    <item android:id="@+id/shape_bacground">
+        <shape android:shape="rectangle" >
+            <corners android:radius="2dp" />
+
+            <solid android:color="#FFF" />
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/background_checkbox.xml b/MeaterialDesing/src/main/res/drawable/background_checkbox.xml
new file mode 100644
index 00000000..1b688d98
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_checkbox.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item
+        android:id="@+id/shape_bacground">
+        <shape android:shape="oval" >
+            
+            <solid android:color="@android:color/transparent"/>
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/background_checkbox_check.xml b/MeaterialDesing/src/main/res/drawable/background_checkbox_check.xml
new file mode 100644
index 00000000..482cc18a
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_checkbox_check.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item
+        android:id="@+id/shape_bacground">
+        <shape android:shape="rectangle" >
+            <solid android:color="#4CAF50" />
+            <corners android:radius="2dp"/>
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/background_checkbox_uncheck.xml b/MeaterialDesing/src/main/res/drawable/background_checkbox_uncheck.xml
new file mode 100644
index 00000000..a3919f6c
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_checkbox_uncheck.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item
+        android:id="@+id/shape_bacground">
+        <shape android:shape="rectangle" >
+            <stroke android:width="2dp" android:color="#6D6D6D"/>
+            <solid android:color="@android:color/transparent" />
+            <corners android:radius="2dp"/>
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/background_progress.xml b/MeaterialDesing/src/main/res/drawable/background_progress.xml
new file mode 100644
index 00000000..8287418a
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_progress.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item android:id="@+id/shape_bacground">
+        <shape android:shape="rectangle" >
+            <corners android:topRightRadius="200dp" android:bottomRightRadius="100dp" />
+            <solid android:color="#1E88E5" />
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/background_switch_ball_uncheck.xml b/MeaterialDesing/src/main/res/drawable/background_switch_ball_uncheck.xml
new file mode 100644
index 00000000..92482935
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_switch_ball_uncheck.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item
+        android:id="@+id/shape_bacground">
+        <shape android:shape="oval" >
+            <stroke android:width="2dp" android:color="#6D6D6D"/>
+            <solid android:color="@android:color/transparent"/>
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/background_transparent.xml b/MeaterialDesing/src/main/res/drawable/background_transparent.xml
new file mode 100644
index 00000000..a1d9860a
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/background_transparent.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item >
+        <shape android:shape="rectangle" >
+            <corners android:radius="2dp" />
+
+            <solid android:color="#00000000" />
+        </shape>
+    </item>
+
+</layer-list>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/shadow_down.xml b/MeaterialDesing/src/main/res/drawable/shadow_down.xml
new file mode 100644
index 00000000..8cbbff93
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/shadow_down.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android" >
+<corners 
+    android:bottomLeftRadius="2dp"/>
+    <gradient
+        android:angle="270"
+        android:centerColor="@android:color/transparent"
+        android:endColor="@android:color/transparent"
+        android:startColor="@android:color/darker_gray" />
+
+</shape>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/drawable/shadow_right.xml b/MeaterialDesing/src/main/res/drawable/shadow_right.xml
new file mode 100644
index 00000000..cfc23358
--- /dev/null
+++ b/MeaterialDesing/src/main/res/drawable/shadow_right.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android" >
+    
+    <corners android:topRightRadius="2dp"
+        android:bottomRightRadius="2dp"/>
+
+    <gradient
+        android:centerColor="@android:color/transparent"
+        android:endColor="@android:color/transparent"
+        android:startColor="@android:color/darker_gray" />
+
+</shape>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/layout/color_selector.xml b/MeaterialDesing/src/main/res/layout/color_selector.xml
new file mode 100644
index 00000000..d66e937a
--- /dev/null
+++ b/MeaterialDesing/src/main/res/layout/color_selector.xml
@@ -0,0 +1,104 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:materialdesign="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#55000000"
+    android:padding="40dp" >
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:background="@drawable/dialog_background"
+        android:orientation="vertical" >
+
+        <View
+            android:id="@+id/viewColor"
+            android:layout_width="fill_parent"
+            android:layout_height="10dp" />
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:background="#FFF"
+            android:padding="16dp" >
+
+            <LinearLayout
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center_vertical"
+                android:orientation="horizontal" >
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginRight="8dp"
+                    android:textSize="17sp"
+                    android:text="R"
+                    android:textColor="#4D4D4D" />
+
+                <com.gc.materialdesign.views.Slider
+                    android:id="@+id/red"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:background="#4D4D4D"
+                    materialdesign:max="255"
+                    materialdesign:min="0"
+                    materialdesign:showNumberIndicator="true" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:gravity="center_vertical"
+                android:orientation="horizontal" >
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginRight="8dp"
+                    android:textSize="17sp"
+                    android:text="G"
+                    android:textColor="#4D4D4D" />
+
+                <com.gc.materialdesign.views.Slider
+                    android:id="@+id/green"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:background="#4D4D4D"
+                    materialdesign:max="255"
+                    materialdesign:min="0"
+                    materialdesign:showNumberIndicator="true" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:gravity="center_vertical"
+                android:orientation="horizontal" >
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginRight="8dp"
+                    android:textSize="17sp"
+                    android:text="B"
+                    android:textColor="#4D4D4D" />
+
+                <com.gc.materialdesign.views.Slider
+                    android:id="@+id/blue"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:background="#4D4D4D"
+                    materialdesign:max="255"
+                    materialdesign:min="0"
+                    materialdesign:showNumberIndicator="true" />
+            </LinearLayout>
+        </LinearLayout>
+    </LinearLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/layout/dialog.xml b/MeaterialDesing/src/main/res/layout/dialog.xml
new file mode 100644
index 00000000..f951e14b
--- /dev/null
+++ b/MeaterialDesing/src/main/res/layout/dialog.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#55000000"
+    android:padding="32dp">
+    
+    <LinearLayout 
+        android:id="@+id/contentDialog"
+        android:layout_height="wrap_content"
+        android:layout_width="fill_parent"
+        android:background="@drawable/dialog_background"
+        android:layout_centerInParent="true"
+        android:orientation="vertical"
+        android:padding="24dp">
+
+        <TextView
+            android:id="@+id/title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Title"
+            android:layout_marginBottom="24dp"  
+            android:textColor="#000"                   
+            android:textAppearance="?android:attr/textAppearanceLarge" />
+        <TextView
+            android:id="@+id/message"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam"
+            android:layout_marginBottom="24dp"  
+            android:textColor="#000"/>
+        <LinearLayout 
+            android:layout_height="wrap_content"
+            android:layout_width="fill_parent"
+            android:orientation="horizontal"
+            android:gravity="right">
+        
+        <com.gc.materialdesign.views.ButtonFlat
+                android:id="@+id/button_cancel"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="#000"
+                android:text="cancel" />
+        <com.gc.materialdesign.views.ButtonFlat
+                android:id="@+id/button_accept"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:background="#1E88E5"
+                android:text="accept" />
+        </LinearLayout>
+        
+    </LinearLayout>
+    
+
+</RelativeLayout>
diff --git a/MeaterialDesing/src/main/res/layout/number_indicator_spinner.xml b/MeaterialDesing/src/main/res/layout/number_indicator_spinner.xml
new file mode 100644
index 00000000..c0f72930
--- /dev/null
+++ b/MeaterialDesing/src/main/res/layout/number_indicator_spinner.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/number_indicator_spinner_content"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"/>
diff --git a/MeaterialDesing/src/main/res/layout/snackbar.xml b/MeaterialDesing/src/main/res/layout/snackbar.xml
new file mode 100644
index 00000000..7d1ef15b
--- /dev/null
+++ b/MeaterialDesing/src/main/res/layout/snackbar.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <RelativeLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true" >
+
+        <RelativeLayout
+            android:id="@+id/snackbar"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:background="#333333"
+            android:paddingBottom="18dp"
+            android:paddingLeft="24dp"
+            android:paddingRight="24dp"
+            android:paddingTop="18dp"
+            android:visibility="invisible" >
+
+            <com.gc.materialdesign.views.ButtonFlat
+                android:id="@+id/buttonflat"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:layout_marginLeft="24dp"
+                android:text="action" />
+
+            <TextView
+                android:id="@+id/text"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_centerVertical="true"
+                android:layout_toLeftOf="@id/buttonflat"
+                android:textColor="#FFF" />
+        </RelativeLayout>
+    </RelativeLayout>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/MeaterialDesing/src/main/res/values-v21/styles.xml b/MeaterialDesing/src/main/res/values-v21/styles.xml
new file mode 100644
index 00000000..045e125f
--- /dev/null
+++ b/MeaterialDesing/src/main/res/values-v21/styles.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+</resources>
diff --git a/MeaterialDesing/src/main/res/values/attributes.xml b/MeaterialDesing/src/main/res/values/attributes.xml
new file mode 100644
index 00000000..d9b0e662
--- /dev/null
+++ b/MeaterialDesing/src/main/res/values/attributes.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="CustomAttributes">
+<!--        indicate if the slider must show number indicator -->
+       <attr name="showNumberIndicator" format="boolean" />
+<!--        in progress view indicate max value of progress -->
+       <attr name="max" format="integer" />
+<!--        in progress view indicate min value of progress -->
+       <attr name="min" format="integer" />
+<!--        in progress view indicate value of progress -->
+       <attr name="value" format="integer" />
+<!--        in progress view indicate value of progress -->
+       <attr name="progress" format="integer" />
+<!--        in switche's view indicate state of view -->
+       <attr name="check" format="boolean" />
+<!--        in float button indicate icon resource -->
+       <attr name="iconFloat" format="integer" />
+<!--        in float button indicate if must start with animation -->
+       <attr name="animate" format="boolean" />
+<!--        Speed of ripple animation -->
+       <attr name="rippleSpeed" format="float" />
+<!--        in float button indicate if must start with animation -->
+       <attr name="rippleColor" format="color|reference" />
+   </declare-styleable>
+   
+   
+</resources>
diff --git a/MeaterialDesing/src/main/res/values/colors.xml b/MeaterialDesing/src/main/res/values/colors.xml
new file mode 100644
index 00000000..943744c5
--- /dev/null
+++ b/MeaterialDesing/src/main/res/values/colors.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="green">#00FF00</color>
+    
+</resources>
diff --git a/MeaterialDesing/src/main/res/values/strings.xml b/MeaterialDesing/src/main/res/values/strings.xml
new file mode 100644
index 00000000..b2982960
--- /dev/null
+++ b/MeaterialDesing/src/main/res/values/strings.xml
@@ -0,0 +1,5 @@
+<resources>
+
+    <string name="app_name">MaterialDesign</string>
+
+</resources>
diff --git a/MeaterialDesing/src/main/res/values/styles.xml b/MeaterialDesing/src/main/res/values/styles.xml
new file mode 100644
index 00000000..ff6c9d2c
--- /dev/null
+++ b/MeaterialDesing/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+    </style>
+
+</resources>
diff --git a/settings.gradle b/settings.gradle
index 555c59ca..d3cfab9c 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
 rootProject.name='rxandroid-root'
 
-include ':rxandroid'
-include ':sample-app'
\ No newline at end of file
+include ':rxandroid', ':MeaterialDesing'
+include ':sample-app'
