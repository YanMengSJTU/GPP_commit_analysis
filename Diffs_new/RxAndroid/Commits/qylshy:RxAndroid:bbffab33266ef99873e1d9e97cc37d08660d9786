diff --git a/sample-app/src/main/java/rx/android/samples/MainActivity.java b/sample-app/src/main/java/rx/android/samples/MainActivity.java
index 14df37a0..6062eb97 100644
--- a/sample-app/src/main/java/rx/android/samples/MainActivity.java
+++ b/sample-app/src/main/java/rx/android/samples/MainActivity.java
@@ -13,15 +13,23 @@
 import android.widget.Button;
 import android.widget.Toast;
 
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import rx.Observable;
+import rx.Observer;
 import rx.Subscriber;
+import rx.Subscription;
 import rx.android.schedulers.AndroidSchedulers;
 import rx.android.schedulers.HandlerScheduler;
 import rx.exceptions.OnErrorThrowable;
+import rx.functions.Action1;
 import rx.functions.Func0;
+import rx.functions.Func1;
+import rx.functions.Func2;
+import rx.observables.GroupedObservable;
 
 import static android.os.Process.THREAD_PRIORITY_BACKGROUND;
 
@@ -71,6 +79,169 @@ public void onClick(View view) {
                 loadApp(oneAppInfo, twoAppInfo, threeAppInfo);
             }
         });
+
+        findViewById(R.id.observable_defer_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Observable<Integer> deferred = Observable.defer(new Func0<Observable<Integer>>() {
+                    @Override
+                    public Observable<Integer> call() {
+                        return getInt();
+                    }
+                });
+                deferred.subscribe(new Action1<Integer>() {
+                    @Override
+                    public void call(Integer integer) {
+                        Log.i(TAG, "defer " + integer);
+                    }
+                });
+            }
+        });
+
+        findViewById(R.id.observable_range_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Observable.range(10, 3)
+                        .subscribe(new Observer<Integer>() {
+                            @Override
+                            public void onCompleted() {
+                                Log.i(TAG, "range: onCompleted");
+                            }
+
+                            @Override
+                            public void onError(Throwable e) {
+                                Log.i(TAG, "range: onError " + e.toString());
+                            }
+
+                            @Override
+                            public void onNext(Integer integer) {
+                                Log.i(TAG, "range: " + integer);
+                            }
+                        });
+            }
+        });
+
+        findViewById(R.id.observable_interval_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Subscription stopMePlease = Observable.interval(3, TimeUnit.SECONDS)
+                        .subscribe(new Observer<Long>() {
+                            @Override
+                            public void onCompleted() {
+                                Log.i(TAG, "range: onCompleted");
+                            }
+
+                            @Override
+                            public void onError(Throwable e) {
+                                Log.i(TAG, "range: onError " + e.toString());
+                            }
+
+                            @Override
+                            public void onNext(Long aLong) {
+                                Log.i(TAG, "range: onNext " + aLong);
+                            }
+                        });
+
+            }
+        });
+
+        findViewById(R.id.observable_filter_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Observable.from(getAppList())
+                        .filter(new Func1<AppInfo, Boolean>() {
+                            @Override
+                            public Boolean call(AppInfo appInfo) {
+                                return appInfo.getName().startsWith("c");
+                            }
+                        })
+                        .map(new Func1<AppInfo, AppInfo>() {
+                            @Override
+                            public AppInfo call(AppInfo appInfo) {
+                                String currName = appInfo.getName();
+                                String upperCaseName = currName.toUpperCase();
+                                appInfo.mName = upperCaseName;
+                                return appInfo;
+                            }
+                        })
+                        .scan(new Func2<AppInfo, AppInfo, AppInfo>() {
+                            @Override
+                            public AppInfo call(AppInfo appInfo, AppInfo appInfo2) {
+                                if(appInfo.getName().length() > appInfo2.getName().length()){
+                                    return appInfo;
+                                } else {
+                                    return appInfo2;
+                                }
+                            }
+                        })
+                        .take(10)
+                        .repeat(3)
+                        .distinct()
+//                        .elementAt(1)
+                        .subscribe(new Observer<AppInfo>() {
+                    @Override
+                    public void onCompleted() {
+                        Log.i(TAG, "filter: onComplted");
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        Log.i(TAG, "filter: onError" +e.toString());
+                    }
+
+                    @Override
+                    public void onNext(AppInfo appInfo) {
+                        Log.i(TAG, "filterï¼š" + appInfo.toString());
+                    }
+                });
+            }
+        });
+
+        findViewById(R.id.observable_group_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Observable<GroupedObservable<String, AppInfo>> groupItems = Observable.from(getAppList())
+                        .groupBy(new Func1<AppInfo, String>() {
+                            @Override
+                            public String call(AppInfo appInfo) {
+                                SimpleDateFormat formatter = new SimpleDateFormat("MM/yyyy");
+                                return formatter.format(new Date(appInfo.mLastUpdateTime));
+                            }
+                        });
+
+                Observable.concat(groupItems)
+                        .subscribe(new Observer<AppInfo>() {
+                            @Override
+                            public void onCompleted() {
+                                Log.i(TAG, "GroupBy: onComplete");
+                            }
+
+                            @Override
+                            public void onError(Throwable e) {
+                                Log.i(TAG, "GroupBy: " + e.toString());
+                            }
+
+                            @Override
+                            public void onNext(AppInfo appInfo) {
+                                Log.i(TAG, "GroupBy: " + appInfo.toString());
+                            }
+                        });
+            }
+        });
+    }
+
+    private Observable<Integer> getInt(){
+        return Observable.create(new Observable.OnSubscribe<Integer>() {
+            @Override
+            public void call(Subscriber<? super Integer> subscriber) {
+                if (subscriber.isUnsubscribed()){
+                    return;
+                }
+                Log.i(TAG, "getInt");
+                subscriber.onNext(42);
+                subscriber.onCompleted();
+            }
+        });
     }
 
     private  void loadApp(AppInfo appInfo1, AppInfo appInfo2, AppInfo appInfo3){
@@ -89,7 +260,7 @@ public void onError(Throwable e) {
 
                     @Override
                     public void onNext(AppInfo appInfo) {
-                        Log.i(TAG, "just: " +appInfo.toString());
+                        Log.i(TAG, "just: " + appInfo.toString());
                     }
                 });
     }
diff --git a/sample-app/src/main/res/layout/main_activity.xml b/sample-app/src/main/res/layout/main_activity.xml
index 89d60d2a..186eb8ef 100644
--- a/sample-app/src/main/res/layout/main_activity.xml
+++ b/sample-app/src/main/res/layout/main_activity.xml
@@ -33,4 +33,34 @@
         android:layout_height="wrap_content"
         android:text="Observable just() and repeat"/>
 
+    <Button
+        android:id="@+id/observable_defer_btn"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Observable defer()"/>
+
+    <Button
+        android:id="@+id/observable_range_btn"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Observable range()"/>
+
+    <Button
+        android:id="@+id/observable_interval_btn"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Observable interval()"/>
+
+    <Button
+        android:id="@+id/observable_filter_btn"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Observable filter()"/>
+
+    <Button
+        android:id="@+id/observable_group_btn"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Observable GroupBy()"/>
+
 </LinearLayout>
