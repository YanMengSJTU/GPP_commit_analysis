diff --git a/build.gradle b/build.gradle
index 00a8aa8f..00532140 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,21 +6,22 @@ subprojects {
             google()
         }
         dependencies {
-            classpath 'com.android.tools.build:gradle:3.0.0'
+            classpath 'com.android.tools.build:gradle:3.1.0-alpha05'
             classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
-            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
+            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
             classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
         }
     }
 
     repositories {
         mavenCentral()
+        google()
     }
 }
 
 ext {
     minSdkVersion = 9
-    compileSdkVersion = 26
-    buildToolsVersion = '26.0.2'
-    sourceCompatibility = JavaVersion.VERSION_1_7
+    compileSdkVersion = 27
+    buildToolsVersion = '27.0.2'
+    sourceCompatibility = JavaVersion.VERSION_1_8
 }
diff --git a/gradle.properties b/gradle.properties
index 88e5f02b..53c20bee 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,14 +1,31 @@
-GROUP=io.reactivex.rxjava2
+## Project-wide Gradle settings.
+#
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+#
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx1024m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+#
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+#Wed Dec 20 17:09:52 CST 2017
+systemProp.http.proxyPort=1087
+POM_LICENCE_URL=http\://www.apache.org/licenses/LICENSE-2.0.txt
 VERSION_NAME=2.0.2
+POM_SCM_DEV_CONNECTION=scm\:git\:git@github.com\:ReactiveX/RxAndroid.git
+POM_SCM_URL=https\://github.com/ReactiveX/RxAndroid
+systemProp.https.proxyHost=127.0.0.1
+GROUP=io.reactivex.rxjava2
+POM_LICENCE_DIST=repo
+systemProp.http.proxyHost=127.0.0.1
 POM_NAME=RxAndroid
+systemProp.https.proxyPort=1087
+POM_URL=https\://github.com/ReactiveX/RxAndroid
+POM_SCM_CONNECTION=scm\:git\:https\://github.com/ReactiveX/RxAndroid.git
 POM_PACKAGING=aar
-POM_DESCRIPTION=RxAndroid
-
-POM_URL=https://github.com/ReactiveX/RxAndroid
-POM_SCM_URL=https://github.com/ReactiveX/RxAndroid
-POM_SCM_CONNECTION=scm:git:https://github.com/ReactiveX/RxAndroid.git
-POM_SCM_DEV_CONNECTION=scm:git:git@github.com:ReactiveX/RxAndroid.git
-
 POM_LICENCE_NAME=The Apache Software License, Version 2.0
-POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
-POM_LICENCE_DIST=repo
+POM_DESCRIPTION=RxAndroid
diff --git a/gradle/artifacts.gradle b/gradle/artifacts.gradle
index be0a9a72..03d65d2e 100644
--- a/gradle/artifacts.gradle
+++ b/gradle/artifacts.gradle
@@ -56,8 +56,7 @@ if (project.plugins.hasPlugin('com.android.library')) {
             artifacts {
                 archives javadocJarTask, sourcesJarTask
             }
-        }
-        else {
+        } else {
             // Create a configuration we can publish from for each variant
             String configurationName = "archives${variant.name.capitalize()}"
             configurations.create(configurationName)
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index bf1b63c3..60e4e0d0 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,6 @@
+#Wed Dec 20 17:17:35 CST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions-snapshots/gradle-4.4-20171031235950+0000-all.zip
diff --git a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
index af06cc34..aeac50a9 100644
--- a/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
+++ b/sample-app/src/main/java/io/reactivex/android/samples/MainActivity.java
@@ -18,58 +18,67 @@
 import android.os.SystemClock;
 import android.util.Log;
 import android.view.View;
+
+import java.util.concurrent.Callable;
+
 import io.reactivex.Observable;
 import io.reactivex.ObservableSource;
 import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.disposables.CompositeDisposable;
 import io.reactivex.observers.DisposableObserver;
 import io.reactivex.schedulers.Schedulers;
-import java.util.concurrent.Callable;
 
 public class MainActivity extends Activity {
     private static final String TAG = "RxAndroidSamples";
 
     private final CompositeDisposable disposables = new CompositeDisposable();
 
-    @Override protected void onCreate(Bundle savedInstanceState) {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main_activity);
         findViewById(R.id.button_run_scheduler).setOnClickListener(new View.OnClickListener() {
-            @Override public void onClick(View v) {
+            @Override
+            public void onClick(View v) {
                 onRunSchedulerExampleButtonClicked();
             }
         });
     }
 
-    @Override protected void onDestroy() {
+    @Override
+    protected void onDestroy() {
         super.onDestroy();
         disposables.clear();
     }
 
     void onRunSchedulerExampleButtonClicked() {
         disposables.add(sampleObservable()
-            // Run on a background thread
-            .subscribeOn(Schedulers.io())
-            // Be notified on the main thread
-            .observeOn(AndroidSchedulers.mainThread())
-            .subscribeWith(new DisposableObserver<String>() {
-                @Override public void onComplete() {
-                    Log.d(TAG, "onComplete()");
-                }
+                // Run on a background thread
+                .subscribeOn(Schedulers.io())
+                // Be notified on the main thread
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(new DisposableObserver<String>() {
+                    @Override
+                    public void onComplete() {
+                        Log.d(TAG, "onComplete()");
+                    }
 
-                @Override public void onError(Throwable e) {
-                    Log.e(TAG, "onError()", e);
-                }
+                    @Override
+                    public void onError(Throwable e) {
+                        Log.e(TAG, "onError()", e);
+                    }
 
-                @Override public void onNext(String string) {
-                    Log.d(TAG, "onNext(" + string + ")");
-                }
-            }));
+                    @Override
+                    public void onNext(String string) {
+                        Log.d(TAG, "onNext(" + string + ")");
+                    }
+                }));
     }
 
     static Observable<String> sampleObservable() {
         return Observable.defer(new Callable<ObservableSource<? extends String>>() {
-          @Override public ObservableSource<? extends String> call() throws Exception {
+            @Override
+            public ObservableSource<? extends String> call() throws Exception {
                 // Do some long running operation
                 SystemClock.sleep(5000);
                 return Observable.just("one", "two", "three", "four", "five");
