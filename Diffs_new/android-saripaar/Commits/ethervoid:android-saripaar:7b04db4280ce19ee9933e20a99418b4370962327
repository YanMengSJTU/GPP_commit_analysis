diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index 65867e7..5338763 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -1,14 +1,14 @@
 /*
  * Copyright (C) 2012 Mobs and Geeks
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the 
- * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
- * either express or implied. See the License for the specific language governing permissions and 
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package com.mobsandgeeks.saripaar;
@@ -105,7 +105,7 @@ public Validator(android.support.v4.app.Fragment fragment) {
         /**
          * Called when all the {@link Rule}s added to this Validator are valid.
          */
-        public void onSuccess();
+        public void onValidationSuccess();
 
         /**
          * Called if any of the {@link Rule}s fail.
@@ -113,7 +113,7 @@ public Validator(android.support.v4.app.Fragment fragment) {
          * @param failedView The {@link View} that did not pass validation.
          * @param failedRule The failed {@link Rule} associated with the {@link View}.
          */
-        public void onFailure(View failedView, Rule<?> failedRule);
+        public void onValidationFailure(View failedView, Rule<?> failedRule);
 
         /**
          * Called after the validation is cancelled. This callback is called only if you run the
@@ -172,7 +172,7 @@ public void put(Rule<?> rule) {
      */
     public synchronized void validate() {
         if (mValidationListener == null) {
-            throw new IllegalStateException("Set a " + ValidationListener.class.getSimpleName() + 
+            throw new IllegalStateException("Set a " + ValidationListener.class.getSimpleName() +
                     " before attempting to validate.");
         }
 
@@ -180,9 +180,9 @@ public synchronized void validate() {
 
         ViewRulePair failedViewRulePair = validateAllRules();
         if (failedViewRulePair == null) {
-            mValidationListener.onSuccess();
+            mValidationListener.onValidationSuccess();
         } else {
-            mValidationListener.onFailure(failedViewRulePair.view, failedViewRulePair.rule);
+            mValidationListener.onValidationFailure(failedViewRulePair.view, failedViewRulePair.rule);
         }
     }
 
@@ -220,9 +220,9 @@ protected ViewRulePair doInBackground(Void... params) {
             @Override
             protected void onPostExecute(ViewRulePair pair) {
                 if (pair == null) {
-                    mValidationListener.onSuccess();
+                    mValidationListener.onValidationSuccess();
                 } else {
-                    mValidationListener.onFailure(pair.view, pair.rule);
+                    mValidationListener.onValidationFailure(pair.view, pair.rule);
                 }
 
                 mAsyncValidationTask = null;
@@ -368,7 +368,7 @@ public void removeRulesFor(View view) {
 
     /**
      * Validates all rules added to this Validator.
-     * 
+     *
      * @return {@code null} if all {@code Rule}s are valid, else returns the failed
      *          {@code ViewRulePair}.
      */
@@ -522,8 +522,8 @@ private View getView(Field field) {
         }
 
         // Inherited fields
-        while (superClass != null && 
-                (Activity.class.isAssignableFrom(superClass) || 
+        while (superClass != null &&
+                (Activity.class.isAssignableFrom(superClass) ||
                         android.support.v4.app.Fragment.class.isAssignableFrom(superClass))) {
 
             List<Field> declaredViewFields = getDeclaredViewFields(superClass);
@@ -560,7 +560,7 @@ private boolean isSaripaarAnnotation(Annotation annotation) {
                 annotationType.equals(TextRule.class);
     }
 
-    @SuppressWarnings("rawtypes") 
+    @SuppressWarnings("rawtypes")
     private class ViewRulePair {
         public View view;
         public Rule rule;
