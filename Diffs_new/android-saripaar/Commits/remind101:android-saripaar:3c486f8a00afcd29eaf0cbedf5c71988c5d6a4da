diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 7748f20..1c7ef9a 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -27,6 +27,7 @@
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.IpAddress;
 import com.mobsandgeeks.saripaar.annotation.NumberRule;
+import com.mobsandgeeks.saripaar.annotation.Optional;
 import com.mobsandgeeks.saripaar.annotation.Password;
 import com.mobsandgeeks.saripaar.annotation.Regex;
 import com.mobsandgeeks.saripaar.annotation.Required;
@@ -64,6 +65,8 @@
             return getCheckedRule(field, view, (Checked) annotation);
         } else if (Required.class.equals(annotationType)) {
             return getRequiredRule(field, view, (Required) annotation);
+        } else if (Optional.class.equals(annotationType)) {
+            return getOptionalRule(field, view, (Optional) annotation);
         } else if (TextRule.class.equals(annotationType)) {
             return getTextRule(field, view, (TextRule) annotation);
         } else if (Regex.class.equals(annotationType)) {
@@ -124,6 +127,14 @@
         return Rules.required(message, required.trim());
     }
 
+    private static Rule<?> getOptionalRule(Field field, View view, Optional annotation) {
+        if (!TextView.class.isAssignableFrom(view.getClass())) {
+            Log.w(TAG, String.format(WARN_TEXT, field.getName(), Optional.class.getSimpleName()));
+            return null;
+        }
+        return Rules.optional();
+    }
+
     private static Rule<View> getTextRule(Field field, View view, TextRule textRule) {
         if (!TextView.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), TextRule.class.getSimpleName()));
@@ -134,8 +145,8 @@
         int messageResId = textRule.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
                 textRule.message();
-        int minLength = textRule.maxLength();
-        int maxLength = textRule.minLength();
+        int minLength = textRule.minLength();
+        int maxLength = textRule.maxLength();
 
         try {
             MinMaxProvider minMaxProvider = (MinMaxProvider) textRule.minMaxProvider().newInstance();
diff --git a/src/com/mobsandgeeks/saripaar/Rules.java b/src/com/mobsandgeeks/saripaar/Rules.java
index 65e3f81..e8b5dce 100644
--- a/src/com/mobsandgeeks/saripaar/Rules.java
+++ b/src/com/mobsandgeeks/saripaar/Rules.java
@@ -130,6 +130,16 @@ public boolean isValid(TextView textView) {
         };
     }
 
+    public static Rule<TextView> optional() {
+        return new Rule<TextView>(null) {
+
+            @Override
+            public boolean isValid(TextView textView) {
+                return !TextUtils.isEmpty(getText(textView, false));
+            }
+        };
+    }
+
     /**
      * Checks if the {@link TextView} or its subclass {@link View}'s displayed text matches the
      * given regular expression.
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index c1fc042..e226d9a 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -29,6 +29,7 @@
 import com.mobsandgeeks.saripaar.annotation.IpAddress;
 import com.mobsandgeeks.saripaar.annotation.MatchServerErrors;
 import com.mobsandgeeks.saripaar.annotation.NumberRule;
+import com.mobsandgeeks.saripaar.annotation.Optional;
 import com.mobsandgeeks.saripaar.annotation.Password;
 import com.mobsandgeeks.saripaar.annotation.Regex;
 import com.mobsandgeeks.saripaar.annotation.Required;
@@ -60,7 +61,7 @@
     private List<ViewRulePair> validationForm = new ArrayList<ViewRulePair>();
     private List<ViewErrorKeyPair> serverValidationForm = new ArrayList<ViewErrorKeyPair>();
     private Map<String, Object> mProperties = new HashMap<String, Object>();
-    private AsyncTask<Void, Void, List<ViewRulePair>> mAsyncValidationTask;
+    private AsyncTask<Void, Void, List<ViewErrorPair>> mAsyncValidationTask;
     private ValidationListener mValidationListener;
 
     /**
@@ -120,7 +121,7 @@ public void mapServerErrors(Bundle possibleField) {
         /**
          * Called if any of the {@link Rule}s fail.
          */
-        public void onValidationFailed(List<ViewRulePair> failedResults);
+        public void onValidationFailed(List<ViewErrorPair> failedResults);
 
         /**
          * Called after server return error and json mapped to fields
@@ -135,12 +136,12 @@ public void mapServerErrors(Bundle possibleField) {
      * @param rule The {@link Rule} associated with the view.
      * @throws IllegalArgumentException If {@code rule} is {@code null}.
      */
-    public void put(View view, Rule<?> rule) {
+    public void put(View view, Rule rule) {
         if (rule == null) {
             throw new IllegalArgumentException("'rule' cannot be null");
         }
 
-        validationForm.add(new ViewRulePair(view, rule));
+        validationForm.add(new ViewRulePair(view, Collections.singletonList(rule)));
     }
 
     /**
@@ -180,7 +181,7 @@ public synchronized void validate() {
                     " before attempting to validate.");
         }
 
-        List<ViewRulePair> failedViewRulePair = validateAllRules();
+        List<ViewErrorPair> failedViewRulePair = validateAllRules();
         if (failedViewRulePair != null && failedViewRulePair.size() > 0) {
             mValidationListener.onValidationFailed(failedViewRulePair);
         } else {
@@ -207,15 +208,15 @@ public void validateAsync() {
         }
 
         // Start a new one ;)
-        mAsyncValidationTask = new AsyncTask<Void, Void, List<ViewRulePair>>() {
+        mAsyncValidationTask = new AsyncTask<Void, Void, List<ViewErrorPair>>() {
 
             @Override
-            protected List<ViewRulePair> doInBackground(Void... params) {
+            protected List<ViewErrorPair> doInBackground(Void... params) {
                 return validateAllRules();
             }
 
             @Override
-            protected void onPostExecute(List<ViewRulePair> pair) {
+            protected void onPostExecute(List<ViewErrorPair> pair) {
                 if (pair == null) {
                     mValidationListener.onValidationSucceeded();
                 } else {
@@ -364,77 +365,84 @@ public void removeRulesFor(View view) {
      * @return {@code null} if all {@code Rule}s are valid, else returns the failed
      * {@code ViewRulePair}.
      */
-    private List<ViewRulePair> validateAllRules() {
+    private List<ViewErrorPair> validateAllRules() {
         if (!mAnnotationsProcessed || validationForm.size() == 0) {
             Log.i(TAG, "No rules found. Passing validation by default.");
             return null;
         }
-        List<ViewRulePair> list = new ArrayList<ViewRulePair>();
+        List<ViewErrorPair> list = new ArrayList<ViewErrorPair>();
         for (ViewRulePair pair : validationForm) {
             if (pair == null) continue;
 
             // Validate views only if they are visible and enabled
-            if (pair.getView() != null) {
-                if (!pair.getView().isShown() || !pair.getView().isEnabled()) continue;
+            View view = pair.getView();
+            if (view != null) {
+                if (!view.isShown() || !view.isEnabled()) continue;
             }
-
-            if (!pair.getRule().isValid(pair.getView())) {
-                list.add(pair);
+            for (Rule rule : pair.getRules()) {
+                if (!rule.isValid(view)) {
+                    list.add(new ViewErrorPair(view, rule.getFailureMessage()));
+                    break;
+                }
             }
         }
 
         return list;
     }
 
-    private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFieldPairs) {
+    private void createRulesFromAnnotations(List<FieldAnnotationsPair> fieldAnnotationsPairs) {
         TextView passwordTextView = null;
-        TextView confirmPasswordTextView = null;
-
-        for (AnnotationFieldPair pair : annotationFieldPairs) {
-            // Password
-            if (pair.annotation.annotationType().equals(Password.class)) {
-                if (passwordTextView == null) {
+        int passwordViewCount = 0;
+        int confirmPasswordViewCount = 0;
+        for (FieldAnnotationsPair pair : fieldAnnotationsPairs) {
+            for (Annotation annotation : pair.annotations) {
+                if (annotation.annotationType().equals(Password.class)) {
                     passwordTextView = (TextView) getView(pair.field);
-                } else {
-                    throw new IllegalStateException("You cannot annotate " +
-                            "two fields in the same Activity with @Password.");
-                }
-            }
+                    passwordViewCount++;
 
-            // Confirm password
-            if (pair.annotation.annotationType().equals(ConfirmPassword.class)) {
-                if (passwordTextView == null) {
-                    throw new IllegalStateException("A @Password annotated field is required " +
-                            "before you can use @ConfirmPassword.");
-                } else if (confirmPasswordTextView != null) {
-                    throw new IllegalStateException("You cannot annotate " +
-                            "two fields in the same Activity with @ConfirmPassword.");
-                } else {
-                    confirmPasswordTextView = (TextView) getView(pair.field);
+                }
+                if (annotation.annotationType().equals(ConfirmPassword.class)) {
+                    confirmPasswordViewCount++;
                 }
             }
+        }
 
-            // Others
-            ViewRulePair viewRulePair = null;
-            ViewErrorKeyPair viewErrorKeyPair = null;
-            if (pair.annotation.annotationType().equals(ConfirmPassword.class)) {
-                viewRulePair = getViewAndRule(pair.field, pair.annotation, passwordTextView);
-            } else if (pair.annotation.annotationType().equals(MatchServerErrors.class)) {
-                viewErrorKeyPair = getViewErrorKeyPair(pair.field, pair.annotation);
-            } else {
-                viewRulePair = getViewAndRule(pair.field, pair.annotation);
+        if (passwordViewCount > 1) {
+            throw new IllegalStateException("You cannot annotate " +
+                    "two fields of the same form with @Password.");
+        }
+        if (confirmPasswordViewCount > 1) {
+            throw new IllegalStateException("You cannot annotate " +
+                    "two fields of the same form with @ConfirmPassword.");
+        }
+        if (confirmPasswordViewCount > 0 && passwordViewCount == 0) {
+            throw new IllegalStateException("A @Password annotated field is required " +
+                    "before you can use @ConfirmPassword.");
+        }
+
+        for (FieldAnnotationsPair pair : fieldAnnotationsPairs) {
+            View view = getView(pair.field);
+            if (view == null) {
+                Log.w(TAG, String.format("Your %s - %s is null. Please check your field assignment(s).",
+                        pair.field.getType().getSimpleName(), pair.field.getName()));
+                continue;
             }
-            if (viewRulePair != null) {
-                if (DEBUG) {
-                    Log.d(TAG, String.format("Added @%s rule for %s.",
-                            pair.annotation.annotationType().getSimpleName(),
-                            pair.field.getName()));
+            List<Rule> rules = new ArrayList<Rule>();
+            for (Annotation annotation : pair.annotations) {
+                Rule<?> rule = null;
+                Class<?> annotationType = annotation.annotationType();
+                if (annotationType.equals(ConfirmPassword.class)) {
+                    rule = AnnotationRuleFactory.getRule(pair.field, view, annotation, passwordTextView);
+                } else if (annotationType.equals(MatchServerErrors.class)) {
+                    serverValidationForm.add(getViewErrorKeyPair(pair.field, annotation));
+                } else {
+                    rule = AnnotationRuleFactory.getRule(pair.field, view, annotation);
+                }
+                if (rule != null) {
+                    rules.add(rule);
                 }
-                validationForm.add(viewRulePair);
-            }
-            if (viewErrorKeyPair != null) {
-                serverValidationForm.add(viewErrorKeyPair);
             }
+            validationForm.add(new ViewRulePair(view, rules));
         }
     }
 
@@ -457,23 +465,23 @@ private ViewErrorKeyPair getViewErrorKeyPair(Field field, Annotation annotation)
         return null;
     }
 
-    private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object... params) {
-        View view = getView(field);
-        if (view == null) {
-            Log.w(TAG, String.format("Your %s - %s is null. Please check your field assignment(s).",
-                    field.getType().getSimpleName(), field.getName()));
-            return null;
-        }
-
-        Rule<?> rule = null;
-        if (params != null && params.length > 0) {
-            rule = AnnotationRuleFactory.getRule(field, view, annotation, params);
-        } else {
-            rule = AnnotationRuleFactory.getRule(field, view, annotation);
-        }
-
-        return rule != null ? new ViewRulePair(view, rule) : null;
-    }
+//    private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object... params) {
+//        View view = getView(field);
+//        if (view == null) {
+//            Log.w(TAG, String.format("Your %s - %s is null. Please check your field assignment(s).",
+//                    field.getType().getSimpleName(), field.getName()));
+//            return null;
+//        }
+//
+//        Rule<?> rule = null;
+//        if (params != null && params.length > 0) {
+//            rule = AnnotationRuleFactory.getRule(field, view, annotation, params);
+//        } else {
+//            rule = AnnotationRuleFactory.getRule(field, view, annotation);
+//        }
+//
+//        return rule != null ? new ViewRulePair(view, rule) : null;
+//    }
 
     private View getView(Field field) {
         try {
@@ -489,12 +497,13 @@ private View getView(Field field) {
         return null;
     }
 
-    private List<AnnotationFieldPair> getSaripaarAnnotatedFields() {
-        List<AnnotationFieldPair> annotationFieldPairs = new ArrayList<AnnotationFieldPair>();
+    private List<FieldAnnotationsPair> getSaripaarAnnotatedFields() {
+        List<FieldAnnotationsPair> fieldAnnotationsPairs = new ArrayList<FieldAnnotationsPair>();
         List<Field> fieldsWithAnnotations = getViewFieldsWithAnnotations();
 
         for (Field field : fieldsWithAnnotations) {
             Annotation[] annotations = field.getAnnotations();
+            List<Annotation> annotationsList = new ArrayList<Annotation>();
             for (Annotation annotation : annotations) {
                 if (isSaripaarAnnotation(annotation)) {
                     if (DEBUG) {
@@ -502,12 +511,14 @@ private View getView(Field field) {
                                 field.getType().getSimpleName(), field.getName(),
                                 annotation.annotationType().getSimpleName()));
                     }
-                    annotationFieldPairs.add(new AnnotationFieldPair(annotation, field));
+                    annotationsList.add(annotation);
                 }
             }
+
+            Collections.sort(annotationsList, new AnnotationComparator());
+            fieldAnnotationsPairs.add(new FieldAnnotationsPair(field, annotationsList));
         }
-        Collections.sort(annotationFieldPairs, new AnnotationFieldPairComparator());
-        return annotationFieldPairs;
+        return fieldAnnotationsPairs;
     }
 
     private List<Field> getViewFieldsWithAnnotations() {
@@ -568,6 +579,7 @@ private boolean isSaripaarAnnotation(Annotation annotation) {
                 annotationType.equals(Required.class) ||
                 annotationType.equals(Select.class) ||
                 annotationType.equals(TextRule.class) ||
+                annotationType.equals(Optional.class) ||
                 annotationType.equals(MatchServerErrors.class);
     }
 
@@ -581,23 +593,23 @@ private ViewErrorKeyPair(View view, List<String> errorKeys) {
         }
     }
 
-    private class AnnotationFieldPair {
-        public Annotation annotation;
+    private class FieldAnnotationsPair {
         public Field field;
+        public List<Annotation> annotations;
 
-        public AnnotationFieldPair(Annotation annotation, Field field) {
-            this.annotation = annotation;
+        public FieldAnnotationsPair(Field field, List<Annotation> annotations) {
+            this.annotations = annotations;
             this.field = field;
         }
     }
 
-    private class AnnotationFieldPairComparator implements Comparator<AnnotationFieldPair> {
+    private class AnnotationComparator implements Comparator<Annotation> {
 
         @Override
-        public int compare(AnnotationFieldPair lhs, AnnotationFieldPair rhs) {
-            int lhsOrder = getAnnotationOrder(lhs.annotation);
-            int rhsOrder = getAnnotationOrder(rhs.annotation);
-            return lhsOrder < rhsOrder ? -1 : lhsOrder == rhsOrder ? 0 : 1;
+        public int compare(Annotation lhs, Annotation rhs) {
+            int lhsOrder = getAnnotationOrder(lhs);
+            int rhsOrder = getAnnotationOrder(rhs);
+            return lhsOrder < rhsOrder ? 1 : lhsOrder == rhsOrder ? 0 : -1;
         }
 
         private int getAnnotationOrder(Annotation annotation) {
@@ -632,6 +644,9 @@ private int getAnnotationOrder(Annotation annotation) {
             } else if (annotatedClass.equals(TextRule.class)) {
                 return ((TextRule) annotation).order();
 
+            } else if (annotatedClass.equals(Optional.class)) {
+                return ((Optional) annotation).order();
+
             } else {
                 return Integer.MIN_VALUE;
             }
diff --git a/src/com/mobsandgeeks/saripaar/ViewRulePair.java b/src/com/mobsandgeeks/saripaar/ViewRulePair.java
index abf09f4..d959925 100644
--- a/src/com/mobsandgeeks/saripaar/ViewRulePair.java
+++ b/src/com/mobsandgeeks/saripaar/ViewRulePair.java
@@ -2,16 +2,19 @@
 
 import android.view.View;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Created by maxchursin on 7/31/14.
  */
 public class ViewRulePair {
     private View view;
-    private Rule rule;
+    private List<Rule> rules = new ArrayList<Rule>();
 
-    public ViewRulePair(View view, Rule<?> rule) {
+    public ViewRulePair(View view, List<Rule> rules) {
         this.setView(view);
-        this.setRule(rule);
+        this.setRules(rules);
     }
 
     public View getView() {
@@ -22,11 +25,11 @@ public void setView(View view) {
         this.view = view;
     }
 
-    public Rule getRule() {
-        return rule;
+    public List<Rule> getRules() {
+        return rules;
     }
 
-    public void setRule(Rule rule) {
-        this.rule = rule;
+    public void setRules(List<Rule> rules) {
+        this.rules = rules;
     }
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index da82b84..0692aba 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -20,7 +20,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Used along with the {@link Password} annotation. This annotation makes sure that the
+ * Used along with the {@link Password} annotations. This annotations makes sure that the
  * contents of the confirm password {@code EditText} matches the contents of the password
  * {@code EditText}.
  *
diff --git a/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java b/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
index 5f265ec..d68835b 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Number rule annotation. Allows a specific primitive type contained in {@link NumberType}.
+ * Number rule annotations. Allows a specific primitive type contained in {@link NumberType}.
  * Additional options such as greater than (>), less than (<) and equals (==) are available.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Optional.java b/src/com/mobsandgeeks/saripaar/annotation/Optional.java
new file mode 100644
index 0000000..ad76c2d
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/annotation/Optional.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2012 Mobs and Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the 
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific language governing permissions and 
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * When used, the field cannot be empty.
+ *
+ * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ */
+@Target(ElementType.FIELD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Optional {
+    public int order() default Integer.MAX_VALUE;
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Required.java b/src/com/mobsandgeeks/saripaar/annotation/Required.java
index 3a3d9bf..72a1d22 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Required.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Required.java
@@ -29,6 +29,8 @@
 public @interface Required {
     public int order() default Integer.MAX_VALUE;
 
+    public boolean required() default true;
+
     public boolean trim() default true;
 
     public String message() default "This field is required.";
