diff --git a/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
index 91a85e4..c839a17 100644
--- a/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
+++ b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
@@ -21,8 +21,7 @@
 public class MainActivity extends AppCompatActivity implements Validator.ValidationListener {
 
     @Order(1)
-    @Min(value = 2)
-    @Max(value = 100, flags = Rule.FLAG_FOCUS_LOST)
+    @Pattern(regex = "^[А-яЁё]+(([\\s-][А-яЁё]+)*)$")
     EditText text1;
 
     @Order(2)
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
index 6bec97b..6569e17 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
@@ -36,8 +36,6 @@
 
     protected final RULE_ANNOTATION mRuleAnnotation;
 
-    private String mMessage;
-
     /**
      * Constructor. It is mandatory that all subclasses MUST have a constructor with the same
      * signature.
@@ -73,11 +71,6 @@ public String getMessage(final Context context) {
                 : Reflector.getAttributeValue(mRuleAnnotation, "message", String.class);
     }
 
-    @Override
-    public void setMessage(String message) {
-        mMessage = message;
-    }
-
     @Override
     public int getErrorCode() {
         return Reflector.getAttributeValue(mRuleAnnotation, "errorCode", Integer.class);
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/QuickRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/QuickRule.java
index 9fd101b..3e8a442 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/QuickRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/QuickRule.java
@@ -14,6 +14,7 @@
 
 package com.mobsandgeeks.saripaar;
 
+import android.content.Context;
 import android.view.View;
 
 /**
@@ -58,4 +59,9 @@ protected QuickRule(final int sequence) {
      * @return true if valid, false otherwise.
      */
     public abstract boolean isValid(VIEW view);
+
+    @Override
+    public String getMessage(Context context) {
+        return mMessage;
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
index a216cc6..8e847dc 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
@@ -33,6 +33,7 @@
 
     protected final int mSequence;
     protected final int mFlags;
+    protected String mMessage;
 
     /**
      * Constructor.
@@ -93,6 +94,6 @@ public final boolean isValidateOnFocusLost() {
     public abstract int getErrorCode();
 
     public void setMessage(String message) {
-        
+        mMessage = message;
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index 31ee1fd..d177d26 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -19,6 +19,7 @@
 import android.os.Looper;
 import android.util.Pair;
 import android.view.View;
+import android.view.ViewGroup;
 import android.widget.CheckBox;
 import android.widget.RadioButton;
 import android.widget.Spinner;
@@ -715,9 +716,8 @@ private ValidationReport getValidationReport(final View targetView,
             // Validate all the rules for the given view.
             List<Rule> failedRules = null;
             for (int i = 0; i < nRules; i++) {
-
                 // Validate only views that are visible and enabled
-                if (view.isShown() && view.isEnabled() && (view.isFocused() || ultimate || view == mTargetView)) {
+                if (shouldValidate(view, ultimate)) {
                     Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
                     Rule failedRule = validateViewWithRule(view, ruleAdapterPair.first, ruleAdapterPair.second, ultimate);
                     boolean isLastRuleForView = nRules == i + 1;
@@ -756,6 +756,11 @@ private ValidationReport getValidationReport(final View targetView,
         return new ValidationReport(validationErrors, hasMoreErrors);
     }
 
+    private boolean shouldValidate(View view, boolean ultimate) {
+        boolean focused = view instanceof ViewGroup ? ((ViewGroup) view).getFocusedChild() != null : view.isFocused();
+        return view.isShown() && view.isEnabled() && (focused || ultimate || view == mTargetView);
+    }
+
     private Rule validateViewWithRule(final View view, final Rule rule,
                                       final ViewDataAdapter dataAdapter, boolean ultimate) {
         if (mTargetView != null && (view != mTargetView || !rule.isValidateOnFocusLost())) {
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
index 79a800c..5e87af3 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertFalse.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be false";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
index 025b289..8134479 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/AssertTrue.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be true";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
index de64946..19b0a91 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmEmail.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Emails don't match";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index 432396a..1455b55 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Passwords don't match";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
index 2affc8e..6a06a0a 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/CreditCard.java
@@ -31,7 +31,7 @@
 public @interface CreditCard {
     public Type[] cardTypes() default {
         Type.AMEX, Type.DINERS, Type.DISCOVER,
-        Type.MASTERCARD, Type.VISA,
+        Type.MASTERCARD, Type.VISA, Type.MAESTRO
     };
 
     public int sequence()       default -1;
@@ -39,6 +39,9 @@
     public String message()     default "Invalid card";
 
     public enum Type {
-        AMEX, DINERS, DISCOVER, MASTERCARD, VISA, NONE
+        AMEX, DINERS, DISCOVER, MASTERCARD, VISA, MAESTRO, NONE
     }
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
index 324d6d3..44b6681 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMax.java
@@ -34,4 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be less than max value";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
index 66ef3b7..2ccdacc 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/DecimalMin.java
@@ -34,4 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be less than min value";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
index 38f8648..6266c76 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Digits.java
@@ -32,4 +32,8 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be a digit";
+
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
index 693c69b..18a2f08 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Domain.java
@@ -34,4 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Invalid domain name";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
index e270f01..3b94879 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
@@ -34,5 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Invalid email";
-    boolean ultimate() default false;
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
index ffb7605..ce1e051 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Date should be in future";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
index dc7ee42..8530946 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/IpAddress.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Invalid IP address";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
index d4a4f27..7c221dc 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Isbn.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Invalid ISBN";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
index 9965612..07be030 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
@@ -34,5 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be less than max value";
+
     public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
index 46e6d0d..d280cb7 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
@@ -34,5 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be greater than min value";
+
     public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
index 5e1ca29..a8f04b9 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/NotEmpty.java
@@ -34,4 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "This field is required";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
index ac721be..8d4c253 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Password.java
@@ -41,4 +41,7 @@
         NUMERIC, ALPHA_NUMERIC, ALPHA_NUMERIC_MIXED_CASE,
         ALPHA_NUMERIC_SYMBOLS, ALPHA_NUMERIC_MIXED_CASE_SYMBOLS
     }
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
index c3bd06f..730296c 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Past.java
@@ -32,4 +32,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Date should be in past";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
index 53ae881..c842fc2 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Select.java
@@ -34,4 +34,7 @@
     public int sequence()           default -1;
     public int messageResId()       default -1;
     public String message()         default "Select a value";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
index 6c5d9cf..02b1ea9 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
@@ -32,6 +32,7 @@
     public int min()            default Integer.MIN_VALUE;
     public int max()            default Integer.MAX_VALUE;
     public boolean trim()       default false;
+    public String filter()      default "";
 
     public int sequence()       default -1;
     public int messageResId()   default -1;
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
index c52dfc4..f18b667 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Url.java
@@ -35,4 +35,7 @@
     public int sequence()           default -1;
     public int messageResId()       default -1;
     public String message()         default "Invalid URL";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
index f119d22..3134e7c 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/CreditCardRule.java
@@ -36,6 +36,7 @@
                 put(CreditCard.Type.DISCOVER, CreditCardValidator.DISCOVER);
                 put(CreditCard.Type.MASTERCARD, CreditCardValidator.MASTERCARD);
                 put(CreditCard.Type.VISA, CreditCardValidator.VISA);
+                put(CreditCard.Type.MAESTRO, CreditCardValidator.MAESTRO);
             }};
 
     protected CreditCardRule(final CreditCard creditCard) {
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SizeRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SizeRule.java
index 778538d..70c56f6 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SizeRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/SizeRule.java
@@ -14,7 +14,10 @@
 
 package com.mobsandgeeks.saripaar.rule;
 
+import android.widget.EditText;
+
 import com.mobsandgeeks.saripaar.AnnotationRule;
+import com.mobsandgeeks.saripaar.QuickRule;
 import com.mobsandgeeks.saripaar.annotation.Size;
 
 /**
@@ -34,12 +37,20 @@ public boolean isValid(final String text) {
         }
         int ruleMin = mRuleAnnotation.min();
         int ruleMax = mRuleAnnotation.max();
+        String filter = mRuleAnnotation.filter();
 
         // Assert min is <= max
         assertMinMax(ruleMin, ruleMax);
 
-        // Trim?
-        int length = mRuleAnnotation.trim() ? text.trim().length() : text.length();
+        int length;
+
+        // Filter and/or trim?
+        if (filter.length() != 0) {
+            String regex = "[^" + filter + "]";
+             length = mRuleAnnotation.trim() ? text.trim().replaceAll(regex, "").length() : text.replaceAll(regex, "").length();
+        } else {
+            length = mRuleAnnotation.trim() ? text.trim().length() : text.length();
+        }
 
         // Check for min length
         boolean minIsValid = true;
@@ -63,4 +74,17 @@ private void assertMinMax(int min, int max) {
             throw new IllegalStateException(message);
         }
     }
+
+    private static class Ruler extends QuickRule<EditText> {
+
+        @Override
+        public boolean isValid(EditText view) {
+            return false;
+        }
+
+        @Override
+        public int getErrorCode() {
+            return 0;
+        }
+    }
 }
diff --git a/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java b/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
index 6ee0873..c06401b 100644
--- a/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
+++ b/saripaar/src/main/java/commons/validator/routines/CreditCardValidator.java
@@ -95,6 +95,10 @@
      * Option specifying that Diners cards are allowed.
      */
     public static final long DINERS = 1 << 4;
+    /**
+     * Option specifying that Maestro cards are allowed.
+     */
+    public static final long MAESTRO = 1 << 5;
 
     /**
      * The CreditCardTypes that are allowed to pass validation.
@@ -124,11 +128,14 @@
     /** Visa Card Validator */
     public static final CodeValidator VISA_VALIDATOR = new CodeValidator("^(4)(\\d{12}|\\d{15})$", LUHN_VALIDATOR);
 
+    /** Maestro Card Validator */
+    public static final CodeValidator MAESTRO_VALIDATOR = new CodeValidator("^((5[06-9])|(6[0-9]))\\d{10,17}$", LUHN_VALIDATOR);
+
     /**
      * Create a new CreditCardValidator with default options.
      */
     public CreditCardValidator() {
-        this(AMEX + VISA + MASTERCARD + DISCOVER);
+        this(AMEX + VISA + MASTERCARD + DISCOVER + DINERS + MAESTRO);
     }
 
     /**
@@ -159,6 +166,10 @@ public CreditCardValidator(long options) {
         if (isOn(options, DINERS)) {
             this.cardTypes.add(DINERS_VALIDATOR);
         }
+
+        if (isOn(options, MAESTRO)) {
+            this.cardTypes.add(MAESTRO_VALIDATOR);
+        }
     }
 
     /**
