diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 77ed3d7..8664898 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -159,7 +159,7 @@
         String message = messageResId != 0 ? context.getString(messageResId) : regexRule.message();
         String pattern = null;
         try {
-            pattern = ((PatternFetcher) regexRule.patternFetcher().newInstance()).getPattern();
+            pattern = ((PatternProvider) regexRule.patternFetcher().newInstance()).getPattern();
         } catch (InstantiationException e) {
             e.printStackTrace();
         } catch (IllegalAccessException e) {
diff --git a/src/com/mobsandgeeks/saripaar/PatternFetcher.java b/src/com/mobsandgeeks/saripaar/PatternProvider.java
similarity index 75%
rename from src/com/mobsandgeeks/saripaar/PatternFetcher.java
rename to src/com/mobsandgeeks/saripaar/PatternProvider.java
index 7a4eba0..ec1bb13 100644
--- a/src/com/mobsandgeeks/saripaar/PatternFetcher.java
+++ b/src/com/mobsandgeeks/saripaar/PatternProvider.java
@@ -3,6 +3,6 @@
 /**
  * Created by maxchursin on 7/31/14.
  */
-public interface PatternFetcher {
+public interface PatternProvider {
     String getPattern();
 }
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index ad3f4cd..879226b 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -27,6 +27,7 @@
 import com.mobsandgeeks.saripaar.annotation.ConfirmPassword;
 import com.mobsandgeeks.saripaar.annotation.Email;
 import com.mobsandgeeks.saripaar.annotation.IpAddress;
+import com.mobsandgeeks.saripaar.annotation.MatchServerErrors;
 import com.mobsandgeeks.saripaar.annotation.NumberRule;
 import com.mobsandgeeks.saripaar.annotation.Password;
 import com.mobsandgeeks.saripaar.annotation.Regex;
@@ -37,6 +38,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
@@ -55,8 +57,9 @@
 
     private Object mController;
     private boolean mAnnotationsProcessed;
-    private List<ViewRulePair> mViewsAndRules;
-    private Map<String, Object> mProperties;
+    private List<ViewRulePair> validationForm = new ArrayList<ViewRulePair>();
+    private List<ViewErrorKeyPair> serverValidationForm = new ArrayList<ViewErrorKeyPair>();
+    private Map<String, Object> mProperties = new HashMap<String, Object>();
     private AsyncTask<Void, Void, List<ViewRulePair>> mAsyncValidationTask;
     private ValidationListener mValidationListener;
 
@@ -65,8 +68,6 @@
      */
     private Validator() {
         mAnnotationsProcessed = false;
-        mViewsAndRules = new ArrayList<ViewRulePair>();
-        mProperties = new HashMap<String, Object>();
     }
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
@@ -86,8 +87,20 @@ private Validator() {
         mController = fragment;
     }
 
+    //Bundle[{email=has already been taken}]
+    //Bundle[{email=has already been taken, password=is too short (minimum is 6 characters)}]
     public void mapServerErrors(Bundle possibleField) {
-
+        List<ViewErrorPair> list = new ArrayList<ViewErrorPair>();
+        for (String key : possibleField.keySet()) {
+            for (ViewErrorKeyPair viewErrorKeyPair : serverValidationForm) {
+                if (viewErrorKeyPair.errorKeys.contains(key)) {
+                    list.add(new ViewErrorPair(viewErrorKeyPair.view, possibleField.getString(key)));
+                }
+            }
+        }
+        if (mValidationListener != null) {
+            mValidationListener.onServerMappingFinish(list);
+        }
     }
 
     /**
@@ -104,6 +117,11 @@ public void mapServerErrors(Bundle possibleField) {
          * Called if any of the {@link Rule}s fail.
          */
         public void onValidationFailed(List<ViewRulePair> failedResults);
+
+        /**
+         * Called after server return error and json mapped to fields
+         */
+        public void onServerMappingFinish(List<ViewErrorPair> mappingResults);
     }
 
     /**
@@ -118,7 +136,7 @@ public void put(View view, Rule<?> rule) {
             throw new IllegalArgumentException("'rule' cannot be null");
         }
 
-        mViewsAndRules.add(new ViewRulePair(view, rule));
+        validationForm.add(new ViewRulePair(view, rule));
     }
 
     /**
@@ -325,10 +343,10 @@ public void removeRulesFor(View view) {
         }
 
         int index = 0;
-        while (index < mViewsAndRules.size()) {
-            ViewRulePair pair = mViewsAndRules.get(index);
+        while (index < validationForm.size()) {
+            ViewRulePair pair = validationForm.get(index);
             if (pair.getView() == view) {
-                mViewsAndRules.remove(index);
+                validationForm.remove(index);
                 continue;
             }
 
@@ -348,12 +366,12 @@ public void removeRulesFor(View view) {
             mAnnotationsProcessed = true;
         }
 
-        if (mViewsAndRules.size() == 0) {
+        if (validationForm.size() == 0) {
             Log.i(TAG, "No rules found. Passing validation by default.");
             return null;
         }
         List<ViewRulePair> list = new ArrayList<ViewRulePair>();
-        for (ViewRulePair pair : mViewsAndRules) {
+        for (ViewRulePair pair : validationForm) {
             if (pair == null) continue;
 
             // Validate views only if they are visible and enabled
@@ -399,10 +417,13 @@ private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFiel
 
             // Others
             ViewRulePair viewRulePair = null;
+            ViewErrorKeyPair viewErrorKeyPair = null;
             if (pair.annotation.annotationType().equals(ConfirmPassword.class)) {
                 viewRulePair = getViewAndRule(pair.field, pair.annotation, passwordTextView);
-            } else {
+            } else if (!pair.annotation.annotationType().equals(MatchServerErrors.class)) {
                 viewRulePair = getViewAndRule(pair.field, pair.annotation);
+            } else {
+                viewErrorKeyPair = getViewErrorKeyPair(pair.field, pair.annotation);
             }
             if (viewRulePair != null) {
                 if (DEBUG) {
@@ -410,9 +431,31 @@ private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFiel
                             pair.annotation.annotationType().getSimpleName(),
                             pair.field.getName()));
                 }
-                mViewsAndRules.add(viewRulePair);
+                validationForm.add(viewRulePair);
+            }
+            if (viewErrorKeyPair != null) {
+                serverValidationForm.add(viewErrorKeyPair);
+            }
+        }
+    }
+
+    private ViewErrorKeyPair getViewErrorKeyPair(Field field, Annotation annotation) {
+        View view = getView(field);
+        if (view == null) {
+            Log.w(TAG, String.format("Your %s - %s is null. Please check your field assignment(s).",
+                    field.getType().getSimpleName(), field.getName()));
+            return null;
+        }
+        Class<?> annotationType = annotation.annotationType();
+        if (annotationType.equals(MatchServerErrors.class)) {
+            if (!TextView.class.isAssignableFrom(view.getClass())) {
+                //Log.w(TAG, String.format(WARN_TEXT, field.getName(), Regex.class.getSimpleName()));
+                return null;
             }
+            List<String> errorKeys = Arrays.asList(((MatchServerErrors) annotation).errorKeys());
+            return new ViewErrorKeyPair(view, errorKeys);
         }
+        return null;
     }
 
     private ViewRulePair getViewAndRule(Field field, Annotation annotation, Object... params) {
@@ -464,9 +507,7 @@ private View getView(Field field) {
                 }
             }
         }
-
         Collections.sort(annotationFieldPairs, new AnnotationFieldPairComparator());
-
         return annotationFieldPairs;
     }
 
@@ -527,7 +568,18 @@ private boolean isSaripaarAnnotation(Annotation annotation) {
                 annotationType.equals(Regex.class) ||
                 annotationType.equals(Required.class) ||
                 annotationType.equals(Select.class) ||
-                annotationType.equals(TextRule.class);
+                annotationType.equals(TextRule.class) ||
+                annotationType.equals(MatchServerErrors.class);
+    }
+
+    private class ViewErrorKeyPair {
+        public View view;
+        public List<String> errorKeys;
+
+        private ViewErrorKeyPair(View view, List<String> errorKeys) {
+            this.view = view;
+            this.errorKeys = errorKeys;
+        }
     }
 
     private class AnnotationFieldPair {
@@ -582,10 +634,8 @@ private int getAnnotationOrder(Annotation annotation) {
                 return ((TextRule) annotation).order();
 
             } else {
-                throw new IllegalArgumentException(String.format("%s is not a Saripaar annotation",
-                        annotatedClass.getName()));
+                return Integer.MIN_VALUE;
             }
         }
     }
-
 }
diff --git a/src/com/mobsandgeeks/saripaar/ViewErrorPair.java b/src/com/mobsandgeeks/saripaar/ViewErrorPair.java
new file mode 100644
index 0000000..2f5985b
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/ViewErrorPair.java
@@ -0,0 +1,32 @@
+package com.mobsandgeeks.saripaar;
+
+import android.view.View;
+
+/**
+ * Created by maxchursin on 7/31/14.
+ */
+public class ViewErrorPair {
+    private View view;
+    private String errors;
+
+    public ViewErrorPair(View view, String errors) {
+        this.view = view;
+        this.errors = errors;
+    }
+
+    public View getView() {
+        return view;
+    }
+
+    public void setView(View view) {
+        this.view = view;
+    }
+
+    public String getErrors() {
+        return errors;
+    }
+
+    public void setErrors(String errors) {
+        this.errors = errors;
+    }
+}
