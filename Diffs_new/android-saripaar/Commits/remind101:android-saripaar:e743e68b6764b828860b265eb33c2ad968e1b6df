diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index e5802ef..ca8c146 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -118,6 +118,9 @@ protected Void doInBackground(Void... params) {
             @Override
             protected void onPostExecute(Void aVoid) {
                 mAnnotationsProcessed = true;
+                if (mValidationListener != null) {
+                    mValidationListener.onFormPrepared();
+                }
             }
         }.execute();
     }
@@ -143,6 +146,8 @@ public void mapServerErrors(Bundle possibleField) {
      */
     public interface ValidationListener {
 
+        public void onFormPrepared();
+
         /**
          * Called when all the {@link Rule}s added to this Validator are valid.
          */
@@ -406,7 +411,7 @@ public void removeRulesFor(View view) {
             // Validate views only if they are visible and enabled
             View view = pair.getView();
             if (view != null) {
-                if (view.getVisibility()!=View.VISIBLE || !view.isEnabled()) continue;
+                if (view.getVisibility() != View.VISIBLE || !view.isEnabled()) continue;
             }
             for (Rule rule : pair.getRules()) {
                 if (!rule.isValid(view)) {
@@ -421,6 +426,10 @@ public void removeRulesFor(View view) {
         return list;
     }
 
+    public static boolean validateInline(String contactInfo) {
+        return true;
+    }
+
     private void createRulesFromAnnotations(List<FieldAnnotationsPair> fieldAnnotationsPairs) {
         TextView passwordTextView = null;
         int passwordViewCount = 0;
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Regex.java b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
index 6fdce37..9e953a3 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Regex.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
@@ -26,7 +26,7 @@
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.LOCAL_VARIABLE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Regex {
     public int order() default 0;
diff --git a/tests/java/com/mobsandgeeks/saripaar/BaseTestActivity.java b/tests/java/com/mobsandgeeks/saripaar/BaseTestActivity.java
new file mode 100644
index 0000000..998d195
--- /dev/null
+++ b/tests/java/com/mobsandgeeks/saripaar/BaseTestActivity.java
@@ -0,0 +1,44 @@
+package com.mobsandgeeks.saripaar;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.mobsandgeeks.saripaar.annotation.Required;
+
+/**
+ * Created by maxchursin on 8/3/14.
+ */
+public class BaseTestActivity extends Activity {
+
+    @Required
+    TextView textViewRequired;
+    Validator validator;
+    private LinearLayout rootView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        rootView = new LinearLayout(this);
+        rootView.setLayoutParams(
+                new LinearLayout.LayoutParams(
+                        ViewGroup.LayoutParams.MATCH_PARENT,
+                        ViewGroup.LayoutParams.MATCH_PARENT)
+        );
+        textViewRequired = new TextView(this);
+        addTestView(textViewRequired);
+        setContentView(rootView);
+        validator = new Validator(this);
+    }
+
+    protected void addTestView(TextView textViewRequired) {
+        textViewRequired.setLayoutParams(
+                new LinearLayout.LayoutParams(
+                        ViewGroup.LayoutParams.MATCH_PARENT,
+                        ViewGroup.LayoutParams.WRAP_CONTENT)
+        );
+        rootView.addView(textViewRequired);
+    }
+}
diff --git a/tests/java/com/mobsandgeeks/saripaar/RequiredActivity.java b/tests/java/com/mobsandgeeks/saripaar/RequiredActivity.java
new file mode 100644
index 0000000..6afb5fa
--- /dev/null
+++ b/tests/java/com/mobsandgeeks/saripaar/RequiredActivity.java
@@ -0,0 +1,17 @@
+package com.mobsandgeeks.saripaar;
+
+import android.os.Bundle;
+import android.widget.TextView;
+
+/**
+ * Created by maxchursin on 8/3/14.
+ */
+public class RequiredActivity extends BaseTestActivity {
+
+    TextView optionalTextView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+    }
+}
diff --git a/tests/java/com/mobsandgeeks/saripaar/ValidatorTest.java b/tests/java/com/mobsandgeeks/saripaar/ValidatorTest.java
index 411093d..d82fc43 100644
--- a/tests/java/com/mobsandgeeks/saripaar/ValidatorTest.java
+++ b/tests/java/com/mobsandgeeks/saripaar/ValidatorTest.java
@@ -1,74 +1,37 @@
 package com.mobsandgeeks.saripaar;
 
-import android.app.Activity;
 import android.content.Intent;
-import android.os.Bundle;
 import android.test.ActivityUnitTestCase;
-import android.view.ViewGroup;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.mobsandgeeks.saripaar.annotation.Required;
 
 import java.util.List;
 
-public class ValidatorTest extends ActivityUnitTestCase<ValidatorTest.TestActivity> {
+public class ValidatorTest extends ActivityUnitTestCase<BaseTestActivity> {
 
     private Intent intent;
 
     public ValidatorTest() {
-        super(ValidatorTest.TestActivity.class);
+        super(BaseTestActivity.class);
     }
 
     @Override
     protected void setUp() throws Exception {
         super.setUp();
-        intent = new Intent(getInstrumentation().getTargetContext(), TestActivity.class);
+        intent = new Intent(getInstrumentation().getTargetContext(), BaseTestActivity.class);
     }
 
     public void testRequiredAnnotationPositive() {
         startActivity(intent, null, null);
-        getActivity().validator.setValidationListener(new Validator.ValidationListener() {
-            @Override
-            public void onValidationSucceeded() {
-                assertTrue(true);
-            }
-
-            @Override
-            public void onValidationFailed(List<ViewErrorPair> failedResults) {
-                assertTrue(false);
-            }
-
-            @Override
-            public void onServerMappingFinish(List<ViewErrorPair> mappingResults) {
-                assertTrue(false);
-            }
-        });
+        getActivity().validator.setValidationListener(new SuccessValidationListener());
         waitAnnotationProcess();
-        getActivity().textView.setText("test");
+        getActivity().textViewRequired.setText("Text required");
         getActivity().validator.validate();
     }
 
     public void testRequiredAnnotationNegative() {
         startActivity(intent, null, null);
-        getActivity().validator.setValidationListener(new Validator.ValidationListener() {
-            @Override
-            public void onValidationSucceeded() {
-                assertTrue(false);
-            }
-
-            @Override
-            public void onValidationFailed(List<ViewErrorPair> failedResults) {
-                assertTrue(true);
-            }
-
-            @Override
-            public void onServerMappingFinish(List<ViewErrorPair> mappingResults) {
-                assertTrue(false);
-            }
-        });
+        getActivity().validator.setValidationListener(new FailureValidationListener());
         waitAnnotationProcess();
-        getActivity().textView.setText(null);
+        getActivity().textViewRequired.setText(null);
         getActivity().validator.validate();
     }
 
@@ -81,30 +44,43 @@ private void waitAnnotationProcess() {
         }
     }
 
-    public static class TestActivity extends Activity {
-        @Required
-        TextView textView;
-        Validator validator;
+    /**
+    * Created by maxchursin on 8/3/14.
+    */
+    static class SuccessValidationListener implements Validator.ValidationListener {
+        @Override
+        public void onValidationSucceeded() {
+            assertTrue(true);
+        }
+
+        @Override
+        public void onValidationFailed(List<ViewErrorPair> failedResults) {
+            assertTrue(false);
+        }
 
         @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            LinearLayout view = new LinearLayout(this);
-            view.setLayoutParams(
-                    new LinearLayout.LayoutParams(
-                            ViewGroup.LayoutParams.MATCH_PARENT,
-                            ViewGroup.LayoutParams.MATCH_PARENT)
-            );
-            textView = new TextView(this);
-            view.setLayoutParams(
-                    new LinearLayout.LayoutParams(
-                            ViewGroup.LayoutParams.MATCH_PARENT,
-                            ViewGroup.LayoutParams.WRAP_CONTENT)
-            );
-            view.addView(textView);
-            setContentView(view);
-            validator = new Validator(this);
+        public void onServerMappingFinish(List<ViewErrorPair> mappingResults) {
+            assertTrue(false);
         }
     }
 
+    /**
+    * Created by maxchursin on 8/3/14.
+    */
+    static class FailureValidationListener implements Validator.ValidationListener {
+        @Override
+        public void onValidationSucceeded() {
+            assertTrue(false);
+        }
+
+        @Override
+        public void onValidationFailed(List<ViewErrorPair> failedResults) {
+            assertTrue(true);
+        }
+
+        @Override
+        public void onServerMappingFinish(List<ViewErrorPair> mappingResults) {
+            assertTrue(false);
+        }
+    }
 }
\ No newline at end of file
