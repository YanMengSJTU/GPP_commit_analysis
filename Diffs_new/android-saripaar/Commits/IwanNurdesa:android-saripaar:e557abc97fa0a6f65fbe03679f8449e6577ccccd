diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index 9cb2f03..fea6096 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -147,7 +147,6 @@
     private Handler mViewValidatedActionHandler;
     private ValidationListener mValidationListener;
     private AsyncValidationTask mAsyncValidationTask;
-    private boolean isValidateHiddenField;
 
     /**
      * Constructor.
@@ -752,35 +751,32 @@ private ValidationReport getValidationReport(final View targetView,
             // Validate all the rules for the given view.
             List<Rule> failedRules = null;
             for (int i = 0; i < nRules; i++) {
-
-                // Validate only views that are visible and enabled
-                if (isValidateHiddenField) {
-                    Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
-                    Rule failedRule = validateViewWithRule(
-                            view, ruleAdapterPair.first, ruleAdapterPair.second);
-                    boolean isLastRuleForView = nRules == i + 1;
-
-                    if (failedRule != null) {
-                        if (addErrorToReport) {
-                            if (failedRules == null) {
-                                failedRules = new ArrayList<Rule>();
-                                validationErrors.add(new ValidationError(view, failedRules));
-                            }
-                            failedRules.add(failedRule);
-                        } else {
-                            hasMoreErrors = true;
-                        }
-
-                        if (Mode.IMMEDIATE.equals(validationMode) && isLastRuleForView) {
-                            break validation;
+                
+                Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
+                Rule failedRule = validateViewWithRule(
+                        view, ruleAdapterPair.first, ruleAdapterPair.second);
+                boolean isLastRuleForView = nRules == i + 1;
+
+                if (failedRule != null) {   
+                    if (addErrorToReport) {
+                        if (failedRules == null) {
+                            failedRules = new ArrayList<Rule>();
+                            validationErrors.add(new ValidationError(view, failedRules));
                         }
+                        failedRules.add(failedRule);
+                    } else {
+                        hasMoreErrors = true;
                     }
 
-                    // Don't add reports for subsequent views
-                    if (view.equals(targetView) && isLastRuleForView) {
-                        addErrorToReport = false;
+                    if (Mode.IMMEDIATE.equals(validationMode) && isLastRuleForView) {
+                        break validation;
                     }
                 }
+
+                // Don't add reports for subsequent views
+                if (view.equals(targetView) && isLastRuleForView) {
+                    addErrorToReport = false;
+                }                
             }
 
             // Callback if a view passes all rules
@@ -794,14 +790,6 @@ private ValidationReport getValidationReport(final View targetView,
         return new ValidationReport(validationErrors, hasMoreErrors);
     }
 
-    public boolean isValidateHiddenField() {
-        return isValidateHiddenField;
-    }
-
-    public void setValidateHiddenField(boolean validateHiddenField) {
-        isValidateHiddenField = validateHiddenField;
-    }
-
     private Rule validateViewWithRule(final View view, final Rule rule,
             final ViewDataAdapter dataAdapter) {
 
