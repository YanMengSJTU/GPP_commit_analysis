diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index 89dba11..ad3f4cd 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -17,6 +17,7 @@
 import android.annotation.TargetApi;
 import android.os.AsyncTask;
 import android.os.Build;
+import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.util.Log;
 import android.view.View;
@@ -56,7 +57,7 @@
     private boolean mAnnotationsProcessed;
     private List<ViewRulePair> mViewsAndRules;
     private Map<String, Object> mProperties;
-    private AsyncTask<Void, Void, ViewRulePair> mAsyncValidationTask;
+    private AsyncTask<Void, Void, List<ViewRulePair>> mAsyncValidationTask;
     private ValidationListener mValidationListener;
 
     /**
@@ -64,7 +65,7 @@
      */
     private Validator() {
         mAnnotationsProcessed = false;
-        mViewsAndRules = new ArrayList<Validator.ViewRulePair>();
+        mViewsAndRules = new ArrayList<ViewRulePair>();
         mProperties = new HashMap<String, Object>();
     }
 
@@ -85,6 +86,10 @@ private Validator() {
         mController = fragment;
     }
 
+    public void mapServerErrors(Bundle possibleField) {
+
+    }
+
     /**
      * Interface definition for a callback to be invoked when {@code validate()} is called.
      */
@@ -97,11 +102,8 @@ private Validator() {
 
         /**
          * Called if any of the {@link Rule}s fail.
-         *
-         * @param failedView The {@link View} that did not pass validation.
-         * @param failedRule The failed {@link Rule} associated with the {@link View}.
          */
-        public void onValidationFailed(View failedView, Rule<?> failedRule);
+        public void onValidationFailed(List<ViewRulePair> failedResults);
     }
 
     /**
@@ -109,7 +111,6 @@ private Validator() {
      *
      * @param view The {@link View} to be validated.
      * @param rule The {@link Rule} associated with the view.
-     *
      * @throws IllegalArgumentException If {@code rule} is {@code null}.
      */
     public void put(View view, Rule<?> rule) {
@@ -123,9 +124,8 @@ public void put(View view, Rule<?> rule) {
     /**
      * Convenience method for adding multiple {@link Rule}s for a single {@link View}.
      *
-     * @param view The {@link View} to be validated.
+     * @param view  The {@link View} to be validated.
      * @param rules {@link List} of {@link Rule}s associated with the view.
-     *
      * @throws IllegalArgumentException If {@code rules} is {@code null}.
      */
     public void put(View view, List<Rule<?>> rules) {
@@ -158,11 +158,11 @@ public synchronized void validate() {
                     " before attempting to validate.");
         }
 
-        ViewRulePair failedViewRulePair = validateAllRules();
-        if (failedViewRulePair == null) {
-            mValidationListener.onValidationSucceeded();
+        List<ViewRulePair> failedViewRulePair = validateAllRules();
+        if (failedViewRulePair != null && failedViewRulePair.size() > 0) {
+            mValidationListener.onValidationFailed(failedViewRulePair);
         } else {
-            mValidationListener.onValidationFailed(failedViewRulePair.view, failedViewRulePair.rule);
+            mValidationListener.onValidationSucceeded();
         }
     }
 
@@ -185,19 +185,19 @@ public void validateAsync() {
         }
 
         // Start a new one ;)
-        mAsyncValidationTask = new AsyncTask<Void, Void, ViewRulePair>() {
+        mAsyncValidationTask = new AsyncTask<Void, Void, List<ViewRulePair>>() {
 
             @Override
-            protected ViewRulePair doInBackground(Void... params) {
+            protected List<ViewRulePair> doInBackground(Void... params) {
                 return validateAllRules();
             }
 
             @Override
-            protected void onPostExecute(ViewRulePair pair) {
+            protected void onPostExecute(List<ViewRulePair> pair) {
                 if (pair == null) {
                     mValidationListener.onValidationSucceeded();
                 } else {
-                    mValidationListener.onValidationFailed(pair.view, pair.rule);
+                    mValidationListener.onValidationFailed(pair);
                 }
 
                 mAsyncValidationTask = null;
@@ -260,9 +260,8 @@ public void setValidationListener(ValidationListener validationListener) {
     /**
      * Updates a property value if it exists, else creates a new one.
      *
-     * @param name The property name.
+     * @param name  The property name.
      * @param value Value of the property.
-     *
      * @throws IllegalArgumentException If {@code name} is {@code null}.
      */
     public void setProperty(String name, Object value) {
@@ -277,10 +276,8 @@ public void setProperty(String name, Object value) {
      * Retrieves the value of the given property.
      *
      * @param name The property name.
-     *
-     * @throws IllegalArgumentException If {@code name} is {@code null}.
-     *
      * @return Value of the property or {@code null} if the property does not exist.
+     * @throws IllegalArgumentException If {@code name} is {@code null}.
      */
     public Object getProperty(String name) {
         if (name == null) {
@@ -294,7 +291,6 @@ public Object getProperty(String name) {
      * Removes the property from this Validator.
      *
      * @param name The property name.
-     *
      * @return The value of the removed property or {@code null} if the property was not found.
      */
     public Object removeProperty(String name) {
@@ -305,7 +301,6 @@ public Object removeProperty(String name) {
      * Checks if the specified property exists in this Validator.
      *
      * @param name The property name.
-     *
      * @return True if the property exists.
      */
     public boolean containsProperty(String name) {
@@ -321,6 +316,7 @@ public void removeAllProperties() {
 
     /**
      * Removes all the rules for the matching {@link View}
+     *
      * @param view The {@code View} whose rules must be removed.
      */
     public void removeRulesFor(View view) {
@@ -331,7 +327,7 @@ public void removeRulesFor(View view) {
         int index = 0;
         while (index < mViewsAndRules.size()) {
             ViewRulePair pair = mViewsAndRules.get(index);
-            if (pair.view == view) {
+            if (pair.getView() == view) {
                 mViewsAndRules.remove(index);
                 continue;
             }
@@ -344,9 +340,9 @@ public void removeRulesFor(View view) {
      * Validates all rules added to this Validator.
      *
      * @return {@code null} if all {@code Rule}s are valid, else returns the failed
-     *          {@code ViewRulePair}.
+     * {@code ViewRulePair}.
      */
-    private ViewRulePair validateAllRules() {
+    private List<ViewRulePair> validateAllRules() {
         if (!mAnnotationsProcessed) {
             createRulesFromAnnotations(getSaripaarAnnotatedFields());
             mAnnotationsProcessed = true;
@@ -356,23 +352,21 @@ private ViewRulePair validateAllRules() {
             Log.i(TAG, "No rules found. Passing validation by default.");
             return null;
         }
-
-        ViewRulePair failedViewRulePair = null;
+        List<ViewRulePair> list = new ArrayList<ViewRulePair>();
         for (ViewRulePair pair : mViewsAndRules) {
             if (pair == null) continue;
 
             // Validate views only if they are visible and enabled
-            if (pair.view != null) {
-                if (!pair.view.isShown() || !pair.view.isEnabled()) continue;
+            if (pair.getView() != null) {
+                if (!pair.getView().isShown() || !pair.getView().isEnabled()) continue;
             }
 
-            if (!pair.rule.isValid(pair.view)) {
-                failedViewRulePair = pair;
-                break;
+            if (!pair.getRule().isValid(pair.getView())) {
+                list.add(pair);
             }
         }
 
-        return failedViewRulePair;
+        return list;
     }
 
     private void createRulesFromAnnotations(List<AnnotationFieldPair> annotationFieldPairs) {
@@ -536,16 +530,6 @@ private boolean isSaripaarAnnotation(Annotation annotation) {
                 annotationType.equals(TextRule.class);
     }
 
-    private class ViewRulePair {
-        public View view;
-        public Rule rule;
-
-        public ViewRulePair(View view, Rule<?> rule) {
-            this.view = view;
-            this.rule = rule;
-        }
-    }
-
     private class AnnotationFieldPair {
         public Annotation annotation;
         public Field field;
diff --git a/src/com/mobsandgeeks/saripaar/ViewRulePair.java b/src/com/mobsandgeeks/saripaar/ViewRulePair.java
new file mode 100644
index 0000000..abf09f4
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/ViewRulePair.java
@@ -0,0 +1,32 @@
+package com.mobsandgeeks.saripaar;
+
+import android.view.View;
+
+/**
+ * Created by maxchursin on 7/31/14.
+ */
+public class ViewRulePair {
+    private View view;
+    private Rule rule;
+
+    public ViewRulePair(View view, Rule<?> rule) {
+        this.setView(view);
+        this.setRule(rule);
+    }
+
+    public View getView() {
+        return view;
+    }
+
+    public void setView(View view) {
+        this.view = view;
+    }
+
+    public Rule getRule() {
+        return rule;
+    }
+
+    public void setRule(Rule rule) {
+        this.rule = rule;
+    }
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Checked.java b/src/com/mobsandgeeks/saripaar/annotation/Checked.java
index e15ae40..8a438a4 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Checked.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Checked.java
@@ -16,13 +16,13 @@
 
 import android.widget.Checkable;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
  * Annotation works with {@code Views} that implement the {@link Checkable} interface.
  *
@@ -31,8 +31,11 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Checked {
-    public int order();
-    public boolean checked()    default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+    public int order() default 0;
+
+    public boolean checked() default true;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index 407387e..da82b84 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -29,7 +29,9 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ConfirmPassword {
-    public int order();
-    public String message()     default "Passwords don't match";
-    public int messageResId()   default 0;
+    public int order() default 0;
+
+    public String message() default "Passwords don't match";
+
+    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Email.java b/src/com/mobsandgeeks/saripaar/annotation/Email.java
index 675d79c..fd03a6d 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Email.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Email.java
@@ -14,13 +14,13 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
  * Enforces email validation on the annotated {@code View}.
  *
@@ -29,7 +29,9 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Email {
-    public int order();
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+    public int order() default 0;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/IpAddress.java b/src/com/mobsandgeeks/saripaar/annotation/IpAddress.java
index dfeb005..867d54e 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/IpAddress.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/IpAddress.java
@@ -14,13 +14,13 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
  * Allows only valid IP Addresses on the annotated {@code View}.
  *
@@ -29,7 +29,9 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface IpAddress {
-    public int order();
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+    public int order() default 0;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/MatchServerErrors.java b/src/com/mobsandgeeks/saripaar/annotation/MatchServerErrors.java
new file mode 100644
index 0000000..c7d50c5
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/annotation/MatchServerErrors.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2012 Mobs and Geeks
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file 
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the 
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific language governing permissions and 
+ * limitations under the License.
+ */
+
+package com.mobsandgeeks.saripaar.annotation;
+
+import com.mobsandgeeks.saripaar.Rules;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Specifies constraints such as min length, max length and trim on textual data contained
+ * in {@code View}s.
+ *
+ * @author Ragunath Jawahar <rj@mobsandgeeks.com>
+ */
+@Target(ElementType.FIELD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface MatchServerErrors {
+    public String[] errorKeys();
+
+    public boolean trim() default true;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
+}
diff --git a/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java b/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
index 3059e49..5f265ec 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/NumberRule.java
@@ -14,29 +14,35 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
  * Number rule annotation. Allows a specific primitive type contained in {@link NumberType}.
- * Additional options such as greater than (>), less than (<) and equals (==) are available. 
+ * Additional options such as greater than (>), less than (<) and equals (==) are available.
  *
  * @author Ragunath Jawahar <rj@mobsandgeeks.com>
  */
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface NumberRule {
-    public int order();
+    public int order() default 0;
+
     public NumberType type();
-    public double gt()          default Double.MAX_VALUE;
-    public double lt()          default Double.MIN_VALUE;
-    public double eq()          default Double.MAX_VALUE;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+
+    public double gt() default Double.MAX_VALUE;
+
+    public double lt() default Double.MIN_VALUE;
+
+    public double eq() default Double.MAX_VALUE;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
 
     public enum NumberType {
         INTEGER, LONG, FLOAT, DOUBLE
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Password.java b/src/com/mobsandgeeks/saripaar/annotation/Password.java
index f2275ad..a35daa5 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Password.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Password.java
@@ -27,7 +27,9 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Password {
-    public int order();
-    public String message()     default "Password is required";
-    public int messageResId()   default 0;
+    public int order() default 0;
+
+    public String message() default "Password is required";
+
+    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Regex.java b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
index 523b619..023c7df 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Regex.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Regex.java
@@ -29,7 +29,7 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Regex {
-    public int order();
+    public int order() default 0;
 
     public String pattern() default ".";
 
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Required.java b/src/com/mobsandgeeks/saripaar/annotation/Required.java
index 7f075b2..3a3d9bf 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Required.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Required.java
@@ -27,8 +27,11 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Required {
-    public int order();
-    public boolean trim()       default true;
-    public String message()     default "This field is required.";
-    public int messageResId()   default 0;
+    public int order() default Integer.MAX_VALUE;
+
+    public boolean trim() default true;
+
+    public String message() default "This field is required.";
+
+    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Select.java b/src/com/mobsandgeeks/saripaar/annotation/Select.java
index 07c0bfe..a2a7cb5 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Select.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Select.java
@@ -23,14 +23,17 @@
 
 /**
  * Used on a {@link Spinner} to check if the selected item is not the default.
- * 
+ *
  * @author Muhammad Hewedy
  */
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Select {
-    public int order();
-    public int defaultSelection()   default 0;
-    public String message()         default "Select an item.";
-    public int messageResId()       default 0;
+    public int order() default 0;
+
+    public int defaultSelection() default 0;
+
+    public String message() default "Select an item.";
+
+    public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
index e896a98..209a7c5 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/TextRule.java
@@ -14,13 +14,13 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.mobsandgeeks.saripaar.Rules;
-
 /**
  * Specifies constraints such as min length, max length and trim on textual data contained
  * in {@code View}s.
@@ -30,10 +30,15 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface TextRule {
-    public int order();
-    public int minLength()      default 0;
-    public int maxLength()      default Integer.MAX_VALUE;
-    public boolean trim()       default true;
-    public String message()     default Rules.EMPTY_STRING;
-    public int messageResId()   default 0;
+    public int order() default 0;
+
+    public int minLength() default 0;
+
+    public int maxLength() default Integer.MAX_VALUE;
+
+    public boolean trim() default true;
+
+    public String message() default Rules.EMPTY_STRING;
+
+    public int messageResId() default 0;
 }
