diff --git a/build.gradle b/build.gradle
index b0ab333..2d57fb3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.0.0'
+        classpath 'com.android.tools.build:gradle:1.2.3'
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
diff --git a/myapplication/.gitignore b/myapplication/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/myapplication/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/myapplication/build.gradle b/myapplication/build.gradle
new file mode 100644
index 0000000..8001e7d
--- /dev/null
+++ b/myapplication/build.gradle
@@ -0,0 +1,26 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 22
+    buildToolsVersion "22.0.1"
+
+    defaultConfig {
+        applicationId "com.phonenumber.cardsmobile.myapplication"
+        minSdkVersion 19
+        targetSdkVersion 22
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:appcompat-v7:22.2.0'
+    compile project(':saripaar')
+}
diff --git a/myapplication/proguard-rules.pro b/myapplication/proguard-rules.pro
new file mode 100644
index 0000000..3b528f4
--- /dev/null
+++ b/myapplication/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/p.dektev/Documents/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/myapplication/src/androidTest/java/com/phonenumber/cardsmobile/myapplication/ApplicationTest.java b/myapplication/src/androidTest/java/com/phonenumber/cardsmobile/myapplication/ApplicationTest.java
new file mode 100644
index 0000000..65a8f5a
--- /dev/null
+++ b/myapplication/src/androidTest/java/com/phonenumber/cardsmobile/myapplication/ApplicationTest.java
@@ -0,0 +1,13 @@
+package com.phonenumber.cardsmobile.myapplication;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
diff --git a/myapplication/src/main/AndroidManifest.xml b/myapplication/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..2431319
--- /dev/null
+++ b/myapplication/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.phonenumber.cardsmobile.myapplication" >
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme" >
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
new file mode 100644
index 0000000..d1e4417
--- /dev/null
+++ b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
@@ -0,0 +1,114 @@
+package com.phonenumber.cardsmobile.myapplication;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.mobsandgeeks.saripaar.ValidationError;
+import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.annotation.Email;
+import com.mobsandgeeks.saripaar.annotation.Order;
+
+import java.util.List;
+
+public class MainActivity extends AppCompatActivity implements Validator.ValidationListener {
+
+    @Order(1)
+    @Email(ultimate = true)
+    EditText text1;
+
+    @Order(2)
+    @Email(ultimate = false)
+    EditText text2;
+
+    EditText text3;
+    Button button;
+    Validator mValidator;
+
+    TextWatcher mTextWatchertWacher = new TextWatcher() {
+        @Override
+        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+        }
+
+        @Override
+        public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+        }
+
+        @Override
+        public void afterTextChanged(Editable s) {
+            mValidator.validate(false);
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        text1 = (EditText) findViewById(R.id.editText);
+        text2 = (EditText) findViewById(R.id.editText2);
+        text3 = (EditText) findViewById(R.id.editText3);
+
+        text1.addTextChangedListener(mTextWatchertWacher);
+        text2.addTextChangedListener(mTextWatchertWacher);
+        text3.addTextChangedListener(mTextWatchertWacher);
+        button = (Button) findViewById(R.id.button);
+
+        button.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+                mValidator.validate(true);
+            }
+        });
+
+        mValidator = new Validator(this);
+        mValidator.setValidationListener(this);
+        mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        getMenuInflater().inflate(R.menu.menu_main, menu);
+
+
+
+        return true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+
+        //noinspection SimplifiableIfStatement
+        if (id == R.id.action_settings) {
+            return true;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+
+    @Override
+    public void onValidationSucceeded(boolean ultimate) {
+        if (ultimate) {
+            Toast.makeText(this, "Success", Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public void onValidationFailed(List<ValidationError> errors, boolean ultimate) {
+        Toast.makeText(this, ultimate ? "ULTIMATE FAIL" : "FAIL", Toast.LENGTH_SHORT).show();
+    }
+}
diff --git a/myapplication/src/main/res/layout/activity_main.xml b/myapplication/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000..4ec6c35
--- /dev/null
+++ b/myapplication/src/main/res/layout/activity_main.xml
@@ -0,0 +1,41 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context=".MainActivity">
+
+    <EditText
+        android:id="@+id/editText"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true" />
+
+    <EditText
+        android:id="@+id/editText2"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/editText"
+      />
+
+    <EditText
+        android:id="@+id/editText3"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/editText2" />
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Хуярь"
+        android:id="@+id/button"
+        android:layout_below="@+id/editText3"
+        android:layout_centerHorizontal="true" />
+
+
+</RelativeLayout>
diff --git a/myapplication/src/main/res/menu/menu_main.xml b/myapplication/src/main/res/menu/menu_main.xml
new file mode 100644
index 0000000..b1cb908
--- /dev/null
+++ b/myapplication/src/main/res/menu/menu_main.xml
@@ -0,0 +1,6 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools" tools:context=".MainActivity">
+    <item android:id="@+id/action_settings" android:title="@string/action_settings"
+        android:orderInCategory="100" app:showAsAction="never" />
+</menu>
diff --git a/myapplication/src/main/res/mipmap-hdpi/ic_launcher.png b/myapplication/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000..cde69bc
Binary files /dev/null and b/myapplication/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/myapplication/src/main/res/mipmap-mdpi/ic_launcher.png b/myapplication/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000..c133a0c
Binary files /dev/null and b/myapplication/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/myapplication/src/main/res/mipmap-xhdpi/ic_launcher.png b/myapplication/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..bfa42f0
Binary files /dev/null and b/myapplication/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/myapplication/src/main/res/mipmap-xxhdpi/ic_launcher.png b/myapplication/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..324e72c
Binary files /dev/null and b/myapplication/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/myapplication/src/main/res/values-w820dp/dimens.xml b/myapplication/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 0000000..63fc816
--- /dev/null
+++ b/myapplication/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/myapplication/src/main/res/values/dimens.xml b/myapplication/src/main/res/values/dimens.xml
new file mode 100644
index 0000000..47c8224
--- /dev/null
+++ b/myapplication/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/myapplication/src/main/res/values/strings.xml b/myapplication/src/main/res/values/strings.xml
new file mode 100644
index 0000000..4118bcb
--- /dev/null
+++ b/myapplication/src/main/res/values/strings.xml
@@ -0,0 +1,6 @@
+<resources>
+    <string name="app_name">My Application</string>
+
+    <string name="hello_world">Hello world!</string>
+    <string name="action_settings">Settings</string>
+</resources>
diff --git a/myapplication/src/main/res/values/styles.xml b/myapplication/src/main/res/values/styles.xml
new file mode 100644
index 0000000..766ab99
--- /dev/null
+++ b/myapplication/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+    </style>
+
+</resources>
diff --git a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java
index db6a416..46223ef 100644
--- a/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java
+++ b/saripaar-tests/src/main/java/com/mobsandgeeks/saripaar/tests/ui/ConfirmPasswordNoPasswordActivity.java
@@ -60,7 +60,7 @@ protected void onCreate(Bundle savedInstanceState) {
     @Override
     public void onClick(View v) {
         try {
-            mValidator.validate();
+//            mValidator.validate();
         } catch (IllegalStateException e) {
             mResultTextView.setText(R.string.crash);
         }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
index 980ea8e..7f1d77d 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
@@ -44,8 +44,10 @@
      *      this rule is paired.
      */
     protected AnnotationRule(final RULE_ANNOTATION ruleAnnotation) {
-        super(ruleAnnotation != null
-                ? Reflector.getAttributeValue(ruleAnnotation, "sequence", Integer.TYPE) : -1);
+        super(ruleAnnotation != null ?
+                Reflector.getAttributeValue(ruleAnnotation, "sequence", Integer.TYPE) : -1,
+                ruleAnnotation != null ?
+                        Reflector.getAttributeValue(ruleAnnotation, "ultimate", Boolean.TYPE) : false);
         if (ruleAnnotation == null) {
             throw new IllegalArgumentException("'ruleAnnotation' cannot be null.");
         }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
index ae3d092..423d91f 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
@@ -28,6 +28,7 @@
  */
 public abstract class Rule<VALIDATABLE> {
     protected final int mSequence;
+    protected final boolean mIsUltimate;
 
     /**
      * Constructor.
@@ -35,9 +36,14 @@
      * @param sequence  The sequence number for this {@link com.mobsandgeeks.saripaar.Rule}.
      */
     protected Rule(final int sequence) {
-        mSequence = sequence;
+        this(sequence, false);
     }
 
+
+    protected Rule(final int sequence, final boolean ultimate) {
+        mSequence = sequence;
+        mIsUltimate = ultimate;
+    }
     /**
      * Checks if the rule is valid.
      *
@@ -66,4 +72,13 @@ protected Rule(final int sequence) {
     public final int getSequence() {
         return mSequence;
     }
+
+    /**
+     * Returns the ultimateness of the {@link com.mobsandgeeks.saripaar.Rule}.
+     *
+     * @return The ultimateness.
+     */
+    public final boolean isUltimate() {
+        return mIsUltimate;
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index 6bf1888..aebc972 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -67,50 +67,50 @@
  * {@link android.view.View}s in the given controller instance. Usually, an
  * {@link android.app.Activity} or a {@link android.app.Fragment}. However, it can also be used
  * with other controller classes that contain references to {@link android.view.View} objects.
- * <p>
+ * <p/>
  * The {@link com.mobsandgeeks.saripaar.Validator} is capable of performing validations in two
  * modes,
- *  <ol>
- *      <li>{@link Mode#BURST}, where all the views are validated and all errors are reported
- *          via the callback at once. Fields need not be ordered using the
- *          {@link com.mobsandgeeks.saripaar.annotation.Order} annotation in {@code BURST} mode.
- *      </li>
- *      <li>{@link Mode#IMMEDIATE}, in which the validation stops and the error is reported as soon
- *          as a {@link com.mobsandgeeks.saripaar.Rule} fails. To use this mode, the fields SHOULD
- *          BE ordered using the {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
- *      </li>
- *  </ol>
- * <p>
+ * <ol>
+ * <li>{@link Mode#BURST}, where all the views are validated and all errors are reported
+ * via the callback at once. Fields need not be ordered using the
+ * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation in {@code BURST} mode.
+ * </li>
+ * <li>{@link Mode#IMMEDIATE}, in which the validation stops and the error is reported as soon
+ * as a {@link com.mobsandgeeks.saripaar.Rule} fails. To use this mode, the fields SHOULD
+ * BE ordered using the {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
+ * </li>
+ * </ol>
+ * <p/>
  * There are three flavors of the {@code validate()} method.
  * <ol>
- *      <li>{@link #validate()}, no frills regular validation that validates all
- *          {@link android.view.View}s.
- *      </li>
- *      <li>{@link #validateTill(android.view.View)}, validates all {@link android.view.View}s till
- *          the one that is specified.
- *      </li>
- *      <li>{@link #validateBefore(android.view.View)}, validates all {@link android.view.View}s
- *          before the specified {@link android.view.View}.
- *      </li>
+ * <li>{@link #validate()}, no frills regular validation that validates all
+ * {@link android.view.View}s.
+ * </li>
+ * <li>{@link #validateTill(android.view.View)}, validates all {@link android.view.View}s till
+ * the one that is specified.
+ * </li>
+ * <li>{@link #validateBefore(android.view.View)}, validates all {@link android.view.View}s
+ * before the specified {@link android.view.View}.
+ * </li>
  * </ol>
- * <p>
+ * <p/>
  * It is imperative that the fields are ordered while making the
  * {@link #validateTill(android.view.View)} and {@link #validateBefore(android.view.View)} method
  * calls.
- * <p>
+ * <p/>
  * The {@link com.mobsandgeeks.saripaar.Validator} requires a
  * {@link com.mobsandgeeks.saripaar.Validator.ValidationListener} that reports the outcome of the
  * validation.
  * <ul>
- *      <li> {@link com.mobsandgeeks.saripaar.Validator.ValidationListener#onValidationSucceeded()}
- *          is called if all {@link com.mobsandgeeks.saripaar.Rule}s pass.
- *      </li>
- *      <li>
- *          The {@link Validator.ValidationListener#onValidationFailed(java.util.List)}
- *          callback reports errors caused by failures. In {@link Mode#IMMEDIATE} this callback will
- *          contain just one instance of the {@link com.mobsandgeeks.saripaar.ValidationError}
- *          object.
- *      </li>
+ * <li> {@link com.mobsandgeeks.saripaar.Validator.ValidationListener#onValidationSucceeded()}
+ * is called if all {@link com.mobsandgeeks.saripaar.Rule}s pass.
+ * </li>
+ * <li>
+ * The {@link Validator.ValidationListener#onValidationFailed(java.util.List)}
+ * callback reports errors caused by failures. In {@link Mode#IMMEDIATE} this callback will
+ * contain just one instance of the {@link com.mobsandgeeks.saripaar.ValidationError}
+ * object.
+ * </li>
  * </ul>
  *
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
@@ -124,8 +124,8 @@
 
     // Holds adapter entries that are mapped to corresponding views.
     private static final
-            Map<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>> REGISTERED_ADAPTERS =
-                    new HashMap<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>>();
+    Map<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>> REGISTERED_ADAPTERS =
+            new HashMap<Class<? extends View>, HashMap<Class<?>, ViewDataAdapter>>();
 
     // Attributes
     private Object mController;
@@ -142,8 +142,8 @@
     /**
      * Constructor.
      *
-     * @param controller  The class containing {@link android.view.View}s to be validated. Usually,
-     *      an {@link android.app.Activity} or a {@link android.app.Fragment}.
+     * @param controller The class containing {@link android.view.View}s to be validated. Usually,
+     *                   an {@link android.app.Activity} or a {@link android.app.Fragment}.
      */
     public Validator(final Object controller) {
         assertNotNull(controller, "controller");
@@ -160,11 +160,11 @@ public Validator(final Object controller) {
      * {@link android.widget.EditText}. Register custom annotations for
      * {@link android.widget.TextView}s that validates {@link java.lang.Double},
      * {@link java.lang.Float}, {@link java.lang.Integer} and {@link java.lang.String} types.
-     * <p>
+     * <p/>
      * For registering rule annotations for other view types see,
      * {@link #registerAdapter(Class, com.mobsandgeeks.saripaar.adapter.ViewDataAdapter)}.
      *
-     * @param ruleAnnotation  A rule {@link java.lang.annotation.Annotation}.
+     * @param ruleAnnotation A rule {@link java.lang.annotation.Annotation}.
      */
     public static void registerAnnotation(final Class<? extends Annotation> ruleAnnotation) {
         SARIPAAR_REGISTRY.register(ruleAnnotation);
@@ -173,15 +173,14 @@ public static void registerAnnotation(final Class<? extends Annotation> ruleAnno
     /**
      * An elaborate method for registering custom rule annotations.
      *
-     * @param annotation  The annotation that you want to register.
-     * @param viewType  The {@link android.view.View} type.
-     * @param viewDataAdapter  An instance of the
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} for your
-     *      {@link android.view.View}.
-     *
-     * @param <VIEW>  The {@link android.view.View} for which the
-     *      {@link java.lang.annotation.Annotation} and
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
+     * @param annotation      The annotation that you want to register.
+     * @param viewType        The {@link android.view.View} type.
+     * @param viewDataAdapter An instance of the
+     *                        {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} for your
+     *                        {@link android.view.View}.
+     * @param <VIEW>          The {@link android.view.View} for which the
+     *                        {@link java.lang.annotation.Annotation} and
+     *                        {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
      */
     public static <VIEW extends View> void registerAnnotation(
             final Class<? extends Annotation> annotation, final Class<VIEW> viewType,
@@ -196,12 +195,11 @@ public static void registerAnnotation(final Class<? extends Annotation> ruleAnno
      * Registers a {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} for the given
      * {@link android.view.View}.
      *
-     * @param viewType  The {@link android.view.View} for which a
-     *      {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
-     * @param viewDataAdapter  A {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} instance.
-     *
-     * @param <VIEW>  The {@link android.view.View} type.
-     * @param <DATA_TYPE>  The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} type.
+     * @param viewType        The {@link android.view.View} for which a
+     *                        {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} is being registered.
+     * @param viewDataAdapter A {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} instance.
+     * @param <VIEW>          The {@link android.view.View} type.
+     * @param <DATA_TYPE>     The {@link com.mobsandgeeks.saripaar.adapter.ViewDataAdapter} type.
      */
     public static <VIEW extends View, DATA_TYPE> void registerAdapter(
             final Class<VIEW> viewType, final ViewDataAdapter<VIEW, DATA_TYPE> viewDataAdapter) {
@@ -225,8 +223,8 @@ public static void registerAnnotation(final Class<? extends Annotation> ruleAnno
      * Set a {@link com.mobsandgeeks.saripaar.Validator.ValidationListener} to the
      * {@link com.mobsandgeeks.saripaar.Validator}.
      *
-     * @param validationListener  A {@link com.mobsandgeeks.saripaar.Validator.ValidationListener}
-     *      instance. null throws an {@link java.lang.IllegalArgumentException}.
+     * @param validationListener A {@link com.mobsandgeeks.saripaar.Validator.ValidationListener}
+     *                           instance. null throws an {@link java.lang.IllegalArgumentException}.
      */
     public void setValidationListener(final ValidationListener validationListener) {
         assertNotNull(validationListener, "validationListener");
@@ -237,8 +235,8 @@ public void setValidationListener(final ValidationListener validationListener) {
      * Set a {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction} to the
      * {@link com.mobsandgeeks.saripaar.Validator}.
      *
-     * @param viewValidatedAction  A {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction}
-     *      instance.
+     * @param viewValidatedAction A {@link com.mobsandgeeks.saripaar.Validator.ViewValidatedAction}
+     *                            instance.
      */
     public void setViewValidatedAction(final ViewValidatedAction viewValidatedAction) {
         this.mViewValidatedAction = viewValidatedAction;
@@ -248,8 +246,8 @@ public void setViewValidatedAction(final ViewValidatedAction viewValidatedAction
      * Set the validation {@link com.mobsandgeeks.saripaar.Validator.Mode} for the current
      * {@link com.mobsandgeeks.saripaar.Validator} instance.
      *
-     * @param validationMode  {@link Mode#BURST} or {@link Mode#IMMEDIATE}, null throws an
-     *      {@link java.lang.IllegalArgumentException}.
+     * @param validationMode {@link Mode#BURST} or {@link Mode#IMMEDIATE}, null throws an
+     *                       {@link java.lang.IllegalArgumentException}.
      */
     public void setValidationMode(final Mode validationMode) {
         assertNotNull(validationMode, "validationMode");
@@ -271,8 +269,8 @@ public Mode getValidationMode() {
      * {@link android.view.View} fields must be ordered using the
      * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
      */
-    public void validate() {
-        validate(false);
+    public void validate(boolean ultimate) {
+        validate(false, ultimate);
     }
 
     /**
@@ -280,10 +278,10 @@ public void validate() {
      * parameter. {@link android.view.View} fields MUST be ordered using the
      * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
      *
-     * @param view  A {@link android.view.View}.
+     * @param view A {@link android.view.View}.
      */
-    public void validateBefore(final View view) {
-        validateBefore(view, false);
+    public void validateBefore(final View view, boolean ultimate) {
+        validateBefore(view, false, ultimate);
     }
 
     /**
@@ -291,10 +289,10 @@ public void validateBefore(final View view) {
      * parameter. {@link android.view.View} fields MUST be ordered using the
      * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
      *
-     * @param view  A {@link android.view.View}.
+     * @param view A {@link android.view.View}.
      */
-    public void validateTill(final View view) {
-        validateTill(view, false);
+    public void validateTill(final View view, boolean ultimate) {
+        validateTill(view, false, ultimate);
     }
 
     /**
@@ -304,17 +302,17 @@ public void validateTill(final View view) {
      * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation. Asynchronous calls will cancel
      * any pending or ongoing asynchronous validation and start a new one.
      *
-     * @param async  true if asynchronous, false otherwise.
+     * @param async true if asynchronous, false otherwise.
      */
-    public void validate(final boolean async) {
+    public void validate(final boolean async, boolean ultimate) {
         createRulesSafelyAndLazily(false);
 
         View lastView = getLastView();
         if (Mode.BURST.equals(mValidationMode)) {
-            validateUnorderedFieldsWithCallbackTill(lastView, async);
+            validateUnorderedFieldsWithCallbackTill(lastView, async, ultimate);
         } else if (Mode.IMMEDIATE.equals(mValidationMode)) {
             String reasonSuffix = String.format("in %s mode.", Mode.IMMEDIATE.toString());
-            validateOrderedFieldsWithCallbackTill(lastView, reasonSuffix, async);
+            validateOrderedFieldsWithCallbackTill(lastView, reasonSuffix, async, ultimate);
         } else {
             throw new RuntimeException("This should never happen!");
         }
@@ -327,13 +325,13 @@ public void validate(final boolean async) {
      * any pending or ongoing asynchronous validation and start a new one.
      *
      * @param view  A {@link android.view.View}.
-     * @param async  true if asynchronous, false otherwise.
+     * @param async true if asynchronous, false otherwise.
      */
-    public void validateBefore(final View view, final boolean async) {
+    public void validateBefore(final View view, final boolean async, boolean ultimate) {
         createRulesSafelyAndLazily(false);
         View previousView = getViewBefore(view);
         validateOrderedFieldsWithCallbackTill(previousView, "when using 'validateBefore(View)'.",
-                async);
+                async, ultimate);
     }
 
     /**
@@ -343,10 +341,10 @@ public void validateBefore(final View view, final boolean async) {
      * any pending or ongoing asynchronous validation and start a new one.
      *
      * @param view  A {@link android.view.View}.
-     * @param async  true if asynchronous, false otherwise.
+     * @param async true if asynchronous, false otherwise.
      */
-    public void validateTill(final View view, final boolean async) {
-        validateOrderedFieldsWithCallbackTill(view, "when using 'validateTill(View)'.", async);
+    public void validateTill(final View view, final boolean async, boolean ultimate) {
+        validateOrderedFieldsWithCallbackTill(view, "when using 'validateTill(View)'.", async, ultimate);
     }
 
     /**
@@ -378,12 +376,11 @@ public boolean cancelAsync() {
     /**
      * Add one or more {@link com.mobsandgeeks.saripaar.QuickRule}s for a {@link android.view.View}.
      *
-     * @param view  A {@link android.view.View} for which
-     *      {@link com.mobsandgeeks.saripaar.QuickRule}(s) are to be added.
-     * @param quickRules  Varargs of {@link com.mobsandgeeks.saripaar.QuickRule}s.
-     *
-     * @param <VIEW>  The {@link android.view.View} type for which the
-     *      {@link com.mobsandgeeks.saripaar.QuickRule}s are being registered.
+     * @param view       A {@link android.view.View} for which
+     *                   {@link com.mobsandgeeks.saripaar.QuickRule}(s) are to be added.
+     * @param quickRules Varargs of {@link com.mobsandgeeks.saripaar.QuickRule}s.
+     * @param <VIEW>     The {@link android.view.View} type for which the
+     *                   {@link com.mobsandgeeks.saripaar.QuickRule}s are being registered.
      */
     public <VIEW extends View> void put(final VIEW view, final QuickRule<VIEW>... quickRules) {
         assertNotNull(view, "view");
@@ -421,7 +418,7 @@ public boolean cancelAsync() {
     /**
      * Remove all {@link com.mobsandgeeks.saripaar.Rule}s for the given {@link android.view.View}.
      *
-     * @param view  The {@link android.view.View} whose rules should be removed.
+     * @param view The {@link android.view.View} whose rules should be removed.
      */
     public void removeRules(final View view) {
         assertNotNull(view, "view");
@@ -517,7 +514,7 @@ private void createRulesSafelyAndLazily(final boolean addingQuickRules) {
     }
 
     private boolean isSaripaarAnnotatedField(final Field field,
-            final Set<Class<? extends Annotation>> registeredAnnotations) {
+                                             final Set<Class<? extends Annotation>> registeredAnnotations) {
         boolean hasOrderAnnotation = field.getAnnotation(Order.class) != null;
         boolean hasSaripaarAnnotation = false;
 
@@ -560,7 +557,7 @@ private boolean isSaripaarAnnotatedField(final Field field,
     }
 
     private Pair<Rule, ViewDataAdapter> getRuleAdapterPair(final Annotation saripaarAnnotation,
-            final Field viewField) {
+                                                           final Field viewField) {
         final Class<? extends Annotation> annotationType = saripaarAnnotation.annotationType();
         final Class<?> viewFieldType = viewField.getType();
         final Class<?> ruleDataType = Reflector.getRuleDataType(saripaarAnnotation);
@@ -589,7 +586,7 @@ private boolean isSaripaarAnnotatedField(final Field field,
     }
 
     private ViewDataAdapter getDataAdapter(final Class<? extends Annotation> annotationType,
-            final Class<?> viewFieldType, final Class<?> adapterDataType) {
+                                           final Class<?> viewFieldType, final Class<?> adapterDataType) {
 
         // Get an adapter from the stock registry
         ViewDataAdapter dataAdapter = SARIPAAR_REGISTRY.getDataAdapter(
@@ -633,31 +630,31 @@ private View getView(final Field field) {
         return view;
     }
 
-    private void validateUnorderedFieldsWithCallbackTill(final View view, final boolean async) {
-        validateFieldsWithCallbackTill(view, false, null, async);
+    private void validateUnorderedFieldsWithCallbackTill(final View view, final boolean async, boolean ultimate) {
+        validateFieldsWithCallbackTill(view, false, null, async, ultimate);
     }
 
     private void validateOrderedFieldsWithCallbackTill(final View view, final String reasonSuffix,
-            final boolean async) {
-        validateFieldsWithCallbackTill(view, true, reasonSuffix, async);
+                                                       final boolean async, boolean ultimate) {
+        validateFieldsWithCallbackTill(view, true, reasonSuffix, async, ultimate);
     }
 
     private void validateFieldsWithCallbackTill(final View view, final boolean orderedFields,
-            final String reasonSuffix, final boolean async) {
+                                                final String reasonSuffix, final boolean async, boolean ultimate) {
         createRulesSafelyAndLazily(false);
         if (async) {
             if (mAsyncValidationTask != null) {
                 mAsyncValidationTask.cancel(true);
             }
-            mAsyncValidationTask = new AsyncValidationTask(view, orderedFields, reasonSuffix);
+            mAsyncValidationTask = new AsyncValidationTask(view, orderedFields, reasonSuffix, ultimate);
             mAsyncValidationTask.execute((Void[]) null);
         } else {
-            triggerValidationListenerCallback(validateTill(view, orderedFields, reasonSuffix));
+            triggerValidationListenerCallback(validateTill(view, orderedFields, reasonSuffix, ultimate), ultimate);
         }
     }
 
     private synchronized ValidationReport validateTill(final View view,
-            final boolean requiresOrderedRules, final String reasonSuffix) {
+                                                       final boolean requiresOrderedRules, final String reasonSuffix, boolean ultimate) {
         // Do we need ordered rules?
         if (requiresOrderedRules) {
             assertOrderedFields(mOrderedFields, reasonSuffix);
@@ -667,16 +664,16 @@ private synchronized ValidationReport validateTill(final View view,
         assertNotNull(mValidationListener, "validationListener");
 
         // Everything good. Bingo! validate ;)
-        return getValidationReport(view, mViewRulesMap, mValidationMode);
+        return getValidationReport(view, mViewRulesMap, mValidationMode, ultimate);
     }
 
-    private void triggerValidationListenerCallback(final ValidationReport validationReport) {
+    private void triggerValidationListenerCallback(final ValidationReport validationReport, boolean ultimate) {
         final List<ValidationError> validationErrors = validationReport.errors;
 
         if (validationErrors.size() == 0 && !validationReport.hasMoreErrors) {
-            mValidationListener.onValidationSucceeded();
+            mValidationListener.onValidationSucceeded(ultimate);
         } else {
-            mValidationListener.onValidationFailed(validationErrors);
+            mValidationListener.onValidationFailed(validationErrors, ultimate);
         }
     }
 
@@ -684,14 +681,14 @@ private void assertOrderedFields(final boolean orderedRules, final String reason
         if (!orderedRules) {
             String message = String.format(
                     "Rules are unordered, all view fields should be ordered "
-                    + "using the '@Order' annotation " + reasonSuffix);
+                            + "using the '@Order' annotation " + reasonSuffix);
             throw new IllegalStateException(message);
         }
     }
 
     private ValidationReport getValidationReport(final View targetView,
-            final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap,
-                    final Mode validationMode) {
+                                                 final Map<View, ArrayList<Pair<Rule, ViewDataAdapter>>> viewRulesMap,
+                                                 final Mode validationMode, boolean ultimate) {
 
         final List<ValidationError> validationErrors = new ArrayList<ValidationError>();
         final Set<View> views = viewRulesMap.keySet();
@@ -712,10 +709,9 @@ private ValidationReport getValidationReport(final View targetView,
             for (int i = 0; i < nRules; i++) {
 
                 // Validate only views that are visible and enabled
-                if (view.isShown() && view.isEnabled()) {
+                if (view.isShown() && view.isEnabled() && !(!view.isFocused() && !ultimate)) {
                     Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
-                    Rule failedRule = validateViewWithRule(
-                            view, ruleAdapterPair.first, ruleAdapterPair.second);
+                    Rule failedRule = validateViewWithRule(view, ruleAdapterPair.first, ruleAdapterPair.second, ultimate);
                     boolean isLastRuleForView = nRules == i + 1;
 
                     if (failedRule != null) {
@@ -753,7 +749,7 @@ private ValidationReport getValidationReport(final View targetView,
     }
 
     private Rule validateViewWithRule(final View view, final Rule rule,
-            final ViewDataAdapter dataAdapter) {
+                                      final ViewDataAdapter dataAdapter, boolean ultimate) {
 
         boolean valid = false;
         if (rule instanceof AnnotationRule) {
@@ -761,20 +757,29 @@ private Rule validateViewWithRule(final View view, final Rule rule,
 
             try {
                 data = dataAdapter.getData(view);
-                valid = rule.isValid(data);
+
+                if (ultimate) {
+                    valid = rule.isValid(data);
+                } else {
+                    valid = rule.isUltimate() || rule.isValid(data);
+                }
             } catch (ConversionException e) {
                 valid = false;
                 e.printStackTrace();
             }
         } else if (rule instanceof QuickRule) {
-            valid = rule.isValid(view);
+            if (ultimate) {
+                valid = rule.isValid(view);
+            } else {
+                valid = rule.isUltimate() || rule.isValid(view);
+            }
         }
 
         return valid ? null : rule;
     }
 
     private void triggerViewValidatedCallback(final ViewValidatedAction viewValidatedAction,
-            final View view) {
+                                              final View view) {
         boolean isOnMainThread = Looper.myLooper() == Looper.getMainLooper();
         if (isOnMainThread) {
             viewValidatedAction.onAllRulesPassed(view);
@@ -834,15 +839,15 @@ private View getViewBefore(final View view) {
         /**
          * Called when all {@link com.mobsandgeeks.saripaar.Rule}s pass.
          */
-        void onValidationSucceeded();
+        void onValidationSucceeded(boolean ultimate);
 
         /**
          * Called when one or several {@link com.mobsandgeeks.saripaar.Rule}s fail.
          *
-         * @param errors  List containing references to the {@link android.view.View}s and
-         *      {@link com.mobsandgeeks.saripaar.Rule}s that failed.
+         * @param errors List containing references to the {@link android.view.View}s and
+         *               {@link com.mobsandgeeks.saripaar.Rule}s that failed.
          */
-        void onValidationFailed(List<ValidationError> errors);
+        void onValidationFailed(List<ValidationError> errors, boolean ultimate);
     }
 
     /**
@@ -857,7 +862,7 @@ private View getViewBefore(final View view) {
         /**
          * Called when all rules associated with the {@link android.view.View} passes.
          *
-         * @param view  The {@link android.view.View} that has passed validation.
+         * @param view The {@link android.view.View} that has passed validation.
          */
         void onAllRulesPassed(View view);
     }
@@ -898,22 +903,24 @@ private View getViewBefore(final View view) {
         private View mView;
         private boolean mOrderedRules;
         private String mReasonSuffix;
+        private boolean mUltimate;
 
         public AsyncValidationTask(final View view, final boolean orderedRules,
-                final String reasonSuffix) {
+                                   final String reasonSuffix, final boolean ultimate) {
             this.mView = view;
             this.mOrderedRules = orderedRules;
             this.mReasonSuffix = reasonSuffix;
+            mUltimate = ultimate;
         }
 
         @Override
         protected ValidationReport doInBackground(final Void... params) {
-            return validateTill(mView, mOrderedRules, mReasonSuffix);
+            return validateTill(mView, mOrderedRules, mReasonSuffix, mUltimate);
         }
 
         @Override
         protected void onPostExecute(final ValidationReport validationReport) {
-            triggerValidationListenerCallback(validationReport);
+            triggerValidationListenerCallback(validationReport, mUltimate);
         }
     }
 
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
index 0e937ab..e270f01 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Email.java
@@ -34,4 +34,5 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Invalid email";
+    boolean ultimate() default false;
 }
diff --git a/settings.gradle b/settings.gradle
index d14b19f..86f5e42 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include ':saripaar', ':saripaar-tests', ':saripaar-showcase'
+include ':saripaar', ':saripaar-showcase', ':myapplication'
