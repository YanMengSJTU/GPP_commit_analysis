diff --git a/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
index c839a17..d6b34fc 100644
--- a/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
+++ b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
@@ -14,21 +14,28 @@
 import com.mobsandgeeks.saripaar.Rule;
 import com.mobsandgeeks.saripaar.ValidationError;
 import com.mobsandgeeks.saripaar.Validator;
+import com.mobsandgeeks.saripaar.adapter.ViewDataAdapter;
 import com.mobsandgeeks.saripaar.annotation.*;
+import com.mobsandgeeks.saripaar.exception.ConversionException;
 
+import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
 
 public class MainActivity extends AppCompatActivity implements Validator.ValidationListener {
 
-    @Order(1)
-    @Pattern(regex = "^[А-яЁё]+(([\\s-][А-яЁё]+)*)$")
+//    @Order(1)
+//    @Pattern(regex = "^[А-яЁё]+(([\\s-][А-яЁё]+)*)$")
     EditText text1;
 
-    @Order(2)
-    @Min(value = 2)
+//    @Order(2)
+//    @Min(value = 2)
     EditText text2;
 
+    @Order(1)
+    @Future(strict = false, precision = Future.Precision.MONTH, offset = 1, flags = Rule.FLAG_ULTIMATE)
     EditText text3;
+
     Button button;
     Validator mValidator;
 
@@ -71,6 +78,8 @@ public void onFocusChange(View v, boolean hasFocus) {
         text1.addTextChangedListener(mTextWatchertWacher);
         text2.addTextChangedListener(mTextWatchertWacher);
         text3.addTextChangedListener(mTextWatchertWacher);
+
+        text3.setTag("Text 2");
         button = (Button) findViewById(R.id.button);
 
         button.setOnClickListener(new View.OnClickListener() {
@@ -81,6 +90,19 @@ public void onClick(View v) {
             }
         });
 
+        Validator.registerAnnotation(Future.class, EditText.class, new ViewDataAdapter<EditText, Date>() {
+            @Override
+            public Date getData(EditText view) throws ConversionException {
+                String formattedDateString = view.getText().toString();
+                String dateString = formattedDateString.replaceAll("[^\\d]", "");
+
+                int month = Integer.parseInt(dateString.substring(0, 2));
+                int year = Integer.parseInt(dateString.substring(2)) + 2000;
+
+                return new GregorianCalendar(year, month, 1).getTime();
+            }
+        });
+
         mValidator = new Validator(this);
         mValidator.setValidationListener(this);
         mValidator.setValidationMode(Validator.Mode.IMMEDIATE);
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index d177d26..dd836e2 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -767,6 +767,10 @@ private Rule validateViewWithRule(final View view, final Rule rule,
             return null;
         }
 
+        if (!ultimate && rule.isUltimate()) {
+            return null;
+        }
+
         boolean valid = false;
         if (rule instanceof AnnotationRule) {
             Object data;
@@ -774,21 +778,13 @@ private Rule validateViewWithRule(final View view, final Rule rule,
             try {
                 data = dataAdapter.getData(view);
 
-                if (ultimate) {
-                    valid = rule.isValid(data);
-                } else {
-                    valid = rule.isUltimate() || rule.isValid(data);
-                }
+                valid = rule.isValid(data);
             } catch (ConversionException e) {
                 valid = false;
                 e.printStackTrace();
             }
         } else if (rule instanceof QuickRule) {
-            if (ultimate) {
-                valid = rule.isValid(view);
-            } else {
-                valid = rule.isUltimate() || rule.isValid(view);
-            }
+            valid = rule.isValid(view);
         }
 
         return valid ? null : rule;
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
index ce1e051..0de1a4e 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Future.java
@@ -29,10 +29,17 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
 public @interface Future {
-    public int sequence()       default -1;
-    public int messageResId()   default -1;
-    public String message()     default "Date should be in future";
+    public int sequence()        default -1;
+    public int messageResId()    default -1;
+    public String message()      default "Date should be in future";
 
-    public int flags()          default 0;
-    public int errorCode()      default -1;
+    public Precision precision() default Precision.YEAR;
+    public int offset()          default 0;
+    public boolean strict()      default true;
+    public int flags()           default 0;
+    public int errorCode()       default -1;
+
+    public enum Precision {
+        DAY, MONTH, YEAR;
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
index f5026cb..32ee82a 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/rule/FutureRule.java
@@ -17,7 +17,9 @@
 import com.mobsandgeeks.saripaar.AnnotationRule;
 import com.mobsandgeeks.saripaar.annotation.Future;
 
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 
 /**
  * @author Ragunath Jawahar {@literal <rj@mobsandgeeks.com>}
@@ -25,12 +27,48 @@
  */
 public class FutureRule extends AnnotationRule<Future, Date> {
 
+    private Calendar mSrcCalendar;
+    private Calendar mDestCalendar;
+
     protected FutureRule(final Future future) {
         super(future);
     }
 
     @Override
     public boolean isValid(final Date data) {
-        return false;
+        boolean strict = mRuleAnnotation.strict();
+        Future.Precision precision = mRuleAnnotation.precision();
+        int offset = mRuleAnnotation.offset();
+
+        Calendar currentCalendar = new GregorianCalendar();
+
+        Calendar passedCalendar = new GregorianCalendar();
+        passedCalendar.setTime(data);
+
+        switch (precision) {
+            case DAY:
+                mDestCalendar = new GregorianCalendar(currentCalendar.get(Calendar.YEAR),
+                        currentCalendar.get(Calendar.MONTH), currentCalendar.get(Calendar.DAY_OF_MONTH));
+                mSrcCalendar = new GregorianCalendar(passedCalendar.get(Calendar.YEAR),
+                        passedCalendar.get(Calendar.MONTH), passedCalendar.get(Calendar.DAY_OF_MONTH));
+                mDestCalendar.add(Calendar.DAY_OF_MONTH, offset);
+                break;
+            case MONTH:
+                mDestCalendar = new GregorianCalendar(currentCalendar.get(Calendar.YEAR),
+                        currentCalendar.get(Calendar.MONTH), 1);
+                mSrcCalendar = new GregorianCalendar(passedCalendar.get(Calendar.YEAR),
+                        passedCalendar.get(Calendar.MONTH), 1);
+                mDestCalendar.add(Calendar.MONTH, offset);
+                break;
+            case YEAR:
+                mDestCalendar = new GregorianCalendar(currentCalendar.get(Calendar.YEAR), 1, 1);
+                mSrcCalendar = new GregorianCalendar(passedCalendar.get(Calendar.YEAR), 1, 1);
+                mDestCalendar.add(Calendar.YEAR, offset);
+                break;
+        }
+
+        long diff = mSrcCalendar.getTimeInMillis() - mDestCalendar.getTimeInMillis();
+
+        return strict ? diff > 0 : diff >= 0;
     }
 }
