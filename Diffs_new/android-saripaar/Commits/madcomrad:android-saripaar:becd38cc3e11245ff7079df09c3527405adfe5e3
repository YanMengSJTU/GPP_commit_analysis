diff --git a/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
index d1e4417..91a85e4 100644
--- a/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
+++ b/myapplication/src/main/java/com/phonenumber/cardsmobile/myapplication/MainActivity.java
@@ -11,21 +11,22 @@
 import android.widget.EditText;
 import android.widget.Toast;
 
+import com.mobsandgeeks.saripaar.Rule;
 import com.mobsandgeeks.saripaar.ValidationError;
 import com.mobsandgeeks.saripaar.Validator;
-import com.mobsandgeeks.saripaar.annotation.Email;
-import com.mobsandgeeks.saripaar.annotation.Order;
+import com.mobsandgeeks.saripaar.annotation.*;
 
 import java.util.List;
 
 public class MainActivity extends AppCompatActivity implements Validator.ValidationListener {
 
     @Order(1)
-    @Email(ultimate = true)
+    @Min(value = 2)
+    @Max(value = 100, flags = Rule.FLAG_FOCUS_LOST)
     EditText text1;
 
     @Order(2)
-    @Email(ultimate = false)
+    @Min(value = 2)
     EditText text2;
 
     EditText text3;
@@ -57,6 +58,17 @@ protected void onCreate(Bundle savedInstanceState) {
         text2 = (EditText) findViewById(R.id.editText2);
         text3 = (EditText) findViewById(R.id.editText3);
 
+        text1.setTag("Text 1");
+        text1.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (!hasFocus) {
+                    mValidator.validateOnly(v);
+                }
+            }
+        });
+        text2.setTag("Text 2");
+
         text1.addTextChangedListener(mTextWatchertWacher);
         text2.addTextChangedListener(mTextWatchertWacher);
         text3.addTextChangedListener(mTextWatchertWacher);
@@ -109,6 +121,6 @@ public void onValidationSucceeded(boolean ultimate) {
 
     @Override
     public void onValidationFailed(List<ValidationError> errors, boolean ultimate) {
-        Toast.makeText(this, ultimate ? "ULTIMATE FAIL" : "FAIL", Toast.LENGTH_SHORT).show();
+        Toast.makeText(this, (ultimate ? "ULTIMATE FAIL" : "FAIL") + errors.get(0).getView().getTag().toString(), Toast.LENGTH_SHORT).show();
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
index 7f1d77d..6bec97b 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/AnnotationRule.java
@@ -36,6 +36,8 @@
 
     protected final RULE_ANNOTATION mRuleAnnotation;
 
+    private String mMessage;
+
     /**
      * Constructor. It is mandatory that all subclasses MUST have a constructor with the same
      * signature.
@@ -47,7 +49,7 @@ protected AnnotationRule(final RULE_ANNOTATION ruleAnnotation) {
         super(ruleAnnotation != null ?
                 Reflector.getAttributeValue(ruleAnnotation, "sequence", Integer.TYPE) : -1,
                 ruleAnnotation != null ?
-                        Reflector.getAttributeValue(ruleAnnotation, "ultimate", Boolean.TYPE) : false);
+                        Reflector.getAttributeValue(ruleAnnotation, "flags", Integer.TYPE) : 0);
         if (ruleAnnotation == null) {
             throw new IllegalArgumentException("'ruleAnnotation' cannot be null.");
         }
@@ -59,6 +61,10 @@ protected AnnotationRule(final RULE_ANNOTATION ruleAnnotation) {
      */
     @Override
     public String getMessage(final Context context) {
+        if (mMessage != null) {
+            return mMessage;
+        }
+
         final int messageResId = Reflector.getAttributeValue(mRuleAnnotation, "messageResId",
                 Integer.class);
 
@@ -66,4 +72,14 @@ public String getMessage(final Context context) {
                 ? context.getString(messageResId)
                 : Reflector.getAttributeValue(mRuleAnnotation, "message", String.class);
     }
+
+    @Override
+    public void setMessage(String message) {
+        mMessage = message;
+    }
+
+    @Override
+    public int getErrorCode() {
+        return Reflector.getAttributeValue(mRuleAnnotation, "errorCode", Integer.class);
+    }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
index 423d91f..a216cc6 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Rule.java
@@ -27,8 +27,12 @@
  * @since 1.0
  */
 public abstract class Rule<VALIDATABLE> {
+
+    public static final int FLAG_ULTIMATE = 1;
+    public static final int FLAG_FOCUS_LOST = 3;
+
     protected final int mSequence;
-    protected final boolean mIsUltimate;
+    protected final int mFlags;
 
     /**
      * Constructor.
@@ -36,13 +40,13 @@
      * @param sequence  The sequence number for this {@link com.mobsandgeeks.saripaar.Rule}.
      */
     protected Rule(final int sequence) {
-        this(sequence, false);
+        this(sequence, 0);
     }
 
 
-    protected Rule(final int sequence, final boolean ultimate) {
+    protected Rule(final int sequence, final int flags) {
         mSequence = sequence;
-        mIsUltimate = ultimate;
+        mFlags = flags;
     }
     /**
      * Checks if the rule is valid.
@@ -79,6 +83,16 @@ public final int getSequence() {
      * @return The ultimateness.
      */
     public final boolean isUltimate() {
-        return mIsUltimate;
+        return (mFlags & FLAG_ULTIMATE) != 0;
+    }
+
+    public final boolean isValidateOnFocusLost() {
+        return (mFlags & FLAG_FOCUS_LOST) != 0;
+    }
+
+    public abstract int getErrorCode();
+
+    public void setMessage(String message) {
+        
     }
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
index aebc972..31ee1fd 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/Validator.java
@@ -138,6 +138,7 @@
     private Handler mViewValidatedActionHandler;
     private ValidationListener mValidationListener;
     private AsyncValidationTask mAsyncValidationTask;
+    private View mTargetView;
 
     /**
      * Constructor.
@@ -270,9 +271,16 @@ public Mode getValidationMode() {
      * {@link com.mobsandgeeks.saripaar.annotation.Order} annotation.
      */
     public void validate(boolean ultimate) {
+        setValidationMode(ultimate ? Mode.BURST : Mode.IMMEDIATE);
         validate(false, ultimate);
     }
 
+    public void validateOnly(View view) {
+        mTargetView = view;
+        validate(true);
+        mTargetView = null;
+    }
+
     /**
      * Validates all {@link android.view.View}s before the specified {@link android.view.View}
      * parameter. {@link android.view.View} fields MUST be ordered using the
@@ -671,7 +679,7 @@ private void triggerValidationListenerCallback(final ValidationReport validation
         final List<ValidationError> validationErrors = validationReport.errors;
 
         if (validationErrors.size() == 0 && !validationReport.hasMoreErrors) {
-            mValidationListener.onValidationSucceeded(ultimate);
+            mValidationListener.onValidationSucceeded(mTargetView != null ? false : ultimate);
         } else {
             mValidationListener.onValidationFailed(validationErrors, ultimate);
         }
@@ -709,7 +717,7 @@ private ValidationReport getValidationReport(final View targetView,
             for (int i = 0; i < nRules; i++) {
 
                 // Validate only views that are visible and enabled
-                if (view.isShown() && view.isEnabled() && !(!view.isFocused() && !ultimate)) {
+                if (view.isShown() && view.isEnabled() && (view.isFocused() || ultimate || view == mTargetView)) {
                     Pair<Rule, ViewDataAdapter> ruleAdapterPair = ruleAdapterPairs.get(i);
                     Rule failedRule = validateViewWithRule(view, ruleAdapterPair.first, ruleAdapterPair.second, ultimate);
                     boolean isLastRuleForView = nRules == i + 1;
@@ -750,6 +758,9 @@ private ValidationReport getValidationReport(final View targetView,
 
     private Rule validateViewWithRule(final View view, final Rule rule,
                                       final ViewDataAdapter dataAdapter, boolean ultimate) {
+        if (mTargetView != null && (view != mTargetView || !rule.isValidateOnFocusLost())) {
+            return null;
+        }
 
         boolean valid = false;
         if (rule instanceof AnnotationRule) {
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
index c09de56..fd048a0 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Checked.java
@@ -34,4 +34,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Must be checked";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
index d5f6238..9965612 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Max.java
@@ -34,4 +34,5 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be less than max value";
+    public int flags()          default 0;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
index 43ce262..46e6d0d 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Min.java
@@ -34,4 +34,5 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Should be greater than min value";
+    public int flags()          default 0;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
index e3db603..05eb9de 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Pattern.java
@@ -35,4 +35,7 @@
     public int sequence()           default -1;
     public int messageResId()       default -1;
     public String message()         default "Input does not match pattern";
+
+    public int flags()              default 0;
+    public int errorCode()          default -1;
 }
diff --git a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
index 4580fdb..6c5d9cf 100644
--- a/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
+++ b/saripaar/src/main/java/com/mobsandgeeks/saripaar/annotation/Size.java
@@ -36,4 +36,7 @@
     public int sequence()       default -1;
     public int messageResId()   default -1;
     public String message()     default "Invalid length";
+
+    public int flags()          default 0;
+    public int errorCode()      default -1;
 }
