diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 8fc9c99..a889138 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,10 +1 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.mobsandgeeks.saripaar"
-    android:versionCode="1"
-    android:versionName="1.0">
-
-    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="15" />
-
-    <application></application>
-
-</manifest>
+<manifest package="com.mobsandgeeks.saripaar"/>
diff --git a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
index 4e3b038..c32ed0d 100644
--- a/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
+++ b/src/com/mobsandgeeks/saripaar/AnnotationRuleFactory.java
@@ -15,6 +15,7 @@
 package com.mobsandgeeks.saripaar;
 
 import android.content.Context;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Checkable;
@@ -122,7 +123,10 @@
         int messageResId = required.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
                 required.message();
-
+        String defaultMessage = Validator.getMessages().getRequireRuleMessage();
+        if (TextUtils.isEmpty(message) && defaultMessage != null) {
+            message = defaultMessage;
+        }
         return Rules.required(message, required.trim());
     }
 
@@ -139,7 +143,7 @@
             Log.w(TAG, String.format(WARN_TEXT, field.getName(), TextRule.class.getSimpleName()));
             return null;
         }
-
+        Validator.getMessages().getTextRuleMessage();
         List<Rule<?>> rules = new ArrayList<Rule<?>>();
         int messageResId = textRule.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
@@ -162,13 +166,17 @@
         if (minLength > 0) {
             rules.add(Rules.minLength(null, minLength, textRule.trim()));
         }
-        if (maxLength != Integer.MAX_VALUE) {
+        if (maxLength < Integer.MAX_VALUE) {
             rules.add(Rules.maxLength(null, maxLength, textRule.trim()));
         }
 
         Rule<?>[] ruleArray = new Rule<?>[rules.size()];
         rules.toArray(ruleArray);
 
+        String defaultMessage = Validator.getMessages().getTextRuleMessage();
+        if (TextUtils.isEmpty(message) && defaultMessage != null) {
+            message = defaultMessage;
+        }
         return Rules.and(message, ruleArray);
     }
 
@@ -193,9 +201,13 @@
             e.printStackTrace();
         } catch (IllegalAccessException e) {
             e.printStackTrace();
-        }catch (ClassCastException e) {
+        } catch (ClassCastException e) {
             e.printStackTrace();
         }
+        String defaultMessage = Validator.getMessages().getRegExRuleMessage();
+        if (TextUtils.isEmpty(message) && defaultMessage != null) {
+            message = defaultMessage;
+        }
         return Rules.regex(message, pattern, regexRule.trim());
     }
 
@@ -281,7 +293,10 @@
 
         Rule<?>[] ruleArray = new Rule<?>[rules.size()];
         rules.toArray(ruleArray);
-
+        String defaultMessage = Validator.getMessages().getNumberRuleMessage();
+        if (TextUtils.isEmpty(message) && defaultMessage != null) {
+            message = defaultMessage;
+        }
         return Rules.and(message, ruleArray);
     }
 
@@ -294,7 +309,10 @@
         int messageResId = password.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
                 password.message();
-
+        String defaultMessage = Validator.getMessages().getPasswordRuleMessage();
+        if (TextUtils.isEmpty(message) && defaultMessage != null) {
+            message = defaultMessage;
+        }
         return Rules.required(message, false);
     }
 
@@ -309,7 +327,10 @@
         int messageResId = confirmPassword.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
                 confirmPassword.message();
-
+        String defaultMessage = Validator.getMessages().getConfirmPasswordRuleMessage();
+        if (TextUtils.isEmpty(message) && defaultMessage != null) {
+            message = defaultMessage;
+        }
         return Rules.eq(message, passwordTextView);
     }
 
@@ -336,13 +357,15 @@
         int messageResId = ipAddress.messageResId();
         String message = messageResId != 0 ? view.getContext().getString(messageResId) :
                 ipAddress.message();
-
+        String defaultMessage = Validator.getMessages().getIpAddressRuleMessage();
+        if (TextUtils.isEmpty(message) && defaultMessage != null) {
+            message = defaultMessage;
+        }
         return Rules.or(message, Rules.eq(null, Rules.EMPTY_STRING),
                 Rules.regex(message, Rules.REGEX_IP_ADDRESS, true));
     }
 
-    private static Rule<Checkable> getCheckedRule(
-            Field field, View view, Checked checked) {
+    private static Rule<Checkable> getCheckedRule(Field field, View view, Checked checked) {
 
         if (!Checkable.class.isAssignableFrom(view.getClass())) {
             Log.w(TAG, String.format(WARN_CHECKABLE, field.getName(),
diff --git a/src/com/mobsandgeeks/saripaar/DefaultErrorMessages.java b/src/com/mobsandgeeks/saripaar/DefaultErrorMessages.java
new file mode 100644
index 0000000..d692637
--- /dev/null
+++ b/src/com/mobsandgeeks/saripaar/DefaultErrorMessages.java
@@ -0,0 +1,79 @@
+package com.mobsandgeeks.saripaar;
+
+/**
+ * Created by maxchursin on 1/12/15.
+ */
+public class DefaultErrorMessages {
+    private String requireRuleMessage = Rules.EMPTY_STRING;
+    private String regExRuleMessage;
+    private String textRuleMessage;
+    private String passwordRuleMessage;
+    private String confirmPasswordRuleMessage;
+    private String numberRuleMessage;
+    private String ipAddressRuleMessage;
+    private String emailRuleMessage;
+
+    public String getRequireRuleMessage() {
+        return requireRuleMessage;
+    }
+
+    public void setRequireRuleMessage(String requireRuleMessage) {
+        this.requireRuleMessage = requireRuleMessage;
+    }
+
+    public String getRegExRuleMessage() {
+        return regExRuleMessage;
+    }
+
+    public void setRegExRuleMessage(String regExRuleMessage) {
+        this.regExRuleMessage = regExRuleMessage;
+    }
+
+    public String getTextRuleMessage() {
+        return textRuleMessage;
+    }
+
+    public void setTextRuleMessage(String textRuleMessage) {
+        this.textRuleMessage = textRuleMessage;
+    }
+
+    public String getPasswordRuleMessage() {
+        return passwordRuleMessage;
+    }
+
+    public void setPasswordRuleMessage(String passwordRuleMessage) {
+        this.passwordRuleMessage = passwordRuleMessage;
+    }
+
+    public void setConfirmPasswordRuleMessage(String confirmPasswordRuleMessage) {
+        this.confirmPasswordRuleMessage = confirmPasswordRuleMessage;
+    }
+
+    public void setNumberRuleMessage(String numberRuleMessage) {
+        this.numberRuleMessage = numberRuleMessage;
+    }
+
+    public void setIpAddressRuleMessage(String ipAddressRuleMessage) {
+        this.ipAddressRuleMessage = ipAddressRuleMessage;
+    }
+
+    public void setEmailRuleMessage(String emailRuleMessage) {
+        this.emailRuleMessage = emailRuleMessage;
+    }
+
+    public String getConfirmPasswordRuleMessage() {
+        return confirmPasswordRuleMessage;
+    }
+
+    public String getNumberRuleMessage() {
+        return numberRuleMessage;
+    }
+
+    public String getIpAddressRuleMessage() {
+        return ipAddressRuleMessage;
+    }
+
+    public String getEmailRuleMessage() {
+        return emailRuleMessage;
+    }
+}
diff --git a/src/com/mobsandgeeks/saripaar/Validator.java b/src/com/mobsandgeeks/saripaar/Validator.java
index 506851b..7c63582 100644
--- a/src/com/mobsandgeeks/saripaar/Validator.java
+++ b/src/com/mobsandgeeks/saripaar/Validator.java
@@ -16,10 +16,14 @@
 
 import android.annotation.TargetApi;
 import android.app.Activity;
+import android.content.Context;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.support.v4.app.Fragment;
 import android.util.Log;
+import android.util.TypedValue;
 import android.view.View;
 import android.widget.TextView;
 
@@ -63,6 +67,9 @@
     private Map<String, Object> mProperties = new HashMap<String, Object>();
     private AsyncTask<Void, Void, List<ViewErrorPair>> mAsyncValidationTask;
     private ValidationListener mValidationListener;
+    private static DefaultErrorMessages messages = new DefaultErrorMessages();
+    private Resources.Theme theme;
+    private int errorMessagesStyle;
 
     /**
      * Private constructor. Cannot be instantiated.
@@ -78,28 +85,34 @@ private Validator() {
             throw new IllegalArgumentException("'controller' cannot be null");
         }
         mController = fragment;
+        theme = fragment.getActivity().getTheme();
         initForm();
 
     }
 
-    public <F extends Fragment> Validator(F fragment) {
+    public <F extends Fragment> Validator(F fragment, int errorMessagesStyle) {
         this();
         if (fragment == null) {
             throw new IllegalArgumentException("'controller' cannot be null");
         }
         mController = fragment;
+        this.errorMessagesStyle = errorMessagesStyle;
+        this.theme = fragment.getActivity().getTheme();
         initForm();
     }
 
-    public <A extends Activity> Validator(A activity) {
+    public <A extends Activity> Validator(A activity, int errorMessagesStyle) {
         this();
         if (activity == null) {
             throw new IllegalArgumentException("'controller' cannot be null");
         }
         mController = activity;
+        this.errorMessagesStyle = errorMessagesStyle;
+        this.theme = activity.getTheme();
         initForm();
     }
 
+
     private void initForm() {
         new AsyncTask<Void, Void, Void>() {
 
@@ -110,6 +123,7 @@ protected void onPreExecute() {
 
             @Override
             protected Void doInBackground(Void... params) {
+                readDefaultErrorMessages();
                 createRulesFromAnnotations(getSaripaarAnnotatedFields());
                 return null;
             }
@@ -124,6 +138,35 @@ protected void onPostExecute(Void aVoid) {
         }.execute();
     }
 
+    public void readDefaultErrorMessages() {
+        TypedArray a = null;
+        try {
+            if (errorMessagesStyle > 0) {
+                a = theme.obtainStyledAttributes(errorMessagesStyle, R.styleable.DefaultErrorStings);//getting the style if specified
+            } else {
+                TypedValue outValue = new TypedValue();
+                theme.resolveAttribute(R.attr.DefaultErrorStringsStyle, outValue, true);//getting reference to actual style for error codes
+                a = theme.obtainStyledAttributes(outValue.data, R.styleable.DefaultErrorStings);//getting the style and read attributes
+            }
+            messages.setRequireRuleMessage(a.getString(R.styleable.DefaultErrorStings_requiredRule));
+            messages.setRegExRuleMessage(a.getString(R.styleable.DefaultErrorStings_regExRule));
+            messages.setTextRuleMessage(a.getString(R.styleable.DefaultErrorStings_textRule));
+            messages.setPasswordRuleMessage(a.getString(R.styleable.DefaultErrorStings_passwordRule));
+            messages.setConfirmPasswordRuleMessage(a.getString(R.styleable.DefaultErrorStings_confirmPasswordRule));
+            messages.setNumberRuleMessage(a.getString(R.styleable.DefaultErrorStings_numberRule));
+            messages.setIpAddressRuleMessage(a.getString(R.styleable.DefaultErrorStings_ipAddressRule));
+            messages.setEmailRuleMessage(a.getString(R.styleable.DefaultErrorStings_emailRule));
+        } finally {
+            if (a != null) {
+                a.recycle();
+            }
+        }
+    }
+
+    public static DefaultErrorMessages getMessages() {
+        return messages;
+    }
+
     //Bundle[{email=has already been taken}]
     //Bundle[{email=has already been taken, password=is too short (minimum is 6 characters)}]
     public void mapServerErrors(Map<String, String> possibleField) {
diff --git a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
index 0692aba..8ec94a0 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/ConfirmPassword.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -31,7 +33,7 @@
 public @interface ConfirmPassword {
     public int order() default 0;
 
-    public String message() default "Passwords don't match";
+    public String message() default Rules.EMPTY_STRING;
 
     public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Password.java b/src/com/mobsandgeeks/saripaar/annotation/Password.java
index a35daa5..eaffa31 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Password.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Password.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -29,7 +31,7 @@
 public @interface Password {
     public int order() default 0;
 
-    public String message() default "Password is required";
+    public String message() default Rules.EMPTY_STRING;
 
     public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Required.java b/src/com/mobsandgeeks/saripaar/annotation/Required.java
index 3a3d9bf..35ef448 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Required.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Required.java
@@ -14,6 +14,8 @@
 
 package com.mobsandgeeks.saripaar.annotation;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -26,12 +28,12 @@
  */
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface Required {
+public @interface   Required {
     public int order() default Integer.MAX_VALUE;
 
     public boolean trim() default true;
 
-    public String message() default "This field is required.";
+    public String message() default Rules.EMPTY_STRING;
 
     public int messageResId() default 0;
 }
diff --git a/src/com/mobsandgeeks/saripaar/annotation/Select.java b/src/com/mobsandgeeks/saripaar/annotation/Select.java
index a2a7cb5..476da93 100644
--- a/src/com/mobsandgeeks/saripaar/annotation/Select.java
+++ b/src/com/mobsandgeeks/saripaar/annotation/Select.java
@@ -16,6 +16,8 @@
 
 import android.widget.Spinner;
 
+import com.mobsandgeeks.saripaar.Rules;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -33,7 +35,7 @@
 
     public int defaultSelection() default 0;
 
-    public String message() default "Select an item.";
+    public String message() default Rules.EMPTY_STRING;
 
     public int messageResId() default 0;
 }
diff --git a/src/main/res/values/attrs.xml b/src/main/res/values/attrs.xml
new file mode 100644
index 0000000..1f9e231
--- /dev/null
+++ b/src/main/res/values/attrs.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <declare-styleable name="DefaultErrorStingsTheme">
+        <attr name="DefaultErrorStringsStyle" format="reference" />
+    </declare-styleable>
+
+    <declare-styleable name="DefaultErrorStings">
+        <attr name="requiredRule" format="string" />
+        <attr name="textRule" format="string" />
+        <attr name="regExRule" format="string" />
+        <attr name="passwordRule" format="string" />
+        <attr name="confirmPasswordRule" format="string" />
+        <attr name="ipAddressRule" format="string" />
+        <attr name="emailRule" format="string" />
+        <attr name="numberRule" format="string" />
+    </declare-styleable>
+
+</resources>
\ No newline at end of file
diff --git a/tests/java/com/mobsandgeeks/saripaar/BaseTestActivity.java b/tests/java/com/mobsandgeeks/saripaar/BaseTestActivity.java
index 998d195..9493f08 100644
--- a/tests/java/com/mobsandgeeks/saripaar/BaseTestActivity.java
+++ b/tests/java/com/mobsandgeeks/saripaar/BaseTestActivity.java
@@ -30,7 +30,7 @@ protected void onCreate(Bundle savedInstanceState) {
         textViewRequired = new TextView(this);
         addTestView(textViewRequired);
         setContentView(rootView);
-        validator = new Validator(this);
+        validator = new Validator(this, 0);
     }
 
     protected void addTestView(TextView textViewRequired) {
