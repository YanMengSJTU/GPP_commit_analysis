diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 17a4b02d..04ce005c 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -20,7 +20,7 @@ dependencies {
     compileOnly 'com.google.android:support-v4:r7'
 //    compileOnly 'io.reactivex:rxjava:1.1.8'
     compileOnly files('libs/sqlcipher.jar')
-    compileOnly 'io.reactivex.rxjava2:rxjava:2.0.8'
+    compileOnly "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava2Version"
 }
 
 javadoc {
diff --git a/build.gradle b/build.gradle
index 43bbcf71..d6b53512 100644
--- a/build.gradle
+++ b/build.gradle
@@ -13,6 +13,10 @@ ext {
     minSdkVersion = 7
     targetSdkVersion = 25
 
+    rxbinding2Version = '2.0.0'
+    rxjava2Version = '2.0.8'
+    rxandroid2Version = '2.0.1'
+
     // common dependencies for Android projects (not to be used in example projects for better copy and paste)
     dep = [
             androidPlugin: 'com.android.tools.build:gradle:2.3.1',
diff --git a/examples/RxDaoExample/build.gradle b/examples/RxDaoExample/build.gradle
index 09d9e56d..498f3cad 100644
--- a/examples/RxDaoExample/build.gradle
+++ b/examples/RxDaoExample/build.gradle
@@ -38,9 +38,9 @@ dependencies {
     //    compile 'com.jakewharton.rxbinding:rxbinding:1.0.1'
     //    compile 'io.reactivex:rxandroid:1.2.1'
     //    compile 'io.reactivex:rxjava:1.2.9'
-    compile 'io.reactivex.rxjava2:rxjava:2.0.8'
-    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
-    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
+    compile "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava2Version"
+    compile "com.jakewharton.rxbinding2:rxbinding:$rootProject.ext.rxbinding2Version"
+    compile "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroid2Version"
 
     compile 'com.android.support:appcompat-v7:25.3.1'
     compile 'com.android.support:recyclerview-v7:25.3.1'
diff --git a/settings.gradle b/settings.gradle
index c1133621..f96cd456 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -6,8 +6,8 @@ include 'tests'
 include 'examples:DaoExample'
 include 'examples:RxDaoExample'
 
-//include 'tests:DaoTestBase'
-//include 'tests:DaoTest'
-//include 'tests:DaoTestPerformance'
-//include 'tests:DaoTestGenerator'
-//include 'tests:DaoTestEntityAnnotation'
+include 'tests:DaoTestBase'
+include 'tests:DaoTest'
+include 'tests:DaoTestPerformance'
+include 'tests:DaoTestGenerator'
+include 'tests:DaoTestEntityAnnotation'
diff --git a/tests/DaoTest/build.gradle b/tests/DaoTest/build.gradle
index 620810a2..ee3365ef 100644
--- a/tests/DaoTest/build.gradle
+++ b/tests/DaoTest/build.gradle
@@ -28,7 +28,8 @@ dependencies {
     testCompile 'org.mockito:mockito-core:1.10.19'
 
     androidTestCompile 'net.zetetic:android-database-sqlcipher:3.5.4'
-    androidTestCompile 'io.reactivex:rxjava:1.1.7'
+//    androidTestCompile 'io.reactivex:rxjava:1.1.7'
+    androidTestCompile "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava2Version"
 }
 
 uploadArchives.enabled = false
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
index 45c0a980..f82653f9 100644
--- a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxDaoTest.java
@@ -26,8 +26,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import rx.Observable;
-import rx.observers.TestSubscriber;
+import io.reactivex.Observable;
+import io.reactivex.observers.TestObserver;
+
 
 @SuppressWarnings("unchecked")
 public class RxDaoTest extends AbstractDaoTest<TestEntityDao, TestEntity, Long> {
@@ -45,15 +46,15 @@ protected void setUp() throws Exception {
     }
 
     public void testScheduler() {
-        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
-        Thread lastSeenThread = testSubscriber.getLastSeenThread();
+        TestObserver<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
+        Thread lastSeenThread = testSubscriber.lastThread();
         assertNotSame(lastSeenThread, Thread.currentThread());
     }
 
     public void testNoScheduler() {
         RxDao<TestEntity, Long> rxDaoNoScheduler = dao.rxPlain();
-        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDaoNoScheduler.loadAll());
-        Thread lastSeenThread = testSubscriber.getLastSeenThread();
+        TestObserver<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDaoNoScheduler.loadAll());
+        Thread lastSeenThread = testSubscriber.lastThread();
         assertSame(lastSeenThread, Thread.currentThread());
     }
 
@@ -61,9 +62,9 @@ public void testLoadAll() {
         insertEntity("foo");
         insertEntity("bar");
 
-        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
-        assertEquals(1, testSubscriber.getValueCount());
-        List<TestEntity> entities = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.loadAll());
+        assertEquals(1, testSubscriber.valueCount());
+        List<TestEntity> entities = testSubscriber.values().get(0);
 
         // Order of entities is unspecified
         int foo = 0, bar = 0;
@@ -83,17 +84,17 @@ public void testLoadAll() {
 
     public void testLoad() {
         TestEntity foo = insertEntity("foo");
-        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(foo.getId()));
-        assertEquals(1, testSubscriber.getValueCount());
-        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(foo.getId()));
+        assertEquals(1, testSubscriber.valueCount());
+        TestEntity foo2 = testSubscriber.values().get(0);
         assertEquals(foo.getSimpleStringNotNull(), foo2.getSimpleStringNotNull());
     }
 
     public void testLoad_noResult() {
-        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(42));
-        assertEquals(1, testSubscriber.getValueCount());
+        TestObserver<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.load(42));
+        assertEquals(1, testSubscriber.valueCount());
         // Should we really propagate null through Rx?
-        assertNull(testSubscriber.getOnNextEvents().get(0));
+        assertNull(testSubscriber.values().get(0));
     }
 
     public void testRefresh() {
@@ -105,9 +106,9 @@ public void testRefresh() {
 
     public void testInsert() {
         TestEntity foo = RxTestHelper.createEntity("foo");
-        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insert(foo));
-        assertEquals(1, testSubscriber.getValueCount());
-        TestEntity foo2 = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insert(foo));
+        assertEquals(1, testSubscriber.valueCount());
+        TestEntity foo2 = testSubscriber.values().get(0);
         assertSame(foo, foo2);
 
         List<TestEntity> all = dao.loadAll();
@@ -118,9 +119,9 @@ public void testInsert() {
     public void testInsertInTx() {
         TestEntity foo = RxTestHelper.createEntity("foo");
         TestEntity bar = RxTestHelper.createEntity("bar");
-        TestSubscriber<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(foo, bar));
-        assertEquals(1, testSubscriber.getValueCount());
-        Object[] array = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(foo, bar));
+        assertEquals(1, testSubscriber.valueCount());
+        Object[] array = testSubscriber.values().get(0);
         assertSame(foo, array[0]);
         assertSame(bar, array[1]);
 
@@ -136,9 +137,9 @@ public void testInsertInTxList() {
         List<TestEntity> list = new ArrayList<>();
         list.add(foo);
         list.add(bar);
-        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(list));
-        assertEquals(1, testSubscriber.getValueCount());
-        List<TestEntity> result = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.insertInTx(list));
+        assertEquals(1, testSubscriber.valueCount());
+        List<TestEntity> result = testSubscriber.values().get(0);
         assertSame(foo, result.get(0));
         assertSame(bar, result.get(1));
 
@@ -211,9 +212,9 @@ public void testSaveInTxList() {
     public void testUpdate() {
         TestEntity foo = insertEntity("foo");
         foo.setSimpleString("foofoo");
-        TestSubscriber testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.update(foo));
-        assertEquals(1, testSubscriber.getValueCount());
-        assertSame(foo, testSubscriber.getOnNextEvents().get(0));
+        TestObserver testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.update(foo));
+        assertEquals(1, testSubscriber.valueCount());
+        assertSame(foo, testSubscriber.values().get(0));
         List<TestEntity> testEntities = dao.loadAll();
         assertEquals(1, testEntities.size());
         assertNotSame(foo, testEntities.get(0));
@@ -245,9 +246,9 @@ public void testUpdateInTxList() {
     }
 
     private void assertUpdatedEntity(TestEntity foo, Observable<TestEntity> observable) {
-        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
-        assertEquals(1, testSubscriber.getValueCount());
-        TestEntity bar = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.valueCount());
+        TestEntity bar = testSubscriber.values().get(0);
         assertSame(foo, bar);
 
         List<TestEntity> all = dao.loadAll();
@@ -256,9 +257,9 @@ private void assertUpdatedEntity(TestEntity foo, Observable<TestEntity> observab
     }
 
     private void assertUpdatedEntities(TestEntity foo, TestEntity bar, Observable<Object[]> observable) {
-        TestSubscriber<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
-        assertEquals(1, testSubscriber.getValueCount());
-        Object[] array = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<Object[]> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.valueCount());
+        Object[] array = testSubscriber.values().get(0);
         assertSame(foo, array[0]);
         assertSame(bar, array[1]);
 
@@ -272,9 +273,9 @@ private void assertUpdatedEntities(List<TestEntity> entities, Observable<List<Te
         TestEntity foo = entities.get(0);
         TestEntity bar = entities.get(1);
 
-        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
-        assertEquals(1, testSubscriber.getValueCount());
-        List<TestEntity> result = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.valueCount());
+        List<TestEntity> result = testSubscriber.values().get(0);
         assertSame(foo, result.get(0));
         assertSame(bar, result.get(1));
 
@@ -335,17 +336,17 @@ public void testDeleteByKeyInTxList() {
     }
 
     private void assertDeleted(Observable<Void> observable) {
-        TestSubscriber testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
-        assertEquals(1, testSubscriber.getValueCount());
-        assertNull(testSubscriber.getOnNextEvents().get(0));
+        TestObserver testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.valueCount());
+        assertNull(testSubscriber.values().get(0));
         assertEquals(0, dao.count());
     }
 
     public void testCount() {
         insertEntity("foo");
-        TestSubscriber<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.count());
-        assertEquals(1, testSubscriber.getValueCount());
-        Long count = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<Long> testSubscriber = RxTestHelper.awaitTestSubscriber(rxDao.count());
+        assertEquals(1, testSubscriber.valueCount());
+        Long count = testSubscriber.values().get(0);
         assertEquals(1L, (long) count);
     }
 
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java
index 63081dd1..794ced8f 100644
--- a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxQueryTest.java
@@ -31,9 +31,8 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import rx.Observable;
-import rx.Subscription;
-import rx.observers.TestSubscriber;
+import io.reactivex.Observable;
+import io.reactivex.observers.TestObserver;
 
 public class RxQueryTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
@@ -53,9 +52,9 @@ protected void setUp() throws Exception {
 
     public void testList() {
         insertEntities(15);
-        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
-        assertEquals(1, testSubscriber.getValueCount());
-        List<TestEntity> entitiesRead = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
+        assertEquals(1, testSubscriber.valueCount());
+        List<TestEntity> entitiesRead = testSubscriber.values().get(0);
         assertEquals(10, entitiesRead.size());
     }
 
@@ -66,26 +65,26 @@ public void _testListSetParameters() {
         // TODO how to pass those to rxQuery?
         query.setParameter(0, 5);
 
-        TestSubscriber<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
-        assertEquals(1, testSubscriber.getValueCount());
-        List<TestEntity> entitiesRead = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<List<TestEntity>> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.list());
+        assertEquals(1, testSubscriber.valueCount());
+        List<TestEntity> entitiesRead = testSubscriber.values().get(0);
         assertEquals(5, entitiesRead.size());
     }
 
     public void testUnique() {
         insertEntities(1);
-        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.unique());
-        assertEquals(1, testSubscriber.getValueCount());
-        TestEntity entityRead = testSubscriber.getOnNextEvents().get(0);
+        TestObserver<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.unique());
+        assertEquals(1, testSubscriber.valueCount());
+        TestEntity entityRead = testSubscriber.values().get(0);
         assertNotNull(entityRead);
     }
 
     public void testOneByOne() {
         insertEntities(15);
-        TestSubscriber<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.oneByOne());
-        assertEquals(10, testSubscriber.getValueCount());
+        TestObserver<TestEntity> testSubscriber = RxTestHelper.awaitTestSubscriber(rxQuery.oneByOne());
+        assertEquals(10, testSubscriber.valueCount());
         for (int i = 0; i < 10; i++) {
-            TestEntity entity = testSubscriber.getOnNextEvents().get(i);
+            TestEntity entity = testSubscriber.values().get(i);
             assertEquals(i, entity.getSimpleInt());
         }
     }
@@ -93,14 +92,14 @@ public void testOneByOne() {
     public void testOneByOneUnsubscribe() {
         insertEntities(1000);
         RxQuery<TestEntity> bigQuery = daoSession.getTestEntityDao().queryBuilder().rx();
-        TestSubscriber<TestEntity> testSubscriber = new TestSubscriber<>();
+        TestObserver<TestEntity> testSubscriber = new TestObserver<>();
         Observable<TestEntity> observable = bigQuery.oneByOne();
-        Subscription subscription = observable.subscribe(testSubscriber);
-        subscription.unsubscribe();
-        testSubscriber.assertUnsubscribed();
-        int count = testSubscriber.getValueCount();
+        observable.subscribe(testSubscriber);
+//        subscription.unsubscribe();
+//        testSubscriber.assertUnsubscribed();
+        int count = testSubscriber.valueCount();
         testSubscriber.awaitTerminalEvent(100, TimeUnit.MILLISECONDS);
-        int count2 = testSubscriber.getValueCount();
+        int count2 = testSubscriber.valueCount();
         DaoLog.d("Count 1: " + count + " vs. count 2: " + count2);
         // Not strictly multi-threading correct, but anyway:
         assertTrue(count2 < 1000);
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java
index 04cbb449..f7156082 100644
--- a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTestHelper.java
@@ -21,19 +21,18 @@
 import org.greenrobot.greendao.daotest.TestEntity;
 import org.greenrobot.greendao.daotest.TestEntityDao;
 
-import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import rx.Observable;
-import rx.observers.TestSubscriber;
+import io.reactivex.Observable;
+import io.reactivex.observers.TestObserver;
 
 public class RxTestHelper {
-    static <T> TestSubscriber<T> awaitTestSubscriber(Observable<T> observable) {
-        TestSubscriber<T> testSubscriber = new TestSubscriber<>();
+    static <T> TestObserver<T> awaitTestSubscriber(Observable<T> observable) {
+        TestObserver<T> testSubscriber = new TestObserver<>();
         observable.subscribe(testSubscriber);
         testSubscriber.awaitTerminalEvent(3, TimeUnit.SECONDS);
         testSubscriber.assertNoErrors();
-        testSubscriber.assertCompleted();
+        testSubscriber.assertComplete();
         return testSubscriber;
     }
 
diff --git a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
index 03a4aee1..cae1f0e5 100644
--- a/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
+++ b/tests/DaoTest/src/androidTest/java/org/greenrobot/greendao/daotest/rx/RxTransactionTest.java
@@ -21,14 +21,15 @@
 import org.greenrobot.greendao.daotest.DaoMaster;
 import org.greenrobot.greendao.daotest.DaoSession;
 import org.greenrobot.greendao.daotest.TestEntity;
+import org.greenrobot.greendao.rx.NullStub;
 import org.greenrobot.greendao.rx.RxTransaction;
 import org.greenrobot.greendao.test.AbstractDaoSessionTest;
 
 import java.util.List;
 import java.util.concurrent.Callable;
 
-import rx.Observable;
-import rx.observers.TestSubscriber;
+import io.reactivex.Observable;
+import io.reactivex.observers.TestObserver;
 
 public class RxTransactionTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
 
@@ -45,7 +46,7 @@ protected void setUp() throws Exception {
     }
 
     public void testRun() {
-        Observable<Void> observable = rxTx.run(new Runnable() {
+        Observable<NullStub> observable = rxTx.run(new Runnable() {
             @Override
             public void run() {
                 TestEntity entity = insertEntity("hello");
@@ -53,8 +54,8 @@ public void run() {
                 daoSession.update(entity);
             }
         });
-        TestSubscriber<Void> testSubscriber = assertTxExecuted(observable);
-        assertNull(testSubscriber.getOnNextEvents().get(0));
+        TestObserver<NullStub> testSubscriber = assertTxExecuted(observable);
+        assertNull(testSubscriber.values().get(0));
     }
 
     public void testCall() {
@@ -77,13 +78,13 @@ public String call() {
                 return "Just checking";
             }
         });
-        TestSubscriber<String> testSubscriber = assertTxExecuted(observable);
-        assertEquals("Just checking", testSubscriber.getOnNextEvents().get(0));
+        TestObserver<String> testSubscriber = assertTxExecuted(observable);
+        assertEquals("Just checking", testSubscriber.values().get(0));
     }
 
-    private <T> TestSubscriber<T> assertTxExecuted(Observable<T> observable) {
-        TestSubscriber<T> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
-        assertEquals(1, testSubscriber.getValueCount());
+    private <T> TestObserver<T> assertTxExecuted(Observable<T> observable) {
+        TestObserver<T> testSubscriber = RxTestHelper.awaitTestSubscriber(observable);
+        assertEquals(1, testSubscriber.valueCount());
 
         daoSession.clear();
         List<TestEntity> all = daoSession.getTestEntityDao().loadAll();
