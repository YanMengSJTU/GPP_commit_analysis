diff --git a/build.gradle b/build.gradle
index 77e4d686..dec0dc9d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -46,7 +46,7 @@ subprojects {
   apply plugin: 'maven'
 
   group = 'com.lemoulinstudio.greendao'
-  version = '1.6.6'
+  version = '1.7'
   
   repositories {
     mavenCentral()
diff --git a/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy b/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
index 3ad04cc7..3c0a49d2 100644
--- a/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
+++ b/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
@@ -24,7 +24,7 @@ public class GenerateDaoSources extends DefaultTask {
     SchemaGenerator schemaGenerator = new SchemaGenerator(ormSrcDir) {
         @Override
         protected void debug(String text) {
-            getLogger().debug(text);
+            getLogger().info(text);
         }
     };
     Schema schema = schemaGenerator.createSchema(genSrcPackage);
diff --git a/greendao/src/main/java/de/greenrobot/dao/query/WhereCondition.java b/greendao/src/main/java/de/greenrobot/dao/query/WhereCondition.java
index 2a8b626a..8348d279 100644
--- a/greendao/src/main/java/de/greenrobot/dao/query/WhereCondition.java
+++ b/greendao/src/main/java/de/greenrobot/dao/query/WhereCondition.java
@@ -31,11 +31,14 @@
 
     void appendValuesTo(List<Object> values);
 
+    WhereCondition noIndex();
+
     public abstract static class AbstractCondition implements WhereCondition {
 
         protected final boolean hasSingleValue;
         protected final Object value;
         protected final Object[] values;
+        protected boolean noIndex;
 
         public AbstractCondition() {
             hasSingleValue = false;
@@ -66,6 +69,12 @@ public void appendValuesTo(List<Object> valuesTarget) {
                 }
             }
         }
+
+        public WhereCondition noIndex() {
+            noIndex = true;
+            return this;
+        }
+
     }
 
     public static class PropertyCondition extends AbstractCondition {
@@ -136,6 +145,9 @@ public PropertyCondition(Property property, String op, Object[] values) {
 
         @Override
         public void appendTo(StringBuilder builder, String tableAlias) {
+            if (noIndex) {
+                builder.append('+');
+            }
             if (tableAlias != null) {
                 builder.append(tableAlias).append('.');
             }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
index 79327176..2d8b7a93 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
@@ -291,6 +291,16 @@ public String getClassName() {
         return res;
     }
 
+    public List<Index> getVersionedIndexes(int since) {
+        List<Index> res = new ArrayList<Index>();
+        for (Index index : indexes) {
+            if (index.getSince() == since) {
+                res.add(index);
+            }
+        }
+        return res;
+    }
+
     public List<Property> getPropertiesColumns() {
         return propertiesColumns;
     }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Index.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Index.java
index ff48dee9..b8e4d83a 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Index.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Index.java
@@ -21,6 +21,15 @@
 public class Index extends PropertyOrderList {
     private String name;
     private boolean unique;
+    private int since;
+
+    public int getSince() {
+        return since;
+    }
+
+    public void setSince(int since) {
+        this.since = since;
+    }
 
     public String getName() {
         return name;
@@ -40,4 +49,14 @@ public boolean isUnique() {
         return unique;
     }
 
+    public String methodName() {
+        StringBuilder name = new StringBuilder();
+        for (Property property : getProperties()) {
+            String propertyName = property.getPropertyName();
+            propertyName = propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);
+            name.append(propertyName);
+        }
+        return name.toString();
+    }
+
 }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
index 0bca9ab0..d3bfecf3 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
@@ -80,6 +80,14 @@ public PropertyBuilder index() {
             return this;
         }
 
+        public PropertyBuilder index(int since) {
+            Index index = new Index();
+            index.setSince(since);
+            index.addProperty(property);
+            property.entity.addIndex(index);
+            return this;
+        }
+
         public PropertyBuilder indexAsc(String indexNameOrNull, boolean isUnique) {
             Index index = new Index();
             index.addPropertyAsc(property);
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java b/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
index 6eae5173..a95e840d 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
@@ -2,6 +2,11 @@
 
 import com.thoughtworks.qdox.JavaDocBuilder;
 import com.thoughtworks.qdox.model.*;
+import com.thoughtworks.qdox.model.annotation.AnnotationConstant;
+import com.thoughtworks.qdox.model.annotation.AnnotationValue;
+import com.thoughtworks.qdox.model.annotation.AnnotationValueList;
+import com.thoughtworks.qdox.model.annotation.EvaluatingVisitor;
+import com.thoughtworks.qdox.model.annotation.RecursiveAnnotationVisitor;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -25,10 +30,12 @@
   private static class EntityDescriptor {
     final JavaClass javaClass;
     final Annotation entityAnnotation;
+    final Annotation indexesAnnotation;
 
-    EntityDescriptor(JavaClass javaClass, Annotation entityAnnotation) {
+    EntityDescriptor(JavaClass javaClass, Annotation entityAnnotation, Annotation indexesAnnotation) {
         this.javaClass = javaClass;
         this.entityAnnotation = entityAnnotation;
+        this.indexesAnnotation = indexesAnnotation;
     }
   }
 
@@ -71,7 +78,7 @@ public Schema createSchema(String genSrcPackage) {
 
     debug("Creates the entities ...\n");
     for (EntityDescriptor descriptor : descriptors) {
-        createEntity(schema, descriptor.javaClass, descriptor.entityAnnotation);
+        createEntity(schema, descriptor.javaClass, descriptor.entityAnnotation, descriptor.indexesAnnotation);
     }
 
     debug("Links the entities 1 ...\n");
@@ -91,9 +98,10 @@ public Schema createSchema(String genSrcPackage) {
       List<EntityDescriptor> descriptors = new ArrayList<EntityDescriptor>();
       for (JavaSource javaSource : builder.getSources()) {
         for (JavaClass javaClass : javaSource.getClasses()) {
-          Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
+            Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
+            Annotation indexesAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Indexes.class);
           if (entityAnnotation != null) {
-            descriptors.add(new EntityDescriptor(javaClass, entityAnnotation));
+            descriptors.add(new EntityDescriptor(javaClass, entityAnnotation, indexesAnnotation));
           }
         }
       }
@@ -124,12 +132,12 @@ private Property findProperty(Entity entity, String propertyName) {
    * Creates the entity in the schema.
    * Skips all the relational aspect.
    */
-  private void createEntity(Schema schema, JavaClass javaClass, Annotation entityAnnotation) {
+  private void createEntity(Schema schema, JavaClass javaClass, Annotation entityAnnotation, Annotation indexesAnnotation) {
     debug("className: " + javaClass.getFullyQualifiedName());
 
     String since = (String) entityAnnotation.getNamedParameter("since");
 
-    Entity entity = schema.addEntity(javaClass.getName(), since == null ? 0 : Integer.parseInt(since));
+    final Entity entity = schema.addEntity(javaClass.getName(), since == null ? 0 : Integer.parseInt(since));
     String active = (String) entityAnnotation.getNamedParameter("active");
     if (active != null && Boolean.valueOf(active)) {
         entity.setActive(true);
@@ -152,6 +160,7 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
     }
 
     boolean hasCustomPrimaryKey = false;
+    final Map<String, Property> propertyMap = new HashMap<String, Property>();
 
     for (JavaField javaField : javaClass.getFields()) {
       debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
@@ -181,6 +190,8 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
         continue;
       }
 
+      propertyMap.put(javaField.getName(), propertyBuilder.getProperty());
+
       if (notNullAnnotation != null) {
         propertyBuilder.notNull();
       }
@@ -188,7 +199,9 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
         propertyBuilder.unique();
       }
       if (indexAnnotation != null) {
-        propertyBuilder.index();
+        String version = (String) indexAnnotation.getNamedParameter("since");
+        int sinceVersion = version == null ? 0 : Integer.parseInt(version);
+        propertyBuilder.index(sinceVersion);
       }
       if (primaryKeyAnnotation != null) {
         propertyBuilder.primaryKey();
@@ -197,7 +210,6 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
       if (sinceAnnotation != null) {
         String version = (String) sinceAnnotation.getNamedParameter("value");
         String _default = unString((String) sinceAnnotation.getNamedParameter("_default"));
-        debug("since " + version +"; default " + _default);
         propertyBuilder.since(Integer.parseInt(version), _default);
       }
     }
@@ -205,6 +217,40 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
     if (!hasCustomPrimaryKey) {
         entity.addIdProperty();
     }
+
+    if (indexesAnnotation != null) {
+        AnnotationValue value = indexesAnnotation.getProperty("value");
+        value.accept(new RecursiveAnnotationVisitor() {
+            @java.lang.Override
+            public java.lang.Object visitAnnotation(Annotation annotation) {
+                AnnotationValue sinceValue = annotation.getProperty("since");
+                int since = sinceValue == null ? 0 : Integer.parseInt((String)sinceValue.getParameterValue());
+
+                final List<String> fields = new ArrayList<String>();
+                AnnotationValue value = annotation.getProperty("value");
+                value.accept(new RecursiveAnnotationVisitor() {
+                    @Override
+                    public Object visitAnnotationConstant(AnnotationConstant constant) {
+                        fields.add(constant.getValue() + "");
+                        return null;
+                    }
+                });
+
+                de.greenrobot.daogenerator.Index index = new de.greenrobot.daogenerator.Index();
+                index.setSince(since);
+                for (String field : fields) {
+                    Property property = propertyMap.get(field);
+                    if (property == null) {
+                        throw new IllegalArgumentException("No such field: " + field);
+                    }
+                    index.addProperty(property);
+                }
+                entity.addIndex(index);
+
+                return null;
+            }
+        });
+    }
   }
 
   /**
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Composite.java b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Composite.java
new file mode 100644
index 00000000..c1078426
--- /dev/null
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Composite.java
@@ -0,0 +1,9 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+public @interface Composite {
+    String[] value();
+    int since() default 0;
+}
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Index.java b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Index.java
index 1d6cd669..a2459eda 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Index.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Index.java
@@ -5,4 +5,5 @@
 
 @Target(ElementType.FIELD)
 public @interface Index {
+    int since() default 0;
 }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Indexes.java b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Indexes.java
new file mode 100644
index 00000000..00470de7
--- /dev/null
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Indexes.java
@@ -0,0 +1,9 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target(ElementType.TYPE)
+public @interface Indexes {
+    Composite[] value();
+}
diff --git a/source-generator/src/main/resources/dao-master.ftl b/source-generator/src/main/resources/dao-master.ftl
index a4ca71e8..40599a2b 100644
--- a/source-generator/src/main/resources/dao-master.ftl
+++ b/source-generator/src/main/resources/dao-master.ftl
@@ -118,13 +118,18 @@ public class DaoMaster extends AbstractDaoMaster {
 <#list schema.entities as entity>
 <#if entity.since = ver + 1>
             ${entity.classNameDao}.createTable(db, true);
-<#elseif entity.hasAutoUpdateProperty(ver + 1)>
+<#else>
+    <#if entity.hasAutoUpdateProperty(ver + 1)>
             if (<#list entity.getVersionedProperties(ver + 1) as property>
                 !SqlUtils.ensureColumnExists(db, "${entity.tableName}", "${property.columnName}", "${property.columnType}<#if property.constraints??> ${property.constraints}</#if><#if property.default??> DEFAULT ${property.default}</#if>")<#if property_has_next>||<#else>) {
 
                     ${entity.classNameDao}.dropTable(db, true);
                     ${entity.classNameDao}.createTable(db, false);
             }</#if></#list>
+    </#if>
+    <#list entity.getVersionedIndexes(ver + 1) as index>
+            ${entity.classNameDao}.create${index.methodName()}Index(db, true);
+    </#list>
 </#if>
 </#list>
 </#list>
diff --git a/source-generator/src/main/resources/dao.ftl b/source-generator/src/main/resources/dao.ftl
index cdc7ce09..ab6f396d 100644
--- a/source-generator/src/main/resources/dao.ftl
+++ b/source-generator/src/main/resources/dao.ftl
@@ -102,15 +102,22 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
 <#list entity.propertiesColumns as property>
                 "'${property.columnName}' ${property.columnType}<#if property.constraints??> ${property.constraints} </#if><#if property_has_next>," +<#else>);");</#if> // ${property_index}: ${property.propertyName}
 </#list>
-<#if entity.indexes?has_content >
-        // Add Indexes
+
+<#list entity.indexes as index>
+        create${index.methodName()}Index(db, ifNotExists);
+</#list>
+    }
+
 <#list entity.indexes as index>
+    public static void create${index.methodName()}Index(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
         db.execSQL("CREATE <#if index.unique>UNIQUE </#if>INDEX " + constraint + "${index.name} ON ${entity.tableName}" +
-                " (<#list index.properties 
+                " (<#list index.properties
 as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
-</#list>
-</#if>         
     }
+</#list>
+
+
 
     /** Drops the underlying database table. */
     public static void dropTable(SQLiteDatabase db, boolean ifExists) {
