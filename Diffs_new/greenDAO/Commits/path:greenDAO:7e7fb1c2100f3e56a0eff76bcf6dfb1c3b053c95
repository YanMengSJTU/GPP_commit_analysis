diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 2bc618e6..e9466fd2 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -30,6 +30,8 @@
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
  * 
+ * This class is thread-safe.
+ * 
  * @author Markus
  * 
  * @param <T>
@@ -440,18 +442,72 @@ public void deleteByKey(K key) {
         assertSinglePk();
         SQLiteStatement stmt = statements.getDeleteStatement();
         synchronized (stmt) {
-            if (key instanceof Long) {
-                stmt.bindLong(1, (Long) key);
-            } else {
-                stmt.bindString(1, key.toString());
-            }
-            stmt.execute();
+            deleteByKeyInsideSynchronized(key, stmt);
         }
         if (identityScope != null) {
             identityScope.remove(key);
         }
     }
 
+    private void deleteByKeyInsideSynchronized(K key, SQLiteStatement stmt) {
+        if (key instanceof Long) {
+            stmt.bindLong(1, (Long) key);
+        } else {
+            stmt.bindString(1, key.toString());
+        }
+        stmt.execute();
+    }
+
+    /**
+     * Deletes the given entities in the database using a transaction.
+     * 
+     * @param entities
+     *            The entities to delete.
+     */
+    public void deleteInTx(Iterable<T> entities) {
+        assertSinglePk();
+        SQLiteStatement stmt = statements.getDeleteStatement();
+        synchronized (stmt) {
+            db.beginTransaction();
+            try {
+                List<K> keysToRemoveFromIdentityScope = null;
+                if (identityScope != null) {
+                    identityScope.lock();
+                    keysToRemoveFromIdentityScope = new ArrayList<K>();
+                }
+                try {
+                    for (T entity : entities) {
+                        K key = getKeyVerified(entity);
+                        deleteByKeyInsideSynchronized(key, stmt);
+                        if (keysToRemoveFromIdentityScope != null) {
+                            keysToRemoveFromIdentityScope.add(key);
+                        }
+                    }
+                } finally {
+                    if (identityScope != null) {
+                        identityScope.unlock();
+                    }
+                }
+                db.setTransactionSuccessful();
+                if (keysToRemoveFromIdentityScope != null && identityScope != null) {
+                    identityScope.remove(keysToRemoveFromIdentityScope);
+                }
+            } finally {
+                db.endTransaction();
+            }
+        }
+    }
+
+    /**
+     * Deletes the given entities in the database using a transaction.
+     * 
+     * @param entities
+     *            The entities to delete.
+     */
+    public void deleteInTx(T... entities) {
+        deleteInTx(Arrays.asList(entities));
+    }
+
     /** Resets all locally changed properties of the entity by reloading the values from the database. */
     public void refresh(T entity) {
         assertSinglePk();
@@ -529,12 +585,10 @@ protected void attachEntity(T entity) {
     }
 
     /**
-     * Inserts the given entities in the database using a transaction.
+     * Updates the given entities in the database using a transaction.
      * 
      * @param entities
      *            The entities to insert.
-     * @param setPrimaryKey
-     *            if true, the PKs of the given will be set after the insert; pass false to improve performance.
      */
     public void updateInTx(Iterable<T> entities) {
         SQLiteStatement stmt = statements.getUpdateStatement();
@@ -561,10 +615,10 @@ public void updateInTx(Iterable<T> entities) {
     }
 
     /**
-     * Inserts the given entities in the database using a transaction.
+     * Updates the given entities in the database using a transaction.
      * 
      * @param entities
-     *            The entities to insert.
+     *            The entities to update.
      */
     public void updateInTx(T... entities) {
         updateInTx(Arrays.asList(entities));
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
index 664254ed..081ee710 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
@@ -36,6 +36,8 @@
  * in a query, you will get a single Java object instead of two when using a session cache. This is particular useful
  * for relations pointing to a common set of entities.
  * 
+ * This class is thread-safe.
+ * 
  * @author Markus
  * 
  */
diff --git a/DaoCore/src/de/greenrobot/dao/IdentityScope.java b/DaoCore/src/de/greenrobot/dao/IdentityScope.java
index b44fc43c..6ea4b01c 100644
--- a/DaoCore/src/de/greenrobot/dao/IdentityScope.java
+++ b/DaoCore/src/de/greenrobot/dao/IdentityScope.java
@@ -38,6 +38,8 @@
 
     void remove(K key);
 
+    void remove(Iterable<K> key);
+
     void clear();
 
     void lock();
diff --git a/DaoCore/src/de/greenrobot/dao/IdentityScopeLong.java b/DaoCore/src/de/greenrobot/dao/IdentityScopeLong.java
index 4cc668d7..13d2845e 100644
--- a/DaoCore/src/de/greenrobot/dao/IdentityScopeLong.java
+++ b/DaoCore/src/de/greenrobot/dao/IdentityScopeLong.java
@@ -117,6 +117,18 @@ public void remove(Long key) {
         }
     }
 
+    @Override
+    public void remove(Iterable< Long> keys) {
+        lock.lock();
+        try {
+            for (Long key : keys) {
+                map.remove(key);
+            }
+        } finally {
+            lock.unlock();
+        }
+    }
+
     @Override
     public void clear() {
         lock.lock();
diff --git a/DaoCore/src/de/greenrobot/dao/IdentityScopeObject.java b/DaoCore/src/de/greenrobot/dao/IdentityScopeObject.java
index 1c879877..08f0a290 100644
--- a/DaoCore/src/de/greenrobot/dao/IdentityScopeObject.java
+++ b/DaoCore/src/de/greenrobot/dao/IdentityScopeObject.java
@@ -101,6 +101,18 @@ public void remove(K key) {
             lock.unlock();
         }
     }
+    
+    @Override
+    public void remove(Iterable< K> keys) {
+        lock.lock();
+        try {
+            for (K key : keys) {
+                map.remove(key);
+            }
+        } finally {
+            lock.unlock();
+        }
+    }
 
     @Override
     public void clear() {
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
index bdf33d2f..8b7ef40b 100644
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
+++ b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
@@ -25,7 +25,6 @@
 import android.database.DatabaseUtils;
 import android.database.SQLException;
 import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.SqlUtils;
 
@@ -161,6 +160,27 @@ public void testDeleteAll() {
         }
     }
 
+    public void testDeleteInTx() {
+        List<T> entityList = new ArrayList<T>();
+        for (int i = 0; i < 10; i++) {
+            T entity = createEntityWithRandomPk();
+            entityList.add(entity);
+        }
+        dao.insertInTx(entityList);
+        List<T> entitiesToDelete = new ArrayList<T>();
+        entitiesToDelete.add(entityList.get(0));
+        entitiesToDelete.add(entityList.get(3));
+        entitiesToDelete.add(entityList.get(4));
+        entitiesToDelete.add(entityList.get(8));
+        dao.deleteInTx(entitiesToDelete);
+        assertEquals(entityList.size() - entitiesToDelete.size(), dao.count());
+        for (T deletedEntity : entitiesToDelete) {
+            K key = daoAccess.getKey(deletedEntity);
+            assertNotNull(key);
+            assertNull(dao.load(key));
+        }
+    }
+
     public void testRowId() {
         T entity1 = createEntityWithRandomPk();
         T entity2 = createEntityWithRandomPk();
diff --git a/DaoCore/src/de/greenrobot/dao/test/DbTest.java b/DaoCore/src/de/greenrobot/dao/test/DbTest.java
index b7302576..df55ae36 100644
--- a/DaoCore/src/de/greenrobot/dao/test/DbTest.java
+++ b/DaoCore/src/de/greenrobot/dao/test/DbTest.java
@@ -18,15 +18,11 @@
 
 import java.util.Random;
 
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.DbUtils;
-
 import android.app.Application;
 import android.content.Context;
-import android.database.Cursor;
-import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 import android.test.ApplicationTestCase;
+import de.greenrobot.dao.DbUtils;
 
 /**
  * Base class for database related testing. Prepares an in-memory or an file-based DB.
diff --git a/README.md b/README.md
index d9c00e06..472beb12 100644
--- a/README.md
+++ b/README.md
@@ -11,7 +11,8 @@ Release History
 * Added CountQuery for creating SELECT COUNT (*) queries with QueryBuilder
 * Added getDatabase in DaoMaster, DaoSession, and Dao
 * Added insertOrReplaceInTx in Dao
-* Made DAOs and DaoSessions in active entities transient
+* Added deleteInTx in Dao
+* Made DAOs and DaoSessions in active entities transient (allows serialization of entities)
 * Minor fixes
 
 ### V1.1.2 (2012-03-26): ADT 17 support for demo project
