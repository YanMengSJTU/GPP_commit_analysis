diff --git a/daogenerator/src-template/dao-uid.ftl b/daogenerator/src-template/dao-uid.ftl
index 0bf586f1..27642504 100644
--- a/daogenerator/src-template/dao-uid.ftl
+++ b/daogenerator/src-template/dao-uid.ftl
@@ -4,15 +4,20 @@
     || entity.superclassEntity.toManyRelations?has_content))>
     @Override
     public long insert(${entity.className} entity) {
-
         <#if entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content>
         <#list entity.superclassEntity.toOneRelations as toOne>
-        daoSession.insert(entity.get${toOne.name?cap_first}());
+
+        ${toOne.targetEntity.className} ${toOne.name} = entity.get${toOne.name?cap_first}();
+        daoSession.insert(${toOne.name});
+        entity.set${toOne.fkProperties[0].propertyName?cap_first}(${toOne.name}.get${entity.pkProperty.propertyName?cap_first}());
         </#list>
         </#if>
         <#if entity.toOneRelations?has_content>
         <#list entity.toOneRelations as toOne>
-        daoSession.insert(entity.get${toOne.name?cap_first}());
+
+        ${toOne.targetEntity.className} ${toOne.name} = entity.get${toOne.name?cap_first}();
+        daoSession.insert(${toOne.name});
+        entity.set${toOne.fkProperties[0].propertyName?cap_first}(${toOne.name}.get${entity.pkProperty.propertyName?cap_first}());
         </#list>
         </#if>
 
diff --git a/daogenerator/src-template/dao.ftl b/daogenerator/src-template/dao.ftl
index 27a443c9..c0275015 100644
--- a/daogenerator/src-template/dao.ftl
+++ b/daogenerator/src-template/dao.ftl
@@ -53,8 +53,13 @@ import ${schema.defaultJavaPackageDao}.DaoSession;
 <#list entity.additionalImportsDao as additionalImport>
 import ${additionalImport};
 </#list>
-
 </#if>
+<#if entity.superclassEntity?has_content && entity.superclassEntity.additionalImportsDao?has_content>
+<#list entity.superclassEntity.additionalImportsDao as additionalImport>
+import ${additionalImport};
+</#list>
+</#if>
+
 import ${entity.javaPackage}.${entity.className};
 <#if entity.protobuf>
 import ${entity.javaPackage}.${entity.className}.Builder;
@@ -62,11 +67,6 @@ import ${entity.javaPackage}.${entity.className}.Builder;
 <#list entity.toOneRelations as toOne>
 import ${toOne.targetEntity.javaPackage}.${toOne.targetEntity.className};
 </#list>
-<#if entity.superclassEntity?has_content>
-<#list entity.superclassEntity.toOneRelations as toOne>
-import ${toOne.targetEntity.javaPackage}.${toOne.targetEntity.className};
-</#list>
-</#if>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -151,7 +151,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#else>${property.propertyName}<#if
  property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
 </#if>
-       }
+        }
 </#if>
 </#list>
 <#list entity.toOneRelations as toOne>
diff --git a/daogenerator/src-template/entity-base.ftl b/daogenerator/src-template/entity-base.ftl
index fb460d15..e46a1a68 100644
--- a/daogenerator/src-template/entity-base.ftl
+++ b/daogenerator/src-template/entity-base.ftl
@@ -36,6 +36,18 @@ import de.greenrobot.dao.DaoException;
 import ${additionalImport};
 </#list>
 </#if>
+<#if entity.additionalImports?has_content>
+
+<#list entity.additionalImports as importPackage>
+import ${importPackage};
+</#list>
+</#if>
+<#if entity.superclassEntity?has_content && entity.superclassEntity.additionalImports?has_content>
+
+<#list entity.superclassEntity.additionalImports as importPkg>
+import ${importPkg};
+</#list>
+</#if>
 <#if entity.hasKeepSections>
 
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
@@ -66,11 +78,6 @@ entity.superclass?has_content> extends ${entity.superclass}</#if> {
     protected ${property.javaType} ${property.propertyName};
 </#list>
 <#if entity.active>
-<#if !entity.superclassEntity?has_content>
-
-    /** Used to resolve relations */
-    protected transient DaoSession daoSession;
-</#if>
 <#if !entity.skipDaoGeneration>
 
     /** Used for active entity operations. */
@@ -91,9 +98,14 @@ entity.superclass?has_content> extends ${entity.superclass}</#if> {
     <@print_annotations toMany.fieldAnnotations, "    "/>
     protected List<${toMany.targetEntity.className}> ${toMany.name};
 </#list>
+<#if !entity.superclassEntity?has_content>
 
+    /** Used to resolve relations */
+    protected transient DaoSession daoSession;
+</#if>
 </#if>
 <#if entity.hasKeepSections>
+
     // KEEP FIELDS - put your custom fields here
 <#if keepFields?has_content>
 ${keepFields!}
diff --git a/daogenerator/src-template/entity.ftl b/daogenerator/src-template/entity.ftl
index d41b3675..751a244c 100644
--- a/daogenerator/src-template/entity.ftl
+++ b/daogenerator/src-template/entity.ftl
@@ -1,21 +1,17 @@
-<#--
-Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
-
-This file is part of greenDAO Generator.
-
-greenDAO Generator is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-greenDAO Generator is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
--->
 <#include "*/annotation.ftl">
 package ${entity.javaPackage};
+<#if entity.additionalImports?has_content>
+
+<#list entity.additionalImports as importPackage>
+import ${importPackage};
+</#list>
+</#if>
+<#if entity.superclassEntity?has_content && entity.superclassEntity.additionalImports?has_content>
+
+<#list entity.superclassEntity.additionalImports as importPkg>
+import ${importPkg};
+</#list>
+</#if>
 <#if entity.hasKeepSections>
 
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
diff --git a/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 5d1eaeaf..71315720 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -20,7 +20,6 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.io.StringWriter;
 import java.io.Writer;
 import java.util.HashMap;
 import java.util.List;
@@ -112,8 +111,8 @@ public void generateAll(Schema schema, String outDir, String outDirModel, String
                 generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
             }
             if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
-                generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
-                //generate(templateEntity, outDirModelFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+                //generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+                generate(templateEntity, outDirModelFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
                 generate(templateEntityBase, outDirFile, entity.getJavaPackage(), entity.getClassNameBase(), schema, entity);
             }
             if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
@@ -172,11 +171,8 @@ private void generate(Template template, File outDirFile, String javaPackage, St
             }
 
             Writer writer = new FileWriter(file);
-            StringWriter w = new StringWriter();
             try {
                 template.process(root, writer);
-                template.process(root, w);
-                String s = w.toString();
                 writer.flush();
                 System.out.println("Written " + file.getCanonicalPath());
             } finally {
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Entity.java b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
index 4d44233f..3c88c272 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -80,6 +80,9 @@
     private boolean skipDaoGeneration;
     private Entity superclassEntity;
 
+    /** Imports for non-base class */
+    private final Collection<String> additionalImports;
+
     Entity(Schema schema, String className) {
         this.schema = schema;
         this.className = className;
@@ -100,6 +103,8 @@
         fullConstructorAnnotations = new ArrayList<Annotation>();
         contentProviders = new ArrayList<ContentProvider>();
         constructors = true;
+
+        additionalImports = new TreeSet<String>();
     }
 
     public PropertyBuilder addBooleanProperty(String propertyName) {
@@ -455,6 +460,15 @@ public Boolean getHasKeepSections() {
         return hasKeepSections;
     }
 
+    public void addImport(String importPackage) {
+        additionalImportsEntity.add(importPackage);
+    }
+
+    public void addEntityImport(String importPackage) {
+        addImport(importPackage);
+        additionalImports.add(importPackage);
+    }
+
     public Collection<String> getAdditionalImportsEntity() {
         return additionalImportsEntity;
     }
@@ -463,6 +477,10 @@ public Boolean getHasKeepSections() {
         return additionalImportsDao;
     }
 
+    public Collection<String> getAdditionalImports() {
+        return additionalImports;
+    }
+
     public void setHasKeepSections(Boolean hasKeepSections) {
         this.hasKeepSections = hasKeepSections;
     }
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Property.java b/daogenerator/src/de/greenrobot/daogenerator/Property.java
index 718ffef1..d2a2b96b 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,8 +17,8 @@
  */
 package de.greenrobot.daogenerator;
 
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
 
 /** Model class for an entity's property: a Java property mapped to a data base column. */
 public class Property {
@@ -126,6 +126,11 @@ public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
             return this;
         }
 
+        public PropertyBuilder addImport(String importPackage) {
+            property.entity.addEntityImport(importPackage);
+            return this;
+        }
+
         public Property getProperty() {
             return property;
         }
@@ -157,6 +162,7 @@ public Property getProperty() {
     private int ordinal;
 
     private String javaType;
+
     private String javaTypeShort;
 
     public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
