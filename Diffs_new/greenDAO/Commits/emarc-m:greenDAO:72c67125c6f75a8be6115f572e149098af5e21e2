diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index b4edd227..9ed97a5d 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -71,17 +71,24 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 
     /** Used for active entity operations. */
     private transient ${entity.classNameDao} myDao;
-
+    
 <#list entity.toOneRelations as toOne>
+<#if entity.hasKeepSections>
+    // KEEP ${toOne.name} ANNOTATIONS - put your custom annotations here
+${(keepAnnotations[toOne.name])!}    // KEEP ANNOTATIONS END
+</#if>
     private ${toOne.targetEntity.className} ${toOne.name};
 <#if toOne.useFkProperty>
     private ${toOne.resolvedKeyJavaType[0]} ${toOne.name}__resolvedKey;
 <#else>
     private boolean ${toOne.name}__refreshed;
 </#if>
-
 </#list>
 <#list entity.toManyRelations as toMany>
+<#if entity.hasKeepSections>
+    // KEEP ${toMany.name} ANNOTATIONS - put your custom annotations here
+${(keepAnnotations[toMany.name])!}    // KEEP ANNOTATIONS END
+</#if>
     private List<${toMany.targetEntity.className}> ${toMany.name};
 </#list>
 
@@ -89,7 +96,6 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if entity.hasKeepSections>
     // KEEP FIELDS - put your custom fields here
 ${keepFields!}    // KEEP FIELDS END
-
 </#if>
 <#if entity.constructors>
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index d1604d54..1b1fb103 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -15,6 +15,7 @@
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
+
 package de.greenrobot.daogenerator;
 
 import java.io.File;
@@ -32,7 +33,8 @@
 import freemarker.template.Template;
 
 /**
- * Once you have your model created, use this class to generate entities and DAOs.
+ * Once you have your model created, use this class to generate entities and
+ * DAOs.
  * 
  * @author Markus
  */
@@ -41,6 +43,7 @@
     private Pattern patternKeepIncludes;
     private Pattern patternKeepFields;
     private Pattern patternKeepMethods;
+    private Pattern patternKeepAnnotations;
 
     private Template templateDao;
     private Template templateDaoMaster;
@@ -51,12 +54,14 @@
 
     public DaoGenerator() throws IOException {
         System.out.println("greenDAO Generator");
-        System.out.println("Copyright 2011-2013 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
+        System.out
+                .println("Copyright 2011-2013 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
         System.out.println("This program comes with ABSOLUTELY NO WARRANTY");
 
         patternKeepIncludes = compilePattern("INCLUDES");
         patternKeepFields = compilePattern("FIELDS");
         patternKeepMethods = compilePattern("METHODS");
+        patternKeepAnnotations = compileNamedPattern("ANNOTATIONS");
 
         Configuration config = new Configuration();
         config.setClassForTemplateLoading(this.getClass(), "/");
@@ -70,9 +75,16 @@ public DaoGenerator() throws IOException {
         templateContentProvider = config.getTemplate("content-provider.ftl");
     }
 
+    private Pattern compileNamedPattern(String sectionName) {
+        int flags = Pattern.DOTALL | Pattern.MULTILINE;
+        return Pattern.compile("//\\s*?KEEP\\s+(\\S*)\\s*" + sectionName
+                + ".*?\n(.*?)^\\s*// KEEP " + sectionName + " END.*?\n", flags);
+    }
+
     private Pattern compilePattern(String sectionName) {
         int flags = Pattern.DOTALL | Pattern.MULTILINE;
-        return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName
+        return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP "
+                + sectionName
                 + " END.*?\n", flags);
     }
 
@@ -99,16 +111,19 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
 
         List<Entity> entities = schema.getEntities();
         for (Entity entity : entities) {
-            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
+            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(),
+                    schema, entity);
             if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
-                generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+                generate(templateEntity, outDirFile, entity.getJavaPackage(),
+                        entity.getClassName(), schema, entity);
             }
             if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
                 String javaPackageTest = entity.getJavaPackageTest();
                 String classNameTest = entity.getClassNameTest();
                 File javaFilename = toJavaFilename(outDirTestFile, javaPackageTest, classNameTest);
                 if (!javaFilename.exists()) {
-                    generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
+                    generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest,
+                            schema, entity);
                 } else {
                     System.out.println("Skipped " + javaFilename.getCanonicalPath());
                 }
@@ -116,12 +131,15 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
             for (ContentProvider contentProvider : entity.getContentProviders()) {
                 Map<String, Object> additionalObjectsForTemplate = new HashMap<String, Object>();
                 additionalObjectsForTemplate.put("contentProvider", contentProvider);
-                generate(templateContentProvider, outDirFile, entity.getJavaPackage(), entity.getClassName()
-                        + "ContentProvider", schema, entity, additionalObjectsForTemplate);
+                generate(templateContentProvider, outDirFile, entity.getJavaPackage(),
+                        entity.getClassName()
+                                + "ContentProvider", schema, entity, additionalObjectsForTemplate);
             }
         }
-        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
-        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
+        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster",
+                schema, null);
+        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession",
+                schema, null);
 
         long time = System.currentTimeMillis() - start;
         System.out.println("Processed " + entities.size() + " entities in " + time + "ms");
@@ -130,18 +148,21 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
     protected File toFileForceExists(String filename) throws IOException {
         File file = new File(filename);
         if (!file.exists()) {
-            throw new IOException(filename
-                    + " does not exist. This check is to prevent accidental file generation into a wrong path.");
+            throw new IOException(
+                    filename
+                            + " does not exist. This check is to prevent accidental file generation into a wrong path.");
         }
         return file;
     }
 
-    private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,
+    private void generate(Template template, File outDirFile, String javaPackage,
+            String javaClassName, Schema schema,
             Entity entity) throws Exception {
         generate(template, outDirFile, javaPackage, javaClassName, schema, entity, null);
     }
 
-    private void generate(Template template, File outDirFile, String javaPackage, String javaClassName, Schema schema,
+    private void generate(Template template, File outDirFile, String javaPackage,
+            String javaClassName, Schema schema,
             Entity entity, Map<String, Object> additionalObjectsForTemplate) throws Exception {
         Map<String, Object> root = new HashMap<String, Object>();
         root.put("schema", schema);
@@ -194,6 +215,13 @@ private void checkKeepSections(File file, Map<String, Object> root) {
                 if (matcher.matches()) {
                     root.put("keepMethods", matcher.group(1));
                 }
+
+                matcher = patternKeepAnnotations.matcher(contents);
+                Map<String, String> allMatches = new HashMap<String, String>();
+                while (matcher.find()) {
+                    allMatches.put(matcher.group(1), matcher.group(2));
+                }
+                root.put("keepAnnotations", allMatches);
             } catch (IOException e) {
                 e.printStackTrace();
             }
