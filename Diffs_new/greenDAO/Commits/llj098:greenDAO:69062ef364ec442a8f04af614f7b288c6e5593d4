diff --git a/DaoCore/.classpath b/DaoCore/.classpath
index 7bc01d9a..51769745 100644
--- a/DaoCore/.classpath
+++ b/DaoCore/.classpath
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoCore/project.properties b/DaoCore/project.properties
index 96db7421..65c74626 100644
--- a/DaoCore/project.properties
+++ b/DaoCore/project.properties
@@ -9,4 +9,4 @@
 
 android.library=true
 # Project target.
-target=android-4
+target=Google Inc.:Google APIs:18
diff --git a/DaoExample/.classpath b/DaoExample/.classpath
index 6a988e59..fcad27b1 100644
--- a/DaoExample/.classpath
+++ b/DaoExample/.classpath
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="src" path="src-gen"/>
 	<classpathentry kind="src" path="src-test"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoExample/project.properties b/DaoExample/project.properties
index c957743c..9f4d8c62 100644
--- a/DaoExample/project.properties
+++ b/DaoExample/project.properties
@@ -8,4 +8,4 @@
 # project structure.
 
 # Project target.
-target=android-4
+target=Google Inc.:Google APIs:18
diff --git a/DaoExampleGenerator/.classpath b/DaoExampleGenerator/.classpath
index 1fe2a4f1..e7433244 100644
--- a/DaoExampleGenerator/.classpath
+++ b/DaoExampleGenerator/.classpath
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="GROOVY_DSL_SUPPORT"/>
-	<classpathentry kind="con" path="GROOVY_SUPPORT"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
 	<classpathentry kind="con" path="org.springsource.ide.eclipse.gradle.dsld.classpathcontainer"/>
+	<classpathentry kind="con" path="GROOVY_DSL_SUPPORT"/>
+	<classpathentry kind="con" path="GROOVY_SUPPORT"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/DaoExampleGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs b/DaoExampleGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs
index 1b0724ea..7ce38748 100644
--- a/DaoExampleGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs
+++ b/DaoExampleGenerator/.settings/gradle/org.springsource.ide.eclipse.gradle.refresh.prefs
@@ -1,3 +1,9 @@
 #org.springsource.ide.eclipse.gradle.core.actions.GradleRefreshPreferences
-#Sun Feb 24 10:59:34 CET 2013
-enableDSLD=true
+#Mon Jun 09 17:34:01 CST 2014
+addResourceFilters=true
+afterTasks=afterEclipseImport;
+beforeTasks=cleanEclipse;eclipse;
+enableAfterTasks=true
+enableBeforeTasks=true
+enableDSLD=false
+useHierarchicalNames=false
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..907d1c80 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -17,8 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
+<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Enum":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Enum":"Int", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
 package ${entity.javaPackageDao};
 
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
@@ -136,7 +136,8 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         ${property.javaType} ${property.propertyName} = entity.get${property.propertyName?cap_first}();
         if (${property.propertyName} != null) {
             stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, ${property.propertyName}<#if
- property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
+ property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if><#if 
+ property.propertyType == "Enum">.getValue()</#if>);
         }
 </#if>
 </#list>
@@ -202,9 +203,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.properties as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
+            property.propertyType == "Date">new java.util.Date(</#if><#if 
+            property.propertyType == "Enum">${property.javaType}.valueOf(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
-            property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
+            property.propertyType == "Date">)</#if><#if 
+            property.propertyType == "Enum">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
         );
         return entity;
@@ -227,9 +230,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#list entity.properties as property>
         entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
+            property.propertyType == "Enum">${property.javaType}.valueOf(</#if><#if 
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
-            property.propertyType == "Boolean"> != 0</#if><#if
-            property.propertyType == "Date">)</#if>);
+            property.propertyType == "Boolean"> != 0</#if><#if         
+            property.propertyType == "Date">)</#if><#if 
+            property.propertyType == "Enum">)</#if>);
 </#list>
 </#if>
      }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e40c0a18..0e634779 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -17,8 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
+<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Enum":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Enum":"Int", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
 package ${entity.javaPackage};
 
@@ -57,6 +57,32 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
     /** Not-null value. */
 </#if>
     private ${property.javaType} ${property.propertyName};
+    
+<#if property.propertyType == "Enum">
+   	public enum ${property.enumTypeName} {   	
+   		<#list property.enumMap?keys as k>${k}(${ property.enumMap[k] })<#if 
+   		k_index == property.enumMap?size -1>;<#else>,</#if></#list>
+   		
+   		private final int value;
+		private ${property.enumTypeName} (int value) {
+			this.value = value;
+		}
+    	public int getValue() {
+    		return value;
+    	}
+    	
+    	public static ${property.javaType} valueOf(int value) {
+    		switch(value) {
+    			<#list property.enumMap?keys as k>
+    			case ${ property.enumMap[k] }:
+    				return ${k};	
+    			</#list>
+   				default:
+   					return null;
+   			}
+    	}
+    }
+</#if>
 </#list>
 
 <#if entity.active>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index dc8b1049..c4984e69 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -126,6 +126,10 @@ public PropertyBuilder addDateProperty(String propertyName) {
         return addProperty(PropertyType.Date, propertyName);
     }
 
+    public PropertyBuilder addEnumProperty(String propertyName) {
+    	return addProperty(PropertyType.Enum, propertyName);
+    }
+    
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
         if (!propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..324889ef 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,183 +17,220 @@
  */
 package de.greenrobot.daogenerator;
 
-/** Model class for an entity's property: a Java property mapped to a data base column. */
-public class Property {
-
-    public static class PropertyBuilder {
-        private final Property property;
-
-        public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
-            property = new Property(schema, entity, propertyType, propertyName);
-        }
-
-        public PropertyBuilder columnName(String columnName) {
-            property.columnName = columnName;
-            return this;
-        }
-
-        public PropertyBuilder columnType(String columnType) {
-            property.columnType = columnType;
-            return this;
-        }
-
-        public PropertyBuilder primaryKey() {
-            property.primaryKey = true;
-            return this;
-        }
-
-        public PropertyBuilder primaryKeyAsc() {
-            property.primaryKey = true;
-            property.pkAsc = true;
-            return this;
-        }
-
-        public PropertyBuilder primaryKeyDesc() {
-            property.primaryKey = true;
-            property.pkDesc = true;
-            return this;
-        }
-
-        public PropertyBuilder autoincrement() {
-            if (!property.primaryKey || property.propertyType != PropertyType.Long) {
-                throw new RuntimeException(
-                        "AUTOINCREMENT is only available to primary key properties of type long/Long");
-            }
-            property.pkAutoincrement = true;
-            return this;
-        }
-
-        public PropertyBuilder unique() {
-            property.unique = true;
-            return this;
-        }
-
-        public PropertyBuilder notNull() {
-            property.notNull = true;
-            return this;
-        }
+import java.util.ArrayList;
+import java.util.HashMap;
 
-        public PropertyBuilder index() {
-            Index index = new Index();
-            index.addProperty(property);
-            property.entity.addIndex(index);
-            return this;
-        }
-
-        public PropertyBuilder indexAsc(String indexNameOrNull, boolean isUnique) {
-            Index index = new Index();
-            index.addPropertyAsc(property);
-            if (isUnique) {
-                index.makeUnique();
-            }
-            index.setName(indexNameOrNull);
-            property.entity.addIndex(index);
-            return this;
-        }
-
-        public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
-            Index index = new Index();
-            index.addPropertyDesc(property);
-            if (isUnique) {
-                index.makeUnique();
-            }
-            index.setName(indexNameOrNull);
-            property.entity.addIndex(index);
-            return this;
-        }
-
-        public Property getProperty() {
-            return property;
-        }
-    }
-
-    private final Schema schema;
-    private final Entity entity;
-    private PropertyType propertyType;
-    private final String propertyName;
-
-    private String columnName;
-    private String columnType;
-
-    private boolean primaryKey;
-    private boolean pkAsc;
-    private boolean pkDesc;
-    private boolean pkAutoincrement;
-
-    private boolean unique;
-    private boolean notNull;
-
-    /** Initialized in 2nd pass */
-    private String constraints;
-
-    private int ordinal;
-
-    private String javaType;
-
-    public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
-        this.schema = schema;
-        this.entity = entity;
-        this.propertyName = propertyName;
-        this.propertyType = propertyType;
-    }
-
-    public String getPropertyName() {
-        return propertyName;
-    }
-
-    public PropertyType getPropertyType() {
-        return propertyType;
-    }
-
-    public void setPropertyType(PropertyType propertyType) {
-        this.propertyType = propertyType;
-    }
-
-    public String getColumnName() {
-        return columnName;
-    }
-
-    public String getColumnType() {
-        return columnType;
-    }
-
-    public boolean isPrimaryKey() {
-        return primaryKey;
-    }
-
-    public boolean isAutoincrement() {
-        return pkAutoincrement;
-    }
-
-    public String getConstraints() {
-        return constraints;
-    }
-
-    public boolean isUnique() {
-        return unique;
-    }
-
-    public boolean isNotNull() {
-        return notNull;
-    }
-
-    public String getJavaType() {
-        return javaType;
-    }
-
-    public int getOrdinal() {
-        return ordinal;
-    }
-
-    public void setOrdinal(int ordinal) {
-        this.ordinal = ordinal;
-    }
-
-    public Entity getEntity() {
-        return entity;
-    }
+/**
+ * Model class for an entity's property: a Java property mapped to a data base
+ * column.
+ */
+public class Property {
 
-    void init2ndPass() {
+	public static class PropertyBuilder {
+		private final Property property;
+
+		public PropertyBuilder(Schema schema, Entity entity,
+				PropertyType propertyType, String propertyName) {
+			property = new Property(schema, entity, propertyType, propertyName);
+		}
+
+		public PropertyBuilder columnName(String columnName) {
+			property.columnName = columnName;
+			return this;
+		}
+
+		public PropertyBuilder columnType(String columnType) {
+			property.columnType = columnType;
+			return this;
+		}
+
+		public PropertyBuilder primaryKey() {
+			property.primaryKey = true;
+			return this;
+		}
+
+		public PropertyBuilder primaryKeyAsc() {
+			property.primaryKey = true;
+			property.pkAsc = true;
+			return this;
+		}
+
+		public PropertyBuilder primaryKeyDesc() {
+			property.primaryKey = true;
+			property.pkDesc = true;
+			return this;
+		}
+
+		public PropertyBuilder autoincrement() {
+			if (!property.primaryKey
+					|| property.propertyType != PropertyType.Long) {
+				throw new RuntimeException(
+						"AUTOINCREMENT is only available to primary key properties of type long/Long");
+			}
+			property.pkAutoincrement = true;
+			return this;
+		}
+
+		public PropertyBuilder unique() {
+			property.unique = true;
+			return this;
+		}
+
+		public PropertyBuilder notNull() {
+			property.notNull = true;
+			return this;
+		}
+
+		public PropertyBuilder index() {
+			Index index = new Index();
+			index.addProperty(property);
+			property.entity.addIndex(index);
+			return this;
+		}
+
+		public PropertyBuilder indexAsc(String indexNameOrNull, boolean isUnique) {
+			Index index = new Index();
+			index.addPropertyAsc(property);
+			if (isUnique) {
+				index.makeUnique();
+			}
+			index.setName(indexNameOrNull);
+			property.entity.addIndex(index);
+			return this;
+		}
+
+		public PropertyBuilder indexDesc(String indexNameOrNull,
+				boolean isUnique) {
+			Index index = new Index();
+			index.addPropertyDesc(property);
+			if (isUnique) {
+				index.makeUnique();
+			}
+			index.setName(indexNameOrNull);
+			property.entity.addIndex(index);
+			return this;
+		}
+
+		public Property getProperty() {
+			return property;
+		}
+
+		public PropertyBuilder addValue(String name, int val) {
+			if (property.propertyType != PropertyType.Enum) {
+				throw new RuntimeException("only enum support this method!");
+			}
+			property.enumMap.put(name, val);
+			return this;
+		}
+	}
+
+	private final HashMap<String, Integer> enumMap = new HashMap<String, Integer>();
+	private final Schema schema;
+	private final Entity entity;
+	private PropertyType propertyType;
+	private final String propertyName;
+
+	private String columnName;
+	private String columnType;
+
+	private boolean primaryKey;
+	private boolean pkAsc;
+	private boolean pkDesc;
+	private boolean pkAutoincrement;
+
+	private boolean unique;
+	private boolean notNull;
+
+	/** Initialized in 2nd pass */
+	private String constraints;
+
+	private int ordinal;
+	private String enumTypeName;
+	private String javaType;
+
+	public Property(Schema schema, Entity entity, PropertyType propertyType,
+			String propertyName) {
+		this.schema = schema;
+		this.entity = entity;
+		this.propertyName = uncapFirst(propertyName);
+		this.propertyType = propertyType;
+	}
+
+	public static String capFirst(String str) {
+		String cap = str.substring(0, 1).toUpperCase();
+		return cap + str.substring(1);
+	}
+
+	public static String uncapFirst(String str) {
+		String u = str.substring(0, 1).toLowerCase();
+		return u + str.substring(1);
+	}
+
+	public String getPropertyName() {
+		return propertyName;
+	}
+
+	public PropertyType getPropertyType() {
+		return propertyType;
+	}
+
+	public void setPropertyType(PropertyType propertyType) {
+		this.propertyType = propertyType;
+	}
+
+	public String getColumnName() {
+		return columnName;
+	}
+
+	public String getColumnType() {
+		return columnType;
+	}
+
+	public boolean isPrimaryKey() {
+		return primaryKey;
+	}
+
+	public boolean isAutoincrement() {
+		return pkAutoincrement;
+	}
+
+	public String getConstraints() {
+		return constraints;
+	}
+
+	public boolean isUnique() {
+		return unique;
+	}
+
+	public boolean isNotNull() {
+		return notNull;
+	}
+
+	public String getJavaType() {
+		return javaType;
+	}
+
+	public String getEnumTypeName() {
+		return enumTypeName;
+	}
+	
+	public int getOrdinal() {
+		return ordinal;
+	}
+
+	public HashMap<String, Integer> getEnumMap() {
+		return enumMap;
+	}
+
+	public void setOrdinal(int ordinal) {
+		this.ordinal = ordinal;
+	}
+
+	public Entity getEntity() {
+		return entity;
+	}
+
+	void init2ndPass() {
         initConstraint();
         if (columnType == null) {
             columnType = schema.mapToDbType(propertyType);
@@ -201,6 +238,12 @@ void init2ndPass() {
         if (columnName == null) {
             columnName = DaoUtil.dbName(propertyName);
         }
+        if(propertyType == PropertyType.Enum) {
+        	enumTypeName = capFirst(propertyName);
+        	javaType = schema.getDefaultJavaPackage() +"." + 
+        			entity.getClassName() + "." + enumTypeName;
+        	return;
+        }
         if (notNull) {
             javaType = schema.mapToJavaTypeNotNull(propertyType);
         } else {
@@ -208,41 +251,42 @@ void init2ndPass() {
         }
     }
 
-    private void initConstraint() {
-        StringBuilder constraintBuilder = new StringBuilder();
-        if (primaryKey) {
-            constraintBuilder.append("PRIMARY KEY");
-            if (pkAsc) {
-                constraintBuilder.append(" ASC");
-            }
-            if (pkDesc) {
-                constraintBuilder.append(" DESC");
-            }
-            if (pkAutoincrement) {
-                constraintBuilder.append(" AUTOINCREMENT");
-            }
-        }
-        // Always have String PKs NOT NULL because SQLite is pretty strange in this respect:
-        // One could insert multiple rows with NULL PKs
-        if (notNull || (primaryKey && propertyType == PropertyType.String)) {
-            constraintBuilder.append(" NOT NULL");
-        }
-        if (unique) {
-            constraintBuilder.append(" UNIQUE");
-        }
-        String newContraints = constraintBuilder.toString().trim();
-        if (constraintBuilder.length() > 0) {
-            constraints = newContraints;
-        }
-    }
-
-    void init3ndPass() {
-        // Nothing to do so far
-    }
-
-    @Override
-    public String toString() {
-        return "Property " + propertyName + " of " + entity.getClassName();
-    }
+	private void initConstraint() {
+		StringBuilder constraintBuilder = new StringBuilder();
+		if (primaryKey) {
+			constraintBuilder.append("PRIMARY KEY");
+			if (pkAsc) {
+				constraintBuilder.append(" ASC");
+			}
+			if (pkDesc) {
+				constraintBuilder.append(" DESC");
+			}
+			if (pkAutoincrement) {
+				constraintBuilder.append(" AUTOINCREMENT");
+			}
+		}
+		// Always have String PKs NOT NULL because SQLite is pretty strange in
+		// this respect:
+		// One could insert multiple rows with NULL PKs
+		if (notNull || (primaryKey && propertyType == PropertyType.String)) {
+			constraintBuilder.append(" NOT NULL");
+		}
+		if (unique) {
+			constraintBuilder.append(" UNIQUE");
+		}
+		String newContraints = constraintBuilder.toString().trim();
+		if (constraintBuilder.length() > 0) {
+			constraints = newContraints;
+		}
+	}
+
+	void init3ndPass() {
+		// Nothing to do so far
+	}
+
+	@Override
+	public String toString() {
+		return "Property " + propertyName + " of " + entity.getClassName();
+	}
 
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
index 0246239e..8831234b 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
@@ -23,5 +23,5 @@
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date
+    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, Enum
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index e94c58f5..705dae7e 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -66,6 +66,7 @@ private void initTypeMappings() {
         propertyToDbType.put(PropertyType.String, "TEXT");
         propertyToDbType.put(PropertyType.ByteArray, "BLOB");
         propertyToDbType.put(PropertyType.Date, "INTEGER");
+        propertyToDbType.put(PropertyType.Enum, "INTEGER");
 
         propertyToJavaTypeNotNull = new HashMap<PropertyType, String>();
         propertyToJavaTypeNotNull.put(PropertyType.Boolean, "boolean");
@@ -78,6 +79,7 @@ private void initTypeMappings() {
         propertyToJavaTypeNotNull.put(PropertyType.String, "String");
         propertyToJavaTypeNotNull.put(PropertyType.ByteArray, "byte[]");
         propertyToJavaTypeNotNull.put(PropertyType.Date, "java.util.Date");
+        propertyToJavaTypeNotNull.put(PropertyType.Enum, "int");
 
         propertyToJavaTypeNullable = new HashMap<PropertyType, String>();
         propertyToJavaTypeNullable.put(PropertyType.Boolean, "Boolean");
@@ -90,6 +92,8 @@ private void initTypeMappings() {
         propertyToJavaTypeNullable.put(PropertyType.String, "String");
         propertyToJavaTypeNullable.put(PropertyType.ByteArray, "byte[]");
         propertyToJavaTypeNullable.put(PropertyType.Date, "java.util.Date");
+        propertyToJavaTypeNullable.put(PropertyType.Enum, "Integer");
+
     }
 
     /**
