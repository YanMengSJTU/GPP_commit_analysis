diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index 47bba961..198a6246 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -17,11 +17,9 @@
  */
 package de.greenrobot.daogenerator.gentest;
 
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
-import de.greenrobot.daogenerator.ToMany;
+import de.greenrobot.daogenerator.*;
+
+import java.util.Date;
 
 /**
  * Generates test entities for test project DaoTest.
@@ -45,6 +43,7 @@ public TestDaoGenerator() {
 
         createSimple();
         createSimpleNotNull();
+        createSimpleDefaultValues();
         testEntity = createTest();
         createRelation();
         createDate();
@@ -97,6 +96,29 @@ protected void createSimpleNotNull() {
         notNull.addByteArrayProperty("simpleByteArray").notNull();
     }
 
+    protected void createSimpleDefaultValues() {
+        Entity notNull = schema.addEntity("SimpleEntityDefaultValues");
+        notNull.addIdProperty().notNull();
+        notNull.addBooleanProperty("simpleBooleanTrue").addDefaultValue(true);
+        notNull.addBooleanProperty("simpleBooleanFalse").notNull().addDefaultValue(false);
+        notNull.addByteProperty("simpleByteMax").addDefaultValue(Byte.MAX_VALUE);
+        notNull.addByteProperty("simpleByteMin").notNull().addDefaultValue(Byte.MIN_VALUE);
+        notNull.addShortProperty("simpleShortMax").addDefaultValue(Short.MAX_VALUE);
+        notNull.addShortProperty("simpleShortMin").notNull().addDefaultValue(Short.MIN_VALUE);
+        notNull.addIntProperty("simpleIntMax").addDefaultValue(Integer.MAX_VALUE);
+        notNull.addIntProperty("simpleIntMin").notNull().addDefaultValue(Integer.MIN_VALUE);
+        notNull.addLongProperty("simpleLongMax").addDefaultValue(Long.MAX_VALUE);
+        notNull.addLongProperty("simpleLongMin").notNull().addDefaultValue(Long.MIN_VALUE);
+        notNull.addFloatProperty("simpleFloatMax").addDefaultValue(Float.MAX_VALUE);
+        notNull.addFloatProperty("simpleFloatMin").notNull().addDefaultValue(Float.MIN_VALUE);
+        notNull.addDoubleProperty("simpleDoubleMax").addDefaultValue(Double.MAX_VALUE);
+        notNull.addDoubleProperty("simpleDoubleMin").notNull().addDefaultValue(Double.MIN_VALUE);
+        notNull.addStringProperty("simpleString").addDefaultValue("greenrobot greenDAO");
+        notNull.addStringProperty("simpleStringNotNull").notNull().addDefaultValue("greenrobot greenDAO");
+        notNull.addDateProperty("simpleDate").addDefaultValue(new Date());
+        notNull.addDateProperty("simpleDateNotNull").notNull().addDefaultValue(new Date());
+    }
+
     protected Entity createTest() {
         Entity testEntity = schema.addEntity("TestEntity");
         testEntity.addIdProperty();
diff --git a/DaoGenerator/src-template/dao-unit-test.ftl b/DaoGenerator/src-template/dao-unit-test.ftl
index 376cf431..e72cdae1 100644
--- a/DaoGenerator/src-template/dao-unit-test.ftl
+++ b/DaoGenerator/src-template/dao-unit-test.ftl
@@ -43,9 +43,10 @@ isStringPK>AbstractDaoTestStringPk<${entity.classNameDao}, ${entity.className}><
         entity.set${entity.pkProperty.propertyName?cap_first}(key);
 </#if>
 <#list entity.properties as property>
-<#if property.notNull>
+<#assign isDefault = !property.defaultValue??/>
+<#if property.notNull && !isDefault>
         entity.set${property.propertyName?cap_first}();
-</#if> 
+</#if>
 </#list>
         return entity;
     }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e40c0a18..77a2c672 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -19,7 +19,8 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
-<#assign complexTypes = ["String", "ByteArray", "Date"]/>
+<#assign complexTypes = ["String", "ByteArray", "Date", "java.util.Date"]/>
+<#assign primitiveWrappers = ["Byte", "Short", "Integer", "Long", "Boolean", "Float", "Double"]/>
 package ${entity.javaPackage};
 
 <#if entity.toManyRelations?has_content>
@@ -52,6 +53,12 @@ entity.superclass?has_content> extends ${entity.superclass} </#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 
+<#list entity.properties as property>
+    <#assign isDefault = property.javaDefaultValue??/>
+    <#if isDefault>
+    private static ${property.javaType} default${property.propertyName?cap_first} = ${property.javaDefaultValue};
+    </#if>
+</#list>
 <#list entity.properties as property>
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
@@ -94,6 +101,12 @@ ${keepFields!}    // KEEP FIELDS END
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.propertiesPk as property>
         this.${property.propertyName} = ${property.propertyName};
+</#list>
+<#list entity.properties as property>
+    <#assign isDefault = property.javaDefaultValue?? && property.javaDefaultValue?has_content/>
+    <#if isDefault>
+        this.${property.propertyName} = default${property.propertyName?cap_first};
+    </#if>
 </#list>
     }
 </#if>
@@ -101,7 +114,13 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public ${entity.className}(<#list entity.properties as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.properties as property>
+    <#assign isDefault = property.javaDefaultValue?? && property.javaDefaultValue?has_content/>
+    <#if isDefault && ((!property.notNull && primitiveWrappers?seq_contains(property.javaType))
+                   || (property.notNull && complexTypes?seq_contains(property.javaType)))>
+        this.${property.propertyName} = ${property.propertyName} == null ? ${entity.className}.default${property.propertyName?cap_first} : ${property.propertyName};
+    <#else>
         this.${property.propertyName} = ${property.propertyName};
+    </#if>
 </#list>
     }
 </#if>
@@ -122,6 +141,13 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         return ${property.propertyName};
     }
 
+<#assign isDefault = property.javaDefaultValue?exists && property.javaDefaultValue?has_content/>
+<#if isDefault>
+    /** Get default value for ${property.propertyName}. */
+    public static ${property.javaType} getDefault${property.propertyName?cap_first}(){
+        return default${property.propertyName?cap_first};
+    }
+</#if>
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..62f0859a 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,6 +17,9 @@
  */
 package de.greenrobot.daogenerator;
 
+import java.util.Calendar;
+import java.util.Date;
+
 /** Model class for an entity's property: a Java property mapped to a data base column. */
 public class Property {
 
@@ -80,6 +83,171 @@ public PropertyBuilder index() {
             return this;
         }
 
+        /**
+         * Assign a default value to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Byte defaultValue) {
+            if (property.propertyType != PropertyType.Byte) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type byte to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = "new Byte(\""+String.valueOf(defaultValue)+"\")";
+            property.sqlDefaultValue = String.valueOf(defaultValue);
+            return this;
+        }
+
+        /**
+         * Assign a default value to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Short defaultValue) {
+            if (property.propertyType != PropertyType.Short) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type short to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = "new Short(\"" + String.valueOf(defaultValue) + "\")";
+            property.sqlDefaultValue = String.valueOf(defaultValue);
+            return this;
+        }
+
+        /**
+         * Assign a default value to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Integer defaultValue) {
+            if (property.propertyType != PropertyType.Int) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type int to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = "new Integer(\"" + String.valueOf(defaultValue) + "\")";
+            property.sqlDefaultValue = String.valueOf(defaultValue);
+            return this;
+        }
+
+        /**
+         * Assign a default value to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Long defaultValue) {
+            if (property.propertyType != PropertyType.Long) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type long to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = "new Long(\"" + String.valueOf(defaultValue) + "\")";
+            property.sqlDefaultValue = String.valueOf(defaultValue);
+            return this;
+        }
+
+        /**
+         * Assigns a default value of 1 (true) or 0 (false) to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Boolean defaultValue) {
+            if (property.propertyType != PropertyType.Boolean) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type boolean to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = (defaultValue ? "true" : "false");
+            property.sqlDefaultValue = defaultValue ? "1" : "0";
+            return this;
+        }
+
+        /**
+         * Assign a default value to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Float defaultValue) {
+            if (property.propertyType != PropertyType.Float) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type float to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = "new Float(\"" + String.valueOf(defaultValue) + "\")";
+            property.sqlDefaultValue = String.valueOf(defaultValue);
+            return this;
+        }
+
+        /**
+         * Assign a default value to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Double defaultValue) {
+            if (property.propertyType != PropertyType.Double) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type double to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = "new Double(\"" + String.valueOf(defaultValue) + "\")";
+            property.sqlDefaultValue = String.valueOf(defaultValue);
+            return this;
+        }
+
+        /**
+         * Assign a default value to this property.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(String defaultValue) {
+            if (property.propertyType != PropertyType.String) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type string to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            property.javaDefaultValue = "\""+defaultValue+"\"";
+            property.sqlDefaultValue = "\'" + String.valueOf(defaultValue) + "\'";
+            return this;
+        }
+
+        /**
+         * Assign a default value to this property. The date is stored in unix time format.
+         * @param defaultValue to be assigned to this property.
+         * @return the property builder.
+         */
+        public PropertyBuilder addDefaultValue(Date defaultValue) {
+            if (property.propertyType != PropertyType.Date) {
+                throw new RuntimeException(
+                        "Cannot apply default value of type java.util.Date to entity of type "+property.propertyType);
+            }
+            if (property.primaryKey ) {
+                throw new RuntimeException("Cannot apply DEFAULT constraint to a primary key.");
+            }
+            Calendar time = Calendar.getInstance();
+            time.setTime(defaultValue);
+            property.javaDefaultValue = "new java.util.Date(" + time.getTimeInMillis()+ "L)";
+            //store date in unix time
+            property.sqlDefaultValue = String.valueOf(time.getTimeInMillis()/1000);
+            return this;
+        }
+
         public PropertyBuilder indexAsc(String indexNameOrNull, boolean isUnique) {
             Index index = new Index();
             index.addPropertyAsc(property);
@@ -123,6 +291,10 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
+    //Value to be assigned in the sqlite DEFAULT column constraint
+    private String sqlDefaultValue;
+    private String javaDefaultValue;
+
     /** Initialized in 2nd pass */
     private String constraints;
 
@@ -169,6 +341,22 @@ public String getConstraints() {
         return constraints;
     }
 
+    /**
+     * Returns the default value in the format expected by the sql DEFAULT constraint
+     * @return the default value
+     */
+    public String getSqlDefaultValue() {
+        return sqlDefaultValue;
+    }
+
+    /**
+     * Returns the default value in the from 'new [Type]("value)'. Ex, 'new Short("0")'.
+     * @return the default value
+     */
+    public String getJavaDefaultValue() {
+        return javaDefaultValue;
+    }
+
     public boolean isUnique() {
         return unique;
     }
@@ -230,6 +418,9 @@ private void initConstraint() {
         if (unique) {
             constraintBuilder.append(" UNIQUE");
         }
+        if (sqlDefaultValue != null) {
+            constraintBuilder.append(" DEFAULT "+sqlDefaultValue);
+        }
         String newContraints = constraintBuilder.toString().trim();
         if (constraintBuilder.length() > 0) {
             constraints = newContraints;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index b68069c5..4c085c7b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -10,6 +10,7 @@
 
 import de.greenrobot.daotest.SimpleEntityDao;
 import de.greenrobot.daotest.SimpleEntityNotNullDao;
+import de.greenrobot.daotest.SimpleEntityDefaultValuesDao;
 import de.greenrobot.daotest.TestEntityDao;
 import de.greenrobot.daotest.RelationEntityDao;
 import de.greenrobot.daotest.DateEntityDao;
@@ -35,6 +36,7 @@
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         SimpleEntityDao.createTable(db, ifNotExists);
         SimpleEntityNotNullDao.createTable(db, ifNotExists);
+        SimpleEntityDefaultValuesDao.createTable(db, ifNotExists);
         TestEntityDao.createTable(db, ifNotExists);
         RelationEntityDao.createTable(db, ifNotExists);
         DateEntityDao.createTable(db, ifNotExists);
@@ -53,6 +55,7 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         SimpleEntityDao.dropTable(db, ifExists);
         SimpleEntityNotNullDao.dropTable(db, ifExists);
+        SimpleEntityDefaultValuesDao.dropTable(db, ifExists);
         TestEntityDao.dropTable(db, ifExists);
         RelationEntityDao.dropTable(db, ifExists);
         DateEntityDao.dropTable(db, ifExists);
@@ -98,6 +101,7 @@ public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
         registerDaoClass(SimpleEntityDao.class);
         registerDaoClass(SimpleEntityNotNullDao.class);
+        registerDaoClass(SimpleEntityDefaultValuesDao.class);
         registerDaoClass(TestEntityDao.class);
         registerDaoClass(RelationEntityDao.class);
         registerDaoClass(DateEntityDao.class);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
index 0a9a8e95..4e2dd3ca 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
@@ -11,6 +11,7 @@
 
 import de.greenrobot.daotest.SimpleEntity;
 import de.greenrobot.daotest.SimpleEntityNotNull;
+import de.greenrobot.daotest.SimpleEntityDefaultValues;
 import de.greenrobot.daotest.TestEntity;
 import de.greenrobot.daotest.RelationEntity;
 import de.greenrobot.daotest.DateEntity;
@@ -27,6 +28,7 @@
 
 import de.greenrobot.daotest.SimpleEntityDao;
 import de.greenrobot.daotest.SimpleEntityNotNullDao;
+import de.greenrobot.daotest.SimpleEntityDefaultValuesDao;
 import de.greenrobot.daotest.TestEntityDao;
 import de.greenrobot.daotest.RelationEntityDao;
 import de.greenrobot.daotest.DateEntityDao;
@@ -52,6 +54,7 @@
 
     private final DaoConfig simpleEntityDaoConfig;
     private final DaoConfig simpleEntityNotNullDaoConfig;
+    private final DaoConfig simpleEntityDefaultValuesDaoConfig;
     private final DaoConfig testEntityDaoConfig;
     private final DaoConfig relationEntityDaoConfig;
     private final DaoConfig dateEntityDaoConfig;
@@ -68,6 +71,7 @@
 
     private final SimpleEntityDao simpleEntityDao;
     private final SimpleEntityNotNullDao simpleEntityNotNullDao;
+    private final SimpleEntityDefaultValuesDao simpleEntityDefaultValuesDao;
     private final TestEntityDao testEntityDao;
     private final RelationEntityDao relationEntityDao;
     private final DateEntityDao dateEntityDao;
@@ -92,6 +96,9 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         simpleEntityNotNullDaoConfig = daoConfigMap.get(SimpleEntityNotNullDao.class).clone();
         simpleEntityNotNullDaoConfig.initIdentityScope(type);
 
+        simpleEntityDefaultValuesDaoConfig = daoConfigMap.get(SimpleEntityDefaultValuesDao.class).clone();
+        simpleEntityDefaultValuesDaoConfig.initIdentityScope(type);
+
         testEntityDaoConfig = daoConfigMap.get(TestEntityDao.class).clone();
         testEntityDaoConfig.initIdentityScope(type);
 
@@ -133,6 +140,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
 
         simpleEntityDao = new SimpleEntityDao(simpleEntityDaoConfig, this);
         simpleEntityNotNullDao = new SimpleEntityNotNullDao(simpleEntityNotNullDaoConfig, this);
+        simpleEntityDefaultValuesDao = new SimpleEntityDefaultValuesDao(simpleEntityDefaultValuesDaoConfig, this);
         testEntityDao = new TestEntityDao(testEntityDaoConfig, this);
         relationEntityDao = new RelationEntityDao(relationEntityDaoConfig, this);
         dateEntityDao = new DateEntityDao(dateEntityDaoConfig, this);
@@ -149,6 +157,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
 
         registerDao(SimpleEntity.class, simpleEntityDao);
         registerDao(SimpleEntityNotNull.class, simpleEntityNotNullDao);
+        registerDao(SimpleEntityDefaultValues.class, simpleEntityDefaultValuesDao);
         registerDao(TestEntity.class, testEntityDao);
         registerDao(RelationEntity.class, relationEntityDao);
         registerDao(DateEntity.class, dateEntityDao);
@@ -167,6 +176,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
     public void clear() {
         simpleEntityDaoConfig.getIdentityScope().clear();
         simpleEntityNotNullDaoConfig.getIdentityScope().clear();
+        simpleEntityDefaultValuesDaoConfig.getIdentityScope().clear();
         testEntityDaoConfig.getIdentityScope().clear();
         relationEntityDaoConfig.getIdentityScope().clear();
         dateEntityDaoConfig.getIdentityScope().clear();
@@ -190,6 +200,10 @@ public SimpleEntityNotNullDao getSimpleEntityNotNullDao() {
         return simpleEntityNotNullDao;
     }
 
+    public SimpleEntityDefaultValuesDao getSimpleEntityDefaultValuesDao() {
+        return simpleEntityDefaultValuesDao;
+    }
+
     public TestEntityDao getTestEntityDao() {
         return testEntityDao;
     }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDefaultValues.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDefaultValues.java
new file mode 100644
index 00000000..b3c709ac
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDefaultValues.java
@@ -0,0 +1,324 @@
+package de.greenrobot.daotest;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table SIMPLE_ENTITY_DEFAULT_VALUES.
+ */
+public class SimpleEntityDefaultValues {
+
+    private static Boolean defaultSimpleBooleanTrue = true;
+    private static boolean defaultSimpleBooleanFalse = false;
+    private static Byte defaultSimpleByteMax = new Byte("127");
+    private static byte defaultSimpleByteMin = new Byte("-128");
+    private static Short defaultSimpleShortMax = new Short("32767");
+    private static short defaultSimpleShortMin = new Short("-32768");
+    private static Integer defaultSimpleIntMax = new Integer("2147483647");
+    private static int defaultSimpleIntMin = new Integer("-2147483648");
+    private static Long defaultSimpleLongMax = new Long("9223372036854775807");
+    private static long defaultSimpleLongMin = new Long("-9223372036854775808");
+    private static Float defaultSimpleFloatMax = new Float("3.4028235E38");
+    private static float defaultSimpleFloatMin = new Float("1.4E-45");
+    private static Double defaultSimpleDoubleMax = new Double("1.7976931348623157E308");
+    private static double defaultSimpleDoubleMin = new Double("4.9E-324");
+    private static String defaultSimpleString = "greenrobot greenDAO";
+    private static String defaultSimpleStringNotNull = "greenrobot greenDAO";
+    private static java.util.Date defaultSimpleDate = new java.util.Date(1381453387221L);
+    private static java.util.Date defaultSimpleDateNotNull = new java.util.Date(1381453387229L);
+    private long id;
+    private Boolean simpleBooleanTrue;
+    private boolean simpleBooleanFalse;
+    private Byte simpleByteMax;
+    private byte simpleByteMin;
+    private Short simpleShortMax;
+    private short simpleShortMin;
+    private Integer simpleIntMax;
+    private int simpleIntMin;
+    private Long simpleLongMax;
+    private long simpleLongMin;
+    private Float simpleFloatMax;
+    private float simpleFloatMin;
+    private Double simpleDoubleMax;
+    private double simpleDoubleMin;
+    private String simpleString;
+    /** Not-null value. */
+    private String simpleStringNotNull;
+    private java.util.Date simpleDate;
+    /** Not-null value. */
+    private java.util.Date simpleDateNotNull;
+
+    public SimpleEntityDefaultValues() {
+    }
+
+    public SimpleEntityDefaultValues(long id) {
+        this.id = id;
+        this.simpleBooleanTrue = defaultSimpleBooleanTrue;
+        this.simpleBooleanFalse = defaultSimpleBooleanFalse;
+        this.simpleByteMax = defaultSimpleByteMax;
+        this.simpleByteMin = defaultSimpleByteMin;
+        this.simpleShortMax = defaultSimpleShortMax;
+        this.simpleShortMin = defaultSimpleShortMin;
+        this.simpleIntMax = defaultSimpleIntMax;
+        this.simpleIntMin = defaultSimpleIntMin;
+        this.simpleLongMax = defaultSimpleLongMax;
+        this.simpleLongMin = defaultSimpleLongMin;
+        this.simpleFloatMax = defaultSimpleFloatMax;
+        this.simpleFloatMin = defaultSimpleFloatMin;
+        this.simpleDoubleMax = defaultSimpleDoubleMax;
+        this.simpleDoubleMin = defaultSimpleDoubleMin;
+        this.simpleString = defaultSimpleString;
+        this.simpleStringNotNull = defaultSimpleStringNotNull;
+        this.simpleDate = defaultSimpleDate;
+        this.simpleDateNotNull = defaultSimpleDateNotNull;
+    }
+
+    public SimpleEntityDefaultValues(long id, Boolean simpleBooleanTrue, boolean simpleBooleanFalse, Byte simpleByteMax, byte simpleByteMin, Short simpleShortMax, short simpleShortMin, Integer simpleIntMax, int simpleIntMin, Long simpleLongMax, long simpleLongMin, Float simpleFloatMax, float simpleFloatMin, Double simpleDoubleMax, double simpleDoubleMin, String simpleString, String simpleStringNotNull, java.util.Date simpleDate, java.util.Date simpleDateNotNull) {
+        this.id = id;
+        this.simpleBooleanTrue = simpleBooleanTrue == null ? SimpleEntityDefaultValues.defaultSimpleBooleanTrue : simpleBooleanTrue;
+        this.simpleBooleanFalse = simpleBooleanFalse;
+        this.simpleByteMax = simpleByteMax == null ? SimpleEntityDefaultValues.defaultSimpleByteMax : simpleByteMax;
+        this.simpleByteMin = simpleByteMin;
+        this.simpleShortMax = simpleShortMax == null ? SimpleEntityDefaultValues.defaultSimpleShortMax : simpleShortMax;
+        this.simpleShortMin = simpleShortMin;
+        this.simpleIntMax = simpleIntMax == null ? SimpleEntityDefaultValues.defaultSimpleIntMax : simpleIntMax;
+        this.simpleIntMin = simpleIntMin;
+        this.simpleLongMax = simpleLongMax == null ? SimpleEntityDefaultValues.defaultSimpleLongMax : simpleLongMax;
+        this.simpleLongMin = simpleLongMin;
+        this.simpleFloatMax = simpleFloatMax == null ? SimpleEntityDefaultValues.defaultSimpleFloatMax : simpleFloatMax;
+        this.simpleFloatMin = simpleFloatMin;
+        this.simpleDoubleMax = simpleDoubleMax == null ? SimpleEntityDefaultValues.defaultSimpleDoubleMax : simpleDoubleMax;
+        this.simpleDoubleMin = simpleDoubleMin;
+        this.simpleString = simpleString;
+        this.simpleStringNotNull = simpleStringNotNull == null ? SimpleEntityDefaultValues.defaultSimpleStringNotNull : simpleStringNotNull;
+        this.simpleDate = simpleDate;
+        this.simpleDateNotNull = simpleDateNotNull == null ? SimpleEntityDefaultValues.defaultSimpleDateNotNull : simpleDateNotNull;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public Boolean getSimpleBooleanTrue() {
+        return simpleBooleanTrue;
+    }
+
+    /** Get default value for simpleBooleanTrue. */
+    public static Boolean getDefaultSimpleBooleanTrue(){
+        return defaultSimpleBooleanTrue;
+    }
+    public void setSimpleBooleanTrue(Boolean simpleBooleanTrue) {
+        this.simpleBooleanTrue = simpleBooleanTrue;
+    }
+
+    public boolean getSimpleBooleanFalse() {
+        return simpleBooleanFalse;
+    }
+
+    /** Get default value for simpleBooleanFalse. */
+    public static boolean getDefaultSimpleBooleanFalse(){
+        return defaultSimpleBooleanFalse;
+    }
+    public void setSimpleBooleanFalse(boolean simpleBooleanFalse) {
+        this.simpleBooleanFalse = simpleBooleanFalse;
+    }
+
+    public Byte getSimpleByteMax() {
+        return simpleByteMax;
+    }
+
+    /** Get default value for simpleByteMax. */
+    public static Byte getDefaultSimpleByteMax(){
+        return defaultSimpleByteMax;
+    }
+    public void setSimpleByteMax(Byte simpleByteMax) {
+        this.simpleByteMax = simpleByteMax;
+    }
+
+    public byte getSimpleByteMin() {
+        return simpleByteMin;
+    }
+
+    /** Get default value for simpleByteMin. */
+    public static byte getDefaultSimpleByteMin(){
+        return defaultSimpleByteMin;
+    }
+    public void setSimpleByteMin(byte simpleByteMin) {
+        this.simpleByteMin = simpleByteMin;
+    }
+
+    public Short getSimpleShortMax() {
+        return simpleShortMax;
+    }
+
+    /** Get default value for simpleShortMax. */
+    public static Short getDefaultSimpleShortMax(){
+        return defaultSimpleShortMax;
+    }
+    public void setSimpleShortMax(Short simpleShortMax) {
+        this.simpleShortMax = simpleShortMax;
+    }
+
+    public short getSimpleShortMin() {
+        return simpleShortMin;
+    }
+
+    /** Get default value for simpleShortMin. */
+    public static short getDefaultSimpleShortMin(){
+        return defaultSimpleShortMin;
+    }
+    public void setSimpleShortMin(short simpleShortMin) {
+        this.simpleShortMin = simpleShortMin;
+    }
+
+    public Integer getSimpleIntMax() {
+        return simpleIntMax;
+    }
+
+    /** Get default value for simpleIntMax. */
+    public static Integer getDefaultSimpleIntMax(){
+        return defaultSimpleIntMax;
+    }
+    public void setSimpleIntMax(Integer simpleIntMax) {
+        this.simpleIntMax = simpleIntMax;
+    }
+
+    public int getSimpleIntMin() {
+        return simpleIntMin;
+    }
+
+    /** Get default value for simpleIntMin. */
+    public static int getDefaultSimpleIntMin(){
+        return defaultSimpleIntMin;
+    }
+    public void setSimpleIntMin(int simpleIntMin) {
+        this.simpleIntMin = simpleIntMin;
+    }
+
+    public Long getSimpleLongMax() {
+        return simpleLongMax;
+    }
+
+    /** Get default value for simpleLongMax. */
+    public static Long getDefaultSimpleLongMax(){
+        return defaultSimpleLongMax;
+    }
+    public void setSimpleLongMax(Long simpleLongMax) {
+        this.simpleLongMax = simpleLongMax;
+    }
+
+    public long getSimpleLongMin() {
+        return simpleLongMin;
+    }
+
+    /** Get default value for simpleLongMin. */
+    public static long getDefaultSimpleLongMin(){
+        return defaultSimpleLongMin;
+    }
+    public void setSimpleLongMin(long simpleLongMin) {
+        this.simpleLongMin = simpleLongMin;
+    }
+
+    public Float getSimpleFloatMax() {
+        return simpleFloatMax;
+    }
+
+    /** Get default value for simpleFloatMax. */
+    public static Float getDefaultSimpleFloatMax(){
+        return defaultSimpleFloatMax;
+    }
+    public void setSimpleFloatMax(Float simpleFloatMax) {
+        this.simpleFloatMax = simpleFloatMax;
+    }
+
+    public float getSimpleFloatMin() {
+        return simpleFloatMin;
+    }
+
+    /** Get default value for simpleFloatMin. */
+    public static float getDefaultSimpleFloatMin(){
+        return defaultSimpleFloatMin;
+    }
+    public void setSimpleFloatMin(float simpleFloatMin) {
+        this.simpleFloatMin = simpleFloatMin;
+    }
+
+    public Double getSimpleDoubleMax() {
+        return simpleDoubleMax;
+    }
+
+    /** Get default value for simpleDoubleMax. */
+    public static Double getDefaultSimpleDoubleMax(){
+        return defaultSimpleDoubleMax;
+    }
+    public void setSimpleDoubleMax(Double simpleDoubleMax) {
+        this.simpleDoubleMax = simpleDoubleMax;
+    }
+
+    public double getSimpleDoubleMin() {
+        return simpleDoubleMin;
+    }
+
+    /** Get default value for simpleDoubleMin. */
+    public static double getDefaultSimpleDoubleMin(){
+        return defaultSimpleDoubleMin;
+    }
+    public void setSimpleDoubleMin(double simpleDoubleMin) {
+        this.simpleDoubleMin = simpleDoubleMin;
+    }
+
+    public String getSimpleString() {
+        return simpleString;
+    }
+
+    /** Get default value for simpleString. */
+    public static String getDefaultSimpleString(){
+        return defaultSimpleString;
+    }
+    public void setSimpleString(String simpleString) {
+        this.simpleString = simpleString;
+    }
+
+    /** Not-null value. */
+    public String getSimpleStringNotNull() {
+        return simpleStringNotNull;
+    }
+
+    /** Get default value for simpleStringNotNull. */
+    public static String getDefaultSimpleStringNotNull(){
+        return defaultSimpleStringNotNull;
+    }
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setSimpleStringNotNull(String simpleStringNotNull) {
+        this.simpleStringNotNull = simpleStringNotNull;
+    }
+
+    public java.util.Date getSimpleDate() {
+        return simpleDate;
+    }
+
+    /** Get default value for simpleDate. */
+    public static java.util.Date getDefaultSimpleDate(){
+        return defaultSimpleDate;
+    }
+    public void setSimpleDate(java.util.Date simpleDate) {
+        this.simpleDate = simpleDate;
+    }
+
+    /** Not-null value. */
+    public java.util.Date getSimpleDateNotNull() {
+        return simpleDateNotNull;
+    }
+
+    /** Get default value for simpleDateNotNull. */
+    public static java.util.Date getDefaultSimpleDateNotNull(){
+        return defaultSimpleDateNotNull;
+    }
+    /** Not-null value; ensure this value is available before it is saved to the database. */
+    public void setSimpleDateNotNull(java.util.Date simpleDateNotNull) {
+        this.simpleDateNotNull = simpleDateNotNull;
+    }
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDefaultValuesDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDefaultValuesDao.java
new file mode 100644
index 00000000..7edcb2b2
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDefaultValuesDao.java
@@ -0,0 +1,228 @@
+package de.greenrobot.daotest;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+
+import de.greenrobot.daotest.SimpleEntityDefaultValues;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table SIMPLE_ENTITY_DEFAULT_VALUES.
+*/
+public class SimpleEntityDefaultValuesDao extends AbstractDao<SimpleEntityDefaultValues, Long> {
+
+    public static final String TABLENAME = "SIMPLE_ENTITY_DEFAULT_VALUES";
+
+    /**
+     * Properties of entity SimpleEntityDefaultValues.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, long.class, "id", true, "_id");
+        public final static Property SimpleBooleanTrue = new Property(1, Boolean.class, "simpleBooleanTrue", false, "SIMPLE_BOOLEAN_TRUE");
+        public final static Property SimpleBooleanFalse = new Property(2, boolean.class, "simpleBooleanFalse", false, "SIMPLE_BOOLEAN_FALSE");
+        public final static Property SimpleByteMax = new Property(3, Byte.class, "simpleByteMax", false, "SIMPLE_BYTE_MAX");
+        public final static Property SimpleByteMin = new Property(4, byte.class, "simpleByteMin", false, "SIMPLE_BYTE_MIN");
+        public final static Property SimpleShortMax = new Property(5, Short.class, "simpleShortMax", false, "SIMPLE_SHORT_MAX");
+        public final static Property SimpleShortMin = new Property(6, short.class, "simpleShortMin", false, "SIMPLE_SHORT_MIN");
+        public final static Property SimpleIntMax = new Property(7, Integer.class, "simpleIntMax", false, "SIMPLE_INT_MAX");
+        public final static Property SimpleIntMin = new Property(8, int.class, "simpleIntMin", false, "SIMPLE_INT_MIN");
+        public final static Property SimpleLongMax = new Property(9, Long.class, "simpleLongMax", false, "SIMPLE_LONG_MAX");
+        public final static Property SimpleLongMin = new Property(10, long.class, "simpleLongMin", false, "SIMPLE_LONG_MIN");
+        public final static Property SimpleFloatMax = new Property(11, Float.class, "simpleFloatMax", false, "SIMPLE_FLOAT_MAX");
+        public final static Property SimpleFloatMin = new Property(12, float.class, "simpleFloatMin", false, "SIMPLE_FLOAT_MIN");
+        public final static Property SimpleDoubleMax = new Property(13, Double.class, "simpleDoubleMax", false, "SIMPLE_DOUBLE_MAX");
+        public final static Property SimpleDoubleMin = new Property(14, double.class, "simpleDoubleMin", false, "SIMPLE_DOUBLE_MIN");
+        public final static Property SimpleString = new Property(15, String.class, "simpleString", false, "SIMPLE_STRING");
+        public final static Property SimpleStringNotNull = new Property(16, String.class, "simpleStringNotNull", false, "SIMPLE_STRING_NOT_NULL");
+        public final static Property SimpleDate = new Property(17, java.util.Date.class, "simpleDate", false, "SIMPLE_DATE");
+        public final static Property SimpleDateNotNull = new Property(18, java.util.Date.class, "simpleDateNotNull", false, "SIMPLE_DATE_NOT_NULL");
+    };
+
+
+    public SimpleEntityDefaultValuesDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public SimpleEntityDefaultValuesDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'SIMPLE_ENTITY_DEFAULT_VALUES' (" + //
+                "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
+                "'SIMPLE_BOOLEAN_TRUE' INTEGER DEFAULT 1 ," + // 1: simpleBooleanTrue
+                "'SIMPLE_BOOLEAN_FALSE' INTEGER NOT NULL DEFAULT 0 ," + // 2: simpleBooleanFalse
+                "'SIMPLE_BYTE_MAX' INTEGER DEFAULT 127 ," + // 3: simpleByteMax
+                "'SIMPLE_BYTE_MIN' INTEGER NOT NULL DEFAULT -128 ," + // 4: simpleByteMin
+                "'SIMPLE_SHORT_MAX' INTEGER DEFAULT 32767 ," + // 5: simpleShortMax
+                "'SIMPLE_SHORT_MIN' INTEGER NOT NULL DEFAULT -32768 ," + // 6: simpleShortMin
+                "'SIMPLE_INT_MAX' INTEGER DEFAULT 2147483647 ," + // 7: simpleIntMax
+                "'SIMPLE_INT_MIN' INTEGER NOT NULL DEFAULT -2147483648 ," + // 8: simpleIntMin
+                "'SIMPLE_LONG_MAX' INTEGER DEFAULT 9223372036854775807 ," + // 9: simpleLongMax
+                "'SIMPLE_LONG_MIN' INTEGER NOT NULL DEFAULT -9223372036854775808 ," + // 10: simpleLongMin
+                "'SIMPLE_FLOAT_MAX' REAL DEFAULT 3.4028235E38 ," + // 11: simpleFloatMax
+                "'SIMPLE_FLOAT_MIN' REAL NOT NULL DEFAULT 1.4E-45 ," + // 12: simpleFloatMin
+                "'SIMPLE_DOUBLE_MAX' REAL DEFAULT 1.7976931348623157E308 ," + // 13: simpleDoubleMax
+                "'SIMPLE_DOUBLE_MIN' REAL NOT NULL DEFAULT 4.9E-324 ," + // 14: simpleDoubleMin
+                "'SIMPLE_STRING' TEXT DEFAULT 'greenrobot greenDAO' ," + // 15: simpleString
+                "'SIMPLE_STRING_NOT_NULL' TEXT NOT NULL DEFAULT 'greenrobot greenDAO' ," + // 16: simpleStringNotNull
+                "'SIMPLE_DATE' INTEGER DEFAULT 1381453387 ," + // 17: simpleDate
+                "'SIMPLE_DATE_NOT_NULL' INTEGER NOT NULL DEFAULT 1381453387 );"); // 18: simpleDateNotNull
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SIMPLE_ENTITY_DEFAULT_VALUES'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, SimpleEntityDefaultValues entity) {
+        stmt.clearBindings();
+        stmt.bindLong(1, entity.getId());
+ 
+        Boolean simpleBooleanTrue = entity.getSimpleBooleanTrue();
+        if (simpleBooleanTrue != null) {
+            stmt.bindLong(2, simpleBooleanTrue ? 1l: 0l);
+        }
+        stmt.bindLong(3, entity.getSimpleBooleanFalse() ? 1l: 0l);
+ 
+        Byte simpleByteMax = entity.getSimpleByteMax();
+        if (simpleByteMax != null) {
+            stmt.bindLong(4, simpleByteMax);
+        }
+        stmt.bindLong(5, entity.getSimpleByteMin());
+ 
+        Short simpleShortMax = entity.getSimpleShortMax();
+        if (simpleShortMax != null) {
+            stmt.bindLong(6, simpleShortMax);
+        }
+        stmt.bindLong(7, entity.getSimpleShortMin());
+ 
+        Integer simpleIntMax = entity.getSimpleIntMax();
+        if (simpleIntMax != null) {
+            stmt.bindLong(8, simpleIntMax);
+        }
+        stmt.bindLong(9, entity.getSimpleIntMin());
+ 
+        Long simpleLongMax = entity.getSimpleLongMax();
+        if (simpleLongMax != null) {
+            stmt.bindLong(10, simpleLongMax);
+        }
+        stmt.bindLong(11, entity.getSimpleLongMin());
+ 
+        Float simpleFloatMax = entity.getSimpleFloatMax();
+        if (simpleFloatMax != null) {
+            stmt.bindDouble(12, simpleFloatMax);
+        }
+        stmt.bindDouble(13, entity.getSimpleFloatMin());
+ 
+        Double simpleDoubleMax = entity.getSimpleDoubleMax();
+        if (simpleDoubleMax != null) {
+            stmt.bindDouble(14, simpleDoubleMax);
+        }
+        stmt.bindDouble(15, entity.getSimpleDoubleMin());
+ 
+        String simpleString = entity.getSimpleString();
+        if (simpleString != null) {
+            stmt.bindString(16, simpleString);
+        }
+        stmt.bindString(17, entity.getSimpleStringNotNull());
+ 
+        java.util.Date simpleDate = entity.getSimpleDate();
+        if (simpleDate != null) {
+            stmt.bindLong(18, simpleDate.getTime());
+        }
+        stmt.bindLong(19, entity.getSimpleDateNotNull().getTime());
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public SimpleEntityDefaultValues readEntity(Cursor cursor, int offset) {
+        SimpleEntityDefaultValues entity = new SimpleEntityDefaultValues( //
+            cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // simpleBooleanTrue
+            cursor.getShort(offset + 2) != 0, // simpleBooleanFalse
+            cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3), // simpleByteMax
+            (byte) cursor.getShort(offset + 4), // simpleByteMin
+            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // simpleShortMax
+            cursor.getShort(offset + 6), // simpleShortMin
+            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // simpleIntMax
+            cursor.getInt(offset + 8), // simpleIntMin
+            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // simpleLongMax
+            cursor.getLong(offset + 10), // simpleLongMin
+            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // simpleFloatMax
+            cursor.getFloat(offset + 12), // simpleFloatMin
+            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // simpleDoubleMax
+            cursor.getDouble(offset + 14), // simpleDoubleMin
+            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // simpleString
+            cursor.getString(offset + 16), // simpleStringNotNull
+            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // simpleDate
+            new java.util.Date(cursor.getLong(offset + 18)) // simpleDateNotNull
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, SimpleEntityDefaultValues entity, int offset) {
+        entity.setId(cursor.getLong(offset + 0));
+        entity.setSimpleBooleanTrue(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
+        entity.setSimpleBooleanFalse(cursor.getShort(offset + 2) != 0);
+        entity.setSimpleByteMax(cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3));
+        entity.setSimpleByteMin((byte) cursor.getShort(offset + 4));
+        entity.setSimpleShortMax(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
+        entity.setSimpleShortMin(cursor.getShort(offset + 6));
+        entity.setSimpleIntMax(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
+        entity.setSimpleIntMin(cursor.getInt(offset + 8));
+        entity.setSimpleLongMax(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
+        entity.setSimpleLongMin(cursor.getLong(offset + 10));
+        entity.setSimpleFloatMax(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
+        entity.setSimpleFloatMin(cursor.getFloat(offset + 12));
+        entity.setSimpleDoubleMax(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
+        entity.setSimpleDoubleMin(cursor.getDouble(offset + 14));
+        entity.setSimpleString(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
+        entity.setSimpleStringNotNull(cursor.getString(offset + 16));
+        entity.setSimpleDate(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
+        entity.setSimpleDateNotNull(new java.util.Date(cursor.getLong(offset + 18)));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(SimpleEntityDefaultValues entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(SimpleEntityDefaultValues entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityDefaultValuesHelper.java b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityDefaultValuesHelper.java
new file mode 100644
index 00000000..cf0a920c
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityDefaultValuesHelper.java
@@ -0,0 +1,37 @@
+package de.greenrobot.daotest.entity;
+
+import de.greenrobot.daotest.SimpleEntityDefaultValues;
+
+/**
+ * Create a test entity with all default values using null parameters for
+ * primitive wrappers.
+ */
+public class SimpleEntityDefaultValuesHelper {
+    public static SimpleEntityDefaultValues createEntity(Long key) {
+        if (key == null) {
+            return null;
+        }
+
+        SimpleEntityDefaultValues entity = new SimpleEntityDefaultValues(key,
+                null,
+                SimpleEntityDefaultValues.getDefaultSimpleBooleanFalse(),
+                null,
+                SimpleEntityDefaultValues.getDefaultSimpleByteMin(),
+                null,
+                SimpleEntityDefaultValues.getDefaultSimpleShortMin(),
+                null,
+                SimpleEntityDefaultValues.getDefaultSimpleIntMin(),
+                null,
+                SimpleEntityDefaultValues.getDefaultSimpleLongMin(),
+                null,
+                SimpleEntityDefaultValues.getDefaultSimpleFloatMin(),
+                null,
+                SimpleEntityDefaultValues.getDefaultSimpleDoubleMin(),
+                SimpleEntityDefaultValues.getDefaultSimpleString(),
+                SimpleEntityDefaultValues.getDefaultSimpleStringNotNull(),
+                SimpleEntityDefaultValues.getDefaultSimpleDate(),
+                SimpleEntityDefaultValues.getDefaultSimpleDateNotNull());
+
+        return entity;
+    }
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityDefaultValuesTest.java b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityDefaultValuesTest.java
new file mode 100644
index 00000000..8696b12c
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/SimpleEntityDefaultValuesTest.java
@@ -0,0 +1,76 @@
+package de.greenrobot.daotest.entity;
+
+import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+import de.greenrobot.daotest.SimpleEntityDefaultValues;
+import de.greenrobot.daotest.SimpleEntityDefaultValuesDao;
+
+public class SimpleEntityDefaultValuesTest extends AbstractDaoTestLongPk<SimpleEntityDefaultValuesDao, SimpleEntityDefaultValues> {
+
+    public SimpleEntityDefaultValuesTest() {
+        super(SimpleEntityDefaultValuesDao.class);
+    }
+
+    @Override
+    protected SimpleEntityDefaultValues createEntity(Long key) {
+         return SimpleEntityDefaultValuesHelper.createEntity(key);
+    }
+
+    public void testValues() {
+        SimpleEntityDefaultValues entity = createEntity(1l);
+        dao.insert(entity);
+        SimpleEntityDefaultValues reloaded = dao.load(1l);
+        assertEqualProperties(entity, reloaded);
+        assertEqualDefaults(entity, reloaded);
+        System.out.println("HELLO?");
+    }
+
+    protected static void assertEqualDefaults(SimpleEntityDefaultValues entity,
+                                                SimpleEntityDefaultValues reloaded) {
+        assertNotSame(reloaded, entity);
+
+        assertEquals(entity.getId(), reloaded.getId());
+        assertEquals(entity.getSimpleBooleanTrue(), SimpleEntityDefaultValues.getDefaultSimpleBooleanTrue());
+        assertEquals(entity.getSimpleByteMin(), SimpleEntityDefaultValues.getDefaultSimpleByteMin());
+        assertEquals(entity.getSimpleByteMax(), SimpleEntityDefaultValues.getDefaultSimpleByteMax());
+        assertEquals(entity.getSimpleShortMin(), SimpleEntityDefaultValues.getDefaultSimpleShortMin());
+        assertEquals(entity.getSimpleShortMax(), SimpleEntityDefaultValues.getDefaultSimpleShortMax());
+        assertEquals(entity.getSimpleIntMin(), SimpleEntityDefaultValues.getDefaultSimpleIntMin());
+        assertEquals(entity.getSimpleIntMax(), SimpleEntityDefaultValues.getDefaultSimpleIntMax());
+        assertEquals(entity.getSimpleLongMin(), SimpleEntityDefaultValues.getDefaultSimpleLongMin());
+        assertEquals(entity.getSimpleLongMax(), SimpleEntityDefaultValues.getDefaultSimpleLongMax());
+        assertEquals(entity.getSimpleFloatMin(), SimpleEntityDefaultValues.getDefaultSimpleFloatMin());
+        assertEquals(entity.getSimpleFloatMax(), SimpleEntityDefaultValues.getDefaultSimpleFloatMax());
+        assertEquals(entity.getSimpleDoubleMin(), SimpleEntityDefaultValues.getDefaultSimpleDoubleMin());
+        assertEquals(entity.getSimpleDoubleMax(), SimpleEntityDefaultValues.getDefaultSimpleDoubleMax());
+        assertEquals(entity.getSimpleString(), SimpleEntityDefaultValues.getDefaultSimpleString());
+        assertEquals(entity.getSimpleStringNotNull(), SimpleEntityDefaultValues.getDefaultSimpleStringNotNull());
+        assertEquals(entity.getSimpleDate(), SimpleEntityDefaultValues.getDefaultSimpleDate());
+        assertEquals(entity.getSimpleDateNotNull(), SimpleEntityDefaultValues.getDefaultSimpleDateNotNull());
+
+    }
+
+    protected static void assertEqualProperties(SimpleEntityDefaultValues entity,
+                                                SimpleEntityDefaultValues reloaded) {
+        assertNotSame(reloaded, entity);
+
+        assertEquals(entity.getId(), reloaded.getId());
+        assertEquals(entity.getSimpleBooleanTrue(), reloaded.getSimpleBooleanTrue());
+        assertEquals(entity.getSimpleByteMin(), reloaded.getSimpleByteMin());
+        assertEquals(entity.getSimpleByteMax(), reloaded.getSimpleByteMax());
+        assertEquals(entity.getSimpleShortMin(), reloaded.getSimpleShortMin());
+        assertEquals(entity.getSimpleShortMax(), reloaded.getSimpleShortMax());
+        assertEquals(entity.getSimpleIntMin(), reloaded.getSimpleIntMin());
+        assertEquals(entity.getSimpleIntMax(), reloaded.getSimpleIntMax());
+        assertEquals(entity.getSimpleLongMin(), reloaded.getSimpleLongMin());
+        assertEquals(entity.getSimpleLongMax(), reloaded.getSimpleLongMax());
+        assertEquals(entity.getSimpleFloatMin(), reloaded.getSimpleFloatMin());
+        assertEquals(entity.getSimpleFloatMax(), reloaded.getSimpleFloatMax());
+        assertEquals(entity.getSimpleDoubleMin(), reloaded.getSimpleDoubleMin());
+        assertEquals(entity.getSimpleDoubleMax(), reloaded.getSimpleDoubleMax());
+        assertEquals(entity.getSimpleString(), reloaded.getSimpleString());
+        assertEquals(entity.getSimpleStringNotNull(), reloaded.getSimpleStringNotNull());
+        assertEquals(entity.getSimpleDate(), reloaded.getSimpleDate());
+        assertEquals(entity.getSimpleDateNotNull(), reloaded.getSimpleDateNotNull());
+    }
+
+}
