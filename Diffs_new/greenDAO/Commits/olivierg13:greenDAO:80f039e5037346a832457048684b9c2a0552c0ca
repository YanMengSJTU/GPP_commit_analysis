diff --git a/DaoExample/assets/icudt46l.zip b/DaoExample/assets/icudt46l.zip
new file mode 100644
index 00000000..91dc7f71
Binary files /dev/null and b/DaoExample/assets/icudt46l.zip differ
diff --git a/DaoExample/build.gradle b/DaoExample/build.gradle
index a6f9498b..84b24481 100644
--- a/DaoExample/build.gradle
+++ b/DaoExample/build.gradle
@@ -12,11 +12,12 @@ repositories {
 
 dependencies {
 //    compile('de.greenrobot:greendao:1.3.0')
-    compile files('greendao-1.3.8-SNAPSHOT.jar')
+    compile files('greendao-1.3.8-SQLCIPHER.jar')
 }
 
 sourceSets {
     main {
+        assets.srcDirs = ['assets']
         java.srcDirs = java.srcDirs + [ 'src' ]
         java.srcDirs = java.srcDirs + [ 'src-gen' ]
         java.srcDirs = java.srcDirs + [ 'gen' ]
diff --git a/DaoExample/libs/greendao-1.3.8-SNAPSHOT.jar b/DaoExample/libs/greendao-1.3.8-SNAPSHOT.jar
deleted file mode 100644
index 591d1f38..00000000
Binary files a/DaoExample/libs/greendao-1.3.8-SNAPSHOT.jar and /dev/null differ
diff --git a/DaoExample/libs/greendao-1.3.8-SQLCIPHER.jar b/DaoExample/libs/greendao-1.3.8-SQLCIPHER.jar
new file mode 100644
index 00000000..68df2e97
Binary files /dev/null and b/DaoExample/libs/greendao-1.3.8-SQLCIPHER.jar differ
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
index 25a88fc3..8de42b74 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
@@ -1,8 +1,8 @@
 package de.greenrobot.daoexample;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
index 53627f13..8e97f40d 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
@@ -1,9 +1,9 @@
 package de.greenrobot.daoexample;
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteDatabase.CursorFactory;
-import android.database.sqlite.SQLiteOpenHelper;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase.CursorFactory;
+import net.sqlcipher.database.SQLiteOpenHelper;
 import android.util.Log;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
index e6d19f42..cfc87973 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
@@ -1,6 +1,6 @@
 package de.greenrobot.daoexample;
 
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 
 import java.util.Map;
 
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index 0fcaceee..48c20aa4 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -1,8 +1,8 @@
 package de.greenrobot.daoexample;
 
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index d3ac55a7..7dfe4924 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -3,8 +3,8 @@
 import java.util.List;
 import java.util.ArrayList;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
@@ -147,97 +147,97 @@ protected boolean isEntityUpdateable() {
         return query.list();
     }
 
-    private String selectDeep;
-
-    protected String getSelectDeep() {
-        if (selectDeep == null) {
-            StringBuilder builder = new StringBuilder("SELECT ");
-            SqlUtils.appendColumns(builder, "T", getAllColumns());
-            builder.append(',');
-            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
-            builder.append(" FROM ORDERS T");
-            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
-            builder.append(' ');
-            selectDeep = builder.toString();
-        }
-        return selectDeep;
-    }
-    
-    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
-        Order entity = loadCurrent(cursor, 0, lock);
-        int offset = getAllColumns().length;
-
-        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
-         if(customer != null) {
-            entity.setCustomer(customer);
-        }
-
-        return entity;    
-    }
-
-    public Order loadDeep(Long key) {
-        assertSinglePk();
-        if (key == null) {
-            return null;
-        }
-
-        StringBuilder builder = new StringBuilder(getSelectDeep());
-        builder.append("WHERE ");
-        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
-        String sql = builder.toString();
-        
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
-        
-        try {
-            boolean available = cursor.moveToFirst();
-            if (!available) {
-                return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
-            }
-            return loadCurrentDeep(cursor, true);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
-        List<Order> list = new ArrayList<Order>(count);
-        
-        if (cursor.moveToFirst()) {
-            if (identityScope != null) {
-                identityScope.lock();
-                identityScope.reserveRoom(count);
-            }
-            try {
-                do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
-            } finally {
-                if (identityScope != null) {
-                    identityScope.unlock();
-                }
-            }
-        }
-        return list;
-    }
-    
-    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
-        try {
-            return loadAllDeepFromCursor(cursor);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<Order> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
-    }
- 
+    private String selectDeep;
+
+    protected String getSelectDeep() {
+        if (selectDeep == null) {
+            StringBuilder builder = new StringBuilder("SELECT ");
+            SqlUtils.appendColumns(builder, "T", getAllColumns());
+            builder.append(',');
+            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
+            builder.append(" FROM ORDERS T");
+            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
+            builder.append(' ');
+            selectDeep = builder.toString();
+        }
+        return selectDeep;
+    }
+    
+    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
+        Order entity = loadCurrent(cursor, 0, lock);
+        int offset = getAllColumns().length;
+
+        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
+         if(customer != null) {
+            entity.setCustomer(customer);
+        }
+
+        return entity;    
+    }
+
+    public Order loadDeep(Long key) {
+        assertSinglePk();
+        if (key == null) {
+            return null;
+        }
+
+        StringBuilder builder = new StringBuilder(getSelectDeep());
+        builder.append("WHERE ");
+        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
+        String sql = builder.toString();
+        
+        String[] keyArray = new String[] { key.toString() };
+        Cursor cursor = db.rawQuery(sql, keyArray);
+        
+        try {
+            boolean available = cursor.moveToFirst();
+            if (!available) {
+                return null;
+            } else if (!cursor.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            }
+            return loadCurrentDeep(cursor, true);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
+    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
+        int count = cursor.getCount();
+        List<Order> list = new ArrayList<Order>(count);
+        
+        if (cursor.moveToFirst()) {
+            if (identityScope != null) {
+                identityScope.lock();
+                identityScope.reserveRoom(count);
+            }
+            try {
+                do {
+                    list.add(loadCurrentDeep(cursor, false));
+                } while (cursor.moveToNext());
+            } finally {
+                if (identityScope != null) {
+                    identityScope.unlock();
+                }
+            }
+        }
+        return list;
+    }
+    
+    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
+        try {
+            return loadAllDeepFromCursor(cursor);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+
+    /** A raw-style query where you can pass any WHERE clause and arguments. */
+    public List<Order> queryDeep(String where, String... selectionArg) {
+        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
+        return loadDeepAllAndCloseCursor(cursor);
+    }
+ 
 }
diff --git a/DaoExample/src/main/jniLibs/armeabi-v7a/libdatabase_sqlcipher.so b/DaoExample/src/main/jniLibs/armeabi-v7a/libdatabase_sqlcipher.so
new file mode 100755
index 00000000..7bafa31a
Binary files /dev/null and b/DaoExample/src/main/jniLibs/armeabi-v7a/libdatabase_sqlcipher.so differ
diff --git a/DaoExample/src/main/jniLibs/armeabi-v7a/libsqlcipher_android.so b/DaoExample/src/main/jniLibs/armeabi-v7a/libsqlcipher_android.so
new file mode 100755
index 00000000..c19a7c4d
Binary files /dev/null and b/DaoExample/src/main/jniLibs/armeabi-v7a/libsqlcipher_android.so differ
diff --git a/DaoExample/src/main/jniLibs/armeabi-v7a/libstlport_shared.so b/DaoExample/src/main/jniLibs/armeabi-v7a/libstlport_shared.so
new file mode 100755
index 00000000..0ec49f44
Binary files /dev/null and b/DaoExample/src/main/jniLibs/armeabi-v7a/libstlport_shared.so differ
diff --git a/DaoExample/src/main/jniLibs/armeabi/libdatabase_sqlcipher.so b/DaoExample/src/main/jniLibs/armeabi/libdatabase_sqlcipher.so
new file mode 100755
index 00000000..dfc03dde
Binary files /dev/null and b/DaoExample/src/main/jniLibs/armeabi/libdatabase_sqlcipher.so differ
diff --git a/DaoExample/src/main/jniLibs/armeabi/libsqlcipher_android.so b/DaoExample/src/main/jniLibs/armeabi/libsqlcipher_android.so
new file mode 100755
index 00000000..d4d095c5
Binary files /dev/null and b/DaoExample/src/main/jniLibs/armeabi/libsqlcipher_android.so differ
diff --git a/DaoExample/src/main/jniLibs/armeabi/libstlport_shared.so b/DaoExample/src/main/jniLibs/armeabi/libstlport_shared.so
new file mode 100755
index 00000000..050818bb
Binary files /dev/null and b/DaoExample/src/main/jniLibs/armeabi/libstlport_shared.so differ
diff --git a/DaoExample/src/main/jniLibs/x86/libdatabase_sqlcipher.so b/DaoExample/src/main/jniLibs/x86/libdatabase_sqlcipher.so
new file mode 100755
index 00000000..0d7871fe
Binary files /dev/null and b/DaoExample/src/main/jniLibs/x86/libdatabase_sqlcipher.so differ
diff --git a/DaoExample/src/main/jniLibs/x86/libsqlcipher_android.so b/DaoExample/src/main/jniLibs/x86/libsqlcipher_android.so
new file mode 100755
index 00000000..51620697
Binary files /dev/null and b/DaoExample/src/main/jniLibs/x86/libsqlcipher_android.so differ
diff --git a/DaoExample/src/main/jniLibs/x86/libstlport_shared.so b/DaoExample/src/main/jniLibs/x86/libstlport_shared.so
new file mode 100755
index 00000000..a5e8b357
Binary files /dev/null and b/DaoExample/src/main/jniLibs/x86/libstlport_shared.so differ
