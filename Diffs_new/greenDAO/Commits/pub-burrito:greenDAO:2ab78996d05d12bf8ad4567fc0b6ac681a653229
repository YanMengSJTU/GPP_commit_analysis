diff --git a/DaoCore/.classpath b/DaoCore/.classpath
index 3cf80721..2f37c995 100644
--- a/DaoCore/.classpath
+++ b/DaoCore/.classpath
@@ -1,10 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoCore/.project b/DaoCore/.project
index 63a36ae3..9106c7d1 100644
--- a/DaoCore/.project
+++ b/DaoCore/.project
@@ -5,26 +5,11 @@
 	<projects>
 	</projects>
 	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
 		<buildCommand>
 			<name>org.eclipse.jdt.core.javabuilder</name>
 			<arguments>
 			</arguments>
 		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
 		<buildCommand>
 			<name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>
 			<arguments>
@@ -34,7 +19,6 @@
 	<natures>
 		<nature>org.springsource.ide.eclipse.gradle.core.nature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>
 	</natures>
 </projectDescription>
diff --git a/DaoCore/AndroidManifest.xml b/DaoCore/AndroidManifest.xml
deleted file mode 100644
index 5e02a364..00000000
--- a/DaoCore/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="de.greenrobot.dao"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="4" />
-
-</manifest>
\ No newline at end of file
diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 88832b25..0c13e98b 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -1,17 +1,29 @@
 apply plugin: 'java'
 apply plugin: 'maven'
-apply plugin: 'signing'
 
 group = 'de.greenrobot'
 version = '1.3.7-java'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
-def sonatypeRepositoryUrl
+def preferedRepo
+def preferedRepoId
+def parsedProjectXml = (new XmlParser()).parse("$System.env.HOME" + "/.m2/settings.xml")
+def username
+def password
+
+def passwordSnapshots = parsedProjectXml.servers.server[1].password.text()
 if(isSnapshot) {
-	sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
+  preferedRepo = "http://archiva.cliff.cloudburrito.com:8080/archiva/repository/snapshots/"
+  preferedRepoId = "cloud.archiva.snapshots"
+  username = parsedProjectXml.servers.server[0].username.text()
+  password = parsedProjectXml.servers.server[0].password.text()
+
 } else {
-	sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+  preferedRepo = "http://archiva.cliff.cloudburrito.com:8080/archiva/repository/internal/"
+  preferedRepoId = "cloud.archiva.internal"
+  username = parsedProjectXml.servers.server[1].username.text()
+  password = parsedProjectXml.servers.server[1].password.text()
 }
 
 repositories {
@@ -19,6 +31,7 @@ repositories {
 }
 
 
+
 // provided is not supported in Gradle 1.4, see http://issues.gradle.org/browse/GRADLE-784
 // Like this, it won't appear at all in the POM
 configurations {
@@ -67,33 +80,15 @@ artifacts {
     archives sourcesJar
 }
 
-signing {
-    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-    project.hasProperty('signing.secretKeyRingFile')) {
-        sign configurations.archives
-    } else {
-        println "Signing information missing/incomplete for ${project.name}"
-    }
-}
-
 uploadArchives {
     repositories {
         mavenDeployer {
-            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') 
-                && project.hasProperty('preferedPassword')) {
-                configuration = configurations.deployerJars
-                repository(url: preferedRepo) {
-                    authentication(userName: preferedUsername, password: preferedPassword)
-                }
-            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
-                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-                repository(url: sonatypeRepositoryUrl) {
-                    authentication(userName: sonatypeUsername, password: sonatypePassword)
-                }
-            } else {
-                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
+            repository(url: preferedRepo, id: preferedRepoId) {
+              authentication(userName: username, password: password)
             }
-
+            pom.groupId = "de.greenrobot"
+            pom.artifactId = "${rootProject.name}"
+            pom.version = "${version}"
             pom.project {
                name 'greenDAO'
                packaging 'jar'
diff --git a/DaoCore/deploy.sh b/DaoCore/deploy.sh
new file mode 100755
index 00000000..1e1487f5
--- /dev/null
+++ b/DaoCore/deploy.sh
@@ -0,0 +1,3 @@
+. java-home.sh
+
+gradle clean build uploadArchives
\ No newline at end of file
diff --git a/DaoCore/java-home.sh b/DaoCore/java-home.sh
new file mode 100755
index 00000000..2a0fb50e
--- /dev/null
+++ b/DaoCore/java-home.sh
@@ -0,0 +1 @@
+export JAVA_HOME=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
diff --git a/DaoCore/project.properties b/DaoCore/project.properties
deleted file mode 100644
index 96db7421..00000000
--- a/DaoCore/project.properties
+++ /dev/null
@@ -1,12 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-
-android.library=true
-# Project target.
-target=android-4
diff --git a/DaoCore/res/values/dummy.xml b/DaoCore/res/values/dummy.xml
deleted file mode 100644
index 4c670337..00000000
--- a/DaoCore/res/values/dummy.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    
-</resources>
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractConnectionManager.java b/DaoCore/src/de/greenrobot/dao/AbstractConnectionManager.java
new file mode 100644
index 00000000..039b4474
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/AbstractConnectionManager.java
@@ -0,0 +1,121 @@
+package de.greenrobot.dao;
+
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import de.greenrobot.dao.internal.JDBCUtils;
+
+public abstract class AbstractConnectionManager
+{
+	private String driverName;
+	private String connectionString;
+	private int newVersion;
+	private Connection connection;
+	
+	public AbstractConnectionManager( String driverName, String connectionString, int version )
+	{
+		this.driverName = driverName;
+		this.connectionString = connectionString;
+		this.newVersion = version;
+	}
+	
+	// TODO connection pooling
+	public Connection getConnection() throws SQLException
+	{
+		if ( isEmpty( driverName ) || isEmpty( connectionString ) )
+		{
+			throw new SQLException( String.format( "Invalid driver name: [%s] or connection string: [%s]", driverName, connectionString ) );
+		}
+		
+		if ( !isOpen( connection ) )
+		{
+			connection = JDBCUtils.connect( driverName, connectionString );
+			onOpen( connection );
+		}
+		
+		int currentVersion = getCurrentVersion( connection );
+		if ( !hasTables( connection ) )
+		{
+			onCreate( connection );
+		}
+		else if ( isUpgradable( currentVersion ) )
+		{
+			onUpgrade( connection, currentVersion, newVersion );
+		}
+		setCurrentVersion( connection, newVersion );
+		
+		return connection;
+	}
+	
+	//@formatter:off
+	public void onOpen( Connection connection ) throws SQLException {}
+	
+	public void onCreate( Connection connection ) throws SQLException {}
+	
+	public void onUpgrade( Connection connection, int oldVersion, int newVersion ) throws SQLException {}
+	//@formatter:on
+	
+	private boolean hasTables( Connection connection ) throws SQLException
+	{
+		boolean result = false;
+		if ( isOpen( connection ) )
+		{
+			DatabaseMetaData metadata = connection.getMetaData();
+			String[] types = { "TABLE" };
+			ResultSet resultSet = metadata.getTables( null, null, "%", types );
+			result = resultSet.next();
+			resultSet.close();
+		}
+		return result;
+	}
+	
+	// FIXME this will only work on SQLite because it makes use of PRAGMA
+	private int getCurrentVersion( Connection connection )
+	{
+		int version = newVersion;
+		try
+		{
+			ResultSet resultSet = JDBCUtils.query( connection, "PRAGMA user_version" );
+			if ( resultSet.next() )
+			{
+				version = resultSet.getInt( 1 );
+			}
+		}
+		catch ( SQLException e )
+		{
+			e.printStackTrace();
+		}
+		return version;
+	}
+	
+	// FIXME Only work on SQLite because it makes use of PRAGMA
+	private void setCurrentVersion( Connection connection, int version )
+	{
+		try
+		{
+			JDBCUtils.execute( connection, "PRAGMA user_version = ?", version );
+			this.newVersion = version;
+		}
+		catch ( SQLException e )
+		{
+			e.printStackTrace();
+		}
+	}
+
+	private boolean isUpgradable( int currentVersion )
+	{
+		return currentVersion < newVersion;
+	}
+
+	private boolean isOpen( Connection connection ) throws SQLException
+	{
+		return connection != null && !connection.isClosed();
+	}
+	
+	private boolean isEmpty( String string )
+	{
+		return string == null || string.trim().length() <= 0;
+	}
+}
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 6f64a98d..8a904680 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -28,10 +28,10 @@
 import de.greenrobot.dao.identityscope.IdentityScope;
 import de.greenrobot.dao.identityscope.IdentityScopeLong;
 import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.internal.JDBCUtils;
 import de.greenrobot.dao.internal.TableStatements;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.platform.java.util.JDBCUtils;
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
diff --git a/DaoCore/src/de/greenrobot/dao/DbUtils.java b/DaoCore/src/de/greenrobot/dao/DbUtils.java
index 30bbe8d8..762685b1 100644
--- a/DaoCore/src/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/DbUtils.java
@@ -28,12 +28,13 @@
 // TODO add unit tests
 public class DbUtils {
 
+	// FIXME Only work on SQLite because it makes use of PRAGMA
     public static void vacuum(Connection connection) throws SQLException {
         connection.prepareStatement("VACUUM").execute();
     }
 
     /**
-     * Calls {@link #executeSqlScript(Context, SQLiteDatabase, String, boolean)} with transactional set to true.
+     * Calls {@link #executeSqlScript(Connection, String, boolean)} with transactional set to true.
      * 
      * @return number of statements executed.
      * @throws SQLException 
diff --git a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java b/DaoCore/src/de/greenrobot/dao/internal/JDBCUtils.java
similarity index 77%
rename from DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
rename to DaoCore/src/de/greenrobot/dao/internal/JDBCUtils.java
index a1de6685..965047b2 100644
--- a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/JDBCUtils.java
@@ -1,6 +1,7 @@
-package de.greenrobot.platform.java.util;
+package de.greenrobot.dao.internal;
 
 import java.sql.Connection;
+import java.sql.Date;
 import java.sql.Driver;
 import java.sql.DriverManager;
 import java.sql.PreparedStatement;
@@ -19,7 +20,9 @@ public static ResultSet query( Connection connection, String sql, Object... para
 		PreparedStatement statement = connection.prepareStatement( sql );
 		for ( int i = 0; i < parameters.length; i++ )
 		{
-			statement.setObject( i, parameters[i] );
+			int index = i + 1;
+			Object parameter = parameters[i];
+			setStatement( statement, index, parameter );
 		}
 		ResultSet result = statement.executeQuery();
 		statement.close();
@@ -36,13 +39,47 @@ public static boolean execute( Connection connection, String sql, Object... para
 		PreparedStatement statement = connection.prepareStatement( sql );
 		for ( int i = 0; i < parameters.length; i++ )
 		{
-			statement.setObject( i, parameters[i] );
+			int index = i + 1;
+			Object parameter = parameters[i];
+			setStatement( statement, index, parameter );
 		}
 		boolean result = statement.execute();
 		statement.close();
 		return result;
 	}
 	
+	public static void setStatement( PreparedStatement statement, int index, Object parameter ) throws SQLException
+	{
+		if ( parameter instanceof String )
+		{
+			statement.setString( index, (String) parameter );
+		}
+		else if ( parameter instanceof Integer )
+		{
+			statement.setInt( index, (Integer) parameter );
+		}
+		else if ( parameter instanceof Long )
+		{
+			statement.setLong( index, (Long) parameter );
+		} 
+		else if ( parameter instanceof Float )
+		{
+			statement.setFloat( index, (Float) parameter );
+		} 
+		else if ( parameter instanceof Date )
+		{
+			statement.setDate( index, (Date) parameter );
+		} 
+		else if ( parameter instanceof byte[] )
+		{
+			statement.setBytes( index, (byte[]) parameter );
+		} 
+		else
+		{
+			statement.setObject( index, parameter );
+		}
+	}
+	
 	public static boolean transaction( Connection connection, String sql ) throws SQLException
 	{
 		return transaction( connection, sql, new Object[] {} );
diff --git a/DaoCore/src/de/greenrobot/dao/query/CountQuery.java b/DaoCore/src/de/greenrobot/dao/query/CountQuery.java
index 96df16db..59151bf8 100644
--- a/DaoCore/src/de/greenrobot/dao/query/CountQuery.java
+++ b/DaoCore/src/de/greenrobot/dao/query/CountQuery.java
@@ -46,7 +46,8 @@ public long count() throws SQLException {
         PreparedStatement statement = connection.prepareStatement( sql );
         for ( int i = 0; i < parameters.length; i++ )
 		{
-			statement.setString( i, parameters[i] );
+        	int index = i + 1;
+			statement.setString( index, parameters[i] );
 		}
 		ResultSet cursor = statement.executeQuery();
         try {
diff --git a/DaoCore/src/de/greenrobot/dao/query/Query.java b/DaoCore/src/de/greenrobot/dao/query/Query.java
index 2a78240c..c10025c2 100644
--- a/DaoCore/src/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/de/greenrobot/dao/query/Query.java
@@ -125,9 +125,10 @@ public void setOffset(int offset) throws DaoException {
         checkThread();
         Connection connection = dao.getConnection();
         PreparedStatement statement = connection.prepareStatement( sql );
-        for ( int i = 1; i < parameters.length; i++ )
+        for ( int i = 0; i < parameters.length; i++ )
 		{
-			statement.setString( i, parameters[i] );
+        	int index = i + 1;
+			statement.setString( index, parameters[i] );
 		}
         ResultSet resultSet = statement.executeQuery();
         return daoAccess.loadAllAndCloseCursor(resultSet);
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 874f89ce..1e671663 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -1,17 +1,29 @@
 apply plugin: 'java'
 apply plugin: 'maven'
-apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '1.3.1-SNAPSHOT'
+version = '1.3.7-java'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
-def sonatypeRepositoryUrl
+def preferedRepo
+def preferedRepoId
+def parsedProjectXml = (new XmlParser()).parse("$System.env.HOME" + "/.m2/settings.xml")
+def username
+def password
+
+def passwordSnapshots = parsedProjectXml.servers.server[1].password.text()
 if(isSnapshot) {
-    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
+  preferedRepo = "http://archiva.cliff.cloudburrito.com:8080/archiva/repository/snapshots/"
+  preferedRepoId = "cloud.archiva.snapshots"
+  username = parsedProjectXml.servers.server[0].username.text()
+  password = parsedProjectXml.servers.server[0].password.text()
+
 } else {
-    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+  preferedRepo = "http://archiva.cliff.cloudburrito.com:8080/archiva/repository/internal/"
+  preferedRepoId = "cloud.archiva.internal"
+  username = parsedProjectXml.servers.server[1].username.text()
+  password = parsedProjectXml.servers.server[1].password.text()
 }
 
 repositories {
@@ -80,33 +92,16 @@ artifacts {
     archives sourcesJar
 }
 
-signing {
-    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
-    project.hasProperty('signing.secretKeyRingFile')) {
-        sign configurations.archives
-    } else {
-        println "Signing information missing/incomplete for ${project.name}"
-    }
-}
-
 uploadArchives {
     repositories {
         mavenDeployer {
-            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') 
-                && project.hasProperty('preferedPassword')) {
-                configuration = configurations.deployerJars
-                repository(url: preferedRepo) {
-                    authentication(userName: preferedUsername, password: preferedPassword)
-                }
-            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
-                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-                repository(url: sonatypeRepositoryUrl) {
-                    authentication(userName: sonatypeUsername, password: sonatypePassword)
-                }
-            } else {
-                println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
+            repository(url: preferedRepo, id: preferedRepoId) {
+              authentication(userName: username, password: password)
             }
-
+            pom.groupId = "de.greenrobot"
+            pom.artifactId = "${rootProject.name}"
+            pom.version = "${version}"
+            
             pom.project {
                name 'greenDAO Generator'
                packaging 'jar'
diff --git a/DaoGenerator/deploy.sh b/DaoGenerator/deploy.sh
new file mode 100755
index 00000000..1e1487f5
--- /dev/null
+++ b/DaoGenerator/deploy.sh
@@ -0,0 +1,3 @@
+. java-home.sh
+
+gradle clean build uploadArchives
\ No newline at end of file
diff --git a/DaoGenerator/java-home.sh b/DaoGenerator/java-home.sh
new file mode 100755
index 00000000..2a0fb50e
--- /dev/null
+++ b/DaoGenerator/java-home.sh
@@ -0,0 +1 @@
+export JAVA_HOME=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index 162349ee..d30c557f 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -21,10 +21,8 @@ package ${schema.defaultJavaPackageDao};
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import java.sql.ResultSet;
-
-import de.greenrobot.platform.java.util.JDBCUtils;
 
+import de.greenrobot.dao.AbstractConnectionManager;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -58,55 +56,10 @@ public class DaoMaster extends AbstractDaoMaster {
 </#list>
     }
     
-    public static abstract class AbstractConnectionManager {
-    
-    	private String driverName;
-    	private String connectionString;
-    	private Connection connection;
-    	
-    	public AbstractConnectionManager(String driverName, String connectionString) {
-    		this.driverName = driverName;
-    		this.connectionString = connectionString;
-    		try {
-	    		onCreate();
-	    	} catch (SQLException e) {
-	    		throw new RuntimeException("Unable to manage this connection", e);
-	    	}
-    	}
-    	
-    	// TODO connection pooling
-    	public Connection getConnection() throws SQLException {
-    		if (this.connection == null) {
-		    	this.connection = JDBCUtils.connect(driverName, connectionString);
-			}
-			return this.connection;    	
-    	}
-    	
-		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
-
-    	public abstract void onCreate(Connection connection) throws SQLException;
-
-    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
-    	
-    	private void onCreate() throws SQLException {
-    		Connection connection = getConnection();
-    		if (isBigBang(connection)) {
-    			onCreate(connection);
-    		}
-    	}
-    	
-    	private boolean isBigBang(Connection connection) throws SQLException {
-    		ResultSet resultSet = connection.getMetaData().getCatalogs();
-    		boolean result = !resultSet.next();
-    		resultSet.close();
-    		return result;
-    	}
-    }
-    
     public static abstract class ConnectionManager extends AbstractConnectionManager {
 
         public ConnectionManager(String driverName, String connectionString) {
-            super(driverName, connectionString);
+            super(driverName, connectionString, SCHEMA_VERSION);
         }
 
         @Override
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index fe2b537f..15793d5f 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -34,7 +34,7 @@ import java.sql.SQLException;
 import java.sql.Connection;
 </#if>
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 80da7ea3..a4ef7d8c 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -132,7 +132,7 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
     protected File toFileForceExists(String filename) throws IOException {
         File file = new File(filename);
         if (!file.exists()) {
-            throw new IOException(filename
+            throw new IOException(file
                     + " does not exist. This check is to prevent accidental file generation into a wrong path.");
         }
         return file;
diff --git a/DaoTest/.classpath b/DaoTest/.classpath
index ffdf4c14..5452335e 100644
--- a/DaoTest/.classpath
+++ b/DaoTest/.classpath
@@ -8,5 +8,7 @@
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="lib" path="libs/sqldroid-1.0.0RC1.jar"/>
 	<classpathentry kind="lib" path="libs/sqldroidsecompat-1.0.0RC1.jar"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/DaoCore"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/DaoGenerator"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoTest/project.properties b/DaoTest/project.properties
index fdf1149c..a5578ba0 100644
--- a/DaoTest/project.properties
+++ b/DaoTest/project.properties
@@ -7,6 +7,5 @@
 # "ant.properties", and override values to adapt the script to your
 # project structure.
 
-android.library.reference.1=../DaoCore
 # Project target.
 target=android-19
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
index 6726c4b4..e3c2c27e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
index 81e5b4fb..67ec0473 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
index d217a447..9f86c80c 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index 9721ae37..71800cbd 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -2,10 +2,8 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import java.sql.ResultSet;
-
-import de.greenrobot.platform.java.util.JDBCUtils;
 
+import de.greenrobot.dao.AbstractConnectionManager;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -69,55 +67,10 @@ public static void dropAllTables(Connection connection, boolean ifExists) throws
         AutoincrementEntityDao.dropTable(connection, ifExists);
     }
     
-    public static abstract class AbstractConnectionManager {
-    
-    	private String driverName;
-    	private String connectionString;
-    	private Connection connection;
-    	
-    	public AbstractConnectionManager(String driverName, String connectionString) {
-    		this.driverName = driverName;
-    		this.connectionString = connectionString;
-    		try {
-	    		onCreate();
-	    	} catch (SQLException e) {
-	    		throw new RuntimeException("Unable to manage this connection", e);
-	    	}
-    	}
-    	
-    	// TODO connection pooling
-    	public Connection getConnection() throws SQLException {
-    		if (this.connection == null) {
-		    	this.connection = JDBCUtils.connect(driverName, connectionString);
-			}
-			return this.connection;    	
-    	}
-    	
-		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
-
-    	public abstract void onCreate(Connection connection) throws SQLException;
-
-    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
-    	
-    	private void onCreate() throws SQLException {
-    		Connection connection = getConnection();
-    		if (isBigBang(connection)) {
-    			onCreate(connection);
-    		}
-    	}
-    	
-    	private boolean isBigBang(Connection connection) throws SQLException {
-    		ResultSet resultSet = connection.getMetaData().getCatalogs();
-    		boolean result = !resultSet.next();
-    		resultSet.close();
-    		return result;
-    	}
-    }
-    
     public static abstract class ConnectionManager extends AbstractConnectionManager {
 
         public ConnectionManager(String driverName, String connectionString) {
-            super(driverName, connectionString);
+            super(driverName, connectionString, SCHEMA_VERSION);
         }
 
         @Override
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
index f2981a0e..0b0c7a87 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
index ec74be18..113f4ed2 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
index bd67ecf9..33adbd04 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
@@ -7,7 +7,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
index 8f33a5e2..94fc2e7a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
index 1d491f7a..9a7ee2bc 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
index f0eda3b4..f6e6ed38 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
index d03e5749..ccf40ac0 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SqliteMasterDao.java
@@ -4,7 +4,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
index b8e418ca..e61d7d94 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
index f581a7c4..3406d8e9 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
index 01c18e8c..7f089d70 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
index f908f398..a6ee66a5 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
index 4b4a24a8..9a432508 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
@@ -7,7 +7,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
index d86e5ffa..87bc2e8b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
@@ -2,10 +2,8 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import java.sql.ResultSet;
-
-import de.greenrobot.platform.java.util.JDBCUtils;
 
+import de.greenrobot.dao.AbstractConnectionManager;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
@@ -38,55 +36,10 @@ public static void dropAllTables(Connection connection, boolean ifExists) throws
         RelationSource2Dao.dropTable(connection, ifExists);
     }
     
-    public static abstract class AbstractConnectionManager {
-    
-    	private String driverName;
-    	private String connectionString;
-    	private Connection connection;
-    	
-    	public AbstractConnectionManager(String driverName, String connectionString) {
-    		this.driverName = driverName;
-    		this.connectionString = connectionString;
-    		try {
-	    		onCreate();
-	    	} catch (SQLException e) {
-	    		throw new RuntimeException("Unable to manage this connection", e);
-	    	}
-    	}
-    	
-    	// TODO connection pooling
-    	public Connection getConnection() throws SQLException {
-    		if (this.connection == null) {
-		    	this.connection = JDBCUtils.connect(driverName, connectionString);
-			}
-			return this.connection;    	
-    	}
-    	
-		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
-
-    	public abstract void onCreate(Connection connection) throws SQLException;
-
-    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
-    	
-    	private void onCreate() throws SQLException {
-    		Connection connection = getConnection();
-    		if (isBigBang(connection)) {
-    			onCreate(connection);
-    		}
-    	}
-    	
-    	private boolean isBigBang(Connection connection) throws SQLException {
-    		ResultSet resultSet = connection.getMetaData().getCatalogs();
-    		boolean result = !resultSet.next();
-    		resultSet.close();
-    		return result;
-    	}
-    }
-    
     public static abstract class ConnectionManager extends AbstractConnectionManager {
 
         public ConnectionManager(String driverName, String connectionString) {
-            super(driverName, connectionString);
+            super(driverName, connectionString, SCHEMA_VERSION);
         }
 
         @Override
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
index 4c803e4a..5f5b334a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
index 212602d0..d164c8ae 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
index e0e68bd8..c3465435 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
@@ -7,7 +7,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
index b6df83e9..5660233c 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
@@ -5,7 +5,7 @@
 import java.sql.SQLException;
 import java.sql.Connection;
 
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
diff --git a/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
index 487c1726..b5e5f166 100644
--- a/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
+++ b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
@@ -26,8 +26,8 @@
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.JDBCUtils;
 import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.platform.java.util.JDBCUtils;
 
 /**
  * Default tests for single-PK entities.
diff --git a/DaoTest/src/de/greenrobot/dao/test/DbTest.java b/DaoTest/src/de/greenrobot/dao/test/DbTest.java
index 359caf78..b04f9961 100644
--- a/DaoTest/src/de/greenrobot/dao/test/DbTest.java
+++ b/DaoTest/src/de/greenrobot/dao/test/DbTest.java
@@ -20,12 +20,11 @@
 import java.sql.SQLException;
 import java.util.Random;
 
-
 import android.app.Application;
 import android.app.Instrumentation;
 import android.test.AndroidTestCase;
 import de.greenrobot.dao.DbUtils;
-import de.greenrobot.platform.java.util.JDBCUtils;
+import de.greenrobot.dao.internal.JDBCUtils;
 
 /**
  * Base class for database related testing, which prepares an in-memory or an file-based DB (using the test {@link
