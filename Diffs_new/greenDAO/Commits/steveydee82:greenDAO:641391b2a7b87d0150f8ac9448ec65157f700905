diff --git a/DaoCore/src/de/greenrobot/dao/Property.java b/DaoCore/src/de/greenrobot/dao/Property.java
index 232d5efc..ee83ccd9 100644
--- a/DaoCore/src/de/greenrobot/dao/Property.java
+++ b/DaoCore/src/de/greenrobot/dao/Property.java
@@ -19,9 +19,10 @@
 import java.util.Collection;
 
 import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.join.PropertyWithAlias;
 import de.greenrobot.dao.query.WhereCondition;
 import de.greenrobot.dao.query.WhereCondition.PropertyCondition;
+import de.greenrobot.dao.selectable.PropertyWithAlias;
+import de.greenrobot.dao.selectable.SqlSelectable;
 
 /**
  * Meta data describing a property mapped to a database column; used to create WhereCondition object used by the query builder.
@@ -35,7 +36,7 @@
     public final boolean primaryKey;
     public final String columnName;
     public final String tableName;
-
+    
     public Property(int ordinal, Class<?> type, String name, boolean primaryKey, String columnName, String tableName) {
         this.ordinal = ordinal;
         this.type = type;
@@ -124,6 +125,10 @@ public PropertyWithAlias withAlias(String alias) {
     	return new PropertyWithAlias(this, alias);
     }
     
+    public Selectable as(String asClause) {
+    	return new SqlSelectable(getColumnName(), getColumnPrefix()).as(asClause);
+    }
+    
 	@Override
 	public String getColumnName() {
 		return this.columnName;
diff --git a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
index a8d49e6f..f3ac4d37 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
@@ -27,8 +27,8 @@ public static StringBuilder appendColumn(StringBuilder builder, String column) {
 
     public static StringBuilder appendColumn(StringBuilder builder, String tableAlias, String column) {
     	
-    	if(tableAlias.length() > 0) {
-    		builder.append(tableAlias).append(".'").append(column).append('\'');	
+    	if(tableAlias != null && tableAlias.length() > 0) {
+    		builder.append(tableAlias).append(".").append(column);	
     	} else {
     		builder.append(column);
     	}
diff --git a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
index ec6d5f66..d655e9a1 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
@@ -31,7 +31,6 @@
     private SQLiteStatement deleteStatement;
 
     private volatile String selectAll;
-    private volatile String selectColumns;
     private volatile String selectByKey;
     private volatile String selectByRowId;
     private volatile String selectKeys;
@@ -93,10 +92,7 @@ public String getSelectColumns(String[] columns, String[] aliases) {
     
     /** ends with an space to simplify appending to this string. */
     public String getSelectColumns(String[] columns, String[] aliases, boolean distinct) {
-        if (selectColumns == null) {
-        	selectColumns = SqlUtils.createSqlSelect(tablename, aliases, "T", columns, distinct);
-        }
-        return selectColumns;
+        return SqlUtils.createSqlSelect(tablename, aliases, "T", columns, distinct);
     }
 
     public String getSelectKeys() {
diff --git a/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java b/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
new file mode 100644
index 00000000..aa57c1bd
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/query/BaseBuilder.java
@@ -0,0 +1,72 @@
+package de.greenrobot.dao.query;
+
+import de.greenrobot.dao.Dao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.Selectable;
+
+public class BaseBuilder {
+
+	private Dao<?, ?> mDao;
+    protected StringBuilder orderBuilder;
+	
+	protected BaseBuilder(Dao<?, ?> dao) {
+		mDao = dao;
+	}
+	
+	private void checkOrderBuilder() {
+        if (orderBuilder == null) {
+            orderBuilder = new StringBuilder();
+        } else if (orderBuilder.length() > 0) {
+            orderBuilder.append(",");
+        }
+    }
+	
+    protected void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... properties) {
+        for (Property property : properties) {
+            checkOrderBuilder();
+            append(orderBuilder, property);
+            if (String.class.equals(property.type)) {
+                orderBuilder.append(" COLLATE LOCALIZED");
+            }
+            orderBuilder.append(ascOrDescWithLeadingSpace);
+        }
+    }
+    
+    /** Adds the given properties to the ORDER BY section using the given custom order. */
+    protected void orderCustomInternal(Property property, String customOrderForProperty) {
+        checkOrderBuilder();
+        append(orderBuilder, property).append(' ');
+        orderBuilder.append(customOrderForProperty);
+    }
+
+    /**
+     * Adds the given raw SQL string to the ORDER BY section. Do not use this for standard properties: ordedAsc and
+     * orderDesc are prefered.
+     */
+    protected void orderRawInternal(String rawOrder) {
+        checkOrderBuilder();
+        orderBuilder.append(rawOrder);
+    }
+    
+    public boolean hasOrderBy() {
+    	return (orderBuilder != null);
+    }
+	
+	public boolean isMasterTable(String tableName) {
+		return mDao.getTablename().equalsIgnoreCase(tableName);
+	}
+
+	protected String getTableAlias(Selectable s) {
+		if (isMasterTable(s.getColumnPrefix())) {
+			return "T";
+		} else {
+			return s.getColumnPrefix();
+		}
+	}
+
+	protected StringBuilder append(StringBuilder builder, Property property) {
+		builder.append(getTableAlias(property)).append('.')
+				.append(property.columnName);
+		return builder;
+	}
+}
diff --git a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
index 5346da17..bfd16289 100644
--- a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
@@ -49,7 +49,7 @@
  * @param <T>
  *            Entity class to create an query for.
  */
-public class QueryBuilder<T> {
+public class QueryBuilder<T> extends BaseBuilder {
 
     /** Set to true to debug the SQL. */
     public static boolean LOG_SQL;
@@ -57,8 +57,6 @@
     /** Set to see the given values. */
     public static boolean LOG_VALUES;
 
-    private StringBuilder orderBuilder;
-
     private List<JoinBuilder<T>> joinBuilders;
     
     private final List<WhereCondition> whereConditions;
@@ -85,6 +83,8 @@ protected QueryBuilder(AbstractDao<T, ?> dao) {
     }
 
     protected QueryBuilder(AbstractDao<T, ?> dao, String tablePrefix) {
+    	super(dao);
+    	
         this.dao = dao;
         this.tablePrefix = tablePrefix;
         values = new ArrayList<Object>();
@@ -92,14 +92,6 @@ protected QueryBuilder(AbstractDao<T, ?> dao, String tablePrefix) {
         joinBuilders = new ArrayList<JoinBuilder<T>>();
     }
 
-    private void checkOrderBuilder() {
-        if (orderBuilder == null) {
-            orderBuilder = new StringBuilder();
-        } else if (orderBuilder.length() > 0) {
-            orderBuilder.append(",");
-        }
-    }
-
     /**
      * Adds the given conditions to the where clause using an logical AND. To create new conditions, use the properties
      * given in the generated dao classes.
@@ -107,7 +99,6 @@ private void checkOrderBuilder() {
     public QueryBuilder<T> where(WhereCondition cond, WhereCondition... condMore) {
         whereConditions.add(cond);
         for (WhereCondition whereCondition : condMore) {
-            checkCondition(whereCondition);
             whereConditions.add(whereCondition);
         }
         return this;
@@ -167,16 +158,10 @@ protected WhereCondition combineWhereConditions(String combineOp, WhereCondition
     }
 
     protected void addCondition(StringBuilder builder, List<Object> values, WhereCondition condition) {
-        checkCondition(condition);
         condition.appendTo(builder, tablePrefix);
         condition.appendValuesTo(values);
     }
 
-    protected void checkCondition(WhereCondition whereCondition) {
-        if (whereCondition instanceof PropertyCondition) {
-            checkProperty(((PropertyCondition) whereCondition).property);
-        }
-    }
 
     /** Not supported yet. */
 //    public <J> QueryBuilder<J> join(Class<J> entityClass, Property toOneProperty) {
@@ -325,22 +310,10 @@ protected void checkCondition(WhereCondition whereCondition) {
         return this;
     }
 
-    private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... properties) {
-        for (Property property : properties) {
-            checkOrderBuilder();
-            append(orderBuilder, property);
-            if (String.class.equals(property.type)) {
-                orderBuilder.append(" COLLATE LOCALIZED");
-            }
-            orderBuilder.append(ascOrDescWithLeadingSpace);
-        }
-    }
     
     /** Adds the given properties to the ORDER BY section using the given custom order. */
     public QueryBuilder<T> orderCustom(Property property, String customOrderForProperty) {
-        checkOrderBuilder();
-        append(orderBuilder, property).append(' ');
-        orderBuilder.append(customOrderForProperty);
+    	orderCustomInternal(property, customOrderForProperty);
         return this;
     }
 
@@ -349,8 +322,7 @@ private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... proper
      * orderDesc are prefered.
      */
     public QueryBuilder<T> orderRaw(String rawOrder) {
-        checkOrderBuilder();
-        orderBuilder.append(rawOrder);
+        orderRawInternal(rawOrder);
         return this;
     }
     
@@ -367,17 +339,13 @@ private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... proper
     	for(int ii = 0; ii < properties.length; ii++) {
    		
     		selectColumns[ii] = properties[ii].getColumnName();
-    		
-    		if(isMasterTable(properties[ii].getColumnPrefix())) {
-    			tableAliases[ii] = "T";
-    		} else {
-    			tableAliases[ii] = properties[ii].getColumnPrefix();
-    		}
+    		tableAliases[ii] = getTableAlias(properties[ii]);
     	}
     	
     	return this;
     }
     
+  
     /**
      * Sets the properties that will be returned. For use only if retrieving a Cursor using .cursor().
      * The strings to be passed in will need to be qualified if necessary with table identifiers.
@@ -404,32 +372,6 @@ private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... proper
     	return this;
     }
     
-    public boolean isMasterTable(String tableName) {
-    	return dao.getTablename().equalsIgnoreCase(tableName);
-    }
-
-    protected StringBuilder append(StringBuilder builder, Property property) {
-        checkProperty(property);
-        builder.append(tablePrefix).append('.').append('\'').append(property.columnName).append('\'');
-        return builder;
-    }
-
-    protected void checkProperty(Property property) {
-        if (dao != null) {
-            Property[] properties = dao.getProperties();
-            boolean found = false;
-            for (Property property2 : properties) {
-                if (property == property2) {
-                    found = true;
-                    break;
-                }
-            }
-            if (!found) {
-                throw new DaoException("Property '" + property.name + "' is not part of " + dao);
-            }
-        }
-    }
-
     /** Limits the number of results returned by queries. */
     public QueryBuilder<T> limit(int limit) {
         this.limit = limit;
@@ -449,6 +391,20 @@ protected void checkProperty(Property property) {
     	this.distinct = true;
     	return this;
     }
+    
+    /**
+     * Unions this query with the given query
+     * @param unionQuery	The query to union with this one
+     * @return a UnionQueryBuilder for building Union queries
+     */
+    public UnionQueryBuilder union(QueryBuilder<?> unionQuery) {
+    	UnionQueryBuilder unionBuilder = new UnionQueryBuilder(this.dao);
+    	
+    	unionBuilder.union(this);
+    	unionBuilder.union(unionQuery);
+    	
+    	return unionBuilder;
+    }
 
     /**
      * Builds a reusable query object (Query objects can be executed more efficiently than creating a QueryBuilder for
diff --git a/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
new file mode 100644
index 00000000..3cb96019
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/query/UnionQueryBuilder.java
@@ -0,0 +1,103 @@
+package de.greenrobot.dao.query;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoException;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.Selectable;
+import android.database.Cursor;
+
+/**
+ * Builder for performing a union of multple SQL queries
+ * 
+ * @author Stephen Dunford
+ *
+ */
+public class UnionQueryBuilder extends BaseBuilder {
+
+	private List<QueryBuilder<?>> mQueryBuilders;
+	private AbstractDao<?, ?> mDao;
+	
+	protected UnionQueryBuilder(AbstractDao<?, ?> dao) {
+		super(dao);
+		
+		mQueryBuilders = new ArrayList<QueryBuilder<?>>();
+		mDao = dao;
+		
+	}
+	
+	public UnionQueryBuilder union(QueryBuilder<?> queryBuilder) {
+		if(queryBuilder.hasOrderBy()) {
+			throw new DaoException("Cannot add a query with an ORDER BY to a UNION clause. Please use .union(...).orderby(...)");
+		}
+		mQueryBuilders.add(queryBuilder);
+		return this;
+	}
+	
+	/** Adds the given properties to the ORDER BY section using ascending order. */
+	UnionQueryBuilder orderAsc(Property... properties) {
+        orderAscOrDesc(" ASC", properties);
+        return this;
+    }
+
+    /** Adds the given properties to the ORDER BY section using descending order. */
+	UnionQueryBuilder orderDesc(Property... properties) {
+        orderAscOrDesc(" DESC", properties);
+        return this;
+    }
+
+    
+    /** Adds the given properties to the ORDER BY section using the given custom order. */
+    UnionQueryBuilder orderCustom(Property property, String customOrderForProperty) {
+    	orderCustomInternal(property, customOrderForProperty);
+        return this;
+    }
+
+    /**
+     * Adds the given raw SQL string to the ORDER BY section. Do not use this for standard properties: ordedAsc and
+     * orderDesc are prefered.
+     */
+    public UnionQueryBuilder orderRaw(String rawOrder) {
+        orderRawInternal(rawOrder);
+        return this;
+    }
+	
+	/**
+	 * Builds the union query and executes to return a cursor
+	 * @return Cursor for the results of the query
+	 */
+	public Cursor cursor() {
+		
+		boolean first = true;
+
+		ArrayList<String> parameters = new ArrayList<String>();
+		
+		StringBuilder sql = new StringBuilder();
+		
+		for(QueryBuilder<?> qb : mQueryBuilders) {
+		
+			if(!first) {
+				sql.append(" UNION ");
+			}
+			
+			Query<?> q = qb.build();
+			
+			sql.append(q.sql);
+
+			for(String parameter : q.parameters) {
+				parameters.add(parameter);
+			}
+			
+			first = false;
+        }
+		
+		if (orderBuilder != null && orderBuilder.length() > 0) {
+			sql.append(" ORDER BY ").append(orderBuilder);
+		}
+		
+		return mDao.getDatabase().rawQuery(sql.toString(), parameters.toArray(new String[parameters.size()]));
+	}
+}
diff --git a/DaoCore/src/de/greenrobot/dao/join/PropertyWithAlias.java b/DaoCore/src/de/greenrobot/dao/selectable/PropertyWithAlias.java
similarity index 93%
rename from DaoCore/src/de/greenrobot/dao/join/PropertyWithAlias.java
rename to DaoCore/src/de/greenrobot/dao/selectable/PropertyWithAlias.java
index 6562019e..d98571a1 100644
--- a/DaoCore/src/de/greenrobot/dao/join/PropertyWithAlias.java
+++ b/DaoCore/src/de/greenrobot/dao/selectable/PropertyWithAlias.java
@@ -1,4 +1,4 @@
-package de.greenrobot.dao.join;
+package de.greenrobot.dao.selectable;
 
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.Selectable;
diff --git a/DaoCore/src/de/greenrobot/dao/selectable/SqlSelectable.java b/DaoCore/src/de/greenrobot/dao/selectable/SqlSelectable.java
new file mode 100644
index 00000000..86dea5e2
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/selectable/SqlSelectable.java
@@ -0,0 +1,40 @@
+package de.greenrobot.dao.selectable;
+
+import de.greenrobot.dao.Selectable;
+
+public class SqlSelectable implements Selectable {
+
+	private String mSelect;
+	private String mColumnName;
+	private String mColumnPrefix = "";
+	
+	public SqlSelectable(String select) {
+		mSelect = select;
+	}
+	
+	public SqlSelectable(String select, String columnPrefix) {
+		mSelect = select;
+		mColumnPrefix = columnPrefix;
+	}
+	
+	public SqlSelectable as(String columnName) {
+		mColumnName = columnName;
+		
+		return this;
+	}
+
+	@Override
+	public String getColumnName() {
+		if(mColumnName != null && mColumnName.length() > 0) {
+			return String.format("%s as %s", mSelect, mColumnName);	
+		}
+		
+		return mSelect;
+	}
+
+	@Override
+	public String getColumnPrefix() {
+		return mColumnPrefix;
+	}
+		
+}
diff --git a/DaoCore/src/de/greenrobot/dao/selectable/StringSelectable.java b/DaoCore/src/de/greenrobot/dao/selectable/StringSelectable.java
new file mode 100644
index 00000000..ca0319fd
--- /dev/null
+++ b/DaoCore/src/de/greenrobot/dao/selectable/StringSelectable.java
@@ -0,0 +1,34 @@
+package de.greenrobot.dao.selectable;
+
+import de.greenrobot.dao.Selectable;
+
+public class StringSelectable implements Selectable {
+
+	private String mSelect;
+	private String mColumnName;
+	
+	public StringSelectable(String select) {
+		mSelect = select;
+	}
+	
+	public StringSelectable as(String columnName) {
+		mColumnName = columnName;
+		
+		return this;
+	}
+
+	@Override
+	public String getColumnName() {
+		if(mColumnName != null && mColumnName.length() > 0) {
+			return String.format("'%s' as %s", mSelect, mColumnName);	
+		}
+		
+		return mSelect;
+	}
+
+	@Override
+	public String getColumnPrefix() {
+		return "";
+	}
+		
+}
