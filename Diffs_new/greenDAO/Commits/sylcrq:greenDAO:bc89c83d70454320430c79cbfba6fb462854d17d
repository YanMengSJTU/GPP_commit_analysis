diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/MyDaoTestGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/MyDaoTestGenerator.java
new file mode 100644
index 00000000..7f3d9356
--- /dev/null
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/MyDaoTestGenerator.java
@@ -0,0 +1,33 @@
+package de.greenrobot.daogenerator.gentest;
+
+import java.io.IOException;
+
+import de.greenrobot.daogenerator.DaoGenerator;
+import de.greenrobot.daogenerator.Entity;
+import de.greenrobot.daogenerator.Schema;
+
+/**
+ * Java application
+ *
+ * Created by shenyunlong on 2015/8/21.
+ */
+public class MyDaoTestGenerator {
+
+
+    public static void main(String[] args) throws Exception {
+        Schema schema = new Schema(1024, "com.example.syl.mydaotest");
+
+        Entity weather = schema.addEntity("Weather");
+        weather.addIdProperty();
+        weather.addIntProperty("temp");
+        weather.addStringProperty("weather");
+        weather.addDateProperty("date");
+        weather.addStringProperty("date_str");
+
+        // TODO: 相对路径
+        new DaoGenerator().generateAll(schema, "E:/greenDAO/MyDaoTest/src-gen");
+    }
+
+
+
+}
diff --git a/MyDaoTest/.gitignore b/MyDaoTest/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/MyDaoTest/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/MyDaoTest/build.gradle b/MyDaoTest/build.gradle
new file mode 100644
index 00000000..32621431
--- /dev/null
+++ b/MyDaoTest/build.gradle
@@ -0,0 +1,43 @@
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.3.1'
+    }
+}
+
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 21
+    buildToolsVersion "23.0.0"
+
+    defaultConfig {
+        applicationId "com.example.syl.mydaotest"
+        minSdkVersion 14
+        targetSdkVersion 21
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+    sourceSets {
+        main {
+            java.srcDirs += ['src-gen']
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:appcompat-v7:22.2.0'
+
+    compile('de.greenrobot:greendao:2.0.0')
+}
diff --git a/MyDaoTest/proguard-rules.pro b/MyDaoTest/proguard-rules.pro
new file mode 100644
index 00000000..41afecb1
--- /dev/null
+++ b/MyDaoTest/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in D:\Android\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/MyDaoTest/src-gen/com/example/syl/mydaotest/DaoMaster.java b/MyDaoTest/src-gen/com/example/syl/mydaotest/DaoMaster.java
new file mode 100644
index 00000000..279902a7
--- /dev/null
+++ b/MyDaoTest/src-gen/com/example/syl/mydaotest/DaoMaster.java
@@ -0,0 +1,70 @@
+package com.example.syl.mydaotest;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteDatabase.CursorFactory;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.identityscope.IdentityScopeType;
+
+import com.example.syl.mydaotest.WeatherDao;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * Master of DAO (schema version 1024): knows all DAOs.
+*/
+public class DaoMaster extends AbstractDaoMaster {
+    public static final int SCHEMA_VERSION = 1024;
+
+    /** Creates underlying database table using DAOs. */
+    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+        WeatherDao.createTable(db, ifNotExists);
+    }
+    
+    /** Drops underlying database table using DAOs. */
+    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+        WeatherDao.dropTable(db, ifExists);
+    }
+    
+    public static abstract class OpenHelper extends SQLiteOpenHelper {
+
+        public OpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory, SCHEMA_VERSION);
+        }
+
+        @Override
+        public void onCreate(SQLiteDatabase db) {
+            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(db, false);
+        }
+    }
+    
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevOpenHelper extends OpenHelper {
+        public DevOpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+
+        @Override
+        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(db, true);
+            onCreate(db);
+        }
+    }
+
+    public DaoMaster(SQLiteDatabase db) {
+        super(db, SCHEMA_VERSION);
+        registerDaoClass(WeatherDao.class);
+    }
+    
+    public DaoSession newSession() {
+        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+    }
+    
+    public DaoSession newSession(IdentityScopeType type) {
+        return new DaoSession(db, type, daoConfigMap);
+    }
+    
+}
diff --git a/MyDaoTest/src-gen/com/example/syl/mydaotest/DaoSession.java b/MyDaoTest/src-gen/com/example/syl/mydaotest/DaoSession.java
new file mode 100644
index 00000000..45155441
--- /dev/null
+++ b/MyDaoTest/src-gen/com/example/syl/mydaotest/DaoSession.java
@@ -0,0 +1,49 @@
+package com.example.syl.mydaotest;
+
+import android.database.sqlite.SQLiteDatabase;
+
+import java.util.Map;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.identityscope.IdentityScopeType;
+import de.greenrobot.dao.internal.DaoConfig;
+
+import com.example.syl.mydaotest.Weather;
+
+import com.example.syl.mydaotest.WeatherDao;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+
+/**
+ * {@inheritDoc}
+ * 
+ * @see de.greenrobot.dao.AbstractDaoSession
+ */
+public class DaoSession extends AbstractDaoSession {
+
+    private final DaoConfig weatherDaoConfig;
+
+    private final WeatherDao weatherDao;
+
+    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+            daoConfigMap) {
+        super(db);
+
+        weatherDaoConfig = daoConfigMap.get(WeatherDao.class).clone();
+        weatherDaoConfig.initIdentityScope(type);
+
+        weatherDao = new WeatherDao(weatherDaoConfig, this);
+
+        registerDao(Weather.class, weatherDao);
+    }
+    
+    public void clear() {
+        weatherDaoConfig.getIdentityScope().clear();
+    }
+
+    public WeatherDao getWeatherDao() {
+        return weatherDao;
+    }
+
+}
diff --git a/MyDaoTest/src-gen/com/example/syl/mydaotest/Weather.java b/MyDaoTest/src-gen/com/example/syl/mydaotest/Weather.java
new file mode 100644
index 00000000..eb2b0faf
--- /dev/null
+++ b/MyDaoTest/src-gen/com/example/syl/mydaotest/Weather.java
@@ -0,0 +1,70 @@
+package com.example.syl.mydaotest;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table "WEATHER".
+ */
+public class Weather {
+
+    private Long id;
+    private Integer temp;
+    private String weather;
+    private java.util.Date date;
+    private String date_str;
+
+    public Weather() {
+    }
+
+    public Weather(Long id) {
+        this.id = id;
+    }
+
+    public Weather(Long id, Integer temp, String weather, java.util.Date date, String date_str) {
+        this.id = id;
+        this.temp = temp;
+        this.weather = weather;
+        this.date = date;
+        this.date_str = date_str;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Integer getTemp() {
+        return temp;
+    }
+
+    public void setTemp(Integer temp) {
+        this.temp = temp;
+    }
+
+    public String getWeather() {
+        return weather;
+    }
+
+    public void setWeather(String weather) {
+        this.weather = weather;
+    }
+
+    public java.util.Date getDate() {
+        return date;
+    }
+
+    public void setDate(java.util.Date date) {
+        this.date = date;
+    }
+
+    public String getDate_str() {
+        return date_str;
+    }
+
+    public void setDate_str(String date_str) {
+        this.date_str = date_str;
+    }
+
+}
diff --git a/MyDaoTest/src-gen/com/example/syl/mydaotest/WeatherDao.java b/MyDaoTest/src-gen/com/example/syl/mydaotest/WeatherDao.java
new file mode 100644
index 00000000..4f17a5ee
--- /dev/null
+++ b/MyDaoTest/src-gen/com/example/syl/mydaotest/WeatherDao.java
@@ -0,0 +1,142 @@
+package com.example.syl.mydaotest;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+
+import com.example.syl.mydaotest.Weather;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table "WEATHER".
+*/
+public class WeatherDao extends AbstractDao<Weather, Long> {
+
+    public static final String TABLENAME = "WEATHER";
+
+    /**
+     * Properties of entity Weather.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Temp = new Property(1, Integer.class, "temp", false, "TEMP");
+        public final static Property Weather = new Property(2, String.class, "weather", false, "WEATHER");
+        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
+        public final static Property Date_str = new Property(4, String.class, "date_str", false, "DATE_STR");
+    };
+
+
+    public WeatherDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public WeatherDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER\" (" + //
+                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
+                "\"TEMP\" INTEGER," + // 1: temp
+                "\"WEATHER\" TEXT," + // 2: weather
+                "\"DATE\" INTEGER," + // 3: date
+                "\"DATE_STR\" TEXT);"); // 4: date_str
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER\"";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, Weather entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        Integer temp = entity.getTemp();
+        if (temp != null) {
+            stmt.bindLong(2, temp);
+        }
+ 
+        String weather = entity.getWeather();
+        if (weather != null) {
+            stmt.bindString(3, weather);
+        }
+ 
+        java.util.Date date = entity.getDate();
+        if (date != null) {
+            stmt.bindLong(4, date.getTime());
+        }
+ 
+        String date_str = entity.getDate_str();
+        if (date_str != null) {
+            stmt.bindString(5, date_str);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public Weather readEntity(Cursor cursor, int offset) {
+        Weather entity = new Weather( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // temp
+            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weather
+            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
+            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // date_str
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, Weather entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setTemp(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
+        entity.setWeather(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
+        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
+        entity.setDate_str(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(Weather entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(Weather entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+}
diff --git a/MyDaoTest/src/androidTest/java/com/example/syl/mydaotest/ApplicationTest.java b/MyDaoTest/src/androidTest/java/com/example/syl/mydaotest/ApplicationTest.java
new file mode 100644
index 00000000..5d5b30b6
--- /dev/null
+++ b/MyDaoTest/src/androidTest/java/com/example/syl/mydaotest/ApplicationTest.java
@@ -0,0 +1,13 @@
+package com.example.syl.mydaotest;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
diff --git a/MyDaoTest/src/main/AndroidManifest.xml b/MyDaoTest/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..199e64c7
--- /dev/null
+++ b/MyDaoTest/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.syl.mydaotest" >
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme2" >
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/MyDaoTest/src/main/java/com/example/syl/mydaotest/MainActivity.java b/MyDaoTest/src/main/java/com/example/syl/mydaotest/MainActivity.java
new file mode 100644
index 00000000..e5a790d3
--- /dev/null
+++ b/MyDaoTest/src/main/java/com/example/syl/mydaotest/MainActivity.java
@@ -0,0 +1,117 @@
+package com.example.syl.mydaotest;
+
+import android.app.Activity;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.support.v7.app.ActionBarActivity;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.SimpleCursorAdapter;
+import android.widget.Toast;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class MainActivity extends Activity {
+
+    public static final String TAG = MainActivity.class.getSimpleName();
+
+    private Button mInsertButton;
+//    private Button mDeleteButton;
+    private ListView mRecordList;
+
+    private SQLiteDatabase mDB;
+    private DaoMaster mDaoMaster;
+    private DaoSession mDaoSession;
+    private WeatherDao mWeatherDao;
+
+    private Cursor mCursor;
+    private SimpleCursorAdapter mAdapter;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        // init
+        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "weather-db", null);
+        mDB= helper.getWritableDatabase();
+
+        mDaoMaster = new DaoMaster(mDB);
+        mDaoSession = mDaoMaster.newSession();
+        mWeatherDao = mDaoSession.getWeatherDao();
+
+        // insert button
+        mInsertButton = (Button) findViewById(R.id.insert_button);
+        mInsertButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Date date = new Date();
+                String date_str = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date);
+
+                Weather weather = new Weather(null, 20, "晴天", date, date_str);
+                mWeatherDao.insert(weather);
+
+                mCursor.requery();
+                mAdapter.notifyDataSetChanged();
+
+                //Log.d(TAG, "inserted Weather, ID=" + weather.getId());
+                Toast.makeText(getApplicationContext(), "inserted Weather, ID="+weather.getId(), Toast.LENGTH_SHORT).show();
+            }
+        });
+
+        // listview
+        String orderBy = WeatherDao.Properties.Weather.columnName;
+        mCursor = mDB.query(mWeatherDao.getTablename(), mWeatherDao.getAllColumns(), null, null, null, null, orderBy);
+
+        //SimpleDateFormat sdf = new SimpleDateFormat();
+
+        String[] from = {WeatherDao.Properties.Weather.columnName, WeatherDao.Properties.Date_str.columnName};
+        int[] to = {android.R.id.text1, android.R.id.text2};
+
+        mAdapter = new SimpleCursorAdapter(getApplicationContext(), android.R.layout.simple_list_item_2,
+                mCursor, from, to, 0);
+
+        mRecordList = (ListView) findViewById(R.id.record_list);
+        mRecordList.setAdapter(mAdapter);
+        mRecordList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                mWeatherDao.deleteByKey(id);
+
+                mCursor.requery();
+                mAdapter.notifyDataSetChanged();
+
+                Toast.makeText(getApplicationContext(), "delete Weather, ID="+id, Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        getMenuInflater().inflate(R.menu.menu_main, menu);
+        return true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+
+        //noinspection SimplifiableIfStatement
+        if (id == R.id.action_settings) {
+            return true;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+}
diff --git a/MyDaoTest/src/main/res/layout/activity_main.xml b/MyDaoTest/src/main/res/layout/activity_main.xml
new file mode 100644
index 00000000..46c58828
--- /dev/null
+++ b/MyDaoTest/src/main/res/layout/activity_main.xml
@@ -0,0 +1,34 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context=".MainActivity">
+
+    <Button
+        android:id="@+id/insert_button"
+        android:text="@string/insert_weather_info"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" />
+
+    <TextView
+        android:id="@+id/delete_button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/delete_weather_info"
+        android:textSize="20sp"
+        android:layout_marginTop="10dp"
+        android:layout_marginBottom="10dp"
+        android:layout_below="@+id/insert_button" />
+
+    <ListView
+        android:id="@+id/record_list"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/delete_button" >
+    </ListView>
+</RelativeLayout>
diff --git a/MyDaoTest/src/main/res/menu/menu_main.xml b/MyDaoTest/src/main/res/menu/menu_main.xml
new file mode 100644
index 00000000..b1cb9081
--- /dev/null
+++ b/MyDaoTest/src/main/res/menu/menu_main.xml
@@ -0,0 +1,6 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools" tools:context=".MainActivity">
+    <item android:id="@+id/action_settings" android:title="@string/action_settings"
+        android:orderInCategory="100" app:showAsAction="never" />
+</menu>
diff --git a/MyDaoTest/src/main/res/mipmap-hdpi/ic_launcher.png b/MyDaoTest/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 00000000..cde69bcc
Binary files /dev/null and b/MyDaoTest/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/MyDaoTest/src/main/res/mipmap-mdpi/ic_launcher.png b/MyDaoTest/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 00000000..c133a0cb
Binary files /dev/null and b/MyDaoTest/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/MyDaoTest/src/main/res/mipmap-xhdpi/ic_launcher.png b/MyDaoTest/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..bfa42f0e
Binary files /dev/null and b/MyDaoTest/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/MyDaoTest/src/main/res/mipmap-xxhdpi/ic_launcher.png b/MyDaoTest/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/MyDaoTest/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/MyDaoTest/src/main/res/values-w820dp/dimens.xml b/MyDaoTest/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 00000000..63fc8164
--- /dev/null
+++ b/MyDaoTest/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/MyDaoTest/src/main/res/values/dimens.xml b/MyDaoTest/src/main/res/values/dimens.xml
new file mode 100644
index 00000000..47c82246
--- /dev/null
+++ b/MyDaoTest/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/MyDaoTest/src/main/res/values/strings.xml b/MyDaoTest/src/main/res/values/strings.xml
new file mode 100644
index 00000000..d94f6d1a
--- /dev/null
+++ b/MyDaoTest/src/main/res/values/strings.xml
@@ -0,0 +1,9 @@
+<resources>
+    <string name="app_name">MyDaoTest</string>
+
+    <string name="hello_world">Hello world!</string>
+    <string name="action_settings">Settings</string>
+
+    <string name="insert_weather_info">新增一条天气信息</string>
+    <string name="delete_weather_info">点击天气信息列表中的一条来删除！</string>
+</resources>
diff --git a/MyDaoTest/src/main/res/values/styles.xml b/MyDaoTest/src/main/res/values/styles.xml
new file mode 100644
index 00000000..d45f417e
--- /dev/null
+++ b/MyDaoTest/src/main/res/values/styles.xml
@@ -0,0 +1,10 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+    </style>
+
+    <style name="AppTheme2" parent="android:Theme.Holo">
+    </style>
+</resources>
diff --git a/settings.gradle b/settings.gradle
index 867d7835..288a09ba 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
 include 'DaoCore', 'DaoGenerator', 'DaoExampleGenerator', ':PerformanceTestOrmLite'
 include 'DaoTest' // Travis needs some Android setup for this
 include 'DaoTestGenerator'
-include ':DaoExample'
+include ':DaoExample', ':MyDaoTest'
