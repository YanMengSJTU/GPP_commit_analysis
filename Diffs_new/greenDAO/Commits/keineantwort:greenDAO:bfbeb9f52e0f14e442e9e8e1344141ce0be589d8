diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index 05725308..f4d7835f 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -280,6 +280,7 @@ protected void createEntityQueryBuilder() {
     Entity entity = this.schema.addEntity("EntityQueryBuilderEntity");
     entity.addIdProperty();
     entity.addStringProperty("text");
+    entity.addStringProperty("text2");
     entity.setEntityQueryBuilder(true);
   }
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
index 082bc1a7..f675631f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
@@ -8,6 +8,7 @@
 
     private Long id;
     private String text;
+    private String text2;
 
     public EntityQueryBuilderEntity() {
     }
@@ -16,9 +17,10 @@ public EntityQueryBuilderEntity(Long id) {
         this.id = id;
     }
 
-    public EntityQueryBuilderEntity(Long id, String text) {
+    public EntityQueryBuilderEntity(Long id, String text, String text2) {
         this.id = id;
         this.text = text;
+        this.text2 = text2;
     }
 
     public Long getId() {
@@ -37,4 +39,12 @@ public void setText(String text) {
         this.text = text;
     }
 
+    public String getText2() {
+        return text2;
+    }
+
+    public void setText2(String text2) {
+        this.text2 = text2;
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
index d166ad68..4cb9f40f 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
@@ -29,6 +29,7 @@
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
+        public final static Property Text2 = new Property(2, String.class, "text2", false, "TEXT2");
     };
 
 
@@ -45,7 +46,8 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "'ENTITY_QUERY_BUILDER_ENTITY' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'TEXT' TEXT);"); // 1: text
+                "'TEXT' TEXT," + // 1: text
+                "'TEXT2' TEXT);"); // 2: text2
     }
 
     /** Drops the underlying database table. */
@@ -68,6 +70,11 @@ protected void bindValues(SQLiteStatement stmt, EntityQueryBuilderEntity entity)
         if (text != null) {
             stmt.bindString(2, text);
         }
+ 
+        String text2 = entity.getText2();
+        if (text2 != null) {
+            stmt.bindString(3, text2);
+        }
     }
 
     /** @inheritdoc */
@@ -81,7 +88,8 @@ public Long readKey(Cursor cursor, int offset) {
     public EntityQueryBuilderEntity readEntity(Cursor cursor, int offset) {
         EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity( //
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // text
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
+            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // text2
         );
         return entity;
     }
@@ -91,6 +99,7 @@ public EntityQueryBuilderEntity readEntity(Cursor cursor, int offset) {
     public void readEntity(Cursor cursor, EntityQueryBuilderEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+        entity.setText2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
      }
     
     /** @inheritdoc */
@@ -144,6 +153,9 @@ public EntityQueryBuilderEntityQueryBuilder queryBuilder() {
             if (example.getText() != null) {
                 conditions.add(Properties.Text.eq(example.getText()));
             }
+            if (example.getText2() != null) {
+                conditions.add(Properties.Text2.eq(example.getText2()));
+            }
 
 
            
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
index e95ca09d..70d5e2af 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
@@ -1,21 +1,90 @@
 package de.greenrobot.daotest.entity;
 
-import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+import java.util.ArrayList;
+import java.util.List;
 
+import de.greenrobot.dao.test.AbstractDaoTestLongPk;
 import de.greenrobot.daotest.EntityQueryBuilderEntity;
 import de.greenrobot.daotest.EntityQueryBuilderEntityDao;
 
 public class EntityQueryBuilderEntityTest extends AbstractDaoTestLongPk<EntityQueryBuilderEntityDao, EntityQueryBuilderEntity> {
 
-    public EntityQueryBuilderEntityTest() {
-        super(EntityQueryBuilderEntityDao.class);
+  public EntityQueryBuilderEntityTest() {
+    super(EntityQueryBuilderEntityDao.class);
+  }
+
+  @Override
+  protected EntityQueryBuilderEntity createEntity(Long key) {
+    EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity();
+    entity.setId(key);
+    entity.setText("Entity " + key);
+    return entity;
+  }
+
+  public void testFindAll() {
+    this.dao.deleteAll();
+    List<EntityQueryBuilderEntity> list = new ArrayList<EntityQueryBuilderEntity>();
+    for (int i = 0; i < 15; i++) {
+      EntityQueryBuilderEntity entity = this.createEntity(this.nextPk());
+      list.add(entity);
     }
+    this.dao.insertInTx(list);
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findAll().list();
+    assertEquals(list.size(), loaded.size());
+  }
+
+  public void testFindByPk() {
+    this.dao.deleteAll();
+    Long nextPk = this.nextPk();
+    this.dao.insert(this.createEntity(nextPk));
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByPrimaryKey(nextPk).list();
+    assertEquals(1, loaded.size());
+    assertEquals(nextPk, loaded.get(0).getId());
+  }
+
+  public void testFindByExamplePk() {
+    this.dao.deleteAll();
+    Long nextPk = this.nextPk();
+    this.dao.insert(this.createEntity(nextPk));
 
-    @Override
-    protected EntityQueryBuilderEntity createEntity(Long key) {
-        EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity();
-        entity.setId(key);
-        return entity;
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByExample(new EntityQueryBuilderEntity(nextPk)).list();
+    assertEquals(1, loaded.size());
+    assertEquals(nextPk, loaded.get(0).getId());
+  }
+
+  public void testFindByExampleStringMultiResult() {
+    this.dao.deleteAll();
+    List<EntityQueryBuilderEntity> list = new ArrayList<EntityQueryBuilderEntity>();
+    for (int i = 0; i < 15; i++) {
+      EntityQueryBuilderEntity entity = this.createEntity(this.nextPk());
+      entity.setText2("text");
+      list.add(entity);
     }
+    this.dao.insertInTx(list);
+
+    EntityQueryBuilderEntity example = new EntityQueryBuilderEntity();
+    example.setText2("text");
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByExample(example).list();
+    assertEquals(list.size(), loaded.size());
+  }
+
+  public void testFindByExampleStringSingleResult() {
+    this.dao.deleteAll();
+    List<EntityQueryBuilderEntity> list = new ArrayList<EntityQueryBuilderEntity>();
+    Long lastPk = null;
+    for (int i = 0; i < 15; i++) {
+      EntityQueryBuilderEntity entity = this.createEntity(this.nextPk());
+      entity.setText2("text");
+      lastPk = entity.getId();
+      list.add(entity);
+    }
+    this.dao.insertInTx(list);
+
+    EntityQueryBuilderEntity example = new EntityQueryBuilderEntity(lastPk);
+    example.setText2("text");
+    List<EntityQueryBuilderEntity> loaded = this.dao.queryBuilder().findByExample(example).list();
+    assertEquals(1, loaded.size());
+    assertEquals(lastPk, loaded.get(0).getId());
+  }
 
 }
