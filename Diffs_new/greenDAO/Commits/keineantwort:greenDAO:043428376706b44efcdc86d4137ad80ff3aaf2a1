diff --git a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index 4e55a6ea..05725308 100644
--- a/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/DaoGenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -58,6 +58,7 @@ public TestDaoGenerator() {
     this.createStringKeyValue();
     this.createAutoincrement();
     this.createSqliteMaster();
+    this.createEntityQueryBuilder();
 
     this.createSchema2();
   }
@@ -275,4 +276,11 @@ protected void createSqliteMaster() {
     entity.addStringProperty("sql");
   }
 
+  protected void createEntityQueryBuilder() {
+    Entity entity = this.schema.addEntity("EntityQueryBuilderEntity");
+    entity.addIdProperty();
+    entity.addStringProperty("text");
+    entity.setEntityQueryBuilder(true);
+  }
+
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 6d3cb347..5e4d36a3 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -24,7 +24,7 @@ package ${entity.javaPackageDao};
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
 import java.util.List;
 </#if>
-<#if entity.toOneRelations?has_content>
+<#if entity.toOneRelations?has_content || entity.hasEntityQueryBuilder>
 import java.util.ArrayList;
 </#if>
 import android.database.Cursor;
@@ -37,11 +37,13 @@ import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
 </#if>
 import de.greenrobot.dao.internal.DaoConfig;
-<#if entity.incomingToManyRelations?has_content>
+<#if entity.incomingToManyRelations?has_content || entity.hasEntityQueryBuilder>
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 </#if>
-
+<#if entity.hasEntityQueryBuilder>
+import de.greenrobot.dao.query.WhereCondition;
+</#if>
 <#if entity.javaPackageDao != schema.defaultJavaPackageDao>
 import ${schema.defaultJavaPackageDao}.DaoSession;
 
@@ -50,8 +52,8 @@ import ${schema.defaultJavaPackageDao}.DaoSession;
 <#list entity.additionalImportsDao as additionalImport>
 import ${additionalImport};
 </#list>
-
 </#if>
+
 <#if entity.hasChildclassWithPackage>
 import ${entity.childclass};
 <#elseif entity.hasChildclassInEntityPackage>
@@ -305,4 +307,52 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
+<#if entity.hasEntityQueryBuilder>
+    public ${entity.referencedClassName}QueryBuilder queryBuilder() {
+      return new ${entity.referencedClassName}QueryBuilder(this);
+    }
+
+    public static class ${entity.referencedClassName}QueryBuilder extends QueryBuilder<${entity.referencedClassName}> {
+        ${entity.referencedClassName}QueryBuilder(AbstractDao<${entity.referencedClassName}, ?> dao) {
+            super(dao);
+        }
+        
+        public Query<${entity.referencedClassName}> findByPrimaryKey(${entity.pkProperty.propertyType} pk) {
+            this.where(Properties.${entity.pkProperty.propertyName?cap_first}.eq(pk));
+            return this.build();
+        }
+        
+        public Query<${entity.referencedClassName}> findAll() {
+            return this.build();
+        }
+        
+        public Query<${entity.referencedClassName}> findByExample(${entity.referencedClassName} example) { 
+            if(example.get${entity.pkProperty.propertyName?cap_first}() != null) {
+                return findByPrimaryKey(example.get${entity.pkProperty.propertyName?cap_first}());
+            }
+        	
+            ArrayList<WhereCondition> conditions = new ArrayList<WhereCondition>();
+
+<#list entity.properties as property>
+  <#if !property.primaryKey>
+            if (example.get${property.propertyName?cap_first}() != null) {
+                conditions.add(Properties.${property.propertyName?cap_first}.eq(example.get${property.propertyName?cap_first}()));
+            }
+  </#if>
+</#list>
+
+
+           
+            if (conditions.isEmpty()) {
+                throw new IllegalArgumentException("No example values given. Please provide at least one value!");
+            }
+
+            WhereCondition firstCondition = conditions.get(0);
+            conditions.remove(0);
+            this.where(firstCondition, conditions.toArray(new WhereCondition[0]));
+
+        	return this.build();
+        }
+    }
+</#if>
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 08698032..fa3559b3 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -85,6 +85,7 @@
   private boolean skipTableCreation;
   private Boolean active;
   private Boolean hasKeepSections;
+  private boolean entityQueryBuilder;
 
   Entity(Schema schema, String className) {
     this.schema = schema;
@@ -487,6 +488,14 @@ public boolean getHasChildclassInEntityPackage() {
     return this.getHasChildclass() && !this.childclass.contains(".");
   }
 
+  public boolean getHasEntityQueryBuilder() {
+    return this.entityQueryBuilder;
+  }
+
+  public void setEntityQueryBuilder(boolean entityQueryBuilder) {
+    this.entityQueryBuilder = entityQueryBuilder;
+  }
+
   void init2ndPass() {
     this.init2nPassNamesWithDefaults();
 
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index f959538d..4abe6a70 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -24,6 +24,7 @@
 import de.greenrobot.daotest.StringKeyValueEntityDao;
 import de.greenrobot.daotest.AutoincrementEntityDao;
 import de.greenrobot.daotest.SqliteMasterDao;
+import de.greenrobot.daotest.EntityQueryBuilderEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -49,6 +50,7 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         ChildclassEntityDao.createTable(db, ifNotExists);
         StringKeyValueEntityDao.createTable(db, ifNotExists);
         AutoincrementEntityDao.createTable(db, ifNotExists);
+        EntityQueryBuilderEntityDao.createTable(db, ifNotExists);
     }
     
     /** Drops underlying database table using DAOs. */
@@ -68,6 +70,7 @@ public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         ChildclassEntityDao.dropTable(db, ifExists);
         StringKeyValueEntityDao.dropTable(db, ifExists);
         AutoincrementEntityDao.dropTable(db, ifExists);
+        EntityQueryBuilderEntityDao.dropTable(db, ifExists);
     }
     
     public static abstract class OpenHelper extends SQLiteOpenHelper {
@@ -115,6 +118,7 @@ public DaoMaster(SQLiteDatabase db) {
         registerDaoClass(StringKeyValueEntityDao.class);
         registerDaoClass(AutoincrementEntityDao.class);
         registerDaoClass(SqliteMasterDao.class);
+        registerDaoClass(EntityQueryBuilderEntityDao.class);
     }
     
     public DaoSession newSession() {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
index d0c0853a..4186c731 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoSession.java
@@ -25,6 +25,7 @@
 import de.greenrobot.daotest.StringKeyValueEntity;
 import de.greenrobot.daotest.AutoincrementEntity;
 import de.greenrobot.daotest.SqliteMaster;
+import de.greenrobot.daotest.EntityQueryBuilderEntity;
 
 import de.greenrobot.daotest.SimpleEntityDao;
 import de.greenrobot.daotest.SimpleEntityNotNullDao;
@@ -42,6 +43,7 @@
 import de.greenrobot.daotest.StringKeyValueEntityDao;
 import de.greenrobot.daotest.AutoincrementEntityDao;
 import de.greenrobot.daotest.SqliteMasterDao;
+import de.greenrobot.daotest.EntityQueryBuilderEntityDao;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 
@@ -68,6 +70,7 @@
     private final DaoConfig stringKeyValueEntityDaoConfig;
     private final DaoConfig autoincrementEntityDaoConfig;
     private final DaoConfig sqliteMasterDaoConfig;
+    private final DaoConfig entityQueryBuilderEntityDaoConfig;
 
     private final SimpleEntityDao simpleEntityDao;
     private final SimpleEntityNotNullDao simpleEntityNotNullDao;
@@ -85,6 +88,7 @@
     private final StringKeyValueEntityDao stringKeyValueEntityDao;
     private final AutoincrementEntityDao autoincrementEntityDao;
     private final SqliteMasterDao sqliteMasterDao;
+    private final EntityQueryBuilderEntityDao entityQueryBuilderEntityDao;
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
@@ -138,6 +142,9 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         sqliteMasterDaoConfig = daoConfigMap.get(SqliteMasterDao.class).clone();
         sqliteMasterDaoConfig.initIdentityScope(type);
 
+        entityQueryBuilderEntityDaoConfig = daoConfigMap.get(EntityQueryBuilderEntityDao.class).clone();
+        entityQueryBuilderEntityDaoConfig.initIdentityScope(type);
+
         simpleEntityDao = new SimpleEntityDao(simpleEntityDaoConfig, this);
         simpleEntityNotNullDao = new SimpleEntityNotNullDao(simpleEntityNotNullDaoConfig, this);
         testEntityDao = new TestEntityDao(testEntityDaoConfig, this);
@@ -154,6 +161,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         stringKeyValueEntityDao = new StringKeyValueEntityDao(stringKeyValueEntityDaoConfig, this);
         autoincrementEntityDao = new AutoincrementEntityDao(autoincrementEntityDaoConfig, this);
         sqliteMasterDao = new SqliteMasterDao(sqliteMasterDaoConfig, this);
+        entityQueryBuilderEntityDao = new EntityQueryBuilderEntityDao(entityQueryBuilderEntityDaoConfig, this);
 
         registerDao(SimpleEntity.class, simpleEntityDao);
         registerDao(SimpleEntityNotNull.class, simpleEntityNotNullDao);
@@ -171,6 +179,7 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         registerDao(StringKeyValueEntity.class, stringKeyValueEntityDao);
         registerDao(AutoincrementEntity.class, autoincrementEntityDao);
         registerDao(SqliteMaster.class, sqliteMasterDao);
+        registerDao(EntityQueryBuilderEntity.class, entityQueryBuilderEntityDao);
     }
     
     public void clear() {
@@ -190,6 +199,7 @@ public void clear() {
         stringKeyValueEntityDaoConfig.getIdentityScope().clear();
         autoincrementEntityDaoConfig.getIdentityScope().clear();
         sqliteMasterDaoConfig.getIdentityScope().clear();
+        entityQueryBuilderEntityDaoConfig.getIdentityScope().clear();
     }
 
     public SimpleEntityDao getSimpleEntityDao() {
@@ -256,4 +266,8 @@ public SqliteMasterDao getSqliteMasterDao() {
         return sqliteMasterDao;
     }
 
+    public EntityQueryBuilderEntityDao getEntityQueryBuilderEntityDao() {
+        return entityQueryBuilderEntityDao;
+    }
+
 }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
new file mode 100644
index 00000000..082bc1a7
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntity.java
@@ -0,0 +1,40 @@
+package de.greenrobot.daotest;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+/**
+ * Entity mapped to table ENTITY_QUERY_BUILDER_ENTITY.
+ */
+public class EntityQueryBuilderEntity {
+
+    private Long id;
+    private String text;
+
+    public EntityQueryBuilderEntity() {
+    }
+
+    public EntityQueryBuilderEntity(Long id) {
+        this.id = id;
+    }
+
+    public EntityQueryBuilderEntity(Long id, String text) {
+        this.id = id;
+        this.text = text;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getText() {
+        return text;
+    }
+
+    public void setText(String text) {
+        this.text = text;
+    }
+
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
new file mode 100644
index 00000000..d166ad68
--- /dev/null
+++ b/DaoTest/src-gen/de/greenrobot/daotest/EntityQueryBuilderEntityDao.java
@@ -0,0 +1,161 @@
+package de.greenrobot.daotest;
+
+import java.util.ArrayList;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.query.Query;
+import de.greenrobot.dao.query.QueryBuilder;
+import de.greenrobot.dao.query.WhereCondition;
+
+import de.greenrobot.daotest.EntityQueryBuilderEntity;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table ENTITY_QUERY_BUILDER_ENTITY.
+*/
+public class EntityQueryBuilderEntityDao extends AbstractDao<EntityQueryBuilderEntity, Long> {
+
+    public static final String TABLENAME = "ENTITY_QUERY_BUILDER_ENTITY";
+
+    /**
+     * Properties of entity EntityQueryBuilderEntity.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
+    };
+
+
+    public EntityQueryBuilderEntityDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public EntityQueryBuilderEntityDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_QUERY_BUILDER_ENTITY' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'TEXT' TEXT);"); // 1: text
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_QUERY_BUILDER_ENTITY'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, EntityQueryBuilderEntity entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String text = entity.getText();
+        if (text != null) {
+            stmt.bindString(2, text);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public EntityQueryBuilderEntity readEntity(Cursor cursor, int offset) {
+        EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // text
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, EntityQueryBuilderEntity entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(EntityQueryBuilderEntity entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(EntityQueryBuilderEntity entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+    public EntityQueryBuilderEntityQueryBuilder queryBuilder() {
+      return new EntityQueryBuilderEntityQueryBuilder(this);
+    }
+
+    public static class EntityQueryBuilderEntityQueryBuilder extends QueryBuilder<EntityQueryBuilderEntity> {
+        EntityQueryBuilderEntityQueryBuilder(AbstractDao<EntityQueryBuilderEntity, ?> dao) {
+            super(dao);
+        }
+        
+        public Query<EntityQueryBuilderEntity> findByPrimaryKey(Long pk) {
+            this.where(Properties.Id.eq(pk));
+            return this.build();
+        }
+        
+        public Query<EntityQueryBuilderEntity> findAll() {
+            return this.build();
+        }
+        
+        public Query<EntityQueryBuilderEntity> findByExample(EntityQueryBuilderEntity example) { 
+            if(example.getId() != null) {
+                return findByPrimaryKey(example.getId());
+            }
+        	
+            ArrayList<WhereCondition> conditions = new ArrayList<WhereCondition>();
+
+            if (example.getText() != null) {
+                conditions.add(Properties.Text.eq(example.getText()));
+            }
+
+
+           
+            if (conditions.isEmpty()) {
+                throw new IllegalArgumentException("No example values given. Please provide at least one value!");
+            }
+
+            WhereCondition firstCondition = conditions.get(0);
+            conditions.remove(0);
+            this.where(firstCondition, conditions.toArray(new WhereCondition[0]));
+
+        	return this.build();
+        }
+    }
+}
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
index f4748a52..a1faad37 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
@@ -10,7 +10,6 @@
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
 import de.greenrobot.dao.internal.DaoConfig;
-
 import de.greenrobot.daotest2.dao.DaoSession;
 
 import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
index 3ff139b3..5938da1e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
@@ -7,9 +7,9 @@
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.DaoConfig;
-
 import de.greenrobot.daotest2.dao.DaoSession;
 
+
 import de.greenrobot.daotest2.to1_specialentity.ToOneTarget2;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
new file mode 100644
index 00000000..e95ca09d
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/EntityQueryBuilderEntityTest.java
@@ -0,0 +1,21 @@
+package de.greenrobot.daotest.entity;
+
+import de.greenrobot.dao.test.AbstractDaoTestLongPk;
+
+import de.greenrobot.daotest.EntityQueryBuilderEntity;
+import de.greenrobot.daotest.EntityQueryBuilderEntityDao;
+
+public class EntityQueryBuilderEntityTest extends AbstractDaoTestLongPk<EntityQueryBuilderEntityDao, EntityQueryBuilderEntity> {
+
+    public EntityQueryBuilderEntityTest() {
+        super(EntityQueryBuilderEntityDao.class);
+    }
+
+    @Override
+    protected EntityQueryBuilderEntity createEntity(Long key) {
+        EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity();
+        entity.setId(key);
+        return entity;
+    }
+
+}
