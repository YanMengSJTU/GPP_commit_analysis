diff --git a/DaoGenerator/src-template/dao-deep.ftl b/DaoGenerator/src-template/dao-deep.ftl
index eee5dc97..9707cf10 100644
--- a/DaoGenerator/src-template/dao-deep.ftl
+++ b/DaoGenerator/src-template/dao-deep.ftl
@@ -118,7 +118,6 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
             cursor.close();
         }
     }
-    
 
     /** A raw-style query where you can pass any WHERE clause and arguments. */
     public List<${entity.className}> queryDeep(String where, String... selectionArg) {
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..072e3bd2 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -86,10 +86,10 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
     public ${entity.classNameDao}(DaoConfig config) {
         super(config);
     }
-    
+
     public ${entity.classNameDao}(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
-<#if entity.active>        
+<#if entity.active>
         this.daoSession = daoSession;
 </#if>
     }
@@ -109,7 +109,7 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
                 " (<#list index.properties 
 as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#list>
-</#if>         
+</#if>
     }
 
     /** Drops the underlying database table. */
@@ -177,8 +177,8 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
             entity.pkProperty.propertyType == "Date">)</#if>;
 <#else>
         return null;
-</#if>  
-    }    
+</#if>
+    }
 
     /** @inheritdoc */
     @Override
@@ -191,8 +191,8 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     </#if>        builder.set${property.propertyName?cap_first}(cursor.get${toCursorType[property.propertyType]}(offset + ${property_index}));
 <#if !property.notNull>
         }
-</#if>        
-</#list>        
+</#if>
+</#list>
         return builder.build();
 <#elseif entity.constructors>
 <#--
@@ -205,7 +205,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
-</#list>        
+</#list>
         );
         return entity;
 <#else>
@@ -217,7 +217,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         return entity;
 </#if>
     }
-     
+
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, ${entity.className} entity, int offset) {
@@ -233,7 +233,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#list>
 </#if>
      }
-    
+
     /** @inheritdoc */
     @Override
     protected ${entity.pkType} updateKeyAfterInsert(${entity.className} entity, long rowId) {
@@ -251,27 +251,26 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         return null;
 </#if>
     }
-    
+
     /** @inheritdoc */
     @Override
     public ${entity.pkType} getKey(${entity.className} entity) {
 <#if entity.pkProperty??>
-        if(entity != null) {
+        if (entity != null) {
             return entity.get${entity.pkProperty.propertyName?cap_first}();
-        } else {
-            return null;
         }
+        return null;
 <#else>
         return null;
-</#if>    
+</#if>
     }
 
     /** @inheritdoc */
-    @Override    
+    @Override
     protected boolean isEntityUpdateable() {
         return ${(!entity.protobuf)?string};
     }
-    
+
 <#list entity.incomingToManyRelations as toMany>
     /** Internal query to resolve the "${toMany.name}" to-many relationship of ${toMany.sourceEntity.className}. */
     public List<${toMany.targetEntity.className}> _query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
@@ -295,7 +294,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         return query.list();
     }
 
-</#list>   
+</#list>
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index a9b90a09..d16dcb0f 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -48,7 +48,7 @@ import ${additionalImport};
  * Entity mapped to table ${entity.tableName}.
  */
 public class ${entity.className}<#if
-entity.superclass?has_content> extends ${entity.superclass} </#if><#if
+entity.superclass?has_content> extends ${entity.superclass}</#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 
@@ -187,7 +187,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 </#if>
         synchronized (this) {
             this.${toOne.name} = ${toOne.name};
-<#if toOne.useFkProperty>        
+<#if toOne.useFkProperty>
             ${toOne.fkProperties[0].propertyName} = <#if !toOne.fkProperties[0].notNull>${toOne.name} == null ? null : </#if>${toOne.name}.get${toOne.targetEntity.pkProperty.propertyName?cap_first}();
             ${toOne.name}__resolvedKey = ${toOne.fkProperties[0].propertyName};
 <#else>
@@ -237,7 +237,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.delete(this);
     }
 
@@ -245,7 +245,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.update(this);
     }
 
@@ -253,7 +253,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.refresh(this);
     }
 
