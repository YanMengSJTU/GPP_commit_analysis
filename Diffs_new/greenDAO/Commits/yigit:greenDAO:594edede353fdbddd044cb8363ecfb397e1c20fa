diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index e9466fd2..e116ad15 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -665,6 +665,10 @@ public SQLiteDatabase getDatabase() {
     /** Binds the entity's values to the statement. Make sure to synchronize the statement outside of the method. */
     abstract protected void bindValues(SQLiteStatement stmt, T entity);
 
+    /**
+     * Updates the entity's key if possible (only for Long PKs currently). This method must always return the entity's
+     * key regardless of whether the key existed before or not.
+     */
     abstract protected K updateKeyAfterInsert(T entity, long rowId);
 
     /**
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
index 8b7ef40b..85a8dca9 100644
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
+++ b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
@@ -65,16 +65,15 @@ protected void setUp() {
         if (pkColumn == null) {
             throw new RuntimeException("Test does not work without a PK column");
         }
-
     }
 
     public void testInsertAndLoad() {
         K pk = nextPk();
         T entity = createEntity(pk);
         dao.insert(entity);
+        assertEquals(pk, daoAccess.getKey(entity));
         T entity2 = dao.load(pk);
         assertNotNull(entity2);
-        // assertNotSame(entity, entity2); // Unless we'll cache stuff one day --> we do now
         assertEquals(daoAccess.getKey(entity), daoAccess.getKey(entity2));
     }
 
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 18f09cc2..fafb977a 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -233,18 +233,16 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 </#if>
      }
     
+    /** @inheritdoc */
     @Override
     protected ${entity.pkType} updateKeyAfterInsert(${entity.className} entity, long rowId) {
-<#if entity.protobuf>
-        // Do nothing: Cannot update protobuf entities after insert
-        return null;
-<#else>
 <#if entity.pkProperty?? && entity.pkProperty.propertyType == "Long">
+<#if !entity.protobuf>
         entity.set${entity.pkProperty.propertyName?cap_first}(rowId);
+</#if>
         return rowId;
 <#else>
-        return null;
-</#if>
+        return entity.get${entity.pkProperty.propertyName?cap_first}();
 </#if>
     }
     
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index 8d1be98b..f54d05e8 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -210,7 +210,7 @@ void init2ndPass() {
 
     private void initConstraint() {
         StringBuilder constraintBuilder = new StringBuilder();
-        if (isPrimaryKey()) {
+        if (primaryKey) {
             constraintBuilder.append("PRIMARY KEY");
             if (pkAsc) {
                 constraintBuilder.append(" ASC");
@@ -222,7 +222,9 @@ private void initConstraint() {
                 constraintBuilder.append(" AUTOINCREMENT");
             }
         }
-        if (notNull) {
+        // Always have String PKs NOT NULL because SQLite is pretty strange in this respect:
+        // One could insert multiple rows with NULL PKs
+        if (notNull || (primaryKey && propertyType == PropertyType.String)) {
             constraintBuilder.append(" NOT NULL");
         }
         if (unique) {
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
index 1cd9b718..a1dc4a37 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AbcdefEntityDao.java
@@ -179,6 +179,7 @@ public void readEntity(Cursor cursor, AbcdefEntity entity, int offset) {
         entity.setK(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(AbcdefEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
index 1bc63a31..7ffdaad7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AnActiveEntityDao.java
@@ -98,6 +98,7 @@ public void readEntity(Cursor cursor, AnActiveEntity entity, int offset) {
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(AnActiveEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
index b8f79a67..13d46d3b 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/AutoincrementEntityDao.java
@@ -80,6 +80,7 @@ public void readEntity(Cursor cursor, AutoincrementEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(AutoincrementEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
index 9d2b32d9..dff3b23a 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DateEntityDao.java
@@ -94,6 +94,7 @@ public void readEntity(Cursor cursor, DateEntity entity, int offset) {
         entity.setDateNotNull(new java.util.Date(cursor.getLong(offset + 2)));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(DateEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
index 0a0dbbb0..a9dd00ea 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ExtendsImplementsEntityDao.java
@@ -89,6 +89,7 @@ public void readEntity(Cursor cursor, ExtendsImplementsEntity entity, int offset
         entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ExtendsImplementsEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
index 34eb3962..288f0e30 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntityDao.java
@@ -126,6 +126,7 @@ public void readEntity(Cursor cursor, RelationEntity entity, int offset) {
         entity.setSimpleString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(RelationEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
index 949636f5..2eb9012e 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityDao.java
@@ -161,6 +161,7 @@ public void readEntity(Cursor cursor, SimpleEntity entity, int offset) {
         entity.setSimpleByteArray(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(SimpleEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
index 0b9ae712..e8a94f95 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SimpleEntityNotNullDao.java
@@ -121,6 +121,7 @@ public void readEntity(Cursor cursor, SimpleEntityNotNull entity, int offset) {
         entity.setSimpleByteArray(cursor.getBlob(offset + 9));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(SimpleEntityNotNull entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
index 7ea19c85..7341acee 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/SpecialNamesEntityDao.java
@@ -161,6 +161,7 @@ public void readEntity(Cursor cursor, SpecialNamesEntity entity, int offset) {
         entity.setOrder(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(SpecialNamesEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
index 7394c87b..ba5910d6 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/StringKeyValueEntityDao.java
@@ -39,7 +39,7 @@ public StringKeyValueEntityDao(DaoConfig config, DaoSession daoSession) {
     /** Creates the underlying database table. */
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'STRING_KEY_VALUE_ENTITY' (" + //
-                "'KEY' TEXT PRIMARY KEY ," + // 0: key
+                "'KEY' TEXT PRIMARY KEY NOT NULL ," + // 0: key
                 "'VALUE' TEXT);"; // 1: value
         db.execSQL(sql);
     }
@@ -89,9 +89,10 @@ public void readEntity(Cursor cursor, StringKeyValueEntity entity, int offset) {
         entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected String updateKeyAfterInsert(StringKeyValueEntity entity, long rowId) {
-        return null;
+        return entity.getKey();
     }
     
     /** @inheritdoc */
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
index 202a6bf7..96a1f4c7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
@@ -149,6 +149,7 @@ public void readEntity(Cursor cursor, TestEntity entity, int offset) {
         entity.setSimpleBoolean(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(TestEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
index 2fede0f7..a4cb13d2 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyEntityDao.java
@@ -98,6 +98,7 @@ public void readEntity(Cursor cursor, ToManyEntity entity, int offset) {
         entity.setSourceJoinProperty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToManyEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
index 5482782b..0cfac6a7 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/ToManyTargetEntityDao.java
@@ -114,6 +114,7 @@ public void readEntity(Cursor cursor, ToManyTargetEntity entity, int offset) {
         entity.setTargetJoinProperty(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToManyTargetEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
index 8f51d6d5..44c530b2 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntityDao.java
@@ -104,6 +104,7 @@ public void readEntity(Cursor cursor, TreeEntity entity, int offset) {
         entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(TreeEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
index 3d4dc62b..f66d7188 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/KeepEntityDao.java
@@ -80,6 +80,7 @@ public void readEntity(Cursor cursor, KeepEntity entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(KeepEntity entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
index 7a354b7b..3d1c8b69 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/ToManyTarget2Dao.java
@@ -93,6 +93,7 @@ public void readEntity(Cursor cursor, ToManyTarget2 entity, int offset) {
         entity.setFkId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToManyTarget2 entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
index f2e239f8..8f33d910 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialdao/RelationSource2Dao.java
@@ -105,6 +105,7 @@ public void readEntity(Cursor cursor, RelationSource2 entity, int offset) {
         entity.setToOneId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(RelationSource2 entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
index e8fe01d7..e5f5c101 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/to1_specialdao/ToOneTarget2Dao.java
@@ -82,6 +82,7 @@ public void readEntity(Cursor cursor, ToOneTarget2 entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
      }
     
+    /** @inheritdoc */
     @Override
     protected Long updateKeyAfterInsert(ToOneTarget2 entity, long rowId) {
         entity.setId(rowId);
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java b/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
new file mode 100644
index 00000000..847797d7
--- /dev/null
+++ b/DaoTest/src/de/greenrobot/daotest/entity/StringKeyValueEntityIdentityScopeTest.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * This file is part of greenDAO Generator.
+ * 
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.greenrobot.daotest.entity;
+
+import de.greenrobot.dao.IdentityScopeObject;
+import de.greenrobot.daotest.StringKeyValueEntity;
+
+public class StringKeyValueEntityIdentityScopeTest extends StringKeyValueEntityTest {
+    @Override
+    protected void setUp() {
+        setIdentityScopeBeforeSetUp(new IdentityScopeObject<String, StringKeyValueEntity>());
+        super.setUp();
+    }
+
+    public void testLoadIdScope() {
+        StringKeyValueEntity entity = createEntityWithRandomPk();
+        dao.insert(entity);
+        StringKeyValueEntity entity2 = dao.load(entity.getKey());
+        StringKeyValueEntity entity3 = dao.load(entity.getKey());
+
+        assertSame(entity, entity2);
+        assertSame(entity2, entity3);
+    }
+
+    public void testDetach() {
+        StringKeyValueEntity entity = createEntityWithRandomPk();
+        dao.insert(entity);
+        dao.detach(entity);
+        StringKeyValueEntity entity2 = dao.load(entity.getKey());
+        dao.detach(entity2);
+        StringKeyValueEntity entity3 = dao.load(entity.getKey());
+
+        assertNotSame(entity, entity2);
+        assertNotSame(entity2, entity3);
+        assertNotSame(entity, entity3);
+    }
+
+    public void testDetachOther() {
+        StringKeyValueEntity entity = createEntityWithRandomPk();
+        dao.insert(entity);
+        dao.detach(entity);
+        StringKeyValueEntity entity2 = dao.load(entity.getKey());
+        dao.detach(entity);
+        StringKeyValueEntity entity3 = dao.load(entity.getKey());
+
+        assertSame(entity2, entity3);
+    }
+
+    public void testLoadAllScope() {
+        StringKeyValueEntity entity = createEntityWithRandomPk();
+        dao.insert(entity);
+        StringKeyValueEntity entity2 = dao.loadAll().get(0);
+        StringKeyValueEntity entity3 = dao.loadAll().get(0);
+
+        assertSame(entity, entity2);
+        assertSame(entity2, entity3);
+    }
+
+}
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestIdentityScope.java b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
similarity index 94%
rename from DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestIdentityScope.java
rename to DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
index 8e5b9c03..04b4c321 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/TestEntityTestIdentityScope.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/TestEntityIdentityScopeTest.java
@@ -20,7 +20,7 @@
 import de.greenrobot.dao.IdentityScopeLong;
 import de.greenrobot.daotest.TestEntity;
 
-public class TestEntityTestIdentityScope extends TestEntityTest {
+public class TestEntityIdentityScopeTest extends TestEntityTest {
     @Override
     protected void setUp() {
         setIdentityScopeBeforeSetUp(new IdentityScopeLong<TestEntity>());
diff --git a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java b/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
index 0767e1c3..7b6be735 100644
--- a/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
+++ b/DaoTest/src/de/greenrobot/daotest/performance/PerformanceTestNotNull.java
@@ -27,7 +27,6 @@
 
     public PerformanceTestNotNull() {
         super(SimpleEntityNotNullDao.class);
-        // setIdentityScopeBeforeSetUp(new de.greenrobot.dao.IdentityScope<Long, SimpleEntityNotNull>());
     }
 
     @Override
