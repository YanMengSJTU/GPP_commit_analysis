diff --git a/DaoGenerator/src-template/entity-parcelable.ftl b/DaoGenerator/src-template/entity-parcelable.ftl
new file mode 100644
index 00000000..c82e8e8e
--- /dev/null
+++ b/DaoGenerator/src-template/entity-parcelable.ftl
@@ -0,0 +1,67 @@
+<#assign toParcelType = {"Boolean":"Byte", "Byte":"Short", "Short":"Int", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"ByteArray" }/>
+ 
+ <#--
+##########################################
+########## Parcelable operations ######
+##########################################
+-->
+<#if entity.parceable>
+
+//  @Override
+  public int describeContents() {
+    return 0;
+  }
+    
+//  @Override
+  public void writeToParcel(Parcel dest, int flags) {
+<#list entity.properties as property>
+   <#if toParcelType[property.propertyType]??>
+      <#if !property.notNull>if (${property.propertyName}!=null) {
+        dest.writeByte((byte)1);
+      </#if><#if  property.propertyType == "Boolean">
+        dest.write${toParcelType[property.propertyType]}((byte)(${property.propertyName}  ? 1 : 0)); <#else
+      > dest.write${toParcelType[property.propertyType]}(${property.propertyName});</#if> 
+      <#if !property.notNull>} else { dest.writeByte((byte)0); }</#if> 
+   <#elseif  property.propertyType == "Date">
+      if (${property.propertyName} != null) {
+        dest.writeByte((byte)(1));
+        dest.writeLong(${property.propertyName}.getTime());
+      } else {
+         dest.writeByte((byte)(0));
+      } <#else>
+        dest.writeParcelable( ${property.propertyName}, flags);
+      </#if>  
+   </#list>
+  }
+ 
+  public static final Parcelable.Creator<${entity.className}> CREATOR = new Parcelable.Creator<${entity.className}>() {
+        public ${entity.className} createFromParcel(Parcel in) {
+            ${entity.className} entity =  new ${entity.className}();
+ <#list entity.properties as property> 
+    <#if toParcelType[property.propertyType]?? && property.notNull>
+            entity.${property.propertyName} = in.read${toParcelType[property.propertyType]}() <#if  property.propertyType == "Boolean"> == 1 </#if>;<#elseif 
+    toParcelType[property.propertyType]??>
+            if (in.readByte() == 1) {
+                 entity.${property.propertyName} = in.read${toParcelType[property.propertyType]}() <#if  property.propertyType == "Boolean"> == 1 </#if>;
+            } else {
+                 entity.${property.propertyName} = null;
+            }  <#elseif 
+    property.propertyType == "Date">
+            if (in.readByte() == 1) {
+              entity.${property.propertyName} = new ${property.javaType}(in.readLong());
+            } else {
+              entity.${property.propertyName} = null;
+            } <#else>
+            ${property.javaType}.CREATOR.createFromParcel(in);
+    </#if> 
+ 
+</#list>
+            return entity;
+        }
+
+        public ${entity.className}[] newArray(int size) {
+            return new ${entity.className}[size];
+        }
+    };
+    
+</#if>     
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 1ece81b8..944a1172 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -18,8 +18,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
-<#assign toParcelType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
-<#assign toParcelType = {"Boolean":"Byte", "Byte":"Short", "Short":"Int", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"ByteArray" }/>
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
 package ${entity.javaPackage};
 
@@ -266,66 +265,11 @@ ${keepMethods!}    // KEEP METHODS END
 
 <#--
 ##########################################
-########## Parcelable operations ######
+########## Parcelable operations    ######
 ##########################################
 -->
-<#if entity.parceable>
-
-//  @Override
-  public int describeContents() {
-    return 0;
-  }
-    
-//  @Override
-  public void writeToParcel(Parcel dest, int flags) {
-<#list entity.properties as property>
-   <#if toParcelType[property.propertyType]??>
-      <#if !property.notNull>if (${property.propertyName}!=null) {
-        dest.writeByte((byte)1);
-      </#if><#if  property.propertyType == "Boolean">
-        dest.write${toParcelType[property.propertyType]}((byte)(${property.propertyName}  ? 1 : 0)); <#else
-      > dest.write${toParcelType[property.propertyType]}(${property.propertyName});</#if> 
-      <#if !property.notNull>} else { dest.writeByte((byte)0); }</#if> 
-   <#elseif  property.propertyType == "Date">
-      if (${property.propertyName} != null) {
-        dest.writeByte((byte)(1));
-        dest.writeLong(${property.propertyName}.getTime());
-      } else {
-         dest.writeByte((byte)(0));
-      } <#else>
-        dest.writeParcelable( ${property.propertyName}, flags);
-      </#if>  
-   </#list>
-  }
- 
-  public static final Parcelable.Creator<${entity.className}> CREATOR = new Parcelable.Creator<${entity.className}>() {
-        public ${entity.className} createFromParcel(Parcel in) {
-            ${entity.className} entity =  new ${entity.className}();
- <#list entity.properties as property> 
-    <#if toParcelType[property.propertyType]?? && property.notNull>
-            entity.${property.propertyName} = in.read${toParcelType[property.propertyType]}() <#if  property.propertyType == "Boolean"> == 1 </#if>;<#elseif 
-    toParcelType[property.propertyType]??>
-            if (in.readByte() == 1) {
-                 entity.${property.propertyName} = in.read${toParcelType[property.propertyType]}() <#if  property.propertyType == "Boolean"> == 1 </#if>;
-            } else {
-                 entity.${property.propertyName} = null;
-            }  <#elseif 
-    property.propertyType == "Date">
-            if (in.readByte() == 1) {
-              entity.${property.propertyName} = new ${property.javaType}(in.readLong());
-            } else {
-              entity.${property.propertyName} = null;
-            } <#else>
-            ${property.javaType}.CREATOR.createFromParcel(in);
-    </#if> 
- 
-</#list>
-            return entity;
-        }
-
-        public ${entity.className}[] newArray(int size) {
-            return new ${entity.className}[size];
-        }
-    };
+<#if entity.parceable> 
+    <#include "entity-parcelable.ftl"> 
 </#if>    
+
 }
