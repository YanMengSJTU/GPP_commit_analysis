diff --git a/DaoCore/src/de/greenrobot/dao/query/FieldType.java b/DaoCore/src/de/greenrobot/dao/query/FieldType.java
index 0fa03a2e..3000d441 100644
--- a/DaoCore/src/de/greenrobot/dao/query/FieldType.java
+++ b/DaoCore/src/de/greenrobot/dao/query/FieldType.java
@@ -5,5 +5,6 @@
 	Long,
 	Int,
 	Double,
-	ByteArray
+	ByteArray,
+	Boolean
 }
diff --git a/DaoCore/src/de/greenrobot/dao/query/Query.java b/DaoCore/src/de/greenrobot/dao/query/Query.java
index e295360f..5e65fac4 100644
--- a/DaoCore/src/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/de/greenrobot/dao/query/Query.java
@@ -263,6 +263,34 @@ public void setOffset(int offset) {
     	return typedValues;
     }
     
+    /**
+     * Returns a boolean field of a list of results
+     * @param property		The property to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<Boolean> listOfFieldAsBoolean(Property property) {
+    	return listOfFieldAsBoolean(property.columnName);
+    }
+    
+    /**
+     * Returns boolean field of a list of results
+     * @param columnName	The column name to retrieve
+     * @param fieldType		The type of the property
+     * @return				The values of the property for all matches
+     */
+    public List<Boolean> listOfFieldAsBoolean(String columnName) {
+    	List<Object> values = listOfField(columnName, FieldType.Boolean);
+    	
+    	List<Boolean> typedValues = new ArrayList<Boolean>();
+    	
+    	for(Object value: values) {
+    		typedValues.add((Boolean)value);
+    	}
+    	
+    	return typedValues;
+    }
+    
     /**
      * Returns a single field of a single result as a string
      * @param property		The property to retrieve
@@ -308,6 +336,15 @@ public Long uniqueFieldAsLong(Property property) {
     	return (Byte[])uniqueField(property, FieldType.ByteArray);
     }
     
+    /**
+     * Returns a single field of a single result as a boolean
+     * @param property		The property to retrieve
+     * @return				The value of the property
+     */
+    public Boolean uniqueFieldAsBoolean(Property property) {
+        return (Boolean)uniqueField(property, FieldType.Boolean);
+    }
+    
     /**
      * Returns a single field of a single result
      * @param property		The property to retrieve
@@ -378,6 +415,8 @@ private Object getValueFromCursor(Cursor cursor, int columnIndex, FieldType fiel
 	    		return cursor.getInt(columnIndex);
 	    	case Long:
 	    		return cursor.getLong(columnIndex);
+	    	case Boolean:
+	    		return cursor.getInt(columnIndex) == 1;
 	    	}
     	
     	return null;
diff --git a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
index cced888b..5762ba8e 100644
--- a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
@@ -612,6 +612,18 @@ public Long uniqueFieldAsLong(Property property) {
     public Byte[] uniqueFieldAsByteArray(Property property) {
         return select(property).build().uniqueFieldAsByteArray(property);
     }
+    
+    public List<Boolean> listOfFieldAsBoolean(Property property) {
+        return select(property).build().listOfFieldAsBoolean(property);
+    }
+    
+    public List<Boolean> listOfFieldAsBoolean(String columnName) {
+        return select(columnName).build().listOfFieldAsBoolean(columnName);
+    }
+    
+    public Boolean uniqueFieldAsBoolean(Property property) {
+        return select(property).build().uniqueFieldAsBoolean(property);
+    }
 
     /**
      * Shorthand for {@link QueryBuilder#build() build()}.{@link Query#listLazy() listLazy()}; see
