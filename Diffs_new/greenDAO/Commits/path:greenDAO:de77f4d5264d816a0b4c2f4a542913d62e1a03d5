diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index 28267603..4c8a174a 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -12,7 +12,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.8+'
+        classpath 'com.android.tools.build:gradle:0.8.+'
         classpath 'com.path.android.build:gradle:1.3.+'
     }
 }
@@ -23,7 +23,7 @@ apply plugin: 'pathmaven'
 pathmaven {
     groupId "de.greenrobot.dao"
     artifactId "generator-path"
-    version "1.3"
+    version "1.4"
 }
 
 repositories {
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 1d862671..e80a15fc 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -17,8 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "StringList" : "String"} />
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "StringList", "String"} />
+<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "StringList" : "String", "Enum" : "Long", "Class" : "Blob"} />
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long", "StringList", "String", "Enum":"Int", "Class" : "Blob"} />
 
 <#assign serializers = {"StringList", "serializeStringList"} />
 <#assign deSerializers = {"StringList", "deserializeStringList"} />
@@ -68,6 +68,13 @@ import ${entity.javaPackage}.${entity.className};
 import ${entity.javaPackage}.${entity.className}.Builder;
 </#if>
 
+import com.path.base.util.json.JsonUtil;
+<#list entity.properties as property>
+    <#list property.imports as import>
+import ${import};
+    </#list>
+</#list>
+
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /**
  * DAO for table ${entity.tableName}.
@@ -85,7 +92,13 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
         public final static Property ${property.propertyName?cap_first} =<#rt>
         <@compress single_line=true>
         new Property(${property_index},
+        <#if property.propertyType == "Enum">
+        <@print_class "Integer"/>,
+        <#elseif property.propertyType == "Class">
+        <@print_class "byte[]"/>,
+        <#else>
         <@print_class property.javaType/>,
+        </#if>
         "${property.propertyName}",
         ${property.primaryKey?string},
         "${property.columnName}");
@@ -147,22 +160,23 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if property.notNull || entity.protobuf>
 <#if entity.protobuf>
         if(entity.has${property.propertyName?cap_first}()) {
-    </#if>        stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, entity.get${property.propertyName?cap_first}()<#if
-     property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
+    </#if>        stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, entity.${property.propertyName}<#if
+     property.propertyType == "Boolean"> ? 1L: 0L</#if><#if property.propertyType == "Date">.getTime()</#if>);
 <#if entity.protobuf>
         }
 </#if>
 <#else> <#-- nullable, non-protobuff -->
-        ${property.javaType} ${property.propertyName} = entity.get${property.propertyName?cap_first}();
+        ${property.javaType} ${property.propertyName} = entity.${property.propertyName};
         if (${property.propertyName} != null) {
             <#if serializers[property.propertyType]?? >
             stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, ${serializers[property.propertyType]}(${property.propertyName}<#if
- property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>));
+ property.propertyType == "Boolean"> ? 1L: 0L</#if><#if property.propertyType == "Date">.getTime()</#if>));
             <#else>
-            stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, ${property.propertyName}<#if
- property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
+            stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, <#if
+ property.propertyType == "Class">de.greenrobot.dao.DbUtils.serializeObject(</#if>${property.propertyName}<#if property.propertyType == "Class">)</#if><#if
+ property.propertyType == "Boolean"> ? 1L: 0L</#if><#if property.propertyType == "Date">.getTime()</#if><#if
+ property.propertyType == "Enum">.ordinal()</#if>);
             </#if>
-
         }
 </#if>
 </#list>
@@ -224,24 +238,27 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#--
 ############################## readEntity non-protobuff, constructor ##############################
 -->
-        ${entity.className} entity = new ${entity.className}( //
+        return new ${entity.className}(
 <#list entity.properties as property>
 
-            <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#rt>
+            <#if !property.notNull>cursor.isNull(offset<#if property_index gt 0> + ${property_index}</#if>) ? null : </#if><#rt>
             <@compress single_line=true>
             <#if property.propertyType == "Byte">(byte) </#if>
             <#if deSerializers[property.propertyType]??>${deSerializers[property.propertyType]}(</#if>
             <#if property.propertyType == "Date">new java.util.Date(</#if>
-                cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})
+            <#if property.propertyType == "Enum">JsonUtil.parseEnum(</#if>
+            <#if property.propertyType == "Class">(${property.className})de.greenrobot.dao.DbUtils.deserializeObject(</#if>
+                cursor.get${toCursorType[property.propertyType]}(offset<#if property_index gt 0> + ${property_index}</#if>)
             <#if property.propertyType == "Boolean"> != 0</#if>
             <#if property.propertyType == "Date">)</#if>
+            <#if property.propertyType == "Enum">, ${property.className}.class)</#if>
+            <#if property.propertyType == "Class">, ${property.concreteClassName}.class)</#if>
             <#if deSerializers[property.propertyType]??>)</#if>
             <#if property_has_next>,</#if> // ${property.propertyName}
             </@compress>
 </#list>
 
         );
-        return entity;
 <#else>
 <#--
 ############################## readEntity non-protobuff, setters ##############################
@@ -259,15 +276,19 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         throw new UnsupportedOperationException("Protobuf objects cannot be modified");
 <#else>
 <#list entity.properties as property>
-        entity.set${property.propertyName?cap_first}(<#rt>
+        entity.${property.propertyName} = (<#rt>
         <@compress single_line=true>
-        <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if>
+        <#if !property.notNull>cursor.isNull(offset<#if property_index gt 0> + ${property_index}</#if>) ? null : </#if>
         <#if property.propertyType == "Byte">(byte) </#if>
         <#if property.propertyType == "Date">new java.util.Date(</#if>
+        <#if property.propertyType == "Enum">JsonUtil.parseEnum(</#if>
+        <#if property.propertyType == "Class">(${property.className})de.greenrobot.dao.DbUtils.deserializeObject(</#if>
         <#if deSerializers[property.propertyType]??>${deSerializers[property.propertyType]}(</#if>
-        cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})
+        cursor.get${toCursorType[property.propertyType]}(offset<#if property_index gt 0> + ${property_index}</#if>)
         <#if property.propertyType == "Boolean"> != 0</#if>
         <#if property.propertyType == "Date">)</#if>
+        <#if property.propertyType == "Enum">, ${property.className}.class)</#if>
+        <#if property.propertyType == "Class">, ${property.concreteClassName}.class)</#if>
         <#if deSerializers[property.propertyType]??>)</#if>);
         </@compress>
 
@@ -281,11 +302,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.pkProperty??>
 <#if entity.pkProperty.propertyType == "Long">
 <#if !entity.protobuf>
-        entity.set${entity.pkProperty.propertyName?cap_first}(rowId);
+        entity.${entity.pkProperty.propertyName} = rowId;
 </#if>
         return rowId;
 <#else>
-        return entity.get${entity.pkProperty.propertyName?cap_first}();
+        return entity.${entity.pkProperty.propertyName};
 </#if>
 <#else>
         // Unsupported or missing PK type
@@ -297,8 +318,8 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     @Override
     public ${entity.pkType} getKey(${entity.className} entity) {
 <#if entity.pkProperty??>
-        if(entity != null) {
-            return entity.get${entity.pkProperty.propertyName?cap_first}();
+        if (entity != null) {
+            return entity.${entity.pkProperty.propertyName};
         } else {
             return null;
         }
diff --git a/DaoGenerator/src-template/entity-base.ftl b/DaoGenerator/src-template/entity-base.ftl
index 049028b7..20b16732 100644
--- a/DaoGenerator/src-template/entity-base.ftl
+++ b/DaoGenerator/src-template/entity-base.ftl
@@ -32,30 +32,33 @@ import java.util.List;
 <#if entity.active>
 import ${schema.javaPackageMasterSession}.DaoSession;
 import de.greenrobot.dao.DaoException;
-
 </#if>
 <#if entity.additionalImportsEntityBase?has_content>
 <#list entity.additionalImportsEntityBase as additionalImport>
 import ${additionalImport};
 </#list>
 </#if>
-
 <#if entity.serializedProperties?has_content>
 import de.greenrobot.dao.DbUtils;
 </#if>
-
 <#list entity.serializedProperties as serialized>
     <#list serialized.imports as import>
 import ${import};
     </#list>
 </#list>
-
 <#list entity.enumProperties as enum>
     <#list enum.imports as import>
 import ${import};
     </#list>
 </#list>
-
+<#list entity.imports as import>
+import ${import};
+</#list>
+<#list entity.properties as property>
+    <#list property.imports as import>
+import ${import};
+    </#list>
+</#list>
 
 <#if entity.hasKeepSections>
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
@@ -70,7 +73,7 @@ import ${import};
  */
 <@print_annotations entity.annotations, ""/>
 abstract public class ${entity.classNameBase}<#if
-entity.superclass?has_content> extends ${entity.superclass} </#if><#if
+entity.superclass?has_content> extends ${entity.superclass}</#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 
@@ -79,26 +82,25 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
     /** Not-null value. */
 </#if>
     <@print_annotations property.fieldAnnotations, "    "/>
-    protected ${property.javaType} ${property.propertyName};
+    public ${property.javaType} ${property.propertyName};
 </#list>
-
 <#if  entity.serializedProperties?has_content>
+
     //denormalized properties
     <#list entity.serializedProperties as serialized>
     <@print_annotations serialized.fieldAnnotations, "    "/>
     private ${serialized.className} ${serialized.propertyName};
     </#list>
 </#if>
-
 <#if  entity.enumProperties?has_content>
+
     //enum properties
     <#list entity.enumProperties as enum>
-    private ${enum.className} ${enum.propertyName};
+    public ${enum.className} ${enum.propertyName};
     </#list>
 </#if>
-
-
 <#if entity.active>
+
     /** Used to resolve relations */
     protected transient DaoSession daoSession;
 
@@ -112,7 +114,6 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#else>
     protected boolean ${toOne.name}__refreshed;
 </#if>
-
 </#list>
 <#list entity.toManyRelations as toMany>
     protected List<${toMany.targetEntity.className}> ${toMany.name};
@@ -156,22 +157,26 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 
 </#if>
 <#list entity.properties as property>
-<#if property.notNull && complexTypes?seq_contains(property.propertyType)>
+<#if property.useBean && property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+<#if property.useBean>
     <@print_annotations property.getterAnnotations, "    "/>
     public ${property.javaType} get${property.propertyName?cap_first}() {
         return ${property.propertyName};
     }
 
-<#if property.notNull && complexTypes?seq_contains(property.propertyType)>
+</#if>
+<#if property.useBean && property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
+<#if property.useBean>
     <@print_annotations property.setterAnnotations, "    "/>
     public void set${property.propertyName?cap_first}(${property.javaType} ${property.propertyName}) {
         this.${property.propertyName} = ${property.propertyName};
     }
 
+</#if>
 </#list>
 <#--
 ##########################################
@@ -220,7 +225,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 </#if>
         this.${toOne.name} = ${toOne.name};
 <#if toOne.useFkProperty>
-        ${toOne.fkProperties[0].propertyName} = <#if !toOne.fkProperties[0].notNull>${toOne.name} == null ? null : </#if>${toOne.name}.get${toOne.targetEntity.pkProperty.propertyName?cap_first}();
+        ${toOne.fkProperties[0].propertyName} = <#if !toOne.fkProperties[0].notNull>${toOne.name} == null ? null : </#if>${toOne.name}.${toOne.targetEntity.pkProperty.propertyName};
         ${toOne.name}__resolvedKey = ${toOne.fkProperties[0].propertyName};
 <#else>
         ${toOne.name}__refreshed = true;
@@ -259,7 +264,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 ##########################################
 -->
 <#if entity.active>
-    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
@@ -267,7 +272,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         myDao.delete((${entity.className})this);
     }
 
-    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
@@ -275,7 +280,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         myDao.update((${entity.className})this);
     }
 
-    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
+    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
@@ -285,7 +290,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 
 </#if>
     public void updateNotNull(${entity.className} other) {
-        if(this == other) {
+        if (this == other) {
             return;//both came from db, no need to run this.
         }
         <#list entity.properties as property>
@@ -294,41 +299,42 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         //serialized
                 <#if property.constant >
         //constant serialized field
-        if(${property.propertyName} == null && ${property.serialized.propertyName} == null) {
+        if (${property.propertyName} == null && ${property.serialized.propertyName} == null) {
                 <#else>
-                if(other.get${property.serialized.propertyName?cap_first}() != null) {
+        if (other.get${property.serialized.propertyName?cap_first}() != null) {
                 </#if>
             set${property.serialized.propertyName?cap_first}(other.get${property.serialized.propertyName?cap_first}());
         }
             <#elseif property.enumarated??>
                 <#if property.constant >
         //constant property
-        if(${property.propertyName} == null && ${property.enumarated.propertyName} == null) {
+        if (${property.propertyName} == null && ${property.enumarated.propertyName} == null) {
                 <#else>
-        if(other.get${property.enumarated.propertyName?cap_first}() != null) {
+        if (other.get${property.enumarated.propertyName?cap_first}() != null) {
                 </#if>
             set${property.enumarated.propertyName?cap_first}(other.get${property.enumarated.propertyName?cap_first}());
         }
             <#else>
                 <#if property.constant >
         //constant property field
-        if(${property.propertyName} == null) {
+        if (${property.propertyName} == null) {
                 <#else>
-        if(other.${property.propertyName} != null) {
+        if (other.${property.propertyName} != null) {
                 </#if>
             this.${property.propertyName} = other.${property.propertyName};
         }
             </#if>
-
         </#list>
         // relationships
         <#list entity.toOneRelations as toOne>
-        if(other.get${toOne.name?cap_first}() != null) {
+
+        if (other.get${toOne.name?cap_first}() != null) {
             this.set${toOne.name?cap_first}(other.get${toOne.name?cap_first}());
         }
         </#list>
         <#list entity.toManyRelations as toMany>
-        if(other.get${toMany.name?cap_first}() != null) {
+
+        if (other.get${toMany.name?cap_first}() != null) {
             ${toMany.name} = (other.get${toMany.name?cap_first}());
         }
         </#list>
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 448ebdd7..9004cbe5 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -25,7 +25,14 @@ package ${entity.javaPackage};
 import ${additionalImport};
 </#list>
 </#if>
-
+<#list entity.imports as import>
+import ${import};
+</#list>
+<#list entity.properties as property>
+    <#list property.imports as import>
+import ${import};
+    </#list>
+</#list>
 
 <#if entity.hasKeepSections>
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
@@ -39,9 +46,7 @@ import ${additionalImport};
  * Entity mapped to table ${entity.tableName}.
  */
 <@print_annotations entity.annotations, ""/>
-public class ${entity.className} extends ${entity.classNameBase} <#if
-entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
-as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
+public class ${entity.className} extends ${entity.classNameBase} {
 <#if entity.hasKeepSections>
     // KEEP FIELDS - put your custom fields here
 ${keepFields!}    // KEEP FIELDS END
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index b7c1e037..4aee0ff4 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -61,6 +61,7 @@
     private final List<Annotation> fullConstructorAnnotations;
     private final List<SerializedProperty> serializedProperties;
     private final List<EnumProperty> enumProperties;
+    private final List<String> imports;
 
     private String tableName;
     private String classNameDao;
@@ -104,6 +105,7 @@
         fullConstructorAnnotations = new ArrayList<Annotation>();
         serializedProperties = new ArrayList<SerializedProperty>();
         enumProperties = new ArrayList<EnumProperty>();
+        imports = new ArrayList<String>();
         constructors = true;
     }
 
@@ -186,6 +188,29 @@ public EnumProperty addEnumProperty(String propertyName, String className, Annot
         return this.addEnumProperty(pb.getProperty(), propertyName, className);
     }
 
+    public PropertyBuilder addEnumPropertyOnly(String propertyName, String className) {
+        if (!propertyNames.add(propertyName)) {
+            throw new RuntimeException("Property already defined: " + propertyName);
+        }
+        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, PropertyType.Enum, className, propertyName);
+        properties.add(builder.getProperty());
+        return builder;
+    }
+
+    public PropertyBuilder addClassPropertyOnly(String propertyName, String className) {
+        return addClassPropertyOnly(propertyName, className, className);
+    }
+
+    public PropertyBuilder addClassPropertyOnly(String propertyName, String className, String concreteClassName) {
+        if (!propertyNames.add(propertyName)) {
+            throw new RuntimeException("Property already defined: " + propertyName);
+        }
+        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, PropertyType.Class, className, propertyName);
+        builder.setConcreteClassName(concreteClassName);
+        properties.add(builder.getProperty());
+        return builder;
+    }
+
     public List<SerializedProperty> getSerializedProperties() {
         return serializedProperties;
     }
@@ -512,7 +537,7 @@ public void implementsInterface(String... interfaces) {
     }
 
     public void implementsSerializable() {
-        interfacesToImplement.add("java.io.Serializable");
+        interfacesToImplement.add("Serializable");
     }
 
     public List<Annotation> getAnnotations() {
@@ -535,6 +560,16 @@ public void setSuperclass(String classToExtend) {
         this.superclass = classToExtend;
     }
 
+    public void addImport(String... imports) {
+        for (String imp : imports) {
+            this.imports.add(imp);
+        }
+    }
+
+    public List<String> getImports() {
+        return imports;
+    }
+
     void init2ndPass() {
         init2nPassNamesWithDefaults();
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index d8ae8f33..eddbb82e 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -34,6 +34,10 @@ public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType,
             property = new Property(schema, entity, propertyType, propertyName);
         }
 
+        public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String className, String propertyName) {
+            property = new Property(schema, entity, propertyType, className, propertyName);
+        }
+
         public PropertyBuilder columnName(String columnName) {
             property.columnName = columnName;
             return this;
@@ -135,6 +139,21 @@ public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
             return this;
         }
 
+        public PropertyBuilder useBean() {
+            property.useBean = true;
+            return this;
+        }
+
+        public PropertyBuilder addImport(String imp) {
+            property.imports.add(imp);
+            return this;
+        }
+
+        public PropertyBuilder setConcreteClassName(String className) {
+            property.concreteClassName = className;
+            return this;
+        }
+
         public Property getProperty() {
             return property;
         }
@@ -147,6 +166,8 @@ public Property getProperty() {
 
     private String columnName;
     private String columnType;
+    private String className;
+    private String concreteClassName;
 
     private boolean primaryKey;
     private boolean pkAsc;
@@ -159,12 +180,14 @@ public Property getProperty() {
     private boolean constant;
     private SerializedProperty serialized;
     private EnumProperty enumarated;
+    private boolean useBean = false;
 
     private Entity backingEntity;
 
     private List<Annotation> fieldAnnotations = new ArrayList<Annotation>();
     private List<Annotation> setterAnnotations = new ArrayList<Annotation>();
     private List<Annotation> getterAnnotations = new ArrayList<Annotation>();
+    private List<String> imports = new ArrayList<String>();
 
     /** Initialized in 2nd pass */
     private String constraints;
@@ -174,10 +197,16 @@ public Property getProperty() {
     private String javaType;
 
     public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
+        this(schema, entity, propertyType, null, propertyName);
+    }
+
+    public Property(Schema schema, Entity entity, PropertyType propertyType, String className, String propertyName) {
         this.schema = schema;
         this.entity = entity;
         this.propertyName = propertyName;
         this.propertyType = propertyType;
+        this.className = className;
+        this.concreteClassName = className;
     }
 
     public String getPropertyName() {
@@ -240,6 +269,8 @@ public boolean isConstant() {
         return constant;
     }
 
+    public boolean isUseBean() { return useBean; }
+
     public String getJavaType() {
         return javaType;
     }
@@ -256,6 +287,14 @@ public Entity getEntity() {
         return entity;
     }
 
+    public String getClassName() {
+        return className;
+    }
+
+    public String getConcreteClassName() {
+        return concreteClassName;
+    }
+
     public List<Annotation> getFieldAnnotations() {
         return fieldAnnotations;
     }
@@ -280,6 +319,10 @@ public void setBackingEntity(Entity backingEntity, String propertyName) {
         this.backingEntity = backingEntity;
     }
 
+    public List<String> getImports() {
+        return imports;
+    }
+
     void init2ndPass() {
         initConstraint();
         if (columnType == null) {
@@ -288,10 +331,15 @@ void init2ndPass() {
         if (columnName == null) {
             columnName = DaoUtil.dbName(propertyName);
         }
-        if (notNull) {
-            javaType = schema.mapToJavaTypeNotNull(propertyType);
+
+        if (propertyType == PropertyType.Enum || propertyType == PropertyType.Class) {
+            javaType = className;
         } else {
-            javaType = schema.mapToJavaTypeNullable(propertyType);
+            if (notNull) {
+                javaType = schema.mapToJavaTypeNotNull(propertyType);
+            } else {
+                javaType = schema.mapToJavaTypeNullable(propertyType);
+            }
         }
     }
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
index 5c5def94..03569c6a 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/PropertyType.java
@@ -23,5 +23,5 @@
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, StringList
+    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, StringList, Enum, Class
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index 6399578f..0da9d79d 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -70,6 +70,8 @@ private void initTypeMappings() {
         propertyToDbType.put(PropertyType.ByteArray, "BLOB");
         propertyToDbType.put(PropertyType.Date, "INTEGER");
         propertyToDbType.put(PropertyType.StringList, "TEXT");
+        propertyToDbType.put(PropertyType.Enum, "INTEGER");
+        propertyToDbType.put(PropertyType.Class, "BLOB");
 
         propertyToJavaTypeNotNull = new HashMap<PropertyType, String>();
         propertyToJavaTypeNotNull.put(PropertyType.Boolean, "boolean");
@@ -83,6 +85,8 @@ private void initTypeMappings() {
         propertyToJavaTypeNotNull.put(PropertyType.ByteArray, "byte[]");
         propertyToJavaTypeNotNull.put(PropertyType.Date, "java.util.Date");
         propertyToJavaTypeNotNull.put(PropertyType.StringList, "java.util.List<String>");
+        propertyToJavaTypeNotNull.put(PropertyType.Enum, "int");
+        propertyToJavaTypeNotNull.put(PropertyType.Class, "byte[]");
 
         propertyToJavaTypeNullable = new HashMap<PropertyType, String>();
         propertyToJavaTypeNullable.put(PropertyType.Boolean, "Boolean");
@@ -96,6 +100,8 @@ private void initTypeMappings() {
         propertyToJavaTypeNullable.put(PropertyType.ByteArray, "byte[]");
         propertyToJavaTypeNullable.put(PropertyType.Date, "java.util.Date");
         propertyToJavaTypeNullable.put(PropertyType.StringList, "java.util.List<String>");
+        propertyToJavaTypeNullable.put(PropertyType.Enum, "Integer");
+        propertyToJavaTypeNullable.put(PropertyType.Class, "byte[]");
     }
 
     /**
