diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index b9275906..1cabd30d 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -187,8 +187,8 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         Builder builder = ${entity.className}.newBuilder();
 <#list entity.properties as property>
 <#if !property.notNull>
-        if (!cursor.isNull(offset + ${property_index})) {
-    </#if>        builder.set${property.propertyName?cap_first}(cursor.get${toCursorType[property.propertyType]}(offset + ${property_index}));
+        if (!cursor.isNull(<#include "property-colindex.ftl">)) {
+    </#if>        builder.set${property.propertyName?cap_first}(cursor.get${toCursorType[property.propertyType]}(<#include "property-colindex.ftl">));
 <#if !property.notNull>
         }
 </#if>        
@@ -200,9 +200,9 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 -->
         ${entity.className} entity = new ${entity.className}( //
 <#list entity.properties as property>
-            <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
+            <#if !property.notNull>cursor.isNull(<#include "property-colindex.ftl">) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
+            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(<#include "property-colindex.ftl">)<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
@@ -225,9 +225,9 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         throw new UnsupportedOperationException("Protobuf objects cannot be modified");
 <#else> 
 <#list entity.properties as property>
-        entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
+        entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(<#include "property-colindex.ftl">) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
-            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
+            property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(<#include "property-colindex.ftl">)<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if>);
 </#list>
diff --git a/DaoGenerator/src-template/property-colindex.ftl b/DaoGenerator/src-template/property-colindex.ftl
new file mode 100644
index 00000000..3272c7cf
--- /dev/null
+++ b/DaoGenerator/src-template/property-colindex.ftl
@@ -0,0 +1,6 @@
+<#ftl strip_whitespace=true><#-- turn off "enable blank link before end of file on save" in your editor -->
+<#if schema.isReferenceColumnsByName()>
+cursor.getColumnIndex("${property.columnName}")<#t>
+<#else>
+offset + ${property_index} /*BOOGA*/<#t>
+</#if>
\ No newline at end of file
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index e94c58f5..376ae9cd 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -38,6 +38,7 @@
     private Map<PropertyType, String> propertyToJavaTypeNullable;
     private boolean hasKeepSectionsByDefault;
     private boolean useActiveEntitiesByDefault;
+    private boolean referenceColumnsByName;
 
     public Schema(int version, String defaultJavaPackage) {
         this.version = version;
@@ -54,6 +55,10 @@ public void enableActiveEntitiesByDefault() {
         useActiveEntitiesByDefault = true;
     }
 
+    public void referenceColumnsByName() {
+        referenceColumnsByName = true;
+    }
+
     private void initTypeMappings() {
         propertyToDbType = new HashMap<PropertyType, String>();
         propertyToDbType.put(PropertyType.Boolean, "INTEGER");
@@ -168,6 +173,10 @@ public boolean isUseActiveEntitiesByDefault() {
         return useActiveEntitiesByDefault;
     }
 
+    public boolean isReferenceColumnsByName() {
+        return referenceColumnsByName;
+    }
+
     void init2ndPass() {
         if (defaultJavaPackageDao == null) {
             defaultJavaPackageDao = defaultJavaPackage;
