diff --git a/greendao-lib/LICENSE b/greendao-lib/LICENSE
new file mode 100644
index 00000000..79097e53
--- /dev/null
+++ b/greendao-lib/LICENSE
@@ -0,0 +1,15 @@
+Source Generator, a program which generate source code for ORM on Android.
+Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+
+This program is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>.
diff --git a/greendao-lib/build.gradle b/greendao-lib/build.gradle
new file mode 100644
index 00000000..050ddb4b
--- /dev/null
+++ b/greendao-lib/build.gradle
@@ -0,0 +1,4 @@
+apply plugin: 'java'
+
+sourceCompatibility = "1.5"
+targetCompatibility = "1.5"
diff --git a/greendao-lib/src/main/java/de/greenrobot/dao/serialization/DefaultSerializer.java b/greendao-lib/src/main/java/de/greenrobot/dao/serialization/DefaultSerializer.java
new file mode 100644
index 00000000..a29f5675
--- /dev/null
+++ b/greendao-lib/src/main/java/de/greenrobot/dao/serialization/DefaultSerializer.java
@@ -0,0 +1,25 @@
+package de.greenrobot.dao.serialization;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+public class DefaultSerializer implements Serializer {
+    @Override
+    public byte[] serializeObject(Object object) throws IOException {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeUnshared(object);
+        oos.flush();
+        return baos.toByteArray();
+    }
+
+    @Override
+    public Object deserializeObject(byte[] byteArray) throws IOException, ClassNotFoundException {
+        ByteArrayInputStream bais = new ByteArrayInputStream(byteArray);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        return ois.readUnshared();
+    }
+}
diff --git a/greendao-lib/src/main/java/de/greenrobot/dao/serialization/Serializer.java b/greendao-lib/src/main/java/de/greenrobot/dao/serialization/Serializer.java
new file mode 100644
index 00000000..6f253053
--- /dev/null
+++ b/greendao-lib/src/main/java/de/greenrobot/dao/serialization/Serializer.java
@@ -0,0 +1,9 @@
+package de.greenrobot.dao.serialization;
+
+import java.io.IOException;
+
+public interface Serializer {
+    byte[] serializeObject(Object object) throws IOException;
+
+    Object deserializeObject(byte[] byteArray) throws IOException, ClassNotFoundException;
+}
diff --git a/greendao/build.gradle b/greendao/build.gradle
index ddc903be..515d9b77 100644
--- a/greendao/build.gradle
+++ b/greendao/build.gradle
@@ -19,6 +19,7 @@ dependencies {
   provided 'com.google.android:android-test:4.1.1.4'
   provided 'com.google.android:annotations:4.1.1.4'
   provided 'com.google.android:support-v4:r7'
+  compile project(':greendao-lib')
 }
 
 sourceSets {
diff --git a/greendao/src/main/java/de/greenrobot/dao/AbstractDao.java b/greendao/src/main/java/de/greenrobot/dao/AbstractDao.java
index 3285f4d5..b3b8cd1b 100644
--- a/greendao/src/main/java/de/greenrobot/dao/AbstractDao.java
+++ b/greendao/src/main/java/de/greenrobot/dao/AbstractDao.java
@@ -19,6 +19,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.List;
 
 import android.database.CrossProcessCursor;
@@ -34,11 +35,10 @@
 import de.greenrobot.dao.internal.TableStatements;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
+import de.greenrobot.dao.serialization.Serializer;
+
 import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
+import java.util.Map;
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
@@ -62,6 +62,9 @@
  * 3.) identityScope
  */
 public abstract class AbstractDao<T, K> {
+    private final Map<Class<? extends Serializer>, Serializer> serializers =
+            new HashMap<Class<? extends Serializer>, Serializer>();
+
     protected final SQLiteDatabase db;
     protected final DaoConfig config;
     protected IdentityScope<K, T> identityScope;
@@ -120,29 +123,39 @@ public Property getPkProperty() {
         return config.nonPkColumns;
     }
     
-    protected byte[] serializeObject(Object obj) {
+    protected byte[] serializeObject(Object obj, Class<? extends Serializer> serializerClass) {
       try {
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        ObjectOutputStream oos = new ObjectOutputStream(baos);
-        oos.writeUnshared(obj);
-        oos.flush();
-        return baos.toByteArray();
+        return getSerializer(serializerClass).serializeObject(obj);
       }
       catch (IOException e) {
         throw new RuntimeException(e);
       }
     }
 
-    protected Object deserializeObject(byte[] byteArray) {
+    protected Object deserializeObject(byte[] byteArray,
+                                       Class<? extends Serializer> serializerClass) {
       try {
-        ByteArrayInputStream bais = new ByteArrayInputStream(byteArray);
-        ObjectInputStream ois = new ObjectInputStream(bais);
-        return ois.readUnshared();
+        return getSerializer(serializerClass).deserializeObject(byteArray);
       }
       catch (Exception e) {
         throw new RuntimeException(e);
       }
     }
+
+    protected synchronized Serializer getSerializer(Class<? extends Serializer> serializerClass) {
+        Serializer serializer = serializers.get(serializerClass);
+        if (serializer == null) {
+            try {
+                serializer = serializerClass.newInstance();
+            } catch (InstantiationException e) {
+                throw new RuntimeException(e);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException(e);
+            }
+            serializers.put(serializerClass, serializer);
+        }
+        return serializer;
+    }
     
     /**
      * Loads and entity for the given PK.
diff --git a/settings.gradle b/settings.gradle
index 23d914b1..f5534954 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include 'greendao', 'gradle-plugin', 'source-generator'
\ No newline at end of file
+include 'greendao', 'gradle-plugin', 'source-generator', 'greendao-lib'
\ No newline at end of file
diff --git a/source-generator/build.gradle b/source-generator/build.gradle
index 1afb99e4..5c289dd8 100644
--- a/source-generator/build.gradle
+++ b/source-generator/build.gradle
@@ -4,6 +4,7 @@ apply plugin: 'signing'
 dependencies {
   compile 'org.freemarker:freemarker:2.3.19'
   compile 'com.thoughtworks.qdox:qdox:1.12.1'
+  compile project(':greendao-lib')
   compile gradleApi()
 }
 
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
index 93d762d4..df9ac6fd 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
@@ -19,7 +19,12 @@
 
 import de.greenrobot.daogenerator.Property.PropertyBuilder;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
 
 /**
  * Model class for an entity: a Java data object mapped to a data base table. A new entity is added to a {@link Schema}
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
index 46cac72f..90cde1b1 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
@@ -116,6 +116,10 @@ public PropertyBuilder since(int version, String _default) {
         public Property getProperty() {
             return property;
         }
+
+        public void serializer(String serializerClass) {
+            property.serializerClass = serializerClass;
+        }
     }
 
     private final Schema schema;
@@ -126,6 +130,7 @@ public Property getProperty() {
 
     private String columnName;
     private String columnType;
+    private String serializerClass;
 
     private boolean primaryKey;
     private boolean pkAsc;
@@ -215,6 +220,9 @@ public String getDefault() {
         return _default;
     }
 
+    public String getSerializerClass() {
+        return serializerClass;
+    }
 
     void init2ndPass() {
         initConstraint();
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java b/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
index 87cba24b..00d43204 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
@@ -2,9 +2,6 @@
 
 import com.thoughtworks.qdox.JavaDocBuilder;
 import com.thoughtworks.qdox.model.*;
-import de.greenrobot.daogenerator.annotation.Serialized;
-import de.greenrobot.daogenerator.annotation.ToMany;
-import de.greenrobot.daogenerator.annotation.ToOne;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -12,6 +9,11 @@
 import java.util.List;
 import java.util.Map;
 
+import de.greenrobot.dao.serialization.DefaultSerializer;
+import de.greenrobot.daogenerator.annotation.Serialized;
+import de.greenrobot.daogenerator.annotation.ToMany;
+import de.greenrobot.daogenerator.annotation.ToOne;
+
 public class SchemaGenerator {
 
   private static class EntityDescriptor {
@@ -30,7 +32,7 @@
 
   public SchemaGenerator(File sourceDirectory) {
     this.sourceDirectory = sourceDirectory;
-    
+
     javaTypeToPropertyType = new HashMap<String, PropertyType>();
     javaTypeToPropertyType.put("boolean", PropertyType.Boolean);
     javaTypeToPropertyType.put("Boolean", PropertyType.Boolean);
@@ -54,7 +56,7 @@ public SchemaGenerator(File sourceDirectory) {
 
   public Schema createSchema(String genSrcPackage) {
     Schema schema = new Schema(genSrcPackage);
-    
+
     // Look for the java files.
     JavaDocBuilder builder = new JavaDocBuilder();
     builder.addSourceTree(sourceDirectory);
@@ -75,7 +77,7 @@ public Schema createSchema(String genSrcPackage) {
     for (EntityDescriptor descriptor : descriptors) {
       linkEntity2(schema, descriptor.javaClass);
     }
-    
+
     return schema;
   }
 
@@ -98,20 +100,20 @@ private Annotation getAnnotation(AbstractBaseJavaEntity javaEntity, Class annota
         return annotation;
       }
     }
-    
+
     return null;
   }
-  
+
   private Property findProperty(Entity entity, String propertyName) {
     for (Property property : entity.getProperties()) {
       if (property.getPropertyName().equals(propertyName)) {
         return property;
       }
     }
-    
+
     return null;
   }
-  
+
   /**
    * Creates the entity in the schema.
    * Skips all the relational aspect.
@@ -133,18 +135,23 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
     for (JavaField javaField : javaClass.getFields()) {
       debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
       Property.PropertyBuilder propertyBuilder;
-      
+
       PropertyType propertyType = javaTypeToPropertyType.get(javaField.getType().getFullyQualifiedName());
       Annotation toOneAnnotation = getAnnotation(javaField, ToOne.class);
       Annotation serializedAnnotation = getAnnotation(javaField, Serialized.class);
       Annotation notNullAnnotation = getAnnotation(javaField, de.greenrobot.daogenerator.annotation.NotNull.class);
       Annotation sinceAnnotation = getAnnotation(javaField, de.greenrobot.daogenerator.annotation.Since.class);
       Annotation uniqueAnnotation = getAnnotation(javaField, de.greenrobot.daogenerator.annotation.Unique.class);
-      
+
       if (propertyType != null) {
         propertyBuilder = entity.addProperty(propertyType, null, javaField.getName());
       } else if (serializedAnnotation != null) {
-        propertyBuilder = entity.addProperty(PropertyType.Serialized, javaField.getType().getFullyQualifiedName(), javaField.getName());
+        propertyBuilder = entity.addSerializedProperty(javaField.getType().getFullyQualifiedName(), javaField.getName());
+        String serializer = (String)serializedAnnotation.getNamedParameter("value");
+        if (serializer == null) {
+            serializer = DefaultSerializer.class.getName() + ".class";
+        }
+        propertyBuilder.serializer(serializer);
       } else if (toOneAnnotation != null) {
         propertyBuilder = entity.addLongProperty(javaField.getName() + "Id");
       } else {
@@ -163,18 +170,18 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
       }
     }
   }
-  
+
   /**
    * Sets up all the relational aspects of the entity.
    */
   private void linkEntity1(Schema schema, JavaClass javaClass) {
     debug("className: " + javaClass.getFullyQualifiedName());
-    
+
     Entity entity = typeToEntity.get(javaClass.asType());
-    
+
     for (JavaField javaField : javaClass.getFields()) {
       debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
-      
+
       Annotation toOneAnnotation = getAnnotation(javaField, ToOne.class);
       if (toOneAnnotation != null) {
         Entity targetEntity = typeToEntity.get(javaField.getType());
@@ -182,35 +189,35 @@ private void linkEntity1(Schema schema, JavaClass javaClass) {
       }
     }
   }
-  
+
   /**
    * Sets up all the relational aspects of the entity.
    */
   private void linkEntity2(Schema schema, JavaClass javaClass) {
     debug("className: " + javaClass.getFullyQualifiedName());
-    
+
     Entity entity = typeToEntity.get(javaClass.asType());
-    
+
     for (JavaField javaField : javaClass.getFields()) {
       debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
-      
+
       Annotation toManyAnnotation = getAnnotation(javaField, ToMany.class);
       if (toManyAnnotation != null && javaField.getType().getFullyQualifiedName().equals(List.class.getName())) {
-        
+
         Entity targetEntity = typeToEntity.get(javaField.getType().getActualTypeArguments()[0]);
         debug("targetEntity = " + targetEntity);
-        
+
         debug("toManyAnnotation.getParameterValue() = " + toManyAnnotation.getParameterValue());
-        
+
         String relationName = unString((String) toManyAnnotation. getNamedParameter("relation"));
         debug("relationName = " + relationName);
-        
+
         de.greenrobot.daogenerator.ToMany toMany = entity.addToMany(targetEntity,
                 findProperty(targetEntity, relationName + "Id"),
                 javaField.getName());
-        
+
         String orderedByStr = unString((String) toManyAnnotation.getNamedParameter("orderedBy"));
-        
+
         toMany.orderAsc(findProperty(targetEntity, orderedByStr));
       }
     }
@@ -231,5 +238,5 @@ private String unString(String str) {
   protected void debug(String text) {
       System.out.println(text);
   }
-  
+
 }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Serialized.java b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Serialized.java
index 7c1ebd67..9eb47dd9 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Serialized.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Serialized.java
@@ -3,7 +3,10 @@
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Target;
 
+import de.greenrobot.dao.serialization.DefaultSerializer;
+import de.greenrobot.dao.serialization.Serializer;
+
 @Target(ElementType.FIELD)
 public @interface Serialized {
-  Class value() default Object.class;
+  Class<? extends Serializer> value() default DefaultSerializer.class;
 }
diff --git a/source-generator/src/main/resources/dao.ftl b/source-generator/src/main/resources/dao.ftl
index a782bf64..cdc7ce09 100644
--- a/source-generator/src/main/resources/dao.ftl
+++ b/source-generator/src/main/resources/dao.ftl
@@ -128,7 +128,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.protobuf>
         if(entity.has${property.propertyName?cap_first}()) {
     </#if>        stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, <#if
-property.propertyType == "Serialized">serializeObject(entity.get${property.propertyName?cap_first}())<#else>entity.get${property.propertyName?cap_first}()</#if><#if
+property.propertyType == "Serialized">serializeObject(entity.get${property.propertyName?cap_first}(), ${property.serializerClass})<#else>entity.get${property.propertyName?cap_first}()</#if><#if
 property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
 <#if entity.protobuf>
         }
@@ -137,7 +137,7 @@ property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType ==
         ${property.javaType} ${property.propertyName} = entity.get${property.propertyName?cap_first}();
         if (${property.propertyName} != null) {
             stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, <#if
-property.propertyType == "Serialized">serializeObject(${property.propertyName})<#else>${property.propertyName}</#if><#if
+property.propertyType == "Serialized">serializeObject(${property.propertyName}, ${property.serializerClass})<#else>${property.propertyName}</#if><#if
 property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
         }
 </#if>
@@ -208,7 +208,7 @@ property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType ==
             property.propertyType == "Serialized">(${property.javaType}) deserializeObject(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if><#if
-            property.propertyType == "Serialized">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
+            property.propertyType == "Serialized">, ${property.serializerClass})</#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
         );
         return entity;
@@ -235,7 +235,7 @@ property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType ==
             property.propertyType == "Serialized">(${property.javaType}) deserializeObject(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
             property.propertyType == "Date">)</#if><#if
-            property.propertyType == "Serialized">)</#if>);
+            property.propertyType == "Serialized">, ${property.serializerClass})</#if>);
 </#list>
 </#if>
      }
