diff --git a/daogenerator/src-template/dao-master.ftl b/daogenerator/src-template/dao-master.ftl
index adaffc48..7a9cbc32 100644
--- a/daogenerator/src-template/dao-master.ftl
+++ b/daogenerator/src-template/dao-master.ftl
@@ -28,7 +28,9 @@ import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
 import ${entity.javaPackageDao}.${entity.classNameDao};
+</#if>
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -41,7 +43,7 @@ public class DaoMaster extends AbstractDaoMaster {
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipTableCreation && !entity.skipDaoGeneration>
         ${entity.classNameDao}.createTable(db, ifNotExists);
 </#if>
 </#list>
@@ -50,7 +52,7 @@ public class DaoMaster extends AbstractDaoMaster {
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipTableCreation && !entity.skipDaoGeneration>
         ${entity.classNameDao}.dropTable(db, ifExists);
 </#if>
 </#list>
@@ -86,7 +88,9 @@ public class DaoMaster extends AbstractDaoMaster {
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
         registerDaoClass(${entity.classNameDao}.class);
+</#if>
 </#list>
     }
     
diff --git a/daogenerator/src-template/dao-session.ftl b/daogenerator/src-template/dao-session.ftl
index e0201a48..4d0effc9 100644
--- a/daogenerator/src-template/dao-session.ftl
+++ b/daogenerator/src-template/dao-session.ftl
@@ -29,11 +29,15 @@ import de.greenrobot.dao.identityscope.IdentityScopeType;
 import de.greenrobot.dao.internal.DaoConfig;
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
 import ${entity.javaPackage}.${entity.className};
+</#if>
 </#list>
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
 import ${entity.javaPackageDao}.${entity.classNameDao};
+</#if>
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -46,11 +50,15 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
 public class DaoSession extends AbstractDaoSession {
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
     private final DaoConfig ${entity.classNameDao?uncap_first}Config;
+</#if>
 </#list>        
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
     private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
+</#if>
 </#list>        
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
@@ -58,30 +66,40 @@ public class DaoSession extends AbstractDaoSession {
         super(db);
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
         ${entity.classNameDao?uncap_first}Config = daoConfigMap.get(${entity.classNameDao}.class).clone();
         ${entity.classNameDao?uncap_first}Config.initIdentityScope(type);
+</#if>
 
 </#list>        
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
         ${entity.classNameDao?uncap_first} = new ${entity.classNameDao}<#--
 -->(${entity.classNameDao?uncap_first}Config, this);
+</#if>
 </#list>        
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
         registerDao(${entity.className}.class, ${entity.classNameDao?uncap_first});
+</#if>
 </#list>        
     }
     
     public void clear() {
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
         ${entity.classNameDao?uncap_first}Config.getIdentityScope().clear();
+</#if>
 </#list>    
     }
 
 <#list schema.entities as entity>
+<#if !entity.skipDaoGeneration>
     public ${entity.classNameDao} get${entity.classNameDao?cap_first}() {
         return ${entity.classNameDao?uncap_first};
     }
+</#if>
 
 </#list>        
 }
diff --git a/daogenerator/src-template/dao-uid.ftl b/daogenerator/src-template/dao-uid.ftl
index 0d73913b..5990d3dc 100644
--- a/daogenerator/src-template/dao-uid.ftl
+++ b/daogenerator/src-template/dao-uid.ftl
@@ -9,7 +9,7 @@
 
         </#list>
         </#if>
-        long entityId = insert(entity);
+        long entityId = super.insert(entity);
 
         <#if entity.toManyRelations?has_content>
         <#list entity.toManyRelations as toMany>
diff --git a/daogenerator/src-template/dao.ftl b/daogenerator/src-template/dao.ftl
index 336da1b6..11bd89a4 100644
--- a/daogenerator/src-template/dao.ftl
+++ b/daogenerator/src-template/dao.ftl
@@ -17,8 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
+<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date":"Long", "Enum":"String"} />
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date":"Long", "Enum":"String"} />
 package ${entity.javaPackageDao};
 
 <#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
diff --git a/daogenerator/src-template/entity-base.ftl b/daogenerator/src-template/entity-base.ftl
index 9d96a093..d02c1348 100644
--- a/daogenerator/src-template/entity-base.ftl
+++ b/daogenerator/src-template/entity-base.ftl
@@ -56,11 +56,7 @@ ${keepIncludes!}
 <@print_annotations entity.annotations, ""/>
 abstract public class ${entity.classNameBase}<#if
 entity.superclassEntity?has_content> extends ${entity.superclassEntity.className}<#elseif
-entity.superclass?has_content> extends ${entity.superclass}</#if><#if
-entity.interfacesToImplement?has_content>
-
-implements <#list entity.interfacesToImplement
-as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
+entity.superclass?has_content> extends ${entity.superclass}</#if> {
 
 <#list entity.properties as property>
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
@@ -78,6 +74,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
     protected transient ${entity.classNameDao} myDao;
 
 <#list entity.toOneRelations as toOne>
+    <@print_annotations toOne.fieldAnnotations, "    "/>
     protected ${toOne.targetEntity.className} ${toOne.name};
 <#if toOne.useFkProperty>
     protected ${toOne.resolvedKeyJavaType[0]} ${toOne.name}__resolvedKey;
diff --git a/daogenerator/src-template/entity.ftl b/daogenerator/src-template/entity.ftl
index 61a703d0..050cf95f 100644
--- a/daogenerator/src-template/entity.ftl
+++ b/daogenerator/src-template/entity.ftl
@@ -79,12 +79,10 @@ property>${property.propertyName}<#if property_has_next>, </#if></#list>);
 entity.superclassEntity.properties as property>${property.javaType} ${property.propertyName}<#if
 property_has_next || entity.properties?has_content>, </#if></#list></#if><#list entity.properties as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
-<#if entity.superclassEntity?has_content>
         super(<#if entity.superclassEntity?has_content><#list
 entity.superclassEntity.properties as property>${property.propertyName}<#if
 property_has_next || entity.properties?has_content>, </#if></#list></#if><#list entity.properties as
 property>${property.propertyName}<#if property_has_next>, </#if></#list>);
-</#if>
     }
 </#if>
 <#if entity.hasKeepSections>
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Entity.java b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
index e372cc96..68550494 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -142,6 +142,15 @@ public PropertyBuilder addDateProperty(String propertyName) {
         return addProperty(PropertyType.Date, propertyName);
     }
 
+    public PropertyBuilder addEnumProperty(String enumType, String propertyName) {
+        if (!propertyNames.add(propertyName)) {
+            throw new RuntimeException("Property already defined: " + propertyName);
+        }
+        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, PropertyType.Enum, propertyName, enumType);
+        properties.add(builder.getProperty());
+        return builder;
+    }
+
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
         if (!propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
@@ -514,6 +523,20 @@ void init2ndPass() {
             }
         }
 
+        if (superclassEntity != null) {
+            List<Property> superclassProperties = superclassEntity.getProperties();
+            for (int i = 0; i < superclassProperties.size(); i++) {
+                Property property = superclassProperties.get(i);
+                property.setOrdinal(i);
+                property.init2ndPass();
+                if (property.isPrimaryKey()) {
+                    propertiesPk.add(property);
+                } else {
+                    propertiesNonPk.add(property);
+                }
+            }
+        }
+
         if (propertiesPk.size() == 1) {
             pkProperty = propertiesPk.get(0);
             pkType = schema.mapToJavaTypeNullable(pkProperty.getPropertyType());
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Property.java b/daogenerator/src/de/greenrobot/daogenerator/Property.java
index 22944c6e..76820241 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Property.java
@@ -30,6 +30,12 @@ public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType,
             property = new Property(schema, entity, propertyType, propertyName);
         }
 
+        public PropertyBuilder(Schema schema, Entity entity, PropertyType propertyType, String propertyName, String javaType) {
+            this(schema, entity, propertyType, propertyName);
+
+            property.setJavaType(javaType);
+        }
+
         public PropertyBuilder columnName(String columnName) {
             property.columnName = columnName;
             return this;
@@ -203,6 +209,10 @@ public String getJavaType() {
         return javaType;
     }
 
+    public void setJavaType(String javaType) {
+        this.javaType = javaType;
+    }
+
     public int getOrdinal() {
         return ordinal;
     }
@@ -235,6 +245,11 @@ void init2ndPass() {
         if (columnName == null) {
             columnName = DaoUtil.dbName(propertyName);
         }
+
+        if (propertyType.equals(PropertyType.Enum)) {
+            return;
+        }
+
         if (notNull) {
             javaType = schema.mapToJavaTypeNotNull(propertyType);
         } else {
diff --git a/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java b/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
index 0246239e..8831234b 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
@@ -23,5 +23,5 @@
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date
+    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, Enum
 }
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Schema.java b/daogenerator/src/de/greenrobot/daogenerator/Schema.java
index e94c58f5..bf23c238 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -66,6 +66,7 @@ private void initTypeMappings() {
         propertyToDbType.put(PropertyType.String, "TEXT");
         propertyToDbType.put(PropertyType.ByteArray, "BLOB");
         propertyToDbType.put(PropertyType.Date, "INTEGER");
+        propertyToDbType.put(PropertyType.Enum, "TEXT");
 
         propertyToJavaTypeNotNull = new HashMap<PropertyType, String>();
         propertyToJavaTypeNotNull.put(PropertyType.Boolean, "boolean");
diff --git a/daogenerator/src/de/greenrobot/daogenerator/ToMany.java b/daogenerator/src/de/greenrobot/daogenerator/ToMany.java
index 416dea25..7df734a4 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/ToMany.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/ToMany.java
@@ -80,8 +80,9 @@ public void setName(String name) {
         return fieldAnnotations;
     }
 
-    public void addFieldAnnotation(Annotation annotation) {
+    public ToMany addFieldAnnotation(Annotation annotation) {
         fieldAnnotations.add(annotation);
+        return this;
     }
 
     /** Property of target entity used for ascending order. */
diff --git a/daogenerator/src/de/greenrobot/daogenerator/ToOne.java b/daogenerator/src/de/greenrobot/daogenerator/ToOne.java
index 82cb34f6..1a5b861a 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/ToOne.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/ToOne.java
@@ -17,6 +17,9 @@
  */
 package de.greenrobot.daogenerator;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /** To-one relationship from a source entity to one (or zero) target entity. */
 public class ToOne {
     private final Schema schema;
@@ -28,6 +31,8 @@
     private String name;
     private final boolean useFkProperty;
 
+    private List<Annotation> fieldAnnotations = new ArrayList<Annotation>();
+
     public ToOne(Schema schema, Entity sourceEntity, Entity targetEntity, Property[] fkProperties, boolean useFkProperty) {
         this.schema = schema;
         this.sourceEntity = sourceEntity;
@@ -74,6 +79,15 @@ public boolean isUseFkProperty() {
         return useFkProperty;
     }
 
+    public List<Annotation> getFieldAnnotations() {
+        return fieldAnnotations;
+    }
+
+    public ToOne addFieldAnnotation(Annotation annotation) {
+        fieldAnnotations.add(annotation);
+        return this;
+    }
+
     void init2ndPass() {
         if (name == null) {
             char[] nameCharArray = targetEntity.getClassName().toCharArray();
