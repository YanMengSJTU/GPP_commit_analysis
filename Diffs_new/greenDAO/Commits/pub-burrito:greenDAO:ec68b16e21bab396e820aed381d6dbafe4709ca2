diff --git a/DaoCore/.classpath b/DaoCore/.classpath
index 5e6314e1..3cf80721 100644
--- a/DaoCore/.classpath
+++ b/DaoCore/.classpath
@@ -4,5 +4,7 @@
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry exported="true" kind="con" path="org.springsource.ide.eclipse.gradle.classpathcontainer"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/DaoCore/.project b/DaoCore/.project
index 6fdcae5d..63a36ae3 100644
--- a/DaoCore/.project
+++ b/DaoCore/.project
@@ -1,39 +1,40 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>DaoCore</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-		<nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>
-	</natures>
-</projectDescription>
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>DaoCore</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.springsource.ide.eclipse.gradle.core.nature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>
+	</natures>
+</projectDescription>
diff --git a/DaoCore/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs b/DaoCore/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
new file mode 100644
index 00000000..e38bff14
--- /dev/null
+++ b/DaoCore/.settings/gradle/org.springsource.ide.eclipse.gradle.core.prefs
@@ -0,0 +1,4 @@
+#org.springsource.ide.eclipse.gradle.core.preferences.GradleProjectPreferences
+#Thu Mar 06 11:47:02 BRT 2014
+org.springsource.ide.eclipse.gradle.linkedresources=
+org.springsource.ide.eclipse.gradle.rootprojectloc=
diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 2aa10da6..88832b25 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -27,10 +27,10 @@ configurations {
 }
 
 dependencies {
-//    provided 'com.google.android:android:4.1.1.4'
-//    provided 'com.google.android:android-test:4.1.1.4'
-//    provided 'com.google.android:annotations:4.1.1.4'
-//    provided 'com.google.android:support-v4:r7'
+    provided 'com.google.android:android:4.1.1.4'
+    provided 'com.google.android:android-test:4.1.1.4'
+    provided 'com.google.android:annotations:4.1.1.4'
+    provided 'com.google.android:support-v4:r7'
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index 10276387..6f64a98d 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -174,8 +174,9 @@ protected T loadUnique(ResultSet resultSet) throws SQLException {
         return loadAllAndCloseCursor(resultSet);
     }
 
-    /** Detaches an entity from the identity scope (session). Subsequent query results won't return this object. */
-    public boolean detach(T entity) {
+    /** Detaches an entity from the identity scope (session). Subsequent query results won't return this object. 
+     * @throws DaoException */
+    public boolean detach(T entity) throws DaoException {
         if (identityScope != null) {
             K key = getKeyVerified(entity);
             return identityScope.detach(key, entity);
@@ -479,8 +480,9 @@ final protected T loadCurrent(ResultSet resultSet, int offset, boolean lock) thr
     /**
      * Creates a repeatable {@link Query} object based on the given raw SQL where you can pass any WHERE clause and
      * arguments.
+     * @throws DaoException 
      */
-    public Query<T> queryRawCreate(String where, Object... selectionArg) {
+    public Query<T> queryRawCreate(String where, Object... selectionArg) throws DaoException {
         List<Object> argList = Arrays.asList(selectionArg);
         return queryRawCreateListArgs(where, argList);
     }
@@ -488,8 +490,9 @@ final protected T loadCurrent(ResultSet resultSet, int offset, boolean lock) thr
     /**
      * Creates a repeatable {@link Query} object based on the given raw SQL where you can pass any WHERE clause and
      * arguments.
+     * @throws DaoException 
      */
-    public Query<T> queryRawCreateListArgs(String where, Collection<Object> selectionArg) {
+    public Query<T> queryRawCreateListArgs(String where, Collection<Object> selectionArg) throws DaoException {
         return Query.internalCreate(this, statements.getSelectAll() + where, selectionArg.toArray());
     }
 
@@ -772,7 +775,7 @@ public void updateInTx(T... entities) throws SQLException {
         updateInTx(Arrays.asList(entities));
     }
 
-    protected void assertSinglePk() {
+    protected void assertSinglePk() throws DaoException {
         if (config.pkColumns.length != 1) {
             throw new DaoException(this + " (" + config.tablename + ") does not have a single-column primary key");
         }
@@ -794,8 +797,9 @@ public long count() throws SQLException {
 //        return DatabaseUtils.queryNumEntries(db, '\'' + config.tablename + '\'');
     }
 
-    /** See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null). */
-    protected K getKeyVerified(T entity) {
+    /** See {@link #getKey(Object)}, but guarantees that the returned key is never null (throws if null). 
+     * @throws DaoException */
+    protected K getKeyVerified(T entity) throws DaoException {
         K key = getKey(entity);
         if (key == null) {
             if (entity == null) {
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java b/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java
index 0014dfeb..f5d55be7 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDaoMaster.java
@@ -40,7 +40,7 @@ public AbstractDaoMaster(Connection connection, int schemaVersion) {
         daoConfigMap = new HashMap<Class<? extends AbstractDao<?, ?>>, DaoConfig>();
     }
 
-    protected void registerDaoClass(Class<? extends AbstractDao<?, ?>> daoClass) {
+    protected void registerDaoClass(Class<? extends AbstractDao<?, ?>> daoClass) throws DaoException {
         DaoConfig daoConfig = new DaoConfig(connection, daoClass);
         daoConfigMap.put(daoClass, daoConfig);
     }
diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
index 186d121e..7fb39558 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
@@ -129,14 +129,15 @@ public AbstractDaoSession(Connection connection) {
         return dao.queryRaw(where, selectionArgs);
     }
 
-    /** Convenient call for {@link AbstractDao#queryBuilder()}. */
-    public <T> QueryBuilder<T> queryBuilder(Class<T> entityClass) {
+    /** Convenient call for {@link AbstractDao#queryBuilder()}. 
+     * @throws DaoException */
+    public <T> QueryBuilder<T> queryBuilder(Class<T> entityClass) throws DaoException {
         @SuppressWarnings("unchecked")
         AbstractDao<T, ?> dao = (AbstractDao<T, ?>) getDao(entityClass);
         return dao.queryBuilder();
     }
 
-    public AbstractDao<?, ?> getDao(Class<? extends Object> entityClass) {
+    public AbstractDao<?, ?> getDao(Class<? extends Object> entityClass) throws DaoException {
         AbstractDao<?, ?> dao = entityToDao.get(entityClass);
         if (dao == null) {
             throw new DaoException("No DAO registered for " + entityClass);
@@ -183,8 +184,9 @@ public void runInTx(Runnable runnable) throws SQLException {
     /**
      * Like {@link #callInTx(Callable)} but does not require Exception handling (rethrows an Exception as a runtime
      * DaoException).
+     * @throws DaoException 
      */
-    public <V> V callInTxNoException(Callable<V> callable) {
+    public <V> V callInTxNoException(Callable<V> callable) throws DaoException {
     	V result = null;
     	try {
 	    	connection.setAutoCommit( false );
diff --git a/DaoCore/src/de/greenrobot/dao/DaoException.java b/DaoCore/src/de/greenrobot/dao/DaoException.java
index 0b3acac6..3cc707eb 100644
--- a/DaoCore/src/de/greenrobot/dao/DaoException.java
+++ b/DaoCore/src/de/greenrobot/dao/DaoException.java
@@ -15,7 +15,7 @@
  */
 package de.greenrobot.dao;
 
-import android.database.SQLException;
+import java.sql.SQLException;
 
 /**
  * Exception thrown when something goes wrong in the DAO/ORM layer.
diff --git a/DaoCore/src/de/greenrobot/dao/DaoLog.java b/DaoCore/src/de/greenrobot/dao/DaoLog.java
index 7a19cf52..76e5de01 100644
--- a/DaoCore/src/de/greenrobot/dao/DaoLog.java
+++ b/DaoCore/src/de/greenrobot/dao/DaoLog.java
@@ -16,7 +16,8 @@
 
 package de.greenrobot.dao;
 
-import android.util.Log;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * Internal greenDAO logger class. A wrapper around the Android Log class providing a static Log Tag.
@@ -25,69 +26,53 @@
  * 
  */
 public class DaoLog {
-    private final static String TAG = "greenDAO";
-
-    public static final int VERBOSE = 2;
-    public static final int DEBUG = 3;
-    public static final int INFO = 4;
-    public static final int WARN = 5;
-    public static final int ERROR = 6;
-    public static final int ASSERT = 7;
-
-    public static boolean isLoggable(int level) {
-        return Log.isLoggable(TAG, level);
-    }
-
-    public static String getStackTraceString(Throwable th) {
-        return Log.getStackTraceString(th);
-    }
-
-    public static int println(int level, String msg) {
-        return Log.println(level, TAG, msg);
-    }
-
-    public static int v(String msg) {
-        return Log.v(TAG, msg);
+	
+	private final static String TAG = "greenDAO";
+	private final static Logger Log = Logger.getLogger(Logger.class.getName(), TAG);
+
+    public static final Level VERBOSE = Level.ALL;
+    public static final Level DEBUG = Level.FINEST;
+    public static final Level INFO = Level.INFO;
+    public static final Level WARN = Level.WARNING;
+    public static final Level ERROR = Level.SEVERE;
+    public static final Level ASSERT = Level.FINE;
+
+    public static boolean isLoggable(Level level) {
+        return Log.isLoggable(level);
     }
-
-    public static int v(String msg, Throwable th) {
-        return Log.v(TAG, msg, th);
-    }
-
-    public static int d(String msg) {
-        return Log.d(TAG, msg);
+    
+    public static void v(String msg) {
+    	Log.log(VERBOSE, msg);
     }
 
-    public static int d(String msg, Throwable th) {
-        return Log.d(TAG, msg, th);
+    public static void d(String msg) {
+    	Log.log(DEBUG, msg) ;
     }
 
-    public static int i(String msg) {
-        return Log.i(TAG, msg);
+    public static void d(String msg, Throwable t) {
+    	Log.log(DEBUG, msg, t);
     }
-
-    public static int i(String msg, Throwable th) {
-        return Log.i(TAG, msg, th);
+    
+    public static void i(String msg) {
+        Log.log(INFO, msg);
     }
 
-    public static int w(String msg) {
-        return Log.w(TAG, msg);
+    public static void i(String msg, Throwable t) {
+    	Log.log(INFO, msg, t);
     }
-
-    public static int w(String msg, Throwable th) {
-        return Log.w(TAG, msg, th);
+    
+    public static void w(String msg) {
+        Log.log(WARN, msg);
     }
 
-    public static int w(Throwable th) {
-        return Log.w(TAG, th);
+    public static void w(String msg, Throwable t) {
+    	Log.log(WARN, msg, t);
     }
-
-    public static int e(String msg) {
-        return Log.w(TAG, msg);
+    
+    public static void e(String msg) {
+        Log.log(ERROR, msg);
     }
-
-    public static int e(String msg, Throwable th) {
-        return Log.e(TAG, msg, th);
+    public static void e(String msg, Throwable t) {
+    	Log.log(ERROR, msg, t);
     }
-
 }
diff --git a/DaoCore/src/de/greenrobot/dao/DbUtils.java b/DaoCore/src/de/greenrobot/dao/DbUtils.java
index 24020feb..30bbe8d8 100644
--- a/DaoCore/src/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/DbUtils.java
@@ -24,9 +24,6 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-
 /** Database utils, for example to execute SQL scripts */
 // TODO add unit tests
 public class DbUtils {
@@ -41,8 +38,8 @@ public static void vacuum(Connection connection) throws SQLException {
      * @return number of statements executed.
      * @throws SQLException 
      */
-    public static int executeSqlScript(Context context, Connection connection, String assetFilename) throws IOException, SQLException {
-        return executeSqlScript(context, connection, assetFilename, true);
+    public static int executeSqlScript(Connection connection, InputStream in) throws IOException, SQLException {
+        return executeSqlScript(connection, in, true);
     }
 
     /**
@@ -54,18 +51,23 @@ public static int executeSqlScript(Context context, Connection connection, Strin
      * @return number of statements executed.
      * @throws SQLException 
      */
-    public static int executeSqlScript(Context context, Connection connection, String assetFilename, boolean transactional)
-            throws IOException, SQLException {
-        byte[] bytes = readAsset(context, assetFilename);
-        String sql = new String(bytes, "UTF-8");
-        String[] lines = sql.split(";(\\s)*[\n\r]");
-        int count;
-        if (transactional) {
-            count = executeSqlStatementsInTx(connection, lines);
-        } else {
-            count = executeSqlStatements(connection, lines);
+    public static int executeSqlScript(Connection connection, InputStream in, boolean transactional) throws IOException, SQLException {
+    	int count = 0;
+    	
+        try {
+        	byte[] bytes = readAllBytes(in);
+        	String sql = new String(bytes, "UTF-8");
+        	String[] lines = sql.split(";(\\s)*[\n\r]");
+        	if (transactional) {
+        		count = executeSqlStatementsInTx(connection, lines);
+        	} else {
+        		count = executeSqlStatements(connection, lines);
+        	}
+        	DaoLog.i("Executed " + count + " statements from SQL script");
+        } finally {
+            in.close();
         }
-        DaoLog.i("Executed " + count + " statements from SQL script '" + assetFilename + "'");
+        
         return count;
     }
 
@@ -123,15 +125,6 @@ public static int copyAllBytes(InputStream in, OutputStream out) throws IOExcept
         return out.toByteArray();
     }
 
-    public static byte[] readAsset(Context context, String filename) throws IOException {
-        InputStream in = context.getResources().getAssets().open(filename);
-        try {
-            return readAllBytes(in);
-        } finally {
-            in.close();
-        }
-    }
-
     public static void logTableDump(Connection connection, String tablename) {
 // FIXME need to JDBCfy this...
 //        Cursor cursor = connection.query(tablename, null, null, null, null, null, null);
diff --git a/DaoCore/src/de/greenrobot/dao/Property.java b/DaoCore/src/de/greenrobot/dao/Property.java
index 77923eb7..51588181 100644
--- a/DaoCore/src/de/greenrobot/dao/Property.java
+++ b/DaoCore/src/de/greenrobot/dao/Property.java
@@ -42,68 +42,80 @@ public Property(int ordinal, Class<?> type, String name, boolean primaryKey, Str
         this.columnName = columnName;
     }
 
-    /** Creates an "equal ('=')" condition  for this property. */
-    public WhereCondition eq(Object value) {
+    /** Creates an "equal ('=')" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition eq(Object value) throws DaoException {
         return new PropertyCondition(this, "=?", value);
     }
 
-    /** Creates an "not equal ('<>')" condition  for this property. */
-    public WhereCondition notEq(Object value) {
+    /** Creates an "not equal ('<>')" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition notEq(Object value) throws DaoException {
         return new PropertyCondition(this, "<>?", value);
     }
 
-    /** Creates an "LIKE" condition  for this property. */
-    public WhereCondition like(String value) {
+    /** Creates an "LIKE" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition like(String value) throws DaoException {
         return new PropertyCondition(this, " LIKE ?", value);
     }
 
-    /** Creates an "BETWEEN ... AND ..." condition  for this property. */
-    public WhereCondition between(Object value1, Object value2) {
+    /** Creates an "BETWEEN ... AND ..." condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition between(Object value1, Object value2) throws DaoException {
         Object[] values = { value1, value2 };
         return new PropertyCondition(this, " BETWEEN ? AND ?", values);
     }
 
-    /** Creates an "IN (..., ..., ...)" condition  for this property. */
-    public WhereCondition in(Object... inValues) {
+    /** Creates an "IN (..., ..., ...)" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition in(Object... inValues) throws DaoException {
         StringBuilder condition = new StringBuilder(" IN (");
         SqlUtils.appendPlaceholders(condition, inValues.length).append(')');
         return new PropertyCondition(this, condition.toString(), inValues);
     }
 
-    /** Creates an "IN (..., ..., ...)" condition  for this property. */
-    public WhereCondition in(Collection<?> inValues) {
+    /** Creates an "IN (..., ..., ...)" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition in(Collection<?> inValues) throws DaoException {
         return in(inValues.toArray());
     }
 
-    /** Creates an "NOT IN (..., ..., ...)" condition  for this property. */
-    public WhereCondition notIn(Object... notInValues) {
+    /** Creates an "NOT IN (..., ..., ...)" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition notIn(Object... notInValues) throws DaoException {
         StringBuilder condition = new StringBuilder(" NOT IN (");
         SqlUtils.appendPlaceholders(condition, notInValues.length).append(')');
         return new PropertyCondition(this, condition.toString(), notInValues);
     }
 
-    /** Creates an "NOT IN (..., ..., ...)" condition  for this property. */
-    public WhereCondition notIn(Collection<?> notInValues) {
+    /** Creates an "NOT IN (..., ..., ...)" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition notIn(Collection<?> notInValues) throws DaoException {
         return notIn(notInValues.toArray());
     }
 
-    /** Creates an "greater than ('>')" condition  for this property. */
-    public WhereCondition gt(Object value) {
+    /** Creates an "greater than ('>')" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition gt(Object value) throws DaoException {
         return new PropertyCondition(this, ">?", value);
     }
 
-    /** Creates an "less than ('<')" condition  for this property. */
-    public WhereCondition lt(Object value) {
+    /** Creates an "less than ('<')" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition lt(Object value) throws DaoException {
         return new PropertyCondition(this, "<?", value);
     }
 
-    /** Creates an "greater or equal ('>=')" condition  for this property. */
-    public WhereCondition ge(Object value) {
+    /** Creates an "greater or equal ('>=')" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition ge(Object value) throws DaoException {
         return new PropertyCondition(this, ">=?", value);
     }
 
-    /** Creates an "less or equal ('<=')" condition  for this property. */
-    public WhereCondition le(Object value) {
+    /** Creates an "less or equal ('<=')" condition  for this property. 
+     * @throws DaoException */
+    public WhereCondition le(Object value) throws DaoException {
         return new PropertyCondition(this, "<=?", value);
     }
 
diff --git a/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java b/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java
index af4c1708..f6707558 100644
--- a/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java
+++ b/DaoCore/src/de/greenrobot/dao/async/AsyncOperation.java
@@ -100,10 +100,11 @@ public Object getParameter() {
      * The operation's result after it has completed. Waits until a result is available.
      * 
      * @return The operation's result or null if the operation type does not produce any result.
+     * @throws DaoException 
      * @throws {@link AsyncDaoException} if the operation produced an exception
      * @see #waitForCompletion()
      */
-    public synchronized Object getResult() {
+    public synchronized Object getResult() throws DaoException {
         if (!completed) {
             waitForCompletion();
         }
@@ -138,7 +139,7 @@ public long getTimeCompleted() {
         return timeCompleted;
     }
 
-    public long getDuration() {
+    public long getDuration() throws DaoException {
         if (timeCompleted == 0) {
             throw new DaoException("This operation did not yet complete");
         } else {
@@ -159,8 +160,9 @@ public boolean isCompleted() {
      * rethrown as a {@link DaoException}.
      * 
      * @return Result if any, see {@link #getResult()}
+     * @throws DaoException 
      */
-    public synchronized Object waitForCompletion() {
+    public synchronized Object waitForCompletion() throws DaoException {
         while (!completed) {
             try {
                 wait();
@@ -176,8 +178,9 @@ public synchronized Object waitForCompletion() {
      * interrupted, any {@link InterruptedException} will be rethrown as a {@link DaoException}.
      * 
      * @return true if the operation completed in the given time frame.
+     * @throws DaoException 
      */
-    public synchronized boolean waitForCompletion(int maxMillis) {
+    public synchronized boolean waitForCompletion(int maxMillis) throws DaoException {
         if (!completed) {
             try {
                 wait(maxMillis);
diff --git a/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java b/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java
index bf0b4572..6e971345 100644
--- a/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java
+++ b/DaoCore/src/de/greenrobot/dao/async/AsyncOperationExecutor.java
@@ -25,14 +25,11 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
 import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.query.Query;
 
-class AsyncOperationExecutor implements Runnable, Handler.Callback {
+class AsyncOperationExecutor implements Runnable {
 
     private static ExecutorService executorService = Executors.newCachedThreadPool();
 
@@ -40,13 +37,11 @@
     private volatile boolean executorRunning;
     private volatile int maxOperationCountToMerge;
     private volatile AsyncOperationListener listener;
-    private volatile AsyncOperationListener listenerMainThread;
     private volatile int waitForMergeMillis;
 
     private int countOperationsEnqueued;
     private int countOperationsCompleted;
 
-    private Handler handlerMainThread;
     private int lastSequenceNumber;
 
     AsyncOperationExecutor() {
@@ -91,14 +86,6 @@ public void setListener(AsyncOperationListener listener) {
         this.listener = listener;
     }
 
-    public AsyncOperationListener getListenerMainThread() {
-        return listenerMainThread;
-    }
-
-    public void setListenerMainThread(AsyncOperationListener listenerMainThread) {
-        this.listenerMainThread = listenerMainThread;
-    }
-
     public synchronized boolean isCompleted() {
         return countOperationsEnqueued == countOperationsCompleted;
     }
@@ -106,8 +93,9 @@ public synchronized boolean isCompleted() {
     /**
      * Waits until all enqueued operations are complete. If the thread gets interrupted, any
      * {@link InterruptedException} will be rethrown as a {@link DaoException}.
+     * @throws DaoException 
      */
-    public synchronized void waitForCompletion() {
+    public synchronized void waitForCompletion() throws DaoException {
         while (!isCompleted()) {
             try {
                 wait();
@@ -122,8 +110,9 @@ public synchronized void waitForCompletion() {
      * gets interrupted, any {@link InterruptedException} will be rethrown as a {@link DaoException}.
      * 
      * @return true if operations completed in the given time frame.
+     * @throws DaoException 
      */
-    public synchronized boolean waitForCompletion(int maxMillis) {
+    public synchronized boolean waitForCompletion(int maxMillis) throws DaoException {
         if (!isCompleted()) {
             try {
                 wait(maxMillis);
@@ -241,13 +230,6 @@ private void handleOperationCompleted(AsyncOperation operation) {
         if (listenerToCall != null) {
             listenerToCall.onAsyncOperationCompleted(operation);
         }
-        if (listenerMainThread != null) {
-            if (handlerMainThread == null) {
-                handlerMainThread = new Handler(Looper.getMainLooper(), this);
-            }
-            Message msg = handlerMainThread.obtainMessage(1, operation);
-            handlerMainThread.sendMessage(msg);
-        }
         synchronized (this) {
             countOperationsCompleted++;
             if (countOperationsCompleted == countOperationsEnqueued) {
@@ -370,14 +352,4 @@ private void executeTransactionCallable(AsyncOperation operation) throws Excepti
         	connection.setAutoCommit( true );
         }
     }
-
-    @Override
-    public boolean handleMessage(Message msg) {
-        AsyncOperationListener listenerToCall = listenerMainThread;
-        if (listenerToCall != null) {
-            listenerToCall.onAsyncOperationCompleted((AsyncOperation) msg.obj);
-        }
-        return false;
-    }
-
 }
diff --git a/DaoCore/src/de/greenrobot/dao/async/AsyncSession.java b/DaoCore/src/de/greenrobot/dao/async/AsyncSession.java
index 6c9ebfe6..0563b83a 100644
--- a/DaoCore/src/de/greenrobot/dao/async/AsyncSession.java
+++ b/DaoCore/src/de/greenrobot/dao/async/AsyncSession.java
@@ -52,14 +52,6 @@ public void setListener(AsyncOperationListener listener) {
         executor.setListener(listener);
     }
 
-    public AsyncOperationListener getListenerMainThread() {
-        return executor.getListenerMainThread();
-    }
-
-    public void setListenerMainThread(AsyncOperationListener listenerMainThread) {
-        executor.setListenerMainThread(listenerMainThread);
-    }
-
     public boolean isCompleted() {
         return executor.isCompleted();
     }
@@ -67,8 +59,9 @@ public boolean isCompleted() {
     /**
      * Waits until all enqueued operations are complete. If the thread gets interrupted, any
      * {@link InterruptedException} will be rethrown as a {@link DaoException}.
+     * @throws DaoException 
      */
-    public void waitForCompletion() {
+    public void waitForCompletion() throws DaoException {
         executor.waitForCompletion();
     }
 
@@ -77,148 +70,177 @@ public void waitForCompletion() {
      * gets interrupted, any {@link InterruptedException} will be rethrown as a {@link DaoException}.
      * 
      * @return true if operations completed in the given time frame.
+     * @throws DaoException 
      */
-    public boolean waitForCompletion(int maxMillis) {
+    public boolean waitForCompletion(int maxMillis) throws DaoException {
         return executor.waitForCompletion(maxMillis);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insert(Object)}. */
-    public AsyncOperation insert(Object entity) {
+    /** Asynchronous version of {@link AbstractDao#insert(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation insert(Object entity) throws DaoException {
         return insert(entity, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insert(Object)}. */
-    public AsyncOperation insert(Object entity, int flags) {
+    /** Asynchronous version of {@link AbstractDao#insert(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation insert(Object entity, int flags) throws DaoException {
         return enqueueEntityOperation(OperationType.Insert, entity, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertInTx(Object...)}. */
-    public <E> AsyncOperation insertInTx(Class<E> entityClass, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#insertInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertInTx(Class<E> entityClass, E... entities) throws DaoException {
         return insertInTx(entityClass, 0, entities);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertInTx(Object...)}. */
-    public <E> AsyncOperation insertInTx(Class<E> entityClass, int flags, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#insertInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertInTx(Class<E> entityClass, int flags, E... entities) throws DaoException {
         return enqueEntityOperation(OperationType.InsertInTxArray, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertInTx(Iterable)}. */
-    public <E> AsyncOperation insertInTx(Class<E> entityClass, Iterable<E> entities) {
+    /** Asynchronous version of {@link AbstractDao#insertInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertInTx(Class<E> entityClass, Iterable<E> entities) throws DaoException {
         return insertInTx(entityClass, entities, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertInTx(Iterable)}. */
-    public <E> AsyncOperation insertInTx(Class<E> entityClass, Iterable<E> entities, int flags) {
+    /** Asynchronous version of {@link AbstractDao#insertInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertInTx(Class<E> entityClass, Iterable<E> entities, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.InsertInTxIterable, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertOrReplace(Object)}. */
-    public AsyncOperation insertOrReplace(Object entity) {
+    /** Asynchronous version of {@link AbstractDao#insertOrReplace(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation insertOrReplace(Object entity) throws DaoException {
         return insertOrReplace(entity, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertOrReplace(Object)}. */
-    public AsyncOperation insertOrReplace(Object entity, int flags) {
+    /** Asynchronous version of {@link AbstractDao#insertOrReplace(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation insertOrReplace(Object entity, int flags) throws DaoException {
         return enqueueEntityOperation(OperationType.InsertOrReplace, entity, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Object...)}. */
-    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, E... entities) throws DaoException {
         return insertOrReplaceInTx(entityClass, 0, entities);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Object...)}. */
-    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, int flags, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, int flags, E... entities) throws DaoException {
         return enqueEntityOperation(OperationType.InsertOrReplaceInTxArray, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Iterable)}. */
-    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, Iterable<E> entities) {
+    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, Iterable<E> entities) throws DaoException {
         return insertOrReplaceInTx(entityClass, entities, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Iterable)}. */
-    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, Iterable<E> entities, int flags) {
+    /** Asynchronous version of {@link AbstractDao#insertOrReplaceInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation insertOrReplaceInTx(Class<E> entityClass, Iterable<E> entities, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.InsertOrReplaceInTxIterable, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#update(Object)}. */
-    public AsyncOperation update(Object entity) {
+    /** Asynchronous version of {@link AbstractDao#update(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation update(Object entity) throws DaoException {
         return update(entity, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#update(Object)}. */
-    public AsyncOperation update(Object entity, int flags) {
+    /** Asynchronous version of {@link AbstractDao#update(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation update(Object entity, int flags) throws DaoException {
         return enqueueEntityOperation(OperationType.Update, entity, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#updateInTx(Object...)}. */
-    public <E> AsyncOperation updateInTx(Class<E> entityClass, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#updateInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation updateInTx(Class<E> entityClass, E... entities) throws DaoException {
         return updateInTx(entityClass, 0, entities);
     }
 
-    /** Asynchronous version of {@link AbstractDao#updateInTx(Object...)}. */
-    public <E> AsyncOperation updateInTx(Class<E> entityClass, int flags, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#updateInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation updateInTx(Class<E> entityClass, int flags, E... entities) throws DaoException {
         return enqueEntityOperation(OperationType.UpdateInTxArray, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#updateInTx(Iterable)}. */
-    public <E> AsyncOperation updateInTx(Class<E> entityClass, Iterable<E> entities) {
+    /** Asynchronous version of {@link AbstractDao#updateInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation updateInTx(Class<E> entityClass, Iterable<E> entities) throws DaoException {
         return updateInTx(entityClass, entities, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#updateInTx(Iterable)}. */
-    public <E> AsyncOperation updateInTx(Class<E> entityClass, Iterable<E> entities, int flags) {
+    /** Asynchronous version of {@link AbstractDao#updateInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation updateInTx(Class<E> entityClass, Iterable<E> entities, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.UpdateInTxIterable, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#delete(Object)}. */
-    public AsyncOperation delete(Object entity) {
+    /** Asynchronous version of {@link AbstractDao#delete(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation delete(Object entity) throws DaoException {
         return delete(entity, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#delete(Object)}. */
-    public AsyncOperation delete(Object entity, int flags) {
+    /** Asynchronous version of {@link AbstractDao#delete(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation delete(Object entity, int flags) throws DaoException {
         return enqueueEntityOperation(OperationType.Delete, entity, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteByKey(Object)}. */
-    public AsyncOperation deleteByKey(Object key) {
+    /** Asynchronous version of {@link AbstractDao#deleteByKey(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation deleteByKey(Object key) throws DaoException {
         return deleteByKey(key, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteByKey(Object)}. */
-    public AsyncOperation deleteByKey(Object key, int flags) {
+    /** Asynchronous version of {@link AbstractDao#deleteByKey(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation deleteByKey(Object key, int flags) throws DaoException {
         return enqueueEntityOperation(OperationType.DeleteByKey, key, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteInTx(Object...)}. */
-    public <E> AsyncOperation deleteInTx(Class<E> entityClass, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#deleteInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation deleteInTx(Class<E> entityClass, E... entities) throws DaoException {
         return deleteInTx(entityClass, 0, entities);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteInTx(Object...)}. */
-    public <E> AsyncOperation deleteInTx(Class<E> entityClass, int flags, E... entities) {
+    /** Asynchronous version of {@link AbstractDao#deleteInTx(Object...)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation deleteInTx(Class<E> entityClass, int flags, E... entities) throws DaoException {
         return enqueEntityOperation(OperationType.DeleteInTxArray, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteInTx(Iterable)}. */
-    public <E> AsyncOperation deleteInTx(Class<E> entityClass, Iterable<E> entities) {
+    /** Asynchronous version of {@link AbstractDao#deleteInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation deleteInTx(Class<E> entityClass, Iterable<E> entities) throws DaoException {
         return deleteInTx(entityClass, entities, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteInTx(Iterable)}. */
-    public <E> AsyncOperation deleteInTx(Class<E> entityClass, Iterable<E> entities, int flags) {
+    /** Asynchronous version of {@link AbstractDao#deleteInTx(Iterable)}. 
+     * @throws DaoException */
+    public <E> AsyncOperation deleteInTx(Class<E> entityClass, Iterable<E> entities, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.DeleteInTxIterable, entityClass, entities, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteAll()}. */
-    public <E> AsyncOperation deleteAll(Class<E> entityClass) {
+    /** Asynchronous version of {@link AbstractDao#deleteAll()}. 
+     * @throws DaoException */
+    public <E> AsyncOperation deleteAll(Class<E> entityClass) throws DaoException {
         return deleteAll(entityClass, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#deleteAll()}. */
-    public <E> AsyncOperation deleteAll(Class<E> entityClass, int flags) {
+    /** Asynchronous version of {@link AbstractDao#deleteAll()}. 
+     * @throws DaoException */
+    public <E> AsyncOperation deleteAll(Class<E> entityClass, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.DeleteAll, entityClass, null, flags);
     }
 
@@ -262,43 +284,51 @@ public AsyncOperation queryUnique(Query<?> query, int flags) {
         return enqueueDatabaseOperation(OperationType.QueryUnique, query, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#load(Object)}. */
-    public AsyncOperation load(Class<?> entityClass, Object key) {
+    /** Asynchronous version of {@link AbstractDao#load(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation load(Class<?> entityClass, Object key) throws DaoException {
         return load(entityClass, key, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#load(Object)}. */
-    public AsyncOperation load(Class<?> entityClass, Object key, int flags) {
+    /** Asynchronous version of {@link AbstractDao#load(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation load(Class<?> entityClass, Object key, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.Load, entityClass, key, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#loadAll()}. */
-    public AsyncOperation loadAll(Class<?> entityClass) {
+    /** Asynchronous version of {@link AbstractDao#loadAll()}. 
+     * @throws DaoException */
+    public AsyncOperation loadAll(Class<?> entityClass) throws DaoException {
         return loadAll(entityClass, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#loadAll()}. */
-    public AsyncOperation loadAll(Class<?> entityClass, int flags) {
+    /** Asynchronous version of {@link AbstractDao#loadAll()}. 
+     * @throws DaoException */
+    public AsyncOperation loadAll(Class<?> entityClass, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.LoadAll, entityClass, null, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#count()}. */
-    public AsyncOperation count(Class<?> entityClass) {
+    /** Asynchronous version of {@link AbstractDao#count()}. 
+     * @throws DaoException */
+    public AsyncOperation count(Class<?> entityClass) throws DaoException {
         return count(entityClass, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#count()}. */
-    public AsyncOperation count(Class<?> entityClass, int flags) {
+    /** Asynchronous version of {@link AbstractDao#count()}. 
+     * @throws DaoException */
+    public AsyncOperation count(Class<?> entityClass, int flags) throws DaoException {
         return enqueEntityOperation(OperationType.Count, entityClass, null, flags);
     }
 
-    /** Asynchronous version of {@link AbstractDao#refresh(Object)}. */
-    public AsyncOperation refresh(Object entity) {
+    /** Asynchronous version of {@link AbstractDao#refresh(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation refresh(Object entity) throws DaoException {
         return refresh(entity, 0);
     }
 
-    /** Asynchronous version of {@link AbstractDao#refresh(Object)}. */
-    public AsyncOperation refresh(Object entity, int flags) {
+    /** Asynchronous version of {@link AbstractDao#refresh(Object)}. 
+     * @throws DaoException */
+    public AsyncOperation refresh(Object entity, int flags) throws DaoException {
         return enqueueEntityOperation(OperationType.Refresh, entity, flags);
     }
 
@@ -308,11 +338,11 @@ private AsyncOperation enqueueDatabaseOperation(OperationType type, Object param
         return operation;
     }
 
-    private AsyncOperation enqueueEntityOperation(OperationType type, Object entity, int flags) {
+    private AsyncOperation enqueueEntityOperation(OperationType type, Object entity, int flags) throws DaoException {
         return enqueEntityOperation(type, entity.getClass(), entity, flags);
     }
 
-    private <E> AsyncOperation enqueEntityOperation(OperationType type, Class<E> entityClass, Object param, int flags) {
+    private <E> AsyncOperation enqueEntityOperation(OperationType type, Class<E> entityClass, Object param, int flags) throws DaoException {
         AbstractDao<?, ?> dao = daoSession.getDao(entityClass);
         AsyncOperation operation = new AsyncOperation(type, dao, param, flags);
         executor.enqueue(operation);
diff --git a/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java b/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
index ce5cd101..a027db30 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/DaoConfig.java
@@ -50,7 +50,7 @@
 
     private IdentityScope<?, ?> identityScope;
 
-    public DaoConfig(Connection connection, Class<? extends AbstractDao<?, ?>> daoClass) {
+    public DaoConfig(Connection connection, Class<? extends AbstractDao<?, ?>> daoClass) throws DaoException {
         this.connection = connection;
         try {
             this.tablename = (String) daoClass.getField("TABLENAME").get(null);
@@ -96,7 +96,7 @@ public DaoConfig(Connection connection, Class<? extends AbstractDao<?, ?>> daoCl
     }
 
     private static Property[] reflectProperties(Class<? extends AbstractDao<?, ?>> daoClass)
-            throws ClassNotFoundException, IllegalArgumentException, IllegalAccessException {
+            throws ClassNotFoundException, IllegalArgumentException, IllegalAccessException, DaoException {
         Class<?> propertiesClass = Class.forName(daoClass.getName() + "$Properties");
         Field[] fields = propertiesClass.getDeclaredFields();
 
diff --git a/DaoCore/src/de/greenrobot/dao/internal/FastCursor.java b/DaoCore/src/de/greenrobot/dao/internal/FastCursor.java
deleted file mode 100644
index d43e97f6..00000000
--- a/DaoCore/src/de/greenrobot/dao/internal/FastCursor.java
+++ /dev/null
@@ -1,260 +0,0 @@
-/*
- * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package de.greenrobot.dao.internal;
-
-import android.content.ContentResolver;
-import android.database.CharArrayBuffer;
-import android.database.ContentObserver;
-import android.database.Cursor;
-import android.database.CursorWindow;
-import android.database.DataSetObserver;
-import android.net.Uri;
-import android.os.Bundle;
-
-/** Internal class used by greenDAO. */
-final public class FastCursor implements Cursor {
-
-    private final CursorWindow window;
-    private int position;
-    private final int count;
-
-    public FastCursor(CursorWindow window) {
-        this.window = window;
-        count = window.getNumRows();
-    }
-
-    @Override
-    public int getCount() {
-        return window.getNumRows();
-    }
-
-    @Override
-    public int getPosition() {
-        return position;
-    }
-
-    @Override
-    public boolean move(int offset) {
-        return moveToPosition(position + offset);
-    }
-
-    @Override
-    public boolean moveToPosition(int position) {
-        if (position >= 0 && position < count) {
-            this.position = position;
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public boolean moveToFirst() {
-        position = 0;
-        return count > 0;
-    }
-
-    @Override
-    public boolean moveToLast() {
-        if (count > 0) {
-            position = count - 1;
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public boolean moveToNext() {
-        if (position < count - 1) {
-            position++;
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public boolean moveToPrevious() {
-        if (position > 0) {
-            position--;
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public boolean isFirst() {
-        return position == 0;
-    }
-
-    @Override
-    public boolean isLast() {
-        return position == count - 1;
-    }
-
-    @Override
-    public boolean isBeforeFirst() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public boolean isAfterLast() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int getColumnIndex(String columnName) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int getColumnIndexOrThrow(String columnName) throws IllegalArgumentException {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public String getColumnName(int columnIndex) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public String[] getColumnNames() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int getColumnCount() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public byte[] getBlob(int columnIndex) {
-        return window.getBlob(position, columnIndex);
-    }
-
-    @Override
-    public String getString(int columnIndex) {
-        return window.getString(position, columnIndex);
-    }
-
-    @Override
-    public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public short getShort(int columnIndex) {
-        return window.getShort(position, columnIndex);
-    }
-
-    @Override
-    public int getInt(int columnIndex) {
-        return window.getInt(position, columnIndex);
-    }
-
-    @Override
-    public long getLong(int columnIndex) {
-        return window.getLong(position, columnIndex);
-    }
-
-    @Override
-    public float getFloat(int columnIndex) {
-        return window.getFloat(position, columnIndex);
-    }
-
-    @Override
-    public double getDouble(int columnIndex) {
-        return window.getDouble(position, columnIndex);
-    }
-
-    @Override
-    public boolean isNull(int columnIndex) {
-        return window.isNull(position, columnIndex);
-    }
-
-    @Override
-    public void deactivate() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public boolean requery() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public void close() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public boolean isClosed() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public void registerContentObserver(ContentObserver observer) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public void unregisterContentObserver(ContentObserver observer) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public void registerDataSetObserver(DataSetObserver observer) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public void unregisterDataSetObserver(DataSetObserver observer) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public void setNotificationUri(ContentResolver cr, Uri uri) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public boolean getWantsAllOnMoveCalls() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public Bundle getExtras() {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public Bundle respond(Bundle extras) {
-        throw new UnsupportedOperationException();
-    }
-
-    /** Since API level 11 */
-    public int getType(int columnIndex) {
-        throw new UnsupportedOperationException();
-    }
-
-    /** Since API level 19 */
-    public Uri getNotificationUri() {
-        return null;
-    }
-
-}
diff --git a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
index fe1fd406..55b47aa8 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
@@ -93,8 +93,9 @@ public static String createSqlInsert(String insertInto, String tablename, String
         return builder.toString();
     }
 
-    /** Creates an select for given columns with a trailing space */
-    public static String createSqlSelect(String tablename, String tableAlias, String[] columns) {
+    /** Creates an select for given columns with a trailing space 
+     * @throws DaoException */
+    public static String createSqlSelect(String tablename, String tableAlias, String[] columns) throws DaoException {
         StringBuilder builder = new StringBuilder("SELECT ");
         if (tableAlias == null || tableAlias.length() < 0) {
             throw new DaoException("Table alias required");
diff --git a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
index 659b94a8..3d837503 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/TableStatements.java
@@ -19,6 +19,8 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 
+import de.greenrobot.dao.DaoException;
+
 /** Helper class to create SQL statements for specific tables (used by greenDAO internally). */
 public class TableStatements {
     private final Connection connection;
@@ -75,16 +77,18 @@ public PreparedStatement getUpdateStatement() throws SQLException {
         return updateStatement;
     }
 
-    /** ends with an space to simplify appending to this string. */
-    public String getSelectAll() {
+    /** ends with an space to simplify appending to this string. 
+     * @throws DaoException */
+    public String getSelectAll() throws DaoException {
         if (selectAll == null) {
             selectAll = SqlUtils.createSqlSelect(tablename, "T", allColumns);
         }
         return selectAll;
     }
 
-    /** ends with an space to simplify appending to this string. */
-    public String getSelectKeys() {
+    /** ends with an space to simplify appending to this string. 
+     * @throws DaoException */
+    public String getSelectKeys() throws DaoException {
         if (selectKeys == null) {
             selectKeys = SqlUtils.createSqlSelect(tablename, "T", pkColumns);
         }
@@ -92,7 +96,7 @@ public String getSelectKeys() {
     }
 
     // TODO precompile
-    public String getSelectByKey() {
+    public String getSelectByKey() throws DaoException {
         if (selectByKey == null) {
             StringBuilder builder = new StringBuilder(getSelectAll());
             builder.append("WHERE ");
@@ -102,7 +106,7 @@ public String getSelectByKey() {
         return selectByKey;
     }
 
-    public String getSelectByRowId() {
+    public String getSelectByRowId() throws DaoException {
         if (selectByRowId == null) {
             selectByRowId = getSelectAll() + "WHERE ROWID=?";
         }
diff --git a/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java b/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
index 2569011f..1190bdfe 100644
--- a/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
+++ b/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
@@ -63,8 +63,9 @@ protected AbstractQuery(AbstractDao<T, ?> dao, String sql, String[] parameters)
 
     /**
      * Sets the parameter (0 based) using the position in which it was added during building the query.
+     * @throws DaoException 
      */
-    public void setParameter(int index, Object parameter) {
+    public void setParameter(int index, Object parameter) throws DaoException {
         checkThread();
         if (parameter != null) {
             parameters[index] = parameter.toString();
@@ -73,7 +74,7 @@ public void setParameter(int index, Object parameter) {
         }
     }
 
-    protected void checkThread() {
+    protected void checkThread() throws DaoException {
         if (Thread.currentThread() != ownerThread) {
             throw new DaoException(
                     "Method may be called only in owner thread, use forCurrentThread to get an instance for this thread");
diff --git a/DaoCore/src/de/greenrobot/dao/query/AbstractQueryData.java b/DaoCore/src/de/greenrobot/dao/query/AbstractQueryData.java
index 7a4736ec..03a696e1 100644
--- a/DaoCore/src/de/greenrobot/dao/query/AbstractQueryData.java
+++ b/DaoCore/src/de/greenrobot/dao/query/AbstractQueryData.java
@@ -1,22 +1,22 @@
 package de.greenrobot.dao.query;
 
 import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.Map;
 
-import android.os.Process;
-import android.util.SparseArray;
 import de.greenrobot.dao.AbstractDao;
 
 abstract class AbstractQueryData<T, Q extends AbstractQuery<T>> {
     final String sql;
     final AbstractDao<T, ?> dao;
     final String[] initialValues;
-    final SparseArray<WeakReference<Q>> queriesForThreads;
+    final Map<Long, WeakReference<Q>> queriesForThreads;
 
     AbstractQueryData(AbstractDao<T, ?> dao, String sql, String[] initialValues) {
         this.dao = dao;
         this.sql = sql;
         this.initialValues = initialValues;
-        queriesForThreads = new SparseArray<WeakReference<Q>>();
+        queriesForThreads = new HashMap<Long, WeakReference<Q>>();
     }
 
     /** Just an optimized version, which performs faster if the current thread is already the query's owner thread. */
@@ -30,7 +30,7 @@ Q forCurrentThread(Q query) {
     }
 
     Q forCurrentThread() {
-        int threadId = Process.myTid();
+        long threadId = Thread.currentThread().getId();
         synchronized (queriesForThreads) {
             WeakReference<Q> queryRef = queriesForThreads.get(threadId);
             Q query = queryRef != null ? queryRef.get() : null;
@@ -50,8 +50,8 @@ Q forCurrentThread() {
     void gc() {
         synchronized (queriesForThreads) {
             for (int i = queriesForThreads.size() - 1; i >= 0; i--) {
-                if (queriesForThreads.valueAt(i).get() == null) {
-                    queriesForThreads.remove(queriesForThreads.keyAt(i));
+                if (queriesForThreads.get(i) == null) {
+                    queriesForThreads.remove(i);
                 }
             }
         }
diff --git a/DaoCore/src/de/greenrobot/dao/query/LazyList.java b/DaoCore/src/de/greenrobot/dao/query/LazyList.java
index 38ecfc31..3e04c4de 100644
--- a/DaoCore/src/de/greenrobot/dao/query/LazyList.java
+++ b/DaoCore/src/de/greenrobot/dao/query/LazyList.java
@@ -149,8 +149,9 @@ public void close() {
         lock = new ReentrantLock();
     }
 
-    /** Loads the remaining entities (if any) that were not loaded before. Applies to cached lazy lists only. */
-    public void loadRemaining() {
+    /** Loads the remaining entities (if any) that were not loaded before. Applies to cached lazy lists only. 
+     * @throws DaoException */
+    public void loadRemaining() throws DaoException {
         checkCached();
         int size = entities.size();
         for (int i = 0; i < size; i++) {
@@ -158,7 +159,7 @@ public void loadRemaining() {
         }
     }
 
-    protected void checkCached() {
+    protected void checkCached() throws DaoException {
         if (entities == null) {
             throw new DaoException("This operation only works with cached lazy lists");
         }
@@ -226,13 +227,27 @@ public void clear() {
 
     @Override
     public boolean contains(Object object) {
-        loadRemaining();
+        try
+		{
+			loadRemaining();
+		}
+		catch ( DaoException e )
+		{
+			e.printStackTrace();
+		}
         return entities.contains(object);
     }
 
     @Override
     public boolean containsAll(Collection<?> collection) {
-        loadRemaining();
+        try
+		{
+			loadRemaining();
+		}
+		catch ( DaoException e )
+		{
+			e.printStackTrace();
+		}
         return entities.containsAll(collection);
     }
 
@@ -286,7 +301,14 @@ protected E loadEntity(int location) throws SQLException {
 
     @Override
     public int indexOf(Object object) {
-        loadRemaining();
+        try
+		{
+			loadRemaining();
+		}
+		catch ( DaoException e )
+		{
+			e.printStackTrace();
+		}
         return entities.indexOf(object);
     }
 
@@ -302,7 +324,14 @@ public boolean isEmpty() {
 
     @Override
     public int lastIndexOf(Object object) {
-        loadRemaining();
+        try
+		{
+			loadRemaining();
+		}
+		catch ( DaoException e )
+		{
+			e.printStackTrace();
+		}
         return entities.lastIndexOf(object);
     }
 
@@ -353,7 +382,14 @@ public int size() {
 
     @Override
     public List<E> subList(int start, int end) {
-        checkCached();
+        try
+		{
+			checkCached();
+		}
+		catch ( DaoException e )
+		{
+			e.printStackTrace();
+		}
         for (int i = start; i < end; i++) {
             entities.get(i);
         }
@@ -362,13 +398,27 @@ public int size() {
 
     @Override
     public Object[] toArray() {
-        loadRemaining();
+        try
+		{
+			loadRemaining();
+		}
+		catch ( DaoException e )
+		{
+			e.printStackTrace();
+		}
         return entities.toArray();
     }
 
     @Override
     public <T> T[] toArray(T[] array) {
-        loadRemaining();
+        try
+		{
+			loadRemaining();
+		}
+		catch ( DaoException e )
+		{
+			e.printStackTrace();
+		}
         return entities.toArray(array);
     }
 
diff --git a/DaoCore/src/de/greenrobot/dao/query/Query.java b/DaoCore/src/de/greenrobot/dao/query/Query.java
index 2066b131..2a78240c 100644
--- a/DaoCore/src/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/de/greenrobot/dao/query/Query.java
@@ -84,8 +84,9 @@ private Query(QueryData<T> queryData, AbstractDao<T, ?> dao, String sql, String[
 
     /**
      * Sets the parameter (0 based) using the position in which it was added during building the query.
+     * @throws DaoException 
      */
-    public void setParameter(int index, Object parameter) {
+    public void setParameter(int index, Object parameter) throws DaoException {
         if (index >= 0 && (index == limitPosition || index == offsetPosition)) {
             throw new IllegalArgumentException("Illegal parameter index: " + index);
         }
@@ -95,8 +96,9 @@ public void setParameter(int index, Object parameter) {
     /**
      * Sets the limit of the maximum number of results returned by this Query. {@link QueryBuilder#limit(int)} must have
      * been called on the QueryBuilder that created this Query object.
+     * @throws DaoException 
      */
-    public void setLimit(int limit) {
+    public void setLimit(int limit) throws DaoException {
         checkThread();
         if (limitPosition == -1) {
             throw new IllegalStateException("Limit must be set with QueryBuilder before it can be used here");
@@ -107,8 +109,9 @@ public void setLimit(int limit) {
     /**
      * Sets the offset for results returned by this Query. {@link QueryBuilder#offset(int)} must have been called on the
      * QueryBuilder that created this Query object.
+     * @throws DaoException 
      */
-    public void setOffset(int offset) {
+    public void setOffset(int offset) throws DaoException {
         checkThread();
         if (offsetPosition == -1) {
             throw new IllegalStateException("Offset must be set with QueryBuilder before it can be used here");
diff --git a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
index 3bd4a659..98c92e15 100644
--- a/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
+++ b/DaoCore/src/de/greenrobot/dao/query/QueryBuilder.java
@@ -94,8 +94,9 @@ private void checkOrderBuilder() {
     /**
      * Adds the given conditions to the where clause using an logical AND. To create new conditions, use the properties
      * given in the generated dao classes.
+     * @throws DaoException 
      */
-    public QueryBuilder<T> where(WhereCondition cond, WhereCondition... condMore) {
+    public QueryBuilder<T> where(WhereCondition cond, WhereCondition... condMore) throws DaoException {
         whereConditions.add(cond);
         for (WhereCondition whereCondition : condMore) {
             checkCondition(whereCondition);
@@ -107,8 +108,9 @@ private void checkOrderBuilder() {
     /**
      * Adds the given conditions to the where clause using an logical OR. To create new conditions, use the properties
      * given in the generated dao classes.
+     * @throws DaoException 
      */
-    public QueryBuilder<T> whereOr(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore) {
+    public QueryBuilder<T> whereOr(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore) throws DaoException {
         whereConditions.add(or(cond1, cond2, condMore));
         return this;
     }
@@ -117,8 +119,9 @@ private void checkOrderBuilder() {
      * Creates a WhereCondition by combining the given conditions using OR. The returned WhereCondition must be used
      * inside {@link #where(WhereCondition, WhereCondition...)} or
      * {@link #whereOr(WhereCondition, WhereCondition, WhereCondition...)}.
+     * @throws DaoException 
      */
-    public WhereCondition or(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore) {
+    public WhereCondition or(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore) throws DaoException {
         return combineWhereConditions(" OR ", cond1, cond2, condMore);
     }
 
@@ -126,13 +129,14 @@ public WhereCondition or(WhereCondition cond1, WhereCondition cond2, WhereCondit
      * Creates a WhereCondition by combining the given conditions using AND. The returned WhereCondition must be used
      * inside {@link #where(WhereCondition, WhereCondition...)} or
      * {@link #whereOr(WhereCondition, WhereCondition, WhereCondition...)}.
+     * @throws DaoException 
      */
-    public WhereCondition and(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore) {
+    public WhereCondition and(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore) throws DaoException {
         return combineWhereConditions(" AND ", cond1, cond2, condMore);
     }
 
     protected WhereCondition combineWhereConditions(String combineOp, WhereCondition cond1, WhereCondition cond2,
-            WhereCondition... condMore) {
+            WhereCondition... condMore) throws DaoException {
         StringBuilder builder = new StringBuilder("(");
         List<Object> combinedValues = new ArrayList<Object>();
 
@@ -148,13 +152,13 @@ protected WhereCondition combineWhereConditions(String combineOp, WhereCondition
         return new WhereCondition.StringCondition(builder.toString(), combinedValues.toArray());
     }
 
-    protected void addCondition(StringBuilder builder, List<Object> values, WhereCondition condition) {
+    protected void addCondition(StringBuilder builder, List<Object> values, WhereCondition condition) throws DaoException {
         checkCondition(condition);
         condition.appendTo(builder, tablePrefix);
         condition.appendValuesTo(values);
     }
 
-    protected void checkCondition(WhereCondition whereCondition) {
+    protected void checkCondition(WhereCondition whereCondition) throws DaoException {
         if (whereCondition instanceof PropertyCondition) {
             checkProperty(((PropertyCondition) whereCondition).property);
         }
@@ -174,19 +178,21 @@ protected void checkCondition(WhereCondition whereCondition) {
         // return new QueryBuilder<J>(joinDao, "TX");
     }
 
-    /** Adds the given properties to the ORDER BY section using ascending order. */
-    public QueryBuilder<T> orderAsc(Property... properties) {
+    /** Adds the given properties to the ORDER BY section using ascending order. 
+     * @throws DaoException */
+    public QueryBuilder<T> orderAsc(Property... properties) throws DaoException {
         orderAscOrDesc(" ASC", properties);
         return this;
     }
 
-    /** Adds the given properties to the ORDER BY section using descending order. */
-    public QueryBuilder<T> orderDesc(Property... properties) {
+    /** Adds the given properties to the ORDER BY section using descending order. 
+     * @throws DaoException */
+    public QueryBuilder<T> orderDesc(Property... properties) throws DaoException {
         orderAscOrDesc(" DESC", properties);
         return this;
     }
 
-    private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... properties) {
+    private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... properties) throws DaoException {
         for (Property property : properties) {
             checkOrderBuilder();
             append(orderBuilder, property);
@@ -197,8 +203,9 @@ private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... proper
         }
     }
 
-    /** Adds the given properties to the ORDER BY section using the given custom order. */
-    public QueryBuilder<T> orderCustom(Property property, String customOrderForProperty) {
+    /** Adds the given properties to the ORDER BY section using the given custom order. 
+     * @throws DaoException */
+    public QueryBuilder<T> orderCustom(Property property, String customOrderForProperty) throws DaoException {
         checkOrderBuilder();
         append(orderBuilder, property).append(' ');
         orderBuilder.append(customOrderForProperty);
@@ -215,13 +222,13 @@ private void orderAscOrDesc(String ascOrDescWithLeadingSpace, Property... proper
         return this;
     }
 
-    protected StringBuilder append(StringBuilder builder, Property property) {
+    protected StringBuilder append(StringBuilder builder, Property property) throws DaoException {
         checkProperty(property);
         builder.append(tablePrefix).append('.').append('\'').append(property.columnName).append('\'');
         return builder;
     }
 
-    protected void checkProperty(Property property) {
+    protected void checkProperty(Property property) throws DaoException {
         if (dao != null) {
             Property[] properties = dao.getProperties();
             boolean found = false;
@@ -255,8 +262,9 @@ protected void checkProperty(Property property) {
     /**
      * Builds a reusable query object (Query objects can be executed more efficiently than creating a QueryBuilder for
      * each execution.
+     * @throws DaoException 
      */
-    public Query<T> build() {
+    public Query<T> build() throws DaoException {
         String select;
         if (joinBuilder == null || joinBuilder.length() == 0) {
             select = InternalQueryDaoAccess.getStatements(dao).getSelectAll();
diff --git a/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java b/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
index 2a8b626a..3a687924 100644
--- a/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
+++ b/DaoCore/src/de/greenrobot/dao/query/WhereCondition.java
@@ -70,7 +70,7 @@ public void appendValuesTo(List<Object> valuesTarget) {
 
     public static class PropertyCondition extends AbstractCondition {
 
-        private static Object checkValueForType(Property property, Object value) {
+        private static Object checkValueForType(Property property, Object value) throws DaoException {
             if (value != null && value.getClass().isArray()) {
                 throw new DaoException("Illegal value: found array, but simple object required");
             }
@@ -107,7 +107,7 @@ private static Object checkValueForType(Property property, Object value) {
             return value;
         }
 
-        private static Object[] checkValuesForType(Property property, Object[] values) {
+        private static Object[] checkValuesForType(Property property, Object[] values) throws DaoException {
             for (int i = 0; i < values.length; i++) {
                 values[i] = checkValueForType(property, values[i]);
             }
@@ -122,13 +122,13 @@ public PropertyCondition(Property property, String op) {
             this.op = op;
         }
 
-        public PropertyCondition(Property property, String op, Object value) {
+        public PropertyCondition(Property property, String op, Object value) throws DaoException {
             super(checkValueForType(property, value));
             this.property = property;
             this.op = op;
         }
 
-        public PropertyCondition(Property property, String op, Object[] values) {
+        public PropertyCondition(Property property, String op, Object[] values) throws DaoException {
             super(checkValuesForType(property, values));
             this.property = property;
             this.op = op;
diff --git a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java b/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
index edc01f0c..a1de6685 100644
--- a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
+++ b/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
@@ -1,6 +1,5 @@
 package de.greenrobot.platform.java.util;
 
-import java.io.File;
 import java.sql.Connection;
 import java.sql.Driver;
 import java.sql.DriverManager;
@@ -8,16 +7,8 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import android.util.Log;
-
 public class JDBCUtils
 {
-	public static String driverName = "org.sqldroid.SQLDroidDriver";
-	public static String JDBC_URL_PREFIX = "jdbc:sqlite:";
-	public static String packageName = "de.greenrobot.daotest";
-	public static String DB_DIRECTORY = "/data/data/" + packageName + "/databases/";
-	public static String url = JDBC_URL_PREFIX + DB_DIRECTORY;
-
 	public static ResultSet query( Connection connection, String sql ) throws SQLException
 	{
 		return query( connection, sql, new Object[] {} );
@@ -89,16 +80,16 @@ public static boolean isNull( ResultSet resultSet, int index ) throws SQLExcepti
 	public static int getCount( ResultSet resultSet )
 	{
 		int count = 0;
-		if (resultSet != null)
+		if ( resultSet != null )
 		{
-			try 
+			try
 			{
-				resultSet.beforeFirst();  
+				resultSet.beforeFirst();
 				resultSet.last();
 				count = resultSet.getRow();
 				resultSet.beforeFirst();
-			} 
-			catch (SQLException e)
+			}
+			catch ( SQLException e )
 			{
 				count = 0;
 			}
@@ -130,26 +121,51 @@ public static Connection connect( String driverName, String connectionString ) t
 			e.printStackTrace();
 		}
 		
-		Log.i("JDBCUtils", "connecting: "+connectionString);
 		return DriverManager.getConnection( connectionString );
 	}
 	
-	public static Connection connect( String db ) throws SQLException
+	public static final void appendValueToSql( StringBuilder sql, Object value )
 	{
-		// setup
-		File f = new File( DB_DIRECTORY+db );
-		if ( f.exists() )
+		if ( value == null )
 		{
-			f.delete();
+			sql.append( "NULL" );
+		}
+		else if ( value instanceof Boolean )
+		{
+			Boolean bool = (Boolean) value;
+			if ( bool )
+			{
+				sql.append( '1' );
+			}
+			else
+			{
+				sql.append( '0' );
+			}
 		}
 		else
 		{
-			if ( null != f.getParent() )
+			appendEscapedSQLString( sql, value.toString() );
+		}
+	}
+	
+	public static void appendEscapedSQLString( StringBuilder sb, String sqlString )
+	{
+		sb.append( '\'' );
+		if ( sqlString.indexOf( '\'' ) != -1 )
+		{
+			int length = sqlString.length();
+			for ( int i = 0; i < length; i++ )
 			{
-				f.getParentFile().mkdirs();
+				char c = sqlString.charAt( i );
+				if ( c == '\'' )
+				{
+					sb.append( '\'' );
+				}
+				sb.append( c );
 			}
 		}
-
-		return connect( driverName, url + db );
+		else
+			sb.append( sqlString );
+		sb.append( '\'' );
 	}
 }
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index e6560421..162349ee 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -26,6 +26,7 @@ import java.sql.ResultSet;
 import de.greenrobot.platform.java.util.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 <#list schema.entities as entity>
@@ -81,6 +82,8 @@ public class DaoMaster extends AbstractDaoMaster {
 			return this.connection;    	
     	}
     	
+		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
+
     	public abstract void onCreate(Connection connection) throws SQLException;
 
     	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
@@ -127,7 +130,7 @@ public class DaoMaster extends AbstractDaoMaster {
         }
     }
     
-    public DaoMaster(Connection connection) {
+    public DaoMaster(Connection connection) throws DaoException {
         super(connection, SCHEMA_VERSION);
 <#list schema.entities as entity>
         registerDaoClass(${entity.classNameDao}.class);
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 32c6a69a..fa9a1c64 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -181,7 +181,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     }
 </#if>
 
-    public void set${toOne.name?cap_first}(${toOne.targetEntity.className} ${toOne.name}) {
+    public void set${toOne.name?cap_first}(${toOne.targetEntity.className} ${toOne.name}) throws DaoException {
 <#if toOne.fkProperties[0].notNull>
         if (${toOne.name} == null) {
             throw new DaoException("To-one property '${toOne.fkProperties[0].propertyName}' has not-null constraint; cannot set to-one to null");
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index d1604d54..3026d970 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -110,6 +110,8 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
                 if (!javaFilename.exists()) {
                     generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
                 } else {
+                	javaFilename.delete();
+                	generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
                     System.out.println("Skipped " + javaFilename.getCanonicalPath());
                 }
             }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
index 0794a342..9721ae37 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/DaoMaster.java
@@ -7,6 +7,7 @@
 import de.greenrobot.platform.java.util.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daotest.SimpleEntityDao;
@@ -92,6 +93,8 @@ public Connection getConnection() throws SQLException {
 			return this.connection;    	
     	}
     	
+		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
+
     	public abstract void onCreate(Connection connection) throws SQLException;
 
     	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
@@ -138,7 +141,7 @@ public void onUpgrade(Connection connection, int oldVersion, int newVersion) thr
         }
     }
     
-    public DaoMaster(Connection connection) {
+    public DaoMaster(Connection connection) throws DaoException {
         super(connection, SCHEMA_VERSION);
         registerDaoClass(SimpleEntityDao.class);
         registerDaoClass(SimpleEntityNotNullDao.class);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
index 3150cf47..f2547b81 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/RelationEntity.java
@@ -115,7 +115,7 @@ public RelationEntity getParent() throws SQLException {
         return parent;
     }
 
-    public void setParent(RelationEntity parent) {
+    public void setParent(RelationEntity parent) throws DaoException {
         synchronized (this) {
             this.parent = parent;
             parentId = parent == null ? null : parent.getId();
@@ -140,7 +140,7 @@ public TestEntity getTestEntity() throws SQLException {
         return testEntity;
     }
 
-    public void setTestEntity(TestEntity testEntity) {
+    public void setTestEntity(TestEntity testEntity) throws DaoException {
         synchronized (this) {
             this.testEntity = testEntity;
             testId = testEntity == null ? null : testEntity.getId();
@@ -165,7 +165,7 @@ public TestEntity getTestNotNull() throws SQLException {
         return testNotNull;
     }
 
-    public void setTestNotNull(TestEntity testNotNull) {
+    public void setTestNotNull(TestEntity testNotNull) throws DaoException {
         if (testNotNull == null) {
             throw new DaoException("To-one property 'testIdNotNull' has not-null constraint; cannot set to-one to null");
         }
@@ -194,7 +194,7 @@ public TestEntity peakTestWithoutProperty() {
         return testWithoutProperty;
     }
 
-    public void setTestWithoutProperty(TestEntity testWithoutProperty) {
+    public void setTestWithoutProperty(TestEntity testWithoutProperty) throws DaoException {
         synchronized (this) {
             this.testWithoutProperty = testWithoutProperty;
             testWithoutProperty__refreshed = true;
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
index d2be620e..fe9403f6 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TreeEntity.java
@@ -78,7 +78,7 @@ public TreeEntity getParent() throws SQLException {
         return parent;
     }
 
-    public void setParent(TreeEntity parent) {
+    public void setParent(TreeEntity parent) throws DaoException {
         synchronized (this) {
             this.parent = parent;
             parentId = parent == null ? null : parent.getId();
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
index 47d13131..d86e5ffa 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/dao/DaoMaster.java
@@ -7,6 +7,7 @@
 import de.greenrobot.platform.java.util.JDBCUtils;
 
 import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daotest2.dao.KeepEntityDao;
@@ -61,6 +62,8 @@ public Connection getConnection() throws SQLException {
 			return this.connection;    	
     	}
     	
+		public void onOpen( Connection connection ) throws SQLException {} // not mandatory
+
     	public abstract void onCreate(Connection connection) throws SQLException;
 
     	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
@@ -107,7 +110,7 @@ public void onUpgrade(Connection connection, int oldVersion, int newVersion) thr
         }
     }
     
-    public DaoMaster(Connection connection) {
+    public DaoMaster(Connection connection) throws DaoException {
         super(connection, SCHEMA_VERSION);
         registerDaoClass(KeepEntityDao.class);
         registerDaoClass(ToManyTarget2Dao.class);
diff --git a/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java b/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
index a07feadd..b0ba7fca 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest2/specialentity/RelationSource2.java
@@ -90,7 +90,7 @@ public ToOneTarget2 getToOneTarget2() throws SQLException {
         return toOneTarget2;
     }
 
-    public void setToOneTarget2(ToOneTarget2 toOneTarget2) {
+    public void setToOneTarget2(ToOneTarget2 toOneTarget2) throws DaoException {
         synchronized (this) {
             this.toOneTarget2 = toOneTarget2;
             toOneId = toOneTarget2 == null ? null : toOneTarget2.getId();
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
similarity index 100%
rename from DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
rename to DaoTest/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTest.java b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTest.java
similarity index 96%
rename from DaoCore/src/de/greenrobot/dao/test/AbstractDaoTest.java
rename to DaoTest/src/de/greenrobot/dao/test/AbstractDaoTest.java
index 3e49d86e..f7e00354 100644
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTest.java
+++ b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTest.java
@@ -17,8 +17,8 @@
 package de.greenrobot.dao.test;
 
 import java.lang.reflect.Method;
+import java.sql.Connection;
 
-import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.InternalUnitTestDaoAccess;
@@ -73,7 +73,7 @@ protected void setUp() throws Exception {
 
     protected void setUpTableForDao() throws Exception {
         try {
-            Method createTableMethod = daoClass.getMethod("createTable", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoClass.getMethod("createTable", Connection.class, boolean.class);
             createTableMethod.invoke(null, connection, false);
         } catch (NoSuchMethodException e) {
             DaoLog.i("No createTable method");
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestLongPk.java b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestLongPk.java
similarity index 100%
rename from DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestLongPk.java
rename to DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestLongPk.java
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
similarity index 99%
rename from DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
rename to DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
index 507b1a48..487c1726 100644
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
+++ b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestSinglePk.java
@@ -24,10 +24,10 @@
 import java.util.List;
 import java.util.Set;
 
-import android.database.DatabaseUtils;
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
 import de.greenrobot.dao.internal.SqlUtils;
+import de.greenrobot.platform.java.util.JDBCUtils;
 
 /**
  * Default tests for single-PK entities.
@@ -285,7 +285,7 @@ protected ResultSet queryWithDummyColumnsInFront(int dummyCount, String valueFor
 
             assertEquals(1, dao.getPkColumns().length);
             builder.append(dao.getPkColumns()[0]).append("=");
-            DatabaseUtils.appendValueToSql(builder, pk);
+            JDBCUtils.appendValueToSql(builder, pk);
         }
 
         String select = builder.toString();
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestStringPk.java b/DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestStringPk.java
similarity index 100%
rename from DaoCore/src/de/greenrobot/dao/test/AbstractDaoTestStringPk.java
rename to DaoTest/src/de/greenrobot/dao/test/AbstractDaoTestStringPk.java
diff --git a/DaoCore/src/de/greenrobot/dao/test/DbTest.java b/DaoTest/src/de/greenrobot/dao/test/DbTest.java
similarity index 87%
rename from DaoCore/src/de/greenrobot/dao/test/DbTest.java
rename to DaoTest/src/de/greenrobot/dao/test/DbTest.java
index 9f869170..359caf78 100644
--- a/DaoCore/src/de/greenrobot/dao/test/DbTest.java
+++ b/DaoTest/src/de/greenrobot/dao/test/DbTest.java
@@ -40,7 +40,9 @@
  */
 public abstract class DbTest extends AndroidTestCase {
 
-    public static final String DB_NAME = "greendao-unittest-db.temp";
+    public static final String DB_NAME = "greendao-unittest-db.temp";	
+    public static final String DB_DRIVER_NAME = "org.sqldroid.SQLDroidDriver";
+	public static final String DB_CONNECTION_STRING = "jdbc:sqlite:/data/data/de.greenrobot.daotest/databases/" + DB_NAME;
 
     protected final Random random;
     protected final boolean inMemory;
@@ -64,7 +66,8 @@ protected void setUp() throws Exception {
     }
 
     /** Returns a prepared application with the onCreate method already called. */
-    public <T extends Application> T createApplication(Class<T> appClass) {
+    @SuppressWarnings( "unchecked" )
+	public <T extends Application> T createApplication(Class<T> appClass) {
         assertNull("Application already created", application);
         T app;
         try {
@@ -85,7 +88,8 @@ public void terminateApplication() {
     }
 
     /** Gets the previously created application. */
-    public <T extends Application> T getApplication() {
+    @SuppressWarnings( "unchecked" )
+	public <T extends Application> T getApplication() {
         assertNotNull("Application not yet created", application);
         return (T) application;
     }
@@ -93,14 +97,10 @@ public void terminateApplication() {
     /** May be overriden by sub classes to set up a different db. 
      * @throws SQLException */
     protected Connection createConnection() throws SQLException {
-//        if (inMemory) {
-//            return SQLiteDatabase.create(null);
-//        } else {
-//            getContext().deleteDatabase(DB_NAME);
-//            return getContext().openOrCreateDatabase(DB_NAME, 0, null);
-//        }
-        
-    	return JDBCUtils.connect( DB_NAME );
+    	if (connection == null) {
+    		connection = JDBCUtils.connect( DB_DRIVER_NAME, DB_CONNECTION_STRING );
+    	}
+    	return connection;
     }
 
     @Override
diff --git a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
index 0abfa312..b78f6e69 100644
--- a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
@@ -18,6 +18,7 @@
 package de.greenrobot.daotest;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -27,7 +28,8 @@
 
 public class DbUtilsTest extends DbTest {
     public void testExecuteSqlScript() throws IOException, SQLException {
-        DbUtils.executeSqlScript(getContext(), connection, "minimal-entity.sql");
+    	InputStream in = getContext().getResources().getAssets().open("minimal-entity.sql");
+        DbUtils.executeSqlScript(connection, in);
         PreparedStatement statement = connection.prepareStatement( "SELECT count(*) from MINIMAL_ENTITY" );
         ResultSet resultSet = statement.executeQuery();
         try {
@@ -37,5 +39,4 @@ public void testExecuteSqlScript() throws IOException, SQLException {
             statement.close();
         }
     }
-
 }
diff --git a/DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java b/DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java
index 423733c0..68a5da15 100644
--- a/DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/async/AbstractAsyncTest.java
@@ -3,6 +3,7 @@
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.async.AsyncOperation;
 import de.greenrobot.dao.async.AsyncOperationListener;
 import de.greenrobot.dao.async.AsyncSession;
@@ -28,7 +29,7 @@ protected void setUp() throws Exception {
         completedOperations = new CopyOnWriteArrayList<AsyncOperation>();
     }
 
-    public void assertWaitForCompletion1Sec() {
+    public void assertWaitForCompletion1Sec() throws DaoException {
         assertTrue(asyncSession.waitForCompletion(1000));
         assertTrue(asyncSession.isCompleted());
     }
diff --git a/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java b/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
index db949788..a3359e4a 100644
--- a/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/async/BasicAsyncTest.java
@@ -4,6 +4,7 @@
 import java.util.concurrent.Callable;
 
 import android.os.Looper;
+import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.async.AsyncDaoException;
 import de.greenrobot.dao.async.AsyncOperation;
 import de.greenrobot.dao.async.AsyncOperationListener;
@@ -14,14 +15,14 @@
     Thread txThread;
     boolean testListenerMainThread_done;
 
-    public void testSequenceNumber() {
+    public void testSequenceNumber() throws DaoException {
         AsyncOperation op1 = asyncSession.count(SimpleEntity.class);
         assertEquals(1, op1.getSequenceNumber());
         AsyncOperation op2 = asyncSession.count(SimpleEntity.class);
         assertEquals(2, op2.getSequenceNumber());
     }
 
-    public void testWaitForCompletionNoOps() {
+    public void testWaitForCompletionNoOps() throws DaoException {
         assertTrue(asyncSession.isCompleted());
         assertTrue(asyncSession.waitForCompletion(1));
         asyncSession.waitForCompletion();
@@ -96,19 +97,19 @@ public void testAsyncException() throws SQLException {
         assertNotNull(operation.getThrowable());
     }
 
-    public void testAsyncOperationWaitMillis() {
+    public void testAsyncOperationWaitMillis() throws DaoException {
         AsyncOperation operation = asyncSession.insert(new SimpleEntity());
         assertTrue(asyncSession.waitForCompletion(1000));
         assertSingleOperationCompleted(operation);
     }
 
-    public void testAsyncOperationWait() {
+    public void testAsyncOperationWait() throws DaoException {
         AsyncOperation operation = asyncSession.insert(new SimpleEntity());
         asyncSession.waitForCompletion();
         assertSingleOperationCompleted(operation);
     }
 
-    public void testAsyncRunInTx() {
+    public void testAsyncRunInTx() throws DaoException {
         AsyncOperation operation = asyncSession.runInTx(new Runnable() {
 
             @Override
@@ -122,7 +123,7 @@ public void run() {
         assertFalse(Thread.currentThread().equals(txThread));
     }
 
-    public void testAsynCallInTx() {
+    public void testAsynCallInTx() throws DaoException {
         AsyncOperation operation = asyncSession.callInTx(new Callable<String>() {
 
             @Override
@@ -136,7 +137,7 @@ public String call() throws Exception {
         assertFalse(Thread.currentThread().equals(txThread));
     }
 
-    public void testListenerMainThread() throws InterruptedException {
+    public void testListenerMainThread() throws InterruptedException, DaoException {
         AsyncOperationListener listener = new AsyncOperationListener() {
             @Override
             public synchronized void onAsyncOperationCompleted(AsyncOperation operation) {
@@ -145,7 +146,6 @@ public synchronized void onAsyncOperationCompleted(AsyncOperation operation) {
                 notifyAll();
             }
         };
-        asyncSession.setListenerMainThread(listener);
         asyncSession.insert(new SimpleEntity());
         assertWaitForCompletion1Sec();
         while (!testListenerMainThread_done) {
diff --git a/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java b/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
index ee4c466f..457a7d78 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/CountQueryThreadLocalTest.java
@@ -74,7 +74,14 @@ private void createQueryFromOtherThread() throws InterruptedException {
             @Override
             public void run() {
                 QueryBuilder<TestEntity> builder = dao.queryBuilder();
-                builder.where(Properties.SimpleInteger.eq(getSimpleInteger(1)));
+                try
+				{
+					builder.where(Properties.SimpleInteger.eq(getSimpleInteger(1)));
+				}
+				catch ( DaoException e )
+				{
+					e.printStackTrace();
+				}
                 queryFromOtherThread = builder.buildCount();
             }
         };
diff --git a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java b/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
index ae8cfd97..25156a26 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/DeleteQueryThreadLocalTest.java
@@ -75,9 +75,16 @@ private void createQueryFromOtherThread() throws InterruptedException {
 
             @Override
             public void run() {
-                QueryBuilder<TestEntity> builder = dao.queryBuilder();
-                builder.where(Properties.SimpleInteger.eq(getSimpleInteger(1)));
-                queryFromOtherThread = builder.buildDelete();
+                try
+				{
+                	QueryBuilder<TestEntity> builder = dao.queryBuilder();
+					builder.where(Properties.SimpleInteger.eq(getSimpleInteger(1)));
+					queryFromOtherThread = builder.buildDelete();
+				}
+				catch ( DaoException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         thread.start();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
index 5154054a..eedafaa1 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryForThreadTest.java
@@ -37,7 +37,7 @@
 
     private Query<TestEntity> queryFromOtherThread;
 
-    public void testGetForCurrentThread_SameInstance() {
+    public void testGetForCurrentThread_SameInstance() throws DaoException {
         Query<TestEntity> query = dao.queryBuilder().build();
         assertSame(query, query.forCurrentThread());
     }
@@ -85,7 +85,7 @@ public void run() {
         assertEquals(1, map.size());
     }
 
-    public void testBuildQueryDoesntLeak() {
+    public void testBuildQueryDoesntLeak() throws DaoException {
         QueryBuilder<TestEntity> builder = dao.queryBuilder().where(Properties.SimpleInteger.eq("dummy"));
         for (int i = 0; i < LEAK_TEST_ITERATIONS; i++) {
             builder.build();
@@ -158,10 +158,17 @@ private void createQueryFromOtherThread() throws InterruptedException {
 
             @Override
             public void run() {
-                QueryBuilder<TestEntity> builder = dao.queryBuilder();
-                builder.where(Properties.SimpleInteger.eq(getSimpleInteger(1)));
-                builder.limit(10).offset(20);
-                queryFromOtherThread = builder.build();
+                try
+				{
+                	QueryBuilder<TestEntity> builder = dao.queryBuilder();
+                	builder.where(Properties.SimpleInteger.eq(getSimpleInteger(1)));
+                	builder.limit(10).offset(20);
+					queryFromOtherThread = builder.build();
+				}
+				catch ( DaoException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         thread.start();
diff --git a/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java b/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
index d83bc185..6345dcd1 100644
--- a/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/query/QueryLimitOffsetTest.java
@@ -20,6 +20,7 @@
 import java.sql.SQLException;
 import java.util.List;
 
+import de.greenrobot.dao.DaoException;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
 import de.greenrobot.daotest.TestEntity;
@@ -81,7 +82,7 @@ public void testQueryOffsetAndLimit() throws SQLException {
         assertEquals(getSimpleInteger(6), result.get(2).getSimpleInteger().intValue());
     }
     
-    public void testQueryBuilderOffsetWithoutLimit() {
+    public void testQueryBuilderOffsetWithoutLimit() throws DaoException {
         try{
             dao.queryBuilder().offset(7).orderAsc(Properties.SimpleInt).build();
             fail("Offset may not be set alone");
@@ -90,7 +91,7 @@ public void testQueryBuilderOffsetWithoutLimit() {
         }
     }
     
-    public void testQueryLimitAndSetParameter() {
+    public void testQueryLimitAndSetParameter() throws DaoException {
         Query<TestEntity> query = dao.queryBuilder().limit(5).offset(1).build();
         try{
             query.setParameter(0, null);
@@ -100,7 +101,7 @@ public void testQueryLimitAndSetParameter() {
         }
     }
     
-    public void testQueryUnsetLimit() {
+    public void testQueryUnsetLimit() throws DaoException {
         Query<TestEntity> query = dao.queryBuilder().build();
         try{
             query.setLimit(1);
@@ -110,7 +111,7 @@ public void testQueryUnsetLimit() {
         }
     } 
 
-    public void testQueryUnsetOffset() {
+    public void testQueryUnsetOffset() throws DaoException {
         Query<TestEntity> query = dao.queryBuilder().limit(1).build();
         try{
             query.setOffset(1);
