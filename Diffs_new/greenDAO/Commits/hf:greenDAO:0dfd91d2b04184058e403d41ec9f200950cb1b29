diff --git a/.gitignore b/.gitignore
index 2ccd1fa7..7e3e5cca 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,3 @@
 .gradle
 *.iml
-.idea/
\ No newline at end of file
+.idea/
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index ed057058..d93aeecd 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -8,6 +8,7 @@
 
     private Long id;
     /** Not-null value. */
+    @javax.inject.Inject
     private String text;
     private String comment;
     private java.util.Date date;
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index d3ac55a7..2fd9bc6c 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -147,97 +147,97 @@ protected boolean isEntityUpdateable() {
         return query.list();
     }
 
-    private String selectDeep;
-
-    protected String getSelectDeep() {
-        if (selectDeep == null) {
-            StringBuilder builder = new StringBuilder("SELECT ");
-            SqlUtils.appendColumns(builder, "T", getAllColumns());
-            builder.append(',');
-            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
-            builder.append(" FROM ORDERS T");
-            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
-            builder.append(' ');
-            selectDeep = builder.toString();
-        }
-        return selectDeep;
-    }
-    
-    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
-        Order entity = loadCurrent(cursor, 0, lock);
-        int offset = getAllColumns().length;
-
-        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
-         if(customer != null) {
-            entity.setCustomer(customer);
-        }
-
-        return entity;    
-    }
-
-    public Order loadDeep(Long key) {
-        assertSinglePk();
-        if (key == null) {
-            return null;
-        }
-
-        StringBuilder builder = new StringBuilder(getSelectDeep());
-        builder.append("WHERE ");
-        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
-        String sql = builder.toString();
-        
-        String[] keyArray = new String[] { key.toString() };
-        Cursor cursor = db.rawQuery(sql, keyArray);
-        
-        try {
-            boolean available = cursor.moveToFirst();
-            if (!available) {
-                return null;
-            } else if (!cursor.isLast()) {
-                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
-            }
-            return loadCurrentDeep(cursor, true);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
-    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
-        int count = cursor.getCount();
-        List<Order> list = new ArrayList<Order>(count);
-        
-        if (cursor.moveToFirst()) {
-            if (identityScope != null) {
-                identityScope.lock();
-                identityScope.reserveRoom(count);
-            }
-            try {
-                do {
-                    list.add(loadCurrentDeep(cursor, false));
-                } while (cursor.moveToNext());
-            } finally {
-                if (identityScope != null) {
-                    identityScope.unlock();
-                }
-            }
-        }
-        return list;
-    }
-    
-    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
-        try {
-            return loadAllDeepFromCursor(cursor);
-        } finally {
-            cursor.close();
-        }
-    }
-    
-
-    /** A raw-style query where you can pass any WHERE clause and arguments. */
-    public List<Order> queryDeep(String where, String... selectionArg) {
-        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
-        return loadDeepAllAndCloseCursor(cursor);
-    }
- 
+    private String selectDeep;
+
+    protected String getSelectDeep() {
+        if (selectDeep == null) {
+            StringBuilder builder = new StringBuilder("SELECT ");
+            SqlUtils.appendColumns(builder, "T", getAllColumns());
+            builder.append(',');
+            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerDao().getAllColumns());
+            builder.append(" FROM ORDERS T");
+            builder.append(" LEFT JOIN CUSTOMER T0 ON T.'CUSTOMER_ID'=T0.'_id'");
+            builder.append(' ');
+            selectDeep = builder.toString();
+        }
+        return selectDeep;
+    }
+    
+    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
+        Order entity = loadCurrent(cursor, 0, lock);
+        int offset = getAllColumns().length;
+
+        Customer customer = loadCurrentOther(daoSession.getCustomerDao(), cursor, offset);
+         if(customer != null) {
+            entity.setCustomer(customer);
+        }
+
+        return entity;    
+    }
+
+    public Order loadDeep(Long key) {
+        assertSinglePk();
+        if (key == null) {
+            return null;
+        }
+
+        StringBuilder builder = new StringBuilder(getSelectDeep());
+        builder.append("WHERE ");
+        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
+        String sql = builder.toString();
+        
+        String[] keyArray = new String[] { key.toString() };
+        Cursor cursor = db.rawQuery(sql, keyArray);
+        
+        try {
+            boolean available = cursor.moveToFirst();
+            if (!available) {
+                return null;
+            } else if (!cursor.isLast()) {
+                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
+            }
+            return loadCurrentDeep(cursor, true);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
+    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
+        int count = cursor.getCount();
+        List<Order> list = new ArrayList<Order>(count);
+        
+        if (cursor.moveToFirst()) {
+            if (identityScope != null) {
+                identityScope.lock();
+                identityScope.reserveRoom(count);
+            }
+            try {
+                do {
+                    list.add(loadCurrentDeep(cursor, false));
+                } while (cursor.moveToNext());
+            } finally {
+                if (identityScope != null) {
+                    identityScope.unlock();
+                }
+            }
+        }
+        return list;
+    }
+    
+    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
+        try {
+            return loadAllDeepFromCursor(cursor);
+        } finally {
+            cursor.close();
+        }
+    }
+    
+
+    /** A raw-style query where you can pass any WHERE clause and arguments. */
+    public List<Order> queryDeep(String where, String... selectionArg) {
+        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
+        return loadDeepAllAndCloseCursor(cursor);
+    }
+ 
 }
diff --git a/DaoExampleGenerator/build.gradle b/DaoExampleGenerator/build.gradle
index 16c91b47..ac306b54 100644
--- a/DaoExampleGenerator/build.gradle
+++ b/DaoExampleGenerator/build.gradle
@@ -13,7 +13,7 @@ repositories {
 }
 
 dependencies {
-    compile('de.greenrobot:greendao-generator:1.3.0')
+    compile project(':DaoGenerator')
 }
 
 sourceSets {
diff --git a/DaoExampleGenerator/settings.gradle b/DaoExampleGenerator/settings.gradle
index 4cd77a8b..8b6bcc74 100644
--- a/DaoExampleGenerator/settings.gradle
+++ b/DaoExampleGenerator/settings.gradle
@@ -1 +1,2 @@
+includeFlat 'DaoGenerator'
 rootProject.name = 'greendao-example-generator'
\ No newline at end of file
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 276d291e..59cf14ff 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -42,7 +42,7 @@ public static void main(String[] args) throws Exception {
     private static void addNote(Schema schema) {
         Entity note = schema.addEntity("Note");
         note.addIdProperty();
-        note.addStringProperty("text").notNull();
+        note.addStringProperty("text").notNull().annotation("javax.inject.Inject");
         note.addStringProperty("comment");
         note.addDateProperty("date");
     }
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index e40c0a18..5566b689 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -56,6 +56,9 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+<#list property.annotations as annotation>
+    @${annotation.annotation}
+</#list>
     private ${property.javaType} ${property.propertyName};
 </#list>
 
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
new file mode 100644
index 00000000..12fedc0a
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
@@ -0,0 +1,40 @@
+package de.greenrobot.daogenerator;
+
+public class Annotation {
+    private String annotation;
+
+    public Annotation(String annotation) {
+
+        setAnnotation(annotation);
+    }
+
+    public String getAnnotation() {
+
+        return annotation;
+    }
+
+    public void setAnnotation(String annotation) {
+
+        if (annotation == null) {
+            throw new IllegalArgumentException("Annotation must not be null.");
+        }
+
+        this.annotation = annotation;
+    }
+
+    @Override
+    public int hashCode() {
+
+        return annotation.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+
+        if (obj instanceof Annotation) {
+            return annotation.equals(((Annotation) obj).getAnnotation());
+        }
+
+        return super.equals(obj);
+    }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..317d5673 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -17,6 +17,11 @@
  */
 package de.greenrobot.daogenerator;
 
+
+import java.util.HashSet;
+import java.util.Set;
+
+
 /** Model class for an entity's property: a Java property mapped to a data base column. */
 public class Property {
 
@@ -102,6 +107,18 @@ public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
             return this;
         }
 
+        public PropertyBuilder annotation(String annotation) {
+            property.annotations.add(new Annotation(annotation));
+
+            return this;
+        }
+
+        public PropertyBuilder annotation(Annotation annotation) {
+            property.annotations.add(annotation);
+
+            return this;
+        }
+
         public Property getProperty() {
             return property;
         }
@@ -123,6 +140,8 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
+    private Set<Annotation> annotations;
+
     /** Initialized in 2nd pass */
     private String constraints;
 
@@ -135,6 +154,7 @@ public Property(Schema schema, Entity entity, PropertyType propertyType, String
         this.entity = entity;
         this.propertyName = propertyName;
         this.propertyType = propertyType;
+        this.annotations = new HashSet<Annotation>();
     }
 
     public String getPropertyName() {
@@ -193,6 +213,16 @@ public Entity getEntity() {
         return entity;
     }
 
+    public Set<Annotation> getAnnotations() {
+
+        return annotations;
+    }
+
+    public void setAnnotations(Set<Annotation> annotations) {
+
+        this.annotations = annotations;
+    }
+
     void init2ndPass() {
         initConstraint();
         if (columnType == null) {
