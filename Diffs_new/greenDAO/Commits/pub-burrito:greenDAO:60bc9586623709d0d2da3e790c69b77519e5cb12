diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDao.java b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
index c5b7aadd..5a605524 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDao.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDao.java
@@ -31,6 +31,7 @@
 import de.greenrobot.dao.internal.TableStatements;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.dao.query.QueryBuilder;
+import de.greenrobot.platform.java.util.JDBCUtils;
 
 /**
  * Base class for all DAOs: Implements entity operations like insert, load, delete, and query.
@@ -133,7 +134,7 @@ public T load(K key) throws SQLException {
         }
         String sql = statements.getSelectByKey();
         PreparedStatement statement = connection.prepareStatement( sql );
-        statement.setString( 0, key.toString() );
+        statement.setString( 1, key.toString() );
         ResultSet resultSet = statement.executeQuery();
         return loadUniqueAndCloseCursor(resultSet);
     }
@@ -394,7 +395,7 @@ protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock)
     /** Reads all available rows from the given cursor and returns a list of entities. 
      * @throws SQLException */
     protected List<T> loadAllFromCursor(ResultSet resultSet) throws SQLException {
-        int count = resultSet.getFetchSize();
+        int count = JDBCUtils.getCount(resultSet);
         List<T> list = new ArrayList<T>(count);
         
         if (resultSet.next()) {
@@ -419,14 +420,16 @@ protected void updateKeyAfterInsertAndAttach(T entity, long rowId, boolean lock)
      * @throws SQLException */
     final protected T loadCurrent(ResultSet resultSet, int offset, boolean lock) throws SQLException {
         if (identityScopeLong != null) {
-            if (offset != 0) {
+            int index = pkOrdinal + offset;
+            if (index <= 0) index = 1; // first position
+			if (offset != 0) {
                 // Occurs with deep loads (left outer joins)
-                if (resultSet.getObject(pkOrdinal + offset) == null) {
+                if (resultSet.getObject(index) == null) {
                     return null;
                 }
             }
 
-            long key = resultSet.getLong(pkOrdinal + offset);
+            long key = resultSet.getLong(index);
             T entity = lock ? identityScopeLong.get2(key) : identityScopeLong.get2NoLock(key);
             if (entity != null) {
                 return entity;
@@ -482,7 +485,8 @@ final protected T loadCurrent(ResultSet resultSet, int offset, boolean lock) thr
 		PreparedStatement statement = connection.prepareStatement( sql );
 		for ( int i = 0; i < selectionArg.length; i++ )
 		{
-			statement.setString( i, selectionArg[i] );
+			int index = i+1;
+			statement.setString( index, selectionArg[i] );
 		}
 		ResultSet resultSet = statement.executeQuery();
 		return loadAllAndCloseCursor(resultSet);
diff --git a/DaoCore/src/de/greenrobot/dao/query/Query.java b/DaoCore/src/de/greenrobot/dao/query/Query.java
index 03aa7e08..2066b131 100644
--- a/DaoCore/src/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/de/greenrobot/dao/query/Query.java
@@ -122,7 +122,7 @@ public void setOffset(int offset) {
         checkThread();
         Connection connection = dao.getConnection();
         PreparedStatement statement = connection.prepareStatement( sql );
-        for ( int i = 0; i < parameters.length; i++ )
+        for ( int i = 1; i < parameters.length; i++ )
 		{
 			statement.setString( i, parameters[i] );
 		}
diff --git a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
index f647710d..2e7a55f4 100644
--- a/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
+++ b/DaoCore/src/de/greenrobot/dao/test/AbstractDaoSessionTest.java
@@ -56,7 +56,7 @@ protected void setUp() throws Exception {
             Constructor<T> constructor = daoMasterClass.getConstructor(Connection.class);
             daoMaster = constructor.newInstance(connection);
 
-            Method createTableMethod = daoMasterClass.getMethod("createAllTables", SQLiteDatabase.class, boolean.class);
+            Method createTableMethod = daoMasterClass.getMethod("createAllTables", Connection.class, boolean.class);
             createTableMethod.invoke(null, connection, false);
         } catch (Exception e) {
             throw new RuntimeException("Could not prepare DAO session test", e);
diff --git a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java b/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
index 2ea18645..3da01fca 100644
--- a/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
+++ b/DaoCore/src/de/greenrobot/platform/java/util/JDBCUtils.java
@@ -8,11 +8,13 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
+import android.util.Log;
+
 public class JDBCUtils
 {
 	public static String driverName = "org.sqldroid.SQLDroidDriver";
 	public static String JDBC_URL_PREFIX = "jdbc:sqlite:";
-	public static String packageName = "de.greenrobot";
+	public static String packageName = "de.greenrobot.daotest";
 	public static String DB_DIRECTORY = "/data/data/" + packageName + "/databases/";
 	public static String url = JDBC_URL_PREFIX + DB_DIRECTORY;
 
@@ -84,10 +86,30 @@ public static boolean isNull( ResultSet resultSet, int index ) throws SQLExcepti
 		return resultSet.getObject( index ) == null;
 	}
 	
+	public static int getCount( ResultSet resultSet )
+	{
+		int count = 0;
+		if (resultSet != null)
+		{
+			try 
+			{
+				resultSet.beforeFirst();  
+				resultSet.last();
+				count = resultSet.getRow();
+				resultSet.beforeFirst();
+			} 
+			catch (SQLException e)
+			{
+				count = 0;
+			}
+		}
+		return count;
+	}
+	
 	public static Connection connect( String db ) throws SQLException
 	{
 		// setup
-		File f = new File( db );
+		File f = new File( DB_DIRECTORY+db );
 		if ( f.exists() )
 		{
 			f.delete();
@@ -121,7 +143,7 @@ public static Connection connect( String db ) throws SQLException
 			e.printStackTrace();
 		}
 		
-		System.err.println("conn: "+url+db);
+		Log.i("JDBCUtils", "connecting: "+url+db);
 		return DriverManager.getConnection( url + db );
 	}
 }
diff --git a/DaoTest/AndroidManifest.xml b/DaoTest/AndroidManifest.xml
index c701be68..ee6a558b 100644
--- a/DaoTest/AndroidManifest.xml
+++ b/DaoTest/AndroidManifest.xml
@@ -13,7 +13,7 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" >
     </uses-permission>
 
-    <application>
+    <application android:debuggable="true">
         <uses-library android:name="android.test.runner" />
 
         <provider
diff --git a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
index dd7b6bcb..0abfa312 100644
--- a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
@@ -32,7 +32,7 @@ public void testExecuteSqlScript() throws IOException, SQLException {
         ResultSet resultSet = statement.executeQuery();
         try {
             resultSet.next();
-            assertEquals(5, resultSet.getInt(0));
+            assertEquals(5, resultSet.getInt(1));
         } finally {
             statement.close();
         }
diff --git a/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java b/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
index c63ad4cc..e67451fb 100644
--- a/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/entity/ToManyEntityTest.java
@@ -145,10 +145,10 @@ public void testToManyOrder() throws SQLException {
         List<ToManyTargetEntity> resolvedToManyAsc = testEntity.getToManyTargetEntityList();
         List<ToManyTargetEntity> resolvedToManyDesc = testEntity.getToManyDescList();
         assertNotSame(resolvedToManyAsc, resolvedToManyDesc);
-        assertEquals(resolvedToManyAsc.get(0).getId(), resolvedToManyDesc.get(2).getId());
-        assertSame(resolvedToManyAsc.get(0), resolvedToManyDesc.get(2));
-        assertSame(resolvedToManyAsc.get(1), resolvedToManyDesc.get(1));
-        assertSame(resolvedToManyAsc.get(2), resolvedToManyDesc.get(0));
+        assertEquals(resolvedToManyAsc.get(1).getId(), resolvedToManyDesc.get(3).getId());
+        assertSame(resolvedToManyAsc.get(1), resolvedToManyDesc.get(3));
+        assertSame(resolvedToManyAsc.get(2), resolvedToManyDesc.get(2));
+        assertSame(resolvedToManyAsc.get(3), resolvedToManyDesc.get(1));
     }
 
     public void testJoinProperty() throws SQLException {
