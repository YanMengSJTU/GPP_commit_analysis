diff --git a/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy b/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
index 796bcb0e..52bef0bd 100644
--- a/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
+++ b/gradle-plugin/src/main/groovy/de/greenrobot/greendao/task/GenerateDaoSources.groovy
@@ -1,14 +1,12 @@
-package de.greenrobot.greendao.task;
-
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.Schema;
-import java.io.File;
-import org.gradle.api.DefaultTask;
-import org.gradle.api.tasks.TaskAction;
-import de.greenrobot.daogenerator.SchemaGenerator;
-import org.gradle.api.tasks.Input;
-import org.gradle.api.tasks.InputDirectory;
-import org.gradle.api.tasks.OutputDirectory;
+package de.greenrobot.greendao.task
+import de.greenrobot.daogenerator.DaoGenerator
+import de.greenrobot.daogenerator.Schema
+import de.greenrobot.daogenerator.SchemaGenerator
+import org.gradle.api.DefaultTask
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.InputDirectory
+import org.gradle.api.tasks.OutputDirectory
+import org.gradle.api.tasks.TaskAction
 
 public class GenerateDaoSources extends DefaultTask {
   
@@ -26,9 +24,24 @@ public class GenerateDaoSources extends DefaultTask {
   
   @TaskAction
   void generateSources() throws Exception {
-    SchemaGenerator schemaGenerator = new SchemaGenerator(ormSrcDir, getLogger());
+    SchemaGenerator schemaGenerator = new SchemaGenerator(ormSrcDir) {
+        @Override
+        protected void debug(String text) {
+            getLogger().debug(text);
+        }
+    };
     Schema schema = schemaGenerator.createSchema(schemaVersion, genSrcPackage);
-    new DaoGenerator(getLogger()).generateAll(schema, genSrcDir.getAbsolutePath());
+    new DaoGenerator(){
+        @Override
+        protected void info(String text) {
+            getLogger().info(text);
+        }
+
+        @Override
+        protected void error(String text) {
+            getLogger().error(text);
+        }
+    }.generateAll(schema, genSrcDir.getAbsolutePath());
   }
   
 }
diff --git a/greendao/src/main/java/de/greenrobot/dao/internal/SqlUtils.java b/greendao/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
index 365f9490..736f4e5a 100644
--- a/greendao/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
+++ b/greendao/src/main/java/de/greenrobot/dao/internal/SqlUtils.java
@@ -15,6 +15,8 @@
  */
 package de.greenrobot.dao.internal;
 
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
 import de.greenrobot.dao.DaoException;
 
 /** Helper class to create SQL statements as used by greenDAO internally. */
@@ -130,4 +132,34 @@ public static String createSqlUpdate(String tablename, String[] updateColumns, S
         return builder.toString();
     }
 
+    /**
+     * Will add column if doesn't exists. Note, that if the table exists, but empty column will not be added.
+     * You will need to drop table and recreate it manually.
+     * @return true if column was created or exists, false otherwise
+     */
+    public static boolean ensureColumnExists(SQLiteDatabase db, String tableName, String columnName,
+                                             String columnDefinition) {
+        Cursor c = db.query(tableName, null, null, null, null, null, null, "1");
+        if (c == null) {
+            addColumn(db, tableName, columnName, columnDefinition);
+            return true;
+        }
+        try {
+            if (!c.moveToFirst()) {
+                return false;
+            }
+            if (c.getColumnIndex(columnName) == -1) {
+                addColumn(db, tableName, columnName, columnDefinition);
+                return true;
+            }
+        } finally {
+            c.close();
+        }
+        return true;
+    }
+
+    public static void addColumn(SQLiteDatabase db, String tableName, String columnName, String columnDefinition) {
+        db.execSQL("ALTER TABLE [" + tableName + "] ADD COLUMN " + columnName + " " + columnDefinition + ";");
+    }
+
 }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/DaoGenerator.java b/source-generator/src/main/java/de/greenrobot/daogenerator/DaoGenerator.java
index c9eb278d..2e7009ca 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/DaoGenerator.java
@@ -17,6 +17,10 @@
  */
 package de.greenrobot.daogenerator;
 
+import freemarker.template.Configuration;
+import freemarker.template.DefaultObjectWrapper;
+import freemarker.template.Template;
+
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
@@ -27,19 +31,12 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import freemarker.template.Configuration;
-import freemarker.template.DefaultObjectWrapper;
-import freemarker.template.Template;
-import org.gradle.api.logging.Logger;
-
 /**
  * Once you have your model created, use this class to generate entities and DAOs.
  * 
  * @author Markus
  */
 public class DaoGenerator {
-  
-    private Logger logger;
 
     private Pattern patternKeepIncludes;
     private Pattern patternKeepFields;
@@ -51,12 +48,11 @@
     private Template templateEntity;
     private Template templateDaoUnitTest;
 
-    public DaoGenerator(Logger logger) throws IOException {
-        this.logger = logger;
+    public DaoGenerator() throws IOException {
         
-        logger.info("greenDAO Generator");
-        logger.info("Copyright 2011-2013 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
-        logger.info("This program comes with ABSOLUTELY NO WARRANTY");
+        info("greenDAO Generator");
+        info("Copyright 2011-2013 Markus Junginger, greenrobot.de. Licensed under GPL V3.");
+        info("This program comes with ABSOLUTELY NO WARRANTY");
 
         patternKeepIncludes = compilePattern("INCLUDES");
         patternKeepFields = compilePattern("FIELDS");
@@ -98,7 +94,7 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
         schema.init2ndPass();
         schema.init3ndPass();
 
-        logger.info("Processing schema version " + schema.getVersion() + "...");
+        info("Processing schema version " + schema.getVersion() + "...");
 
         List<Entity> entities = schema.getEntities();
         for (Entity entity : entities) {
@@ -113,7 +109,7 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
                 if (!javaFilename.exists()) {
                     generate(templateDaoUnitTest, outDirTestFile, javaPackageTest, classNameTest, schema, entity);
                 } else {
-                    logger.info("Skipped " + javaFilename.getCanonicalPath());
+                    info("Skipped " + javaFilename.getCanonicalPath());
                 }
             }
         }
@@ -121,7 +117,7 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
         generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
 
         long time = System.currentTimeMillis() - start;
-        logger.info("Processed " + entities.size() + " entities in " + time + "ms");
+        info("Processed " + entities.size() + " entities in " + time + "ms");
     }
 
     protected File toFileForceExists(String filename) throws IOException {
@@ -151,12 +147,12 @@ private void generate(Template template, File outDirFile, String javaPackage, St
             try {
                 template.process(root, writer);
                 writer.flush();
-                logger.info("Written " + file.getCanonicalPath());
+                info("Written " + file.getCanonicalPath());
             } finally {
                 writer.close();
             }
         } catch (Exception ex) {
-            logger.error("Error while generating " + javaPackage + "." + javaClassName + " ("
+            error("Error while generating " + javaPackage + "." + javaClassName + " ("
                     + outDirFile.getCanonicalPath() + ")");
             throw ex;
         }
@@ -196,4 +192,11 @@ protected File toJavaFilename(File outDirFile, String javaPackage, String javaCl
         return file;
     }
 
+    protected void info(String text) {
+        System.out.println(text);
+    }
+
+    protected void error(String text) {
+        System.err.println(text);
+    }
 }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
index 4588d1ac..93d762d4 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Entity.java
@@ -17,15 +17,10 @@
  */
 package de.greenrobot.daogenerator;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.TreeSet;
-
 import de.greenrobot.daogenerator.Property.PropertyBuilder;
 
+import java.util.*;
+
 /**
  * Model class for an entity: a Java data object mapped to a data base table. A new entity is added to a {@link Schema}
  * by the method {@link Schema#addEntity(String)} (there is no public constructor for {@link Entity} itself). <br/>
@@ -47,6 +42,7 @@
 public class Entity {
     private final Schema schema;
     private final String className;
+    private final int since;
     private final List<Property> properties;
     private List<Property> propertiesColumns;
     private final List<Property> propertiesPk;
@@ -78,9 +74,10 @@
     private Boolean active;
     private Boolean hasKeepSections;
 
-    Entity(Schema schema, String className) {
+    Entity(Schema schema, String className, int since) {
         this.schema = schema;
         this.className = className;
+        this.since = since;
         properties = new ArrayList<Property>();
         propertiesPk = new ArrayList<Property>();
         propertiesNonPk = new ArrayList<Property>();
@@ -614,6 +611,20 @@ public void validatePropertyExists(Property property) {
         }
     }
 
+    public int getSince() {
+        return since;
+    }
+
+    public boolean hasAutoUpdateProperty(int version) {
+        List<Property> match = new ArrayList<Property>();
+        for (Property property : properties) {
+            if (property.getSince() == version) {
+                return true;
+            }
+        }
+        return false;
+    }
+
     @Override
     public String toString() {
         return "Entity " + className + " (package: " + javaPackage + ")";
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
index 9838044b..46cac72f 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Property.java
@@ -102,6 +102,17 @@ public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
             return this;
         }
 
+        public PropertyBuilder since(int version) {
+            property.since = version;
+            return this;
+        }
+
+        public PropertyBuilder since(int version, String _default) {
+            property.since = version;
+            property._default = _default;
+            return this;
+        }
+
         public Property getProperty() {
             return property;
         }
@@ -124,6 +135,9 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
+    private int since;
+    private String _default;
+
     /** Initialized in 2nd pass */
     private String constraints;
 
@@ -193,6 +207,15 @@ public Entity getEntity() {
         return entity;
     }
 
+    public int getSince() {
+        return since;
+    }
+
+    public String getDefault() {
+        return _default;
+    }
+
+
     void init2ndPass() {
         initConstraint();
         if (columnType == null) {
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/Schema.java b/source-generator/src/main/java/de/greenrobot/daogenerator/Schema.java
index e7d45c47..aebc7f3d 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/Schema.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/Schema.java
@@ -98,7 +98,11 @@ private void initTypeMappings() {
      * per table to create table scripts, etc.
      */
     public Entity addEntity(String className) {
-        Entity entity = new Entity(this, className);
+        return addEntity(className, 0);
+    }
+
+    public Entity addEntity(String className, int since) {
+        Entity entity = new Entity(this, className, since);
         entities.add(entity);
         return entity;
     }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java b/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
index 35d0e887..b4779467 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/SchemaGenerator.java
@@ -1,31 +1,35 @@
 package de.greenrobot.daogenerator;
 
 import com.thoughtworks.qdox.JavaDocBuilder;
-import com.thoughtworks.qdox.model.AbstractBaseJavaEntity;
-import com.thoughtworks.qdox.model.Annotation;
-import com.thoughtworks.qdox.model.JavaClass;
-import com.thoughtworks.qdox.model.JavaField;
-import com.thoughtworks.qdox.model.JavaSource;
-import com.thoughtworks.qdox.model.Type;
+import com.thoughtworks.qdox.model.*;
 import de.greenrobot.daogenerator.annotation.Serialized;
-import de.greenrobot.daogenerator.annotation.ToOne;
 import de.greenrobot.daogenerator.annotation.ToMany;
+import de.greenrobot.daogenerator.annotation.ToOne;
+
 import java.io.File;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import org.gradle.api.logging.Logger;
 
 public class SchemaGenerator {
-  
-  private Logger logger;
+
+  private static class EntityDescriptor {
+    final JavaClass javaClass;
+    final Annotation entityAnnotation;
+
+    EntityDescriptor(JavaClass javaClass, Annotation entityAnnotation) {
+        this.javaClass = javaClass;
+        this.entityAnnotation = entityAnnotation;
+    }
+  }
+
   private File sourceDirectory;
   private Map<String, PropertyType> javaTypeToPropertyType;
   private Map<Type, Entity> typeToEntity = new HashMap<Type, Entity>();
 
-  public SchemaGenerator(File sourceDirectory, Logger logger) {
+  public SchemaGenerator(File sourceDirectory) {
     this.sourceDirectory = sourceDirectory;
-    this.logger = logger;
     
     javaTypeToPropertyType = new HashMap<String, PropertyType>();
     javaTypeToPropertyType.put("boolean", PropertyType.Boolean);
@@ -54,44 +58,41 @@ public Schema createSchema(int version, String genSrcPackage) {
     // Look for the java files.
     JavaDocBuilder builder = new JavaDocBuilder();
     builder.addSourceTree(sourceDirectory);
-    
-    // Creates the entities.
-    logger.debug("Creates the entities ...\n");
-    for (JavaSource javaSource : builder.getSources()) {
-      for (JavaClass javaClass : javaSource.getClasses()) {
-        Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
-        if (entityAnnotation != null) {
-          createEntity(schema, javaClass, entityAnnotation);
-        }
-      }
+
+    List<EntityDescriptor> descriptors = findEntities(builder);
+
+    debug("Creates the entities ...\n");
+    for (EntityDescriptor descriptor : descriptors) {
+        createEntity(schema, descriptor.javaClass, descriptor.entityAnnotation);
     }
-    
-    // Links the entities 1.
-    logger.debug("Links the entities ...\n");
-    for (JavaSource javaSource : builder.getSources()) {
-      for (JavaClass javaClass : javaSource.getClasses()) {
-        Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
-        if (entityAnnotation != null) {
-          linkEntity1(schema, javaClass);
-        }
-      }
+
+    debug("Links the entities 1 ...\n");
+    for (EntityDescriptor descriptor : descriptors) {
+      linkEntity1(schema, descriptor.javaClass);
     }
-    
-    // Links the entities 2.
-    logger.debug("Links the entities ...\n");
-    for (JavaSource javaSource : builder.getSources()) {
-      for (JavaClass javaClass : javaSource.getClasses()) {
-        Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
-        if (entityAnnotation != null) {
-          linkEntity2(schema, javaClass);
-        }
-      }
+
+    debug("Links the entities 2 ...\n");
+    for (EntityDescriptor descriptor : descriptors) {
+      linkEntity2(schema, descriptor.javaClass);
     }
     
     return schema;
   }
 
-  private Annotation getAnnotation(AbstractBaseJavaEntity javaEntity, Class annotationClass) {
+    private List<EntityDescriptor> findEntities(JavaDocBuilder builder) {
+      List<EntityDescriptor> descriptors = new ArrayList<EntityDescriptor>();
+      for (JavaSource javaSource : builder.getSources()) {
+        for (JavaClass javaClass : javaSource.getClasses()) {
+          Annotation entityAnnotation = getAnnotation(javaClass, de.greenrobot.daogenerator.annotation.Entity.class);
+          if (entityAnnotation != null) {
+            descriptors.add(new EntityDescriptor(javaClass, entityAnnotation));
+          }
+        }
+      }
+      return descriptors;
+    }
+
+    private Annotation getAnnotation(AbstractBaseJavaEntity javaEntity, Class annotationClass) {
     for (Annotation annotation : javaEntity.getAnnotations()) {
       if (annotationClass.getName().equals(annotation.getType().getFullyQualifiedName())) {
         return annotation;
@@ -116,8 +117,11 @@ private Property findProperty(Entity entity, String propertyName) {
    * Skips all the relational aspect.
    */
   private void createEntity(Schema schema, JavaClass javaClass, Annotation entityAnnotation) {
-    logger.debug("className: " + javaClass.getFullyQualifiedName());
-    Entity entity = schema.addEntity(javaClass.getName());
+    debug("className: " + javaClass.getFullyQualifiedName());
+
+    String since = (String) entityAnnotation.getNamedParameter("since");
+
+    Entity entity = schema.addEntity(javaClass.getName(), since == null ? 0 : Integer.parseInt(since));
     typeToEntity.put(javaClass.asType(), entity);
 
     String tableName = unString((String) entityAnnotation.getNamedParameter("table"));
@@ -127,13 +131,15 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
     entity.addIdProperty();
 
     for (JavaField javaField : javaClass.getFields()) {
-      logger.debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
+      debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
       Property.PropertyBuilder propertyBuilder;
       
       PropertyType propertyType = javaTypeToPropertyType.get(javaField.getType().getFullyQualifiedName());
       Annotation toOneAnnotation = getAnnotation(javaField, ToOne.class);
       Annotation serializedAnnotation = getAnnotation(javaField, Serialized.class);
       Annotation notNullAnnotation = getAnnotation(javaField, de.greenrobot.daogenerator.annotation.NotNull.class);
+      Annotation sinceAnnotation = getAnnotation(javaField, de.greenrobot.daogenerator.annotation.Since.class);
+      Annotation uniqueAnnotation = getAnnotation(javaField, de.greenrobot.daogenerator.annotation.Unique.class);
       
       if (propertyType != null) {
         propertyBuilder = entity.addProperty(propertyType, null, javaField.getName());
@@ -144,10 +150,17 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
       } else {
         continue;
       }
-      
+
       if (notNullAnnotation != null) {
         propertyBuilder.notNull();
       }
+      if (uniqueAnnotation != null) {
+        propertyBuilder.unique();
+      }
+      if (sinceAnnotation != null) {
+        String version = (String) sinceAnnotation.getNamedParameter("value");
+        propertyBuilder.since(Integer.parseInt(version));
+      }
     }
   }
   
@@ -155,12 +168,12 @@ private void createEntity(Schema schema, JavaClass javaClass, Annotation entityA
    * Sets up all the relational aspects of the entity.
    */
   private void linkEntity1(Schema schema, JavaClass javaClass) {
-    logger.debug("className: " + javaClass.getFullyQualifiedName());
+    debug("className: " + javaClass.getFullyQualifiedName());
     
     Entity entity = typeToEntity.get(javaClass.asType());
     
     for (JavaField javaField : javaClass.getFields()) {
-      logger.debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
+      debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
       
       Annotation toOneAnnotation = getAnnotation(javaField, ToOne.class);
       if (toOneAnnotation != null) {
@@ -174,23 +187,23 @@ private void linkEntity1(Schema schema, JavaClass javaClass) {
    * Sets up all the relational aspects of the entity.
    */
   private void linkEntity2(Schema schema, JavaClass javaClass) {
-    logger.debug("className: " + javaClass.getFullyQualifiedName());
+    debug("className: " + javaClass.getFullyQualifiedName());
     
     Entity entity = typeToEntity.get(javaClass.asType());
     
     for (JavaField javaField : javaClass.getFields()) {
-      logger.debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
+      debug("field: " + javaField.getType().getFullyQualifiedName() + " " + javaField.getName());
       
       Annotation toManyAnnotation = getAnnotation(javaField, ToMany.class);
       if (toManyAnnotation != null && javaField.getType().getFullyQualifiedName().equals(List.class.getName())) {
         
         Entity targetEntity = typeToEntity.get(javaField.getType().getActualTypeArguments()[0]);
-        logger.debug("targetEntity = " + targetEntity);
+        debug("targetEntity = " + targetEntity);
         
-        logger.debug("toManyAnnotation.getParameterValue() = " + toManyAnnotation.getParameterValue());
+        debug("toManyAnnotation.getParameterValue() = " + toManyAnnotation.getParameterValue());
         
         String relationName = unString((String) toManyAnnotation. getNamedParameter("relation"));
-        logger.debug("relationName = " + relationName);
+        debug("relationName = " + relationName);
         
         de.greenrobot.daogenerator.ToMany toMany = entity.addToMany(targetEntity,
                 findProperty(targetEntity, relationName + "Id"),
@@ -204,6 +217,9 @@ private void linkEntity2(Schema schema, JavaClass javaClass) {
   }
 
   private String unString(String str) {
+    if (str == null) {
+      return null;
+    }
     if (str.length() >= 2 && str.charAt(0) == '"' && str.charAt(str.length() - 1) == '"') {
       return str.substring(1, str.length() - 1);
     }
@@ -211,5 +227,9 @@ private String unString(String str) {
       return str;
     }
   }
+
+  protected void debug(String text) {
+      System.out.println(text);
+  }
   
 }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Entity.java b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Entity.java
index 351456cb..9a767290 100644
--- a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Entity.java
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Entity.java
@@ -6,4 +6,5 @@
 @Target(ElementType.TYPE)
 public @interface Entity {
   String table() default "";
+  int since() default 0;
 }
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Since.java b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Since.java
new file mode 100644
index 00000000..bbfc561b
--- /dev/null
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Since.java
@@ -0,0 +1,9 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target(ElementType.FIELD)
+public @interface Since {
+    int value();
+}
diff --git a/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Unique.java b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Unique.java
new file mode 100644
index 00000000..b533a9ea
--- /dev/null
+++ b/source-generator/src/main/java/de/greenrobot/daogenerator/annotation/Unique.java
@@ -0,0 +1,11 @@
+package de.greenrobot.daogenerator.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+/**
+ *
+ */
+@Target(ElementType.FIELD)
+public @interface Unique {
+}
diff --git a/source-generator/src/main/resources/dao-master.ftl b/source-generator/src/main/resources/dao-master.ftl
index 4de541cd..2b2bbfc1 100644
--- a/source-generator/src/main/resources/dao-master.ftl
+++ b/source-generator/src/main/resources/dao-master.ftl
@@ -26,6 +26,7 @@ import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
+import de.greenrobot.dao.internal.SqlUtils;
 
 <#list schema.entities as entity>
 import ${entity.javaPackageDao}.${entity.classNameDao};
@@ -83,6 +84,54 @@ public class DaoMaster extends AbstractDaoMaster {
         }
     }
 
+    public static class AutoUpgradeHelper extends OpenHelper {
+
+        private int oldVersion = 0;
+        private int newVersion = 0;
+
+        public AutoUpgradeHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+
+        @Override
+        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+            this.oldVersion = oldVersion;
+            this.newVersion = newVersion;
+            upgrade(db, oldVersion, newVersion);
+        }
+
+        public int getOldVersion() {
+            return oldVersion;
+        }
+
+        public int getNewVersion() {
+            return newVersion;
+        }
+
+    }
+
+    private static void upgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+<#if (schema.version > 1)>
+        switch (oldVersion) {
+<#list 1..schema.version-1 as ver>
+        case ${ver}:
+<#list schema.entities as entity>
+<#if entity.since = ver + 1>
+            ${entity.classNameDao}.createTable(db, true);
+<#elseif entity.hasAutoUpdateProperty(ver + 1)>
+            if (<#list entity.properties as property><#if property.since = ver + 1>
+                !SqlUtils.ensureColumnExists(db, "${entity.tableName}", "${property.columnName}", "${property.columnType}<#if property.constraints??> ${property.constraints}</#if><#if property.default??> DEFAULT ${property.default}</#if>")<#if property_has_next>||<#else>) {
+
+                    ${entity.classNameDao}.dropTable(db, true);
+                    ${entity.classNameDao}.createTable(db, false);
+            }</#if></#if></#list>
+</#if>
+</#list>
+</#list>
+        }
+</#if>
+    }
+
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
 <#list schema.entities as entity>
