diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
index e493d0f9..0997c406 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
@@ -4,7 +4,10 @@
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table CUSTOMER.
  */
@@ -22,6 +25,10 @@
 
     private List<Order> orders;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public Customer() {
     }
 
@@ -79,7 +86,7 @@ public synchronized void resetOrders() {
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.delete(this);
     }
 
@@ -87,7 +94,7 @@ public void delete() {
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.update(this);
     }
 
@@ -95,8 +102,11 @@ public void update() {
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.refresh(this);
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index 627b4d42..b58bd000 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -1,6 +1,12 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+import de.greenrobot.daoexample.annotations.ValidationAnnotation;
+
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+import java.lang.reflect.Field;
+// KEEP INCLUDES END
 /**
  * Entity mapped to table NOTE.
  */
@@ -8,10 +14,15 @@
 
     private Long id;
     /** Not-null value. */
+    @ValidationAnnotation( val = 5, key = "minLength" )
     private String text;
     private String comment;
     private java.util.Date date;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public Note() {
     }
 
@@ -44,10 +55,12 @@ public void setText(String text) {
         this.text = text;
     }
 
+    @InnerAnnotation( "beautiful" )
     public String getComment() {
         return comment;
     }
 
+    @InnerAnnotation( "beautiful" )
     public void setComment(String comment) {
         this.comment = comment;
     }
@@ -60,4 +73,31 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
+    // KEEP METHODS - put your custom methods here
+
+	public void validate() throws Exception {
+		for(Field field : getClass().getDeclaredFields()) {
+			ValidationAnnotation validationAnnotation = field.getAnnotation(ValidationAnnotation.class);
+			if(validationAnnotation != null) {
+				Class type = field.getType();
+				if( "minLength".equals(validationAnnotation.key()) && type == String.class) {
+					try {
+						String value = (String) field.get(this);
+						if(value.length() < validationAnnotation.val()) {
+							String name = field.getName();
+							throw new Exception(name + " length should be at least " + validationAnnotation.val());
+						}
+					} catch (IllegalAccessException e) {
+						//ignore
+					}
+				}
+			}
+		}
+	}
+
+	public @interface InnerAnnotation {
+		String value();
+	}
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index 345eb7fc..82e99b8a 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -3,7 +3,10 @@
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table ORDERS.
  */
@@ -23,6 +26,10 @@
     private Long customer__resolvedKey;
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public Order() {
     }
 
@@ -92,7 +99,7 @@ public void setCustomer(Customer customer) {
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.delete(this);
     }
 
@@ -100,7 +107,7 @@ public void delete() {
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.update(this);
     }
 
@@ -108,8 +115,11 @@ public void update() {
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.refresh(this);
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 48a3ba53..a9ae025b 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -28,10 +28,7 @@
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.SimpleCursorAdapter;
-import android.widget.TextView;
+import android.widget.*;
 import android.widget.TextView.OnEditorActionListener;
 import de.greenrobot.daoexample.DaoMaster.DevOpenHelper;
 
@@ -117,6 +114,12 @@ private void addNote() {
         final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
         String comment = "Added on " + df.format(new Date());
         Note note = new Note(null, noteText, comment, new Date());
+        try {
+            note.validate();
+        } catch (Exception e) {
+            editText.setText(noteText);
+            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();
+        }
         noteDao.insert(note);
         Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
 
diff --git a/DaoExample/src/de/greenrobot/daoexample/annotations/ValidationAnnotation.java b/DaoExample/src/de/greenrobot/daoexample/annotations/ValidationAnnotation.java
new file mode 100644
index 00000000..67fb2ac4
--- /dev/null
+++ b/DaoExample/src/de/greenrobot/daoexample/annotations/ValidationAnnotation.java
@@ -0,0 +1,10 @@
+package de.greenrobot.daoexample.annotations;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ValidationAnnotation {
+	String key();
+	int val();
+}
