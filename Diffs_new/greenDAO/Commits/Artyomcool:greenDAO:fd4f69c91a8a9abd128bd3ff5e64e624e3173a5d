diff --git a/build.gradle b/build.gradle
index 600fc37d..77e4d686 100644
--- a/build.gradle
+++ b/build.gradle
@@ -46,7 +46,7 @@ subprojects {
   apply plugin: 'maven'
 
   group = 'com.lemoulinstudio.greendao'
-  version = '1.6.3'
+  version = '1.6.6'
   
   repositories {
     mavenCentral()
diff --git a/gradle-plugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy b/gradle-plugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy
index 0edbfc10..9d676fa0 100644
--- a/gradle-plugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy
+++ b/gradle-plugin/src/main/groovy/de/greenrobot/greendao/plugin/GreenDaoPlugin.groovy
@@ -13,7 +13,7 @@ public class GreenDaoPlugin implements Plugin<Project> {
       description = 'Generates the source files for the object-relation mapping.'
       ormSrcDir = project.file('src/main/orm');
       genSrcPackage = "orm.gensrc";
-      genSrcDir = new File(project.buildDir, 'gen-src');
+      genSrcDir = new File(project.buildDir, 'generated/source/gen-src');
     }
 
     project.afterEvaluate {
diff --git a/greendao/src/main/java/de/greenrobot/dao/query/AbstractQuery.java b/greendao/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
index 2569011f..76713c32 100644
--- a/greendao/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
+++ b/greendao/src/main/java/de/greenrobot/dao/query/AbstractQuery.java
@@ -28,7 +28,7 @@
  *            The enitity class the query will return results for.
  */
 // TODO support long, double, blob types directly
-abstract class AbstractQuery<T> {
+public abstract class AbstractQuery<T, E extends AbstractQuery<T, E>> {
     protected final AbstractDao<T, ?> dao;
     protected final InternalQueryDaoAccess<T> daoAccess;
     protected final String sql;
@@ -61,6 +61,8 @@ protected AbstractQuery(AbstractDao<T, ?> dao, String sql, String[] parameters)
     // // TODO implement compile
     // }
 
+    public abstract E forCurrentThread();
+
     /**
      * Sets the parameter (0 based) using the position in which it was added during building the query.
      */
diff --git a/greendao/src/main/java/de/greenrobot/dao/query/CountQuery.java b/greendao/src/main/java/de/greenrobot/dao/query/CountQuery.java
index ece51d72..ecd4416e 100644
--- a/greendao/src/main/java/de/greenrobot/dao/query/CountQuery.java
+++ b/greendao/src/main/java/de/greenrobot/dao/query/CountQuery.java
@@ -4,7 +4,7 @@
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.DaoException;
 
-public class CountQuery<T> extends AbstractQuery<T> {
+public class CountQuery<T> extends AbstractQuery<T, CountQuery<T>> {
 
     private final static class ThreadLocalQuery<T2> extends ThreadLocal<CountQuery<T2>> {
         private final String sql;
diff --git a/greendao/src/main/java/de/greenrobot/dao/query/DeleteQuery.java b/greendao/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
index 66dbe312..7114f06c 100644
--- a/greendao/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
+++ b/greendao/src/main/java/de/greenrobot/dao/query/DeleteQuery.java
@@ -28,7 +28,7 @@
  * @param <T>
  *            The enitity class the query will delete from.
  */
-public class DeleteQuery<T> extends AbstractQuery<T> {
+public class DeleteQuery<T> extends AbstractQuery<T, DeleteQuery<T>> {
     private final static class ThreadLocalQuery<T2> extends ThreadLocal<DeleteQuery<T2>> {
         private final String sql;
         private final AbstractDao<T2, ?> dao;
diff --git a/greendao/src/main/java/de/greenrobot/dao/query/Query.java b/greendao/src/main/java/de/greenrobot/dao/query/Query.java
index 2d5a7ca4..4cea95e8 100644
--- a/greendao/src/main/java/de/greenrobot/dao/query/Query.java
+++ b/greendao/src/main/java/de/greenrobot/dao/query/Query.java
@@ -32,7 +32,7 @@
 // TODO support long, double and other types, not just Strings, for parameters
 // TODO Make parameters setable by Property (if unique in paramaters)
 // TODO Query for PKs/ROW IDs
-public class Query<T> extends AbstractQuery<T> {
+public class Query<T> extends AbstractQuery<T, Query<T>> {
     private final static class ThreadLocalQuery<T2> extends ThreadLocal<Query<T2>> {
         private final String sql;
         private final AbstractDao<T2, ?> dao;
@@ -94,6 +94,7 @@ private Query(ThreadLocalQuery<T> threadLocalQuery, AbstractDao<T, ?> dao, Strin
     // // TODO implement compile
     // }
 
+    @Override
     public Query<T> forCurrentThread() {
         Query<T> query = threadLocalQuery.get();
         String[] initialValues = threadLocalQuery.initialValues;
