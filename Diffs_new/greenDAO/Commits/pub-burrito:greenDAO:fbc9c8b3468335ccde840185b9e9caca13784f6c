diff --git a/DaoCore/src/de/greenrobot/dao/DbUtils.java b/DaoCore/src/de/greenrobot/dao/DbUtils.java
index 126a3358..f13a44ba 100644
--- a/DaoCore/src/de/greenrobot/dao/DbUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/DbUtils.java
@@ -21,6 +21,8 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
@@ -29,17 +31,18 @@
 // TODO add unit tests
 public class DbUtils {
 
-    public static void vacuum(SQLiteDatabase db) {
-        db.execSQL("VACUUM");
+    public static void vacuum(Connection connection) throws SQLException {
+        connection.prepareStatement("VACUUM").execute();
     }
 
     /**
      * Calls {@link #executeSqlScript(Context, SQLiteDatabase, String, boolean)} with transactional set to true.
      * 
      * @return number of statements executed.
+     * @throws SQLException 
      */
-    public static int executeSqlScript(Context context, SQLiteDatabase db, String assetFilename) throws IOException {
-        return executeSqlScript(context, db, assetFilename, true);
+    public static int executeSqlScript(Context context, Connection connection, String assetFilename) throws IOException, SQLException {
+        return executeSqlScript(context, connection, assetFilename, true);
     }
 
     /**
@@ -49,39 +52,43 @@ public static int executeSqlScript(Context context, SQLiteDatabase db, String as
      * yours.
      * 
      * @return number of statements executed.
+     * @throws SQLException 
      */
-    public static int executeSqlScript(Context context, SQLiteDatabase db, String assetFilename, boolean transactional)
-            throws IOException {
+    public static int executeSqlScript(Context context, Connection connection, String assetFilename, boolean transactional)
+            throws IOException, SQLException {
         byte[] bytes = readAsset(context, assetFilename);
         String sql = new String(bytes, "UTF-8");
         String[] lines = sql.split(";(\\s)*[\n\r]");
         int count;
         if (transactional) {
-            count = executeSqlStatementsInTx(db, lines);
+            count = executeSqlStatementsInTx(connection, lines);
         } else {
-            count = executeSqlStatements(db, lines);
+            count = executeSqlStatements(connection, lines);
         }
         DaoLog.i("Executed " + count + " statements from SQL script '" + assetFilename + "'");
         return count;
     }
 
-    public static int executeSqlStatementsInTx(SQLiteDatabase db, String[] statements) {
-        db.beginTransaction();
+    public static int executeSqlStatementsInTx(Connection connection, String[] statements) throws SQLException {
+// TODO transaction
+//    	connection.beginTransaction();
         try {
-            int count = executeSqlStatements(db, statements);
-            db.setTransactionSuccessful();
+            int count = executeSqlStatements(connection, statements);
+//            connection.setTransactionSuccessful();
             return count;
         } finally {
-            db.endTransaction();
+//            connection.endTransaction();
         }
     }
 
-    public static int executeSqlStatements(SQLiteDatabase db, String[] statements) {
+    public static int executeSqlStatements(Connection connection, String[] statements) throws SQLException {
         int count = 0;
         for (String line : statements) {
             line = line.trim();
             if (line.length() > 0) {
-                db.execSQL(line);
+            	PreparedStatement statement = connection.prepareStatement( line );
+            	statement.execute();
+            	statement.close();
                 count++;
             }
         }
diff --git a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
index b3d584ae..1287ec92 100644
--- a/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
+++ b/DaoTest/src-gen/de/greenrobot/daotest/TestEntityDao.java
@@ -1,5 +1,9 @@
 package de.greenrobot.daotest;
 
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
@@ -43,24 +47,34 @@ public TestEntityDao(DaoConfig config, DaoSession daoSession) {
         super(config, daoSession);
     }
 
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+    /** Creates the underlying database table. 
+     * @throws SQLException */
+    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'TEST_ENTITY' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'SIMPLE_INT' INTEGER NOT NULL ," + // 1: simpleInt
-                "'SIMPLE_INTEGER' INTEGER," + // 2: simpleInteger
-                "'SIMPLE_STRING_NOT_NULL' TEXT NOT NULL ," + // 3: simpleStringNotNull
-                "'SIMPLE_STRING' TEXT," + // 4: simpleString
-                "'INDEXED_STRING' TEXT," + // 5: indexedString
-                "'INDEXED_STRING_ASC_UNIQUE' TEXT," + // 6: indexedStringAscUnique
-                "'SIMPLE_DATE' INTEGER," + // 7: simpleDate
-                "'SIMPLE_BOOLEAN' INTEGER);"); // 8: simpleBoolean
+        PreparedStatement statement = connection.prepareStatement(
+    		"CREATE TABLE " + constraint + "'TEST_ENTITY' (" + //
+            "'_id' INTEGER PRIMARY KEY ," + // 0: id
+            "'SIMPLE_INT' INTEGER NOT NULL ," + // 1: simpleInt
+            "'SIMPLE_INTEGER' INTEGER," + // 2: simpleInteger
+            "'SIMPLE_STRING_NOT_NULL' TEXT NOT NULL ," + // 3: simpleStringNotNull
+            "'SIMPLE_STRING' TEXT," + // 4: simpleString
+            "'INDEXED_STRING' TEXT," + // 5: indexedString
+            "'INDEXED_STRING_ASC_UNIQUE' TEXT," + // 6: indexedStringAscUnique
+            "'SIMPLE_DATE' INTEGER," + // 7: simpleDate
+            "'SIMPLE_BOOLEAN' INTEGER);" // 8: simpleBoolean
+        ); 
+        statement.execute();
+        statement.close();
         // Add Indexes
-        db.execSQL("CREATE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING ON TEST_ENTITY" +
+        statement = connection.prepareStatement("CREATE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING ON TEST_ENTITY" +
                 " (INDEXED_STRING);");
-        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING_ASC_UNIQUE ON TEST_ENTITY" +
+        statement.execute();
+        statement.close();
+
+        statement = connection.prepareStatement("CREATE UNIQUE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING_ASC_UNIQUE ON TEST_ENTITY" +
                 " (INDEXED_STRING_ASC_UNIQUE);");
+        statement.execute();
+        statement.close();
     }
 
     /** Drops the underlying database table. */
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
index ffa9e718..b263a9e7 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentTest.java
@@ -1,9 +1,10 @@
 package de.greenrobot.daotest;
 
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
 import java.util.concurrent.CountDownLatch;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
 import android.os.SystemClock;
 import de.greenrobot.dao.DaoLog;
 import de.greenrobot.dao.query.DeleteQuery;
@@ -60,17 +61,31 @@ protected void initThreads(Runnable... runnables) throws InterruptedException {
         latchThreadsReady.await();
     }
 
-    public void testConcurrentInsertDuringTx() throws InterruptedException {
+    public void testConcurrentInsertDuringTx() throws InterruptedException, SQLException {
         Runnable runnable1 = new Runnable() {
             @Override
             public void run() {
-                dao.insert(createEntity(null));
+                try
+				{
+					dao.insert(createEntity(null));
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         Runnable runnable2 = new Runnable() {
             @Override
             public void run() {
-                dao.insertInTx(createEntity(null));
+                try
+				{
+					dao.insertInTx(createEntity(null));
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         Runnable runnable3 = new Runnable() {
@@ -79,7 +94,14 @@ public void run() {
                 daoSession.runInTx(new Runnable() {
                     @Override
                     public void run() {
-                        dao.insert(createEntity(null));
+                        try
+						{
+							dao.insert(createEntity(null));
+						}
+						catch ( SQLException e )
+						{
+							e.printStackTrace();
+						}
                     }
                 });
             }
@@ -87,13 +109,27 @@ public void run() {
         Runnable runnable4 = new Runnable() {
             @Override
             public void run() {
-                dao.insertWithoutSettingPk(createEntity(null));
+                try
+				{
+					dao.insertWithoutSettingPk(createEntity(null));
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         Runnable runnable5 = new Runnable() {
             @Override
             public void run() {
-                dao.insertOrReplace(createEntity(null));
+                try
+				{
+					dao.insertOrReplace(createEntity(null));
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         initThreads(runnable1, runnable2, runnable3, runnable4, runnable5);
@@ -102,26 +138,47 @@ public void run() {
         doTx(new Runnable() {
             @Override
             public void run() {
-                dao.insert(createEntity(null));
+                try
+				{
+					dao.insert(createEntity(null));
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         });
         latchThreadsDone.await();
         assertEquals(7, dao.count());
     }
 
-    public void testConcurrentUpdateDuringTx() throws InterruptedException {
+    public void testConcurrentUpdateDuringTx() throws InterruptedException, SQLException {
         final TestEntity entity = createEntity(null);
         dao.insert(entity);
         Runnable runnable1 = new Runnable() {
             @Override
             public void run() {
-                dao.update(entity);
+                try
+				{
+					dao.update(entity);
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         Runnable runnable2 = new Runnable() {
             @Override
             public void run() {
-                dao.updateInTx(entity);
+                try
+				{
+					dao.updateInTx(entity);
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         Runnable runnable3 = new Runnable() {
@@ -130,7 +187,14 @@ public void run() {
                 daoSession.runInTx(new Runnable() {
                     @Override
                     public void run() {
-                        dao.update(entity);
+                        try
+						{
+							dao.update(entity);
+						}
+						catch ( SQLException e )
+						{
+							e.printStackTrace();
+						}
                     }
                 });
             }
@@ -141,25 +205,46 @@ public void run() {
         doTx(new Runnable() {
             @Override
             public void run() {
-                dao.update(entity);
+                try
+				{
+					dao.update(entity);
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         });
         latchThreadsDone.await();
     }
 
-    public void testConcurrentDeleteDuringTx() throws InterruptedException {
+    public void testConcurrentDeleteDuringTx() throws InterruptedException, SQLException {
         final TestEntity entity = createEntity(null);
         dao.insert(entity);
         Runnable runnable1 = new Runnable() {
             @Override
             public void run() {
-                dao.delete(entity);
+                try
+				{
+					dao.delete(entity);
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         Runnable runnable2 = new Runnable() {
             @Override
             public void run() {
-                dao.deleteInTx(entity);
+                try
+				{
+					dao.deleteInTx(entity);
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
         Runnable runnable3 = new Runnable() {
@@ -168,7 +253,14 @@ public void run() {
                 daoSession.runInTx(new Runnable() {
                     @Override
                     public void run() {
-                        dao.delete(entity);
+                        try
+						{
+							dao.delete(entity);
+						}
+						catch ( SQLException e )
+						{
+							e.printStackTrace();
+						}
                     }
                 });
             }
@@ -179,21 +271,35 @@ public void run() {
         doTx(new Runnable() {
             @Override
             public void run() {
-                dao.delete(entity);
+                try
+				{
+					dao.delete(entity);
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         });
         latchThreadsDone.await();
     }
 
     // Query doesn't involve any statement locking currently, but just to stay on the safe side...
-    public void testConcurrentQueryDuringTx() throws InterruptedException {
+    public void testConcurrentQueryDuringTx() throws InterruptedException, SQLException {
         final TestEntity entity = createEntity(null);
         dao.insert(entity);
         final Query<TestEntity> query = dao.queryBuilder().build();
         Runnable runnable1 = new Runnable() {
             @Override
             public void run() {
-                query.forCurrentThread().list();
+                try
+				{
+					query.forCurrentThread().list();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
 
@@ -203,14 +309,21 @@ public void run() {
         doTx(new Runnable() {
             @Override
             public void run() {
-                query.list();
+                try
+				{
+					query.list();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         });
         latchThreadsDone.await();
     }
 
     // No connection for read can be acquired while TX is active; this will deadlock!
-    public void _testConcurrentLockAndQueryDuringTx() throws InterruptedException {
+    public void _testConcurrentLockAndQueryDuringTx() throws InterruptedException, SQLException {
         final TestEntity entity = createEntity(null);
         dao.insert(entity);
         final Query<TestEntity> query = dao.queryBuilder().build();
@@ -218,7 +331,14 @@ public void _testConcurrentLockAndQueryDuringTx() throws InterruptedException {
             @Override
             public void run() {
                 synchronized (query) {
-                    query.list();
+                    try
+					{
+						query.list();
+					}
+					catch ( SQLException e )
+					{
+						e.printStackTrace();
+					}
                 }
             }
         };
@@ -230,21 +350,35 @@ public void run() {
             @Override
             public void run() {
                 synchronized (query) {
-                    query.list();
+                    try
+					{
+						query.list();
+					}
+					catch ( SQLException e )
+					{
+						e.printStackTrace();
+					}
                 }
             }
         });
         latchThreadsDone.await();
     }
 
-    public void testConcurrentDeleteQueryDuringTx() throws InterruptedException {
+    public void testConcurrentDeleteQueryDuringTx() throws InterruptedException, SQLException {
         final TestEntity entity = createEntity(null);
         dao.insert(entity);
         final DeleteQuery<TestEntity> query = dao.queryBuilder().buildDelete();
         Runnable runnable1 = new Runnable() {
             @Override
             public void run() {
-                query.forCurrentThread().executeDeleteWithoutDetachingEntities();
+                try
+				{
+					query.forCurrentThread().executeDeleteWithoutDetachingEntities();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         };
 
@@ -254,13 +388,20 @@ public void run() {
         doTx(new Runnable() {
             @Override
             public void run() {
-                query.executeDeleteWithoutDetachingEntities();
+                try
+				{
+					query.executeDeleteWithoutDetachingEntities();
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+				}
             }
         });
         latchThreadsDone.await();
     }
 
-    public void testConcurrentResolveToMany() throws InterruptedException {
+    public void testConcurrentResolveToMany() throws InterruptedException, SQLException {
         final ToManyEntity entity = new ToManyEntity();
         ToManyEntityDao toManyDao = daoSession.getToManyEntityDao();
         toManyDao.insert(entity);
@@ -282,7 +423,7 @@ public void run() {
         latchThreadsDone.await();
     }
 
-    public void testConcurrentResolveToOne() throws InterruptedException {
+    public void testConcurrentResolveToOne() throws InterruptedException, SQLException {
         final TreeEntity entity = new TreeEntity();
         TreeEntityDao toOneDao = daoSession.getTreeEntityDao();
         toOneDao.insert(entity);
@@ -309,17 +450,25 @@ public void run() {
      * threads and costs more memory.
      */
     public void _testThreadLocalSpeed() {
-        final SQLiteDatabase db = dao.getDatabase();
-        ThreadLocal<SQLiteStatement> threadLocal = new ThreadLocal<SQLiteStatement>() {
+        final Connection connection = dao.getConnection();
+        ThreadLocal<PreparedStatement> threadLocal = new ThreadLocal<PreparedStatement>() {
             @Override
-            protected SQLiteStatement initialValue() {
-                return db.compileStatement("SELECT 42");
+            protected PreparedStatement initialValue() {
+                try
+				{
+					return connection.prepareStatement("SELECT 42");
+				}
+				catch ( SQLException e )
+				{
+					e.printStackTrace();
+					return null;
+				}
             }
         };
         threadLocal.get();
         long start = SystemClock.currentThreadTimeMillis();
         for (int i = 0; i < 1000; i++) {
-            SQLiteStatement sqLiteStatement = threadLocal.get();
+        	PreparedStatement sqLiteStatement = threadLocal.get();
             assertNotNull(sqLiteStatement);
         }
         Long time = SystemClock.currentThreadTimeMillis() - start;
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
index 89f66b6c..b870495d 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DaoSessionConcurrentWALTest.java
@@ -1,60 +1,55 @@
 package de.greenrobot.daotest;
 
-import android.database.sqlite.SQLiteDatabase;
-import android.os.Build;
-import de.greenrobot.dao.DaoLog;
-import de.greenrobot.dao.query.Query;
-
-import java.lang.reflect.Method;
 
 public class DaoSessionConcurrentWALTest extends DaoSessionConcurrentTest {
 
-    @Override
-    protected SQLiteDatabase createDatabase() {
-        int MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;
-        getContext().deleteDatabase(DB_NAME);
-        return getContext().openOrCreateDatabase(DB_NAME, MODE_ENABLE_WRITE_AHEAD_LOGGING, null);
-    }
-
-    public void testConcurrentLockAndQueryDuringTxWAL() throws InterruptedException {
-        if (Build.VERSION.SDK_INT >= 16) {
-            try {
-                Method method = db.getClass().getMethod("isWriteAheadLoggingEnabled");
-                boolean walEnabled = (Boolean) method.invoke(db);
-                if (!walEnabled) {
-                    throw new RuntimeException("WAL is disabled. This test will deadlock without WAL");
-                }
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
-        } else {
-            DaoLog.e("Sorry, we need at least API level 16 for WAL");
-            return;
-        }
-
-        final TestEntity entity = createEntity(null);
-        dao.insert(entity);
-        final Query<TestEntity> query = dao.queryBuilder().build();
-        Runnable runnable1 = new Runnable() {
-            @Override
-            public void run() {
-                synchronized (query) {
-                    query.forCurrentThread().list();
-                }
-            }
-        };
-
-        initThreads(runnable1);
-        // Builds the statement so it is ready immediately in the thread
-        query.list();
-        doTx(new Runnable() {
-            @Override
-            public void run() {
-                synchronized (query) {
-                    query.list();
-                }
-            }
-        });
-        latchThreadsDone.await();
-    }
+// FIXME is there a WriteAheadLogging on JDBC?
+//    @Override
+//    protected SQLiteDatabase createDatabase() {
+//        int MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;
+//        getContext().deleteDatabase(DB_NAME);
+//        return getContext().openOrCreateDatabase(DB_NAME, MODE_ENABLE_WRITE_AHEAD_LOGGING, null);
+//    }
+//
+//    public void testConcurrentLockAndQueryDuringTxWAL() throws InterruptedException {
+//        if (Build.VERSION.SDK_INT >= 16) {
+//            try {
+//                Method method = db.getClass().getMethod("isWriteAheadLoggingEnabled");
+//                boolean walEnabled = (Boolean) method.invoke(db);
+//                if (!walEnabled) {
+//                    throw new RuntimeException("WAL is disabled. This test will deadlock without WAL");
+//                }
+//            } catch (Exception e) {
+//                throw new RuntimeException(e);
+//            }
+//        } else {
+//            DaoLog.e("Sorry, we need at least API level 16 for WAL");
+//            return;
+//        }
+//
+//        final TestEntity entity = createEntity(null);
+//        dao.insert(entity);
+//        final Query<TestEntity> query = dao.queryBuilder().build();
+//        Runnable runnable1 = new Runnable() {
+//            @Override
+//            public void run() {
+//                synchronized (query) {
+//                    query.forCurrentThread().list();
+//                }
+//            }
+//        };
+//
+//        initThreads(runnable1);
+//        // Builds the statement so it is ready immediately in the thread
+//        query.list();
+//        doTx(new Runnable() {
+//            @Override
+//            public void run() {
+//                synchronized (query) {
+//                    query.list();
+//                }
+//            }
+//        });
+//        latchThreadsDone.await();
+//    }
 }
diff --git a/DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java b/DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java
index df70ce52..a2a2e041 100644
--- a/DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DaoSessionTest.java
@@ -17,6 +17,8 @@
  */
 package de.greenrobot.daotest;
 
+import java.sql.SQLException;
+
 import de.greenrobot.dao.test.AbstractDaoSessionTest;
 
 public class DaoSessionTest extends AbstractDaoSessionTest<DaoMaster, DaoSession> {
@@ -25,7 +27,7 @@ public DaoSessionTest() {
         super(DaoMaster.class);
     }
 
-    public void testInsertAndLoad() {
+    public void testInsertAndLoad() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         daoSession.insert(entity);
         Long id = entity.getId();
@@ -34,7 +36,7 @@ public void testInsertAndLoad() {
         assertNotNull(entity2);
     }
 
-    public void testIdentity() {
+    public void testIdentity() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         daoSession.insert(entity);
         SimpleEntity entity2 = daoSession.load(SimpleEntity.class, entity.getId());
@@ -43,7 +45,7 @@ public void testIdentity() {
         assertSame(entity, entity3);
     }
 
-    public void testIdentityPerSession() {
+    public void testIdentityPerSession() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         daoSession.insert(entity);
         DaoSession session2 = daoMaster.newSession();
@@ -51,7 +53,7 @@ public void testIdentityPerSession() {
         assertNotSame(entity, entity2);
     }
 
-    public void testSessionReset() {
+    public void testSessionReset() throws SQLException {
         SimpleEntity entity = new SimpleEntity();
         daoSession.insert(entity);
         daoSession.clear();
diff --git a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
index 47e5c89a..dd7b6bcb 100644
--- a/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/DbUtilsTest.java
@@ -18,20 +18,23 @@
 package de.greenrobot.daotest;
 
 import java.io.IOException;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 
-import android.database.Cursor;
 import de.greenrobot.dao.DbUtils;
 import de.greenrobot.dao.test.DbTest;
 
 public class DbUtilsTest extends DbTest {
-    public void testExecuteSqlScript() throws IOException {
-        DbUtils.executeSqlScript(getContext(), db, "minimal-entity.sql");
-        Cursor cursor = db.rawQuery("SELECT count(*) from MINIMAL_ENTITY", null);
+    public void testExecuteSqlScript() throws IOException, SQLException {
+        DbUtils.executeSqlScript(getContext(), connection, "minimal-entity.sql");
+        PreparedStatement statement = connection.prepareStatement( "SELECT count(*) from MINIMAL_ENTITY" );
+        ResultSet resultSet = statement.executeQuery();
         try {
-            cursor.moveToFirst();
-            assertEquals(5, cursor.getInt(0));
+            resultSet.next();
+            assertEquals(5, resultSet.getInt(0));
         } finally {
-            cursor.close();
+            statement.close();
         }
     }
 
diff --git a/DaoTest/src/de/greenrobot/daotest/IndexTest.java b/DaoTest/src/de/greenrobot/daotest/IndexTest.java
index b5f15d46..04b8f0b9 100644
--- a/DaoTest/src/de/greenrobot/daotest/IndexTest.java
+++ b/DaoTest/src/de/greenrobot/daotest/IndexTest.java
@@ -1,5 +1,6 @@
 package de.greenrobot.daotest;
 
+import java.sql.SQLException;
 import java.util.List;
 
 import junit.framework.Assert;
@@ -13,10 +14,10 @@ public IndexTest() {
         super(SqliteMasterDao.class);
     }
 
-    public void testIndexesCreated() {
+    public void testIndexesCreated() throws SQLException {
         Assert.assertEquals(0, getIndexes().size());
 
-        TestEntityDao.createTable(db, false);
+        TestEntityDao.createTable(connection, false);
         List<SqliteMaster> indexes = getIndexes();
         Assert.assertEquals(2, indexes.size());
 
@@ -32,15 +33,15 @@ public void testIndexesCreated() {
         }
     }
     
-    public void testIndexCreateIfNotExists() {
+    public void testIndexCreateIfNotExists() throws SQLException {
         Assert.assertEquals(0, getIndexes().size());
-        TestEntityDao.createTable(db, false);
+        TestEntityDao.createTable(connection, false);
         Assert.assertEquals(2, getIndexes().size());
-        TestEntityDao.createTable(db, true);
+        TestEntityDao.createTable(connection, true);
         Assert.assertEquals(2, getIndexes().size());
     }
 
-    private List<SqliteMaster> getIndexes() {
+    private List<SqliteMaster> getIndexes() throws SQLException {
         String where = "WHERE " + Properties.Type.columnName + "=? ORDER BY " + Properties.Name.columnName;
         List<SqliteMaster> indexes = dao.queryRaw(where, "index");
         return indexes;
