diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index e25cb22d..e7025104 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -1,19 +1,19 @@
 <#--
 
 Copyright (C) 2011-2016 Markus Junginger, greenrobot (http://greenrobot.org)
-                                                                           
-This file is part of greenDAO Generator.                                   
-                                                                           
-greenDAO Generator is free software: you can redistribute it and/or modify 
-it under the terms of the GNU General Public License as published by       
-the Free Software Foundation, either version 3 of the License, or          
-(at your option) any later version.                                        
-greenDAO Generator is distributed in the hope that it will be useful,      
-but WITHOUT ANY WARRANTY; without even the implied warranty of             
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
-GNU General Public License for more details.                               
-                                                                           
-You should have received a copy of the GNU General Public License          
+
+This file is part of greenDAO Generator.
+
+greenDAO Generator is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+greenDAO Generator is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
@@ -65,7 +65,7 @@ import ${entity.javaPackage}.${entity.className}.Builder;
 
 </#if>
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
+/**
  * DAO for table "${entity.dbName}".
 */
 public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}> {
@@ -96,10 +96,10 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
     public ${entity.classNameDao}(DaoConfig config) {
         super(config);
     }
-    
+
     public ${entity.classNameDao}(DaoConfig config, ${schema.prefix}DaoSession daoSession) {
         super(config, daoSession);
-<#if entity.active>        
+<#if entity.active>
         this.daoSession = daoSession;
 </#if>
     }
@@ -116,10 +116,10 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
         // Add Indexes
 <#list entity.indexes as index>
         db.execSQL("CREATE <#if index.unique>UNIQUE </#if>INDEX " + constraint + "${index.name} ON \"${entity.dbName}\"" +
-                " (<#list index.properties 
+                " (<#list index.properties
 as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??> ${index.propertiesOrder[property_index]}</#if><#sep>,</#list>);");
 </#list>
-</#if>         
+</#if>
     }
 
     /** Drops the underlying database table. */
@@ -167,12 +167,13 @@ as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??
 </#list>
     }
 
+</#list>
     @Override
     protected ${entity.className} newEmptyEntity() {
         return new ${entity.className}();
     }
 
-<#if entity.active && !entity.protobuf>
+<#if entity.active>
     @Override
     protected final void attachEntity(${entity.className} entity) {
         super.attachEntity(entity);
@@ -190,8 +191,8 @@ as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??
             entity.pkProperty.propertyType == "Date">)</#if>;
 <#else>
         return null;
-</#if>  
-    }    
+</#if>
+    }
 
     @Override
     public ${entity.className} readEntity(Cursor cursor, int offset) {
@@ -203,43 +204,43 @@ as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??
     </#if>        builder.set${property.propertyName?cap_first}(cursor.get${toCursorType[property.propertyType]}(offset + ${property_index}));
 <#if !property.notNull>
         }
-</#if>        
-</#list>        
+</#if>
+</#list>
         return builder.build();
 <#elseif entity.constructors>
 <#--
-############################## readEntity non-protobuff, constructor ############################## 
+############################## readEntity non-protobuff, constructor ##############################
 -->
         ${entity.className} entity = new ${entity.className}( //
 <#list entity.properties as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#--
             -->${property.getEntityValueExpression("cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})")}<#--
             --><#if property_has_next>,</#if> // ${property.propertyName}
-</#list>        
+</#list>
         );
         return entity;
 <#else>
 <#--
-############################## readEntity non-protobuff, setters ############################## 
+############################## readEntity non-protobuff, setters ##############################
 -->
         ${entity.className} entity = new ${entity.className}();
         readEntity(cursor, entity, offset);
         return entity;
 </#if>
     }
-     
+
     @Override
     public void readEntity(Cursor cursor, ${entity.className} entity, int offset) {
 <#if entity.protobuf>
         throw new UnsupportedOperationException("Protobuf objects cannot be modified");
-<#else> 
+<#else>
 <#list entity.properties as property>
         entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#--
             -->${property.getEntityValueExpression("cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})")});
 </#list>
 </#if>
      }
-    
+
     @Override
     protected final ${entity.pkType} updateKeyAfterInsert(${entity.className} entity, long rowId) {
 <#if entity.pkProperty??>
@@ -256,7 +257,7 @@ as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??
         return null;
 </#if>
     }
-    
+
     @Override
     public ${entity.pkType} getKey(${entity.className} entity) {
 <#if entity.pkProperty??>
@@ -267,7 +268,7 @@ as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??
         }
 <#else>
         return null;
-</#if>    
+</#if>
     }
 
     @Override
@@ -292,7 +293,7 @@ as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??
     protected final boolean isEntityUpdateable() {
         return ${(!entity.protobuf)?string};
     }
-    
+
 <#list entity.incomingToManyRelations as toMany>
     /** Internal query to resolve the "${toMany.name}" to-many relationship of ${toMany.sourceEntity.className}. */
     public List<${toMany.targetEntity.className}> _query${toMany.sourceEntity.className?cap_first}_${toMany.name?cap_first}(<#--
@@ -327,7 +328,7 @@ as property>\"${property.dbName}\"<#if (index.propertiesOrder[property_index])??
         return query.list();
     }
 
-</#list>   
+</#list>
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
