diff --git a/daogenerator/src-template/dao.ftl b/daogenerator/src-template/dao.ftl
index b6262e18..336da1b6 100644
--- a/daogenerator/src-template/dao.ftl
+++ b/daogenerator/src-template/dao.ftl
@@ -123,7 +123,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     @Override
     protected void bindValues(SQLiteStatement stmt, ${entity.className} entity) {
         stmt.clearBindings();
-<#list entity.properties as property>
+<#list entity.propertiesColumns as property>
 <#if property.notNull || entity.protobuf>
 <#if entity.protobuf>
         if(entity.has${property.propertyName?cap_first}()) {
@@ -185,7 +185,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     public ${entity.className} readEntity(Cursor cursor, int offset) {
 <#if entity.protobuf>
         Builder builder = ${entity.className}.newBuilder();
-<#list entity.properties as property>
+<#list entity.propertiesColumns as property>
 <#if !property.notNull>
         if (!cursor.isNull(offset + ${property_index})) {
     </#if>        builder.set${property.propertyName?cap_first}(cursor.get${toCursorType[property.propertyType]}(offset + ${property_index}));
@@ -199,7 +199,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 ############################## readEntity non-protobuff, constructor ############################## 
 -->
         ${entity.className} entity = new ${entity.className}( //
-<#list entity.properties as property>
+<#list entity.propertiesColumns as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
@@ -224,7 +224,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.protobuf>
         throw new UnsupportedOperationException("Protobuf objects cannot be modified");
 <#else> 
-<#list entity.properties as property>
+<#list entity.propertiesColumns as property>
         entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
             property.propertyType == "Byte">(byte) </#if><#if
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
diff --git a/daogenerator/src-template/entity-base.ftl b/daogenerator/src-template/entity-base.ftl
index b49ce072..9d96a093 100644
--- a/daogenerator/src-template/entity-base.ftl
+++ b/daogenerator/src-template/entity-base.ftl
@@ -55,8 +55,11 @@ ${keepIncludes!}
  */
 <@print_annotations entity.annotations, ""/>
 abstract public class ${entity.classNameBase}<#if
-entity.superclass?has_content> extends ${entity.superclass} </#if><#if
-entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
+entity.superclassEntity?has_content> extends ${entity.superclassEntity.className}<#elseif
+entity.superclass?has_content> extends ${entity.superclass}</#if><#if
+entity.interfacesToImplement?has_content>
+
+implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 
 <#list entity.properties as property>
@@ -99,7 +102,8 @@ ${keepFields!}
 </#if>
 <#if entity.constructors>
     <@print_annotations entity.emptyConstructorAnnotations, "    "/>
-    public ${entity.classNameBase}() {
+    public ${entity.classNameBase}() {<#if entity.superclassEntity?has_content>
+        super();</#if>
     }
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
 
@@ -110,10 +114,25 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 </#list>
     }
 </#if>
+<#if entity.superclassEntity?has_content>
+
+    public ${entity.classNameBase}(<#list entity.superclassEntity.properties as
+property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
+        super(<#list entity.superclassEntity.properties as
+property>${property.propertyName}<#if property_has_next>, </#if></#list>);
+    }
+</#if>
 
     <@print_annotations entity.fullConstructorAnnotations, "    "/>
-    public ${entity.classNameBase}(<#list entity.properties as
+    public ${entity.classNameBase}(<#if entity.superclassEntity?has_content><#list
+entity.superclassEntity.properties as property>${property.javaType} ${property.propertyName}<#if
+property_has_next || entity.properties?has_content>, </#if></#list></#if><#list entity.properties as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
+<#if entity.superclassEntity?has_content>
+        super(<#list entity.superclassEntity.properties as
+property>${property.propertyName}<#if property_has_next>, </#if></#list>);
+</#if>
+
 <#list entity.properties as property>
         this.${property.propertyName} = ${property.propertyName};
 </#list>
diff --git a/daogenerator/src-template/entity.ftl b/daogenerator/src-template/entity.ftl
index 234087c5..61a703d0 100644
--- a/daogenerator/src-template/entity.ftl
+++ b/daogenerator/src-template/entity.ftl
@@ -52,22 +52,39 @@ ${keepFields!}
 
 </#if>
 <#if entity.constructors>
-    public ${entity.className}() {
+    <@print_annotations entity.emptyConstructorAnnotations, "    "/>
+    public ${entity.className}() {<#if entity.superclassEntity?has_content>
+        super();</#if>
     }
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
 
     public ${entity.className}(<#list entity.propertiesPk as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.propertiesPk as property>
-        super(${property.propertyName});
+        this.${property.propertyName} = ${property.propertyName};
 </#list>
     }
 </#if>
+<#if entity.superclassEntity?has_content>
 
-    public ${entity.className}(<#list entity.properties as
+    public ${entity.className}(<#list entity.superclassEntity.properties as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
-        super(<#list entity.properties as
-        property>${property.propertyName}<#if property_has_next>, </#if></#list>);
+        super(<#list entity.superclassEntity.properties as
+property>${property.propertyName}<#if property_has_next>, </#if></#list>);
+    }
+</#if>
+
+    <@print_annotations entity.fullConstructorAnnotations, "    "/>
+    public ${entity.className}(<#if entity.superclassEntity?has_content><#list
+entity.superclassEntity.properties as property>${property.javaType} ${property.propertyName}<#if
+property_has_next || entity.properties?has_content>, </#if></#list></#if><#list entity.properties as
+property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
+<#if entity.superclassEntity?has_content>
+        super(<#if entity.superclassEntity?has_content><#list
+entity.superclassEntity.properties as property>${property.propertyName}<#if
+property_has_next || entity.properties?has_content>, </#if></#list></#if><#list entity.properties as
+property>${property.propertyName}<#if property_has_next>, </#if></#list>);
+</#if>
     }
 </#if>
 <#if entity.hasKeepSections>
diff --git a/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 5f73d4ca..71315720 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -107,7 +107,9 @@ public void generateAll(Schema schema, String outDir, String outDirModel, String
 
         List<Entity> entities = schema.getEntities();
         for (Entity entity : entities) {
-            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
+            if (!entity.isSkipDaoGeneration()) {
+                generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
+            }
             if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
                 //generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
                 generate(templateEntity, outDirModelFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Entity.java b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
index 71df4dec..e372cc96 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -17,9 +17,14 @@
  */
 package de.greenrobot.daogenerator;
 
-import de.greenrobot.daogenerator.Property.PropertyBuilder;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
 
-import java.util.*;
+import de.greenrobot.daogenerator.Property.PropertyBuilder;
 
 /**
  * Model class for an entity: a Java data object mapped to a data base table. A new entity is added to a {@link Schema}
@@ -72,6 +77,9 @@
     private Boolean active;
     private Boolean hasKeepSections;
 
+    private boolean skipDaoGeneration;
+    private Entity superclassEntity;
+
     Entity(Schema schema, String className) {
         this.schema = schema;
         this.className = className;
@@ -476,6 +484,22 @@ public void setSuperclass(String classToExtend) {
         this.superclass = classToExtend;
     }
 
+    public boolean isSkipDaoGeneration() {
+        return skipDaoGeneration;
+    }
+
+    public void setSkipDaoGeneration(boolean skipDaoGeneration) {
+        this.skipDaoGeneration = skipDaoGeneration;
+    }
+
+    public Entity getSuperclassEntity() {
+        return superclassEntity;
+    }
+
+    public void setSuperclassEntity(Entity superclassEntity) {
+        this.superclassEntity = superclassEntity;
+    }
+
     void init2ndPass() {
         init2nPassNamesWithDefaults();
 
@@ -498,6 +522,9 @@ void init2ndPass() {
         }
 
         propertiesColumns = new ArrayList<Property>(properties);
+        if (superclassEntity != null) {
+            propertiesColumns.addAll(0, superclassEntity.getProperties());
+        }
         for (ToOne toOne : toOneRelations) {
             toOne.init2ndPass();
             Property[] fkProperties = toOne.getFkProperties();
