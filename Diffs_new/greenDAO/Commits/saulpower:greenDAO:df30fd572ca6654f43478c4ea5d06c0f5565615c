diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 77f33ddf..8cfa96fd 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -54,7 +54,7 @@ import ${additionalImport};
 </#if>
 import ${entity.javaPackage}.${entity.className};
 <#list entity.properties as property>
-    <#if property.anEnum && entity.className != property.entityEnum.entity.className>
+    <#if property.anEnum>
 import ${entity.javaPackage}.${property.entityEnum.entity.className}.${property.entityEnum.enumName};
     </#if>
 </#list>
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 3a76377c..e162096e 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -36,7 +36,7 @@
 public class Entity {
     private final Schema schema;
     private final String className;
-    private final List<Property> properties;
+    private final Map<String, Property> propertiesMap;
     private List<Property> propertiesColumns;
     private final List<Property> propertiesPk;
     private final List<Property> propertiesNonPk;
@@ -72,7 +72,7 @@
     Entity(Schema schema, String className) {
         this.schema = schema;
         this.className = className;
-        properties = new ArrayList<Property>();
+        propertiesMap = new HashMap<String, Property>();
         propertiesPk = new ArrayList<Property>();
         propertiesNonPk = new ArrayList<Property>();
         propertyNames = new HashSet<String>();
@@ -133,20 +133,20 @@ public PropertyBuilder addEnumProperty(EntityEnum entityEnum, String propertyNam
     }
 
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
-        if (!propertyNames.add(propertyName)) {
-            throw new RuntimeException("Property already defined: " + propertyName);
-        }
+
+        if (propertiesMap.containsKey(propertyName)) return new Property.PropertyBuilder(propertiesMap.get(propertyName));
+
         PropertyBuilder builder = new Property.PropertyBuilder(schema, this, propertyType, propertyName);
-        properties.add(builder.getProperty());
+        propertiesMap.put(propertyName, builder.getProperty());
         return builder;
     }
 
     public PropertyBuilder addProperty(EntityEnum entityEnum, String propertyName) {
-        if (!propertyNames.add(propertyName)) {
-            throw new RuntimeException("Property already defined: " + propertyName);
-        }
+
+        if (propertiesMap.containsKey(propertyName)) return new Property.PropertyBuilder(propertiesMap.get(propertyName));
+
         PropertyBuilder builder = new Property.PropertyBuilder(schema, this, entityEnum, propertyName);
-        properties.add(builder.getProperty());
+        propertiesMap.put(propertyName, builder.getProperty());
         return builder;
     }
 
@@ -289,9 +289,7 @@ public String getClassName() {
         return className;
     }
 
-    public List<Property> getProperties() {
-        return properties;
-    }
+    public List<Property> getProperties() { return new ArrayList<Property>(propertiesMap.values()); }
 
     public List<Property> getPropertiesColumns() {
         return propertiesColumns;
@@ -465,15 +463,17 @@ public void setSuperclass(String classToExtend) {
     void init2ndPass() {
         init2nPassNamesWithDefaults();
 
-        for (int i = 0; i < properties.size(); i++) {
-            Property property = properties.get(i);
-            property.setOrdinal(i);
+        int count = 0;
+        for (Property property : propertiesMap.values()) {
+            property.setOrdinal(count);
             property.init2ndPass();
             if (property.isPrimaryKey()) {
                 propertiesPk.add(property);
             } else {
                 propertiesNonPk.add(property);
             }
+
+            count++;
         }
 
         if (propertiesPk.size() == 1) {
@@ -483,7 +483,7 @@ void init2ndPass() {
             pkType = "Void";
         }
 
-        propertiesColumns = new ArrayList<Property>(properties);
+        propertiesColumns = new ArrayList<Property>(propertiesMap.values());
         for (ToOne toOne : toOneRelations) {
             toOne.init2ndPass();
             Property[] fkProperties = toOne.getFkProperties();
@@ -570,7 +570,7 @@ protected void init2ndPassIndexNamesWithDefaults() {
     }
 
     void init3ndPass() {
-        for (Property property : properties) {
+        for (Property property : propertiesMap.values()) {
             property.init3ndPass();
         }
 
@@ -583,7 +583,7 @@ private void init3rdPassRelations() {
         for (ToOne toOne : toOneRelations) {
             toOne.init3ndPass();
             if (!toOneNames.add(toOne.getName().toLowerCase())) {
-                throw new RuntimeException("Duplicate name for " + toOne);
+                throw new RuntimeException("Duplicate name for " + toOne + " on " + getClassName());
             }
         }
 
@@ -632,7 +632,7 @@ private void checkAdditionalImportsEntityTargetEntity(Entity targetEntity) {
     }
 
     public void validatePropertyExists(Property property) {
-        if (!properties.contains(property)) {
+        if (!propertiesMap.containsValue(property)) {
             throw new RuntimeException("Property " + property + " does not exist in " + this);
         }
     }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index bb5226f8..65110348 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -31,6 +31,10 @@ public PropertyBuilder(Schema schema, Entity entity, EntityEnum entityEnum, Stri
             property = new EnumProperty(schema, entity, entityEnum, propertyName);
         }
 
+        public PropertyBuilder(Property property) {
+            this.property = property;
+        }
+
         public PropertyBuilder columnName(String columnName) {
             property.columnName = columnName;
             return this;
