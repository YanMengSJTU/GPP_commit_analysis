diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
index e3d85d15..3a75b017 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
@@ -9,6 +9,7 @@
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 import de.greenrobot.daoexample.NoteDao;
+import de.greenrobot.daoexample.NoteTypeDao;
 import de.greenrobot.daoexample.CustomerDao;
 import de.greenrobot.daoexample.OrderDao;
 
@@ -22,6 +23,7 @@
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
         NoteDao.createTable(db, ifNotExists);
+        NoteTypeDao.createTable(db, ifNotExists);
         CustomerDao.createTable(db, ifNotExists);
         OrderDao.createTable(db, ifNotExists);
     }
@@ -29,6 +31,7 @@ public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
         NoteDao.dropTable(db, ifExists);
+        NoteTypeDao.dropTable(db, ifExists);
         CustomerDao.dropTable(db, ifExists);
         OrderDao.dropTable(db, ifExists);
     }
@@ -63,6 +66,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
         registerDaoClass(NoteDao.class);
+        registerDaoClass(NoteTypeDao.class);
         registerDaoClass(CustomerDao.class);
         registerDaoClass(OrderDao.class);
     }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
index e6d19f42..da2f6d1a 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
@@ -10,10 +10,12 @@
 import de.greenrobot.dao.internal.DaoConfig;
 
 import de.greenrobot.daoexample.Note;
+import de.greenrobot.daoexample.NoteType;
 import de.greenrobot.daoexample.Customer;
 import de.greenrobot.daoexample.Order;
 
 import de.greenrobot.daoexample.NoteDao;
+import de.greenrobot.daoexample.NoteTypeDao;
 import de.greenrobot.daoexample.CustomerDao;
 import de.greenrobot.daoexample.OrderDao;
 
@@ -27,10 +29,12 @@
 public class DaoSession extends AbstractDaoSession {
 
     private final DaoConfig noteDaoConfig;
+    private final DaoConfig noteTypeDaoConfig;
     private final DaoConfig customerDaoConfig;
     private final DaoConfig orderDaoConfig;
 
     private final NoteDao noteDao;
+    private final NoteTypeDao noteTypeDao;
     private final CustomerDao customerDao;
     private final OrderDao orderDao;
 
@@ -41,6 +45,9 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         noteDaoConfig = daoConfigMap.get(NoteDao.class).clone();
         noteDaoConfig.initIdentityScope(type);
 
+        noteTypeDaoConfig = daoConfigMap.get(NoteTypeDao.class).clone();
+        noteTypeDaoConfig.initIdentityScope(type);
+
         customerDaoConfig = daoConfigMap.get(CustomerDao.class).clone();
         customerDaoConfig.initIdentityScope(type);
 
@@ -48,16 +55,19 @@ public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends
         orderDaoConfig.initIdentityScope(type);
 
         noteDao = new NoteDao(noteDaoConfig, this);
+        noteTypeDao = new NoteTypeDao(noteTypeDaoConfig, this);
         customerDao = new CustomerDao(customerDaoConfig, this);
         orderDao = new OrderDao(orderDaoConfig, this);
 
         registerDao(Note.class, noteDao);
+        registerDao(NoteType.class, noteTypeDao);
         registerDao(Customer.class, customerDao);
         registerDao(Order.class, orderDao);
     }
     
     public void clear() {
         noteDaoConfig.getIdentityScope().clear();
+        noteTypeDaoConfig.getIdentityScope().clear();
         customerDaoConfig.getIdentityScope().clear();
         orderDaoConfig.getIdentityScope().clear();
     }
@@ -66,6 +76,10 @@ public NoteDao getNoteDao() {
         return noteDao;
     }
 
+    public NoteTypeDao getNoteTypeDao() {
+        return noteTypeDao;
+    }
+
     public CustomerDao getCustomerDao() {
         return customerDao;
     }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index ed057058..97eedd73 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -9,8 +9,9 @@
     private Long id;
     /** Not-null value. */
     private String text;
-    private String comment;
+    private NoteType type;
     private java.util.Date date;
+    private String comment;
 
     public Note() {
     }
@@ -19,11 +20,12 @@ public Note(Long id) {
         this.id = id;
     }
 
-    public Note(Long id, String text, String comment, java.util.Date date) {
+    public Note(Long id, String text, NoteType type, java.util.Date date, String comment) {
         this.id = id;
         this.text = text;
-        this.comment = comment;
+        this.type = type;
         this.date = date;
+        this.comment = comment;
     }
 
     public Long getId() {
@@ -44,12 +46,12 @@ public void setText(String text) {
         this.text = text;
     }
 
-    public String getComment() {
-        return comment;
+    public NoteType getType() {
+        return type;
     }
 
-    public void setComment(String comment) {
-        this.comment = comment;
+    public void setType(NoteType type) {
+        this.type = type;
     }
 
     public java.util.Date getDate() {
@@ -60,4 +62,12 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index 0fcaceee..1fd3e0b7 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -9,6 +9,7 @@
 import de.greenrobot.dao.internal.DaoConfig;
 
 import de.greenrobot.daoexample.Note;
+import de.greenrobot.daoexample.NoteType.NoteType;
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -25,8 +26,9 @@
     public static class Properties {
         public final static Property Id = new Property(0, Long.class, "id", true, "_id");
         public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
-        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
+        public final static Property Type = new Property(2, NoteType.class, "type", false, "TYPE");
         public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
+        public final static Property Comment = new Property(4, String.class, "comment", false, "COMMENT");
     };
 
 
@@ -44,8 +46,9 @@ public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                 "'_id' INTEGER PRIMARY KEY ," + // 0: id
                 "'TEXT' TEXT NOT NULL ," + // 1: text
-                "'COMMENT' TEXT," + // 2: comment
-                "'DATE' INTEGER);"); // 3: date
+                "'TYPE' INTEGER," + // 2: type
+                "'DATE' INTEGER," + // 3: date
+                "'COMMENT' TEXT);"); // 4: comment
     }
 
     /** Drops the underlying database table. */
@@ -65,15 +68,20 @@ protected void bindValues(SQLiteStatement stmt, Note entity) {
         }
         stmt.bindString(2, entity.getText());
  
-        String comment = entity.getComment();
-        if (comment != null) {
-            stmt.bindString(3, comment);
+        NoteType type = entity.getType();
+        if (type != null) {
+            stmt.bindLong(3, type.getValue());
         }
  
         java.util.Date date = entity.getDate();
         if (date != null) {
             stmt.bindLong(4, date.getTime());
         }
+ 
+        String comment = entity.getComment();
+        if (comment != null) {
+            stmt.bindString(5, comment);
+        }
     }
 
     /** @inheritdoc */
@@ -88,8 +96,9 @@ public Note readEntity(Cursor cursor, int offset) {
         Note entity = new Note( //
             cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
             cursor.getString(offset + 1), // text
-            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
-            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
+            cursor.isNull(offset + 2) ? null : NoteType.fromInt(cursor.getLong(offset + 2)), // type
+            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
+            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // comment
         );
         return entity;
     }
@@ -99,8 +108,9 @@ public Note readEntity(Cursor cursor, int offset) {
     public void readEntity(Cursor cursor, Note entity, int offset) {
         entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
         entity.setText(cursor.getString(offset + 1));
-        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
+        entity.setType(cursor.isNull(offset + 2) ? null : NoteType.fromInt(cursor.getLong(offset + 2)));
         entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
+        entity.setComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
      }
     
     /** @inheritdoc */
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteType.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteType.java
new file mode 100644
index 00000000..db540e55
--- /dev/null
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteType.java
@@ -0,0 +1,35 @@
+package de.greenrobot.daoexample;
+
+import de.greenrobot.dao.DaoEnum;
+import java.util.HashMap;
+import java.util.Map;
+
+public enum NoteType implements DaoEnum {
+    ULTIMATE(1),
+    FRISBEE(2),
+    ROCKS(3);
+
+    private static final Map<Long, NoteType> intToTypeMap = new HashMap<Long, NoteType>();
+
+    static {
+        for (NoteType type : NoteType.values()) {
+            intToTypeMap.put(type.value, type);
+        }
+    }
+
+    public static NoteType fromInt(long i) {
+        NoteType type = intToTypeMap.get(Long.valueOf(i));
+        return type;
+    }
+
+    private final long value;
+
+    private NoteType(long value) {
+        this.value = value;
+    }
+
+    @Override
+    public long getValue() {
+        return value;
+    }
+}
\ No newline at end of file
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index 7b267172..b31da4bf 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -10,10 +10,10 @@
  */
 public class Order {
 
-    private OrderType type;
     private Long id;
-    private java.util.Date date;
     private long customerId;
+    private java.util.Date date;
+    private OrderType type;
 
     /** Used to resolve relations */
     private transient DaoSession daoSession;
@@ -32,11 +32,11 @@ public Order(Long id) {
         this.id = id;
     }
 
-    public Order(OrderType type, Long id, java.util.Date date, long customerId) {
-        this.type = type;
+    public Order(Long id, long customerId, java.util.Date date, OrderType type) {
         this.id = id;
-        this.date = date;
         this.customerId = customerId;
+        this.date = date;
+        this.type = type;
     }
 
     /** called by internal mechanisms, do not call yourself. */
@@ -45,14 +45,6 @@ public void __setDaoSession(DaoSession daoSession) {
         myDao = daoSession != null ? daoSession.getOrderDao() : null;
     }
 
-    public OrderType getType() {
-        return type;
-    }
-
-    public void setType(OrderType type) {
-        this.type = type;
-    }
-
     public Long getId() {
         return id;
     }
@@ -61,6 +53,14 @@ public void setId(Long id) {
         this.id = id;
     }
 
+    public long getCustomerId() {
+        return customerId;
+    }
+
+    public void setCustomerId(long customerId) {
+        this.customerId = customerId;
+    }
+
     public java.util.Date getDate() {
         return date;
     }
@@ -69,12 +69,12 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
-    public long getCustomerId() {
-        return customerId;
+    public OrderType getType() {
+        return type;
     }
 
-    public void setCustomerId(long customerId) {
-        this.customerId = customerId;
+    public void setType(OrderType type) {
+        this.type = type;
     }
 
     /** To-one relationship, resolved on first access. */
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index ea43c257..f71d36bf 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -29,10 +29,10 @@
      * Can be used for QueryBuilder and for referencing column names.
     */
     public static class Properties {
-        public final static Property Type = new Property(0, OrderType.class, "type", false, "TYPE");
-        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property CustomerId = new Property(1, long.class, "customerId", false, "CUSTOMER_ID");
         public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
-        public final static Property CustomerId = new Property(3, long.class, "customerId", false, "CUSTOMER_ID");
+        public final static Property Type = new Property(3, OrderType.class, "type", false, "TYPE");
     };
 
     private DaoSession daoSession;
@@ -52,10 +52,10 @@ public OrderDao(DaoConfig config, DaoSession daoSession) {
     public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
         String constraint = ifNotExists? "IF NOT EXISTS ": "";
         db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
-                "'TYPE' INTEGER," + // 0: type
-                "'_id' INTEGER PRIMARY KEY ," + // 1: id
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'CUSTOMER_ID' INTEGER NOT NULL ," + // 1: customerId
                 "'DATE' INTEGER," + // 2: date
-                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 3: customerId
+                "'TYPE' INTEGER);"); // 3: type
     }
 
     /** Drops the underlying database table. */
@@ -69,21 +69,21 @@ public static void dropTable(SQLiteDatabase db, boolean ifExists) {
     protected void bindValues(SQLiteStatement stmt, Order entity) {
         stmt.clearBindings();
  
-        OrderType type = entity.getType();
-        if (type != null) {
-            stmt.bindLong(1, type.getValue());
-        }
- 
         Long id = entity.getId();
         if (id != null) {
-            stmt.bindLong(2, id);
+            stmt.bindLong(1, id);
         }
+        stmt.bindLong(2, entity.getCustomerId());
  
         java.util.Date date = entity.getDate();
         if (date != null) {
             stmt.bindLong(3, date.getTime());
         }
-        stmt.bindLong(4, entity.getCustomerId());
+ 
+        OrderType type = entity.getType();
+        if (type != null) {
+            stmt.bindLong(4, type.getValue());
+        }
     }
 
     @Override
@@ -95,17 +95,17 @@ protected void attachEntity(Order entity) {
     /** @inheritdoc */
     @Override
     public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
     }    
 
     /** @inheritdoc */
     @Override
     public Order readEntity(Cursor cursor, int offset) {
         Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : OrderType.fromInt(cursor.getLong(offset + 0)), // type
-            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.getLong(offset + 1), // customerId
             cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
-            cursor.getLong(offset + 3) // customerId
+            cursor.isNull(offset + 3) ? null : OrderType.fromInt(cursor.getLong(offset + 3)) // type
         );
         return entity;
     }
@@ -113,10 +113,10 @@ public Order readEntity(Cursor cursor, int offset) {
     /** @inheritdoc */
     @Override
     public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setType(cursor.isNull(offset + 0) ? null : OrderType.fromInt(cursor.getLong(offset + 0)));
-        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setCustomerId(cursor.getLong(offset + 1));
         entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
-        entity.setCustomerId(cursor.getLong(offset + 3));
+        entity.setType(cursor.isNull(offset + 3) ? null : OrderType.fromInt(cursor.getLong(offset + 3)));
      }
     
     /** @inheritdoc */
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 8c89ea1d..b23ea726 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -43,6 +43,18 @@ private static void addNote(Schema schema) {
         note.addStringProperty("text").notNull();
         note.addStringProperty("comment");
         note.addDateProperty("date");
+
+        addNoteType(schema, note);
+    }
+
+    private static void addNoteType(Schema schema, Entity entity) {
+        ArrayList<EntityEnum.Value> values = new ArrayList<EntityEnum.Value>();
+        values.add(new EntityEnum.Value("Ultimate", 1));
+        values.add(new EntityEnum.Value("Frisbee", 2));
+        values.add(new EntityEnum.Value("Rocks", 3));
+        EnumEntity enumEntity = schema.addEnumEntity("NoteType", values);
+
+        entity.addEnumProperty(enumEntity.getEntityEnum(), "type");
     }
 
     private static EntityEnum addOrderType(Entity entity) {
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index 4de541cd..f907858c 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -28,7 +28,9 @@ import de.greenrobot.dao.AbstractDaoMaster;
 import de.greenrobot.dao.identityscope.IdentityScopeType;
 
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
 import ${entity.javaPackageDao}.${entity.classNameDao};
+    </#if>
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -41,7 +43,7 @@ public class DaoMaster extends AbstractDaoMaster {
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipTableCreation && !entity.anEnum>
         ${entity.classNameDao}.createTable(db, ifNotExists);
 </#if>
 </#list>
@@ -50,7 +52,7 @@ public class DaoMaster extends AbstractDaoMaster {
     /** Drops underlying database table using DAOs. */
     public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
 <#list schema.entities as entity>
-<#if !entity.skipTableCreation>
+<#if !entity.skipTableCreation && !entity.anEnum>
         ${entity.classNameDao}.dropTable(db, ifExists);
 </#if>
 </#list>
@@ -86,7 +88,9 @@ public class DaoMaster extends AbstractDaoMaster {
     public DaoMaster(SQLiteDatabase db) {
         super(db, SCHEMA_VERSION);
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
         registerDaoClass(${entity.classNameDao}.class);
+    </#if>
 </#list>
     }
     
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..8f21865d 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -33,7 +33,9 @@ import ${entity.javaPackage}.${entity.className};
 </#list>
 
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
 import ${entity.javaPackageDao}.${entity.classNameDao};
+    </#if>
 </#list>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
@@ -46,11 +48,15 @@ import ${entity.javaPackageDao}.${entity.classNameDao};
 public class DaoSession extends AbstractDaoSession {
 
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
     private final DaoConfig ${entity.classNameDao?uncap_first}Config;
+    </#if>
 </#list>        
 
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
     private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
+    </#if>
 </#list>        
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
@@ -58,30 +64,40 @@ public class DaoSession extends AbstractDaoSession {
         super(db);
 
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
         ${entity.classNameDao?uncap_first}Config = daoConfigMap.get(${entity.classNameDao}.class).clone();
         ${entity.classNameDao?uncap_first}Config.initIdentityScope(type);
 
+    </#if>
 </#list>        
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
         ${entity.classNameDao?uncap_first} = new ${entity.classNameDao}<#--
 -->(${entity.classNameDao?uncap_first}Config, this);
+    </#if>
 </#list>        
 
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
         registerDao(${entity.className}.class, ${entity.classNameDao?uncap_first});
+    </#if>
 </#list>        
     }
     
     public void clear() {
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
         ${entity.classNameDao?uncap_first}Config.getIdentityScope().clear();
+    </#if>
 </#list>    
     }
 
 <#list schema.entities as entity>
+    <#if !entity.anEnum>
     public ${entity.classNameDao} get${entity.classNameDao?cap_first}() {
         return ${entity.classNameDao?uncap_first};
     }
 
+    </#if>
 </#list>        
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 8cfa96fd..b027e0aa 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -55,7 +55,7 @@ import ${additionalImport};
 import ${entity.javaPackage}.${entity.className};
 <#list entity.properties as property>
     <#if property.anEnum>
-import ${entity.javaPackage}.${property.entityEnum.entity.className}.${property.entityEnum.enumName};
+import ${entity.javaPackage}.${property.entityEnum.entity.className}<#if !property.entityEnum.entity.anEnum>.${property.entityEnum.enumName}</#if>;
     </#if>
 </#list>
 <#if entity.protobuf>
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 50d7e2e6..6310eca6 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -33,7 +33,7 @@ import java.util.Map;
 </#if>
 <#list entity.properties as property>
     <#if property.anEnum && entity.className != property.entityEnum.entity.className>
-import ${entity.javaPackage}.${property.entityEnum.entity.className}.${property.entityEnum.enumName};
+import ${entity.javaPackage}.${property.entityEnum.entity.className}<#if !property.entityEnum.entity.anEnum>.${property.entityEnum.enumName}</#if>;
     </#if>
 </#list>
 <#if entity.active>
diff --git a/DaoGenerator/src-template/enumentity.ftl b/DaoGenerator/src-template/enumentity.ftl
new file mode 100644
index 00000000..cef729da
--- /dev/null
+++ b/DaoGenerator/src-template/enumentity.ftl
@@ -0,0 +1,54 @@
+<#--
+
+Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
+                                                                           
+This file is part of greenDAO Generator.
+                                                                           
+greenDAO Generator is free software: you can redistribute it and/or modify 
+it under the terms of the GNU General Public License as published by       
+the Free Software Foundation, either version 3 of the License, or          
+(at your option) any later version.                                        
+greenDAO Generator is distributed in the hope that it will be useful,      
+but WITHOUT ANY WARRANTY; without even the implied warranty of             
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
+GNU General Public License for more details.                               
+                                                                           
+You should have received a copy of the GNU General Public License          
+along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+
+-->
+package ${entity.javaPackage};
+
+import de.greenrobot.dao.DaoEnum;
+import java.util.HashMap;
+import java.util.Map;
+
+public enum ${entity.entityEnum.enumName} implements DaoEnum {
+    <#list entity.entityEnum.values as value>
+    ${value.name}(${value.tag})<#if value_has_next>,<#else>;</#if>
+    </#list>
+
+    private static final Map<Long, ${entity.entityEnum.enumName}> intToTypeMap = new HashMap<Long, ${entity.entityEnum.enumName}>();
+
+    static {
+        for (${entity.entityEnum.enumName} type : ${entity.entityEnum.enumName}.values()) {
+            intToTypeMap.put(type.value, type);
+        }
+    }
+
+    public static ${entity.entityEnum.enumName} fromInt(long i) {
+        ${entity.entityEnum.enumName} type = intToTypeMap.get(Long.valueOf(i));
+        return type;
+    }
+
+    private final long value;
+
+    private ${entity.entityEnum.enumName}(long value) {
+        this.value = value;
+    }
+
+    @Override
+    public long getValue() {
+        return value;
+    }
+}
\ No newline at end of file
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index d1604d54..121296d6 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -46,6 +46,7 @@
     private Template templateDaoMaster;
     private Template templateDaoSession;
     private Template templateEntity;
+    private Template templateEnumEntity;
     private Template templateDaoUnitTest;
     private Template templateContentProvider;
 
@@ -66,6 +67,7 @@ public DaoGenerator() throws IOException {
         templateDaoMaster = config.getTemplate("dao-master.ftl");
         templateDaoSession = config.getTemplate("dao-session.ftl");
         templateEntity = config.getTemplate("entity.ftl");
+        templateEnumEntity = config.getTemplate("enumentity.ftl");
         templateDaoUnitTest = config.getTemplate("dao-unit-test.ftl");
         templateContentProvider = config.getTemplate("content-provider.ftl");
     }
@@ -99,8 +101,12 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
 
         List<Entity> entities = schema.getEntities();
         for (Entity entity : entities) {
-            generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
-            if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
+            if (!(entity instanceof EnumEntity)) {
+                generate(templateDao, outDirFile, entity.getJavaPackageDao(), entity.getClassNameDao(), schema, entity);
+            }
+            if (entity instanceof EnumEntity) {
+                generate(templateEnumEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
+            } else if (!entity.isProtobuf() && !entity.isSkipGeneration()) {
                 generate(templateEntity, outDirFile, entity.getJavaPackage(), entity.getClassName(), schema, entity);
             }
             if (outDirTestFile != null && !entity.isSkipGenerationTest()) {
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index e162096e..7d81eb16 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -69,6 +69,8 @@
     private Boolean active;
     private Boolean hasKeepSections;
 
+    protected boolean anEnum = false;
+
     Entity(Schema schema, String className) {
         this.schema = schema;
         this.className = className;
@@ -268,6 +270,7 @@ Entity useProtobuf() {
         protobuf = true;
         return this;
     }
+    public boolean isAnEnum() { return anEnum; }
 
     public boolean isProtobuf() {
         return protobuf;
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/EnumEntity.java b/DaoGenerator/src/de/greenrobot/daogenerator/EnumEntity.java
new file mode 100644
index 00000000..da72c066
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/EnumEntity.java
@@ -0,0 +1,92 @@
+package de.greenrobot.daogenerator;
+
+import java.util.List;
+
+/**
+ * Created by saulhoward on 3/14/14.
+ */
+public class EnumEntity extends Entity {
+
+    private EntityEnum entityEnum;
+
+    EnumEntity(Schema schema, String enumName, List<EntityEnum.Value> values) {
+        this(schema, enumName);
+
+        entityEnum = new EntityEnum(this, enumName, values);
+    }
+
+    EnumEntity(Schema schema, String enumName) {
+        super(schema, enumName);
+
+        setHasKeepSections(false);
+        setActive(false);
+        anEnum = true;
+    }
+
+    public void setValues(List<EntityEnum.Value> values) {
+        entityEnum = new EntityEnum(this, getClassName(), values);
+    }
+
+    public EntityEnum getEntityEnum() {
+        return entityEnum;
+    }
+
+    @Override
+    public EntityEnum addEnum(String enumName, List<EntityEnum.Value> values) {
+        throw new UnsupportedOperationException("Cannot add an enum to an enum!");
+    }
+
+    @Override
+    void init3ndPass() {
+    }
+
+    @Override
+    void init2ndPass() {
+        init2nPassNamesWithDefaults();
+    }
+
+    @Override
+    public Property.PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
+        throw new UnsupportedOperationException("Adding properties is not supported for enums!");
+    }
+
+    @Override
+    public Property.PropertyBuilder addProperty(EntityEnum entityEnum, String propertyName) {
+        throw new UnsupportedOperationException("Adding properties is not supported for enums!");
+    }
+
+    @Override
+    public Property.PropertyBuilder addIdProperty() {
+        throw new UnsupportedOperationException("Adding properties is not supported for enums!");
+    }
+
+    @Override
+    public ToMany addToMany(Entity target, Property targetProperty) {
+        throw new UnsupportedOperationException("Adding relationships is not supported for enums!");
+    }
+
+    @Override
+    public ToMany addToMany(Property[] sourceProperties, Entity target, Property[] targetProperties) {
+        throw new UnsupportedOperationException("Adding relationships is not supported for enums!");
+    }
+
+    @Override
+    public ToOne addToOne(Entity target, Property fkProperty) {
+        throw new UnsupportedOperationException("Adding relationships is not supported for enums!");
+    }
+
+    @Override
+    public ToOne addToOne(Entity target, Property fkProperty, String name) {
+        throw new UnsupportedOperationException("Adding relationships is not supported for enums!");
+    }
+
+    @Override
+    public ToOne addToOneWithoutProperty(String name, Entity target, String fkColumnName, boolean notNull, boolean unique) {
+        throw new UnsupportedOperationException("Adding relationships is not supported for enums!");
+    }
+
+    @Override
+    protected void addIncomingToMany(ToMany toMany) {
+        throw new UnsupportedOperationException("Adding relationships is not supported for enums!");
+    }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
index b16b33e2..310447e8 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -105,6 +105,24 @@ public Entity addEntity(String className) {
         return entity;
     }
 
+    /**
+     * Adds a new enum to the schema.
+     */
+    public EnumEntity addEnumEntity(String enumName, List<EntityEnum.Value> values) {
+        EnumEntity entity = new EnumEntity(this, enumName, values);
+        entities.add(entity);
+        return entity;
+    }
+
+    /**
+     * Adds a new enum to the schema.
+     */
+    public EnumEntity addEnumEntity(String enumName) {
+        EnumEntity entity = new EnumEntity(this, enumName);
+        entities.add(entity);
+        return entity;
+    }
+
     /**
      * Adds a new protocol buffers entity to the schema. There can be multiple entities per table, but only one may be
      * the primary entity per table to create table scripts, etc.
