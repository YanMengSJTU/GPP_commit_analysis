diff --git a/DaoGenerator/src-template/annotation.ftl b/DaoGenerator/src-template/annotation.ftl
new file mode 100644
index 00000000..97b1d728
--- /dev/null
+++ b/DaoGenerator/src-template/annotation.ftl
@@ -0,0 +1,24 @@
+<#macro print_annotation annotation prefix>
+${prefix}@${annotation.name}<#rt>
+    <@compress single_line=true>
+        <#if annotation.parameters?has_content>
+            (
+            <#assign keys = annotation.parameters?keys>
+            <#list keys as key>
+                <#if key != annotation_no_name>
+                    ${key} =
+                </#if>
+                ${annotation.parameters[key]}<#t>
+                <#if key_has_next>,<#t> </#if>
+            </#list>
+            )
+        </#if>
+    </@compress>
+</#macro>
+
+<#macro print_annotations annotations prefix>
+    <#list annotations as annotation>
+        <@print_annotation annotation, prefix/>
+
+    </#list>
+</#macro>
\ No newline at end of file
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 98cf2b14..9b249ba0 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -1,22 +1,23 @@
 <#--
 
-Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
-                                                                           
-This file is part of greenDAO Generator.                                   
-                                                                           
-greenDAO Generator is free software: you can redistribute it and/or modify 
-it under the terms of the GNU General Public License as published by       
-the Free Software Foundation, either version 3 of the License, or          
-(at your option) any later version.                                        
-greenDAO Generator is distributed in the hope that it will be useful,      
-but WITHOUT ANY WARRANTY; without even the implied warranty of             
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
-GNU General Public License for more details.                               
-                                                                           
-You should have received a copy of the GNU General Public License          
+Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+
+This file is part of greenDAO Generator.
+
+greenDAO Generator is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+greenDAO Generator is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
+<#include "*/annotation.ftl">
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
@@ -42,11 +43,12 @@ import ${additionalImport};
 // KEEP INCLUDES - put your custom includes here
 <#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
 <#else>
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 </#if>
 /**
  * Entity mapped to table ${entity.tableName}.
  */
+<@print_annotations entity.classAnnotations, ""/>
 public class ${entity.className}<#if
 entity.superclass?has_content> extends ${entity.superclass} </#if><#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
@@ -56,6 +58,7 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+    <@print_annotations property.fieldAnnotations, "    "/>
     private ${property.javaType} ${property.propertyName};
 </#list>
 
@@ -86,10 +89,13 @@ ${keepFields!}    // KEEP FIELDS END
 
 </#if>
 <#if entity.constructors>
+
+    <@print_annotations entity.emptyConstructorAnnotations, "    "/>
     public ${entity.className}() {
     }
 <#if entity.propertiesPk?has_content && entity.propertiesPk?size != entity.properties?size>
 
+    <@print_annotations entity.fullConstructorAnnotations, "    "/>
     public ${entity.className}(<#list entity.propertiesPk as
 property>${property.javaType} ${property.propertyName}<#if property_has_next>, </#if></#list>) {
 <#list entity.propertiesPk as property>
@@ -118,6 +124,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value. */
 </#if>
+    <@print_annotations property.getterAnnotations, "    "/>
     public ${property.javaType} get${property.propertyName?cap_first}() {
         return ${property.propertyName};
     }
@@ -125,6 +132,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#if property.notNull && complexTypes?seq_contains(property.propertyType)>
     /** Not-null value; ensure this value is available before it is saved to the database. */
 </#if>
+    <@print_annotations property.setterAnnotations, "    "/>
     public void set${property.propertyName?cap_first}(${property.javaType} ${property.propertyName}) {
         this.${property.propertyName} = ${property.propertyName};
     }
@@ -138,7 +146,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 <#list entity.toOneRelations as toOne>
     /** To-one relationship, resolved on first access. */
     public ${toOne.targetEntity.className} get${toOne.name?cap_first}() {
-<#if toOne.useFkProperty>    
+<#if toOne.useFkProperty>
         if (${toOne.name}__resolvedKey == null || <#--
         --><#if toOne.resolvedKeyUseEquals[0]>!${toOne.name}__resolvedKey.equals(${toOne.fkProperties[0].propertyName})<#--
         --><#else>${toOne.name}__resolvedKey != ${toOne.fkProperties[0].propertyName}</#if>) {
@@ -176,7 +184,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         }
 </#if>
         this.${toOne.name} = ${toOne.name};
-<#if toOne.useFkProperty>        
+<#if toOne.useFkProperty>
         ${toOne.fkProperties[0].propertyName} = <#if !toOne.fkProperties[0].notNull>${toOne.name} == null ? null : </#if>${toOne.name}.get${toOne.targetEntity.pkProperty.propertyName?cap_first}();
         ${toOne.name}__resolvedKey = ${toOne.fkProperties[0].propertyName};
 <#else>
@@ -220,7 +228,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public void delete() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.delete(this);
     }
 
@@ -228,7 +236,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public void update() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.update(this);
     }
 
@@ -236,7 +244,7 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
     public void refresh() {
         if (myDao == null) {
             throw new DaoException("Entity is detached from DAO context");
-        }    
+        }
         myDao.refresh(this);
     }
 
diff --git a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
index 8f17eea5..471aa042 100644
--- a/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
+++ b/DaoGenerator/src-test/de/greenrobot/daogenerator/test/SimpleDaoGeneratorTest.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,25 +11,18 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
 package de.greenrobot.daogenerator.test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 import java.io.File;
 
+import de.greenrobot.daogenerator.*;
 import org.junit.Test;
 
-import de.greenrobot.daogenerator.DaoGenerator;
-import de.greenrobot.daogenerator.DaoUtil;
-import de.greenrobot.daogenerator.Entity;
-import de.greenrobot.daogenerator.Property;
-import de.greenrobot.daogenerator.Schema;
+import static org.junit.Assert.*;
 
 public class SimpleDaoGeneratorTest {
 
@@ -62,4 +55,66 @@ public void testDbName() {
         assertEquals("CAMEL_CASE_XXXX", DaoUtil.dbName("CamelCaseXXXX"));
     }
 
+
+	@Test
+	public void testAnnotations() throws Exception {
+		String annotationPackage = "de.greenrobot.testdao.annotations";
+		Annotation packagedAnnotation = new Annotation(annotationPackage + ".TestAnnotation");
+		assertEquals("TestAnnotation", packagedAnnotation.getName());
+		assertEquals(annotationPackage, packagedAnnotation.getPackage());
+		Annotation simpleAnnotation = new Annotation("SimpleAnnotation");
+		assertEquals("SimpleAnnotation", simpleAnnotation.getName());
+		assertNull(simpleAnnotation.getPackage());
+
+		Schema schema = new Schema(1, "de.greenrobot.testdao");
+		Entity userEntity = schema.addEntity("TestUser");
+		userEntity.addFullConstructorAnnotation(new CustomConstructorAnnotation("\"myName\"", 25));
+
+		Property idProperty = userEntity.addIdProperty().getProperty();
+		userEntity.addClassAnnotation(new Annotation(annotationPackage + ".ClassAnnotation"));
+		assertEquals(1, userEntity.getClassAnnotations().size());
+		userEntity.addEmptyConstructorAnnotation(new Annotation(annotationPackage + ".ConstructorAnnotation"));
+		assertEquals(1, userEntity.getEmptyConstructorAnnotations().size());
+		assertEquals(1, userEntity.getFullConstructorAnnotations().size());
+		Property nameProperty = userEntity.addStringProperty("name").addFieldAnnotation(new Annotation(annotationPackage + ".FieldAnnotation")).getProperty();
+		assertEquals(1, nameProperty.getFieldAnnotations().size());
+		JSonProperty ageAnnotation = new JSonProperty("years");
+		Property ageProperty = userEntity.addIntProperty("age")
+				.addSetterGetterAnnotation(new Annotation(annotationPackage + ".SetterGetterAnnotation"))
+				.addSetterAnnotation(ageAnnotation)
+				.getProperty();
+		assertEquals(2, ageProperty.getSetterAnnotations().size());
+		assertEquals(1, ageProperty.getGetterAnnotations().size());
+		new DaoGenerator().generateAll(schema, "test-out2");
+		assertTrue(userEntity.getAdditionalImportsEntity().contains(annotationPackage + ".ClassAnnotation"));
+		assertTrue(userEntity.getAdditionalImportsEntity().contains(annotationPackage + ".ConstructorAnnotation"));
+		System.out.println(userEntity.getAdditionalImportsEntity());
+		assertTrue(userEntity.getAdditionalImportsEntity().contains(ageAnnotation.getPackage() + ".JsonProperty"));
+		assertTrue(userEntity.getAdditionalImportsEntity().contains(CustomConstructorAnnotation.PACKAGE + ".CustomConstructorAnnotation"));
+	}
+
+	private static class JSonProperty extends Annotation {
+
+		public JSonProperty(String params) {
+			super("JsonProperty", "\"" + params + "\"");
+		}
+
+		@Override
+		public String getPackage() {
+			return "com.fasterxml.jackson.annotation";
+		}
+	}
+
+	private static class CustomConstructorAnnotation extends Annotation {
+		public static final String PACKAGE = "de.greenrobot.testdao.annotation2";
+		public CustomConstructorAnnotation(String name, int age) {
+			super("CustomConstructorAnnotation", "name", name, "age", Integer.toString(age));
+		}
+
+		@Override
+		public String getPackage() {
+			return PACKAGE;
+		}
+	}
+
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
new file mode 100644
index 00000000..b437efe4
--- /dev/null
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Annotation.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
+ *
+ * This file is part of greenDAO Generator.
+ *
+ * greenDAO Generator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * greenDAO Generator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.greenrobot.daogenerator;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Pattern;
+
+/**
+ * Model class for an Annotation that can be attached to classses, properties and their setter/getter/constructor methods
+ * @author yigit@path.com
+ */
+public class Annotation {
+    private String name;
+    protected String _package;
+    private Map<String, String> parameters = new HashMap<String, String>();
+    public static Pattern QUOTE = Pattern.compile("\"");
+
+    //we use this if Annotation has only 1 parameter
+    public static final String NO_NAME = "__no_name";
+    public static final String NULL = "null";
+
+    public Annotation(String name, String... params) {
+		this(name);
+        this.parameters = new HashMap<String, String>();
+        if(params.length > 1 && params.length % 2 != 0) {
+            throw new RuntimeException("annotation parameters should be key value pairs");
+        }
+        if(params.length == 1) {
+            this.parameters.put(NO_NAME, params[0] == null ? NULL : params[0]);
+        } else {
+            for(int i = 0; i < params.length; i += 2) {
+                this.parameters.put(params[i], params[i + 1] == null ? NULL : params[i + 1]);
+            }
+        }
+    }
+
+    public String getPackage() {
+        return _package;
+    }
+
+    public void setPackage(String _package) {
+        this._package = _package;
+    }
+
+    public Annotation(String name) {
+		//if name includes a ".", split it and write to package
+		int dotIndex = name.lastIndexOf(".");
+		if(dotIndex != -1) {
+			_package = name.substring(0, dotIndex);
+			name = name.substring(dotIndex + 1);
+		}
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public Map<String, String> getParameters() {
+        return parameters;
+    }
+}
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index dfb310ad..3d6ef6fd 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,7 +11,7 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
@@ -33,7 +33,7 @@
 
 /**
  * Once you have your model created, use this class to generate entities and DAOs.
- * 
+ *
  * @author Markus
  */
 public class DaoGenerator {
@@ -137,6 +137,7 @@ private void generate(Template template, File outDirFile, String javaPackage, St
             Map<String, Object> root = new HashMap<String, Object>();
             root.put("schema", schema);
             root.put("entity", entity);
+			root.put("annotation_no_name", Annotation.NO_NAME);
 
             if (entity != null && entity.getHasKeepSections()) {
                 checkKeepSections(file, root);
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
index 27f6cb3c..b02ce474 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,7 +11,7 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
@@ -40,7 +40,7 @@
  * <li>{@link #setSuperclass(String)} to specify a class of which the entity will extend from</li>
  * <li>Various setXXX methods</li>
  * </ul>
- * 
+ *
  * @see <a href="http://greendao-orm.com/documentation/modelling-entities/">Modelling Entities (Documentation page)</a>
  * @see <a href="http://greendao-orm.com/documentation/relations/">Relations (Documentation page)</a>
  */
@@ -59,6 +59,10 @@
     private final Collection<String> additionalImportsEntity;
     private final Collection<String> additionalImportsDao;
     private final List<String> interfacesToImplement;
+	//annotation lists
+	private final List<Annotation> classAnnotations;
+	private final List<Annotation> emptyConstructorAnnotations;
+	private final List<Annotation> fullConstructorAnnotations;
 
     private String tableName;
     private String classNameDao;
@@ -92,8 +96,13 @@
         additionalImportsEntity = new TreeSet<String>();
         additionalImportsDao = new TreeSet<String>();
         interfacesToImplement = new ArrayList<String>();
+		classAnnotations = new ArrayList<Annotation>();
+		emptyConstructorAnnotations = new ArrayList<Annotation>();
+		fullConstructorAnnotations = new ArrayList<Annotation>();
+
         constructors = true;
-    }
+
+	}
 
     public PropertyBuilder addBooleanProperty(String propertyName) {
         return addProperty(PropertyType.Boolean, propertyName);
@@ -364,7 +373,7 @@ public void setSkipGeneration(boolean skipGeneration) {
     public void setSkipTableCreation(boolean skipTableCreation) {
         this.skipTableCreation = skipTableCreation;
     }
-    
+
     public boolean isSkipTableCreation() {
         return skipTableCreation;
     }
@@ -389,7 +398,34 @@ public void setSkipGenerationTest(boolean skipGenerationTest) {
         return incomingToManyRelations;
     }
 
-    /**
+	public List<Annotation> getClassAnnotations() {
+		return classAnnotations;
+	}
+
+	public List<Annotation> getEmptyConstructorAnnotations() {
+		return emptyConstructorAnnotations;
+	}
+
+	public List<Annotation> getFullConstructorAnnotations() {
+		return fullConstructorAnnotations;
+	}
+
+	public Entity addClassAnnotation(Annotation annotation) {
+		classAnnotations.add(annotation);
+		return this;
+	}
+
+	public Entity addEmptyConstructorAnnotation(Annotation annotation) {
+		emptyConstructorAnnotations.add(annotation);
+		return this;
+	}
+
+	public Entity addFullConstructorAnnotation(Annotation annotation) {
+		fullConstructorAnnotations.add(annotation);
+		return this;
+	}
+
+	/**
      * Entities with relations are active, but this method allows to make the entities active even if it does not have
      * relations.
      */
@@ -593,8 +629,27 @@ private void init3rdPassAdditionalImports() {
             Entity targetEntity = toMany.getTargetEntity();
             checkAdditionalImportsEntityTargetEntity(targetEntity);
         }
+
+		addAnnotationImports(classAnnotations);
+		addAnnotationImports(emptyConstructorAnnotations);
+		addAnnotationImports(fullConstructorAnnotations);
+
+		for(Property property : properties) {
+			addAnnotationImports(property.getGetterAnnotations());
+			addAnnotationImports(property.getSetterAnnotations());
+			addAnnotationImports(property.getFieldAnnotations());
+		}
+
     }
 
+	private void addAnnotationImports(List<Annotation> annotations) {
+		for(Annotation annotation : annotations) {
+			if(annotation.getPackage() != null) {
+				additionalImportsEntity.add(annotation.getPackage() + "." + annotation.getName());
+			}
+		}
+	}
+
     private void checkAdditionalImportsEntityTargetEntity(Entity targetEntity) {
         if (!targetEntity.getJavaPackage().equals(javaPackage)) {
             additionalImportsEntity.add(targetEntity.getJavaPackage() + "." + targetEntity.getClassName());
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
index f54d05e8..36f1b379 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/Property.java
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
  *
  * This file is part of greenDAO Generator.
- * 
+ *
  * greenDAO Generator is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
@@ -11,12 +11,15 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
  */
 package de.greenrobot.daogenerator;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /** Model class for an entity's property: a Java property mapped to a data base column. */
 public class Property {
 
@@ -105,6 +108,27 @@ public PropertyBuilder indexDesc(String indexNameOrNull, boolean isUnique) {
         public Property getProperty() {
             return property;
         }
+
+		public PropertyBuilder addFieldAnnotation(Annotation annotation) {
+			property.fieldAnnotations.add(annotation);
+			return this;
+		}
+
+		public PropertyBuilder addSetterAnnotation(Annotation annotation) {
+			property.setterAnnotations.add(annotation);
+			return this;
+		}
+
+		public PropertyBuilder addGetterAnnotation(Annotation annotation) {
+			property.getterAnnotations.add(annotation);
+			return this;
+		}
+
+		public PropertyBuilder addSetterGetterAnnotation(Annotation annotation) {
+			addSetterAnnotation(annotation);
+			addGetterAnnotation(annotation);
+			return this;
+		}
     }
 
     private final Schema schema;
@@ -123,6 +147,10 @@ public Property getProperty() {
     private boolean unique;
     private boolean notNull;
 
+	private final List<Annotation> fieldAnnotations;
+	private final List<Annotation> setterAnnotations;
+	private final List<Annotation> getterAnnotations;
+
     /** Initialized in 2nd pass */
     private String constraints;
 
@@ -135,6 +163,9 @@ public Property(Schema schema, Entity entity, PropertyType propertyType, String
         this.entity = entity;
         this.propertyName = propertyName;
         this.propertyType = propertyType;
+		this.fieldAnnotations = new ArrayList<Annotation>();
+		this.getterAnnotations = new ArrayList<Annotation>();
+		this.setterAnnotations = new ArrayList<Annotation>();
     }
 
     public String getPropertyName() {
@@ -236,8 +267,19 @@ private void initConstraint() {
         }
     }
 
-    void init3ndPass() {
-        // Nothing to do so far
+	public List<Annotation> getFieldAnnotations() {
+		return fieldAnnotations;
+	}
+
+	public List<Annotation> getSetterAnnotations() {
+		return setterAnnotations;
+	}
+
+	public List<Annotation> getGetterAnnotations() {
+		return getterAnnotations;
+	}
+
+	void init3ndPass() {
     }
 
     @Override
diff --git a/DaoGenerator/test-out2/de/greenrobot/testdao/DaoMaster.java b/DaoGenerator/test-out2/de/greenrobot/testdao/DaoMaster.java
new file mode 100644
index 00000000..07ecc0f6
--- /dev/null
+++ b/DaoGenerator/test-out2/de/greenrobot/testdao/DaoMaster.java
@@ -0,0 +1,70 @@
+package de.greenrobot.testdao;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteDatabase.CursorFactory;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+import de.greenrobot.dao.AbstractDaoMaster;
+import de.greenrobot.dao.IdentityScopeType;
+
+import de.greenrobot.testdao.TestUserDao;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * Master of DAO (schema version 1): knows all DAOs.
+*/
+public class DaoMaster extends AbstractDaoMaster {
+    public static final int SCHEMA_VERSION = 1;
+
+    /** Creates underlying database table using DAOs. */
+    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
+        TestUserDao.createTable(db, ifNotExists);
+    }
+    
+    /** Drops underlying database table using DAOs. */
+    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
+        TestUserDao.dropTable(db, ifExists);
+    }
+    
+    public static abstract class OpenHelper extends SQLiteOpenHelper {
+
+        public OpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory, SCHEMA_VERSION);
+        }
+
+        @Override
+        public void onCreate(SQLiteDatabase db) {
+            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(db, false);
+        }
+    }
+    
+    /** WARNING: Drops all table on Upgrade! Use only during development. */
+    public static class DevOpenHelper extends OpenHelper {
+        public DevOpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+
+        @Override
+        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(db, true);
+            onCreate(db);
+        }
+    }
+
+    public DaoMaster(SQLiteDatabase db) {
+        super(db, SCHEMA_VERSION);
+        registerDaoClass(TestUserDao.class);
+    }
+    
+    public DaoSession newSession() {
+        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
+    }
+    
+    public DaoSession newSession(IdentityScopeType type) {
+        return new DaoSession(db, type, daoConfigMap);
+    }
+    
+}
diff --git a/DaoGenerator/test-out2/de/greenrobot/testdao/DaoSession.java b/DaoGenerator/test-out2/de/greenrobot/testdao/DaoSession.java
new file mode 100644
index 00000000..2e9e5e01
--- /dev/null
+++ b/DaoGenerator/test-out2/de/greenrobot/testdao/DaoSession.java
@@ -0,0 +1,49 @@
+package de.greenrobot.testdao;
+
+import android.database.sqlite.SQLiteDatabase;
+
+import java.util.Map;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoConfig;
+import de.greenrobot.dao.AbstractDaoSession;
+import de.greenrobot.dao.IdentityScopeType;
+
+import de.greenrobot.testdao.TestUser;
+
+import de.greenrobot.testdao.TestUserDao;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+
+/**
+ * {@inheritDoc}
+ * 
+ * @see de.greenrobot.dao.AbstractDaoSession
+ */
+public class DaoSession extends AbstractDaoSession {
+
+    private final DaoConfig testUserDaoConfig;
+
+    private final TestUserDao testUserDao;
+
+    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
+            daoConfigMap) {
+        super(db);
+
+        testUserDaoConfig = daoConfigMap.get(TestUserDao.class).clone();
+        testUserDaoConfig.initIdentityScope(type);
+
+        testUserDao = new TestUserDao(testUserDaoConfig, this);
+
+        registerDao(TestUser.class, testUserDao);
+    }
+    
+    public void clear() {
+        testUserDaoConfig.getIdentityScope().clear();
+    }
+
+    public TestUserDao getTestUserDao() {
+        return testUserDao;
+    }
+
+}
diff --git a/DaoGenerator/test-out2/de/greenrobot/testdao/TestUser.java b/DaoGenerator/test-out2/de/greenrobot/testdao/TestUser.java
new file mode 100644
index 00000000..5b138b7f
--- /dev/null
+++ b/DaoGenerator/test-out2/de/greenrobot/testdao/TestUser.java
@@ -0,0 +1,66 @@
+dsadsadsadsa
+package de.greenrobot.testdao;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import de.greenrobot.testdao.annotation2.CustomConstructorAnnotation;
+import de.greenrobot.testdao.annotations.ClassAnnotation;
+import de.greenrobot.testdao.annotations.ConstructorAnnotation;
+import de.greenrobot.testdao.annotations.FieldAnnotation;
+import de.greenrobot.testdao.annotations.SetterGetterAnnotation;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
+/**
+ * Entity mapped to table TEST_USER.
+ */
+@ClassAnnotation
+public class TestUser {
+
+    private Long id;
+    @FieldAnnotation
+    private String name;
+    private Integer age;
+
+
+    @ConstructorAnnotation
+    public TestUser() {
+    }
+
+    @CustomConstructorAnnotation( name = "myName", age = 25 )
+    public TestUser(Long id) {
+        this.id = id;
+    }
+
+    public TestUser(Long id, String name, Integer age) {
+        this.id = id;
+        this.name = name;
+        this.age = age;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @SetterGetterAnnotation
+    public Integer getAge() {
+        return age;
+    }
+
+    @SetterGetterAnnotation
+    @JsonProperty( "years" )
+    public void setAge(Integer age) {
+        this.age = age;
+    }
+
+}
diff --git a/DaoGenerator/test-out2/de/greenrobot/testdao/TestUserDao.java b/DaoGenerator/test-out2/de/greenrobot/testdao/TestUserDao.java
new file mode 100644
index 00000000..478784dd
--- /dev/null
+++ b/DaoGenerator/test-out2/de/greenrobot/testdao/TestUserDao.java
@@ -0,0 +1,124 @@
+package de.greenrobot.testdao;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.DaoConfig;
+import de.greenrobot.dao.Property;
+
+import de.greenrobot.testdao.TestUser;
+
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+/** 
+ * DAO for table TEST_USER.
+*/
+public class TestUserDao extends AbstractDao<TestUser, Long> {
+
+    public static final String TABLENAME = "TEST_USER";
+
+    /**
+     * Properties of entity TestUser.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
+        public final static Property Age = new Property(2, Integer.class, "age", false, "AGE");
+    };
+
+
+    public TestUserDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public TestUserDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'TEST_USER' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'NAME' TEXT," + // 1: name
+                "'AGE' INTEGER);"); // 2: age
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEST_USER'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, TestUser entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        String name = entity.getName();
+        if (name != null) {
+            stmt.bindString(2, name);
+        }
+ 
+        Integer age = entity.getAge();
+        if (age != null) {
+            stmt.bindLong(3, age);
+        }
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public TestUser readEntity(Cursor cursor, int offset) {
+        TestUser entity = new TestUser( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
+            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // age
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, TestUser entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
+        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(TestUser entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(TestUser entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+}
