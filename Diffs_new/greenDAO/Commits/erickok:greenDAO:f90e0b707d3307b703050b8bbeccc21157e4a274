diff --git a/PerformanceTests/Cupboard/build.gradle b/PerformanceTests/Cupboard/build.gradle
new file mode 100644
index 00000000..5429f26b
--- /dev/null
+++ b/PerformanceTests/Cupboard/build.gradle
@@ -0,0 +1,30 @@
+buildscript {
+    repositories {
+        jcenter()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.3.1'
+    }
+}
+
+apply plugin: 'com.android.application'
+
+android {
+    buildToolsVersion '23.0.0'
+    compileSdkVersion 19
+
+    defaultConfig {
+        applicationId 'de.greenrobot.performance.cupboard'
+        minSdkVersion 4
+        targetSdkVersion 19
+
+        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
+
+        buildConfigField "boolean", "RUN_PERFORMANCE_TESTS", "true"
+    }
+}
+
+dependencies {
+    androidTestCompile 'nl.qbusict:cupboard:2.1.2'
+}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/DbHelper.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/DbHelper.java
new file mode 100644
index 00000000..f5180308
--- /dev/null
+++ b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/DbHelper.java
@@ -0,0 +1,32 @@
+package de.greenrobot.performance.cupboard;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+import static nl.qbusict.cupboard.CupboardFactory.cupboard;
+
+public class DbHelper extends SQLiteOpenHelper {
+
+	static {
+		// register our models
+		cupboard().register(SimpleEntityNotNull.class);
+	}
+
+	public DbHelper(Context context, String databaseName, int databaseVersion) {
+		super(context, databaseName, null, databaseVersion);
+	}
+
+	@Override
+	public void onCreate(SQLiteDatabase db) {
+		// this will ensure that all tables are created
+		cupboard().withDatabase(db).createTables();
+	}
+
+	@Override
+	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+		// this will upgrade tables, adding columns and new tables.
+		// Note that existing columns will not be converted
+		cupboard().withDatabase(db).upgradeTables();
+	}
+}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java
new file mode 100644
index 00000000..c9ce0005
--- /dev/null
+++ b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/PerformanceTestCupboard.java
@@ -0,0 +1,141 @@
+package de.greenrobot.performance.cupboard;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+import android.util.Log;
+
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+
+import nl.qbusict.cupboard.DatabaseCompartment;
+
+import static nl.qbusict.cupboard.CupboardFactory.cupboard;
+
+public class PerformanceTestCupboard extends ApplicationTestCase<Application> {
+
+	private static final int BATCH_SIZE = 10000;
+	private static final int RUNS = 8;
+	private static final String DATABASE_NAME = "cupboard.db";
+	private static final int DATABASE_VERSION = 1;
+
+	private DbHelper dbHelper;
+	private DatabaseCompartment database;
+
+	public PerformanceTestCupboard() {
+		super(Application.class);
+	}
+
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp();
+		createApplication();
+		prepareDb();
+	}
+
+	protected void prepareDb() {
+		dbHelper = new DbHelper(getApplication(), DATABASE_NAME, DATABASE_VERSION);
+		database = cupboard().withDatabase(dbHelper.getWritableDatabase());
+	}
+
+	@Override
+	protected void tearDown() throws Exception {
+		getApplication().deleteDatabase(DATABASE_NAME);
+		super.tearDown();
+	}
+
+	public void testPerformance() throws Exception {
+		//noinspection PointlessBooleanExpression
+		if (!BuildConfig.RUN_PERFORMANCE_TESTS) {
+			Log.d("DAO", "Cupboard performance tests are disabled.");
+			return;
+		}
+
+		runTests(100); // Warmup
+
+		for (int i = 0; i < RUNS; i++) {
+			deleteAll();
+			runTests(BATCH_SIZE);
+		}
+		deleteAll();
+		Log.d("DAO", "---------------End");
+	}
+
+	protected void deleteAll() {
+		long start = System.currentTimeMillis();
+		database.delete(SimpleEntityNotNull.class, "");
+		long time = System.currentTimeMillis() - start;
+		Log.d("DAO", "Cupboard: Deleted all entities in " + time + " ms");
+	}
+
+	protected void runTests(int entityCount) throws Exception {
+		Log.d("DAO", "---------------Start: " + entityCount);
+
+		long start, time;
+
+		final List<SimpleEntityNotNull> list = new ArrayList<SimpleEntityNotNull>();
+		for (int i = 0; i < entityCount; i++) {
+			list.add(SimpleEntityNotNullHelper.createEntity((long) i));
+		}
+		System.gc();
+
+		runOneByOne(list, entityCount / 10);
+
+		System.gc();
+		deleteAll();
+
+		start = System.currentTimeMillis();
+		database.put(list);
+		time = System.currentTimeMillis() - start;
+		Log.d("DAO", "Cupboard: Created (batch) " + list.size() + " entities in " + time + " ms");
+
+		start = System.currentTimeMillis();
+		database.put(list);
+		time = System.currentTimeMillis() - start;
+		Log.d("DAO", "Cupboard: Updated (batch) " + list.size() + " entities in " + time + " ms");
+
+		start = System.currentTimeMillis();
+		List<SimpleEntityNotNull> reloaded = database.query(SimpleEntityNotNull.class).list();
+		time = System.currentTimeMillis() - start;
+		Log.d("DAO", "Cupboard: Loaded (batch) " + reloaded.size() + " entities in " + time + " ms");
+
+		start = System.currentTimeMillis();
+		for (int i = 0; i < reloaded.size(); i++) {
+			SimpleEntityNotNull entity = reloaded.get(i);
+			entity.getId();
+			entity.getSimpleBoolean();
+			entity.getSimpleByte();
+			entity.getSimpleShort();
+			entity.getSimpleInt();
+			entity.getSimpleLong();
+			entity.getSimpleFloat();
+			entity.getSimpleDouble();
+			entity.getSimpleString();
+			entity.getSimpleByteArray();
+		}
+		time = System.currentTimeMillis() - start;
+		Log.d("DAO", "Cupboard: Accessed properties of " + reloaded.size() + " entities in " + time + " ms");
+
+		System.gc();
+		Log.d("DAO", "---------------End: " + entityCount);
+	}
+
+	protected void runOneByOne(List<SimpleEntityNotNull> list, int count) throws SQLException {
+		long start;
+		long time;
+		start = System.currentTimeMillis();
+		for (int i = 0; i < count; i++) {
+			database.put(list.get(i));
+		}
+		time = System.currentTimeMillis() - start;
+		Log.d("DAO", "Cupboard: Inserted (one-by-one) " + count + " entities in " + time + " ms");
+
+		start = System.currentTimeMillis();
+		for (int i = 0; i < count; i++) {
+			database.put(list.get(i));
+		}
+		time = System.currentTimeMillis() - start;
+		Log.d("DAO", "Cupboard: Updated (one-by-one) " + count + " entities in " + time + " ms");
+	}
+
+}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNull.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNull.java
new file mode 100644
index 00000000..62ed9d0e
--- /dev/null
+++ b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNull.java
@@ -0,0 +1,98 @@
+package de.greenrobot.performance.cupboard;
+
+/**
+ * Simple entity for performance testing.
+ */
+public class SimpleEntityNotNull {
+
+    public Long _id;
+    public boolean simpleBoolean;
+    public byte simpleByte;
+    public short simpleShort;
+    public int simpleInt;
+    public long simpleLong;
+    public float simpleFloat;
+    public double simpleDouble;
+    public String simpleString;
+    public byte[] simpleByteArray;
+
+    public Long getId() {
+        return _id;
+    }
+
+    public boolean getSimpleBoolean() {
+        return simpleBoolean;
+    }
+
+    public void setSimpleBoolean(boolean simpleBoolean) {
+        this.simpleBoolean = simpleBoolean;
+    }
+
+    public byte getSimpleByte() {
+        return simpleByte;
+    }
+
+    public void setSimpleByte(byte simpleByte) {
+        this.simpleByte = simpleByte;
+    }
+
+    public short getSimpleShort() {
+        return simpleShort;
+    }
+
+    public void setId(Long id) {
+        this._id = id;
+    }
+
+    public void setSimpleShort(short simpleShort) {
+        this.simpleShort = simpleShort;
+    }
+
+    public int getSimpleInt() {
+        return simpleInt;
+    }
+
+    public void setSimpleInt(int simpleInt) {
+        this.simpleInt = simpleInt;
+    }
+
+    public long getSimpleLong() {
+        return simpleLong;
+    }
+
+    public void setSimpleLong(long simpleLong) {
+        this.simpleLong = simpleLong;
+    }
+
+    public float getSimpleFloat() {
+        return simpleFloat;
+    }
+
+    public void setSimpleFloat(float simpleFloat) {
+        this.simpleFloat = simpleFloat;
+    }
+
+    public double getSimpleDouble() {
+        return simpleDouble;
+    }
+
+    public void setSimpleDouble(double simpleDouble) {
+        this.simpleDouble = simpleDouble;
+    }
+
+    public String getSimpleString() {
+        return simpleString;
+    }
+
+    public void setSimpleString(String simpleString) {
+        this.simpleString = simpleString;
+    }
+
+    public byte[] getSimpleByteArray() {
+        return simpleByteArray;
+    }
+
+    public void setSimpleByteArray(byte[] simpleByteArray) {
+        this.simpleByteArray = simpleByteArray;
+    }
+}
diff --git a/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNullHelper.java b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNullHelper.java
new file mode 100644
index 00000000..082d7766
--- /dev/null
+++ b/PerformanceTests/Cupboard/src/androidTest/java/de/greenrobot/performance/cupboard/SimpleEntityNotNullHelper.java
@@ -0,0 +1,22 @@
+package de.greenrobot.performance.cupboard;
+
+public class SimpleEntityNotNullHelper {
+    protected static SimpleEntityNotNull createEntity(Long key) {
+        if (key == null) {
+            return null;
+        }
+        SimpleEntityNotNull entity = new SimpleEntityNotNull();
+        entity.setId(key);
+        entity.setSimpleBoolean(true);
+        entity.setSimpleByte(Byte.MAX_VALUE);
+        entity.setSimpleShort(Short.MAX_VALUE);
+        entity.setSimpleInt(Integer.MAX_VALUE);
+        entity.setSimpleLong(Long.MAX_VALUE);
+        entity.setSimpleFloat(Float.MAX_VALUE);
+        entity.setSimpleDouble(Double.MAX_VALUE);
+        entity.setSimpleString("greenrobot greenDAO");
+        byte[] bytes = { 42, -17, 23, 0, 127, -128 };
+        entity.setSimpleByteArray(bytes);
+        return entity;
+    }
+}
diff --git a/PerformanceTests/Cupboard/src/main/AndroidManifest.xml b/PerformanceTests/Cupboard/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..75a61d01
--- /dev/null
+++ b/PerformanceTests/Cupboard/src/main/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="de.greenrobot.performance.cupboard">
+
+    <application>
+        <!-- empty application tag -->
+    </application>
+</manifest>
diff --git a/settings.gradle b/settings.gradle
index 88ab9490..046b98b6 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -4,4 +4,5 @@ include 'DaoTestGenerator'
 include ':DaoExample'
 include ':PerformanceTests:ActiveAndroid'
 include ':PerformanceTests:OrmLite'
-include ':PerformanceTests:Realm'
\ No newline at end of file
+include ':PerformanceTests:Realm'
+include ':PerformanceTests:Cupboard'
\ No newline at end of file
