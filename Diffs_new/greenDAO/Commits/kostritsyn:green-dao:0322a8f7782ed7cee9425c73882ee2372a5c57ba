diff --git a/DaoCore/build.gradle b/DaoCore/build.gradle
index 49030e38..15c180a7 100644
--- a/DaoCore/build.gradle
+++ b/DaoCore/build.gradle
@@ -30,7 +30,6 @@ dependencies {
     provided 'com.google.android:android:4.1.1.4'
     provided 'com.google.android:android-test:4.1.1.4'
     provided 'com.google.android:annotations:4.1.1.4'
-    provided 'com.google.android:support-v4:r7'
     // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4'
     deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
 }
diff --git a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
index fe1fd406..b8c3f5e8 100644
--- a/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
+++ b/DaoCore/src/de/greenrobot/dao/internal/SqlUtils.java
@@ -115,7 +115,7 @@ public static String createSqlSelectCountStar(String tablename, String tableAlia
         return builder.toString();
     }
 
-    /** Remember: SQLite does not support joins nor table alias for DELETE. */
+    /** Remember: SQLite does not de.greenrobot.dao.support joins nor table alias for DELETE. */
     public static String createSqlDelete(String tablename, String[] columns) {
         StringBuilder builder = new StringBuilder("DELETE FROM ");
         builder.append(tablename);
diff --git a/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java b/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
index a17b2829..0a6d8bca 100644
--- a/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
+++ b/DaoCore/src/de/greenrobot/dao/query/AbstractQuery.java
@@ -27,7 +27,7 @@
  * @param <T>
  *            The enitity class the query will return results for.
  */
-// TODO support long, double, blob types directly
+// TODO de.greenrobot.dao.support long, double, blob types directly
 abstract class AbstractQuery<T> {
     protected final AbstractDao<T, ?> dao;
     protected final InternalQueryDaoAccess<T> daoAccess;
diff --git a/DaoCore/src/de/greenrobot/dao/query/Query.java b/DaoCore/src/de/greenrobot/dao/query/Query.java
index 4d36b1b0..46a8183e 100644
--- a/DaoCore/src/de/greenrobot/dao/query/Query.java
+++ b/DaoCore/src/de/greenrobot/dao/query/Query.java
@@ -30,7 +30,7 @@
  * @param <T>
  *            The enitity class the query will return results for.
  */
-// TODO support long, double and other types, not just Strings, for parameters
+// TODO de.greenrobot.dao.support long, double and other types, not just Strings, for parameters
 // TODO Make parameters setable by Property (if unique in paramaters)
 // TODO Query for PKs/ROW IDs
 // TODO Make query compilable
diff --git a/daogenerator/src-template/dao-deep.ftl b/daogenerator/src-template/dao-deep.ftl
index eee5dc97..58e6bd85 100644
--- a/daogenerator/src-template/dao-deep.ftl
+++ b/daogenerator/src-template/dao-deep.ftl
@@ -17,7 +17,8 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#if entity.toOneRelations?has_content>
+<#if entity.toOneRelations?has_content || (entity.superclassEntity?has_content
+    && entity.superclassEntity.toOneRelations?has_content)>
     private String selectDeep;
 
     protected String getSelectDeep() {
@@ -31,11 +32,25 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
             builder.append(',');
 </#if>
 </#list>
+<#if entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content>
+<#list entity.superclassEntity.toOneRelations as toOne>
+            SqlUtils.appendColumns(builder, "T${toOne_index}", daoSession.get${toOne.targetEntity.classNameDao}().getAllColumns());
+<#if toOne_has_next>
+            builder.append(',');
+</#if>
+</#list>
+</#if>
             builder.append(" FROM ${entity.tableName} T");
 <#list entity.toOneRelations as toOne>
             builder.append(" LEFT JOIN ${toOne.targetEntity.tableName} T${toOne_index}<#--
 --> ON T.'${toOne.fkProperties[0].columnName}'=T${toOne_index}.'${toOne.targetEntity.pkProperty.columnName}'");
 </#list>
+<#if entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content>
+<#list entity.superclassEntity.toOneRelations as toOne>
+            builder.append(" LEFT JOIN ${toOne.targetEntity.tableName} T${toOne_index}<#--
+--> ON T.'${toOne.fkProperties[0].columnName}'=T${toOne_index}.'${toOne.targetEntity.pkProperty.columnName}'");
+</#list>
+</#if>
             builder.append(' ');
             selectDeep = builder.toString();
         }
@@ -58,10 +73,24 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 </#if>
 
 </#list>
+<#if entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content>
+<#list entity.superclassEntity.toOneRelations as toOne>
+        ${toOne.targetEntity.className} ${toOne.name} = loadCurrentOther(daoSession.get${toOne.targetEntity.classNameDao}(), cursor, offset);
+<#if toOne.fkProperties[0].notNull>         if(${toOne.name} != null) {
+    </#if>        entity.set${toOne.name?cap_first}(${toOne.name});
+<#if toOne.fkProperties[0].notNull>
+        }
+</#if>
+<#if toOne_has_next>
+        offset += daoSession.get${toOne.targetEntity.classNameDao}().getAllColumns().length;
+</#if>
+
+</#list>
+</#if>
         return entity;    
     }
 
-    public ${entity.className} loadDeep(Long key) {
+    public ${entity.className} loadDeep(${entity.pkType} key) {
         assertSinglePk();
         if (key == null) {
             return null;
diff --git a/daogenerator/src-template/dao-uid.ftl b/daogenerator/src-template/dao-uid.ftl
index 5990d3dc..0bf586f1 100644
--- a/daogenerator/src-template/dao-uid.ftl
+++ b/daogenerator/src-template/dao-uid.ftl
@@ -1,24 +1,40 @@
 <#-- Override update, insert, delete methods -->
-<#if entity.toOneRelations?has_content || entity.toManyRelations?has_content>
+<#if entity.toOneRelations?has_content || entity.toManyRelations?has_content
+    || (entity.superclassEntity?has_content && (entity.superclassEntity.toOneRelations?has_content
+    || entity.superclassEntity.toManyRelations?has_content))>
     @Override
     public long insert(${entity.className} entity) {
 
+        <#if entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content>
+        <#list entity.superclassEntity.toOneRelations as toOne>
+        daoSession.insert(entity.get${toOne.name?cap_first}());
+        </#list>
+        </#if>
         <#if entity.toOneRelations?has_content>
         <#list entity.toOneRelations as toOne>
         daoSession.insert(entity.get${toOne.name?cap_first}());
-
         </#list>
         </#if>
+
         long entityId = super.insert(entity);
+        <#if entity.superclassEntity?has_content && entity.superclassEntity.toManyRelations?has_content>
 
+        <#list entity.superclassEntity.toManyRelations as toMany>
+        ${toMany.targetEntity.classNameDao} ${toMany.name}Dao = daoSession.get${toMany.targetEntity.classNameDao}();
+        for (${toMany.targetEntity.className} elem : entity.get${toMany.name?cap_first}()) {
+            elem.set${toMany.targetProperties[0].propertyName?cap_first}(entity.get${entity.pkProperty.propertyName?cap_first}());
+        }
+        ${toMany.name}Dao.insertInTx(entity.get${toMany.name?cap_first}());
+        </#list>
+        </#if>
         <#if entity.toManyRelations?has_content>
         <#list entity.toManyRelations as toMany>
+
         ${toMany.targetEntity.classNameDao} ${toMany.name}Dao = daoSession.get${toMany.targetEntity.classNameDao}();
         for (${toMany.targetEntity.className} elem : entity.get${toMany.name?cap_first}()) {
             elem.set${toMany.targetProperties[0].propertyName?cap_first}(entity.get${entity.pkProperty.propertyName?cap_first}());
         }
         ${toMany.name}Dao.insertInTx(entity.get${toMany.name?cap_first}());
-
         </#list>
         </#if>
 
@@ -32,7 +48,8 @@
             return null;
         }
 
-        <#if entity.toOneRelations?has_content>
+        <#if entity.toOneRelations?has_content || (entity.superclassEntity?has_content
+            && entity.superclassEntity.toOneRelations?has_content)>
         ${entity.className} entity = loadDeep(key);
         <#else>
         ${entity.className} entity = load(key);
@@ -42,6 +59,11 @@
             return null;
         }
 
+        <#if entity.superclassEntity?has_content>
+        <#list entity.superclassEntity.toManyRelations as toMany>
+        entity.get${toMany.name?cap_first}();
+        </#list>
+        </#if>
         <#list entity.toManyRelations as toMany>
         entity.get${toMany.name?cap_first}();
         </#list>
diff --git a/daogenerator/src-template/dao.ftl b/daogenerator/src-template/dao.ftl
index 11bd89a4..27a443c9 100644
--- a/daogenerator/src-template/dao.ftl
+++ b/daogenerator/src-template/dao.ftl
@@ -17,14 +17,16 @@ You should have received a copy of the GNU General Public License
 along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
-<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date":"Long", "Enum":"String"} />
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date":"Long", "Enum":"String"} />
+<#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date":"Long", "Enum":"String", "Serializable":"Blob"} />
+<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date":"Long", "Enum":"String", "Serializable":"Blob"} />
 package ${entity.javaPackageDao};
 
-<#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content>
+<#if entity.toOneRelations?has_content || entity.incomingToManyRelations?has_content
+    || (entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content)>
 import java.util.List;
 </#if>
-<#if entity.toOneRelations?has_content>
+<#if entity.toOneRelations?has_content
+    || (entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content)>
 import java.util.ArrayList;
 </#if>
 import android.database.Cursor;
@@ -33,7 +35,8 @@ import android.database.sqlite.SQLiteStatement;
 
 import de.greenrobot.dao.AbstractDao;
 import de.greenrobot.dao.Property;
-<#if entity.toOneRelations?has_content>
+<#if entity.toOneRelations?has_content
+    || (entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content)>
 import de.greenrobot.dao.internal.SqlUtils;
 </#if>
 import de.greenrobot.dao.internal.DaoConfig;
@@ -56,6 +59,14 @@ import ${entity.javaPackage}.${entity.className};
 <#if entity.protobuf>
 import ${entity.javaPackage}.${entity.className}.Builder;
 </#if>
+<#list entity.toOneRelations as toOne>
+import ${toOne.targetEntity.javaPackage}.${toOne.targetEntity.className};
+</#list>
+<#if entity.superclassEntity?has_content>
+<#list entity.superclassEntity.toOneRelations as toOne>
+import ${toOne.targetEntity.javaPackage}.${toOne.targetEntity.className};
+</#list>
+</#if>
 
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 /** 
@@ -71,7 +82,7 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
     */
     public static class Properties {
 <#list entity.propertiesColumns as property>
-        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
+        public final static Property ${property.propertyName?cap_first} = new Property(${property_index}, ${property.javaTypeShort}.class, "${property.propertyName}", ${property.primaryKey?string}, "${property.columnName}");
 </#list>
     };
 
@@ -132,12 +143,15 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.protobuf>
         }
 </#if>
-<#else> <#-- nullable, non-protobuff -->
+<#else> <#-- nullable, non-protobuf -->
         ${property.javaType} ${property.propertyName} = entity.get${property.propertyName?cap_first}();
         if (${property.propertyName} != null) {
-            stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, ${property.propertyName}<#if
+            stmt.bind${toBindType[property.propertyType]}(${property_index + 1}, <#if
+ property.propertyType == "Serializable">SerializeField.serialize(${property.propertyName}));
+<#else>${property.propertyName}<#if
  property.propertyType == "Boolean"> ? 1l: 0l</#if><#if property.propertyType == "Date">.getTime()</#if>);
-        }
+</#if>
+       }
 </#if>
 </#list>
 <#list entity.toOneRelations as toOne>
@@ -198,13 +212,14 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#--
 ############################## readEntity non-protobuff, constructor ############################## 
 -->
-        ${entity.className} entity = new ${entity.className}( //
+        ${entity.className} entity = new ${entity.className}(
 <#list entity.propertiesColumns as property>
             <#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
+            property.propertyType == "Serializable">(${property.javaType})SerializeField.deserialize(cursor.get${toCursorType[property.propertyType]}(offset + ${property_index}))<#else><#if
             property.propertyType == "Byte">(byte) </#if><#if
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
-            property.propertyType == "Date">)</#if><#if property_has_next>,</#if> // ${property.propertyName}
+            property.propertyType == "Date">)</#if></#if><#if property_has_next>,</#if> // ${property.propertyName}
 </#list>        
         );
         return entity;
@@ -226,10 +241,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#else> 
 <#list entity.propertiesColumns as property>
         entity.set${property.propertyName?cap_first}(<#if !property.notNull>cursor.isNull(offset + ${property_index}) ? null : </#if><#if
+            property.propertyType == "Serializable">(${property.javaType})SerializeField.deserialize(cursor.get${toCursorType[property.propertyType]}(offset + ${property_index}))<#else><#if
             property.propertyType == "Byte">(byte) </#if><#if
             property.propertyType == "Date">new java.util.Date(</#if>cursor.get${toCursorType[property.propertyType]}(offset + ${property_index})<#if
             property.propertyType == "Boolean"> != 0</#if><#if
-            property.propertyType == "Date">)</#if>);
+            property.propertyType == "Date">)</#if></#if>);
 </#list>
 </#if>
      }
@@ -296,10 +312,13 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
     }
 
 </#list>   
-<#if entity.toOneRelations?has_content>
+<#if entity.toOneRelations?has_content
+    || (entity.superclassEntity?has_content && entity.superclassEntity.toOneRelations?has_content)>
     <#include "dao-deep.ftl">
 </#if>
-<#if entity.toOneRelations?has_content || entity.toManyRelations?has_content>
+<#if entity.toOneRelations?has_content || entity.toManyRelations?has_content
+    || (entity.superclassEntity?has_content && (entity.superclassEntity.toOneRelations?has_content
+    || entity.superclassEntity.toManyRelations?has_content))>
     <#include "dao-uid.ftl">
 </#if>
 }
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Entity.java b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
index f8680427..4d44233f 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Entity.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Entity.java
@@ -151,6 +151,18 @@ public PropertyBuilder addEnumProperty(String enumType, String propertyName) {
         return builder;
     }
 
+    public PropertyBuilder addSerializableProperty(String type, String propertyName) {
+        if (!propertyNames.add(propertyName)) {
+            throw new RuntimeException("Property already defined: " + propertyName);
+        }
+        PropertyBuilder builder = new Property.PropertyBuilder(schema, this, PropertyType.Serializable, propertyName, type);
+        properties.add(builder.getProperty());
+
+        additionalImportsDao.add("de.greenrobot.dao.support.SerializeField");
+
+        return builder;
+    }
+
     public PropertyBuilder addProperty(PropertyType propertyType, String propertyName) {
         if (!propertyNames.add(propertyName)) {
             throw new RuntimeException("Property already defined: " + propertyName);
@@ -195,7 +207,7 @@ public ToMany addToMany(Property sourceProperty, Entity target, Property targetP
 
     public ToMany addToMany(Property[] sourceProperties, Entity target, Property[] targetProperties) {
         if (protobuf) {
-            throw new IllegalStateException("Protobuf entities do not support realtions, currently");
+            throw new IllegalStateException("Protobuf entities do not de.greenrobot.dao.support realtions, currently");
         }
 
         ToMany toMany = new ToMany(schema, this, sourceProperties, target, targetProperties);
@@ -210,7 +222,7 @@ public ToMany addToMany(Property[] sourceProperties, Entity target, Property[] t
      */
     public ToOne addToOne(Entity target, Property fkProperty) {
         if (protobuf) {
-            throw new IllegalStateException("Protobuf entities do not support realtions, currently");
+            throw new IllegalStateException("Protobuf entities do not de.greenrobot.dao.support realtions, currently");
         }
 
         Property[] fkProperties = {fkProperty};
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Property.java b/daogenerator/src/de/greenrobot/daogenerator/Property.java
index 76820241..718ffef1 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Property.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Property.java
@@ -157,6 +157,7 @@ public Property getProperty() {
     private int ordinal;
 
     private String javaType;
+    private String javaTypeShort;
 
     public Property(Schema schema, Entity entity, PropertyType propertyType, String propertyName) {
         this.schema = schema;
@@ -209,8 +210,16 @@ public String getJavaType() {
         return javaType;
     }
 
+    public String getJavaTypeShort() {
+        return javaTypeShort;
+    }
+
     public void setJavaType(String javaType) {
         this.javaType = javaType;
+
+        /* Avoid generic types */
+        int index = javaType.indexOf('<');
+        javaTypeShort = index < 0 ? javaType : javaType.substring(0, index);
     }
 
     public int getOrdinal() {
@@ -246,7 +255,7 @@ void init2ndPass() {
             columnName = DaoUtil.dbName(propertyName);
         }
 
-        if (propertyType.equals(PropertyType.Enum)) {
+        if (propertyType.equals(PropertyType.Enum) || propertyType.equals(PropertyType.Serializable)) {
             return;
         }
 
@@ -255,6 +264,8 @@ void init2ndPass() {
         } else {
             javaType = schema.mapToJavaTypeNullable(propertyType);
         }
+
+        javaTypeShort = javaType;
     }
 
     private void initConstraint() {
diff --git a/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java b/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
index 8831234b..f01db969 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/PropertyType.java
@@ -23,5 +23,5 @@
  * @author Markus
  */
 public enum PropertyType {
-    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, Enum
+    Byte, Short, Int, Long, Boolean, Float, Double, String, ByteArray, Date, Enum, Serializable
 }
diff --git a/daogenerator/src/de/greenrobot/daogenerator/Schema.java b/daogenerator/src/de/greenrobot/daogenerator/Schema.java
index bf23c238..082ca3bb 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/Schema.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/Schema.java
@@ -67,6 +67,7 @@ private void initTypeMappings() {
         propertyToDbType.put(PropertyType.ByteArray, "BLOB");
         propertyToDbType.put(PropertyType.Date, "INTEGER");
         propertyToDbType.put(PropertyType.Enum, "TEXT");
+        propertyToDbType.put(PropertyType.Serializable, "BLOB");
 
         propertyToJavaTypeNotNull = new HashMap<PropertyType, String>();
         propertyToJavaTypeNotNull.put(PropertyType.Boolean, "boolean");
