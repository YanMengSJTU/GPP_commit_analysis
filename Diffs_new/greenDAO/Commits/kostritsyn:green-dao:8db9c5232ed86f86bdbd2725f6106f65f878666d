diff --git a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
index 6a37ef2a..e4f1a1b0 100644
--- a/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
+++ b/DaoCore/src/de/greenrobot/dao/AbstractDaoSession.java
@@ -58,6 +58,11 @@ public AbstractDaoSession(SQLiteDatabase db) {
 
     /** Convenient call for {@link AbstractDao#insert(Object)}. */
     public <T> long insert(T entity) {
+
+        if (entity == null) {
+            return 0;
+        }
+
         @SuppressWarnings("unchecked")
         AbstractDao<T, ?> dao = (AbstractDao<T, ?>) getDao(entity.getClass());
         return dao.insert(entity);
@@ -65,6 +70,11 @@ public AbstractDaoSession(SQLiteDatabase db) {
 
     /** Convenient call for {@link AbstractDao#insertOrReplace(Object)}. */
     public <T> long insertOrReplace(T entity) {
+
+        if (entity == null) {
+            return 0;
+        }
+
         @SuppressWarnings("unchecked")
         AbstractDao<T, ?> dao = (AbstractDao<T, ?>) getDao(entity.getClass());
         return dao.insertOrReplace(entity);
diff --git a/daogenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java b/daogenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
index 47bba961..7dec4510 100644
--- a/daogenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
+++ b/daogenerator/src-generator-testentities/de/greenrobot/daogenerator/gentest/TestDaoGenerator.java
@@ -253,7 +253,7 @@ protected void createStringKeyValue() {
         entity.addStringProperty("key").primaryKey();
         entity.addStringProperty("value");
     }
-
+s
     protected void createAutoincrement() {
         Entity entity = schema.addEntity("AutoincrementEntity");
         entity.addIdProperty().autoincrement();
diff --git a/daogenerator/src-template/dao-uid.ftl b/daogenerator/src-template/dao-uid.ftl
new file mode 100644
index 00000000..0d73913b
--- /dev/null
+++ b/daogenerator/src-template/dao-uid.ftl
@@ -0,0 +1,51 @@
+<#-- Override update, insert, delete methods -->
+<#if entity.toOneRelations?has_content || entity.toManyRelations?has_content>
+    @Override
+    public long insert(${entity.className} entity) {
+
+        <#if entity.toOneRelations?has_content>
+        <#list entity.toOneRelations as toOne>
+        daoSession.insert(entity.get${toOne.name?cap_first}());
+
+        </#list>
+        </#if>
+        long entityId = insert(entity);
+
+        <#if entity.toManyRelations?has_content>
+        <#list entity.toManyRelations as toMany>
+        ${toMany.targetEntity.classNameDao} ${toMany.name}Dao = daoSession.get${toMany.targetEntity.classNameDao}();
+        for (${toMany.targetEntity.className} elem : entity.get${toMany.name?cap_first}()) {
+            elem.set${toMany.targetProperties[0].propertyName?cap_first}(entity.get${entity.pkProperty.propertyName?cap_first}());
+        }
+        ${toMany.name}Dao.insertInTx(entity.get${toMany.name?cap_first}());
+
+        </#list>
+        </#if>
+
+        return entityId;
+    }
+
+    public ${entity.className} select(${entity.pkType} key) {
+        assertSinglePk();
+
+        if (key == null) {
+            return null;
+        }
+
+        <#if entity.toOneRelations?has_content>
+        ${entity.className} entity = loadDeep(key);
+        <#else>
+        ${entity.className} entity = load(key);
+        </#if>
+
+        if (entity == null) {
+            return null;
+        }
+
+        <#list entity.toManyRelations as toMany>
+        entity.get${toMany.name?cap_first}();
+        </#list>
+
+        return entity;
+    }
+</#if>
\ No newline at end of file
diff --git a/daogenerator/src-template/dao.ftl b/daogenerator/src-template/dao.ftl
index 443f74dc..b6262e18 100644
--- a/daogenerator/src-template/dao.ftl
+++ b/daogenerator/src-template/dao.ftl
@@ -299,4 +299,7 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
+<#if entity.toOneRelations?has_content || entity.toManyRelations?has_content>
+    <#include "dao-uid.ftl">
+</#if>
 }
diff --git a/daogenerator/src-template/entity-base.ftl b/daogenerator/src-template/entity-base.ftl
index 11ba782f..75697741 100644
--- a/daogenerator/src-template/entity-base.ftl
+++ b/daogenerator/src-template/entity-base.ftl
@@ -36,16 +36,20 @@ import de.greenrobot.dao.DaoException;
 <#list entity.additionalImportsEntity as additionalImport>
 import ${additionalImport};
 </#list>
-
 </#if>
 <#if entity.hasKeepSections>
+
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+<#if keepIncludes?has_content>
 
 // KEEP INCLUDES - put your custom includes here
-<#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
+${keepIncludes!}
+// KEEP INCLUDES END
+</#if>
 <#else>
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 </#if>
+
 /**
  * Entity mapped to table ${entity.tableName}.
  */
@@ -87,7 +91,8 @@ as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
 </#if>
 <#if entity.hasKeepSections>
     // KEEP FIELDS - put your custom fields here
-${keepFields!}    // KEEP FIELDS END
+${keepFields!}
+    // KEEP FIELDS END
 
 </#if>
 <#if entity.constructors>
@@ -145,8 +150,12 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 ##########################################
 -->
 <#list entity.toOneRelations as toOne>
-    /** To-one relationship, resolved on first access. */
     public ${toOne.targetEntity.className} get${toOne.name?cap_first}() {
+        return ${toOne.name};
+    }
+
+    /** To-one relationship, resolved on first access. */
+    public ${toOne.targetEntity.className} select${toOne.name?cap_first}() {
 <#if toOne.useFkProperty>
         if (${toOne.name}__resolvedKey == null || <#--
         --><#if toOne.resolvedKeyUseEquals[0]>!${toOne.name}__resolvedKey.equals(${toOne.fkProperties[0].propertyName})<#--
@@ -179,6 +188,10 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 </#if>
 
     public void set${toOne.name?cap_first}(${toOne.targetEntity.className} ${toOne.name}) {
+        this.${toOne.name} = ${toOne.name};
+    }
+
+    public void insert${toOne.name?cap_first}(${toOne.targetEntity.className} ${toOne.name}) {
 <#if toOne.fkProperties[0].notNull>
         if (${toOne.name} == null) {
             throw new DaoException("To-one property '${toOne.fkProperties[0].propertyName}' has not-null constraint; cannot set to-one to null");
@@ -200,8 +213,12 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 ##########################################
 -->
 <#list entity.toManyRelations as toMany>
+    public void set${toMany.name?cap_first}(List<${toMany.targetEntity.className}> ${toMany.name}) {
+        this.${toMany.name} = ${toMany.name};
+    }
+
     /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
-    public synchronized List<${toMany.targetEntity.className}> get${toMany.name?cap_first}() {
+    public synchronized List<${toMany.targetEntity.className}> select${toMany.name?cap_first}() {
         if (${toMany.name} == null) {
             if (daoSession == null) {
                 throw new DaoException("Entity is detached from DAO context");
@@ -213,6 +230,10 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         return ${toMany.name};
     }
 
+    public List<${toMany.targetEntity.className}> get${toMany.name?cap_first}() {
+        return ${toMany.name};
+    }
+
     /** Resets a to-many relationship, making the next get call to query for a fresh result. */
     public synchronized void reset${toMany.name?cap_first}() {
         ${toMany.name} = null;
@@ -251,8 +272,9 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
 
 </#if>
 <#if entity.hasKeepSections>
-    // KEEP METHODS - put your custom methods here
-${keepMethods!}    // KEEP METHODS END
 
+    // KEEP METHODS - put your custom methods here
+${keepMethods!}
+    // KEEP METHODS END
 </#if>
 }
\ No newline at end of file
diff --git a/daogenerator/src-template/entity.ftl b/daogenerator/src-template/entity.ftl
index d412f2e4..f6e01cbb 100644
--- a/daogenerator/src-template/entity.ftl
+++ b/daogenerator/src-template/entity.ftl
@@ -22,16 +22,19 @@ package ${entity.javaPackage};
 import ${additionalImport};
 </#list>
 </#if>
-
-
 <#if entity.hasKeepSections>
+
 // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+<#if keepIncludes?has_content>
 
 // KEEP INCLUDES - put your custom includes here
-<#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
+${keepIncludes!}
+// KEEP INCLUDES END
+</#if>
 <#else>
 // THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
 </#if>
+
 /**
  * Entity mapped to table ${entity.tableName}.
  */
@@ -39,9 +42,12 @@ import ${additionalImport};
 public class ${entity.className} extends ${entity.classNameBase} <#if
 entity.interfacesToImplement?has_content> implements <#list entity.interfacesToImplement
 as ifc>${ifc}<#if ifc_has_next>, </#if></#list></#if> {
+
 <#if entity.hasKeepSections>
     // KEEP FIELDS - put your custom fields here
-${keepFields!}    // KEEP FIELDS END
+${keepFields!}
+    // KEEP FIELDS END
+
 </#if>
 <#if entity.constructors>
     public ${entity.className}() {
@@ -62,10 +68,10 @@ property>${property.javaType} ${property.propertyName}<#if property_has_next>, <
         property>${property.propertyName}<#if property_has_next>, </#if></#list>);
     }
 </#if>
-
 <#if entity.hasKeepSections>
-    // KEEP METHODS - put your custom methods here
-${keepMethods!}    // KEEP METHODS END
 
+    // KEEP METHODS - put your custom methods here
+${keepMethods!}
+    // KEEP METHODS END
 </#if>
 }
\ No newline at end of file
diff --git a/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 04b04b51..5f73d4ca 100644
--- a/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/daogenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -74,8 +74,8 @@ public DaoGenerator() throws IOException {
 
     private Pattern compilePattern(String sectionName) {
         int flags = Pattern.DOTALL | Pattern.MULTILINE;
-        return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)^\\s*// KEEP " + sectionName
-                + " END.*?\n", flags);
+        return Pattern.compile(".*^\\s*?//\\s*?KEEP " + sectionName + ".*?\n(.*?)\n^\\s*// KEEP " + sectionName
+                + " END(.*?)", flags);
     }
 
     /** Generates all entities and DAOs for the given schema. */
