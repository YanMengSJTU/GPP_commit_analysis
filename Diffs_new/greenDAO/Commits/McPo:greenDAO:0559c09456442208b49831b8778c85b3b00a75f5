diff --git a/DaoTest/src/test/java/de/greenrobot/dao/query/WhereCollectorTest.java b/DaoTest/src/test/java/de/greenrobot/dao/query/WhereCollectorTest.java
new file mode 100644
index 00000000..29723802
--- /dev/null
+++ b/DaoTest/src/test/java/de/greenrobot/dao/query/WhereCollectorTest.java
@@ -0,0 +1,41 @@
+package de.greenrobot.dao.query;
+
+import de.greenrobot.dao.unittest.*;
+
+import android.database.sqlite.SQLiteDatabase;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.query.WhereCollector;
+import de.greenrobot.daotest.dummyapp.BuildConfig;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 16)
+public class WhereCollectorTest {
+
+    private DaoSession daoSession;
+    private MinimalEntityDao minimalEntityDao;
+
+    @Before
+    public void setUp() {
+        DaoMaster.DevOpenHelper openHelper = new DaoMaster.DevOpenHelper(RuntimeEnvironment.application, null, null);
+        SQLiteDatabase db = openHelper.getWritableDatabase();
+        daoSession = new DaoMaster(db).newSession();
+        minimalEntityDao = daoSession.getMinimalEntityDao();
+    }
+
+    @Test
+    public void testCheckProperty() {
+    	WhereCollector whereCollector = new WhereCollector(minimalEntityDao, "T");
+    	final Property Id2 = new Property(0, Long.class, "id", true, "_id");
+
+    	whereCollector.checkProperty(Id2);
+    }
+
+}
diff --git a/DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityTest.java b/DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityTest.java
index 702ba039..1a64e9b0 100644
--- a/DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityTest.java
+++ b/DaoTest/src/test/java/de/greenrobot/dao/unittest/MinimalEntityTest.java
@@ -11,6 +11,7 @@
 
 import java.util.concurrent.CountDownLatch;
 
+import de.greenrobot.dao.Property;
 import de.greenrobot.dao.query.Query;
 import de.greenrobot.daotest.dummyapp.BuildConfig;
 
@@ -47,6 +48,12 @@ public void testBasics() {
         assertNull(minimalEntityDao.load(entity.getId()));
     }
 
+     @Test
+    public void testQueryBuilderEquality() {
+        final Property Id2 = new Property(0, Long.class, "id", true, "_id");
+        minimalEntityDao.queryBuilder().where(Id2.eq(0)).list();
+    }
+
     @Test
     // Testing the work around for Process.myTid() being always 0 in Robolectric
     public void testQueryForCurrentThread() throws InterruptedException {
diff --git a/DaoTest/src/test/java/de/greenrobot/dao/unittest/PropertyTest.java b/DaoTest/src/test/java/de/greenrobot/dao/unittest/PropertyTest.java
new file mode 100644
index 00000000..e6aee1de
--- /dev/null
+++ b/DaoTest/src/test/java/de/greenrobot/dao/unittest/PropertyTest.java
@@ -0,0 +1,41 @@
+package de.greenrobot.dao.unittest;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotSame;
+
+import de.greenrobot.dao.Property;
+import de.greenrobot.daotest.dummyapp.BuildConfig;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 16)
+public class PropertyTest {
+
+    @Test
+    public void testEquality() {
+        final Property a1Property = new Property(0, Long.class, "a", true, "_a");
+        final Property a2Property = new Property(0, Long.class, "a", true, "_a");
+
+        final Property bProperty = new Property(1, Long.class, "a", true, "_a");
+        final Property cProperty = new Property(0, Integer.class, "a", true, "_a");
+        final Property dProperty = new Property(0, Long.class, "b", true, "_a");
+        final Property eProperty = new Property(0, Long.class, "a", false, "_a");
+        final Property fProperty = new Property(0, Long.class, "a", true, "_b");
+
+        assertEquals(a1Property, a2Property);
+        assertNotSame(a1Property, a2Property);
+
+        assertFalse(a1Property.equals(bProperty));
+        assertFalse(a1Property.equals(cProperty));
+        assertFalse(a1Property.equals(dProperty));
+        assertFalse(a1Property.equals(eProperty));
+        assertFalse(a1Property.equals(fProperty));
+    }
+
+
+}
