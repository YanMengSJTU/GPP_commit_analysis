diff --git a/DaoExample/libs/greendao-generator-1.3.1.jar b/DaoExample/libs/greendao-generator-1.3.1.jar
new file mode 100644
index 00000000..7114cdcb
Binary files /dev/null and b/DaoExample/libs/greendao-generator-1.3.1.jar differ
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbour.java b/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbour.java
index 0d1228b4..bafdf205 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbour.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbour.java
@@ -1,6 +1,9 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table AMERICAN_NEIGHBOUR.
  */
@@ -14,6 +17,9 @@
     private Integer update_time;
     private Integer operation_type;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public AmericanNeighbour() {
     }
 
@@ -87,4 +93,7 @@ public void setOperation_type(Integer operation_type) {
         this.operation_type = operation_type;
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbourDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbourDao.java
index 75529b1b..3619e888 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbourDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/AmericanNeighbourDao.java
@@ -10,7 +10,10 @@
 
 import de.greenrobot.daoexample.AmericanNeighbour;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
  * DAO for table AMERICAN_NEIGHBOUR.
 */
@@ -33,6 +36,10 @@
     };
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public AmericanNeighbourDao(DaoConfig config) {
         super(config);
     }
@@ -157,4 +164,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownload.java b/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownload.java
index aa19779c..75322e6a 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownload.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownload.java
@@ -1,6 +1,9 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table APK_DOWNLOAD.
  */
@@ -20,6 +23,9 @@
     private String save_dir;
     private String save_name;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public ApkDownload() {
     }
 
@@ -143,4 +149,7 @@ public void setSave_name(String save_name) {
         this.save_name = save_name;
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownloadDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownloadDao.java
index fd062048..ed06153d 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownloadDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/ApkDownloadDao.java
@@ -10,7 +10,10 @@
 
 import de.greenrobot.daoexample.ApkDownload;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
  * DAO for table APK_DOWNLOAD.
 */
@@ -39,6 +42,10 @@
     };
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public ApkDownloadDao(DaoConfig config) {
         super(config);
     }
@@ -207,4 +214,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
index ed2996f7..26b03692 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Customer.java
@@ -4,7 +4,10 @@
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table CUSTOMER.
  */
@@ -22,6 +25,9 @@
 
     private List<Order> orders;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public Customer() {
     }
 
@@ -104,4 +110,7 @@ public void refresh() {
         myDao.refresh(this);
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
index 25a88fc3..f87b1572 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/CustomerDao.java
@@ -10,7 +10,10 @@
 
 import de.greenrobot.daoexample.Customer;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
  * DAO for table CUSTOMER.
 */
@@ -30,6 +33,10 @@
     private DaoSession daoSession;
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public CustomerDao(DaoConfig config) {
         super(config);
     }
@@ -117,4 +124,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
index 85e7cde8..878f4b4a 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoMaster.java
@@ -17,12 +17,19 @@
 import de.greenrobot.daoexample.ApkDownloadDao;
 import de.greenrobot.daoexample.PlayHistoryDao;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
- * Master of DAO (schema version 1000): knows all DAOs.
+ * Master of DAO (schema version 1): knows all DAOs.
 */
 public class DaoMaster extends AbstractDaoMaster {
-    public static final int SCHEMA_VERSION = 1000;
+    public static final int SCHEMA_VERSION = 1;
+    
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
 
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
@@ -94,5 +101,26 @@ public DaoSession newSession() {
     public DaoSession newSession(IdentityScopeType type) {
         return new DaoSession(db, type, daoConfigMap);
     }
-    
+
+    // KEEP METHODS - put your custom methods here
+    public static class CustomOpenHelper extends OpenHelper {
+        public CustomOpenHelper(Context context, String name, CursorFactory factory) {
+            super(context, name, factory);
+        }
+        
+        @Override
+        public void onCreate(SQLiteDatabase db) {
+            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
+            createAllTables(db, false);
+        }
+
+        @Override
+        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
+            dropAllTables(db, true);
+            onCreate(db);
+        }
+    }
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
index 859d411e..adb1be23 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/DaoSession.java
@@ -27,7 +27,10 @@
 import de.greenrobot.daoexample.ApkDownloadDao;
 import de.greenrobot.daoexample.PlayHistoryDao;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 
 /**
  * {@inheritDoc}
@@ -54,6 +57,10 @@
     private final ApkDownloadDao apkDownloadDao;
     private final PlayHistoryDao playHistoryDao;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
         super(db);
@@ -144,4 +151,10 @@ public PlayHistoryDao getPlayHistoryDao() {
         return playHistoryDao;
     }
 
+    // KEEP METHODS - put your custom methods here
+    private void keep() {
+
+    }
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/LocalMedia.java b/DaoExample/src-gen/de/greenrobot/daoexample/LocalMedia.java
index 73a5b5df..cf01da7b 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/LocalMedia.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/LocalMedia.java
@@ -1,6 +1,9 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table LOCAL_MEDIA.
  */
@@ -11,6 +14,9 @@
     private String file;
     private Integer size;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public LocalMedia() {
     }
 
@@ -57,4 +63,10 @@ public void setSize(Integer size) {
         this.size = size;
     }
 
+    // KEEP METHODS - put your custom methods here
+    private void keep() {
+
+    }
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/LocalMediaDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/LocalMediaDao.java
index e266fee1..5cbc8e5e 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/LocalMediaDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/LocalMediaDao.java
@@ -10,7 +10,10 @@
 
 import de.greenrobot.daoexample.LocalMedia;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
  * DAO for table LOCAL_MEDIA.
 */
@@ -30,6 +33,10 @@
     };
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public LocalMediaDao(DaoConfig config) {
         super(config);
     }
@@ -130,4 +137,12 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+    // KEEP METHODS - put your custom methods here
+    private void keep() {
+
+    }
+    // KEEP METHODS END
+
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistory.java b/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistory.java
index fbd645fb..7846eb3e 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistory.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistory.java
@@ -1,6 +1,9 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table LOCAL_PLAY_HISTORY.
  */
@@ -13,6 +16,9 @@
     private String lastWatchTime;
     private String localUrl;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public LocalPlayHistory() {
     }
 
@@ -77,4 +83,7 @@ public void setLocalUrl(String localUrl) {
         this.localUrl = localUrl;
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistoryDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistoryDao.java
index 872f716a..d5045168 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistoryDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/LocalPlayHistoryDao.java
@@ -10,7 +10,10 @@
 
 import de.greenrobot.daoexample.LocalPlayHistory;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
  * DAO for table LOCAL_PLAY_HISTORY.
 */
@@ -32,6 +35,10 @@
     };
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public LocalPlayHistoryDao(DaoConfig config) {
         super(config);
     }
@@ -148,4 +155,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
index ed057058..272cd673 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Note.java
@@ -1,6 +1,9 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table NOTE.
  */
@@ -12,6 +15,9 @@
     private String comment;
     private java.util.Date date;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public Note() {
     }
 
@@ -60,4 +66,7 @@ public void setDate(java.util.Date date) {
         this.date = date;
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
index 0fcaceee..e1b75643 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/NoteDao.java
@@ -10,7 +10,10 @@
 
 import de.greenrobot.daoexample.Note;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
  * DAO for table NOTE.
 */
@@ -30,6 +33,10 @@
     };
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public NoteDao(DaoConfig config) {
         super(config);
     }
@@ -126,4 +133,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
index 95ecfb86..2c1de00f 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/Order.java
@@ -3,7 +3,10 @@
 import de.greenrobot.daoexample.DaoSession;
 import de.greenrobot.dao.DaoException;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table ORDERS.
  */
@@ -23,6 +26,9 @@
     private Long customer__resolvedKey;
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public Order() {
     }
 
@@ -118,4 +124,7 @@ public void refresh() {
         myDao.refresh(this);
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
index 2fd9bc6c..265f35bd 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/OrderDao.java
@@ -1,152 +1,159 @@
-package de.greenrobot.daoexample;
-
-import java.util.List;
-import java.util.ArrayList;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteStatement;
-
-import de.greenrobot.dao.AbstractDao;
-import de.greenrobot.dao.Property;
-import de.greenrobot.dao.internal.SqlUtils;
-import de.greenrobot.dao.internal.DaoConfig;
-import de.greenrobot.dao.query.Query;
-import de.greenrobot.dao.query.QueryBuilder;
-
-import de.greenrobot.daoexample.Order;
-
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
-/** 
- * DAO for table ORDERS.
-*/
-public class OrderDao extends AbstractDao<Order, Long> {
-
-    public static final String TABLENAME = "ORDERS";
-
-    /**
-     * Properties of entity Order.<br/>
-     * Can be used for QueryBuilder and for referencing column names.
-    */
-    public static class Properties {
-        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
-        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
-        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
-    };
-
-    private DaoSession daoSession;
-
-    private Query<Order> customer_OrdersQuery;
-
-    public OrderDao(DaoConfig config) {
-        super(config);
-    }
-    
-    public OrderDao(DaoConfig config, DaoSession daoSession) {
-        super(config, daoSession);
-        this.daoSession = daoSession;
-    }
-
-    /** Creates the underlying database table. */
-    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
-        String constraint = ifNotExists? "IF NOT EXISTS ": "";
-        db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
-                "'_id' INTEGER PRIMARY KEY ," + // 0: id
-                "'DATE' INTEGER," + // 1: date
-                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 2: customerId
-    }
-
-    /** Drops the underlying database table. */
-    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
-        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDERS'";
-        db.execSQL(sql);
-    }
-
-    /** @inheritdoc */
-    @Override
-    protected void bindValues(SQLiteStatement stmt, Order entity) {
-        stmt.clearBindings();
- 
-        Long id = entity.getId();
-        if (id != null) {
-            stmt.bindLong(1, id);
-        }
- 
-        java.util.Date date = entity.getDate();
-        if (date != null) {
-            stmt.bindLong(2, date.getTime());
-        }
-        stmt.bindLong(3, entity.getCustomerId());
-    }
-
-    @Override
-    protected void attachEntity(Order entity) {
-        super.attachEntity(entity);
-        entity.__setDaoSession(daoSession);
-    }
-
-    /** @inheritdoc */
-    @Override
-    public Long readKey(Cursor cursor, int offset) {
-        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
-    }    
-
-    /** @inheritdoc */
-    @Override
-    public Order readEntity(Cursor cursor, int offset) {
-        Order entity = new Order( //
-            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
-            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
-            cursor.getLong(offset + 2) // customerId
-        );
-        return entity;
-    }
-     
-    /** @inheritdoc */
-    @Override
-    public void readEntity(Cursor cursor, Order entity, int offset) {
-        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
-        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
-        entity.setCustomerId(cursor.getLong(offset + 2));
-     }
-    
-    /** @inheritdoc */
-    @Override
-    protected Long updateKeyAfterInsert(Order entity, long rowId) {
-        entity.setId(rowId);
-        return rowId;
-    }
-    
-    /** @inheritdoc */
-    @Override
-    public Long getKey(Order entity) {
-        if(entity != null) {
-            return entity.getId();
-        } else {
-            return null;
-        }
-    }
-
-    /** @inheritdoc */
-    @Override    
-    protected boolean isEntityUpdateable() {
-        return true;
-    }
-    
-    /** Internal query to resolve the "orders" to-many relationship of Customer. */
-    public List<Order> _queryCustomer_Orders(long customerId) {
-        synchronized (this) {
-            if (customer_OrdersQuery == null) {
-                QueryBuilder<Order> queryBuilder = queryBuilder();
-                queryBuilder.where(Properties.CustomerId.eq(null));
-                queryBuilder.orderRaw("DATE ASC");
-                customer_OrdersQuery = queryBuilder.build();
-            }
-        }
-        Query<Order> query = customer_OrdersQuery.forCurrentThread();
-        query.setParameter(0, customerId);
-        return query.list();
-    }
-
+package de.greenrobot.daoexample;
+
+import java.util.List;
+import java.util.ArrayList;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
+
+import de.greenrobot.dao.AbstractDao;
+import de.greenrobot.dao.Property;
+import de.greenrobot.dao.internal.SqlUtils;
+import de.greenrobot.dao.internal.DaoConfig;
+import de.greenrobot.dao.query.Query;
+import de.greenrobot.dao.query.QueryBuilder;
+
+import de.greenrobot.daoexample.Order;
+
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
+/** 
+ * DAO for table ORDERS.
+*/
+public class OrderDao extends AbstractDao<Order, Long> {
+
+    public static final String TABLENAME = "ORDERS";
+
+    /**
+     * Properties of entity Order.<br/>
+     * Can be used for QueryBuilder and for referencing column names.
+    */
+    public static class Properties {
+        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
+        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
+        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
+    };
+
+    private DaoSession daoSession;
+
+    private Query<Order> customer_OrdersQuery;
+
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
+    public OrderDao(DaoConfig config) {
+        super(config);
+    }
+    
+    public OrderDao(DaoConfig config, DaoSession daoSession) {
+        super(config, daoSession);
+        this.daoSession = daoSession;
+    }
+
+    /** Creates the underlying database table. */
+    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
+        String constraint = ifNotExists? "IF NOT EXISTS ": "";
+        db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
+                "'_id' INTEGER PRIMARY KEY ," + // 0: id
+                "'DATE' INTEGER," + // 1: date
+                "'CUSTOMER_ID' INTEGER NOT NULL );"); // 2: customerId
+    }
+
+    /** Drops the underlying database table. */
+    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
+        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDERS'";
+        db.execSQL(sql);
+    }
+
+    /** @inheritdoc */
+    @Override
+    protected void bindValues(SQLiteStatement stmt, Order entity) {
+        stmt.clearBindings();
+ 
+        Long id = entity.getId();
+        if (id != null) {
+            stmt.bindLong(1, id);
+        }
+ 
+        java.util.Date date = entity.getDate();
+        if (date != null) {
+            stmt.bindLong(2, date.getTime());
+        }
+        stmt.bindLong(3, entity.getCustomerId());
+    }
+
+    @Override
+    protected void attachEntity(Order entity) {
+        super.attachEntity(entity);
+        entity.__setDaoSession(daoSession);
+    }
+
+    /** @inheritdoc */
+    @Override
+    public Long readKey(Cursor cursor, int offset) {
+        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
+    }    
+
+    /** @inheritdoc */
+    @Override
+    public Order readEntity(Cursor cursor, int offset) {
+        Order entity = new Order( //
+            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
+            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
+            cursor.getLong(offset + 2) // customerId
+        );
+        return entity;
+    }
+     
+    /** @inheritdoc */
+    @Override
+    public void readEntity(Cursor cursor, Order entity, int offset) {
+        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
+        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
+        entity.setCustomerId(cursor.getLong(offset + 2));
+     }
+    
+    /** @inheritdoc */
+    @Override
+    protected Long updateKeyAfterInsert(Order entity, long rowId) {
+        entity.setId(rowId);
+        return rowId;
+    }
+    
+    /** @inheritdoc */
+    @Override
+    public Long getKey(Order entity) {
+        if(entity != null) {
+            return entity.getId();
+        } else {
+            return null;
+        }
+    }
+
+    /** @inheritdoc */
+    @Override    
+    protected boolean isEntityUpdateable() {
+        return true;
+    }
+    
+    /** Internal query to resolve the "orders" to-many relationship of Customer. */
+    public List<Order> _queryCustomer_Orders(long customerId) {
+        synchronized (this) {
+            if (customer_OrdersQuery == null) {
+                QueryBuilder<Order> queryBuilder = queryBuilder();
+                queryBuilder.where(Properties.CustomerId.eq(null));
+                queryBuilder.orderRaw("DATE ASC");
+                customer_OrdersQuery = queryBuilder.build();
+            }
+        }
+        Query<Order> query = customer_OrdersQuery.forCurrentThread();
+        query.setParameter(0, customerId);
+        return query.list();
+    }
+
     private String selectDeep;
 
     protected String getSelectDeep() {
@@ -240,4 +247,9 @@ public Order loadDeep(Long key) {
         return loadDeepAllAndCloseCursor(cursor);
     }
  
-}
+
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
+
+}
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistory.java b/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistory.java
index ab9e4042..7b2a8926 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistory.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistory.java
@@ -1,6 +1,9 @@
 package de.greenrobot.daoexample;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /**
  * Entity mapped to table PLAY_HISTORY.
  */
@@ -27,6 +30,9 @@
     private Integer real_playorder;
     private Integer site;
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
     public PlayHistory() {
     }
 
@@ -217,4 +223,7 @@ public void setSite(Integer site) {
         this.site = site;
     }
 
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
 }
diff --git a/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java b/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java
index 3327695d..8110b468 100644
--- a/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java
+++ b/DaoExample/src-gen/de/greenrobot/daoexample/PlayHistoryDao.java
@@ -10,7 +10,10 @@
 
 import de.greenrobot.daoexample.PlayHistory;
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+// KEEP INCLUDES END
 /** 
  * DAO for table PLAY_HISTORY.
 */
@@ -46,6 +49,10 @@
     };
 
 
+    // KEEP FIELDS - put your custom fields here
+    // KEEP FIELDS END
+
+
     public PlayHistoryDao(DaoConfig config) {
         super(config);
     }
@@ -277,4 +284,9 @@ protected boolean isEntityUpdateable() {
         return true;
     }
     
+
+    // KEEP METHODS - put your custom methods here
+    // KEEP METHODS END
+
+
 }
diff --git a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
index 71fe65ca..c3086306 100644
--- a/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
+++ b/DaoExample/src/de/greenrobot/daoexample/NoteActivity.java
@@ -42,8 +42,7 @@
 
 import de.greenrobot.dao.query.DeleteQuery;
 import de.greenrobot.dao.query.QueryBuilder;
-import de.greenrobot.dao.query.WhereCondition;
-import de.greenrobot.daoexample.DaoMaster.DevOpenHelper;
+import de.greenrobot.daoexample.DaoMaster.CustomOpenHelper;
 import de.greenrobot.daoexample.PlayHistoryDao.Properties;
 
 public class NoteActivity extends ListActivity implements OnClickListener {
@@ -76,7 +75,7 @@ public void onCreate(Bundle savedInstanceState) {
 
         setContentView(R.layout.main);
 
-        DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "notes-db", null);
+        CustomOpenHelper helper = new DaoMaster.CustomOpenHelper(this, "notes-db", null);
         db = helper.getWritableDatabase();
         daoMaster = new DaoMaster(db);
         daoSession = daoMaster.newSession();
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 0b4b0c36..b21ab6a0 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -34,7 +34,8 @@
 public class ExampleDaoGenerator {
 
     public static void main(String[] args) throws Exception {
-        Schema schema = new Schema(1000, "de.greenrobot.daoexample");
+        Schema schema = new Schema(1, "de.greenrobot.daoexample");
+        schema.enableKeepSectionsByDefault();
 
         addNote(schema);
         addCustomerOrder(schema);
diff --git a/DaoGenerator/src-template/dao-master.ftl b/DaoGenerator/src-template/dao-master.ftl
index adaffc48..d7ff30e8 100644
--- a/DaoGenerator/src-template/dao-master.ftl
+++ b/DaoGenerator/src-template/dao-master.ftl
@@ -31,12 +31,25 @@ import de.greenrobot.dao.identityscope.IdentityScopeType;
 import ${entity.javaPackageDao}.${entity.classNameDao};
 </#list>
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+<#if entity.hasKeepSections>
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+<#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
+<#else>
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+</#if>
 /** 
  * Master of DAO (schema version ${schema.version?c}): knows all DAOs.
 */
 public class DaoMaster extends AbstractDaoMaster {
     public static final int SCHEMA_VERSION = ${schema.version?c};
+    
+    <#if entity.hasKeepSections>
+    // KEEP FIELDS - put your custom fields here
+${keepFields!}    // KEEP FIELDS END
+
+</#if>
 
     /** Creates underlying database table using DAOs. */
     public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
@@ -97,5 +110,10 @@ public class DaoMaster extends AbstractDaoMaster {
     public DaoSession newSession(IdentityScopeType type) {
         return new DaoSession(db, type, daoConfigMap);
     }
-    
+
+<#if entity.hasKeepSections>
+    // KEEP METHODS - put your custom methods here
+${keepMethods!}    // KEEP METHODS END
+
+</#if>    
 }
diff --git a/DaoGenerator/src-template/dao-session.ftl b/DaoGenerator/src-template/dao-session.ftl
index e0201a48..bdf58e73 100644
--- a/DaoGenerator/src-template/dao-session.ftl
+++ b/DaoGenerator/src-template/dao-session.ftl
@@ -36,7 +36,14 @@ import ${entity.javaPackage}.${entity.className};
 import ${entity.javaPackageDao}.${entity.classNameDao};
 </#list>
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+<#if entity.hasKeepSections>
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+<#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
+<#else>
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+</#if>
 
 /**
  * {@inheritDoc}
@@ -51,7 +58,13 @@ public class DaoSession extends AbstractDaoSession {
 
 <#list schema.entities as entity>
     private final ${entity.classNameDao} ${entity.classNameDao?uncap_first};
-</#list>        
+</#list> 
+
+<#if entity.hasKeepSections>
+    // KEEP FIELDS - put your custom fields here
+${keepFields!}    // KEEP FIELDS END
+
+</#if>       
 
     public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
             daoConfigMap) {
@@ -83,5 +96,10 @@ public class DaoSession extends AbstractDaoSession {
         return ${entity.classNameDao?uncap_first};
     }
 
-</#list>        
+</#list>   
+<#if entity.hasKeepSections>
+    // KEEP METHODS - put your custom methods here
+${keepMethods!}    // KEEP METHODS END
+
+</#if>     
 }
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 443f74dc..65928b7d 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -57,7 +57,14 @@ import ${entity.javaPackage}.${entity.className};
 import ${entity.javaPackage}.${entity.className}.Builder;
 </#if>
 
-// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
+<#if entity.hasKeepSections>
+// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
+
+// KEEP INCLUDES - put your custom includes here
+<#if keepIncludes?has_content>${keepIncludes!}</#if>// KEEP INCLUDES END
+<#else>
+// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
+</#if>
 /** 
  * DAO for table ${entity.tableName}.
 */
@@ -83,6 +90,12 @@ public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${e
     private Query<${toMany.targetEntity.className}> ${toMany.sourceEntity.className?uncap_first}_${toMany.name?cap_first}Query;
 </#list>
 
+<#if entity.hasKeepSections>
+    // KEEP FIELDS - put your custom fields here
+${keepFields!}    // KEEP FIELDS END
+
+</#if>
+
     public ${entity.classNameDao}(DaoConfig config) {
         super(config);
     }
@@ -299,4 +312,11 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
 <#if entity.toOneRelations?has_content>
     <#include "dao-deep.ftl">
 </#if>
+
+<#if entity.hasKeepSections>
+    // KEEP METHODS - put your custom methods here
+${keepMethods!}    // KEEP METHODS END
+
+</#if>
+
 }
diff --git a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
index 0f9ecdd8..8ee29901 100644
--- a/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
+++ b/DaoGenerator/src/de/greenrobot/daogenerator/DaoGenerator.java
@@ -120,8 +120,11 @@ public void generateAll(Schema schema, String outDir, String outDirTest) throws
                         + "ContentProvider", schema, entity, additionalObjectsForTemplate);
             }
         }
-        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, null);
-        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, null);
+        Entity keepEntity = new Entity(schema, "keepEntity");
+        keepEntity.setHasKeepSections(true);
+        
+        generate(templateDaoMaster, outDirFile, schema.getDefaultJavaPackageDao(), "DaoMaster", schema, keepEntity);
+        generate(templateDaoSession, outDirFile, schema.getDefaultJavaPackageDao(), "DaoSession", schema, keepEntity);
 
         long time = System.currentTimeMillis() - start;
         System.out.println("Processed " + entities.size() + " entities in " + time + "ms");
diff --git "a/\347\256\200\344\273\213/greenDAO\344\273\213\347\273\215.docx" "b/\347\256\200\344\273\213/greenDAO\344\273\213\347\273\215.docx"
new file mode 100644
index 00000000..b067218a
Binary files /dev/null and "b/\347\256\200\344\273\213/greenDAO\344\273\213\347\273\215.docx" differ
diff --git "a/\347\256\200\344\273\213/greenDAO\344\273\213\347\273\215.pptx" "b/\347\256\200\344\273\213/greenDAO\344\273\213\347\273\215.pptx"
new file mode 100644
index 00000000..a1c5b646
Binary files /dev/null and "b/\347\256\200\344\273\213/greenDAO\344\273\213\347\273\215.pptx" differ
