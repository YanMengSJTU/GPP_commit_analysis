diff --git a/DaoExampleGenerator/build.gradle b/DaoExampleGenerator/build.gradle
index 9c7e4223..b997c211 100644
--- a/DaoExampleGenerator/build.gradle
+++ b/DaoExampleGenerator/build.gradle
@@ -13,7 +13,7 @@ repositories {
 }
 
 dependencies {
-    compile('de.greenrobot:greendao-generator:1.3.1')
+    compile('de.greenrobot:greendao-generator:1.3.0-ttbox')
 }
 
 sourceSets {
diff --git a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
index 47ff1cf6..bee2a683 100644
--- a/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
+++ b/DaoExampleGenerator/src/de/greenrobot/daogenerator/gentest/ExampleDaoGenerator.java
@@ -39,23 +39,47 @@ public static void main(String[] args) throws Exception {
         new DaoGenerator().generateAll(schema, "../DaoExample/src-gen");
     }
 
+    private static void implementsSync(Entity entity) {
+//      entity.implementsInterface("eu.ttbox.androgister.domain.VersioningModel");
+      entity.addBooleanProperty("dirty");
+      entity.addBooleanProperty("deleted").notNull();
+  }
     private static void addNote(Schema schema) {
-        Entity note = schema.addEntity("Note");
+        Entity note = schema.addEntity("Note"); 
         note.implementsParceable();
         note.addIdProperty();
         note.addStringProperty("text").notNull();
         note.addStringProperty("comment");
+        
         note.addDateProperty("date");
     }
 
     private static void addCustomerOrder(Schema schema) {
         Entity customer = schema.addEntity("Customer");
+//        customer.implementsParceable();
         customer.addIdProperty();
+        implementsSync(customer);
         customer.addStringProperty("name").notNull();
-
+        customer.addBooleanProperty("booleanProp");
+        customer.addBooleanProperty("booleanPropNotNull").notNull();
+        customer.addFloatProperty("addFloatProperty");
+        customer.addFloatProperty("addFloatPropertyNotNull").notNull();
+        customer.addDoubleProperty("addDoubleProperty");
+        customer.addDoubleProperty("addDoublePropertyNotNull").notNull();
+        customer.addLongProperty("addLongProperty");
+        customer.addLongProperty("addLongPropertyNotNull").notNull();
+        customer.addIntProperty("addIntProperty");
+        customer.addIntProperty("addIntPropertyNotNull").notNull();
+//        customer.addShortProperty("addShortProperty");
+//        customer.addShortProperty("addShortPropertyNotNull").notNull();
+//        customer.addByteArrayProperty("addByteArrayProperty");
+//        customer.addByteArrayProperty("addByteArrayPropertyNotNull").notNull();
+       
+        
         Entity order = schema.addEntity("Order");
         order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
         order.addIdProperty();
+        order.addIntProperty("priceHT");
         Property orderDate = order.addDateProperty("date").getProperty();
         Property customerId = order.addLongProperty("customerId").notNull().getProperty();
         order.addToOne(customer, customerId);
diff --git a/DaoGenerator/build.gradle b/DaoGenerator/build.gradle
index f22900f2..2593ad2d 100644
--- a/DaoGenerator/build.gradle
+++ b/DaoGenerator/build.gradle
@@ -3,7 +3,7 @@ apply plugin: 'maven'
 apply plugin: 'signing'
 
 group = 'de.greenrobot'
-version = '1.3.1'
+version = '1.3.0-ttbox'
 sourceCompatibility = 1.6
 
 def isSnapshot = version.endsWith('-SNAPSHOT')
diff --git a/DaoGenerator/src-template/dao.ftl b/DaoGenerator/src-template/dao.ftl
index 3c6313b1..45499d80 100644
--- a/DaoGenerator/src-template/dao.ftl
+++ b/DaoGenerator/src-template/dao.ftl
@@ -19,6 +19,7 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 -->
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long" } />
 <#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob", "Date": "Long"  } />
+<#assign toContentValueType = {"Boolean":"Boolean", "Byte":"Short", "Short":"Short", "Int":"Integer", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"ByteArray", "Date": "Long"  } />
 package ${entity.javaPackageDao};
 
 import android.content.ContentValues;
@@ -209,9 +210,8 @@ as property>${property.columnName}<#if property_has_next>,</#if></#list>);");
         ${entity.className} entity = new ${entity.className}();
 <#list entity.properties as property>   
         entity.set${property.propertyName?cap_first}(<#if
-   property.propertyType == "Date">  
-      values.getAs${toCursorType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)==null? null: new ${property.javaType}(values.getAs${toCursorType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)) <#else
-   >  values.getAs${toCursorType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)</#if
+   property.propertyType == "Date">values.getAs${toContentValueType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)==null? null: new ${property.javaType}(values.getAs${toContentValueType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)) <#else
+   >values.getAs${toContentValueType[property.propertyType]}(Properties.${property.propertyName?cap_first}.columnName)</#if
    >); 
 </#list>        
         //   attachEntity(entity)
diff --git a/DaoGenerator/src-template/entity.ftl b/DaoGenerator/src-template/entity.ftl
index 08f94327..1ece81b8 100644
--- a/DaoGenerator/src-template/entity.ftl
+++ b/DaoGenerator/src-template/entity.ftl
@@ -18,7 +18,8 @@ along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
 
 -->
 <#assign toBindType = {"Boolean":"Long", "Byte":"Long", "Short":"Long", "Int":"Long", "Long":"Long", "Float":"Double", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
-<#assign toCursorType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
+<#assign toParcelType = {"Boolean":"Short", "Byte":"Short", "Short":"Short", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"Blob" }/>
+<#assign toParcelType = {"Boolean":"Byte", "Byte":"Short", "Short":"Int", "Int":"Int", "Long":"Long", "Float":"Float", "Double":"Double", "String":"String", "ByteArray":"ByteArray" }/>
 <#assign complexTypes = ["String", "ByteArray", "Date"]/>
 package ${entity.javaPackage};
 
@@ -277,48 +278,48 @@ ${keepMethods!}    // KEEP METHODS END
     
 //  @Override
   public void writeToParcel(Parcel dest, int flags) {
-   <#list entity.properties as property>
-   <#if 
-      toCursorType[property.propertyType]??>
-       <#if !property.notNull>
-      dest.writeByte((byte)(${property.propertyName} != null ? 1 : 0));
-      </#if> 
-      dest.write${toCursorType[property.propertyType]}(${property.propertyName});<#elseif 
-      property.propertyType == "Date">
+<#list entity.properties as property>
+   <#if toParcelType[property.propertyType]??>
+      <#if !property.notNull>if (${property.propertyName}!=null) {
+        dest.writeByte((byte)1);
+      </#if><#if  property.propertyType == "Boolean">
+        dest.write${toParcelType[property.propertyType]}((byte)(${property.propertyName}  ? 1 : 0)); <#else
+      > dest.write${toParcelType[property.propertyType]}(${property.propertyName});</#if> 
+      <#if !property.notNull>} else { dest.writeByte((byte)0); }</#if> 
+   <#elseif  property.propertyType == "Date">
       if (${property.propertyName} != null) {
         dest.writeByte((byte)(1));
         dest.writeLong(${property.propertyName}.getTime());
       } else {
          dest.writeByte((byte)(0));
       } <#else>
-      dest.writeParcelable( ${property.propertyName}, flags);
-      </#if> 
-      
+        dest.writeParcelable( ${property.propertyName}, flags);
+      </#if>  
    </#list>
   }
  
   public static final Parcelable.Creator<${entity.className}> CREATOR = new Parcelable.Creator<${entity.className}>() {
         public ${entity.className} createFromParcel(Parcel in) {
             ${entity.className} entity =  new ${entity.className}();
-            <#list entity.properties as property>
-            <#if toCursorType[property.propertyType]?? && property.notNull>
-            entity.${property.propertyName} = in.read${toCursorType[property.propertyType]}();<#elseif 
-            toCursorType[property.propertyType]??>
+ <#list entity.properties as property> 
+    <#if toParcelType[property.propertyType]?? && property.notNull>
+            entity.${property.propertyName} = in.read${toParcelType[property.propertyType]}() <#if  property.propertyType == "Boolean"> == 1 </#if>;<#elseif 
+    toParcelType[property.propertyType]??>
             if (in.readByte() == 1) {
-                 entity.${property.propertyName} = in.read${toCursorType[property.propertyType]}();
+                 entity.${property.propertyName} = in.read${toParcelType[property.propertyType]}() <#if  property.propertyType == "Boolean"> == 1 </#if>;
             } else {
                  entity.${property.propertyName} = null;
             }  <#elseif 
-            property.propertyType == "Date">
+    property.propertyType == "Date">
             if (in.readByte() == 1) {
               entity.${property.propertyName} = new ${property.javaType}(in.readLong());
             } else {
               entity.${property.propertyName} = null;
             } <#else>
             ${property.javaType}.CREATOR.createFromParcel(in);
-            </#if> 
+    </#if> 
  
-             </#list>
+</#list>
             return entity;
         }
 
