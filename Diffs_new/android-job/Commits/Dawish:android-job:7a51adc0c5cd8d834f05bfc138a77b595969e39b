diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
index d6fee00..1261833 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
@@ -10,6 +10,7 @@
 import android.support.annotation.NonNull;
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
+import android.util.Log;
 
 import com.evernote.android.job.Job;
 
@@ -27,6 +28,8 @@
     protected Result onRunJob(@NonNull final Params params) {
         boolean success = new DemoSyncEngine(getContext()).sync();
 
+
+
         PendingIntent pendingIntent = PendingIntent.getActivity(getContext(), 0, new Intent(getContext(), MainActivity.class), 0);
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
@@ -35,6 +38,8 @@ protected Result onRunJob(@NonNull final Params params) {
             getContext().getSystemService(NotificationManager.class).createNotificationChannel(channel);
         }
 
+        Log.d("danxx", "关机/退出了依旧在执行 : "+params.getOnlyId());
+
         Notification notification = new NotificationCompat.Builder(getContext(), TAG)
                 .setContentTitle("ID " + params.getId())
                 .setContentText("Job ran, exact " + params.isExact() + " , periodic " + params.isPeriodic() + ", transient " + params.isTransient())
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 18fe7fa..593adf0 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -207,8 +207,8 @@ private void testSimple() {
         extras.putString("key", "Hello world");
 
         mLastJobId = new JobRequest.Builder(DemoSyncJob.TAG)
-                .setExecutionWindow(23_000L, 24_000L)
-                .setBackoffCriteria(25_000L, JobRequest.BackoffPolicy.LINEAR)
+                .setExecutionWindow(60_000L, 61_000L)
+                .setBackoffCriteria(62_000L, JobRequest.BackoffPolicy.LINEAR)
                 .setOnlyId("123423423:2342:23")
                 .setRequiresCharging(mRequiresCharging.isChecked())
                 .setRequiresDeviceIdle(mRequiresDeviceIdle.isChecked())
diff --git a/library/src/main/java/com/evernote/android/job/JobBootReceiver.java b/library/src/main/java/com/evernote/android/job/JobBootReceiver.java
index 42a9857..a730477 100644
--- a/library/src/main/java/com/evernote/android/job/JobBootReceiver.java
+++ b/library/src/main/java/com/evernote/android/job/JobBootReceiver.java
@@ -28,11 +28,12 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.util.Log;
 
 /**
  * A {@code BroadcastReceiver} rescheduling jobs after a reboot, if the underlying {@link JobApi} can't
  * handle it.
- *
+ *  设备重启后重新启动JobManager开始所有任务的处理
  * @author rwondratschek
  */
 public final class JobBootReceiver extends BroadcastReceiver {
@@ -45,6 +46,7 @@ public void onReceive(Context context, Intent intent) {
          * wasn't registered, yet. Apps / Libraries need to figure out how to solve this themselves.
          */
         try {
+            Log.d("danxx", "JobBootReceiver to create JobManager");
             JobManager.create(context);
         } catch (JobManagerCreateException ignored) {
         }
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index 5905268..ee15bbf 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -17,7 +17,7 @@
  * This service reschedules your jobs in case this should be necessary. Usually rescheduling is necessary
  * after a reboot. If you don't want that your jobs are rescheduled, then you should use a transient job
  * or cancel your job manually.
- *
+ *  在设备重启后重新编排job的开始时间
  * @author rwondratschek
  */
 public final class JobRescheduleService extends JobIntentService {
diff --git a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
index 9b0834a..a2cd53c 100644
--- a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
+++ b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
@@ -52,6 +52,7 @@
 
     @Override
     public boolean onStartJob(final JobParameters params) {
+
         JobConfig.getExecutorService().execute(new Runnable() {
             @Override
             public void run() {
