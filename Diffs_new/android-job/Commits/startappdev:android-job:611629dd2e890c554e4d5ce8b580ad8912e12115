diff --git a/FAQ.md b/FAQ.md
index cf3b289..d1de742 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -229,7 +229,7 @@ After the app was force killed (or swiped away from the recent list on some devi
 
 When the app is being relaunched, this library automatically reschedules pending jobs if necessary. The library also register a [boot completed receiver](https://github.com/evernote/android-job/blob/master/library/src/main/java/com/evernote/android/job/JobBootReceiver.java), so that jobs are rescheduled after a reboot.
 
-Note that only the `AlarmManager` is affected. Jobs relying on the `JobScheduler` or `GcmNetworkManager` still work reliable.
+Note that only the `AlarmManager` is affected. Jobs relying on the `JobScheduler`.
 
 ### Can I run a job in a different process?
 
diff --git a/README.md b/README.md
index 6769f25..ceb20df 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Android-Job
 
-A utility library for Android to run jobs delayed in the background. Depending on the Android version either the `JobScheduler`, `GcmNetworkManager` or `AlarmManager` is getting used. You can find out in [this blog post](https://blog.evernote.com/tech/2015/10/26/unified-job-library-android/) or in [these slides](https://speakerdeck.com/vrallev/scheduling-background-job-on-android-at-the-right-time-1) why you should prefer this library than each separate API. All features from Android Nougat are backward compatible.
+A utility library for Android to run jobs delayed in the background. Depending on the Android version either the `JobScheduler` or `AlarmManager` is getting used. You can find out in [this blog post](https://blog.evernote.com/tech/2015/10/26/unified-job-library-android/) or in [these slides](https://speakerdeck.com/vrallev/scheduling-background-job-on-android-at-the-right-time-1) why you should prefer this library than each separate API. All features from Android Nougat are backward compatible.
 
 ## Download
 
@@ -166,7 +166,7 @@ See [here](FAQ.md).
 
 ## Google Play Services
 
-This library does **not** automatically bundle the Google Play Services, because the dependency is really heavy and not all apps want to include them. That's why you need to add the dependency manually, if you want that the library uses the `GcmNetworkManager` on Android 4.
+This library does **not** automatically bundle the Google Play Services, because the dependency is really heavy and not all apps want to include them. That's why you need to add the dependency manually.
 ```groovy
 dependencies {
     compile "com.google.android.gms:play-services-gcm:latest_version"
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index cd3b72f..4724bbe 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -54,12 +54,12 @@ protected void onCreate(Bundle savedInstanceState) {
         adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         mNetworkTypeSpinner.setAdapter(adapter);
 
-        mEnableGcm.setChecked(mJobManager.getConfig().isGcmApiEnabled());
-        mEnableGcm.setEnabled(JobApi.GCM.isSupported(this));
+        mEnableGcm.setChecked(false);
+        mEnableGcm.setEnabled(false);
         mEnableGcm.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-                mJobManager.getConfig().setGcmApiEnabled(isChecked);
+//                mJobManager.getConfig().setGcmApiEnabled(isChecked);
             }
         });
     }
@@ -100,11 +100,6 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         } else {
             menu.findItem(R.id.action_force_14).setVisible(false);
         }
-        if (JobApi.GCM.isSupported(this)) {
-            menu.findItem(R.id.action_force_gcm).setChecked(false);
-        } else {
-            menu.findItem(R.id.action_force_gcm).setVisible(false);
-        }
 
         switch (mJobManager.getApi()) {
             case V_24:
@@ -119,9 +114,6 @@ public boolean onPrepareOptionsMenu(Menu menu) {
             case V_14:
                 menu.findItem(R.id.action_force_14).setChecked(true);
                 break;
-            case GCM:
-                menu.findItem(R.id.action_force_gcm).setChecked(true);
-                break;
             default:
                 throw new IllegalStateException("not implemented");
         }
@@ -144,9 +136,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
             case R.id.action_force_14:
                 mJobManager.forceApi(JobApi.V_14);
                 return true;
-            case R.id.action_force_gcm:
-                mJobManager.forceApi(JobApi.GCM);
-                return true;
             default:
                 return super.onOptionsItemSelected(item);
         }
diff --git a/demo/src/main/res/menu/activity_main.xml b/demo/src/main/res/menu/activity_main.xml
index 0dcfb3e..72520b0 100644
--- a/demo/src/main/res/menu/activity_main.xml
+++ b/demo/src/main/res/menu/activity_main.xml
@@ -21,9 +21,5 @@
             android:id="@+id/action_force_14"
             android:title="v14"
             app:showAsAction="never"/>
-        <item
-            android:id="@+id/action_force_gcm"
-            android:title="GCM"
-            app:showAsAction="never"/>
     </group>
 </menu>
\ No newline at end of file
diff --git a/library/proguard.txt b/library/proguard.txt
index 92506fb..890c392 100644
--- a/library/proguard.txt
+++ b/library/proguard.txt
@@ -1,5 +1,4 @@
 -dontwarn com.evernote.android.job.gcm.**
--dontwarn com.evernote.android.job.util.GcmAvailableHelper
 
 -keep public class com.evernote.android.job.v21.PlatformJobService
 -keep public class com.evernote.android.job.v14.PlatformAlarmService
diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
index b856e21..0f230ad 100644
--- a/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
@@ -6,7 +6,6 @@
 import android.support.test.filters.LargeTest;
 import android.support.test.runner.AndroidJUnit4;
 
-import com.evernote.android.job.gcm.PlatformGcmService;
 import com.evernote.android.job.util.JobApi;
 import com.evernote.android.job.v14.PlatformAlarmService;
 import com.evernote.android.job.v21.PlatformJobService;
@@ -52,11 +51,6 @@ public void testApi19() throws Exception {
         testOneOff(JobApi.V_19);
     }
 
-    @Test
-    public void testApiGcm() throws Exception {
-        testOneOff(JobApi.GCM, 40, TimeUnit.SECONDS);
-    }
-
     @Test
     public void testApi21() throws Exception {
         testOneOff(JobApi.V_21);
@@ -89,9 +83,6 @@ private void testOneOff(JobApi api, long wait, TimeUnit timeUnit) throws Excepti
             case V_19:
                 mJob = new TestJob(PlatformAlarmService.class);
                 break;
-            case GCM:
-                mJob = new TestJob(PlatformGcmService.class);
-                break;
             case V_21:
             case V_24:
                 mJob = new TestJob(PlatformJobService.class);
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 7962f3e..d4a0bbb 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -42,7 +42,6 @@
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobPreconditions;
 import com.evernote.android.job.util.JobUtil;
-import com.google.android.gms.gcm.GcmNetworkManager;
 
 import net.vrallev.android.cat.CatLog;
 
@@ -52,11 +51,7 @@
 /**
  * Entry point for scheduling jobs. Depending on the platform and SDK version it uses different APIs
  * to schedule jobs. The {@link JobScheduler} is preferred, if the OS is running Lollipop or above.
- * Otherwise it uses the {@link AlarmManager} as fallback. It's also possible to use the
- * {@link GcmNetworkManager}, if the manager can be found in your classpath, the Google Play Services
- * are installed and the service was added in the manifest. Take a look at the
- * <a href="https://github.com/evernote/android-job#using-the-gcmnetworkmanager">README</a> for more
- * help.
+ * Otherwise it uses the {@link AlarmManager} as fallback.
  *
  * <br>
  * <br>
@@ -179,7 +174,7 @@ private JobManager(Context context) {
         mJobExecutor = new JobExecutor();
         mConfig = new Config();
 
-        JobApi api = JobApi.getDefault(mContext, mConfig.isGcmApiEnabled());
+        JobApi api = JobApi.getDefault(mContext);
         if (api == JobApi.V_14 && !api.isSupported(mContext)) {
             throw new JobManagerCreateException("All APIs are disabled, cannot schedule any job");
         }
@@ -227,11 +222,6 @@ public void schedule(@NonNull JobRequest request) {
         boolean periodic = request.isPeriodic();
         boolean flexSupport = periodic && jobApi.isFlexSupport() && request.getFlexMs() < request.getIntervalMs();
 
-        if (jobApi == JobApi.GCM && !mConfig.isGcmApiEnabled()) {
-            // shouldn't happen
-            CAT.w("GCM API disabled, but used nonetheless");
-        }
-
         request.setScheduledAt(System.currentTimeMillis());
         request.setFlexSupport(flexSupport);
         mJobStorage.put(request);
@@ -544,44 +534,6 @@ public void setVerbose(boolean verbose) {
             JobCat.setLogcatEnabled(verbose);
         }
 
-        /**
-         * @return Whether the GCM API is enabled. The API is only used if the required class dependency
-         * is found, the Google Play Services are available and this setting is {@code true}. The default
-         * value is {@code true}.
-         */
-        public boolean isGcmApiEnabled() {
-            return mGcmEnabled;
-        }
-
-        /**
-         * Programmatic switch to disable the GCM API. If {@code false}, then the {@link AlarmManager} will
-         * be used for Android 4 devices in all cases.
-         *
-         * @param enabled Whether the GCM API should be enabled or disabled. Note that the API is only used,
-         *                if the required class dependency is found, the Google Play Services are available
-         *                and this setting is {@code true}. The default value is {@code true}.
-         */
-        public void setGcmApiEnabled(boolean enabled) {
-            if (enabled == mGcmEnabled) {
-                return;
-            }
-
-            mGcmEnabled = enabled;
-            if (enabled) {
-                JobApi defaultApi = JobApi.getDefault(mContext, true);
-                if (!defaultApi.equals(getApi())) {
-                    setJobProxy(defaultApi);
-                    CAT.i("Changed default proxy to %s after enabled the GCM API", defaultApi);
-                }
-            } else {
-                JobApi defaultApi = JobApi.getDefault(mContext, false);
-                if (JobApi.GCM == getApi()) {
-                    setJobProxy(defaultApi);
-                    CAT.i("Changed default proxy to %s after disabling the GCM API", defaultApi);
-                }
-            }
-        }
-
         /**
          * Checks whether a smaller interval and flex are allowed for periodic jobs. That's helpful
          * for testing purposes.
diff --git a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
deleted file mode 100644
index d3cd0b4..0000000
--- a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Copyright 2007-present Evernote Corporation.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.evernote.android.job.gcm;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import com.evernote.android.job.util.JobCat;
-import com.google.android.gms.gcm.GcmNetworkManager;
-import com.google.android.gms.gcm.OneoffTask;
-import com.google.android.gms.gcm.PeriodicTask;
-import com.google.android.gms.gcm.Task;
-import com.evernote.android.job.JobProxy;
-import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.util.JobUtil;
-
-import net.vrallev.android.cat.CatLog;
-
-/**
- * @author rwondratschek
- */
-public class JobProxyGcm implements JobProxy {
-
-    private static final CatLog CAT = new JobCat("JobProxyGcm");
-
-    /*
-     * Requires charging doesn't work reliable. Like the documentation says, the job doesn't run if
-     * not plugged in. However, the job never runs until you schedule a new one although the device is
-     * already plugged in again.
-     */
-
-    private final GcmNetworkManager mGcmNetworkManager;
-
-    public JobProxyGcm(Context context) {
-        mGcmNetworkManager = GcmNetworkManager.getInstance(context);
-    }
-
-    @Override
-    public void plantOneOff(JobRequest request) {
-        long startMs = Common.getStartMs(request);
-        long startSeconds = startMs / 1_000;
-
-        long endMs = Common.getEndMs(request);
-        long endSeconds = Math.max(endMs / 1_000, startSeconds + 1); // endSeconds must be greater than startSeconds
-
-        OneoffTask task = prepareBuilder(new OneoffTask.Builder(), request)
-                .setExecutionWindow(startSeconds, endSeconds)
-                .build();
-
-        mGcmNetworkManager.schedule(task);
-
-        CAT.d("Scheduled OneoffTask, %s, start %s, end %s, reschedule count %d", request, JobUtil.timeToString(startMs),
-                JobUtil.timeToString(endMs), Common.getRescheduleCount(request));
-    }
-
-    @Override
-    public void plantPeriodic(JobRequest request) {
-        PeriodicTask task = prepareBuilder(new PeriodicTask.Builder(), request)
-                .setPeriod(request.getIntervalMs() / 1_000)
-                .setFlex(request.getFlexMs() / 1_000)
-                .build();
-
-        mGcmNetworkManager.schedule(task);
-
-        CAT.d("Scheduled PeriodicTask, %s, interval %s, flex %s", request, JobUtil.timeToString(request.getIntervalMs()),
-                JobUtil.timeToString(request.getFlexMs()));
-    }
-
-    @Override
-    public void plantPeriodicFlexSupport(JobRequest request) {
-        CAT.w("plantPeriodicFlexSupport called although flex is supported");
-
-        long startMs = Common.getStartMsSupportFlex(request);
-        long endMs = Common.getEndMsSupportFlex(request);
-
-        OneoffTask task = prepareBuilder(new OneoffTask.Builder(), request)
-                .setExecutionWindow(startMs / 1_000, endMs / 1_000)
-                .build();
-
-        mGcmNetworkManager.schedule(task);
-
-        CAT.d("Scheduled periodic (flex support), %s, start %s, end %s, flex %s", request, JobUtil.timeToString(startMs),
-                JobUtil.timeToString(endMs), JobUtil.timeToString(request.getFlexMs()));
-    }
-
-    @Override
-    public void cancel(int jobId) {
-        mGcmNetworkManager.cancelTask(createTag(jobId), PlatformGcmService.class);
-    }
-
-    @Override
-    public boolean isPlatformJobScheduled(JobRequest request) {
-        // there is no option to check whether a task is scheduled, assume it is
-        return true;
-    }
-
-    protected <T extends Task.Builder> T prepareBuilder(T builder, JobRequest request) {
-        builder.setTag(createTag(request))
-                .setService(PlatformGcmService.class)
-                .setUpdateCurrent(true)
-                .setRequiredNetwork(convertNetworkType(request.requiredNetworkType()))
-                .setPersisted(request.isPersisted())
-                .setRequiresCharging(request.requiresCharging());
-        return builder;
-    }
-
-    protected String createTag(JobRequest request) {
-        return createTag(request.getJobId());
-    }
-
-    protected String createTag(int jobId) {
-        return String.valueOf(jobId);
-    }
-
-    protected int convertNetworkType(@NonNull JobRequest.NetworkType networkType) {
-        switch (networkType) {
-            case ANY:
-                return Task.NETWORK_STATE_ANY;
-            case CONNECTED:
-                return Task.NETWORK_STATE_CONNECTED;
-            case UNMETERED:
-                return Task.NETWORK_STATE_UNMETERED;
-            case NOT_ROAMING:
-                return Task.NETWORK_STATE_UNMETERED; // use as fallback, NOT_ROAMING not supported
-            default:
-                throw new IllegalStateException("not implemented");
-        }
-    }
-}
diff --git a/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java b/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
deleted file mode 100644
index 936cf9d..0000000
--- a/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright 2007-present Evernote Corporation.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.evernote.android.job.gcm;
-
-import com.evernote.android.job.Job;
-import com.evernote.android.job.JobManager;
-import com.evernote.android.job.JobManagerCreateException;
-import com.evernote.android.job.JobProxy;
-import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.util.JobCat;
-import com.google.android.gms.gcm.GcmNetworkManager;
-import com.google.android.gms.gcm.GcmTaskService;
-import com.google.android.gms.gcm.TaskParams;
-
-import net.vrallev.android.cat.CatLog;
-
-/**
- * @author rwondratschek
- */
-public class PlatformGcmService extends GcmTaskService {
-
-    private static final CatLog CAT = new JobCat("JobRequest");
-
-    @Override
-    public int onRunTask(TaskParams taskParams) {
-        int jobId = Integer.parseInt(taskParams.getTag());
-        JobProxy.Common common = new JobProxy.Common(this, CAT, jobId);
-
-        JobRequest request = common.getPendingRequest(true, true);
-        if (request == null) {
-            return GcmNetworkManager.RESULT_FAILURE;
-        }
-
-        Job.Result result = common.executeJobRequest(request);
-        if (Job.Result.SUCCESS.equals(result)) {
-            return GcmNetworkManager.RESULT_SUCCESS;
-        } else {
-            return GcmNetworkManager.RESULT_FAILURE;
-        }
-    }
-
-    @Override
-    public void onInitializeTasks() {
-        super.onInitializeTasks();
-
-        /*
-         * When the app is being updated, then all jobs are cleared in the GcmNetworkManager. The manager
-         * calls this method to reschedule. Let's initialize the JobManager here, which will reschedule
-         * jobs manually.
-         */
-        try {
-            JobManager.create(getApplicationContext());
-        } catch (JobManagerCreateException ignored) {
-        }
-    }
-}
diff --git a/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java b/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
deleted file mode 100644
index 7d22c73..0000000
--- a/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package com.evernote.android.job.util;
-
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-
-import com.evernote.android.job.gcm.JobProxyGcm;
-import com.evernote.android.job.gcm.PlatformGcmService;
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
-import net.vrallev.android.cat.CatLog;
-
-import java.util.List;
-
-/**
- * @author rwondratschek
- */
-/*package*/ final class GcmAvailableHelper {
-
-    private static final CatLog CAT = new JobCat("GcmAvailableHelper");
-
-    private static final String ACTION_TASK_READY = "com.google.android.gms.gcm.ACTION_TASK_READY";
-    private static final String GCM_PERMISSION = "com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE";
-
-    private static final boolean GCM_IN_CLASSPATH;
-
-    private static int gcmServiceAvailable = -1;
-    private static boolean checkedServiceEnabled;
-
-    static {
-        boolean gcmInClasspath;
-        try {
-            Class.forName("com.google.android.gms.gcm.GcmNetworkManager");
-            gcmInClasspath = true;
-        } catch (Throwable t) {
-            gcmInClasspath = false;
-        }
-        GCM_IN_CLASSPATH = gcmInClasspath;
-    }
-
-    public static boolean isGcmApiSupported(Context context) {
-        try {
-            if (!checkedServiceEnabled) {
-                checkedServiceEnabled = true;
-                setServiceEnabled(context, GCM_IN_CLASSPATH);
-            }
-
-            return GCM_IN_CLASSPATH
-                    && GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(context) == ConnectionResult.SUCCESS
-                    && isGcmServiceRegistered(context) == ConnectionResult.SUCCESS;
-        } catch (Throwable t) {
-            // seeing sometimes a DeadObjectException, return false, we can't do anything in this case
-            // still sometimes seeing a NoClassDefFoundError here
-            CAT.w(t.getMessage());
-            return false;
-        }
-    }
-
-    private static int isGcmServiceRegistered(Context context) {
-        if (gcmServiceAvailable < 0) {
-            synchronized (JobApi.class) {
-                if (gcmServiceAvailable < 0) {
-                    Intent intent = new Intent(context, PlatformGcmService.class);
-                    List<ResolveInfo> resolveInfos = context.getPackageManager().queryIntentServices(intent, 0);
-                    if (!hasPermission(resolveInfos)) {
-                        gcmServiceAvailable = ConnectionResult.SERVICE_MISSING;
-                        return gcmServiceAvailable;
-                    }
-
-                    intent = new Intent(ACTION_TASK_READY);
-                    intent.setPackage(context.getPackageName());
-                    resolveInfos = context.getPackageManager().queryIntentServices(intent, 0);
-                    if (!hasPermission(resolveInfos)) {
-                        gcmServiceAvailable = ConnectionResult.SERVICE_MISSING;
-                        return gcmServiceAvailable;
-                    }
-
-                    gcmServiceAvailable = ConnectionResult.SUCCESS;
-                }
-            }
-        }
-
-        return gcmServiceAvailable;
-    }
-
-    private static boolean hasPermission(List<ResolveInfo> resolveInfos) {
-        if (resolveInfos == null || resolveInfos.isEmpty()) {
-            return false;
-        }
-        for (ResolveInfo info : resolveInfos) {
-            if (info.serviceInfo != null && GCM_PERMISSION.equals(info.serviceInfo.permission) && info.serviceInfo.exported) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    private static void setServiceEnabled(Context context, boolean enabled) {
-        try {
-            PackageManager packageManager = context.getPackageManager();
-
-            // use a string, the class object probably cannot be instantiated
-            String className = JobProxyGcm.class.getPackage().getName() + ".PlatformGcmService";
-            ComponentName component = new ComponentName(context, className);
-
-            int componentEnabled = packageManager.getComponentEnabledSetting(component);
-            switch (componentEnabled) {
-                case PackageManager.COMPONENT_ENABLED_STATE_ENABLED:
-                    if (!enabled) {
-                        packageManager.setComponentEnabledSetting(component, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);
-                        CAT.i("GCM service disabled");
-                    }
-                    break;
-
-                case PackageManager.COMPONENT_ENABLED_STATE_DEFAULT: // default is disable
-                case PackageManager.COMPONENT_ENABLED_STATE_DISABLED:
-                    if (enabled) {
-                        packageManager.setComponentEnabledSetting(component, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);
-                        CAT.i("GCM service enabled");
-                    }
-                    break;
-            }
-
-        } catch (Throwable t) {
-            // just in case, don't let the app crash with each restart
-            CAT.e(t.getMessage());
-        }
-    }
-
-    private GcmAvailableHelper() {
-        // no op
-    }
-}
diff --git a/library/src/main/java/com/evernote/android/job/util/JobApi.java b/library/src/main/java/com/evernote/android/job/util/JobApi.java
index 56cacd0..5c89031 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobApi.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobApi.java
@@ -35,10 +35,8 @@
 import android.os.Build;
 import android.support.annotation.NonNull;
 
-import com.evernote.android.job.JobManager;
 import com.evernote.android.job.JobManagerCreateException;
 import com.evernote.android.job.JobProxy;
-import com.evernote.android.job.gcm.JobProxyGcm;
 import com.evernote.android.job.v14.JobProxy14;
 import com.evernote.android.job.v14.PlatformAlarmReceiver;
 import com.evernote.android.job.v14.PlatformAlarmService;
@@ -46,7 +44,6 @@
 import com.evernote.android.job.v21.JobProxy21;
 import com.evernote.android.job.v21.PlatformJobService;
 import com.evernote.android.job.v24.JobProxy24;
-import com.google.android.gms.gcm.GcmNetworkManager;
 
 import java.util.List;
 
@@ -71,12 +68,7 @@
     /**
      * Uses the {@link AlarmManager} for scheduling jobs.
      */
-    V_14(false, true),
-    /**
-     * Uses the {@link GcmNetworkManager} for scheduling jobs.
-     */
-    GCM(true, false);
-
+    V_14(false, true);
     private static final String JOB_SCHEDULER_PERMISSION = "android.permission.BIND_JOB_SERVICE";
 
     private static volatile boolean forceAllowApi14 = false;
@@ -142,8 +134,6 @@ public boolean isSupported(Context context) {
             case V_14:
                 return forceAllowApi14
                         || (isServiceEnabled(context, PlatformAlarmService.class) && isBroadcastEnabled(context, PlatformAlarmReceiver.class));
-            case GCM:
-                return GcmAvailableHelper.isGcmApiSupported(context);
             default:
                 throw new IllegalStateException("not implemented");
         }
@@ -160,8 +150,6 @@ public JobProxy createProxy(Context context) {
                 return new JobProxy19(context);
             case V_14:
                 return new JobProxy14(context);
-            case GCM:
-                return new JobProxyGcm(context);
             default:
                 throw new IllegalStateException("not implemented");
         }
@@ -221,24 +209,13 @@ private boolean isBroadcastEnabled(@NonNull Context context, @NonNull Class<? ex
         }
     }
 
-    /**
-     * @deprecated Use {@link #getDefault(Context, boolean)} instead.
-     */
-    @SuppressWarnings("unused")
-    @NonNull
-    @Deprecated
-    public static JobApi getDefault(Context context) {
-        return getDefault(context, JobManager.instance().getConfig().isGcmApiEnabled());
-    }
 
     @NonNull
-    public static JobApi getDefault(Context context, boolean gcmEnabled) {
+    public static JobApi getDefault(Context context) {
         if (V_24.isSupported(context)) {
             return V_24;
         } else if (V_21.isSupported(context)) {
             return V_21;
-        } else if (gcmEnabled && GCM.isSupported(context)) {
-            return GCM;
         } else if (V_19.isSupported(context)) {
             return V_19;
         } else {
