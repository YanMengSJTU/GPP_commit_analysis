diff --git a/demo/build.gradle b/demo/build.gradle
index faf7574..c6a1546 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -33,4 +33,5 @@ dependencies {
     compile 'com.android.support:recyclerview-v7:23.0.1'
     compile 'com.android.support:design:23.0.1'
     compile 'com.evernote:android-intent:1.0.1'
+    compile 'net.vrallev.android:android-task:1.0.7'
 }
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 8dbf605..988ce3a 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -15,10 +15,7 @@
             android:name=".activity.MainActivity"
             android:label="@string/app_name"
             android:theme="@style/Theme.Demo.Translucent">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
+
         </activity>
 
         <activity
@@ -29,7 +26,12 @@
         <activity
             android:name=".activity.LoginActivity"
             android:label="@string/label_login"
-            android:theme="@style/Theme.Demo"/>
+            android:theme="@style/Theme.Demo">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
 
         <activity
             android:name=".activity.NotesActivity"
diff --git a/demo/src/main/java/com/evernote/android/demo/DemoApp.java b/demo/src/main/java/com/evernote/android/demo/DemoApp.java
index 70be8a2..b5cc447 100644
--- a/demo/src/main/java/com/evernote/android/demo/DemoApp.java
+++ b/demo/src/main/java/com/evernote/android/demo/DemoApp.java
@@ -67,6 +67,6 @@ public void onCreate() {
                 .build(consumerKey, consumerSecret)
                 .asSingleton();
 
-        registerActivityLifecycleCallbacks(new LoginChecker());
+
     }
 }
diff --git a/demo/src/main/java/com/evernote/android/demo/LoginChecker.java b/demo/src/main/java/com/evernote/android/demo/LoginChecker.java
deleted file mode 100644
index 3b4f4ea..0000000
--- a/demo/src/main/java/com/evernote/android/demo/LoginChecker.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.evernote.android.demo;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.Intent;
-import android.os.Bundle;
-
-import com.evernote.android.demo.activity.LoginActivity;
-import com.evernote.android.demo.activity.MainActivity;
-import com.evernote.client.android.EvernoteOAuthActivity;
-import com.evernote.client.android.EvernoteSession;
-import com.evernote.client.android.login.EvernoteLoginActivity;
-
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * @author rwondratschek
- */
-public class LoginChecker implements Application.ActivityLifecycleCallbacks {
-
-    private static final List<Class<? extends Activity>> IGNORED_ACTIVITIES = Arrays.asList(
-            LoginActivity.class,
-            EvernoteLoginActivity.class,
-            EvernoteOAuthActivity.class
-    );
-
-    private Intent mCachedIntent;
-
-    @Override
-    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
-        if (!EvernoteSession.getInstance().isLoggedIn() && !isIgnored(activity)) {
-            mCachedIntent = activity.getIntent();
-            LoginActivity.launch(activity);
-
-            activity.finish();
-        }
-    }
-
-    @Override
-    public void onActivityStarted(Activity activity) {
-
-    }
-
-    @Override
-    public void onActivityResumed(Activity activity) {
-
-    }
-
-    @Override
-    public void onActivityPaused(Activity activity) {
-        if (activity instanceof LoginActivity && EvernoteSession.getInstance().isLoggedIn()) {
-            if (mCachedIntent != null) {
-                activity.startActivity(mCachedIntent);
-                mCachedIntent = null;
-            } else {
-                activity.startActivity(new Intent(activity, MainActivity.class));
-            }
-        }
-    }
-
-    @Override
-    public void onActivityStopped(Activity activity) {
-
-    }
-
-    @Override
-    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
-
-    }
-
-    @Override
-    public void onActivityDestroyed(Activity activity) {
-
-    }
-
-    private boolean isIgnored(Activity activity) {
-        return IGNORED_ACTIVITIES.contains(activity.getClass());
-    }
-}
diff --git a/demo/src/main/java/com/evernote/android/demo/activity/LoginActivity.java b/demo/src/main/java/com/evernote/android/demo/activity/LoginActivity.java
index 7a30cc7..14a6f76 100644
--- a/demo/src/main/java/com/evernote/android/demo/activity/LoginActivity.java
+++ b/demo/src/main/java/com/evernote/android/demo/activity/LoginActivity.java
@@ -10,12 +10,15 @@
 
 import com.evernote.android.demo.R;
 import com.evernote.client.android.EvernoteSession;
-import com.evernote.client.android.login.EvernoteLoginFragment;
+import com.evernote.edam.error.EDAMSystemException;
+import com.evernote.edam.error.EDAMUserException;
+import com.evernote.edam.type.User;
+import com.evernote.thrift.TException;
 
 /**
  * @author rwondratschek
  */
-public class LoginActivity extends AppCompatActivity implements EvernoteLoginFragment.ResultCallback {
+public class LoginActivity extends AppCompatActivity {
 
     public static void launch(Activity activity) {
         activity.startActivity(new Intent(activity, LoginActivity.class));
@@ -45,11 +48,30 @@ public void onClick(View v) {
     }
 
     @Override
-    public void onLoginFinished(boolean successful) {
-        if (successful) {
-            finish();
-        } else {
-            mButton.setEnabled(true);
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch (requestCode) {
+            case EvernoteSession.REQUEST_CODE_LOGIN:
+                EvernoteSession.getInstance().finishAuthorization(this, resultCode, data);
+                getUserInfo();
+                break;
+
+            default:
+                super.onActivityResult(requestCode, resultCode, data);
+                break;
+        }
+    }
+
+    public void getUserInfo() {
+        try {
+            User user = EvernoteSession.getInstance().getEvernoteClientFactory().getUserStoreClient().getUser();
+            String name = user.getName();
+            String email = user.getEmail();
+        } catch (EDAMUserException e) {
+            e.printStackTrace();
+        } catch (EDAMSystemException e) {
+            e.printStackTrace();
+        } catch (TException e) {
+            e.printStackTrace();
         }
     }
 }
diff --git a/library/build.gradle b/library/build.gradle
index 9dc857a..294aa8e 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -5,7 +5,7 @@ dependencies {
     compile 'com.android.support:support-v4:23.0.1'
     compile 'com.evernote:evernote-api:1.25.1'
     compile 'org.scribe:scribe:1.3.7'
-    compile 'net.vrallev.android:android-task:1.0.7'
+    //compile 'net.vrallev.android:android-task:1.0.7'
     compile 'com.squareup.okhttp:okhttp:2.4.0'
     testCompile 'junit:junit:4.12'
     testCompile 'org.assertj:assertj-core:1.7.1'
diff --git a/library/src/main/java/com/evernote/client/android/EvernoteSession.java b/library/src/main/java/com/evernote/client/android/EvernoteSession.java
index 259a23a..2831f95 100644
--- a/library/src/main/java/com/evernote/client/android/EvernoteSession.java
+++ b/library/src/main/java/com/evernote/client/android/EvernoteSession.java
@@ -35,8 +35,6 @@
 import com.evernote.client.android.asyncclient.EvernoteClientFactory;
 import com.evernote.client.android.helper.Cat;
 import com.evernote.client.android.helper.EvernotePreconditions;
-import com.evernote.client.android.login.EvernoteLoginActivity;
-import com.evernote.client.android.login.EvernoteLoginFragment;
 
 import java.io.File;
 import java.util.Locale;
@@ -150,6 +148,7 @@ public static EvernoteSession getInstance(Context ctx,
     private boolean mSupportAppLinkedNotebooks;
     private boolean mForceAuthenticationInThirdPartyApp;
     private Locale mLocale;
+    private EvernoteOAuthHelper mEvernoteOAuthHelper;
 
     private EvernoteClientFactory.Builder mEvernoteClientFactoryBuilder;
     private ThreadLocal<EvernoteClientFactory> mFactoryThreadLocal;
@@ -248,43 +247,18 @@ public AuthenticationResult getAuthenticationResult() {
     }
 
     /**
-     * Recommended approach to authenticate the user. If the main Evernote app is installed and up to date,
-     * the app is launched and authenticates the user. Otherwise the old OAuth process is launched and
-     * the user needs to enter his credentials.
-     *
-     * <p/>
-     *
-     * Your {@link FragmentActivity} should implement {@link EvernoteLoginFragment.ResultCallback} to receive
-     * the authentication result. Alternatively you can extend {@link EvernoteLoginFragment} and override
-     * {@link EvernoteLoginFragment#onLoginFinished(boolean)}.
-     *
-     * @param activity The {@link FragmentActivity} holding the progress dialog.
-     */
-    public void authenticate(FragmentActivity activity) {
-        authenticate(activity, EvernoteLoginFragment.create(mConsumerKey, mConsumerSecret, mSupportAppLinkedNotebooks, mLocale));
-    }
-
-    /**
-     * @see EvernoteSession#authenticate(FragmentActivity)
-     */
-    public void authenticate(FragmentActivity activity, EvernoteLoginFragment fragment) {
-        fragment.show(activity.getSupportFragmentManager(), EvernoteLoginFragment.TAG);
-    }
-
-    /**
-     * Similar to {@link EvernoteSession#authenticate(FragmentActivity)}, but instead of opening a dialog
-     * this method launches a separate {@link Activity}.
-     *
-     * <p/>
-     *
      * The calling {@code activity} should override {@link Activity#onActivityResult(int, int, android.content.Intent)}. The {@code requestCode}
      * is {@link EvernoteSession#REQUEST_CODE_LOGIN}. The {@code resultCode} is either {@link Activity#RESULT_OK} or
      * {@link Activity#RESULT_CANCELED}.
      *
-     * @param activity The {@link Activity} launching the {@link EvernoteLoginActivity}.
+     * @param activity The {@link Activity} launching the {@link EvernoteOAuthActivity}.
      */
     public void authenticate(Activity activity) {
-        activity.startActivityForResult(EvernoteLoginActivity.createIntent(activity, mConsumerKey, mConsumerSecret, mSupportAppLinkedNotebooks, mLocale), REQUEST_CODE_LOGIN);
+        activity.startActivityForResult(mEvernoteOAuthHelper.startAuthorization(activity), REQUEST_CODE_LOGIN);
+    }
+
+    public void finishAuthorization(Activity activity, int resultCode, Intent data) {
+        mEvernoteOAuthHelper.finishAuthorization(activity, resultCode, data);
     }
 
     /**
@@ -522,6 +496,12 @@ private EvernoteSession build(EvernoteSession session) {
             session.mClientFactory = new ClientFactory(mUserAgent, mMessageCacheDir);
             session.mEvernoteService = mEvernoteService;
             session.mForceAuthenticationInThirdPartyApp = mForceAuthenticationInThirdPartyApp;
+
+            // create oauth helper
+            session.mEvernoteOAuthHelper = new EvernoteOAuthHelper(session, session.mConsumerKey,
+                    session.mConsumerSecret, session.mSupportAppLinkedNotebooks,
+                    session.mLocale);
+
             return session;
         }
     }
diff --git a/library/src/main/java/com/evernote/client/android/EvernoteUtil.java b/library/src/main/java/com/evernote/client/android/EvernoteUtil.java
index 6e33f47..4a6d230 100644
--- a/library/src/main/java/com/evernote/client/android/EvernoteUtil.java
+++ b/library/src/main/java/com/evernote/client/android/EvernoteUtil.java
@@ -277,12 +277,15 @@ public static EvernoteInstallStatus getEvernoteInstallStatus(Context context, St
     public static Intent createAuthorizationIntent(Context context, String authorizationUrl, boolean forceThirdPartyApp) {
         Intent intent;
 
+        /* TODO: need to enable authorization from app
         if (!forceThirdPartyApp && EvernoteInstallStatus.INSTALLED.equals(getEvernoteInstallStatus(context, ACTION_AUTHORIZE))) {
             intent = new Intent(ACTION_AUTHORIZE);
             intent.setPackage(PACKAGE_NAME);
         } else {
             intent = new Intent(context, EvernoteOAuthActivity.class);
-        }
+        }*/
+
+        intent = new Intent(context, EvernoteOAuthActivity.class);
 
         intent.putExtra(EXTRA_AUTHORIZATION_URL, authorizationUrl);
         return intent;
diff --git a/library/src/main/java/com/evernote/client/android/login/EvernoteLoginActivity.java b/library/src/main/java/com/evernote/client/android/login/EvernoteLoginActivity.java
deleted file mode 100644
index 22b1a48..0000000
--- a/library/src/main/java/com/evernote/client/android/login/EvernoteLoginActivity.java
+++ /dev/null
@@ -1,171 +0,0 @@
-package com.evernote.client.android.login;
-
-import android.app.Activity;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.view.View;
-import android.widget.Button;
-
-import com.evernote.androidsdk.R;
-import com.evernote.client.android.EvernoteOAuthHelper;
-import com.evernote.client.android.EvernoteSession;
-
-import net.vrallev.android.task.TaskExecutor;
-import net.vrallev.android.task.TaskResult;
-
-import java.util.Locale;
-
-/**
- * Used if you call {@link EvernoteSession#authenticate(Activity)}. You shouldn't need interact
- * with this class directly.
- *
- * @author rwondratschek
- */
-public class EvernoteLoginActivity extends Activity implements EvernoteLoginTask.LoginTaskCallback {
-
-    private static final String EXTRA_CONSUMER_KEY = "EXTRA_CONSUMER_KEY";
-    private static final String EXTRA_CONSUMER_SECRET = "EXTRA_CONSUMER_SECRET";
-    private static final String EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS = "EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS";
-    private static final String EXTRA_LOCALE = "EXTRA_LOCALE";
-
-    private static final String KEY_TASK = "KEY_TASK";
-    private static final String KEY_RESULT_POSTED = "KEY_RESULT_POSTED";
-
-    public static Intent createIntent(Context context, String consumerKey, String consumerSecret, boolean supportAppLinkedNotebooks, Locale locale) {
-        Intent intent = new Intent(context, EvernoteLoginActivity.class);
-        intent.putExtra(EXTRA_CONSUMER_KEY, consumerKey);
-        intent.putExtra(EXTRA_CONSUMER_SECRET, consumerSecret);
-        intent.putExtra(EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS, supportAppLinkedNotebooks);
-        intent.putExtra(EXTRA_LOCALE, locale);
-        return intent;
-    }
-
-    private int mTaskKey;
-    private boolean mResultPosted;
-    private ProgressDialog mProgressDialog;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (savedInstanceState == null) {
-            Bundle args = getIntent().getExtras();
-            EvernoteOAuthHelper helper = new EvernoteOAuthHelper(EvernoteSession.getInstance(), args.getString(EXTRA_CONSUMER_KEY),
-                    args.getString(EXTRA_CONSUMER_SECRET), args.getBoolean(EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS, true),
-                    (Locale) args.getSerializable(EXTRA_LOCALE));
-
-            mTaskKey = TaskExecutor.getInstance().execute(new EvernoteLoginTask(helper, false), this);
-
-        } else {
-            mTaskKey = savedInstanceState.getInt(KEY_TASK, -1);
-            mResultPosted = savedInstanceState.getBoolean(KEY_RESULT_POSTED, false);
-        }
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        if (mProgressDialog == null || !mProgressDialog.isShowing()) {
-            showDialog();
-        }
-    }
-
-    @Override
-    protected void onStop() {
-        mProgressDialog.dismiss();
-        mProgressDialog = null;
-        super.onStop();
-    }
-
-    @Override
-    protected void onSaveInstanceState(@NonNull Bundle outState) {
-        super.onSaveInstanceState(outState);
-        outState.putInt(KEY_TASK, mTaskKey);
-        outState.putBoolean(KEY_RESULT_POSTED, mResultPosted);
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode == EvernoteLoginTask.REQUEST_AUTH || requestCode == EvernoteLoginTask.REQUEST_PROFILE_NAME) {
-            EvernoteLoginTask task = (EvernoteLoginTask) TaskExecutor.getInstance().getTask(mTaskKey);
-            if (task != null) {
-                task.onActivityResult(resultCode, data);
-            }
-
-        } else {
-            super.onActivityResult(requestCode, resultCode, data);
-        }
-    }
-
-    @SuppressWarnings("unused")
-    @TaskResult
-    public final void onResult(Boolean result, EvernoteLoginTask task) {
-        if (mResultPosted || (task != null && task.getKey() != mTaskKey)) {
-            return;
-        }
-
-        mResultPosted = true;
-
-        setResult(result ? RESULT_OK : RESULT_CANCELED);
-        finish();
-    }
-
-    protected void showDialog() {
-        DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                EvernoteLoginTask task = (EvernoteLoginTask) TaskExecutor.getInstance().getTask(mTaskKey);
-                if (task != null) {
-                    task.cancel();
-                }
-
-                onResult(false, task);
-            }
-        };
-
-        mProgressDialog = new ProgressDialog(this);
-        mProgressDialog.setIndeterminate(true);
-        mProgressDialog.setMessage(getString(R.string.esdk_loading));
-        mProgressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(android.R.string.cancel), onClickListener);
-        mProgressDialog.setCancelable(false);
-
-        mProgressDialog.show();
-    }
-
-    @Override
-    public void show(final String bootstrapScreenName) {
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                Button button = mProgressDialog.getButton(DialogInterface.BUTTON_POSITIVE);
-
-                if (!TextUtils.isEmpty(bootstrapScreenName)) {
-                    button.setText(getString(R.string.esdk_switch_to, bootstrapScreenName));
-                    button.setVisibility(View.VISIBLE);
-                    button.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View v) {
-                            switchBootstrapProfile();
-                        }
-                    });
-
-                } else {
-                    button.setVisibility(View.GONE);
-                    button.setOnClickListener(null);
-                }
-            }
-        });
-    }
-
-    protected void switchBootstrapProfile() {
-        EvernoteLoginTask task = (EvernoteLoginTask) TaskExecutor.getInstance().getTask(mTaskKey);
-        if (task != null) {
-            task.switchBootstrapProfile();
-        }
-    }
-}
diff --git a/library/src/main/java/com/evernote/client/android/login/EvernoteLoginFragment.java b/library/src/main/java/com/evernote/client/android/login/EvernoteLoginFragment.java
deleted file mode 100644
index e8c723d..0000000
--- a/library/src/main/java/com/evernote/client/android/login/EvernoteLoginFragment.java
+++ /dev/null
@@ -1,196 +0,0 @@
-package com.evernote.client.android.login;
-
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.FragmentActivity;
-import android.text.TextUtils;
-import android.view.View;
-import android.widget.Button;
-
-import com.evernote.androidsdk.R;
-import com.evernote.client.android.EvernoteOAuthHelper;
-import com.evernote.client.android.EvernoteSession;
-
-import net.vrallev.android.task.TaskExecutor;
-import net.vrallev.android.task.TaskResult;
-
-import java.util.Locale;
-
-/**
- * Used if you call {@link EvernoteSession#authenticate(FragmentActivity)}. This class is the
- * recommended authentication process.
- *
- * <p/>
- *
- * You can either extend this class and override {@link EvernoteLoginFragment#onLoginFinished(boolean)} method
- * to get notified about the authentication result or the parent {@link FragmentActivity} can implement the
- * {@link ResultCallback} interface to receive the result.
- *
- * @author rwondratschek
- */
-public class EvernoteLoginFragment extends DialogFragment implements EvernoteLoginTask.LoginTaskCallback {
-
-    public static final String TAG = "EvernoteDialogFragment";
-
-    private static final String ARG_CONSUMER_KEY = "consumerKey";
-    private static final String ARG_CONSUMER_SECRET = "consumerSecret";
-    private static final String ARG_SUPPORT_APP_LINKED_NOTEBOOKS = "supportAppLinkedNotebooks";
-    private static final String ARG_LOCALE = "ARG_LOCALE";
-
-    private static final String KEY_TASK = "KEY_TASK";
-    private static final String KEY_RESULT_POSTED = "KEY_RESULT_POSTED";
-
-    public static EvernoteLoginFragment create(String consumerKey, String consumerSecret, boolean supportAppLinkedNotebooks, Locale locale) {
-        return create(EvernoteLoginFragment.class, consumerKey, consumerSecret, supportAppLinkedNotebooks, locale);
-    }
-
-    public static <T extends EvernoteLoginFragment> T create(Class<T> subClass, String consumerKey, String consumerSecret, boolean supportAppLinkedNotebooks, Locale locale) {
-        T fragment;
-        try {
-            fragment = subClass.newInstance();
-        } catch (Exception e) {
-            throw new IllegalArgumentException(e);
-        }
-
-        Bundle args = new Bundle();
-        args.putString(ARG_CONSUMER_KEY, consumerKey);
-        args.putString(ARG_CONSUMER_SECRET, consumerSecret);
-        args.putBoolean(ARG_SUPPORT_APP_LINKED_NOTEBOOKS, supportAppLinkedNotebooks);
-        args.putSerializable(ARG_LOCALE, locale);
-        fragment.setArguments(args);
-
-        return fragment;
-    }
-
-    private int mTaskKey = -1;
-    private boolean mResultPosted;
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-
-        if (savedInstanceState == null) {
-            Bundle args = getArguments();
-
-            EvernoteOAuthHelper helper = new EvernoteOAuthHelper(EvernoteSession.getInstance(), args.getString(ARG_CONSUMER_KEY),
-                    args.getString(ARG_CONSUMER_SECRET), args.getBoolean(ARG_SUPPORT_APP_LINKED_NOTEBOOKS, true),
-                    (Locale) args.getSerializable(ARG_LOCALE));
-
-            mTaskKey = TaskExecutor.getInstance().execute(new EvernoteLoginTask(helper, true), this);
-
-        } else {
-            mTaskKey = savedInstanceState.getInt(KEY_TASK, -1);
-            mResultPosted = savedInstanceState.getBoolean(KEY_RESULT_POSTED, false);
-        }
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        setCancelable(false);
-
-        DialogInterface.OnClickListener onClickListener = new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                EvernoteLoginTask task = (EvernoteLoginTask) TaskExecutor.getInstance().getTask(mTaskKey);
-                if (task != null) {
-                    task.cancel();
-                }
-                onResult(false, task);
-            }
-        };
-
-        ProgressDialog progressDialog = new ProgressDialog(getActivity());
-        progressDialog.setIndeterminate(true);
-        progressDialog.setMessage(getString(R.string.esdk_loading));
-        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(android.R.string.cancel), onClickListener);
-        progressDialog.setCancelable(isCancelable());
-
-        return progressDialog;
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        outState.putInt(KEY_TASK, mTaskKey);
-        outState.putBoolean(KEY_RESULT_POSTED, mResultPosted);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode == EvernoteLoginTask.REQUEST_AUTH || requestCode == EvernoteLoginTask.REQUEST_PROFILE_NAME) {
-            EvernoteLoginTask task = (EvernoteLoginTask) TaskExecutor.getInstance().getTask(mTaskKey);
-            if (task != null) {
-                task.onActivityResult(resultCode, data);
-            }
-
-        } else {
-            super.onActivityResult(requestCode, resultCode, data);
-        }
-    }
-
-    @SuppressWarnings("unused")
-    @TaskResult
-    public final synchronized void onResult(Boolean result, EvernoteLoginTask task) {
-        if (mResultPosted || (task != null && task.getKey() != mTaskKey)) {
-            return;
-        }
-
-        mResultPosted = true;
-
-        dismiss();
-
-        FragmentActivity activity = getActivity();
-        if (activity instanceof ResultCallback) {
-            ((ResultCallback) activity).onLoginFinished(result);
-        } else {
-            onLoginFinished(result);
-        }
-    }
-
-    protected void onLoginFinished(@SuppressWarnings("UnusedParameters") boolean success) {
-        // override me
-    }
-
-    @Override
-    public void show(final String bootstrapScreenName) {
-        getActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                ProgressDialog dialog = (ProgressDialog) getDialog();
-                Button button = dialog.getButton(DialogInterface.BUTTON_POSITIVE);
-
-                if (!TextUtils.isEmpty(bootstrapScreenName)) {
-                    button.setText(getString(R.string.esdk_switch_to, bootstrapScreenName));
-                    button.setVisibility(View.VISIBLE);
-                    button.setOnClickListener(new View.OnClickListener() {
-                        @Override
-                        public void onClick(View v) {
-                            switchBootstrapProfile();
-                        }
-                    });
-
-                } else {
-                    button.setVisibility(View.GONE);
-                    button.setOnClickListener(null);
-                }
-            }
-        });
-    }
-
-    protected void switchBootstrapProfile() {
-        EvernoteLoginTask task = (EvernoteLoginTask) TaskExecutor.getInstance().getTask(mTaskKey);
-        if (task != null) {
-            task.switchBootstrapProfile();
-        }
-    }
-
-    public interface ResultCallback {
-        void onLoginFinished(boolean successful);
-    }
-}
diff --git a/library/src/main/java/com/evernote/client/android/login/EvernoteLoginTask.java b/library/src/main/java/com/evernote/client/android/login/EvernoteLoginTask.java
deleted file mode 100644
index c3e3073..0000000
--- a/library/src/main/java/com/evernote/client/android/login/EvernoteLoginTask.java
+++ /dev/null
@@ -1,270 +0,0 @@
-package com.evernote.client.android.login;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-
-import com.evernote.client.android.EvernoteOAuthHelper;
-import com.evernote.client.android.EvernoteSession;
-import com.evernote.client.android.EvernoteUtil;
-import com.evernote.client.android.helper.Cat;
-import com.evernote.edam.userstore.BootstrapProfile;
-
-import net.vrallev.android.task.Task;
-
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-/**
- * @author rwondratschek
- */
-/*package*/ class EvernoteLoginTask extends Task<Boolean> {
-
-    private static final Cat CAT = new Cat("EvernoteLoginTask");
-
-    public static final int REQUEST_AUTH = 858;
-    public static final int REQUEST_PROFILE_NAME = 859;
-
-    private final EvernoteOAuthHelper mOAuthHelper;
-    private List<BootstrapProfile> mBootstrapProfiles;
-
-    private BootstrapProfile mBootstrapProfile;
-    private int mBootstrapIndex;
-
-    private CountDownLatch mBootstrapCountDownLatch;
-    private CountDownLatch mResultCountDownLatch;
-
-    private int mResultCode;
-    private Intent mData;
-
-    private final boolean mIsFragment;
-
-    public EvernoteLoginTask(EvernoteOAuthHelper helper, boolean isFragment) {
-        mOAuthHelper = helper;
-        mIsFragment = isFragment;
-    }
-
-    @Override
-    public Boolean execute() {
-        boolean intentFired = startAuthorization();
-        if (!intentFired) {
-            return false;
-        }
-
-        if (!canContinue()) {
-            return false;
-        }
-
-        mResultCountDownLatch = new CountDownLatch(1);
-        try {
-            mResultCountDownLatch.await();
-        } catch (InterruptedException e) {
-            return false;
-        }
-
-        return finishAuthorization();
-    }
-
-    public void switchBootstrapProfile() {
-        mBootstrapIndex = (mBootstrapIndex + 1) % mBootstrapProfiles.size();
-        mBootstrapProfile = mBootstrapProfiles.get(mBootstrapIndex);
-
-        if (mBootstrapCountDownLatch != null) {
-            mBootstrapCountDownLatch.countDown();
-        }
-    }
-
-    public void onActivityResult(int resultCode, Intent data) {
-        if (mResultCountDownLatch != null) {
-            mResultCountDownLatch.countDown();
-        }
-
-        mResultCode = resultCode;
-        mData = data;
-    }
-
-    private boolean startAuthorization() {
-        if (!canContinue()) {
-            return false;
-        }
-
-        try {
-            mBootstrapProfiles = mOAuthHelper.fetchBootstrapProfiles();
-            mBootstrapProfile = mOAuthHelper.getDefaultBootstrapProfile(mBootstrapProfiles);
-
-            if (!canContinue()) {
-                return false;
-            }
-
-            if (mBootstrapProfiles != null && mBootstrapProfiles.size() > 1) {
-                String mainAppBootstrapName = getBootstrapProfileNameFromMainApp();
-                if (!canContinue()) {
-                    return false;
-                }
-
-                boolean showBootstrapOption = true;
-
-                if (!TextUtils.isEmpty(mainAppBootstrapName)) {
-                    for (BootstrapProfile bootstrapProfile : mBootstrapProfiles) {
-                        if (mainAppBootstrapName.equals(bootstrapProfile.getName())) {
-                            mBootstrapProfile = bootstrapProfile;
-                            showBootstrapOption = false;
-                            break;
-                        }
-                    }
-                }
-
-                if (showBootstrapOption) {
-                    for (int i = 0; i < mBootstrapProfiles.size(); i++) {
-                        if (mBootstrapProfile.equals(mBootstrapProfiles.get(i))) {
-                            mBootstrapIndex = i;
-                            break;
-                        }
-                    }
-
-                    // waits to give user option to change bootstrap profile
-                    showBootstrapOption();
-                }
-            }
-
-        } catch (Exception e) {
-            CAT.e(e);
-        }
-
-        if (mBootstrapProfile != null) {
-            mOAuthHelper.setBootstrapProfile(mBootstrapProfile);
-        }
-
-        if (!canContinue()) {
-            return false;
-        }
-
-        Intent intent = mOAuthHelper.startAuthorization(getActivity());
-
-        if (!canContinue() || intent == null) {
-            return false;
-        }
-
-        LoginTaskCallback callback = getLoginTaskCallback();
-        if (callback != null) {
-            callback.startActivityForResult(intent, REQUEST_AUTH);
-            return true;
-        }
-
-        return false;
-    }
-
-    private boolean finishAuthorization() {
-        return canContinue() && mOAuthHelper.finishAuthorization(getActivity(), mResultCode, mData);
-    }
-
-    private boolean canContinue() {
-        return !isCancelled() && getActivity() != null;
-    }
-
-    private LoginTaskCallback getLoginTaskCallback() {
-        if (mIsFragment) {
-            Fragment fragment = getFragment();
-            if (fragment instanceof LoginTaskCallback) {
-                return (LoginTaskCallback) fragment;
-            } else {
-                return null;
-            }
-
-        } else {
-            Activity activity = getActivity();
-            if (activity instanceof LoginTaskCallback) {
-                return (LoginTaskCallback) activity;
-            } else {
-                return null;
-            }
-        }
-    }
-
-    private void showBootstrapOption() {
-        LoginTaskCallback loginTaskCallback = getLoginTaskCallback();
-        if (loginTaskCallback == null) {
-            return;
-        }
-
-        loginTaskCallback.show(getScreenName(getNextBootstrapProfile()));
-        //noinspection UnusedAssignment
-        loginTaskCallback = null; // free reference
-
-        mBootstrapCountDownLatch = new CountDownLatch(1);
-        try {
-            if (mBootstrapCountDownLatch.await(3, TimeUnit.SECONDS)) {
-                // user changed bootstrap profile, give him another chance to change it for 3 seconds
-                showBootstrapOption();
-
-            } else {
-                // hide button
-                loginTaskCallback = getLoginTaskCallback();
-                if (loginTaskCallback != null) {
-                    loginTaskCallback.show(null);
-                }
-            }
-
-        } catch (InterruptedException e) {
-            CAT.e(e);
-        }
-    }
-
-    private BootstrapProfile getNextBootstrapProfile() {
-        int nextIndex = (mBootstrapIndex + 1) % mBootstrapProfiles.size();
-        return mBootstrapProfiles.get(nextIndex);
-    }
-
-    private String getScreenName(BootstrapProfile profile) {
-        if (EvernoteOAuthHelper.CHINA_PROFILE_NAME.equals(profile.getName())) {
-            return EvernoteSession.SCREEN_NAME_YXBIJI;
-
-        } else if (EvernoteSession.HOST_PRODUCTION.contains(profile.getSettings().getServiceHost())) {
-            return EvernoteSession.SCREEN_NAME_INTERNATIONAL;
-
-        } else {
-            return profile.getName();
-        }
-    }
-
-    private String getBootstrapProfileNameFromMainApp() {
-        Activity activity = getActivity();
-        if (activity == null) {
-            return null;
-        }
-
-
-        LoginTaskCallback callback = getLoginTaskCallback();
-        if (callback == null) {
-            return null;
-        }
-
-        Intent intent = EvernoteUtil.createGetBootstrapProfileNameIntent(activity, EvernoteSession.getInstance());
-        if (intent == null) {
-            return null;
-        }
-
-        callback.startActivityForResult(intent, REQUEST_PROFILE_NAME);
-
-        mResultCountDownLatch = new CountDownLatch(1);
-        try {
-            mResultCountDownLatch.await(3, TimeUnit.SECONDS);
-        } catch (InterruptedException e) {
-            return null;
-        }
-
-        if (mData == null) {
-            return null;
-        }
-
-        return mData.getStringExtra(EvernoteUtil.EXTRA_BOOTSTRAP_PROFILE_NAME);
-    }
-
-    public interface LoginTaskCallback {
-        void startActivityForResult(Intent intent, int requestCode);
-
-        void show(String bootstrapScreenName);
-    }
-}
