diff --git a/library/src/com/evernote/client/oauth/android/EvernoteSession.java b/library/src/com/evernote/client/oauth/android/EvernoteSession.java
index 4111d0e..798b325 100644
--- a/library/src/com/evernote/client/oauth/android/EvernoteSession.java
+++ b/library/src/com/evernote/client/oauth/android/EvernoteSession.java
@@ -25,6 +25,9 @@
  */
 package com.evernote.client.oauth.android;
 
+import java.io.File;
+import java.util.Locale;
+
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
@@ -45,9 +48,6 @@
 import com.evernote.thrift.protocol.TBinaryProtocol;
 import com.evernote.thrift.transport.TTransportException;
 
-import java.io.File;
-import java.util.Locale;
-
 /**
  * Represents a session with the Evernote web service API. Used to authenticate
  * to the service via OAuth and obtain NoteStore.Client objects, which are used
@@ -138,7 +138,7 @@ public static EvernoteSession init(Context ctx,
     }
     return sInstance;
   }
-
+  
   /**
    * Used to access the initialized EvernoteSession singleton instance.
    *
@@ -166,7 +166,7 @@ private EvernoteSession(Context ctx, String consumerKey, String consumerSecret,
       mDataDirectory = ctx.getFilesDir();
     }
   }
-
+  
   /**
    * Restore an AuthenticationResult from shared preferences.
    * @return The restored AuthenticationResult, or null if the preferences
@@ -186,7 +186,7 @@ private AuthenticationResult getAuthenticationResult(SharedPreferences prefs) {
     }
     return new AuthenticationResult(authToken, notestoreUrl, webApiUrlPrefix, userId);
   }
-
+  
   /**
    * Check whether the session has valid authentication information
    * that will allow successful API calls to be made.
@@ -392,4 +392,46 @@ protected boolean persistAuthenticationToken(Context ctx, EvernoteAuthToken auth
             authToken.getUserId());
     return true;
   }
+  	
+  // KAWET AUTH
+  public static EvernoteSession initKawet(Context ctx, String consumerKey, String consumerSecret, String evernoteHost, AuthData authData) 
+  {
+	//if (sInstance == null) 
+	sInstance = new EvernoteSession(ctx, consumerKey, consumerSecret, evernoteHost, authData);
+	return sInstance;
+  }
+  
+  private EvernoteSession(Context ctx, String consumerKey, String consumerSecret, String evernoteHost, AuthData authData) 
+  {
+	mConsumerKey = consumerKey;
+	mConsumerSecret = consumerSecret;
+	mEvernoteHost = evernoteHost;
+	initUserAgentString(ctx);
+	this.mAuthenticationResult = getAuthenticationResultKawet(authData);
+	mDataDirectory = ctx.getFilesDir();
+  }
+  
+  private AuthenticationResult getAuthenticationResultKawet(AuthData authData)
+  {
+    String authToken = authData.authToken;
+    String notestoreUrl = authData.noteStoreUrl;
+    String webApiUrlPrefix = authData.webApiUrlPrefix;
+    int userId = authData.UserId;
+
+    if (TextUtils.isEmpty(authToken) ||
+        TextUtils.isEmpty(notestoreUrl) ||
+        TextUtils.isEmpty(webApiUrlPrefix) ||
+        userId == -1) {
+      return null;
+    }
+    return new AuthenticationResult(authToken, notestoreUrl, webApiUrlPrefix, userId);
+  }
+  
+  public static class AuthData
+  {
+	 public String	authToken		= "";
+	 public String	noteStoreUrl	= "";
+	 public String	webApiUrlPrefix	= "";
+	 public int		UserId			= -1;
+  }
 }
