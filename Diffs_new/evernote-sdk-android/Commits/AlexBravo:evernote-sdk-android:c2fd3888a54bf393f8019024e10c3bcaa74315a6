diff --git a/README.md b/README.md
index 2796cca..6c8fec8 100644
--- a/README.md
+++ b/README.md
@@ -10,7 +10,89 @@ This SDK wraps the [Evernote Cloud API ](http://dev.evernote.com/documentation/c
 
 Prerequisites
 -------------
+<<<<<<< Updated upstream
 In order to use the code in this SDK, you need to obtain an API key from https://dev.evernote.com/doc/. You'll also find full API documentation on that page.
+=======
+In order to use the code in this SDK, you need to obtain an API key from http://dev.evernote.com/documentation/cloud. You'll also find full API documentation on that page.
+
+In order to run the sample code, you need a user account on the sandbox service where you will do your development. Sign up for an account at https://sandbox.evernote.com/Registration.action
+
+The instructions below assume you have the latest [Android SDK](http://developer.android.com/sdk/index.html) and [API 17](http://developer.android.com/tools/revisions/platforms.html#4.2) installed. The instructions for eclipse are based on [Eclipse Juno](http://www.eclipse.org/downloads/) and [latest Android development tools](http://developer.android.com/tools/sdk/eclipse-adt.html). The instructions for Intellij are based on [Intellij IDEA 12 Community Edition](http://www.jetbrains.com/idea/download/index.html) and is our recommended IDE.
+
+
+Sample App
+----------
+The sample application HelloEDAM demonstrates how to use the Evernote SDK for Android to authentication to the Evernote service using OAuth, then access the user's Evernote account. The sample code provides mutliple activities that show notebook listing, note creation, and resource creation in two scenarios: A plain text note creator and an image saver.
+
+###  Running the sample app from Eclipse
+To build and run the sample project from Eclipse:
+
+1. Open Eclipse
+2. From the File menu, choose New and then Project...
+3. Under Android, select "Android Project from Existing Code" and click Next
+4. Click Browse
+5. Select the SDK root directory (the directory containing this README) and click OK
+6. Click Finish
+7. Right click HelloEDAM, click properties, click Java Build Path, click the Projects tab,
+8. Click Add and select library, click ok to accept changes.
+9. From the Package Explorer, expand the HelloEDAM project's `src` directory and open `com.evernote.android.sample.ParentActivity.java`
+10. At the top of `ParentActivity.java`, fill in your Evernote API consumer key and secret.
+11. Build and run the project
+
+###  Running the sample app from Intellij
+To build and run the sample project from Intellij:
+
+1. Open Intellij
+2. From the File menu, choose Import Project...
+3. Select the SDK root directory (the directory containing this README) and click Open
+4. Select Create project from existing sources and Click Next
+5. Click Next, Next, Next, Next
+6. Select Android 4.2 Google APIs and click Next
+7. Click Finish
+8. From the Project Explorer, expand the HelloEDAM project's `src` directory and open `com.evernote.android.sample.ParentActivity.java`
+9. At the top of `ParentActivity.java`, fill in your Evernote API consumer key and secret.
+10. Build and run the project
+
+
+Using the SDK in your app
+-------------------------
+There are two ways to include the SDK in your project: by including and building the Android Library Project in your IDE or by using Maven.
+
+### Include the Android Library Project in your Eclipse workspace
+
+1. Import the Android Library Project
+   1. Open Eclipse
+   2. From the File menu, choose New and then Project...
+   3. Under Android, select "Android Project from Existing Code" and click Next
+   4. Click Browse
+   5. Select the library directory and click Open
+   6. Click Finish
+1. Add the Android Library Project as a dependency in your app
+   7. Right-click on your project and choose "Properties"
+   8. In the Android section, in the Library area, click Add...
+   9. Select library from the list and click OK
+   10. Click Java Build Path and then select the Projects tab
+   11. Click Add...
+   12. Select Library and click OK
+   13. Click OK
+
+### Include the Android Library Project in your Intellij workspace
+
+1. Right click your project and choose Open Module Properties
+2. Select the Plus Icon (Add) at the top and choose Import Module
+3. Select the library directory and click OK
+4. Click Next, Next, Next, Next
+5. Click Finish
+6. Click your project and select the Dependencies tab
+7. Click the Plus Icon (Add) at the bottom and select 3 Module Dependency
+8. Select library and click OK
+
+### Use Maven
+
+If you build your app using Maven, you can simply add the Evernote SDK for Android as a dependency in your pom.xml.
+
+Add the Evernote SDK for Android as a dependency:
+>>>>>>> Stashed changes
 
 In order to run the demo code, you need a user account on the sandbox service where you will do your development. Sign up for an account at https://sandbox.evernote.com/Registration.action
 
diff --git a/library/AndroidManifest.xml b/library/AndroidManifest.xml
new file mode 100644
index 0000000..91d4024
--- /dev/null
+++ b/library/AndroidManifest.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.evernote.androidsdk"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-sdk android:minSdkVersion="5" android:targetSdkVersion="21"/>
+</manifest>
diff --git a/samples/HelloEDAM/AndroidManifest.xml b/samples/HelloEDAM/AndroidManifest.xml
new file mode 100644
index 0000000..c9b1a79
--- /dev/null
+++ b/samples/HelloEDAM/AndroidManifest.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="com.evernote.android.sample"
+      android:versionCode="1"
+      android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-sdk android:minSdkVersion="5" android:targetSdkVersion="21"/>
+
+    <application android:icon="@drawable/icon" android:label="@string/app_name">
+        <activity android:name=".HelloEDAM"
+                  android:label="@string/app_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <activity
+                android:name="com.evernote.client.android.EvernoteOAuthActivity"
+            android:configChanges="orientation|keyboardHidden"/>
+        <activity
+            android:name=".ImagePicker"
+            android:label="@string/image_picker"
+            android:configChanges="orientation|keyboardHidden"/>
+        <activity
+            android:name=".SimpleNote"
+            android:label="@string/simple_note" />
+        <activity
+            android:name=".SearchNotes"
+            android:label="@string/search_notes">
+                <intent-filter>
+                     <action android:name="android.intent.action.SEARCH" />
+                </intent-filter>
+                <meta-data android:name="android.app.searchable" android:resource="@xml/searchable" />
+        </activity>
+        <activity android:name=".ParentActivity"
+            android:configChanges="orientation|keyboardHidden"/>
+    </application>
+</manifest>
diff --git a/samples/HelloEDAM/res/layout/simple_note.xml b/samples/HelloEDAM/res/layout/simple_note.xml
new file mode 100644
index 0000000..1b95b10
--- /dev/null
+++ b/samples/HelloEDAM/res/layout/simple_note.xml
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <EditText
+        android:id="@+id/text_title"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="10dip"
+        android:layout_marginRight="10dip"
+        android:layout_marginTop="10dip"
+        android:singleLine="true"
+        android:hint="@string/title"
+        />
+
+    <EditText
+        android:id="@+id/text_content"
+        android:layout_width="match_parent"
+        android:layout_height="0dip"
+        android:layout_weight="1"
+        android:layout_margin="10dip"
+        android:gravity="top"
+        android:hint="@string/content"
+        android:inputType="text"
+        />
+
+    <LinearLayout android:id="@+id/image_button_wrapper"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_gravity="bottom"
+        android:gravity="center"
+        android:background="#cccccccc"
+        android:padding="3dp">
+        <Button
+            android:id="@+id/select_button"
+            android:layout_height="wrap_content"
+            android:layout_width="0dp"
+            android:text="@string/label_select_notebook_button"
+            android:onClick="selectNotebook"
+            android:layout_weight="1"/>
+
+        <Button
+            android:id="@+id/save_button"
+            android:layout_height="wrap_content"
+            android:layout_width="0dp"
+            android:text="@string/label_save_button"
+            android:onClick="saveNote"
+            android:layout_weight="1"/>
+
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/samples/HelloEDAM/src/com/evernote/android/sample/ParentActivity.java b/samples/HelloEDAM/src/com/evernote/android/sample/ParentActivity.java
new file mode 100644
index 0000000..7aa8773
--- /dev/null
+++ b/samples/HelloEDAM/src/com/evernote/android/sample/ParentActivity.java
@@ -0,0 +1,178 @@
+/*
+ * Copyright 2012 Evernote Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.evernote.android.sample;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.app.ProgressDialog;
+import android.os.Bundle;
+import android.util.Log;
+import android.util.Pair;
+import android.widget.Toast;
+
+import com.evernote.client.android.AsyncLinkedNoteStoreClient;
+import com.evernote.client.android.EvernoteSession;
+import com.evernote.client.android.OnClientCallback;
+import com.evernote.edam.type.LinkedNotebook;
+import com.evernote.edam.type.Note;
+import com.evernote.thrift.transport.TTransportException;
+
+import java.util.List;
+
+/**
+ * This is the parent activity that all sample activites extend from. This creates the Evernote Session in onCreate
+ * and stores the CONSUMER_KEY and CONSUMER_SECRET
+ *
+ * In this example, it also takes care of dialogs
+ */
+public class ParentActivity extends Activity {
+
+  private static final String LOGTAG = "ParentActivity";
+  /**
+   * ************************************************************************
+   * You MUST change the following values to run this sample application.    *
+   * *************************************************************************
+   */
+
+  // Your Evernote API key. See http://dev.evernote.com/documentation/cloud/
+  // Please obfuscate your code to help keep these values secret.
+  private static final String CONSUMER_KEY = "alexbravo";
+  private static final String CONSUMER_SECRET = "37ff6b2326a53bf2";
+
+    // Initial development is done on Evernote's testing service, the sandbox.
+  // Change to HOST_PRODUCTION to use the Evernote production service
+  // once your code is complete, or HOST_CHINA to use the Yinxiang Biji
+  // (Evernote China) production service.
+  private static final EvernoteSession.EvernoteService EVERNOTE_SERVICE = EvernoteSession.EvernoteService.SANDBOX;
+
+  // Set this to true if you want to allow linked notebooks for accounts that can only access a single
+  // notebook.
+  private static final boolean SUPPORT_APP_LINKED_NOTEBOOKS = true;
+
+  /**
+   * ************************************************************************
+   * The following values are simply part of the demo application.           *
+   * *************************************************************************
+   */
+
+  protected EvernoteSession mEvernoteSession;
+  protected final int DIALOG_PROGRESS = 101;
+
+  public void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    //Set up the Evernote Singleton Session
+    mEvernoteSession = EvernoteSession.getInstance(this, CONSUMER_KEY, CONSUMER_SECRET, EVERNOTE_SERVICE, SUPPORT_APP_LINKED_NOTEBOOKS);
+  }
+
+  // using createDialog, could use Fragments instead
+  @SuppressWarnings("deprecation")
+  @Override
+  protected Dialog onCreateDialog(int id) {
+    switch (id) {
+      case DIALOG_PROGRESS:
+        return new ProgressDialog(ParentActivity.this);
+    }
+    return super.onCreateDialog(id);
+  }
+
+  @Override
+  @SuppressWarnings("deprecation")
+  protected void onPrepareDialog(int id, Dialog dialog) {
+    switch (id) {
+      case DIALOG_PROGRESS:
+        ((ProgressDialog) dialog).setIndeterminate(true);
+        dialog.setCancelable(false);
+        ((ProgressDialog) dialog).setMessage(getString(R.string.esdk__loading));
+    }
+  }
+
+  /**
+   * Helper method for apps that have access to a single notebook, and that notebook is a linked
+   * notebook ... find that notebook, gets access to it, and calls back to the caller.
+   * @param callback invoked on error or with a client to the linked notebook
+   */
+  protected void invokeOnAppLinkedNotebook(final OnClientCallback<Pair<AsyncLinkedNoteStoreClient, LinkedNotebook>> callback) {
+    try {
+      // We need to get the one and only linked notebook
+      mEvernoteSession.getClientFactory().createNoteStoreClient().listLinkedNotebooks(new OnClientCallback<List<LinkedNotebook>>() {
+        @Override
+        public void onSuccess(List<LinkedNotebook> linkedNotebooks) {
+          // We should only have one linked notebook
+          if (linkedNotebooks.size() != 1) {
+            Log.e(LOGTAG, "Error getting linked notebook - more than one linked notebook");
+            callback.onException(new Exception("Not single linked notebook"));
+          } else {
+            final LinkedNotebook linkedNotebook = linkedNotebooks.get(0);
+            mEvernoteSession.getClientFactory().createLinkedNoteStoreClientAsync(linkedNotebook, new OnClientCallback<AsyncLinkedNoteStoreClient>() {
+              @Override
+              public void onSuccess(AsyncLinkedNoteStoreClient asyncLinkedNoteStoreClient) {
+                // Finally create the note in the linked notebook
+                callback.onSuccess(new Pair<AsyncLinkedNoteStoreClient, LinkedNotebook>(asyncLinkedNoteStoreClient, linkedNotebook));
+              }
+
+              @Override
+              public void onException(Exception exception) {
+                callback.onException(exception);
+              }
+            });
+          }
+        }
+
+        @Override
+        public void onException(Exception exception) {
+          callback.onException(exception);
+        }
+      });
+    } catch (TTransportException exception) {
+      callback.onException(exception);
+    }
+  }
+
+  /**
+   * Creates the specified note in an app's linked notebook.  Used when an app only has access to
+   * a single notebook, and that notebook is a linked notebook.
+   * @param note the note to be created
+   * @param createNoteCallback called on success or failure
+   */
+  protected void createNoteInAppLinkedNotebook(final Note note, final OnClientCallback<Note> createNoteCallback) {
+    showDialog(DIALOG_PROGRESS);
+    invokeOnAppLinkedNotebook(new OnClientCallback<Pair<AsyncLinkedNoteStoreClient, LinkedNotebook>>() {
+      @Override
+      public void onSuccess(final Pair<AsyncLinkedNoteStoreClient, LinkedNotebook> pair) {
+        // Rely on the callback to dismiss the dialog
+        pair.first.createNoteAsync(note, pair.second, createNoteCallback);
+      }
+
+      @Override
+      public void onException(Exception exception) {
+        Log.e(LOGTAG, "Error creating linked notestore", exception);
+        Toast.makeText(getApplicationContext(), R.string.error_creating_notestore, Toast.LENGTH_LONG).show();
+        removeDialog(DIALOG_PROGRESS);
+      }
+    });
+  }
+}
